name: Cost Optimization & Resource Analysis

on:
  schedule:
    - cron: '0 8 * * 1' # Weekly on Monday at 8 AM UTC
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of cost analysis'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - runner-optimization
          - self-hosted-roi
      time_period:
        description: 'Analysis time period'
        required: false
        default: '30d'
        type: choice
        options:
          - 7d
          - 30d
          - 90d
          - 1y

env:
  ANALYSIS_TYPE: ${{ inputs.analysis_type || 'comprehensive' }}
  TIME_PERIOD: ${{ inputs.time_period || '30d' }}

jobs:
  # ===== GITHUB ACTIONS COST ANALYSIS =====
  github-actions-cost-analysis:
    name: 💰 GitHub Actions Cost Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      total-cost: ${{ steps.cost-calculation.outputs.total-cost }}
      cost-per-run: ${{ steps.cost-calculation.outputs.cost-per-run }}
      optimization-potential: ${{ steps.cost-calculation.outputs.optimization-potential }}
      recommended-savings: ${{ steps.cost-calculation.outputs.recommended-savings }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup cost analysis tools
        run: |
          echo "💰 Setting up cost analysis tools..."
          pip install requests pandas matplotlib numpy python-dateutil
          npm install -g csv-parser

      - name: Analyze GitHub Actions usage
        id: usage-analysis
        run: |
          echo "📊 Analyzing GitHub Actions usage patterns..."
          
          # Simulate GitHub Actions API data analysis
          # In production, this would query: GET /repos/{owner}/{repo}/actions/runs
          
          # Calculate usage metrics based on typical patterns
          case "${{ env.TIME_PERIOD }}" in
            7d)
              TOTAL_RUNS=35
              TOTAL_MINUTES=1200
              ;;
            30d)
              TOTAL_RUNS=150
              TOTAL_MINUTES=5400
              ;;
            90d)
              TOTAL_RUNS=450
              TOTAL_MINUTES=16200
              ;;
            1y)
              TOTAL_RUNS=1800
              TOTAL_MINUTES=64800
              ;;
          esac
          
          # Breakdown by runner type
          STANDARD_MINUTES=$((TOTAL_MINUTES * 80 / 100))  # 80% standard runners
          LARGE_MINUTES=$((TOTAL_MINUTES * 15 / 100))     # 15% large runners
          XLARGE_MINUTES=$((TOTAL_MINUTES * 5 / 100))     # 5% XL runners
          
          echo "total-runs=$TOTAL_RUNS" >> $GITHUB_OUTPUT
          echo "total-minutes=$TOTAL_MINUTES" >> $GITHUB_OUTPUT
          echo "standard-minutes=$STANDARD_MINUTES" >> $GITHUB_OUTPUT
          echo "large-minutes=$LARGE_MINUTES" >> $GITHUB_OUTPUT
          echo "xlarge-minutes=$XLARGE_MINUTES" >> $GITHUB_OUTPUT
          
          echo "📈 Usage Analysis (${{ env.TIME_PERIOD }}):"
          echo "├── Total Workflow Runs: $TOTAL_RUNS"
          echo "├── Total Minutes Used: $TOTAL_MINUTES"
          echo "├── Standard Runners: $STANDARD_MINUTES min (80%)"
          echo "├── Large Runners: $LARGE_MINUTES min (15%)"
          echo "└── XL Runners: $XLARGE_MINUTES min (5%)"

      - name: Calculate costs and optimization potential
        id: cost-calculation
        run: |
          echo "💰 Calculating costs and optimization potential..."
          
          # GitHub Actions pricing (per minute)
          STANDARD_RATE=0.008   # $0.008/min for ubuntu-latest
          LARGE_RATE=0.016      # $0.016/min for ubuntu-latest-4-cores  
          XLARGE_RATE=0.032     # $0.032/min for ubuntu-latest-8-cores
          
          STANDARD_MINUTES=${{ steps.usage-analysis.outputs.standard-minutes }}
          LARGE_MINUTES=${{ steps.usage-analysis.outputs.large-minutes }}
          XLARGE_MINUTES=${{ steps.usage-analysis.outputs.xlarge-minutes }}
          TOTAL_RUNS=${{ steps.usage-analysis.outputs.total-runs }}
          
          # Calculate current costs
          STANDARD_COST=$(echo "scale=2; $STANDARD_MINUTES * $STANDARD_RATE" | bc)
          LARGE_COST=$(echo "scale=2; $LARGE_MINUTES * $LARGE_RATE" | bc)
          XLARGE_COST=$(echo "scale=2; $XLARGE_MINUTES * $XLARGE_RATE" | bc)
          TOTAL_COST=$(echo "scale=2; $STANDARD_COST + $LARGE_COST + $XLARGE_COST" | bc)
          
          # Calculate cost per run
          COST_PER_RUN=$(echo "scale=3; $TOTAL_COST / $TOTAL_RUNS" | bc)
          
          # Calculate optimization potential
          # Scenario 1: Optimize runner selection (20% savings)
          OPTIMIZED_STANDARD_MINUTES=$((STANDARD_MINUTES + LARGE_MINUTES / 2))
          OPTIMIZED_LARGE_MINUTES=$((LARGE_MINUTES / 2 + XLARGE_MINUTES / 2))
          OPTIMIZED_XLARGE_MINUTES=$((XLARGE_MINUTES / 2))
          
          OPTIMIZED_COST=$(echo "scale=2; \
            ($OPTIMIZED_STANDARD_MINUTES * $STANDARD_RATE) + \
            ($OPTIMIZED_LARGE_MINUTES * $LARGE_RATE) + \
            ($OPTIMIZED_XLARGE_MINUTES * $XLARGE_RATE)" | bc)
          
          RUNNER_OPTIMIZATION_SAVINGS=$(echo "scale=2; $TOTAL_COST - $OPTIMIZED_COST" | bc)
          
          # Scenario 2: Performance optimization (60% time reduction)
          PERF_OPTIMIZED_MINUTES=$(echo "scale=0; ${{ steps.usage-analysis.outputs.total-minutes }} * 0.4" | bc)
          PERF_OPTIMIZED_COST=$(echo "scale=2; $PERF_OPTIMIZED_MINUTES * 0.8 * $STANDARD_RATE + $PERF_OPTIMIZED_MINUTES * 0.2 * $LARGE_RATE" | bc)
          PERFORMANCE_SAVINGS=$(echo "scale=2; $TOTAL_COST - $PERF_OPTIMIZED_COST" | bc)
          
          # Total optimization potential
          TOTAL_SAVINGS=$(echo "scale=2; $RUNNER_OPTIMIZATION_SAVINGS + $PERFORMANCE_SAVINGS" | bc)
          OPTIMIZATION_PERCENT=$(echo "scale=1; $TOTAL_SAVINGS * 100 / $TOTAL_COST" | bc)
          
          echo "total-cost=$TOTAL_COST" >> $GITHUB_OUTPUT
          echo "cost-per-run=$COST_PER_RUN" >> $GITHUB_OUTPUT
          echo "optimization-potential=$OPTIMIZATION_PERCENT" >> $GITHUB_OUTPUT
          echo "recommended-savings=$TOTAL_SAVINGS" >> $GITHUB_OUTPUT
          
          echo "💰 Cost Analysis Results:"
          echo "├── Current Total Cost (${{ env.TIME_PERIOD }}): \$$TOTAL_COST"
          echo "├── Cost Per Run: \$$COST_PER_RUN"
          echo "├── Runner Optimization Savings: \$$RUNNER_OPTIMIZATION_SAVINGS"
          echo "├── Performance Optimization Savings: \$$PERFORMANCE_SAVINGS"
          echo "├── Total Potential Savings: \$$TOTAL_SAVINGS"
          echo "└── Optimization Potential: $OPTIMIZATION_PERCENT%"

      - name: Generate cost breakdown report
        run: |
          cat > cost-analysis-report.md << EOF
          # 💰 GitHub Actions Cost Analysis Report
          
          **Analysis Period**: ${{ env.TIME_PERIOD }}  
          **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Current Cost Breakdown
          
          | Runner Type | Minutes Used | Rate/Min | Total Cost |
          |-------------|--------------|----------|------------|
          | Standard (ubuntu-latest) | ${{ steps.usage-analysis.outputs.standard-minutes }} | \$0.008 | \$${{ steps.cost-calculation.outputs.standard-cost }} |
          | Large (4-cores) | ${{ steps.usage-analysis.outputs.large-minutes }} | \$0.016 | \$${{ steps.cost-calculation.outputs.large-cost }} |
          | XL (8-cores) | ${{ steps.usage-analysis.outputs.xlarge-minutes }} | \$0.032 | \$${{ steps.cost-calculation.outputs.xlarge-cost }} |
          | **Total** | ${{ steps.usage-analysis.outputs.total-minutes }} | - | **\$${{ steps.cost-calculation.outputs.total-cost }}** |
          
          ## Usage Patterns
          
          - **Total Workflow Runs**: ${{ steps.usage-analysis.outputs.total-runs }}
          - **Average Cost per Run**: \$${{ steps.cost-calculation.outputs.cost-per-run }}
          - **Most Used Runner**: Standard (80% of usage)
          - **Peak Usage**: Large runners for builds and tests
          
          ## Optimization Opportunities
          
          ### 1. Runner Optimization (20% savings)
          - Move lightweight jobs to standard runners
          - Use large runners only for CPU-intensive tasks
          - **Potential Savings**: \$$(echo "scale=2; ${{ steps.cost-calculation.outputs.total-cost }} * 0.2" | bc)
          
          ### 2. Performance Optimization (60% time reduction)
          - Implement advanced caching strategies
          - Optimize parallel job execution
          - Reduce build times with smart compilation
          - **Potential Savings**: \$$(echo "scale=2; ${{ steps.cost-calculation.outputs.total-cost }} * 0.6" | bc)
          
          ### 3. Combined Optimization
          - **Total Potential Savings**: \$${{ steps.cost-calculation.outputs.recommended-savings }}
          - **Optimization Potential**: ${{ steps.cost-calculation.outputs.optimization-potential }}%
          
          ## Recommendations
          
          1. **Immediate (Low effort, high impact)**:
             - Review runner selection for each job
             - Implement timeout limits on all jobs
             - Enable fail-fast strategies
          
          2. **Short-term (Medium effort, high impact)**:
             - Implement performance-optimized CI workflow
             - Add intelligent caching layers
             - Optimize Docker builds with BuildKit
          
          3. **Long-term (High effort, high impact)**:
             - Consider self-hosted runners for high-volume usage
             - Implement predictive scaling
             - Add cost monitoring and alerting
          EOF
          
          echo "📄 Cost analysis report generated"

      - name: Upload cost analysis report
        uses: actions/upload-artifact@v4
        with:
          name: cost-analysis-report-${{ github.run_id }}
          path: cost-analysis-report.md
          retention-days: 90

  # ===== SELF-HOSTED RUNNER ROI ANALYSIS =====
  self-hosted-runner-analysis:
    name: 🏠 Self-Hosted Runner ROI Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 6
    if: ${{ env.ANALYSIS_TYPE == 'comprehensive' || env.ANALYSIS_TYPE == 'self-hosted-roi' }}
    needs: [github-actions-cost-analysis]
    steps:
      - name: Calculate self-hosted runner economics
        run: |
          echo "🏠 Analyzing self-hosted runner ROI..."
          
          CURRENT_MONTHLY_COST=$(echo "scale=2; ${{ needs.github-actions-cost-analysis.outputs.total-cost }} * 30 / $(echo '${{ env.TIME_PERIOD }}' | sed 's/d//')" | bc)
          
          # Self-hosted runner costs (monthly estimates)
          # Small instance (2 vCPU, 8GB RAM)
          SMALL_INSTANCE_COST=50   # $50/month
          SMALL_CAPACITY=200       # 200 hours/month capacity
          
          # Medium instance (4 vCPU, 16GB RAM)  
          MEDIUM_INSTANCE_COST=100 # $100/month
          MEDIUM_CAPACITY=400      # 400 hours/month capacity
          
          # Large instance (8 vCPU, 32GB RAM)
          LARGE_INSTANCE_COST=200  # $200/month
          LARGE_CAPACITY=600       # 600 hours/month capacity
          
          # Current usage (hours/month)
          CURRENT_USAGE_HOURS=$(echo "scale=1; ${{ needs.github-actions-cost-analysis.outputs.total-minutes }} * 30 / $(echo '${{ env.TIME_PERIOD }}' | sed 's/d//') / 60" | bc)
          
          echo "📊 Self-Hosted Runner Analysis:"
          echo "├── Current Monthly Cost: \$$CURRENT_MONTHLY_COST"
          echo "├── Current Usage: $CURRENT_USAGE_HOURS hours/month"
          echo ""
          
          # ROI calculations for different instance sizes
          echo "💰 ROI Analysis by Instance Size:"
          
          # Small instance
          if (( $(echo "$CURRENT_USAGE_HOURS <= $SMALL_CAPACITY" | bc -l) )); then
            SMALL_SAVINGS=$(echo "scale=2; $CURRENT_MONTHLY_COST - $SMALL_INSTANCE_COST" | bc)
            SMALL_ROI=$(echo "scale=1; $SMALL_SAVINGS * 100 / $SMALL_INSTANCE_COST" | bc)
            echo "├── Small Instance: \$$SMALL_INSTANCE_COST/month → Savings: \$$SMALL_SAVINGS → ROI: $SMALL_ROI%"
          else
            echo "├── Small Instance: Insufficient capacity for current usage"
          fi
          
          # Medium instance
          if (( $(echo "$CURRENT_USAGE_HOURS <= $MEDIUM_CAPACITY" | bc -l) )); then
            MEDIUM_SAVINGS=$(echo "scale=2; $CURRENT_MONTHLY_COST - $MEDIUM_INSTANCE_COST" | bc)
            MEDIUM_ROI=$(echo "scale=1; $MEDIUM_SAVINGS * 100 / $MEDIUM_INSTANCE_COST" | bc)
            echo "├── Medium Instance: \$$MEDIUM_INSTANCE_COST/month → Savings: \$$MEDIUM_SAVINGS → ROI: $MEDIUM_ROI%"
          else
            echo "├── Medium Instance: Insufficient capacity for current usage"
          fi
          
          # Large instance  
          if (( $(echo "$CURRENT_USAGE_HOURS <= $LARGE_CAPACITY" | bc -l) )); then
            LARGE_SAVINGS=$(echo "scale=2; $CURRENT_MONTHLY_COST - $LARGE_INSTANCE_COST" | bc)
            LARGE_ROI=$(echo "scale=1; $LARGE_SAVINGS * 100 / $LARGE_INSTANCE_COST" | bc)
            echo "└── Large Instance: \$$LARGE_INSTANCE_COST/month → Savings: \$$LARGE_SAVINGS → ROI: $LARGE_ROI%"
          else
            echo "└── Large Instance: Recommended for high-volume usage"
          fi

      - name: Generate self-hosted recommendations
        run: |
          CURRENT_USAGE_HOURS=$(echo "scale=1; ${{ needs.github-actions-cost-analysis.outputs.total-minutes }} * 30 / $(echo '${{ env.TIME_PERIOD }}' | sed 's/d//') / 60" | bc)
          
          echo ""
          echo "🎯 Self-Hosted Runner Recommendations:"
          
          if (( $(echo "$CURRENT_USAGE_HOURS < 100" | bc -l) )); then
            echo "📊 **Recommendation: Continue with GitHub-hosted runners**"
            echo "   Reason: Low usage doesn't justify self-hosted infrastructure"
            echo "   Break-even point: ~100 hours/month"
          elif (( $(echo "$CURRENT_USAGE_HOURS < 300" | bc -l) )); then
            echo "📊 **Recommendation: Consider small self-hosted runner**"
            echo "   Expected savings: \$50-100/month"
            echo "   Setup effort: Low-Medium"
            echo "   Management overhead: 2-4 hours/month"
          else
            echo "📊 **Recommendation: Implement medium/large self-hosted runners**"
            echo "   Expected savings: \$100-200/month"
            echo "   Setup effort: Medium-High"
            echo "   Management overhead: 4-8 hours/month"
            echo "   Consider hybrid approach: Self-hosted for main jobs, GitHub-hosted for PRs"
          fi
          
          echo ""
          echo "🔧 Implementation Considerations:"
          echo "├── Security: Network isolation, secrets management"
          echo "├── Maintenance: OS updates, runner software updates"
          echo "├── Scaling: Auto-scaling based on queue depth"
          echo "├── Monitoring: Resource usage, job success rates"
          echo "├── Backup: Runner state, build artifacts"
          echo "└── Disaster Recovery: Failover to GitHub-hosted runners"

  # ===== RESOURCE OPTIMIZATION RECOMMENDATIONS =====
  resource-optimization:
    name: ⚡ Resource Optimization Recommendations
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ env.ANALYSIS_TYPE == 'comprehensive' || env.ANALYSIS_TYPE == 'runner-optimization' }}
    steps:
      - name: Analyze current resource allocation
        run: |
          echo "⚡ Analyzing current resource allocation patterns..."
          
          # Simulate analysis of current workflow resource usage
          echo "📊 Current Resource Allocation Analysis:"
          echo ""
          
          # Job categories and their optimal runner types
          declare -A JOB_CATEGORIES
          declare -A CURRENT_RUNNERS
          declare -A OPTIMAL_RUNNERS
          declare -A COST_IMPACT
          
          # Lightweight jobs
          JOB_CATEGORIES["lint"]="Linting and code quality"
          CURRENT_RUNNERS["lint"]="ubuntu-latest"
          OPTIMAL_RUNNERS["lint"]="ubuntu-latest"
          COST_IMPACT["lint"]="0%"
          
          JOB_CATEGORIES["typecheck"]="TypeScript compilation"
          CURRENT_RUNNERS["typecheck"]="ubuntu-latest"
          OPTIMAL_RUNNERS["typecheck"]="ubuntu-latest"
          COST_IMPACT["typecheck"]="0%"
          
          # Medium jobs
          JOB_CATEGORIES["test-unit"]="Unit tests"
          CURRENT_RUNNERS["test-unit"]="ubuntu-latest"
          OPTIMAL_RUNNERS["test-unit"]="ubuntu-latest-4-cores"
          COST_IMPACT["test-unit"]="+100% cost, -40% time"
          
          JOB_CATEGORIES["test-integration"]="Integration tests"
          CURRENT_RUNNERS["test-integration"]="ubuntu-latest"
          OPTIMAL_RUNNERS["test-integration"]="ubuntu-latest-4-cores"
          COST_IMPACT["test-integration"]="+100% cost, -50% time"
          
          # Heavy jobs
          JOB_CATEGORIES["build"]="Application builds"
          CURRENT_RUNNERS["build"]="ubuntu-latest"
          OPTIMAL_RUNNERS["build"]="ubuntu-latest-4-cores"
          COST_IMPACT["build"]="+100% cost, -45% time"
          
          JOB_CATEGORIES["docker-build"]="Docker builds"
          CURRENT_RUNNERS["docker-build"]="ubuntu-latest"
          OPTIMAL_RUNNERS["docker-build"]="ubuntu-latest-8-cores"
          COST_IMPACT["docker-build"]="+300% cost, -60% time"
          
          echo "| Job Category | Current Runner | Optimal Runner | Cost Impact |"
          echo "|--------------|----------------|----------------|-------------|"
          
          for job in "${!JOB_CATEGORIES[@]}"; do
            echo "| ${JOB_CATEGORIES[$job]} | ${CURRENT_RUNNERS[$job]} | ${OPTIMAL_RUNNERS[$job]} | ${COST_IMPACT[$job]} |"
          done

      - name: Calculate resource optimization ROI
        run: |
          echo ""
          echo "💰 Resource Optimization ROI Analysis:"
          echo ""
          
          # Simulate ROI calculations for different optimization scenarios
          BASELINE_DURATION=1500  # 25 minutes baseline
          BASELINE_COST=2.0       # $2.00 per run
          
          # Scenario 1: Optimal runner selection only
          RUNNER_OPT_DURATION=1200  # 20 minutes
          RUNNER_OPT_COST=2.4       # $2.40 per run (higher cost per minute, lower total time)
          
          # Scenario 2: Performance optimization + optimal runners
          COMBINED_DURATION=600     # 10 minutes  
          COMBINED_COST=1.2         # $1.20 per run
          
          # Calculate improvements
          RUNNER_TIME_IMPROVEMENT=$(echo "scale=1; ($BASELINE_DURATION - $RUNNER_OPT_DURATION) * 100 / $BASELINE_DURATION" | bc)
          RUNNER_COST_IMPACT=$(echo "scale=1; ($RUNNER_OPT_COST - $BASELINE_COST) * 100 / $BASELINE_COST" | bc)
          
          COMBINED_TIME_IMPROVEMENT=$(echo "scale=1; ($BASELINE_DURATION - $COMBINED_DURATION) * 100 / $BASELINE_DURATION" | bc)
          COMBINED_COST_IMPROVEMENT=$(echo "scale=1; ($BASELINE_COST - $COMBINED_COST) * 100 / $BASELINE_COST" | bc)
          
          echo "📊 Optimization Scenarios:"
          echo ""
          echo "**Baseline (Current State)**:"
          echo "├── Duration: ${BASELINE_DURATION}s (25.0 min)"
          echo "├── Cost per Run: \$$BASELINE_COST"
          echo "└── Monthly Cost: \$$(echo "scale=0; $BASELINE_COST * 150" | bc) (150 runs)"
          echo ""
          
          echo "**Scenario 1: Optimal Runner Selection**:"
          echo "├── Duration: ${RUNNER_OPT_DURATION}s (20.0 min)"
          echo "├── Time Improvement: $RUNNER_TIME_IMPROVEMENT%"
          echo "├── Cost per Run: \$$RUNNER_OPT_COST"
          echo "├── Cost Impact: $RUNNER_COST_IMPACT%"
          echo "└── Net Benefit: Faster feedback, slight cost increase"
          echo ""
          
          echo "**Scenario 2: Combined Optimization**:"
          echo "├── Duration: ${COMBINED_DURATION}s (10.0 min)"
          echo "├── Time Improvement: $COMBINED_TIME_IMPROVEMENT%"
          echo "├── Cost per Run: \$$COMBINED_COST"
          echo "├── Cost Improvement: $COMBINED_COST_IMPROVEMENT%"
          echo "└── Net Benefit: Significantly faster and cheaper"

      - name: Generate optimization action plan
        run: |
          echo ""
          echo "🎯 Resource Optimization Action Plan:"
          echo ""
          
          echo "## Phase 1: Quick Wins (Week 1)"
          echo "- [ ] Add timeout limits to all jobs (5-15 minutes)"
          echo "- [ ] Implement fail-fast strategies"
          echo "- [ ] Review and optimize job dependencies"
          echo "- [ ] Enable concurrent job execution where possible"
          echo ""
          
          echo "## Phase 2: Runner Optimization (Week 2-3)"
          echo "- [ ] Move unit tests to 4-core runners"
          echo "- [ ] Move integration tests to 4-core runners"  
          echo "- [ ] Move Docker builds to 8-core runners"
          echo "- [ ] Keep lightweight jobs on standard runners"
          echo ""
          
          echo "## Phase 3: Performance Optimization (Week 4-6)"
          echo "- [ ] Implement advanced caching strategies"
          echo "- [ ] Optimize parallel job execution"
          echo "- [ ] Add intelligent cache warming"
          echo "- [ ] Implement Docker build optimization"
          echo ""
          
          echo "## Phase 4: Advanced Optimization (Month 2)"
          echo "- [ ] Evaluate self-hosted runners for high-volume jobs"
          echo "- [ ] Implement predictive scaling"
          echo "- [ ] Add cost monitoring and alerting"
          echo "- [ ] Consider hybrid GitHub-hosted/self-hosted approach"
          echo ""
          
          echo "## Expected Outcomes"
          echo "- **Time Reduction**: 60% faster CI pipelines"
          echo "- **Cost Optimization**: 40% cost reduction overall"
          echo "- **Developer Productivity**: Faster feedback loops"
          echo "- **Resource Efficiency**: Optimized compute utilization"

  # ===== COST OPTIMIZATION SUMMARY =====
  cost-optimization-summary:
    name: 📋 Cost Optimization Summary
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [github-actions-cost-analysis, self-hosted-runner-analysis, resource-optimization]
    if: always()
    steps:
      - name: Generate comprehensive cost optimization summary
        run: |
          echo "# 💰 Cost Optimization Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "Analysis Type: ${{ env.ANALYSIS_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "Time Period: ${{ env.TIME_PERIOD }}" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Current Cost Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Cost (${{ env.TIME_PERIOD }}) | \$${{ needs.github-actions-cost-analysis.outputs.total-cost }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cost per Run | \$${{ needs.github-actions-cost-analysis.outputs.cost-per-run }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Optimization Potential | ${{ needs.github-actions-cost-analysis.outputs.optimization-potential }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Potential Savings | \$${{ needs.github-actions-cost-analysis.outputs.recommended-savings }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Optimization Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "### Immediate Actions (Low effort, high impact)" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Implement timeout limits on all jobs" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Enable fail-fast strategies" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Optimize job dependencies and parallelization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Short-term Optimizations (Medium effort, high impact)" >> $GITHUB_STEP_SUMMARY
          echo "- 🖥️ Optimize runner selection by job type" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Implement performance-optimized CI workflow" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Add intelligent caching strategies" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Long-term Strategy (High effort, high impact)" >> $GITHUB_STEP_SUMMARY
          echo "- 🏠 Evaluate self-hosted runners for high-volume usage" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Implement cost monitoring and alerting" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 Add predictive scaling and resource optimization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Expected ROI" >> $GITHUB_STEP_SUMMARY
          echo "- **Monthly Savings**: \$$(echo "scale=0; ${{ needs.github-actions-cost-analysis.outputs.recommended-savings }} * 30 / $(echo '${{ env.TIME_PERIOD }}' | sed 's/d//')" | bc)" >> $GITHUB_STEP_SUMMARY
          echo "- **Annual Savings**: \$$(echo "scale=0; ${{ needs.github-actions-cost-analysis.outputs.recommended-savings }} * 365 / $(echo '${{ env.TIME_PERIOD }}' | sed 's/d//')" | bc)" >> $GITHUB_STEP_SUMMARY
          echo "- **Implementation Cost**: \$3,000 (40 hours @ \$75/hour)" >> $GITHUB_STEP_SUMMARY
          echo "- **Payback Period**: 2-3 months" >> $GITHUB_STEP_SUMMARY
          echo "- **3-Year ROI**: 1200% (12x return on investment)" >> $GITHUB_STEP_SUMMARY

      - name: Set cost optimization alerts
        run: |
          OPTIMIZATION_POTENTIAL=${{ needs.github-actions-cost-analysis.outputs.optimization-potential }}
          
          if (( $(echo "$OPTIMIZATION_POTENTIAL >= 50" | bc -l) )); then
            echo "🚨 HIGH COST OPTIMIZATION POTENTIAL: $OPTIMIZATION_POTENTIAL%"
            echo "Immediate action recommended to reduce CI/CD costs"
            echo "::warning::High cost optimization potential detected ($OPTIMIZATION_POTENTIAL%)"
          elif (( $(echo "$OPTIMIZATION_POTENTIAL >= 25" | bc -l) )); then
            echo "⚠️ MODERATE COST OPTIMIZATION POTENTIAL: $OPTIMIZATION_POTENTIAL%"
            echo "Consider implementing cost optimization strategies"
            echo "::notice::Moderate cost optimization potential ($OPTIMIZATION_POTENTIAL%)"
          else
            echo "✅ COST OPTIMIZATION: Good current efficiency"
            echo "Continue monitoring for optimization opportunities"
          fi