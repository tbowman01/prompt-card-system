name: üöÄ Development Kickoff Automation

on:
  issues:
    types: [labeled]
  pull_request:
    types: [opened, closed]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  development_kickoff:
    name: üéØ Start Development Process
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && 
       (contains(github.event.issue.labels.*.name, 'status:ready') ||
        contains(github.event.issue.labels.*.name, 'priority:critical')))
    
    steps:
      - name: üèóÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: üåü Create Development Branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const title = issue.title.toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '')
              .replace(/\s+/g, '-')
              .substring(0, 40);
            
            const branchName = `feature/issue-${issueNumber}-${title}`;
            
            try {
              // Get the default branch
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const defaultBranch = repo.default_branch;
              
              // Get the SHA of the default branch
              const { data: ref } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${defaultBranch}`,
              });
              
              // Create new branch
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: ref.object.sha,
              });
              
              console.log(`Created branch: ${branchName}`);
              
              // Add comment with branch info
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `üåü **Development Started**

A development branch has been automatically created for this issue:
- **Branch:** \`${branchName}\`
- **Base:** \`${defaultBranch}\`

**Developer Quick Start:**
\`\`\`bash
git fetch origin
git checkout ${branchName}
npm install
npm run dev
\`\`\`

**Development Checklist:**
- [ ] Implement feature/fix
- [ ] Add/update tests
- [ ] Update documentation
- [ ] Ensure CI passes
- [ ] Create pull request

**Branch Naming Convention:** \`feature/issue-${issueNumber}-${title}\`

---
*Automated by Development Kickoff System*`
              });
              
            } catch (error) {
              console.log('Branch may already exist or error occurred:', error.message);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `‚ö†Ô∏è **Development Branch Creation Failed**

Could not automatically create development branch. This might be because:
- Branch already exists
- Insufficient permissions
- Network error

Please manually create a branch following this pattern:
\`feature/issue-${issueNumber}-${title}\`

---
*Automated by Development Kickoff System*`
              });
            }
            
      - name: üìã Create Development Checklist
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            const issueNumber = issue.number;
            
            let checklist = ['- [ ] Code implementation', '- [ ] Unit tests added/updated'];
            
            // Add component-specific checklist items
            if (labels.includes('component:frontend')) {
              checklist.push('- [ ] UI components tested');
              checklist.push('- [ ] Responsive design verified');
              checklist.push('- [ ] Accessibility standards met');
            }
            
            if (labels.includes('component:backend')) {
              checklist.push('- [ ] API endpoints documented');
              checklist.push('- [ ] Database migrations (if needed)');
              checklist.push('- [ ] Error handling implemented');
            }
            
            if (labels.includes('type:security')) {
              checklist.push('- [ ] Security review completed');
              checklist.push('- [ ] Vulnerability scan passed');
            }
            
            if (labels.includes('type:performance')) {
              checklist.push('- [ ] Performance benchmarks met');
              checklist.push('- [ ] Load testing completed');
            }
            
            checklist.push('- [ ] Integration tests passing');
            checklist.push('- [ ] Documentation updated');
            checklist.push('- [ ] Code review completed');
            checklist.push('- [ ] CI/CD pipeline passing');
            
            const checklistText = checklist.join('\n');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `üìã **Development Checklist**

${checklistText}

**Quality Gates:**
- All tests must pass
- Code coverage >= 80%
- No linting errors
- Security scan passed
- Performance benchmarks met

**Definition of Done:**
- Feature implemented as specified
- Tests written and passing
- Documentation updated
- Code reviewed and approved
- Deployed to staging environment

---
*Check off items as you complete them. The PR will be auto-approved once all critical items are completed.*`
            });
            
      - name: üè∑Ô∏è Update Issue Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            // Remove triage/ready status and add in-progress
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                name: 'status:ready'
              });
            } catch (error) {
              console.log('Ready label not found');
            }
            
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                name: 'status:triage'
              });
            } catch (error) {
              console.log('Triage label not found');
            }
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['status:in-progress']
            });
            
  pr_automation:
    name: üîÑ Pull Request Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üèóÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîó Link PR to Issue
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const prBody = pr.body || '';
            
            // Extract issue number from branch name
            const issueMatch = branchName.match(/issue-(\d+)/);
            
            if (issueMatch) {
              const issueNumber = issueMatch[1];
              
              // Check if PR body already references the issue
              if (!prBody.includes(`#${issueNumber}`) && !prBody.includes(`fixes #${issueNumber}`)) {
                const newBody = prBody + `\n\nCloses #${issueNumber}`;
                
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  body: newBody
                });
              }
              
              // Add comment to issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: `üîó **Pull Request Created**

PR #${pr.number} has been created for this issue.

**Pull Request:** [${pr.title}](${pr.html_url})
**Branch:** \`${branchName}\`
**Status:** Ready for review

The issue will be automatically closed when the PR is merged.

---
*Automated by Development Kickoff System*`
              });
              
              // Update issue status
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                labels: ['status:review']
              });
              
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  name: 'status:in-progress'
                });
              } catch (error) {
                console.log('In-progress label not found');
              }
            }
            
      - name: üéâ Handle PR Completion
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            
            // Extract issue number from branch name
            const issueMatch = branchName.match(/issue-(\d+)/);
            
            if (issueMatch) {
              const issueNumber = issueMatch[1];
              
              // Add completion comment to issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: `‚úÖ **Development Completed**

PR #${pr.number} has been successfully merged!

**Completed Features:**
- Implementation finished
- Tests passing
- Code reviewed and approved
- Changes deployed

**Next Steps:**
- Monitor for any issues in production
- Update documentation if needed
- Consider follow-up improvements

Thank you for your contribution! üéâ

---
*Automated by Development Kickoff System*`
              });
              
              // Clean up branch (optional - uncomment if desired)
              /*
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                console.log(`Deleted branch: ${branchName}`);
              } catch (error) {
                console.log('Could not delete branch:', error.message);
              }
              */
            }