name: Security Scan & Assessment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit (Backend)
      working-directory: ./backend
      run: |
        npm ci
        npm audit --audit-level=moderate --json > ../security-reports/backend-audit.json || true

    - name: Run npm audit (Frontend)
      working-directory: ./frontend
      run: |
        npm ci
        npm audit --audit-level=moderate --json > ../security-reports/frontend-audit.json || true

    - name: Run Retire.js
      run: |
        npx retire --outputformat json --outputpath security-reports/retire-report.json || true

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: security-reports/
        retention-days: 30

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker build -t prompt-card-backend:latest -f backend/Dockerfile.prod ./backend
        docker build -t prompt-card-frontend:latest -f frontend/Dockerfile.prod ./frontend

    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'prompt-card-backend:latest'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'prompt-card-frontend:latest'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'backend-trivy-results.sarif'

    - name: Upload Frontend Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'

  # Security Headers Testing
  security-headers:
    name: Security Headers Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Start backend service
      run: |
        cd backend
        npm ci
        npm run build
        npm start &
        sleep 10

    - name: Test Security Headers
      run: |
        # Create directory for reports
        mkdir -p security-reports
        
        # Test security headers
        echo "Testing security headers..."
        
        # Check for HSTS
        if curl -sI http://localhost:3001/api/health | grep -i "strict-transport-security"; then
          echo "✓ HSTS header found"
        else
          echo "✗ HSTS header missing" >> security-reports/headers-issues.txt
        fi
        
        # Check for CSP
        if curl -sI http://localhost:3001/api/health | grep -i "content-security-policy"; then
          echo "✓ CSP header found"
        else
          echo "✗ CSP header missing" >> security-reports/headers-issues.txt
        fi
        
        # Check for X-Frame-Options
        if curl -sI http://localhost:3001/api/health | grep -i "x-frame-options"; then
          echo "✓ X-Frame-Options header found"
        else
          echo "✗ X-Frame-Options header missing" >> security-reports/headers-issues.txt
        fi
        
        # Check for X-Content-Type-Options
        if curl -sI http://localhost:3001/api/health | grep -i "x-content-type-options"; then
          echo "✓ X-Content-Type-Options header found"
        else
          echo "✗ X-Content-Type-Options header missing" >> security-reports/headers-issues.txt
        fi

    - name: Upload security headers results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-headers-results
        path: security-reports/
        retention-days: 30

  # OWASP ZAP Security Testing
  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Start application
      run: |
        cd backend
        npm ci
        npm run build
        npm start &
        sleep 15

    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:3001'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Create ZAP report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-report
        path: report_html.html
        retention-days: 30

  # License Compliance Check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install license checker
      run: npm install -g license-checker

    - name: Check licenses (Backend)
      working-directory: ./backend
      run: |
        npm ci
        mkdir -p ../security-reports
        license-checker --json --out ../security-reports/backend-licenses.json

    - name: Check licenses (Frontend)
      working-directory: ./frontend
      run: |
        npm ci
        license-checker --json --out ../security-reports/frontend-licenses.json

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: security-reports/
        retention-days: 30

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, container-scan, security-headers, zap-scan, license-check]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./security-artifacts

    - name: Generate Security Summary Report
      run: |
        # Create comprehensive security report
        cat > security-summary-report.md << 'EOF'
        # Security Scan Summary Report
        
        **Date**: $(date)
        **Repository**: ${{ github.repository }}
        **Branch**: ${{ github.ref_name }}
        **Commit**: ${{ github.sha }}
        
        ## Scan Results Overview
        
        ### CodeQL Analysis
        - **Status**: ${{ needs.codeql.result }}
        - **Language Coverage**: JavaScript, TypeScript
        - **Queries**: Security Extended, Security and Quality
        
        ### Dependency Vulnerability Scan
        - **Status**: ${{ needs.dependency-scan.result }}
        - **Tools**: npm audit, Retire.js
        - **Coverage**: Backend and Frontend dependencies
        
        ### Secret Scanning
        - **Status**: ${{ needs.secret-scan.result }}
        - **Tools**: TruffleHog, GitLeaks
        - **Coverage**: Full repository history
        
        ### Container Security Scan
        - **Status**: ${{ needs.container-scan.result }}
        - **Tool**: Trivy
        - **Coverage**: Docker images for Backend and Frontend
        
        ### Security Headers Test
        - **Status**: ${{ needs.security-headers.result }}
        - **Coverage**: HSTS, CSP, X-Frame-Options, X-Content-Type-Options
        
        ### OWASP ZAP Scan
        - **Status**: ${{ needs.zap-scan.result }}
        - **Type**: Baseline security scan
        - **Target**: Application endpoints
        
        ### License Compliance
        - **Status**: ${{ needs.license-check.result }}
        - **Coverage**: All project dependencies
        
        ## Recommendations
        
        1. Review any failed security checks immediately
        2. Address critical and high severity vulnerabilities within 24 hours
        3. Update dependencies with known vulnerabilities
        4. Ensure all security headers are properly configured
        5. Investigate any secrets detected in repository
        6. Review license compliance issues
        7. Schedule regular security assessments
        
        ## Next Steps
        
        - [ ] Review detailed scan results
        - [ ] Create issues for identified vulnerabilities
        - [ ] Update security documentation
        - [ ] Schedule follow-up security review
        EOF

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary-report.md
        retention-days: 90

    - name: Create Issue for Critical Findings
      if: needs.codeql.result == 'failure' || needs.dependency-scan.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'Security Scan Failures Detected';
          const body = `
          # Security Scan Failures
          
          Critical security issues have been detected in the latest scan.
          
          **Failed Checks:**
          - CodeQL: ${{ needs.codeql.result }}
          - Dependency Scan: ${{ needs.dependency-scan.result }}
          - Secret Scan: ${{ needs.secret-scan.result }}
          - Container Scan: ${{ needs.container-scan.result }}
          
          **Action Required:**
          1. Review the detailed scan results in the workflow artifacts
          2. Address critical and high severity issues immediately
          3. Update this issue with remediation status
          
          **Scan Details:**
          - Workflow Run: ${{ github.run_id }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'critical', 'needs-review']
          });