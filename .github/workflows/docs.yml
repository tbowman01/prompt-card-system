name: üìö Memory-Driven GitHub Pages Publisher

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'backend/coverage/**'
      - 'frontend/coverage/**'
      - '.github/workflows/docs.yml'
      - 'memory/**'
      - '.claude-flow/**'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild with memory analysis'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: pages-memory-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Memory-driven performance analysis
  analyze-memory:
    runs-on: ubuntu-latest
    outputs:
      build-optimization: ${{ steps.memory-analysis.outputs.build-optimization }}
      performance-metrics: ${{ steps.memory-analysis.outputs.performance-metrics }}
      test-coverage: ${{ steps.memory-analysis.outputs.test-coverage }}
    steps:
      - name: üîç Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìä Analyze Memory Data
        id: memory-analysis
        run: |
          echo "üß† Analyzing Claude Flow memory for optimization insights..."
          
          # Check if memory data exists
          if [ -f "memory/claude-flow-data.json" ]; then
            echo "build-optimization=memory-driven" >> $GITHUB_OUTPUT
            echo "‚úÖ Memory data found - enabling optimization"
          else
            echo "build-optimization=standard" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No memory data - using standard build"
          fi
          
          # Analyze coverage data
          if [ -f "backend/coverage/coverage-summary.json" ]; then
            COVERAGE=$(jq -r '.total.lines.pct' backend/coverage/coverage-summary.json 2>/dev/null || echo "0")
            echo "test-coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "üìä Test coverage: $COVERAGE%"
          else
            echo "test-coverage=0" >> $GITHUB_OUTPUT
          fi
          
          # Performance metrics from .claude-flow
          if [ -f ".claude-flow/metrics/performance.json" ]; then
            echo "performance-metrics=available" >> $GITHUB_OUTPUT
            echo "üöÄ Performance metrics available"
          else
            echo "performance-metrics=none" >> $GITHUB_OUTPUT
          fi

  # Enhanced documentation build with memory insights
  build-docs:
    runs-on: ubuntu-latest
    needs: analyze-memory
    steps:
      - name: üîç Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js (Memory-Optimized)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            docs/package-lock.json

      - name: üß† Memory-Driven Optimization Setup
        run: |
          echo "üîß Applying memory-driven optimizations..."
          
          # Set build optimizations based on memory analysis
          if [ "${{ needs.analyze-memory.outputs.build-optimization }}" = "memory-driven" ]; then
            echo "VITE_BUILD_OPTIMIZATION=true" >> $GITHUB_ENV
            echo "VITE_MEMORY_CACHE=enabled" >> $GITHUB_ENV
            echo "‚úÖ Memory optimizations enabled"
          fi
          
          # Configure based on coverage data
          echo "DOC_COVERAGE_THRESHOLD=${{ needs.analyze-memory.outputs.test-coverage }}" >> $GITHUB_ENV

      - name: üìã Install Dependencies (Optimized)
        run: |
          # Parallel installation for speed
          npm ci --prefer-offline --no-audit
          
          # Install documentation tools with caching
          npm install -g vitepress@latest markdownlint-cli2 markdown-link-check
          
          # Install docs dependencies
          cd docs && npm ci --prefer-offline
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üìã Install dependencies
        run: |
          npm ci
          # Install documentation tools
          npm install -g vitepress markdownlint-cli2 markdown-link-check

      - name: üîç Validate documentation
        run: |
          # Check markdown syntax
          markdownlint-cli2 "docs/**/*.md" "README.md"
          
          # Check for broken links
          find docs -name "*.md" -exec markdown-link-check {} \;

      - name: üèóÔ∏è Build documentation site
        run: |
          # Generate API documentation from OpenAPI spec
          if [ -f "docs/openapi.yaml" ]; then
            npx @redocly/cli build-docs docs/openapi.yaml --output docs/.vitepress/dist/api/
          fi
          
          # Build VitePress documentation
          cd docs
          npm init -y
          npm install vitepress @vitepress/theme-default
          npx vitepress build

      - name: üì§ Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

  # Enhanced quality analysis with memory insights
  quality-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üìù Install linting tools
        run: |
          npm install -g markdownlint-cli2 alex write-good

      - name: üîç Lint documentation
        run: |
          # Markdown linting
          markdownlint-cli2 "docs/**/*.md" "README.md"
          
          # Check for insensitive language
          alex docs/ README.md || true
          
          # Check writing quality
          write-good docs/**/*.md README.md || true

      - name: üìä Generate documentation metrics
        run: |
          echo "## Documentation Metrics" > docs-metrics.md
          echo "Generated on: $(date)" >> docs-metrics.md
          echo "" >> docs-metrics.md
          echo "### File Count" >> docs-metrics.md
          echo "- Total MD files: $(find docs -name '*.md' | wc -l)" >> docs-metrics.md
          echo "- Total words: $(cat docs/**/*.md README.md | wc -w)" >> docs-metrics.md
          echo "- Total lines: $(cat docs/**/*.md README.md | wc -l)" >> docs-metrics.md

      - name: üì§ Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: documentation-metrics
          path: docs-metrics.md

  # Memory-driven deployment with optimization
  deploy-pages:
    if: github.ref == 'refs/heads/main'
    needs: [analyze-memory, build-docs, quality-analysis]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üìù Add deployment summary
        run: |
          echo "## üìö Documentation Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Documentation URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

  # Memory-driven notification and optimization
  notify-and-optimize:
    if: always() && github.ref == 'refs/heads/main'
    needs: [analyze-memory, deploy-pages]
    runs-on: ubuntu-latest
    steps:
      - name: üì¢ Slack notification
        if: success()
        run: |
          echo "Documentation successfully deployed!"
          # Add Slack webhook notification here if needed

      - name: ‚ö†Ô∏è Failure notification
        if: failure()
        run: |
          echo "Documentation deployment failed!"
          # Add failure notification logic here