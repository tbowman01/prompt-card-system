name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR title
        uses: ./.github/actions/action-semantic-pull-request-v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            test
            chore
            ci
            perf
            revert
          scopes: |
            backend
            frontend
            ci
            docs
            deps
            config
            analytics
            optimization
            security
            performance
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR description
        run: |
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "❌ PR description is empty"
            exit 1
          fi
          
          if [ ${#${{ github.event.pull_request.body }}} -lt 50 ]; then
            echo "❌ PR description is too short (minimum 50 characters)"
            exit 1
          fi
          
          echo "✅ PR description is valid"

      - name: Check for breaking changes
        run: |
          if echo "${{ github.event.pull_request.title }}" | grep -q "BREAKING CHANGE\|!:"; then
            echo "⚠️ Breaking change detected in PR title"
            echo "::warning::This PR contains breaking changes"
          fi
          
          if echo "${{ github.event.pull_request.body }}" | grep -q "BREAKING CHANGE"; then
            echo "⚠️ Breaking change detected in PR body"
            echo "::warning::This PR contains breaking changes"
          fi

  check-files:
    name: Check File Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            backend/**
            frontend/**
            docs/**
            .github/**
            docker-compose.yml
            package.json

      - name: Check for sensitive files
        run: |
          sensitive_files=()
          
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "\.env\|\.key\|\.pem\|\.p12\|\.pfx"; then
            sensitive_files+=("environment/secret files")
          fi
          
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "package-lock.json\|yarn.lock"; then
            sensitive_files+=("lock files")
          fi
          
          if [ ${#sensitive_files[@]} -gt 0 ]; then
            echo "⚠️ Sensitive files detected: ${sensitive_files[*]}"
            echo "::warning::Please review sensitive file changes carefully"
          fi

      - name: Check for large files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [ -f "$file" ]; then
              size=$(wc -c < "$file")
              if [ $size -gt 1048576 ]; then # 1MB
                echo "⚠️ Large file detected: $file ($(($size / 1024 / 1024))MB)"
                echo "::warning::Large file detected: $file"
              fi
            fi
          done

  quick-test:
    name: Quick Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Removed problematic cache: 'npm' - using manual cache strategy instead

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run quick tests
        run: |
          cd backend && npm run test -- --passWithNoTests --selectProjects unit
          cd ../frontend && npm run test -- --passWithNoTests --watchAll=false

      - name: Type check
        run: |
          cd backend && npm run type-check
          cd ../frontend && npm run type-check

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Removed problematic cache: 'npm' - using manual cache strategy instead

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  performance-check:
    name: Performance Impact Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Removed problematic cache: 'npm' - using manual cache strategy instead

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Build and analyze bundle size
        run: |
          cd frontend && npm run build
          
          # Check bundle size
          if [ -f ".next/static/chunks/pages/_app.js" ]; then
            size=$(wc -c < ".next/static/chunks/pages/_app.js")
            echo "Main bundle size: $(($size / 1024))KB"
            
            if [ $size -gt 1048576 ]; then # 1MB
              echo "::warning::Large bundle size detected: $(($size / 1024 / 1024))MB"
            fi
          fi

      - name: Check for performance regressions
        run: |
          # This would ideally run lighthouse or similar performance tests
          # For now, we'll check for common performance issues
          echo "Checking for performance anti-patterns..."
          
          # Check for console.log in production code
          if grep -r "console\.log" frontend/src/ --exclude-dir=node_modules; then
            echo "::warning::Console.log statements found in production code"
          fi
          
          # Check for large images
          find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -size +500k | while read file; do
            echo "::warning::Large image file detected: $file"
          done

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Removed problematic cache: 'npm' - using manual cache strategy instead

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run linting
        run: |
          cd backend && npm run lint
          cd ../frontend && npm run lint

      - name: Check code complexity
        run: |
          # Install complexity analysis tool
          npm install -g complexity-report
          
          # Analyze backend complexity
          cd backend/src
          find . -name "*.ts" -not -path "*/node_modules/*" -not -path "*/tests/*" | \
            xargs complexity-report --format json > ../complexity-report.json
          
          # Check for high complexity functions
          if command -v jq &> /dev/null; then
            high_complexity=$(jq '[.reports[] | select(.complexity.cyclomatic > 10)] | length' ../complexity-report.json)
            if [ "$high_complexity" -gt 0 ]; then
              echo "::warning::$high_complexity functions with high cyclomatic complexity detected"
            fi
          fi

  assignee-check:
    name: Check Assignee and Reviewers
    runs-on: ubuntu-latest
    steps:
      - name: Check PR assignee
        run: |
          if [ -z "${{ github.event.pull_request.assignee }}" ]; then
            echo "::notice::PR has no assignee - consider assigning someone"
          else
            echo "✅ PR is assigned to ${{ github.event.pull_request.assignee.login }}"
          fi

      - name: Check for requested reviewers
        run: |
          reviewer_count=$(echo '${{ toJson(github.event.pull_request.requested_reviewers) }}' | jq length)
          if [ "$reviewer_count" -eq 0 ]; then
            echo "::notice::No reviewers requested - consider adding reviewers"
          else
            echo "✅ $reviewer_count reviewers requested"
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-pr, check-files, quick-test, security-check, performance-check, code-quality]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PR Format | ${{ needs.validate-pr.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| File Changes | ${{ needs.check-files.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Tests | ${{ needs.quick-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-pr.result }}" == "success" && 
                "${{ needs.check-files.result }}" == "success" && 
                "${{ needs.quick-test.result }}" == "success" && 
                "${{ needs.security-check.result }}" == "success" && 
                "${{ needs.performance-check.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✅ **All validation checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some validation checks failed. Please review and fix.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi