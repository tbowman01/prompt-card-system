name: üîê Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'auth/**'
      - 'package*.json'
      - '**/package*.json'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'auth/**'
      - 'package*.json'
      - '**/package*.json'
      - '.github/workflows/security-scan.yml'
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üèóÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies with workspace support
        run: |
          # Install root workspace dependencies first
          npm ci --legacy-peer-deps
          
          # Install workspace dependencies if they exist
          if [ -d "backend" ]; then
            echo "üì¶ Installing backend dependencies..."
            cd backend && npm ci --legacy-peer-deps && cd ..
          fi
          
          if [ -d "frontend" ]; then
            echo "üì¶ Installing frontend dependencies..."
            cd frontend && npm ci --legacy-peer-deps && cd ..
          fi
          
          if [ -d "auth" ]; then
            echo "üì¶ Installing auth dependencies..."
            cd auth && npm ci --legacy-peer-deps && cd ..
          fi

      - name: üîç Run npm audit (Root)
        run: |
          echo "üîç Running npm audit for root workspace..."
          npm audit --audit-level=moderate --json > npm-audit-root.json || true
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high; then
            echo "‚úÖ No high/critical vulnerabilities found in root"
          else
            echo "‚ùå High/critical vulnerabilities found in root"
            npm audit --audit-level=high
            exit 1
          fi

      - name: üîç Run npm audit (Backend)
        run: |
          if [ -d "backend" ]; then
            echo "üîç Running npm audit for backend..."
            cd backend
            npm audit --audit-level=moderate --json > npm-audit-backend.json || true
            
            # Check for high/critical vulnerabilities
            if npm audit --audit-level=high; then
              echo "‚úÖ No high/critical vulnerabilities found in backend"
            else
              echo "‚ùå High/critical vulnerabilities found in backend"
              npm audit --audit-level=high
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Backend directory not found - skipping backend audit"
          fi

      - name: üîç Run npm audit (Frontend)
        run: |
          if [ -d "frontend" ]; then
            echo "üîç Running npm audit for frontend..."
            cd frontend
            npm audit --audit-level=moderate --json > npm-audit-frontend.json || true
            
            # Check for high/critical vulnerabilities
            if npm audit --audit-level=high; then
              echo "‚úÖ No high/critical vulnerabilities found in frontend"
            else
              echo "‚ùå High/critical vulnerabilities found in frontend"
              npm audit --audit-level=high
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Frontend directory not found - skipping frontend audit"
          fi

      - name: üîç Run npm audit (Auth)
        run: |
          if [ -d "auth" ]; then
            echo "üîç Running npm audit for auth service..."
            cd auth
            npm audit --audit-level=moderate --json > npm-audit-auth.json || true
            
            # Check for high/critical vulnerabilities
            if npm audit --audit-level=high; then
              echo "‚úÖ No high/critical vulnerabilities found in auth"
            else
              echo "‚ùå High/critical vulnerabilities found in auth"
              npm audit --audit-level=high
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Auth directory not found - skipping auth audit"
          fi

      - name: Upload audit reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: npm-audit-reports
          path: |
            backend/npm-audit-backend.json
            frontend/npm-audit-frontend.json

  advanced-security-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Removed problematic cache: 'npm' - using manual cache strategy instead

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install security scanning tools
        run: |
          # Install npm audit (built-in)
          npm install -g npm-audit-fix
          
          # Install better-npm-audit for enhanced reporting
          npm install -g better-npm-audit
          
          # Install retire.js for JavaScript library vulnerability scanning
          npm install -g retire

      - name: Run enhanced npm audit (Backend)
        run: |
          cd backend
          echo "üîç Running enhanced npm audit for backend..."
          
          # Run npm audit with detailed output
          npm audit --audit-level=moderate --json > npm-audit-backend.json || true
          
          # Run better-npm-audit for enhanced reporting
          better-npm-audit audit --level moderate || true
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high; then
            echo "‚úÖ No high/critical vulnerabilities found in backend"
          else
            echo "‚ùå High/critical vulnerabilities found in backend"
            npm audit --audit-level=high
            exit 1
          fi

      - name: Run enhanced npm audit (Frontend)
        run: |
          cd frontend
          echo "üîç Running enhanced npm audit for frontend..."
          
          # Run npm audit with detailed output
          npm audit --audit-level=moderate --json > npm-audit-frontend.json || true
          
          # Run better-npm-audit for enhanced reporting
          better-npm-audit audit --level moderate || true
          
          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high; then
            echo "‚úÖ No high/critical vulnerabilities found in frontend"
          else
            echo "‚ùå High/critical vulnerabilities found in frontend"
            npm audit --audit-level=high
            exit 1
          fi

      - name: Run Retire.js scan
        run: |
          echo "üîç Running Retire.js vulnerability scan..."
          
          # Scan backend JavaScript files
          cd backend
          retire --path . --outputformat json --outputpath retire-backend.json || true
          
          # Scan frontend JavaScript files
          cd ../frontend
          retire --path . --outputformat json --outputpath retire-frontend.json || true
          
          echo "‚úÖ Retire.js scan completed"

      - name: Run OSV Scanner (Google's Open Source Vulnerability Scanner)
        run: |
          echo "üîç Running OSV Scanner..."
          
          # Install OSV Scanner
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          
          # Scan the project
          ./osv-scanner --lockfile backend/package-lock.json --format json --output osv-backend.json || true
          ./osv-scanner --lockfile frontend/package-lock.json --format json --output osv-frontend.json || true
          
          echo "‚úÖ OSV Scanner completed"

      - name: Generate security report
        run: |
          echo "üìä Generating comprehensive security report..."
          
          cat > security-report.md << 'EOF'
          # Security Scan Report
          
          **Date:** $(date -u +%Y-%m-%d)
          **Scan Type:** Comprehensive Security Analysis
          
          ## Tools Used
          - **npm audit**: Built-in Node.js vulnerability scanner
          - **better-npm-audit**: Enhanced npm audit reporting
          - **Retire.js**: JavaScript library vulnerability detection
          - **OSV Scanner**: Google's open source vulnerability scanner
          
          ## Backend Security Status
          - npm audit: $(cd backend && npm audit --audit-level=high > /dev/null 2>&1 && echo "‚úÖ No high/critical issues" || echo "‚ùå Issues found")
          - Retire.js: $(cd backend && retire --path . > /dev/null 2>&1 && echo "‚úÖ No known vulnerabilities" || echo "‚ö†Ô∏è Potential issues")
          
          ## Frontend Security Status
          - npm audit: $(cd frontend && npm audit --audit-level=high > /dev/null 2>&1 && echo "‚úÖ No high/critical issues" || echo "‚ùå Issues found")
          - Retire.js: $(cd frontend && retire --path . > /dev/null 2>&1 && echo "‚úÖ No known vulnerabilities" || echo "‚ö†Ô∏è Potential issues")
          
          ## Recommendations
          1. Regularly update dependencies
          2. Monitor security advisories
          3. Use npm audit to check for vulnerabilities
          4. Consider using Dependabot for automated updates
          5. Set up GitHub Security Advisories
          
          ## Alternative Premium Tools
          - **Snyk** (Premium): Advanced vulnerability management
          - **WhiteSource/Mend** (Premium): Comprehensive security scanning
          - **Sonatype Nexus** (Premium): Repository security analysis
          - **Veracode** (Premium): Static application security testing
          
          ## Free GitHub Security Features
          - **Dependabot**: Automatic dependency updates
          - **Security Advisories**: GitHub's vulnerability database
          - **Code Scanning**: GitHub's CodeQL analysis
          - **Secret Scanning**: Detect secrets in code
          
          EOF
          
          echo "Security report generated"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            backend/npm-audit-backend.json
            frontend/npm-audit-frontend.json
            backend/retire-backend.json
            frontend/retire-frontend.json
            osv-backend.json
            osv-frontend.json
            security-report.md

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks
        uses: ./.github/actions/gitleaks-action-v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for organizaations, not personal repos

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          tags: prompt-card-backend:scan
          load: true

      - name: Build frontend image for scanning
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          tags: prompt-card-frontend:scan
          load: true

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'prompt-card-backend:scan'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'prompt-card-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Removed problematic cache: 'npm' - using manual cache strategy instead

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Check backend licenses
        run: |
          cd backend
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense' --json > licenses-backend.json
          
          # Check for restricted licenses
          if license-checker --excludePackages 'fsevents' --restrictedLicenses 'GPL;LGPL;AGPL;CPAL;OSL;QPL;SSPL;EUPL;OFL' --json > restricted-licenses-backend.json; then
            echo "‚úÖ No restricted licenses found in backend"
          else
            echo "‚ùå Restricted licenses found in backend"
            cat restricted-licenses-backend.json
            exit 1
          fi

      - name: Check frontend licenses
        run: |
          cd frontend
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense' --json > licenses-frontend.json
          
          # Check for restricted licenses
          if license-checker --excludePackages 'fsevents' --restrictedLicenses 'GPL;LGPL;AGPL;CPAL;OSL;QPL;SSPL;EUPL;OFL' --json > restricted-licenses-frontend.json; then
            echo "‚úÖ No restricted licenses found in frontend"
          else
            echo "‚ùå Restricted licenses found in frontend"
            cat restricted-licenses-frontend.json
            exit 1
          fi

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            backend/licenses-backend.json
            frontend/licenses-frontend.json

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [ -f "SECURITY.md" ]; then
            echo "‚úÖ Security policy found"
          else
            echo "‚ö†Ô∏è No security policy found - consider adding SECURITY.md"
            echo "::notice::Consider adding a SECURITY.md file"
          fi

      - name: Check for security configurations
        run: |
          # Check for common security configurations
          echo "Checking security configurations..."
          
          # Check for helmet configuration in backend
          if grep -r "helmet" backend/src/ --include="*.ts" --include="*.js"; then
            echo "‚úÖ Helmet security middleware found"
          else
            echo "‚ö†Ô∏è Helmet security middleware not found"
          fi
          
          # Check for CORS configuration
          if grep -r "cors" backend/src/ --include="*.ts" --include="*.js"; then
            echo "‚úÖ CORS configuration found"
          else
            echo "‚ö†Ô∏è CORS configuration not found"
          fi
          
          # Check for rate limiting
          if grep -r "rate.*limit" backend/src/ --include="*.ts" --include="*.js"; then
            echo "‚úÖ Rate limiting found"
          else
            echo "‚ö†Ô∏è Rate limiting not found"
          fi

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check GDPR compliance indicators
        run: |
          echo "Checking GDPR compliance indicators..."
          
          # Check for privacy policy
          if find . -name "*privacy*" -o -name "*gdpr*" | grep -q .; then
            echo "‚úÖ Privacy/GDPR documentation found"
          else
            echo "‚ö†Ô∏è No privacy/GDPR documentation found"
          fi
          
          # Check for data handling code
          if grep -r "personal.*data\|PII\|GDPR" . --include="*.ts" --include="*.js" --include="*.md"; then
            echo "‚úÖ Data handling/GDPR references found"
          else
            echo "‚ö†Ô∏è No data handling/GDPR references found"
          fi

      - name: Check for compliance frameworks
        run: |
          # Check for SOC 2 compliance
          if find . -name "*soc2*" -o -name "*compliance*" | grep -q .; then
            echo "‚úÖ Compliance documentation found"
          else
            echo "‚ö†Ô∏è No compliance documentation found"
          fi

  security-summary:
    name: üîç Enhanced Security Analysis & Reporting
    runs-on: ubuntu-latest
    needs: [dependency-scan, advanced-security-scan, codeql-analysis, secret-scan, license-check, security-policy-check, compliance-check]
    if: always()
    steps:
      - name: üèóÔ∏è Checkout code
        uses: actions/checkout@v4
        
      - name: üîç Generate Detailed Security Analysis
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            // Check if comprehensive security issue already exists
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,comprehensive-analysis',
              per_page: 10
            });
            
            const hasExistingSecurityIssue = existingIssues.length > 0;
            
            // Collect detailed security findings
            const securityFindings = {
              timestamp: new Date().toISOString(),
              sha: context.sha,
              branch: context.ref.replace('refs/heads/', ''),
              scanResults: {
                dependencyScan: '${{ needs.dependency-scan.result }}',
                advancedScan: '${{ needs.advanced-security-scan.result }}',
                codeqlAnalysis: '${{ needs.codeql-analysis.result }}',
                secretScan: '${{ needs.secret-scan.result }}',
                licenseCheck: '${{ needs.license-check.result }}',
                policyCheck: '${{ needs.security-policy-check.result }}',
                complianceCheck: '${{ needs.compliance-check.result }}'
              },
              criticalIssues: [],
              highIssues: [],
              mediumIssues: [],
              recommendations: []
            };
            
            // Generate detailed findings based on scan results
            const failedScans = Object.entries(securityFindings.scanResults)
              .filter(([key, value]) => value === 'failure')
              .map(([key, _]) => key);
            
            if (failedScans.includes('dependencyScan')) {
              securityFindings.criticalIssues.push({
                type: 'dependency-vulnerability',
                title: 'High/Critical Dependency Vulnerabilities Detected',
                description: 'npm audit found high or critical severity vulnerabilities in project dependencies',
                impact: 'Potential security exploits, data breaches, or service disruption',
                remediation: [
                  'Run `npm audit fix` to automatically resolve fixable vulnerabilities',
                  'For manual fixes, run `npm audit` to see detailed vulnerability information',
                  'Update vulnerable packages to secure versions',
                  'Consider alternative packages if no secure version is available',
                  'Review security advisories for each vulnerability'
                ],
                urgency: 'critical',
                component: 'dependencies'
              });
            }
            
            if (failedScans.includes('codeqlAnalysis')) {
              securityFindings.highIssues.push({
                type: 'code-vulnerability',
                title: 'Code Analysis Security Issues Found',
                description: 'CodeQL static analysis detected potential security vulnerabilities in source code',
                impact: 'Code-level security flaws that could lead to exploits',
                remediation: [
                  'Review CodeQL security findings in the Security tab',
                  'Fix detected SQL injection, XSS, or other security vulnerabilities',
                  'Implement input validation and sanitization',
                  'Follow secure coding practices',
                  'Add security-focused unit tests'
                ],
                urgency: 'high',
                component: 'source-code'
              });
            }
            
            if (failedScans.includes('secretScan')) {
              securityFindings.criticalIssues.push({
                type: 'secret-exposure',
                title: 'Secrets or API Keys Detected in Code',
                description: 'Secret scanning found potential API keys, tokens, or credentials in the codebase',
                impact: 'Exposed credentials could lead to unauthorized access to external services',
                remediation: [
                  'Immediately rotate any exposed API keys or credentials',
                  'Move secrets to environment variables or secure secret management',
                  'Add secrets to .gitignore to prevent future exposure',
                  'Use GitHub Dependabot secrets scanning',
                  'Implement pre-commit hooks to prevent secret commits'
                ],
                urgency: 'critical',
                component: 'credentials'
              });
            }
            
            if (failedScans.includes('licenseCheck')) {
              securityFindings.mediumIssues.push({
                type: 'license-compliance',
                title: 'License Compliance Issues Detected',
                description: 'Project dependencies contain licenses that may not be compatible with project requirements',
                impact: 'Potential legal or compliance issues with dependency licensing',
                remediation: [
                  'Review license report to identify problematic licenses',
                  'Replace dependencies with restrictive licenses',
                  'Update license policy to allow certain licenses if appropriate',
                  'Consult legal team for complex license compatibility issues'
                ],
                urgency: 'medium',
                component: 'licensing'
              });
            }
            
            // Calculate security score
            const totalScans = Object.keys(securityFindings.scanResults).length;
            const passedScans = Object.values(securityFindings.scanResults)
              .filter(result => result === 'success').length;
            const securityScore = Math.round((passedScans / totalScans) * 100);
            
            // Generate recommendations
            if (securityScore < 60) {
              securityFindings.recommendations.push(
                'URGENT: Multiple security scans failing - immediate security review required',
                'Implement comprehensive security testing in CI/CD pipeline',
                'Consider security consultation for architecture review'
              );
            } else if (securityScore < 80) {
              securityFindings.recommendations.push(
                'Address failing security scans before next release',
                'Implement additional security monitoring',
                'Schedule regular security audits'
              );
            } else {
              securityFindings.recommendations.push(
                'Maintain current security practices',
                'Continue regular security scanning',
                'Monitor for new vulnerabilities in dependencies'
              );
            }
            
            // Generate comprehensive security report
            const securityReport = \`# üîç Comprehensive Security Analysis Report
            
**Scan Date:** \${securityFindings.timestamp}  
**Commit SHA:** \${securityFindings.sha}  
**Branch:** \${securityFindings.branch}  
**Security Score:** \${securityScore}%

## üìä Security Scan Results

| Scan Type | Status | Impact |
|-----------|--------|---------|
| Dependency Vulnerabilities | ${securityFindings.scanResults.dependencyScan === 'success' ? '‚úÖ Pass' : '‚ùå **FAIL**'} | ${securityFindings.scanResults.dependencyScan === 'success' ? 'Low' : 'Critical'} |
| Advanced Security Analysis | ${securityFindings.scanResults.advancedScan === 'success' ? '‚úÖ Pass' : '‚ùå **FAIL**'} | ${securityFindings.scanResults.advancedScan === 'success' ? 'Low' : 'High'} |
| Code Analysis (CodeQL) | ${securityFindings.scanResults.codeqlAnalysis === 'success' ? '‚úÖ Pass' : '‚ùå **FAIL**'} | ${securityFindings.scanResults.codeqlAnalysis === 'success' ? 'Low' : 'High'} |
| Secret Scanning | ${securityFindings.scanResults.secretScan === 'success' ? '‚úÖ Pass' : '‚ùå **FAIL**'} | ${securityFindings.scanResults.secretScan === 'success' ? 'Low' : 'Critical'} |
| License Compliance | ${securityFindings.scanResults.licenseCheck === 'success' ? '‚úÖ Pass' : '‚ùå **FAIL**'} | ${securityFindings.scanResults.licenseCheck === 'success' ? 'Low' : 'Medium'} |
| Security Policy | ${securityFindings.scanResults.policyCheck === 'success' ? '‚úÖ Pass' : '‚ö†Ô∏è Needs Attention'} | Low |
| Compliance Check | ${securityFindings.scanResults.complianceCheck === 'success' ? '‚úÖ Pass' : '‚ö†Ô∏è Needs Attention'} | Low |

${securityFindings.criticalIssues.length > 0 ? `
## üö® CRITICAL SECURITY ISSUES (${securityFindings.criticalIssues.length})

${securityFindings.criticalIssues.map((issue, index) => `
### ${index + 1}. ${issue.title}

**Type:** ${issue.type}  
**Component:** ${issue.component}  
**Urgency:** ${issue.urgency.toUpperCase()}

**Description:**  
${issue.description}

**Impact:**  
${issue.impact}

**Remediation Steps:**
${issue.remediation.map(step => `- ${step}`).join('\n')}

---
`).join('\n')}
` : '## ‚úÖ No Critical Security Issues Found'}

${securityFindings.highIssues.length > 0 ? `
## ‚ö†Ô∏è HIGH PRIORITY ISSUES (${securityFindings.highIssues.length})

${securityFindings.highIssues.map((issue, index) => `
### ${index + 1}. ${issue.title}

**Type:** ${issue.type}  
**Component:** ${issue.component}  
**Urgency:** ${issue.urgency.toUpperCase()}

**Description:**  
${issue.description}

**Impact:**  
${issue.impact}

**Remediation Steps:**
${issue.remediation.map(step => `- ${step}`).join('\n')}

---
`).join('\n')}
` : ''}

${securityFindings.mediumIssues.length > 0 ? `
## üìã MEDIUM PRIORITY ISSUES (${securityFindings.mediumIssues.length})

${securityFindings.mediumIssues.map((issue, index) => `
### ${index + 1}. ${issue.title}

**Type:** ${issue.type}  
**Component:** ${issue.component}  

**Description:** ${issue.description}  
**Impact:** ${issue.impact}

**Remediation:** ${issue.remediation.join(', ')}

`).join('\n')}
` : ''}

## üí° Security Recommendations

${securityFindings.recommendations.map(rec => `- ${rec}`).join('\n')}

## üîß Quick Action Items

1. **Immediate (0-24 hours):**
${securityFindings.criticalIssues.length > 0 ? securityFindings.criticalIssues.map(issue => `   - Fix ${issue.title.toLowerCase()}`).join('\n') : '   - No immediate actions required'}

2. **Short-term (1-7 days):**
${securityFindings.highIssues.length > 0 ? securityFindings.highIssues.map(issue => `   - Address ${issue.title.toLowerCase()}`).join('\n') : '   - Monitor security scan results'}

3. **Medium-term (1-4 weeks):**
   - Implement additional security controls
   - Regular security training for development team
   - Review and update security policies

## üìà Security Trends

- **Current Score:** ${securityScore}%
- **Previous Score:** N/A (baseline)
- **Trend:** Establishing baseline

---

*This report was automatically generated by the Enhanced Security Analysis system.*
*Next scan scheduled: Weekly on Monday at 2 AM UTC*
*For questions or concerns, please review the Security Policy in the repository.*
`;

            // Only create/update issue if there are actual security concerns or no existing issue
            if (!hasExistingSecurityIssue && (securityFindings.criticalIssues.length > 0 || securityFindings.highIssues.length > 0 || securityScore < 80)) {
              // Create new comprehensive security issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üîç Comprehensive Security Analysis - Score: ${securityScore}% (${securityFindings.criticalIssues.length} Critical, ${securityFindings.highIssues.length} High Priority)`,
                body: securityReport,
                labels: ['security', 'comprehensive-analysis', 'priority:high', 'automated']
              });
              
              console.log('Created comprehensive security analysis issue');
            } else if (hasExistingSecurityIssue) {
              console.log('Existing security issue found - not creating duplicate');
              
              // Update existing issue with latest findings
              const existingIssue = existingIssues[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## üîÑ Updated Security Analysis

**Latest Scan:** ${securityFindings.timestamp}  
**Commit:** ${securityFindings.sha}  
**Security Score:** ${securityScore}%

**Status Update:**
${Object.entries(securityFindings.scanResults).map(([scan, result]) => 
  `- ${scan}: ${result === 'success' ? '‚úÖ' : '‚ùå'}`
).join('\n')}

${securityFindings.criticalIssues.length > 0 || securityFindings.highIssues.length > 0 ? 
  '**Action Required:** Security issues still present - see full analysis above.' : 
  '**Status:** Security posture improved - continue monitoring.'}

---
*Automated update from security scanning workflow*`
              });
            } else {
              console.log(`Security posture is good (${securityScore}%) - no action needed`);
            }
            
            // Always generate step summary
            core.summary.addRaw(`
            ## üîç Security Scan Summary
            
            **Security Score: ${securityScore}%**
            
            | Component | Status | Action Required |
            |-----------|---------|-----------------|
            ${Object.entries(securityFindings.scanResults).map(([scan, result]) => 
              `| ${scan} | ${result === 'success' ? '‚úÖ Pass' : '‚ùå Fail'} | ${result === 'success' ? 'None' : 'Review findings'} |`
            ).join('\n')}
            
            ${securityFindings.criticalIssues.length > 0 ? `‚ö†Ô∏è **${securityFindings.criticalIssues.length} Critical Issues** require immediate attention` : ''}
            ${securityFindings.highIssues.length > 0 ? `üìã **${securityFindings.highIssues.length} High Priority Issues** need resolution` : ''}
            `);
            
            await core.summary.write();

      # - name: Notify security team
      #   if: failure()
      #   uses: ./.github/actions/action-slack-v3
      #   with:
      #     status: failure
      #     channel: '#security'
      #     message: |
      #       üö® Security scan failed for ${{ github.ref }}
      #       Commit: ${{ github.sha }}
      #       Author: ${{ github.actor }}
      #       Please review security findings immediately.
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}