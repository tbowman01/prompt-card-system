# üõ°Ô∏è Security-First Pre-commit Hooks Configuration
# Enterprise-grade security scanning and quality assurance

default_stages: [commit, push]
default_language_version:
  python: python3.9
  node: "20.15.0"

repos:
  # ===== SECURITY SCANNING =====
  
  # Secret Detection - Multiple tools for comprehensive coverage
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: detect-private-key
        name: üîê Detect Private Keys
        description: Prevents committing private keys
        stages: [commit]
      
      - id: check-added-large-files
        name: üìÅ Check Large Files
        description: Prevents committing large files
        args: ['--maxkb=500']
        stages: [commit]
      
      - id: check-merge-conflict
        name: üîÑ Check Merge Conflicts
        description: Detects merge conflict markers
        stages: [commit]

  # GitLeaks - Advanced secret detection
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        name: üîç GitLeaks Secret Scan
        description: Advanced secret and credential detection
        stages: [commit]
        args: [
          '--verbose',
          '--redact',
          '--config=.gitleaks.toml'
        ]

  # TruffleHog - Verified secret detection
  - repo: https://github.com/trufflesecurity/trufflehog
    rev: v3.63.2
    hooks:
      - id: trufflehog
        name: üîç TruffleHog Verified Secrets
        description: High-confidence secret detection
        stages: [commit]
        args: [
          '--only-verified',
          '--fail',
          'filesystem',
          '.'
        ]

  # ===== CODE QUALITY & SECURITY =====
  
  # ESLint with security plugins
  - repo: local
    hooks:
      - id: eslint-security-backend
        name: üîí ESLint Security (Backend)
        entry: bash -c 'cd backend && npx eslint --ext .ts,.js --plugin security --plugin no-secrets src/'
        language: system
        files: '^backend/src/.*\.(ts|js)$'
        stages: [commit]
      
      - id: eslint-security-frontend
        name: üîí ESLint Security (Frontend)
        entry: bash -c 'cd frontend && npx eslint --ext .tsx,.ts,.js,.jsx --plugin security src/'
        language: system
        files: '^frontend/src/.*\.(tsx|ts|jsx|js)$'
        stages: [commit]

  # TypeScript strict checking
  - repo: local
    hooks:
      - id: typescript-check-backend
        name: üìò TypeScript Check (Backend)
        entry: bash -c 'cd backend && npx tsc --noEmit --strict'
        language: system
        files: '^backend/src/.*\.ts$'
        stages: [commit]
      
      - id: typescript-check-frontend
        name: üìò TypeScript Check (Frontend)
        entry: bash -c 'cd frontend && npx tsc --noEmit --strict'
        language: system
        files: '^frontend/src/.*\.(ts|tsx)$'
        stages: [commit]

  # ===== DEPENDENCY SECURITY =====
  
  # npm audit for security vulnerabilities
  - repo: local
    hooks:
      - id: npm-audit-backend
        name: üîç npm audit (Backend)
        entry: bash -c 'cd backend && npm audit --audit-level=high'
        language: system
        files: '^backend/(package\.json|package-lock\.json)$'
        stages: [commit]
      
      - id: npm-audit-frontend
        name: üîç npm audit (Frontend)
        entry: bash -c 'cd frontend && npm audit --audit-level=high'
        language: system
        files: '^frontend/(package\.json|package-lock\.json)$'
        stages: [commit]

  # Retire.js for JavaScript vulnerabilities
  - repo: local
    hooks:
      - id: retire-js-scan
        name: üîç Retire.js Vulnerability Scan
        entry: bash -c 'npx retire --path . --severity high'
        language: system
        files: '\.(js|ts|jsx|tsx|json)$'
        stages: [commit]

  # ===== DOCKER SECURITY =====
  
  # Hadolint for Dockerfile security
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: üê≥ Hadolint Dockerfile Security
        description: Dockerfile best practices and security linting
        files: 'Dockerfile.*'
        stages: [commit]

  # ===== LICENSE & COMPLIANCE =====
  
  # License checker
  - repo: local
    hooks:
      - id: license-compliance
        name: üìã License Compliance Check
        entry: bash -c 'npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense"'
        language: system
        files: '^(backend|frontend)/package\.json$'
        stages: [commit]

  # ===== FILE SECURITY =====
  
  # YAML security
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: üìÑ YAML Security Lint
        description: YAML syntax and security validation
        args: ['-d', '{extends: relaxed, rules: {line-length: {max: 120}}}']
        stages: [commit]

  # JSON security
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-json
        name: üìÑ JSON Validation
        description: Validates JSON syntax
        stages: [commit]

  # ===== INFRASTRUCTURE SECURITY =====
  
  # GitHub Actions security
  - repo: https://github.com/rhysd/actionlint
    rev: v1.6.26
    hooks:
      - id: actionlint-docker
        name: üîß GitHub Actions Security
        description: GitHub Actions workflow security validation
        files: '^\.github/workflows/.*\.ya?ml$'
        stages: [commit]

  # ===== CUSTOM SECURITY CHECKS =====
  
  # Environment variable security
  - repo: local
    hooks:
      - id: env-var-security
        name: üîê Environment Variable Security
        entry: bash -c 'grep -r "process\.env\|ENV\|SECRET\|KEY\|PASSWORD\|TOKEN" --include="*.ts" --include="*.js" . && echo "‚ö†Ô∏è Review environment variable usage" || true'
        language: system
        files: '\.(ts|js|tsx|jsx)$'
        stages: [commit]
        verbose: true

  # SQL injection prevention
  - repo: local
    hooks:
      - id: sql-injection-check
        name: üîç SQL Injection Prevention
        entry: bash -c 'grep -r "query.*+\|sql.*+\|SELECT.*+\|INSERT.*+\|UPDATE.*+\|DELETE.*+" --include="*.ts" --include="*.js" backend/src/ && echo "‚ö†Ô∏è Potential SQL injection vulnerability detected" && exit 1 || true'
        language: system
        files: '^backend/src/.*\.(ts|js)$'
        stages: [commit]

  # API endpoint security
  - repo: local
    hooks:
      - id: api-security-check
        name: üîí API Endpoint Security
        entry: bash -c 'grep -r "app\.\(get\|post\|put\|delete\)" --include="*.ts" --include="*.js" backend/src/ | grep -v "auth\|middleware" && echo "‚ö†Ô∏è Unprotected API endpoints detected" && exit 1 || true'
        language: system
        files: '^backend/src/.*\.(ts|js)$'
        stages: [commit]

  # ===== COMMIT MESSAGE SECURITY =====
  
  # Commit message validation
  - repo: local
    hooks:
      - id: commit-msg-security
        name: üìù Commit Message Security
        entry: bash -c 'echo "$1" | grep -i "password\|secret\|key\|token\|api" && echo "‚ö†Ô∏è Sensitive information in commit message" && exit 1 || true'
        language: system
        stages: [commit-msg]

# ===== CONFIGURATION SETTINGS =====

ci:
  autofix_commit_msg: |
    üîß [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'develop'
  autoupdate_commit_msg: '‚¨ÜÔ∏è [pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# ===== HOOK FAILURE POLICY =====
fail_fast: false  # Continue running all hooks even if one fails
minimum_pre_commit_version: "3.0.0"

# ===== SECURITY NOTES =====
# 
# This configuration implements multiple layers of security validation:
#
# 1. SECRET DETECTION (3 tools):
#    - GitLeaks: Fast, configurable secret detection
#    - TruffleHog: High-confidence, verified secrets
#    - Built-in: Private key detection
#
# 2. CODE SECURITY:
#    - ESLint security plugins for JavaScript/TypeScript
#    - TypeScript strict mode enforcement
#    - SQL injection prevention
#    - API endpoint protection validation
#
# 3. DEPENDENCY SECURITY:
#    - npm audit for known vulnerabilities
#    - Retire.js for JavaScript library vulnerabilities
#    - License compliance enforcement
#
# 4. INFRASTRUCTURE SECURITY:
#    - Dockerfile security with Hadolint
#    - GitHub Actions workflow validation
#    - YAML/JSON syntax validation
#
# 5. CUSTOM SECURITY CHECKS:
#    - Environment variable usage review
#    - Commit message security validation
#    - File size and type restrictions
#
# USAGE:
#   Install: pip install pre-commit
#   Setup: pre-commit install
#   Run: pre-commit run --all-files
#   Update: pre-commit autoupdate
#
# BYPASS (emergency only):
#   git commit --no-verify
#   SKIP=gitleaks git commit
#
# CONTINUOUS INTEGRATION:
#   Pre-commit CI is configured to run automatically
#   Updates and fixes are applied weekly
#   All hooks must pass before merge