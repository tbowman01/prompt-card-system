15cdbe7a5a7cc44bcf991d7901a69402
'use strict';
const { getBooleanOption, cppdb } = require('../util');
module.exports = function defineFunction(name, options, fn) {
    // Apply defaults
    if (options == null) options = {};
    if (typeof options === 'function') {
        fn = options;
        options = {};
    }
    // Validate arguments
    if (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');
    if (typeof fn !== 'function') throw new TypeError('Expected last argument to be a function');
    if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');
    if (!name) throw new TypeError('User-defined function name cannot be an empty string');
    // Interpret options
    const safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;
    const deterministic = getBooleanOption(options, 'deterministic');
    const directOnly = getBooleanOption(options, 'directOnly');
    const varargs = getBooleanOption(options, 'varargs');
    let argCount = -1;
    // Determine argument count
    if (!varargs) {
        argCount = fn.length;
        if (!Number.isInteger(argCount) || argCount < 0) throw new TypeError('Expected function.length to be a positive integer');
        if (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');
    }
    this[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);
    return this;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvZnVuY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgeyBnZXRCb29sZWFuT3B0aW9uLCBjcHBkYiB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZUZ1bmN0aW9uKG5hbWUsIG9wdGlvbnMsIGZuKSB7XG5cdC8vIEFwcGx5IGRlZmF1bHRzXG5cdGlmIChvcHRpb25zID09IG51bGwpIG9wdGlvbnMgPSB7fTtcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7IGZuID0gb3B0aW9uczsgb3B0aW9ucyA9IHt9OyB9XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGxhc3QgYXJndW1lbnQgdG8gYmUgYSBmdW5jdGlvbicpO1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYW4gb3B0aW9ucyBvYmplY3QnKTtcblx0aWYgKCFuYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVc2VyLWRlZmluZWQgZnVuY3Rpb24gbmFtZSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG5cblx0Ly8gSW50ZXJwcmV0IG9wdGlvbnNcblx0Y29uc3Qgc2FmZUludGVnZXJzID0gJ3NhZmVJbnRlZ2VycycgaW4gb3B0aW9ucyA/ICtnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdzYWZlSW50ZWdlcnMnKSA6IDI7XG5cdGNvbnN0IGRldGVybWluaXN0aWMgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdkZXRlcm1pbmlzdGljJyk7XG5cdGNvbnN0IGRpcmVjdE9ubHkgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdkaXJlY3RPbmx5Jyk7XG5cdGNvbnN0IHZhcmFyZ3MgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICd2YXJhcmdzJyk7XG5cdGxldCBhcmdDb3VudCA9IC0xO1xuXG5cdC8vIERldGVybWluZSBhcmd1bWVudCBjb3VudFxuXHRpZiAoIXZhcmFyZ3MpIHtcblx0XHRhcmdDb3VudCA9IGZuLmxlbmd0aDtcblx0XHRpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnQ291bnQpIHx8IGFyZ0NvdW50IDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24ubGVuZ3RoIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuXHRcdGlmIChhcmdDb3VudCA+IDEwMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1VzZXItZGVmaW5lZCBmdW5jdGlvbnMgY2Fubm90IGhhdmUgbW9yZSB0aGFuIDEwMCBhcmd1bWVudHMnKTtcblx0fVxuXG5cdHRoaXNbY3BwZGJdLmZ1bmN0aW9uKGZuLCBuYW1lLCBhcmdDb3VudCwgc2FmZUludGVnZXJzLCBkZXRlcm1pbmlzdGljLCBkaXJlY3RPbmx5KTtcblx0cmV0dXJuIHRoaXM7XG59O1xuIl0sIm5hbWVzIjpbImdldEJvb2xlYW5PcHRpb24iLCJjcHBkYiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lRnVuY3Rpb24iLCJuYW1lIiwib3B0aW9ucyIsImZuIiwiVHlwZUVycm9yIiwic2FmZUludGVnZXJzIiwiZGV0ZXJtaW5pc3RpYyIsImRpcmVjdE9ubHkiLCJ2YXJhcmdzIiwiYXJnQ291bnQiLCJsZW5ndGgiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJSYW5nZUVycm9yIiwiZnVuY3Rpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTSxFQUFFQSxnQkFBZ0IsRUFBRUMsS0FBSyxFQUFFLEdBQUdDLFFBQVE7QUFFNUNDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxlQUFlQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUN6RCxpQkFBaUI7SUFDakIsSUFBSUQsV0FBVyxNQUFNQSxVQUFVLENBQUM7SUFDaEMsSUFBSSxPQUFPQSxZQUFZLFlBQVk7UUFBRUMsS0FBS0Q7UUFBU0EsVUFBVSxDQUFDO0lBQUc7SUFFakUscUJBQXFCO0lBQ3JCLElBQUksT0FBT0QsU0FBUyxVQUFVLE1BQU0sSUFBSUcsVUFBVTtJQUNsRCxJQUFJLE9BQU9ELE9BQU8sWUFBWSxNQUFNLElBQUlDLFVBQVU7SUFDbEQsSUFBSSxPQUFPRixZQUFZLFVBQVUsTUFBTSxJQUFJRSxVQUFVO0lBQ3JELElBQUksQ0FBQ0gsTUFBTSxNQUFNLElBQUlHLFVBQVU7SUFFL0Isb0JBQW9CO0lBQ3BCLE1BQU1DLGVBQWUsa0JBQWtCSCxVQUFVLENBQUNQLGlCQUFpQk8sU0FBUyxrQkFBa0I7SUFDOUYsTUFBTUksZ0JBQWdCWCxpQkFBaUJPLFNBQVM7SUFDaEQsTUFBTUssYUFBYVosaUJBQWlCTyxTQUFTO0lBQzdDLE1BQU1NLFVBQVViLGlCQUFpQk8sU0FBUztJQUMxQyxJQUFJTyxXQUFXLENBQUM7SUFFaEIsMkJBQTJCO0lBQzNCLElBQUksQ0FBQ0QsU0FBUztRQUNiQyxXQUFXTixHQUFHTyxNQUFNO1FBQ3BCLElBQUksQ0FBQ0MsT0FBT0MsU0FBUyxDQUFDSCxhQUFhQSxXQUFXLEdBQUcsTUFBTSxJQUFJTCxVQUFVO1FBQ3JFLElBQUlLLFdBQVcsS0FBSyxNQUFNLElBQUlJLFdBQVc7SUFDMUM7SUFFQSxJQUFJLENBQUNqQixNQUFNLENBQUNrQixRQUFRLENBQUNYLElBQUlGLE1BQU1RLFVBQVVKLGNBQWNDLGVBQWVDO0lBQ3RFLE9BQU8sSUFBSTtBQUNaIn0=