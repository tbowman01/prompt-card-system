01a5a16d6b5c8d299db0a5d5b5ab4a0b
// Global test setup - runs once before all tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return globalSetup;
    }
});
const _connection = require("../database/connection");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function globalSetup() {
    console.log('üß™ Setting up global test environment...');
    // Set test environment variables
    process.env.NODE_ENV = 'test';
    process.env.DATABASE_PATH = _path.default.join(__dirname, '../../data/test.sqlite');
    process.env.OLLAMA_BASE_URL = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';
    // Ensure test data directory exists
    const testDataDir = _path.default.dirname(process.env.DATABASE_PATH);
    if (!_fs.default.existsSync(testDataDir)) {
        _fs.default.mkdirSync(testDataDir, {
            recursive: true
        });
    }
    // Clean up any existing test database
    if (_fs.default.existsSync(process.env.DATABASE_PATH)) {
        _fs.default.unlinkSync(process.env.DATABASE_PATH);
    }
    // Initialize test database
    try {
        (0, _connection.initializeDatabase)();
        console.log('‚úÖ Test database initialized');
    } catch (error) {
        console.error('‚ùå Failed to initialize test database:', error);
    }
    console.log('‚úÖ Global test setup complete');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy90ZXN0cy9nbG9iYWxTZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHbG9iYWwgdGVzdCBzZXR1cCAtIHJ1bnMgb25jZSBiZWZvcmUgYWxsIHRlc3RzXG5pbXBvcnQgeyBpbml0aWFsaXplRGF0YWJhc2UgfSBmcm9tICcuLi9kYXRhYmFzZS9jb25uZWN0aW9uJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2xvYmFsU2V0dXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnNvbGUubG9nKCfwn6eqIFNldHRpbmcgdXAgZ2xvYmFsIHRlc3QgZW52aXJvbm1lbnQuLi4nKTtcbiAgXG4gIC8vIFNldCB0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlc1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgcHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kYXRhL3Rlc3Quc3FsaXRlJyk7XG4gIHByb2Nlc3MuZW52Lk9MTEFNQV9CQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk9MTEFNQV9CQVNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDoxMTQzNCc7XG4gIFxuICAvLyBFbnN1cmUgdGVzdCBkYXRhIGRpcmVjdG9yeSBleGlzdHNcbiAgY29uc3QgdGVzdERhdGFEaXIgPSBwYXRoLmRpcm5hbWUocHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCk7XG4gIGlmICghZnMuZXhpc3RzU3luYyh0ZXN0RGF0YURpcikpIHtcbiAgICBmcy5ta2RpclN5bmModGVzdERhdGFEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9XG4gIFxuICAvLyBDbGVhbiB1cCBhbnkgZXhpc3RpbmcgdGVzdCBkYXRhYmFzZVxuICBpZiAoZnMuZXhpc3RzU3luYyhwcm9jZXNzLmVudi5EQVRBQkFTRV9QQVRIKSkge1xuICAgIGZzLnVubGlua1N5bmMocHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCk7XG4gIH1cbiAgXG4gIC8vIEluaXRpYWxpemUgdGVzdCBkYXRhYmFzZVxuICB0cnkge1xuICAgIGluaXRpYWxpemVEYXRhYmFzZSgpO1xuICAgIGNvbnNvbGUubG9nKCfinIUgVGVzdCBkYXRhYmFzZSBpbml0aWFsaXplZCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gaW5pdGlhbGl6ZSB0ZXN0IGRhdGFiYXNlOicsIGVycm9yKTtcbiAgfVxuICBcbiAgY29uc29sZS5sb2coJ+KchSBHbG9iYWwgdGVzdCBzZXR1cCBjb21wbGV0ZScpO1xufSJdLCJuYW1lcyI6WyJnbG9iYWxTZXR1cCIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJEQVRBQkFTRV9QQVRIIiwicGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJPTExBTUFfQkFTRV9VUkwiLCJ0ZXN0RGF0YURpciIsImRpcm5hbWUiLCJmcyIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJyZWN1cnNpdmUiLCJ1bmxpbmtTeW5jIiwiaW5pdGlhbGl6ZURhdGFiYXNlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDs7Ozs7K0JBS2pEOzs7ZUFBOEJBOzs7NEJBSks7NkRBQ2xCOzJEQUNGOzs7Ozs7QUFFQSxlQUFlQTtJQUM1QkMsUUFBUUMsR0FBRyxDQUFDO0lBRVosaUNBQWlDO0lBQ2pDQyxRQUFRQyxHQUFHLENBQUNDLFFBQVEsR0FBRztJQUN2QkYsUUFBUUMsR0FBRyxDQUFDRSxhQUFhLEdBQUdDLGFBQUksQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXO0lBQ2pETixRQUFRQyxHQUFHLENBQUNNLGVBQWUsR0FBR1AsUUFBUUMsR0FBRyxDQUFDTSxlQUFlLElBQUk7SUFFN0Qsb0NBQW9DO0lBQ3BDLE1BQU1DLGNBQWNKLGFBQUksQ0FBQ0ssT0FBTyxDQUFDVCxRQUFRQyxHQUFHLENBQUNFLGFBQWE7SUFDMUQsSUFBSSxDQUFDTyxXQUFFLENBQUNDLFVBQVUsQ0FBQ0gsY0FBYztRQUMvQkUsV0FBRSxDQUFDRSxTQUFTLENBQUNKLGFBQWE7WUFBRUssV0FBVztRQUFLO0lBQzlDO0lBRUEsc0NBQXNDO0lBQ3RDLElBQUlILFdBQUUsQ0FBQ0MsVUFBVSxDQUFDWCxRQUFRQyxHQUFHLENBQUNFLGFBQWEsR0FBRztRQUM1Q08sV0FBRSxDQUFDSSxVQUFVLENBQUNkLFFBQVFDLEdBQUcsQ0FBQ0UsYUFBYTtJQUN6QztJQUVBLDJCQUEyQjtJQUMzQixJQUFJO1FBQ0ZZLElBQUFBLDhCQUFrQjtRQUNsQmpCLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT2lCLE9BQU87UUFDZGxCLFFBQVFrQixLQUFLLENBQUMseUNBQXlDQTtJQUN6RDtJQUVBbEIsUUFBUUMsR0FBRyxDQUFDO0FBQ2QifQ==