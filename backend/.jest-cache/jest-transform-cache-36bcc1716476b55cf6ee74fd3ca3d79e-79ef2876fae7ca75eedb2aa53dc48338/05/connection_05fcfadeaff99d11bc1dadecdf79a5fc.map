{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/database/connection.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DATABASE_PATH = process.env.DATABASE_PATH || path.join(__dirname, '../../data/database.sqlite');\n\n// Connection pool configuration\ninterface ConnectionPoolConfig {\n  maxConnections: number;\n  idleTimeout: number;\n  retryAttempts: number;\n  retryDelay: number;\n}\n\nconst poolConfig: ConnectionPoolConfig = {\n  maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '5'),\n  idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),\n  retryAttempts: parseInt(process.env.DB_RETRY_ATTEMPTS || '3'),\n  retryDelay: parseInt(process.env.DB_RETRY_DELAY || '1000')\n};\n\n// Connection pool implementation\nclass DatabaseConnectionPool {\n  private connections: Database.Database[] = [];\n  private availableConnections: Database.Database[] = [];\n  private busyConnections: Set<Database.Database> = new Set();\n  private initialized = false;\n  private retryCount = 0;\n\n  constructor(private dbPath: string, private config: ConnectionPoolConfig) {}\n\n  private createConnection(): Database.Database {\n    // Ensure data directory exists\n    const dataDir = path.dirname(this.dbPath);\n    if (!fs.existsSync(dataDir)) {\n      fs.mkdirSync(dataDir, { recursive: true });\n    }\n\n    const connection = new Database(this.dbPath, {\n      verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n      timeout: 5000 // 5 second timeout\n    });\n\n    // Enable foreign keys and optimize for concurrent access\n    connection.pragma('foreign_keys = ON');\n    connection.pragma('journal_mode = WAL');\n    connection.pragma('synchronous = NORMAL');\n    connection.pragma('cache_size = 1000');\n    connection.pragma('temp_store = memory');\n    \n    return connection;\n  }\n\n  private async initializePool(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Create initial connections\n      for (let i = 0; i < this.config.maxConnections; i++) {\n        const connection = this.createConnection();\n        this.connections.push(connection);\n        this.availableConnections.push(connection);\n      }\n      \n      this.initialized = true;\n      this.retryCount = 0;\n      console.log(`Database connection pool initialized with ${this.config.maxConnections} connections`);\n    } catch (error) {\n      console.error('Failed to initialize database connection pool:', error);\n      await this.retryConnection();\n    }\n  }\n\n  private async retryConnection(): Promise<void> {\n    if (this.retryCount >= this.config.retryAttempts) {\n      throw new Error(`Failed to connect to database after ${this.config.retryAttempts} attempts`);\n    }\n\n    this.retryCount++;\n    console.log(`Retrying database connection (attempt ${this.retryCount}/${this.config.retryAttempts})...`);\n    \n    await new Promise(resolve => setTimeout(resolve, this.config.retryDelay * this.retryCount));\n    await this.initializePool();\n  }\n\n  async getConnection(): Promise<Database.Database> {\n    if (!this.initialized) {\n      await this.initializePool();\n    }\n\n    if (this.availableConnections.length === 0) {\n      // Wait for a connection to become available\n      await new Promise(resolve => setTimeout(resolve, 10));\n      return this.getConnection();\n    }\n\n    const connection = this.availableConnections.pop()!;\n    this.busyConnections.add(connection);\n    return connection;\n  }\n\n  releaseConnection(connection: Database.Database): void {\n    if (this.busyConnections.has(connection)) {\n      this.busyConnections.delete(connection);\n      this.availableConnections.push(connection);\n    }\n  }\n\n  async withConnection<T>(operation: (db: Database.Database) => Promise<T> | T): Promise<T> {\n    const connection = await this.getConnection();\n    try {\n      return await operation(connection);\n    } finally {\n      this.releaseConnection(connection);\n    }\n  }\n\n  getStats() {\n    return {\n      total: this.connections.length,\n      available: this.availableConnections.length,\n      busy: this.busyConnections.size,\n      initialized: this.initialized\n    };\n  }\n\n  close(): void {\n    this.connections.forEach(conn => {\n      try {\n        conn.close();\n      } catch (error) {\n        console.error('Error closing database connection:', error);\n      }\n    });\n    this.connections = [];\n    this.availableConnections = [];\n    this.busyConnections.clear();\n    this.initialized = false;\n  }\n}\n\n// Create global connection pool\nconst connectionPool = new DatabaseConnectionPool(DATABASE_PATH, poolConfig);\n\n// Export properly typed db interface\nexport const db: DatabaseConnection = {\n  prepare: (sql: string): PreparedStatement => {\n    // Return sync interface for existing code compatibility\n    const stmt = {\n      run: (...params: any[]) => {\n        // Synchronous wrapper around async pool\n        const conn = connectionPool.connections[0]; // Use first available connection\n        if (!conn) throw new Error('No database connection available');\n        return conn.prepare(sql).run(...params);\n      },\n      get: (...params: any[]) => {\n        const conn = connectionPool.connections[0];\n        if (!conn) throw new Error('No database connection available');\n        return conn.prepare(sql).get(...params);\n      },\n      all: (...params: any[]) => {\n        const conn = connectionPool.connections[0];\n        if (!conn) throw new Error('No database connection available');\n        return conn.prepare(sql).all(...params);\n      }\n    };\n    return stmt;\n  },\n  exec: (sql: string) => {\n    // Synchronous exec for compatibility\n    const conn = connectionPool.connections[0];\n    if (!conn) throw new Error('No database connection available');\n    try {\n      return conn.exec(sql);\n    } catch (error) {\n      throw error;\n    }\n  },\n  pragma: (pragma: string) => {\n    const conn = connectionPool.connections[0];\n    if (!conn) throw new Error('No database connection available');\n    return conn.pragma(pragma);\n  },\n  close: () => connectionPool.close(),\n  transaction: (operations: (db: Database.Database) => any) => {\n    const conn = connectionPool.connections[0];\n    if (!conn) throw new Error('No database connection available');\n    const transaction = conn.transaction(operations);\n    return transaction(conn);\n  },\n  getStats: () => connectionPool.getStats()\n};\n\n// Export connection pool for advanced usage\nexport { connectionPool };\n\n// Initialize database tables\nexport async function initializeDatabase(): Promise<any> {\n  console.log('Initializing database...');\n  \n  try {\n    // Create prompt_cards table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS prompt_cards (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        prompt_template TEXT NOT NULL,\n        variables TEXT DEFAULT '[]', -- JSON array of variable names\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create test_cases table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_cases (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        prompt_card_id INTEGER NOT NULL,\n        name TEXT NOT NULL,\n        input_variables TEXT NOT NULL, -- JSON object\n        expected_output TEXT,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion objects\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create enhanced test_results table for Phase 4\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_results (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        test_case_id INTEGER NOT NULL,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        response TEXT NOT NULL,\n        passed BOOLEAN NOT NULL,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion results\n        execution_time_ms INTEGER,\n        error TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create test execution queue table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_execution_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT UNIQUE NOT NULL,\n        prompt_card_id INTEGER NOT NULL,\n        test_case_ids TEXT NOT NULL, -- JSON array\n        model TEXT NOT NULL,\n        status TEXT DEFAULT 'pending', -- pending, running, completed, failed, cancelled\n        priority INTEGER DEFAULT 0,\n        configuration TEXT, -- JSON\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        started_at DATETIME,\n        completed_at DATETIME,\n        error_message TEXT,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id)\n      )\n    `);\n\n    // Create assertion_types table for advanced assertion system\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_types (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT NOT NULL,\n        parameters TEXT NOT NULL, -- JSON\n        examples TEXT NOT NULL, -- JSON\n        validator_code TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create assertion execution stats table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_execution_stats (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        assertion_type TEXT NOT NULL,\n        total_executions INTEGER DEFAULT 0,\n        successful_executions INTEGER DEFAULT 0,\n        failed_executions INTEGER DEFAULT 0,\n        total_execution_time INTEGER DEFAULT 0,\n        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(assertion_type)\n      )\n    `);\n\n    // Create indexes for better performance\n    await db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_prompt_cards_title ON prompt_cards(title);\n      CREATE INDEX IF NOT EXISTS idx_test_cases_prompt_card_id ON test_cases(prompt_card_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_test_case_id ON test_results(test_case_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_execution_id ON test_results(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_status ON test_execution_queue(status);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_priority ON test_execution_queue(priority DESC);\n      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);\n      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);\n    `);\n\n    console.log('Database initialized successfully');\n    return db;\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    throw error;\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('Closing database connection...');\n  db.close();\n  process.exit(0);\n});\n\nexport default db;"],"names":["connectionPool","db","initializeDatabase","DATABASE_PATH","process","env","path","join","__dirname","poolConfig","maxConnections","parseInt","DB_MAX_CONNECTIONS","idleTimeout","DB_IDLE_TIMEOUT","retryAttempts","DB_RETRY_ATTEMPTS","retryDelay","DB_RETRY_DELAY","DatabaseConnectionPool","createConnection","dataDir","dirname","dbPath","fs","existsSync","mkdirSync","recursive","connection","Database","verbose","NODE_ENV","console","log","undefined","timeout","pragma","initializePool","initialized","i","config","connections","push","availableConnections","retryCount","error","retryConnection","Error","Promise","resolve","setTimeout","getConnection","length","pop","busyConnections","add","releaseConnection","has","delete","withConnection","operation","getStats","total","available","busy","size","close","forEach","conn","clear","Set","prepare","sql","stmt","run","params","get","all","exec","transaction","operations","on","exit"],"mappings":"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"}