25fa25beef01d7a05007259d0277ac1b
'use strict';
const fs = require('fs');
const path = require('path');
const util = require('./util');
const SqliteError = require('./sqlite-error');
let DEFAULT_ADDON;
function Database(filenameGiven, options) {
    if (new.target == null) {
        return new Database(filenameGiven, options);
    }
    // Apply defaults
    let buffer;
    if (Buffer.isBuffer(filenameGiven)) {
        buffer = filenameGiven;
        filenameGiven = ':memory:';
    }
    if (filenameGiven == null) filenameGiven = '';
    if (options == null) options = {};
    // Validate arguments
    if (typeof filenameGiven !== 'string') throw new TypeError('Expected first argument to be a string');
    if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');
    if ('readOnly' in options) throw new TypeError('Misspelled option "readOnly" should be "readonly"');
    if ('memory' in options) throw new TypeError('Option "memory" was removed in v7.0.0 (use ":memory:" filename instead)');
    // Interpret options
    const filename = filenameGiven.trim();
    const anonymous = filename === '' || filename === ':memory:';
    const readonly = util.getBooleanOption(options, 'readonly');
    const fileMustExist = util.getBooleanOption(options, 'fileMustExist');
    const timeout = 'timeout' in options ? options.timeout : 5000;
    const verbose = 'verbose' in options ? options.verbose : null;
    const nativeBinding = 'nativeBinding' in options ? options.nativeBinding : null;
    // Validate interpreted options
    if (readonly && anonymous && !buffer) throw new TypeError('In-memory/temporary databases cannot be readonly');
    if (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the "timeout" option to be a positive integer');
    if (timeout > 0x7fffffff) throw new RangeError('Option "timeout" cannot be greater than 2147483647');
    if (verbose != null && typeof verbose !== 'function') throw new TypeError('Expected the "verbose" option to be a function');
    if (nativeBinding != null && typeof nativeBinding !== 'string' && typeof nativeBinding !== 'object') throw new TypeError('Expected the "nativeBinding" option to be a string or addon object');
    // Load the native addon
    let addon;
    if (nativeBinding == null) {
        addon = DEFAULT_ADDON || (DEFAULT_ADDON = require('bindings')('better_sqlite3.node'));
    } else if (typeof nativeBinding === 'string') {
        // See <https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific>
        const requireFunc = typeof __non_webpack_require__ === 'function' ? __non_webpack_require__ : require;
        addon = requireFunc(path.resolve(nativeBinding).replace(/(\.node)?$/, '.node'));
    } else {
        // See <https://github.com/WiseLibs/better-sqlite3/issues/972>
        addon = nativeBinding;
    }
    if (!addon.isInitialized) {
        addon.setErrorConstructor(SqliteError);
        addon.isInitialized = true;
    }
    // Make sure the specified directory exists
    if (!anonymous && !fs.existsSync(path.dirname(filename))) {
        throw new TypeError('Cannot open database because the directory does not exist');
    }
    Object.defineProperties(this, {
        [util.cppdb]: {
            value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null)
        },
        ...wrappers.getters
    });
}
const wrappers = require('./methods/wrappers');
Database.prototype.prepare = wrappers.prepare;
Database.prototype.transaction = require('./methods/transaction');
Database.prototype.pragma = require('./methods/pragma');
Database.prototype.backup = require('./methods/backup');
Database.prototype.serialize = require('./methods/serialize');
Database.prototype.function = require('./methods/function');
Database.prototype.aggregate = require('./methods/aggregate');
Database.prototype.table = require('./methods/table');
Database.prototype.loadExtension = wrappers.loadExtension;
Database.prototype.exec = wrappers.exec;
Database.prototype.close = wrappers.close;
Database.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;
Database.prototype.unsafeMode = wrappers.unsafeMode;
Database.prototype[util.inspect] = require('./methods/inspect');
module.exports = Database;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2RhdGFiYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5jb25zdCBTcWxpdGVFcnJvciA9IHJlcXVpcmUoJy4vc3FsaXRlLWVycm9yJyk7XG5cbmxldCBERUZBVUxUX0FERE9OO1xuXG5mdW5jdGlvbiBEYXRhYmFzZShmaWxlbmFtZUdpdmVuLCBvcHRpb25zKSB7XG5cdGlmIChuZXcudGFyZ2V0ID09IG51bGwpIHtcblx0XHRyZXR1cm4gbmV3IERhdGFiYXNlKGZpbGVuYW1lR2l2ZW4sIG9wdGlvbnMpO1xuXHR9XG5cblx0Ly8gQXBwbHkgZGVmYXVsdHNcblx0bGV0IGJ1ZmZlcjtcblx0aWYgKEJ1ZmZlci5pc0J1ZmZlcihmaWxlbmFtZUdpdmVuKSkge1xuXHRcdGJ1ZmZlciA9IGZpbGVuYW1lR2l2ZW47XG5cdFx0ZmlsZW5hbWVHaXZlbiA9ICc6bWVtb3J5Oic7XG5cdH1cblx0aWYgKGZpbGVuYW1lR2l2ZW4gPT0gbnVsbCkgZmlsZW5hbWVHaXZlbiA9ICcnO1xuXHRpZiAob3B0aW9ucyA9PSBudWxsKSBvcHRpb25zID0ge307XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgZmlsZW5hbWVHaXZlbiAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXHRpZiAoJ3JlYWRPbmx5JyBpbiBvcHRpb25zKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdNaXNzcGVsbGVkIG9wdGlvbiBcInJlYWRPbmx5XCIgc2hvdWxkIGJlIFwicmVhZG9ubHlcIicpO1xuXHRpZiAoJ21lbW9yeScgaW4gb3B0aW9ucykgdGhyb3cgbmV3IFR5cGVFcnJvcignT3B0aW9uIFwibWVtb3J5XCIgd2FzIHJlbW92ZWQgaW4gdjcuMC4wICh1c2UgXCI6bWVtb3J5OlwiIGZpbGVuYW1lIGluc3RlYWQpJyk7XG5cblx0Ly8gSW50ZXJwcmV0IG9wdGlvbnNcblx0Y29uc3QgZmlsZW5hbWUgPSBmaWxlbmFtZUdpdmVuLnRyaW0oKTtcblx0Y29uc3QgYW5vbnltb3VzID0gZmlsZW5hbWUgPT09ICcnIHx8IGZpbGVuYW1lID09PSAnOm1lbW9yeTonO1xuXHRjb25zdCByZWFkb25seSA9IHV0aWwuZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAncmVhZG9ubHknKTtcblx0Y29uc3QgZmlsZU11c3RFeGlzdCA9IHV0aWwuZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnZmlsZU11c3RFeGlzdCcpO1xuXHRjb25zdCB0aW1lb3V0ID0gJ3RpbWVvdXQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRpbWVvdXQgOiA1MDAwO1xuXHRjb25zdCB2ZXJib3NlID0gJ3ZlcmJvc2UnIGluIG9wdGlvbnMgPyBvcHRpb25zLnZlcmJvc2UgOiBudWxsO1xuXHRjb25zdCBuYXRpdmVCaW5kaW5nID0gJ25hdGl2ZUJpbmRpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLm5hdGl2ZUJpbmRpbmcgOiBudWxsO1xuXG5cdC8vIFZhbGlkYXRlIGludGVycHJldGVkIG9wdGlvbnNcblx0aWYgKHJlYWRvbmx5ICYmIGFub255bW91cyAmJiAhYnVmZmVyKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbi1tZW1vcnkvdGVtcG9yYXJ5IGRhdGFiYXNlcyBjYW5ub3QgYmUgcmVhZG9ubHknKTtcblx0aWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHRpbWVvdXQpIHx8IHRpbWVvdXQgPCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgXCJ0aW1lb3V0XCIgb3B0aW9uIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuXHRpZiAodGltZW91dCA+IDB4N2ZmZmZmZmYpIHRocm93IG5ldyBSYW5nZUVycm9yKCdPcHRpb24gXCJ0aW1lb3V0XCIgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAyMTQ3NDgzNjQ3Jyk7XG5cdGlmICh2ZXJib3NlICE9IG51bGwgJiYgdHlwZW9mIHZlcmJvc2UgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcInZlcmJvc2VcIiBvcHRpb24gdG8gYmUgYSBmdW5jdGlvbicpO1xuXHRpZiAobmF0aXZlQmluZGluZyAhPSBudWxsICYmIHR5cGVvZiBuYXRpdmVCaW5kaW5nICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgbmF0aXZlQmluZGluZyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcIm5hdGl2ZUJpbmRpbmdcIiBvcHRpb24gdG8gYmUgYSBzdHJpbmcgb3IgYWRkb24gb2JqZWN0Jyk7XG5cblx0Ly8gTG9hZCB0aGUgbmF0aXZlIGFkZG9uXG5cdGxldCBhZGRvbjtcblx0aWYgKG5hdGl2ZUJpbmRpbmcgPT0gbnVsbCkge1xuXHRcdGFkZG9uID0gREVGQVVMVF9BRERPTiB8fCAoREVGQVVMVF9BRERPTiA9IHJlcXVpcmUoJ2JpbmRpbmdzJykoJ2JldHRlcl9zcWxpdGUzLm5vZGUnKSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG5hdGl2ZUJpbmRpbmcgPT09ICdzdHJpbmcnKSB7XG5cdFx0Ly8gU2VlIDxodHRwczovL3dlYnBhY2suanMub3JnL2FwaS9tb2R1bGUtdmFyaWFibGVzLyNfX25vbl93ZWJwYWNrX3JlcXVpcmVfXy13ZWJwYWNrLXNwZWNpZmljPlxuXHRcdGNvbnN0IHJlcXVpcmVGdW5jID0gdHlwZW9mIF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fID09PSAnZnVuY3Rpb24nID8gX19ub25fd2VicGFja19yZXF1aXJlX18gOiByZXF1aXJlO1xuXHRcdGFkZG9uID0gcmVxdWlyZUZ1bmMocGF0aC5yZXNvbHZlKG5hdGl2ZUJpbmRpbmcpLnJlcGxhY2UoLyhcXC5ub2RlKT8kLywgJy5ub2RlJykpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFNlZSA8aHR0cHM6Ly9naXRodWIuY29tL1dpc2VMaWJzL2JldHRlci1zcWxpdGUzL2lzc3Vlcy85NzI+XG5cdFx0YWRkb24gPSBuYXRpdmVCaW5kaW5nO1xuXHR9XG5cblx0aWYgKCFhZGRvbi5pc0luaXRpYWxpemVkKSB7XG5cdFx0YWRkb24uc2V0RXJyb3JDb25zdHJ1Y3RvcihTcWxpdGVFcnJvcik7XG5cdFx0YWRkb24uaXNJbml0aWFsaXplZCA9IHRydWU7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkgZXhpc3RzXG5cdGlmICghYW5vbnltb3VzICYmICFmcy5leGlzdHNTeW5jKHBhdGguZGlybmFtZShmaWxlbmFtZSkpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IG9wZW4gZGF0YWJhc2UgYmVjYXVzZSB0aGUgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0Jyk7XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG5cdFx0W3V0aWwuY3BwZGJdOiB7IHZhbHVlOiBuZXcgYWRkb24uRGF0YWJhc2UoZmlsZW5hbWUsIGZpbGVuYW1lR2l2ZW4sIGFub255bW91cywgcmVhZG9ubHksIGZpbGVNdXN0RXhpc3QsIHRpbWVvdXQsIHZlcmJvc2UgfHwgbnVsbCwgYnVmZmVyIHx8IG51bGwpIH0sXG5cdFx0Li4ud3JhcHBlcnMuZ2V0dGVycyxcblx0fSk7XG59XG5cbmNvbnN0IHdyYXBwZXJzID0gcmVxdWlyZSgnLi9tZXRob2RzL3dyYXBwZXJzJyk7XG5EYXRhYmFzZS5wcm90b3R5cGUucHJlcGFyZSA9IHdyYXBwZXJzLnByZXBhcmU7XG5EYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL21ldGhvZHMvdHJhbnNhY3Rpb24nKTtcbkRhdGFiYXNlLnByb3RvdHlwZS5wcmFnbWEgPSByZXF1aXJlKCcuL21ldGhvZHMvcHJhZ21hJyk7XG5EYXRhYmFzZS5wcm90b3R5cGUuYmFja3VwID0gcmVxdWlyZSgnLi9tZXRob2RzL2JhY2t1cCcpO1xuRGF0YWJhc2UucHJvdG90eXBlLnNlcmlhbGl6ZSA9IHJlcXVpcmUoJy4vbWV0aG9kcy9zZXJpYWxpemUnKTtcbkRhdGFiYXNlLnByb3RvdHlwZS5mdW5jdGlvbiA9IHJlcXVpcmUoJy4vbWV0aG9kcy9mdW5jdGlvbicpO1xuRGF0YWJhc2UucHJvdG90eXBlLmFnZ3JlZ2F0ZSA9IHJlcXVpcmUoJy4vbWV0aG9kcy9hZ2dyZWdhdGUnKTtcbkRhdGFiYXNlLnByb3RvdHlwZS50YWJsZSA9IHJlcXVpcmUoJy4vbWV0aG9kcy90YWJsZScpO1xuRGF0YWJhc2UucHJvdG90eXBlLmxvYWRFeHRlbnNpb24gPSB3cmFwcGVycy5sb2FkRXh0ZW5zaW9uO1xuRGF0YWJhc2UucHJvdG90eXBlLmV4ZWMgPSB3cmFwcGVycy5leGVjO1xuRGF0YWJhc2UucHJvdG90eXBlLmNsb3NlID0gd3JhcHBlcnMuY2xvc2U7XG5EYXRhYmFzZS5wcm90b3R5cGUuZGVmYXVsdFNhZmVJbnRlZ2VycyA9IHdyYXBwZXJzLmRlZmF1bHRTYWZlSW50ZWdlcnM7XG5EYXRhYmFzZS5wcm90b3R5cGUudW5zYWZlTW9kZSA9IHdyYXBwZXJzLnVuc2FmZU1vZGU7XG5EYXRhYmFzZS5wcm90b3R5cGVbdXRpbC5pbnNwZWN0XSA9IHJlcXVpcmUoJy4vbWV0aG9kcy9pbnNwZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YWJhc2U7XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsInV0aWwiLCJTcWxpdGVFcnJvciIsIkRFRkFVTFRfQURET04iLCJEYXRhYmFzZSIsImZpbGVuYW1lR2l2ZW4iLCJvcHRpb25zIiwiYnVmZmVyIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJUeXBlRXJyb3IiLCJmaWxlbmFtZSIsInRyaW0iLCJhbm9ueW1vdXMiLCJyZWFkb25seSIsImdldEJvb2xlYW5PcHRpb24iLCJmaWxlTXVzdEV4aXN0IiwidGltZW91dCIsInZlcmJvc2UiLCJuYXRpdmVCaW5kaW5nIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiUmFuZ2VFcnJvciIsImFkZG9uIiwicmVxdWlyZUZ1bmMiLCJfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyIsInJlc29sdmUiLCJyZXBsYWNlIiwiaXNJbml0aWFsaXplZCIsInNldEVycm9yQ29uc3RydWN0b3IiLCJleGlzdHNTeW5jIiwiZGlybmFtZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJjcHBkYiIsInZhbHVlIiwid3JhcHBlcnMiLCJnZXR0ZXJzIiwicHJvdG90eXBlIiwicHJlcGFyZSIsInRyYW5zYWN0aW9uIiwicHJhZ21hIiwiYmFja3VwIiwic2VyaWFsaXplIiwiZnVuY3Rpb24iLCJhZ2dyZWdhdGUiLCJ0YWJsZSIsImxvYWRFeHRlbnNpb24iLCJleGVjIiwiY2xvc2UiLCJkZWZhdWx0U2FmZUludGVnZXJzIiwidW5zYWZlTW9kZSIsImluc3BlY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLEtBQUtDLFFBQVE7QUFDbkIsTUFBTUMsT0FBT0QsUUFBUTtBQUNyQixNQUFNRSxPQUFPRixRQUFRO0FBQ3JCLE1BQU1HLGNBQWNILFFBQVE7QUFFNUIsSUFBSUk7QUFFSixTQUFTQyxTQUFTQyxhQUFhLEVBQUVDLE9BQU87SUFDdkMsSUFBSSxjQUFjLE1BQU07UUFDdkIsT0FBTyxJQUFJRixTQUFTQyxlQUFlQztJQUNwQztJQUVBLGlCQUFpQjtJQUNqQixJQUFJQztJQUNKLElBQUlDLE9BQU9DLFFBQVEsQ0FBQ0osZ0JBQWdCO1FBQ25DRSxTQUFTRjtRQUNUQSxnQkFBZ0I7SUFDakI7SUFDQSxJ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