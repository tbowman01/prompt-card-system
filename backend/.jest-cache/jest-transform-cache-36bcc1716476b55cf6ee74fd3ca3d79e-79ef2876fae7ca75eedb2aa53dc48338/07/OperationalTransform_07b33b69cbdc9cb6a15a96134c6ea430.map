{"version":3,"names":["cov_3uxu83xr4","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","OperationalTransform","transform","op1","op2","userId","transformed","priority","type","transformInsertInsert","transformInsertDelete","transformDeleteInsert","transformDeleteDelete","transformInsertRetain","transformDeleteRetain","position","timestamp","content","length","op1End","op2End","applyOperation","operation","documentState","slice","version","lastModified","Date","now","operations","getDocumentState","documentId","documents","get","initializeDocument","initialContent","state","id","set","processOperationQueue","document","pendingOperations","sort","a","currentState","processedOps","transformedOp","processedOp","result","push","delete","addPendingOperation","pending","getMetrics","documentsCount","size","totalPendingOps","Array","from","values","reduce","sum","ops","totalOps","doc","pendingOperationsCount","averageOperationsPerDocument","constructor","Map"],"sources":["OperationalTransform.ts"],"sourcesContent":["/**\n * Operational Transform (OT) Service for Real-time Collaborative Editing\n * Implements transformation algorithms to handle concurrent edits\n */ function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nexport class OperationalTransform {\n    /**\n   * Transform operation against another operation\n   * Implements operational transformation algorithms for conflict resolution\n   */ transform(op1, op2) {\n        // If operations are from the same user, no transformation needed\n        if (op1.userId === op2.userId) {\n            return {\n                transformed: op1,\n                priority: 0\n            };\n        }\n        // Transform based on operation types\n        switch(`${op1.type}-${op2.type}`){\n            case 'insert-insert':\n                return this.transformInsertInsert(op1, op2);\n            case 'insert-delete':\n                return this.transformInsertDelete(op1, op2);\n            case 'delete-insert':\n                return this.transformDeleteInsert(op1, op2);\n            case 'delete-delete':\n                return this.transformDeleteDelete(op1, op2);\n            case 'insert-retain':\n                return this.transformInsertRetain(op1, op2);\n            case 'delete-retain':\n                return this.transformDeleteRetain(op1, op2);\n            default:\n                return {\n                    transformed: op1,\n                    priority: 0\n                };\n        }\n    }\n    /**\n   * Transform insert operations against each other\n   */ transformInsertInsert(op1, op2) {\n        if (op1.position <= op2.position) {\n            // op1 comes before op2, adjust op2's position\n            return {\n                transformed: {\n                    ...op1,\n                    position: op1.position\n                },\n                priority: op1.timestamp < op2.timestamp ? 1 : -1\n            };\n        } else {\n            // op2 comes before op1, adjust op1's position\n            return {\n                transformed: {\n                    ...op1,\n                    position: op1.position + (op2.content?.length || 0)\n                },\n                priority: op1.timestamp < op2.timestamp ? 1 : -1\n            };\n        }\n    }\n    /**\n   * Transform insert against delete operation\n   */ transformInsertDelete(op1, op2) {\n        if (op1.position <= op2.position) {\n            // Insert before delete, no transformation needed\n            return {\n                transformed: op1,\n                priority: 1\n            };\n        } else if (op1.position >= op2.position + (op2.length || 0)) {\n            // Insert after delete, adjust position\n            return {\n                transformed: {\n                    ...op1,\n                    position: op1.position - (op2.length || 0)\n                },\n                priority: 1\n            };\n        } else {\n            // Insert within delete range, position at delete start\n            return {\n                transformed: {\n                    ...op1,\n                    position: op2.position\n                },\n                priority: 1\n            };\n        }\n    }\n    /**\n   * Transform delete against insert operation\n   */ transformDeleteInsert(op1, op2) {\n        if (op2.position <= op1.position) {\n            // Insert before delete, adjust delete position\n            return {\n                transformed: {\n                    ...op1,\n                    position: op1.position + (op2.content?.length || 0)\n                },\n                priority: -1\n            };\n        } else if (op2.position >= op1.position + (op1.length || 0)) {\n            // Insert after delete, no transformation needed\n            return {\n                transformed: op1,\n                priority: 1\n            };\n        } else {\n            // Insert within delete range, split delete operation\n            return {\n                transformed: {\n                    ...op1,\n                    length: (op1.length || 0) + (op2.content?.length || 0)\n                },\n                priority: -1\n            };\n        }\n    }\n    /**\n   * Transform delete operations against each other\n   */ transformDeleteDelete(op1, op2) {\n        const op1End = op1.position + (op1.length || 0);\n        const op2End = op2.position + (op2.length || 0);\n        if (op1End <= op2.position) {\n            // op1 before op2, no overlap\n            return {\n                transformed: op1,\n                priority: 0\n            };\n        } else if (op2End <= op1.position) {\n            // op2 before op1, adjust op1 position\n            return {\n                transformed: {\n                    ...op1,\n                    position: op1.position - (op2.length || 0)\n                },\n                priority: 0\n            };\n        } else {\n            // Overlapping deletes, resolve based on timestamp\n            const priority = op1.timestamp < op2.timestamp ? 1 : -1;\n            if (op1.position <= op2.position && op1End >= op2End) {\n                // op1 contains op2, reduce op1 length\n                return {\n                    transformed: {\n                        ...op1,\n                        length: (op1.length || 0) - (op2.length || 0)\n                    },\n                    priority\n                };\n            } else if (op2.position <= op1.position && op2End >= op1End) {\n                // op2 contains op1, op1 becomes no-op\n                return {\n                    transformed: {\n                        ...op1,\n                        type: 'retain',\n                        length: 0\n                    },\n                    priority\n                };\n            } else {\n                // Partial overlap, adjust based on priority\n                return {\n                    transformed: op1,\n                    priority\n                };\n            }\n        }\n    }\n    /**\n   * Transform insert against retain operation\n   */ transformInsertRetain(op1, op2) {\n        return {\n            transformed: op1,\n            priority: 0\n        };\n    }\n    /**\n   * Transform delete against retain operation\n   */ transformDeleteRetain(op1, op2) {\n        return {\n            transformed: op1,\n            priority: 0\n        };\n    }\n    /**\n   * Apply operation to document\n   */ applyOperation(operation, documentState) {\n        let content = documentState.content;\n        switch(operation.type){\n            case 'insert':\n                content = content.slice(0, operation.position) + (operation.content || '') + content.slice(operation.position);\n                break;\n            case 'delete':\n                content = content.slice(0, operation.position) + content.slice(operation.position + (operation.length || 0));\n                break;\n            case 'retain':\n                break;\n        }\n        return {\n            ...documentState,\n            content,\n            version: documentState.version + 1,\n            lastModified: Date.now(),\n            operations: [\n                ...documentState.operations,\n                operation\n            ]\n        };\n    }\n    /**\n   * Get document state\n   */ getDocumentState(documentId) {\n        return this.documents.get(documentId);\n    }\n    /**\n   * Initialize document\n   */ initializeDocument(documentId, initialContent = '') {\n        const state = {\n            id: documentId,\n            content: initialContent,\n            version: 0,\n            lastModified: Date.now(),\n            operations: []\n        };\n        this.documents.set(documentId, state);\n        return state;\n    }\n    /**\n   * Process operation queue for document\n   */ processOperationQueue(documentId) {\n        const document = this.documents.get(documentId);\n        const operations = this.pendingOperations.get(documentId) || [];\n        if (!document || operations.length === 0) {\n            return document;\n        }\n        // Sort operations by timestamp\n        operations.sort((a, b)=>a.timestamp - b.timestamp);\n        let currentState = document;\n        const processedOps = [];\n        for (const operation of operations){\n            // Transform against all previously processed operations\n            let transformedOp = operation;\n            for (const processedOp of processedOps){\n                const result = this.transform(transformedOp, processedOp);\n                transformedOp = result.transformed;\n            }\n            // Apply transformed operation\n            currentState = this.applyOperation(transformedOp, currentState);\n            processedOps.push(transformedOp);\n        }\n        // Update document state\n        this.documents.set(documentId, currentState);\n        this.pendingOperations.delete(documentId);\n        return currentState;\n    }\n    /**\n   * Add operation to pending queue\n   */ addPendingOperation(operation) {\n        const pending = this.pendingOperations.get(operation.documentId) || [];\n        pending.push(operation);\n        this.pendingOperations.set(operation.documentId, pending);\n    }\n    /**\n   * Get operational transform metrics\n   */ getMetrics() {\n        const documentsCount = this.documents.size;\n        const totalPendingOps = Array.from(this.pendingOperations.values()).reduce((sum, ops)=>sum + ops.length, 0);\n        const totalOps = Array.from(this.documents.values()).reduce((sum, doc)=>sum + doc.operations.length, 0);\n        return {\n            documentsCount,\n            pendingOperationsCount: totalPendingOps,\n            averageOperationsPerDocument: documentsCount > 0 ? totalOps / documentsCount : 0\n        };\n    }\n    constructor(){\n        _define_property(this, \"documents\", new Map());\n        _define_property(this, \"pendingOperations\", new Map());\n    }\n}\nexport default OperationalTransform;\n"],"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","ignoreList":[]}