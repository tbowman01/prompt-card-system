{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/yaml.ts"],"sourcesContent":["import { Router } from 'express';\nimport { db } from '../database/connection';\nimport yaml from 'js-yaml';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\nimport { CreateTestCaseRequest, AssertionType } from '../types/testCase';\n\nconst router = Router();\n\ninterface PromptfooConfig {\n  prompts: string[];\n  providers: string[];\n  tests: Array<{\n    vars: Record<string, any>;\n    assert?: Array<{\n      type: string;\n      value: string | number;\n      description?: string;\n    }>;\n  }>;\n  description?: string;\n}\n\n// Export prompt card(s) to YAML\nrouter.get('/export/:id?', (req, res) => {\n  try {\n    const { id } = req.params;\n    let promptCards: any[];\n\n    if (id) {\n      // Export single prompt card\n      const card = db.prepare(`\n        SELECT * FROM prompt_cards WHERE id = ?\n      `).get(id);\n\n      if (!card) {\n        return res.status(404).json({\n          success: false,\n          error: 'Prompt card not found'\n        });\n      }\n\n      const testCases = db.prepare(`\n        SELECT * FROM test_cases WHERE prompt_card_id = ?\n      `).all(id);\n\n      promptCards = [{\n        ...card,\n        test_cases: testCases\n      }];\n    } else {\n      // Export all prompt cards\n      const cards = db.prepare('SELECT * FROM prompt_cards ORDER BY created_at DESC').all() as PromptCard[];\n      promptCards = cards.map((card: PromptCard) => {\n        const testCases = db.prepare(`\n          SELECT * FROM test_cases WHERE prompt_card_id = ?\n        `).all(card.id);\n        return { ...card, test_cases: testCases };\n      });\n    }\n\n    // Convert to Promptfoo format\n    const promptfooConfigs = promptCards.map(card => {\n      const config: PromptfooConfig = {\n        prompts: [card.prompt_template],\n        providers: ['ollama:chat:llama2:7b'], // Default provider\n        tests: card.test_cases.map((tc: any) => ({\n          vars: JSON.parse(tc.input_variables),\n          assert: JSON.parse(tc.assertions || '[]')\n        })),\n        description: card.description || card.title\n      };\n      return config;\n    });\n\n    // If single card, return single config, otherwise return array\n    const yamlContent = yaml.dump(promptCards.length === 1 ? promptfooConfigs[0] : promptfooConfigs);\n\n    res.setHeader('Content-Type', 'application/x-yaml');\n    res.setHeader('Content-Disposition', `attachment; filename=\"prompt-cards-${Date.now()}.yaml\"`);\n    return res.send(yamlContent);\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to export YAML'\n    });\n  }\n});\n\n// Import prompt cards from YAML\nrouter.post('/import', (req, res) => {\n  try {\n    const { yamlContent } = req.body;\n\n    if (!yamlContent) {\n      return res.status(400).json({\n        success: false,\n        error: 'YAML content is required'\n      });\n    }\n\n    // Parse YAML\n    const parsed = yaml.load(yamlContent);\n    if (!parsed) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid YAML content'\n      });\n    }\n\n    // Handle both single config and array of configs\n    const configs = Array.isArray(parsed) ? parsed : [parsed];\n    const importedCards: any[] = [];\n\n    // Begin transaction\n    const transaction = db.transaction((configs: PromptfooConfig[]) => {\n      for (const config of configs) {\n        // Validate config structure\n        if (!config.prompts || !Array.isArray(config.prompts) || config.prompts.length === 0) {\n          throw new Error('Invalid config: prompts array is required');\n        }\n\n        if (!config.tests || !Array.isArray(config.tests)) {\n          throw new Error('Invalid config: tests array is required');\n        }\n\n        // Extract variables from prompt template\n        const promptTemplate = config.prompts[0];\n        const variableMatches = promptTemplate.match(/\\{\\{(\\w+)\\}\\}/g) || [];\n        const variables = variableMatches.map(match => match.replace(/\\{\\{|\\}\\}/g, ''));\n\n        // Create prompt card\n        const cardData: CreatePromptCardRequest = {\n          title: config.description || `Imported Prompt ${Date.now()}`,\n          description: config.description,\n          prompt_template: promptTemplate,\n          variables\n        };\n\n        const cardResult = db.prepare(`\n          INSERT INTO prompt_cards (title, description, prompt_template, variables)\n          VALUES (?, ?, ?, ?)\n        `).run(\n          cardData.title,\n          cardData.description,\n          cardData.prompt_template,\n          JSON.stringify(cardData.variables || [])\n        );\n\n        const promptCardId = cardResult.lastInsertRowid as number;\n\n        // Create test cases\n        for (let i = 0; i < config.tests.length; i++) {\n          const test = config.tests[i];\n          const testCaseData: CreateTestCaseRequest = {\n            prompt_card_id: promptCardId,\n            name: `Test Case ${i + 1}`,\n            input_variables: test.vars || {},\n            assertions: (test.assert || []) as AssertionType[]\n          };\n\n          db.prepare(`\n            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n            VALUES (?, ?, ?, ?, ?)\n          `).run(\n            testCaseData.prompt_card_id,\n            testCaseData.name,\n            JSON.stringify(testCaseData.input_variables),\n            testCaseData.expected_output || null,\n            JSON.stringify(testCaseData.assertions || [])\n          );\n        }\n\n        // Get the created card with test cases\n        const createdCard = db.prepare(`\n          SELECT * FROM prompt_cards WHERE id = ?\n        `).get(promptCardId) as PromptCard;\n\n        const testCases = db.prepare(`\n          SELECT * FROM test_cases WHERE prompt_card_id = ?\n        `).all(promptCardId);\n\n        importedCards.push({\n          ...createdCard,\n          variables: JSON.parse(createdCard.variables || '[]'),\n          test_cases: testCases.map((tc: any) => ({\n            ...tc,\n            input_variables: JSON.parse(tc.input_variables),\n            assertions: JSON.parse(tc.assertions || '[]')\n          }))\n        });\n      }\n    });\n\n    transaction(configs);\n\n    return res.status(201).json({\n      success: true,\n      data: importedCards as any[],\n      message: `Successfully imported ${importedCards.length} prompt card(s)`\n    });\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to import YAML'\n    });\n  }\n});\n\n// Validate YAML format\nrouter.post('/validate', (req, res) => {\n  try {\n    const { yamlContent } = req.body;\n\n    if (!yamlContent) {\n      return res.status(400).json({\n        success: false,\n        error: 'YAML content is required'\n      });\n    }\n\n    // Parse YAML\n    const parsed = yaml.load(yamlContent);\n    if (!parsed) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid YAML syntax'\n      });\n    }\n\n    // Validate structure\n    const configs = Array.isArray(parsed) ? parsed : [parsed];\n    const validationErrors = [];\n\n    for (let i = 0; i < configs.length; i++) {\n      const config = configs[i];\n      const prefix = configs.length > 1 ? `Config ${i + 1}: ` : '';\n\n      if (!config.prompts || !Array.isArray(config.prompts) || config.prompts.length === 0) {\n        validationErrors.push(`${prefix}prompts array is required and must not be empty`);\n      }\n\n      if (!config.tests || !Array.isArray(config.tests)) {\n        validationErrors.push(`${prefix}tests array is required`);\n      } else {\n        config.tests.forEach((test: any, testIndex: number) => {\n          if (!test.vars || typeof test.vars !== 'object') {\n            validationErrors.push(`${prefix}Test ${testIndex + 1}: vars object is required`);\n          }\n        });\n      }\n    }\n\n    if (validationErrors.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation failed',\n        details: validationErrors\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'YAML is valid',\n      configCount: configs.length\n    });\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to validate YAML'\n    });\n  }\n});\n\nexport { router as yamlRoutes };"],"names":["yamlRoutes","router","Router","get","req","res","id","params","promptCards","card","db","prepare","status","json","success","error","testCases","all","test_cases","cards","map","promptfooConfigs","config","prompts","prompt_template","providers","tests","tc","vars","JSON","parse","input_variables","assert","assertions","description","title","yamlContent","yaml","dump","length","setHeader","Date","now","send","Error","message","post","body","parsed","load","configs","Array","isArray","importedCards","transaction","promptTemplate","variableMatches","match","variables","replace","cardData","cardResult","run","stringify","promptCardId","lastInsertRowid","i","test","testCaseData","prompt_card_id","name","expected_output","createdCard","push","data","validationErrors","prefix","forEach","testIndex","details","configCount"],"mappings":"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"}