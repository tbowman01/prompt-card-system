{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/reports/generators/ReportGenerator.ts"],"sourcesContent":["import { AnalyticsEngine } from '../../analytics/AnalyticsEngine';\nimport { CostTracker } from '../../CostTracker';\nimport { \n  ReportData, \n  ReportTemplate, \n  ReportFilters, \n  ReportSection, \n  ReportSummary,\n  ChartData,\n  TableData,\n  MetricData,\n  ReportGenerationProgress\n} from '../../../types/reports';\nimport { ReportTemplates } from '../templates/ReportTemplates';\nimport { Database } from 'better-sqlite3';\nimport { initializeDatabase } from '../../../database/connection';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\n\nexport class ReportGenerator {\n  private analyticsEngine: AnalyticsEngine;\n  private costTracker: CostTracker;\n  private db: any;\n  private progressCallbacks: Map<string, (progress: ReportGenerationProgress) => void>;\n  private templateCache: LRUCache<string, any>;\n  private dataCache: LRUCache<string, any>;\n  private performanceMetrics: Map<string, number[]>;\n\n  constructor() {\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.costTracker = new CostTracker();\n    this.initializeDb();\n    this.progressCallbacks = new Map();\n    \n    // Initialize caching for better performance\n    this.templateCache = new LRUCache({\n      max: 100,\n      ttl: 1000 * 60 * 30 // 30 minutes\n    });\n    \n    this.dataCache = new LRUCache({\n      max: 500,\n      ttl: 1000 * 60 * 10 // 10 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n  }\n\n  private async initializeDb(): Promise<void> {\n    this.db = await initializeDatabase();\n  }\n\n  async generateReport(\n    templateId: string, \n    filters: ReportFilters = {},\n    progressCallback?: (progress: ReportGenerationProgress) => void\n  ): Promise<ReportData> {\n    const startTime = Date.now();\n    const reportId = `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    if (progressCallback) {\n      this.progressCallbacks.set(reportId, progressCallback);\n    }\n\n    try {\n      // Get template\n      const template = ReportTemplates.getTemplate(templateId);\n      if (!template) {\n        throw new Error(`Template not found: ${templateId}`);\n      }\n\n      this.updateProgress(reportId, 'processing', 10, 'Loading template and filters', 6);\n\n      // Generate report sections\n      const sections: ReportSection[] = [];\n      let currentStep = 1;\n\n      for (const field of template.fields) {\n        this.updateProgress(reportId, 'processing', 10 + (currentStep * 70 / template.fields.length), `Generating ${field.label}`, 6);\n        \n        const section = await this.generateSection(field, filters, template.type);\n        if (section) {\n          sections.push(section);\n        }\n        currentStep++;\n      }\n\n      this.updateProgress(reportId, 'processing', 85, 'Generating summary', 6);\n\n      // Generate summary\n      const summary = await this.generateSummary(sections, filters);\n\n      this.updateProgress(reportId, 'processing', 95, 'Finalizing report', 6);\n\n      // Calculate metadata\n      const metadata = await this.calculateMetadata(filters);\n\n      const report: ReportData = {\n        id: reportId,\n        template,\n        title: `${template.name} - ${new Date().toLocaleDateString()}`,\n        description: template.description,\n        generatedAt: new Date(),\n        filters,\n        sections,\n        summary,\n        metadata: {\n          ...metadata,\n          generationTime: Date.now() - startTime\n        }\n      };\n\n      this.updateProgress(reportId, 'completed', 100, 'Report generation completed', 6);\n\n      return report;\n    } catch (error) {\n      this.updateProgress(reportId, 'failed', 0, `Report generation failed: ${error.message}`, 6);\n      throw error;\n    } finally {\n      this.progressCallbacks.delete(reportId);\n    }\n  }\n\n  private async generateSection(field: any, filters: ReportFilters, templateType: string): Promise<ReportSection | null> {\n    const sectionId = `section_${field.key}_${Date.now()}`;\n    \n    switch (field.type) {\n      case 'metric':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'metrics',\n          content: await this.generateMetricContent(field, filters),\n          order: 1\n        };\n      \n      case 'chart':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'charts',\n          content: await this.generateChartContent(field, filters),\n          order: 2\n        };\n      \n      case 'table':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'tables',\n          content: await this.generateTableContent(field, filters),\n          order: 3\n        };\n      \n      case 'insight':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'insights',\n          content: await this.generateInsightContent(field, filters),\n          order: 4\n        };\n      \n      default:\n        return null;\n    }\n  }\n\n  private async generateMetricContent(field: any, filters: ReportFilters): Promise<MetricData[]> {\n    const metrics: MetricData[] = [];\n    \n    // Get analytics data\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    // Based on field key, generate appropriate metrics\n    switch (field.key) {\n      case 'overview-metrics':\n        metrics.push(\n          {\n            label: 'Total Tests',\n            value: dashboardMetrics.historical.totalTests,\n            unit: 'tests',\n            status: 'good'\n          },\n          {\n            label: 'Success Rate',\n            value: (dashboardMetrics.historical.overallSuccessRate * 100).toFixed(1),\n            unit: '%',\n            status: dashboardMetrics.historical.overallSuccessRate > 0.8 ? 'good' : 'warning'\n          },\n          {\n            label: 'Total Cost',\n            value: costSummary.totalCost.toFixed(2),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Avg Response Time',\n            value: dashboardMetrics.historical.averageExecutionTime.toFixed(0),\n            unit: 'ms',\n            status: dashboardMetrics.historical.averageExecutionTime < 2000 ? 'good' : 'warning'\n          }\n        );\n        break;\n\n      case 'cost-overview':\n        metrics.push(\n          {\n            label: 'Total Cost',\n            value: costSummary.totalCost.toFixed(2),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Total Tokens',\n            value: costSummary.totalTokens.toLocaleString(),\n            unit: 'tokens',\n            status: 'good'\n          },\n          {\n            label: 'Cost per Execution',\n            value: costSummary.averageCostPerExecution.toFixed(4),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Total Executions',\n            value: costSummary.totalExecutions,\n            unit: 'executions',\n            status: 'good'\n          }\n        );\n        break;\n\n      case 'performance-overview':\n        metrics.push(\n          {\n            label: 'Tests per Second',\n            value: dashboardMetrics.realtime.testsPerSecond.toFixed(2),\n            unit: 'tps',\n            status: 'good'\n          },\n          {\n            label: 'Average Response Time',\n            value: dashboardMetrics.realtime.averageResponseTime.toFixed(0),\n            unit: 'ms',\n            status: dashboardMetrics.realtime.averageResponseTime < 2000 ? 'good' : 'warning'\n          },\n          {\n            label: 'Error Rate',\n            value: (dashboardMetrics.realtime.errorRate * 100).toFixed(1),\n            unit: '%',\n            status: dashboardMetrics.realtime.errorRate < 0.1 ? 'good' : 'warning'\n          },\n          {\n            label: 'Active Tests',\n            value: dashboardMetrics.realtime.activeTests,\n            unit: 'tests',\n            status: 'good'\n          }\n        );\n        break;\n\n      case 'roi-analysis':\n        const roi = await this.costTracker.calculateROI(filters.startDate, filters.endDate);\n        metrics.push(\n          {\n            label: 'Success Rate',\n            value: roi.successRate.toFixed(1),\n            unit: '%',\n            status: roi.successRate > 80 ? 'good' : 'warning'\n          },\n          {\n            label: 'Cost per Success',\n            value: roi.averageCostPerSuccess.toFixed(4),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Cost Efficiency',\n            value: roi.costEfficiency.toFixed(2),\n            unit: 'successes/USD',\n            status: 'good'\n          }\n        );\n        break;\n\n      default:\n        // Generic metrics fallback\n        metrics.push(\n          {\n            label: 'Total Tests',\n            value: dashboardMetrics.historical.totalTests,\n            unit: 'tests',\n            status: 'good'\n          }\n        );\n    }\n\n    return metrics;\n  }\n\n  private async generateChartContent(field: any, filters: ReportFilters): Promise<ChartData> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    switch (field.key) {\n      case 'cost-summary':\n      case 'cost-by-model':\n        return {\n          labels: Object.keys(costSummary.costByModel),\n          datasets: [{\n            label: 'Cost by Model',\n            data: Object.values(costSummary.costByModel),\n            backgroundColor: [\n              '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'\n            ],\n            borderWidth: 1\n          }]\n        };\n\n      case 'performance-trends':\n        return {\n          labels: dashboardMetrics.trends.testsOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Tests Over Time',\n            data: dashboardMetrics.trends.testsOverTime.map(t => t.count),\n            borderColor: '#36A2EB',\n            backgroundColor: 'rgba(54, 162, 235, 0.1)'\n          }]\n        };\n\n      case 'cost-trends':\n        const usageAnalytics = await this.costTracker.getUsageAnalytics(\n          filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n          filters.endDate || new Date().toISOString()\n        );\n        return {\n          labels: usageAnalytics.costTrend.map(t => new Date(t.date).toLocaleDateString()),\n          datasets: [{\n            label: 'Daily Cost',\n            data: usageAnalytics.costTrend.map(t => t.cost),\n            borderColor: '#FF6384',\n            backgroundColor: 'rgba(255, 99, 132, 0.1)',\n          }]\n        };\n\n      case 'response-times':\n        return {\n          labels: dashboardMetrics.trends.performanceOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Average Response Time (ms)',\n            data: dashboardMetrics.trends.performanceOverTime.map(t => t.avgTime),\n            borderColor: '#FFCE56',\n            backgroundColor: 'rgba(255, 206, 86, 0.1)',\n          }]\n        };\n\n      default:\n        return {\n          labels: ['No Data'],\n          datasets: [{\n            label: 'No Data Available',\n            data: [0],\n            backgroundColor: '#cccccc'\n          }]\n        };\n    }\n  }\n\n  private async generateTableContent(field: any, filters: ReportFilters): Promise<TableData> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    switch (field.key) {\n      case 'model-performance':\n        const modelData = dashboardMetrics.historical.mostUsedModels.map(model => [\n          model.model,\n          model.count,\n          costSummary.costByModel[model.model]?.toFixed(4) || '0.0000',\n          costSummary.tokensByModel[model.model]?.toLocaleString() || '0',\n          (costSummary.costByModel[model.model] / model.count).toFixed(6) || '0.000000'\n        ]);\n\n        return {\n          headers: ['Model', 'Executions', 'Total Cost (USD)', 'Total Tokens', 'Cost per Execution'],\n          rows: modelData,\n          totalRows: modelData.length,\n          sortable: true\n        };\n\n      case 'usage-patterns':\n        const usageData = Object.entries(costSummary.costByModel).map(([model, cost]) => [\n          model,\n          cost.toFixed(4),\n          costSummary.tokensByModel[model]?.toLocaleString() || '0',\n          costSummary.executionsByModel[model] || 0,\n          ((cost / costSummary.totalCost) * 100).toFixed(1) + '%'\n        ]);\n\n        return {\n          headers: ['Model', 'Cost (USD)', 'Tokens', 'Executions', 'Cost %'],\n          rows: usageData,\n          totalRows: usageData.length,\n          sortable: true\n        };\n\n      case 'detailed-results':\n        // Get recent test results\n        const recentResults = this.db.prepare(`\n          SELECT \n            tr.id,\n            tr.test_case_id,\n            tr.execution_id,\n            tr.model,\n            tr.passed,\n            tr.execution_time_ms,\n            tr.created_at,\n            ct.cost_usd\n          FROM test_results tr\n          LEFT JOIN cost_tracking ct ON tr.execution_id = ct.execution_id\n          WHERE tr.created_at >= ?\n          ORDER BY tr.created_at DESC\n          LIMIT 50\n        `).all(filters.startDate || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());\n\n        const resultData = recentResults.map(result => [\n          result.id,\n          result.test_case_id,\n          result.model,\n          result.passed ? 'Pass' : 'Fail',\n          result.execution_time_ms + 'ms',\n          '$' + (result.cost_usd || 0).toFixed(4),\n          new Date(result.created_at).toLocaleString()\n        ]);\n\n        return {\n          headers: ['ID', 'Test Case', 'Model', 'Status', 'Time', 'Cost', 'Date'],\n          rows: resultData,\n          totalRows: resultData.length,\n          sortable: true,\n          pagination: {\n            page: 1,\n            pageSize: 50,\n            totalPages: Math.ceil(resultData.length / 50)\n          }\n        };\n\n      default:\n        return {\n          headers: ['No Data'],\n          rows: [['No data available']],\n          totalRows: 0,\n          sortable: false\n        };\n    }\n  }\n\n  private async generateInsightContent(field: any, filters: ReportFilters): Promise<any> {\n    const insights = await this.analyticsEngine.generateInsights();\n    const costRecommendations = await this.costTracker.generateOptimizationRecommendations(\n      filters.startDate, filters.endDate\n    );\n\n    switch (field.key) {\n      case 'key-insights':\n        return {\n          insights: insights.map(insight => ({\n            title: insight.title,\n            description: insight.description,\n            severity: insight.severity,\n            recommendations: insight.recommendations || []\n          })),\n          totalInsights: insights.length,\n          criticalInsights: insights.filter(i => i.severity === 'critical').length\n        };\n\n      case 'cost-optimization':\n        return {\n          recommendations: costRecommendations.map(rec => ({\n            title: rec.title,\n            description: rec.description,\n            estimatedSavings: rec.estimatedSavings,\n            priority: rec.priority,\n            actionRequired: rec.actionRequired\n          })),\n          totalRecommendations: costRecommendations.length,\n          totalPotentialSavings: costRecommendations.reduce((sum, rec) => sum + rec.estimatedSavings, 0)\n        };\n\n      case 'recommendations':\n        return {\n          performance: insights.filter(i => i.title.toLowerCase().includes('performance')),\n          cost: costRecommendations.filter(r => r.priority === 'high'),\n          general: insights.filter(i => !i.title.toLowerCase().includes('performance'))\n        };\n\n      default:\n        return {\n          insights: [],\n          recommendations: [],\n          totalInsights: 0\n        };\n    }\n  }\n\n  private async generateSummary(sections: ReportSection[], filters: ReportFilters): Promise<ReportSummary> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    const keyMetrics = [\n      {\n        label: 'Total Tests',\n        value: dashboardMetrics.historical.totalTests,\n        trend: 'stable' as const\n      },\n      {\n        label: 'Success Rate',\n        value: (dashboardMetrics.historical.overallSuccessRate * 100).toFixed(1) + '%',\n        trend: 'up' as const\n      },\n      {\n        label: 'Total Cost',\n        value: '$' + costSummary.totalCost.toFixed(2),\n        trend: 'stable' as const\n      },\n      {\n        label: 'Avg Response Time',\n        value: dashboardMetrics.historical.averageExecutionTime.toFixed(0) + 'ms',\n        trend: 'down' as const\n      }\n    ];\n\n    const insights = await this.analyticsEngine.generateInsights();\n    const summaryInsights = insights.map(insight => ({\n      title: insight.title,\n      description: insight.description,\n      severity: insight.severity,\n      recommendations: insight.recommendations || []\n    }));\n\n    return {\n      keyMetrics,\n      insights: summaryInsights,\n      generationTime: Date.now() - Date.now() // Will be set correctly by caller\n    };\n  }\n\n  private async calculateMetadata(filters: ReportFilters): Promise<any> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    return {\n      totalExecutions: dashboardMetrics.historical.totalExecutions,\n      totalCost: costSummary.totalCost,\n      averagePerformance: dashboardMetrics.historical.averageExecutionTime,\n      successRate: dashboardMetrics.historical.overallSuccessRate * 100\n    };\n  }\n\n  private updateProgress(\n    id: string, \n    status: ReportGenerationProgress['status'], \n    progress: number, \n    currentStep: string, \n    totalSteps: number\n  ): void {\n    const callback = this.progressCallbacks.get(id);\n    if (callback) {\n      callback({\n        id,\n        status,\n        progress,\n        currentStep,\n        totalSteps,\n        startTime: new Date()\n      });\n    }\n  }\n  \n  /**\n   * Get cached template\n   */\n  private async getCachedTemplate(templateId: string): Promise<any> {\n    const cached = this.templateCache.get(templateId);\n    if (cached) {\n      return cached;\n    }\n    \n    const template = ReportTemplates.getTemplate(templateId);\n    if (template) {\n      this.templateCache.set(templateId, template);\n    }\n    \n    return template;\n  }\n  \n  /**\n   * Get cached analytics data\n   */\n  private async getCachedAnalyticsData(filters: ReportFilters): Promise<any> {\n    const cacheKey = `analytics_${JSON.stringify(filters)}`;\n    const cached = this.dataCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const data = await this.analyticsEngine.getDashboardMetrics();\n    this.dataCache.set(cacheKey, data, { ttl: 1000 * 60 * 5 }); // 5 minutes\n    \n    return data;\n  }\n  \n  /**\n   * Get cached cost data\n   */\n  private async getCachedCostData(filters: ReportFilters): Promise<any> {\n    const cacheKey = `cost_${JSON.stringify(filters)}`;\n    const cached = this.dataCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const data = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n    this.dataCache.set(cacheKey, data, { ttl: 1000 * 60 * 5 }); // 5 minutes\n    \n    return data;\n  }\n  \n  /**\n   * Pre-load commonly used data\n   */\n  private async preloadCommonData(): Promise<void> {\n    try {\n      // Pre-load dashboard metrics\n      const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n      this.dataCache.set('dashboard_metrics', dashboardMetrics, { ttl: 1000 * 60 * 5 });\n      \n      // Pre-load cost summary\n      const costSummary = await this.costTracker.getCostSummary();\n      this.dataCache.set('cost_summary', costSummary, { ttl: 1000 * 60 * 5 });\n      \n      console.log('Common report data pre-loaded successfully');\n    } catch (error) {\n      console.warn('Failed to pre-load common data:', error.message);\n    }\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 5000) { // 5 seconds\n      console.warn(`Slow report operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg),\n          max: Math.round(max),\n          min: Math.round(min),\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear caches\n   */\n  public clearCaches(): void {\n    this.templateCache.clear();\n    this.dataCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Report generator caches cleared');\n  }\n}"],"names":["ReportGenerator","initializeDb","db","initializeDatabase","generateReport","templateId","filters","progressCallback","startTime","Date","now","reportId","Math","random","toString","substr","progressCallbacks","set","template","ReportTemplates","getTemplate","Error","updateProgress","sections","currentStep","field","fields","length","label","section","generateSection","type","push","summary","generateSummary","metadata","calculateMetadata","report","id","title","name","toLocaleDateString","description","generatedAt","generationTime","error","message","delete","templateType","sectionId","key","content","generateMetricContent","order","generateChartContent","generateTableContent","generateInsightContent","metrics","dashboardMetrics","analyticsEngine","getDashboardMetrics","costSummary","costTracker","getCostSummary","startDate","endDate","value","historical","totalTests","unit","status","overallSuccessRate","toFixed","totalCost","averageExecutionTime","totalTokens","toLocaleString","averageCostPerExecution","totalExecutions","realtime","testsPerSecond","averageResponseTime","errorRate","activeTests","roi","calculateROI","successRate","averageCostPerSuccess","costEfficiency","labels","Object","keys","costByModel","datasets","data","values","backgroundColor","borderWidth","trends","testsOverTime","map","t","timestamp","count","borderColor","usageAnalytics","getUsageAnalytics","toISOString","costTrend","date","cost","performanceOverTime","avgTime","modelData","mostUsedModels","model","tokensByModel","headers","rows","totalRows","sortable","usageData","entries","executionsByModel","recentResults","prepare","all","resultData","result","test_case_id","passed","execution_time_ms","cost_usd","created_at","pagination","page","pageSize","totalPages","ceil","insights","generateInsights","costRecommendations","generateOptimizationRecommendations","insight","severity","recommendations","totalInsights","criticalInsights","filter","i","rec","estimatedSavings","priority","actionRequired","totalRecommendations","totalPotentialSavings","reduce","sum","performance","toLowerCase","includes","r","general","keyMetrics","trend","summaryInsights","averagePerformance","progress","totalSteps","callback","get","getCachedTemplate","cached","templateCache","getCachedAnalyticsData","cacheKey","JSON","stringify","dataCache","ttl","getCachedCostData","preloadCommonData","console","log","warn","trackPerformance","operation","duration","performanceMetrics","has","shift","getPerformanceStats","stats","avg","time","max","min","round","clearCaches","clear","AnalyticsEngine","getInstance","CostTracker","Map","LRUCache"],"mappings":"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"}