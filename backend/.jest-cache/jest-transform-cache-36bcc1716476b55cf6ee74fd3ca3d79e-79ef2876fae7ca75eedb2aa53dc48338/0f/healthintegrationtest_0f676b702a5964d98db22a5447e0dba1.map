{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/health.integration.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../server';\nimport { healthOrchestrator } from '../services/health/HealthOrchestrator';\nimport { alertingSystem } from '../services/health/AlertingSystem';\nimport { circuitBreakerRegistry } from '../services/health/CircuitBreaker';\n\ndescribe('Health Check Integration Tests', () => {\n  beforeAll(async () => {\n    // Start health systems for testing\n    await healthOrchestrator.start();\n    await alertingSystem.initialize();\n  });\n\n  afterAll(async () => {\n    // Clean up health systems\n    await healthOrchestrator.stop();\n    await alertingSystem.shutdown();\n  });\n\n  describe('Basic Health Endpoints', () => {\n    it('should return basic health status', async () => {\n      const response = await request(app)\n        .get('/api/health')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status');\n      expect(response.body).toHaveProperty('timestamp');\n      expect(response.body).toHaveProperty('services');\n    });\n\n    it('should return enhanced health status', async () => {\n      const response = await request(app)\n        .get('/api/health/v2')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status');\n      expect(response.body).toHaveProperty('services');\n      expect(response.body.services).toHaveProperty('database');\n      expect(response.body.services).toHaveProperty('system');\n    });\n\n    it('should return detailed health when requested', async () => {\n      const response = await request(app)\n        .get('/api/health/v2?detailed=true')\n        .expect(200);\n\n      expect(response.body.services.database).toHaveProperty('details');\n      expect(response.body.services.system).toHaveProperty('details');\n    });\n  });\n\n  describe('Health Orchestrator Endpoints', () => {\n    it('should return system health summary', async () => {\n      const response = await request(app)\n        .get('/api/health/orchestrator/summary')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('overallStatus');\n      expect(response.body).toHaveProperty('totalServices');\n      expect(response.body).toHaveProperty('healthyServices');\n      expect(response.body).toHaveProperty('criticalServices');\n      expect(response.body).toHaveProperty('recentIssues');\n    });\n\n    it('should return detailed system health', async () => {\n      const response = await request(app)\n        .get('/api/health/orchestrator/system')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('services');\n      expect(response.body).toHaveProperty('overallStatus');\n      expect(typeof response.body.services).toBe('object');\n    });\n\n    it('should return individual service health', async () => {\n      const response = await request(app)\n        .get('/api/health/orchestrator/service/database')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('name', 'database');\n      expect(response.body).toHaveProperty('status');\n      expect(response.body).toHaveProperty('lastCheck');\n      expect(response.body).toHaveProperty('responseTime');\n    });\n\n    it('should return 404 for non-existent service', async () => {\n      await request(app)\n        .get('/api/health/orchestrator/service/nonexistent')\n        .expect(404);\n    });\n  });\n\n  describe('Alert System Endpoints', () => {\n    it('should return alerts list', async () => {\n      const response = await request(app)\n        .get('/api/alerts')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('alerts');\n      expect(response.body).toHaveProperty('total');\n      expect(Array.isArray(response.body.alerts)).toBe(true);\n    });\n\n    it('should return alert statistics', async () => {\n      const response = await request(app)\n        .get('/api/alerts/stats')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('total');\n      expect(response.body).toHaveProperty('bySeverity');\n      expect(response.body).toHaveProperty('byService');\n      expect(response.body).toHaveProperty('acknowledged');\n      expect(response.body).toHaveProperty('resolved');\n    });\n\n    it('should return alert rules', async () => {\n      const response = await request(app)\n        .get('/api/alerts/rules/list')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('rules');\n      expect(Array.isArray(response.body.rules)).toBe(true);\n    });\n\n    it('should filter alerts by service', async () => {\n      const response = await request(app)\n        .get('/api/alerts?service=database')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('alerts');\n      expect(response.body).toHaveProperty('filters');\n      expect(response.body.filters).toHaveProperty('service', 'database');\n    });\n\n    it('should filter alerts by severity', async () => {\n      const response = await request(app)\n        .get('/api/alerts?severity=critical')\n        .expect(200);\n\n      expect(response.body.filters).toHaveProperty('severity', 'critical');\n    });\n  });\n\n  describe('Health Check Validation', () => {\n    it('should validate database connectivity', async () => {\n      const response = await request(app)\n        .get('/api/health/v2/database')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status');\n      expect(['healthy', 'degraded', 'unhealthy']).toContain(response.body.status);\n    });\n\n    it('should validate system resources', async () => {\n      const response = await request(app)\n        .get('/api/health/v2/system')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status');\n      expect(response.body).toHaveProperty('details');\n      expect(response.body.details).toHaveProperty('memory');\n      expect(response.body.details).toHaveProperty('cpu');\n    });\n\n    it('should handle service check timeouts gracefully', async () => {\n      // This test simulates a timeout scenario\n      const response = await request(app)\n        .get('/api/health/orchestrator/service/ollama')\n        .timeout(15000) // 15 second timeout\n        .expect((res) => {\n          expect([200, 503]).toContain(res.status);\n        });\n\n      expect(response.body).toHaveProperty('status');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle malformed requests gracefully', async () => {\n      const response = await request(app)\n        .post('/api/alerts/rules')\n        .send({ invalid: 'data' })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should return appropriate status codes for unhealthy services', async () => {\n      // Test assumes some services might be unhealthy in test environment\n      const response = await request(app)\n        .get('/api/health/v2')\n        .expect((res) => {\n          expect([200, 503]).toContain(res.status);\n        });\n\n      expect(response.body).toHaveProperty('status');\n    });\n  });\n\n  describe('Real-time Features', () => {\n    it('should establish SSE connection for health events', (done) => {\n      const req = request(app)\n        .get('/api/health/orchestrator/events')\n        .expect(200)\n        .expect('Content-Type', /text\\/event-stream/)\n        .end(() => {\n          done();\n        });\n\n      // Close connection after a short delay\n      setTimeout(() => {\n        req.abort();\n      }, 1000);\n    });\n\n    it('should establish SSE connection for alert events', (done) => {\n      const req = request(app)\n        .get('/api/alerts/stream/live')\n        .expect(200)\n        .expect('Content-Type', /text\\/event-stream/)\n        .end(() => {\n          done();\n        });\n\n      // Close connection after a short delay\n      setTimeout(() => {\n        req.abort();\n      }, 1000);\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should handle concurrent health check requests', async () => {\n      const promises = Array.from({ length: 10 }, () =>\n        request(app).get('/api/health/v2')\n      );\n\n      const responses = await Promise.all(promises);\n      \n      responses.forEach(response => {\n        expect([200, 503]).toContain(response.status);\n        expect(response.body).toHaveProperty('status');\n      });\n    });\n\n    it('should respond to health checks within reasonable time', async () => {\n      const startTime = Date.now();\n      \n      await request(app)\n        .get('/api/health/orchestrator/summary')\n        .expect(200);\n      \n      const responseTime = Date.now() - startTime;\n      expect(responseTime).toBeLessThan(5000); // 5 seconds\n    });\n  });\n\n  describe('Security Tests', () => {\n    it('should not expose sensitive information in health responses', async () => {\n      const response = await request(app)\n        .get('/api/health/v2?detailed=true')\n        .expect(200);\n\n      const responseStr = JSON.stringify(response.body);\n      \n      // Check that sensitive information is not exposed\n      expect(responseStr).not.toMatch(/password/i);\n      expect(responseStr).not.toMatch(/secret/i);\n      expect(responseStr).not.toMatch(/token/i);\n      expect(responseStr).not.toMatch(/key.*:/);\n    });\n\n    it('should handle malicious input safely', async () => {\n      await request(app)\n        .get('/api/health/orchestrator/service/<script>alert(\"xss\")</script>')\n        .expect(404);\n    });\n  });\n\n  describe('Circuit Breaker Integration', () => {\n    it('should track circuit breaker states', () => {\n      const breakers = circuitBreakerRegistry.getAllBreakers();\n      expect(breakers).toBeInstanceOf(Map);\n    });\n\n    it('should provide circuit breaker statistics', () => {\n      const stats = circuitBreakerRegistry.getStats();\n      expect(typeof stats).toBe('object');\n    });\n  });\n});"],"names":["describe","beforeAll","healthOrchestrator","start","alertingSystem","initialize","afterAll","stop","shutdown","it","response","request","app","get","expect","body","toHaveProperty","services","database","system","toBe","Array","isArray","alerts","rules","filters","toContain","status","details","timeout","res","post","send","invalid","done","req","end","setTimeout","abort","promises","from","length","responses","Promise","all","forEach","startTime","Date","now","responseTime","toBeLessThan","responseStr","JSON","stringify","not","toMatch","breakers","circuitBreakerRegistry","getAllBreakers","toBeInstanceOf","Map","stats","getStats"],"mappings":"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"}