{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/training/ModelRegistry.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { EventStore } from '../analytics/EventStore';\nimport { createHash } from 'crypto';\nimport * as tf from '@tensorflow/tfjs-node';\n\nexport interface ModelMetadata {\n  id: string;\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license: string;\n  tags: string[];\n  created_at: Date;\n  updated_at: Date;\n  model_type: 'foundation' | 'fine_tuned' | 'specialized' | 'custom';\n  base_model?: string;\n  training_job_id?: string;\n  size_mb: number;\n  parameter_count: number;\n  architecture: {\n    model_family: string;\n    layers: number;\n    hidden_size: number;\n    attention_heads: number;\n    vocab_size: number;\n    max_sequence_length: number;\n  };\n  capabilities: {\n    text_generation: boolean;\n    text_classification: boolean;\n    question_answering: boolean;\n    summarization: boolean;\n    code_generation: boolean;\n    embedding_generation: boolean;\n    multimodal: boolean;\n  };\n  performance_metrics: {\n    accuracy?: number;\n    f1_score?: number;\n    bleu_score?: number;\n    rouge_score?: number;\n    perplexity?: number;\n    inference_latency_ms: number;\n    throughput_tokens_per_sec: number;\n    memory_usage_mb: number;\n  };\n  deployment_info: {\n    status: 'pending' | 'deployed' | 'deprecated' | 'failed';\n    deployed_at?: Date;\n    deployment_target?: string;\n    endpoint?: string;\n    health_status?: 'healthy' | 'degraded' | 'unhealthy';\n    last_health_check?: Date;\n  };\n  usage_statistics: {\n    total_requests: number;\n    successful_requests: number;\n    failed_requests: number;\n    average_response_time: number;\n    last_used: Date;\n    daily_usage: Record<string, number>;\n  };\n  checksum: string;\n  file_path?: string;\n  config_path?: string;\n  tokenizer_path?: string;\n}\n\nexport interface ModelVersion {\n  version: string;\n  changelog: string;\n  created_at: Date;\n  performance_delta: Record<string, number>;\n  backward_compatible: boolean;\n  migration_notes?: string;\n}\n\nexport interface ModelComparison {\n  model_a: string;\n  model_b: string;\n  comparison_date: Date;\n  metrics_comparison: Record<string, {\n    model_a_value: number;\n    model_b_value: number;\n    percentage_diff: number;\n    winner: 'model_a' | 'model_b' | 'tie';\n  }>;\n  benchmark_results: Record<string, any>;\n  recommendation: {\n    preferred_model: string;\n    reasoning: string[];\n    use_case_recommendations: Record<string, string>;\n  };\n}\n\nexport interface ModelSearch {\n  query?: string;\n  filters: {\n    model_type?: string[];\n    capabilities?: string[];\n    size_range?: { min_mb?: number; max_mb?: number };\n    performance_threshold?: Record<string, number>;\n    deployment_status?: string[];\n    tags?: string[];\n    created_after?: Date;\n    created_before?: Date;\n  };\n  sort_by?: 'name' | 'created_at' | 'size_mb' | 'performance' | 'usage';\n  sort_order?: 'asc' | 'desc';\n  limit?: number;\n  offset?: number;\n}\n\nexport class ModelRegistry extends EventEmitter {\n  private eventStore: EventStore;\n  private models: Map<string, ModelMetadata>;\n  private modelVersions: Map<string, ModelVersion[]>;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.eventStore = EventStore.getInstance();\n    this.models = new Map();\n    this.modelVersions = new Map();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('üîÑ Initializing Model Registry...');\n      \n      // Load existing models from storage\n      await this.loadModelsFromStorage();\n      \n      // Verify model integrity\n      await this.verifyModelIntegrity();\n      \n      // Update deployment statuses\n      await this.updateDeploymentStatuses();\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Model Registry initialized successfully');\n      \n      this.emit('initialized', {\n        total_models: this.models.size,\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Model Registry:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new model\n   */\n  async registerModel(modelData: Omit<ModelMetadata, 'id' | 'created_at' | 'updated_at' | 'checksum'>): Promise<ModelMetadata> {\n    const modelId = this.generateModelId(modelData.name, modelData.version);\n    \n    // Validate model data\n    await this.validateModelData(modelData);\n    \n    // Calculate checksum\n    const checksum = await this.calculateModelChecksum(modelData);\n    \n    const model: ModelMetadata = {\n      ...modelData,\n      id: modelId,\n      created_at: new Date(),\n      updated_at: new Date(),\n      checksum,\n      usage_statistics: {\n        total_requests: 0,\n        successful_requests: 0,\n        failed_requests: 0,\n        average_response_time: 0,\n        last_used: new Date(),\n        daily_usage: {}\n      }\n    };\n\n    // Check for duplicate\n    if (this.models.has(modelId)) {\n      throw new Error(`Model with ID ${modelId} already exists`);\n    }\n\n    // Store model\n    this.models.set(modelId, model);\n    \n    // Initialize version history\n    this.modelVersions.set(modelId, [{\n      version: model.version,\n      changelog: 'Initial registration',\n      created_at: new Date(),\n      performance_delta: {},\n      backward_compatible: true\n    }]);\n\n    // Record registration event\n    await this.eventStore.recordEvent({\n      event_type: 'model_registered',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: model,\n      timestamp: new Date()\n    });\n\n    console.log(`üìù Registered model: ${model.name} v${model.version}`);\n    this.emit('modelRegistered', { model });\n\n    return model;\n  }\n\n  /**\n   * Update model metadata\n   */\n  async updateModel(modelId: string, updates: Partial<ModelMetadata>): Promise<ModelMetadata> {\n    const existingModel = this.models.get(modelId);\n    if (!existingModel) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Create new version if version number changed\n    const isVersionUpdate = updates.version && updates.version !== existingModel.version;\n    \n    const updatedModel: ModelMetadata = {\n      ...existingModel,\n      ...updates,\n      id: modelId, // Ensure ID doesn't change\n      updated_at: new Date()\n    };\n\n    // Recalculate checksum if content changed\n    if (updates.file_path || updates.config_path || updates.tokenizer_path) {\n      updatedModel.checksum = await this.calculateModelChecksum(updatedModel);\n    }\n\n    this.models.set(modelId, updatedModel);\n\n    // Add version history entry\n    if (isVersionUpdate) {\n      const versions = this.modelVersions.get(modelId) || [];\n      versions.push({\n        version: updatedModel.version,\n        changelog: 'Model updated',\n        created_at: new Date(),\n        performance_delta: this.calculatePerformanceDelta(existingModel, updatedModel),\n        backward_compatible: true // Should be determined by analysis\n      });\n      this.modelVersions.set(modelId, versions);\n    }\n\n    // Record update event\n    await this.eventStore.recordEvent({\n      event_type: isVersionUpdate ? 'model_version_updated' : 'model_metadata_updated',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: { updates, new_version: isVersionUpdate },\n      timestamp: new Date()\n    });\n\n    console.log(`üìù Updated model: ${updatedModel.name} v${updatedModel.version}`);\n    this.emit('modelUpdated', { model: updatedModel, isVersionUpdate });\n\n    return updatedModel;\n  }\n\n  /**\n   * Get model by ID\n   */\n  getModel(modelId: string): ModelMetadata | undefined {\n    return this.models.get(modelId);\n  }\n\n  /**\n   * Search models\n   */\n  searchModels(searchParams: ModelSearch): {\n    models: ModelMetadata[];\n    total_count: number;\n    pagination: {\n      limit: number;\n      offset: number;\n      has_more: boolean;\n    };\n  } {\n    let filteredModels = Array.from(this.models.values());\n\n    // Apply text search\n    if (searchParams.query) {\n      const query = searchParams.query.toLowerCase();\n      filteredModels = filteredModels.filter(model => \n        model.name.toLowerCase().includes(query) ||\n        model.description.toLowerCase().includes(query) ||\n        model.tags.some(tag => tag.toLowerCase().includes(query))\n      );\n    }\n\n    // Apply filters\n    if (searchParams.filters) {\n      const { filters } = searchParams;\n\n      if (filters.model_type?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.model_type!.includes(model.model_type)\n        );\n      }\n\n      if (filters.capabilities?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.capabilities!.some(cap => model.capabilities[cap])\n        );\n      }\n\n      if (filters.size_range) {\n        filteredModels = filteredModels.filter(model => {\n          if (filters.size_range!.min_mb && model.size_mb < filters.size_range!.min_mb) return false;\n          if (filters.size_range!.max_mb && model.size_mb > filters.size_range!.max_mb) return false;\n          return true;\n        });\n      }\n\n      if (filters.performance_threshold) {\n        filteredModels = filteredModels.filter(model => {\n          return Object.entries(filters.performance_threshold!).every(([metric, threshold]) => {\n            const value = model.performance_metrics[metric];\n            return value !== undefined && value >= threshold;\n          });\n        });\n      }\n\n      if (filters.deployment_status?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.deployment_status!.includes(model.deployment_info.status)\n        );\n      }\n\n      if (filters.tags?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.tags!.some(tag => model.tags.includes(tag))\n        );\n      }\n\n      if (filters.created_after) {\n        filteredModels = filteredModels.filter(model => \n          model.created_at >= filters.created_after!\n        );\n      }\n\n      if (filters.created_before) {\n        filteredModels = filteredModels.filter(model => \n          model.created_at <= filters.created_before!\n        );\n      }\n    }\n\n    // Apply sorting\n    if (searchParams.sort_by) {\n      filteredModels.sort((a, b) => {\n        let aVal: any, bVal: any;\n        \n        switch (searchParams.sort_by) {\n          case 'name':\n            aVal = a.name;\n            bVal = b.name;\n            break;\n          case 'created_at':\n            aVal = a.created_at.getTime();\n            bVal = b.created_at.getTime();\n            break;\n          case 'size_mb':\n            aVal = a.size_mb;\n            bVal = b.size_mb;\n            break;\n          case 'performance':\n            aVal = a.performance_metrics.accuracy || 0;\n            bVal = b.performance_metrics.accuracy || 0;\n            break;\n          case 'usage':\n            aVal = a.usage_statistics.total_requests;\n            bVal = b.usage_statistics.total_requests;\n            break;\n          default:\n            return 0;\n        }\n\n        if (searchParams.sort_order === 'desc') {\n          return aVal < bVal ? 1 : -1;\n        }\n        return aVal > bVal ? 1 : -1;\n      });\n    }\n\n    // Apply pagination\n    const limit = searchParams.limit || 20;\n    const offset = searchParams.offset || 0;\n    const paginatedModels = filteredModels.slice(offset, offset + limit);\n    const hasMore = offset + limit < filteredModels.length;\n\n    return {\n      models: paginatedModels,\n      total_count: filteredModels.length,\n      pagination: {\n        limit,\n        offset,\n        has_more: hasMore\n      }\n    };\n  }\n\n  /**\n   * Compare two models\n   */\n  async compareModels(modelAId: string, modelBId: string): Promise<ModelComparison> {\n    const modelA = this.models.get(modelAId);\n    const modelB = this.models.get(modelBId);\n\n    if (!modelA || !modelB) {\n      throw new Error('One or both models not found');\n    }\n\n    const comparison: ModelComparison = {\n      model_a: modelAId,\n      model_b: modelBId,\n      comparison_date: new Date(),\n      metrics_comparison: {},\n      benchmark_results: {},\n      recommendation: {\n        preferred_model: '',\n        reasoning: [],\n        use_case_recommendations: {}\n      }\n    };\n\n    // Compare performance metrics\n    const allMetrics = new Set([\n      ...Object.keys(modelA.performance_metrics),\n      ...Object.keys(modelB.performance_metrics)\n    ]);\n\n    for (const metric of allMetrics) {\n      const aValue = modelA.performance_metrics[metric] || 0;\n      const bValue = modelB.performance_metrics[metric] || 0;\n      const percentageDiff = bValue !== 0 ? ((aValue - bValue) / bValue) * 100 : 0;\n      \n      let winner: 'model_a' | 'model_b' | 'tie' = 'tie';\n      if (metric === 'inference_latency_ms' || metric === 'memory_usage_mb') {\n        // Lower is better for latency and memory\n        winner = aValue < bValue ? 'model_a' : (aValue > bValue ? 'model_b' : 'tie');\n      } else {\n        // Higher is better for other metrics\n        winner = aValue > bValue ? 'model_a' : (aValue < bValue ? 'model_b' : 'tie');\n      }\n\n      comparison.metrics_comparison[metric] = {\n        model_a_value: aValue,\n        model_b_value: bValue,\n        percentage_diff: percentageDiff,\n        winner\n      };\n    }\n\n    // Generate recommendation\n    const aWins = Object.values(comparison.metrics_comparison).filter(m => m.winner === 'model_a').length;\n    const bWins = Object.values(comparison.metrics_comparison).filter(m => m.winner === 'model_b').length;\n    \n    comparison.recommendation.preferred_model = aWins > bWins ? modelAId : (bWins > aWins ? modelBId : 'tie');\n    \n    // Generate reasoning\n    comparison.recommendation.reasoning = this.generateComparisonReasoning(modelA, modelB, comparison);\n    \n    // Generate use case recommendations\n    comparison.recommendation.use_case_recommendations = this.generateUseCaseRecommendations(modelA, modelB);\n\n    // Record comparison event\n    await this.eventStore.recordEvent({\n      event_type: 'models_compared',\n      entity_id: `${modelAId}_vs_${modelBId}`,\n      entity_type: 'comparison',\n      data: comparison,\n      timestamp: new Date()\n    });\n\n    return comparison;\n  }\n\n  /**\n   * Get model usage statistics\n   */\n  getModelUsageStats(modelId: string, timeRange?: { start: Date; end: Date }): {\n    total_requests: number;\n    success_rate: number;\n    average_response_time: number;\n    usage_trend: Record<string, number>;\n    top_error_types: Array<{ error_type: string; count: number }>;\n  } {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // This would typically query actual usage data from logs/analytics\n    return {\n      total_requests: model.usage_statistics.total_requests,\n      success_rate: model.usage_statistics.successful_requests / model.usage_statistics.total_requests * 100,\n      average_response_time: model.usage_statistics.average_response_time,\n      usage_trend: model.usage_statistics.daily_usage,\n      top_error_types: [\n        { error_type: 'timeout', count: 12 },\n        { error_type: 'rate_limit', count: 8 },\n        { error_type: 'invalid_input', count: 5 }\n      ]\n    };\n  }\n\n  /**\n   * Update model usage statistics\n   */\n  async updateUsageStatistics(\n    modelId: string,\n    requestData: {\n      success: boolean;\n      response_time: number;\n      error_type?: string;\n      timestamp: Date;\n    }\n  ): Promise<void> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Update statistics\n    model.usage_statistics.total_requests++;\n    if (requestData.success) {\n      model.usage_statistics.successful_requests++;\n    } else {\n      model.usage_statistics.failed_requests++;\n    }\n\n    // Update average response time (exponential moving average)\n    const alpha = 0.1; // Smoothing factor\n    model.usage_statistics.average_response_time = \n      alpha * requestData.response_time + (1 - alpha) * model.usage_statistics.average_response_time;\n\n    // Update daily usage\n    const dateKey = requestData.timestamp.toISOString().split('T')[0];\n    model.usage_statistics.daily_usage[dateKey] = (model.usage_statistics.daily_usage[dateKey] || 0) + 1;\n\n    model.usage_statistics.last_used = requestData.timestamp;\n    model.updated_at = new Date();\n\n    this.models.set(modelId, model);\n  }\n\n  /**\n   * Get model version history\n   */\n  getModelVersionHistory(modelId: string): ModelVersion[] {\n    return this.modelVersions.get(modelId) || [];\n  }\n\n  /**\n   * Delete model\n   */\n  async deleteModel(modelId: string, force: boolean = false): Promise<void> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Check if model is deployed\n    if (model.deployment_info.status === 'deployed' && !force) {\n      throw new Error(`Cannot delete deployed model ${modelId}. Use force=true to override.`);\n    }\n\n    // Remove from registry\n    this.models.delete(modelId);\n    this.modelVersions.delete(modelId);\n\n    // Record deletion event\n    await this.eventStore.recordEvent({\n      event_type: 'model_deleted',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: { model_name: model.name, force },\n      timestamp: new Date()\n    });\n\n    console.log(`üóëÔ∏è Deleted model: ${model.name} v${model.version}`);\n    this.emit('modelDeleted', { modelId, model });\n  }\n\n  /**\n   * Get registry statistics\n   */\n  getRegistryStatistics(): {\n    total_models: number;\n    models_by_type: Record<string, number>;\n    models_by_status: Record<string, number>;\n    total_size_mb: number;\n    most_used_models: Array<{ model_id: string; usage_count: number }>;\n    recent_registrations: ModelMetadata[];\n  } {\n    const models = Array.from(this.models.values());\n    \n    const modelsByType = models.reduce((acc, model) => {\n      acc[model.model_type] = (acc[model.model_type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const modelsByStatus = models.reduce((acc, model) => {\n      acc[model.deployment_info.status] = (acc[model.deployment_info.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const totalSize = models.reduce((sum, model) => sum + model.size_mb, 0);\n\n    const mostUsed = models\n      .map(model => ({ model_id: model.id, usage_count: model.usage_statistics.total_requests }))\n      .sort((a, b) => b.usage_count - a.usage_count)\n      .slice(0, 10);\n\n    const recentRegistrations = models\n      .sort((a, b) => b.created_at.getTime() - a.created_at.getTime())\n      .slice(0, 5);\n\n    return {\n      total_models: models.length,\n      models_by_type: modelsByType,\n      models_by_status: modelsByStatus,\n      total_size_mb: totalSize,\n      most_used_models: mostUsed,\n      recent_registrations: recentRegistrations\n    };\n  }\n\n  // Private methods\n  private generateModelId(name: string, version: string): string {\n    const content = `${name.toLowerCase().replace(/[^a-z0-9]/g, '_')}_${version}`;\n    return createHash('sha256').update(content).digest('hex').substring(0, 16);\n  }\n\n  private async validateModelData(modelData: any): Promise<void> {\n    if (!modelData.name || modelData.name.trim().length === 0) {\n      throw new Error('Model name is required');\n    }\n\n    if (!modelData.version || modelData.version.trim().length === 0) {\n      throw new Error('Model version is required');\n    }\n\n    if (!modelData.model_type || !['foundation', 'fine_tuned', 'specialized', 'custom'].includes(modelData.model_type)) {\n      throw new Error('Invalid model type');\n    }\n\n    if (modelData.size_mb <= 0) {\n      throw new Error('Model size must be greater than 0');\n    }\n  }\n\n  private async calculateModelChecksum(model: any): Promise<string> {\n    // In a real implementation, this would calculate checksum of the actual model files\n    const content = JSON.stringify({\n      name: model.name,\n      version: model.version,\n      architecture: model.architecture,\n      size_mb: model.size_mb\n    });\n    \n    return createHash('sha256').update(content).digest('hex');\n  }\n\n  private calculatePerformanceDelta(oldModel: ModelMetadata, newModel: ModelMetadata): Record<string, number> {\n    const delta: Record<string, number> = {};\n    \n    Object.keys(newModel.performance_metrics).forEach(metric => {\n      const oldValue = oldModel.performance_metrics[metric];\n      const newValue = newModel.performance_metrics[metric];\n      \n      if (oldValue !== undefined && newValue !== undefined) {\n        delta[metric] = newValue - oldValue;\n      }\n    });\n    \n    return delta;\n  }\n\n  private generateComparisonReasoning(modelA: ModelMetadata, modelB: ModelMetadata, comparison: ModelComparison): string[] {\n    const reasoning: string[] = [];\n    \n    // Size comparison\n    if (modelA.size_mb < modelB.size_mb * 0.8) {\n      reasoning.push(`${modelA.name} is significantly smaller (${modelA.size_mb}MB vs ${modelB.size_mb}MB), better for resource-constrained environments`);\n    } else if (modelB.size_mb < modelA.size_mb * 0.8) {\n      reasoning.push(`${modelB.name} is significantly smaller (${modelB.size_mb}MB vs ${modelA.size_mb}MB), better for resource-constrained environments`);\n    }\n    \n    // Performance comparison\n    const aAccuracy = modelA.performance_metrics.accuracy || 0;\n    const bAccuracy = modelB.performance_metrics.accuracy || 0;\n    \n    if (aAccuracy > bAccuracy * 1.1) {\n      reasoning.push(`${modelA.name} has significantly better accuracy (${(aAccuracy * 100).toFixed(1)}% vs ${(bAccuracy * 100).toFixed(1)}%)`);\n    } else if (bAccuracy > aAccuracy * 1.1) {\n      reasoning.push(`${modelB.name} has significantly better accuracy (${(bAccuracy * 100).toFixed(1)}% vs ${(aAccuracy * 100).toFixed(1)}%)`);\n    }\n    \n    // Latency comparison\n    const aLatency = modelA.performance_metrics.inference_latency_ms;\n    const bLatency = modelB.performance_metrics.inference_latency_ms;\n    \n    if (aLatency && bLatency) {\n      if (aLatency < bLatency * 0.8) {\n        reasoning.push(`${modelA.name} is significantly faster (${aLatency}ms vs ${bLatency}ms response time)`);\n      } else if (bLatency < aLatency * 0.8) {\n        reasoning.push(`${modelB.name} is significantly faster (${bLatency}ms vs ${aLatency}ms response time)`);\n      }\n    }\n    \n    return reasoning;\n  }\n\n  private generateUseCaseRecommendations(modelA: ModelMetadata, modelB: ModelMetadata): Record<string, string> {\n    const recommendations: Record<string, string> = {};\n    \n    // Size-based recommendations\n    if (modelA.size_mb < modelB.size_mb) {\n      recommendations['edge_deployment'] = modelA.name;\n      recommendations['mobile_applications'] = modelA.name;\n    } else {\n      recommendations['high_accuracy_tasks'] = modelB.name;\n      recommendations['server_deployment'] = modelB.name;\n    }\n    \n    // Performance-based recommendations\n    const aLatency = modelA.performance_metrics.inference_latency_ms;\n    const bLatency = modelB.performance_metrics.inference_latency_ms;\n    \n    if (aLatency && bLatency) {\n      if (aLatency < bLatency) {\n        recommendations['real_time_applications'] = modelA.name;\n        recommendations['interactive_systems'] = modelA.name;\n      } else {\n        recommendations['batch_processing'] = modelB.name;\n        recommendations['offline_analysis'] = modelB.name;\n      }\n    }\n    \n    // Capability-based recommendations\n    if (modelA.capabilities.code_generation && !modelB.capabilities.code_generation) {\n      recommendations['code_generation'] = modelA.name;\n    } else if (modelB.capabilities.code_generation && !modelA.capabilities.code_generation) {\n      recommendations['code_generation'] = modelB.name;\n    }\n    \n    return recommendations;\n  }\n\n  private async loadModelsFromStorage(): Promise<void> {\n    try {\n      // Load models from persistent storage (database, file system, etc.)\n      console.log('üì• Loading models from storage...');\n      \n      // This would typically load from a database or file system\n      // For now, we'll initialize with empty registry\n      \n      console.log(`‚úÖ Loaded ${this.models.size} models from storage`);\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load models from storage:', error);\n    }\n  }\n\n  private async verifyModelIntegrity(): Promise<void> {\n    try {\n      console.log('üîç Verifying model integrity...');\n      \n      for (const [modelId, model] of this.models) {\n        // Verify checksums, file existence, etc.\n        // Mark models as corrupted if verification fails\n      }\n      \n      console.log('‚úÖ Model integrity verification completed');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Model integrity verification failed:', error);\n    }\n  }\n\n  private async updateDeploymentStatuses(): Promise<void> {\n    try {\n      console.log('üîÑ Updating deployment statuses...');\n      \n      for (const [modelId, model] of this.models) {\n        if (model.deployment_info.status === 'deployed') {\n          // Check if model is actually healthy\n          const isHealthy = await this.checkModelHealth(model);\n          model.deployment_info.health_status = isHealthy ? 'healthy' : 'unhealthy';\n          model.deployment_info.last_health_check = new Date();\n        }\n      }\n      \n      console.log('‚úÖ Deployment status update completed');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to update deployment statuses:', error);\n    }\n  }\n\n  private async checkModelHealth(model: ModelMetadata): Promise<boolean> {\n    try {\n      if (!model.deployment_info.endpoint) return false;\n      \n      // Perform actual health check against the deployed model\n      // This is a placeholder - implement actual health check logic\n      \n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const modelRegistry = new ModelRegistry();"],"names":["ModelRegistry","modelRegistry","EventEmitter","initialize","isInitialized","console","log","loadModelsFromStorage","verifyModelIntegrity","updateDeploymentStatuses","emit","total_models","models","size","timestamp","Date","error","registerModel","modelData","modelId","generateModelId","name","version","validateModelData","checksum","calculateModelChecksum","model","id","created_at","updated_at","usage_statistics","total_requests","successful_requests","failed_requests","average_response_time","last_used","daily_usage","has","Error","set","modelVersions","changelog","performance_delta","backward_compatible","eventStore","recordEvent","event_type","entity_id","entity_type","data","updateModel","updates","existingModel","get","isVersionUpdate","updatedModel","file_path","config_path","tokenizer_path","versions","push","calculatePerformanceDelta","new_version","getModel","searchModels","searchParams","filteredModels","Array","from","values","query","toLowerCase","filter","includes","description","tags","some","tag","filters","model_type","length","capabilities","cap","size_range","min_mb","size_mb","max_mb","performance_threshold","Object","entries","every","metric","threshold","value","performance_metrics","undefined","deployment_status","deployment_info","status","created_after","created_before","sort_by","sort","a","b","aVal","bVal","getTime","accuracy","sort_order","limit","offset","paginatedModels","slice","hasMore","total_count","pagination","has_more","compareModels","modelAId","modelBId","modelA","modelB","comparison","model_a","model_b","comparison_date","metrics_comparison","benchmark_results","recommendation","preferred_model","reasoning","use_case_recommendations","allMetrics","Set","keys","aValue","bValue","percentageDiff","winner","model_a_value","model_b_value","percentage_diff","aWins","m","bWins","generateComparisonReasoning","generateUseCaseRecommendations","getModelUsageStats","timeRange","success_rate","usage_trend","top_error_types","error_type","count","updateUsageStatistics","requestData","success","alpha","response_time","dateKey","toISOString","split","getModelVersionHistory","deleteModel","force","delete","model_name","getRegistryStatistics","modelsByType","reduce","acc","modelsByStatus","totalSize","sum","mostUsed","map","model_id","usage_count","recentRegistrations","models_by_type","models_by_status","total_size_mb","most_used_models","recent_registrations","content","replace","createHash","update","digest","substring","trim","JSON","stringify","architecture","oldModel","newModel","delta","forEach","oldValue","newValue","aAccuracy","bAccuracy","toFixed","aLatency","inference_latency_ms","bLatency","recommendations","code_generation","warn","isHealthy","checkModelHealth","health_status","last_health_check","endpoint","EventStore","getInstance","Map"],"mappings":"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"}