{"version":3,"names":["cov_23f4s7g20b","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","PerformanceObserver","EventEmitter","os","LRUCache","PerformanceMonitor","startMonitoring","intervalMs","isMonitoring","intervalId","setInterval","collectSystemMetrics","collectApplicationMetrics","checkAlerts","observer","observe","entryTypes","console","log","stopMonitoring","clearInterval","disconnect","recordMetric","name","unit","tags","metric","timestamp","Date","metrics","has","set","metricArray","get","push","length","shift","checkMetricThreshold","emit","getMetrics","limit","slice","getMetricNames","Array","from","keys","getSystemMetrics","cacheKey","cached","cache","ttl","getApplicationMetrics","getActiveAlerts","alerts","values","filter","alert","resolved","getPerformanceSummary","activeAlerts","systemHealth","determineSystemHealth","uptime","now","startTime","topMetrics","getTopMetrics","totalMetrics","size","setThreshold","metricName","warning","critical","thresholds","clear","getStatistics","stats","map","m","avg","reduce","sum","val","max","Math","min","round","count","initializePerformanceObserver","list","entry","getEntries","entryType","duration","type","error","warn","message","cpuUsage","loadavg","cpus","totalMemory","totalmem","freeMemory","freemem","usedMemory","cpu","usage","loadAverage","cores","memory","total","used","free","utilization","disk","network","bytesIn","bytesOut","packetsIn","packetsOut","lastSystemMetrics","memoryUsage","process","requestsPerSecond","calculateRequestsPerSecond","averageResponseTime","calculateAverageResponseTime","errorRate","calculateErrorRate","activeConnections","getActiveConnections","queueSize","getQueueSize","cacheHitRate","calculateCacheHitRate","databaseQueries","getDatabaseQueries","memoryLeaks","detectMemoryLeaks","heapUsed","heapTotal","external","setupDefaultThresholds","threshold","alertId","existingAlert","severity","createAlert","id","currentValue","requestMetrics","recent","responseMetrics","errorMetrics","hitRate","calculatedSize","memoryMetrics","trend","index","some","latest","sort","a","exportMetrics","exportData","toISOString","fromEntries","summary","JSON","stringify","constructor","Map","performanceMonitor"],"sources":["PerformanceMonitor.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { PerformanceObserver } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport * as os from 'os';\nimport { LRUCache } from 'lru-cache';\nexport class PerformanceMonitor extends EventEmitter {\n    /**\n   * Start monitoring system and application performance\n   */ startMonitoring(intervalMs = 5000) {\n        if (this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = true;\n        // Start collecting metrics at specified interval\n        this.intervalId = setInterval(()=>{\n            this.collectSystemMetrics();\n            this.collectApplicationMetrics();\n            this.checkAlerts();\n        }, intervalMs);\n        // Start Node.js performance monitoring\n        if (this.observer) {\n            this.observer.observe({\n                entryTypes: [\n                    'measure',\n                    'mark',\n                    'resource'\n                ]\n            });\n        }\n        console.log(`Performance monitoring started with ${intervalMs}ms interval`);\n    }\n    /**\n   * Stop monitoring\n   */ stopMonitoring() {\n        if (!this.isMonitoring) {\n            return;\n        }\n        this.isMonitoring = false;\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n        if (this.observer) {\n            this.observer.disconnect();\n        }\n        console.log('Performance monitoring stopped');\n    }\n    /**\n   * Record a custom metric\n   */ recordMetric(name, value, unit = '', tags) {\n        const metric = {\n            name,\n            value,\n            unit,\n            timestamp: new Date(),\n            tags\n        };\n        if (!this.metrics.has(name)) {\n            this.metrics.set(name, []);\n        }\n        const metricArray = this.metrics.get(name);\n        metricArray.push(metric);\n        // Keep only last 1000 metrics per name\n        if (metricArray.length > 1000) {\n            metricArray.shift();\n        }\n        // Check if this metric triggers an alert\n        this.checkMetricThreshold(name, value);\n        // Emit metric event\n        this.emit('metric', metric);\n    }\n    /**\n   * Get metrics for a specific name\n   */ getMetrics(name, limit = 100) {\n        const metrics = this.metrics.get(name) || [];\n        return metrics.slice(-limit);\n    }\n    /**\n   * Get all metric names\n   */ getMetricNames() {\n        return Array.from(this.metrics.keys());\n    }\n    /**\n   * Get current system metrics\n   */ async getSystemMetrics() {\n        const cacheKey = 'system_metrics';\n        const cached = this.cache.get(cacheKey);\n        if (cached) {\n            return cached;\n        }\n        const metrics = await this.collectSystemMetrics();\n        this.cache.set(cacheKey, metrics, {\n            ttl: 1000 * 10\n        }); // 10 seconds cache\n        return metrics;\n    }\n    /**\n   * Get current application metrics\n   */ getApplicationMetrics() {\n        const cacheKey = 'app_metrics';\n        const cached = this.cache.get(cacheKey);\n        if (cached) {\n            return cached;\n        }\n        const metrics = this.collectApplicationMetrics();\n        this.cache.set(cacheKey, metrics, {\n            ttl: 1000 * 5\n        }); // 5 seconds cache\n        return metrics;\n    }\n    /**\n   * Get active alerts\n   */ getActiveAlerts() {\n        return Array.from(this.alerts.values()).filter((alert)=>!alert.resolved);\n    }\n    /**\n   * Get performance summary\n   */ getPerformanceSummary() {\n        const activeAlerts = this.getActiveAlerts();\n        const systemHealth = this.determineSystemHealth(activeAlerts);\n        const uptime = Date.now() - this.startTime;\n        // Calculate top metrics by recent activity\n        const topMetrics = this.getTopMetrics(5);\n        return {\n            systemHealth,\n            uptime,\n            totalMetrics: this.metrics.size,\n            activeAlerts: activeAlerts.length,\n            topMetrics\n        };\n    }\n    /**\n   * Set custom threshold for a metric\n   */ setThreshold(metricName, warning, critical) {\n        this.thresholds.set(metricName, {\n            warning,\n            critical\n        });\n    }\n    /**\n   * Clear all metrics and alerts\n   */ clear() {\n        this.metrics.clear();\n        this.alerts.clear();\n        this.cache.clear();\n        console.log('Performance metrics cleared');\n    }\n    /**\n   * Get performance statistics\n   */ getStatistics() {\n        const stats = {};\n        for (const [name, metrics] of this.metrics){\n            if (metrics.length > 0) {\n                const values = metrics.map((m)=>m.value);\n                const avg = values.reduce((sum, val)=>sum + val, 0) / values.length;\n                const max = Math.max(...values);\n                const min = Math.min(...values);\n                stats[name] = {\n                    avg: Math.round(avg * 100) / 100,\n                    max: Math.round(max * 100) / 100,\n                    min: Math.round(min * 100) / 100,\n                    count: metrics.length\n                };\n            }\n        }\n        return stats;\n    }\n    /**\n   * Initialize performance observer\n   */ initializePerformanceObserver() {\n        try {\n            this.observer = new PerformanceObserver((list)=>{\n                for (const entry of list.getEntries()){\n                    this.recordMetric(`nodejs_${entry.entryType}_${entry.name}`, entry.duration || 0, 'ms', {\n                        type: entry.entryType\n                    });\n                }\n            });\n        } catch (error) {\n            console.warn('Failed to initialize performance observer:', error.message);\n        }\n    }\n    /**\n   * Collect system metrics\n   */ async collectSystemMetrics() {\n        const cpuUsage = os.loadavg()[0] / os.cpus().length;\n        const totalMemory = os.totalmem();\n        const freeMemory = os.freemem();\n        const usedMemory = totalMemory - freeMemory;\n        const metrics = {\n            cpu: {\n                usage: Math.round(cpuUsage * 100),\n                loadAverage: os.loadavg(),\n                cores: os.cpus().length\n            },\n            memory: {\n                total: totalMemory,\n                used: usedMemory,\n                free: freeMemory,\n                cached: 0,\n                utilization: Math.round(usedMemory / totalMemory * 100)\n            },\n            disk: {\n                total: 0,\n                used: 0,\n                free: 0,\n                utilization: 0\n            },\n            network: {\n                bytesIn: 0,\n                bytesOut: 0,\n                packetsIn: 0,\n                packetsOut: 0\n            }\n        };\n        // Record individual metrics\n        this.recordMetric('cpu_usage', metrics.cpu.usage, '%');\n        this.recordMetric('memory_usage', metrics.memory.utilization, '%');\n        this.recordMetric('memory_used', metrics.memory.used, 'bytes');\n        this.recordMetric('memory_free', metrics.memory.free, 'bytes');\n        this.lastSystemMetrics = metrics;\n        return metrics;\n    }\n    /**\n   * Collect application-specific metrics\n   */ collectApplicationMetrics() {\n        const memoryUsage = process.memoryUsage();\n        const uptime = process.uptime();\n        const metrics = {\n            requestsPerSecond: this.calculateRequestsPerSecond(),\n            averageResponseTime: this.calculateAverageResponseTime(),\n            errorRate: this.calculateErrorRate(),\n            activeConnections: this.getActiveConnections(),\n            queueSize: this.getQueueSize(),\n            cacheHitRate: this.calculateCacheHitRate(),\n            databaseQueries: this.getDatabaseQueries(),\n            memoryLeaks: this.detectMemoryLeaks()\n        };\n        // Record individual metrics\n        this.recordMetric('app_requests_per_second', metrics.requestsPerSecond, 'rps');\n        this.recordMetric('app_response_time', metrics.averageResponseTime, 'ms');\n        this.recordMetric('app_error_rate', metrics.errorRate, '%');\n        this.recordMetric('app_active_connections', metrics.activeConnections, 'connections');\n        this.recordMetric('app_queue_size', metrics.queueSize, 'items');\n        this.recordMetric('app_cache_hit_rate', metrics.cacheHitRate, '%');\n        this.recordMetric('nodejs_heap_used', memoryUsage.heapUsed, 'bytes');\n        this.recordMetric('nodejs_heap_total', memoryUsage.heapTotal, 'bytes');\n        this.recordMetric('nodejs_external', memoryUsage.external, 'bytes');\n        this.recordMetric('nodejs_uptime', uptime, 'seconds');\n        return metrics;\n    }\n    /**\n   * Setup default performance thresholds\n   */ setupDefaultThresholds() {\n        this.thresholds.set('cpu_usage', {\n            warning: 70,\n            critical: 90\n        });\n        this.thresholds.set('memory_usage', {\n            warning: 80,\n            critical: 95\n        });\n        this.thresholds.set('app_response_time', {\n            warning: 1000,\n            critical: 5000\n        });\n        this.thresholds.set('app_error_rate', {\n            warning: 5,\n            critical: 10\n        });\n        this.thresholds.set('app_queue_size', {\n            warning: 100,\n            critical: 500\n        });\n        this.thresholds.set('nodejs_heap_used', {\n            warning: 1e9,\n            critical: 2e9\n        }); // 1GB, 2GB\n    }\n    /**\n   * Check if a metric exceeds thresholds\n   */ checkMetricThreshold(metricName, value) {\n        const threshold = this.thresholds.get(metricName);\n        if (!threshold) return;\n        const alertId = `${metricName}_threshold`;\n        const existingAlert = this.alerts.get(alertId);\n        if (value >= threshold.critical) {\n            if (!existingAlert || existingAlert.severity !== 'critical') {\n                this.createAlert(alertId, 'critical', metricName, threshold.critical, value);\n            }\n        } else if (value >= threshold.warning) {\n            if (!existingAlert || existingAlert.severity !== 'high') {\n                this.createAlert(alertId, 'high', metricName, threshold.warning, value);\n            }\n        } else {\n            // Value is below thresholds, resolve alert if it exists\n            if (existingAlert && !existingAlert.resolved) {\n                existingAlert.resolved = true;\n                this.emit('alert_resolved', existingAlert);\n            }\n        }\n    }\n    /**\n   * Create a performance alert\n   */ createAlert(id, severity, metric, threshold, currentValue) {\n        const alert = {\n            id,\n            severity,\n            metric,\n            threshold,\n            currentValue,\n            message: `${metric} exceeded ${severity} threshold: ${currentValue} >= ${threshold}`,\n            timestamp: new Date(),\n            resolved: false\n        };\n        this.alerts.set(id, alert);\n        this.emit('alert', alert);\n    }\n    /**\n   * Check all active alerts\n   */ checkAlerts() {\n    // This method can be extended to perform more complex alert logic\n    // For now, individual metric checks handle alert creation\n    }\n    /**\n   * Calculate requests per second\n   */ calculateRequestsPerSecond() {\n        const requestMetrics = this.getMetrics('app_requests_per_second', 60);\n        if (requestMetrics.length === 0) return 0;\n        const recent = requestMetrics.slice(-10); // Last 10 measurements\n        return recent.reduce((sum, m)=>sum + m.value, 0) / recent.length;\n    }\n    /**\n   * Calculate average response time\n   */ calculateAverageResponseTime() {\n        const responseMetrics = this.getMetrics('app_response_time', 60);\n        if (responseMetrics.length === 0) return 0;\n        const recent = responseMetrics.slice(-10);\n        return recent.reduce((sum, m)=>sum + m.value, 0) / recent.length;\n    }\n    /**\n   * Calculate error rate\n   */ calculateErrorRate() {\n        const errorMetrics = this.getMetrics('app_error_rate', 60);\n        if (errorMetrics.length === 0) return 0;\n        const recent = errorMetrics.slice(-10);\n        return recent.reduce((sum, m)=>sum + m.value, 0) / recent.length;\n    }\n    /**\n   * Get active connections (placeholder)\n   */ getActiveConnections() {\n        // This would be implemented based on your WebSocket/HTTP server\n        return 0;\n    }\n    /**\n   * Get queue size (placeholder)\n   */ getQueueSize() {\n        // This would be implemented based on your queue system\n        return 0;\n    }\n    /**\n   * Calculate cache hit rate\n   */ calculateCacheHitRate() {\n        const hitRate = this.cache.calculatedSize > 0 ? (this.cache.calculatedSize - this.cache.size) / this.cache.calculatedSize * 100 : 0;\n        return Math.round(hitRate * 100) / 100;\n    }\n    /**\n   * Get database queries count (placeholder)\n   */ getDatabaseQueries() {\n        // This would be implemented based on your database connection pool\n        return 0;\n    }\n    /**\n   * Detect memory leaks\n   */ detectMemoryLeaks() {\n        const memoryMetrics = this.getMetrics('nodejs_heap_used', 30);\n        if (memoryMetrics.length < 10) return false;\n        // Simple memory leak detection: check if memory usage is consistently increasing\n        const recent = memoryMetrics.slice(-10);\n        const trend = recent.reduce((sum, metric, index)=>{\n            if (index === 0) return sum;\n            return sum + (metric.value - recent[index - 1].value);\n        }, 0);\n        return trend > 0 && trend > recent[0].value * 0.1; // 10% increase trend\n    }\n    /**\n   * Determine overall system health\n   */ determineSystemHealth(alerts) {\n        if (alerts.some((alert)=>alert.severity === 'critical')) {\n            return 'critical';\n        }\n        if (alerts.some((alert)=>alert.severity === 'high' || alert.severity === 'medium')) {\n            return 'warning';\n        }\n        return 'good';\n    }\n    /**\n   * Get top metrics by recent activity\n   */ getTopMetrics(limit) {\n        const topMetrics = [];\n        for (const [name, metrics] of this.metrics){\n            if (metrics.length > 0) {\n                const latest = metrics[metrics.length - 1];\n                topMetrics.push({\n                    name,\n                    value: latest.value,\n                    unit: latest.unit\n                });\n            }\n        }\n        // Sort by value (descending) and take top N\n        return topMetrics.sort((a, b)=>b.value - a.value).slice(0, limit);\n    }\n    /**\n   * Export metrics to JSON\n   */ exportMetrics() {\n        const exportData = {\n            timestamp: new Date().toISOString(),\n            uptime: Date.now() - this.startTime,\n            metrics: Object.fromEntries(this.metrics),\n            alerts: Array.from(this.alerts.values()),\n            thresholds: Object.fromEntries(this.thresholds),\n            summary: this.getPerformanceSummary()\n        };\n        return JSON.stringify(exportData, null, 2);\n    }\n    constructor(){\n        super(), _define_property(this, \"metrics\", void 0), _define_property(this, \"alerts\", void 0), _define_property(this, \"thresholds\", void 0), _define_property(this, \"cache\", void 0), _define_property(this, \"observer\", null), _define_property(this, \"intervalId\", null), _define_property(this, \"isMonitoring\", false), _define_property(this, \"startTime\", void 0), _define_property(this, \"lastSystemMetrics\", null);\n        this.metrics = new Map();\n        this.alerts = new Map();\n        this.thresholds = new Map();\n        this.startTime = Date.now();\n        // Initialize cache for storing computed metrics\n        this.cache = new LRUCache({\n            max: 1000,\n            ttl: 1000 * 60 * 5 // 5 minutes\n        });\n        // Set default thresholds\n        this.setupDefaultThresholds();\n        // Initialize performance observer\n        this.initializePerformanceObserver();\n    }\n}\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n"],"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","ignoreList":[]}