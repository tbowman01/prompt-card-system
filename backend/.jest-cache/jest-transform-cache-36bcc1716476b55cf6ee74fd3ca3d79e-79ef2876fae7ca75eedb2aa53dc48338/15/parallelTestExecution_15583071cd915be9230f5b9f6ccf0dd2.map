{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/parallelTestExecution.ts"],"sourcesContent":["import { Router } from 'express';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { db } from '../database/connection';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst router = Router();\n\n// Initialize the test queue manager\nconst testQueueManager = new TestQueueManager();\n\n// Setup event handlers for real-time updates\ntestQueueManager.on('progressUpdated', (progress) => {\n  // In a real implementation, this would emit to WebSocket clients\n  console.log('Progress updated:', progress);\n});\n\ntestQueueManager.on('jobCompleted', (event) => {\n  console.log('Job completed:', event.executionId);\n});\n\ntestQueueManager.on('jobFailed', (event) => {\n  console.error('Job failed:', event.executionId, event.error);\n});\n\n/**\n * Queue parallel test execution for a prompt card\n * POST /api/parallel-test-execution/queue\n */\nrouter.post('/queue', async (req, res) => {\n  try {\n    const {\n      prompt_card_id,\n      test_case_ids,\n      model,\n      configuration,\n      priority = 0\n    } = req.body;\n\n    // Validate required fields\n    if (!prompt_card_id || !test_case_ids || !Array.isArray(test_case_ids) || test_case_ids.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'prompt_card_id and test_case_ids (array) are required'\n      });\n    }\n\n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id, title FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Verify test cases exist\n    const existingTestCases = db.prepare(`\n      SELECT id FROM test_cases \n      WHERE id IN (${test_case_ids.map(() => '?').join(',')}) \n      AND prompt_card_id = ?\n    `).all(...test_case_ids, prompt_card_id);\n\n    if (existingTestCases.length !== test_case_ids.length) {\n      return res.status(400).json({\n        success: false,\n        error: 'Some test cases not found or do not belong to the specified prompt card'\n      });\n    }\n\n    // Queue the test execution\n    const executionId = await testQueueManager.queueTestExecution(\n      prompt_card_id,\n      test_case_ids,\n      model || 'llama3',\n      configuration,\n      priority\n    );\n\n    return res.status(202).json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        status: 'queued',\n        prompt_card_id,\n        test_case_ids,\n        model: model || 'llama3',\n        configuration: configuration || testQueueManager['defaultConfiguration'],\n        priority\n      }\n    });\n\n  } catch (error) {\n    console.error('Error queuing test execution:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to queue test execution'\n    });\n  }\n});\n\n/**\n * Get execution progress\n * GET /api/parallel-test-execution/:executionId/progress\n */\nrouter.get('/:executionId/progress', (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    const progress = testQueueManager.getExecutionProgress(executionId);\n    \n    if (!progress) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution not found or not active'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: progress\n    });\n\n  } catch (error) {\n    console.error('Error getting execution progress:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get execution progress'\n    });\n  }\n});\n\n/**\n * Get all active executions\n * GET /api/parallel-test-execution/active\n */\nrouter.get('/active', (req, res) => {\n  try {\n    const activeExecutions = testQueueManager.getActiveExecutions();\n    \n    return res.json({\n      success: true,\n      data: activeExecutions\n    });\n\n  } catch (error) {\n    console.error('Error getting active executions:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get active executions'\n    });\n  }\n});\n\n/**\n * Cancel test execution\n * DELETE /api/parallel-test-execution/:executionId\n */\nrouter.delete('/:executionId', async (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    const cancelled = await testQueueManager.cancelExecution(executionId);\n    \n    if (!cancelled) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution not found or cannot be cancelled'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Test execution cancelled successfully'\n    });\n\n  } catch (error) {\n    console.error('Error cancelling test execution:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to cancel test execution'\n    });\n  }\n});\n\n/**\n * Get queue statistics\n * GET /api/parallel-test-execution/queue/stats\n */\nrouter.get('/queue/stats', async (req, res) => {\n  try {\n    const stats = await testQueueManager.getQueueStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n\n  } catch (error) {\n    console.error('Error getting queue stats:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get queue statistics'\n    });\n  }\n});\n\n/**\n * Get test execution results\n * GET /api/parallel-test-execution/:executionId/results\n */\nrouter.get('/:executionId/results', (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    // Get results from database\n    const results = db.prepare(`\n      SELECT \n        tr.*,\n        tc.name as test_case_name,\n        pc.title as prompt_card_title\n      FROM test_results tr\n      JOIN test_cases tc ON tr.test_case_id = tc.id\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tr.execution_id LIKE ?\n      ORDER BY tr.created_at ASC\n    `).all(`${executionId}%`);\n\n    if (results.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No results found for this execution'\n      });\n    }\n\n    // Parse JSON fields and format results\n    const formattedResults = results.map(result => ({\n      ...result,\n      assertion_results: JSON.parse(result.assertion_results || '[]'),\n      passed: Boolean(result.passed)\n    }));\n\n    // Calculate summary statistics\n    const summary = {\n      total_tests: formattedResults.length,\n      passed_tests: formattedResults.filter(r => r.passed).length,\n      failed_tests: formattedResults.filter(r => !r.passed).length,\n      total_execution_time: formattedResults.reduce((sum, r) => sum + r.execution_time_ms, 0),\n      average_execution_time: formattedResults.reduce((sum, r) => sum + r.execution_time_ms, 0) / formattedResults.length\n    };\n\n    return res.json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        summary,\n        results: formattedResults\n      }\n    });\n\n  } catch (error) {\n    console.error('Error getting execution results:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get execution results'\n    });\n  }\n});\n\n/**\n * Get system resource status\n * GET /api/parallel-test-execution/system/resources\n */\nrouter.get('/system/resources', (req, res) => {\n  try {\n    const resourceManager = testQueueManager['resourceManager'];\n    const currentUsage = resourceManager.getCurrentUsage();\n    const limits = resourceManager.getLimits();\n    const reservedSummary = resourceManager.getReservedResourcesSummary();\n    const isUnderStress = resourceManager.isSystemUnderStress();\n    const optimalConcurrency = resourceManager.getOptimalConcurrency();\n\n    return res.json({\n      success: true,\n      data: {\n        current_usage: currentUsage,\n        limits,\n        reserved_resources: reservedSummary,\n        system_under_stress: isUnderStress,\n        optimal_concurrency: optimalConcurrency\n      }\n    });\n\n  } catch (error) {\n    console.error('Error getting system resources:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get system resources'\n    });\n  }\n});\n\n/**\n * Batch execute multiple prompt cards\n * POST /api/parallel-test-execution/batch\n */\nrouter.post('/batch', async (req, res) => {\n  try {\n    const { executions } = req.body;\n\n    if (!Array.isArray(executions) || executions.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'executions array is required'\n      });\n    }\n\n    const results = [];\n    const batchId = uuidv4();\n\n    for (const execution of executions) {\n      try {\n        const executionId = await testQueueManager.queueTestExecution(\n          execution.prompt_card_id,\n          execution.test_case_ids,\n          execution.model || 'llama3',\n          execution.configuration,\n          execution.priority || 0\n        );\n\n        results.push({\n          execution_id: executionId,\n          prompt_card_id: execution.prompt_card_id,\n          status: 'queued',\n          error: null\n        });\n\n      } catch (error) {\n        results.push({\n          execution_id: null,\n          prompt_card_id: execution.prompt_card_id,\n          status: 'failed',\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return res.status(202).json({\n      success: true,\n      data: {\n        batch_id: batchId,\n        total_executions: executions.length,\n        successful_queued: results.filter(r => r.status === 'queued').length,\n        failed_to_queue: results.filter(r => r.status === 'failed').length,\n        results\n      }\n    });\n\n  } catch (error) {\n    console.error('Error batch executing tests:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to batch execute tests'\n    });\n  }\n});\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  console.log('Gracefully shutting down test queue manager...');\n  await testQueueManager.shutdown();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  console.log('Gracefully shutting down test queue manager...');\n  await testQueueManager.shutdown();\n  process.exit(0);\n});\n\nexport { router as parallelTestExecutionRoutes };"],"names":["parallelTestExecutionRoutes","router","Router","testQueueManager","TestQueueManager","on","progress","console","log","event","executionId","error","post","req","res","prompt_card_id","test_case_ids","model","configuration","priority","body","Array","isArray","length","status","json","success","promptCard","db","prepare","get","existingTestCases","map","join","all","queueTestExecution","data","execution_id","Error","message","params","getExecutionProgress","activeExecutions","getActiveExecutions","delete","cancelled","cancelExecution","stats","getQueueStats","results","formattedResults","result","assertion_results","JSON","parse","passed","Boolean","summary","total_tests","passed_tests","filter","r","failed_tests","total_execution_time","reduce","sum","execution_time_ms","average_execution_time","resourceManager","currentUsage","getCurrentUsage","limits","getLimits","reservedSummary","getReservedResourcesSummary","isUnderStress","isSystemUnderStress","optimalConcurrency","getOptimalConcurrency","current_usage","reserved_resources","system_under_stress","optimal_concurrency","executions","batchId","uuidv4","execution","push","batch_id","total_executions","successful_queued","failed_to_queue","process","shutdown","exit"],"mappings":"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"}