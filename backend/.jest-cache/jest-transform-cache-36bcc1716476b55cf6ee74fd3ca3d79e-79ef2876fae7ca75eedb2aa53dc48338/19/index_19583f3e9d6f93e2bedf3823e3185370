2a0fe0ceb0bae0da76abca29cf70c33d
/**
 * AI-Powered Prompt Optimization Services
 * 
 * This module provides comprehensive prompt optimization capabilities:
 * - Prompt effectiveness analysis
 * - AI-powered optimization suggestions
 * - A/B testing automation
 * - Security threat detection
 * - Compliance validation
 * - Automated prompt tuning
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get OptimizationEngine () {
        return _OptimizationEngine.OptimizationEngine;
    },
    get PromptAnalyzer () {
        return _PromptAnalyzer.PromptAnalyzer;
    },
    get SecurityAnalyzer () {
        return _SecurityAnalyzer.SecurityAnalyzer;
    },
    get checkOptimizationServicesHealth () {
        return checkOptimizationServicesHealth;
    },
    get getOptimizationCapabilities () {
        return getOptimizationCapabilities;
    },
    get initializeOptimizationServices () {
        return initializeOptimizationServices;
    },
    get optimizationEngine () {
        return _OptimizationEngine.optimizationEngine;
    },
    get promptAnalyzer () {
        return _PromptAnalyzer.promptAnalyzer;
    },
    get securityAnalyzer () {
        return _SecurityAnalyzer.securityAnalyzer;
    }
});
const _PromptAnalyzer = require("./PromptAnalyzer");
const _OptimizationEngine = require("./OptimizationEngine");
const _SecurityAnalyzer = require("./SecurityAnalyzer");
async function initializeOptimizationServices() {
    console.log('🔧 Initializing AI-Powered Prompt Optimization Services...');
    try {
        // Services are initialized as singletons when imported
        console.log('✅ Prompt Analyzer initialized');
        console.log('✅ Optimization Engine initialized');
        console.log('✅ Security Analyzer initialized');
        console.log('🚀 AI-Powered Prompt Optimization Services ready!');
    } catch (error) {
        console.error('❌ Failed to initialize optimization services:', error);
        throw error;
    }
}
function checkOptimizationServicesHealth() {
    const services = {
        promptAnalyzer: 'active',
        optimizationEngine: 'active',
        securityAnalyzer: 'active'
    };
    const allHealthy = Object.values(services).every((status)=>status === 'active');
    return {
        status: allHealthy ? 'healthy' : 'unhealthy',
        services,
        timestamp: new Date().toISOString()
    };
}
function getOptimizationCapabilities() {
    return {
        promptAnalysis: [
            'Effectiveness scoring',
            'Pattern recognition',
            'Trend analysis',
            'Performance metrics',
            'Comparison analysis'
        ],
        optimization: [
            'AI-powered suggestions',
            'Structure optimization',
            'Clarity improvements',
            'Specificity enhancements',
            'Context optimization'
        ],
        security: [
            'Prompt injection detection',
            'Jailbreak resistance testing',
            'Content safety analysis',
            'Compliance validation',
            'Threat assessment'
        ],
        abTesting: [
            'Multi-variant testing',
            'Statistical analysis',
            'Performance comparison',
            'Winner determination',
            'Confidence scoring'
        ],
        tuning: [
            'Automated optimization',
            'Iterative improvement',
            'Convergence analysis',
            'Performance tracking',
            'Best prompt selection'
        ]
    };
}
