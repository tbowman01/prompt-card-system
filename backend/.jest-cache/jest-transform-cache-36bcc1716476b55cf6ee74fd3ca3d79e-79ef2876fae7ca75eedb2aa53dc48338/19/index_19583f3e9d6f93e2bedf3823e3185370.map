{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/optimization/index.ts"],"sourcesContent":["/**\n * AI-Powered Prompt Optimization Services\n * \n * This module provides comprehensive prompt optimization capabilities:\n * - Prompt effectiveness analysis\n * - AI-powered optimization suggestions\n * - A/B testing automation\n * - Security threat detection\n * - Compliance validation\n * - Automated prompt tuning\n */\n\nexport { promptAnalyzer, PromptAnalyzer } from './PromptAnalyzer';\nexport { optimizationEngine, OptimizationEngine } from './OptimizationEngine';\nexport { securityAnalyzer, SecurityAnalyzer } from './SecurityAnalyzer';\n\n// Types exports\nexport type {\n  PromptAnalysisResult,\n  PromptComparisonResult\n} from './PromptAnalyzer';\n\nexport type {\n  OptimizationSuggestion,\n  ABTestConfiguration,\n  ABTestResult,\n  PromptTuningConfiguration,\n  PromptTuningResult\n} from './OptimizationEngine';\n\nexport type {\n  SecurityThreat,\n  SecurityAnalysisResult,\n  JailbreakAttempt,\n  ContentSafetyResult\n} from './SecurityAnalyzer';\n\n/**\n * Initialize all optimization services\n */\nexport async function initializeOptimizationServices(): Promise<void> {\n  console.log('üîß Initializing AI-Powered Prompt Optimization Services...');\n  \n  try {\n    // Services are initialized as singletons when imported\n    console.log('‚úÖ Prompt Analyzer initialized');\n    console.log('‚úÖ Optimization Engine initialized');\n    console.log('‚úÖ Security Analyzer initialized');\n    \n    console.log('üöÄ AI-Powered Prompt Optimization Services ready!');\n  } catch (error) {\n    console.error('‚ùå Failed to initialize optimization services:', error);\n    throw error;\n  }\n}\n\n/**\n * Service health check\n */\nexport function checkOptimizationServicesHealth(): {\n  status: 'healthy' | 'unhealthy';\n  services: Record<string, 'active' | 'inactive' | 'error'>;\n  timestamp: string;\n} {\n  const services = {\n    promptAnalyzer: 'active' as const,\n    optimizationEngine: 'active' as const,\n    securityAnalyzer: 'active' as const\n  };\n  \n  const allHealthy = Object.values(services).every(status => status === 'active');\n  \n  return {\n    status: allHealthy ? 'healthy' : 'unhealthy',\n    services,\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Get optimization services capabilities\n */\nexport function getOptimizationCapabilities(): {\n  promptAnalysis: string[];\n  optimization: string[];\n  security: string[];\n  abTesting: string[];\n  tuning: string[];\n} {\n  return {\n    promptAnalysis: [\n      'Effectiveness scoring',\n      'Pattern recognition',\n      'Trend analysis',\n      'Performance metrics',\n      'Comparison analysis'\n    ],\n    optimization: [\n      'AI-powered suggestions',\n      'Structure optimization',\n      'Clarity improvements',\n      'Specificity enhancements',\n      'Context optimization'\n    ],\n    security: [\n      'Prompt injection detection',\n      'Jailbreak resistance testing',\n      'Content safety analysis',\n      'Compliance validation',\n      'Threat assessment'\n    ],\n    abTesting: [\n      'Multi-variant testing',\n      'Statistical analysis',\n      'Performance comparison',\n      'Winner determination',\n      'Confidence scoring'\n    ],\n    tuning: [\n      'Automated optimization',\n      'Iterative improvement',\n      'Convergence analysis',\n      'Performance tracking',\n      'Best prompt selection'\n    ]\n  };\n}"],"names":["OptimizationEngine","PromptAnalyzer","SecurityAnalyzer","checkOptimizationServicesHealth","getOptimizationCapabilities","initializeOptimizationServices","optimizationEngine","promptAnalyzer","securityAnalyzer","console","log","error","services","allHealthy","Object","values","every","status","timestamp","Date","toISOString","promptAnalysis","optimization","security","abTesting","tuning"],"mappings":"AAAA;;;;;;;;;;CAUC;;;;;;;;;;;QAG4BA;eAAAA,sCAAkB;;QADtBC;eAAAA,8BAAc;;QAEZC;eAAAA,kCAAgB;;QA6C3BC;eAAAA;;QAuBAC;eAAAA;;QA1CMC;eAAAA;;QA3BbC;eAAAA,sCAAkB;;QADlBC;eAAAA,8BAAc;;QAEdC;eAAAA,kCAAgB;;;gCAFsB;oCACQ;kCACJ;AA0B5C,eAAeH;IACpBI,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,uDAAuD;QACvDD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QAEZD,QAAQC,GAAG,CAAC;IACd,EAAE,OAAOC,OAAO;QACdF,QAAQE,KAAK,CAAC,iDAAiDA;QAC/D,MAAMA;IACR;AACF;AAKO,SAASR;IAKd,MAAMS,WAAW;QACfL,gBAAgB;QAChBD,oBAAoB;QACpBE,kBAAkB;IACpB;IAEA,MAAMK,aAAaC,OAAOC,MAAM,CAACH,UAAUI,KAAK,CAACC,CAAAA,SAAUA,WAAW;IAEtE,OAAO;QACLA,QAAQJ,aAAa,YAAY;QACjCD;QACAM,WAAW,IAAIC,OAAOC,WAAW;IACnC;AACF;AAKO,SAAShB;IAOd,OAAO;QACLiB,gBAAgB;YACd;YACA;YACA;YACA;YACA;SACD;QACDC,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACDC,UAAU;YACR;YACA;YACA;YACA;YACA;SACD;QACDC,WAAW;YACT;YACA;YACA;YACA;YACA;SACD;QACDC,QAAQ;YACN;YACA;YACA;YACA;YACA;SACD;IACH;AACF"}