{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/training.ts"],"sourcesContent":["import express from 'express';\nimport { modelTrainingEngine } from '../services/training/ModelTrainingEngine';\nimport { modelRegistry } from '../services/training/ModelRegistry';\nimport { validation } from '../middleware/validation';\nimport Joi from 'joi';\n\nconst router = express.Router();\n\n// Validation schemas\nconst trainingConfigSchema = Joi.object({\n  name: Joi.string().required().min(1).max(100),\n  model: Joi.string().required(),\n  trainingData: Joi.object({\n    source: Joi.string().valid('file', 'database', 'api', 'synthetic').required(),\n    path: Joi.string().when('source', { is: 'file', then: Joi.required() }),\n    query: Joi.string().when('source', { is: 'database', then: Joi.required() }),\n    endpoint: Joi.string().when('source', { is: 'api', then: Joi.required() }),\n    format: Joi.string().valid('jsonl', 'csv', 'txt', 'parquet').required(),\n    validation_split: Joi.number().min(0.1).max(0.9).required()\n  }).required(),\n  hyperparameters: Joi.object({\n    learning_rate: Joi.number().min(0.00001).max(1).required(),\n    batch_size: Joi.number().integer().min(1).max(1024).required(),\n    epochs: Joi.number().integer().min(1).max(1000).required(),\n    warmup_steps: Joi.number().integer().min(0).default(0),\n    weight_decay: Joi.number().min(0).max(1).default(0.01),\n    dropout_rate: Joi.number().min(0).max(1).default(0.1),\n    gradient_clip_norm: Joi.number().min(0).default(1.0)\n  }).required(),\n  optimization: Joi.object({\n    optimizer: Joi.string().valid('adam', 'adamw', 'sgd', 'rmsprop').default('adamw'),\n    scheduler: Joi.string().valid('linear', 'cosine', 'exponential', 'polynomial').default('linear'),\n    early_stopping: Joi.object({\n      enabled: Joi.boolean().default(true),\n      patience: Joi.number().integer().min(1).default(5),\n      metric: Joi.string().default('validation_loss'),\n      min_delta: Joi.number().min(0).default(0.001)\n    }).default()\n  }).default(),\n  evaluation: Joi.object({\n    metrics: Joi.array().items(Joi.string()).default(['accuracy', 'f1_score']),\n    benchmark_datasets: Joi.array().items(Joi.string()).default([]),\n    validation_frequency: Joi.number().integer().min(1).default(1),\n    save_best_model: Joi.boolean().default(true)\n  }).default(),\n  resources: Joi.object({\n    gpu_memory_limit: Joi.number().integer().min(1),\n    cpu_cores: Joi.number().integer().min(1),\n    memory_limit: Joi.number().integer().min(1),\n    storage_limit: Joi.number().integer().min(1)\n  }).default({}),\n  deployment: Joi.object({\n    auto_deploy: Joi.boolean().default(false),\n    deployment_target: Joi.string().valid('ollama', 'huggingface', 'local', 'cloud').default('local'),\n    rollback_on_failure: Joi.boolean().default(true),\n    health_check_enabled: Joi.boolean().default(true)\n  }).default(),\n  metadata: Joi.object({\n    description: Joi.string().default(''),\n    tags: Joi.array().items(Joi.string()).default([]),\n    base_model: Joi.string(),\n    training_objective: Joi.string().default('general_improvement')\n  }).default()\n});\n\nconst syntheticDataSchema = Joi.object({\n  template_prompts: Joi.array().items(Joi.string()).min(1).required(),\n  generation_config: Joi.object({\n    num_samples: Joi.number().integer().min(1).max(100000).required(),\n    temperature: Joi.number().min(0).max(2).default(0.7),\n    max_tokens: Joi.number().integer().min(10).max(4096).default(512),\n    diversity_penalty: Joi.number().min(0).max(2).default(0.5),\n    quality_filter: Joi.boolean().default(true)\n  }).required(),\n  output_format: Joi.string().valid('jsonl', 'csv', 'txt').default('jsonl')\n});\n\nconst modelRegistrationSchema = Joi.object({\n  name: Joi.string().required().min(1).max(100),\n  version: Joi.string().required(),\n  description: Joi.string().required(),\n  author: Joi.string().required(),\n  license: Joi.string().required(),\n  tags: Joi.array().items(Joi.string()).default([]),\n  model_type: Joi.string().valid('foundation', 'fine_tuned', 'specialized', 'custom').required(),\n  base_model: Joi.string(),\n  training_job_id: Joi.string(),\n  size_mb: Joi.number().integer().min(1).required(),\n  parameter_count: Joi.number().integer().min(1).required(),\n  architecture: Joi.object({\n    model_family: Joi.string().required(),\n    layers: Joi.number().integer().min(1).required(),\n    hidden_size: Joi.number().integer().min(1).required(),\n    attention_heads: Joi.number().integer().min(1).required(),\n    vocab_size: Joi.number().integer().min(1).required(),\n    max_sequence_length: Joi.number().integer().min(1).required()\n  }).required(),\n  capabilities: Joi.object({\n    text_generation: Joi.boolean().default(false),\n    text_classification: Joi.boolean().default(false),\n    question_answering: Joi.boolean().default(false),\n    summarization: Joi.boolean().default(false),\n    code_generation: Joi.boolean().default(false),\n    embedding_generation: Joi.boolean().default(false),\n    multimodal: Joi.boolean().default(false)\n  }).default(),\n  performance_metrics: Joi.object({\n    accuracy: Joi.number().min(0).max(1),\n    f1_score: Joi.number().min(0).max(1),\n    bleu_score: Joi.number().min(0).max(1),\n    rouge_score: Joi.number().min(0).max(1),\n    perplexity: Joi.number().min(1),\n    inference_latency_ms: Joi.number().min(0).required(),\n    throughput_tokens_per_sec: Joi.number().min(0).required(),\n    memory_usage_mb: Joi.number().min(0).required()\n  }).required(),\n  file_path: Joi.string(),\n  config_path: Joi.string(),\n  tokenizer_path: Joi.string()\n});\n\nconst modelSearchSchema = Joi.object({\n  query: Joi.string().allow(''),\n  filters: Joi.object({\n    model_type: Joi.array().items(Joi.string().valid('foundation', 'fine_tuned', 'specialized', 'custom')),\n    capabilities: Joi.array().items(Joi.string()),\n    size_range: Joi.object({\n      min_mb: Joi.number().integer().min(0),\n      max_mb: Joi.number().integer().min(0)\n    }),\n    performance_threshold: Joi.object().pattern(Joi.string(), Joi.number()),\n    deployment_status: Joi.array().items(Joi.string().valid('pending', 'deployed', 'deprecated', 'failed')),\n    tags: Joi.array().items(Joi.string()),\n    created_after: Joi.date().iso(),\n    created_before: Joi.date().iso()\n  }).default({}),\n  sort_by: Joi.string().valid('name', 'created_at', 'size_mb', 'performance', 'usage').default('created_at'),\n  sort_order: Joi.string().valid('asc', 'desc').default('desc'),\n  limit: Joi.number().integer().min(1).max(100).default(20),\n  offset: Joi.number().integer().min(0).default(0)\n});\n\n/**\n * @route POST /api/training/jobs\n * @desc Create a new training job\n */\nrouter.post('/jobs', validation(trainingConfigSchema), async (req, res) => {\n  try {\n    const job = await modelTrainingEngine.createTrainingJob(req.body);\n    \n    res.status(201).json({\n      success: true,\n      data: {\n        job_id: job.id,\n        status: job.status,\n        config: job.config,\n        created_at: job.config.metadata.created_at\n      }\n    });\n  } catch (error) {\n    console.error('Error creating training job:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create training job'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/jobs/:jobId/start\n * @desc Start a training job\n */\nrouter.post('/jobs/:jobId/start', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    await modelTrainingEngine.startTrainingJob(jobId);\n    \n    res.json({\n      success: true,\n      message: `Training job ${jobId} started successfully`\n    });\n  } catch (error) {\n    console.error('Error starting training job:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to start training job'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/jobs/:jobId\n * @desc Get training job details\n */\nrouter.get('/jobs/:jobId', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    const job = modelTrainingEngine.getTrainingJob(jobId);\n    \n    if (!job) {\n      return res.status(404).json({\n        success: false,\n        error: 'Training job not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: job\n    });\n  } catch (error) {\n    console.error('Error getting training job:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get training job'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/jobs\n * @desc List training jobs with filters\n */\nrouter.get('/jobs', async (req, res) => {\n  try {\n    const filters: any = {};\n    \n    if (req.query.status) filters.status = req.query.status as string;\n    if (req.query.model) filters.model = req.query.model as string;\n    if (req.query.created_after) filters.created_after = new Date(req.query.created_after as string);\n    if (req.query.created_before) filters.created_before = new Date(req.query.created_before as string);\n    \n    const jobs = modelTrainingEngine.listTrainingJobs(filters);\n    \n    res.json({\n      success: true,\n      data: {\n        jobs,\n        total_count: jobs.length\n      }\n    });\n  } catch (error) {\n    console.error('Error listing training jobs:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to list training jobs'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/jobs/:jobId/cancel\n * @desc Cancel a training job\n */\nrouter.post('/jobs/:jobId/cancel', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    await modelTrainingEngine.cancelTrainingJob(jobId);\n    \n    res.json({\n      success: true,\n      message: `Training job ${jobId} cancelled successfully`\n    });\n  } catch (error) {\n    console.error('Error cancelling training job:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to cancel training job'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/synthetic-data\n * @desc Generate synthetic training data\n */\nrouter.post('/synthetic-data', validation(syntheticDataSchema), async (req, res) => {\n  try {\n    const outputPath = await modelTrainingEngine.generateSyntheticData(req.body);\n    \n    res.json({\n      success: true,\n      data: {\n        output_path: outputPath,\n        generation_config: req.body.generation_config,\n        template_count: req.body.template_prompts.length\n      }\n    });\n  } catch (error) {\n    console.error('Error generating synthetic data:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to generate synthetic data'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/evaluate/:modelName\n * @desc Evaluate model performance\n */\nrouter.post('/evaluate/:modelName', async (req, res) => {\n  try {\n    const { modelName } = req.params;\n    const { benchmark_datasets = [], custom_metrics = [] } = req.body;\n    \n    const evaluation = await modelTrainingEngine.evaluateModel(\n      modelName,\n      benchmark_datasets,\n      custom_metrics\n    );\n    \n    res.json({\n      success: true,\n      data: evaluation\n    });\n  } catch (error) {\n    console.error('Error evaluating model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to evaluate model'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/deploy/:modelVersionId\n * @desc Deploy a trained model\n */\nrouter.post('/deploy/:modelVersionId', async (req, res) => {\n  try {\n    const { modelVersionId } = req.params;\n    const {\n      target = 'local',\n      auto_rollback = true,\n      health_check_timeout = 30000,\n      deployment_tags = []\n    } = req.body;\n    \n    const deployment = await modelTrainingEngine.deployModel(\n      modelVersionId,\n      target,\n      {\n        auto_rollback,\n        health_check_timeout,\n        deployment_tags\n      }\n    );\n    \n    res.json({\n      success: true,\n      data: deployment\n    });\n  } catch (error) {\n    console.error('Error deploying model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to deploy model'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/statistics\n * @desc Get training system statistics\n */\nrouter.get('/statistics', async (req, res) => {\n  try {\n    const stats = modelTrainingEngine.getTrainingStatistics();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting training statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get training statistics'\n    });\n  }\n});\n\n// Model Registry Routes\n\n/**\n * @route POST /api/training/models\n * @desc Register a new model\n */\nrouter.post('/models', validation(modelRegistrationSchema), async (req, res) => {\n  try {\n    const model = await modelRegistry.registerModel(req.body);\n    \n    res.status(201).json({\n      success: true,\n      data: model\n    });\n  } catch (error) {\n    console.error('Error registering model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to register model'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/models/:modelId\n * @desc Get model details\n */\nrouter.get('/models/:modelId', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const model = modelRegistry.getModel(modelId);\n    \n    if (!model) {\n      return res.status(404).json({\n        success: false,\n        error: 'Model not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: model\n    });\n  } catch (error) {\n    console.error('Error getting model:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get model'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/models/search\n * @desc Search models with filters\n */\nrouter.post('/models/search', validation(modelSearchSchema), async (req, res) => {\n  try {\n    const searchResult = modelRegistry.searchModels(req.body);\n    \n    res.json({\n      success: true,\n      data: searchResult\n    });\n  } catch (error) {\n    console.error('Error searching models:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to search models'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/models/compare\n * @desc Compare two models\n */\nrouter.post('/models/compare', async (req, res) => {\n  try {\n    const { model_a_id, model_b_id } = req.body;\n    \n    if (!model_a_id || !model_b_id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Both model_a_id and model_b_id are required'\n      });\n    }\n    \n    const comparison = await modelRegistry.compareModels(model_a_id, model_b_id);\n    \n    res.json({\n      success: true,\n      data: comparison\n    });\n  } catch (error) {\n    console.error('Error comparing models:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to compare models'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/models/:modelId/usage\n * @desc Get model usage statistics\n */\nrouter.get('/models/:modelId/usage', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const timeRange = req.query.start && req.query.end ? {\n      start: new Date(req.query.start as string),\n      end: new Date(req.query.end as string)\n    } : undefined;\n    \n    const usage = modelRegistry.getModelUsageStats(modelId, timeRange);\n    \n    res.json({\n      success: true,\n      data: usage\n    });\n  } catch (error) {\n    console.error('Error getting model usage:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get model usage'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/models/:modelId/versions\n * @desc Get model version history\n */\nrouter.get('/models/:modelId/versions', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const versions = modelRegistry.getModelVersionHistory(modelId);\n    \n    res.json({\n      success: true,\n      data: {\n        model_id: modelId,\n        versions,\n        total_versions: versions.length\n      }\n    });\n  } catch (error) {\n    console.error('Error getting model versions:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get model versions'\n    });\n  }\n});\n\n/**\n * @route PUT /api/training/models/:modelId\n * @desc Update model metadata\n */\nrouter.put('/models/:modelId', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const updatedModel = await modelRegistry.updateModel(modelId, req.body);\n    \n    res.json({\n      success: true,\n      data: updatedModel\n    });\n  } catch (error) {\n    console.error('Error updating model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update model'\n    });\n  }\n});\n\n/**\n * @route DELETE /api/training/models/:modelId\n * @desc Delete a model\n */\nrouter.delete('/models/:modelId', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const force = req.query.force === 'true';\n    \n    await modelRegistry.deleteModel(modelId, force);\n    \n    res.json({\n      success: true,\n      message: `Model ${modelId} deleted successfully`\n    });\n  } catch (error) {\n    console.error('Error deleting model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete model'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/registry/statistics\n * @desc Get model registry statistics\n */\nrouter.get('/registry/statistics', async (req, res) => {\n  try {\n    const stats = modelRegistry.getRegistryStatistics();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting registry statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get registry statistics'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/health\n * @desc Health check for training system\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date(),\n      components: {\n        training_engine: 'healthy',\n        model_registry: 'healthy',\n        tensorflow: 'healthy'\n      },\n      statistics: {\n        active_jobs: modelTrainingEngine.listTrainingJobs({ status: 'training' }).length,\n        total_models: modelRegistry.getRegistryStatistics().total_models,\n        system_load: process.cpuUsage(),\n        memory_usage: process.memoryUsage()\n      }\n    };\n    \n    res.json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    console.error('Error getting training health:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Training system health check failed'\n    });\n  }\n});\n\nexport default router;"],"names":["router","express","Router","trainingConfigSchema","Joi","object","name","string","required","min","max","model","trainingData","source","valid","path","when","is","then","query","endpoint","format","validation_split","number","hyperparameters","learning_rate","batch_size","integer","epochs","warmup_steps","default","weight_decay","dropout_rate","gradient_clip_norm","optimization","optimizer","scheduler","early_stopping","enabled","boolean","patience","metric","min_delta","evaluation","metrics","array","items","benchmark_datasets","validation_frequency","save_best_model","resources","gpu_memory_limit","cpu_cores","memory_limit","storage_limit","deployment","auto_deploy","deployment_target","rollback_on_failure","health_check_enabled","metadata","description","tags","base_model","training_objective","syntheticDataSchema","template_prompts","generation_config","num_samples","temperature","max_tokens","diversity_penalty","quality_filter","output_format","modelRegistrationSchema","version","author","license","model_type","training_job_id","size_mb","parameter_count","architecture","model_family","layers","hidden_size","attention_heads","vocab_size","max_sequence_length","capabilities","text_generation","text_classification","question_answering","summarization","code_generation","embedding_generation","multimodal","performance_metrics","accuracy","f1_score","bleu_score","rouge_score","perplexity","inference_latency_ms","throughput_tokens_per_sec","memory_usage_mb","file_path","config_path","tokenizer_path","modelSearchSchema","allow","filters","size_range","min_mb","max_mb","performance_threshold","pattern","deployment_status","created_after","date","iso","created_before","sort_by","sort_order","limit","offset","post","validation","req","res","job","modelTrainingEngine","createTrainingJob","body","status","json","success","data","job_id","id","config","created_at","error","console","Error","message","jobId","params","startTrainingJob","get","getTrainingJob","Date","jobs","listTrainingJobs","total_count","length","cancelTrainingJob","outputPath","generateSyntheticData","output_path","template_count","modelName","custom_metrics","evaluateModel","modelVersionId","target","auto_rollback","health_check_timeout","deployment_tags","deployModel","stats","getTrainingStatistics","modelRegistry","registerModel","modelId","getModel","searchResult","searchModels","model_a_id","model_b_id","comparison","compareModels","timeRange","start","end","undefined","usage","getModelUsageStats","versions","getModelVersionHistory","model_id","total_versions","put","updatedModel","updateModel","delete","force","deleteModel","getRegistryStatistics","health","timestamp","components","training_engine","model_registry","tensorflow","statistics","active_jobs","total_models","system_load","process","cpuUsage","memory_usage","memoryUsage"],"mappings":"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"}