{"version":3,"names":["cov_11tmfecun7","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","os","EventEmitter","ResourceManager","checkResourceAvailability","requirement","updateCurrentUsage","projectedCpu","currentUsage","cpu_percent","projectedMemory","memory_mb","projectedTests","active_tests","concurrent_tests","cpuOk","limits","max_cpu_percent","memoryOk","max_memory_mb","testsOk","max_concurrent_tests","priority","emergencyCpuOk","emergency_threshold_cpu","emergencyMemoryOk","emergency_threshold_memory","reserveResources","taskId","isAvailable","Error","reservedResources","set","emit","releaseResources","get","delete","getCurrentUsage","getLimits","setLimits","newLimits","initialize","console","log","cleanup","destroy","getReservedResourcesSummary","totalCpu","totalMemory","totalTests","values","total_reserved_cpu","total_reserved_memory","total_reserved_tests","active_reservations","size","isSystemUnderStress","cpuStress","memoryStress","loadStress","load_average","cpus","length","getOptimalConcurrency","cpuBasedConcurrency","Math","max","floor","memoryBasedConcurrency","min","Promise","resolve","memUsage","process","memoryUsage","loadAvg","loadavg","cpuCount","estimatedCpu","rss","memory_total_mb","totalmem","queue_length","timestamp","Date","startMonitoring","monitoringInterval","setInterval","type","usage","clearInterval","removeAllListeners","constructor","Map"],"sources":["ResourceManager.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport * as os from 'os';\nimport { EventEmitter } from 'events';\nexport class ResourceManager extends EventEmitter {\n    /**\n   * Check if resources are available for the given requirement\n   */ async checkResourceAvailability(requirement) {\n        await this.updateCurrentUsage();\n        // Calculate projected usage\n        const projectedCpu = this.currentUsage.cpu_percent + requirement.cpu_percent;\n        const projectedMemory = this.currentUsage.memory_mb + requirement.memory_mb;\n        const projectedTests = this.currentUsage.active_tests + requirement.concurrent_tests;\n        // Check against limits\n        const cpuOk = projectedCpu <= this.limits.max_cpu_percent;\n        const memoryOk = projectedMemory <= this.limits.max_memory_mb;\n        const testsOk = projectedTests <= this.limits.max_concurrent_tests;\n        // Priority-based overrides\n        if (requirement.priority === 'critical') {\n            // Critical tasks can use emergency thresholds\n            const emergencyCpuOk = projectedCpu <= this.limits.emergency_threshold_cpu;\n            const emergencyMemoryOk = projectedMemory <= this.limits.emergency_threshold_memory;\n            return emergencyCpuOk && emergencyMemoryOk;\n        }\n        return cpuOk && memoryOk && testsOk;\n    }\n    /**\n   * Reserve resources for a specific task\n   */ async reserveResources(taskId, requirement) {\n        const isAvailable = await this.checkResourceAvailability(requirement);\n        if (!isAvailable) {\n            throw new Error(`Insufficient resources for task ${taskId}`);\n        }\n        this.reservedResources.set(taskId, requirement);\n        this.emit('resourcesReserved', {\n            taskId,\n            requirement\n        });\n    }\n    /**\n   * Release resources for a specific task\n   */ async releaseResources(taskId) {\n        const requirement = this.reservedResources.get(taskId);\n        if (requirement) {\n            this.reservedResources.delete(taskId);\n            this.emit('resourcesReleased', {\n                taskId,\n                requirement\n            });\n        }\n    }\n    /**\n   * Get current resource usage\n   */ getCurrentUsage() {\n        return {\n            ...this.currentUsage\n        };\n    }\n    /**\n   * Get resource limits\n   */ getLimits() {\n        return {\n            ...this.limits\n        };\n    }\n    /**\n   * Set resource limits\n   */ setLimits(newLimits) {\n        this.limits = {\n            ...this.limits,\n            ...newLimits\n        };\n        this.emit('limitsUpdated', this.limits);\n    }\n    /**\n   * Initialize the resource manager\n   */ async initialize() {\n        await this.updateCurrentUsage();\n        console.log('ResourceManager initialized');\n    }\n    /**\n   * Cleanup and shutdown the resource manager\n   */ async cleanup() {\n        this.destroy();\n        console.log('ResourceManager cleaned up');\n    }\n    /**\n   * Get reserved resources summary\n   */ getReservedResourcesSummary() {\n        let totalCpu = 0;\n        let totalMemory = 0;\n        let totalTests = 0;\n        for (const requirement of this.reservedResources.values()){\n            totalCpu += requirement.cpu_percent;\n            totalMemory += requirement.memory_mb;\n            totalTests += requirement.concurrent_tests;\n        }\n        return {\n            total_reserved_cpu: totalCpu,\n            total_reserved_memory: totalMemory,\n            total_reserved_tests: totalTests,\n            active_reservations: this.reservedResources.size\n        };\n    }\n    /**\n   * Check if system is under stress\n   */ isSystemUnderStress() {\n        const cpuStress = this.currentUsage.cpu_percent > this.limits.max_cpu_percent * 0.8;\n        const memoryStress = this.currentUsage.memory_mb > this.limits.max_memory_mb * 0.8;\n        const loadStress = this.currentUsage.load_average[0] > os.cpus().length * 0.8;\n        return cpuStress || memoryStress || loadStress;\n    }\n    /**\n   * Get optimal concurrency level based on current resources\n   */ getOptimalConcurrency() {\n        const cpuBasedConcurrency = Math.max(1, Math.floor((this.limits.max_cpu_percent - this.currentUsage.cpu_percent) / 15));\n        const memoryBasedConcurrency = Math.max(1, Math.floor((this.limits.max_memory_mb - this.currentUsage.memory_mb) / 100));\n        return Math.min(cpuBasedConcurrency, memoryBasedConcurrency, this.limits.max_concurrent_tests);\n    }\n    /**\n   * Update current resource usage\n   */ async updateCurrentUsage() {\n        return new Promise((resolve)=>{\n            // Use a simple CPU usage calculation\n            const memUsage = process.memoryUsage();\n            const loadAvg = os.loadavg();\n            // Estimate CPU usage from load average\n            const cpuCount = os.cpus().length;\n            const estimatedCpu = Math.min(100, loadAvg[0] / cpuCount * 100);\n            this.currentUsage = {\n                cpu_percent: estimatedCpu,\n                memory_mb: Math.floor(memUsage.rss / 1024 / 1024),\n                memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n                active_tests: this.reservedResources.size,\n                queue_length: 0,\n                load_average: loadAvg,\n                timestamp: new Date()\n            };\n            resolve();\n        });\n    }\n    /**\n   * Start monitoring system resources\n   */ startMonitoring() {\n        this.monitoringInterval = setInterval(async ()=>{\n            await this.updateCurrentUsage();\n            // Emit events for significant changes\n            if (this.isSystemUnderStress()) {\n                this.emit('systemStress', this.currentUsage);\n            }\n            // Check for resource violations\n            if (this.currentUsage.cpu_percent > this.limits.emergency_threshold_cpu) {\n                this.emit('emergencyThreshold', {\n                    type: 'cpu',\n                    usage: this.currentUsage\n                });\n            }\n            if (this.currentUsage.memory_mb > this.limits.emergency_threshold_memory) {\n                this.emit('emergencyThreshold', {\n                    type: 'memory',\n                    usage: this.currentUsage\n                });\n            }\n            this.emit('resourcesUpdated', this.currentUsage);\n        }, 5000); // Update every 5 seconds\n    }\n    /**\n   * Stop monitoring and cleanup\n   */ destroy() {\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n        }\n        this.removeAllListeners();\n    }\n    constructor(limits){\n        super(), _define_property(this, \"reservedResources\", new Map()), _define_property(this, \"currentUsage\", void 0), _define_property(this, \"limits\", void 0), _define_property(this, \"monitoringInterval\", void 0);\n        this.limits = {\n            max_cpu_percent: 80,\n            max_memory_mb: Math.floor(os.totalmem() / 1024 / 1024 * 0.8),\n            max_concurrent_tests: 10,\n            emergency_threshold_cpu: 90,\n            emergency_threshold_memory: Math.floor(os.totalmem() / 1024 / 1024 * 0.9),\n            ...limits\n        };\n        this.currentUsage = {\n            cpu_percent: 0,\n            memory_mb: 0,\n            memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n            active_tests: 0,\n            queue_length: 0,\n            load_average: os.loadavg(),\n            timestamp: new Date()\n        };\n        this.startMonitoring();\n    }\n}\n"],"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","ignoreList":[]}