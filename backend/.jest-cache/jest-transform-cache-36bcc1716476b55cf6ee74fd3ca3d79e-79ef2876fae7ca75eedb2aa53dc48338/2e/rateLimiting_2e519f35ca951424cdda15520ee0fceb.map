{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts"],"sourcesContent":["import rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\nimport { Request, Response, NextFunction } from 'express';\nimport { logSecurityEvent } from './structuredLogging';\n\n// Redis store for distributed rate limiting (optional)\n// import RedisStore from 'rate-limit-redis';\n// import Redis from 'ioredis';\n\n// const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');\n\n// Enhanced rate limiting with security monitoring\ninterface RateLimitConfig {\n  windowMs: number;\n  max: number;\n  message: object;\n  standardHeaders: boolean;\n  legacyHeaders: boolean;\n  skipSuccessfulRequests?: boolean;\n  handler: (req: Request, res: Response) => void;\n}\n\n// Rate limit violation tracking\nconst rateLimitViolations = new Map<string, { count: number; lastViolation: Date }>();\n\n// Enhanced rate limit handler with security logging\nconst createRateLimitHandler = (limitType: string, limit: number, windowMs: number) => {\n  return (req: Request, res: Response): void => {\n    const clientId = req.ip || 'unknown';\n    const now = new Date();\n    \n    // Track violations\n    const violations = rateLimitViolations.get(clientId) || { count: 0, lastViolation: new Date(0) };\n    violations.count += 1;\n    violations.lastViolation = now;\n    rateLimitViolations.set(clientId, violations);\n\n    // Log security event\n    logSecurityEvent('rate_limit', req, {\n      limitType,\n      limit,\n      windowMs,\n      violationCount: violations.count,\n      userAgent: req.headers['user-agent'],\n      path: req.path\n    });\n\n    // Enhanced response with security headers\n    res.status(429).json({\n      success: false,\n      error: 'Rate limit exceeded',\n      type: limitType,\n      limit,\n      windowMs,\n      retryAfter: Math.round(windowMs / 1000),\n      ip: req.ip,\n      path: req.path,\n      violationCount: violations.count,\n      timestamp: now.toISOString()\n    });\n  };\n};\n\n// General API rate limit\nexport const generalRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many requests from this IP, please try again later.',\n    retryAfter: 15 * 60 // seconds\n  },\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n  // store: new RedisStore({\n  //   sendCommand: (...args: string[]) => redis.call(...args),\n  // }),\n  handler: createRateLimitHandler('general', 100, 15 * 60 * 1000)\n});\n\n// Strict rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 login attempts per windowMs\n  message: {\n    success: false,\n    error: 'Too many authentication attempts, please try again later.',\n    retryAfter: 15 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true, // Don't count successful requests\n  handler: createRateLimitHandler('authentication', 5, 15 * 60 * 1000)\n});\n\n// API rate limit for high-frequency endpoints\nexport const apiRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 50, // Limit each IP to 50 requests per minute\n  message: {\n    success: false,\n    error: 'API rate limit exceeded',\n    retryAfter: 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Test execution rate limit (more permissive for testing)\nexport const testExecutionRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 20, // Limit each IP to 20 test executions per 5 minutes\n  message: {\n    success: false,\n    error: 'Test execution rate limit exceeded',\n    retryAfter: 5 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Slow down middleware for additional protection\nexport const speedLimiter: any = slowDown({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  delayAfter: 50, // Allow 50 requests per 15 minutes at full speed\n  delayMs: (used: number) => {\n    return (used - 50) * 500; // Add 500ms delay for each request after delayAfter\n  },\n  maxDelayMs: 10000, // Maximum delay of 10 seconds\n  skipFailedRequests: false,\n  skipSuccessfulRequests: false\n});\n\n// Heavy operation rate limit (for resource-intensive operations)\nexport const heavyOperationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 10, // Limit each IP to 10 heavy operations per hour\n  message: {\n    success: false,\n    error: 'Heavy operation rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// File upload rate limit\nexport const uploadRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 20, // Limit each IP to 20 uploads per hour\n  message: {\n    success: false,\n    error: 'Upload rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: createRateLimitHandler('upload', 20, 60 * 60 * 1000)\n});\n\n// Comprehensive endpoint-specific rate limiting\nexport const endpointRateLimits = {\n  // Critical security endpoints\n  '/api/auth/login': rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 3, // Very strict for login\n    handler: createRateLimitHandler('login', 3, 15 * 60 * 1000)\n  }),\n  \n  '/api/auth/register': rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 3, // Only 3 registrations per hour per IP\n    handler: createRateLimitHandler('register', 3, 60 * 60 * 1000)\n  }),\n\n  '/api/auth/refresh': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 10, // 10 token refreshes per 5 minutes\n    handler: createRateLimitHandler('refresh', 10, 5 * 60 * 1000)\n  }),\n\n  // API endpoints\n  '/api/prompt-cards': rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 30,\n    handler: createRateLimitHandler('prompt-cards', 30, 1 * 60 * 1000)\n  }),\n\n  '/api/test-execution': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 15,\n    handler: createRateLimitHandler('test-execution', 15, 5 * 60 * 1000)\n  }),\n\n  '/api/analytics': rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 25,\n    handler: createRateLimitHandler('analytics', 25, 1 * 60 * 1000)\n  }),\n\n  '/api/security': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 10,\n    handler: createRateLimitHandler('security', 10, 5 * 60 * 1000)\n  })\n};\n\n// Dynamic rate limiting based on user behavior\nexport const dynamicRateLimit = (req: Request, res: Response, next: NextFunction): void => {\n  const clientId = req.ip || 'unknown';\n  const violations = rateLimitViolations.get(clientId);\n\n  // If client has multiple violations, apply stricter limits\n  if (violations && violations.count > 5) {\n    const timeSinceLastViolation = Date.now() - violations.lastViolation.getTime();\n    \n    // If recent violations, block temporarily\n    if (timeSinceLastViolation < 60 * 60 * 1000) { // 1 hour\n      logSecurityEvent('suspicious_activity', req, {\n        reason: 'Multiple rate limit violations',\n        violationCount: violations.count,\n        action: 'temporary_block'\n      });\n\n      res.status(429).json({\n        success: false,\n        error: 'Temporary block due to suspicious activity',\n        retryAfter: 3600,\n        violationCount: violations.count\n      });\n      return;\n    }\n  }\n\n  next();\n};\n\n// Cleanup expired violation records\nsetInterval(() => {\n  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n  \n  for (const [clientId, violations] of rateLimitViolations.entries()) {\n    if (violations.lastViolation < oneHourAgo) {\n      rateLimitViolations.delete(clientId);\n    }\n  }\n}, 60 * 60 * 1000); // Clean up every hour\n\n// Rate limiting statistics\nexport const getRateLimitStats = (): {\n  totalViolations: number;\n  uniqueClients: number;\n  topViolators: Array<{ clientId: string; count: number; lastViolation: Date }>;\n} => {\n  const totalViolations = Array.from(rateLimitViolations.values())\n    .reduce((sum, violations) => sum + violations.count, 0);\n  \n  const uniqueClients = rateLimitViolations.size;\n  \n  const topViolators = Array.from(rateLimitViolations.entries())\n    .map(([clientId, violations]) => ({ clientId, ...violations }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n\n  return {\n    totalViolations,\n    uniqueClients,\n    topViolators\n  };\n};"],"names":["apiRateLimit","authRateLimit","dynamicRateLimit","endpointRateLimits","generalRateLimit","getRateLimitStats","heavyOperationRateLimit","speedLimiter","testExecutionRateLimit","uploadRateLimit","rateLimitViolations","Map","createRateLimitHandler","limitType","limit","windowMs","req","res","clientId","ip","now","Date","violations","get","count","lastViolation","set","logSecurityEvent","violationCount","userAgent","headers","path","status","json","success","error","type","retryAfter","Math","round","timestamp","toISOString","rateLimit","max","message","standardHeaders","legacyHeaders","handler","skipSuccessfulRequests","slowDown","delayAfter","delayMs","used","maxDelayMs","skipFailedRequests","next","timeSinceLastViolation","getTime","reason","action","setInterval","oneHourAgo","entries","delete","totalViolations","Array","from","values","reduce","sum","uniqueClients","size","topViolators","map","sort","a","b","slice"],"mappings":"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"}