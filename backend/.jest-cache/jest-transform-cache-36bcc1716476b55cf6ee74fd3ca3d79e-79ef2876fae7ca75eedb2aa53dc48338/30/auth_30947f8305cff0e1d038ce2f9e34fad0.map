{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/auth.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { \n  generateTokens, \n  hashPassword, \n  verifyPassword, \n  refreshToken,\n  logout,\n  verifyToken,\n  requireRole\n} from '../middleware/auth';\nimport { authRateLimit } from '../middleware/rateLimiting';\nimport { sanitizeRequestBody, handleValidationErrors } from '../middleware/validation';\nimport { body } from 'express-validator';\nimport { csrfProtection } from '../middleware/security';\n\nconst router = Router();\n\n// Apply rate limiting to all auth routes\nrouter.use(authRateLimit);\n\n// Apply CSRF protection to state-changing operations\nrouter.use(['POST', 'PUT', 'DELETE'], csrfProtection);\n\n// Apply input sanitization\nrouter.use(sanitizeRequestBody);\n\n// Mock user database (replace with real database in production)\ninterface User {\n  id: string;\n  email: string;\n  password: string;\n  role: string;\n  permissions: string[];\n  createdAt: Date;\n  lastLogin?: Date;\n  isActive: boolean;\n}\n\nconst users: User[] = [\n  {\n    id: '1',\n    email: 'admin@example.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n    role: 'admin',\n    permissions: ['read', 'write', 'delete', 'admin'],\n    createdAt: new Date(),\n    isActive: true\n  },\n  {\n    id: '2',\n    email: 'user@example.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n    role: 'user',\n    permissions: ['read', 'write'],\n    createdAt: new Date(),\n    isActive: true\n  }\n];\n\n// Helper functions\nconst findUserByEmail = (email: string): User | undefined => {\n  return users.find(user => user.email.toLowerCase() === email.toLowerCase() && user.isActive);\n};\n\nconst findUserById = (id: string): User | undefined => {\n  return users.find(user => user.id === id && user.isActive);\n};\n\n// Validation schemas\nconst loginValidation = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .isLength({ max: 255 })\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6, max: 128 })\n    .withMessage('Password must be between 6 and 128 characters'),\n  handleValidationErrors\n];\n\nconst registerValidation = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .isLength({ max: 255 })\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 8, max: 128 })\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must contain at least 8 characters with uppercase, lowercase, number, and special character'),\n  body('confirmPassword')\n    .custom((value, { req }) => {\n      if (value !== req.body.password) {\n        throw new Error('Password confirmation does not match password');\n      }\n      return true;\n    }),\n  handleValidationErrors\n];\n\n// POST /auth/login\nrouter.post('/login', loginValidation, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { email, password } = req.body;\n    \n    const user = findUserByEmail(email);\n    if (!user) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n      return;\n    }\n    \n    const isValidPassword = await verifyPassword(password, user.password);\n    if (!isValidPassword) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n      return;\n    }\n    \n    user.lastLogin = new Date();\n    \n    const tokens = generateTokens({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        user: {\n          id: user.id,\n          email: user.email,\n          role: user.role,\n          permissions: user.permissions,\n          lastLogin: user.lastLogin\n        },\n        tokens\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Login failed',\n      code: 'LOGIN_ERROR'\n    });\n  }\n});\n\n// POST /auth/register\nrouter.post('/register', registerValidation, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { email, password } = req.body;\n    \n    const existingUser = findUserByEmail(email);\n    if (existingUser) {\n      res.status(409).json({\n        success: false,\n        error: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n      return;\n    }\n    \n    const hashedPassword = await hashPassword(password);\n    \n    const newUser: User = {\n      id: String(users.length + 1),\n      email,\n      password: hashedPassword,\n      role: 'user',\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      isActive: true\n    };\n    \n    users.push(newUser);\n    \n    const tokens = generateTokens({\n      id: newUser.id,\n      email: newUser.email,\n      role: newUser.role,\n      permissions: newUser.permissions\n    });\n    \n    res.status(201).json({\n      success: true,\n      data: {\n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          role: newUser.role,\n          permissions: newUser.permissions,\n          createdAt: newUser.createdAt\n        },\n        tokens\n      }\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Registration failed',\n      code: 'REGISTRATION_ERROR'\n    });\n  }\n});\n\n// POST /auth/refresh\nrouter.post('/refresh', refreshToken);\n\n// POST /auth/logout\nrouter.post('/logout', logout);\n\n// GET /auth/me\nrouter.get('/me', verifyToken, (req: Request, res: Response): void => {\n  const user = findUserById(req.user!.id);\n  \n  if (!user) {\n    res.status(404).json({\n      success: false,\n      error: 'User not found',\n      code: 'USER_NOT_FOUND'\n    });\n    return;\n  }\n  \n  res.json({\n    success: true,\n    data: {\n      user: {\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        permissions: user.permissions,\n        createdAt: user.createdAt,\n        lastLogin: user.lastLogin\n      }\n    }\n  });\n});\n\n// GET /auth/users - Admin only\nrouter.get('/users', verifyToken, requireRole(['admin']), (req: Request, res: Response): void => {\n  const userList = users\n    .filter(user => user.isActive)\n    .map(user => ({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions,\n      createdAt: user.createdAt,\n      lastLogin: user.lastLogin\n    }));\n  \n  res.json({\n    success: true,\n    data: { users: userList }\n  });\n});\n\nexport { router as authRoutes };"],"names":["authRoutes","router","Router","use","authRateLimit","csrfProtection","sanitizeRequestBody","users","id","email","password","role","permissions","createdAt","Date","isActive","findUserByEmail","find","user","toLowerCase","findUserById","loginValidation","body","isEmail","normalizeEmail","isLength","max","withMessage","min","handleValidationErrors","registerValidation","matches","custom","value","req","Error","post","res","status","json","success","error","code","isValidPassword","verifyPassword","lastLogin","tokens","generateTokens","data","console","existingUser","hashedPassword","hashPassword","newUser","String","length","push","refreshToken","logout","get","verifyToken","requireRole","userList","filter","map"],"mappings":"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"}