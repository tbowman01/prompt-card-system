{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/services/SamplePromptService.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { SamplePromptService } from '../../services/SamplePromptService';\nimport { db } from '../../database/connection';\n\n// Mock the database\njest.mock('../../database/connection', () => ({\n  db: {\n    prepare: jest.fn(),\n    exec: jest.fn()\n  }\n}));\n\ndescribe('SamplePromptService', () => {\n  let service: SamplePromptService;\n  let mockDb: jest.Mocked<typeof db>;\n\n  beforeEach(() => {\n    service = SamplePromptService.getInstance();\n    mockDb = db as jest.Mocked<typeof db>;\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getSamplePrompts', () => {\n    it('should return all sample prompts', () => {\n      const samples = service.getSamplePrompts();\n      \n      expect(samples).toHaveLength(6);\n      expect(samples[0]).toHaveProperty('title', 'Creative Story Generator');\n      expect(samples[1]).toHaveProperty('title', 'Technical Documentation Assistant');\n      expect(samples[2]).toHaveProperty('title', 'Data Analysis Query Builder');\n      expect(samples[3]).toHaveProperty('title', 'Problem-Solving Framework');\n      expect(samples[4]).toHaveProperty('title', 'Code Generation Assistant');\n      expect(samples[5]).toHaveProperty('title', 'Business Strategy Consultant');\n    });\n\n    it('should return prompts with all required fields', () => {\n      const samples = service.getSamplePrompts();\n      \n      samples.forEach(sample => {\n        expect(sample).toHaveProperty('title');\n        expect(sample).toHaveProperty('description');\n        expect(sample).toHaveProperty('prompt_template');\n        expect(sample).toHaveProperty('variables');\n        expect(sample).toHaveProperty('category');\n        expect(sample).toHaveProperty('tags');\n        \n        expect(typeof sample.title).toBe('string');\n        expect(typeof sample.description).toBe('string');\n        expect(typeof sample.prompt_template).toBe('string');\n        expect(Array.isArray(sample.variables)).toBe(true);\n        expect(typeof sample.category).toBe('string');\n        expect(Array.isArray(sample.tags)).toBe(true);\n      });\n    });\n  });\n\n  describe('getSamplePromptsByCategory', () => {\n    it('should return prompts filtered by category', () => {\n      const creativePrompts = service.getSamplePromptsByCategory('creative');\n      const technicalPrompts = service.getSamplePromptsByCategory('technical');\n      \n      expect(creativePrompts).toHaveLength(1);\n      expect(creativePrompts[0].category).toBe('creative');\n      \n      expect(technicalPrompts).toHaveLength(1);\n      expect(technicalPrompts[0].category).toBe('technical');\n    });\n\n    it('should return empty array for non-existent category', () => {\n      const nonExistentPrompts = service.getSamplePromptsByCategory('non-existent');\n      expect(nonExistentPrompts).toHaveLength(0);\n    });\n  });\n\n  describe('getCategories', () => {\n    it('should return all unique categories', () => {\n      const categories = service.getCategories();\n      \n      expect(categories).toContain('creative');\n      expect(categories).toContain('technical');\n      expect(categories).toContain('analytics');\n      expect(categories).toContain('problem-solving');\n      expect(categories).toContain('development');\n      expect(categories).toContain('business');\n      \n      // Should not contain duplicates\n      expect(new Set(categories).size).toBe(categories.length);\n    });\n  });\n\n  describe('validateSamplePrompt', () => {\n    it('should validate a correct sample prompt', () => {\n      const validSample = {\n        title: 'Test Prompt',\n        description: 'A test prompt for validation',\n        prompt_template: 'This is a test prompt with {{variable1}} and {{variable2}}',\n        variables: ['variable1', 'variable2'],\n        category: 'test',\n        tags: ['test', 'validation']\n      };\n\n      const result = service.validateSamplePrompt(validSample);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields', () => {\n      const invalidSample = {\n        title: '',\n        description: '',\n        prompt_template: '',\n        variables: [],\n        category: 'test',\n        tags: []\n      };\n\n      const result = service.validateSamplePrompt(invalidSample);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Title is required');\n      expect(result.errors).toContain('Prompt template is required');\n      expect(result.errors).toContain('Description is required');\n    });\n\n    it('should detect unused variables', () => {\n      const sampleWithUnusedVars = {\n        title: 'Test Prompt',\n        description: 'A test prompt',\n        prompt_template: 'This prompt uses {{variable1}}',\n        variables: ['variable1', 'unused_variable'],\n        category: 'test',\n        tags: ['test']\n      };\n\n      const result = service.validateSamplePrompt(sampleWithUnusedVars);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('unused_variable'))).toBe(true);\n    });\n\n    it('should detect undeclared variables', () => {\n      const sampleWithUndeclaredVars = {\n        title: 'Test Prompt',\n        description: 'A test prompt',\n        prompt_template: 'This prompt uses {{variable1}} and {{undeclared_variable}}',\n        variables: ['variable1'],\n        category: 'test',\n        tags: ['test']\n      };\n\n      const result = service.validateSamplePrompt(sampleWithUndeclaredVars);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.includes('undeclared_variable'))).toBe(true);\n    });\n  });\n\n  describe('getSamplePromptStats', () => {\n    it('should return correct statistics', () => {\n      const stats = service.getSamplePromptStats();\n      \n      expect(stats.totalSamples).toBe(6);\n      expect(stats.categories).toBe(6);\n      expect(stats.categoriesBreakdown).toHaveLength(6);\n      expect(typeof stats.averageVariables).toBe('number');\n      expect(typeof stats.totalVariables).toBe('number');\n      \n      // Check that breakdown adds up to total\n      const breakdownTotal = stats.categoriesBreakdown.reduce((sum, cat) => sum + cat.count, 0);\n      expect(breakdownTotal).toBe(stats.totalSamples);\n    });\n  });\n\n  describe('getSamplePromptPreview', () => {\n    it('should return correct sample prompt by title', () => {\n      const preview = service.getSamplePromptPreview('Creative Story Generator');\n      \n      expect(preview).not.toBeNull();\n      expect(preview?.title).toBe('Creative Story Generator');\n      expect(preview?.category).toBe('creative');\n    });\n\n    it('should return null for non-existent prompt', () => {\n      const preview = service.getSamplePromptPreview('Non-existent Prompt');\n      expect(preview).toBeNull();\n    });\n  });\n\n  describe('createPromptFromSample', () => {\n    it('should create a new prompt card from sample', async () => {\n      const mockRun = jest.fn().mockReturnValue({ lastInsertRowid: 1 });\n      const mockGet = jest.fn()\n        .mockReturnValueOnce(null) // First call for existing check\n        .mockReturnValueOnce({ // Second call for new card retrieval\n          id: 1,\n          title: 'Creative Story Generator',\n          description: 'Generate engaging creative stories...',\n          prompt_template: 'Write a {{genre}} story...',\n          variables: '[\"genre\", \"setting\", \"character_name\"]',\n          created_at: '2024-01-01T00:00:00.000Z',\n          updated_at: '2024-01-01T00:00:00.000Z'\n        });\n\n      mockDb.prepare.mockReturnValue({\n        get: mockGet,\n        run: mockRun\n      });\n\n      const result = await service.createPromptFromSample('Creative Story Generator');\n      \n      expect(result).not.toBeNull();\n      expect(result?.title).toBe('Creative Story Generator');\n      expect(Array.isArray(result?.variables)).toBe(true);\n      expect(mockRun).toHaveBeenCalled();\n    });\n\n    it('should return existing prompt card if already exists', async () => {\n      const existingCard = {\n        id: 1,\n        title: 'Creative Story Generator',\n        description: 'Generate engaging creative stories...',\n        prompt_template: 'Write a {{genre}} story...',\n        variables: '[\"genre\", \"setting\", \"character_name\"]',\n        created_at: '2024-01-01T00:00:00.000Z',\n        updated_at: '2024-01-01T00:00:00.000Z'\n      };\n\n      const mockGet = jest.fn().mockReturnValue(existingCard);\n      const mockRun = jest.fn();\n\n      mockDb.prepare.mockReturnValue({\n        get: mockGet,\n        run: mockRun\n      });\n\n      const result = await service.createPromptFromSample('Creative Story Generator');\n      \n      expect(result).not.toBeNull();\n      expect(result?.id).toBe(1);\n      expect(mockRun).not.toHaveBeenCalled(); // Should not create new card\n    });\n\n    it('should throw error for non-existent sample', async () => {\n      await expect(\n        service.createPromptFromSample('Non-existent Sample')\n      ).rejects.toThrow('Sample prompt \\'Non-existent Sample\\' not found');\n    });\n  });\n});"],"names":["jest","mock","db","prepare","fn","exec","describe","service","mockDb","beforeEach","SamplePromptService","getInstance","clearAllMocks","afterEach","it","samples","getSamplePrompts","expect","toHaveLength","toHaveProperty","forEach","sample","title","toBe","description","prompt_template","Array","isArray","variables","category","tags","creativePrompts","getSamplePromptsByCategory","technicalPrompts","nonExistentPrompts","categories","getCategories","toContain","Set","size","length","validSample","result","validateSamplePrompt","isValid","errors","invalidSample","sampleWithUnusedVars","some","e","includes","sampleWithUndeclaredVars","stats","getSamplePromptStats","totalSamples","categoriesBreakdown","averageVariables","totalVariables","breakdownTotal","reduce","sum","cat","count","preview","getSamplePromptPreview","not","toBeNull","mockRun","mockReturnValue","lastInsertRowid","mockGet","mockReturnValueOnce","id","created_at","updated_at","get","run","createPromptFromSample","toHaveBeenCalled","existingCard","rejects","toThrow"],"mappings":"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"}