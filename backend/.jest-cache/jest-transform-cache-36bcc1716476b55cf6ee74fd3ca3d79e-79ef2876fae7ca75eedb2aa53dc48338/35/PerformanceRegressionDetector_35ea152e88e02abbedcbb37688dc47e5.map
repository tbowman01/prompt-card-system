{"version":3,"names":["cov_2buveocj45","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","EventEmitter","db","alertingSystem","AlertType","LRUCache","tf","StatisticalAnalyzer","tTest","baseline","current","alpha","n1","length","n2","significant","pValue","tStatistic","degreesOfFreedom","mean1","reduce","sum","val","mean2","var1","Math","pow","var2","pooledVar","standardError","sqrt","calculatePValue","abs","detectChangePoints","values","threshold","mean","std","cusum","changePoints","i","max","magnitude","push","timestamp","confidence","min","changeType","classifyChange","metrics","mannKendallTrend","n","trend","slope","significance","j","sign","variance","z","slopes","sort","a","floor","detectSeasonality","detected","autocorrelations","maxLag","lag","correlation","peaks","strongestPeak","peak","period","undefined","amplitude","tStat","df","t","normalCDF","p","x","erf","a1","a2","a3","a4","a5","y","exp","index","before","slice","after","meanBefore","meanAfter","varBefore","varAfter","levelChange","varianceChange","PerformanceRegressionDetector","startMonitoring","intervalMinutes","isMonitoring","monitoringInterval","setInterval","performRegressionCheck","catch","error","console","emit","log","stopMonitoring","clearInterval","analyzeResults","scenarioId","results","baselines","get","alerts","currentMetrics","extractMetrics","metricsToAnalyze","responseTime","p95","throughput","errorRate","metric","thresholds","regression","detectRegression","trendAnalysis","analyzeTrends","id","Date","now","severity","degradation","additionalContext","correlatedMetrics","recommendations","neuralModel","anomalyScore","detectAnomalies","alert","sendAlert","setBaseline","options","version","environment","process","env","NODE_ENV","sampleSize","summary","totalRequests","set","saveBaseline","addTrainingData","setThreshold","getBaselines","Array","from","getRegressionAlerts","query","params","start","toISOString","end","stmt","prepare","rows","all","map","row","JSON","parse","alert_data","generateRegressionReport","scenarioAlerts","filter","trends","totalAlerts","criticalAlerts","mostAffectedMetrics","getMostAffectedMetrics","overallTrend","generateRecommendations","trainNeuralModel","trainingData","features","d","labels","label","xs","tensor2d","ys","tensor1d","model","sequential","layers","dense","inputShape","units","activation","compile","optimizer","loss","fit","epochs","batchSize","validationSplit","verbose","dispose","recentMetrics","getRecentMetrics","mockResults","scenario","timeline","errors","thresholdResults","metricKey","includes","isRegression","warning","critical","split","getMetricRecommendations","historicalData","getHistoricalData","seasonality","lastValue","forecast","nextValue","upperBound","lowerBound","metricsToFeatures","input","reconstruction","predict","losses","meanSquaredError","errorValue","data","run","stringify","checkAndCreateAlert","type","PERFORMANCE","service","message","toFixed","details","avg","p50","p99","availability","resourceUsage","cpu","memory","io","setupDefaultThresholds","method","minSampleSize","initializeNeuralModel","loadBaselinesFromDatabase","baseline_data","Map","metricCounts","forEach","count","entries","Set","some","add","cleanup","cache","clear","removeAllListeners","constructor","ttl","performanceRegressionDetector"],"sources":["PerformanceRegressionDetector.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { EventEmitter } from 'events';\nimport { db } from '../../database/connection';\nimport { alertingSystem, AlertType } from '../health/AlertingSystem';\nimport { LRUCache } from 'lru-cache';\nimport * as tf from '@tensorflow/tfjs-node';\nclass StatisticalAnalyzer {\n    /**\n   * Calculate statistical significance using Student's t-test\n   */ static tTest(baseline, current, alpha = 0.05) {\n        const n1 = baseline.length;\n        const n2 = current.length;\n        if (n1 < 2 || n2 < 2) {\n            return {\n                significant: false,\n                pValue: 1,\n                tStatistic: 0,\n                degreesOfFreedom: 0\n            };\n        }\n        const mean1 = baseline.reduce((sum, val)=>sum + val, 0) / n1;\n        const mean2 = current.reduce((sum, val)=>sum + val, 0) / n2;\n        const var1 = baseline.reduce((sum, val)=>sum + Math.pow(val - mean1, 2), 0) / (n1 - 1);\n        const var2 = current.reduce((sum, val)=>sum + Math.pow(val - mean2, 2), 0) / (n2 - 1);\n        const pooledVar = ((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2);\n        const standardError = Math.sqrt(pooledVar * (1 / n1 + 1 / n2));\n        const tStatistic = (mean2 - mean1) / standardError;\n        const degreesOfFreedom = n1 + n2 - 2;\n        // Simplified p-value calculation (in production, use proper statistical library)\n        const pValue = this.calculatePValue(Math.abs(tStatistic), degreesOfFreedom);\n        return {\n            significant: pValue < alpha,\n            pValue,\n            tStatistic,\n            degreesOfFreedom\n        };\n    }\n    /**\n   * Detect change points in time series using CUSUM\n   */ static detectChangePoints(values, threshold = 5) {\n        if (values.length < 10) return [];\n        const mean = values.reduce((sum, val)=>sum + val, 0) / values.length;\n        const std = Math.sqrt(values.reduce((sum, val)=>sum + Math.pow(val - mean, 2), 0) / values.length);\n        let cusum = 0;\n        const changePoints = [];\n        for(let i = 1; i < values.length; i++){\n            cusum = Math.max(0, cusum + (values[i] - mean) / std - 0.5);\n            if (cusum > threshold) {\n                const magnitude = Math.abs(values[i] - mean) / std;\n                changePoints.push({\n                    timestamp: i,\n                    confidence: Math.min(cusum / threshold, 1),\n                    changeType: this.classifyChange(values, i),\n                    magnitude,\n                    metrics: [\n                        'responseTime'\n                    ] // Simplified\n                });\n                cusum = 0; // Reset after detection\n            }\n        }\n        return changePoints;\n    }\n    /**\n   * Calculate Mann-Kendall trend test\n   */ static mannKendallTrend(values) {\n        const n = values.length;\n        if (n < 4) {\n            return {\n                trend: 'stable',\n                slope: 0,\n                significance: 0\n            };\n        }\n        let s = 0;\n        for(let i = 0; i < n - 1; i++){\n            for(let j = i + 1; j < n; j++){\n                s += Math.sign(values[j] - values[i]);\n            }\n        }\n        const variance = n * (n - 1) * (2 * n + 5) / 18;\n        const z = s / Math.sqrt(variance);\n        // Calculate Theil-Sen slope estimator\n        const slopes = [];\n        for(let i = 0; i < n - 1; i++){\n            for(let j = i + 1; j < n; j++){\n                slopes.push((values[j] - values[i]) / (j - i));\n            }\n        }\n        slopes.sort((a, b)=>a - b);\n        const slope = slopes[Math.floor(slopes.length / 2)];\n        const significance = Math.abs(z);\n        let trend = 'stable';\n        if (significance > 1.96) {\n            trend = slope > 0 ? 'degrading' : 'improving';\n        }\n        return {\n            trend,\n            slope,\n            significance\n        };\n    }\n    /**\n   * Detect seasonality using FFT\n   */ static detectSeasonality(values) {\n        if (values.length < 24) {\n            return {\n                detected: false,\n                confidence: 0\n            };\n        }\n        // Simplified seasonality detection\n        // In production, use proper FFT implementation\n        const autocorrelations = [];\n        const maxLag = Math.min(values.length / 3, 48);\n        for(let lag = 1; lag <= maxLag; lag++){\n            let correlation = 0;\n            for(let i = lag; i < values.length; i++){\n                correlation += values[i] * values[i - lag];\n            }\n            autocorrelations.push(correlation / (values.length - lag));\n        }\n        // Find peaks in autocorrelation\n        const peaks = [];\n        for(let i = 1; i < autocorrelations.length - 1; i++){\n            if (autocorrelations[i] > autocorrelations[i - 1] && autocorrelations[i] > autocorrelations[i + 1]) {\n                peaks.push({\n                    lag: i + 1,\n                    value: autocorrelations[i]\n                });\n            }\n        }\n        if (peaks.length === 0) {\n            return {\n                detected: false,\n                confidence: 0\n            };\n        }\n        const strongestPeak = peaks.reduce((max, peak)=>peak.value > max.value ? peak : max);\n        const threshold = Math.max(...autocorrelations) * 0.3;\n        const detected = strongestPeak.value > threshold;\n        return {\n            detected,\n            period: detected ? strongestPeak.lag : undefined,\n            amplitude: detected ? strongestPeak.value : undefined,\n            confidence: detected ? strongestPeak.value / Math.max(...autocorrelations) : 0\n        };\n    }\n    static calculatePValue(tStat, df) {\n        // Simplified p-value calculation\n        // In production, use proper statistical library\n        const t = Math.abs(tStat);\n        if (df >= 30) {\n            // Approximate with normal distribution for large df\n            return 2 * (1 - this.normalCDF(t));\n        }\n        // Simplified approximation for small df\n        const p = 1 / (1 + t * t / df);\n        return 2 * Math.pow(p, df / 2);\n    }\n    static normalCDF(x) {\n        // Approximation of normal CDF\n        return 0.5 * (1 + this.erf(x / Math.sqrt(2)));\n    }\n    static erf(x) {\n        // Approximation of error function\n        const a1 = 0.254829592;\n        const a2 = -0.284496736;\n        const a3 = 1.421413741;\n        const a4 = -1.453152027;\n        const a5 = 1.061405429;\n        const p = 0.3275911;\n        const sign = x >= 0 ? 1 : -1;\n        x = Math.abs(x);\n        const t = 1.0 / (1.0 + p * x);\n        const y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n        return sign * y;\n    }\n    static classifyChange(values, index) {\n        const before = values.slice(Math.max(0, index - 5), index);\n        const after = values.slice(index, Math.min(values.length, index + 5));\n        if (before.length < 2 || after.length < 2) return 'level';\n        const meanBefore = before.reduce((sum, val)=>sum + val, 0) / before.length;\n        const meanAfter = after.reduce((sum, val)=>sum + val, 0) / after.length;\n        const varBefore = before.reduce((sum, val)=>sum + Math.pow(val - meanBefore, 2), 0) / before.length;\n        const varAfter = after.reduce((sum, val)=>sum + Math.pow(val - meanAfter, 2), 0) / after.length;\n        const levelChange = Math.abs(meanAfter - meanBefore);\n        const varianceChange = Math.abs(varAfter - varBefore);\n        if (varianceChange > levelChange * 2) return 'variance';\n        return 'level';\n    }\n}\nexport class PerformanceRegressionDetector extends EventEmitter {\n    /**\n   * Start automated regression monitoring\n   */ startMonitoring(intervalMinutes = 15) {\n        if (this.isMonitoring) return;\n        this.isMonitoring = true;\n        this.monitoringInterval = setInterval(()=>{\n            this.performRegressionCheck().catch((error)=>{\n                console.error('Regression monitoring failed:', error);\n                this.emit('monitoringError', error);\n            });\n        }, intervalMinutes * 60 * 1000);\n        console.log(`Performance regression monitoring started (${intervalMinutes}min interval)`);\n        this.emit('monitoringStarted', {\n            intervalMinutes\n        });\n    }\n    /**\n   * Stop automated monitoring\n   */ stopMonitoring() {\n        if (!this.isMonitoring) return;\n        this.isMonitoring = false;\n        if (this.monitoringInterval) {\n            clearInterval(this.monitoringInterval);\n            this.monitoringInterval = null;\n        }\n        console.log('Performance regression monitoring stopped');\n        this.emit('monitoringStopped');\n    }\n    /**\n   * Analyze load test results for regressions\n   */ async analyzeResults(scenarioId, results) {\n        const baseline = this.baselines.get(scenarioId);\n        if (!baseline) {\n            console.log(`No baseline found for scenario: ${scenarioId}`);\n            return [];\n        }\n        const alerts = [];\n        const currentMetrics = this.extractMetrics(results);\n        // Analyze each metric\n        const metricsToAnalyze = [\n            {\n                key: 'responseTime.p95',\n                current: currentMetrics.responseTime.p95,\n                baseline: baseline.metrics.responseTime.p95\n            },\n            {\n                key: 'responseTime.mean',\n                current: currentMetrics.responseTime.mean,\n                baseline: baseline.metrics.responseTime.mean\n            },\n            {\n                key: 'throughput.mean',\n                current: currentMetrics.throughput.mean,\n                baseline: baseline.metrics.throughput.mean\n            },\n            {\n                key: 'errorRate',\n                current: currentMetrics.errorRate,\n                baseline: baseline.metrics.errorRate\n            }\n        ];\n        for (const metric of metricsToAnalyze){\n            const threshold = this.thresholds.get(metric.key);\n            if (!threshold) continue;\n            const regression = await this.detectRegression(metric.key, metric.current, metric.baseline, threshold);\n            if (regression) {\n                alerts.push(regression);\n            }\n        }\n        // Perform trend analysis\n        const trendAnalysis = await this.analyzeTrends(scenarioId);\n        if (trendAnalysis && trendAnalysis.trend === 'degrading') {\n            alerts.push({\n                id: `trend-${scenarioId}-${Date.now()}`,\n                scenarioId,\n                metric: 'trend',\n                severity: 'medium',\n                degradation: Math.abs(trendAnalysis.slope) * 100,\n                baseline: 0,\n                current: trendAnalysis.slope,\n                threshold: 0.1,\n                confidence: trendAnalysis.correlation,\n                timestamp: new Date(),\n                additionalContext: {\n                    trend: trendAnalysis.trend,\n                    changePoints: [],\n                    correlatedMetrics: []\n                },\n                recommendations: [\n                    'Performance trend is degrading over time',\n                    'Consider investigating recent changes or increased load',\n                    'Monitor system resources for potential bottlenecks'\n                ]\n            });\n        }\n        // Use neural model for anomaly detection\n        if (this.neuralModel) {\n            const anomalyScore = await this.detectAnomalies(currentMetrics);\n            if (anomalyScore > 0.8) {\n                alerts.push({\n                    id: `anomaly-${scenarioId}-${Date.now()}`,\n                    scenarioId,\n                    metric: 'anomaly',\n                    severity: 'high',\n                    degradation: anomalyScore * 100,\n                    baseline: 0.5,\n                    current: anomalyScore,\n                    threshold: 0.8,\n                    confidence: anomalyScore,\n                    timestamp: new Date(),\n                    additionalContext: {\n                        trend: 'stable',\n                        changePoints: [],\n                        correlatedMetrics: []\n                    },\n                    recommendations: [\n                        'Neural network detected performance anomaly',\n                        'Current metrics deviate significantly from learned patterns',\n                        'Investigate system changes or unusual load patterns'\n                    ]\n                });\n            }\n        }\n        // Send alerts\n        for (const alert of alerts){\n            await this.sendAlert(alert);\n        }\n        this.emit('regressionAnalysisComplete', {\n            scenarioId,\n            alerts,\n            currentMetrics,\n            baseline\n        });\n        return alerts;\n    }\n    /**\n   * Set or update baseline for a scenario\n   */ async setBaseline(scenarioId, results, options) {\n        const metrics = this.extractMetrics(results);\n        const baseline = {\n            id: `${scenarioId}-${Date.now()}`,\n            scenarioId,\n            metrics,\n            timestamp: new Date(),\n            version: options?.version,\n            environment: options?.environment || process.env.NODE_ENV || 'unknown',\n            sampleSize: results.summary.totalRequests,\n            confidence: options?.confidence || 0.95\n        };\n        this.baselines.set(scenarioId, baseline);\n        await this.saveBaseline(baseline);\n        // Add to training data for neural model\n        this.addTrainingData(metrics);\n        this.emit('baselineUpdated', baseline);\n        console.log(`Baseline updated for scenario: ${scenarioId}`);\n    }\n    /**\n   * Configure regression thresholds\n   */ setThreshold(metric, threshold) {\n        this.thresholds.set(metric, threshold);\n        this.emit('thresholdUpdated', {\n            metric,\n            threshold\n        });\n    }\n    /**\n   * Get all baselines\n   */ getBaselines() {\n        return Array.from(this.baselines.values());\n    }\n    /**\n   * Get regression alerts for a time period\n   */ async getRegressionAlerts(period) {\n        try {\n            let query = 'SELECT * FROM regression_alerts ORDER BY timestamp DESC';\n            const params = [];\n            if (period) {\n                query = 'SELECT * FROM regression_alerts WHERE timestamp BETWEEN ? AND ? ORDER BY timestamp DESC';\n                params.push(period.start.toISOString(), period.end.toISOString());\n            }\n            const stmt = db.prepare(query);\n            const rows = stmt.all(...params);\n            return rows.map((row)=>({\n                    ...JSON.parse(row.alert_data),\n                    timestamp: new Date(row.timestamp)\n                }));\n        } catch (error) {\n            console.error('Failed to fetch regression alerts:', error);\n            return [];\n        }\n    }\n    /**\n   * Generate regression report\n   */ async generateRegressionReport(scenarioId, period) {\n        const alerts = await this.getRegressionAlerts(period);\n        const scenarioAlerts = alerts.filter((a)=>a.scenarioId === scenarioId);\n        const trends = await this.analyzeTrends(scenarioId, period);\n        const summary = {\n            totalAlerts: scenarioAlerts.length,\n            criticalAlerts: scenarioAlerts.filter((a)=>a.severity === 'critical').length,\n            mostAffectedMetrics: this.getMostAffectedMetrics(scenarioAlerts),\n            overallTrend: trends?.trend || 'stable'\n        };\n        const recommendations = this.generateRecommendations(scenarioAlerts, trends);\n        return {\n            summary,\n            alerts: scenarioAlerts,\n            trends: trends ? [\n                trends\n            ] : [],\n            recommendations\n        };\n    }\n    /**\n   * Train neural model for anomaly detection\n   */ async trainNeuralModel() {\n        if (this.trainingData.length < 100) {\n            console.log('Insufficient training data for neural model');\n            return;\n        }\n        console.log('Training neural model for anomaly detection...');\n        const features = this.trainingData.map((d)=>d.features);\n        const labels = this.trainingData.map((d)=>d.label);\n        const xs = tf.tensor2d(features);\n        const ys = tf.tensor1d(labels);\n        // Create autoencoder for anomaly detection\n        const model = tf.sequential({\n            layers: [\n                tf.layers.dense({\n                    inputShape: [\n                        features[0].length\n                    ],\n                    units: 64,\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: 32,\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: 16,\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: 32,\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: 64,\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: features[0].length,\n                    activation: 'linear'\n                })\n            ]\n        });\n        model.compile({\n            optimizer: 'adam',\n            loss: 'meanSquaredError'\n        });\n        await model.fit(xs, xs, {\n            epochs: 100,\n            batchSize: 32,\n            validationSplit: 0.2,\n            verbose: 0\n        });\n        this.neuralModel = model;\n        console.log('Neural model training completed');\n        xs.dispose();\n        ys.dispose();\n    }\n    /**\n   * Private methods\n   */ async performRegressionCheck() {\n        console.log('Performing automated regression check...');\n        // Get recent performance data\n        const recentMetrics = await this.getRecentMetrics();\n        for (const [scenarioId, baseline] of this.baselines){\n            const currentMetrics = recentMetrics.get(scenarioId);\n            if (!currentMetrics) continue;\n            // Mock LoadTestResults for compatibility\n            const mockResults = {\n                scenario: {\n                    id: scenarioId\n                },\n                summary: {\n                    totalRequests: 100\n                },\n                metrics: {\n                    responseTime: currentMetrics.responseTime,\n                    throughput: currentMetrics.throughput,\n                    errorRate: currentMetrics.errorRate\n                },\n                timeline: [],\n                errors: [],\n                thresholdResults: [],\n                recommendations: []\n            };\n            await this.analyzeResults(scenarioId, mockResults);\n        }\n    }\n    async detectRegression(metricKey, current, baseline, threshold) {\n        let degradation = 0;\n        let severity = 'low';\n        // Calculate degradation based on metric type\n        if (metricKey.includes('responseTime') || metricKey.includes('errorRate')) {\n            degradation = (current - baseline) / baseline * 100;\n        } else if (metricKey.includes('throughput')) {\n            degradation = (baseline - current) / baseline * 100;\n        }\n        // Determine if regression occurred\n        const isRegression = Math.abs(degradation) > threshold.warning;\n        if (!isRegression) return null;\n        // Determine severity\n        if (Math.abs(degradation) > threshold.critical) {\n            severity = 'critical';\n        } else if (Math.abs(degradation) > threshold.warning * 1.5) {\n            severity = 'high';\n        } else {\n            severity = 'medium';\n        }\n        return {\n            id: `regression-${metricKey}-${Date.now()}`,\n            scenarioId: metricKey.split('.')[0],\n            metric: metricKey,\n            severity,\n            degradation: Math.abs(degradation),\n            baseline,\n            current,\n            threshold: threshold.warning,\n            confidence: 0.95,\n            timestamp: new Date(),\n            additionalContext: {\n                trend: degradation > 0 ? 'degrading' : 'improving',\n                changePoints: [],\n                correlatedMetrics: []\n            },\n            recommendations: this.getMetricRecommendations(metricKey, degradation)\n        };\n    }\n    async analyzeTrends(scenarioId, period) {\n        try {\n            // Get historical data\n            const historicalData = await this.getHistoricalData(scenarioId, period);\n            if (historicalData.length < 10) return null;\n            const values = historicalData.map((d)=>d.value);\n            const trend = StatisticalAnalyzer.mannKendallTrend(values);\n            const seasonality = StatisticalAnalyzer.detectSeasonality(values);\n            // Simple forecast (last value + trend)\n            const lastValue = values[values.length - 1];\n            const forecast = {\n                nextValue: lastValue + trend.slope,\n                confidence: trend.significance / 10,\n                upperBound: lastValue + trend.slope * 1.2,\n                lowerBound: lastValue + trend.slope * 0.8\n            };\n            return {\n                metric: scenarioId,\n                period: period ? `${period.start.toISOString()}-${period.end.toISOString()}` : 'recent',\n                trend: trend.trend,\n                slope: trend.slope,\n                correlation: trend.significance / 10,\n                seasonality,\n                forecast\n            };\n        } catch (error) {\n            console.error('Failed to analyze trends:', error);\n            return null;\n        }\n    }\n    async detectAnomalies(metrics) {\n        if (!this.neuralModel) return 0;\n        try {\n            const features = this.metricsToFeatures(metrics);\n            const input = tf.tensor2d([\n                features\n            ]);\n            const reconstruction = this.neuralModel.predict(input);\n            // Calculate reconstruction error\n            const error = tf.losses.meanSquaredError(input, reconstruction);\n            const errorValue = await error.data();\n            input.dispose();\n            reconstruction.dispose();\n            error.dispose();\n            // Normalize error to 0-1 scale\n            return Math.min(errorValue[0] * 10, 1);\n        } catch (error) {\n            console.error('Anomaly detection failed:', error);\n            return 0;\n        }\n    }\n    async sendAlert(alert) {\n        // Save to database\n        try {\n            const stmt = db.prepare(`\n        INSERT INTO regression_alerts \n        (scenario_id, metric, severity, degradation, timestamp, alert_data)\n        VALUES (?, ?, ?, ?, ?, ?)\n      `);\n            stmt.run(alert.scenarioId, alert.metric, alert.severity, alert.degradation, alert.timestamp.toISOString(), JSON.stringify(alert));\n        } catch (error) {\n            console.error('Failed to save regression alert:', error);\n        }\n        // Send to alerting system\n        alertingSystem.checkAndCreateAlert({\n            type: AlertType.PERFORMANCE,\n            service: 'performance-regression-detector',\n            message: `${alert.metric} degraded by ${alert.degradation.toFixed(1)}% (${alert.current} vs baseline ${alert.baseline})`,\n            details: {\n                scenarioId: alert.scenarioId,\n                metric: alert.metric,\n                degradation: alert.degradation,\n                recommendations: alert.recommendations\n            }\n        });\n        this.emit('regressionAlert', alert);\n    }\n    extractMetrics(results) {\n        return {\n            responseTime: {\n                mean: results.metrics.responseTime.avg,\n                p50: results.metrics.responseTime.p50,\n                p95: results.metrics.responseTime.p95,\n                p99: results.metrics.responseTime.p99,\n                std: 0 // Would calculate from raw data\n            },\n            throughput: {\n                mean: results.metrics.throughput.avg,\n                std: 0 // Would calculate from timeline data\n            },\n            errorRate: results.metrics.errorRate,\n            availability: 100 - results.metrics.errorRate,\n            resourceUsage: {\n                cpu: 0,\n                memory: 0,\n                io: 0\n            }\n        };\n    }\n    setupDefaultThresholds() {\n        this.setThreshold('responseTime.p95', {\n            metric: 'responseTime.p95',\n            warning: 20,\n            critical: 50,\n            method: 'statistical',\n            confidence: 0.95,\n            minSampleSize: 30\n        });\n        this.setThreshold('responseTime.mean', {\n            metric: 'responseTime.mean',\n            warning: 15,\n            critical: 40,\n            method: 'statistical',\n            confidence: 0.95,\n            minSampleSize: 30\n        });\n        this.setThreshold('throughput.mean', {\n            metric: 'throughput.mean',\n            warning: 15,\n            critical: 30,\n            method: 'statistical',\n            confidence: 0.95,\n            minSampleSize: 30\n        });\n        this.setThreshold('errorRate', {\n            metric: 'errorRate',\n            warning: 100,\n            critical: 300,\n            method: 'absolute',\n            confidence: 0.95,\n            minSampleSize: 10\n        });\n    }\n    async initializeNeuralModel() {\n        // Initialize with a simple autoencoder\n        // In production, load pre-trained model or train with historical data\n        try {\n            this.neuralModel = tf.sequential({\n                layers: [\n                    tf.layers.dense({\n                        inputShape: [\n                            8\n                        ],\n                        units: 16,\n                        activation: 'relu'\n                    }),\n                    tf.layers.dense({\n                        units: 8,\n                        activation: 'relu'\n                    }),\n                    tf.layers.dense({\n                        units: 4,\n                        activation: 'relu'\n                    }),\n                    tf.layers.dense({\n                        units: 8,\n                        activation: 'relu'\n                    }),\n                    tf.layers.dense({\n                        units: 16,\n                        activation: 'relu'\n                    }),\n                    tf.layers.dense({\n                        units: 8,\n                        activation: 'linear'\n                    })\n                ]\n            });\n            this.neuralModel.compile({\n                optimizer: 'adam',\n                loss: 'meanSquaredError'\n            });\n        } catch (error) {\n            console.error('Failed to initialize neural model:', error);\n        }\n    }\n    async loadBaselinesFromDatabase() {\n        try {\n            const stmt = db.prepare('SELECT * FROM regression_baselines ORDER BY timestamp DESC');\n            const rows = stmt.all();\n            for (const row of rows){\n                const baseline = JSON.parse(row.baseline_data);\n                baseline.timestamp = new Date(row.timestamp);\n                this.baselines.set(baseline.scenarioId, baseline);\n            }\n            console.log(`Loaded ${rows.length} baselines from database`);\n        } catch (error) {\n            console.error('Failed to load baselines:', error);\n        }\n    }\n    async saveBaseline(baseline) {\n        try {\n            const stmt = db.prepare(`\n        INSERT OR REPLACE INTO regression_baselines \n        (scenario_id, timestamp, baseline_data)\n        VALUES (?, ?, ?)\n      `);\n            stmt.run(baseline.scenarioId, baseline.timestamp.toISOString(), JSON.stringify(baseline));\n        } catch (error) {\n            console.error('Failed to save baseline:', error);\n        }\n    }\n    addTrainingData(metrics) {\n        const features = this.metricsToFeatures(metrics);\n        this.trainingData.push({\n            features,\n            label: 0 // Normal performance (for autoencoder)\n        });\n        // Keep only recent training data\n        if (this.trainingData.length > 10000) {\n            this.trainingData = this.trainingData.slice(-5000);\n        }\n    }\n    metricsToFeatures(metrics) {\n        return [\n            metrics.responseTime.mean,\n            metrics.responseTime.p95,\n            metrics.responseTime.p99,\n            metrics.throughput.mean,\n            metrics.errorRate,\n            metrics.availability,\n            metrics.resourceUsage.cpu,\n            metrics.resourceUsage.memory\n        ];\n    }\n    async getRecentMetrics() {\n        // Mock implementation - would get from performance monitor\n        const metrics = new Map();\n        // This would typically fetch recent performance data\n        // For now, return empty map\n        return metrics;\n    }\n    async getHistoricalData(scenarioId, period) {\n        // Mock implementation - would fetch from database\n        return [];\n    }\n    getMostAffectedMetrics(alerts) {\n        const metricCounts = new Map();\n        alerts.forEach((alert)=>{\n            const count = metricCounts.get(alert.metric) || 0;\n            metricCounts.set(alert.metric, count + 1);\n        });\n        return Array.from(metricCounts.entries()).sort((a, b)=>b[1] - a[1]).slice(0, 5).map(([metric])=>metric);\n    }\n    generateRecommendations(alerts, trends) {\n        const recommendations = new Set();\n        if (alerts.some((a)=>a.metric.includes('responseTime'))) {\n            recommendations.add('Consider optimizing database queries and adding caching');\n            recommendations.add('Review recent code changes that might affect response times');\n        }\n        if (alerts.some((a)=>a.metric.includes('throughput'))) {\n            recommendations.add('Investigate resource bottlenecks (CPU, memory, I/O)');\n            recommendations.add('Consider horizontal scaling or load balancing improvements');\n        }\n        if (alerts.some((a)=>a.metric.includes('errorRate'))) {\n            recommendations.add('Review error logs for patterns and implement better error handling');\n            recommendations.add('Check system dependencies and external service availability');\n        }\n        if (trends?.trend === 'degrading') {\n            recommendations.add('Performance is degrading over time - schedule maintenance review');\n            recommendations.add('Monitor for memory leaks or resource accumulation issues');\n        }\n        if (alerts.some((a)=>a.severity === 'critical')) {\n            recommendations.add('CRITICAL: Immediate investigation required for production stability');\n        }\n        return Array.from(recommendations);\n    }\n    getMetricRecommendations(metricKey, degradation) {\n        const recommendations = [];\n        if (metricKey.includes('responseTime')) {\n            recommendations.push('Response time degradation detected');\n            if (degradation > 50) {\n                recommendations.push('SEVERE: Response time increased by >50% - immediate action required');\n            }\n            recommendations.push('Check database performance and query optimization');\n            recommendations.push('Review caching strategies and hit rates');\n        } else if (metricKey.includes('throughput')) {\n            recommendations.push('Throughput degradation detected');\n            recommendations.push('Monitor system resources (CPU, memory, I/O)');\n            recommendations.push('Consider scaling or load balancing adjustments');\n        } else if (metricKey.includes('errorRate')) {\n            recommendations.push('Error rate increase detected');\n            recommendations.push('Review application logs for error patterns');\n            recommendations.push('Check external dependencies and service health');\n        }\n        return recommendations;\n    }\n    /**\n   * Clean up resources\n   */ async cleanup() {\n        this.stopMonitoring();\n        if (this.neuralModel) {\n            this.neuralModel.dispose();\n        }\n        this.cache.clear();\n        this.removeAllListeners();\n    }\n    constructor(){\n        super(), _define_property(this, \"baselines\", new Map()), _define_property(this, \"thresholds\", new Map()), _define_property(this, \"cache\", void 0), _define_property(this, \"isMonitoring\", false), _define_property(this, \"monitoringInterval\", null), _define_property(this, \"neuralModel\", null), _define_property(this, \"trainingData\", []);\n        this.cache = new LRUCache({\n            max: 1000,\n            ttl: 1000 * 60 * 15 // 15 minutes\n        });\n        this.setupDefaultThresholds();\n        this.initializeNeuralModel();\n        this.loadBaselinesFromDatabase();\n    }\n}\n// Export singleton instance\nexport const performanceRegressionDetector = new PerformanceRegressionDetector();\n"],"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","ignoreList":[]}