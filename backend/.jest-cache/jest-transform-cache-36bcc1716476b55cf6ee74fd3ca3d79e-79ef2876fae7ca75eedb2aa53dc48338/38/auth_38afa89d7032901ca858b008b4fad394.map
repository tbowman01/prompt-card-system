{"version":3,"names":["cov_1wnidn7wxl","actualCoverage","jwt","bcrypt","logSecurityEvent","randomBytes","JWT_SECRET","s","b","process","env","JWT_REFRESH_SECRET","JWT_EXPIRY","JWT_REFRESH_EXPIRY","blacklistedTokens","Set","activeSessions","Map","generateTokens","payload","req","f","jti","toString","sessionId","fingerprint","generateFingerprint","ipAddress","ip","enhancedPayload","accessToken","sign","expiresIn","jwtid","refreshToken","set","userId","id","lastActivity","Date","userAgent","headers","components","Buffer","from","join","substring","hashPassword","password","saltRounds","hash","verifyPassword","hashedPassword","compare","verifyToken","res","next","authHeader","authorization","startsWith","reason","status","json","success","error","code","token","has","decoded","verify","currentFingerprint","currentIp","tokenFingerprint","console","warn","tokenIp","session","get","user","role","errorDetails","Error","message","TokenExpiredError","JsonWebTokenError","optionalAuth","requireRole","allowedRoles","includes","requirePermission","requiredPermissions","hasPermission","some","permission","permissions","body","tokens","email","add","data","blacklistToken","logout","getActiveSessions","sessions","Array","values","filter","revokeSession","delete","revokeAllUserSessions","revokedCount","entries","enhancedLogout","action","cleanupExpiredSessions","now","sessionTimeout","getTime","cleanupBlacklist","log","getAuthStats","sessionsPerUser","size","setInterval"],"sources":["auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { logSecurityEvent } from './structuredLogging';\nimport { randomBytes } from 'crypto';\n// JWT Secret keys\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'your-super-secret-refresh-key-change-in-production';\nconst JWT_EXPIRY = process.env.JWT_EXPIRY || '15m';\nconst JWT_REFRESH_EXPIRY = process.env.JWT_REFRESH_EXPIRY || '7d';\n// In-memory blacklist for revoked tokens (use Redis in production)\nconst blacklistedTokens = new Set();\n// Active sessions tracking for enhanced security\nconst activeSessions = new Map();\n// Token generation utilities with enhanced security\nexport const generateTokens = (payload, req)=>{\n    const jti = randomBytes(16).toString('hex'); // Unique token ID\n    const sessionId = randomBytes(16).toString('hex');\n    const fingerprint = req ? generateFingerprint(req) : '';\n    const ipAddress = req?.ip || '';\n    const enhancedPayload = {\n        ...payload,\n        sessionId,\n        fingerprint,\n        ipAddress,\n        jti\n    };\n    const accessToken = jwt.sign(enhancedPayload, JWT_SECRET, {\n        expiresIn: JWT_EXPIRY,\n        jwtid: jti\n    });\n    const refreshToken = jwt.sign(enhancedPayload, JWT_REFRESH_SECRET, {\n        expiresIn: JWT_REFRESH_EXPIRY,\n        jwtid: `${jti}_refresh`\n    });\n    // Track active session\n    if (req) {\n        activeSessions.set(sessionId, {\n            userId: payload.id,\n            sessionId,\n            fingerprint,\n            ipAddress,\n            lastActivity: new Date(),\n            userAgent: req.headers['user-agent'] || 'unknown'\n        });\n    }\n    return {\n        accessToken,\n        refreshToken,\n        sessionId\n    };\n};\n// Generate browser fingerprint for additional security\nfunction generateFingerprint(req) {\n    const components = [\n        req.headers['user-agent'] || '',\n        req.headers['accept-language'] || '',\n        req.headers['accept-encoding'] || '',\n        req.headers['accept'] || ''\n    ];\n    return Buffer.from(components.join('|')).toString('base64').substring(0, 16);\n}\n// Password hashing utilities\nexport const hashPassword = async (password)=>{\n    const saltRounds = 12;\n    return bcrypt.hash(password, saltRounds);\n};\nexport const verifyPassword = async (password, hashedPassword)=>{\n    return bcrypt.compare(password, hashedPassword);\n};\n// Enhanced JWT verification middleware with security checks\nexport const verifyToken = (req, res, next)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            logSecurityEvent('auth_failure', req, {\n                reason: 'No token provided'\n            });\n            res.status(401).json({\n                success: false,\n                error: 'Access denied. No token provided or invalid format.',\n                code: 'NO_TOKEN'\n            });\n            return;\n        }\n        const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n        // Check if token is blacklisted\n        if (blacklistedTokens.has(token)) {\n            logSecurityEvent('auth_failure', req, {\n                reason: 'Token revoked'\n            });\n            res.status(401).json({\n                success: false,\n                error: 'Token has been revoked.',\n                code: 'TOKEN_REVOKED'\n            });\n            return;\n        }\n        // Verify token\n        const decoded = jwt.verify(token, JWT_SECRET);\n        // Enhanced security checks\n        const currentFingerprint = generateFingerprint(req);\n        const currentIp = req.ip;\n        // Check fingerprint consistency (if present in token)\n        if (decoded.fingerprint && decoded.fingerprint !== currentFingerprint) {\n            logSecurityEvent('suspicious_activity', req, {\n                reason: 'Fingerprint mismatch',\n                tokenFingerprint: decoded.fingerprint,\n                currentFingerprint,\n                userId: decoded.id\n            });\n            // Allow but log suspicious activity\n            console.warn(`Fingerprint mismatch for user ${decoded.id}: token=${decoded.fingerprint}, current=${currentFingerprint}`);\n        }\n        // Check IP consistency with tolerance for reasonable changes\n        if (decoded.ipAddress && decoded.ipAddress !== currentIp) {\n            logSecurityEvent('suspicious_activity', req, {\n                reason: 'IP address change',\n                tokenIp: decoded.ipAddress,\n                currentIp,\n                userId: decoded.id\n            });\n            // Log but allow (users may change networks)\n            console.warn(`IP change for user ${decoded.id}: token=${decoded.ipAddress}, current=${currentIp}`);\n        }\n        // Update session activity if session exists\n        if (decoded.sessionId) {\n            const session = activeSessions.get(decoded.sessionId);\n            if (session) {\n                session.lastActivity = new Date();\n                session.ipAddress = currentIp || session.ipAddress;\n            }\n        }\n        req.user = decoded;\n        logSecurityEvent('auth_success', req, {\n            userId: decoded.id,\n            role: decoded.role\n        });\n        next();\n    } catch (error) {\n        const errorDetails = {\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n        if (error instanceof jwt.TokenExpiredError) {\n            logSecurityEvent('auth_failure', req, {\n                ...errorDetails,\n                reason: 'Token expired'\n            });\n            res.status(401).json({\n                success: false,\n                error: 'Token has expired.',\n                code: 'TOKEN_EXPIRED'\n            });\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            logSecurityEvent('auth_failure', req, {\n                ...errorDetails,\n                reason: 'Invalid token'\n            });\n            res.status(401).json({\n                success: false,\n                error: 'Invalid token.',\n                code: 'INVALID_TOKEN'\n            });\n        } else {\n            logSecurityEvent('auth_failure', req, {\n                ...errorDetails,\n                reason: 'Token verification error'\n            });\n            res.status(500).json({\n                success: false,\n                error: 'Token verification failed.',\n                code: 'TOKEN_VERIFICATION_ERROR'\n            });\n        }\n    }\n};\n// Optional authentication middleware (doesn't fail if no token)\nexport const optionalAuth = (req, res, next)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            next();\n            return;\n        }\n        const token = authHeader.substring(7);\n        if (!blacklistedTokens.has(token)) {\n            const decoded = jwt.verify(token, JWT_SECRET);\n            req.user = decoded;\n        }\n        next();\n    } catch (error) {\n        // Ignore token errors in optional auth\n        next();\n    }\n};\n// Role-based access control middleware\nexport const requireRole = (allowedRoles)=>{\n    return (req, res, next)=>{\n        if (!req.user) {\n            res.status(401).json({\n                success: false,\n                error: 'Authentication required.',\n                code: 'AUTH_REQUIRED'\n            });\n            return;\n        }\n        if (!allowedRoles.includes(req.user.role)) {\n            res.status(403).json({\n                success: false,\n                error: `Access denied. Required roles: ${allowedRoles.join(', ')}`,\n                code: 'INSUFFICIENT_ROLE'\n            });\n            return;\n        }\n        next();\n    };\n};\n// Permission-based access control middleware\nexport const requirePermission = (requiredPermissions)=>{\n    return (req, res, next)=>{\n        if (!req.user) {\n            res.status(401).json({\n                success: false,\n                error: 'Authentication required.',\n                code: 'AUTH_REQUIRED'\n            });\n            return;\n        }\n        const hasPermission = requiredPermissions.some((permission)=>req.user.permissions.includes(permission));\n        if (!hasPermission) {\n            res.status(403).json({\n                success: false,\n                error: `Access denied. Required permissions: ${requiredPermissions.join(', ')}`,\n                code: 'INSUFFICIENT_PERMISSIONS'\n            });\n            return;\n        }\n        next();\n    };\n};\n// Refresh token middleware\nexport const refreshToken = (req, res, next)=>{\n    try {\n        const { refreshToken } = req.body;\n        if (!refreshToken) {\n            res.status(401).json({\n                success: false,\n                error: 'Refresh token required.',\n                code: 'NO_REFRESH_TOKEN'\n            });\n            return;\n        }\n        // Check if refresh token is blacklisted\n        if (blacklistedTokens.has(refreshToken)) {\n            res.status(401).json({\n                success: false,\n                error: 'Refresh token has been revoked.',\n                code: 'REFRESH_TOKEN_REVOKED'\n            });\n            return;\n        }\n        const decoded = jwt.verify(refreshToken, JWT_REFRESH_SECRET);\n        // Generate new tokens\n        const tokens = generateTokens({\n            id: decoded.id,\n            email: decoded.email,\n            role: decoded.role,\n            permissions: decoded.permissions\n        });\n        // Blacklist old refresh token\n        blacklistedTokens.add(refreshToken);\n        res.json({\n            success: true,\n            data: tokens\n        });\n    } catch (error) {\n        if (error instanceof jwt.TokenExpiredError) {\n            res.status(401).json({\n                success: false,\n                error: 'Refresh token has expired.',\n                code: 'REFRESH_TOKEN_EXPIRED'\n            });\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid refresh token.',\n                code: 'INVALID_REFRESH_TOKEN'\n            });\n        } else {\n            res.status(500).json({\n                success: false,\n                error: 'Token refresh failed.',\n                code: 'TOKEN_REFRESH_ERROR'\n            });\n        }\n    }\n};\n// Token blacklisting utilities\nexport const blacklistToken = (token)=>{\n    blacklistedTokens.add(token);\n};\nexport const logout = (req, res)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (authHeader && authHeader.startsWith('Bearer ')) {\n            const token = authHeader.substring(7);\n            blacklistToken(token);\n        }\n        // Also blacklist refresh token if provided\n        const { refreshToken } = req.body;\n        if (refreshToken) {\n            blacklistToken(refreshToken);\n        }\n        res.json({\n            success: true,\n            message: 'Logged out successfully'\n        });\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: 'Logout failed'\n        });\n    }\n};\n// Session management functions\nexport const getActiveSessions = (userId)=>{\n    const sessions = Array.from(activeSessions.values());\n    return userId ? sessions.filter((session)=>session.userId === userId) : sessions;\n};\nexport const revokeSession = (sessionId)=>{\n    return activeSessions.delete(sessionId);\n};\nexport const revokeAllUserSessions = (userId)=>{\n    let revokedCount = 0;\n    for (const [sessionId, session] of activeSessions.entries()){\n        if (session.userId === userId) {\n            activeSessions.delete(sessionId);\n            revokedCount++;\n        }\n    }\n    return revokedCount;\n};\n// Enhanced logout with session cleanup\nexport const enhancedLogout = (req, res)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (authHeader && authHeader.startsWith('Bearer ')) {\n            const token = authHeader.substring(7);\n            blacklistToken(token);\n            // Also revoke the session if we can decode the token\n            try {\n                const decoded = jwt.verify(token, JWT_SECRET);\n                if (decoded.sessionId) {\n                    revokeSession(decoded.sessionId);\n                }\n                logSecurityEvent('auth_success', req, {\n                    action: 'logout',\n                    userId: decoded.id,\n                    sessionId: decoded.sessionId\n                });\n            } catch (error) {\n            // Token might be invalid/expired, but that's okay for logout\n            }\n        }\n        // Also blacklist refresh token if provided\n        const { refreshToken } = req.body;\n        if (refreshToken) {\n            blacklistToken(refreshToken);\n        }\n        res.json({\n            success: true,\n            message: 'Logged out successfully'\n        });\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: 'Logout failed'\n        });\n    }\n};\n// Clean up expired sessions and tokens\nexport const cleanupExpiredSessions = ()=>{\n    const now = Date.now();\n    const sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n    for (const [sessionId, session] of activeSessions.entries()){\n        if (now - session.lastActivity.getTime() > sessionTimeout) {\n            activeSessions.delete(sessionId);\n        }\n    }\n};\n// Clean up expired tokens from blacklist (should be run periodically)\nexport const cleanupBlacklist = ()=>{\n    // In a real implementation, you would check token expiration times\n    // and remove expired tokens from the blacklist\n    // This is a simplified version\n    console.log('Cleaning up token blacklist...');\n    cleanupExpiredSessions();\n};\n// Security monitoring and statistics\nexport const getAuthStats = ()=>{\n    const sessionsPerUser = {};\n    for (const session of activeSessions.values()){\n        sessionsPerUser[session.userId] = (sessionsPerUser[session.userId] || 0) + 1;\n    }\n    return {\n        activeSessions: activeSessions.size,\n        blacklistedTokens: blacklistedTokens.size,\n        sessionsPerUser\n    };\n};\n// Periodic cleanup\nsetInterval(()=>{\n    cleanupBlacklist();\n}, 60 * 60 * 1000); // Clean up every hour\n"],"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","ignoreList":[]}