{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/predictive-analytics.ts"],"sourcesContent":["import express from 'express';\nimport { PredictiveAnalytics } from '../services/analytics/PredictiveAnalytics';\nimport { AnomalyDetector, anomalyDetector } from '../services/analytics/AnomalyDetector';\nimport { CapacityPlanner, capacityPlanner } from '../services/analytics/CapacityPlanner';\n\nconst router = express.Router();\nconst predictiveAnalytics = new PredictiveAnalytics();\n\n// Predictive Analytics Routes\n\n/**\n * Train capacity prediction model\n */\nrouter.post('/models/capacity/train', async (req, res) => {\n  try {\n    const { metric, timeframeDays = 30 } = req.body;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const model = await predictiveAnalytics.trainCapacityModel(metric, timeframeDays);\n    \n    res.json({\n      success: true,\n      data: {\n        modelId: model.id,\n        accuracy: model.metadata.accuracy,\n        features: model.metadata.features,\n        trainedAt: model.metadata.trainedAt\n      }\n    });\n  } catch (error) {\n    console.error('Error training capacity model:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to train capacity model'\n    });\n  }\n});\n\n/**\n * Train anomaly detection model\n */\nrouter.post('/models/anomaly/train', async (req, res) => {\n  try {\n    const { metrics = ['cpu_usage', 'memory_usage', 'app_response_time'], timeframeDays = 30 } = req.body;\n    \n    const model = await predictiveAnalytics.trainAnomalyModel(metrics, timeframeDays);\n    \n    res.json({\n      success: true,\n      data: {\n        modelId: model.id,\n        accuracy: model.metadata.accuracy,\n        features: model.metadata.features,\n        trainedAt: model.metadata.trainedAt\n      }\n    });\n  } catch (error) {\n    console.error('Error training anomaly model:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to train anomaly model'\n    });\n  }\n});\n\n/**\n * Get capacity predictions\n */\nrouter.get('/predictions/capacity', async (req, res) => {\n  try {\n    const { metric, timeframe = '24h' } = req.query;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const prediction = await predictiveAnalytics.predictCapacity(\n      metric as string,\n      timeframe as any\n    );\n    \n    res.json({\n      success: true,\n      data: prediction\n    });\n  } catch (error) {\n    console.error('Error getting capacity prediction:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get capacity prediction'\n    });\n  }\n});\n\n/**\n * Detect anomalies\n */\nrouter.get('/anomalies/detect', async (req, res) => {\n  try {\n    const { metrics } = req.query;\n    const metricsArray = metrics ? (metrics as string).split(',') : undefined;\n    \n    const anomalies = await predictiveAnalytics.detectAnomalies(metricsArray);\n    \n    res.json({\n      success: true,\n      data: anomalies\n    });\n  } catch (error) {\n    console.error('Error detecting anomalies:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to detect anomalies'\n    });\n  }\n});\n\n/**\n * Get ML insights\n */\nrouter.get('/insights', async (req, res) => {\n  try {\n    const insights = await predictiveAnalytics.generateMLInsights();\n    \n    res.json({\n      success: true,\n      data: insights\n    });\n  } catch (error) {\n    console.error('Error generating ML insights:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate ML insights'\n    });\n  }\n});\n\n/**\n * Get growth projections\n */\nrouter.get('/projections/growth', async (req, res) => {\n  try {\n    const { metric, projectionDays = 30 } = req.query;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const projections = await predictiveAnalytics.getGrowthProjections(\n      metric as string,\n      parseInt(projectionDays as string, 10)\n    );\n    \n    res.json({\n      success: true,\n      data: projections\n    });\n  } catch (error) {\n    console.error('Error getting growth projections:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get growth projections'\n    });\n  }\n});\n\n/**\n * Auto-retrain models\n */\nrouter.post('/models/retrain', async (req, res) => {\n  try {\n    await predictiveAnalytics.autoRetrainModels();\n    \n    res.json({\n      success: true,\n      message: 'Models retrained successfully'\n    });\n  } catch (error) {\n    console.error('Error retraining models:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to retrain models'\n    });\n  }\n});\n\n// Anomaly Detection Routes\n\n/**\n * Start anomaly detection\n */\nrouter.post('/anomaly-detection/start', async (req, res) => {\n  try {\n    const { intervalMs = 30000 } = req.body;\n    \n    anomalyDetector.startDetection(intervalMs);\n    \n    res.json({\n      success: true,\n      message: 'Anomaly detection started',\n      interval: intervalMs\n    });\n  } catch (error) {\n    console.error('Error starting anomaly detection:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to start anomaly detection'\n    });\n  }\n});\n\n/**\n * Stop anomaly detection\n */\nrouter.post('/anomaly-detection/stop', async (req, res) => {\n  try {\n    anomalyDetector.stopDetection();\n    \n    res.json({\n      success: true,\n      message: 'Anomaly detection stopped'\n    });\n  } catch (error) {\n    console.error('Error stopping anomaly detection:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to stop anomaly detection'\n    });\n  }\n});\n\n/**\n * Train autoencoder model for anomaly detection\n */\nrouter.post('/anomaly-detection/train', async (req, res) => {\n  try {\n    const { metrics = ['cpu_usage', 'memory_usage', 'app_response_time'], trainingDays = 7 } = req.body;\n    \n    const model = await anomalyDetector.trainAutoencoderModel(metrics, trainingDays);\n    \n    res.json({\n      success: true,\n      data: {\n        modelId: model.id,\n        algorithm: model.algorithm,\n        accuracy: model.accuracy,\n        features: model.features\n      }\n    });\n  } catch (error) {\n    console.error('Error training anomaly detection model:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to train anomaly detection model'\n    });\n  }\n});\n\n/**\n * Update statistical thresholds\n */\nrouter.post('/anomaly-detection/thresholds', async (req, res) => {\n  try {\n    const { metric, windowDays = 7 } = req.body;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const thresholds = await anomalyDetector.updateStatisticalThresholds(metric, windowDays);\n    \n    res.json({\n      success: true,\n      data: thresholds\n    });\n  } catch (error) {\n    console.error('Error updating statistical thresholds:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to update statistical thresholds'\n    });\n  }\n});\n\n/**\n * Get active alerts\n */\nrouter.get('/anomaly-detection/alerts', async (req, res) => {\n  try {\n    const alerts = anomalyDetector.getActiveAlerts();\n    \n    res.json({\n      success: true,\n      data: alerts\n    });\n  } catch (error) {\n    console.error('Error getting active alerts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get active alerts'\n    });\n  }\n});\n\n/**\n * Acknowledge alert\n */\nrouter.post('/anomaly-detection/alerts/:alertId/acknowledge', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { userId } = req.body;\n    \n    const acknowledged = anomalyDetector.acknowledgeAlert(alertId, userId);\n    \n    if (acknowledged) {\n      res.json({\n        success: true,\n        message: 'Alert acknowledged'\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        error: 'Alert not found'\n      });\n    }\n  } catch (error) {\n    console.error('Error acknowledging alert:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to acknowledge alert'\n    });\n  }\n});\n\n/**\n * Resolve alert\n */\nrouter.post('/anomaly-detection/alerts/:alertId/resolve', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { userId } = req.body;\n    \n    const resolved = anomalyDetector.resolveAlert(alertId, userId);\n    \n    if (resolved) {\n      res.json({\n        success: true,\n        message: 'Alert resolved'\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        error: 'Alert not found'\n      });\n    }\n  } catch (error) {\n    console.error('Error resolving alert:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to resolve alert'\n    });\n  }\n});\n\n/**\n * Get detection statistics\n */\nrouter.get('/anomaly-detection/stats', async (req, res) => {\n  try {\n    const stats = anomalyDetector.getDetectionStats();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting detection stats:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get detection stats'\n    });\n  }\n});\n\n/**\n * Update detection configuration\n */\nrouter.put('/anomaly-detection/config', async (req, res) => {\n  try {\n    const config = req.body;\n    \n    anomalyDetector.updateConfig(config);\n    \n    res.json({\n      success: true,\n      message: 'Detection configuration updated'\n    });\n  } catch (error) {\n    console.error('Error updating detection config:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update detection configuration'\n    });\n  }\n});\n\n/**\n * Export detection data\n */\nrouter.get('/anomaly-detection/export', async (req, res) => {\n  try {\n    const data = anomalyDetector.exportData();\n    \n    res.json({\n      success: true,\n      data\n    });\n  } catch (error) {\n    console.error('Error exporting detection data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to export detection data'\n    });\n  }\n});\n\n// Capacity Planning Routes\n\n/**\n * Start capacity monitoring\n */\nrouter.post('/capacity/monitoring/start', async (req, res) => {\n  try {\n    const { intervalMs = 300000 } = req.body; // 5 minutes default\n    \n    capacityPlanner.startMonitoring(intervalMs);\n    \n    res.json({\n      success: true,\n      message: 'Capacity monitoring started',\n      interval: intervalMs\n    });\n  } catch (error) {\n    console.error('Error starting capacity monitoring:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to start capacity monitoring'\n    });\n  }\n});\n\n/**\n * Stop capacity monitoring\n */\nrouter.post('/capacity/monitoring/stop', async (req, res) => {\n  try {\n    capacityPlanner.stopMonitoring();\n    \n    res.json({\n      success: true,\n      message: 'Capacity monitoring stopped'\n    });\n  } catch (error) {\n    console.error('Error stopping capacity monitoring:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to stop capacity monitoring'\n    });\n  }\n});\n\n/**\n * Generate capacity forecast\n */\nrouter.get('/capacity/forecast', async (req, res) => {\n  try {\n    const { resources, timeframes } = req.query;\n    \n    const resourcesArray = resources ? (resources as string).split(',') : undefined;\n    const timeframesArray = timeframes ? (timeframes as string).split(',') : undefined;\n    \n    const forecasts = await capacityPlanner.generateCapacityForecast(\n      resourcesArray,\n      timeframesArray\n    );\n    \n    res.json({\n      success: true,\n      data: Object.fromEntries(forecasts)\n    });\n  } catch (error) {\n    console.error('Error generating capacity forecast:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate capacity forecast'\n    });\n  }\n});\n\n/**\n * Generate scaling recommendations\n */\nrouter.get('/capacity/recommendations/scaling', async (req, res) => {\n  try {\n    const recommendations = await capacityPlanner.generateScalingRecommendations();\n    \n    res.json({\n      success: true,\n      data: recommendations\n    });\n  } catch (error) {\n    console.error('Error generating scaling recommendations:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate scaling recommendations'\n    });\n  }\n});\n\n/**\n * Create growth projections\n */\nrouter.get('/capacity/projections/:resource', async (req, res) => {\n  try {\n    const { resource } = req.params;\n    const { projectionDays = 30 } = req.query;\n    \n    const projections = await capacityPlanner.createGrowthProjections(\n      resource,\n      parseInt(projectionDays as string, 10)\n    );\n    \n    res.json({\n      success: true,\n      data: projections\n    });\n  } catch (error) {\n    console.error('Error creating growth projections:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to create growth projections'\n    });\n  }\n});\n\n/**\n * Generate optimization recommendations\n */\nrouter.get('/capacity/recommendations/optimization', async (req, res) => {\n  try {\n    const recommendations = await capacityPlanner.generateOptimizationRecommendations();\n    \n    res.json({\n      success: true,\n      data: recommendations\n    });\n  } catch (error) {\n    console.error('Error generating optimization recommendations:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate optimization recommendations'\n    });\n  }\n});\n\n/**\n * Get capacity alerts\n */\nrouter.get('/capacity/alerts', async (req, res) => {\n  try {\n    const alerts = capacityPlanner.getCapacityAlerts();\n    \n    res.json({\n      success: true,\n      data: alerts\n    });\n  } catch (error) {\n    console.error('Error getting capacity alerts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get capacity alerts'\n    });\n  }\n});\n\n/**\n * Get capacity dashboard\n */\nrouter.get('/capacity/dashboard', async (req, res) => {\n  try {\n    const dashboard = await capacityPlanner.getCapacityDashboard();\n    \n    res.json({\n      success: true,\n      data: dashboard\n    });\n  } catch (error) {\n    console.error('Error getting capacity dashboard:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get capacity dashboard'\n    });\n  }\n});\n\n// Health check for predictive analytics services\nrouter.get('/health', async (req, res) => {\n  try {\n    const health = {\n      predictiveAnalytics: 'healthy',\n      anomalyDetection: {\n        status: 'healthy',\n        isRunning: anomalyDetector['isRunning'] || false,\n        models: anomalyDetector['models']?.size || 0\n      },\n      capacityPlanning: {\n        status: 'healthy',\n        isMonitoring: capacityPlanner['isMonitoring'] || false,\n        models: capacityPlanner['capacityModels']?.size || 0\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    res.json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    console.error('Error getting health status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get health status'\n    });\n  }\n});\n\nexport { router as predictiveAnalyticsRoutes };"],"names":["predictiveAnalyticsRoutes","router","express","Router","predictiveAnalytics","PredictiveAnalytics","post","req","res","metric","timeframeDays","body","status","json","success","error","model","trainCapacityModel","data","modelId","id","accuracy","metadata","features","trainedAt","console","message","metrics","trainAnomalyModel","get","timeframe","query","prediction","predictCapacity","metricsArray","split","undefined","anomalies","detectAnomalies","insights","generateMLInsights","projectionDays","projections","getGrowthProjections","parseInt","autoRetrainModels","intervalMs","anomalyDetector","startDetection","interval","stopDetection","trainingDays","trainAutoencoderModel","algorithm","windowDays","thresholds","updateStatisticalThresholds","alerts","getActiveAlerts","alertId","params","userId","acknowledged","acknowledgeAlert","resolved","resolveAlert","stats","getDetectionStats","put","config","updateConfig","exportData","capacityPlanner","startMonitoring","stopMonitoring","resources","timeframes","resourcesArray","timeframesArray","forecasts","generateCapacityForecast","Object","fromEntries","recommendations","generateScalingRecommendations","resource","createGrowthProjections","generateOptimizationRecommendations","getCapacityAlerts","dashboard","getCapacityDashboard","health","anomalyDetection","isRunning","models","size","capacityPlanning","isMonitoring","timestamp","Date","toISOString"],"mappings":"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"}