{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/middleware/structuredLogging.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { randomBytes } from 'crypto';\n\n// Enhanced structured logging with correlation IDs and security context\nexport interface LogContext {\n  correlationId: string;\n  requestId: string;\n  userId?: string;\n  userRole?: string;\n  ip: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  timestamp: string;\n  duration?: number;\n  statusCode?: number;\n  errorCode?: string;\n  securityContext?: {\n    authMethod?: string;\n    rateLimit?: {\n      hits: number;\n      remaining: number;\n    };\n    suspicious?: boolean;\n    geoLocation?: string;\n    fingerprint?: string;\n  };\n  metadata?: Record<string, any>;\n}\n\nclass StructuredLogger {\n  private static instance: StructuredLogger;\n  private logBuffer: LogContext[] = [];\n  private readonly MAX_BUFFER_SIZE = 100;\n  private readonly FLUSH_INTERVAL = 10000; // 10 seconds\n\n  private constructor() {\n    // Flush logs periodically\n    setInterval(() => this.flushLogs(), this.FLUSH_INTERVAL);\n  }\n\n  public static getInstance(): StructuredLogger {\n    if (!StructuredLogger.instance) {\n      StructuredLogger.instance = new StructuredLogger();\n    }\n    return StructuredLogger.instance;\n  }\n\n  public log(level: 'info' | 'warn' | 'error' | 'debug', context: LogContext, message: string): void {\n    const logEntry = {\n      level,\n      message,\n      ...context,\n      bufferTimestamp: new Date().toISOString()\n    };\n\n    // Enhanced console logging with structured format\n    const structuredLog = {\n      '@timestamp': context.timestamp,\n      '@version': '1',\n      level,\n      message,\n      correlation_id: context.correlationId,\n      request_id: context.requestId,\n      user: {\n        id: context.userId,\n        role: context.userRole\n      },\n      request: {\n        method: context.method,\n        url: context.url,\n        ip: context.ip,\n        user_agent: context.userAgent,\n        duration_ms: context.duration,\n        status_code: context.statusCode\n      },\n      security: context.securityContext,\n      error_code: context.errorCode,\n      metadata: context.metadata\n    };\n\n    // Color-coded console output for development\n    if (process.env.NODE_ENV !== 'production') {\n      const colors = {\n        info: '\\x1b[36m',    // Cyan\n        warn: '\\x1b[33m',    // Yellow\n        error: '\\x1b[31m',   // Red\n        debug: '\\x1b[35m',   // Magenta\n        reset: '\\x1b[0m'\n      };\n\n      console.log(\n        `${colors[level]}[${level.toUpperCase()}]${colors.reset} ` +\n        `${context.timestamp} ` +\n        `[${context.correlationId}] ` +\n        `${context.method} ${context.url} ` +\n        `${context.statusCode || 'PENDING'} ` +\n        `${context.duration ? `${context.duration}ms` : ''} ` +\n        `- ${message}`\n      );\n    }\n\n    // Structured JSON logging for production\n    if (process.env.NODE_ENV === 'production') {\n      console.log(JSON.stringify(structuredLog));\n    }\n\n    // Add to buffer for batch processing\n    this.logBuffer.push(context);\n\n    // Flush if buffer is full\n    if (this.logBuffer.length >= this.MAX_BUFFER_SIZE) {\n      this.flushLogs();\n    }\n  }\n\n  private flushLogs(): void {\n    if (this.logBuffer.length === 0) return;\n\n    // In production, this would send to centralized logging system\n    // For now, we'll just clear the buffer\n    this.logBuffer = [];\n  }\n\n  public getMetrics(): { totalLogs: number; errorCount: number; averageResponseTime: number } {\n    const logs = this.logBuffer;\n    const errorCount = logs.filter(log => log.statusCode && log.statusCode >= 400).length;\n    const responseTimes = logs.filter(log => log.duration).map(log => log.duration!);\n    const averageResponseTime = responseTimes.length > 0 \n      ? responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length \n      : 0;\n\n    return {\n      totalLogs: logs.length,\n      errorCount,\n      averageResponseTime: Math.round(averageResponseTime)\n    };\n  }\n}\n\nexport const structuredLogger = StructuredLogger.getInstance();\n\n// Middleware to add correlation ID and structured logging\nexport const structuredLoggingMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = Date.now();\n  const correlationId = (req.headers['x-correlation-id'] as string) || randomBytes(8).toString('hex');\n  const requestId = (req.headers['x-request-id'] as string) || randomBytes(8).toString('hex');\n\n  // Add correlation ID to request for downstream use\n  req.headers['x-correlation-id'] = correlationId;\n  req.headers['x-request-id'] = requestId;\n\n  // Add correlation ID to response headers\n  res.setHeader('x-correlation-id', correlationId);\n  res.setHeader('x-request-id', requestId);\n\n  // Create base log context\n  const baseContext: Partial<LogContext> = {\n    correlationId,\n    requestId,\n    userId: req.user?.id,\n    userRole: req.user?.role,\n    ip: req.ip || req.connection.remoteAddress || 'unknown',\n    userAgent: req.headers['user-agent'] || 'unknown',\n    method: req.method,\n    url: req.url,\n    timestamp: new Date().toISOString(),\n    securityContext: {\n      authMethod: req.headers.authorization ? 'Bearer' : 'none',\n      suspicious: false,\n      fingerprint: generateFingerprint(req)\n    }\n  };\n\n  // Log request start\n  structuredLogger.log('info', baseContext as LogContext, `Request started: ${req.method} ${req.url}`);\n\n  // Override res.end to capture response details\n  const originalEnd = res.end;\n  res.end = function(chunk?: any, encoding?: any): any {\n    const duration = Date.now() - startTime;\n    const finalContext: LogContext = {\n      ...baseContext as LogContext,\n      duration,\n      statusCode: res.statusCode\n    };\n\n    // Determine log level based on status code\n    let level: 'info' | 'warn' | 'error' = 'info';\n    let message = `Request completed: ${req.method} ${req.url} ${res.statusCode} (${duration}ms)`;\n\n    if (res.statusCode >= 500) {\n      level = 'error';\n      finalContext.errorCode = 'SERVER_ERROR';\n    } else if (res.statusCode >= 400) {\n      level = 'warn';\n      finalContext.errorCode = 'CLIENT_ERROR';\n    }\n\n    // Add security context for suspicious activity\n    if (res.statusCode === 429) {\n      finalContext.securityContext!.suspicious = true;\n      finalContext.errorCode = 'RATE_LIMIT_EXCEEDED';\n      level = 'warn';\n    } else if (res.statusCode === 401 || res.statusCode === 403) {\n      finalContext.securityContext!.suspicious = true;\n      finalContext.errorCode = res.statusCode === 401 ? 'UNAUTHORIZED' : 'FORBIDDEN';\n      level = 'warn';\n    }\n\n    structuredLogger.log(level, finalContext, message);\n    originalEnd.call(this, chunk, encoding);\n  };\n\n  next();\n};\n\n// Generate a simple fingerprint for request tracking\nfunction generateFingerprint(req: Request): string {\n  const components = [\n    req.headers['user-agent'] || '',\n    req.headers['accept-language'] || '',\n    req.headers['accept-encoding'] || '',\n    req.ip || ''\n  ];\n  \n  // Simple hash of combined components\n  return Buffer.from(components.join('|')).toString('base64').substring(0, 12);\n}\n\n// Security event logging\nexport const logSecurityEvent = (\n  eventType: 'auth_success' | 'auth_failure' | 'rate_limit' | 'suspicious_activity' | 'vulnerability_detected',\n  req: Request,\n  details: Record<string, any> = {}\n): void => {\n  const context: LogContext = {\n    correlationId: (req.headers['x-correlation-id'] as string) || 'unknown',\n    requestId: (req.headers['x-request-id'] as string) || 'unknown',\n    userId: req.user?.id,\n    userRole: req.user?.role,\n    ip: req.ip || 'unknown',\n    userAgent: req.headers['user-agent'] || 'unknown',\n    method: req.method,\n    url: req.url,\n    timestamp: new Date().toISOString(),\n    securityContext: {\n      authMethod: req.headers.authorization ? 'Bearer' : 'none',\n      suspicious: true,\n      fingerprint: generateFingerprint(req)\n    },\n    metadata: {\n      eventType,\n      ...details\n    }\n  };\n\n  structuredLogger.log('warn', context, `Security event: ${eventType}`);\n};\n\n// Performance monitoring middleware\nexport const performanceLoggingMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = process.hrtime.bigint();\n  const startMemory = process.memoryUsage();\n\n  res.on('finish', () => {\n    const endTime = process.hrtime.bigint();\n    const endMemory = process.memoryUsage();\n    const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n\n    const performanceData = {\n      correlationId: req.headers['x-correlation-id'],\n      requestId: req.headers['x-request-id'],\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration,\n      memory: {\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        external: endMemory.external - startMemory.external\n      }\n    };\n\n    // Log performance warning for slow requests\n    if (duration > 1000) { // Slower than 1 second\n      const context: LogContext = {\n        correlationId: performanceData.correlationId as string || 'unknown',\n        requestId: performanceData.requestId as string || 'unknown',\n        ip: req.ip || 'unknown',\n        userAgent: req.headers['user-agent'] || 'unknown',\n        method: req.method,\n        url: req.url,\n        timestamp: new Date().toISOString(),\n        duration,\n        statusCode: res.statusCode,\n        metadata: performanceData\n      };\n\n      structuredLogger.log('warn', context, `Slow request detected: ${duration}ms`);\n    }\n  });\n\n  next();\n};"],"names":["logSecurityEvent","performanceLoggingMiddleware","structuredLogger","structuredLoggingMiddleware","StructuredLogger","getInstance","instance","log","level","context","message","logEntry","bufferTimestamp","Date","toISOString","structuredLog","timestamp","correlation_id","correlationId","request_id","requestId","user","id","userId","role","userRole","request","method","url","ip","user_agent","userAgent","duration_ms","duration","status_code","statusCode","security","securityContext","error_code","errorCode","metadata","process","env","NODE_ENV","colors","info","warn","error","debug","reset","console","toUpperCase","JSON","stringify","logBuffer","push","length","MAX_BUFFER_SIZE","flushLogs","getMetrics","logs","errorCount","filter","responseTimes","map","averageResponseTime","reduce","sum","time","totalLogs","Math","round","FLUSH_INTERVAL","setInterval","req","res","next","startTime","now","headers","randomBytes","toString","setHeader","baseContext","connection","remoteAddress","authMethod","authorization","suspicious","fingerprint","generateFingerprint","originalEnd","end","chunk","encoding","finalContext","call","components","Buffer","from","join","substring","eventType","details","hrtime","bigint","startMemory","memoryUsage","on","endTime","endMemory","Number","performanceData","memory","heapUsed","heapTotal","external"],"mappings":"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"}