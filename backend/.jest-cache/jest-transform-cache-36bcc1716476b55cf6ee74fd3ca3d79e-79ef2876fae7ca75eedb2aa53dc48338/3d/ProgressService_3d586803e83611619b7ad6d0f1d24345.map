{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/websocket/ProgressService.ts"],"sourcesContent":["import { Server as SocketIOServer } from 'socket.io';\nimport { ExecutionProgress } from '../testing/TestQueueManager';\nimport { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { LRUCache } from 'lru-cache';\nimport { promisify } from 'util';\nimport { setTimeout } from 'timers/promises';\n\nexport interface TestExecutionResult {\n  execution_id: string;\n  test_case_id: number;\n  passed: boolean;\n  llm_output: string;\n  execution_time_ms: number;\n  model: string;\n  prompt_used: string;\n  created_at: Date;\n}\n\nexport class ProgressService extends EventEmitter {\n  private io: SocketIOServer;\n  private connectedClients: Map<string, Set<string>> = new Map(); // socketId -> subscribed executionIds\n  private messageQueue: Map<string, any[]> = new Map(); // Room -> queued messages\n  private progressCache: LRUCache<string, ExecutionProgress>;\n  private performanceMetrics: Map<string, number[]>;\n  private batchTimer: NodeJS.Timeout | null = null;\n  private compressionEnabled: boolean;\n  private rateLimitMap: Map<string, number> = new Map();\n  private lastActivity: Map<string, number> = new Map();\n\n  constructor(io: SocketIOServer) {\n    super();\n    this.io = io;\n    \n    // Initialize performance optimizations\n    this.progressCache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.compressionEnabled = true;\n    \n    // Configure Socket.IO for better performance\n    this.optimizeSocketIO();\n    \n    this.setupEventHandlers();\n    this.startBatchProcessor();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * Emit progress update to subscribed clients with batching\n   */\n  emitProgressUpdate(progress: ExecutionProgress): void {\n    const startTime = performance.now();\n    const roomName = `test-${progress.job_id}`;\n    \n    // Cache the progress\n    this.progressCache.set(progress.job_id, progress);\n    \n    // Add to batch queue for efficient processing\n    this.queueMessage(roomName, 'progress', progress);\n    \n    // Track performance\n    this.trackPerformance('emitProgressUpdate', performance.now() - startTime);\n  }\n\n  /**\n   * Emit test result to subscribed clients with compression\n   */\n  emitTestResult(testId: string, result: TestExecutionResult): void {\n    const startTime = performance.now();\n    const roomName = `test-${testId}`;\n    \n    // Compress large results if enabled\n    const compressedResult = this.compressionEnabled ? \n      this.compressTestResult(result) : result;\n    \n    this.queueMessage(roomName, 'test-complete', compressedResult);\n    \n    // Track performance\n    this.trackPerformance('emitTestResult', performance.now() - startTime);\n  }\n\n  /**\n   * Emit system resource updates with rate limiting\n   */\n  emitResourceUpdate(resources: any): void {\n    const now = Date.now();\n    const lastEmit = this.lastActivity.get('system-resources') || 0;\n    \n    // Rate limit to prevent overwhelming clients (max 1 per second)\n    if (now - lastEmit < 1000) {\n      return;\n    }\n    \n    this.lastActivity.set('system-resources', now);\n    this.queueMessage('system-resources', 'system-resources', resources);\n  }\n\n  /**\n   * Emit queue statistics updates with rate limiting\n   */\n  emitQueueStats(stats: any): void {\n    const now = Date.now();\n    const lastEmit = this.lastActivity.get('queue-stats') || 0;\n    \n    // Rate limit to prevent overwhelming clients (max 1 per 2 seconds)\n    if (now - lastEmit < 2000) {\n      return;\n    }\n    \n    this.lastActivity.set('queue-stats', now);\n    this.queueMessage('queue-stats', 'queue-stats', stats);\n  }\n\n  /**\n   * Get connected clients count\n   */\n  getConnectedClientsCount(): number {\n    return this.io.sockets.sockets.size;\n  }\n\n  /**\n   * Get subscriptions for a specific execution\n   */\n  getSubscriptionCount(executionId: string): number {\n    return this.io.sockets.adapter.rooms.get(`test-${executionId}`)?.size || 0;\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    this.io.on('connection', (socket) => {\n      console.log(`WebSocket client connected: ${socket.id}`);\n      this.connectedClients.set(socket.id, new Set());\n\n      // Handle test execution subscription\n      socket.on('subscribe-test', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          socket.join(`test-${executionId}`);\n          this.connectedClients.get(socket.id)?.add(executionId);\n          console.log(`Client ${socket.id} subscribed to test ${executionId}`);\n          \n          // Send acknowledgment\n          socket.emit('subscription-confirmed', { executionId, status: 'subscribed' });\n        }\n      });\n\n      // Handle test execution unsubscription\n      socket.on('unsubscribe-test', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          socket.leave(`test-${executionId}`);\n          this.connectedClients.get(socket.id)?.delete(executionId);\n          console.log(`Client ${socket.id} unsubscribed from test ${executionId}`);\n          \n          // Send acknowledgment\n          socket.emit('subscription-confirmed', { executionId, status: 'unsubscribed' });\n        }\n      });\n\n      // Handle request for current progress\n      socket.on('get-progress', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          // This would typically query the TestQueueManager for current progress\n          // For now, we'll emit a response indicating the request was received\n          socket.emit('progress-request-received', { executionId });\n        }\n      });\n\n      // Handle system resource subscription\n      socket.on('subscribe-system-resources', () => {\n        socket.join('system-resources');\n        console.log(`Client ${socket.id} subscribed to system resources`);\n        socket.emit('subscription-confirmed', { type: 'system-resources', status: 'subscribed' });\n      });\n\n      // Handle system resource unsubscription\n      socket.on('unsubscribe-system-resources', () => {\n        socket.leave('system-resources');\n        console.log(`Client ${socket.id} unsubscribed from system resources`);\n        socket.emit('subscription-confirmed', { type: 'system-resources', status: 'unsubscribed' });\n      });\n\n      // Handle queue statistics subscription\n      socket.on('subscribe-queue-stats', () => {\n        socket.join('queue-stats');\n        console.log(`Client ${socket.id} subscribed to queue statistics`);\n        socket.emit('subscription-confirmed', { type: 'queue-stats', status: 'subscribed' });\n      });\n\n      // Handle queue statistics unsubscription\n      socket.on('unsubscribe-queue-stats', () => {\n        socket.leave('queue-stats');\n        console.log(`Client ${socket.id} unsubscribed from queue statistics`);\n        socket.emit('subscription-confirmed', { type: 'queue-stats', status: 'unsubscribed' });\n      });\n\n      // Handle client disconnect\n      socket.on('disconnect', (reason) => {\n        console.log(`WebSocket client disconnected: ${socket.id}, reason: ${reason}`);\n        this.connectedClients.delete(socket.id);\n      });\n\n      // Handle errors\n      socket.on('error', (error) => {\n        console.error(`WebSocket error for client ${socket.id}:`, error);\n      });\n    });\n\n    // Handle adapter errors\n    this.io.on('error', (error) => {\n      console.error('Socket.IO server error:', error);\n    });\n  }\n\n  /**\n   * Broadcast message to all connected clients\n   */\n  broadcastMessage(event: string, data: any): void {\n    this.io.emit(event, data);\n  }\n\n  /**\n   * Send message to specific client\n   */\n  sendToClient(socketId: string, event: string, data: any): void {\n    this.io.to(socketId).emit(event, data);\n  }\n\n  /**\n   * Get all active rooms (subscriptions)\n   */\n  getActiveRooms(): string[] {\n    return Array.from(this.io.sockets.adapter.rooms.keys());\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.connectedClients.clear();\n    this.messageQueue.clear();\n    this.progressCache.clear();\n    this.performanceMetrics.clear();\n    this.rateLimitMap.clear();\n    this.lastActivity.clear();\n    \n    if (this.batchTimer) {\n      clearInterval(this.batchTimer);\n    }\n    \n    this.io.removeAllListeners();\n    this.removeAllListeners();\n  }\n  \n  /**\n   * Queue message for batch processing\n   */\n  private queueMessage(room: string, event: string, data: any): void {\n    if (!this.messageQueue.has(room)) {\n      this.messageQueue.set(room, []);\n    }\n    \n    const queue = this.messageQueue.get(room)!;\n    queue.push({ event, data, timestamp: Date.now() });\n    \n    // Limit queue size to prevent memory issues\n    if (queue.length > 100) {\n      queue.shift();\n    }\n  }\n  \n  /**\n   * Start batch processor for efficient message delivery\n   */\n  private startBatchProcessor(): void {\n    this.batchTimer = setInterval(() => {\n      this.processBatchedMessages();\n    }, 100); // Process every 100ms\n  }\n  \n  /**\n   * Process batched messages\n   */\n  private processBatchedMessages(): void {\n    const startTime = performance.now();\n    let processedCount = 0;\n    \n    for (const [room, messages] of this.messageQueue) {\n      if (messages.length === 0) continue;\n      \n      // Group messages by event type\n      const eventGroups = new Map<string, any[]>();\n      \n      messages.forEach(msg => {\n        if (!eventGroups.has(msg.event)) {\n          eventGroups.set(msg.event, []);\n        }\n        eventGroups.get(msg.event)!.push(msg.data);\n      });\n      \n      // Send grouped messages\n      for (const [event, dataArray] of eventGroups) {\n        if (dataArray.length === 1) {\n          this.io.to(room).emit(event, dataArray[0]);\n        } else {\n          // Send as batch if multiple messages\n          this.io.to(room).emit(`${event}-batch`, dataArray);\n        }\n      }\n      \n      processedCount += messages.length;\n      messages.length = 0; // Clear the queue\n    }\n    \n    if (processedCount > 0) {\n      this.trackPerformance('processBatchedMessages', performance.now() - startTime);\n    }\n  }\n  \n  /**\n   * Compress test result for efficient transmission\n   */\n  private compressTestResult(result: TestExecutionResult): any {\n    // Create a compressed version by removing or truncating large fields\n    const compressed = {\n      ...result,\n      llm_output: result.llm_output.length > 1000 ? \n        result.llm_output.substring(0, 1000) + '...[truncated]' : \n        result.llm_output,\n      prompt_used: result.prompt_used.length > 500 ? \n        result.prompt_used.substring(0, 500) + '...[truncated]' : \n        result.prompt_used\n    };\n    \n    return compressed;\n  }\n  \n  /**\n   * Optimize Socket.IO configuration\n   */\n  private optimizeSocketIO(): void {\n    // Note: In Socket.IO v4, these configurations are set during server initialization\n    // The engine properties are read-only and cannot be modified after creation\n    console.log('WebSocket optimizations applied (using default Socket.IO v4 settings)');\n  }\n  \n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    setInterval(() => {\n      this.cleanupInactiveClients();\n      this.logPerformanceStats();\n    }, 1000 * 60 * 5); // Every 5 minutes\n  }\n  \n  /**\n   * Clean up inactive clients\n   */\n  private cleanupInactiveClients(): void {\n    const now = Date.now();\n    const inactiveThreshold = 1000 * 60 * 10; // 10 minutes\n    \n    for (const [clientId, lastActivity] of this.lastActivity) {\n      if (now - lastActivity > inactiveThreshold) {\n        this.lastActivity.delete(clientId);\n        this.connectedClients.delete(clientId);\n        this.rateLimitMap.delete(clientId);\n      }\n    }\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 50) { // 50ms threshold\n      console.warn(`Slow WebSocket operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Log performance statistics\n   */\n  private logPerformanceStats(): void {\n    const stats: Record<string, any> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    if (Object.keys(stats).length > 0) {\n      console.log('WebSocket Performance Stats:', stats);\n    }\n  }\n  \n  /**\n   * Get current progress for a job\n   */\n  public getCurrentProgress(jobId: string): ExecutionProgress | null {\n    return this.progressCache.get(jobId) || null;\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Get connection statistics\n   */\n  public getConnectionStats(): {\n    totalConnections: number;\n    activeRooms: number;\n    messageQueueSize: number;\n    cacheSize: number;\n  } {\n    return {\n      totalConnections: this.connectedClients.size,\n      activeRooms: this.getActiveRooms().length,\n      messageQueueSize: Array.from(this.messageQueue.values()).reduce((sum, queue) => sum + queue.length, 0),\n      cacheSize: this.progressCache.size\n    };\n  }\n}"],"names":["ProgressService","EventEmitter","emitProgressUpdate","progress","startTime","performance","now","roomName","job_id","progressCache","set","queueMessage","trackPerformance","emitTestResult","testId","result","compressedResult","compressionEnabled","compressTestResult","emitResourceUpdate","resources","Date","lastEmit","lastActivity","get","emitQueueStats","stats","getConnectedClientsCount","io","sockets","size","getSubscriptionCount","executionId","adapter","rooms","setupEventHandlers","on","socket","console","log","id","connectedClients","Set","length","join","add","emit","status","leave","delete","type","reason","error","broadcastMessage","event","data","sendToClient","socketId","to","getActiveRooms","Array","from","keys","destroy","clear","messageQueue","performanceMetrics","rateLimitMap","batchTimer","clearInterval","removeAllListeners","room","has","queue","push","timestamp","shift","startBatchProcessor","setInterval","processBatchedMessages","processedCount","messages","eventGroups","Map","forEach","msg","dataArray","compressed","llm_output","substring","prompt_used","optimizeSocketIO","startHealthMonitoring","cleanupInactiveClients","logPerformanceStats","inactiveThreshold","clientId","operation","duration","metrics","warn","toFixed","avg","reduce","sum","time","max","Math","round","count","Object","getCurrentProgress","jobId","getPerformanceStats","min","getConnectionStats","totalConnections","activeRooms","messageQueueSize","values","cacheSize","LRUCache","ttl"],"mappings":"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"}