{"version":3,"names":["cov_1oh34ysxq9","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","axios","HealthCheckManager","initializeServices","services","push","name","url","process","env","OLLAMA_BASE_URL","check","response","get","timeout","status","REDIS_URL","checkService","serviceName","options","service","find","Error","retries","retryDelay","attempt","isHealthy","error","console","Promise","resolve","setTimeout","checkAllServices","results","all","map","waitForServices","startTime","Date","now","allHealthy","values","every","log","constructor","healthCheckManager"],"sources":["healthCheck.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport axios from 'axios';\nexport class HealthCheckManager {\n    initializeServices() {\n        // Ollama health check\n        this.services.push({\n            name: 'ollama',\n            url: process.env.OLLAMA_BASE_URL || 'http://ollama:11434',\n            check: async ()=>{\n                try {\n                    const response = await axios.get(`${process.env.OLLAMA_BASE_URL}/api/version`, {\n                        timeout: 3000\n                    });\n                    return response.status === 200;\n                } catch  {\n                    return false;\n                }\n            }\n        });\n        // Redis health check\n        if (process.env.REDIS_URL) {\n            this.services.push({\n                name: 'redis',\n                url: process.env.REDIS_URL,\n                check: async ()=>{\n                    // This would be implemented with redis client\n                    // For now, we'll assume it's healthy if configured\n                    return true;\n                }\n            });\n        }\n    }\n    async checkService(serviceName, options = {}) {\n        const service = this.services.find((s)=>s.name === serviceName);\n        if (!service) {\n            throw new Error(`Service ${serviceName} not found`);\n        }\n        const { retries = 3, retryDelay = 1000 } = options;\n        for(let attempt = 1; attempt <= retries; attempt++){\n            try {\n                const isHealthy = await service.check();\n                if (isHealthy) return true;\n            } catch (error) {\n                console.error(`Health check failed for ${serviceName} (attempt ${attempt}/${retries}):`, error);\n            }\n            if (attempt < retries) {\n                await new Promise((resolve)=>setTimeout(resolve, retryDelay));\n            }\n        }\n        return false;\n    }\n    async checkAllServices() {\n        const results = {};\n        await Promise.all(this.services.map(async (service)=>{\n            results[service.name] = await this.checkService(service.name);\n        }));\n        return results;\n    }\n    async waitForServices(timeout = 60000) {\n        const startTime = Date.now();\n        while(Date.now() - startTime < timeout){\n            const results = await this.checkAllServices();\n            const allHealthy = Object.values(results).every((status)=>status);\n            if (allHealthy) {\n                console.log('✅ All services are healthy');\n                return;\n            }\n            console.log('⏳ Waiting for services...', results);\n            await new Promise((resolve)=>setTimeout(resolve, 5000));\n        }\n        throw new Error(`Services did not become healthy within ${timeout}ms`);\n    }\n    constructor(){\n        _define_property(this, \"services\", []);\n        this.initializeServices();\n    }\n}\nexport const healthCheckManager = new HealthCheckManager();\n"],"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","ignoreList":[]}