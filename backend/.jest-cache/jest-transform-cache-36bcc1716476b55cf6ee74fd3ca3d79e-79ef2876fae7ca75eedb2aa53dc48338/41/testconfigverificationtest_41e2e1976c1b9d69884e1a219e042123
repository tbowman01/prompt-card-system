3d631664ba4091512b12d3dffdfa7404
// Test configuration verification
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jesttimeouts = require("./jest.timeouts");
describe('Test Configuration Verification', ()=>{
    // Test timeout configurations
    it('should have proper timeout configurations', ()=>{
        expect(_jesttimeouts.TestTimeouts.UNIT).toBe(5000);
        expect(_jesttimeouts.TestTimeouts.INTEGRATION).toBe(30000);
        expect(_jesttimeouts.TestTimeouts.DOCKER).toBe(120000);
        expect(_jesttimeouts.TestTimeouts.PERFORMANCE).toBe(300000);
        expect(_jesttimeouts.TestTimeouts.LLM_OPERATION).toBe(60000);
    });
    // Test Jest environment
    it('should be running in Jest environment', ()=>{
        expect(typeof jest).toBe('object');
        expect(typeof expect).toBe('function');
        expect(typeof describe).toBe('function');
        expect(typeof it).toBe('function');
    });
    // Test environment variables
    it('should have test environment variables set', ()=>{
        expect(process.env.NODE_ENV).toBe('test');
        expect(process.env.JWT_SECRET).toBe('test-jwt-secret');
        expect(process.env.LOG_LEVEL).toBe('error');
    });
    // Test timeout in action (fast test)
    it('should handle fast async operations within unit timeout', async ()=>{
        const start = Date.now();
        await new Promise((resolve)=>setTimeout(resolve, 100));
        const duration = Date.now() - start;
        expect(duration).toBeLessThan(_jesttimeouts.TestTimeouts.UNIT);
    });
    // Mock verification
    it('should have proper mocks available', ()=>{
        expect(global.fetch).toBeDefined();
        expect(jest.fn).toBeDefined();
        expect(jest.clearAllMocks).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy90ZXN0cy90ZXN0LWNvbmZpZy12ZXJpZmljYXRpb24udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUZXN0IGNvbmZpZ3VyYXRpb24gdmVyaWZpY2F0aW9uXG5pbXBvcnQgeyBUZXN0VGltZW91dHMgfSBmcm9tICcuL2plc3QudGltZW91dHMnO1xuXG5kZXNjcmliZSgnVGVzdCBDb25maWd1cmF0aW9uIFZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgLy8gVGVzdCB0aW1lb3V0IGNvbmZpZ3VyYXRpb25zXG4gIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIgdGltZW91dCBjb25maWd1cmF0aW9ucycsICgpID0+IHtcbiAgICBleHBlY3QoVGVzdFRpbWVvdXRzLlVOSVQpLnRvQmUoNTAwMCk7XG4gICAgZXhwZWN0KFRlc3RUaW1lb3V0cy5JTlRFR1JBVElPTikudG9CZSgzMDAwMCk7XG4gICAgZXhwZWN0KFRlc3RUaW1lb3V0cy5ET0NLRVIpLnRvQmUoMTIwMDAwKTtcbiAgICBleHBlY3QoVGVzdFRpbWVvdXRzLlBFUkZPUk1BTkNFKS50b0JlKDMwMDAwMCk7XG4gICAgZXhwZWN0KFRlc3RUaW1lb3V0cy5MTE1fT1BFUkFUSU9OKS50b0JlKDYwMDAwKTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBKZXN0IGVudmlyb25tZW50XG4gIGl0KCdzaG91bGQgYmUgcnVubmluZyBpbiBKZXN0IGVudmlyb25tZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdCh0eXBlb2YgamVzdCkudG9CZSgnb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHR5cGVvZiBleHBlY3QpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBkZXNjcmliZSkudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIGl0KS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICAvLyBUZXN0IGVudmlyb25tZW50IHZhcmlhYmxlc1xuICBpdCgnc2hvdWxkIGhhdmUgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgc2V0JywgKCkgPT4ge1xuICAgIGV4cGVjdChwcm9jZXNzLmVudi5OT0RFX0VOVikudG9CZSgndGVzdCcpO1xuICAgIGV4cGVjdChwcm9jZXNzLmVudi5KV1RfU0VDUkVUKS50b0JlKCd0ZXN0LWp3dC1zZWNyZXQnKTtcbiAgICBleHBlY3QocHJvY2Vzcy5lbnYuTE9HX0xFVkVMKS50b0JlKCdlcnJvcicpO1xuICB9KTtcblxuICAvLyBUZXN0IHRpbWVvdXQgaW4gYWN0aW9uIChmYXN0IHRlc3QpXG4gIGl0KCdzaG91bGQgaGFuZGxlIGZhc3QgYXN5bmMgb3BlcmF0aW9ucyB3aXRoaW4gdW5pdCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgZXhwZWN0KGR1cmF0aW9uKS50b0JlTGVzc1RoYW4oVGVzdFRpbWVvdXRzLlVOSVQpO1xuICB9KTtcblxuICAvLyBNb2NrIHZlcmlmaWNhdGlvblxuICBpdCgnc2hvdWxkIGhhdmUgcHJvcGVyIG1vY2tzIGF2YWlsYWJsZScsICgpID0+IHtcbiAgICBleHBlY3QoZ2xvYmFsLmZldGNoKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChqZXN0LmZuKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChqZXN0LmNsZWFyQWxsTW9ja3MpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7Il0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJUZXN0VGltZW91dHMiLCJVTklUIiwidG9CZSIsIklOVEVHUkFUSU9OIiwiRE9DS0VSIiwiUEVSRk9STUFOQ0UiLCJMTE1fT1BFUkFUSU9OIiwiamVzdCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkpXVF9TRUNSRVQiLCJMT0dfTEVWRUwiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJkdXJhdGlvbiIsInRvQmVMZXNzVGhhbiIsImdsb2JhbCIsImZldGNoIiwidG9CZURlZmluZWQiLCJmbiIsImNsZWFyQWxsTW9ja3MiXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQzs7Ozs7OEJBQ0w7QUFFN0JBLFNBQVMsbUNBQW1DO0lBQzFDLDhCQUE4QjtJQUM5QkMsR0FBRyw2Q0FBNkM7UUFDOUNDLE9BQU9DLDBCQUFZLENBQUNDLElBQUksRUFBRUMsSUFBSSxDQUFDO1FBQy9CSCxPQUFPQywwQkFBWSxDQUFDRyxXQUFXLEVBQUVELElBQUksQ0FBQztRQUN0Q0gsT0FBT0MsMEJBQVksQ0FBQ0ksTUFBTSxFQUFFRixJQUFJLENBQUM7UUFDakNILE9BQU9DLDBCQUFZLENBQUNLLFdBQVcsRUFBRUgsSUFBSSxDQUFDO1FBQ3RDSCxPQUFPQywwQkFBWSxDQUFDTSxhQUFhLEVBQUVKLElBQUksQ0FBQztJQUMxQztJQUVBLHdCQUF3QjtJQUN4QkosR0FBRyx5Q0FBeUM7UUFDMUNDLE9BQU8sT0FBT1EsTUFBTUwsSUFBSSxDQUFDO1FBQ3pCSCxPQUFPLE9BQU9BLFFBQVFHLElBQUksQ0FBQztRQUMzQkgsT0FBTyxPQUFPRixVQUFVSyxJQUFJLENBQUM7UUFDN0JILE9BQU8sT0FBT0QsSUFBSUksSUFBSSxDQUFDO0lBQ3pCO0lBRUEsNkJBQTZCO0lBQzdCSixHQUFHLDhDQUE4QztRQUMvQ0MsT0FBT1MsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEVBQUVSLElBQUksQ0FBQztRQUNsQ0gsT0FBT1MsUUFBUUMsR0FBRyxDQUFDRSxVQUFVLEVBQUVULElBQUksQ0FBQztRQUNwQ0gsT0FBT1MsUUFBUUMsR0FBRyxDQUFDRyxTQUFTLEVBQUVWLElBQUksQ0FBQztJQUNyQztJQUVBLHFDQUFxQztJQUNyQ0osR0FBRywyREFBMkQ7UUFDNUQsTUFBTWUsUUFBUUMsS0FBS0MsR0FBRztRQUN0QixNQUFNLElBQUlDLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVM7UUFDakQsTUFBTUUsV0FBV0wsS0FBS0MsR0FBRyxLQUFLRjtRQUM5QmQsT0FBT29CLFVBQVVDLFlBQVksQ0FBQ3BCLDBCQUFZLENBQUNDLElBQUk7SUFDakQ7SUFFQSxvQkFBb0I7SUFDcEJILEdBQUcsc0NBQXNDO1FBQ3ZDQyxPQUFPc0IsT0FBT0MsS0FBSyxFQUFFQyxXQUFXO1FBQ2hDeEIsT0FBT1EsS0FBS2lCLEVBQUUsRUFBRUQsV0FBVztRQUMzQnhCLE9BQU9RLEtBQUtrQixhQUFhLEVBQUVGLFdBQVc7SUFDeEM7QUFDRiJ9