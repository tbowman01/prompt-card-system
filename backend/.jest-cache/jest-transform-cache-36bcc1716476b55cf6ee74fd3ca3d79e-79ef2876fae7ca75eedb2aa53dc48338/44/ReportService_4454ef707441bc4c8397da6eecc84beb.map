{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/reports/ReportService.ts"],"sourcesContent":["import { ReportGenerator } from './generators/ReportGenerator';\nimport { PDFExporter } from './exporters/PDFExporter';\nimport { ExcelExporter } from './exporters/ExcelExporter';\nimport { ReportTemplates } from './templates/ReportTemplates';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { CostTracker } from '../CostTracker';\nimport { \n  ReportData, \n  ReportTemplate, \n  ReportFilters, \n  ReportExportOptions, \n  ReportGenerationProgress,\n  ReportSchedule\n} from '../../types/reports';\nimport { Database } from 'better-sqlite3';\nimport { initializeDatabase } from '../../database/connection';\nimport { EventEmitter } from 'events';\n\nexport class ReportService extends EventEmitter {\n  private reportGenerator: ReportGenerator;\n  private pdfExporter: PDFExporter;\n  private excelExporter: ExcelExporter;\n  private db: any;\n  private reportCache: Map<string, ReportData>;\n  private generationQueue: Map<string, Promise<ReportData>>;\n  private static instance: ReportService;\n\n  public constructor() {\n    super();\n    this.reportGenerator = new ReportGenerator();\n    this.pdfExporter = new PDFExporter();\n    this.excelExporter = new ExcelExporter();\n    this.reportCache = new Map();\n    this.generationQueue = new Map();\n    \n    // Initialize database first, then set up tables\n    this.initializeDb().then(() => {\n      this.initializeDatabase();\n    }).catch(error => {\n      console.error('Failed to initialize ReportService database:', error);\n    });\n  }\n\n  private async initializeDb(): Promise<void> {\n    this.db = await initializeDatabase();\n  }\n\n  /**\n   * Create test data for a prompt card\n   */\n  async createTestData(promptCardId: string): Promise<void> {\n    // Implementation for creating test data\n    console.log(`Creating test data for prompt card: ${promptCardId}`);\n  }\n\n  public static getInstance(): ReportService {\n    if (!ReportService.instance) {\n      ReportService.instance = new ReportService();\n    }\n    return ReportService.instance;\n  }\n\n  private initializeDatabase(): void {\n    // Report history table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS report_history (\n        id TEXT PRIMARY KEY,\n        template_id TEXT NOT NULL,\n        title TEXT NOT NULL,\n        description TEXT,\n        filters TEXT,\n        generated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        generation_time INTEGER,\n        total_executions INTEGER,\n        total_cost REAL,\n        success_rate REAL,\n        file_path TEXT,\n        file_size INTEGER,\n        export_format TEXT,\n        created_by TEXT,\n        status TEXT DEFAULT 'completed'\n      )\n    `);\n\n    // Report schedules table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS report_schedules (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        template_id TEXT NOT NULL,\n        filters TEXT,\n        frequency TEXT NOT NULL,\n        recipients TEXT,\n        export_format TEXT NOT NULL,\n        next_execution DATETIME,\n        last_execution DATETIME,\n        enabled BOOLEAN DEFAULT 1,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Report exports table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS report_exports (\n        id TEXT PRIMARY KEY,\n        report_id TEXT NOT NULL,\n        format TEXT NOT NULL,\n        file_path TEXT,\n        file_size INTEGER,\n        download_count INTEGER DEFAULT 0,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        expires_at DATETIME,\n        FOREIGN KEY (report_id) REFERENCES report_history(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Indexes\n    this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_report_history_template_id ON report_history(template_id);\n      CREATE INDEX IF NOT EXISTS idx_report_history_generated_at ON report_history(generated_at);\n      CREATE INDEX IF NOT EXISTS idx_report_schedules_next_execution ON report_schedules(next_execution);\n      CREATE INDEX IF NOT EXISTS idx_report_exports_report_id ON report_exports(report_id);\n    `);\n\n    console.log('Report service database initialized');\n  }\n\n  // Report Generation Methods\n  public async generateReport(\n    templateId: string,\n    filters: ReportFilters = {},\n    options: { saveToHistory?: boolean; userId?: string } = {}\n  ): Promise<ReportData> {\n    const cacheKey = this.generateCacheKey(templateId, filters);\n    \n    // Check cache first\n    if (this.reportCache.has(cacheKey)) {\n      const cachedReport = this.reportCache.get(cacheKey)!;\n      // Return cached report if it's less than 30 minutes old\n      if (Date.now() - cachedReport.generatedAt.getTime() < 30 * 60 * 1000) {\n        return cachedReport;\n      }\n    }\n\n    // Check if generation is already in progress\n    if (this.generationQueue.has(cacheKey)) {\n      return this.generationQueue.get(cacheKey)!;\n    }\n\n    // Generate new report\n    const generationPromise = this.generateReportInternal(templateId, filters, options);\n    this.generationQueue.set(cacheKey, generationPromise);\n\n    try {\n      const report = await generationPromise;\n      \n      // Cache the report\n      this.reportCache.set(cacheKey, report);\n      \n      // Save to history if requested\n      if (options.saveToHistory !== false) {\n        await this.saveReportToHistory(report, options.userId);\n      }\n      \n      return report;\n    } finally {\n      this.generationQueue.delete(cacheKey);\n    }\n  }\n\n  private async generateReportInternal(\n    templateId: string,\n    filters: ReportFilters,\n    options: { userId?: string }\n  ): Promise<ReportData> {\n    // Validate template\n    const template = ReportTemplates.getTemplate(templateId);\n    if (!template) {\n      throw new Error(`Template not found: ${templateId}`);\n    }\n\n    // Generate report with progress tracking\n    const report = await this.reportGenerator.generateReport(\n      templateId,\n      filters,\n      (progress) => {\n        this.emit('reportProgress', progress);\n      }\n    );\n\n    // Emit completion event\n    this.emit('reportGenerated', {\n      reportId: report.id,\n      templateId,\n      filters,\n      userId: options.userId,\n      generationTime: report.metadata.generationTime\n    });\n\n    return report;\n  }\n\n  // Export Methods\n  public async exportReport(\n    reportId: string,\n    format: 'pdf' | 'excel' | 'json' | 'csv',\n    options: ReportExportOptions = { format, includeCharts: true, includeRawData: false }\n  ): Promise<Buffer> {\n    // Get report from cache or history\n    const report = await this.getReportById(reportId);\n    if (!report) {\n      throw new Error(`Report not found: ${reportId}`);\n    }\n\n    let exportBuffer: Buffer;\n\n    switch (format) {\n      case 'pdf':\n        exportBuffer = await this.pdfExporter.exportToPDF(report, options);\n        break;\n      case 'excel':\n        exportBuffer = await this.excelExporter.exportToExcel(report, options);\n        break;\n      case 'json':\n        exportBuffer = Buffer.from(JSON.stringify(report, null, 2));\n        break;\n      case 'csv':\n        exportBuffer = await this.exportToCSV(report);\n        break;\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n\n    // Save export record\n    await this.saveExportRecord(reportId, format, exportBuffer.length);\n\n    // Emit export event\n    this.emit('reportExported', {\n      reportId,\n      format,\n      fileSize: exportBuffer.length,\n      timestamp: new Date()\n    });\n\n    return exportBuffer;\n  }\n\n  private async exportToCSV(report: ReportData): Promise<Buffer> {\n    const csvLines: string[] = [];\n    \n    // Add header\n    csvLines.push('Report,Template,Generated,Section,Type,Data');\n    \n    // Add report metadata\n    csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"Metadata\",\"Info\",\"Total Executions: ${report.metadata.totalExecutions}\"`);\n    csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"Metadata\",\"Info\",\"Total Cost: $${report.metadata.totalCost.toFixed(2)}\"`);\n    csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"Metadata\",\"Info\",\"Success Rate: ${report.metadata.successRate.toFixed(1)}%\"`);\n    \n    // Add section data\n    for (const section of report.sections) {\n      if (section.type === 'tables' && section.content?.rows) {\n        const tableData = section.content as any;\n        \n        // Add table headers\n        const headers = tableData.headers.map((h: string) => `\"${h}\"`).join(',');\n        csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"${section.title}\",\"TableHeader\",\"${headers}\"`);\n        \n        // Add table rows\n        tableData.rows.forEach((row: any[]) => {\n          const rowData = row.map((cell: any) => `\"${cell}\"`).join(',');\n          csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"${section.title}\",\"TableRow\",\"${rowData}\"`);\n        });\n      }\n    }\n    \n    return Buffer.from(csvLines.join('\\n'));\n  }\n\n  // Template Methods\n  public getTemplates(): ReportTemplate[] {\n    return ReportTemplates.getAllTemplates();\n  }\n\n  public getTemplate(templateId: string): ReportTemplate | undefined {\n    return ReportTemplates.getTemplate(templateId);\n  }\n\n  public getTemplatesByType(type: ReportTemplate['type']): ReportTemplate[] {\n    return ReportTemplates.getTemplatesByType(type);\n  }\n\n  public async createCustomTemplate(template: ReportTemplate): Promise<ReportTemplate> {\n    const errors = ReportTemplates.validateTemplate(template);\n    if (errors.length > 0) {\n      throw new Error(`Template validation failed: ${errors.join(', ')}`);\n    }\n\n    ReportTemplates.addCustomTemplate(template);\n    \n    // Emit template created event\n    this.emit('templateCreated', {\n      templateId: template.id,\n      templateName: template.name,\n      timestamp: new Date()\n    });\n\n    return template;\n  }\n\n  // Report History Methods\n  public async getReportHistory(\n    limit: number = 50,\n    offset: number = 0,\n    filters: { templateId?: string; userId?: string; startDate?: string; endDate?: string } = {}\n  ): Promise<{ reports: any[]; total: number }> {\n    let query = `\n      SELECT * FROM report_history \n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    if (filters.templateId) {\n      query += ` AND template_id = ?`;\n      params.push(filters.templateId);\n    }\n\n    if (filters.userId) {\n      query += ` AND created_by = ?`;\n      params.push(filters.userId);\n    }\n\n    if (filters.startDate) {\n      query += ` AND generated_at >= ?`;\n      params.push(filters.startDate);\n    }\n\n    if (filters.endDate) {\n      query += ` AND generated_at <= ?`;\n      params.push(filters.endDate);\n    }\n\n    query += ` ORDER BY generated_at DESC LIMIT ? OFFSET ?`;\n    params.push(limit, offset);\n\n    const reports = this.db.prepare(query).all(...params);\n    \n    // Get total count\n    const countQuery = query.replace(/SELECT \\* FROM/, 'SELECT COUNT(*) as count FROM').replace(/ORDER BY.*$/, '');\n    const totalResult = this.db.prepare(countQuery).get(...params.slice(0, -2)) as any;\n    const total = totalResult?.count || 0;\n\n    return { reports, total };\n  }\n\n  public async getReportById(reportId: string): Promise<ReportData | null> {\n    // Check cache first\n    const cacheKey = Array.from(this.reportCache.keys()).find(key => \n      this.reportCache.get(key)?.id === reportId\n    );\n    if (cacheKey) {\n      return this.reportCache.get(cacheKey)!;\n    }\n\n    // Check database\n    const record = this.db.prepare(`\n      SELECT * FROM report_history WHERE id = ?\n    `).get(reportId);\n\n    if (!record) {\n      return null;\n    }\n\n    // Reconstruct report data (this is a simplified version)\n    // In a real implementation, you might want to store the full report data\n    const template = ReportTemplates.getTemplate(record.template_id);\n    if (!template) {\n      return null;\n    }\n\n    const filters = record.filters ? JSON.parse(record.filters) : {};\n    \n    // Regenerate report (this could be optimized by storing the full report)\n    return await this.generateReport(record.template_id, filters, { saveToHistory: false });\n  }\n\n  public async deleteReport(reportId: string): Promise<boolean> {\n    const result = this.db.prepare(`\n      DELETE FROM report_history WHERE id = ?\n    `).run(reportId);\n\n    if (result.changes > 0) {\n      // Remove from cache\n      const cacheKey = Array.from(this.reportCache.keys()).find(key => \n        this.reportCache.get(key)?.id === reportId\n      );\n      if (cacheKey) {\n        this.reportCache.delete(cacheKey);\n      }\n\n      this.emit('reportDeleted', { reportId, timestamp: new Date() });\n      return true;\n    }\n\n    return false;\n  }\n\n  // Schedule Methods\n  public async createSchedule(schedule: Omit<ReportSchedule, 'id'>): Promise<ReportSchedule> {\n    const scheduleId = `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const fullSchedule: ReportSchedule = {\n      id: scheduleId,\n      ...schedule\n    };\n\n    this.db.prepare(`\n      INSERT INTO report_schedules \n      (id, name, template_id, filters, frequency, recipients, export_format, next_execution, enabled)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).run(\n      scheduleId,\n      schedule.name,\n      schedule.templateId,\n      JSON.stringify(schedule.filters),\n      schedule.frequency,\n      JSON.stringify(schedule.recipients),\n      schedule.format,\n      schedule.nextExecution.toISOString(),\n      schedule.enabled ? 1 : 0\n    );\n\n    this.emit('scheduleCreated', { scheduleId, scheduleName: schedule.name, timestamp: new Date() });\n    \n    return fullSchedule;\n  }\n\n  public async getSchedules(): Promise<ReportSchedule[]> {\n    const schedules = this.db.prepare(`\n      SELECT * FROM report_schedules ORDER BY created_at DESC\n    `).all();\n\n    return schedules.map(schedule => ({\n      id: schedule.id,\n      name: schedule.name,\n      templateId: schedule.template_id,\n      filters: schedule.filters ? JSON.parse(schedule.filters) : {},\n      frequency: schedule.frequency,\n      recipients: schedule.recipients ? JSON.parse(schedule.recipients) : [],\n      format: schedule.export_format,\n      nextExecution: new Date(schedule.next_execution),\n      lastExecution: schedule.last_execution ? new Date(schedule.last_execution) : undefined,\n      enabled: Boolean(schedule.enabled)\n    }));\n  }\n\n  public async executeScheduledReports(): Promise<void> {\n    const now = new Date();\n    const dueSchedules = this.db.prepare(`\n      SELECT * FROM report_schedules \n      WHERE enabled = 1 AND next_execution <= ?\n    `).all(now.toISOString());\n\n    for (const schedule of dueSchedules) {\n      try {\n        const filters = schedule.filters ? JSON.parse(schedule.filters) : {};\n        const report = await this.generateReport(schedule.template_id, filters, { saveToHistory: true });\n        \n        const exportBuffer = await this.exportReport(report.id, schedule.export_format);\n        \n        // In a real implementation, you would send the report to recipients\n        // For now, we just log the execution\n        console.log(`Executed scheduled report: ${schedule.name}`);\n        \n        // Update schedule\n        const nextExecution = this.calculateNextExecution(schedule.frequency, now);\n        this.db.prepare(`\n          UPDATE report_schedules \n          SET last_execution = ?, next_execution = ?\n          WHERE id = ?\n        `).run(now.toISOString(), nextExecution.toISOString(), schedule.id);\n        \n        this.emit('scheduleExecuted', {\n          scheduleId: schedule.id,\n          scheduleName: schedule.name,\n          reportId: report.id,\n          timestamp: now\n        });\n      } catch (error) {\n        console.error(`Failed to execute scheduled report ${schedule.name}:`, error);\n        this.emit('scheduleExecutionFailed', {\n          scheduleId: schedule.id,\n          scheduleName: schedule.name,\n          error: error.message,\n          timestamp: now\n        });\n      }\n    }\n  }\n\n  // Utility Methods\n  private generateCacheKey(templateId: string, filters: ReportFilters): string {\n    return `${templateId}:${JSON.stringify(filters)}`;\n  }\n\n  private async saveReportToHistory(report: ReportData, userId?: string): Promise<void> {\n    this.db.prepare(`\n      INSERT INTO report_history \n      (id, template_id, title, description, filters, generated_at, generation_time, \n       total_executions, total_cost, success_rate, created_by, status)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).run(\n      report.id,\n      report.template.id,\n      report.title,\n      report.description,\n      JSON.stringify(report.filters),\n      report.generatedAt.toISOString(),\n      report.metadata.generationTime,\n      report.metadata.totalExecutions,\n      report.metadata.totalCost,\n      report.metadata.successRate,\n      userId || 'system',\n      'completed'\n    );\n  }\n\n  private async saveExportRecord(reportId: string, format: string, fileSize: number): Promise<void> {\n    const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    this.db.prepare(`\n      INSERT INTO report_exports (id, report_id, format, file_size)\n      VALUES (?, ?, ?, ?)\n    `).run(exportId, reportId, format, fileSize);\n  }\n\n  private calculateNextExecution(frequency: string, fromDate: Date): Date {\n    const next = new Date(fromDate);\n    \n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        break;\n      case 'monthly':\n        next.setMonth(next.getMonth() + 1);\n        break;\n      case 'quarterly':\n        next.setMonth(next.getMonth() + 3);\n        break;\n      default:\n        next.setDate(next.getDate() + 1);\n    }\n    \n    return next;\n  }\n\n  // Cleanup Methods\n  public async cleanup(): Promise<void> {\n    // Clear old cache entries\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\n    for (const [key, report] of this.reportCache.entries()) {\n      if (report.generatedAt.getTime() < oneHourAgo) {\n        this.reportCache.delete(key);\n      }\n    }\n\n    // Clean up old export records\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    this.db.prepare(`\n      DELETE FROM report_exports \n      WHERE created_at < ?\n    `).run(thirtyDaysAgo.toISOString());\n\n    console.log('Report service cleanup completed');\n  }\n}\n\n// Export singleton instance\nexport const reportService = ReportService.getInstance();"],"names":["ReportService","reportService","EventEmitter","initializeDb","db","initializeDatabase","createTestData","promptCardId","console","log","getInstance","instance","exec","generateReport","templateId","filters","options","cacheKey","generateCacheKey","reportCache","has","cachedReport","get","Date","now","generatedAt","getTime","generationQueue","generationPromise","generateReportInternal","set","report","saveToHistory","saveReportToHistory","userId","delete","template","ReportTemplates","getTemplate","Error","reportGenerator","progress","emit","reportId","id","generationTime","metadata","exportReport","format","includeCharts","includeRawData","getReportById","exportBuffer","pdfExporter","exportToPDF","excelExporter","exportToExcel","Buffer","from","JSON","stringify","exportToCSV","saveExportRecord","length","fileSize","timestamp","csvLines","push","title","name","toISOString","totalExecutions","totalCost","toFixed","successRate","section","sections","type","content","rows","tableData","headers","map","h","join","forEach","row","rowData","cell","getTemplates","getAllTemplates","getTemplatesByType","createCustomTemplate","errors","validateTemplate","addCustomTemplate","templateName","getReportHistory","limit","offset","query","params","startDate","endDate","reports","prepare","all","countQuery","replace","totalResult","slice","total","count","Array","keys","find","key","record","template_id","parse","deleteReport","result","run","changes","createSchedule","schedule","scheduleId","Math","random","toString","substr","fullSchedule","frequency","recipients","nextExecution","enabled","scheduleName","getSchedules","schedules","export_format","next_execution","lastExecution","last_execution","undefined","Boolean","executeScheduledReports","dueSchedules","calculateNextExecution","error","message","description","exportId","fromDate","next","setDate","getDate","setMonth","getMonth","cleanup","oneHourAgo","entries","thirtyDaysAgo","ReportGenerator","PDFExporter","ExcelExporter","Map","then","catch"],"mappings":"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"}