{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/SampleTestCaseService.ts"],"sourcesContent":["import { db } from '../database/connection';\nimport { TestCase } from '../types/testCase';\n\nexport interface SampleTestCase {\n  name: string;\n  input_variables: Record<string, any>;\n  expected_output?: string;\n  assertions: Array<{\n    type: string;\n    expected: any;\n    description: string;\n  }>;\n  description: string;\n}\n\nexport class SampleTestCaseService {\n  private static instance: SampleTestCaseService;\n\n  public static getInstance(): SampleTestCaseService {\n    if (!SampleTestCaseService.instance) {\n      SampleTestCaseService.instance = new SampleTestCaseService();\n    }\n    return SampleTestCaseService.instance;\n  }\n\n  /**\n   * Get sample test cases for each prompt type\n   */\n  public getSampleTestCases(): Record<string, SampleTestCase[]> {\n    return {\n      \"Creative Story Generator\": [\n        {\n          name: \"Science Fiction Adventure\",\n          description: \"Test generation of a science fiction story with space setting\",\n          input_variables: {\n            genre: \"science fiction\",\n            setting: \"a distant space station orbiting Jupiter\",\n            character_name: \"Captain Maya Chen\",\n            character_description: \"a seasoned space explorer with a cybernetic arm\",\n            word_count: \"800\",\n            theme: \"discovery and sacrifice\",\n            target_audience: \"young adults\",\n            writing_style: \"descriptive and suspenseful\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Captain Maya Chen\",\n              description: \"Story should include the specified character name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Jupiter\",\n              description: \"Story should reference the Jupiter setting\"\n            },\n            {\n              type: \"word_count_range\",\n              expected: [700, 900],\n              description: \"Story should be approximately 800 words\"\n            },\n            {\n              type: \"tone_analysis\",\n              expected: \"suspenseful\",\n              description: \"Story should maintain a suspenseful tone\"\n            }\n          ]\n        },\n        {\n          name: \"Fantasy Quest\",\n          description: \"Test generation of a fantasy story with magical elements\",\n          input_variables: {\n            genre: \"fantasy\",\n            setting: \"an enchanted forest filled with ancient magic\",\n            character_name: \"Elara Moonwhisper\",\n            character_description: \"a young elf mage learning to control her powers\",\n            word_count: \"600\",\n            theme: \"courage and friendship\",\n            target_audience: \"children\",\n            writing_style: \"whimsical and magical\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Elara Moonwhisper\",\n              description: \"Story should include the specified character name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"magic\",\n              description: \"Story should include magical elements\"\n            },\n            {\n              type: \"reading_level\",\n              expected: \"children\",\n              description: \"Story should be appropriate for children\"\n            }\n          ]\n        }\n      ],\n      \"Technical Documentation Assistant\": [\n        {\n          name: \"REST API Documentation\",\n          description: \"Test documentation generation for a REST API project\",\n          input_variables: {\n            project_name: \"TaskFlow API\",\n            project_type: \"REST API\",\n            tech_stack: \"Node.js, Express.js, PostgreSQL, Redis\",\n            audience_level: \"intermediate\",\n            documentation_focus: \"API Endpoints and Authentication\",\n            tone: \"professional and clear\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"TaskFlow API\",\n              description: \"Documentation should reference the project name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Prerequisites\",\n              description: \"Should include prerequisites section\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Installation\",\n              description: \"Should include installation instructions\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Overview\", \"Getting Started\", \"API Reference\", \"Troubleshooting\"],\n              description: \"Should include all required sections\"\n            }\n          ]\n        },\n        {\n          name: \"Python Library Documentation\",\n          description: \"Test documentation for a Python library\",\n          input_variables: {\n            project_name: \"DataViz Pro\",\n            project_type: \"Python Library\",\n            tech_stack: \"Python 3.9+, matplotlib, pandas, numpy\",\n            audience_level: \"beginner\",\n            documentation_focus: \"Data Visualization Functions\",\n            tone: \"friendly and educational\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Python\",\n              description: \"Should reference Python technology\"\n            },\n            {\n              type: \"contains\",\n              expected: \"matplotlib\",\n              description: \"Should mention relevant dependencies\"\n            },\n            {\n              type: \"tone_analysis\",\n              expected: \"friendly\",\n              description: \"Should maintain a friendly, educational tone\"\n            }\n          ]\n        }\n      ],\n      \"Data Analysis Query Builder\": [\n        {\n          name: \"Sales Performance Analysis\",\n          description: \"Test generation of sales data analysis queries\",\n          input_variables: {\n            dataset_name: \"Q4 Sales Performance Data\",\n            analysis_goal: \"identify top-performing products and sales trends\",\n            data_source: \"PostgreSQL sales database\",\n            time_period: \"October 2024 - December 2024\",\n            key_metrics: \"revenue, units sold, customer acquisition\",\n            complexity_level: \"intermediate\",\n            output_format: \"executive summary with charts\",\n            include_charts: \"yes\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"SELECT\",\n              description: \"Should include SQL query examples\"\n            },\n            {\n              type: \"contains\",\n              expected: \"revenue\",\n              description: \"Should analyze specified key metrics\"\n            },\n            {\n              type: \"contains\",\n              expected: \"October 2024\",\n              description: \"Should reference the specified time period\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Data Exploration\", \"Statistical Analysis\", \"Insights and Findings\"],\n              description: \"Should include required analysis sections\"\n            }\n          ]\n        },\n        {\n          name: \"Customer Behavior Analysis\",\n          description: \"Test customer behavior pattern analysis\",\n          input_variables: {\n            dataset_name: \"Customer Journey Analytics\",\n            analysis_goal: \"understand customer purchase patterns and lifetime value\",\n            data_source: \"MongoDB customer events collection\",\n            time_period: \"January 2024 - December 2024\",\n            key_metrics: \"conversion rate, average order value, customer lifetime value\",\n            complexity_level: \"advanced\",\n            output_format: \"detailed technical report\",\n            include_charts: \"yes\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"MongoDB\",\n              description: \"Should reference the correct data source\"\n            },\n            {\n              type: \"contains\",\n              expected: \"conversion rate\",\n              description: \"Should analyze conversion metrics\"\n            },\n            {\n              type: \"complexity_check\",\n              expected: \"advanced\",\n              description: \"Should provide advanced-level analysis\"\n            }\n          ]\n        }\n      ],\n      \"Problem-Solving Framework\": [\n        {\n          name: \"Software Performance Issue\",\n          description: \"Test problem-solving approach for technical performance issues\",\n          input_variables: {\n            problem_description: \"Web application response times have increased by 300% over the past month\",\n            problem_context: \"E-commerce platform serving 10,000+ daily users\",\n            stakeholders: \"development team, operations team, business stakeholders\",\n            constraints: \"limited budget, 2-week timeline, cannot take system offline\",\n            timeline: \"2 weeks\",\n            methodology: \"root cause analysis\",\n            analysis_depth: \"comprehensive\",\n            decision_criteria: \"impact, feasibility, cost\",\n            priority_level: \"high\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"root cause analysis\",\n              description: \"Should use specified methodology\"\n            },\n            {\n              type: \"contains\",\n              expected: \"300%\",\n              description: \"Should reference the specific performance issue\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Problem Definition\", \"Solution Framework\", \"Implementation Plan\"],\n              description: \"Should include all framework sections\"\n            },\n            {\n              type: \"timeline_check\",\n              expected: \"2 weeks\",\n              description: \"Should respect timeline constraints\"\n            }\n          ]\n        }\n      ],\n      \"Code Generation Assistant\": [\n        {\n          name: \"Python REST API\",\n          description: \"Test generation of Python REST API code\",\n          input_variables: {\n            language: \"Python\",\n            project_name: \"User Management API\",\n            functionality_description: \"CRUD operations for user accounts with authentication\",\n            framework: \"FastAPI\",\n            coding_style: \"PEP 8\",\n            requirements: \"JWT authentication, password hashing, email validation, PostgreSQL database\",\n            performance_priority: \"security and maintainability\",\n            target_environment: \"Docker container\",\n            complexity_level: \"intermediate\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"FastAPI\",\n              description: \"Should use specified framework\"\n            },\n            {\n              type: \"contains\",\n              expected: \"JWT\",\n              description: \"Should implement JWT authentication\"\n            },\n            {\n              type: \"contains\",\n              expected: \"def\",\n              description: \"Should contain Python function definitions\"\n            },\n            {\n              type: \"security_check\",\n              expected: \"password hashing\",\n              description: \"Should implement secure password handling\"\n            }\n          ]\n        },\n        {\n          name: \"React Component\",\n          description: \"Test generation of React component with TypeScript\",\n          input_variables: {\n            language: \"TypeScript\",\n            project_name: \"Task Dashboard\",\n            functionality_description: \"Interactive task management component with drag-and-drop\",\n            framework: \"React with TypeScript\",\n            coding_style: \"Airbnb style guide\",\n            requirements: \"drag-and-drop functionality, state management, responsive design, accessibility\",\n            performance_priority: \"user experience and accessibility\",\n            target_environment: \"modern browsers\",\n            complexity_level: \"advanced\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"React\",\n              description: \"Should use React framework\"\n            },\n            {\n              type: \"contains\",\n              expected: \"interface\",\n              description: \"Should include TypeScript interfaces\"\n            },\n            {\n              type: \"contains\",\n              expected: \"drag\",\n              description: \"Should implement drag-and-drop functionality\"\n            },\n            {\n              type: \"accessibility_check\",\n              expected: \"aria-\",\n              description: \"Should include accessibility attributes\"\n            }\n          ]\n        }\n      ],\n      \"Business Strategy Consultant\": [\n        {\n          name: \"SaaS Market Entry\",\n          description: \"Test business strategy analysis for SaaS market entry\",\n          input_variables: {\n            company_name: \"TechFlow Solutions\",\n            industry: \"SaaS productivity tools\",\n            business_stage: \"startup\",\n            target_market: \"small to medium businesses\",\n            primary_challenge: \"market differentiation in crowded space\",\n            focus_area_1: \"competitive positioning\",\n            focus_area_2: \"pricing strategy\",\n            focus_area_3: \"customer acquisition\",\n            analysis_depth: \"comprehensive\",\n            time_horizon: \"18 months\",\n            budget_range: \"$500K - $1M\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"TechFlow Solutions\",\n              description: \"Should reference the company name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"SWOT\",\n              description: \"Should include SWOT analysis\"\n            },\n            {\n              type: \"contains\",\n              expected: \"competitive positioning\",\n              description: \"Should address specified focus areas\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Market Analysis\", \"Competitive Landscape\", \"SWOT Analysis\", \"Strategic Recommendations\"],\n              description: \"Should include all required analysis sections\"\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  /**\n   * Create test cases for a prompt card\n   */\n  public async createTestCasesForPrompt(promptCardId: number, promptTitle: string): Promise<TestCase[]> {\n    try {\n      const sampleTestCases = this.getSampleTestCases()[promptTitle];\n      \n      if (!sampleTestCases || sampleTestCases.length === 0) {\n        console.log(`No sample test cases found for prompt: ${promptTitle}`);\n        return [];\n      }\n\n      const createdTestCases: TestCase[] = [];\n\n      for (const testCase of sampleTestCases) {\n        // Check if test case already exists\n        const existing = await db.prepare(`\n          SELECT id FROM test_cases WHERE prompt_card_id = ? AND name = ?\n        `).get(promptCardId, testCase.name);\n\n        if (!existing) {\n          const result = await db.prepare(`\n            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n            VALUES (?, ?, ?, ?, ?)\n          `).run(\n            promptCardId,\n            testCase.name,\n            JSON.stringify(testCase.input_variables),\n            testCase.expected_output || '',\n            JSON.stringify(testCase.assertions)\n          );\n\n          const newTestCase = await db.prepare(`\n            SELECT * FROM test_cases WHERE id = ?\n          `).get(result.lastInsertRowid) as TestCase;\n\n          createdTestCases.push({\n            ...newTestCase,\n            input_variables: JSON.parse(newTestCase.input_variables),\n            assertions: JSON.parse(newTestCase.assertions || '[]')\n          });\n\n          console.log(`Created test case: ${testCase.name} for prompt: ${promptTitle}`);\n        }\n      }\n\n      return createdTestCases;\n    } catch (error) {\n      console.error('Failed to create test cases for prompt:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available test case templates by prompt title\n   */\n  public getTestCaseTemplatesForPrompt(promptTitle: string): SampleTestCase[] {\n    return this.getSampleTestCases()[promptTitle] || [];\n  }\n\n  /**\n   * Get all available prompt titles with test cases\n   */\n  public getPromptsWithTestCases(): string[] {\n    return Object.keys(this.getSampleTestCases());\n  }\n\n  /**\n   * Initialize test cases for all sample prompts in database\n   */\n  public async initializeAllTestCases(): Promise<void> {\n    try {\n      // Get all prompt cards that match sample prompt titles\n      const promptCards = await db.prepare(`\n        SELECT id, title FROM prompt_cards \n        WHERE title IN (${Object.keys(this.getSampleTestCases()).map(() => '?').join(',')})\n      `).all(...Object.keys(this.getSampleTestCases()));\n\n      for (const card of promptCards) {\n        await this.createTestCasesForPrompt(card.id, card.title);\n      }\n\n      console.log(`Test case initialization completed for ${promptCards.length} prompt cards`);\n    } catch (error) {\n      console.error('Failed to initialize test cases:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate test case structure\n   */\n  public validateTestCase(testCase: SampleTestCase): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!testCase.name?.trim()) {\n      errors.push('Test case name is required');\n    }\n\n    if (!testCase.input_variables || Object.keys(testCase.input_variables).length === 0) {\n      errors.push('Input variables are required');\n    }\n\n    if (!testCase.assertions || testCase.assertions.length === 0) {\n      errors.push('At least one assertion is required');\n    }\n\n    // Validate assertions\n    if (testCase.assertions) {\n      testCase.assertions.forEach((assertion, index) => {\n        if (!assertion.type) {\n          errors.push(`Assertion ${index + 1}: type is required`);\n        }\n        if (assertion.expected === undefined || assertion.expected === null) {\n          errors.push(`Assertion ${index + 1}: expected value is required`);\n        }\n        if (!assertion.description?.trim()) {\n          errors.push(`Assertion ${index + 1}: description is required`);\n        }\n      });\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get test case statistics\n   */\n  public getTestCaseStats() {\n    const testCases = this.getSampleTestCases();\n    const promptTitles = Object.keys(testCases);\n    const totalTestCases = promptTitles.reduce((sum, title) => sum + testCases[title].length, 0);\n    const averageTestCasesPerPrompt = Math.round(totalTestCases / promptTitles.length);\n\n    return {\n      totalPrompts: promptTitles.length,\n      totalTestCases,\n      averageTestCasesPerPrompt,\n      promptsBreakdown: promptTitles.map(title => ({\n        prompt: title,\n        testCaseCount: testCases[title].length\n      }))\n    };\n  }\n}\n\nexport default SampleTestCaseService;"],"names":["SampleTestCaseService","getInstance","instance","getSampleTestCases","name","description","input_variables","genre","setting","character_name","character_description","word_count","theme","target_audience","writing_style","assertions","type","expected","project_name","project_type","tech_stack","audience_level","documentation_focus","tone","dataset_name","analysis_goal","data_source","time_period","key_metrics","complexity_level","output_format","include_charts","problem_description","problem_context","stakeholders","constraints","timeline","methodology","analysis_depth","decision_criteria","priority_level","language","functionality_description","framework","coding_style","requirements","performance_priority","target_environment","company_name","industry","business_stage","target_market","primary_challenge","focus_area_1","focus_area_2","focus_area_3","time_horizon","budget_range","createTestCasesForPrompt","promptCardId","promptTitle","sampleTestCases","length","console","log","createdTestCases","testCase","existing","db","prepare","get","result","run","JSON","stringify","expected_output","newTestCase","lastInsertRowid","push","parse","error","getTestCaseTemplatesForPrompt","getPromptsWithTestCases","Object","keys","initializeAllTestCases","promptCards","map","join","all","card","id","title","validateTestCase","errors","trim","forEach","assertion","index","undefined","isValid","getTestCaseStats","testCases","promptTitles","totalTestCases","reduce","sum","averageTestCasesPerPrompt","Math","round","totalPrompts","promptsBreakdown","prompt","testCaseCount"],"mappings":"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"}