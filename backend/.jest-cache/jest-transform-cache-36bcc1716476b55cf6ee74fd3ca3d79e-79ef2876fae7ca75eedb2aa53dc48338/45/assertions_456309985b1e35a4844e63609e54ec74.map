{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/assertions.ts"],"sourcesContent":["import express from 'express';\nimport { llmService } from '../services/llmService';\nimport { assertionEngine } from '../services/assertions';\nimport { EnhancedAssertionType } from '../services/assertions/AssertionEngine';\n\nexport const assertionRoutes = express.Router();\n\n/**\n * Get available assertion types\n */\nassertionRoutes.get('/types', async (req, res) => {\n  try {\n    const types = llmService.getAvailableAssertionTypes();\n    const typeDefinitions = types.map(type => {\n      const definition = assertionEngine.getRegisteredTypes().includes(type) ? \n        assertionEngine.getStatistics() : null;\n      return {\n        name: type,\n        description: `${type} assertion validation`,\n        supported: true\n      };\n    });\n\n    res.json({\n      success: true,\n      data: {\n        types: typeDefinitions,\n        totalTypes: types.length\n      }\n    });\n  } catch (error) {\n    console.error('Error getting assertion types:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Get assertion execution statistics\n */\nassertionRoutes.get('/statistics', async (req, res) => {\n  try {\n    const stats = llmService.getAssertionStatistics();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting assertion statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Test assertion validation with sample data\n */\nassertionRoutes.post('/test', async (req, res) => {\n  try {\n    const { output, assertions, context } = req.body;\n\n    if (!output || !assertions || !Array.isArray(assertions)) {\n      return res.status(400).json({\n        success: false,\n        error: 'output and assertions array are required'\n      });\n    }\n\n    const results = await llmService.validateAssertions(output, assertions, context);\n    \n    const summary = {\n      totalAssertions: results.length,\n      passedAssertions: results.filter(r => r.passed).length,\n      failedAssertions: results.filter(r => !r.passed).length,\n      averageExecutionTime: results.reduce((sum, r) => sum + (r.executionTime || 0), 0) / results.length,\n      overallPassed: results.every(r => r.passed)\n    };\n\n    res.json({\n      success: true,\n      data: {\n        results,\n        summary\n      }\n    });\n  } catch (error) {\n    console.error('Error testing assertions:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Validate custom assertion code\n */\nassertionRoutes.post('/validate-custom', async (req, res) => {\n  try {\n    const { code, sampleOutput, description } = req.body;\n\n    if (!code || !sampleOutput) {\n      return res.status(400).json({\n        success: false,\n        error: 'code and sampleOutput are required'\n      });\n    }\n\n    const customAssertion: EnhancedAssertionType = {\n      type: 'custom',\n      value: code,\n      description: description || 'Custom assertion validation'\n    };\n\n    const results = await llmService.validateAssertions(sampleOutput, [customAssertion]);\n    \n    const result = results[0];\n    \n    res.json({\n      success: true,\n      data: {\n        valid: !result.error,\n        result: result.passed,\n        error: result.error,\n        executionTime: result.executionTime,\n        metadata: result.metadata\n      }\n    });\n  } catch (error) {\n    console.error('Error validating custom assertion:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Get semantic similarity score between two texts\n */\nassertionRoutes.post('/semantic-similarity', async (req, res) => {\n  try {\n    const { text1, text2, threshold } = req.body;\n\n    if (!text1 || !text2) {\n      return res.status(400).json({\n        success: false,\n        error: 'text1 and text2 are required'\n      });\n    }\n\n    const assertion: EnhancedAssertionType = {\n      type: 'semantic-similarity',\n      value: text2,\n      threshold: threshold || 0.8\n    };\n\n    const results = await llmService.validateAssertions(text1, [assertion]);\n    const result = results[0];\n    \n    res.json({\n      success: true,\n      data: {\n        similarity: result.score || 0,\n        threshold: threshold || 0.8,\n        passed: result.passed,\n        metadata: result.metadata\n      }\n    });\n  } catch (error) {\n    console.error('Error computing semantic similarity:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Analyze text sentiment\n */\nassertionRoutes.post('/sentiment', async (req, res) => {\n  try {\n    const { text, expectedSentiment, threshold } = req.body;\n\n    if (!text) {\n      return res.status(400).json({\n        success: false,\n        error: 'text is required'\n      });\n    }\n\n    const assertion: EnhancedAssertionType = {\n      type: 'sentiment',\n      value: expectedSentiment || 'neutral',\n      threshold: threshold || 0.6\n    };\n\n    const results = await llmService.validateAssertions(text, [assertion]);\n    const result = results[0];\n    \n    res.json({\n      success: true,\n      data: {\n        sentiment: result.metadata?.actualSentiment || 'unknown',\n        confidence: result.score || 0,\n        expectedSentiment: expectedSentiment || 'neutral',\n        passed: result.passed,\n        metadata: result.metadata\n      }\n    });\n  } catch (error) {\n    console.error('Error analyzing sentiment:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Detect text language\n */\nassertionRoutes.post('/language', async (req, res) => {\n  try {\n    const { text, expectedLanguage } = req.body;\n\n    if (!text) {\n      return res.status(400).json({\n        success: false,\n        error: 'text is required'\n      });\n    }\n\n    const assertion: EnhancedAssertionType = {\n      type: 'language',\n      value: expectedLanguage || 'en'\n    };\n\n    const results = await llmService.validateAssertions(text, [assertion]);\n    const result = results[0];\n    \n    res.json({\n      success: true,\n      data: {\n        detectedLanguage: result.metadata?.detectedLanguage || 'unknown',\n        confidence: result.score || 0,\n        expectedLanguage: expectedLanguage || 'en',\n        passed: result.passed,\n        alternatives: result.metadata?.alternatives || []\n      }\n    });\n  } catch (error) {\n    console.error('Error detecting language:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Check text toxicity\n */\nassertionRoutes.post('/toxicity', async (req, res) => {\n  try {\n    const { text, maxToxicity } = req.body;\n\n    if (!text) {\n      return res.status(400).json({\n        success: false,\n        error: 'text is required'\n      });\n    }\n\n    const assertion: EnhancedAssertionType = {\n      type: 'toxicity',\n      value: maxToxicity || 0.5\n    };\n\n    const results = await llmService.validateAssertions(text, [assertion]);\n    const result = results[0];\n    \n    res.json({\n      success: true,\n      data: {\n        toxicityScore: result.score || 0,\n        maxToxicity: maxToxicity || 0.5,\n        passed: result.passed,\n        categories: result.metadata?.categories || {},\n        isToxic: (result.score || 0) > 0.7\n      }\n    });\n  } catch (error) {\n    console.error('Error checking toxicity:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Export assertion type definitions\n */\nassertionRoutes.get('/export', async (req, res) => {\n  try {\n    const exportData = assertionEngine.exportTypes();\n    \n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"assertion-types.json\"');\n    res.send(exportData);\n  } catch (error) {\n    console.error('Error exporting assertion types:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Import assertion type definitions\n */\nassertionRoutes.post('/import', async (req, res) => {\n  try {\n    const { data } = req.body;\n\n    if (!data) {\n      return res.status(400).json({\n        success: false,\n        error: 'data is required'\n      });\n    }\n\n    const jsonData = typeof data === 'string' ? data : JSON.stringify(data);\n    await assertionEngine.importTypes(jsonData);\n    \n    res.json({\n      success: true,\n      message: 'Assertion types imported successfully'\n    });\n  } catch (error) {\n    console.error('Error importing assertion types:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Register a new custom assertion type\n */\nassertionRoutes.post('/register', async (req, res) => {\n  try {\n    const { name, description, validatorCode, parameters, examples } = req.body;\n\n    if (!name || !validatorCode) {\n      return res.status(400).json({\n        success: false,\n        error: 'name and validatorCode are required'\n      });\n    }\n\n    // Create validator function from code\n    const validator = new Function('output', 'assertion', 'context', `\n      return (async function() {\n        ${validatorCode}\n      })();\n    `);\n\n    await assertionEngine.registerAssertionType(name, validator as any);\n    \n    res.json({\n      success: true,\n      message: `Assertion type '${name}' registered successfully`\n    });\n  } catch (error) {\n    console.error('Error registering assertion type:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * Health check for assertion system\n */\nassertionRoutes.get('/health', async (req, res) => {\n  try {\n    const stats = llmService.getAssertionStatistics();\n    const types = llmService.getAvailableAssertionTypes();\n    \n    res.json({\n      success: true,\n      data: {\n        status: 'healthy',\n        availableTypes: types.length,\n        totalExecutions: stats.totalAssertions,\n        systemReady: true\n      }\n    });\n  } catch (error) {\n    console.error('Error checking assertion system health:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport default assertionRoutes;"],"names":["assertionRoutes","express","Router","get","req","res","types","llmService","getAvailableAssertionTypes","typeDefinitions","map","type","definition","assertionEngine","getRegisteredTypes","includes","getStatistics","name","description","supported","json","success","data","totalTypes","length","error","console","status","Error","message","stats","getAssertionStatistics","post","output","assertions","context","body","Array","isArray","results","validateAssertions","summary","totalAssertions","passedAssertions","filter","r","passed","failedAssertions","averageExecutionTime","reduce","sum","executionTime","overallPassed","every","code","sampleOutput","customAssertion","value","result","valid","metadata","text1","text2","threshold","assertion","similarity","score","text","expectedSentiment","sentiment","actualSentiment","confidence","expectedLanguage","detectedLanguage","alternatives","maxToxicity","toxicityScore","categories","isToxic","exportData","exportTypes","setHeader","send","jsonData","JSON","stringify","importTypes","validatorCode","parameters","examples","validator","Function","registerAssertionType","availableTypes","totalExecutions","systemReady"],"mappings":"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"}