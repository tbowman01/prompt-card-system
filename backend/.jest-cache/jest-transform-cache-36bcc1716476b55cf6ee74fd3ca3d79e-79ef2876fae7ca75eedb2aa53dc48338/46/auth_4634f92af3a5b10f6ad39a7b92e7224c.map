{"version":3,"names":["cov_29zt2ef71b","actualCoverage","Router","generateTokens","hashPassword","verifyPassword","refreshToken","logout","verifyToken","requireRole","authRateLimit","sanitizeRequestBody","handleValidationErrors","body","csrfProtection","router","s","use","users","id","email","password","role","permissions","createdAt","Date","isActive","findUserByEmail","f","find","user","b","toLowerCase","findUserById","loginValidation","isEmail","normalizeEmail","isLength","max","withMessage","min","registerValidation","matches","custom","value","req","Error","post","res","status","json","success","error","code","isValidPassword","lastLogin","tokens","data","console","existingUser","hashedPassword","newUser","String","length","push","get","userList","filter","map","authRoutes"],"sources":["auth.ts"],"sourcesContent":["import { Router } from 'express';\nimport { generateTokens, hashPassword, verifyPassword, refreshToken, logout, verifyToken, requireRole } from '../middleware/auth';\nimport { authRateLimit } from '../middleware/rateLimiting';\nimport { sanitizeRequestBody, handleValidationErrors } from '../middleware/validation';\nimport { body } from 'express-validator';\nimport { csrfProtection } from '../middleware/security';\nconst router = Router();\n// Apply rate limiting to all auth routes\nrouter.use(authRateLimit);\n// Apply CSRF protection to state-changing operations\nrouter.use([\n    'POST',\n    'PUT',\n    'DELETE'\n], csrfProtection);\n// Apply input sanitization\nrouter.use(sanitizeRequestBody);\nconst users = [\n    {\n        id: '1',\n        email: 'admin@example.com',\n        password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n        role: 'admin',\n        permissions: [\n            'read',\n            'write',\n            'delete',\n            'admin'\n        ],\n        createdAt: new Date(),\n        isActive: true\n    },\n    {\n        id: '2',\n        email: 'user@example.com',\n        password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n        role: 'user',\n        permissions: [\n            'read',\n            'write'\n        ],\n        createdAt: new Date(),\n        isActive: true\n    }\n];\n// Helper functions\nconst findUserByEmail = (email)=>{\n    return users.find((user)=>user.email.toLowerCase() === email.toLowerCase() && user.isActive);\n};\nconst findUserById = (id)=>{\n    return users.find((user)=>user.id === id && user.isActive);\n};\n// Validation schemas\nconst loginValidation = [\n    body('email').isEmail().normalizeEmail().isLength({\n        max: 255\n    }).withMessage('Valid email is required'),\n    body('password').isLength({\n        min: 6,\n        max: 128\n    }).withMessage('Password must be between 6 and 128 characters'),\n    handleValidationErrors\n];\nconst registerValidation = [\n    body('email').isEmail().normalizeEmail().isLength({\n        max: 255\n    }).withMessage('Valid email is required'),\n    body('password').isLength({\n        min: 8,\n        max: 128\n    }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/).withMessage('Password must contain at least 8 characters with uppercase, lowercase, number, and special character'),\n    body('confirmPassword').custom((value, { req })=>{\n        if (value !== req.body.password) {\n            throw new Error('Password confirmation does not match password');\n        }\n        return true;\n    }),\n    handleValidationErrors\n];\n// POST /auth/login\nrouter.post('/login', loginValidation, async (req, res)=>{\n    try {\n        const { email, password } = req.body;\n        const user = findUserByEmail(email);\n        if (!user) {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid credentials',\n                code: 'INVALID_CREDENTIALS'\n            });\n            return;\n        }\n        const isValidPassword = await verifyPassword(password, user.password);\n        if (!isValidPassword) {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid credentials',\n                code: 'INVALID_CREDENTIALS'\n            });\n            return;\n        }\n        user.lastLogin = new Date();\n        const tokens = generateTokens({\n            id: user.id,\n            email: user.email,\n            role: user.role,\n            permissions: user.permissions\n        });\n        res.json({\n            success: true,\n            data: {\n                user: {\n                    id: user.id,\n                    email: user.email,\n                    role: user.role,\n                    permissions: user.permissions,\n                    lastLogin: user.lastLogin\n                },\n                tokens\n            }\n        });\n    } catch (error) {\n        console.error('Login error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Login failed',\n            code: 'LOGIN_ERROR'\n        });\n    }\n});\n// POST /auth/register\nrouter.post('/register', registerValidation, async (req, res)=>{\n    try {\n        const { email, password } = req.body;\n        const existingUser = findUserByEmail(email);\n        if (existingUser) {\n            res.status(409).json({\n                success: false,\n                error: 'User already exists',\n                code: 'USER_EXISTS'\n            });\n            return;\n        }\n        const hashedPassword = await hashPassword(password);\n        const newUser = {\n            id: String(users.length + 1),\n            email,\n            password: hashedPassword,\n            role: 'user',\n            permissions: [\n                'read',\n                'write'\n            ],\n            createdAt: new Date(),\n            isActive: true\n        };\n        users.push(newUser);\n        const tokens = generateTokens({\n            id: newUser.id,\n            email: newUser.email,\n            role: newUser.role,\n            permissions: newUser.permissions\n        });\n        res.status(201).json({\n            success: true,\n            data: {\n                user: {\n                    id: newUser.id,\n                    email: newUser.email,\n                    role: newUser.role,\n                    permissions: newUser.permissions,\n                    createdAt: newUser.createdAt\n                },\n                tokens\n            }\n        });\n    } catch (error) {\n        console.error('Registration error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Registration failed',\n            code: 'REGISTRATION_ERROR'\n        });\n    }\n});\n// POST /auth/refresh\nrouter.post('/refresh', refreshToken);\n// POST /auth/logout\nrouter.post('/logout', logout);\n// GET /auth/me\nrouter.get('/me', verifyToken, (req, res)=>{\n    const user = findUserById(req.user.id);\n    if (!user) {\n        res.status(404).json({\n            success: false,\n            error: 'User not found',\n            code: 'USER_NOT_FOUND'\n        });\n        return;\n    }\n    res.json({\n        success: true,\n        data: {\n            user: {\n                id: user.id,\n                email: user.email,\n                role: user.role,\n                permissions: user.permissions,\n                createdAt: user.createdAt,\n                lastLogin: user.lastLogin\n            }\n        }\n    });\n});\n// GET /auth/users - Admin only\nrouter.get('/users', verifyToken, requireRole([\n    'admin'\n]), (req, res)=>{\n    const userList = users.filter((user)=>user.isActive).map((user)=>({\n            id: user.id,\n            email: user.email,\n            role: user.role,\n            permissions: user.permissions,\n            createdAt: user.createdAt,\n            lastLogin: user.lastLogin\n        }));\n    res.json({\n        success: true,\n        data: {\n            users: userList\n        }\n    });\n});\nexport { router as authRoutes };\n"],"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","ignoreList":[]}