{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/integration/docker-performance-baseline.test.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport request from 'supertest';\n\nconst execAsync = promisify(exec);\n\ninterface PerformanceBaseline {\n  timestamp: string;\n  environment: string;\n  services: {\n    [serviceName: string]: {\n      startupTime: number;\n      memoryUsage: number;\n      cpuUsage: number;\n      responseTime: number;\n      throughput: number;\n    };\n  };\n  system: {\n    totalMemory: number;\n    totalCpu: number;\n    diskUsage: number;\n    networkLatency: number;\n  };\n  benchmarks: {\n    fullStackRequest: number;\n    databaseQuery: number;\n    llmInference: number;\n    cacheOperation: number;\n    fileOperation: number;\n  };\n}\n\ndescribe('Docker Performance Baseline Establishment', () => {\n  let baseline: PerformanceBaseline;\n  const baselineFile = path.join(__dirname, '../../../performance-baseline.json');\n\n  before(async function() {\n    this.timeout(300000); // 5 minutes for comprehensive baseline\n    \n    console.log('üìä Establishing Docker Performance Baseline...');\n    console.log('üîÑ This comprehensive test will take several minutes...');\n    \n    baseline = await establishPerformanceBaseline();\n    \n    // Save baseline for future comparisons\n    await fs.writeFile(baselineFile, JSON.stringify(baseline, null, 2));\n    \n    console.log('‚úÖ Performance baseline established and saved');\n    console.log(`üìÑ Baseline saved to: ${baselineFile}`);\n  });\n\n  describe('üöÄ Service Startup Performance', () => {\n    it('should measure and record service startup times', async () => {\n      const services = ['postgres', 'redis', 'ollama', 'backend', 'frontend'];\n      \n      for (const service of services) {\n        const startupTime = baseline.services[service]?.startupTime || 0;\n        \n        // Startup time benchmarks (in milliseconds)\n        const benchmarks = {\n          postgres: 15000,   // 15 seconds\n          redis: 5000,       // 5 seconds\n          ollama: 30000,     // 30 seconds (model loading)\n          backend: 20000,    // 20 seconds\n          frontend: 25000    // 25 seconds (build + start)\n        };\n        \n        expect(startupTime).to.be.below(benchmarks[service as keyof typeof benchmarks]);\n        \n        console.log(`‚è±Ô∏è  ${service}: ${startupTime}ms (target: <${benchmarks[service as keyof typeof benchmarks]}ms)`);\n      }\n    });\n\n    it('should verify service readiness after startup', async () => {\n      const readinessChecks = [\n        { service: 'backend', url: 'http://localhost:3001/api/health', timeout: 10000 },\n        { service: 'frontend', url: 'http://localhost:3000/api/health', timeout: 10000 }\n      ];\n      \n      for (const check of readinessChecks) {\n        const startTime = Date.now();\n        \n        const response = await request(check.url)\n          .get('')\n          .timeout(check.timeout);\n        \n        const readinessTime = Date.now() - startTime;\n        \n        expect(response.status).to.equal(200);\n        expect(readinessTime).to.be.below(check.timeout);\n        \n        console.log(`‚úÖ ${check.service} ready in ${readinessTime}ms`);\n      }\n    });\n  });\n\n  describe('üíæ Resource Utilization Baseline', () => {\n    it('should establish memory usage baselines', async () => {\n      for (const [serviceName, metrics] of Object.entries(baseline.services)) {\n        // Memory usage should be reasonable for each service\n        const memoryLimits = {\n          postgres: 200,    // 200MB\n          redis: 50,        // 50MB\n          ollama: 2000,     // 2GB (with models)\n          backend: 200,     // 200MB\n          frontend: 150     // 150MB\n        };\n        \n        const limit = memoryLimits[serviceName as keyof typeof memoryLimits] || 500;\n        expect(metrics.memoryUsage).to.be.below(limit);\n        \n        console.log(`üíæ ${serviceName}: ${metrics.memoryUsage}MB (limit: ${limit}MB)`);\n      }\n    });\n\n    it('should establish CPU usage baselines', async () => {\n      for (const [serviceName, metrics] of Object.entries(baseline.services)) {\n        // CPU usage should be minimal at idle\n        const cpuLimits = {\n          postgres: 10,     // 10%\n          redis: 5,         // 5%\n          ollama: 20,       // 20% (background processing)\n          backend: 15,      // 15%\n          frontend: 10      // 10%\n        };\n        \n        const limit = cpuLimits[serviceName as keyof typeof cpuLimits] || 25;\n        expect(metrics.cpuUsage).to.be.below(limit);\n        \n        console.log(`üî• ${serviceName}: ${metrics.cpuUsage}% (limit: ${limit}%)`);\n      }\n    });\n\n    it('should measure disk usage and I/O performance', async () => {\n      expect(baseline.system.diskUsage).to.be.below(80); // Less than 80% disk usage\n      \n      // Test disk I/O performance\n      const ioTestStart = Date.now();\n      await execAsync('docker exec prompt-postgres sh -c \"dd if=/dev/zero of=/tmp/test bs=1M count=100 && rm /tmp/test\"');\n      const ioTestDuration = Date.now() - ioTestStart;\n      \n      expect(ioTestDuration).to.be.below(10000); // Under 10 seconds for 100MB\n      \n      console.log(`üíΩ Disk usage: ${baseline.system.diskUsage}%`);\n      console.log(`üìù I/O performance: 100MB in ${ioTestDuration}ms`);\n    });\n  });\n\n  describe('üåê Network Performance Baseline', () => {\n    it('should measure inter-service network latency', async () => {\n      const networkTests = [\n        { from: 'frontend', to: 'backend', port: 3001 },\n        { from: 'backend', to: 'postgres', port: 5432 },\n        { from: 'backend', to: 'redis', port: 6379 },\n        { from: 'backend', to: 'ollama', port: 11434 }\n      ];\n      \n      for (const test of networkTests) {\n        const latency = await measureNetworkLatency(test.from, test.to, test.port);\n        \n        expect(latency).to.be.below(50); // Under 50ms for inter-container communication\n        \n        console.log(`üåê ${test.from} ‚Üí ${test.to}: ${latency}ms`);\n      }\n    });\n\n    it('should measure external network performance', async () => {\n      expect(baseline.system.networkLatency).to.be.below(500); // Under 500ms external latency\n      \n      console.log(`üåç External network latency: ${baseline.system.networkLatency}ms`);\n    });\n  });\n\n  describe('‚ö° Application Performance Baseline', () => {\n    it('should establish API response time baselines', async () => {\n      const apiTests = [\n        { endpoint: '/api/health', target: 100 },\n        { endpoint: '/api/prompt-cards', target: 500 },\n        { endpoint: '/api/analytics/metrics', target: 1000 }\n      ];\n      \n      for (const test of apiTests) {\n        const startTime = Date.now();\n        \n        const response = await request('http://localhost:3001')\n          .get(test.endpoint)\n          .timeout(10000);\n        \n        const responseTime = Date.now() - startTime;\n        \n        expect(response.status).to.equal(200);\n        expect(responseTime).to.be.below(test.target);\n        \n        console.log(`‚ö° ${test.endpoint}: ${responseTime}ms (target: <${test.target}ms)`);\n      }\n    });\n\n    it('should measure database query performance', async () => {\n      expect(baseline.benchmarks.databaseQuery).to.be.below(100); // Under 100ms for simple queries\n      \n      console.log(`üóÑÔ∏è  Database query: ${baseline.benchmarks.databaseQuery}ms`);\n    });\n\n    it('should measure LLM inference performance', async () => {\n      expect(baseline.benchmarks.llmInference).to.be.below(30000); // Under 30 seconds for inference\n      \n      console.log(`ü§ñ LLM inference: ${baseline.benchmarks.llmInference}ms`);\n    });\n\n    it('should measure cache operation performance', async () => {\n      expect(baseline.benchmarks.cacheOperation).to.be.below(10); // Under 10ms for cache ops\n      \n      console.log(`üí® Cache operation: ${baseline.benchmarks.cacheOperation}ms`);\n    });\n  });\n\n  describe('üèãÔ∏è Load Performance Baseline', () => {\n    it('should establish concurrent request handling baseline', async () => {\n      const concurrentUsers = [1, 5, 10, 20];\n      const results: Array<{ users: number; throughput: number; avgResponseTime: number }> = [];\n      \n      for (const userCount of concurrentUsers) {\n        const { throughput, avgResponseTime } = await measureConcurrentPerformance(userCount);\n        results.push({ users: userCount, throughput, avgResponseTime });\n        \n        console.log(`üë• ${userCount} users: ${throughput.toFixed(2)} req/s, ${avgResponseTime}ms avg`);\n      }\n      \n      // Performance should degrade gracefully\n      for (let i = 1; i < results.length; i++) {\n        const prev = results[i - 1];\n        const curr = results[i];\n        \n        // Throughput shouldn't drop by more than 50% when doubling users\n        const throughputDrop = (prev.throughput - curr.throughput) / prev.throughput;\n        expect(throughputDrop).to.be.below(0.5);\n        \n        // Response time shouldn't increase by more than 300% when doubling users\n        const responseTimeIncrease = (curr.avgResponseTime - prev.avgResponseTime) / prev.avgResponseTime;\n        expect(responseTimeIncrease).to.be.below(3.0);\n      }\n    });\n\n    it('should measure memory usage under load', async () => {\n      const loadDuration = 60000; // 1 minute\n      const requestRate = 10; // 10 requests per second\n      \n      const initialMemory = await getTotalMemoryUsage();\n      \n      // Generate load\n      const loadPromise = generateSustainedLoad(loadDuration, requestRate);\n      \n      // Monitor memory during load\n      const memoryDuringLoad = await monitorMemoryDuringLoad(loadDuration);\n      \n      await loadPromise;\n      \n      const finalMemory = await getTotalMemoryUsage();\n      \n      // Memory increase should be reasonable\n      const memoryIncrease = ((finalMemory - initialMemory) / initialMemory) * 100;\n      expect(memoryIncrease).to.be.below(50); // Less than 50% increase\n      \n      // Peak memory usage should be within limits\n      const peakMemory = Math.max(...memoryDuringLoad);\n      expect(peakMemory).to.be.below(initialMemory * 2); // Less than 2x initial memory\n      \n      console.log(`üìà Memory under load: ${memoryIncrease.toFixed(1)}% increase, peak: ${peakMemory}MB`);\n    });\n  });\n\n  // Helper Functions\n  async function establishPerformanceBaseline(): Promise<PerformanceBaseline> {\n    console.log('üîç Collecting service metrics...');\n    \n    const services = ['postgres', 'redis', 'ollama', 'backend', 'frontend'];\n    const serviceMetrics: any = {};\n    \n    for (const service of services) {\n      serviceMetrics[service] = await collectServiceMetrics(service);\n    }\n    \n    console.log('üîç Collecting system metrics...');\n    const systemMetrics = await collectSystemMetrics();\n    \n    console.log('üîç Running performance benchmarks...');\n    const benchmarks = await runPerformanceBenchmarks();\n    \n    return {\n      timestamp: new Date().toISOString(),\n      environment: 'docker',\n      services: serviceMetrics,\n      system: systemMetrics,\n      benchmarks\n    };\n  }\n\n  async function collectServiceMetrics(serviceName: string) {\n    const containerName = `prompt-${serviceName}`;\n    \n    try {\n      // Get container stats\n      const { stdout: statsOutput } = await execAsync(\n        `docker stats ${containerName} --no-stream --format \"{{.CPUPerc}},{{.MemUsage}}\"`\n      );\n      \n      const [cpuPercent, memUsage] = statsOutput.trim().split(',');\n      const cpu = parseFloat(cpuPercent.replace('%', ''));\n      const memory = parseFloat(memUsage.split('/')[0].replace('MiB', '').replace('MB', ''));\n      \n      // Measure startup time\n      const { stdout: startedAtOutput } = await execAsync(\n        `docker inspect ${containerName} --format='{{.State.StartedAt}}'`\n      );\n      const startedAt = new Date(startedAtOutput.trim()).getTime();\n      const createdAt = Date.now() - 300000; // Assume created 5 minutes ago for baseline\n      const startupTime = startedAt - createdAt;\n      \n      // Measure response time if applicable\n      let responseTime = 0;\n      if (['backend', 'frontend'].includes(serviceName)) {\n        const port = serviceName === 'backend' ? 3001 : 3000;\n        const startTime = Date.now();\n        \n        try {\n          await request(`http://localhost:${port}`)\n            .get('/api/health')\n            .timeout(10000);\n          responseTime = Date.now() - startTime;\n        } catch (error) {\n          responseTime = 10000; // Max timeout if failed\n        }\n      }\n      \n      // Measure throughput\n      const throughput = await measureServiceThroughput(serviceName);\n      \n      return {\n        startupTime,\n        memoryUsage: memory,\n        cpuUsage: cpu,\n        responseTime,\n        throughput\n      };\n    } catch (error) {\n      console.warn(`Failed to collect metrics for ${serviceName}:`, error.message);\n      return {\n        startupTime: 0,\n        memoryUsage: 0,\n        cpuUsage: 0,\n        responseTime: 0,\n        throughput: 0\n      };\n    }\n  }\n\n  async function collectSystemMetrics() {\n    const totalMemory = await getTotalMemoryUsage();\n    const totalCpu = await getTotalCpuUsage();\n    const diskUsage = await getDiskUsage();\n    const networkLatency = await measureExternalNetworkLatency();\n    \n    return {\n      totalMemory,\n      totalCpu,\n      diskUsage,\n      networkLatency\n    };\n  }\n\n  async function runPerformanceBenchmarks() {\n    console.log('üìä Running full-stack request benchmark...');\n    const fullStackRequest = await benchmarkFullStackRequest();\n    \n    console.log('üìä Running database query benchmark...');\n    const databaseQuery = await benchmarkDatabaseQuery();\n    \n    console.log('üìä Running LLM inference benchmark...');\n    const llmInference = await benchmarkLlmInference();\n    \n    console.log('üìä Running cache operation benchmark...');\n    const cacheOperation = await benchmarkCacheOperation();\n    \n    console.log('üìä Running file operation benchmark...');\n    const fileOperation = await benchmarkFileOperation();\n    \n    return {\n      fullStackRequest,\n      databaseQuery,\n      llmInference,\n      cacheOperation,\n      fileOperation\n    };\n  }\n\n  async function measureServiceThroughput(serviceName: string): Promise<number> {\n    if (!['backend', 'frontend'].includes(serviceName)) {\n      return 0;\n    }\n    \n    const port = serviceName === 'backend' ? 3001 : 3000;\n    const requestCount = 50;\n    const startTime = Date.now();\n    \n    const requests = Array(requestCount).fill(null).map(() =>\n      request(`http://localhost:${port}`)\n        .get('/api/health')\n        .timeout(5000)\n        .catch(() => null)\n    );\n    \n    const results = await Promise.allSettled(requests);\n    const successful = results.filter(r => r.status === 'fulfilled').length;\n    const duration = Date.now() - startTime;\n    \n    return (successful / duration) * 1000; // requests per second\n  }\n\n  async function measureNetworkLatency(fromService: string, toService: string, port: number): Promise<number> {\n    const containerName = `prompt-${fromService}`;\n    const targetHost = `prompt-${toService}`;\n    \n    try {\n      const startTime = Date.now();\n      await execAsync(`docker exec ${containerName} sh -c \"nc -z ${targetHost} ${port}\"`);\n      return Date.now() - startTime;\n    } catch (error) {\n      return 1000; // Return high latency if connection fails\n    }\n  }\n\n  async function benchmarkFullStackRequest(): Promise<number> {\n    const startTime = Date.now();\n    \n    const response = await request('http://localhost:3001')\n      .get('/api/prompt-cards')\n      .timeout(30000);\n    \n    expect(response.status).to.equal(200);\n    return Date.now() - startTime;\n  }\n\n  async function benchmarkDatabaseQuery(): Promise<number> {\n    const startTime = Date.now();\n    \n    const response = await request('http://localhost:3001')\n      .get('/api/health/database')\n      .timeout(10000);\n    \n    expect(response.status).to.equal(200);\n    return Date.now() - startTime;\n  }\n\n  async function benchmarkLlmInference(): Promise<number> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await request('http://localhost:3001')\n        .post('/api/test-execution')\n        .send({\n          cardId: 'benchmark-card',\n          testCases: [{\n            id: 'benchmark-test',\n            input: 'What is 2+2?',\n            expectedOutput: '4'\n          }],\n          model: 'llama2:7b'\n        })\n        .timeout(60000);\n      \n      return Date.now() - startTime;\n    } catch (error) {\n      return 60000; // Return max timeout if failed\n    }\n  }\n\n  async function benchmarkCacheOperation(): Promise<number> {\n    try {\n      const startTime = Date.now();\n      await execAsync('docker exec prompt-redis redis-cli set benchmark-key benchmark-value');\n      await execAsync('docker exec prompt-redis redis-cli get benchmark-key');\n      await execAsync('docker exec prompt-redis redis-cli del benchmark-key');\n      return Date.now() - startTime;\n    } catch (error) {\n      return 100; // Return reasonable fallback\n    }\n  }\n\n  async function benchmarkFileOperation(): Promise<number> {\n    try {\n      const startTime = Date.now();\n      await execAsync('docker exec prompt-backend sh -c \"echo test > /tmp/benchmark && cat /tmp/benchmark && rm /tmp/benchmark\"');\n      return Date.now() - startTime;\n    } catch (error) {\n      return 100; // Return reasonable fallback\n    }\n  }\n\n  async function getTotalMemoryUsage(): Promise<number> {\n    try {\n      const { stdout } = await execAsync(\"docker stats --no-stream --format '{{.MemUsage}}' | awk -F'/' '{sum += $1} END {print sum}'\");\n      return parseFloat(stdout.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  async function getTotalCpuUsage(): Promise<number> {\n    try {\n      const { stdout } = await execAsync(\"docker stats --no-stream --format '{{.CPUPerc}}' | sed 's/%//g' | awk '{sum += $1} END {print sum}'\");\n      return parseFloat(stdout.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  async function getDiskUsage(): Promise<number> {\n    try {\n      const { stdout } = await execAsync(\"df / | awk 'NR==2 {print $5}' | sed 's/%//g'\");\n      return parseFloat(stdout.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  async function measureExternalNetworkLatency(): Promise<number> {\n    try {\n      const startTime = Date.now();\n      await execAsync('docker exec prompt-backend sh -c \"curl -s --max-time 5 https://httpbin.org/get\"');\n      return Date.now() - startTime;\n    } catch (error) {\n      return 5000; // Return timeout if failed\n    }\n  }\n\n  async function measureConcurrentPerformance(userCount: number): Promise<{ throughput: number; avgResponseTime: number }> {\n    const requestsPerUser = 10;\n    const totalRequests = userCount * requestsPerUser;\n    \n    const startTime = Date.now();\n    const requests = Array(totalRequests).fill(null).map(() =>\n      request('http://localhost:3001')\n        .get('/api/health')\n        .timeout(10000)\n    );\n    \n    const results = await Promise.allSettled(requests);\n    const duration = Date.now() - startTime;\n    \n    const successful = results.filter(r => r.status === 'fulfilled').length;\n    const throughput = (successful / duration) * 1000;\n    const avgResponseTime = duration / successful;\n    \n    return { throughput, avgResponseTime };\n  }\n\n  async function generateSustainedLoad(duration: number, requestRate: number): Promise<void> {\n    const interval = 1000 / requestRate;\n    const endTime = Date.now() + duration;\n    \n    while (Date.now() < endTime) {\n      const startTime = Date.now();\n      \n      request('http://localhost:3001')\n        .get('/api/health')\n        .timeout(5000)\n        .catch(() => {}); // Ignore errors\n      \n      const elapsed = Date.now() - startTime;\n      const sleepTime = Math.max(0, interval - elapsed);\n      \n      if (sleepTime > 0) {\n        await new Promise(resolve => setTimeout(resolve, sleepTime));\n      }\n    }\n  }\n\n  async function monitorMemoryDuringLoad(duration: number): Promise<number[]> {\n    const measurements: number[] = [];\n    const interval = 5000; // 5 second intervals\n    const endTime = Date.now() + duration;\n    \n    while (Date.now() < endTime) {\n      const memory = await getTotalMemoryUsage();\n      measurements.push(memory);\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    \n    return measurements;\n  }\n});"],"names":["execAsync","promisify","exec","describe","baseline","baselineFile","path","join","__dirname","before","timeout","console","log","establishPerformanceBaseline","fs","writeFile","JSON","stringify","it","services","service","startupTime","benchmarks","postgres","redis","ollama","backend","frontend","expect","to","be","below","readinessChecks","url","check","startTime","Date","now","response","request","get","readinessTime","status","equal","serviceName","metrics","Object","entries","memoryLimits","limit","memoryUsage","cpuLimits","cpuUsage","system","diskUsage","ioTestStart","ioTestDuration","networkTests","from","port","test","latency","measureNetworkLatency","networkLatency","apiTests","endpoint","target","responseTime","databaseQuery","llmInference","cacheOperation","concurrentUsers","results","userCount","throughput","avgResponseTime","measureConcurrentPerformance","push","users","toFixed","i","length","prev","curr","throughputDrop","responseTimeIncrease","loadDuration","requestRate","initialMemory","getTotalMemoryUsage","loadPromise","generateSustainedLoad","memoryDuringLoad","monitorMemoryDuringLoad","finalMemory","memoryIncrease","peakMemory","Math","max","serviceMetrics","collectServiceMetrics","systemMetrics","collectSystemMetrics","runPerformanceBenchmarks","timestamp","toISOString","environment","containerName","stdout","statsOutput","cpuPercent","memUsage","trim","split","cpu","parseFloat","replace","memory","startedAtOutput","startedAt","getTime","createdAt","includes","error","measureServiceThroughput","warn","message","totalMemory","totalCpu","getTotalCpuUsage","getDiskUsage","measureExternalNetworkLatency","fullStackRequest","benchmarkFullStackRequest","benchmarkDatabaseQuery","benchmarkLlmInference","benchmarkCacheOperation","fileOperation","benchmarkFileOperation","requestCount","requests","Array","fill","map","catch","Promise","allSettled","successful","filter","r","duration","fromService","toService","targetHost","post","send","cardId","testCases","id","input","expectedOutput","model","requestsPerUser","totalRequests","interval","endTime","elapsed","sleepTime","resolve","setTimeout","measurements"],"mappings":"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"}