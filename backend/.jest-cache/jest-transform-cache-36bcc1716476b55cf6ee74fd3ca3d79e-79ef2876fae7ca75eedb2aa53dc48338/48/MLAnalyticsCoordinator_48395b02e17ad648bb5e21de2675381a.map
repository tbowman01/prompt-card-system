{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/MLAnalyticsCoordinator.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { PredictiveAnalytics } from './PredictiveAnalytics';\nimport { AnomalyDetector, anomalyDetector } from './AnomalyDetector';\nimport { CapacityPlanner, capacityPlanner } from './CapacityPlanner';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\n\nexport interface MLAnalyticsConfig {\n  enablePredictiveAnalytics: boolean;\n  enableAnomalyDetection: boolean;\n  enableCapacityPlanning: boolean;\n  autoTraining: {\n    enabled: boolean;\n    interval: number; // hours\n    trainingData: {\n      timeframeDays: number;\n      minSamples: number;\n    };\n  };\n  monitoring: {\n    anomalyDetectionInterval: number; // milliseconds\n    capacityPlanningInterval: number; // milliseconds\n    performanceInterval: number; // milliseconds\n  };\n  alerting: {\n    enableSlackIntegration: boolean;\n    enableEmailAlerts: boolean;\n    severityThresholds: {\n      critical: number;\n      high: number;\n      medium: number;\n    };\n  };\n  models: {\n    retentionDays: number;\n    maxModelsPerType: number;\n    autoCleanup: boolean;\n  };\n}\n\nexport interface SystemHealthScore {\n  overall: number; // 0-100\n  components: {\n    performance: number;\n    capacity: number;\n    anomalies: number;\n    predictions: number;\n  };\n  trends: {\n    improving: boolean;\n    stable: boolean;\n    degrading: boolean;\n  };\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  recommendations: string[];\n}\n\nexport interface MLAnalyticsSummary {\n  timestamp: Date;\n  systemHealth: SystemHealthScore;\n  activePredictions: number;\n  activeAnomalies: number;\n  capacityAlerts: number;\n  modelsTraining: number;\n  uptime: number;\n  performanceMetrics: {\n    avgResponseTime: number;\n    errorRate: number;\n    throughput: number;\n    resourceUtilization: number;\n  };\n  insights: {\n    topRisks: string[];\n    optimizationOpportunities: string[];\n    trendingMetrics: string[];\n  };\n}\n\nexport class MLAnalyticsCoordinator extends EventEmitter {\n  private predictiveAnalytics: PredictiveAnalytics;\n  private anomalyDetector: AnomalyDetector;\n  private capacityPlanner: CapacityPlanner;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  \n  private config: MLAnalyticsConfig;\n  private isInitialized: boolean = false;\n  private isRunning: boolean = false;\n  private autoTrainingInterval: NodeJS.Timeout | null = null;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private startTime: Date;\n  \n  constructor(config?: Partial<MLAnalyticsConfig>) {\n    super();\n    \n    this.startTime = new Date();\n    \n    this.config = {\n      enablePredictiveAnalytics: true,\n      enableAnomalyDetection: true,\n      enableCapacityPlanning: true,\n      autoTraining: {\n        enabled: true,\n        interval: 24, // 24 hours\n        trainingData: {\n          timeframeDays: 30,\n          minSamples: 100\n        }\n      },\n      monitoring: {\n        anomalyDetectionInterval: 30000, // 30 seconds\n        capacityPlanningInterval: 300000, // 5 minutes\n        performanceInterval: 5000 // 5 seconds\n      },\n      alerting: {\n        enableSlackIntegration: false,\n        enableEmailAlerts: false,\n        severityThresholds: {\n          critical: 0.9,\n          high: 0.7,\n          medium: 0.5\n        }\n      },\n      models: {\n        retentionDays: 30,\n        maxModelsPerType: 5,\n        autoCleanup: true\n      },\n      ...config\n    };\n\n    this.initializeServices();\n  }\n\n  /**\n   * Initialize all ML analytics services\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      console.log('ML Analytics Coordinator already initialized');\n      return;\n    }\n\n    try {\n      console.log('Initializing ML Analytics Coordinator...');\n\n      // Initialize performance monitoring first\n      this.performanceMonitor.startMonitoring(this.config.monitoring.performanceInterval);\n\n      // Initialize anomaly detection if enabled\n      if (this.config.enableAnomalyDetection) {\n        await this.initializeAnomalyDetection();\n      }\n\n      // Initialize capacity planning if enabled\n      if (this.config.enableCapacityPlanning) {\n        await this.initializeCapacityPlanning();\n      }\n\n      // Initialize predictive analytics if enabled\n      if (this.config.enablePredictiveAnalytics) {\n        await this.initializePredictiveAnalytics();\n      }\n\n      // Start auto-training if enabled\n      if (this.config.autoTraining.enabled) {\n        this.startAutoTraining();\n      }\n\n      // Start health monitoring\n      this.startHealthMonitoring();\n\n      this.isInitialized = true;\n      this.isRunning = true;\n\n      console.log('ML Analytics Coordinator initialized successfully');\n      this.emit('initialized');\n\n    } catch (error) {\n      console.error('Failed to initialize ML Analytics Coordinator:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start all ML analytics services\n   */\n  public async start(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (this.isRunning) {\n      console.log('ML Analytics Coordinator already running');\n      return;\n    }\n\n    try {\n      console.log('Starting ML Analytics Coordinator services...');\n\n      // Start anomaly detection\n      if (this.config.enableAnomalyDetection) {\n        this.anomalyDetector.startDetection(this.config.monitoring.anomalyDetectionInterval);\n      }\n\n      // Start capacity monitoring\n      if (this.config.enableCapacityPlanning) {\n        this.capacityPlanner.startMonitoring(this.config.monitoring.capacityPlanningInterval);\n      }\n\n      // Start performance monitoring\n      this.performanceMonitor.startMonitoring(this.config.monitoring.performanceInterval);\n\n      this.isRunning = true;\n      \n      console.log('ML Analytics Coordinator services started');\n      this.emit('started');\n\n    } catch (error) {\n      console.error('Failed to start ML Analytics Coordinator:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop all ML analytics services\n   */\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n\n    try {\n      console.log('Stopping ML Analytics Coordinator services...');\n\n      // Stop auto-training\n      if (this.autoTrainingInterval) {\n        clearInterval(this.autoTrainingInterval);\n        this.autoTrainingInterval = null;\n      }\n\n      // Stop health monitoring\n      if (this.healthCheckInterval) {\n        clearInterval(this.healthCheckInterval);\n        this.healthCheckInterval = null;\n      }\n\n      // Stop anomaly detection\n      this.anomalyDetector.stopDetection();\n\n      // Stop capacity monitoring\n      this.capacityPlanner.stopMonitoring();\n\n      // Stop performance monitoring\n      this.performanceMonitor.stopMonitoring();\n\n      this.isRunning = false;\n      \n      console.log('ML Analytics Coordinator services stopped');\n      this.emit('stopped');\n\n    } catch (error) {\n      console.error('Failed to stop ML Analytics Coordinator:', error);\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Get comprehensive system health score\n   */\n  public async getSystemHealthScore(): Promise<SystemHealthScore> {\n    try {\n      // Get performance metrics\n      const performanceStats = this.performanceMonitor.getPerformanceSummary();\n      const performanceScore = this.calculatePerformanceScore(performanceStats);\n\n      // Get capacity health\n      const capacityAlerts = this.capacityPlanner.getCapacityAlerts();\n      const capacityScore = this.calculateCapacityScore(capacityAlerts);\n\n      // Get anomaly status\n      const anomalyStats = this.anomalyDetector.getDetectionStats();\n      const anomalyScore = this.calculateAnomalyScore(anomalyStats);\n\n      // Get prediction confidence\n      const predictionScore = await this.calculatePredictionScore();\n\n      // Calculate overall score\n      const overall = Math.round(\n        (performanceScore * 0.3 + \n         capacityScore * 0.3 + \n         anomalyScore * 0.2 + \n         predictionScore * 0.2)\n      );\n\n      // Determine trends\n      const trends = await this.analyzeTrends();\n\n      // Determine risk level\n      const riskLevel = this.determineRiskLevel(overall, anomalyStats, capacityAlerts);\n\n      // Generate recommendations\n      const recommendations = await this.generateHealthRecommendations(\n        overall,\n        performanceStats,\n        capacityAlerts,\n        anomalyStats\n      );\n\n      return {\n        overall,\n        components: {\n          performance: performanceScore,\n          capacity: capacityScore,\n          anomalies: anomalyScore,\n          predictions: predictionScore\n        },\n        trends,\n        riskLevel,\n        recommendations\n      };\n\n    } catch (error) {\n      console.error('Error calculating system health score:', error);\n      return {\n        overall: 50,\n        components: { performance: 50, capacity: 50, anomalies: 50, predictions: 50 },\n        trends: { improving: false, stable: true, degrading: false },\n        riskLevel: 'medium',\n        recommendations: ['Unable to calculate system health - check ML analytics services']\n      };\n    }\n  }\n\n  /**\n   * Get ML analytics summary\n   */\n  public async getAnalyticsSummary(): Promise<MLAnalyticsSummary> {\n    const systemHealth = await this.getSystemHealthScore();\n    const anomalyStats = this.anomalyDetector.getDetectionStats();\n    const capacityAlerts = this.capacityPlanner.getCapacityAlerts();\n    const performanceStats = this.performanceMonitor.getPerformanceSummary();\n\n    // Get insights\n    const insights = await this.generateInsights();\n\n    return {\n      timestamp: new Date(),\n      systemHealth,\n      activePredictions: 0, // Would track active predictions\n      activeAnomalies: anomalyStats.activeAlerts,\n      capacityAlerts: capacityAlerts.length,\n      modelsTraining: 0, // Would track training status\n      uptime: Date.now() - this.startTime.getTime(),\n      performanceMetrics: {\n        avgResponseTime: 0, // Would get from performance monitor\n        errorRate: 0,\n        throughput: 0,\n        resourceUtilization: 0\n      },\n      insights\n    };\n  }\n\n  /**\n   * Update coordinator configuration\n   */\n  public updateConfig(newConfig: Partial<MLAnalyticsConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('ML Analytics Coordinator configuration updated');\n    this.emit('config_updated', this.config);\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): MLAnalyticsConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Get service status\n   */\n  public getStatus(): {\n    isInitialized: boolean;\n    isRunning: boolean;\n    uptime: number;\n    services: {\n      predictiveAnalytics: boolean;\n      anomalyDetection: boolean;\n      capacityPlanning: boolean;\n      performanceMonitoring: boolean;\n    };\n  } {\n    return {\n      isInitialized: this.isInitialized,\n      isRunning: this.isRunning,\n      uptime: Date.now() - this.startTime.getTime(),\n      services: {\n        predictiveAnalytics: this.config.enablePredictiveAnalytics,\n        anomalyDetection: this.config.enableAnomalyDetection && this.anomalyDetector['isRunning'],\n        capacityPlanning: this.config.enableCapacityPlanning && this.capacityPlanner['isMonitoring'],\n        performanceMonitoring: this.performanceMonitor['isMonitoring']\n      }\n    };\n  }\n\n  /**\n   * Perform comprehensive system analysis\n   */\n  public async performSystemAnalysis(): Promise<{\n    healthScore: SystemHealthScore;\n    predictions: any[];\n    anomalies: any[];\n    capacityForecasts: any[];\n    optimizationRecommendations: any[];\n    actionPlan: string[];\n  }> {\n    console.log('Performing comprehensive system analysis...');\n\n    try {\n      const [\n        healthScore,\n        predictions,\n        anomalies,\n        capacityForecasts,\n        optimizationRecommendations\n      ] = await Promise.all([\n        this.getSystemHealthScore(),\n        this.getPredictions(),\n        this.getAnomalies(),\n        this.getCapacityForecasts(),\n        this.getOptimizationRecommendations()\n      ]);\n\n      // Generate action plan\n      const actionPlan = this.generateActionPlan(\n        healthScore,\n        anomalies,\n        capacityForecasts,\n        optimizationRecommendations\n      );\n\n      return {\n        healthScore,\n        predictions,\n        anomalies,\n        capacityForecasts,\n        optimizationRecommendations,\n        actionPlan\n      };\n\n    } catch (error) {\n      console.error('Error performing system analysis:', error);\n      throw error;\n    }\n  }\n\n  // Private methods\n\n  private initializeServices(): void {\n    this.predictiveAnalytics = new PredictiveAnalytics();\n    this.anomalyDetector = anomalyDetector;\n    this.capacityPlanner = capacityPlanner;\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // Anomaly detection events\n    this.anomalyDetector.on('anomaly_detected', (anomaly) => {\n      this.handleAnomalyDetected(anomaly);\n    });\n\n    this.anomalyDetector.on('alert_resolved', (alert) => {\n      this.handleAlertResolved(alert);\n    });\n\n    // Performance monitoring events\n    this.performanceMonitor.on('alert', (alert) => {\n      this.handlePerformanceAlert(alert);\n    });\n\n    // Capacity planning events (would need to be implemented in CapacityPlanner)\n    // this.capacityPlanner.on('capacity_alert', (alert) => {\n    //   this.handleCapacityAlert(alert);\n    // });\n  }\n\n  private async initializeAnomalyDetection(): Promise<void> {\n    console.log('Initializing anomaly detection...');\n    \n    try {\n      // Train initial models if needed\n      const keyMetrics = ['cpu_usage', 'memory_usage', 'app_response_time', 'app_error_rate'];\n      await this.anomalyDetector.trainAutoencoderModel(keyMetrics, 7);\n      \n      // Update statistical thresholds\n      for (const metric of keyMetrics) {\n        try {\n          await this.anomalyDetector.updateStatisticalThresholds(metric, 7);\n        } catch (error) {\n          console.warn(`Failed to update thresholds for ${metric}:`, error.message);\n        }\n      }\n      \n      console.log('Anomaly detection initialized');\n    } catch (error) {\n      console.warn('Failed to fully initialize anomaly detection:', error.message);\n    }\n  }\n\n  private async initializeCapacityPlanning(): Promise<void> {\n    console.log('Initializing capacity planning...');\n    \n    try {\n      // Capacity planner initializes itself\n      console.log('Capacity planning initialized');\n    } catch (error) {\n      console.warn('Failed to initialize capacity planning:', error.message);\n    }\n  }\n\n  private async initializePredictiveAnalytics(): Promise<void> {\n    console.log('Initializing predictive analytics...');\n    \n    try {\n      // Train initial models if needed\n      const keyMetrics = ['cpu_usage', 'memory_usage', 'app_response_time'];\n      \n      for (const metric of keyMetrics) {\n        try {\n          await this.predictiveAnalytics.trainCapacityModel(metric, 30);\n        } catch (error) {\n          console.warn(`Failed to train capacity model for ${metric}:`, error.message);\n        }\n      }\n      \n      console.log('Predictive analytics initialized');\n    } catch (error) {\n      console.warn('Failed to fully initialize predictive analytics:', error.message);\n    }\n  }\n\n  private startAutoTraining(): void {\n    const intervalMs = this.config.autoTraining.interval * 60 * 60 * 1000; // Convert hours to ms\n    \n    this.autoTrainingInterval = setInterval(async () => {\n      try {\n        console.log('Starting auto-training cycle...');\n        await this.predictiveAnalytics.autoRetrainModels();\n        console.log('Auto-training cycle completed');\n      } catch (error) {\n        console.error('Error during auto-training:', error);\n      }\n    }, intervalMs);\n\n    console.log(`Auto-training scheduled every ${this.config.autoTraining.interval} hours`);\n  }\n\n  private startHealthMonitoring(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        const healthScore = await this.getSystemHealthScore();\n        \n        // Emit health update\n        this.emit('health_update', healthScore);\n        \n        // Check for critical issues\n        if (healthScore.riskLevel === 'critical') {\n          this.emit('critical_health_alert', healthScore);\n        }\n      } catch (error) {\n        console.error('Error during health check:', error);\n      }\n    }, 60000); // Every minute\n  }\n\n  private calculatePerformanceScore(stats: any): number {\n    if (stats.systemHealth === 'good') return 90;\n    if (stats.systemHealth === 'warning') return 60;\n    if (stats.systemHealth === 'critical') return 20;\n    return 50;\n  }\n\n  private calculateCapacityScore(alerts: any[]): number {\n    const criticalAlerts = alerts.filter(a => a.severity === 'critical').length;\n    const warningAlerts = alerts.filter(a => a.severity === 'warning').length;\n    \n    if (criticalAlerts > 0) return 20;\n    if (warningAlerts > 2) return 50;\n    if (warningAlerts > 0) return 70;\n    return 90;\n  }\n\n  private calculateAnomalyScore(stats: any): number {\n    const { activeAlerts, detectionAccuracy, falsePositiveRate } = stats;\n    \n    let score = 90;\n    \n    // Penalize active alerts\n    score -= Math.min(activeAlerts * 10, 50);\n    \n    // Adjust for accuracy\n    score = score * detectionAccuracy;\n    \n    // Penalize false positives\n    score -= falsePositiveRate * 20;\n    \n    return Math.max(Math.round(score), 0);\n  }\n\n  private async calculatePredictionScore(): Promise<number> {\n    // Simplified prediction score - would calculate based on model confidence\n    return 75;\n  }\n\n  private async analyzeTrends(): Promise<{ improving: boolean; stable: boolean; degrading: boolean }> {\n    // Simplified trend analysis - would analyze historical health scores\n    return { improving: false, stable: true, degrading: false };\n  }\n\n  private determineRiskLevel(\n    overall: number,\n    anomalyStats: any,\n    capacityAlerts: any[]\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    if (overall < 30 || capacityAlerts.some(a => a.severity === 'critical')) {\n      return 'critical';\n    }\n    if (overall < 50 || anomalyStats.activeAlerts > 3) {\n      return 'high';\n    }\n    if (overall < 70 || anomalyStats.activeAlerts > 1) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private async generateHealthRecommendations(\n    overall: number,\n    performanceStats: any,\n    capacityAlerts: any[],\n    anomalyStats: any\n  ): Promise<string[]> {\n    const recommendations: string[] = [];\n    \n    if (overall < 50) {\n      recommendations.push('System health is poor - immediate action required');\n    }\n    \n    if (capacityAlerts.length > 0) {\n      recommendations.push('Address capacity alerts to prevent resource exhaustion');\n    }\n    \n    if (anomalyStats.activeAlerts > 2) {\n      recommendations.push('Investigate multiple active anomalies');\n    }\n    \n    if (performanceStats.systemHealth === 'critical') {\n      recommendations.push('Performance is critical - check system resources');\n    }\n    \n    if (recommendations.length === 0) {\n      recommendations.push('System health is good - continue monitoring');\n    }\n    \n    return recommendations;\n  }\n\n  private async generateInsights(): Promise<{\n    topRisks: string[];\n    optimizationOpportunities: string[];\n    trendingMetrics: string[];\n  }> {\n    return {\n      topRisks: ['High memory utilization', 'Increasing response times'],\n      optimizationOpportunities: ['CPU optimization possible', 'Cache hit rate improvements'],\n      trendingMetrics: ['cpu_usage', 'memory_usage', 'response_time']\n    };\n  }\n\n  private generateActionPlan(\n    healthScore: any,\n    anomalies: any[],\n    capacityForecasts: any[],\n    optimizations: any[]\n  ): string[] {\n    const actions: string[] = [];\n    \n    if (healthScore.riskLevel === 'critical') {\n      actions.push('URGENT: Address critical system health issues');\n    }\n    \n    if (anomalies.length > 0) {\n      actions.push(`Investigate ${anomalies.length} active anomalies`);\n    }\n    \n    if (optimizations.length > 0) {\n      actions.push('Implement identified optimization opportunities');\n    }\n    \n    actions.push('Continue monitoring system health trends');\n    \n    return actions;\n  }\n\n  private handleAnomalyDetected(anomaly: any): void {\n    console.log(`Anomaly detected: ${anomaly.description}`);\n    this.emit('anomaly', anomaly);\n  }\n\n  private handleAlertResolved(alert: any): void {\n    console.log(`Alert resolved: ${alert.alert.id}`);\n    this.emit('alert_resolved', alert);\n  }\n\n  private handlePerformanceAlert(alert: any): void {\n    console.log(`Performance alert: ${alert.message}`);\n    this.emit('performance_alert', alert);\n  }\n\n  // Simplified data getters (would be more comprehensive in real implementation)\n  private async getPredictions(): Promise<any[]> { return []; }\n  private async getAnomalies(): Promise<any[]> { \n    return this.anomalyDetector.getActiveAlerts(); \n  }\n  private async getCapacityForecasts(): Promise<any[]> { \n    const forecasts = await this.capacityPlanner.generateCapacityForecast();\n    return Array.from(forecasts.values()).flat();\n  }\n  private async getOptimizationRecommendations(): Promise<any[]> { \n    return Object.values(await this.capacityPlanner.generateOptimizationRecommendations()).flat();\n  }\n}\n\n// Export singleton instance\nexport const mlAnalyticsCoordinator = new MLAnalyticsCoordinator();"],"names":["MLAnalyticsCoordinator","mlAnalyticsCoordinator","EventEmitter","initialize","isInitialized","console","log","performanceMonitor","startMonitoring","config","monitoring","performanceInterval","enableAnomalyDetection","initializeAnomalyDetection","enableCapacityPlanning","initializeCapacityPlanning","enablePredictiveAnalytics","initializePredictiveAnalytics","autoTraining","enabled","startAutoTraining","startHealthMonitoring","isRunning","emit","error","start","anomalyDetector","startDetection","anomalyDetectionInterval","capacityPlanner","capacityPlanningInterval","stop","autoTrainingInterval","clearInterval","healthCheckInterval","stopDetection","stopMonitoring","getSystemHealthScore","performanceStats","getPerformanceSummary","performanceScore","calculatePerformanceScore","capacityAlerts","getCapacityAlerts","capacityScore","calculateCapacityScore","anomalyStats","getDetectionStats","anomalyScore","calculateAnomalyScore","predictionScore","calculatePredictionScore","overall","Math","round","trends","analyzeTrends","riskLevel","determineRiskLevel","recommendations","generateHealthRecommendations","components","performance","capacity","anomalies","predictions","improving","stable","degrading","getAnalyticsSummary","systemHealth","insights","generateInsights","timestamp","Date","activePredictions","activeAnomalies","activeAlerts","length","modelsTraining","uptime","now","startTime","getTime","performanceMetrics","avgResponseTime","errorRate","throughput","resourceUtilization","updateConfig","newConfig","getConfig","getStatus","services","predictiveAnalytics","anomalyDetection","capacityPlanning","performanceMonitoring","performSystemAnalysis","healthScore","capacityForecasts","optimizationRecommendations","Promise","all","getPredictions","getAnomalies","getCapacityForecasts","getOptimizationRecommendations","actionPlan","generateActionPlan","initializeServices","PredictiveAnalytics","analyticsEngine","AnalyticsEngine","getInstance","PerformanceMonitor","setupEventListeners","on","anomaly","handleAnomalyDetected","alert","handleAlertResolved","handlePerformanceAlert","keyMetrics","trainAutoencoderModel","metric","updateStatisticalThresholds","warn","message","trainCapacityModel","intervalMs","interval","setInterval","autoRetrainModels","stats","alerts","criticalAlerts","filter","a","severity","warningAlerts","detectionAccuracy","falsePositiveRate","score","min","max","some","push","topRisks","optimizationOpportunities","trendingMetrics","optimizations","actions","description","id","getActiveAlerts","forecasts","generateCapacityForecast","Array","from","values","flat","Object","generateOptimizationRecommendations","trainingData","timeframeDays","minSamples","alerting","enableSlackIntegration","enableEmailAlerts","severityThresholds","critical","high","medium","models","retentionDays","maxModelsPerType","autoCleanup"],"mappings":"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"}