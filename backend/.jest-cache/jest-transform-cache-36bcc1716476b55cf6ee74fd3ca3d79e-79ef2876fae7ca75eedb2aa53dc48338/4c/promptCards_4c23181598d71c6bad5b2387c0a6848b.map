{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/promptCards.ts"],"sourcesContent":["import { Router } from 'express';\nimport { db } from '../database/connection';\nimport { validatePromptCard } from '../middleware/validation';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\nimport { TestCase } from '../types/testCase';\n\nconst router = Router();\n\n// Get all prompt cards with pagination\nrouter.get('/', (req, res) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const offset = (page - 1) * limit;\n    const search = req.query.search as string;\n\n    // Build base query\n    let whereClause = '';\n    let params: any[] = [];\n\n    if (search) {\n      whereClause = 'WHERE pc.title LIKE ? OR pc.description LIKE ?';\n      params = [`%${search}%`, `%${search}%`];\n    }\n\n    // Get total count\n    const totalQuery = `\n      SELECT COUNT(*) as total \n      FROM prompt_cards pc \n      ${whereClause}\n    `;\n    const totalResult = db.prepare(totalQuery).get(...params) as { total: number };\n    const total = totalResult.total;\n\n    // Get paginated results\n    const dataQuery = `\n      SELECT \n        pc.*,\n        COUNT(tc.id) as test_case_count\n      FROM prompt_cards pc\n      LEFT JOIN test_cases tc ON pc.id = tc.prompt_card_id\n      ${whereClause}\n      GROUP BY pc.id\n      ORDER BY pc.updated_at DESC\n      LIMIT ? OFFSET ?\n    `;\n    const cards = db.prepare(dataQuery).all(...params, limit, offset) as PromptCard[];\n\n    const totalPages = Math.ceil(total / limit);\n\n    return res.json({\n      success: true,\n      data: cards.map(card => ({\n        ...card,\n        variables: JSON.parse(card.variables || '[]'),\n        test_case_count: Number(card.test_case_count)\n      })),\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch prompt cards'\n    });\n  }\n});\n\n// Get specific prompt card with test cases\nrouter.get('/:id', (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Get prompt card\n    const card = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(id) as PromptCard;\n\n    if (!card) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Get test cases\n    const testCases = db.prepare(`\n      SELECT * FROM test_cases WHERE prompt_card_id = ? ORDER BY created_at DESC\n    `).all(id) as TestCase[];\n\n    return res.json({\n      success: true,\n      data: {\n        ...card,\n        variables: JSON.parse(card.variables || '[]'),\n        test_cases: testCases.map((tc: TestCase) => ({\n          ...tc,\n          input_variables: JSON.parse(tc.input_variables),\n          assertions: JSON.parse(tc.assertions || '[]')\n        }))\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch prompt card'\n    });\n  }\n});\n\n// Create new prompt card\nrouter.post('/', validatePromptCard, (req, res) => {\n  try {\n    const { title, description, prompt_template, variables } = req.body as CreatePromptCardRequest;\n    \n    const result = db.prepare(`\n      INSERT INTO prompt_cards (title, description, prompt_template, variables)\n      VALUES (?, ?, ?, ?)\n    `).run(title, description, prompt_template, JSON.stringify(variables || []));\n\n    const newCard = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(result.lastInsertRowid) as PromptCard;\n\n    return res.status(201).json({\n      success: true,\n      data: {\n        ...newCard,\n        variables: JSON.parse(newCard.variables || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create prompt card'\n    });\n  }\n});\n\n// Update prompt card\nrouter.put('/:id', validatePromptCard, (req, res) => {\n  try {\n    const { id } = req.params;\n    const { title, description, prompt_template, variables } = req.body as CreatePromptCardRequest;\n    \n    const result = db.prepare(`\n      UPDATE prompt_cards \n      SET title = ?, description = ?, prompt_template = ?, variables = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `).run(title, description, prompt_template, JSON.stringify(variables || []), id);\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    const updatedCard = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(id) as PromptCard;\n\n    return res.json({\n      success: true,\n      data: {\n        ...updatedCard,\n        variables: JSON.parse(updatedCard.variables || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update prompt card'\n    });\n  }\n});\n\n// Delete prompt card\nrouter.delete('/:id', (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const result = db.prepare(`\n      DELETE FROM prompt_cards WHERE id = ?\n    `).run(id);\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Prompt card deleted successfully'\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete prompt card'\n    });\n  }\n});\n\nexport { router as promptCardRoutes };"],"names":["promptCardRoutes","router","Router","get","req","res","page","parseInt","query","limit","offset","search","whereClause","params","totalQuery","totalResult","db","prepare","total","dataQuery","cards","all","totalPages","Math","ceil","json","success","data","map","card","variables","JSON","parse","test_case_count","Number","pagination","hasNext","hasPrev","error","status","Error","message","id","testCases","test_cases","tc","input_variables","assertions","post","validatePromptCard","title","description","prompt_template","body","result","run","stringify","newCard","lastInsertRowid","put","changes","updatedCard","delete"],"mappings":"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"}