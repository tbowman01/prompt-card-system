318e04a6c23748e4c163da39537bf357
// Jest timeout configuration for different test types
// This file provides centralized timeout management for all test types
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get HookTimeouts () {
        return HookTimeouts;
    },
    get TestTimeouts () {
        return TestTimeouts;
    },
    get getTestTimeout () {
        return getTestTimeout;
    },
    get setTestTimeout () {
        return setTestTimeout;
    }
});
const TestTimeouts = {
    // Unit tests - fast, no external dependencies
    UNIT: 5000,
    // Integration tests - may involve database, Redis, etc.
    INTEGRATION: 30000,
    // Docker/E2E tests - full system tests
    DOCKER: 120000,
    // Performance baseline tests - comprehensive system profiling
    PERFORMANCE: 300000,
    // LLM operation tests - AI model interaction
    LLM_OPERATION: 60000,
    // WebSocket tests - real-time communication
    WEBSOCKET: 30000,
    // Database tests - complex queries and migrations
    DATABASE: 15000
};
function setTestTimeout(testType) {
    jest.setTimeout(TestTimeouts[testType]);
}
function getTestTimeout(testType) {
    return TestTimeouts[testType];
}
const HookTimeouts = {
    beforeAll: {
        unit: 10000,
        integration: 60000,
        docker: 180000,
        performance: 300000
    },
    afterAll: {
        unit: 5000,
        integration: 30000,
        docker: 60000,
        performance: 60000
    },
    beforeEach: {
        unit: 2000,
        integration: 10000,
        docker: 30000,
        performance: 30000
    },
    afterEach: {
        unit: 2000,
        integration: 10000,
        docker: 15000,
        performance: 15000
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy90ZXN0cy9qZXN0LnRpbWVvdXRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEplc3QgdGltZW91dCBjb25maWd1cmF0aW9uIGZvciBkaWZmZXJlbnQgdGVzdCB0eXBlc1xuLy8gVGhpcyBmaWxlIHByb3ZpZGVzIGNlbnRyYWxpemVkIHRpbWVvdXQgbWFuYWdlbWVudCBmb3IgYWxsIHRlc3QgdHlwZXNcblxuZXhwb3J0IGNvbnN0IFRlc3RUaW1lb3V0cyA9IHtcbiAgLy8gVW5pdCB0ZXN0cyAtIGZhc3QsIG5vIGV4dGVybmFsIGRlcGVuZGVuY2llc1xuICBVTklUOiA1MDAwLFxuICBcbiAgLy8gSW50ZWdyYXRpb24gdGVzdHMgLSBtYXkgaW52b2x2ZSBkYXRhYmFzZSwgUmVkaXMsIGV0Yy5cbiAgSU5URUdSQVRJT046IDMwMDAwLFxuICBcbiAgLy8gRG9ja2VyL0UyRSB0ZXN0cyAtIGZ1bGwgc3lzdGVtIHRlc3RzXG4gIERPQ0tFUjogMTIwMDAwLFxuICBcbiAgLy8gUGVyZm9ybWFuY2UgYmFzZWxpbmUgdGVzdHMgLSBjb21wcmVoZW5zaXZlIHN5c3RlbSBwcm9maWxpbmdcbiAgUEVSRk9STUFOQ0U6IDMwMDAwMCxcbiAgXG4gIC8vIExMTSBvcGVyYXRpb24gdGVzdHMgLSBBSSBtb2RlbCBpbnRlcmFjdGlvblxuICBMTE1fT1BFUkFUSU9OOiA2MDAwMCxcbiAgXG4gIC8vIFdlYlNvY2tldCB0ZXN0cyAtIHJlYWwtdGltZSBjb21tdW5pY2F0aW9uXG4gIFdFQlNPQ0tFVDogMzAwMDAsXG4gIFxuICAvLyBEYXRhYmFzZSB0ZXN0cyAtIGNvbXBsZXggcXVlcmllcyBhbmQgbWlncmF0aW9uc1xuICBEQVRBQkFTRTogMTUwMDBcbn0gYXMgY29uc3Q7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBzZXQgdGltZW91dCBmb3Igc3BlY2lmaWMgdGVzdCB0eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRlc3RUaW1lb3V0KHRlc3RUeXBlOiBrZXlvZiB0eXBlb2YgVGVzdFRpbWVvdXRzKTogdm9pZCB7XG4gIGplc3Quc2V0VGltZW91dChUZXN0VGltZW91dHNbdGVzdFR5cGVdKTtcbn1cblxuLy8gSGVscGVyIGZvciBpbmRpdmlkdWFsIHRlc3QgdGltZW91dFxuZXhwb3J0IGZ1bmN0aW9uIGdldFRlc3RUaW1lb3V0KHRlc3RUeXBlOiBrZXlvZiB0eXBlb2YgVGVzdFRpbWVvdXRzKTogbnVtYmVyIHtcbiAgcmV0dXJuIFRlc3RUaW1lb3V0c1t0ZXN0VHlwZV07XG59XG5cbi8vIFRpbWVvdXQgY29uZmlndXJhdGlvbiBmb3IgZGlmZmVyZW50IEplc3QgaG9va3NcbmV4cG9ydCBjb25zdCBIb29rVGltZW91dHMgPSB7XG4gIGJlZm9yZUFsbDoge1xuICAgIHVuaXQ6IDEwMDAwLFxuICAgIGludGVncmF0aW9uOiA2MDAwMCxcbiAgICBkb2NrZXI6IDE4MDAwMCxcbiAgICBwZXJmb3JtYW5jZTogMzAwMDAwXG4gIH0sXG4gIGFmdGVyQWxsOiB7XG4gICAgdW5pdDogNTAwMCxcbiAgICBpbnRlZ3JhdGlvbjogMzAwMDAsXG4gICAgZG9ja2VyOiA2MDAwMCxcbiAgICBwZXJmb3JtYW5jZTogNjAwMDBcbiAgfSxcbiAgYmVmb3JlRWFjaDoge1xuICAgIHVuaXQ6IDIwMDAsXG4gICAgaW50ZWdyYXRpb246IDEwMDAwLFxuICAgIGRvY2tlcjogMzAwMDAsXG4gICAgcGVyZm9ybWFuY2U6IDMwMDAwXG4gIH0sXG4gIGFmdGVyRWFjaDoge1xuICAgIHVuaXQ6IDIwMDAsXG4gICAgaW50ZWdyYXRpb246IDEwMDAwLFxuICAgIGRvY2tlcjogMTUwMDAsXG4gICAgcGVyZm9ybWFuY2U6IDE1MDAwXG4gIH1cbn0gYXMgY29uc3Q7Il0sIm5hbWVzIjpbIkhvb2tUaW1lb3V0cyIsIlRlc3RUaW1lb3V0cyIsImdldFRlc3RUaW1lb3V0Iiwic2V0VGVzdFRpbWVvdXQiLCJVTklUIiwiSU5URUdSQVRJT04iLCJET0NLRVIiLCJQRVJGT1JNQU5DRSIsIkxMTV9PUEVSQVRJT04iLCJXRUJTT0NLRVQiLCJEQVRBQkFTRSIsInRlc3RUeXBlIiwiamVzdCIsInNldFRpbWVvdXQiLCJiZWZvcmVBbGwiLCJ1bml0IiwiaW50ZWdyYXRpb24iLCJkb2NrZXIiLCJwZXJmb3JtYW5jZSIsImFmdGVyQWxsIiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELHVFQUF1RTs7Ozs7Ozs7Ozs7O1FBb0MxREE7ZUFBQUE7O1FBbENBQztlQUFBQTs7UUE2QkdDO2VBQUFBOztRQUxBQztlQUFBQTs7O0FBeEJULE1BQU1GLGVBQWU7SUFDMUIsOENBQThDO0lBQzlDRyxNQUFNO0lBRU4sd0RBQXdEO0lBQ3hEQyxhQUFhO0lBRWIsdUNBQXVDO0lBQ3ZDQyxRQUFRO0lBRVIsOERBQThEO0lBQzlEQyxhQUFhO0lBRWIsNkNBQTZDO0lBQzdDQyxlQUFlO0lBRWYsNENBQTRDO0lBQzVDQyxXQUFXO0lBRVgsa0RBQWtEO0lBQ2xEQyxVQUFVO0FBQ1o7QUFHTyxTQUFTUCxlQUFlUSxRQUFtQztJQUNoRUMsS0FBS0MsVUFBVSxDQUFDWixZQUFZLENBQUNVLFNBQVM7QUFDeEM7QUFHTyxTQUFTVCxlQUFlUyxRQUFtQztJQUNoRSxPQUFPVixZQUFZLENBQUNVLFNBQVM7QUFDL0I7QUFHTyxNQUFNWCxlQUFlO0lBQzFCYyxXQUFXO1FBQ1RDLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxRQUFRO1FBQ1JDLGFBQWE7SUFDZjtJQUNBQyxVQUFVO1FBQ1JKLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxRQUFRO1FBQ1JDLGFBQWE7SUFDZjtJQUNBRSxZQUFZO1FBQ1ZMLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxRQUFRO1FBQ1JDLGFBQWE7SUFDZjtJQUNBRyxXQUFXO1FBQ1ROLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxRQUFRO1FBQ1JDLGFBQWE7SUFDZjtBQUNGIn0=