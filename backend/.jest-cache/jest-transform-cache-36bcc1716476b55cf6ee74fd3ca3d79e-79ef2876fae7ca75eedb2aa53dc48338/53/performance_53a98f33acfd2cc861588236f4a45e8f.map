{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/performance.ts"],"sourcesContent":["import { Router } from 'express';\nimport { performanceMonitor } from '../services/performance/PerformanceMonitor';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\nimport { ReportGenerator } from '../services/reports/generators/ReportGenerator';\nimport { OptimizationEngine } from '../services/optimization/OptimizationEngine';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { ProgressService } from '../services/websocket/ProgressService';\n\nconst router = Router();\n\n// Initialize services for performance monitoring\nconst analyticsEngine = AnalyticsEngine.getInstance();\n\n/**\n * GET /performance/overview\n * Get overall performance overview\n */\nrouter.get('/overview', async (req, res) => {\n  try {\n    const [\n      systemMetrics,\n      applicationMetrics,\n      summary,\n      alerts\n    ] = await Promise.all([\n      performanceMonitor.getSystemMetrics(),\n      performanceMonitor.getApplicationMetrics(),\n      performanceMonitor.getPerformanceSummary(),\n      performanceMonitor.getActiveAlerts()\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        timestamp: new Date().toISOString(),\n        systemMetrics,\n        applicationMetrics,\n        summary,\n        alerts,\n        uptime: process.uptime(),\n        version: process.version,\n        platform: process.platform,\n        arch: process.arch\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/metrics\n * Get performance metrics for a specific metric name\n */\nrouter.get('/metrics/:metricName?', (req, res) => {\n  try {\n    const { metricName } = req.params;\n    const limit = parseInt(req.query.limit as string) || 100;\n\n    if (metricName) {\n      const metrics = performanceMonitor.getMetrics(metricName, limit);\n      res.json({\n        success: true,\n        data: {\n          metricName,\n          metrics,\n          count: metrics.length\n        }\n      });\n    } else {\n      const metricNames = performanceMonitor.getMetricNames();\n      const statistics = performanceMonitor.getStatistics();\n      \n      res.json({\n        success: true,\n        data: {\n          metricNames,\n          statistics,\n          totalMetrics: metricNames.length\n        }\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/alerts\n * Get active performance alerts\n */\nrouter.get('/alerts', (req, res) => {\n  try {\n    const alerts = performanceMonitor.getActiveAlerts();\n    const severity = req.query.severity as string;\n    \n    let filteredAlerts = alerts;\n    if (severity) {\n      filteredAlerts = alerts.filter(alert => alert.severity === severity);\n    }\n\n    res.json({\n      success: true,\n      data: {\n        alerts: filteredAlerts,\n        total: alerts.length,\n        filtered: filteredAlerts.length,\n        severityBreakdown: {\n          critical: alerts.filter(a => a.severity === 'critical').length,\n          high: alerts.filter(a => a.severity === 'high').length,\n          medium: alerts.filter(a => a.severity === 'medium').length,\n          low: alerts.filter(a => a.severity === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/system\n * Get detailed system performance metrics\n */\nrouter.get('/system', async (req, res) => {\n  try {\n    const systemMetrics = await performanceMonitor.getSystemMetrics();\n    const nodeMetrics = {\n      memory: process.memoryUsage(),\n      cpu: process.cpuUsage(),\n      uptime: process.uptime(),\n      pid: process.pid,\n      version: process.version,\n      versions: process.versions\n    };\n\n    res.json({\n      success: true,\n      data: {\n        system: systemMetrics,\n        node: nodeMetrics,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/services\n * Get performance statistics for all services\n */\nrouter.get('/services', async (req, res) => {\n  try {\n    const serviceStats = {\n      analytics: analyticsEngine.getQueryPerformanceStats ? analyticsEngine.getQueryPerformanceStats() : {},\n      cacheStats: analyticsEngine.getCacheStats ? analyticsEngine.getCacheStats() : {},\n      optimization: {\n        // Would get from optimization engine if available\n        cacheHitRate: 0,\n        avgProcessingTime: 0\n      },\n      testing: {\n        // Would get from test queue manager if available\n        queueSize: 0,\n        activeJobs: 0,\n        avgExecutionTime: 0\n      },\n      websocket: {\n        // Would get from progress service if available\n        activeConnections: 0,\n        messagesSent: 0,\n        avgLatency: 0\n      }\n    };\n\n    res.json({\n      success: true,\n      data: serviceStats\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/database\n * Get database performance metrics\n */\nrouter.get('/database', async (req, res) => {\n  try {\n    // Get analytics engine performance stats\n    const analyticsStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    const cacheStats = analyticsEngine.getCacheStats ? \n      analyticsEngine.getCacheStats() : { size: 0, max: 0, hitRate: 0 };\n\n    // Calculate database performance metrics\n    const dbMetrics = {\n      queryStats: analyticsStats,\n      cacheStats,\n      connections: {\n        active: 1, // SQLite is single connection\n        idle: 0,\n        total: 1\n      },\n      performance: {\n        avgQueryTime: Object.values(analyticsStats).length > 0 ? \n          Object.values(analyticsStats).reduce((sum: number, stat: any) => sum + stat.avg, 0) / Object.values(analyticsStats).length : 0,\n        slowQueries: Object.values(analyticsStats).filter((stat: any) => stat.avg > 100).length,\n        totalQueries: Object.values(analyticsStats).reduce((sum: number, stat: any) => sum + stat.count, 0)\n      }\n    };\n\n    res.json({\n      success: true,\n      data: dbMetrics\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/bottlenecks\n * Identify performance bottlenecks\n */\nrouter.get('/bottlenecks', async (req, res) => {\n  try {\n    const statistics = performanceMonitor.getStatistics();\n    const alerts = performanceMonitor.getActiveAlerts();\n    \n    // Identify bottlenecks based on performance data\n    const bottlenecks = [];\n    \n    // CPU bottlenecks\n    if (statistics.cpu_usage && statistics.cpu_usage.avg > 80) {\n      bottlenecks.push({\n        type: 'cpu',\n        severity: statistics.cpu_usage.avg > 90 ? 'critical' : 'high',\n        description: `High CPU usage: ${statistics.cpu_usage.avg.toFixed(1)}%`,\n        recommendation: 'Consider optimizing CPU-intensive operations or scaling horizontally'\n      });\n    }\n    \n    // Memory bottlenecks\n    if (statistics.memory_usage && statistics.memory_usage.avg > 85) {\n      bottlenecks.push({\n        type: 'memory',\n        severity: statistics.memory_usage.avg > 95 ? 'critical' : 'high',\n        description: `High memory usage: ${statistics.memory_usage.avg.toFixed(1)}%`,\n        recommendation: 'Consider optimizing memory usage or increasing available memory'\n      });\n    }\n    \n    // Response time bottlenecks\n    if (statistics.app_response_time && statistics.app_response_time.avg > 2000) {\n      bottlenecks.push({\n        type: 'response_time',\n        severity: statistics.app_response_time.avg > 5000 ? 'critical' : 'high',\n        description: `Slow response time: ${statistics.app_response_time.avg.toFixed(0)}ms`,\n        recommendation: 'Optimize database queries, enable caching, or improve algorithm efficiency'\n      });\n    }\n    \n    // Database query bottlenecks\n    const dbStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    Object.entries(dbStats).forEach(([queryName, stats]: [string, any]) => {\n      if (stats.avg > 100) {\n        bottlenecks.push({\n          type: 'database',\n          severity: stats.avg > 500 ? 'critical' : stats.avg > 200 ? 'high' : 'medium',\n          description: `Slow query: ${queryName} (${stats.avg.toFixed(1)}ms avg)`,\n          recommendation: 'Add database indexes, optimize query structure, or implement query result caching'\n        });\n      }\n    });\n\n    res.json({\n      success: true,\n      data: {\n        bottlenecks,\n        totalBottlenecks: bottlenecks.length,\n        severityBreakdown: {\n          critical: bottlenecks.filter(b => b.severity === 'critical').length,\n          high: bottlenecks.filter(b => b.severity === 'high').length,\n          medium: bottlenecks.filter(b => b.severity === 'medium').length\n        },\n        recommendations: bottlenecks.map(b => b.recommendation)\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/recommendations\n * Get performance optimization recommendations\n */\nrouter.get('/recommendations', async (req, res) => {\n  try {\n    const systemMetrics = await performanceMonitor.getSystemMetrics();\n    const appMetrics = performanceMonitor.getApplicationMetrics();\n    const statistics = performanceMonitor.getStatistics();\n    \n    const recommendations = [];\n    \n    // CPU optimization recommendations\n    if (systemMetrics.cpu.usage > 70) {\n      recommendations.push({\n        category: 'cpu',\n        priority: systemMetrics.cpu.usage > 90 ? 'high' : 'medium',\n        title: 'Optimize CPU Usage',\n        description: 'High CPU usage detected. Consider implementing the following optimizations:',\n        actions: [\n          'Enable CPU-intensive task queuing',\n          'Implement worker threads for parallel processing',\n          'Optimize algorithm complexity',\n          'Consider horizontal scaling'\n        ]\n      });\n    }\n    \n    // Memory optimization recommendations\n    if (systemMetrics.memory.utilization > 80) {\n      recommendations.push({\n        category: 'memory',\n        priority: systemMetrics.memory.utilization > 95 ? 'high' : 'medium',\n        title: 'Optimize Memory Usage',\n        description: 'High memory utilization detected. Consider implementing the following optimizations:',\n        actions: [\n          'Implement memory-efficient data structures',\n          'Add result caching with TTL',\n          'Optimize object pooling',\n          'Review memory leaks'\n        ]\n      });\n    }\n    \n    // Database optimization recommendations\n    const dbStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    const slowQueries = Object.entries(dbStats).filter(([_, stats]: [string, any]) => stats.avg > 100);\n    \n    if (slowQueries.length > 0) {\n      recommendations.push({\n        category: 'database',\n        priority: 'high',\n        title: 'Optimize Database Performance',\n        description: `${slowQueries.length} slow queries detected. Consider implementing the following optimizations:`,\n        actions: [\n          'Add indexes for frequently queried columns',\n          'Implement query result caching',\n          'Optimize database schema',\n          'Use prepared statements',\n          'Consider database connection pooling'\n        ]\n      });\n    }\n    \n    // Cache optimization recommendations\n    const cacheStats = analyticsEngine.getCacheStats ? analyticsEngine.getCacheStats() : null;\n    \n    if (cacheStats && cacheStats.hitRate < 70) {\n      recommendations.push({\n        category: 'cache',\n        priority: 'medium',\n        title: 'Improve Cache Performance',\n        description: `Cache hit rate is ${cacheStats.hitRate?.toFixed(1)}%. Consider implementing the following optimizations:`,\n        actions: [\n          'Increase cache size limits',\n          'Optimize cache TTL values',\n          'Implement cache warming',\n          'Add cache prefetching for predictable queries'\n        ]\n      });\n    }\n    \n    // Response time optimization recommendations\n    if (appMetrics.averageResponseTime > 1000) {\n      recommendations.push({\n        category: 'response_time',\n        priority: appMetrics.averageResponseTime > 3000 ? 'high' : 'medium',\n        title: 'Optimize Response Time',\n        description: `Average response time is ${appMetrics.averageResponseTime.toFixed(0)}ms. Consider implementing the following optimizations:`,\n        actions: [\n          'Implement result caching',\n          'Optimize critical path algorithms',\n          'Add async processing for non-critical operations',\n          'Consider CDN for static assets'\n        ]\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        recommendations,\n        totalRecommendations: recommendations.length,\n        priorityBreakdown: {\n          high: recommendations.filter(r => r.priority === 'high').length,\n          medium: recommendations.filter(r => r.priority === 'medium').length,\n          low: recommendations.filter(r => r.priority === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /performance/thresholds\n * Set custom performance thresholds\n */\nrouter.post('/thresholds', (req, res) => {\n  try {\n    const { metricName, warning, critical } = req.body;\n    \n    if (!metricName || typeof warning !== 'number' || typeof critical !== 'number') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid request body. Required: metricName, warning, critical'\n      });\n    }\n    \n    if (critical <= warning) {\n      return res.status(400).json({\n        success: false,\n        error: 'Critical threshold must be greater than warning threshold'\n      });\n    }\n    \n    performanceMonitor.setThreshold(metricName, warning, critical);\n    \n    res.json({\n      success: true,\n      data: {\n        metricName,\n        warning,\n        critical,\n        message: 'Threshold updated successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /performance/clear\n * Clear performance metrics and alerts\n */\nrouter.post('/clear', (req, res) => {\n  try {\n    performanceMonitor.clear();\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Performance metrics and alerts cleared successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/export\n * Export performance data\n */\nrouter.get('/export', (req, res) => {\n  try {\n    const exportData = performanceMonitor.exportMetrics();\n    \n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"performance-metrics.json\"');\n    res.send(exportData);\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/health\n * Quick health check endpoint\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const summary = performanceMonitor.getPerformanceSummary();\n    const alerts = performanceMonitor.getActiveAlerts();\n    \n    const health = {\n      status: summary.systemHealth,\n      uptime: summary.uptime,\n      timestamp: new Date().toISOString(),\n      version: process.version,\n      memory: process.memoryUsage(),\n      activeAlerts: alerts.length,\n      criticalAlerts: alerts.filter(a => a.severity === 'critical').length\n    };\n    \n    const statusCode = summary.systemHealth === 'critical' ? 503 : \n                      summary.systemHealth === 'warning' ? 200 : 200;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nexport default router;"],"names":["router","Router","analyticsEngine","AnalyticsEngine","getInstance","get","req","res","systemMetrics","applicationMetrics","summary","alerts","Promise","all","performanceMonitor","getSystemMetrics","getApplicationMetrics","getPerformanceSummary","getActiveAlerts","json","success","data","timestamp","Date","toISOString","uptime","process","version","platform","arch","error","status","message","metricName","params","limit","parseInt","query","metrics","getMetrics","count","length","metricNames","getMetricNames","statistics","getStatistics","totalMetrics","severity","filteredAlerts","filter","alert","total","filtered","severityBreakdown","critical","a","high","medium","low","nodeMetrics","memory","memoryUsage","cpu","cpuUsage","pid","versions","system","node","serviceStats","analytics","getQueryPerformanceStats","cacheStats","getCacheStats","optimization","cacheHitRate","avgProcessingTime","testing","queueSize","activeJobs","avgExecutionTime","websocket","activeConnections","messagesSent","avgLatency","analyticsStats","size","max","hitRate","dbMetrics","queryStats","connections","active","idle","performance","avgQueryTime","Object","values","reduce","sum","stat","avg","slowQueries","totalQueries","bottlenecks","cpu_usage","push","type","description","toFixed","recommendation","memory_usage","app_response_time","dbStats","entries","forEach","queryName","stats","totalBottlenecks","b","recommendations","map","appMetrics","usage","category","priority","title","actions","utilization","_","averageResponseTime","totalRecommendations","priorityBreakdown","r","post","warning","body","setThreshold","clear","exportData","exportMetrics","setHeader","send","health","systemHealth","activeAlerts","criticalAlerts","statusCode"],"mappings":"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"}