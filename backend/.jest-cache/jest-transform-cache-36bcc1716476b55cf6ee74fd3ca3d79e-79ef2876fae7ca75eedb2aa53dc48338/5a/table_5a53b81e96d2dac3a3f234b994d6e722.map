{"version":3,"sources":["/workspaces/prompt-card-system/node_modules/better-sqlite3/lib/methods/table.js"],"sourcesContent":["'use strict';\nconst { cppdb } = require('../util');\n\nmodule.exports = function defineTable(name, factory) {\n\t// Validate arguments\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (!name) throw new TypeError('Virtual table module name cannot be an empty string');\n\n\t// Determine whether the module is eponymous-only or not\n\tlet eponymous = false;\n\tif (typeof factory === 'object' && factory !== null) {\n\t\teponymous = true;\n\t\tfactory = defer(parseTableDefinition(factory, 'used', name));\n\t} else {\n\t\tif (typeof factory !== 'function') throw new TypeError('Expected second argument to be a function or a table definition object');\n\t\tfactory = wrapFactory(factory);\n\t}\n\n\tthis[cppdb].table(factory, name, eponymous);\n\treturn this;\n};\n\nfunction wrapFactory(factory) {\n\treturn function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\n\t\tconst thisObject = {\n\t\t\tmodule: moduleName,\n\t\t\tdatabase: databaseName,\n\t\t\ttable: tableName,\n\t\t};\n\n\t\t// Generate a new table definition by invoking the factory\n\t\tconst def = apply.call(factory, thisObject, args);\n\t\tif (typeof def !== 'object' || def === null) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\n\t\t}\n\n\t\treturn parseTableDefinition(def, 'returned', moduleName);\n\t};\n}\n\nfunction parseTableDefinition(def, verb, moduleName) {\n\t// Validate required properties\n\tif (!hasOwnProperty.call(def, 'rows')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\n\t}\n\tif (!hasOwnProperty.call(def, 'columns')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\n\t}\n\n\t// Validate \"rows\" property\n\tconst rows = def.rows;\n\tif (typeof rows !== 'function' || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\n\t}\n\n\t// Validate \"columns\" property\n\tlet columns = def.columns;\n\tif (!Array.isArray(columns) || !(columns = [...columns]).every(x => typeof x === 'string')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\n\t}\n\tif (columns.length !== new Set(columns).size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\n\t}\n\tif (!columns.length) {\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\n\t}\n\n\t// Validate \"parameters\" property\n\tlet parameters;\n\tif (hasOwnProperty.call(def, 'parameters')) {\n\t\tparameters = def.parameters;\n\t\tif (!Array.isArray(parameters) || !(parameters = [...parameters]).every(x => typeof x === 'string')) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\n\t\t}\n\t} else {\n\t\tparameters = inferParameters(rows);\n\t}\n\tif (parameters.length !== new Set(parameters).size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\n\t}\n\tif (parameters.length > 32) {\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\n\t}\n\tfor (const parameter of parameters) {\n\t\tif (columns.includes(parameter)) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\n\t\t}\n\t}\n\n\t// Validate \"safeIntegers\" option\n\tlet safeIntegers = 2;\n\tif (hasOwnProperty.call(def, 'safeIntegers')) {\n\t\tconst bool = def.safeIntegers;\n\t\tif (typeof bool !== 'boolean') {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\n\t\t}\n\t\tsafeIntegers = +bool;\n\t}\n\n\t// Validate \"directOnly\" option\n\tlet directOnly = false;\n\tif (hasOwnProperty.call(def, 'directOnly')) {\n\t\tdirectOnly = def.directOnly;\n\t\tif (typeof directOnly !== 'boolean') {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\n\t\t}\n\t}\n\n\t// Generate SQL for the virtual table definition\n\tconst columnDefinitions = [\n\t\t...parameters.map(identifier).map(str => `${str} HIDDEN`),\n\t\t...columns.map(identifier),\n\t];\n\treturn [\n\t\t`CREATE TABLE x(${columnDefinitions.join(', ')});`,\n\t\twrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName),\n\t\tparameters,\n\t\tsafeIntegers,\n\t\tdirectOnly,\n\t];\n}\n\nfunction wrapGenerator(generator, columnMap, moduleName) {\n\treturn function* virtualTable(...args) {\n\t\t/*\n\t\t\tWe must defensively clone any buffers in the arguments, because\n\t\t\totherwise the generator could mutate one of them, which would cause\n\t\t\tus to return incorrect values for hidden columns, potentially\n\t\t\tcorrupting the database.\n\t\t */\n\t\tconst output = args.map(x => Buffer.isBuffer(x) ? Buffer.from(x) : x);\n\t\tfor (let i = 0; i < columnMap.size; ++i) {\n\t\t\toutput.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\n\t\t}\n\t\tfor (const row of generator(...args)) {\n\t\t\tif (Array.isArray(row)) {\n\t\t\t\textractRowArray(row, output, columnMap.size, moduleName);\n\t\t\t\tyield output;\n\t\t\t} else if (typeof row === 'object' && row !== null) {\n\t\t\t\textractRowObject(row, output, columnMap, moduleName);\n\t\t\t\tyield output;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction extractRowArray(row, output, columnCount, moduleName) {\n\tif (row.length !== columnCount) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\n\t}\n\tconst offset = output.length - columnCount;\n\tfor (let i = 0; i < columnCount; ++i) {\n\t\toutput[i + offset] = row[i];\n\t}\n}\n\nfunction extractRowObject(row, output, columnMap, moduleName) {\n\tlet count = 0;\n\tfor (const key of Object.keys(row)) {\n\t\tconst index = columnMap.get(key);\n\t\tif (index === undefined) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\n\t\t}\n\t\toutput[index] = row[key];\n\t\tcount += 1;\n\t}\n\tif (count !== columnMap.size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\n\t}\n}\n\nfunction inferParameters({ length }) {\n\tif (!Number.isInteger(length) || length < 0) {\n\t\tthrow new TypeError('Expected function.length to be a positive integer');\n\t}\n\tconst params = [];\n\tfor (let i = 0; i < length; ++i) {\n\t\tparams.push(`$${i + 1}`);\n\t}\n\treturn params;\n}\n\nconst { hasOwnProperty } = Object.prototype;\nconst { apply } = Function.prototype;\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*(){});\nconst identifier = str => `\"${str.replace(/\"/g, '\"\"')}\"`;\nconst defer = x => () => x;\n"],"names":["cppdb","require","module","exports","defineTable","name","factory","TypeError","eponymous","defer","parseTableDefinition","wrapFactory","table","virtualTableFactory","moduleName","databaseName","tableName","args","thisObject","database","def","apply","call","verb","hasOwnProperty","rows","Object","getPrototypeOf","GeneratorFunctionPrototype","columns","Array","isArray","every","x","length","Set","size","RangeError","parameters","inferParameters","parameter","includes","safeIntegers","bool","directOnly","columnDefinitions","map","identifier","str","join","wrapGenerator","Map","i","generator","columnMap","virtualTable","output","Buffer","isBuffer","from","push","row","extractRowArray","extractRowObject","columnCount","offset","count","key","keys","index","get","undefined","Number","isInteger","params","prototype","Function","replace"],"mappings":"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"}