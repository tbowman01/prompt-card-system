{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/security/SecurityMonitor.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\n\nconst execAsync = promisify(exec);\n\nexport interface SecurityEvent {\n  id: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'vulnerability' | 'intrusion' | 'authentication' | 'access' | 'malware';\n  source: string;\n  message: string;\n  details: any;\n  resolved: boolean;\n}\n\nexport interface VulnerabilityReport {\n  id: string;\n  timestamp: Date;\n  scanType: 'dependencies' | 'code' | 'docker' | 'infrastructure';\n  vulnerabilities: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    total: number;\n  };\n  details: any[];\n  recommendations: string[];\n}\n\nexport interface SecurityMetrics {\n  eventsLast24h: number;\n  criticalVulnerabilities: number;\n  securityScore: number;\n  lastScanTimestamp?: Date;\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  complianceStatus: {\n    score: number;\n    checks: {\n      name: string;\n      passed: boolean;\n      required: boolean;\n    }[];\n  };\n}\n\nexport class SecurityMonitor extends EventEmitter {\n  private events: SecurityEvent[] = [];\n  private vulnerabilityReports: VulnerabilityReport[] = [];\n  private scanInterval?: NodeJS.Timeout;\n  private eventCleanupInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    maxEvents?: number;\n    eventRetentionDays?: number;\n    scanIntervalMinutes?: number;\n    enableContinuousScanning?: boolean;\n  } = {}) {\n    super();\n    \n    const {\n      maxEvents = 10000,\n      eventRetentionDays = 30,\n      scanIntervalMinutes = 60,\n      enableContinuousScanning = true\n    } = options;\n\n    this.options = {\n      maxEvents,\n      eventRetentionDays,\n      scanIntervalMinutes,\n      enableContinuousScanning\n    };\n\n    this.setupEventCleanup();\n    \n    if (enableContinuousScanning) {\n      this.startContinuousScanning();\n    }\n  }\n\n  // Security Event Management\n  logSecurityEvent(event: Omit<SecurityEvent, 'id' | 'timestamp'>): void {\n    const securityEvent: SecurityEvent = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      ...event\n    };\n\n    this.events.push(securityEvent);\n    this.emit('securityEvent', securityEvent);\n\n    // Trigger immediate alert for critical events\n    if (event.severity === 'critical') {\n      this.emit('criticalAlert', securityEvent);\n    }\n\n    // Maintain event limit\n    if (this.events.length > this.options.maxEvents!) {\n      this.events = this.events.slice(-this.options.maxEvents!);\n    }\n  }\n\n  getSecurityEvents(filters?: {\n    severity?: SecurityEvent['severity'];\n    type?: SecurityEvent['type'];\n    source?: string;\n    since?: Date;\n    limit?: number;\n  }): SecurityEvent[] {\n    let filteredEvents = [...this.events];\n\n    if (filters) {\n      if (filters.severity) {\n        filteredEvents = filteredEvents.filter(e => e.severity === filters.severity);\n      }\n      if (filters.type) {\n        filteredEvents = filteredEvents.filter(e => e.type === filters.type);\n      }\n      if (filters.source) {\n        filteredEvents = filteredEvents.filter(e => e.source.includes(filters.source));\n      }\n      if (filters.since) {\n        filteredEvents = filteredEvents.filter(e => e.timestamp >= filters.since!);\n      }\n      if (filters.limit) {\n        filteredEvents = filteredEvents.slice(-filters.limit);\n      }\n    }\n\n    return filteredEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // Vulnerability Scanning\n  async scanDependencies(): Promise<VulnerabilityReport> {\n    try {\n      const report: VulnerabilityReport = {\n        id: crypto.randomUUID(),\n        timestamp: new Date(),\n        scanType: 'dependencies',\n        vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n        details: [],\n        recommendations: []\n      };\n\n      // Use npm audit for dependency scanning\n      try {\n        const { stdout } = await execAsync('npm audit --json', { cwd: process.cwd() });\n        const auditResult = JSON.parse(stdout);\n        \n        if (auditResult.vulnerabilities) {\n          const vulns = auditResult.vulnerabilities;\n          \n          Object.keys(vulns).forEach(packageName => {\n            const vuln = vulns[packageName];\n            const severity = vuln.severity;\n            \n            report.vulnerabilities[severity as keyof typeof report.vulnerabilities]++;\n            report.vulnerabilities.total++;\n            \n            report.details.push({\n              package: packageName,\n              severity: severity,\n              title: vuln.title || 'Unknown vulnerability',\n              range: vuln.range,\n              fixAvailable: vuln.fixAvailable\n            });\n          });\n        }\n\n        // Generate recommendations\n        if (report.vulnerabilities.critical > 0) {\n          report.recommendations.push('Immediately update packages with critical vulnerabilities');\n        }\n        if (report.vulnerabilities.high > 0) {\n          report.recommendations.push('Update packages with high severity vulnerabilities within 24 hours');\n        }\n        if (report.vulnerabilities.total > 0) {\n          report.recommendations.push('Run \"npm audit fix\" to automatically fix vulnerabilities');\n        }\n\n      } catch (error) {\n        // If npm audit fails, try alternative approaches\n        report.details.push({\n          error: 'Failed to run npm audit',\n          message: error instanceof Error ? error.message : 'Unknown error',\n          fallback: 'Consider using yarn audit or manual dependency review'\n        });\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'dependency-scanner',\n        message: `Dependency scan completed: ${report.vulnerabilities.total} vulnerabilities found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Dependency scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async scanCode(): Promise<VulnerabilityReport> {\n    const report: VulnerabilityReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      scanType: 'code',\n      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n      details: [],\n      recommendations: []\n    };\n\n    try {\n      // Basic static code analysis patterns\n      const srcPath = path.join(process.cwd(), 'src');\n      const files = await this.getSourceFiles(srcPath);\n      \n      for (const file of files) {\n        const content = await fs.readFile(file, 'utf-8');\n        const issues = this.analyzeCodeSecurity(content, file);\n        \n        issues.forEach(issue => {\n          report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n          report.vulnerabilities.total++;\n          report.details.push(issue);\n        });\n      }\n\n      // Generate recommendations\n      if (report.vulnerabilities.total > 0) {\n        report.recommendations.push('Review and fix identified security issues in source code');\n        report.recommendations.push('Consider implementing automated security linting');\n        report.recommendations.push('Perform regular security code reviews');\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'code-scanner',\n        message: `Code scan completed: ${report.vulnerabilities.total} issues found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Code scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async scanInfrastructure(): Promise<VulnerabilityReport> {\n    const report: VulnerabilityReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      scanType: 'infrastructure',\n      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n      details: [],\n      recommendations: []\n    };\n\n    try {\n      // Check Docker configuration if present\n      const dockerfilePaths = ['Dockerfile', 'Dockerfile.dev', 'docker-compose.yml', 'docker-compose.dev.yml'];\n      \n      for (const dockerFile of dockerfilePaths) {\n        try {\n          const content = await fs.readFile(dockerFile, 'utf-8');\n          const issues = this.analyzeDockerSecurity(content, dockerFile);\n          \n          issues.forEach(issue => {\n            report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n            report.vulnerabilities.total++;\n            report.details.push(issue);\n          });\n        } catch {\n          // File doesn't exist, skip\n        }\n      }\n\n      // Check environment configuration\n      const envIssues = await this.analyzeEnvironmentSecurity();\n      envIssues.forEach(issue => {\n        report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n        report.vulnerabilities.total++;\n        report.details.push(issue);\n      });\n\n      // Generate recommendations\n      if (report.vulnerabilities.total > 0) {\n        report.recommendations.push('Review and harden infrastructure configuration');\n        report.recommendations.push('Implement security best practices for containerization');\n        report.recommendations.push('Regular infrastructure security audits');\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'infrastructure-scanner',\n        message: `Infrastructure scan completed: ${report.vulnerabilities.total} issues found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Infrastructure scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Comprehensive security scan\n  async performComprehensiveScan(): Promise<VulnerabilityReport[]> {\n    const results = await Promise.allSettled([\n      this.scanDependencies(),\n      this.scanCode(),\n      this.scanInfrastructure()\n    ]);\n\n    const reports: VulnerabilityReport[] = [];\n    \n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        reports.push(result.value);\n      } else {\n        this.logSecurityEvent({\n          severity: 'high',\n          type: 'vulnerability',\n          source: 'comprehensive-scanner',\n          message: `Scan failed: ${result.reason}`,\n          details: { error: result.reason },\n          resolved: false\n        });\n      }\n    });\n\n    return reports;\n  }\n\n  // Security Metrics\n  getSecurityMetrics(): SecurityMetrics {\n    const now = new Date();\n    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    \n    const eventsLast24h = this.events.filter(e => e.timestamp >= last24h).length;\n    const criticalEvents = this.events.filter(e => e.severity === 'critical' && !e.resolved).length;\n    \n    const latestReport = this.vulnerabilityReports\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n    \n    const criticalVulnerabilities = latestReport?.vulnerabilities.critical || 0;\n    \n    // Calculate security score (0-100)\n    let securityScore = 100;\n    securityScore -= criticalVulnerabilities * 20;\n    securityScore -= (latestReport?.vulnerabilities.high || 0) * 10;\n    securityScore -= (latestReport?.vulnerabilities.medium || 0) * 5;\n    securityScore -= criticalEvents * 15;\n    securityScore = Math.max(0, securityScore);\n    \n    const threatLevel: SecurityMetrics['threatLevel'] = \n      criticalVulnerabilities > 0 || criticalEvents > 0 ? 'critical' :\n      (latestReport?.vulnerabilities.high || 0) > 0 ? 'high' :\n      (latestReport?.vulnerabilities.medium || 0) > 0 ? 'medium' : 'low';\n\n    // Compliance checks\n    const complianceChecks = [\n      { name: 'Regular vulnerability scanning', passed: this.vulnerabilityReports.length > 0, required: true },\n      { name: 'Security event logging', passed: this.events.length > 0, required: true },\n      { name: 'No critical vulnerabilities', passed: criticalVulnerabilities === 0, required: true },\n      { name: 'Environment security', passed: true, required: true }, // Would be determined by env scan\n      { name: 'Dependency security', passed: (latestReport?.vulnerabilities.critical || 0) === 0, required: true }\n    ];\n\n    const passedChecks = complianceChecks.filter(c => c.passed).length;\n    const complianceScore = Math.round((passedChecks / complianceChecks.length) * 100);\n\n    return {\n      eventsLast24h,\n      criticalVulnerabilities,\n      securityScore,\n      lastScanTimestamp: latestReport?.timestamp,\n      threatLevel,\n      complianceStatus: {\n        score: complianceScore,\n        checks: complianceChecks\n      }\n    };\n  }\n\n  // Helper methods\n  private async getSourceFiles(dir: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    try {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        \n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n          files.push(...await this.getSourceFiles(fullPath));\n        } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.js'))) {\n          files.push(fullPath);\n        }\n      }\n    } catch {\n      // Directory doesn't exist or can't be read\n    }\n    \n    return files;\n  }\n\n  private analyzeCodeSecurity(content: string, filename: string): any[] {\n    const issues: any[] = [];\n    \n    // Security patterns to check\n    const patterns = [\n      {\n        regex: /eval\\s*\\(/g,\n        severity: 'critical',\n        message: 'Use of eval() function detected - potential code injection vulnerability',\n        type: 'code-injection'\n      },\n      {\n        regex: /document\\.write\\s*\\(/g,\n        severity: 'high',\n        message: 'Use of document.write() detected - potential XSS vulnerability',\n        type: 'xss'\n      },\n      {\n        regex: /innerHTML\\s*=/g,\n        severity: 'medium',\n        message: 'Use of innerHTML detected - potential XSS vulnerability if user input',\n        type: 'xss'\n      },\n      {\n        regex: /password\\s*=\\s*[\"'][^\"']+[\"']/gi,\n        severity: 'critical',\n        message: 'Hardcoded password detected in source code',\n        type: 'secrets'\n      },\n      {\n        regex: /api[_-]?key\\s*=\\s*[\"'][^\"']+[\"']/gi,\n        severity: 'critical',\n        message: 'Hardcoded API key detected in source code',\n        type: 'secrets'\n      },\n      {\n        regex: /\\.(exec|system)\\s*\\(/g,\n        severity: 'high',\n        message: 'Command execution detected - ensure input validation',\n        type: 'command-injection'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        matches.forEach((match, index) => {\n          const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n          issues.push({\n            file: filename,\n            line: lineNumber,\n            severity: pattern.severity,\n            type: pattern.type,\n            message: pattern.message,\n            code: match.trim()\n          });\n        });\n      }\n    });\n    \n    return issues;\n  }\n\n  private analyzeDockerSecurity(content: string, filename: string): any[] {\n    const issues: any[] = [];\n    \n    // Docker security patterns\n    const patterns = [\n      {\n        regex: /USER\\s+root/gi,\n        severity: 'high',\n        message: 'Running as root user in Docker container',\n        type: 'privilege-escalation'\n      },\n      {\n        regex: /COPY\\s+.*\\s+\\//gi,\n        severity: 'medium',\n        message: 'Copying files to root directory - consider specific paths',\n        type: 'file-permissions'\n      },\n      {\n        regex: /--privileged/gi,\n        severity: 'critical',\n        message: 'Privileged mode detected - security risk',\n        type: 'privilege-escalation'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        matches.forEach(match => {\n          const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n          issues.push({\n            file: filename,\n            line: lineNumber,\n            severity: pattern.severity,\n            type: pattern.type,\n            message: pattern.message,\n            code: match.trim()\n          });\n        });\n      }\n    });\n    \n    return issues;\n  }\n\n  private async analyzeEnvironmentSecurity(): Promise<any[]> {\n    const issues: any[] = [];\n    \n    // Check for environment variable security\n    const envVars = process.env;\n    \n    Object.keys(envVars).forEach(key => {\n      if (key.toLowerCase().includes('secret') || \n          key.toLowerCase().includes('password') ||\n          key.toLowerCase().includes('key')) {\n        // Don't log actual values, just flag potential issues\n        if (envVars[key] && envVars[key].length < 8) {\n          issues.push({\n            type: 'weak-credentials',\n            severity: 'medium',\n            message: `Environment variable '${key}' appears to have weak value`,\n            variable: key\n          });\n        }\n      }\n    });\n    \n    return issues;\n  }\n\n  private setupEventCleanup(): void {\n    this.eventCleanupInterval = setInterval(() => {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - this.options.eventRetentionDays!);\n      \n      this.events = this.events.filter(event => event.timestamp >= cutoffDate);\n      this.vulnerabilityReports = this.vulnerabilityReports.filter(report => report.timestamp >= cutoffDate);\n    }, 24 * 60 * 60 * 1000); // Daily cleanup\n  }\n\n  private startContinuousScanning(): void {\n    this.scanInterval = setInterval(async () => {\n      try {\n        await this.performComprehensiveScan();\n      } catch (error) {\n        this.logSecurityEvent({\n          severity: 'medium',\n          type: 'vulnerability',\n          source: 'continuous-scanner',\n          message: `Continuous scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          details: { error },\n          resolved: false\n        });\n      }\n    }, this.options.scanIntervalMinutes! * 60 * 1000);\n  }\n\n  // Cleanup resources\n  destroy(): void {\n    if (this.scanInterval) {\n      clearInterval(this.scanInterval);\n    }\n    if (this.eventCleanupInterval) {\n      clearInterval(this.eventCleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n\nexport const securityMonitor = new SecurityMonitor({\n  maxEvents: 10000,\n  eventRetentionDays: 30,\n  scanIntervalMinutes: 60,\n  enableContinuousScanning: process.env.NODE_ENV === 'production'\n});"],"names":["SecurityMonitor","securityMonitor","execAsync","promisify","exec","EventEmitter","logSecurityEvent","event","securityEvent","id","crypto","randomUUID","timestamp","Date","events","push","emit","severity","length","options","maxEvents","slice","getSecurityEvents","filters","filteredEvents","filter","e","type","source","includes","since","limit","sort","a","b","getTime","scanDependencies","report","scanType","vulnerabilities","critical","high","medium","low","total","details","recommendations","stdout","cwd","process","auditResult","JSON","parse","vulns","Object","keys","forEach","packageName","vuln","package","title","range","fixAvailable","error","message","Error","fallback","vulnerabilityReports","resolved","scanCode","srcPath","path","join","files","getSourceFiles","file","content","fs","readFile","issues","analyzeCodeSecurity","issue","scanInfrastructure","dockerfilePaths","dockerFile","analyzeDockerSecurity","envIssues","analyzeEnvironmentSecurity","performComprehensiveScan","results","Promise","allSettled","reports","result","index","status","value","reason","getSecurityMetrics","now","last24h","eventsLast24h","criticalEvents","latestReport","criticalVulnerabilities","securityScore","Math","max","threatLevel","complianceChecks","name","passed","required","passedChecks","c","complianceScore","round","lastScanTimestamp","complianceStatus","score","checks","dir","entries","readdir","withFileTypes","entry","fullPath","isDirectory","startsWith","isFile","endsWith","filename","patterns","regex","pattern","matches","match","lineNumber","substring","indexOf","split","line","code","trim","envVars","env","key","toLowerCase","variable","setupEventCleanup","eventCleanupInterval","setInterval","cutoffDate","setDate","getDate","eventRetentionDays","startContinuousScanning","scanInterval","scanIntervalMinutes","destroy","clearInterval","removeAllListeners","enableContinuousScanning","NODE_ENV"],"mappings":"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"}