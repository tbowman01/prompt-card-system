{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/middleware/security.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport helmet from 'helmet';\nimport { randomBytes, createHash } from 'crypto';\n\n// CSRF Protection\ninterface CSRFStore {\n  [sessionId: string]: {\n    token: string;\n    expires: number;\n  };\n}\n\nconst csrfTokens: CSRFStore = {};\nconst CSRF_TOKEN_EXPIRY = 60 * 60 * 1000; // 1 hour\n\n// Generate CSRF token\nexport const generateCSRFToken = (sessionId: string): string => {\n  const token = randomBytes(32).toString('hex');\n  const expires = Date.now() + CSRF_TOKEN_EXPIRY;\n  \n  csrfTokens[sessionId] = { token, expires };\n  \n  // Clean up expired tokens\n  cleanupExpiredCSRFTokens();\n  \n  return token;\n};\n\n// Validate CSRF token\nexport const validateCSRFToken = (sessionId: string, token: string): boolean => {\n  const stored = csrfTokens[sessionId];\n  \n  if (!stored || stored.expires < Date.now()) {\n    delete csrfTokens[sessionId];\n    return false;\n  }\n  \n  return stored.token === token;\n};\n\n// Clean up expired CSRF tokens\nconst cleanupExpiredCSRFTokens = (): void => {\n  const now = Date.now();\n  Object.keys(csrfTokens).forEach(sessionId => {\n    if (csrfTokens[sessionId].expires < now) {\n      delete csrfTokens[sessionId];\n    }\n  });\n};\n\n// CSRF middleware\nexport const csrfProtection = (req: Request, res: Response, next: NextFunction): void => {\n  // Skip CSRF for GET, HEAD, OPTIONS requests\n  if (['GET', 'HEAD', 'OPTIONS'].includes(req.method)) {\n    next();\n    return;\n  }\n  \n  // Skip CSRF for API endpoints that use Bearer token authentication\n  if (req.headers.authorization?.startsWith('Bearer ')) {\n    next();\n    return;\n  }\n  \n  const sessionId = req.headers['x-session-id'] as string;\n  const csrfToken = req.headers['x-csrf-token'] as string;\n  \n  if (!sessionId || !csrfToken || !validateCSRFToken(sessionId, csrfToken)) {\n    res.status(403).json({\n      success: false,\n      error: 'Invalid or missing CSRF token',\n      code: 'CSRF_TOKEN_INVALID'\n    });\n    return;\n  }\n  \n  next();\n};\n\n// Generate CSRF token endpoint\nexport const getCSRFToken = (req: Request, res: Response): void => {\n  const sessionId = req.headers['x-session-id'] as string || randomBytes(16).toString('hex');\n  const token = generateCSRFToken(sessionId);\n  \n  res.json({\n    success: true,\n    data: {\n      csrfToken: token,\n      sessionId: sessionId\n    }\n  });\n};\n\n// Enhanced Helmet configuration\nexport const enhancedHelmetConfig = helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdnjs.cloudflare.com\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\", \"data:\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n      connectSrc: [\"'self'\", \"ws:\", \"wss:\", \"http://localhost:*\"],\n      mediaSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      frameSrc: [\"'none'\"],\n      baseUri: [\"'self'\"],\n      formAction: [\"'self'\"],\n      frameAncestors: [\"'none'\"]\n    }\n  },\n  crossOriginEmbedderPolicy: { policy: 'credentialless' },\n  crossOriginOpenerPolicy: { policy: 'same-origin' },\n  crossOriginResourcePolicy: { policy: 'cross-origin' },\n  dnsPrefetchControl: { allow: false },\n  frameguard: { action: 'deny' },\n  hidePoweredBy: true,\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  },\n  ieNoOpen: true,\n  noSniff: true,\n  originAgentCluster: true,\n  permittedCrossDomainPolicies: false,\n  referrerPolicy: { policy: 'no-referrer' },\n  xssFilter: true\n});\n\n// Request ID middleware for tracing\nexport const requestId = (req: Request, res: Response, next: NextFunction): void => {\n  const requestId = req.headers['x-request-id'] as string || randomBytes(16).toString('hex');\n  req.headers['x-request-id'] = requestId;\n  res.setHeader('x-request-id', requestId);\n  next();\n};\n\n// Request logging middleware with security context\nexport const securityLogger = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = Date.now();\n  \n  const logData = {\n    timestamp: new Date().toISOString(),\n    method: req.method,\n    url: req.url,\n    ip: req.ip,\n    userAgent: req.headers['user-agent'],\n    requestId: req.headers['x-request-id']\n  };\n  \n  console.log('Security Log - Request:', JSON.stringify(logData));\n  \n  next();\n};\n\n// Security headers middleware\nexport const securityHeaders = (req: Request, res: Response, next: NextFunction): void => {\n  res.setHeader('X-Frame-Options', 'DENY');\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n  res.setHeader('Pragma', 'no-cache');\n  res.setHeader('Expires', '0');\n  res.removeHeader('X-Powered-By');\n  \n  next();\n};\n\n// Clean up security resources periodically\nsetInterval(() => {\n  cleanupExpiredCSRFTokens();\n}, 60 * 60 * 1000); // Clean up every hour"],"names":["csrfProtection","enhancedHelmetConfig","generateCSRFToken","getCSRFToken","requestId","securityHeaders","securityLogger","validateCSRFToken","csrfTokens","CSRF_TOKEN_EXPIRY","sessionId","token","randomBytes","toString","expires","Date","now","cleanupExpiredCSRFTokens","stored","Object","keys","forEach","req","res","next","includes","method","headers","authorization","startsWith","csrfToken","status","json","success","error","code","data","helmet","contentSecurityPolicy","directives","defaultSrc","scriptSrc","styleSrc","fontSrc","imgSrc","connectSrc","mediaSrc","objectSrc","frameSrc","baseUri","formAction","frameAncestors","crossOriginEmbedderPolicy","policy","crossOriginOpenerPolicy","crossOriginResourcePolicy","dnsPrefetchControl","allow","frameguard","action","hidePoweredBy","hsts","maxAge","includeSubDomains","preload","ieNoOpen","noSniff","originAgentCluster","permittedCrossDomainPolicies","referrerPolicy","xssFilter","setHeader","startTime","logData","timestamp","toISOString","url","ip","userAgent","console","log","JSON","stringify","removeHeader","setInterval"],"mappings":"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"}