{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/integration/reporting-integration.test.ts"],"sourcesContent":["import request from 'supertest';\nimport assert from 'assert';\nimport app from '../../server';\nimport { ReportService } from '../../services/reports/ReportService';\nimport { ReportGenerator } from '../../services/reports/generators/ReportGenerator';\nimport { PDFExporter } from '../../services/reports/exporters/PDFExporter';\nimport { ExcelExporter } from '../../services/reports/exporters/ExcelExporter';\nimport fs from 'fs';\nimport path from 'path';\n\ndescribe('Advanced Reporting System Integration Tests', () => {\n  let reportService: ReportService;\n  let reportGenerator: ReportGenerator;\n  const testReportId = 'test-report-123';\n  const testCardId = 'test-card-report-456';\n\n  beforeEach(async () => {\n    reportService = new ReportService();\n    reportGenerator = new ReportGenerator();\n    \n    // Set up test data\n    await reportService.createTestData(testCardId);\n  });\n\n  describe('Report Generation Integration', () => {\n    it('should generate comprehensive test execution report', async () => {\n      const response = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'test_execution',\n          cardId: testCardId,\n          timeRange: {\n            start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString()\n          },\n          includeMetrics: true,\n          includeCharts: true,\n          includeAnalytics: true\n        })\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).toHaveProperty('reportId');\n      expect(response.body.data).toHaveProperty('status');\n      expect(response.body.data.status).toBe('completed');\n    });\n\n    it('should generate performance analysis report', async () => {\n      const response = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'performance_analysis',\n          cardId: testCardId,\n          analysisType: 'comprehensive',\n          includeRecommendations: true,\n          includeBenchmarks: true\n        })\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).toHaveProperty('reportId');\n      expect(response.body.data).toHaveProperty('performanceMetrics');\n      expect(response.body.data).toHaveProperty('recommendations');\n    });\n\n    it('should generate cost optimization report', async () => {\n      const response = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'cost_optimization',\n          cardId: testCardId,\n          includeCostBreakdown: true,\n          includeOptimizationSuggestions: true,\n          includeProjections: true\n        })\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).toHaveProperty('reportId');\n      expect(response.body.data).toHaveProperty('costAnalysis');\n      expect(response.body.data).toHaveProperty('optimizationSuggestions');\n    });\n  });\n\n  describe('Report Export Integration', () => {\n    it('should export report to PDF format', async () => {\n      // First generate a report\n      const generateResponse = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'test_execution',\n          cardId: testCardId,\n          timeRange: {\n            start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString()\n          }\n        })\n        .expect(200);\n\n      const reportId = generateResponse.body.data.reportId;\n\n      // Export to PDF\n      const exportResponse = await request(app)\n        .post(`/api/reports/${reportId}/export`)\n        .send({\n          format: 'pdf',\n          includeCharts: true,\n          includeTableOfContents: true,\n          theme: 'professional'\n        })\n        .expect(200);\n\n      assert(exportResponse.body.success === true);\n      expect(exportResponse.body.data).toHaveProperty('downloadUrl');\n      expect(exportResponse.body.data).toHaveProperty('fileName');\n      expect(exportResponse.body.data.fileName).toContain('.pdf');\n    });\n\n    it('should export report to Excel format', async () => {\n      // First generate a report\n      const generateResponse = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'performance_analysis',\n          cardId: testCardId\n        })\n        .expect(200);\n\n      const reportId = generateResponse.body.data.reportId;\n\n      // Export to Excel\n      const exportResponse = await request(app)\n        .post(`/api/reports/${reportId}/export`)\n        .send({\n          format: 'excel',\n          includeCharts: true,\n          includeRawData: true,\n          separateSheets: true\n        })\n        .expect(200);\n\n      assert(exportResponse.body.success === true);\n      expect(exportResponse.body.data).toHaveProperty('downloadUrl');\n      expect(exportResponse.body.data).toHaveProperty('fileName');\n      expect(exportResponse.body.data.fileName).toContain('.xlsx');\n    });\n\n    it('should export report to CSV format', async () => {\n      // First generate a report\n      const generateResponse = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'cost_optimization',\n          cardId: testCardId\n        })\n        .expect(200);\n\n      const reportId = generateResponse.body.data.reportId;\n\n      // Export to CSV\n      const exportResponse = await request(app)\n        .post(`/api/reports/${reportId}/export`)\n        .send({\n          format: 'csv',\n          includeHeaders: true,\n          delimiter: ',',\n          encoding: 'utf-8'\n        })\n        .expect(200);\n\n      assert(exportResponse.body.success === true);\n      expect(exportResponse.body.data).toHaveProperty('downloadUrl');\n      expect(exportResponse.body.data).toHaveProperty('fileName');\n      expect(exportResponse.body.data.fileName).toContain('.csv');\n    });\n  });\n\n  describe('Scheduled Reports Integration', () => {\n    it('should create and manage scheduled reports', async () => {\n      const response = await request(app)\n        .post('/api/reports/schedule')\n        .send({\n          name: 'Weekly Performance Report',\n          type: 'performance_analysis',\n          cardId: testCardId,\n          schedule: {\n            frequency: 'weekly',\n            dayOfWeek: 'monday',\n            time: '09:00',\n            timezone: 'UTC'\n          },\n          format: 'pdf',\n          recipients: ['test@example.com'],\n          includeCharts: true\n        })\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).toHaveProperty('scheduleId');\n      expect(response.body.data).toHaveProperty('nextExecution');\n    });\n\n    it('should handle scheduled report execution', async () => {\n      // Create a scheduled report\n      const scheduleResponse = await request(app)\n        .post('/api/reports/schedule')\n        .send({\n          name: 'Daily Cost Report',\n          type: 'cost_optimization',\n          cardId: testCardId,\n          schedule: {\n            frequency: 'daily',\n            time: '08:00'\n          },\n          format: 'excel'\n        })\n        .expect(200);\n\n      const scheduleId = scheduleResponse.body.data.scheduleId;\n\n      // Trigger scheduled report execution\n      const executeResponse = await request(app)\n        .post(`/api/reports/schedule/${scheduleId}/execute`)\n        .expect(200);\n\n      assert(executeResponse.body.success === true);\n      expect(executeResponse.body.data).toHaveProperty('reportId');\n      expect(executeResponse.body.data).toHaveProperty('executionTime');\n    });\n  });\n\n  describe('Report Templates Integration', () => {\n    it('should create and use custom report templates', async () => {\n      // Create custom template\n      const templateResponse = await request(app)\n        .post('/api/reports/templates')\n        .send({\n          name: 'Custom Performance Template',\n          type: 'performance_analysis',\n          sections: [\n            {\n              type: 'summary',\n              title: 'Executive Summary',\n              includeMetrics: true\n            },\n            {\n              type: 'charts',\n              title: 'Performance Trends',\n              chartTypes: ['line', 'bar']\n            },\n            {\n              type: 'table',\n              title: 'Detailed Results',\n              columns: ['timestamp', 'success_rate', 'response_time']\n            }\n          ],\n          styling: {\n            theme: 'corporate',\n            colors: ['#1f77b4', '#ff7f0e', '#2ca02c']\n          }\n        })\n        .expect(200);\n\n      const templateId = templateResponse.body.data.templateId;\n\n      // Use template to generate report\n      const reportResponse = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          templateId,\n          cardId: testCardId,\n          timeRange: {\n            start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString()\n          }\n        })\n        .expect(200);\n\n      assert(reportResponse.body.success === true);\n      expect(reportResponse.body.data).toHaveProperty('reportId');\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle missing card ID gracefully', async () => {\n      const response = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'test_execution',\n          timeRange: {\n            start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n            end: new Date().toISOString()\n          }\n        })\n        .expect(400);\n\n      expect(response.body.error).toContain('Card ID is required');\n    });\n\n    it('should handle invalid report type', async () => {\n      const response = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'invalid_type',\n          cardId: testCardId\n        })\n        .expect(400);\n\n      expect(response.body.error).toContain('Invalid report type');\n    });\n\n    it('should handle export failures gracefully', async () => {\n      // Create a report first\n      const generateResponse = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'test_execution',\n          cardId: testCardId\n        })\n        .expect(200);\n\n      const reportId = generateResponse.body.data.reportId;\n\n      // Try to export with invalid format\n      const exportResponse = await request(app)\n        .post(`/api/reports/${reportId}/export`)\n        .send({\n          format: 'invalid_format'\n        })\n        .expect(400);\n\n      expect(exportResponse.body.error).toContain('Invalid export format');\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    it('should handle large dataset report generation', async () => {\n      // Generate report with large dataset\n      const response = await request(app)\n        .post('/api/reports/generate')\n        .send({\n          type: 'comprehensive_analysis',\n          cardId: testCardId,\n          timeRange: {\n            start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days\n            end: new Date().toISOString()\n          },\n          includeAllMetrics: true,\n          includeRawData: true\n        })\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).toHaveProperty('reportId');\n      \n      // Verify the report was generated successfully\n      const statusResponse = await request(app)\n        .get(`/api/reports/${response.body.data.reportId}/status`)\n        .expect(200);\n\n      expect(statusResponse.body.data.status).toMatch(/^(completed|processing)$/);\n    });\n  });\n});"],"names":["describe","reportService","reportGenerator","testReportId","testCardId","beforeEach","ReportService","ReportGenerator","createTestData","it","response","request","app","post","send","type","cardId","timeRange","start","Date","now","toISOString","end","includeMetrics","includeCharts","includeAnalytics","expect","assert","body","success","data","toHaveProperty","status","toBe","analysisType","includeRecommendations","includeBenchmarks","includeCostBreakdown","includeOptimizationSuggestions","includeProjections","generateResponse","reportId","exportResponse","format","includeTableOfContents","theme","fileName","toContain","includeRawData","separateSheets","includeHeaders","delimiter","encoding","name","schedule","frequency","dayOfWeek","time","timezone","recipients","scheduleResponse","scheduleId","executeResponse","templateResponse","sections","title","chartTypes","columns","styling","colors","templateId","reportResponse","error","includeAllMetrics","statusResponse","get","toMatch"],"mappings":"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"}