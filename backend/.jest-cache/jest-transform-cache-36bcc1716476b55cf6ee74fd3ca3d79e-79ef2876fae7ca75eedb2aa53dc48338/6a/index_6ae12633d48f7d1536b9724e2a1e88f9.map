{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/reports/index.ts"],"sourcesContent":["import { Router } from 'express';\nimport { reportService } from '../../services/reports/ReportService';\nimport { ReportFilters, ReportExportOptions } from '../../types/reports';\n\nconst router = Router();\n\n// Generate report\nrouter.post('/generate/:templateId', async (req, res) => {\n  try {\n    const { templateId } = req.params;\n    const filters: ReportFilters = req.body.filters || {};\n    const options = req.body.options || {};\n\n    const report = await reportService.generateReport(templateId, filters, options);\n    \n    res.json({\n      success: true,\n      data: report\n    });\n  } catch (error) {\n    console.error('Error generating report:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Export report\nrouter.post('/export/:reportId/:format', async (req, res) => {\n  try {\n    const { reportId, format } = req.params;\n    const exportOptions: ReportExportOptions = {\n      format: format as any,\n      includeCharts: req.body.includeCharts !== false,\n      includeRawData: req.body.includeRawData === true,\n      compression: req.body.compression === true,\n      customizations: req.body.customizations\n    };\n\n    const exportBuffer = await reportService.exportReport(reportId, format as any, exportOptions);\n    \n    // Set appropriate headers\n    const filename = `report_${reportId}_${Date.now()}.${format}`;\n    const contentType = getContentType(format);\n    \n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.setHeader('Content-Type', contentType);\n    res.setHeader('Content-Length', exportBuffer.length);\n    \n    res.send(exportBuffer);\n  } catch (error) {\n    console.error('Error exporting report:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get templates\nrouter.get('/templates', async (req, res) => {\n  try {\n    const { type } = req.query;\n    \n    let templates;\n    if (type) {\n      templates = reportService.getTemplatesByType(type as any);\n    } else {\n      templates = reportService.getTemplates();\n    }\n    \n    res.json({\n      success: true,\n      data: templates\n    });\n  } catch (error) {\n    console.error('Error getting templates:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get specific template\nrouter.get('/templates/:templateId', async (req, res) => {\n  try {\n    const { templateId } = req.params;\n    const template = reportService.getTemplate(templateId);\n    \n    if (!template) {\n      res.status(404).json({\n        success: false,\n        error: 'Template not found'\n      });\n      return;\n    }\n    \n    res.json({\n      success: true,\n      data: template\n    });\n  } catch (error) {\n    console.error('Error getting template:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Create custom template\nrouter.post('/templates', async (req, res) => {\n  try {\n    const templateData = req.body;\n    const template = await reportService.createCustomTemplate(templateData);\n    \n    res.status(201).json({\n      success: true,\n      data: template\n    });\n  } catch (error) {\n    console.error('Error creating template:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get report history\nrouter.get('/history', async (req, res) => {\n  try {\n    const limit = parseInt(req.query.limit as string) || 50;\n    const offset = parseInt(req.query.offset as string) || 0;\n    const filters = {\n      templateId: req.query.templateId as string,\n      userId: req.query.userId as string,\n      startDate: req.query.startDate as string,\n      endDate: req.query.endDate as string\n    };\n\n    const result = await reportService.getReportHistory(limit, offset, filters);\n    \n    res.json({\n      success: true,\n      data: result.reports,\n      pagination: {\n        total: result.total,\n        limit,\n        offset,\n        pages: Math.ceil(result.total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Error getting report history:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get specific report\nrouter.get('/history/:reportId', async (req, res) => {\n  try {\n    const { reportId } = req.params;\n    const report = await reportService.getReportById(reportId);\n    \n    if (!report) {\n      res.status(404).json({\n        success: false,\n        error: 'Report not found'\n      });\n      return;\n    }\n    \n    res.json({\n      success: true,\n      data: report\n    });\n  } catch (error) {\n    console.error('Error getting report:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Delete report\nrouter.delete('/history/:reportId', async (req, res) => {\n  try {\n    const { reportId } = req.params;\n    const deleted = await reportService.deleteReport(reportId);\n    \n    if (!deleted) {\n      res.status(404).json({\n        success: false,\n        error: 'Report not found'\n      });\n      return;\n    }\n    \n    res.json({\n      success: true,\n      message: 'Report deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting report:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Schedule management\nrouter.post('/schedules', async (req, res) => {\n  try {\n    const scheduleData = req.body;\n    const schedule = await reportService.createSchedule(scheduleData);\n    \n    res.status(201).json({\n      success: true,\n      data: schedule\n    });\n  } catch (error) {\n    console.error('Error creating schedule:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/schedules', async (req, res) => {\n  try {\n    const schedules = await reportService.getSchedules();\n    \n    res.json({\n      success: true,\n      data: schedules\n    });\n  } catch (error) {\n    console.error('Error getting schedules:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Execute scheduled reports (typically called by cron job)\nrouter.post('/schedules/execute', async (req, res) => {\n  try {\n    await reportService.executeScheduledReports();\n    \n    res.json({\n      success: true,\n      message: 'Scheduled reports executed'\n    });\n  } catch (error) {\n    console.error('Error executing scheduled reports:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Real-time report generation progress (WebSocket endpoint would be better)\nrouter.get('/progress/:reportId', async (req, res) => {\n  try {\n    const { reportId } = req.params;\n    \n    // This is a simplified implementation\n    // In a real application, you'd use WebSocket or Server-Sent Events\n    res.json({\n      success: true,\n      data: {\n        id: reportId,\n        status: 'completed',\n        progress: 100,\n        currentStep: 'Report generation completed',\n        totalSteps: 6\n      }\n    });\n  } catch (error) {\n    console.error('Error getting progress:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Analytics endpoint for report metrics\nrouter.get('/analytics', async (req, res) => {\n  try {\n    const { startDate, endDate } = req.query;\n    \n    // Get report generation analytics\n    const analytics = {\n      totalReports: 0,\n      reportsByTemplate: {},\n      reportsByFormat: {},\n      averageGenerationTime: 0,\n      mostPopularTemplate: null,\n      recentActivity: []\n    };\n    \n    // This would be implemented with actual analytics queries\n    // For now, return mock data\n    res.json({\n      success: true,\n      data: analytics\n    });\n  } catch (error) {\n    console.error('Error getting analytics:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Health check endpoint\nrouter.get('/health', async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      data: {\n        service: 'Report Service',\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        templates: reportService.getTemplates().length,\n        cacheSize: 0 // Would implement actual cache size\n      }\n    });\n  } catch (error) {\n    console.error('Error checking health:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Helper function to get content type based on format\nfunction getContentType(format: string): string {\n  switch (format.toLowerCase()) {\n    case 'pdf':\n      return 'application/pdf';\n    case 'excel':\n      return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n    case 'csv':\n      return 'text/csv';\n    case 'json':\n      return 'application/json';\n    default:\n      return 'application/octet-stream';\n  }\n}\n\nexport { router as reportRoutes };"],"names":["reportRoutes","router","Router","post","req","res","templateId","params","filters","body","options","report","reportService","generateReport","json","success","data","error","console","status","Error","message","reportId","format","exportOptions","includeCharts","includeRawData","compression","customizations","exportBuffer","exportReport","filename","Date","now","contentType","getContentType","setHeader","length","send","get","type","query","templates","getTemplatesByType","getTemplates","template","getTemplate","templateData","createCustomTemplate","limit","parseInt","offset","userId","startDate","endDate","result","getReportHistory","reports","pagination","total","pages","Math","ceil","getReportById","delete","deleted","deleteReport","scheduleData","schedule","createSchedule","schedules","getSchedules","executeScheduledReports","id","progress","currentStep","totalSteps","analytics","totalReports","reportsByTemplate","reportsByFormat","averageGenerationTime","mostPopularTemplate","recentActivity","service","timestamp","toISOString","cacheSize","toLowerCase"],"mappings":"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"}