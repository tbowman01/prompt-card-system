{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/SamplePromptService.ts"],"sourcesContent":["import { db } from '../database/connection';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\n\nexport interface SamplePrompt {\n  title: string;\n  description: string;\n  prompt_template: string;\n  variables: string[];\n  category: string;\n  tags: string[];\n}\n\nexport class SamplePromptService {\n  private static instance: SamplePromptService;\n  private initialized = false;\n\n  public static getInstance(): SamplePromptService {\n    if (!SamplePromptService.instance) {\n      SamplePromptService.instance = new SamplePromptService();\n    }\n    return SamplePromptService.instance;\n  }\n\n  /**\n   * Get all predefined sample prompts\n   */\n  public getSamplePrompts(): SamplePrompt[] {\n    return [\n      {\n        title: \"Creative Story Generator\",\n        description: \"Generate engaging creative stories based on specified genre, characters, and setting. Perfect for creative writing, content creation, and storytelling exercises.\",\n        prompt_template: `Write a {{genre}} story that takes place in {{setting}}. The main character is {{character_name}}, who is {{character_description}}. \n\nThe story should:\n- Be approximately {{word_count}} words long\n- Include the theme of {{theme}}\n- Have a clear beginning, middle, and end\n- Be appropriate for {{target_audience}}\n\nStyle: {{writing_style}}\n\nCreate an engaging narrative that captures the reader's attention from the first sentence.`,\n        variables: [\"genre\", \"setting\", \"character_name\", \"character_description\", \"word_count\", \"theme\", \"target_audience\", \"writing_style\"],\n        category: \"creative\",\n        tags: [\"creative writing\", \"storytelling\", \"narrative\", \"fiction\"]\n      },\n      {\n        title: \"Technical Documentation Assistant\",\n        description: \"Create comprehensive technical documentation for software projects, APIs, and systems. Ideal for developers, technical writers, and project managers.\",\n        prompt_template: `Create technical documentation for {{project_name}}.\n\nProject Type: {{project_type}}\nTechnology Stack: {{tech_stack}}\nTarget Audience: {{audience_level}}\n\nPlease include the following sections:\n\n1. **Overview**\n   - Brief description of {{project_name}}\n   - Key features and capabilities\n   - Use cases and benefits\n\n2. **Getting Started**\n   - Prerequisites and requirements\n   - Installation instructions\n   - Basic setup and configuration\n\n3. **{{documentation_focus}}**\n   - Detailed implementation guide\n   - Code examples and best practices\n   - Common patterns and conventions\n\n4. **API Reference** (if applicable)\n   - Endpoint documentation\n   - Request/response examples\n   - Error handling and status codes\n\n5. **Troubleshooting**\n   - Common issues and solutions\n   - Debugging tips\n   - FAQ section\n\nFormat: Use clear markdown formatting with code blocks, tables, and examples where appropriate.\nTone: {{tone}} and suitable for {{audience_level}} developers.`,\n        variables: [\"project_name\", \"project_type\", \"tech_stack\", \"audience_level\", \"documentation_focus\", \"tone\"],\n        category: \"technical\",\n        tags: [\"documentation\", \"technical writing\", \"API\", \"software\", \"development\"]\n      },\n      {\n        title: \"Data Analysis Query Builder\",\n        description: \"Generate comprehensive data analysis queries and insights for business intelligence, research, and decision-making processes.\",\n        prompt_template: `Perform a data analysis on {{dataset_name}} with the following specifications:\n\n**Analysis Objective:** {{analysis_goal}}\n**Data Source:** {{data_source}}\n**Time Period:** {{time_period}}\n**Key Metrics:** {{key_metrics}}\n\nPlease provide:\n\n1. **Data Exploration**\n   - Overview of the dataset structure\n   - Key variables and their distributions\n   - Data quality assessment and missing values\n\n2. **Statistical Analysis**\n   - Descriptive statistics for {{key_metrics}}\n   - Correlation analysis between variables\n   - Trend analysis over {{time_period}}\n\n3. **Insights and Findings**\n   - Key patterns and relationships discovered\n   - Significant trends or anomalies\n   - Business implications of findings\n\n4. **Query Examples**\n   - SQL/Python code for key calculations\n   - Visualization recommendations\n   - Data filtering and aggregation methods\n\n5. **Recommendations**\n   - Actionable insights based on analysis\n   - Further analysis suggestions\n   - Data collection improvements\n\nAnalysis Level: {{complexity_level}}\nOutput Format: {{output_format}}\nInclude visualizations: {{include_charts}}`,\n        variables: [\"dataset_name\", \"analysis_goal\", \"data_source\", \"time_period\", \"key_metrics\", \"complexity_level\", \"output_format\", \"include_charts\"],\n        category: \"analytics\",\n        tags: [\"data analysis\", \"business intelligence\", \"statistics\", \"SQL\", \"insights\"]\n      },\n      {\n        title: \"Problem-Solving Framework\",\n        description: \"Systematic approach to analyzing and solving complex problems using structured thinking methodologies. Great for consulting, project management, and strategic planning.\",\n        prompt_template: `Analyze and provide a solution framework for the following problem:\n\n**Problem Statement:** {{problem_description}}\n**Context:** {{problem_context}}\n**Stakeholders:** {{stakeholders}}\n**Constraints:** {{constraints}}\n**Timeline:** {{timeline}}\n\nUsing the {{methodology}} approach, please provide:\n\n1. **Problem Definition**\n   - Root cause analysis\n   - Problem scope and boundaries\n   - Impact assessment on {{stakeholders}}\n\n2. **Solution Framework**\n   - Multiple solution alternatives\n   - Pros and cons for each approach\n   - Resource requirements and feasibility\n\n3. **Implementation Plan**\n   - Step-by-step action plan\n   - Timeline and milestones\n   - Risk assessment and mitigation strategies\n\n4. **Success Metrics**\n   - Key performance indicators\n   - Measurement methods\n   - Success criteria definition\n\n5. **Recommendations**\n   - Preferred solution with justification\n   - Next steps and immediate actions\n   - Long-term considerations\n\nAnalysis Depth: {{analysis_depth}}\nDecision Framework: {{decision_criteria}}\nPriority Level: {{priority_level}}`,\n        variables: [\"problem_description\", \"problem_context\", \"stakeholders\", \"constraints\", \"timeline\", \"methodology\", \"analysis_depth\", \"decision_criteria\", \"priority_level\"],\n        category: \"problem-solving\",\n        tags: [\"problem solving\", \"analysis\", \"strategy\", \"consulting\", \"framework\"]\n      },\n      {\n        title: \"Code Generation Assistant\",\n        description: \"Generate well-structured, documented code with best practices, error handling, and comprehensive testing. Perfect for rapid prototyping and development.\",\n        prompt_template: `Generate {{language}} code for the following requirements:\n\n**Project:** {{project_name}}\n**Functionality:** {{functionality_description}}\n**Framework/Library:** {{framework}}\n**Code Style:** {{coding_style}}\n\nRequirements:\n{{requirements}}\n\nPlease provide:\n\n1. **Main Implementation**\n   - Clean, well-structured code\n   - Proper error handling and validation\n   - Performance optimizations where applicable\n   - Security best practices\n\n2. **Documentation**\n   - Comprehensive code comments\n   - Function/method documentation\n   - Usage examples\n   - API documentation (if applicable)\n\n3. **Testing**\n   - Unit test cases\n   - Integration test examples\n   - Edge case handling\n   - Mock data and fixtures\n\n4. **Configuration**\n   - Environment setup instructions\n   - Dependencies and requirements\n   - Configuration files (if needed)\n   - Deployment considerations\n\nCode Quality Standards:\n- Follow {{coding_style}} conventions\n- Include type hints/annotations (where applicable)\n- Implement proper logging\n- Handle edge cases and errors gracefully\n- Optimize for {{performance_priority}}\n\nTarget Environment: {{target_environment}}\nComplexity Level: {{complexity_level}}`,\n        variables: [\"language\", \"project_name\", \"functionality_description\", \"framework\", \"coding_style\", \"requirements\", \"performance_priority\", \"target_environment\", \"complexity_level\"],\n        category: \"development\",\n        tags: [\"code generation\", \"programming\", \"development\", \"testing\", \"best practices\"]\n      },\n      {\n        title: \"Business Strategy Consultant\",\n        description: \"Comprehensive business analysis and strategic planning assistant for market research, competitive analysis, and growth strategies.\",\n        prompt_template: `Provide a strategic business analysis for {{company_name}} in the {{industry}} industry.\n\n**Company Profile:**\n- Company: {{company_name}}\n- Industry: {{industry}}\n- Current Stage: {{business_stage}}\n- Market Focus: {{target_market}}\n- Key Challenge: {{primary_challenge}}\n\n**Analysis Framework:**\n\n1. **Market Analysis**\n   - Industry overview and trends\n   - Market size and growth potential\n   - Key market drivers and barriers\n   - Regulatory environment impact\n\n2. **Competitive Landscape**\n   - Direct and indirect competitors\n   - Competitive advantages and gaps\n   - Market positioning analysis\n   - Pricing strategy comparison\n\n3. **SWOT Analysis**\n   - Internal strengths and capabilities\n   - Areas for improvement\n   - Market opportunities identification\n   - Threat assessment and risk factors\n\n4. **Strategic Recommendations**\n   - Growth strategy options\n   - Market entry/expansion strategies\n   - Operational efficiency improvements\n   - Innovation and differentiation opportunities\n\n5. **Implementation Roadmap**\n   - Priority initiatives and timeline\n   - Resource allocation requirements\n   - Key milestones and metrics\n   - Risk mitigation strategies\n\n**Specific Focus Areas:**\n- {{focus_area_1}}\n- {{focus_area_2}}\n- {{focus_area_3}}\n\nAnalysis Depth: {{analysis_depth}}\nTime Horizon: {{time_horizon}}\nBudget Considerations: {{budget_range}}`,\n        variables: [\"company_name\", \"industry\", \"business_stage\", \"target_market\", \"primary_challenge\", \"focus_area_1\", \"focus_area_2\", \"focus_area_3\", \"analysis_depth\", \"time_horizon\", \"budget_range\"],\n        category: \"business\",\n        tags: [\"business strategy\", \"market analysis\", \"consulting\", \"competitive analysis\", \"growth planning\"]\n      }\n    ];\n  }\n\n  /**\n   * Initialize sample prompts in the database\n   */\n  public async initializeSamplePrompts(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    try {\n      const samplePrompts = this.getSamplePrompts();\n      \n      for (const sample of samplePrompts) {\n        // Check if prompt already exists\n        const existing = await db.prepare(`\n          SELECT id FROM prompt_cards WHERE title = ?\n        `).get(sample.title);\n\n        if (!existing) {\n          const result = await db.prepare(`\n            INSERT INTO prompt_cards (title, description, prompt_template, variables)\n            VALUES (?, ?, ?, ?)\n          `).run(\n            sample.title,\n            sample.description,\n            sample.prompt_template,\n            JSON.stringify(sample.variables)\n          );\n\n          console.log(`Created sample prompt: ${sample.title} (ID: ${result.lastInsertRowid})`);\n        }\n      }\n\n      this.initialized = true;\n      console.log(`Sample prompts initialization completed`);\n    } catch (error) {\n      console.error('Failed to initialize sample prompts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get sample prompts by category\n   */\n  public getSamplePromptsByCategory(category: string): SamplePrompt[] {\n    return this.getSamplePrompts().filter(prompt => prompt.category === category);\n  }\n\n  /**\n   * Get all available categories\n   */\n  public getCategories(): string[] {\n    const categories = this.getSamplePrompts().map(prompt => prompt.category);\n    return [...new Set(categories)];\n  }\n\n  /**\n   * Create a database prompt card from a sample prompt\n   */\n  public async createPromptFromSample(sampleTitle: string): Promise<PromptCard | null> {\n    try {\n      const sample = this.getSamplePrompts().find(p => p.title === sampleTitle);\n      if (!sample) {\n        throw new Error(`Sample prompt '${sampleTitle}' not found`);\n      }\n\n      // Check if already exists\n      const existing = await db.prepare(`\n        SELECT * FROM prompt_cards WHERE title = ?\n      `).get(sample.title) as PromptCard;\n\n      if (existing) {\n        return {\n          ...existing,\n          variables: JSON.parse(existing.variables || '[]')\n        };\n      }\n\n      // Create new prompt card\n      const result = await db.prepare(`\n        INSERT INTO prompt_cards (title, description, prompt_template, variables)\n        VALUES (?, ?, ?, ?)\n      `).run(\n        sample.title,\n        sample.description,\n        sample.prompt_template,\n        JSON.stringify(sample.variables)\n      );\n\n      const newCard = await db.prepare(`\n        SELECT * FROM prompt_cards WHERE id = ?\n      `).get(result.lastInsertRowid) as PromptCard;\n\n      return {\n        ...newCard,\n        variables: JSON.parse(newCard.variables || '[]')\n      };\n    } catch (error) {\n      console.error('Failed to create prompt from sample:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get sample prompt preview without creating in database\n   */\n  public getSamplePromptPreview(title: string): SamplePrompt | null {\n    return this.getSamplePrompts().find(p => p.title === title) || null;\n  }\n\n  /**\n   * Validate sample prompt template\n   */\n  public validateSamplePrompt(sample: SamplePrompt): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check required fields\n    if (!sample.title?.trim()) {\n      errors.push('Title is required');\n    }\n\n    if (!sample.prompt_template?.trim()) {\n      errors.push('Prompt template is required');\n    }\n\n    if (!sample.description?.trim()) {\n      errors.push('Description is required');\n    }\n\n    // Check variables are used in template\n    if (sample.variables && sample.variables.length > 0) {\n      const templateVariables = this.extractVariablesFromTemplate(sample.prompt_template);\n      const unusedVariables = sample.variables.filter(v => !templateVariables.includes(v));\n      const undeclaredVariables = templateVariables.filter(v => !sample.variables.includes(v));\n\n      if (unusedVariables.length > 0) {\n        errors.push(`Unused variables declared: ${unusedVariables.join(', ')}`);\n      }\n\n      if (undeclaredVariables.length > 0) {\n        errors.push(`Variables used but not declared: ${undeclaredVariables.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Extract variables from template\n   */\n  private extractVariablesFromTemplate(template: string): string[] {\n    const matches = template.match(/\\{\\{(\\w+)\\}\\}/g) || [];\n    return [...new Set(matches.map(match => match.replace(/\\{\\{|\\}\\}/g, '')))];\n  }\n\n  /**\n   * Get sample prompt statistics\n   */\n  public getSamplePromptStats() {\n    const samples = this.getSamplePrompts();\n    const categories = this.getCategories();\n    \n    return {\n      totalSamples: samples.length,\n      categories: categories.length,\n      categoriesBreakdown: categories.map(cat => ({\n        category: cat,\n        count: samples.filter(s => s.category === cat).length\n      })),\n      averageVariables: Math.round(samples.reduce((sum, s) => sum + s.variables.length, 0) / samples.length),\n      totalVariables: samples.reduce((sum, s) => sum + s.variables.length, 0)\n    };\n  }\n}\n\nexport default SamplePromptService;"],"names":["SamplePromptService","getInstance","instance","getSamplePrompts","title","description","prompt_template","variables","category","tags","initializeSamplePrompts","initialized","samplePrompts","sample","existing","db","prepare","get","result","run","JSON","stringify","console","log","lastInsertRowid","error","getSamplePromptsByCategory","filter","prompt","getCategories","categories","map","Set","createPromptFromSample","sampleTitle","find","p","Error","parse","newCard","getSamplePromptPreview","validateSamplePrompt","errors","trim","push","length","templateVariables","extractVariablesFromTemplate","unusedVariables","v","includes","undeclaredVariables","join","isValid","template","matches","match","replace","getSamplePromptStats","samples","totalSamples","categoriesBreakdown","cat","count","s","averageVariables","Math","round","reduce","sum","totalVariables"],"mappings":"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"}