{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceMonitor.ts"],"sourcesContent":["import { performance, PerformanceObserver } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { promisify } from 'util';\nimport * as os from 'os';\nimport { LRUCache } from 'lru-cache';\n\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  timestamp: Date;\n  tags?: Record<string, string>;\n}\n\nexport interface SystemMetrics {\n  cpu: {\n    usage: number;\n    loadAverage: number[];\n    cores: number;\n  };\n  memory: {\n    total: number;\n    used: number;\n    free: number;\n    cached: number;\n    utilization: number;\n  };\n  disk: {\n    total: number;\n    used: number;\n    free: number;\n    utilization: number;\n  };\n  network: {\n    bytesIn: number;\n    bytesOut: number;\n    packetsIn: number;\n    packetsOut: number;\n  };\n}\n\nexport interface ApplicationMetrics {\n  requestsPerSecond: number;\n  averageResponseTime: number;\n  errorRate: number;\n  activeConnections: number;\n  queueSize: number;\n  cacheHitRate: number;\n  databaseQueries: number;\n  memoryLeaks: boolean;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  metric: string;\n  threshold: number;\n  currentValue: number;\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n}\n\nexport class PerformanceMonitor extends EventEmitter {\n  private metrics: Map<string, PerformanceMetric[]>;\n  private alerts: Map<string, PerformanceAlert>;\n  private thresholds: Map<string, { warning: number; critical: number }>;\n  private cache: LRUCache<string, any>;\n  private observer: PerformanceObserver | null = null;\n  private intervalId: NodeJS.Timeout | null = null;\n  private isMonitoring: boolean = false;\n  private startTime: number;\n  private lastSystemMetrics: SystemMetrics | null = null;\n\n  constructor() {\n    super();\n    this.metrics = new Map();\n    this.alerts = new Map();\n    this.thresholds = new Map();\n    this.startTime = Date.now();\n    \n    // Initialize cache for storing computed metrics\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n    \n    // Set default thresholds\n    this.setupDefaultThresholds();\n    \n    // Initialize performance observer\n    this.initializePerformanceObserver();\n  }\n\n  /**\n   * Start monitoring system and application performance\n   */\n  public startMonitoring(intervalMs: number = 5000): void {\n    if (this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = true;\n    \n    // Start collecting metrics at specified interval\n    this.intervalId = setInterval(() => {\n      this.collectSystemMetrics();\n      this.collectApplicationMetrics();\n      this.checkAlerts();\n    }, intervalMs);\n\n    // Start Node.js performance monitoring\n    if (this.observer) {\n      this.observer.observe({ entryTypes: ['measure', 'mark', 'resource'] });\n    }\n\n    console.log(`Performance monitoring started with ${intervalMs}ms interval`);\n  }\n\n  /**\n   * Stop monitoring\n   */\n  public stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = false;\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    console.log('Performance monitoring stopped');\n  }\n\n  /**\n   * Record a custom metric\n   */\n  public recordMetric(name: string, value: number, unit: string = '', tags?: Record<string, string>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date(),\n      tags\n    };\n\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n\n    const metricArray = this.metrics.get(name)!;\n    metricArray.push(metric);\n\n    // Keep only last 1000 metrics per name\n    if (metricArray.length > 1000) {\n      metricArray.shift();\n    }\n\n    // Check if this metric triggers an alert\n    this.checkMetricThreshold(name, value);\n    \n    // Emit metric event\n    this.emit('metric', metric);\n  }\n\n  /**\n   * Get metrics for a specific name\n   */\n  public getMetrics(name: string, limit: number = 100): PerformanceMetric[] {\n    const metrics = this.metrics.get(name) || [];\n    return metrics.slice(-limit);\n  }\n\n  /**\n   * Get all metric names\n   */\n  public getMetricNames(): string[] {\n    return Array.from(this.metrics.keys());\n  }\n\n  /**\n   * Get current system metrics\n   */\n  public async getSystemMetrics(): Promise<SystemMetrics> {\n    const cacheKey = 'system_metrics';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const metrics = await this.collectSystemMetrics();\n    this.cache.set(cacheKey, metrics, { ttl: 1000 * 10 }); // 10 seconds cache\n    \n    return metrics;\n  }\n\n  /**\n   * Get current application metrics\n   */\n  public getApplicationMetrics(): ApplicationMetrics {\n    const cacheKey = 'app_metrics';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const metrics = this.collectApplicationMetrics();\n    this.cache.set(cacheKey, metrics, { ttl: 1000 * 5 }); // 5 seconds cache\n    \n    return metrics;\n  }\n\n  /**\n   * Get active alerts\n   */\n  public getActiveAlerts(): PerformanceAlert[] {\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\n  }\n\n  /**\n   * Get performance summary\n   */\n  public getPerformanceSummary(): {\n    systemHealth: 'good' | 'warning' | 'critical';\n    uptime: number;\n    totalMetrics: number;\n    activeAlerts: number;\n    topMetrics: { name: string; value: number; unit: string }[];\n  } {\n    const activeAlerts = this.getActiveAlerts();\n    const systemHealth = this.determineSystemHealth(activeAlerts);\n    const uptime = Date.now() - this.startTime;\n    \n    // Calculate top metrics by recent activity\n    const topMetrics = this.getTopMetrics(5);\n    \n    return {\n      systemHealth,\n      uptime,\n      totalMetrics: this.metrics.size,\n      activeAlerts: activeAlerts.length,\n      topMetrics\n    };\n  }\n\n  /**\n   * Set custom threshold for a metric\n   */\n  public setThreshold(metricName: string, warning: number, critical: number): void {\n    this.thresholds.set(metricName, { warning, critical });\n  }\n\n  /**\n   * Clear all metrics and alerts\n   */\n  public clear(): void {\n    this.metrics.clear();\n    this.alerts.clear();\n    this.cache.clear();\n    console.log('Performance metrics cleared');\n  }\n\n  /**\n   * Get performance statistics\n   */\n  public getStatistics(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [name, metrics] of this.metrics) {\n      if (metrics.length > 0) {\n        const values = metrics.map(m => m.value);\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const max = Math.max(...values);\n        const min = Math.min(...values);\n        \n        stats[name] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Initialize performance observer\n   */\n  private initializePerformanceObserver(): void {\n    try {\n      this.observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          this.recordMetric(\n            `nodejs_${entry.entryType}_${entry.name}`,\n            entry.duration || 0,\n            'ms',\n            { type: entry.entryType }\n          );\n        }\n      });\n    } catch (error) {\n      console.warn('Failed to initialize performance observer:', error.message);\n    }\n  }\n\n  /**\n   * Collect system metrics\n   */\n  private async collectSystemMetrics(): Promise<SystemMetrics> {\n    const cpuUsage = os.loadavg()[0] / os.cpus().length;\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    \n    const metrics: SystemMetrics = {\n      cpu: {\n        usage: Math.round(cpuUsage * 100),\n        loadAverage: os.loadavg(),\n        cores: os.cpus().length\n      },\n      memory: {\n        total: totalMemory,\n        used: usedMemory,\n        free: freeMemory,\n        cached: 0, // Not easily available in Node.js\n        utilization: Math.round((usedMemory / totalMemory) * 100)\n      },\n      disk: {\n        total: 0, // Would need additional library for disk metrics\n        used: 0,\n        free: 0,\n        utilization: 0\n      },\n      network: {\n        bytesIn: 0, // Would need additional library for network metrics\n        bytesOut: 0,\n        packetsIn: 0,\n        packetsOut: 0\n      }\n    };\n\n    // Record individual metrics\n    this.recordMetric('cpu_usage', metrics.cpu.usage, '%');\n    this.recordMetric('memory_usage', metrics.memory.utilization, '%');\n    this.recordMetric('memory_used', metrics.memory.used, 'bytes');\n    this.recordMetric('memory_free', metrics.memory.free, 'bytes');\n    \n    this.lastSystemMetrics = metrics;\n    return metrics;\n  }\n\n  /**\n   * Collect application-specific metrics\n   */\n  private collectApplicationMetrics(): ApplicationMetrics {\n    const memoryUsage = process.memoryUsage();\n    const uptime = process.uptime();\n    \n    const metrics: ApplicationMetrics = {\n      requestsPerSecond: this.calculateRequestsPerSecond(),\n      averageResponseTime: this.calculateAverageResponseTime(),\n      errorRate: this.calculateErrorRate(),\n      activeConnections: this.getActiveConnections(),\n      queueSize: this.getQueueSize(),\n      cacheHitRate: this.calculateCacheHitRate(),\n      databaseQueries: this.getDatabaseQueries(),\n      memoryLeaks: this.detectMemoryLeaks()\n    };\n\n    // Record individual metrics\n    this.recordMetric('app_requests_per_second', metrics.requestsPerSecond, 'rps');\n    this.recordMetric('app_response_time', metrics.averageResponseTime, 'ms');\n    this.recordMetric('app_error_rate', metrics.errorRate, '%');\n    this.recordMetric('app_active_connections', metrics.activeConnections, 'connections');\n    this.recordMetric('app_queue_size', metrics.queueSize, 'items');\n    this.recordMetric('app_cache_hit_rate', metrics.cacheHitRate, '%');\n    this.recordMetric('nodejs_heap_used', memoryUsage.heapUsed, 'bytes');\n    this.recordMetric('nodejs_heap_total', memoryUsage.heapTotal, 'bytes');\n    this.recordMetric('nodejs_external', memoryUsage.external, 'bytes');\n    this.recordMetric('nodejs_uptime', uptime, 'seconds');\n\n    return metrics;\n  }\n\n  /**\n   * Setup default performance thresholds\n   */\n  private setupDefaultThresholds(): void {\n    this.thresholds.set('cpu_usage', { warning: 70, critical: 90 });\n    this.thresholds.set('memory_usage', { warning: 80, critical: 95 });\n    this.thresholds.set('app_response_time', { warning: 1000, critical: 5000 });\n    this.thresholds.set('app_error_rate', { warning: 5, critical: 10 });\n    this.thresholds.set('app_queue_size', { warning: 100, critical: 500 });\n    this.thresholds.set('nodejs_heap_used', { warning: 1e9, critical: 2e9 }); // 1GB, 2GB\n  }\n\n  /**\n   * Check if a metric exceeds thresholds\n   */\n  private checkMetricThreshold(metricName: string, value: number): void {\n    const threshold = this.thresholds.get(metricName);\n    if (!threshold) return;\n\n    const alertId = `${metricName}_threshold`;\n    const existingAlert = this.alerts.get(alertId);\n\n    if (value >= threshold.critical) {\n      if (!existingAlert || existingAlert.severity !== 'critical') {\n        this.createAlert(alertId, 'critical', metricName, threshold.critical, value);\n      }\n    } else if (value >= threshold.warning) {\n      if (!existingAlert || existingAlert.severity !== 'high') {\n        this.createAlert(alertId, 'high', metricName, threshold.warning, value);\n      }\n    } else {\n      // Value is below thresholds, resolve alert if it exists\n      if (existingAlert && !existingAlert.resolved) {\n        existingAlert.resolved = true;\n        this.emit('alert_resolved', existingAlert);\n      }\n    }\n  }\n\n  /**\n   * Create a performance alert\n   */\n  private createAlert(id: string, severity: PerformanceAlert['severity'], metric: string, threshold: number, currentValue: number): void {\n    const alert: PerformanceAlert = {\n      id,\n      severity,\n      metric,\n      threshold,\n      currentValue,\n      message: `${metric} exceeded ${severity} threshold: ${currentValue} >= ${threshold}`,\n      timestamp: new Date(),\n      resolved: false\n    };\n\n    this.alerts.set(id, alert);\n    this.emit('alert', alert);\n  }\n\n  /**\n   * Check all active alerts\n   */\n  private checkAlerts(): void {\n    // This method can be extended to perform more complex alert logic\n    // For now, individual metric checks handle alert creation\n  }\n\n  /**\n   * Calculate requests per second\n   */\n  private calculateRequestsPerSecond(): number {\n    const requestMetrics = this.getMetrics('app_requests_per_second', 60);\n    if (requestMetrics.length === 0) return 0;\n    \n    const recent = requestMetrics.slice(-10); // Last 10 measurements\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Calculate average response time\n   */\n  private calculateAverageResponseTime(): number {\n    const responseMetrics = this.getMetrics('app_response_time', 60);\n    if (responseMetrics.length === 0) return 0;\n    \n    const recent = responseMetrics.slice(-10);\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Calculate error rate\n   */\n  private calculateErrorRate(): number {\n    const errorMetrics = this.getMetrics('app_error_rate', 60);\n    if (errorMetrics.length === 0) return 0;\n    \n    const recent = errorMetrics.slice(-10);\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Get active connections (placeholder)\n   */\n  private getActiveConnections(): number {\n    // This would be implemented based on your WebSocket/HTTP server\n    return 0;\n  }\n\n  /**\n   * Get queue size (placeholder)\n   */\n  private getQueueSize(): number {\n    // This would be implemented based on your queue system\n    return 0;\n  }\n\n  /**\n   * Calculate cache hit rate\n   */\n  private calculateCacheHitRate(): number {\n    const hitRate = this.cache.calculatedSize > 0 ? \n      (this.cache.calculatedSize - this.cache.size) / this.cache.calculatedSize * 100 : 0;\n    return Math.round(hitRate * 100) / 100;\n  }\n\n  /**\n   * Get database queries count (placeholder)\n   */\n  private getDatabaseQueries(): number {\n    // This would be implemented based on your database connection pool\n    return 0;\n  }\n\n  /**\n   * Detect memory leaks\n   */\n  private detectMemoryLeaks(): boolean {\n    const memoryMetrics = this.getMetrics('nodejs_heap_used', 30);\n    if (memoryMetrics.length < 10) return false;\n    \n    // Simple memory leak detection: check if memory usage is consistently increasing\n    const recent = memoryMetrics.slice(-10);\n    const trend = recent.reduce((sum, metric, index) => {\n      if (index === 0) return sum;\n      return sum + (metric.value - recent[index - 1].value);\n    }, 0);\n    \n    return trend > 0 && trend > recent[0].value * 0.1; // 10% increase trend\n  }\n\n  /**\n   * Determine overall system health\n   */\n  private determineSystemHealth(alerts: PerformanceAlert[]): 'good' | 'warning' | 'critical' {\n    if (alerts.some(alert => alert.severity === 'critical')) {\n      return 'critical';\n    }\n    if (alerts.some(alert => alert.severity === 'high' || alert.severity === 'medium')) {\n      return 'warning';\n    }\n    return 'good';\n  }\n\n  /**\n   * Get top metrics by recent activity\n   */\n  private getTopMetrics(limit: number): { name: string; value: number; unit: string }[] {\n    const topMetrics: { name: string; value: number; unit: string }[] = [];\n    \n    for (const [name, metrics] of this.metrics) {\n      if (metrics.length > 0) {\n        const latest = metrics[metrics.length - 1];\n        topMetrics.push({\n          name,\n          value: latest.value,\n          unit: latest.unit\n        });\n      }\n    }\n    \n    // Sort by value (descending) and take top N\n    return topMetrics\n      .sort((a, b) => b.value - a.value)\n      .slice(0, limit);\n  }\n\n  /**\n   * Export metrics to JSON\n   */\n  public exportMetrics(): string {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      uptime: Date.now() - this.startTime,\n      metrics: Object.fromEntries(this.metrics),\n      alerts: Array.from(this.alerts.values()),\n      thresholds: Object.fromEntries(this.thresholds),\n      summary: this.getPerformanceSummary()\n    };\n    \n    return JSON.stringify(exportData, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();"],"names":["PerformanceMonitor","performanceMonitor","EventEmitter","startMonitoring","intervalMs","isMonitoring","intervalId","setInterval","collectSystemMetrics","collectApplicationMetrics","checkAlerts","observer","observe","entryTypes","console","log","stopMonitoring","clearInterval","disconnect","recordMetric","name","value","unit","tags","metric","timestamp","Date","metrics","has","set","metricArray","get","push","length","shift","checkMetricThreshold","emit","getMetrics","limit","slice","getMetricNames","Array","from","keys","getSystemMetrics","cacheKey","cached","cache","ttl","getApplicationMetrics","getActiveAlerts","alerts","values","filter","alert","resolved","getPerformanceSummary","activeAlerts","systemHealth","determineSystemHealth","uptime","now","startTime","topMetrics","getTopMetrics","totalMetrics","size","setThreshold","metricName","warning","critical","thresholds","clear","getStatistics","stats","map","m","avg","reduce","sum","val","max","Math","min","round","count","initializePerformanceObserver","PerformanceObserver","list","entry","getEntries","entryType","duration","type","error","warn","message","cpuUsage","os","loadavg","cpus","totalMemory","totalmem","freeMemory","freemem","usedMemory","cpu","usage","loadAverage","cores","memory","total","used","free","utilization","disk","network","bytesIn","bytesOut","packetsIn","packetsOut","lastSystemMetrics","memoryUsage","process","requestsPerSecond","calculateRequestsPerSecond","averageResponseTime","calculateAverageResponseTime","errorRate","calculateErrorRate","activeConnections","getActiveConnections","queueSize","getQueueSize","cacheHitRate","calculateCacheHitRate","databaseQueries","getDatabaseQueries","memoryLeaks","detectMemoryLeaks","heapUsed","heapTotal","external","setupDefaultThresholds","threshold","alertId","existingAlert","severity","createAlert","id","currentValue","requestMetrics","recent","responseMetrics","errorMetrics","hitRate","calculatedSize","memoryMetrics","trend","index","some","latest","sort","a","b","exportMetrics","exportData","toISOString","Object","fromEntries","summary","JSON","stringify","Map","LRUCache"],"mappings":"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"}