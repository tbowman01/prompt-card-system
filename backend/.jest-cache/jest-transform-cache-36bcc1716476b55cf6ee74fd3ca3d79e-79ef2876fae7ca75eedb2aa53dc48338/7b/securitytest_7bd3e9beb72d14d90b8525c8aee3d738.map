{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/security.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../server';\nimport { generateTokens, hashPassword } from '../middleware/auth';\nimport { generateCSRFToken } from '../middleware/security';\n\ndescribe('Security Features', () => {\n  const testUser = {\n    email: 'test@example.com',\n    password: 'TestPass123!',\n    role: 'user',\n    permissions: ['read', 'write']\n  };\n\n  let authToken: string;\n  let csrfToken: string;\n  let sessionId: string;\n\n  beforeAll(async () => {\n    // Generate auth token for protected routes\n    const tokens = generateTokens({\n      id: '1',\n      email: testUser.email,\n      role: testUser.role,\n      permissions: testUser.permissions\n    });\n    authToken = tokens.accessToken;\n\n    // Get CSRF token\n    const csrfResponse = await request(app)\n      .get('/api/security/csrf-token');\n    \n    csrfToken = csrfResponse.body.data.csrfToken;\n    sessionId = csrfResponse.body.data.sessionId;\n  });\n\n  describe('Basic Security Headers', () => {\n    it('should include basic security headers', async () => {\n      const response = await request(app).get('/api/health');\n      \n      expect(response.status).toBe(200);\n      expect(response.headers).toHaveProperty('x-request-id');\n    });\n\n    it('should reject requests without valid token for protected routes', async () => {\n      const response = await request(app).get('/api/auth/me');\n\n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('Authentication Tests', () => {\n    it('should validate password strength requirements', async () => {\n      const weakPasswordData = {\n        email: 'newuser@example.com',\n        password: '123', // Weak password\n        confirmPassword: '123'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(weakPasswordData);\n\n      expect(response.status).toBe(400);\n    });\n\n    it('should hash passwords securely', async () => {\n      const password = 'TestPassword123!';\n      const hashedPassword = await hashPassword(password);\n      \n      expect(hashedPassword).not.toBe(password);\n      expect(hashedPassword).toMatch(/^\\$2[aby]\\$\\d+\\$/);\n    });\n  });\n});\n\ndescribe('Security Utilities', () => {\n  describe('CSRF Token Generation', () => {\n    it('should generate unique tokens', () => {\n      const sessionId1 = 'session1';\n      const sessionId2 = 'session2';\n      \n      const token1 = generateCSRFToken(sessionId1);\n      const token2 = generateCSRFToken(sessionId2);\n      \n      expect(token1).not.toBe(token2);\n      expect(token1).toMatch(/^[a-f0-9]{64}$/);\n      expect(token2).toMatch(/^[a-f0-9]{64}$/);\n    });\n  });\n});"],"names":["describe","testUser","email","password","role","permissions","authToken","csrfToken","sessionId","beforeAll","tokens","generateTokens","id","accessToken","csrfResponse","request","app","get","body","data","it","response","expect","status","toBe","headers","toHaveProperty","weakPasswordData","confirmPassword","post","send","hashedPassword","hashPassword","not","toMatch","sessionId1","sessionId2","token1","generateCSRFToken","token2"],"mappings":";;;;kEAAoB;+DACJ;sBAC6B;0BACX;;;;;;AAElCA,SAAS,qBAAqB;IAC5B,MAAMC,WAAW;QACfC,OAAO;QACPC,UAAU;QACVC,MAAM;QACNC,aAAa;YAAC;YAAQ;SAAQ;IAChC;IAEA,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,UAAU;QACR,2CAA2C;QAC3C,MAAMC,SAASC,IAAAA,oBAAc,EAAC;YAC5BC,IAAI;YACJV,OAAOD,SAASC,KAAK;YACrBE,MAAMH,SAASG,IAAI;YACnBC,aAAaJ,SAASI,WAAW;QACnC;QACAC,YAAYI,OAAOG,WAAW;QAE9B,iBAAiB;QACjB,MAAMC,eAAe,MAAMC,IAAAA,kBAAO,EAACC,eAAG,EACnCC,GAAG,CAAC;QAEPV,YAAYO,aAAaI,IAAI,CAACC,IAAI,CAACZ,SAAS;QAC5CC,YAAYM,aAAaI,IAAI,CAACC,IAAI,CAACX,SAAS;IAC9C;IAEAR,SAAS,0BAA0B;QACjCoB,GAAG,yCAAyC;YAC1C,MAAMC,WAAW,MAAMN,IAAAA,kBAAO,EAACC,eAAG,EAAEC,GAAG,CAAC;YAExCK,OAAOD,SAASE,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOD,SAASI,OAAO,EAAEC,cAAc,CAAC;QAC1C;QAEAN,GAAG,mEAAmE;YACpE,MAAMC,WAAW,MAAMN,IAAAA,kBAAO,EAACC,eAAG,EAAEC,GAAG,CAAC;YAExCK,OAAOD,SAASE,MAAM,EAAEC,IAAI,CAAC;QAC/B;IACF;IAEAxB,SAAS,wBAAwB;QAC/BoB,GAAG,kDAAkD;YACnD,MAAMO,mBAAmB;gBACvBzB,OAAO;gBACPC,UAAU;gBACVyB,iBAAiB;YACnB;YAEA,MAAMP,WAAW,MAAMN,IAAAA,kBAAO,EAACC,eAAG,EAC/Ba,IAAI,CAAC,sBACLC,IAAI,CAACH;YAERL,OAAOD,SAASE,MAAM,EAAEC,IAAI,CAAC;QAC/B;QAEAJ,GAAG,kCAAkC;YACnC,MAAMjB,WAAW;YACjB,MAAM4B,iBAAiB,MAAMC,IAAAA,kBAAY,EAAC7B;YAE1CmB,OAAOS,gBAAgBE,GAAG,CAACT,IAAI,CAACrB;YAChCmB,OAAOS,gBAAgBG,OAAO,CAAC;QACjC;IACF;AACF;AAEAlC,SAAS,sBAAsB;IAC7BA,SAAS,yBAAyB;QAChCoB,GAAG,iCAAiC;YAClC,MAAMe,aAAa;YACnB,MAAMC,aAAa;YAEnB,MAAMC,SAASC,IAAAA,2BAAiB,EAACH;YACjC,MAAMI,SAASD,IAAAA,2BAAiB,EAACF;YAEjCd,OAAOe,QAAQJ,GAAG,CAACT,IAAI,CAACe;YACxBjB,OAAOe,QAAQH,OAAO,CAAC;YACvBZ,OAAOiB,QAAQL,OAAO,CAAC;QACzB;IACF;AACF"}