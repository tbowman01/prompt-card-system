{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/unit/database-connection.test.ts"],"sourcesContent":["import { connectionPool, db } from '../../database/connection';\n\ndescribe('Database Connection Pool', () => {\n  beforeEach(() => {\n    // Reset any existing connections\n  });\n\n  afterEach(() => {\n    // Cleanup connections\n  });\n\n  describe('Connection Pool Management', () => {\n    it('should initialize connection pool', async () => {\n      const stats = connectionPool.getStats();\n      expect(stats.total).toBeGreaterThan(0);\n    });\n\n    it('should get and release connections', async () => {\n      const connection = await connectionPool.getConnection();\n      expect(connection).toBeDefined();\n      \n      connectionPool.releaseConnection(connection);\n      const stats = connectionPool.getStats();\n      expect(stats.available).toBeGreaterThan(0);\n    });\n\n    it('should handle concurrent connections', async () => {\n      const connections = await Promise.all([\n        connectionPool.getConnection(),\n        connectionPool.getConnection(),\n        connectionPool.getConnection()\n      ]);\n      \n      expect(connections).toHaveLength(3);\n      connections.forEach(conn => expect(conn).toBeDefined());\n      \n      // Release all connections\n      connections.forEach(conn => connectionPool.releaseConnection(conn));\n    });\n\n    it('should execute operations with connection pooling', async () => {\n      const result = await connectionPool.withConnection(async (conn) => {\n        // Simple test query\n        return conn.prepare('SELECT 1 as test').get();\n      });\n      \n      expect(result).toEqual({ test: 1 });\n    });\n  });\n\n  describe('Database Operations', () => {\n    it('should execute prepared statements', async () => {\n      const stmt = db.prepare('SELECT ? as value');\n      const result = await stmt.get('test');\n      expect(result).toEqual({ value: 'test' });\n    });\n\n    it('should handle transactions', async () => {\n      const result = await db.transaction((database) => {\n        const stmt = database.prepare('SELECT ? as transaction_test');\n        return stmt.get('success');\n      });\n      \n      expect(result).toEqual({ transaction_test: 'success' });\n    });\n\n    it('should provide connection stats', () => {\n      const stats = db.getStats();\n      expect(stats).toHaveProperty('total');\n      expect(stats).toHaveProperty('available');\n      expect(stats).toHaveProperty('busy');\n      expect(stats).toHaveProperty('initialized');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle connection failures gracefully', async () => {\n      // Test with invalid operation\n      await expect(\n        db.exec('INVALID SQL STATEMENT')\n      ).rejects.toThrow();\n    });\n\n    it('should recover from connection issues', async () => {\n      // Test connection recovery logic\n      const stats = db.getStats();\n      expect(stats.initialized).toBe(true);\n    });\n  });\n});"],"names":["describe","beforeEach","afterEach","it","stats","connectionPool","getStats","expect","total","toBeGreaterThan","connection","getConnection","toBeDefined","releaseConnection","available","connections","Promise","all","toHaveLength","forEach","conn","result","withConnection","prepare","get","toEqual","test","stmt","db","value","transaction","database","transaction_test","toHaveProperty","exec","rejects","toThrow","initialized","toBe"],"mappings":";;;;4BAAmC;AAEnCA,SAAS,4BAA4B;IACnCC,WAAW;IACT,iCAAiC;IACnC;IAEAC,UAAU;IACR,sBAAsB;IACxB;IAEAF,SAAS,8BAA8B;QACrCG,GAAG,qCAAqC;YACtC,MAAMC,QAAQC,0BAAc,CAACC,QAAQ;YACrCC,OAAOH,MAAMI,KAAK,EAAEC,eAAe,CAAC;QACtC;QAEAN,GAAG,sCAAsC;YACvC,MAAMO,aAAa,MAAML,0BAAc,CAACM,aAAa;YACrDJ,OAAOG,YAAYE,WAAW;YAE9BP,0BAAc,CAACQ,iBAAiB,CAACH;YACjC,MAAMN,QAAQC,0BAAc,CAACC,QAAQ;YACrCC,OAAOH,MAAMU,SAAS,EAAEL,eAAe,CAAC;QAC1C;QAEAN,GAAG,wCAAwC;YACzC,MAAMY,cAAc,MAAMC,QAAQC,GAAG,CAAC;gBACpCZ,0BAAc,CAACM,aAAa;gBAC5BN,0BAAc,CAACM,aAAa;gBAC5BN,0BAAc,CAACM,aAAa;aAC7B;YAEDJ,OAAOQ,aAAaG,YAAY,CAAC;YACjCH,YAAYI,OAAO,CAACC,CAAAA,OAAQb,OAAOa,MAAMR,WAAW;YAEpD,0BAA0B;YAC1BG,YAAYI,OAAO,CAACC,CAAAA,OAAQf,0BAAc,CAACQ,iBAAiB,CAACO;QAC/D;QAEAjB,GAAG,qDAAqD;YACtD,MAAMkB,SAAS,MAAMhB,0BAAc,CAACiB,cAAc,CAAC,OAAOF;gBACxD,oBAAoB;gBACpB,OAAOA,KAAKG,OAAO,CAAC,oBAAoBC,GAAG;YAC7C;YAEAjB,OAAOc,QAAQI,OAAO,CAAC;gBAAEC,MAAM;YAAE;QACnC;IACF;IAEA1B,SAAS,uBAAuB;QAC9BG,GAAG,sCAAsC;YACvC,MAAMwB,OAAOC,cAAE,CAACL,OAAO,CAAC;YACxB,MAAMF,SAAS,MAAMM,KAAKH,GAAG,CAAC;YAC9BjB,OAAOc,QAAQI,OAAO,CAAC;gBAAEI,OAAO;YAAO;QACzC;QAEA1B,GAAG,8BAA8B;YAC/B,MAAMkB,SAAS,MAAMO,cAAE,CAACE,WAAW,CAAC,CAACC;gBACnC,MAAMJ,OAAOI,SAASR,OAAO,CAAC;gBAC9B,OAAOI,KAAKH,GAAG,CAAC;YAClB;YAEAjB,OAAOc,QAAQI,OAAO,CAAC;gBAAEO,kBAAkB;YAAU;QACvD;QAEA7B,GAAG,mCAAmC;YACpC,MAAMC,QAAQwB,cAAE,CAACtB,QAAQ;YACzBC,OAAOH,OAAO6B,cAAc,CAAC;YAC7B1B,OAAOH,OAAO6B,cAAc,CAAC;YAC7B1B,OAAOH,OAAO6B,cAAc,CAAC;YAC7B1B,OAAOH,OAAO6B,cAAc,CAAC;QAC/B;IACF;IAEAjC,SAAS,kBAAkB;QACzBG,GAAG,gDAAgD;YACjD,8BAA8B;YAC9B,MAAMI,OACJqB,cAAE,CAACM,IAAI,CAAC,0BACRC,OAAO,CAACC,OAAO;QACnB;QAEAjC,GAAG,yCAAyC;YAC1C,iCAAiC;YACjC,MAAMC,QAAQwB,cAAE,CAACtB,QAAQ;YACzBC,OAAOH,MAAMiC,WAAW,EAAEC,IAAI,CAAC;QACjC;IACF;AACF"}