{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/health/HealthOrchestrator.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { createClient } from 'redis';\nimport axios from 'axios';\nimport { db } from '../../database/connection';\nimport { llmService } from '../llmService';\nimport { ModelHealthMonitor } from '../models/ModelHealthMonitor';\n\ninterface ServiceHealth {\n  name: string;\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  lastCheck: Date;\n  responseTime: number;\n  message?: string;\n  details?: any;\n  dependencies?: string[];\n  criticalService: boolean;\n}\n\ninterface SystemHealth {\n  overallStatus: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  services: Map<string, ServiceHealth>;\n  lastFullCheck: Date;\n  totalServices: number;\n  healthyServices: number;\n  degradedServices: number;\n  unhealthyServices: number;\n  offlineServices: number;\n}\n\ninterface HealthCheckConfig {\n  checkInterval: number;\n  timeout: number;\n  retries: number;\n  retryDelay: number;\n  criticalServices: string[];\n  dependencies: Record<string, string[]>;\n}\n\nexport class HealthOrchestrator extends EventEmitter {\n  private services: Map<string, ServiceHealth> = new Map();\n  private checkIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private config: HealthCheckConfig;\n  private isRunning = false;\n  private modelMonitor?: ModelHealthMonitor;\n  private lastFullCheck = new Date(0);\n  private fallbackMechanisms: Map<string, () => Promise<any>> = new Map();\n  private circuitBreakers: Map<string, { isOpen: boolean; failures: number; lastFailure: Date }> = new Map();\n\n  constructor(config: Partial<HealthCheckConfig> = {}) {\n    super();\n    \n    this.config = {\n      checkInterval: 30000, // 30 seconds\n      timeout: 5000, // 5 seconds\n      retries: 3,\n      retryDelay: 1000, // 1 second\n      criticalServices: ['database', 'ollama', 'frontend', 'backend'],\n      dependencies: {\n        'backend': ['database', 'ollama', 'redis'],\n        'frontend': ['backend'],\n        'model-health': ['ollama'],\n        'websocket': ['backend', 'redis'],\n        'prometheus': ['backend'],\n        'grafana': ['prometheus']\n      },\n      ...config\n    };\n\n    this.initializeServices();\n    this.initializeFallbackMechanisms();\n    this.initializeCircuitBreakers();\n  }\n\n  private initializeServices() {\n    // Define all services to monitor\n    const servicesConfig = [\n      {\n        name: 'database',\n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'redis', \n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'ollama',\n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'frontend',\n        criticalService: true,\n        dependencies: ['backend']\n      },\n      {\n        name: 'backend',\n        criticalService: true,\n        dependencies: ['database', 'ollama', 'redis']\n      },\n      {\n        name: 'websocket',\n        criticalService: false,\n        dependencies: ['backend', 'redis']\n      },\n      {\n        name: 'model-health',\n        criticalService: false,\n        dependencies: ['ollama']\n      },\n      {\n        name: 'prometheus',\n        criticalService: false,\n        dependencies: ['backend']\n      },\n      {\n        name: 'grafana',\n        criticalService: false,\n        dependencies: ['prometheus']\n      },\n      {\n        name: 'model-init',\n        criticalService: false,\n        dependencies: ['ollama']\n      }\n    ];\n\n    // Initialize service health status\n    for (const serviceConfig of servicesConfig) {\n      const service: ServiceHealth = {\n        name: serviceConfig.name,\n        status: 'offline',\n        lastCheck: new Date(0),\n        responseTime: 0,\n        dependencies: serviceConfig.dependencies,\n        criticalService: serviceConfig.criticalService\n      };\n      \n      this.services.set(serviceConfig.name, service);\n    }\n  }\n\n  private initializeFallbackMechanisms(): void {\n    // Fallback for LLM/Ollama service - use mock responses\n    this.fallbackMechanisms.set('ollama', async () => ({\n      status: 'degraded',\n      message: 'Using fallback mode - Ollama unavailable',\n      details: {\n        fallbackMode: true,\n        capabilities: ['text-completion-mock', 'chat-mock'],\n        note: 'AI features will use mock responses'\n      }\n    }));\n\n    // Fallback for Redis - use in-memory cache\n    this.fallbackMechanisms.set('redis', async () => ({\n      status: 'degraded', \n      message: 'Using in-memory cache - Redis unavailable',\n      details: {\n        fallbackMode: true,\n        cacheType: 'memory',\n        note: 'Session data will not persist across restarts'\n      }\n    }));\n\n    // Fallback for model health - disable AI features gracefully\n    this.fallbackMechanisms.set('model-health', async () => ({\n      status: 'degraded',\n      message: 'AI features disabled - Model health monitoring unavailable',\n      details: {\n        fallbackMode: true,\n        aiFeatures: 'disabled',\n        note: 'Manual testing mode available'\n      }\n    }));\n  }\n\n  private initializeCircuitBreakers(): void {\n    const serviceNames = Array.from(this.services.keys());\n    for (const serviceName of serviceNames) {\n      this.circuitBreakers.set(serviceName, {\n        isOpen: false,\n        failures: 0,\n        lastFailure: new Date(0)\n      });\n    }\n  }\n\n  private async executeWithCircuitBreaker<T>(\n    serviceName: string, \n    operation: () => Promise<T>\n  ): Promise<T> {\n    const breaker = this.circuitBreakers.get(serviceName);\n    if (!breaker) throw new Error(`No circuit breaker for service: ${serviceName}`);\n\n    // Check if circuit breaker is open\n    if (breaker.isOpen) {\n      const timeSinceLastFailure = Date.now() - breaker.lastFailure.getTime();\n      const resetTimeout = 60000; // 1 minute\n\n      if (timeSinceLastFailure < resetTimeout) {\n        throw new Error(`Circuit breaker open for ${serviceName}`);\n      } else {\n        // Try to reset circuit breaker\n        breaker.isOpen = false;\n        breaker.failures = 0;\n      }\n    }\n\n    try {\n      const result = await operation();\n      // Success - reset failure count\n      breaker.failures = 0;\n      return result;\n    } catch (error) {\n      // Failure - increment counter\n      breaker.failures++;\n      breaker.lastFailure = new Date();\n\n      // Open circuit breaker after 3 failures\n      if (breaker.failures >= 3) {\n        breaker.isOpen = true;\n        console.warn(`🔓 Circuit breaker opened for ${serviceName} after 3 failures`);\n      }\n\n      throw error;\n    }\n  }\n\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.log('🏥 Health Orchestrator already running');\n      return;\n    }\n\n    console.log('🏥 Starting Health Orchestrator...');\n    this.isRunning = true;\n\n    // Initialize model monitor\n    try {\n      this.modelMonitor = new ModelHealthMonitor({\n        healthCheckInterval: 60000, // 1 minute\n        benchmarkInterval: 300000, // 5 minutes\n        maxResponseTime: 30000, // 30 seconds\n        maxErrorRate: 10, // 10%\n        minHealthScore: 70,\n        alertThresholds: {\n          responseTime: 15000, // 15 seconds\n          errorRate: 10, // 10%\n          memoryUsage: 85 // 85% memory usage threshold\n        }\n      });\n      \n      await this.modelMonitor.initialize();\n      console.log('🤖 Model Health Monitor initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize Model Health Monitor:', error);\n    }\n\n    // Start monitoring all services\n    for (const serviceName of this.services.keys()) {\n      this.startServiceMonitoring(serviceName);\n    }\n\n    // Perform initial full health check\n    await this.performFullHealthCheck();\n\n    // Start periodic full system health checks\n    const fullCheckInterval = setInterval(() => {\n      this.performFullHealthCheck();\n    }, this.config.checkInterval * 2); // Less frequent full checks\n\n    this.checkIntervals.set('__full_check__', fullCheckInterval);\n\n    console.log('✅ Health Orchestrator started successfully');\n    this.emit('started', { servicesCount: this.services.size });\n  }\n\n  private startServiceMonitoring(serviceName: string): void {\n    const interval = setInterval(async () => {\n      await this.checkServiceHealth(serviceName);\n    }, this.config.checkInterval);\n\n    this.checkIntervals.set(serviceName, interval);\n  }\n\n  private async checkServiceHealth(serviceName: string): Promise<void> {\n    const service = this.services.get(serviceName);\n    if (!service) return;\n\n    const startTime = Date.now();\n    let newStatus: ServiceHealth['status'] = 'offline';\n    let message = '';\n    let details: any = {};\n\n    try {\n      // Check dependencies first\n      const dependencyResults = await this.checkDependencies(serviceName);\n      const dependenciesHealthy = dependencyResults.every(dep => dep.healthy);\n\n      if (!dependenciesHealthy) {\n        newStatus = 'degraded';\n        message = 'Dependencies unhealthy';\n        details.dependencyStatus = dependencyResults;\n      } else {\n        // Perform service-specific health check with circuit breaker and fallback\n        try {\n          const healthResult = await this.executeWithCircuitBreaker(serviceName, () => \n            this.performServiceCheck(serviceName)\n          );\n          newStatus = healthResult.status;\n          message = healthResult.message || '';\n          details = { ...details, ...healthResult.details };\n        } catch (circuitBreakerError) {\n          // Try fallback mechanism\n          const fallback = this.fallbackMechanisms.get(serviceName);\n          if (fallback) {\n            console.log(`🔄 Using fallback for ${serviceName}:`, circuitBreakerError);\n            const fallbackResult = await fallback();\n            newStatus = fallbackResult.status;\n            message = fallbackResult.message || '';\n            details = { ...details, ...fallbackResult.details, circuitBreakerError: circuitBreakerError.message };\n          } else {\n            throw circuitBreakerError;\n          }\n        }\n      }\n    } catch (error) {\n      newStatus = 'unhealthy';\n      message = error instanceof Error ? error.message : 'Health check failed';\n      details.error = message;\n    }\n\n    const responseTime = Date.now() - startTime;\n    \n    // Update service status\n    const updatedService: ServiceHealth = {\n      ...service,\n      status: newStatus,\n      lastCheck: new Date(),\n      responseTime,\n      message,\n      details\n    };\n\n    const previousStatus = service.status;\n    this.services.set(serviceName, updatedService);\n\n    // Emit events for status changes\n    if (previousStatus !== newStatus) {\n      this.emit('serviceStatusChanged', {\n        serviceName,\n        previousStatus,\n        newStatus,\n        responseTime,\n        message\n      });\n\n      // Emit critical alerts\n      if (service.criticalService && newStatus === 'unhealthy') {\n        this.emit('criticalServiceDown', {\n          serviceName,\n          message,\n          details,\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  private async checkDependencies(serviceName: string): Promise<Array<{ name: string; healthy: boolean }>> {\n    const dependencies = this.config.dependencies[serviceName] || [];\n    const results = [];\n\n    for (const depName of dependencies) {\n      const depService = this.services.get(depName);\n      const healthy = depService ? ['healthy', 'degraded'].includes(depService.status) : false;\n      results.push({ name: depName, healthy });\n    }\n\n    return results;\n  }\n\n  private async performServiceCheck(serviceName: string): Promise<{\n    status: ServiceHealth['status'];\n    message?: string;\n    details?: any;\n  }> {\n    switch (serviceName) {\n      case 'database':\n        return this.checkDatabase();\n      case 'redis':\n        return this.checkRedis();\n      case 'ollama':\n        return this.checkOllama();\n      case 'frontend':\n        return this.checkFrontend();\n      case 'backend':\n        return this.checkBackend();\n      case 'websocket':\n        return this.checkWebSocket();\n      case 'model-health':\n        return this.checkModelHealth();\n      case 'prometheus':\n        return this.checkPrometheus();\n      case 'grafana':\n        return this.checkGrafana();\n      case 'model-init':\n        return this.checkModelInit();\n      default:\n        return {\n          status: 'unhealthy',\n          message: `Unknown service: ${serviceName}`\n        };\n    }\n  }\n\n  private async checkDatabase(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    try {\n      const result = db.prepare('SELECT 1 as test').get() as { test: number };\n      const stats = {\n        promptCards: db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number },\n        testCases: db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number }\n      };\n\n      return {\n        status: result?.test === 1 ? 'healthy' : 'unhealthy',\n        message: 'Database connection successful',\n        details: { stats, path: process.env.DATABASE_PATH }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Database check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async checkRedis(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const redisUrl = process.env.REDIS_URL || 'redis://redis:6379';\n    \n    try {\n      const client = createClient({ url: redisUrl });\n      await client.connect();\n      const result = await client.ping();\n      await client.disconnect();\n\n      return {\n        status: result === 'PONG' ? 'healthy' : 'unhealthy',\n        message: 'Redis connection successful',\n        details: { url: redisUrl, ping: result }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Redis check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: redisUrl }\n      };\n    }\n  }\n\n  private async checkOllama(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n    \n    try {\n      const response = await axios.get(`${ollamaUrl}/api/version`, { timeout: this.config.timeout });\n      const modelsResponse = await axios.get(`${ollamaUrl}/api/tags`, { timeout: this.config.timeout });\n      const models = modelsResponse.data.models || [];\n\n      return {\n        status: models.length > 0 ? 'healthy' : 'degraded',\n        message: models.length > 0 ? 'Ollama operational with models' : 'Ollama operational but no models',\n        details: {\n          url: ollamaUrl,\n          version: response.data.version,\n          modelCount: models.length,\n          models: models.map((m: any) => m.name)\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Ollama check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: ollamaUrl }\n      };\n    }\n  }\n\n  private async checkFrontend(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';\n    \n    try {\n      const response = await axios.get(`${frontendUrl}/api/health`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Frontend health check successful',\n        details: {\n          url: frontendUrl,\n          statusCode: response.status,\n          frontendStatus: response.data?.status\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Frontend check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: frontendUrl }\n      };\n    }\n  }\n\n  private async checkBackend(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const backendUrl = process.env.BACKEND_URL || 'http://localhost:3001';\n    \n    try {\n      const response = await axios.get(`${backendUrl}/api/health/v2`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.data?.status === 'healthy' ? 'healthy' : 'degraded',\n        message: 'Backend health check successful',\n        details: {\n          url: backendUrl,\n          statusCode: response.status,\n          backendStatus: response.data?.status,\n          services: response.data?.services\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Backend check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: backendUrl }\n      };\n    }\n  }\n\n  private async checkWebSocket(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    // WebSocket health is checked via backend health endpoint\n    // This is a simplified check - in production you might want to test actual WebSocket connection\n    return {\n      status: 'healthy',\n      message: 'WebSocket service assumed healthy (checked via backend)',\n      details: { note: 'Indirect check via backend service' }\n    };\n  }\n\n  private async checkModelHealth(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    if (!this.modelMonitor) {\n      return {\n        status: 'offline',\n        message: 'Model health monitor not initialized'\n      };\n    }\n\n    try {\n      const monitorStatus = this.modelMonitor.getStatus();\n      const healthyModels = this.modelMonitor.getHealthyModels();\n      const unhealthyModels = this.modelMonitor.getUnhealthyModels();\n\n      let status: ServiceHealth['status'] = 'healthy';\n      if (unhealthyModels.length > healthyModels.length) {\n        status = 'degraded';\n      }\n      if (healthyModels.length === 0 && unhealthyModels.length > 0) {\n        status = 'unhealthy';\n      }\n\n      return {\n        status,\n        message: `${healthyModels.length} healthy models, ${unhealthyModels.length} unhealthy`,\n        details: {\n          ...monitorStatus,\n          healthyModels,\n          unhealthyModels\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Model health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async checkPrometheus(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const prometheusUrl = process.env.PROMETHEUS_URL || 'http://localhost:9090';\n    \n    try {\n      const response = await axios.get(`${prometheusUrl}/-/healthy`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Prometheus health check successful',\n        details: { url: prometheusUrl, statusCode: response.status }\n      };\n    } catch (error) {\n      return {\n        status: 'offline',\n        message: `Prometheus check failed: ${error instanceof Error ? error.message : 'Service not running'}`,\n        details: { url: prometheusUrl }\n      };\n    }\n  }\n\n  private async checkGrafana(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const grafanaUrl = process.env.GRAFANA_URL || 'http://localhost:3002';\n    \n    try {\n      const response = await axios.get(`${grafanaUrl}/api/health`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Grafana health check successful',\n        details: { url: grafanaUrl, statusCode: response.status }\n      };\n    } catch (error) {\n      return {\n        status: 'offline',\n        message: `Grafana check failed: ${error instanceof Error ? error.message : 'Service not running'}`,\n        details: { url: grafanaUrl }\n      };\n    }\n  }\n\n  private async checkModelInit(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    // Model init is a one-time service that downloads models\n    // Check if models exist to infer if init was successful\n    try {\n      const modelsResponse = await axios.get(`${process.env.OLLAMA_BASE_URL || 'http://ollama:11434'}/api/tags`);\n      const models = modelsResponse.data.models || [];\n      \n      return {\n        status: models.length > 0 ? 'healthy' : 'degraded',\n        message: models.length > 0 ? 'Models initialized successfully' : 'No models found',\n        details: { modelCount: models.length, models: models.map((m: any) => m.name) }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Model init check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async performFullHealthCheck(): Promise<void> {\n    console.log('🔍 Performing full system health check...');\n    \n    // Check all services in parallel\n    const checkPromises = Array.from(this.services.keys()).map(serviceName => \n      this.checkServiceHealth(serviceName)\n    );\n    \n    await Promise.allSettled(checkPromises);\n    this.lastFullCheck = new Date();\n    \n    const systemHealth = this.getSystemHealth();\n    \n    this.emit('fullHealthCheckComplete', {\n      systemHealth,\n      timestamp: this.lastFullCheck\n    });\n    \n    console.log(`✅ Full health check complete: ${systemHealth.healthyServices}/${systemHealth.totalServices} services healthy`);\n  }\n\n  public getSystemHealth(): SystemHealth {\n    const services = new Map(this.services);\n    const totalServices = services.size;\n    let healthyServices = 0;\n    let degradedServices = 0;\n    let unhealthyServices = 0;\n    let offlineServices = 0;\n\n    for (const service of services.values()) {\n      switch (service.status) {\n        case 'healthy':\n          healthyServices++;\n          break;\n        case 'degraded':\n          degradedServices++;\n          break;\n        case 'unhealthy':\n          unhealthyServices++;\n          break;\n        case 'offline':\n          offlineServices++;\n          break;\n      }\n    }\n\n    // Determine overall status\n    let overallStatus: SystemHealth['overallStatus'] = 'healthy';\n    \n    // Check critical services\n    const criticalServices = Array.from(services.values()).filter(s => s.criticalService);\n    const criticalUnhealthy = criticalServices.filter(s => s.status === 'unhealthy' || s.status === 'offline');\n    const criticalDegraded = criticalServices.filter(s => s.status === 'degraded');\n    \n    if (criticalUnhealthy.length > 0) {\n      overallStatus = 'unhealthy';\n    } else if (criticalDegraded.length > 0 || unhealthyServices > 0) {\n      overallStatus = 'degraded';\n    }\n\n    return {\n      overallStatus,\n      services,\n      lastFullCheck: this.lastFullCheck,\n      totalServices,\n      healthyServices,\n      degradedServices,\n      unhealthyServices,\n      offlineServices\n    };\n  }\n\n  public getServiceHealth(serviceName: string): ServiceHealth | undefined {\n    return this.services.get(serviceName);\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) return;\n\n    console.log('🔄 Stopping Health Orchestrator...');\n    this.isRunning = false;\n\n    // Clear all intervals\n    for (const interval of this.checkIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.checkIntervals.clear();\n\n    // Shutdown model monitor\n    if (this.modelMonitor) {\n      await this.modelMonitor.shutdown();\n    }\n\n    console.log('✅ Health Orchestrator stopped');\n    this.emit('stopped');\n  }\n\n  public updateConfig(newConfig: Partial<HealthCheckConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('⚙️ Health Orchestrator configuration updated');\n  }\n\n  public getCircuitBreakerStatus(): Map<string, { isOpen: boolean; failures: number; lastFailure: Date }> {\n    return new Map(this.circuitBreakers);\n  }\n\n  public getFallbackStatus(): Record<string, boolean> {\n    const status: Record<string, boolean> = {};\n    for (const [serviceName] of this.fallbackMechanisms) {\n      status[serviceName] = true;\n    }\n    return status;\n  }\n\n  public getServiceDependencyMap(): Record<string, string[]> {\n    return { ...this.config.dependencies };\n  }\n\n  public async testFallbackMechanism(serviceName: string): Promise<any> {\n    const fallback = this.fallbackMechanisms.get(serviceName);\n    if (!fallback) {\n      throw new Error(`No fallback mechanism configured for ${serviceName}`);\n    }\n    return await fallback();\n  }\n}\n\nexport const healthOrchestrator = new HealthOrchestrator();"],"names":["HealthOrchestrator","healthOrchestrator","EventEmitter","initializeServices","servicesConfig","name","criticalService","dependencies","serviceConfig","service","status","lastCheck","Date","responseTime","services","set","initializeFallbackMechanisms","fallbackMechanisms","message","details","fallbackMode","capabilities","note","cacheType","aiFeatures","initializeCircuitBreakers","serviceNames","Array","from","keys","serviceName","circuitBreakers","isOpen","failures","lastFailure","executeWithCircuitBreaker","operation","breaker","get","Error","timeSinceLastFailure","now","getTime","resetTimeout","result","error","console","warn","start","isRunning","log","modelMonitor","ModelHealthMonitor","healthCheckInterval","benchmarkInterval","maxResponseTime","maxErrorRate","minHealthScore","alertThresholds","errorRate","memoryUsage","initialize","startServiceMonitoring","performFullHealthCheck","fullCheckInterval","setInterval","config","checkInterval","checkIntervals","emit","servicesCount","size","interval","checkServiceHealth","startTime","newStatus","dependencyResults","checkDependencies","dependenciesHealthy","every","dep","healthy","dependencyStatus","healthResult","performServiceCheck","circuitBreakerError","fallback","fallbackResult","updatedService","previousStatus","timestamp","results","depName","depService","includes","push","checkDatabase","checkRedis","checkOllama","checkFrontend","checkBackend","checkWebSocket","checkModelHealth","checkPrometheus","checkGrafana","checkModelInit","db","prepare","stats","promptCards","testCases","test","path","process","env","DATABASE_PATH","redisUrl","REDIS_URL","client","createClient","url","connect","ping","disconnect","ollamaUrl","OLLAMA_BASE_URL","response","axios","timeout","modelsResponse","models","data","length","version","modelCount","map","m","frontendUrl","FRONTEND_URL","statusCode","frontendStatus","backendUrl","BACKEND_URL","backendStatus","monitorStatus","getStatus","healthyModels","getHealthyModels","unhealthyModels","getUnhealthyModels","prometheusUrl","PROMETHEUS_URL","grafanaUrl","GRAFANA_URL","checkPromises","Promise","allSettled","lastFullCheck","systemHealth","getSystemHealth","healthyServices","totalServices","Map","degradedServices","unhealthyServices","offlineServices","values","overallStatus","criticalServices","filter","s","criticalUnhealthy","criticalDegraded","getServiceHealth","stop","clearInterval","clear","shutdown","updateConfig","newConfig","getCircuitBreakerStatus","getFallbackStatus","getServiceDependencyMap","testFallbackMechanism","retries","retryDelay"],"mappings":"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"}