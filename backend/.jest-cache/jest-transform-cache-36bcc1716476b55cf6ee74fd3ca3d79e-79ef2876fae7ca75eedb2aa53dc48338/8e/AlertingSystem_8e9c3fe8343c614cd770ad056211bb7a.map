{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/health/AlertingSystem.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { healthOrchestrator } from './HealthOrchestrator';\nimport { circuitBreakerRegistry } from './CircuitBreaker';\n\nexport enum AlertSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  CRITICAL = 'critical'\n}\n\nexport enum AlertType {\n  SERVICE_DOWN = 'service_down',\n  SERVICE_DEGRADED = 'service_degraded',\n  SERVICE_RECOVERED = 'service_recovered',\n  HIGH_RESPONSE_TIME = 'high_response_time',\n  CIRCUIT_BREAKER_OPENED = 'circuit_breaker_opened',\n  CIRCUIT_BREAKER_CLOSED = 'circuit_breaker_closed',\n  SYSTEM_UNHEALTHY = 'system_unhealthy',\n  DEPENDENCY_FAILURE = 'dependency_failure',\n  PERFORMANCE = 'performance'\n}\n\ninterface Alert {\n  id: string;\n  type: AlertType;\n  severity: AlertSeverity;\n  service: string;\n  message: string;\n  details: any;\n  timestamp: Date;\n  acknowledged: boolean;\n  resolvedAt?: Date;\n}\n\ninterface AlertRule {\n  id: string;\n  name: string;\n  type: AlertType;\n  severity: AlertSeverity;\n  enabled: boolean;\n  conditions: {\n    services?: string[];\n    thresholds?: {\n      responseTime?: number;\n      errorRate?: number;\n      consecutiveFailures?: number;\n    };\n    cooldownPeriod?: number; // minutes\n  };\n  actions: {\n    email?: string[];\n    webhook?: string;\n    slack?: {\n      channel: string;\n      webhook: string;\n    };\n  };\n}\n\ninterface AlertingConfig {\n  enabled: boolean;\n  defaultCooldownPeriod: number; // minutes\n  maxAlertsPerHour: number;\n  retentionDays: number;\n}\n\nexport class AlertingSystem extends EventEmitter {\n  private alerts: Map<string, Alert> = new Map();\n  private alertRules: Map<string, AlertRule> = new Map();\n  private config: AlertingConfig;\n  private alertCounts: Map<string, number> = new Map();\n  private lastAlerts: Map<string, Date> = new Map();\n  private isInitialized = false;\n\n  constructor(config: Partial<AlertingConfig> = {}) {\n    super();\n    \n    this.config = {\n      enabled: true,\n      defaultCooldownPeriod: 15, // 15 minutes\n      maxAlertsPerHour: 10,\n      retentionDays: 30,\n      ...config\n    };\n\n    this.initializeDefaultRules();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    console.log('ðŸš¨ Initializing Alerting System...');\n\n    // Listen to health orchestrator events\n    healthOrchestrator.on('serviceStatusChanged', this.handleServiceStatusChange.bind(this));\n    healthOrchestrator.on('criticalServiceDown', this.handleCriticalServiceDown.bind(this));\n    healthOrchestrator.on('fullHealthCheckComplete', this.handleFullHealthCheck.bind(this));\n\n    // Listen to circuit breaker events\n    circuitBreakerRegistry.on('breakerOpened', this.handleCircuitBreakerOpened.bind(this));\n    circuitBreakerRegistry.on('breakerClosed', this.handleCircuitBreakerClosed.bind(this));\n\n    // Start cleanup process\n    this.startCleanupProcess();\n\n    this.isInitialized = true;\n    console.log('âœ… Alerting System initialized');\n  }\n\n  private initializeDefaultRules(): void {\n    // Critical service down rule\n    this.addAlertRule({\n      id: 'critical-service-down',\n      name: 'Critical Service Down',\n      type: AlertType.SERVICE_DOWN,\n      severity: AlertSeverity.CRITICAL,\n      enabled: true,\n      conditions: {\n        services: ['database', 'ollama', 'frontend', 'backend']\n      },\n      actions: {\n        // Configure these based on your notification preferences\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n\n    // High response time rule\n    this.addAlertRule({\n      id: 'high-response-time',\n      name: 'High Response Time',\n      type: AlertType.HIGH_RESPONSE_TIME,\n      severity: AlertSeverity.WARNING,\n      enabled: true,\n      conditions: {\n        thresholds: {\n          responseTime: 10000 // 10 seconds\n        },\n        cooldownPeriod: 5 // 5 minutes\n      },\n      actions: {\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n\n    // Circuit breaker opened rule\n    this.addAlertRule({\n      id: 'circuit-breaker-opened',\n      name: 'Circuit Breaker Opened',\n      type: AlertType.CIRCUIT_BREAKER_OPENED,\n      severity: AlertSeverity.CRITICAL,\n      enabled: true,\n      conditions: {\n        cooldownPeriod: 1 // 1 minute\n      },\n      actions: {\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n\n    // System unhealthy rule\n    this.addAlertRule({\n      id: 'system-unhealthy',\n      name: 'System Unhealthy',\n      type: AlertType.SYSTEM_UNHEALTHY,\n      severity: AlertSeverity.CRITICAL,\n      enabled: true,\n      conditions: {\n        cooldownPeriod: 10 // 10 minutes\n      },\n      actions: {\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n  }\n\n  private handleServiceStatusChange(event: any): void {\n    const { serviceName, previousStatus, newStatus, responseTime, message } = event;\n\n    // Check for service down/recovery\n    if (previousStatus !== 'unhealthy' && newStatus === 'unhealthy') {\n      this.checkAndCreateAlert({\n        type: AlertType.SERVICE_DOWN,\n        service: serviceName,\n        message: `Service ${serviceName} is down: ${message}`,\n        details: { previousStatus, newStatus, responseTime }\n      });\n    } else if (previousStatus === 'unhealthy' && newStatus === 'healthy') {\n      this.checkAndCreateAlert({\n        type: AlertType.SERVICE_RECOVERED,\n        service: serviceName,\n        message: `Service ${serviceName} has recovered`,\n        details: { previousStatus, newStatus, responseTime }\n      });\n    } else if (previousStatus !== 'degraded' && newStatus === 'degraded') {\n      this.checkAndCreateAlert({\n        type: AlertType.SERVICE_DEGRADED,\n        service: serviceName,\n        message: `Service ${serviceName} is degraded: ${message}`,\n        details: { previousStatus, newStatus, responseTime }\n      });\n    }\n\n    // Check for high response time\n    if (responseTime > 0) {\n      const rule = this.alertRules.get('high-response-time');\n      if (rule?.enabled && rule.conditions.thresholds?.responseTime) {\n        if (responseTime > rule.conditions.thresholds.responseTime) {\n          this.checkAndCreateAlert({\n            type: AlertType.HIGH_RESPONSE_TIME,\n            service: serviceName,\n            message: `High response time for ${serviceName}: ${responseTime}ms`,\n            details: { responseTime, threshold: rule.conditions.thresholds.responseTime }\n          });\n        }\n      }\n    }\n  }\n\n  private handleCriticalServiceDown(event: any): void {\n    const { serviceName, message, details } = event;\n    \n    this.checkAndCreateAlert({\n      type: AlertType.SERVICE_DOWN,\n      service: serviceName,\n      message: `Critical service ${serviceName} is down: ${message}`,\n      details,\n      forceSeverity: AlertSeverity.CRITICAL\n    });\n  }\n\n  private handleFullHealthCheck(event: any): void {\n    const { systemHealth } = event;\n    \n    if (systemHealth.overallStatus === 'unhealthy') {\n      this.checkAndCreateAlert({\n        type: AlertType.SYSTEM_UNHEALTHY,\n        service: 'system',\n        message: `System is unhealthy: ${systemHealth.unhealthyServices} unhealthy services`,\n        details: {\n          totalServices: systemHealth.totalServices,\n          healthyServices: systemHealth.healthyServices,\n          unhealthyServices: systemHealth.unhealthyServices,\n          degradedServices: systemHealth.degradedServices\n        }\n      });\n    }\n  }\n\n  private handleCircuitBreakerOpened(event: any): void {\n    const { serviceName, failureCount, reason } = event;\n    \n    this.checkAndCreateAlert({\n      type: AlertType.CIRCUIT_BREAKER_OPENED,\n      service: serviceName,\n      message: `Circuit breaker opened for ${serviceName}: ${reason}`,\n      details: { failureCount, reason }\n    });\n  }\n\n  private handleCircuitBreakerClosed(event: any): void {\n    const { serviceName, reason } = event;\n    \n    this.checkAndCreateAlert({\n      type: AlertType.CIRCUIT_BREAKER_CLOSED,\n      service: serviceName,\n      message: `Circuit breaker closed for ${serviceName}: ${reason}`,\n      details: { reason },\n      forceSeverity: AlertSeverity.INFO\n    });\n  }\n\n  public checkAndCreateAlert(params: {\n    type: AlertType;\n    service: string;\n    message: string;\n    details: any;\n    forceSeverity?: AlertSeverity;\n  }): void {\n    if (!this.config.enabled) return;\n\n    const rule = this.findMatchingRule(params.type, params.service);\n    if (!rule?.enabled) return;\n\n    // Check cooldown period\n    const cooldownKey = `${params.type}-${params.service}`;\n    const lastAlert = this.lastAlerts.get(cooldownKey);\n    const cooldownPeriod = rule.conditions.cooldownPeriod || this.config.defaultCooldownPeriod;\n    \n    if (lastAlert) {\n      const timeSinceLastAlert = Date.now() - lastAlert.getTime();\n      const cooldownMs = cooldownPeriod * 60 * 1000;\n      \n      if (timeSinceLastAlert < cooldownMs) {\n        console.log(`Alert suppressed due to cooldown: ${params.type} for ${params.service}`);\n        return;\n      }\n    }\n\n    // Check rate limiting\n    const hourKey = Math.floor(Date.now() / (60 * 60 * 1000));\n    const countKey = `${hourKey}-${params.service}`;\n    const hourlyCount = this.alertCounts.get(countKey) || 0;\n    \n    if (hourlyCount >= this.config.maxAlertsPerHour) {\n      console.log(`Alert rate limit exceeded for ${params.service}`);\n      return;\n    }\n\n    // Create alert\n    const alert = this.createAlert({\n      ...params,\n      severity: params.forceSeverity || rule.severity\n    });\n\n    // Update tracking\n    this.lastAlerts.set(cooldownKey, new Date());\n    this.alertCounts.set(countKey, hourlyCount + 1);\n\n    // Send notifications\n    this.sendNotifications(alert, rule);\n\n    console.log(`ðŸš¨ Alert created: ${alert.type} for ${alert.service} - ${alert.message}`);\n  }\n\n  private findMatchingRule(type: AlertType, service: string): AlertRule | undefined {\n    for (const rule of this.alertRules.values()) {\n      if (rule.type === type) {\n        if (!rule.conditions.services || rule.conditions.services.includes(service)) {\n          return rule;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  private createAlert(params: {\n    type: AlertType;\n    service: string;\n    message: string;\n    details: any;\n    severity: AlertSeverity;\n  }): Alert {\n    const alert: Alert = {\n      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: params.type,\n      severity: params.severity,\n      service: params.service,\n      message: params.message,\n      details: params.details,\n      timestamp: new Date(),\n      acknowledged: false\n    };\n\n    this.alerts.set(alert.id, alert);\n    this.emit('alertCreated', alert);\n    \n    return alert;\n  }\n\n  private async sendNotifications(alert: Alert, rule: AlertRule): Promise<void> {\n    try {\n      // Webhook notification\n      if (rule.actions.webhook) {\n        await this.sendWebhookNotification(alert, rule.actions.webhook);\n      }\n\n      // Slack notification (if configured)\n      if (rule.actions.slack) {\n        await this.sendSlackNotification(alert, rule.actions.slack);\n      }\n\n      // Email notification (if configured)\n      if (rule.actions.email && rule.actions.email.length > 0) {\n        await this.sendEmailNotification(alert, rule.actions.email);\n      }\n    } catch (error) {\n      console.error('Failed to send alert notification:', error);\n    }\n  }\n\n  private async sendWebhookNotification(alert: Alert, webhookUrl: string): Promise<void> {\n    try {\n      const payload = {\n        alert: {\n          id: alert.id,\n          type: alert.type,\n          severity: alert.severity,\n          service: alert.service,\n          message: alert.message,\n          timestamp: alert.timestamp.toISOString()\n        },\n        system: 'prompt-card-health-monitor'\n      };\n\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Webhook notification failed:', error);\n    }\n  }\n\n  private async sendSlackNotification(alert: Alert, slackConfig: { channel: string; webhook: string }): Promise<void> {\n    try {\n      const color = {\n        [AlertSeverity.INFO]: '#36a64f',\n        [AlertSeverity.WARNING]: '#ffeb3b',\n        [AlertSeverity.CRITICAL]: '#f44336'\n      }[alert.severity];\n\n      const payload = {\n        channel: slackConfig.channel,\n        attachments: [{\n          color,\n          title: `${alert.severity.toUpperCase()}: ${alert.type.replace('_', ' ').toUpperCase()}`,\n          text: alert.message,\n          fields: [\n            {\n              title: 'Service',\n              value: alert.service,\n              short: true\n            },\n            {\n              title: 'Time',\n              value: alert.timestamp.toISOString(),\n              short: true\n            }\n          ]\n        }]\n      };\n\n      const response = await fetch(slackConfig.webhook, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Slack notification failed: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Slack notification failed:', error);\n    }\n  }\n\n  private async sendEmailNotification(alert: Alert, emails: string[]): Promise<void> {\n    // Email implementation would depend on your email service\n    // This is a placeholder for the email notification logic\n    console.log(`Email notification sent to ${emails.join(', ')} for alert: ${alert.message}`);\n  }\n\n  public addAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule);\n    console.log(`Alert rule added: ${rule.name}`);\n  }\n\n  public removeAlertRule(ruleId: string): boolean {\n    const removed = this.alertRules.delete(ruleId);\n    if (removed) {\n      console.log(`Alert rule removed: ${ruleId}`);\n    }\n    return removed;\n  }\n\n  public updateAlertRule(ruleId: string, updates: Partial<AlertRule>): boolean {\n    const rule = this.alertRules.get(ruleId);\n    if (!rule) return false;\n\n    const updatedRule = { ...rule, ...updates };\n    this.alertRules.set(ruleId, updatedRule);\n    console.log(`Alert rule updated: ${ruleId}`);\n    return true;\n  }\n\n  public acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) return false;\n\n    alert.acknowledged = true;\n    this.alerts.set(alertId, alert);\n    this.emit('alertAcknowledged', alert);\n    return true;\n  }\n\n  public resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) return false;\n\n    alert.resolvedAt = new Date();\n    this.alerts.set(alertId, alert);\n    this.emit('alertResolved', alert);\n    return true;\n  }\n\n  public getAlerts(filters?: {\n    service?: string;\n    severity?: AlertSeverity;\n    acknowledged?: boolean;\n    resolved?: boolean;\n    limit?: number;\n  }): Alert[] {\n    let alerts = Array.from(this.alerts.values());\n\n    if (filters) {\n      if (filters.service) {\n        alerts = alerts.filter(a => a.service === filters.service);\n      }\n      if (filters.severity) {\n        alerts = alerts.filter(a => a.severity === filters.severity);\n      }\n      if (filters.acknowledged !== undefined) {\n        alerts = alerts.filter(a => a.acknowledged === filters.acknowledged);\n      }\n      if (filters.resolved !== undefined) {\n        const hasResolved = (alert: Alert) => !!alert.resolvedAt;\n        alerts = alerts.filter(a => hasResolved(a) === filters.resolved);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    alerts.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    if (filters?.limit) {\n      alerts = alerts.slice(0, filters.limit);\n    }\n\n    return alerts;\n  }\n\n  public getAlertRules(): AlertRule[] {\n    return Array.from(this.alertRules.values());\n  }\n\n  public getAlertStats(): {\n    total: number;\n    bySeverity: Record<AlertSeverity, number>;\n    byService: Record<string, number>;\n    acknowledged: number;\n    resolved: number;\n  } {\n    const alerts = Array.from(this.alerts.values());\n    const stats = {\n      total: alerts.length,\n      bySeverity: {\n        [AlertSeverity.INFO]: 0,\n        [AlertSeverity.WARNING]: 0,\n        [AlertSeverity.CRITICAL]: 0\n      },\n      byService: {} as Record<string, number>,\n      acknowledged: 0,\n      resolved: 0\n    };\n\n    for (const alert of alerts) {\n      stats.bySeverity[alert.severity]++;\n      stats.byService[alert.service] = (stats.byService[alert.service] || 0) + 1;\n      \n      if (alert.acknowledged) stats.acknowledged++;\n      if (alert.resolvedAt) stats.resolved++;\n    }\n\n    return stats;\n  }\n\n  private startCleanupProcess(): void {\n    // Clean up old alerts daily\n    setInterval(() => {\n      this.cleanupOldAlerts();\n    }, 24 * 60 * 60 * 1000); // 24 hours\n  }\n\n  private cleanupOldAlerts(): void {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - this.config.retentionDays);\n\n    let removedCount = 0;\n    for (const [id, alert] of this.alerts) {\n      if (alert.timestamp < cutoffDate) {\n        this.alerts.delete(id);\n        removedCount++;\n      }\n    }\n\n    if (removedCount > 0) {\n      console.log(`Cleaned up ${removedCount} old alerts`);\n    }\n  }\n\n  public updateConfig(newConfig: Partial<AlertingConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('Alerting system configuration updated');\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('Shutting down alerting system...');\n    this.isInitialized = false;\n    this.removeAllListeners();\n    console.log('Alerting system shutdown complete');\n  }\n}\n\nexport const alertingSystem = new AlertingSystem();"],"names":["AlertSeverity","AlertType","AlertingSystem","alertingSystem","EventEmitter","initialize","isInitialized","console","log","healthOrchestrator","on","handleServiceStatusChange","bind","handleCriticalServiceDown","handleFullHealthCheck","circuitBreakerRegistry","handleCircuitBreakerOpened","handleCircuitBreakerClosed","startCleanupProcess","initializeDefaultRules","addAlertRule","id","name","type","severity","enabled","conditions","services","actions","webhook","process","env","ALERT_WEBHOOK_URL","thresholds","responseTime","cooldownPeriod","event","serviceName","previousStatus","newStatus","message","checkAndCreateAlert","service","details","rule","alertRules","get","threshold","forceSeverity","systemHealth","overallStatus","unhealthyServices","totalServices","healthyServices","degradedServices","failureCount","reason","params","config","findMatchingRule","cooldownKey","lastAlert","lastAlerts","defaultCooldownPeriod","timeSinceLastAlert","Date","now","getTime","cooldownMs","hourKey","Math","floor","countKey","hourlyCount","alertCounts","maxAlertsPerHour","alert","createAlert","set","sendNotifications","values","includes","undefined","random","toString","substr","timestamp","acknowledged","alerts","emit","sendWebhookNotification","slack","sendSlackNotification","email","length","sendEmailNotification","error","webhookUrl","payload","toISOString","system","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","slackConfig","color","channel","attachments","title","toUpperCase","replace","text","fields","value","short","emails","join","removeAlertRule","ruleId","removed","delete","updateAlertRule","updates","updatedRule","acknowledgeAlert","alertId","resolveAlert","resolvedAt","getAlerts","filters","Array","from","filter","a","resolved","hasResolved","sort","b","limit","slice","getAlertRules","getAlertStats","stats","total","bySeverity","byService","setInterval","cleanupOldAlerts","cutoffDate","setDate","getDate","retentionDays","removedCount","updateConfig","newConfig","shutdown","removeAllListeners","Map"],"mappings":"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"}