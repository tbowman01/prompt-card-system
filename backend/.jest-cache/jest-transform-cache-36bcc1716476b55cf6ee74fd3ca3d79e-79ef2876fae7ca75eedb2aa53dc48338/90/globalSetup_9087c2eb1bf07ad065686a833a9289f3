acd8d855c033dff2fce9e9593bb7597c
// Global test setup - runs once before all tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return globalSetup;
    }
});
const _connection = require("../database/connection");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function globalSetup() {
    console.log('üß™ Setting up global test environment...');
    // Set test environment variables
    process.env.NODE_ENV = 'test';
    process.env.DATABASE_PATH = _path.default.join(__dirname, '../../data/test.sqlite');
    process.env.OLLAMA_BASE_URL = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';
    // Ensure test data directory exists
    const testDataDir = _path.default.dirname(process.env.DATABASE_PATH);
    if (!_fs.default.existsSync(testDataDir)) {
        _fs.default.mkdirSync(testDataDir, {
            recursive: true
        });
    }
    // Clean up any existing test database
    if (_fs.default.existsSync(process.env.DATABASE_PATH)) {
        _fs.default.unlinkSync(process.env.DATABASE_PATH);
    }
    // Initialize test database
    try {
        console.log('Initializing database...');
        (0, _connection.initializeDatabase)();
        console.log('Database initialized successfully');
        console.log('‚úÖ Test database initialized');
    } catch (error) {
        console.error('Error initializing database:', error);
        console.error('‚ùå Failed to initialize test database:', error);
    }
    console.log('‚úÖ Global test setup complete');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy90ZXN0cy9nbG9iYWxTZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHbG9iYWwgdGVzdCBzZXR1cCAtIHJ1bnMgb25jZSBiZWZvcmUgYWxsIHRlc3RzXG5pbXBvcnQgeyBpbml0aWFsaXplRGF0YWJhc2UgfSBmcm9tICcuLi9kYXRhYmFzZS9jb25uZWN0aW9uJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2xvYmFsU2V0dXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnNvbGUubG9nKCfwn6eqIFNldHRpbmcgdXAgZ2xvYmFsIHRlc3QgZW52aXJvbm1lbnQuLi4nKTtcbiAgXG4gIC8vIFNldCB0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlc1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgcHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kYXRhL3Rlc3Quc3FsaXRlJyk7XG4gIHByb2Nlc3MuZW52Lk9MTEFNQV9CQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk9MTEFNQV9CQVNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDoxMTQzNCc7XG4gIFxuICAvLyBFbnN1cmUgdGVzdCBkYXRhIGRpcmVjdG9yeSBleGlzdHNcbiAgY29uc3QgdGVzdERhdGFEaXIgPSBwYXRoLmRpcm5hbWUocHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCk7XG4gIGlmICghZnMuZXhpc3RzU3luYyh0ZXN0RGF0YURpcikpIHtcbiAgICBmcy5ta2RpclN5bmModGVzdERhdGFEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9XG4gIFxuICAvLyBDbGVhbiB1cCBhbnkgZXhpc3RpbmcgdGVzdCBkYXRhYmFzZVxuICBpZiAoZnMuZXhpc3RzU3luYyhwcm9jZXNzLmVudi5EQVRBQkFTRV9QQVRIKSkge1xuICAgIGZzLnVubGlua1N5bmMocHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCk7XG4gIH1cbiAgXG4gIC8vIEluaXRpYWxpemUgdGVzdCBkYXRhYmFzZVxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgZGF0YWJhc2UuLi4nKTtcbiAgICBpbml0aWFsaXplRGF0YWJhc2UoKTtcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgY29uc29sZS5sb2coJ+KchSBUZXN0IGRhdGFiYXNlIGluaXRpYWxpemVkJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGluaXRpYWxpemUgdGVzdCBkYXRhYmFzZTonLCBlcnJvcik7XG4gIH1cbiAgXG4gIGNvbnNvbGUubG9nKCfinIUgR2xvYmFsIHRlc3Qgc2V0dXAgY29tcGxldGUnKTtcbn0iXSwibmFtZXMiOlsiZ2xvYmFsU2V0dXAiLCJjb25zb2xlIiwibG9nIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiREFUQUJBU0VfUEFUSCIsInBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwiT0xMQU1BX0JBU0VfVVJMIiwidGVzdERhdGFEaXIiLCJkaXJuYW1lIiwiZnMiLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwidW5saW5rU3luYyIsImluaXRpYWxpemVEYXRhYmFzZSIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7Ozs7OytCQUtqRDs7O2VBQThCQTs7OzRCQUpLOzZEQUNsQjsyREFDRjs7Ozs7O0FBRUEsZUFBZUE7SUFDNUJDLFFBQVFDLEdBQUcsQ0FBQztJQUVaLGlDQUFpQztJQUNqQ0MsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEdBQUc7SUFDdkJGLFFBQVFDLEdBQUcsQ0FBQ0UsYUFBYSxHQUFHQyxhQUFJLENBQUNDLElBQUksQ0FBQ0MsV0FBVztJQUNqRE4sUUFBUUMsR0FBRyxDQUFDTSxlQUFlLEdBQUdQLFFBQVFDLEdBQUcsQ0FBQ00sZUFBZSxJQUFJO0lBRTdELG9DQUFvQztJQUNwQyxNQUFNQyxjQUFjSixhQUFJLENBQUNLLE9BQU8sQ0FBQ1QsUUFBUUMsR0FBRyxDQUFDRSxhQUFhO0lBQzFELElBQUksQ0FBQ08sV0FBRSxDQUFDQyxVQUFVLENBQUNILGNBQWM7UUFDL0JFLFdBQUUsQ0FBQ0UsU0FBUyxDQUFDSixhQUFhO1lBQUVLLFdBQVc7UUFBSztJQUM5QztJQUVBLHNDQUFzQztJQUN0QyxJQUFJSCxXQUFFLENBQUNDLFVBQVUsQ0FBQ1gsUUFBUUMsR0FBRyxDQUFDRSxhQUFhLEdBQUc7UUFDNUNPLFdBQUUsQ0FBQ0ksVUFBVSxDQUFDZCxRQUFRQyxHQUFHLENBQUNFLGFBQWE7SUFDekM7SUFFQSwyQkFBMkI7SUFDM0IsSUFBSTtRQUNGTCxRQUFRQyxHQUFHLENBQUM7UUFDWmdCLElBQUFBLDhCQUFrQjtRQUNsQmpCLFFBQVFDLEdBQUcsQ0FBQztRQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDZCxFQUFFLE9BQU9pQixPQUFPO1FBQ2RsQixRQUFRa0IsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUNsQixRQUFRa0IsS0FBSyxDQUFDLHlDQUF5Q0E7SUFDekQ7SUFFQWxCLFFBQVFDLEdBQUcsQ0FBQztBQUNkIn0=