f3550344048e0c42154926d2d0cd925b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _express = /*#__PURE__*/ _interop_require_default(require("express"));
const _PromptAnalyzer = require("../services/optimization/PromptAnalyzer");
const _OptimizationEngine = require("../services/optimization/OptimizationEngine");
const _SecurityAnalyzer = require("../services/optimization/SecurityAnalyzer");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const router = _express.default.Router();
/**
 * POST /api/optimization/analyze
 * Analyze prompt effectiveness and generate insights
 */ router.post('/analyze', async (req, res)=>{
    try {
        const { promptId, promptText, timeRange } = req.body;
        if (!promptId || !promptText) {
            return res.status(400).json({
                error: 'Missing required fields: promptId, promptText'
            });
        }
        const analysis = await _PromptAnalyzer.promptAnalyzer.analyzePrompt(promptId, promptText, timeRange);
        res.json({
            success: true,
            data: analysis
        });
    } catch (error) {
        console.error('Prompt analysis error:', error);
        res.status(500).json({
            error: 'Prompt analysis failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/compare
 * Compare two prompts and determine which performs better
 */ router.post('/compare', async (req, res)=>{
    try {
        const { promptA, promptB, testCases, model } = req.body;
        if (!promptA || !promptB) {
            return res.status(400).json({
                error: 'Missing required fields: promptA, promptB'
            });
        }
        if (!testCases || !Array.isArray(testCases) || testCases.length === 0) {
            return res.status(400).json({
                error: 'testCases must be a non-empty array'
            });
        }
        const comparison = await _PromptAnalyzer.promptAnalyzer.comparePrompts(promptA, promptB, testCases, model);
        res.json({
            success: true,
            data: comparison
        });
    } catch (error) {
        console.error('Prompt comparison error:', error);
        res.status(500).json({
            error: 'Prompt comparison failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * GET /api/optimization/suggestions/:promptId
 * Get AI-powered optimization suggestions for a prompt
 */ router.get('/suggestions/:promptId', async (req, res)=>{
    try {
        const { promptId } = req.params;
        const { originalPrompt, targetMetrics, constraints } = req.query;
        if (!originalPrompt) {
            return res.status(400).json({
                error: 'Missing required query parameter: originalPrompt'
            });
        }
        const parsedTargetMetrics = targetMetrics ? JSON.parse(targetMetrics) : {};
        const parsedConstraints = constraints ? JSON.parse(constraints) : {};
        const suggestions = await _OptimizationEngine.optimizationEngine.generateOptimizationSuggestions(originalPrompt, parsedTargetMetrics, parsedConstraints);
        res.json({
            success: true,
            data: suggestions
        });
    } catch (error) {
        console.error('Optimization suggestions error:', error);
        res.status(500).json({
            error: 'Failed to generate optimization suggestions',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/suggestions
 * Generate optimization suggestions with POST data
 */ router.post('/suggestions', async (req, res)=>{
    try {
        const { originalPrompt, targetMetrics, constraints } = req.body;
        if (!originalPrompt) {
            return res.status(400).json({
                error: 'Missing required field: originalPrompt'
            });
        }
        const suggestions = await _OptimizationEngine.optimizationEngine.generateOptimizationSuggestions(originalPrompt, targetMetrics || {}, constraints || {});
        res.json({
            success: true,
            data: suggestions
        });
    } catch (error) {
        console.error('Optimization suggestions error:', error);
        res.status(500).json({
            error: 'Failed to generate optimization suggestions',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/ab-test
 * Create and start an A/B test for prompt variations
 */ router.post('/ab-test', async (req, res)=>{
    try {
        const testConfig = req.body;
        if (!testConfig.name || !testConfig.variants || !Array.isArray(testConfig.variants)) {
            return res.status(400).json({
                error: 'Missing required fields: name, variants (array)'
            });
        }
        if (testConfig.variants.length < 2) {
            return res.status(400).json({
                error: 'At least 2 variants are required for A/B testing'
            });
        }
        const abTest = await _OptimizationEngine.optimizationEngine.createABTest(testConfig);
        res.json({
            success: true,
            data: abTest
        });
    } catch (error) {
        console.error('A/B test creation error:', error);
        res.status(500).json({
            error: 'Failed to create A/B test',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/ab-test/:testId/start
 * Start an A/B test
 */ router.post('/ab-test/:testId/start', async (req, res)=>{
    try {
        const { testId } = req.params;
        await _OptimizationEngine.optimizationEngine.startABTest(testId);
        res.json({
            success: true,
            message: `A/B test ${testId} started successfully`
        });
    } catch (error) {
        console.error('A/B test start error:', error);
        res.status(500).json({
            error: 'Failed to start A/B test',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/ab-test/:testId/result
 * Record A/B test execution result
 */ router.post('/ab-test/:testId/result', async (req, res)=>{
    try {
        const { testId } = req.params;
        const { variantId, result } = req.body;
        if (!variantId || !result) {
            return res.status(400).json({
                error: 'Missing required fields: variantId, result'
            });
        }
        await _OptimizationEngine.optimizationEngine.recordABTestResult(testId, variantId, result);
        res.json({
            success: true,
            message: 'A/B test result recorded successfully'
        });
    } catch (error) {
        console.error('A/B test result recording error:', error);
        res.status(500).json({
            error: 'Failed to record A/B test result',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * GET /api/optimization/ab-test/:testId/results
 * Get A/B test results and analysis
 */ router.get('/ab-test/:testId/results', async (req, res)=>{
    try {
        const { testId } = req.params;
        const results = await _OptimizationEngine.optimizationEngine.analyzeABTestResults(testId);
        res.json({
            success: true,
            data: results
        });
    } catch (error) {
        console.error('A/B test results error:', error);
        res.status(500).json({
            error: 'Failed to analyze A/B test results',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/tune
 * Start automated prompt tuning
 */ router.post('/tune', async (req, res)=>{
    try {
        const tuningConfig = req.body;
        if (!tuningConfig.originalPrompt || !tuningConfig.objectives) {
            return res.status(400).json({
                error: 'Missing required fields: originalPrompt, objectives'
            });
        }
        const tuningProcess = await _OptimizationEngine.optimizationEngine.startPromptTuning(tuningConfig);
        res.json({
            success: true,
            data: tuningProcess
        });
    } catch (error) {
        console.error('Prompt tuning error:', error);
        res.status(500).json({
            error: 'Failed to start prompt tuning',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * GET /api/optimization/tune/:tuningId/progress
 * Get prompt tuning progress
 */ router.get('/tune/:tuningId/progress', async (req, res)=>{
    try {
        const { tuningId } = req.params;
        const progress = await _OptimizationEngine.optimizationEngine.getTuningProgress(tuningId);
        res.json({
            success: true,
            data: progress
        });
    } catch (error) {
        console.error('Tuning progress error:', error);
        res.status(500).json({
            error: 'Failed to get tuning progress',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/validate-security
 * Validate prompt security and detect threats
 */ router.post('/validate-security', async (req, res)=>{
    try {
        const { promptId, prompt, context } = req.body;
        if (!promptId || !prompt) {
            return res.status(400).json({
                error: 'Missing required fields: promptId, prompt'
            });
        }
        const securityAnalysis = await _SecurityAnalyzer.securityAnalyzer.analyzePromptSecurity(promptId, prompt, context || {});
        res.json({
            success: true,
            data: securityAnalysis
        });
    } catch (error) {
        console.error('Security validation error:', error);
        res.status(500).json({
            error: 'Security validation failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/detect-injection
 * Detect prompt injection attempts
 */ router.post('/detect-injection', async (req, res)=>{
    try {
        const { prompt } = req.body;
        if (!prompt) {
            return res.status(400).json({
                error: 'Missing required field: prompt'
            });
        }
        const injectionResult = await _SecurityAnalyzer.securityAnalyzer.detectPromptInjection(prompt);
        res.json({
            success: true,
            data: injectionResult
        });
    } catch (error) {
        console.error('Injection detection error:', error);
        res.status(500).json({
            error: 'Injection detection failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/test-jailbreak
 * Test prompt resistance to jailbreak attempts
 */ router.post('/test-jailbreak', async (req, res)=>{
    try {
        const { prompt, model } = req.body;
        if (!prompt) {
            return res.status(400).json({
                error: 'Missing required field: prompt'
            });
        }
        const jailbreakTests = await _SecurityAnalyzer.securityAnalyzer.testJailbreakResistance(prompt, model || 'llama3');
        res.json({
            success: true,
            data: jailbreakTests
        });
    } catch (error) {
        console.error('Jailbreak testing error:', error);
        res.status(500).json({
            error: 'Jailbreak testing failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/analyze-safety
 * Analyze content safety
 */ router.post('/analyze-safety', async (req, res)=>{
    try {
        const { content } = req.body;
        if (!content) {
            return res.status(400).json({
                error: 'Missing required field: content'
            });
        }
        const safetyAnalysis = await _SecurityAnalyzer.securityAnalyzer.analyzeContentSafety(content);
        res.json({
            success: true,
            data: safetyAnalysis
        });
    } catch (error) {
        console.error('Safety analysis error:', error);
        res.status(500).json({
            error: 'Safety analysis failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/validate-compliance
 * Validate prompt compliance with regulations
 */ router.post('/validate-compliance', async (req, res)=>{
    try {
        const { prompt, regulations } = req.body;
        if (!prompt || !regulations || !Array.isArray(regulations)) {
            return res.status(400).json({
                error: 'Missing required fields: prompt, regulations (array)'
            });
        }
        const complianceResults = await _SecurityAnalyzer.securityAnalyzer.validateCompliance(prompt, regulations);
        res.json({
            success: true,
            data: complianceResults
        });
    } catch (error) {
        console.error('Compliance validation error:', error);
        res.status(500).json({
            error: 'Compliance validation failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * POST /api/optimization/generate-secure
 * Generate security-hardened prompt
 */ router.post('/generate-secure', async (req, res)=>{
    try {
        const { originalPrompt, securityLevel } = req.body;
        if (!originalPrompt) {
            return res.status(400).json({
                error: 'Missing required field: originalPrompt'
            });
        }
        const securePrompt = await _SecurityAnalyzer.securityAnalyzer.generateSecurePrompt(originalPrompt, securityLevel || 'enhanced');
        res.json({
            success: true,
            data: securePrompt
        });
    } catch (error) {
        console.error('Secure prompt generation error:', error);
        res.status(500).json({
            error: 'Secure prompt generation failed',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * GET /api/optimization/evolution/:promptId
 * Get prompt evolution history
 */ router.get('/evolution/:promptId', async (req, res)=>{
    try {
        const { promptId } = req.params;
        const evolution = await _PromptAnalyzer.promptAnalyzer.getPromptEvolution(promptId);
        res.json({
            success: true,
            data: evolution
        });
    } catch (error) {
        console.error('Prompt evolution error:', error);
        res.status(500).json({
            error: 'Failed to get prompt evolution',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * GET /api/optimization/health
 * Health check for optimization services
 */ router.get('/health', (req, res)=>{
    res.json({
        success: true,
        message: 'AI-powered prompt optimization services are running',
        services: {
            promptAnalyzer: 'active',
            optimizationEngine: 'active',
            securityAnalyzer: 'active'
        },
        timestamp: new Date().toISOString()
    });
});
const _default = router;

//# sourceMappingURL=data:application/json;base64,