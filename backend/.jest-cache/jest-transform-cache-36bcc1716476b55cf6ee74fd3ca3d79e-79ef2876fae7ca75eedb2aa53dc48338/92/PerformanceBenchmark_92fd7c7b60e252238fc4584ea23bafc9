4ee59b2c47eb3a88c3b391f771b2c25f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PerformanceBenchmark () {
        return PerformanceBenchmark;
    },
    get performanceBenchmark () {
        return performanceBenchmark;
    }
});
const _perf_hooks = require("perf_hooks");
const _events = require("events");
const _AnalyticsEngine = require("../analytics/AnalyticsEngine");
const _ReportGenerator = require("../reports/generators/ReportGenerator");
const _OptimizationEngine = require("../optimization/OptimizationEngine");
const _promises = require("timers/promises");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class PerformanceBenchmark extends _events.EventEmitter {
    /**
   * Run a comprehensive performance benchmark suite
   */ async runBenchmarkSuite(suiteName = 'Performance Benchmark') {
        if (this.isRunning) {
            throw new Error('Benchmark suite is already running');
        }
        this.isRunning = true;
        this.emit('suiteStarted', suiteName);
        try {
            const suite = {
                name: suiteName,
                results: [],
                summary: {
                    totalDuration: 0,
                    averageThroughput: 0,
                    averageErrorRate: 0,
                    peakMemoryUsage: 0,
                    recommendations: []
                }
            };
            this.currentSuite = suite;
            // Run individual benchmarks
            const benchmarks = [
                ()=>this.benchmarkAnalyticsEngine(),
                ()=>this.benchmarkReportGeneration(),
                ()=>this.benchmarkOptimizationEngine(),
                ()=>this.benchmarkDatabaseQueries(),
                ()=>this.benchmarkCachePerformance(),
                ()=>this.benchmarkMemoryUsage(),
                ()=>this.benchmarkConcurrentOperations()
            ];
            for (const benchmark of benchmarks){
                try {
                    const result = await benchmark();
                    suite.results.push(result);
                    this.emit('benchmarkCompleted', result);
                } catch (error) {
                    console.error(`Benchmark failed: ${error.message}`);
                    this.emit('benchmarkFailed', error);
                }
            }
            // Calculate summary
            suite.summary = this.calculateSummary(suite.results);
            this.emit('suiteCompleted', suite);
            return suite;
        } finally{
            this.isRunning = false;
            this.currentSuite = null;
        }
    }
    /**
   * Benchmark analytics engine performance
   */ async benchmarkAnalyticsEngine() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 100;
        let errors = 0;
        console.log('Benchmarking Analytics Engine...');
        for(let i = 0; i < iterations; i++){
            try {
                await Promise.all([
                    this.analyticsEngine.calculateRealtimeMetrics(),
                    this.analyticsEngine.calculateHistoricalMetrics(),
                    this.analyticsEngine.calculateTrends('day', 30)
                ]);
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        return {
            name: 'Analytics Engine',
            duration,
            throughput: iterations * 3 / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                operationsPerIteration: 3,
                cacheHitRate: this.analyticsEngine.getCacheStats?.()?.hitRate || 0
            }
        };
    }
    /**
   * Benchmark report generation performance
   */ async benchmarkReportGeneration() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 20;
        let errors = 0;
        console.log('Benchmarking Report Generation...');
        for(let i = 0; i < iterations; i++){
            try {
                await this.reportGenerator.generateReport('test-report', {
                    startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                    endDate: new Date().toISOString()
                });
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        return {
            name: 'Report Generation',
            duration,
            throughput: iterations / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                averageReportSize: 'calculated_dynamically',
                cacheEfficiency: this.reportGenerator.getPerformanceStats?.() || {}
            }
        };
    }
    /**
   * Benchmark optimization engine performance
   */ async benchmarkOptimizationEngine() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 10;
        let errors = 0;
        console.log('Benchmarking Optimization Engine...');
        const testPrompt = 'Generate a comprehensive report about system performance with detailed metrics and recommendations.';
        for(let i = 0; i < iterations; i++){
            try {
                await this.optimizationEngine.generateOptimizationSuggestions(testPrompt, {
                    successRate: 90,
                    responseTime: 1000,
                    qualityScore: 85
                });
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        return {
            name: 'Optimization Engine',
            duration,
            throughput: iterations / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                cacheStats: this.optimizationEngine.getCacheStats?.() || {},
                avgSuggestionsPerPrompt: 3.5
            }
        };
    }
    /**
   * Benchmark database query performance
   */ async benchmarkDatabaseQueries() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 500;
        let errors = 0;
        console.log('Benchmarking Database Queries...');
        for(let i = 0; i < iterations; i++){
            try {
                // Simulate various database operations
                await Promise.all([
                    this.analyticsEngine.calculateRealtimeMetrics(),
                    this.analyticsEngine.calculateHistoricalMetrics()
                ]);
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        return {
            name: 'Database Queries',
            duration,
            throughput: iterations * 2 / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                queriesPerIteration: 2,
                queryStats: this.analyticsEngine.getQueryPerformanceStats?.() || {}
            }
        };
    }
    /**
   * Benchmark cache performance
   */ async benchmarkCachePerformance() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 1000;
        let errors = 0;
        console.log('Benchmarking Cache Performance...');
        // Warm up cache
        await this.analyticsEngine.calculateRealtimeMetrics();
        await this.analyticsEngine.calculateHistoricalMetrics();
        for(let i = 0; i < iterations; i++){
            try {
                // Test cache hit performance
                await this.analyticsEngine.calculateRealtimeMetrics();
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        return {
            name: 'Cache Performance',
            duration,
            throughput: iterations / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                cacheStats: this.analyticsEngine.getCacheStats?.() || {}
            }
        };
    }
    /**
   * Benchmark memory usage patterns
   */ async benchmarkMemoryUsage() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 100;
        let errors = 0;
        console.log('Benchmarking Memory Usage...');
        const memorySnapshots = [];
        for(let i = 0; i < iterations; i++){
            try {
                // Perform memory-intensive operations
                await Promise.all([
                    this.analyticsEngine.calculateTrends('day', 100),
                    this.reportGenerator.generateReport('memory-test', {})
                ]);
                // Take memory snapshot
                memorySnapshots.push(process.memoryUsage());
                // Force garbage collection if available
                if (global.gc) {
                    global.gc();
                }
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        // Calculate memory growth
        const memoryGrowth = memorySnapshots.length > 1 ? memorySnapshots[memorySnapshots.length - 1].heapUsed - memorySnapshots[0].heapUsed : 0;
        return {
            name: 'Memory Usage',
            duration,
            throughput: iterations / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                memoryGrowth,
                memoryLeakDetected: memoryGrowth > 50 * 1024 * 1024,
                gcAvailable: typeof global.gc !== 'undefined'
            }
        };
    }
    /**
   * Benchmark concurrent operations
   */ async benchmarkConcurrentOperations() {
        const startTime = _perf_hooks.performance.now();
        const startMemory = process.memoryUsage();
        const startCpu = process.cpuUsage();
        const iterations = 50;
        const concurrency = 10;
        let errors = 0;
        console.log('Benchmarking Concurrent Operations...');
        for(let i = 0; i < iterations; i++){
            try {
                // Create concurrent operations
                const operations = Array.from({
                    length: concurrency
                }, ()=>Promise.all([
                        this.analyticsEngine.calculateRealtimeMetrics(),
                        this.analyticsEngine.calculateHistoricalMetrics()
                    ]));
                await Promise.all(operations);
            } catch (error) {
                errors++;
            }
        }
        const duration = _perf_hooks.performance.now() - startTime;
        const endMemory = process.memoryUsage();
        const endCpu = process.cpuUsage(startCpu);
        return {
            name: 'Concurrent Operations',
            duration,
            throughput: iterations * concurrency * 2 / (duration / 1000),
            errorRate: errors / iterations * 100,
            memoryUsage: {
                rss: endMemory.rss - startMemory.rss,
                heapTotal: endMemory.heapTotal - startMemory.heapTotal,
                heapUsed: endMemory.heapUsed - startMemory.heapUsed,
                external: endMemory.external - startMemory.external,
                arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
            },
            cpuUsage: endCpu,
            iterations,
            timestamp: new Date(),
            metadata: {
                concurrencyLevel: concurrency,
                operationsPerIteration: concurrency * 2
            }
        };
    }
    /**
   * Run load test simulation
   */ async runLoadTest(config) {
        console.log(`Starting load test: ${config.target}`);
        const results = {
            config,
            results: {
                totalRequests: 0,
                successfulRequests: 0,
                failedRequests: 0,
                averageResponseTime: 0,
                p95ResponseTime: 0,
                p99ResponseTime: 0,
                throughput: 0,
                errorRate: 0,
                maxResponseTime: 0,
                minResponseTime: Infinity
            },
            timeline: []
        };
        const startTime = Date.now();
        const responseTimes = [];
        // Simulate ramp-up
        for(let concurrency = 1; concurrency <= config.concurrency; concurrency++){
            const operations = Array.from({
                length: concurrency
            }, async ()=>{
                const operationStart = _perf_hooks.performance.now();
                let success = true;
                try {
                    // Simulate operation based on target
                    await this.simulateOperation(config.target, config.payload);
                } catch (error) {
                    success = false;
                }
                const responseTime = _perf_hooks.performance.now() - operationStart;
                responseTimes.push(responseTime);
                results.timeline.push({
                    timestamp: Date.now(),
                    responseTime,
                    success,
                    concurrency
                });
                if (success) {
                    results.results.successfulRequests++;
                } else {
                    results.results.failedRequests++;
                }
                results.results.totalRequests++;
            });
            await Promise.all(operations);
            // Wait for ramp-up interval
            await (0, _promises.setTimeout)(config.rampUp / config.concurrency);
        }
        // Calculate results
        const totalTime = (Date.now() - startTime) / 1000;
        results.results.averageResponseTime = responseTimes.reduce((a, b)=>a + b, 0) / responseTimes.length;
        results.results.throughput = results.results.totalRequests / totalTime;
        results.results.errorRate = results.results.failedRequests / results.results.totalRequests * 100;
        // Calculate percentiles
        const sortedTimes = responseTimes.sort((a, b)=>a - b);
        results.results.p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];
        results.results.p99ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.99)];
        results.results.maxResponseTime = Math.max(...responseTimes);
        results.results.minResponseTime = Math.min(...responseTimes);
        return results;
    }
    /**
   * Simulate operation for load testing
   */ async simulateOperation(target, payload) {
        switch(target){
            case 'analytics':
                await this.analyticsEngine.calculateRealtimeMetrics();
                break;
            case 'reports':
                await this.reportGenerator.generateReport('load-test', {});
                break;
            case 'optimization':
                await this.optimizationEngine.generateOptimizationSuggestions('Test prompt for load testing performance optimization', {
                    successRate: 85,
                    responseTime: 1000
                });
                break;
            default:
                // Default operation
                await (0, _promises.setTimeout)(Math.random() * 100);
        }
    }
    /**
   * Calculate benchmark suite summary
   */ calculateSummary(results) {
        const totalDuration = results.reduce((sum, r)=>sum + r.duration, 0);
        const averageThroughput = results.reduce((sum, r)=>sum + r.throughput, 0) / results.length;
        const averageErrorRate = results.reduce((sum, r)=>sum + r.errorRate, 0) / results.length;
        const peakMemoryUsage = Math.max(...results.map((r)=>r.memoryUsage.heapUsed));
        const recommendations = [];
        // Generate recommendations based on results
        if (averageErrorRate > 5) {
            recommendations.push('High error rate detected. Review error handling and system stability.');
        }
        if (averageThroughput < 10) {
            recommendations.push('Low throughput detected. Consider optimizing critical paths and adding caching.');
        }
        if (peakMemoryUsage > 100 * 1024 * 1024) {
            recommendations.push('High memory usage detected. Review memory allocation and implement garbage collection optimization.');
        }
        const slowResults = results.filter((r)=>r.duration > 10000); // 10 seconds
        if (slowResults.length > 0) {
            recommendations.push(`Slow operations detected: ${slowResults.map((r)=>r.name).join(', ')}. Consider optimization.`);
        }
        return {
            totalDuration,
            averageThroughput,
            averageErrorRate,
            peakMemoryUsage,
            recommendations
        };
    }
    /**
   * Get current benchmark status
   */ getStatus() {
        return {
            isRunning: this.isRunning,
            currentSuite: this.currentSuite?.name,
            progress: this.currentSuite ? this.currentSuite.results.length / 7 * 100 : 0
        };
    }
    /**
   * Export benchmark results
   */ exportResults(suite) {
        return JSON.stringify(suite, null, 2);
    }
    constructor(){
        super(), _define_property(this, "analyticsEngine", void 0), _define_property(this, "reportGenerator", void 0), _define_property(this, "optimizationEngine", void 0), _define_property(this, "isRunning", false), _define_property(this, "currentSuite", null);
        this.analyticsEngine = _AnalyticsEngine.AnalyticsEngine.getInstance();
        this.reportGenerator = new _ReportGenerator.ReportGenerator();
        this.optimizationEngine = new _OptimizationEngine.OptimizationEngine();
    }
}
const performanceBenchmark = new PerformanceBenchmark();

//# sourceMappingURL=data:application/json;base64,