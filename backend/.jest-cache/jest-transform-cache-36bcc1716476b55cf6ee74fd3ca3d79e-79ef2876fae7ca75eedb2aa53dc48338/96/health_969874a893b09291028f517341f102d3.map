{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/health.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { db } from '../database/connection';\n\nconst router = Router();\n\n// Health check endpoint\nrouter.get('/', (req: Request, res: Response) => {\n  try {\n    // Check database connection\n    const dbCheck = db.prepare('SELECT 1').get();\n    \n    // Check Ollama connection (basic check)\n    const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n    \n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        database: dbCheck ? 'connected' : 'disconnected',\n        ollama: {\n          url: ollamaUrl,\n          status: 'configured' // Will be enhanced in Phase 3\n        }\n      },\n      environment: process.env.NODE_ENV || 'development'\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Database status endpoint\nrouter.get('/db', (req: Request, res: Response) => {\n  try {\n    const promptCardCount = db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number };\n    const testCaseCount = db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number };\n    \n    res.json({\n      status: 'connected',\n      stats: {\n        prompt_cards: promptCardCount.count,\n        test_cases: testCaseCount.count\n      },\n      database_path: process.env.DATABASE_PATH\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'error',\n      error: error instanceof Error ? error.message : 'Database connection failed'\n    });\n  }\n});\n\nexport { router as healthRoutes };"],"names":["healthRoutes","router","Router","get","req","res","dbCheck","db","prepare","ollamaUrl","process","env","OLLAMA_BASE_URL","json","status","timestamp","Date","toISOString","services","database","ollama","url","environment","NODE_ENV","error","Error","message","promptCardCount","testCaseCount","stats","prompt_cards","count","test_cases","database_path","DATABASE_PATH"],"mappings":";;;;+BAyDmBA;;;eAAVC;;;yBAzDiC;4BACvB;AAEnB,MAAMA,SAASC,IAAAA,eAAM;AAErB,wBAAwB;AACxBD,OAAOE,GAAG,CAAC,KAAK,CAACC,KAAcC;IAC7B,IAAI;QACF,4BAA4B;QAC5B,MAAMC,UAAUC,cAAE,CAACC,OAAO,CAAC,YAAYL,GAAG;QAE1C,wCAAwC;QACxC,MAAMM,YAAYC,QAAQC,GAAG,CAACC,eAAe,IAAI;QAEjDP,IAAIQ,IAAI,CAAC;YACPC,QAAQ;YACRC,WAAW,IAAIC,OAAOC,WAAW;YACjCC,UAAU;gBACRC,UAAUb,UAAU,cAAc;gBAClCc,QAAQ;oBACNC,KAAKZ;oBACLK,QAAQ,aAAa,8BAA8B;gBACrD;YACF;YACAQ,aAAaZ,QAAQC,GAAG,CAACY,QAAQ,IAAI;QACvC;IACF,EAAE,OAAOC,OAAO;QACdnB,IAAIS,MAAM,CAAC,KAAKD,IAAI,CAAC;YACnBC,QAAQ;YACRU,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;YAChDX,WAAW,IAAIC,OAAOC,WAAW;QACnC;IACF;AACF;AAEA,2BAA2B;AAC3BhB,OAAOE,GAAG,CAAC,OAAO,CAACC,KAAcC;IAC/B,IAAI;QACF,MAAMsB,kBAAkBpB,cAAE,CAACC,OAAO,CAAC,8CAA8CL,GAAG;QACpF,MAAMyB,gBAAgBrB,cAAE,CAACC,OAAO,CAAC,4CAA4CL,GAAG;QAEhFE,IAAIQ,IAAI,CAAC;YACPC,QAAQ;YACRe,OAAO;gBACLC,cAAcH,gBAAgBI,KAAK;gBACnCC,YAAYJ,cAAcG,KAAK;YACjC;YACAE,eAAevB,QAAQC,GAAG,CAACuB,aAAa;QAC1C;IACF,EAAE,OAAOV,OAAO;QACdnB,IAAIS,MAAM,CAAC,KAAKD,IAAI,CAAC;YACnBC,QAAQ;YACRU,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;QAClD;IACF;AACF"}