{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceBenchmark.ts"],"sourcesContent":["import { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { ReportGenerator } from '../reports/generators/ReportGenerator';\nimport { OptimizationEngine } from '../optimization/OptimizationEngine';\nimport { TestQueueManager } from '../testing/TestQueueManager';\nimport { performanceMonitor } from './PerformanceMonitor';\nimport { promisify } from 'util';\nimport { setTimeout } from 'timers/promises';\n\nexport interface BenchmarkResult {\n  name: string;\n  duration: number;\n  throughput: number;\n  errorRate: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  cpuUsage: NodeJS.CpuUsage;\n  iterations: number;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface BenchmarkSuite {\n  name: string;\n  results: BenchmarkResult[];\n  summary: {\n    totalDuration: number;\n    averageThroughput: number;\n    averageErrorRate: number;\n    peakMemoryUsage: number;\n    recommendations: string[];\n  };\n}\n\nexport interface LoadTestConfig {\n  concurrency: number;\n  duration: number;\n  rampUp: number;\n  rampDown: number;\n  target: string;\n  payload?: any;\n}\n\nexport interface LoadTestResult {\n  config: LoadTestConfig;\n  results: {\n    totalRequests: number;\n    successfulRequests: number;\n    failedRequests: number;\n    averageResponseTime: number;\n    p95ResponseTime: number;\n    p99ResponseTime: number;\n    throughput: number;\n    errorRate: number;\n    maxResponseTime: number;\n    minResponseTime: number;\n  };\n  timeline: Array<{\n    timestamp: number;\n    responseTime: number;\n    success: boolean;\n    concurrency: number;\n  }>;\n}\n\nexport class PerformanceBenchmark extends EventEmitter {\n  private analyticsEngine: AnalyticsEngine;\n  private reportGenerator: ReportGenerator;\n  private optimizationEngine: OptimizationEngine;\n  private isRunning: boolean = false;\n  private currentSuite: BenchmarkSuite | null = null;\n\n  constructor() {\n    super();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.reportGenerator = new ReportGenerator();\n    this.optimizationEngine = new OptimizationEngine();\n  }\n\n  /**\n   * Run a comprehensive performance benchmark suite\n   */\n  async runBenchmarkSuite(suiteName: string = 'Performance Benchmark'): Promise<BenchmarkSuite> {\n    if (this.isRunning) {\n      throw new Error('Benchmark suite is already running');\n    }\n\n    this.isRunning = true;\n    this.emit('suiteStarted', suiteName);\n\n    try {\n      const suite: BenchmarkSuite = {\n        name: suiteName,\n        results: [],\n        summary: {\n          totalDuration: 0,\n          averageThroughput: 0,\n          averageErrorRate: 0,\n          peakMemoryUsage: 0,\n          recommendations: []\n        }\n      };\n\n      this.currentSuite = suite;\n\n      // Run individual benchmarks\n      const benchmarks = [\n        () => this.benchmarkAnalyticsEngine(),\n        () => this.benchmarkReportGeneration(),\n        () => this.benchmarkOptimizationEngine(),\n        () => this.benchmarkDatabaseQueries(),\n        () => this.benchmarkCachePerformance(),\n        () => this.benchmarkMemoryUsage(),\n        () => this.benchmarkConcurrentOperations()\n      ];\n\n      for (const benchmark of benchmarks) {\n        try {\n          const result = await benchmark();\n          suite.results.push(result);\n          this.emit('benchmarkCompleted', result);\n        } catch (error) {\n          console.error(`Benchmark failed: ${error.message}`);\n          this.emit('benchmarkFailed', error);\n        }\n      }\n\n      // Calculate summary\n      suite.summary = this.calculateSummary(suite.results);\n      this.emit('suiteCompleted', suite);\n\n      return suite;\n    } finally {\n      this.isRunning = false;\n      this.currentSuite = null;\n    }\n  }\n\n  /**\n   * Benchmark analytics engine performance\n   */\n  async benchmarkAnalyticsEngine(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 100;\n    let errors = 0;\n\n    console.log('Benchmarking Analytics Engine...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await Promise.all([\n          this.analyticsEngine.calculateRealtimeMetrics(),\n          this.analyticsEngine.calculateHistoricalMetrics(),\n          this.analyticsEngine.calculateTrends('day', 30)\n        ]);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Analytics Engine',\n      duration,\n      throughput: (iterations * 3) / (duration / 1000), // operations per second\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        operationsPerIteration: 3,\n        cacheHitRate: this.analyticsEngine.getCacheStats?.()?.hitRate || 0\n      }\n    };\n  }\n\n  /**\n   * Benchmark report generation performance\n   */\n  async benchmarkReportGeneration(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 20;\n    let errors = 0;\n\n    console.log('Benchmarking Report Generation...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await this.reportGenerator.generateReport('test-report', {\n          startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date().toISOString()\n        });\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Report Generation',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        averageReportSize: 'calculated_dynamically',\n        cacheEfficiency: this.reportGenerator.getPerformanceStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark optimization engine performance\n   */\n  async benchmarkOptimizationEngine(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 10;\n    let errors = 0;\n\n    console.log('Benchmarking Optimization Engine...');\n\n    const testPrompt = 'Generate a comprehensive report about system performance with detailed metrics and recommendations.';\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await this.optimizationEngine.generateOptimizationSuggestions(testPrompt, {\n          successRate: 90,\n          responseTime: 1000,\n          qualityScore: 85\n        });\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Optimization Engine',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        cacheStats: this.optimizationEngine.getCacheStats?.() || {},\n        avgSuggestionsPerPrompt: 3.5\n      }\n    };\n  }\n\n  /**\n   * Benchmark database query performance\n   */\n  async benchmarkDatabaseQueries(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 500;\n    let errors = 0;\n\n    console.log('Benchmarking Database Queries...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Simulate various database operations\n        await Promise.all([\n          this.analyticsEngine.calculateRealtimeMetrics(),\n          this.analyticsEngine.calculateHistoricalMetrics()\n        ]);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Database Queries',\n      duration,\n      throughput: (iterations * 2) / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        queriesPerIteration: 2,\n        queryStats: this.analyticsEngine.getQueryPerformanceStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark cache performance\n   */\n  async benchmarkCachePerformance(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 1000;\n    let errors = 0;\n\n    console.log('Benchmarking Cache Performance...');\n\n    // Warm up cache\n    await this.analyticsEngine.calculateRealtimeMetrics();\n    await this.analyticsEngine.calculateHistoricalMetrics();\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Test cache hit performance\n        await this.analyticsEngine.calculateRealtimeMetrics();\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Cache Performance',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        cacheStats: this.analyticsEngine.getCacheStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark memory usage patterns\n   */\n  async benchmarkMemoryUsage(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 100;\n    let errors = 0;\n\n    console.log('Benchmarking Memory Usage...');\n\n    const memorySnapshots = [];\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Perform memory-intensive operations\n        await Promise.all([\n          this.analyticsEngine.calculateTrends('day', 100),\n          this.reportGenerator.generateReport('memory-test', {})\n        ]);\n        \n        // Take memory snapshot\n        memorySnapshots.push(process.memoryUsage());\n        \n        // Force garbage collection if available\n        if (global.gc) {\n          global.gc();\n        }\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    // Calculate memory growth\n    const memoryGrowth = memorySnapshots.length > 1 ? \n      memorySnapshots[memorySnapshots.length - 1].heapUsed - memorySnapshots[0].heapUsed : 0;\n\n    return {\n      name: 'Memory Usage',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        memoryGrowth,\n        memoryLeakDetected: memoryGrowth > 50 * 1024 * 1024, // 50MB threshold\n        gcAvailable: typeof global.gc !== 'undefined'\n      }\n    };\n  }\n\n  /**\n   * Benchmark concurrent operations\n   */\n  async benchmarkConcurrentOperations(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 50;\n    const concurrency = 10;\n    let errors = 0;\n\n    console.log('Benchmarking Concurrent Operations...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Create concurrent operations\n        const operations = Array.from({ length: concurrency }, () => \n          Promise.all([\n            this.analyticsEngine.calculateRealtimeMetrics(),\n            this.analyticsEngine.calculateHistoricalMetrics()\n          ])\n        );\n        \n        await Promise.all(operations);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Concurrent Operations',\n      duration,\n      throughput: (iterations * concurrency * 2) / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        concurrencyLevel: concurrency,\n        operationsPerIteration: concurrency * 2\n      }\n    };\n  }\n\n  /**\n   * Run load test simulation\n   */\n  async runLoadTest(config: LoadTestConfig): Promise<LoadTestResult> {\n    console.log(`Starting load test: ${config.target}`);\n    \n    const results: LoadTestResult = {\n      config,\n      results: {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        averageResponseTime: 0,\n        p95ResponseTime: 0,\n        p99ResponseTime: 0,\n        throughput: 0,\n        errorRate: 0,\n        maxResponseTime: 0,\n        minResponseTime: Infinity\n      },\n      timeline: []\n    };\n\n    const startTime = Date.now();\n    const responseTimes: number[] = [];\n    \n    // Simulate ramp-up\n    for (let concurrency = 1; concurrency <= config.concurrency; concurrency++) {\n      const operations = Array.from({ length: concurrency }, async () => {\n        const operationStart = performance.now();\n        let success = true;\n        \n        try {\n          // Simulate operation based on target\n          await this.simulateOperation(config.target, config.payload);\n        } catch (error) {\n          success = false;\n        }\n        \n        const responseTime = performance.now() - operationStart;\n        responseTimes.push(responseTime);\n        \n        results.timeline.push({\n          timestamp: Date.now(),\n          responseTime,\n          success,\n          concurrency\n        });\n        \n        if (success) {\n          results.results.successfulRequests++;\n        } else {\n          results.results.failedRequests++;\n        }\n        \n        results.results.totalRequests++;\n      });\n      \n      await Promise.all(operations);\n      \n      // Wait for ramp-up interval\n      await setTimeout(config.rampUp / config.concurrency);\n    }\n    \n    // Calculate results\n    const totalTime = (Date.now() - startTime) / 1000;\n    results.results.averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\n    results.results.throughput = results.results.totalRequests / totalTime;\n    results.results.errorRate = (results.results.failedRequests / results.results.totalRequests) * 100;\n    \n    // Calculate percentiles\n    const sortedTimes = responseTimes.sort((a, b) => a - b);\n    results.results.p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];\n    results.results.p99ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.99)];\n    results.results.maxResponseTime = Math.max(...responseTimes);\n    results.results.minResponseTime = Math.min(...responseTimes);\n    \n    return results;\n  }\n\n  /**\n   * Simulate operation for load testing\n   */\n  private async simulateOperation(target: string, payload?: any): Promise<void> {\n    switch (target) {\n      case 'analytics':\n        await this.analyticsEngine.calculateRealtimeMetrics();\n        break;\n      case 'reports':\n        await this.reportGenerator.generateReport('load-test', {});\n        break;\n      case 'optimization':\n        await this.optimizationEngine.generateOptimizationSuggestions(\n          'Test prompt for load testing performance optimization',\n          { successRate: 85, responseTime: 1000 }\n        );\n        break;\n      default:\n        // Default operation\n        await setTimeout(Math.random() * 100);\n    }\n  }\n\n  /**\n   * Calculate benchmark suite summary\n   */\n  private calculateSummary(results: BenchmarkResult[]): BenchmarkSuite['summary'] {\n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    const averageThroughput = results.reduce((sum, r) => sum + r.throughput, 0) / results.length;\n    const averageErrorRate = results.reduce((sum, r) => sum + r.errorRate, 0) / results.length;\n    const peakMemoryUsage = Math.max(...results.map(r => r.memoryUsage.heapUsed));\n    \n    const recommendations = [];\n    \n    // Generate recommendations based on results\n    if (averageErrorRate > 5) {\n      recommendations.push('High error rate detected. Review error handling and system stability.');\n    }\n    \n    if (averageThroughput < 10) {\n      recommendations.push('Low throughput detected. Consider optimizing critical paths and adding caching.');\n    }\n    \n    if (peakMemoryUsage > 100 * 1024 * 1024) { // 100MB\n      recommendations.push('High memory usage detected. Review memory allocation and implement garbage collection optimization.');\n    }\n    \n    const slowResults = results.filter(r => r.duration > 10000); // 10 seconds\n    if (slowResults.length > 0) {\n      recommendations.push(`Slow operations detected: ${slowResults.map(r => r.name).join(', ')}. Consider optimization.`);\n    }\n    \n    return {\n      totalDuration,\n      averageThroughput,\n      averageErrorRate,\n      peakMemoryUsage,\n      recommendations\n    };\n  }\n\n  /**\n   * Get current benchmark status\n   */\n  public getStatus(): {\n    isRunning: boolean;\n    currentSuite?: string;\n    progress?: number;\n  } {\n    return {\n      isRunning: this.isRunning,\n      currentSuite: this.currentSuite?.name,\n      progress: this.currentSuite ? (this.currentSuite.results.length / 7) * 100 : 0\n    };\n  }\n\n  /**\n   * Export benchmark results\n   */\n  public exportResults(suite: BenchmarkSuite): string {\n    return JSON.stringify(suite, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const performanceBenchmark = new PerformanceBenchmark();"],"names":["PerformanceBenchmark","performanceBenchmark","EventEmitter","runBenchmarkSuite","suiteName","isRunning","Error","emit","suite","name","results","summary","totalDuration","averageThroughput","averageErrorRate","peakMemoryUsage","recommendations","currentSuite","benchmarks","benchmarkAnalyticsEngine","benchmarkReportGeneration","benchmarkOptimizationEngine","benchmarkDatabaseQueries","benchmarkCachePerformance","benchmarkMemoryUsage","benchmarkConcurrentOperations","benchmark","result","push","error","console","message","calculateSummary","startTime","performance","now","startMemory","process","memoryUsage","startCpu","cpuUsage","iterations","errors","log","i","Promise","all","analyticsEngine","calculateRealtimeMetrics","calculateHistoricalMetrics","calculateTrends","duration","endMemory","endCpu","throughput","errorRate","rss","heapTotal","heapUsed","external","arrayBuffers","timestamp","Date","metadata","operationsPerIteration","cacheHitRate","getCacheStats","hitRate","reportGenerator","generateReport","startDate","toISOString","endDate","averageReportSize","cacheEfficiency","getPerformanceStats","testPrompt","optimizationEngine","generateOptimizationSuggestions","successRate","responseTime","qualityScore","cacheStats","avgSuggestionsPerPrompt","queriesPerIteration","queryStats","getQueryPerformanceStats","memorySnapshots","global","gc","memoryGrowth","length","memoryLeakDetected","gcAvailable","concurrency","operations","Array","from","concurrencyLevel","runLoadTest","config","target","totalRequests","successfulRequests","failedRequests","averageResponseTime","p95ResponseTime","p99ResponseTime","maxResponseTime","minResponseTime","Infinity","timeline","responseTimes","operationStart","success","simulateOperation","payload","setTimeout","rampUp","totalTime","reduce","a","b","sortedTimes","sort","Math","floor","max","min","random","sum","r","map","slowResults","filter","join","getStatus","progress","exportResults","JSON","stringify","AnalyticsEngine","getInstance","ReportGenerator","OptimizationEngine"],"mappings":"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"}