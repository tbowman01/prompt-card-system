{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/optimization.ts"],"sourcesContent":["import express from 'express';\nimport { Request, Response } from 'express';\nimport { promptAnalyzer } from '../services/optimization/PromptAnalyzer';\nimport { optimizationEngine } from '../services/optimization/OptimizationEngine';\nimport { securityAnalyzer } from '../services/optimization/SecurityAnalyzer';\n\nconst router = express.Router();\n\n/**\n * POST /api/optimization/analyze\n * Analyze prompt effectiveness and generate insights\n */\nrouter.post('/analyze', async (req: Request, res: Response) => {\n  try {\n    const { promptId, promptText, timeRange } = req.body;\n    \n    if (!promptId || !promptText) {\n      return res.status(400).json({\n        error: 'Missing required fields: promptId, promptText'\n      });\n    }\n    \n    const analysis = await promptAnalyzer.analyzePrompt(\n      promptId,\n      promptText,\n      timeRange\n    );\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Prompt analysis error:', error);\n    res.status(500).json({\n      error: 'Prompt analysis failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/compare\n * Compare two prompts and determine which performs better\n */\nrouter.post('/compare', async (req: Request, res: Response) => {\n  try {\n    const { promptA, promptB, testCases, model } = req.body;\n    \n    if (!promptA || !promptB) {\n      return res.status(400).json({\n        error: 'Missing required fields: promptA, promptB'\n      });\n    }\n    \n    if (!testCases || !Array.isArray(testCases) || testCases.length === 0) {\n      return res.status(400).json({\n        error: 'testCases must be a non-empty array'\n      });\n    }\n    \n    const comparison = await promptAnalyzer.comparePrompts(\n      promptA,\n      promptB,\n      testCases,\n      model\n    );\n    \n    res.json({\n      success: true,\n      data: comparison\n    });\n  } catch (error) {\n    console.error('Prompt comparison error:', error);\n    res.status(500).json({\n      error: 'Prompt comparison failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/suggestions/:promptId\n * Get AI-powered optimization suggestions for a prompt\n */\nrouter.get('/suggestions/:promptId', async (req: Request, res: Response) => {\n  try {\n    const { promptId } = req.params;\n    const { originalPrompt, targetMetrics, constraints } = req.query;\n    \n    if (!originalPrompt) {\n      return res.status(400).json({\n        error: 'Missing required query parameter: originalPrompt'\n      });\n    }\n    \n    const parsedTargetMetrics = targetMetrics ? JSON.parse(targetMetrics as string) : {};\n    const parsedConstraints = constraints ? JSON.parse(constraints as string) : {};\n    \n    const suggestions = await optimizationEngine.generateOptimizationSuggestions(\n      originalPrompt as string,\n      parsedTargetMetrics,\n      parsedConstraints\n    );\n    \n    res.json({\n      success: true,\n      data: suggestions\n    });\n  } catch (error) {\n    console.error('Optimization suggestions error:', error);\n    res.status(500).json({\n      error: 'Failed to generate optimization suggestions',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/suggestions\n * Generate optimization suggestions with POST data\n */\nrouter.post('/suggestions', async (req: Request, res: Response) => {\n  try {\n    const { originalPrompt, targetMetrics, constraints } = req.body;\n    \n    if (!originalPrompt) {\n      return res.status(400).json({\n        error: 'Missing required field: originalPrompt'\n      });\n    }\n    \n    const suggestions = await optimizationEngine.generateOptimizationSuggestions(\n      originalPrompt,\n      targetMetrics || {},\n      constraints || {}\n    );\n    \n    res.json({\n      success: true,\n      data: suggestions\n    });\n  } catch (error) {\n    console.error('Optimization suggestions error:', error);\n    res.status(500).json({\n      error: 'Failed to generate optimization suggestions',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/ab-test\n * Create and start an A/B test for prompt variations\n */\nrouter.post('/ab-test', async (req: Request, res: Response) => {\n  try {\n    const testConfig = req.body;\n    \n    if (!testConfig.name || !testConfig.variants || !Array.isArray(testConfig.variants)) {\n      return res.status(400).json({\n        error: 'Missing required fields: name, variants (array)'\n      });\n    }\n    \n    if (testConfig.variants.length < 2) {\n      return res.status(400).json({\n        error: 'At least 2 variants are required for A/B testing'\n      });\n    }\n    \n    const abTest = await optimizationEngine.createABTest(testConfig);\n    \n    res.json({\n      success: true,\n      data: abTest\n    });\n  } catch (error) {\n    console.error('A/B test creation error:', error);\n    res.status(500).json({\n      error: 'Failed to create A/B test',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/ab-test/:testId/start\n * Start an A/B test\n */\nrouter.post('/ab-test/:testId/start', async (req: Request, res: Response) => {\n  try {\n    const { testId } = req.params;\n    \n    await optimizationEngine.startABTest(testId);\n    \n    res.json({\n      success: true,\n      message: `A/B test ${testId} started successfully`\n    });\n  } catch (error) {\n    console.error('A/B test start error:', error);\n    res.status(500).json({\n      error: 'Failed to start A/B test',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/ab-test/:testId/result\n * Record A/B test execution result\n */\nrouter.post('/ab-test/:testId/result', async (req: Request, res: Response) => {\n  try {\n    const { testId } = req.params;\n    const { variantId, result } = req.body;\n    \n    if (!variantId || !result) {\n      return res.status(400).json({\n        error: 'Missing required fields: variantId, result'\n      });\n    }\n    \n    await optimizationEngine.recordABTestResult(testId, variantId, result);\n    \n    res.json({\n      success: true,\n      message: 'A/B test result recorded successfully'\n    });\n  } catch (error) {\n    console.error('A/B test result recording error:', error);\n    res.status(500).json({\n      error: 'Failed to record A/B test result',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/ab-test/:testId/results\n * Get A/B test results and analysis\n */\nrouter.get('/ab-test/:testId/results', async (req: Request, res: Response) => {\n  try {\n    const { testId } = req.params;\n    \n    const results = await optimizationEngine.analyzeABTestResults(testId);\n    \n    res.json({\n      success: true,\n      data: results\n    });\n  } catch (error) {\n    console.error('A/B test results error:', error);\n    res.status(500).json({\n      error: 'Failed to analyze A/B test results',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/tune\n * Start automated prompt tuning\n */\nrouter.post('/tune', async (req: Request, res: Response) => {\n  try {\n    const tuningConfig = req.body;\n    \n    if (!tuningConfig.originalPrompt || !tuningConfig.objectives) {\n      return res.status(400).json({\n        error: 'Missing required fields: originalPrompt, objectives'\n      });\n    }\n    \n    const tuningProcess = await optimizationEngine.startPromptTuning(tuningConfig);\n    \n    res.json({\n      success: true,\n      data: tuningProcess\n    });\n  } catch (error) {\n    console.error('Prompt tuning error:', error);\n    res.status(500).json({\n      error: 'Failed to start prompt tuning',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/tune/:tuningId/progress\n * Get prompt tuning progress\n */\nrouter.get('/tune/:tuningId/progress', async (req: Request, res: Response) => {\n  try {\n    const { tuningId } = req.params;\n    \n    const progress = await optimizationEngine.getTuningProgress(tuningId);\n    \n    res.json({\n      success: true,\n      data: progress\n    });\n  } catch (error) {\n    console.error('Tuning progress error:', error);\n    res.status(500).json({\n      error: 'Failed to get tuning progress',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/validate-security\n * Validate prompt security and detect threats\n */\nrouter.post('/validate-security', async (req: Request, res: Response) => {\n  try {\n    const { promptId, prompt, context } = req.body;\n    \n    if (!promptId || !prompt) {\n      return res.status(400).json({\n        error: 'Missing required fields: promptId, prompt'\n      });\n    }\n    \n    const securityAnalysis = await securityAnalyzer.analyzePromptSecurity(\n      promptId,\n      prompt,\n      context || {}\n    );\n    \n    res.json({\n      success: true,\n      data: securityAnalysis\n    });\n  } catch (error) {\n    console.error('Security validation error:', error);\n    res.status(500).json({\n      error: 'Security validation failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/detect-injection\n * Detect prompt injection attempts\n */\nrouter.post('/detect-injection', async (req: Request, res: Response) => {\n  try {\n    const { prompt } = req.body;\n    \n    if (!prompt) {\n      return res.status(400).json({\n        error: 'Missing required field: prompt'\n      });\n    }\n    \n    const injectionResult = await securityAnalyzer.detectPromptInjection(prompt);\n    \n    res.json({\n      success: true,\n      data: injectionResult\n    });\n  } catch (error) {\n    console.error('Injection detection error:', error);\n    res.status(500).json({\n      error: 'Injection detection failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/test-jailbreak\n * Test prompt resistance to jailbreak attempts\n */\nrouter.post('/test-jailbreak', async (req: Request, res: Response) => {\n  try {\n    const { prompt, model } = req.body;\n    \n    if (!prompt) {\n      return res.status(400).json({\n        error: 'Missing required field: prompt'\n      });\n    }\n    \n    const jailbreakTests = await securityAnalyzer.testJailbreakResistance(\n      prompt,\n      model || 'llama3'\n    );\n    \n    res.json({\n      success: true,\n      data: jailbreakTests\n    });\n  } catch (error) {\n    console.error('Jailbreak testing error:', error);\n    res.status(500).json({\n      error: 'Jailbreak testing failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/analyze-safety\n * Analyze content safety\n */\nrouter.post('/analyze-safety', async (req: Request, res: Response) => {\n  try {\n    const { content } = req.body;\n    \n    if (!content) {\n      return res.status(400).json({\n        error: 'Missing required field: content'\n      });\n    }\n    \n    const safetyAnalysis = await securityAnalyzer.analyzeContentSafety(content);\n    \n    res.json({\n      success: true,\n      data: safetyAnalysis\n    });\n  } catch (error) {\n    console.error('Safety analysis error:', error);\n    res.status(500).json({\n      error: 'Safety analysis failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/validate-compliance\n * Validate prompt compliance with regulations\n */\nrouter.post('/validate-compliance', async (req: Request, res: Response) => {\n  try {\n    const { prompt, regulations } = req.body;\n    \n    if (!prompt || !regulations || !Array.isArray(regulations)) {\n      return res.status(400).json({\n        error: 'Missing required fields: prompt, regulations (array)'\n      });\n    }\n    \n    const complianceResults = await securityAnalyzer.validateCompliance(\n      prompt,\n      regulations\n    );\n    \n    res.json({\n      success: true,\n      data: complianceResults\n    });\n  } catch (error) {\n    console.error('Compliance validation error:', error);\n    res.status(500).json({\n      error: 'Compliance validation failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/generate-secure\n * Generate security-hardened prompt\n */\nrouter.post('/generate-secure', async (req: Request, res: Response) => {\n  try {\n    const { originalPrompt, securityLevel } = req.body;\n    \n    if (!originalPrompt) {\n      return res.status(400).json({\n        error: 'Missing required field: originalPrompt'\n      });\n    }\n    \n    const securePrompt = await securityAnalyzer.generateSecurePrompt(\n      originalPrompt,\n      securityLevel || 'enhanced'\n    );\n    \n    res.json({\n      success: true,\n      data: securePrompt\n    });\n  } catch (error) {\n    console.error('Secure prompt generation error:', error);\n    res.status(500).json({\n      error: 'Secure prompt generation failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/evolution/:promptId\n * Get prompt evolution history\n */\nrouter.get('/evolution/:promptId', async (req: Request, res: Response) => {\n  try {\n    const { promptId } = req.params;\n    \n    const evolution = await promptAnalyzer.getPromptEvolution(promptId);\n    \n    res.json({\n      success: true,\n      data: evolution\n    });\n  } catch (error) {\n    console.error('Prompt evolution error:', error);\n    res.status(500).json({\n      error: 'Failed to get prompt evolution',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/health\n * Health check for optimization services\n */\nrouter.get('/health', (req: Request, res: Response) => {\n  res.json({\n    success: true,\n    message: 'AI-powered prompt optimization services are running',\n    services: {\n      promptAnalyzer: 'active',\n      optimizationEngine: 'active',\n      securityAnalyzer: 'active'\n    },\n    timestamp: new Date().toISOString()\n  });\n});\n\nexport default router;"],"names":["router","express","Router","post","req","res","promptId","promptText","timeRange","body","status","json","error","analysis","promptAnalyzer","analyzePrompt","success","data","console","details","Error","message","promptA","promptB","testCases","model","Array","isArray","length","comparison","comparePrompts","get","params","originalPrompt","targetMetrics","constraints","query","parsedTargetMetrics","JSON","parse","parsedConstraints","suggestions","optimizationEngine","generateOptimizationSuggestions","testConfig","name","variants","abTest","createABTest","testId","startABTest","variantId","result","recordABTestResult","results","analyzeABTestResults","tuningConfig","objectives","tuningProcess","startPromptTuning","tuningId","progress","getTuningProgress","prompt","context","securityAnalysis","securityAnalyzer","analyzePromptSecurity","injectionResult","detectPromptInjection","jailbreakTests","testJailbreakResistance","content","safetyAnalysis","analyzeContentSafety","regulations","complianceResults","validateCompliance","securityLevel","securePrompt","generateSecurePrompt","evolution","getPromptEvolution","services","timestamp","Date","toISOString"],"mappings":"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"}