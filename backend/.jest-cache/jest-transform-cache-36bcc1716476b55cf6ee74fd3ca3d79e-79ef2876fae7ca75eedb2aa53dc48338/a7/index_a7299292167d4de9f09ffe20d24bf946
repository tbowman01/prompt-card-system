a342ad2457fb21b41bd68620be289521
/**
 * AI-Powered Prompt Optimization Services
 * 
 * This module provides comprehensive prompt optimization capabilities:
 * - Prompt effectiveness analysis
 * - AI-powered optimization suggestions
 * - A/B testing automation
 * - Security threat detection
 * - Compliance validation
 * - Automated prompt tuning
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get OptimizationEngine () {
        return _OptimizationEngine.OptimizationEngine;
    },
    get PromptAnalyzer () {
        return _PromptAnalyzer.PromptAnalyzer;
    },
    get SecurityAnalyzer () {
        return _SecurityAnalyzer.SecurityAnalyzer;
    },
    get checkOptimizationServicesHealth () {
        return checkOptimizationServicesHealth;
    },
    get getOptimizationCapabilities () {
        return getOptimizationCapabilities;
    },
    get initializeOptimizationServices () {
        return initializeOptimizationServices;
    },
    get optimizationEngine () {
        return _OptimizationEngine.optimizationEngine;
    },
    get promptAnalyzer () {
        return _PromptAnalyzer.promptAnalyzer;
    },
    get securityAnalyzer () {
        return _SecurityAnalyzer.securityAnalyzer;
    }
});
const _PromptAnalyzer = require("./PromptAnalyzer");
const _OptimizationEngine = require("./OptimizationEngine");
const _SecurityAnalyzer = require("./SecurityAnalyzer");
async function initializeOptimizationServices() {
    console.log('🔧 Initializing AI-Powered Prompt Optimization Services...');
    try {
        // Services are initialized as singletons when imported
        console.log('✅ Prompt Analyzer initialized');
        console.log('✅ Optimization Engine initialized');
        console.log('✅ Security Analyzer initialized');
        console.log('🚀 AI-Powered Prompt Optimization Services ready!');
    } catch (error) {
        console.error('❌ Failed to initialize optimization services:', error);
        throw error;
    }
}
function checkOptimizationServicesHealth() {
    const services = {
        promptAnalyzer: 'active',
        optimizationEngine: 'active',
        securityAnalyzer: 'active'
    };
    const allHealthy = Object.values(services).every((status)=>status === 'active');
    return {
        status: allHealthy ? 'healthy' : 'unhealthy',
        services,
        timestamp: new Date().toISOString()
    };
}
function getOptimizationCapabilities() {
    return {
        promptAnalysis: [
            'Effectiveness scoring',
            'Pattern recognition',
            'Trend analysis',
            'Performance metrics',
            'Comparison analysis'
        ],
        optimization: [
            'AI-powered suggestions',
            'Structure optimization',
            'Clarity improvements',
            'Specificity enhancements',
            'Context optimization'
        ],
        security: [
            'Prompt injection detection',
            'Jailbreak resistance testing',
            'Content safety analysis',
            'Compliance validation',
            'Threat assessment'
        ],
        abTesting: [
            'Multi-variant testing',
            'Statistical analysis',
            'Performance comparison',
            'Winner determination',
            'Confidence scoring'
        ],
        tuning: [
            'Automated optimization',
            'Iterative improvement',
            'Convergence analysis',
            'Performance tracking',
            'Best prompt selection'
        ]
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy9zZXJ2aWNlcy9vcHRpbWl6YXRpb24vaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBSS1Qb3dlcmVkIFByb21wdCBPcHRpbWl6YXRpb24gU2VydmljZXNcbiAqIFxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgY29tcHJlaGVuc2l2ZSBwcm9tcHQgb3B0aW1pemF0aW9uIGNhcGFiaWxpdGllczpcbiAqIC0gUHJvbXB0IGVmZmVjdGl2ZW5lc3MgYW5hbHlzaXNcbiAqIC0gQUktcG93ZXJlZCBvcHRpbWl6YXRpb24gc3VnZ2VzdGlvbnNcbiAqIC0gQS9CIHRlc3RpbmcgYXV0b21hdGlvblxuICogLSBTZWN1cml0eSB0aHJlYXQgZGV0ZWN0aW9uXG4gKiAtIENvbXBsaWFuY2UgdmFsaWRhdGlvblxuICogLSBBdXRvbWF0ZWQgcHJvbXB0IHR1bmluZ1xuICovXG5cbmV4cG9ydCB7IHByb21wdEFuYWx5emVyLCBQcm9tcHRBbmFseXplciB9IGZyb20gJy4vUHJvbXB0QW5hbHl6ZXInO1xuZXhwb3J0IHsgb3B0aW1pemF0aW9uRW5naW5lLCBPcHRpbWl6YXRpb25FbmdpbmUgfSBmcm9tICcuL09wdGltaXphdGlvbkVuZ2luZSc7XG5leHBvcnQgeyBzZWN1cml0eUFuYWx5emVyLCBTZWN1cml0eUFuYWx5emVyIH0gZnJvbSAnLi9TZWN1cml0eUFuYWx5emVyJztcblxuLy8gVHlwZXMgZXhwb3J0c1xuZXhwb3J0IHR5cGUge1xuICBQcm9tcHRBbmFseXNpc1Jlc3VsdCxcbiAgUHJvbXB0Q29tcGFyaXNvblJlc3VsdFxufSBmcm9tICcuL1Byb21wdEFuYWx5emVyJztcblxuZXhwb3J0IHR5cGUge1xuICBPcHRpbWl6YXRpb25TdWdnZXN0aW9uLFxuICBBQlRlc3RDb25maWd1cmF0aW9uLFxuICBBQlRlc3RSZXN1bHQsXG4gIFByb21wdFR1bmluZ0NvbmZpZ3VyYXRpb24sXG4gIFByb21wdFR1bmluZ1Jlc3VsdFxufSBmcm9tICcuL09wdGltaXphdGlvbkVuZ2luZSc7XG5cbmV4cG9ydCB0eXBlIHtcbiAgU2VjdXJpdHlUaHJlYXQsXG4gIFNlY3VyaXR5QW5hbHlzaXNSZXN1bHQsXG4gIEphaWxicmVha0F0dGVtcHQsXG4gIENvbnRlbnRTYWZldHlSZXN1bHRcbn0gZnJvbSAnLi9TZWN1cml0eUFuYWx5emVyJztcblxuLyoqXG4gKiBJbml0aWFsaXplIGFsbCBvcHRpbWl6YXRpb24gc2VydmljZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVPcHRpbWl6YXRpb25TZXJ2aWNlcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc29sZS5sb2coJ/CflKcgSW5pdGlhbGl6aW5nIEFJLVBvd2VyZWQgUHJvbXB0IE9wdGltaXphdGlvbiBTZXJ2aWNlcy4uLicpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBTZXJ2aWNlcyBhcmUgaW5pdGlhbGl6ZWQgYXMgc2luZ2xldG9ucyB3aGVuIGltcG9ydGVkXG4gICAgY29uc29sZS5sb2coJ+KchSBQcm9tcHQgQW5hbHl6ZXIgaW5pdGlhbGl6ZWQnKTtcbiAgICBjb25zb2xlLmxvZygn4pyFIE9wdGltaXphdGlvbiBFbmdpbmUgaW5pdGlhbGl6ZWQnKTtcbiAgICBjb25zb2xlLmxvZygn4pyFIFNlY3VyaXR5IEFuYWx5emVyIGluaXRpYWxpemVkJyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/CfmoAgQUktUG93ZXJlZCBQcm9tcHQgT3B0aW1pemF0aW9uIFNlcnZpY2VzIHJlYWR5IScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBvcHRpbWl6YXRpb24gc2VydmljZXM6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8qKlxuICogU2VydmljZSBoZWFsdGggY2hlY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrT3B0aW1pemF0aW9uU2VydmljZXNIZWFsdGgoKToge1xuICBzdGF0dXM6ICdoZWFsdGh5JyB8ICd1bmhlYWx0aHknO1xuICBzZXJ2aWNlczogUmVjb3JkPHN0cmluZywgJ2FjdGl2ZScgfCAnaW5hY3RpdmUnIHwgJ2Vycm9yJz47XG4gIHRpbWVzdGFtcDogc3RyaW5nO1xufSB7XG4gIGNvbnN0IHNlcnZpY2VzID0ge1xuICAgIHByb21wdEFuYWx5emVyOiAnYWN0aXZlJyBhcyBjb25zdCxcbiAgICBvcHRpbWl6YXRpb25FbmdpbmU6ICdhY3RpdmUnIGFzIGNvbnN0LFxuICAgIHNlY3VyaXR5QW5hbHl6ZXI6ICdhY3RpdmUnIGFzIGNvbnN0XG4gIH07XG4gIFxuICBjb25zdCBhbGxIZWFsdGh5ID0gT2JqZWN0LnZhbHVlcyhzZXJ2aWNlcykuZXZlcnkoc3RhdHVzID0+IHN0YXR1cyA9PT0gJ2FjdGl2ZScpO1xuICBcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXM6IGFsbEhlYWx0aHkgPyAnaGVhbHRoeScgOiAndW5oZWFsdGh5JyxcbiAgICBzZXJ2aWNlcyxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICB9O1xufVxuXG4vKipcbiAqIEdldCBvcHRpbWl6YXRpb24gc2VydmljZXMgY2FwYWJpbGl0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHRpbWl6YXRpb25DYXBhYmlsaXRpZXMoKToge1xuICBwcm9tcHRBbmFseXNpczogc3RyaW5nW107XG4gIG9wdGltaXphdGlvbjogc3RyaW5nW107XG4gIHNlY3VyaXR5OiBzdHJpbmdbXTtcbiAgYWJUZXN0aW5nOiBzdHJpbmdbXTtcbiAgdHVuaW5nOiBzdHJpbmdbXTtcbn0ge1xuICByZXR1cm4ge1xuICAgIHByb21wdEFuYWx5c2lzOiBbXG4gICAgICAnRWZmZWN0aXZlbmVzcyBzY29yaW5nJyxcbiAgICAgICdQYXR0ZXJuIHJlY29nbml0aW9uJyxcbiAgICAgICdUcmVuZCBhbmFseXNpcycsXG4gICAgICAnUGVyZm9ybWFuY2UgbWV0cmljcycsXG4gICAgICAnQ29tcGFyaXNvbiBhbmFseXNpcydcbiAgICBdLFxuICAgIG9wdGltaXphdGlvbjogW1xuICAgICAgJ0FJLXBvd2VyZWQgc3VnZ2VzdGlvbnMnLFxuICAgICAgJ1N0cnVjdHVyZSBvcHRpbWl6YXRpb24nLFxuICAgICAgJ0NsYXJpdHkgaW1wcm92ZW1lbnRzJyxcbiAgICAgICdTcGVjaWZpY2l0eSBlbmhhbmNlbWVudHMnLFxuICAgICAgJ0NvbnRleHQgb3B0aW1pemF0aW9uJ1xuICAgIF0sXG4gICAgc2VjdXJpdHk6IFtcbiAgICAgICdQcm9tcHQgaW5qZWN0aW9uIGRldGVjdGlvbicsXG4gICAgICAnSmFpbGJyZWFrIHJlc2lzdGFuY2UgdGVzdGluZycsXG4gICAgICAnQ29udGVudCBzYWZldHkgYW5hbHlzaXMnLFxuICAgICAgJ0NvbXBsaWFuY2UgdmFsaWRhdGlvbicsXG4gICAgICAnVGhyZWF0IGFzc2Vzc21lbnQnXG4gICAgXSxcbiAgICBhYlRlc3Rpbmc6IFtcbiAgICAgICdNdWx0aS12YXJpYW50IHRlc3RpbmcnLFxuICAgICAgJ1N0YXRpc3RpY2FsIGFuYWx5c2lzJyxcbiAgICAgICdQZXJmb3JtYW5jZSBjb21wYXJpc29uJyxcbiAgICAgICdXaW5uZXIgZGV0ZXJtaW5hdGlvbicsXG4gICAgICAnQ29uZmlkZW5jZSBzY29yaW5nJ1xuICAgIF0sXG4gICAgdHVuaW5nOiBbXG4gICAgICAnQXV0b21hdGVkIG9wdGltaXphdGlvbicsXG4gICAgICAnSXRlcmF0aXZlIGltcHJvdmVtZW50JyxcbiAgICAgICdDb252ZXJnZW5jZSBhbmFseXNpcycsXG4gICAgICAnUGVyZm9ybWFuY2UgdHJhY2tpbmcnLFxuICAgICAgJ0Jlc3QgcHJvbXB0IHNlbGVjdGlvbidcbiAgICBdXG4gIH07XG59Il0sIm5hbWVzIjpbIk9wdGltaXphdGlvbkVuZ2luZSIsIlByb21wdEFuYWx5emVyIiwiU2VjdXJpdHlBbmFseXplciIsImNoZWNrT3B0aW1pemF0aW9uU2VydmljZXNIZWFsdGgiLCJnZXRPcHRpbWl6YXRpb25DYXBhYmlsaXRpZXMiLCJpbml0aWFsaXplT3B0aW1pemF0aW9uU2VydmljZXMiLCJvcHRpbWl6YXRpb25FbmdpbmUiLCJwcm9tcHRBbmFseXplciIsInNlY3VyaXR5QW5hbHl6ZXIiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJzZXJ2aWNlcyIsImFsbEhlYWx0aHkiLCJPYmplY3QiLCJ2YWx1ZXMiLCJldmVyeSIsInN0YXR1cyIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInByb21wdEFuYWx5c2lzIiwib3B0aW1pemF0aW9uIiwic2VjdXJpdHkiLCJhYlRlc3RpbmciLCJ0dW5pbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0NBVUM7Ozs7Ozs7Ozs7O1FBRzRCQTtlQUFBQSxzQ0FBa0I7O1FBRHRCQztlQUFBQSw4QkFBYzs7UUFFWkM7ZUFBQUEsa0NBQWdCOztRQTZDM0JDO2VBQUFBOztRQXVCQUM7ZUFBQUE7O1FBMUNNQztlQUFBQTs7UUEzQmJDO2VBQUFBLHNDQUFrQjs7UUFEbEJDO2VBQUFBLDhCQUFjOztRQUVkQztlQUFBQSxrQ0FBZ0I7OztnQ0FGc0I7b0NBQ1E7a0NBQ0o7QUEwQjVDLGVBQWVIO0lBQ3BCSSxRQUFRQyxHQUFHLENBQUM7SUFFWixJQUFJO1FBQ0YsdURBQXVEO1FBQ3ZERCxRQUFRQyxHQUFHLENBQUM7UUFDWkQsUUFBUUMsR0FBRyxDQUFDO1FBQ1pELFFBQVFDLEdBQUcsQ0FBQztRQUVaRCxRQUFRQyxHQUFHLENBQUM7SUFDZCxFQUFFLE9BQU9DLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLGlEQUFpREE7UUFDL0QsTUFBTUE7SUFDUjtBQUNGO0FBS08sU0FBU1I7SUFLZCxNQUFNUyxXQUFXO1FBQ2ZMLGdCQUFnQjtRQUNoQkQsb0JBQW9CO1FBQ3BCRSxrQkFBa0I7SUFDcEI7SUFFQSxNQUFNSyxhQUFhQyxPQUFPQyxNQUFNLENBQUNILFVBQVVJLEtBQUssQ0FBQ0MsQ0FBQUEsU0FBVUEsV0FBVztJQUV0RSxPQUFPO1FBQ0xBLFFBQVFKLGFBQWEsWUFBWTtRQUNqQ0Q7UUFDQU0sV0FBVyxJQUFJQyxPQUFPQyxXQUFXO0lBQ25DO0FBQ0Y7QUFLTyxTQUFTaEI7SUFPZCxPQUFPO1FBQ0xpQixnQkFBZ0I7WUFDZDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFDREMsY0FBYztZQUNaO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUNEQyxVQUFVO1lBQ1I7WUFDQTtZQUNBO1lBQ0E7WUFDQTtTQUNEO1FBQ0RDLFdBQVc7WUFDVDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFDREMsUUFBUTtZQUNOO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtJQUNIO0FBQ0YifQ==