{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/samplePrompts.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { SamplePromptService } from '../services/SamplePromptService';\nimport { SampleTestCaseService } from '../services/SampleTestCaseService';\n\nconst router = Router();\nconst sampleService = SamplePromptService.getInstance();\nconst testCaseService = SampleTestCaseService.getInstance();\n\n// Get all sample prompts\nrouter.get('/', (req: Request, res: Response) => {\n  try {\n    const category = req.query.category as string;\n    \n    let samples;\n    if (category) {\n      samples = sampleService.getSamplePromptsByCategory(category);\n    } else {\n      samples = sampleService.getSamplePrompts();\n    }\n\n    return res.json({\n      success: true,\n      data: samples,\n      meta: {\n        total: samples.length,\n        category: category || 'all'\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch sample prompts'\n    });\n  }\n});\n\n// Get sample prompt categories\nrouter.get('/categories', (req: Request, res: Response) => {\n  try {\n    const categories = sampleService.getCategories();\n    \n    return res.json({\n      success: true,\n      data: categories\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch categories'\n    });\n  }\n});\n\n// Get sample prompt statistics\nrouter.get('/stats', (req: Request, res: Response) => {\n  try {\n    const stats = sampleService.getSamplePromptStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch statistics'\n    });\n  }\n});\n\n// Get specific sample prompt preview\nrouter.get('/:title/preview', (req: Request, res: Response) => {\n  try {\n    const { title } = req.params;\n    const decodedTitle = decodeURIComponent(title);\n    \n    const sample = sampleService.getSamplePromptPreview(decodedTitle);\n    \n    if (!sample) {\n      return res.status(404).json({\n        success: false,\n        error: 'Sample prompt not found'\n      });\n    }\n\n    // Validate the sample\n    const validation = sampleService.validateSamplePrompt(sample);\n    \n    return res.json({\n      success: true,\n      data: {\n        ...sample,\n        validation\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch sample prompt'\n    });\n  }\n});\n\n// Create prompt card from sample with test cases\nrouter.post('/:title/create', async (req: Request, res: Response) => {\n  try {\n    const { title } = req.params;\n    const { includeTestCases = true } = req.body;\n    const decodedTitle = decodeURIComponent(title);\n    \n    const promptCard = await sampleService.createPromptFromSample(decodedTitle);\n    \n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Sample prompt not found'\n      });\n    }\n\n    let testCases = [];\n    if (includeTestCases) {\n      testCases = await testCaseService.createTestCasesForPrompt(promptCard.id, decodedTitle);\n    }\n\n    return res.status(201).json({\n      success: true,\n      data: {\n        ...promptCard,\n        test_cases: testCases\n      },\n      message: `Prompt card created successfully from sample${includeTestCases ? ' with test cases' : ''}`\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create prompt card from sample'\n    });\n  }\n});\n\n// Initialize sample prompts in database\nrouter.post('/initialize', async (req: Request, res: Response) => {\n  try {\n    const { includeTestCases = true } = req.body;\n    \n    await sampleService.initializeSamplePrompts();\n    \n    if (includeTestCases) {\n      await testCaseService.initializeAllTestCases();\n    }\n    \n    return res.json({\n      success: true,\n      message: `Sample prompts initialized successfully${includeTestCases ? ' with test cases' : ''}`,\n      data: {\n        promptStats: sampleService.getSamplePromptStats(),\n        testCaseStats: includeTestCases ? testCaseService.getTestCaseStats() : null\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to initialize sample prompts'\n    });\n  }\n});\n\n// Validate sample prompt\nrouter.post('/validate', (req: Request, res: Response) => {\n  try {\n    const samplePrompt = req.body;\n    \n    if (!samplePrompt) {\n      return res.status(400).json({\n        success: false,\n        error: 'Sample prompt data is required'\n      });\n    }\n\n    const validation = sampleService.validateSamplePrompt(samplePrompt);\n    \n    return res.json({\n      success: true,\n      data: validation\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to validate sample prompt'\n    });\n  }\n});\n\n// Get test case templates for a prompt\nrouter.get('/:title/test-cases', (req: Request, res: Response) => {\n  try {\n    const { title } = req.params;\n    const decodedTitle = decodeURIComponent(title);\n    \n    const testCases = testCaseService.getTestCaseTemplatesForPrompt(decodedTitle);\n    \n    return res.json({\n      success: true,\n      data: testCases,\n      meta: {\n        prompt: decodedTitle,\n        testCaseCount: testCases.length\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test case templates'\n    });\n  }\n});\n\n// Get test case statistics\nrouter.get('/test-cases/stats', (req: Request, res: Response) => {\n  try {\n    const stats = testCaseService.getTestCaseStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test case statistics'\n    });\n  }\n});\n\nexport { router as samplePromptRoutes };"],"names":["samplePromptRoutes","router","Router","sampleService","SamplePromptService","getInstance","testCaseService","SampleTestCaseService","get","req","res","category","query","samples","getSamplePromptsByCategory","getSamplePrompts","json","success","data","meta","total","length","error","status","Error","message","categories","getCategories","stats","getSamplePromptStats","title","params","decodedTitle","decodeURIComponent","sample","getSamplePromptPreview","validation","validateSamplePrompt","post","includeTestCases","body","promptCard","createPromptFromSample","testCases","createTestCasesForPrompt","id","test_cases","initializeSamplePrompts","initializeAllTestCases","promptStats","testCaseStats","getTestCaseStats","samplePrompt","getTestCaseTemplatesForPrompt","prompt","testCaseCount"],"mappings":"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"}