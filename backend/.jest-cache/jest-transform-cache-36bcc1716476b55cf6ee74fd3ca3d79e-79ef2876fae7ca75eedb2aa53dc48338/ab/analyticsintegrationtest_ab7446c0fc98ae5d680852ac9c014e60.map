{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/integration/analytics-integration.test.ts"],"sourcesContent":["import request from 'supertest';\nimport assert from 'assert';\nimport app from '../../server';\nimport { EventStore } from '../../services/analytics/EventStore';\nimport { AnalyticsEngine } from '../../services/analytics/AnalyticsEngine';\n\ndescribe('Analytics Dashboard Integration Tests', () => {\n  let eventStore: EventStore;\n  let analyticsEngine: AnalyticsEngine;\n  const testCardId = 'test-card-analytics-123';\n  const testSessionId = 'test-session-analytics-456';\n\n  beforeEach(async () => {\n    eventStore = new EventStore();\n    analyticsEngine = new AnalyticsEngine(eventStore);\n    \n    // Initialize analytics with test data\n    await eventStore.recordEvent({\n      event_type: 'test_execution_start',\n      entity_id: testCardId,\n      entity_type: 'prompt_card',\n      data: {\n        testSessionId,\n        cardId: testCardId\n      },\n      timestamp: new Date(),\n      metadata: {\n        testType: 'integration',\n        userAgent: 'test-runner'\n      }\n    });\n  });\n\n  describe('Frontend-Backend Analytics Communication', () => {\n    it('should handle analytics data retrieval for dashboard', async () => {\n      const response = await request(app)\n        .get(`/api/analytics/dashboard/${testCardId}`)\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).to.have.property('metrics');\n      expect(response.body.data).to.have.property('performance');\n      expect(response.body.data).to.have.property('costAnalysis');\n      expect(response.body.data).to.have.property('timeSeriesData');\n    });\n\n    it('should handle real-time analytics updates', async () => {\n      // Record multiple events\n      await eventStore.recordEvent({\n        event_type: 'test_execution_complete',\n        entity_id: testCardId,\n        entity_type: 'prompt_card',\n        data: {\n          testSessionId,\n          cardId: testCardId,\n          duration: 1500,\n          success: true,\n          tokensUsed: 250,\n          cost: 0.025\n        },\n        timestamp: new Date()\n      });\n\n      await eventStore.recordEvent({\n        event_type: 'test_execution_complete',\n        entity_id: testCardId,\n        entity_type: 'prompt_card',\n        data: {\n          testSessionId: testSessionId + '-2',\n          cardId: testCardId,\n          duration: 2000,\n          success: false,\n          tokensUsed: 300,\n          cost: 0.030\n        },\n        timestamp: new Date()\n      });\n\n      // Test real-time metrics endpoint\n      const response = await request(app)\n        .get(`/api/analytics/metrics/real-time/${testCardId}`)\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).to.have.property('activeTests');\n      expect(response.body.data).to.have.property('recentCompletions');\n      expect(response.body.data).to.have.property('averageExecutionTime');\n    });\n  });\n\n  describe('Performance Analytics', () => {\n    it('should calculate and store performance metrics correctly', async () => {\n      // Record test execution with performance data\n      await eventStore.recordEvent({\n        event_type: 'test_execution_complete',\n        entity_id: testCardId,\n        entity_type: 'prompt_card',\n        data: {\n          testSessionId,\n          cardId: testCardId,\n          duration: 1500,\n          success: true,\n          tokensUsed: 250,\n          cost: 0.025,\n          model: 'gpt-4'\n        },\n        timestamp: new Date(),\n        metadata: {\n          promptLength: 120,\n          responseLength: 85,\n          cacheHit: false\n        }\n      });\n\n      // Get performance metrics\n      const response = await request(app)\n        .get(`/api/analytics/performance/${testCardId}`)\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).to.have.property('averageExecutionTime');\n      expect(response.body.data).to.have.property('successRate');\n      expect(response.body.data).to.have.property('tokenUsageStats');\n      expect(response.body.data.averageExecutionTime).to.be.a('number');\n      expect(response.body.data.successRate).to.be.within(0, 1);\n    });\n  });\n\n  describe('Cost Analytics', () => {\n    it('should track costs across multiple models correctly', async () => {\n      const executions = [\n        { model: 'gpt-4', tokens: 250, cost: 0.025 },\n        { model: 'gpt-3.5-turbo', tokens: 300, cost: 0.015 },\n        { model: 'claude-2', tokens: 200, cost: 0.020 }\n      ];\n\n      for (const exec of executions) {\n        await eventStore.recordEvent({\n          event_type: 'test_execution_complete',\n          entity_id: testCardId,\n          entity_type: 'prompt_card',\n          data: {\n            testSessionId: `cost-${exec.tokens}`,\n            cardId: testCardId,\n            tokensUsed: exec.tokens,\n            cost: exec.cost,\n            model: exec.model\n          },\n          timestamp: new Date()\n        });\n      }\n\n      // Get cost analytics\n      const response = await request(app)\n        .get(`/api/analytics/costs/${testCardId}`)\n        .expect(200);\n\n      assert(response.body.success === true);\n      expect(response.body.data).to.have.property('totalCost');\n      expect(response.body.data).to.have.property('costBreakdown');\n      expect(response.body.data.totalCost).to.be.approximately(0.060, 0.001);\n    });\n  });\n});"],"names":["describe","eventStore","analyticsEngine","testCardId","testSessionId","beforeEach","EventStore","AnalyticsEngine","recordEvent","event_type","entity_id","entity_type","data","cardId","timestamp","Date","metadata","testType","userAgent","it","response","request","app","get","expect","assert","body","success","to","have","property","duration","tokensUsed","cost","model","promptLength","responseLength","cacheHit","averageExecutionTime","be","a","successRate","within","executions","tokens","exec","totalCost","approximately"],"mappings":"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"}