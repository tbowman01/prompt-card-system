{"version":3,"names":["cov_esdsqjozq","actualCoverage","rateLimit","slowDown","logSecurityEvent","rateLimitViolations","s","Map","createRateLimitHandler","limitType","limit","windowMs","f","req","res","clientId","b","ip","now","Date","violations","get","count","lastViolation","set","violationCount","userAgent","headers","path","status","json","success","error","type","retryAfter","Math","round","timestamp","toISOString","generalRateLimit","max","message","standardHeaders","legacyHeaders","handler","authRateLimit","skipSuccessfulRequests","apiRateLimit","testExecutionRateLimit","speedLimiter","delayAfter","delayMs","used","maxDelayMs","skipFailedRequests","heavyOperationRateLimit","uploadRateLimit","endpointRateLimits","dynamicRateLimit","next","timeSinceLastViolation","getTime","reason","action","setInterval","oneHourAgo","entries","delete","getRateLimitStats","totalViolations","Array","from","values","reduce","sum","uniqueClients","size","topViolators","map","sort","a","slice"],"sources":["rateLimiting.ts"],"sourcesContent":["import rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\nimport { logSecurityEvent } from './structuredLogging';\n// Rate limit violation tracking\nconst rateLimitViolations = new Map();\n// Enhanced rate limit handler with security logging\nconst createRateLimitHandler = (limitType, limit, windowMs)=>{\n    return (req, res)=>{\n        const clientId = req.ip || 'unknown';\n        const now = new Date();\n        // Track violations\n        const violations = rateLimitViolations.get(clientId) || {\n            count: 0,\n            lastViolation: new Date(0)\n        };\n        violations.count += 1;\n        violations.lastViolation = now;\n        rateLimitViolations.set(clientId, violations);\n        // Log security event\n        logSecurityEvent('rate_limit', req, {\n            limitType,\n            limit,\n            windowMs,\n            violationCount: violations.count,\n            userAgent: req.headers['user-agent'],\n            path: req.path\n        });\n        // Enhanced response with security headers\n        res.status(429).json({\n            success: false,\n            error: 'Rate limit exceeded',\n            type: limitType,\n            limit,\n            windowMs,\n            retryAfter: Math.round(windowMs / 1000),\n            ip: req.ip,\n            path: req.path,\n            violationCount: violations.count,\n            timestamp: now.toISOString()\n        });\n    };\n};\n// General API rate limit\nexport const generalRateLimit = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100,\n    message: {\n        success: false,\n        error: 'Too many requests from this IP, please try again later.',\n        retryAfter: 15 * 60 // seconds\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    // store: new RedisStore({\n    //   sendCommand: (...args: string[]) => redis.call(...args),\n    // }),\n    handler: createRateLimitHandler('general', 100, 15 * 60 * 1000)\n});\n// Strict rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 5,\n    message: {\n        success: false,\n        error: 'Too many authentication attempts, please try again later.',\n        retryAfter: 15 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skipSuccessfulRequests: true,\n    handler: createRateLimitHandler('authentication', 5, 15 * 60 * 1000)\n});\n// API rate limit for high-frequency endpoints\nexport const apiRateLimit = rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 50,\n    message: {\n        success: false,\n        error: 'API rate limit exceeded',\n        retryAfter: 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n// Test execution rate limit (more permissive for testing)\nexport const testExecutionRateLimit = rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 20,\n    message: {\n        success: false,\n        error: 'Test execution rate limit exceeded',\n        retryAfter: 5 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n// Slow down middleware for additional protection\nexport const speedLimiter = slowDown({\n    windowMs: 15 * 60 * 1000,\n    delayAfter: 50,\n    delayMs: (used)=>{\n        return (used - 50) * 500; // Add 500ms delay for each request after delayAfter\n    },\n    maxDelayMs: 10000,\n    skipFailedRequests: false,\n    skipSuccessfulRequests: false\n});\n// Heavy operation rate limit (for resource-intensive operations)\nexport const heavyOperationRateLimit = rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 10,\n    message: {\n        success: false,\n        error: 'Heavy operation rate limit exceeded',\n        retryAfter: 60 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n// File upload rate limit\nexport const uploadRateLimit = rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 20,\n    message: {\n        success: false,\n        error: 'Upload rate limit exceeded',\n        retryAfter: 60 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    handler: createRateLimitHandler('upload', 20, 60 * 60 * 1000)\n});\n// Comprehensive endpoint-specific rate limiting\nexport const endpointRateLimits = {\n    // Critical security endpoints\n    '/api/auth/login': rateLimit({\n        windowMs: 15 * 60 * 1000,\n        max: 3,\n        handler: createRateLimitHandler('login', 3, 15 * 60 * 1000)\n    }),\n    '/api/auth/register': rateLimit({\n        windowMs: 60 * 60 * 1000,\n        max: 3,\n        handler: createRateLimitHandler('register', 3, 60 * 60 * 1000)\n    }),\n    '/api/auth/refresh': rateLimit({\n        windowMs: 5 * 60 * 1000,\n        max: 10,\n        handler: createRateLimitHandler('refresh', 10, 5 * 60 * 1000)\n    }),\n    // API endpoints\n    '/api/prompt-cards': rateLimit({\n        windowMs: 1 * 60 * 1000,\n        max: 30,\n        handler: createRateLimitHandler('prompt-cards', 30, 1 * 60 * 1000)\n    }),\n    '/api/test-execution': rateLimit({\n        windowMs: 5 * 60 * 1000,\n        max: 15,\n        handler: createRateLimitHandler('test-execution', 15, 5 * 60 * 1000)\n    }),\n    '/api/analytics': rateLimit({\n        windowMs: 1 * 60 * 1000,\n        max: 25,\n        handler: createRateLimitHandler('analytics', 25, 1 * 60 * 1000)\n    }),\n    '/api/security': rateLimit({\n        windowMs: 5 * 60 * 1000,\n        max: 10,\n        handler: createRateLimitHandler('security', 10, 5 * 60 * 1000)\n    })\n};\n// Dynamic rate limiting based on user behavior\nexport const dynamicRateLimit = (req, res, next)=>{\n    const clientId = req.ip || 'unknown';\n    const violations = rateLimitViolations.get(clientId);\n    // If client has multiple violations, apply stricter limits\n    if (violations && violations.count > 5) {\n        const timeSinceLastViolation = Date.now() - violations.lastViolation.getTime();\n        // If recent violations, block temporarily\n        if (timeSinceLastViolation < 60 * 60 * 1000) {\n            logSecurityEvent('suspicious_activity', req, {\n                reason: 'Multiple rate limit violations',\n                violationCount: violations.count,\n                action: 'temporary_block'\n            });\n            res.status(429).json({\n                success: false,\n                error: 'Temporary block due to suspicious activity',\n                retryAfter: 3600,\n                violationCount: violations.count\n            });\n            return;\n        }\n    }\n    next();\n};\n// Cleanup expired violation records\nsetInterval(()=>{\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    for (const [clientId, violations] of rateLimitViolations.entries()){\n        if (violations.lastViolation < oneHourAgo) {\n            rateLimitViolations.delete(clientId);\n        }\n    }\n}, 60 * 60 * 1000); // Clean up every hour\n// Rate limiting statistics\nexport const getRateLimitStats = ()=>{\n    const totalViolations = Array.from(rateLimitViolations.values()).reduce((sum, violations)=>sum + violations.count, 0);\n    const uniqueClients = rateLimitViolations.size;\n    const topViolators = Array.from(rateLimitViolations.entries()).map(([clientId, violations])=>({\n            clientId,\n            ...violations\n        })).sort((a, b)=>b.count - a.count).slice(0, 10);\n    return {\n        totalViolations,\n        uniqueClients,\n        topViolators\n    };\n};\n"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,OAAOE,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD;AACA,MAAMC,mBAAmB;AAAA;AAAA,CAAAL,aAAA,GAAAM,CAAA,OAAG,IAAIC,GAAG,CAAC,CAAC;AACrC;AAAA;AAAAP,aAAA,GAAAM,CAAA;AACA,MAAME,sBAAsB,GAAGA,CAACC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,KAAG;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAM,CAAA;EACzD,OAAO,CAACO,GAAG,EAAEC,GAAG,KAAG;IAAA;IAAAd,aAAA,GAAAY,CAAA;IACf,MAAMG,QAAQ;IAAA;IAAA,CAAAf,aAAA,GAAAM,CAAA;IAAG;IAAA,CAAAN,aAAA,GAAAgB,CAAA,UAAAH,GAAG,CAACI,EAAE;IAAA;IAAA,CAAAjB,aAAA,GAAAgB,CAAA,UAAI,SAAS;IACpC,MAAME,GAAG;IAAA;IAAA,CAAAlB,aAAA,GAAAM,CAAA,OAAG,IAAIa,IAAI,CAAC,CAAC;IACtB;IACA,MAAMC,UAAU;IAAA;IAAA,CAAApB,aAAA,GAAAM,CAAA;IAAG;IAAA,CAAAN,aAAA,GAAAgB,CAAA,UAAAX,mBAAmB,CAACgB,GAAG,CAACN,QAAQ,CAAC;IAAA;IAAA,CAAAf,aAAA,GAAAgB,CAAA,UAAI;MACpDM,KAAK,EAAE,CAAC;MACRC,aAAa,EAAE,IAAIJ,IAAI,CAAC,CAAC;IAC7B,CAAC;IAAC;IAAAnB,aAAA,GAAAM,CAAA;IACFc,UAAU,CAACE,KAAK,IAAI,CAAC;IAAC;IAAAtB,aAAA,GAAAM,CAAA;IACtBc,UAAU,CAACG,aAAa,GAAGL,GAAG;IAAC;IAAAlB,aAAA,GAAAM,CAAA;IAC/BD,mBAAmB,CAACmB,GAAG,CAACT,QAAQ,EAAEK,UAAU,CAAC;IAC7C;IAAA;IAAApB,aAAA,GAAAM,CAAA;IACAF,gBAAgB,CAAC,YAAY,EAAES,GAAG,EAAE;MAChCJ,SAAS;MACTC,KAAK;MACLC,QAAQ;MACRc,cAAc,EAAEL,UAAU,CAACE,KAAK;MAChCI,SAAS,EAAEb,GAAG,CAACc,OAAO,CAAC,YAAY,CAAC;MACpCC,IAAI,EAAEf,GAAG,CAACe;IACd,CAAC,CAAC;IACF;IAAA;IAAA5B,aAAA,GAAAM,CAAA;IACAQ,GAAG,CAACe,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,qBAAqB;MAC5BC,IAAI,EAAExB,SAAS;MACfC,KAAK;MACLC,QAAQ;MACRuB,UAAU,EAAEC,IAAI,CAACC,KAAK,CAACzB,QAAQ,GAAG,IAAI,CAAC;MACvCM,EAAE,EAAEJ,GAAG,CAACI,EAAE;MACVW,IAAI,EAAEf,GAAG,CAACe,IAAI;MACdH,cAAc,EAAEL,UAAU,CAACE,KAAK;MAChCe,SAAS,EAAEnB,GAAG,CAACoB,WAAW,CAAC;IAC/B,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AACD;AACA,OAAO,MAAMC,gBAAgB;AAAA;AAAA,CAAAvC,aAAA,GAAAM,CAAA,QAAGJ,SAAS,CAAC;EACtCS,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EACxB6B,GAAG,EAAE,GAAG;EACRC,OAAO,EAAE;IACLV,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,yDAAyD;IAChEE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC;EACxB,CAAC;EACDQ,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE,KAAK;EACpB;EACA;EACA;EACAC,OAAO,EAAEpC,sBAAsB,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;AAClE,CAAC,CAAC;AACF;AACA,OAAO,MAAMqC,aAAa;AAAA;AAAA,CAAA7C,aAAA,GAAAM,CAAA,QAAGJ,SAAS,CAAC;EACnCS,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EACxB6B,GAAG,EAAE,CAAC;EACNC,OAAO,EAAE;IACLV,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,2DAA2D;IAClEE,UAAU,EAAE,EAAE,GAAG;EACrB,CAAC;EACDQ,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE,KAAK;EACpBG,sBAAsB,EAAE,IAAI;EAC5BF,OAAO,EAAEpC,sBAAsB,CAAC,gBAAgB,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;AACvE,CAAC,CAAC;AACF;AACA,OAAO,MAAMuC,YAAY;AAAA;AAAA,CAAA/C,aAAA,GAAAM,CAAA,QAAGJ,SAAS,CAAC;EAClCS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EACvB6B,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;IACLV,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,yBAAyB;IAChCE,UAAU,EAAE;EAChB,CAAC;EACDQ,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE;AACnB,CAAC,CAAC;AACF;AACA,OAAO,MAAMK,sBAAsB;AAAA;AAAA,CAAAhD,aAAA,GAAAM,CAAA,QAAGJ,SAAS,CAAC;EAC5CS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EACvB6B,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;IACLV,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,oCAAoC;IAC3CE,UAAU,EAAE,CAAC,GAAG;EACpB,CAAC;EACDQ,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE;AACnB,CAAC,CAAC;AACF;AACA,OAAO,MAAMM,YAAY;AAAA;AAAA,CAAAjD,aAAA,GAAAM,CAAA,QAAGH,QAAQ,CAAC;EACjCQ,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EACxBuC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAGC,IAAI,IAAG;IAAA;IAAApD,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAM,CAAA;IACb,OAAO,CAAC8C,IAAI,GAAG,EAAE,IAAI,GAAG,CAAC,CAAC;EAC9B,CAAC;EACDC,UAAU,EAAE,KAAK;EACjBC,kBAAkB,EAAE,KAAK;EACzBR,sBAAsB,EAAE;AAC5B,CAAC,CAAC;AACF;AACA,OAAO,MAAMS,uBAAuB;AAAA;AAAA,CAAAvD,aAAA,GAAAM,CAAA,QAAGJ,SAAS,CAAC;EAC7CS,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EACxB6B,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;IACLV,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,qCAAqC;IAC5CE,UAAU,EAAE,EAAE,GAAG;EACrB,CAAC;EACDQ,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE;AACnB,CAAC,CAAC;AACF;AACA,OAAO,MAAMa,eAAe;AAAA;AAAA,CAAAxD,aAAA,GAAAM,CAAA,QAAGJ,SAAS,CAAC;EACrCS,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EACxB6B,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;IACLV,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,4BAA4B;IACnCE,UAAU,EAAE,EAAE,GAAG;EACrB,CAAC;EACDQ,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE,KAAK;EACpBC,OAAO,EAAEpC,sBAAsB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;AAChE,CAAC,CAAC;AACF;AACA,OAAO,MAAMiD,kBAAkB;AAAA;AAAA,CAAAzD,aAAA,GAAAM,CAAA,QAAG;EAC9B;EACA,iBAAiB,EAAEJ,SAAS,CAAC;IACzBS,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IACxB6B,GAAG,EAAE,CAAC;IACNI,OAAO,EAAEpC,sBAAsB,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EAC9D,CAAC,CAAC;EACF,oBAAoB,EAAEN,SAAS,CAAC;IAC5BS,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IACxB6B,GAAG,EAAE,CAAC;IACNI,OAAO,EAAEpC,sBAAsB,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EACjE,CAAC,CAAC;EACF,mBAAmB,EAAEN,SAAS,CAAC;IAC3BS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACvB6B,GAAG,EAAE,EAAE;IACPI,OAAO,EAAEpC,sBAAsB,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EAChE,CAAC,CAAC;EACF;EACA,mBAAmB,EAAEN,SAAS,CAAC;IAC3BS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACvB6B,GAAG,EAAE,EAAE;IACPI,OAAO,EAAEpC,sBAAsB,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EACrE,CAAC,CAAC;EACF,qBAAqB,EAAEN,SAAS,CAAC;IAC7BS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACvB6B,GAAG,EAAE,EAAE;IACPI,OAAO,EAAEpC,sBAAsB,CAAC,gBAAgB,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EACvE,CAAC,CAAC;EACF,gBAAgB,EAAEN,SAAS,CAAC;IACxBS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACvB6B,GAAG,EAAE,EAAE;IACPI,OAAO,EAAEpC,sBAAsB,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EAClE,CAAC,CAAC;EACF,eAAe,EAAEN,SAAS,CAAC;IACvBS,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACvB6B,GAAG,EAAE,EAAE;IACPI,OAAO,EAAEpC,sBAAsB,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EACjE,CAAC;AACL,CAAC;AACD;AAAA;AAAAR,aAAA,GAAAM,CAAA;AACA,OAAO,MAAMoD,gBAAgB,GAAGA,CAAC7C,GAAG,EAAEC,GAAG,EAAE6C,IAAI,KAAG;EAAA;EAAA3D,aAAA,GAAAY,CAAA;EAC9C,MAAMG,QAAQ;EAAA;EAAA,CAAAf,aAAA,GAAAM,CAAA;EAAG;EAAA,CAAAN,aAAA,GAAAgB,CAAA,UAAAH,GAAG,CAACI,EAAE;EAAA;EAAA,CAAAjB,aAAA,GAAAgB,CAAA,UAAI,SAAS;EACpC,MAAMI,UAAU;EAAA;EAAA,CAAApB,aAAA,GAAAM,CAAA,QAAGD,mBAAmB,CAACgB,GAAG,CAACN,QAAQ,CAAC;EACpD;EAAA;EAAAf,aAAA,GAAAM,CAAA;EACA;EAAI;EAAA,CAAAN,aAAA,GAAAgB,CAAA,UAAAI,UAAU;EAAA;EAAA,CAAApB,aAAA,GAAAgB,CAAA,UAAII,UAAU,CAACE,KAAK,GAAG,CAAC,GAAE;IAAA;IAAAtB,aAAA,GAAAgB,CAAA;IACpC,MAAM4C,sBAAsB;IAAA;IAAA,CAAA5D,aAAA,GAAAM,CAAA,QAAGa,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGE,UAAU,CAACG,aAAa,CAACsC,OAAO,CAAC,CAAC;IAC9E;IAAA;IAAA7D,aAAA,GAAAM,CAAA;IACA,IAAIsD,sBAAsB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;MAAA;MAAA5D,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAM,CAAA;MACzCF,gBAAgB,CAAC,qBAAqB,EAAES,GAAG,EAAE;QACzCiD,MAAM,EAAE,gCAAgC;QACxCrC,cAAc,EAAEL,UAAU,CAACE,KAAK;QAChCyC,MAAM,EAAE;MACZ,CAAC,CAAC;MAAC;MAAA/D,aAAA,GAAAM,CAAA;MACHQ,GAAG,CAACe,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACjBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,4CAA4C;QACnDE,UAAU,EAAE,IAAI;QAChBT,cAAc,EAAEL,UAAU,CAACE;MAC/B,CAAC,CAAC;MAAC;MAAAtB,aAAA,GAAAM,CAAA;MACH;IACJ,CAAC;IAAA;IAAA;MAAAN,aAAA,GAAAgB,CAAA;IAAA;EACL,CAAC;EAAA;EAAA;IAAAhB,aAAA,GAAAgB,CAAA;EAAA;EAAAhB,aAAA,GAAAM,CAAA;EACDqD,IAAI,CAAC,CAAC;AACV,CAAC;AACD;AAAA;AAAA3D,aAAA,GAAAM,CAAA;AACA0D,WAAW,CAAC,MAAI;EAAA;EAAAhE,aAAA,GAAAY,CAAA;EACZ,MAAMqD,UAAU;EAAA;EAAA,CAAAjE,aAAA,GAAAM,CAAA,QAAG,IAAIa,IAAI,CAACA,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;EAAC;EAAAlB,aAAA,GAAAM,CAAA;EACzD,KAAK,MAAM,CAACS,QAAQ,EAAEK,UAAU,CAAC,IAAIf,mBAAmB,CAAC6D,OAAO,CAAC,CAAC,EAAC;IAAA;IAAAlE,aAAA,GAAAM,CAAA;IAC/D,IAAIc,UAAU,CAACG,aAAa,GAAG0C,UAAU,EAAE;MAAA;MAAAjE,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAM,CAAA;MACvCD,mBAAmB,CAAC8D,MAAM,CAACpD,QAAQ,CAAC;IACxC,CAAC;IAAA;IAAA;MAAAf,aAAA,GAAAgB,CAAA;IAAA;EACL;AACJ,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACpB;AAAA;AAAAhB,aAAA,GAAAM,CAAA;AACA,OAAO,MAAM8D,iBAAiB,GAAGA,CAAA,KAAI;EAAA;EAAApE,aAAA,GAAAY,CAAA;EACjC,MAAMyD,eAAe;EAAA;EAAA,CAAArE,aAAA,GAAAM,CAAA,QAAGgE,KAAK,CAACC,IAAI,CAAClE,mBAAmB,CAACmE,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEtD,UAAU,KAAG;IAAA;IAAApB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAM,CAAA;IAAA,OAAAoE,GAAG,GAAGtD,UAAU,CAACE,KAAK;EAAD,CAAC,EAAE,CAAC,CAAC;EACrH,MAAMqD,aAAa;EAAA;EAAA,CAAA3E,aAAA,GAAAM,CAAA,QAAGD,mBAAmB,CAACuE,IAAI;EAC9C,MAAMC,YAAY;EAAA;EAAA,CAAA7E,aAAA,GAAAM,CAAA,QAAGgE,KAAK,CAACC,IAAI,CAAClE,mBAAmB,CAAC6D,OAAO,CAAC,CAAC,CAAC,CAACY,GAAG,CAAC,CAAC,CAAC/D,QAAQ,EAAEK,UAAU,CAAC,KAAI;IAAA;IAAApB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAM,CAAA;IAAA;MACtFS,QAAQ;MACR,GAAGK;IACP,CAAC;EAAD,CAAE,CAAC,CAAC2D,IAAI,CAAC,CAACC,CAAC,EAAEhE,CAAC,KAAG;IAAA;IAAAhB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAM,CAAA;IAAA,OAAAU,CAAC,CAACM,KAAK,GAAG0D,CAAC,CAAC1D,KAAK;EAAD,CAAC,CAAC,CAAC2D,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAAC;EAAAjF,aAAA,GAAAM,CAAA;EACrD,OAAO;IACH+D,eAAe;IACfM,aAAa;IACbE;EACJ,CAAC;AACL,CAAC","ignoreList":[]}