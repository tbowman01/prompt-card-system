{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/testCases.ts"],"sourcesContent":["import { Router } from 'express';\nimport { db } from '../database/connection';\nimport { TestCase, CreateTestCaseRequest } from '../types/testCase';\nimport Joi from 'joi';\n\nconst router = Router();\n\n// Validation schema for test case\nconst testCaseSchema = Joi.object({\n  prompt_card_id: Joi.number().integer().positive().required(),\n  name: Joi.string().min(1).max(255).required(),\n  input_variables: Joi.object().required(),\n  expected_output: Joi.string().allow('').optional(),\n  assertions: Joi.array().items(\n    Joi.object({\n      type: Joi.string().valid('contains', 'not-contains', 'equals', 'not-equals', 'regex', 'length').required(),\n      value: Joi.alternatives().try(Joi.string(), Joi.number()).required(),\n      description: Joi.string().optional()\n    })\n  ).optional()\n});\n\n// Get all test cases for a prompt card\nrouter.get('/prompt-cards/:promptCardId/test-cases', (req, res) => {\n  try {\n    const { promptCardId } = req.params;\n    \n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(promptCardId);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    const testCases = db.prepare(`\n      SELECT * FROM test_cases \n      WHERE prompt_card_id = ? \n      ORDER BY created_at DESC\n    `).all(promptCardId) as TestCase[];\n\n    return res.json({\n      success: true,\n      data: testCases.map((tc: TestCase) => ({\n        ...tc,\n        input_variables: JSON.parse(tc.input_variables),\n        assertions: JSON.parse(tc.assertions || '[]')\n      }))\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test cases'\n    });\n  }\n});\n\n// Get specific test case\nrouter.get('/:id', (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const testCase = db.prepare('SELECT * FROM test_cases WHERE id = ?').get(id) as TestCase;\n    \n    if (!testCase) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: {\n        ...testCase,\n        input_variables: JSON.parse(testCase.input_variables),\n        assertions: JSON.parse(testCase.assertions || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test case'\n    });\n  }\n});\n\n// Create new test case\nrouter.post('/', (req, res) => {\n  try {\n    const { error, value } = testCaseSchema.validate(req.body);\n    if (error) {\n      return res.status(400).json({\n        success: false,\n        error: error.details[0].message\n      });\n    }\n\n    const { prompt_card_id, name, input_variables, expected_output, assertions } = value as CreateTestCaseRequest;\n    \n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    const result = db.prepare(`\n      INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(\n      prompt_card_id,\n      name,\n      JSON.stringify(input_variables),\n      expected_output || null,\n      JSON.stringify(assertions || [])\n    );\n\n    const newTestCase = db.prepare('SELECT * FROM test_cases WHERE id = ?').get(result.lastInsertRowid) as TestCase;\n\n    return res.status(201).json({\n      success: true,\n      data: {\n        ...newTestCase,\n        input_variables: JSON.parse(newTestCase.input_variables),\n        assertions: JSON.parse(newTestCase.assertions || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create test case'\n    });\n  }\n});\n\n// Update test case\nrouter.put('/:id', (req, res) => {\n  try {\n    const { id } = req.params;\n    const { error, value } = testCaseSchema.validate(req.body);\n    \n    if (error) {\n      return res.status(400).json({\n        success: false,\n        error: error.details[0].message\n      });\n    }\n\n    const { prompt_card_id, name, input_variables, expected_output, assertions } = value as CreateTestCaseRequest;\n    \n    const result = db.prepare(`\n      UPDATE test_cases \n      SET prompt_card_id = ?, name = ?, input_variables = ?, expected_output = ?, assertions = ?\n      WHERE id = ?\n    `).run(\n      prompt_card_id,\n      name,\n      JSON.stringify(input_variables),\n      expected_output || null,\n      JSON.stringify(assertions || []),\n      id\n    );\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    const updatedTestCase = db.prepare('SELECT * FROM test_cases WHERE id = ?').get(id) as TestCase;\n\n    return res.json({\n      success: true,\n      data: {\n        ...updatedTestCase,\n        input_variables: JSON.parse(updatedTestCase.input_variables),\n        assertions: JSON.parse(updatedTestCase.assertions || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update test case'\n    });\n  }\n});\n\n// Delete test case\nrouter.delete('/:id', (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const result = db.prepare('DELETE FROM test_cases WHERE id = ?').run(id);\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Test case deleted successfully'\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete test case'\n    });\n  }\n});\n\nexport { router as testCaseRoutes };"],"names":["testCaseRoutes","router","Router","testCaseSchema","Joi","object","prompt_card_id","number","integer","positive","required","name","string","min","max","input_variables","expected_output","allow","optional","assertions","array","items","type","valid","value","alternatives","try","description","get","req","res","promptCardId","params","promptCard","db","prepare","status","json","success","error","testCases","all","data","map","tc","JSON","parse","Error","message","id","testCase","post","validate","body","details","result","run","stringify","newTestCase","lastInsertRowid","put","changes","updatedTestCase","delete"],"mappings":"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"}