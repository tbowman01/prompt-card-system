{"version":3,"names":["cov_242bl6feg6","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","CustomAssertionValidator","initialize","console","log","initialized","error","execute","code","output","context","Error","startTime","Date","now","logs","variables","securityResult","performSecurityCheck","safe","reason","sandboxContext","createSandboxContext","result","executeInSandbox","executionTime","passed","Boolean","score","message","keyword","bannedKeywords","includes","dangerousPatterns","pattern","test","toString","length","nestingLevel","checkNestingLevel","maxLevel","currentLevel","char","Math","max","text","content","prompt","model","wordCount","split","filter","w","lineCount","toLowerCase","toUpperCase","trim","str","startsWith","endsWith","indexOf","match","replace","search","replacement","separator","substring","start","end","slice","parseJSON","JSON","parse","regex","flags","RegExp","random","push","String","set","get","analyzeSentiment","positiveWords","negativeWords","words","positive","negative","wordFrequency","frequency","forEach","word","detectLanguage","englishWords","englishCount","allowedGlobals","globalName","global","wrappedCode","keys","join","func","Function","executeWithTimeout","args","timeout","Promise","resolve","reject","timer","setTimeout","apply","clearTimeout","getStatistics","totalExecutions","successfulExecutions","failedExecutions","securityViolations","averageExecutionTime","cleanup","constructor","Set"],"sources":["CustomAssertionValidator.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nexport class CustomAssertionValidator {\n    /**\n   * Initialize the custom assertion validator\n   */ async initialize() {\n        try {\n            console.log('Initializing CustomAssertionValidator...');\n            this.initialized = true;\n            console.log('✅ CustomAssertionValidator initialized');\n        } catch (error) {\n            console.error('❌ Failed to initialize CustomAssertionValidator:', error);\n            throw error;\n        }\n    }\n    /**\n   * Execute custom assertion code in a secure sandbox\n   */ async execute(code, output, context) {\n        if (!this.initialized) {\n            throw new Error('CustomAssertionValidator not initialized');\n        }\n        const startTime = Date.now();\n        const logs = [];\n        const variables = {};\n        try {\n            // Security check - scan for banned keywords\n            const securityResult = this.performSecurityCheck(code);\n            if (!securityResult.safe) {\n                throw new Error(`Security violation: ${securityResult.reason}`);\n            }\n            // Prepare execution environment\n            const sandboxContext = this.createSandboxContext(output, context, logs, variables);\n            // Execute the custom assertion\n            const result = await this.executeInSandbox(code, sandboxContext);\n            const executionTime = Date.now() - startTime;\n            return {\n                passed: Boolean(result),\n                score: typeof result === 'number' ? result : Boolean(result) ? 1 : 0,\n                executionTime,\n                variables,\n                logs\n            };\n        } catch (error) {\n            const executionTime = Date.now() - startTime;\n            return {\n                passed: false,\n                executionTime,\n                variables,\n                logs,\n                error: error instanceof Error ? error.message : 'Unknown execution error'\n            };\n        }\n    }\n    /**\n   * Perform security checks on the custom code\n   */ performSecurityCheck(code) {\n        // Check for banned keywords\n        for (const keyword of this.bannedKeywords){\n            if (code.includes(keyword)) {\n                return {\n                    safe: false,\n                    reason: `Banned keyword detected: ${keyword}`\n                };\n            }\n        }\n        // Check for potential injection patterns\n        const dangerousPatterns = [\n            /constructor/i,\n            /prototype/i,\n            /(__proto__|__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__)/i,\n            /\\[\\s*[\"']constructor[\"']\\s*\\]/i,\n            /\\[\\s*[\"']__proto__[\"']\\s*\\]/i,\n            /\\[\\s*[\"']prototype[\"']\\s*\\]/i\n        ];\n        for (const pattern of dangerousPatterns){\n            if (pattern.test(code)) {\n                return {\n                    safe: false,\n                    reason: `Potentially dangerous pattern detected: ${pattern.toString()}`\n                };\n            }\n        }\n        // Check code length (prevent DoS)\n        if (code.length > 10000) {\n            return {\n                safe: false,\n                reason: 'Code too long (max 10000 characters)'\n            };\n        }\n        // Check for excessive nesting (prevent DoS)\n        const nestingLevel = this.checkNestingLevel(code);\n        if (nestingLevel > 20) {\n            return {\n                safe: false,\n                reason: 'Code nesting too deep (max 20 levels)'\n            };\n        }\n        return {\n            safe: true\n        };\n    }\n    /**\n   * Check nesting level of code\n   */ checkNestingLevel(code) {\n        let maxLevel = 0;\n        let currentLevel = 0;\n        for (const char of code){\n            if (char === '{' || char === '(' || char === '[') {\n                currentLevel++;\n                maxLevel = Math.max(maxLevel, currentLevel);\n            } else if (char === '}' || char === ')' || char === ']') {\n                currentLevel--;\n            }\n        }\n        return maxLevel;\n    }\n    /**\n   * Create a sandbox context for code execution\n   */ createSandboxContext(output, context, logs, variables) {\n        const sandboxContext = {\n            // Assertion input\n            output,\n            text: output,\n            content: output,\n            // Context information\n            prompt: context?.prompt || '',\n            variables: context?.variables ? {\n                ...context.variables\n            } : {},\n            model: context?.model || '',\n            executionTime: context?.executionTime || 0,\n            // Utility functions\n            length: output.length,\n            wordCount: output.split(/\\s+/).filter((w)=>w.length > 0).length,\n            lineCount: output.split('\\n').length,\n            // Safe string operations\n            toLowerCase: ()=>output.toLowerCase(),\n            toUpperCase: ()=>output.toUpperCase(),\n            trim: ()=>output.trim(),\n            includes: (str)=>output.includes(str),\n            startsWith: (str)=>output.startsWith(str),\n            endsWith: (str)=>output.endsWith(str),\n            indexOf: (str)=>output.indexOf(str),\n            match: (pattern)=>output.match(pattern),\n            replace: (search, replacement)=>output.replace(search, replacement),\n            split: (separator)=>output.split(separator),\n            substring: (start, end)=>output.substring(start, end),\n            slice: (start, end)=>output.slice(start, end),\n            // JSON operations\n            parseJSON: (str)=>{\n                try {\n                    return JSON.parse(str || output);\n                } catch  {\n                    return null;\n                }\n            },\n            // Regular expressions\n            regex: (pattern, flags)=>{\n                try {\n                    return new RegExp(pattern, flags);\n                } catch  {\n                    return null;\n                }\n            },\n            // Math operations\n            Math: {\n                ...Math,\n                random: ()=>{\n                    throw new Error('Math.random() is not allowed in assertions');\n                }\n            },\n            // Safe logging\n            log: (message)=>{\n                if (logs) {\n                    logs.push(String(message));\n                }\n            },\n            // Variable storage\n            set: (key, value)=>{\n                if (variables) {\n                    variables[key] = value;\n                }\n            },\n            get: (key)=>{\n                return variables?.[key];\n            },\n            // Sentiment analysis helper\n            analyzeSentiment: (text)=>{\n                const content = text || output;\n                // Simple sentiment analysis\n                const positiveWords = [\n                    'good',\n                    'great',\n                    'excellent',\n                    'amazing',\n                    'wonderful',\n                    'love',\n                    'like',\n                    'happy'\n                ];\n                const negativeWords = [\n                    'bad',\n                    'terrible',\n                    'awful',\n                    'hate',\n                    'dislike',\n                    'sad',\n                    'angry',\n                    'disappointed'\n                ];\n                const words = content.toLowerCase().split(/\\s+/);\n                const positive = words.filter((w)=>positiveWords.includes(w)).length;\n                const negative = words.filter((w)=>negativeWords.includes(w)).length;\n                if (positive > negative) return 'positive';\n                if (negative > positive) return 'negative';\n                return 'neutral';\n            },\n            // Word frequency analysis\n            wordFrequency: (text)=>{\n                const content = text || output;\n                const words = content.toLowerCase().split(/\\s+/).filter((w)=>w.length > 0);\n                const frequency = {};\n                words.forEach((word)=>{\n                    frequency[word] = (frequency[word] || 0) + 1;\n                });\n                return frequency;\n            },\n            // Language detection helper\n            detectLanguage: (text)=>{\n                const content = text || output;\n                // Very simple language detection\n                const englishWords = [\n                    'the',\n                    'and',\n                    'is',\n                    'in',\n                    'to',\n                    'of',\n                    'a',\n                    'that'\n                ];\n                const words = content.toLowerCase().split(/\\s+/);\n                const englishCount = words.filter((w)=>englishWords.includes(w)).length;\n                return englishCount > words.length * 0.1 ? 'en' : 'unknown';\n            }\n        };\n        // Add allowed globals\n        this.allowedGlobals.forEach((globalName)=>{\n            if (globalName === 'Math') {\n                sandboxContext[globalName] = sandboxContext.Math;\n            } else if (typeof global !== 'undefined' && globalName in global) {\n                sandboxContext[globalName] = global[globalName];\n            }\n        });\n        return sandboxContext;\n    }\n    /**\n   * Execute code in a simple sandbox environment\n   */ async executeInSandbox(code, context) {\n        // Create a function that executes the code in the given context\n        const wrappedCode = `\n      (function() {\n        \"use strict\";\n        const {${Object.keys(context).join(', ')}} = arguments[0];\n        \n        // Prevent access to dangerous globals\n        const eval = undefined;\n        const Function = undefined;\n        const constructor = undefined;\n        const prototype = undefined;\n        const __proto__ = undefined;\n        \n        // Execute the custom assertion code\n        ${code}\n      })\n    `;\n        try {\n            // Use Function constructor as a safer alternative to eval\n            // This is still not completely secure, but better than direct eval\n            const func = new Function('return ' + wrappedCode)();\n            // Execute with timeout to prevent infinite loops\n            const result = await this.executeWithTimeout(func, [\n                context\n            ], 5000);\n            return result;\n        } catch (error) {\n            throw new Error(`Code execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Execute a function with timeout\n   */ async executeWithTimeout(func, args, timeout) {\n        return new Promise((resolve, reject)=>{\n            const timer = setTimeout(()=>{\n                reject(new Error('Execution timeout'));\n            }, timeout);\n            try {\n                const result = func.apply(null, args);\n                clearTimeout(timer);\n                resolve(result);\n            } catch (error) {\n                clearTimeout(timer);\n                reject(error);\n            }\n        });\n    }\n    /**\n   * Get execution statistics\n   */ getStatistics() {\n        // In a real implementation, this would track actual statistics\n        return {\n            totalExecutions: 0,\n            successfulExecutions: 0,\n            failedExecutions: 0,\n            securityViolations: 0,\n            averageExecutionTime: 0\n        };\n    }\n    /**\n   * Clean up resources\n   */ async cleanup() {\n        this.initialized = false;\n    }\n    constructor(){\n        _define_property(this, \"initialized\", false);\n        _define_property(this, \"allowedGlobals\", void 0);\n        _define_property(this, \"bannedKeywords\", void 0);\n        // Define allowed global functions and objects for security\n        this.allowedGlobals = new Set([\n            'Math',\n            'String',\n            'Number',\n            'Array',\n            'Object',\n            'Date',\n            'RegExp',\n            'JSON',\n            'parseFloat',\n            'parseInt',\n            'isNaN',\n            'isFinite',\n            'encodeURI',\n            'decodeURI',\n            'encodeURIComponent',\n            'decodeURIComponent'\n        ]);\n        // Define banned keywords for security\n        this.bannedKeywords = new Set([\n            'eval',\n            'Function',\n            'require',\n            'import',\n            'process',\n            'global',\n            'window',\n            'document',\n            'localStorage',\n            'sessionStorage',\n            'fetch',\n            'XMLHttpRequest',\n            'WebSocket',\n            'Worker',\n            'SharedWorker',\n            'setTimeout',\n            'setInterval',\n            'setImmediate',\n            'clearTimeout',\n            'clearInterval',\n            'clearImmediate',\n            '__dirname',\n            '__filename',\n            'module',\n            'exports',\n            'Buffer',\n            'console.log',\n            'console.error'\n        ]);\n    }\n}\n"],"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","ignoreList":[]}