{"version":3,"names":["cov_2kfu1vuh04","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","randomBytes","StructuredLogger","getInstance","instance","log","level","context","message","logEntry","bufferTimestamp","Date","toISOString","structuredLog","timestamp","correlation_id","correlationId","request_id","requestId","user","id","userId","role","userRole","request","method","url","ip","user_agent","userAgent","duration_ms","duration","status_code","statusCode","security","securityContext","error_code","errorCode","metadata","process","env","NODE_ENV","colors","info","warn","error","debug","reset","console","toUpperCase","JSON","stringify","logBuffer","push","length","MAX_BUFFER_SIZE","flushLogs","getMetrics","logs","errorCount","filter","responseTimes","map","averageResponseTime","reduce","sum","time","totalLogs","Math","round","constructor","setInterval","FLUSH_INTERVAL","structuredLogger","structuredLoggingMiddleware","req","res","next","startTime","now","headers","toString","setHeader","baseContext","connection","remoteAddress","authMethod","authorization","suspicious","fingerprint","generateFingerprint","originalEnd","end","chunk","encoding","finalContext","call","components","Buffer","from","join","substring","logSecurityEvent","eventType","details","performanceLoggingMiddleware","hrtime","bigint","startMemory","memoryUsage","on","endTime","endMemory","Number","performanceData","memory","heapUsed","heapTotal","external"],"sources":["structuredLogging.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { randomBytes } from 'crypto';\nclass StructuredLogger {\n    static getInstance() {\n        if (!StructuredLogger.instance) {\n            StructuredLogger.instance = new StructuredLogger();\n        }\n        return StructuredLogger.instance;\n    }\n    log(level, context, message) {\n        const logEntry = {\n            level,\n            message,\n            ...context,\n            bufferTimestamp: new Date().toISOString()\n        };\n        // Enhanced console logging with structured format\n        const structuredLog = {\n            '@timestamp': context.timestamp,\n            '@version': '1',\n            level,\n            message,\n            correlation_id: context.correlationId,\n            request_id: context.requestId,\n            user: {\n                id: context.userId,\n                role: context.userRole\n            },\n            request: {\n                method: context.method,\n                url: context.url,\n                ip: context.ip,\n                user_agent: context.userAgent,\n                duration_ms: context.duration,\n                status_code: context.statusCode\n            },\n            security: context.securityContext,\n            error_code: context.errorCode,\n            metadata: context.metadata\n        };\n        // Color-coded console output for development\n        if (process.env.NODE_ENV !== 'production') {\n            const colors = {\n                info: '\\x1b[36m',\n                warn: '\\x1b[33m',\n                error: '\\x1b[31m',\n                debug: '\\x1b[35m',\n                reset: '\\x1b[0m'\n            };\n            console.log(`${colors[level]}[${level.toUpperCase()}]${colors.reset} ` + `${context.timestamp} ` + `[${context.correlationId}] ` + `${context.method} ${context.url} ` + `${context.statusCode || 'PENDING'} ` + `${context.duration ? `${context.duration}ms` : ''} ` + `- ${message}`);\n        }\n        // Structured JSON logging for production\n        if (process.env.NODE_ENV === 'production') {\n            console.log(JSON.stringify(structuredLog));\n        }\n        // Add to buffer for batch processing\n        this.logBuffer.push(context);\n        // Flush if buffer is full\n        if (this.logBuffer.length >= this.MAX_BUFFER_SIZE) {\n            this.flushLogs();\n        }\n    }\n    flushLogs() {\n        if (this.logBuffer.length === 0) return;\n        // In production, this would send to centralized logging system\n        // For now, we'll just clear the buffer\n        this.logBuffer = [];\n    }\n    getMetrics() {\n        const logs = this.logBuffer;\n        const errorCount = logs.filter((log)=>log.statusCode && log.statusCode >= 400).length;\n        const responseTimes = logs.filter((log)=>log.duration).map((log)=>log.duration);\n        const averageResponseTime = responseTimes.length > 0 ? responseTimes.reduce((sum, time)=>sum + time, 0) / responseTimes.length : 0;\n        return {\n            totalLogs: logs.length,\n            errorCount,\n            averageResponseTime: Math.round(averageResponseTime)\n        };\n    }\n    constructor(){\n        _define_property(this, \"logBuffer\", []);\n        _define_property(this, \"MAX_BUFFER_SIZE\", 100);\n        _define_property(this, \"FLUSH_INTERVAL\", 10000); // 10 seconds\n        // Flush logs periodically\n        setInterval(()=>this.flushLogs(), this.FLUSH_INTERVAL);\n    }\n}\n_define_property(StructuredLogger, \"instance\", void 0);\nexport const structuredLogger = StructuredLogger.getInstance();\n// Middleware to add correlation ID and structured logging\nexport const structuredLoggingMiddleware = (req, res, next)=>{\n    const startTime = Date.now();\n    const correlationId = req.headers['x-correlation-id'] || randomBytes(8).toString('hex');\n    const requestId = req.headers['x-request-id'] || randomBytes(8).toString('hex');\n    // Add correlation ID to request for downstream use\n    req.headers['x-correlation-id'] = correlationId;\n    req.headers['x-request-id'] = requestId;\n    // Add correlation ID to response headers\n    res.setHeader('x-correlation-id', correlationId);\n    res.setHeader('x-request-id', requestId);\n    // Create base log context\n    const baseContext = {\n        correlationId,\n        requestId,\n        userId: req.user?.id,\n        userRole: req.user?.role,\n        ip: req.ip || req.connection.remoteAddress || 'unknown',\n        userAgent: req.headers['user-agent'] || 'unknown',\n        method: req.method,\n        url: req.url,\n        timestamp: new Date().toISOString(),\n        securityContext: {\n            authMethod: req.headers.authorization ? 'Bearer' : 'none',\n            suspicious: false,\n            fingerprint: generateFingerprint(req)\n        }\n    };\n    // Log request start\n    structuredLogger.log('info', baseContext, `Request started: ${req.method} ${req.url}`);\n    // Override res.end to capture response details\n    const originalEnd = res.end;\n    res.end = function(chunk, encoding) {\n        const duration = Date.now() - startTime;\n        const finalContext = {\n            ...baseContext,\n            duration,\n            statusCode: res.statusCode\n        };\n        // Determine log level based on status code\n        let level = 'info';\n        let message = `Request completed: ${req.method} ${req.url} ${res.statusCode} (${duration}ms)`;\n        if (res.statusCode >= 500) {\n            level = 'error';\n            finalContext.errorCode = 'SERVER_ERROR';\n        } else if (res.statusCode >= 400) {\n            level = 'warn';\n            finalContext.errorCode = 'CLIENT_ERROR';\n        }\n        // Add security context for suspicious activity\n        if (res.statusCode === 429) {\n            finalContext.securityContext.suspicious = true;\n            finalContext.errorCode = 'RATE_LIMIT_EXCEEDED';\n            level = 'warn';\n        } else if (res.statusCode === 401 || res.statusCode === 403) {\n            finalContext.securityContext.suspicious = true;\n            finalContext.errorCode = res.statusCode === 401 ? 'UNAUTHORIZED' : 'FORBIDDEN';\n            level = 'warn';\n        }\n        structuredLogger.log(level, finalContext, message);\n        originalEnd.call(this, chunk, encoding);\n    };\n    next();\n};\n// Generate a simple fingerprint for request tracking\nfunction generateFingerprint(req) {\n    const components = [\n        req.headers['user-agent'] || '',\n        req.headers['accept-language'] || '',\n        req.headers['accept-encoding'] || '',\n        req.ip || ''\n    ];\n    // Simple hash of combined components\n    return Buffer.from(components.join('|')).toString('base64').substring(0, 12);\n}\n// Security event logging\nexport const logSecurityEvent = (eventType, req, details = {})=>{\n    const context = {\n        correlationId: req.headers['x-correlation-id'] || 'unknown',\n        requestId: req.headers['x-request-id'] || 'unknown',\n        userId: req.user?.id,\n        userRole: req.user?.role,\n        ip: req.ip || 'unknown',\n        userAgent: req.headers['user-agent'] || 'unknown',\n        method: req.method,\n        url: req.url,\n        timestamp: new Date().toISOString(),\n        securityContext: {\n            authMethod: req.headers.authorization ? 'Bearer' : 'none',\n            suspicious: true,\n            fingerprint: generateFingerprint(req)\n        },\n        metadata: {\n            eventType,\n            ...details\n        }\n    };\n    structuredLogger.log('warn', context, `Security event: ${eventType}`);\n};\n// Performance monitoring middleware\nexport const performanceLoggingMiddleware = (req, res, next)=>{\n    const startTime = process.hrtime.bigint();\n    const startMemory = process.memoryUsage();\n    res.on('finish', ()=>{\n        const endTime = process.hrtime.bigint();\n        const endMemory = process.memoryUsage();\n        const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n        const performanceData = {\n            correlationId: req.headers['x-correlation-id'],\n            requestId: req.headers['x-request-id'],\n            method: req.method,\n            url: req.url,\n            statusCode: res.statusCode,\n            duration,\n            memory: {\n                heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n                heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n                external: endMemory.external - startMemory.external\n            }\n        };\n        // Log performance warning for slow requests\n        if (duration > 1000) {\n            const context = {\n                correlationId: performanceData.correlationId || 'unknown',\n                requestId: performanceData.requestId || 'unknown',\n                ip: req.ip || 'unknown',\n                userAgent: req.headers['user-agent'] || 'unknown',\n                method: req.method,\n                url: req.url,\n                timestamp: new Date().toISOString(),\n                duration,\n                statusCode: res.statusCode,\n                metadata: performanceData\n            };\n            structuredLogger.log('warn', context, `Slow request detected: ${duration}ms`);\n        }\n    });\n    next();\n};\n"],"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","ignoreList":[]}