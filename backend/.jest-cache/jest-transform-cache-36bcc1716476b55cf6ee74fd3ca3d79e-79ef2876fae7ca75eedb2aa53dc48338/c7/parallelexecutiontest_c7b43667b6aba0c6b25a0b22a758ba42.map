{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/integration/parallel-execution.test.ts"],"sourcesContent":["import request from 'supertest';\nimport assert from 'assert';\nimport app from '../../server';\nimport { TestQueueManager } from '../../services/testing/TestQueueManager';\nimport { ResourceManager } from '../../services/testing/ResourceManager';\nimport { Semaphore } from '../../services/testing/Semaphore';\n\ndescribe('Parallel Testing Infrastructure Integration Tests', () => {\n  let testQueueManager: TestQueueManager;\n  let resourceManager: ResourceManager;\n  let semaphore: Semaphore;\n  const testCardId = 'test-parallel-card-123';\n\n  beforeEach(async () => {\n    testQueueManager = new TestQueueManager();\n    resourceManager = new ResourceManager();\n    semaphore = new Semaphore(3); // Allow 3 concurrent tests\n    \n    // Initialize test infrastructure\n    await testQueueManager.initialize();\n    await resourceManager.initialize();\n  });\n\n  afterEach(async () => {\n    await testQueueManager.cleanup();\n    await resourceManager.cleanup();\n  });\n\n  describe('Queue Management Integration', () => {\n    it('should handle multiple test submissions and execute them in parallel', async () => {\n      const testPromises = [];\n      \n      // Submit 10 test executions\n      for (let i = 0; i < 10; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `test-${i}-1`,\n                  input: `Test input ${i}-1`,\n                  expectedOutput: `Expected output ${i}-1`\n                },\n                {\n                  id: `test-${i}-2`,\n                  input: `Test input ${i}-2`,\n                  expectedOutput: `Expected output ${i}-2`\n                }\n              ],\n              model: 'gpt-3.5-turbo',\n              parallelism: 2\n            })\n        );\n      }\n\n      const responses = await Promise.all(testPromises);\n      \n      // All submissions should be accepted\n      for (const response of responses) {\n        expect(response.status).to.equal(200);\n        assert(response.body.success === true);\n        expect(response.body.data).to.have.property('executionId');\n        expect(response.body.data).to.have.property('status');\n        expect(response.body.data.status).to.be.oneOf(['queued', 'running']);\n      }\n    });\n\n    it('should respect resource limits and queue appropriately', async () => {\n      // Set resource limits\n      await resourceManager.setLimits({\n        maxConcurrentTests: 3,\n        maxMemoryUsage: 1024, // 1GB\n        maxCpuUsage: 80\n      });\n\n      const testPromises = [];\n      \n      // Submit more tests than the limit\n      for (let i = 0; i < 8; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `limit-test-${i}`,\n                  input: `Test input ${i}`,\n                  expectedOutput: `Expected output ${i}`\n                }\n              ],\n              model: 'gpt-3.5-turbo',\n              priority: i < 3 ? 'high' : 'normal'\n            })\n        );\n      }\n\n      const responses = await Promise.all(testPromises);\n      \n      // Check queue status\n      const queueStatusResponse = await request(app)\n        .get('/api/test-execution/queue/status')\n        .expect(200);\n\n      assert(queueStatusResponse.body.success === true);\n      expect(queueStatusResponse.body.data).to.have.property('running');\n      expect(queueStatusResponse.body.data).to.have.property('queued');\n      expect(queueStatusResponse.body.data.running).to.be.at.most(3);\n    });\n\n    it('should handle queue priority correctly', async () => {\n      // Submit tests with different priorities\n      const lowPriorityResponse = await request(app)\n        .post('/api/test-execution/parallel')\n        .send({\n          cardId: testCardId,\n          testCases: [{ id: 'low-priority', input: 'Low priority test', expectedOutput: 'output' }],\n          priority: 'low'\n        })\n        .expect(200);\n\n      const highPriorityResponse = await request(app)\n        .post('/api/test-execution/parallel')\n        .send({\n          cardId: testCardId,\n          testCases: [{ id: 'high-priority', input: 'High priority test', expectedOutput: 'output' }],\n          priority: 'high'\n        })\n        .expect(200);\n\n      const criticalPriorityResponse = await request(app)\n        .post('/api/test-execution/parallel')\n        .send({\n          cardId: testCardId,\n          testCases: [{ id: 'critical-priority', input: 'Critical priority test', expectedOutput: 'output' }],\n          priority: 'critical'\n        })\n        .expect(200);\n\n      // Check queue order\n      const queueResponse = await request(app)\n        .get('/api/test-execution/queue/list')\n        .expect(200);\n\n      assert(queueResponse.body.success === true);\n      expect(queueResponse.body.data).to.be.an('array');\n      \n      // Critical should be first, then high, then low\n      const priorities = queueResponse.body.data.map(item => item.priority);\n      expect(priorities[0]).to.equal('critical');\n    });\n  });\n\n  describe('Resource Management Integration', () => {\n    it('should monitor and manage system resources during parallel execution', async () => {\n      // Start resource monitoring\n      const monitoringResponse = await request(app)\n        .post('/api/test-execution/monitoring/start')\n        .send({\n          interval: 1000, // 1 second intervals\n          metrics: ['cpu', 'memory', 'activeTests', 'queueLength']\n        })\n        .expect(200);\n\n      // Submit resource-intensive tests\n      const heavyTestPromises = [];\n      for (let i = 0; i < 5; i++) {\n        heavyTestPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: Array.from({ length: 20 }, (_, j) => ({\n                id: `heavy-${i}-${j}`,\n                input: `Heavy test ${i}-${j}`,\n                expectedOutput: `Expected ${i}-${j}`\n              })),\n              model: 'gpt-4',\n              parallelism: 5\n            })\n        );\n      }\n\n      await Promise.all(heavyTestPromises);\n\n      // Wait a bit for monitoring data\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Get resource usage data\n      const resourceResponse = await request(app)\n        .get('/api/test-execution/resources/usage')\n        .expect(200);\n\n      assert(resourceResponse.body.success === true);\n      expect(resourceResponse.body.data).to.have.property('cpu');\n      expect(resourceResponse.body.data).to.have.property('memory');\n      expect(resourceResponse.body.data).to.have.property('activeTests');\n      expect(resourceResponse.body.data).to.have.property('queueLength');\n    });\n\n    it('should handle resource exhaustion gracefully', async () => {\n      // Set very low resource limits\n      await resourceManager.setLimits({\n        maxConcurrentTests: 1,\n        maxMemoryUsage: 100, // 100MB\n        maxCpuUsage: 50\n      });\n\n      // Submit many tests\n      const testPromises = [];\n      for (let i = 0; i < 10; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `resource-test-${i}`,\n                  input: `Resource test ${i}`,\n                  expectedOutput: `Expected ${i}`\n                }\n              ],\n              model: 'gpt-3.5-turbo'\n            })\n        );\n      }\n\n      const responses = await Promise.all(testPromises);\n      \n      // Some should be queued due to resource limits\n      let queuedCount = 0;\n      let runningCount = 0;\n      \n      for (const response of responses) {\n        if (response.body.data.status === 'queued') queuedCount++;\n        if (response.body.data.status === 'running') runningCount++;\n      }\n\n      expect(queuedCount).to.be.greaterThan(0);\n      expect(runningCount).to.be.at.most(1);\n    });\n  });\n\n  describe('Semaphore and Concurrency Control', () => {\n    it('should control concurrent execution using semaphores', async () => {\n      const semaphoreResponse = await request(app)\n        .post('/api/test-execution/semaphore/create')\n        .send({\n          name: 'test-semaphore',\n          permits: 3\n        })\n        .expect(200);\n\n      const semaphoreId = semaphoreResponse.body.data.id;\n\n      // Submit 10 tests that should use the semaphore\n      const testPromises = [];\n      for (let i = 0; i < 10; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `semaphore-test-${i}`,\n                  input: `Semaphore test ${i}`,\n                  expectedOutput: `Expected ${i}`\n                }\n              ],\n              model: 'gpt-3.5-turbo',\n              semaphoreId: semaphoreId\n            })\n        );\n      }\n\n      const responses = await Promise.all(testPromises);\n      \n      // Check semaphore status\n      const statusResponse = await request(app)\n        .get(`/api/test-execution/semaphore/${semaphoreId}/status`)\n        .expect(200);\n\n      assert(statusResponse.body.success === true);\n      expect(statusResponse.body.data).to.have.property('availablePermits');\n      expect(statusResponse.body.data).to.have.property('queuedRequests');\n      expect(statusResponse.body.data.availablePermits).to.be.at.most(3);\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    it('should handle test execution failures gracefully', async () => {\n      const response = await request(app)\n        .post('/api/test-execution/parallel')\n        .send({\n          cardId: testCardId,\n          testCases: [\n            {\n              id: 'failing-test',\n              input: 'This test will fail',\n              expectedOutput: 'This should cause an error'\n            }\n          ],\n          model: 'invalid-model', // This should cause an error\n          parallelism: 1\n        })\n        .expect(200);\n\n      const executionId = response.body.data.executionId;\n\n      // Wait for execution to complete\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Check execution status\n      const statusResponse = await request(app)\n        .get(`/api/test-execution/${executionId}/status`)\n        .expect(200);\n\n      assert(statusResponse.body.success === true);\n      expect(statusResponse.body.data.status).to.be.oneOf(['failed', 'completed']);\n      \n      if (statusResponse.body.data.status === 'failed') {\n        expect(statusResponse.body.data).to.have.property('error');\n      }\n    });\n\n    it('should handle queue overflow gracefully', async () => {\n      // Set a small queue limit\n      await testQueueManager.setQueueLimit(5);\n\n      const testPromises = [];\n      \n      // Submit more tests than the queue can handle\n      for (let i = 0; i < 10; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `overflow-test-${i}`,\n                  input: `Overflow test ${i}`,\n                  expectedOutput: `Expected ${i}`\n                }\n              ],\n              model: 'gpt-3.5-turbo'\n            })\n        );\n      }\n\n      const responses = await Promise.all(testPromises);\n      \n      // Some should be rejected due to queue overflow\n      let acceptedCount = 0;\n      let rejectedCount = 0;\n      \n      for (const response of responses) {\n        if (response.status === 200) {\n          acceptedCount++;\n        } else if (response.status === 429) { // Too many requests\n          rejectedCount++;\n        }\n      }\n\n      expect(acceptedCount).to.be.at.most(5);\n      expect(rejectedCount).to.be.greaterThan(0);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    it('should handle high-volume parallel test execution', async () => {\n      const startTime = Date.now();\n      \n      // Submit a large number of tests\n      const testPromises = [];\n      for (let i = 0; i < 50; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `volume-test-${i}`,\n                  input: `Volume test ${i}`,\n                  expectedOutput: `Expected ${i}`\n                }\n              ],\n              model: 'gpt-3.5-turbo',\n              parallelism: 3\n            })\n        );\n      }\n\n      const responses = await Promise.all(testPromises);\n      const submissionTime = Date.now() - startTime;\n\n      // All submissions should complete within reasonable time\n      expect(submissionTime).to.be.below(10000); // 10 seconds\n      \n      // Most should be accepted\n      const successfulSubmissions = responses.filter(r => r.status === 200).length;\n      expect(successfulSubmissions).to.be.above(40); // At least 80% success rate\n\n      // Check system performance\n      const performanceResponse = await request(app)\n        .get('/api/test-execution/performance/metrics')\n        .expect(200);\n\n      assert(performanceResponse.body.success === true);\n      expect(performanceResponse.body.data).to.have.property('throughput');\n      expect(performanceResponse.body.data).to.have.property('averageWaitTime');\n      expect(performanceResponse.body.data).to.have.property('systemLoad');\n    });\n  });\n\n  describe('Integration with Analytics', () => {\n    it('should track parallel execution metrics', async () => {\n      // Submit some parallel tests\n      const testPromises = [];\n      for (let i = 0; i < 5; i++) {\n        testPromises.push(\n          request(app)\n            .post('/api/test-execution/parallel')\n            .send({\n              cardId: testCardId,\n              testCases: [\n                {\n                  id: `analytics-test-${i}`,\n                  input: `Analytics test ${i}`,\n                  expectedOutput: `Expected ${i}`\n                }\n              ],\n              model: 'gpt-3.5-turbo'\n            })\n        );\n      }\n\n      await Promise.all(testPromises);\n\n      // Check analytics data\n      const analyticsResponse = await request(app)\n        .get('/api/analytics/parallel-execution')\n        .expect(200);\n\n      assert(analyticsResponse.body.success === true);\n      expect(analyticsResponse.body.data).to.have.property('totalParallelTests');\n      expect(analyticsResponse.body.data).to.have.property('averageParallelism');\n      expect(analyticsResponse.body.data).to.have.property('resourceEfficiency');\n      expect(analyticsResponse.body.data).to.have.property('queueMetrics');\n    });\n  });\n});"],"names":["describe","testQueueManager","resourceManager","semaphore","testCardId","beforeEach","TestQueueManager","ResourceManager","Semaphore","initialize","afterEach","cleanup","it","testPromises","i","push","request","app","post","send","cardId","testCases","id","input","expectedOutput","model","parallelism","responses","Promise","all","response","expect","status","to","equal","assert","body","success","data","have","property","be","oneOf","setLimits","maxConcurrentTests","maxMemoryUsage","maxCpuUsage","priority","queueStatusResponse","get","running","at","most","lowPriorityResponse","highPriorityResponse","criticalPriorityResponse","queueResponse","an","priorities","map","item","monitoringResponse","interval","metrics","heavyTestPromises","Array","from","length","_","j","resolve","setTimeout","resourceResponse","queuedCount","runningCount","greaterThan","semaphoreResponse","name","permits","semaphoreId","statusResponse","availablePermits","executionId","setQueueLimit","acceptedCount","rejectedCount","startTime","Date","now","submissionTime","below","successfulSubmissions","filter","r","above","performanceResponse","analyticsResponse"],"mappings":"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"}