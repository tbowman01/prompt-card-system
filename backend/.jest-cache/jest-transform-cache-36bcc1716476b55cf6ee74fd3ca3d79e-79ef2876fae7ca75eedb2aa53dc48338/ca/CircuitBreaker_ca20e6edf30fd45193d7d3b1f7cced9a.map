{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/health/CircuitBreaker.ts"],"sourcesContent":["import { EventEmitter } from 'events';\n\nexport enum CircuitBreakerState {\n  CLOSED = 'CLOSED',       // Normal operation\n  OPEN = 'OPEN',           // Circuit is open, requests fail fast\n  HALF_OPEN = 'HALF_OPEN'  // Testing if service has recovered\n}\n\ninterface CircuitBreakerConfig {\n  failureThreshold: number;    // Number of failures before opening\n  resetTimeout: number;        // Time to wait before trying again (ms)\n  monitoringPeriod: number;    // Time window for failure counting (ms)\n  successThreshold: number;    // Successes needed to close from half-open\n}\n\ninterface CircuitBreakerStats {\n  state: CircuitBreakerState;\n  failureCount: number;\n  successCount: number;\n  nextAttempt: Date | null;\n  totalRequests: number;\n  totalFailures: number;\n  totalSuccesses: number;\n  uptime: number;\n  lastFailure: Date | null;\n  lastSuccess: Date | null;\n}\n\nexport class CircuitBreaker extends EventEmitter {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failureCount = 0;\n  private successCount = 0;\n  private nextAttempt: Date | null = null;\n  private config: CircuitBreakerConfig;\n  private readonly serviceName: string;\n  \n  // Statistics\n  private totalRequests = 0;\n  private totalFailures = 0;\n  private totalSuccesses = 0;\n  private lastFailure: Date | null = null;\n  private lastSuccess: Date | null = null;\n  private startTime = new Date();\n\n  constructor(serviceName: string, config: Partial<CircuitBreakerConfig> = {}) {\n    super();\n    this.serviceName = serviceName;\n    this.config = {\n      failureThreshold: 5,\n      resetTimeout: 60000, // 1 minute\n      monitoringPeriod: 300000, // 5 minutes\n      successThreshold: 3,\n      ...config\n    };\n  }\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    this.totalRequests++;\n\n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.state = CircuitBreakerState.HALF_OPEN;\n        this.successCount = 0;\n        console.log(`ðŸ”„ Circuit breaker for ${this.serviceName} moved to HALF_OPEN`);\n        this.emit('stateChanged', { \n          serviceName: this.serviceName, \n          state: this.state,\n          reason: 'Reset timeout elapsed'\n        });\n      } else {\n        const error = new Error(`Circuit breaker OPEN for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n        this.emit('requestRejected', { \n          serviceName: this.serviceName, \n          reason: 'Circuit breaker open',\n          nextAttempt: this.nextAttempt\n        });\n        throw error;\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.totalSuccesses++;\n    this.lastSuccess = new Date();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.successCount++;\n      if (this.successCount >= this.config.successThreshold) {\n        this.reset();\n      }\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      this.failureCount = 0; // Reset failure count on success\n    }\n\n    this.emit('success', { \n      serviceName: this.serviceName, \n      state: this.state,\n      successCount: this.successCount\n    });\n  }\n\n  private onFailure(error: any): void {\n    this.totalFailures++;\n    this.lastFailure = new Date();\n    this.failureCount++;\n\n    this.emit('failure', { \n      serviceName: this.serviceName, \n      state: this.state,\n      failureCount: this.failureCount,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      // Any failure in half-open state moves back to open\n      this.trip();\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      if (this.failureCount >= this.config.failureThreshold) {\n        this.trip();\n      }\n    }\n  }\n\n  private trip(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n    \n    console.log(`ðŸš¨ Circuit breaker OPENED for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n    \n    this.emit('opened', { \n      serviceName: this.serviceName, \n      failureCount: this.failureCount,\n      nextAttempt: this.nextAttempt,\n      reason: `Failure threshold reached (${this.config.failureThreshold} failures)`\n    });\n  }\n\n  private reset(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.nextAttempt = null;\n    \n    console.log(`âœ… Circuit breaker CLOSED for ${this.serviceName} - Service recovered`);\n    \n    this.emit('closed', { \n      serviceName: this.serviceName,\n      reason: `Service recovered (${this.config.successThreshold} successful requests)`\n    });\n  }\n\n  private shouldAttemptReset(): boolean {\n    return this.nextAttempt !== null && new Date() >= this.nextAttempt;\n  }\n\n  public getStats(): CircuitBreakerStats {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      nextAttempt: this.nextAttempt,\n      totalRequests: this.totalRequests,\n      totalFailures: this.totalFailures,\n      totalSuccesses: this.totalSuccesses,\n      uptime: Date.now() - this.startTime.getTime(),\n      lastFailure: this.lastFailure,\n      lastSuccess: this.lastSuccess\n    };\n  }\n\n  public forceOpen(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n    \n    console.log(`ðŸ”§ Circuit breaker MANUALLY OPENED for ${this.serviceName}`);\n    \n    this.emit('forceOpened', { \n      serviceName: this.serviceName,\n      reason: 'Manual intervention'\n    });\n  }\n\n  public forceClose(): void {\n    this.reset();\n    \n    console.log(`ðŸ”§ Circuit breaker MANUALLY CLOSED for ${this.serviceName}`);\n    \n    this.emit('forceClosed', { \n      serviceName: this.serviceName,\n      reason: 'Manual intervention'\n    });\n  }\n\n  public updateConfig(newConfig: Partial<CircuitBreakerConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    this.emit('configUpdated', { \n      serviceName: this.serviceName,\n      config: this.config\n    });\n  }\n}\n\nexport class CircuitBreakerRegistry {\n  private breakers = new Map<string, CircuitBreaker>();\n\n  getBreaker(serviceName: string, config?: Partial<CircuitBreakerConfig>): CircuitBreaker {\n    if (!this.breakers.has(serviceName)) {\n      const breaker = new CircuitBreaker(serviceName, config);\n      this.breakers.set(serviceName, breaker);\n      \n      // Forward events\n      breaker.on('opened', (data) => this.emit('breakerOpened', data));\n      breaker.on('closed', (data) => this.emit('breakerClosed', data));\n      breaker.on('stateChanged', (data) => this.emit('breakerStateChanged', data));\n      breaker.on('failure', (data) => this.emit('breakerFailure', data));\n      breaker.on('success', (data) => this.emit('breakerSuccess', data));\n    }\n    \n    return this.breakers.get(serviceName)!;\n  }\n\n  getAllBreakers(): Map<string, CircuitBreaker> {\n    return new Map(this.breakers);\n  }\n\n  getStats(): Record<string, CircuitBreakerStats> {\n    const stats: Record<string, CircuitBreakerStats> = {};\n    \n    for (const [serviceName, breaker] of this.breakers) {\n      stats[serviceName] = breaker.getStats();\n    }\n    \n    return stats;\n  }\n\n  removeBreaker(serviceName: string): boolean {\n    return this.breakers.delete(serviceName);\n  }\n\n  clear(): void {\n    this.breakers.clear();\n  }\n\n  // Event emitter functionality\n  private eventEmitter = new EventEmitter();\n  \n  on(event: string, listener: (...args: any[]) => void): this {\n    this.eventEmitter.on(event, listener);\n    return this;\n  }\n  \n  emit(event: string, ...args: any[]): boolean {\n    return this.eventEmitter.emit(event, ...args);\n  }\n  \n  off(event: string, listener: (...args: any[]) => void): this {\n    this.eventEmitter.off(event, listener);\n    return this;\n  }\n}\n\nexport const circuitBreakerRegistry = new CircuitBreakerRegistry();"],"names":["CircuitBreaker","CircuitBreakerRegistry","CircuitBreakerState","circuitBreakerRegistry","EventEmitter","execute","fn","totalRequests","state","shouldAttemptReset","successCount","console","log","serviceName","emit","reason","error","Error","nextAttempt","result","onSuccess","onFailure","totalSuccesses","lastSuccess","Date","config","successThreshold","reset","failureCount","totalFailures","lastFailure","message","trip","failureThreshold","now","resetTimeout","getStats","uptime","startTime","getTime","forceOpen","forceClose","updateConfig","newConfig","monitoringPeriod","getBreaker","breakers","has","breaker","set","on","data","get","getAllBreakers","Map","stats","removeBreaker","delete","clear","event","listener","eventEmitter","args","off"],"mappings":"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"}