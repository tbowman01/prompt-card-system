{"version":3,"names":["cov_24ee5noj3b","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","NodeSDK","Resource","SemanticResourceAttributes","getNodeAutoInstrumentations","PeriodicExportingMetricReader","PrometheusExporter","JaegerExporter","BatchSpanProcessor","ConsoleSpanExporter","WinstonInstrumentation","HttpInstrumentation","ExpressInstrumentation","RedisInstrumentation","SocketIoInstrumentation","trace","metrics","SpanStatusCode","context","TelemetryManager","initialize","resource","SERVICE_NAME","config","serviceName","SERVICE_VERSION","serviceVersion","DEPLOYMENT_ENVIRONMENT","environment","SERVICE_INSTANCE_ID","process","env","HOSTNAME","Date","now","spanProcessors","jaegerEndpoint","jaegerExporter","endpoint","push","enableConsoleExporter","prometheusExporter","port","prometheusPort","preventServerStart","sdk","metricReader","exporter","exportIntervalMillis","instrumentations","enabled","enableDetailedLogs","requestHook","span","request","setAttributes","headers","responseHook","response","get","route","path","method","start","tracer","getTracer","meter","getMeter","enableCustomMetrics","initializeCustomMetrics","console","log","error","requestCounter","createCounter","description","requestDuration","createHistogram","boundaries","errorCounter","activeConnections","createUpDownCounter","dbOperationDuration","customMetrics","set","startSpan","name","attributes","withSpan","fn","result","with","setSpan","active","setStatus","code","OK","ERROR","message","Error","recordException","end","recordHttpRequest","statusCode","duration","add","status_code","toString","record","recordError","errorType","operation","error_type","recordWebSocketConnection","delta","recordDatabaseOperation","table","success","recordCustomMetric","metricName","metric","shutdown","constructor","Map","npm_package_version","NODE_ENV","JAEGER_ENDPOINT","parseInt","PROMETHEUS_PORT","TELEMETRY_DETAILED_LOGS","TELEMETRY_CUSTOM_METRICS","telemetryManager","initializeTelemetry","getTelemetryManager","traced","operationName","target","propertyKey","descriptor","originalMethod","spanName","args","telemetry","apply","length"],"sources":["tracer.ts"],"sourcesContent":["/**\n * OpenTelemetry Tracing Configuration\n * \n * Provides distributed tracing for the Prompt Card System backend.\n * Integrates with Jaeger for trace visualization and Prometheus for metrics.\n */ function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\nimport { PrometheusExporter } from '@opentelemetry/exporter-prometheus';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nimport { BatchSpanProcessor, ConsoleSpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { WinstonInstrumentation } from '@opentelemetry/instrumentation-winston';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { ExpressInstrumentation } from '@opentelemetry/instrumentation-express';\nimport { RedisInstrumentation } from '@opentelemetry/instrumentation-redis-4';\n// import { SqliteInstrumentation } from '@opentelemetry/instrumentation-sqlite3';\nimport { SocketIoInstrumentation } from '@opentelemetry/instrumentation-socket.io';\nimport { trace, metrics, SpanStatusCode, context } from '@opentelemetry/api';\nexport class TelemetryManager {\n    /**\n   * Initialize OpenTelemetry SDK with all instrumentations\n   */ initialize() {\n        try {\n            // Create resource identification\n            const resource = new Resource({\n                [SemanticResourceAttributes.SERVICE_NAME]: this.config.serviceName,\n                [SemanticResourceAttributes.SERVICE_VERSION]: this.config.serviceVersion,\n                [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: this.config.environment,\n                [SemanticResourceAttributes.SERVICE_INSTANCE_ID]: process.env.HOSTNAME || `${this.config.serviceName}-${Date.now()}`\n            });\n            // Configure span processors\n            const spanProcessors = [];\n            // Jaeger exporter for production tracing\n            if (this.config.jaegerEndpoint && this.config.environment !== 'test') {\n                const jaegerExporter = new JaegerExporter({\n                    endpoint: this.config.jaegerEndpoint\n                });\n                spanProcessors.push(new BatchSpanProcessor(jaegerExporter));\n            }\n            // Console exporter for development\n            if (this.config.enableConsoleExporter) {\n                spanProcessors.push(new BatchSpanProcessor(new ConsoleSpanExporter()));\n            }\n            // Prometheus metrics exporter\n            const prometheusExporter = new PrometheusExporter({\n                port: this.config.prometheusPort,\n                preventServerStart: true\n            });\n            // Configure SDK\n            this.sdk = new NodeSDK({\n                resource,\n                spanProcessors,\n                metricReader: new PeriodicExportingMetricReader({\n                    exporter: prometheusExporter,\n                    exportIntervalMillis: 10000\n                }),\n                instrumentations: [\n                    getNodeAutoInstrumentations({\n                        // Configure specific instrumentations\n                        '@opentelemetry/instrumentation-http': {\n                            enabled: true\n                        },\n                        '@opentelemetry/instrumentation-express': {\n                            enabled: true\n                        },\n                        '@opentelemetry/instrumentation-fs': {\n                            enabled: this.config.enableDetailedLogs\n                        }\n                    }),\n                    new WinstonInstrumentation({\n                        enabled: true\n                    }),\n                    new HttpInstrumentation({\n                        enabled: true,\n                        requestHook: (span, request)=>{\n                            span.setAttributes({\n                                'http.request.body.size': request.headers['content-length'] || 0,\n                                'custom.api.version': request.headers['api-version'] || 'v1'\n                            });\n                        },\n                        responseHook: (span, response)=>{\n                            span.setAttributes({\n                                'http.response.body.size': response.get('content-length') || 0\n                            });\n                        }\n                    }),\n                    new ExpressInstrumentation({\n                        enabled: true,\n                        requestHook: (span, request)=>{\n                            span.setAttributes({\n                                'express.route': request.route?.path || 'unknown',\n                                'express.method': request.method\n                            });\n                        }\n                    }),\n                    new RedisInstrumentation({\n                        enabled: true\n                    }),\n                    // new SqliteInstrumentation({\n                    //   enabled: true,\n                    // }),\n                    new SocketIoInstrumentation({\n                        enabled: true\n                    })\n                ]\n            });\n            // Start the SDK\n            this.sdk.start();\n            // Initialize tracers and meters\n            this.tracer = trace.getTracer(this.config.serviceName, this.config.serviceVersion);\n            this.meter = metrics.getMeter(this.config.serviceName, this.config.serviceVersion);\n            // Initialize custom metrics if enabled\n            if (this.config.enableCustomMetrics) {\n                this.initializeCustomMetrics();\n            }\n            console.log(`üîç OpenTelemetry initialized for ${this.config.serviceName} v${this.config.serviceVersion}`);\n            console.log(`üìä Metrics endpoint: http://localhost:${this.config.prometheusPort}/metrics`);\n            console.log(`üîó Jaeger endpoint: ${this.config.jaegerEndpoint}`);\n        } catch (error) {\n            console.error('‚ùå Failed to initialize OpenTelemetry:', error);\n            throw error;\n        }\n    }\n    /**\n   * Initialize custom metrics for business logic monitoring\n   */ initializeCustomMetrics() {\n        // HTTP request metrics\n        this.requestCounter = this.meter.createCounter('http_requests_total', {\n            description: 'Total number of HTTP requests'\n        });\n        this.requestDuration = this.meter.createHistogram('http_request_duration_seconds', {\n            description: 'HTTP request duration in seconds',\n            boundaries: [\n                0.001,\n                0.005,\n                0.01,\n                0.05,\n                0.1,\n                0.5,\n                1,\n                5,\n                10\n            ]\n        });\n        this.errorCounter = this.meter.createCounter('application_errors_total', {\n            description: 'Total number of application errors'\n        });\n        // WebSocket connection metrics\n        this.activeConnections = this.meter.createUpDownCounter('websocket_connections_active', {\n            description: 'Current number of active WebSocket connections'\n        });\n        // Database operation metrics\n        this.dbOperationDuration = this.meter.createHistogram('database_operation_duration_seconds', {\n            description: 'Database operation duration in seconds',\n            boundaries: [\n                0.001,\n                0.01,\n                0.1,\n                0.5,\n                1,\n                5\n            ]\n        });\n        // Business metrics\n        this.customMetrics.set('prompt_cards_created', this.meter.createCounter('prompt_cards_created_total', {\n            description: 'Total number of prompt cards created'\n        }));\n        this.customMetrics.set('test_executions', this.meter.createCounter('test_executions_total', {\n            description: 'Total number of test executions'\n        }));\n        this.customMetrics.set('ai_model_requests', this.meter.createCounter('ai_model_requests_total', {\n            description: 'Total number of AI model requests'\n        }));\n        this.customMetrics.set('cache_operations', this.meter.createCounter('cache_operations_total', {\n            description: 'Total number of cache operations'\n        }));\n    }\n    /**\n   * Create a new span for operation tracing\n   */ startSpan(name, attributes) {\n        const span = this.tracer.startSpan(name, {\n            attributes: {\n                'service.name': this.config.serviceName,\n                'service.version': this.config.serviceVersion,\n                ...attributes\n            }\n        });\n        return span;\n    }\n    /**\n   * Create an active span that automatically manages context\n   */ withSpan(name, fn, attributes) {\n        const span = this.startSpan(name, attributes);\n        try {\n            const result = context.with(trace.setSpan(context.active(), span), ()=>fn(span));\n            span.setStatus({\n                code: SpanStatusCode.OK\n            });\n            return result;\n        } catch (error) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: error instanceof Error ? error.message : 'Unknown error'\n            });\n            span.recordException(error);\n            throw error;\n        } finally{\n            span.end();\n        }\n    }\n    /**\n   * Record HTTP request metrics\n   */ recordHttpRequest(method, route, statusCode, duration) {\n        if (!this.config.enableCustomMetrics) return;\n        this.requestCounter?.add(1, {\n            method,\n            route,\n            status_code: statusCode.toString()\n        });\n        this.requestDuration?.record(duration, {\n            method,\n            route,\n            status_code: statusCode.toString()\n        });\n    }\n    /**\n   * Record application error\n   */ recordError(errorType, operation, message) {\n        if (!this.config.enableCustomMetrics) return;\n        this.errorCounter?.add(1, {\n            error_type: errorType,\n            operation,\n            message: message || 'unknown'\n        });\n    }\n    /**\n   * Record WebSocket connection change\n   */ recordWebSocketConnection(delta) {\n        if (!this.config.enableCustomMetrics) return;\n        this.activeConnections?.add(delta);\n    }\n    /**\n   * Record database operation metrics\n   */ recordDatabaseOperation(operation, table, duration, success) {\n        if (!this.config.enableCustomMetrics) return;\n        this.dbOperationDuration?.record(duration, {\n            operation,\n            table,\n            success: success.toString()\n        });\n    }\n    /**\n   * Record custom business metric\n   */ recordCustomMetric(metricName, value, attributes) {\n        if (!this.config.enableCustomMetrics) return;\n        const metric = this.customMetrics.get(metricName);\n        if (metric) {\n            metric.add(value, attributes || {});\n        }\n    }\n    /**\n   * Get the tracer instance\n   */ getTracer() {\n        return this.tracer;\n    }\n    /**\n   * Get the meter instance\n   */ getMeter() {\n        return this.meter;\n    }\n    /**\n   * Gracefully shutdown telemetry\n   */ async shutdown() {\n        try {\n            if (this.sdk) {\n                await this.sdk.shutdown();\n                console.log('üîç OpenTelemetry shutdown completed');\n            }\n        } catch (error) {\n            console.error('‚ùå Error during OpenTelemetry shutdown:', error);\n        }\n    }\n    constructor(config){\n        _define_property(this, \"sdk\", null);\n        _define_property(this, \"config\", void 0);\n        _define_property(this, \"tracer\", void 0);\n        _define_property(this, \"meter\", void 0);\n        // Custom metrics\n        _define_property(this, \"requestCounter\", void 0);\n        _define_property(this, \"requestDuration\", void 0);\n        _define_property(this, \"errorCounter\", void 0);\n        _define_property(this, \"activeConnections\", void 0);\n        _define_property(this, \"dbOperationDuration\", void 0);\n        _define_property(this, \"customMetrics\", new Map());\n        this.config = {\n            serviceName: 'prompt-card-backend',\n            serviceVersion: process.env.npm_package_version || '1.0.0',\n            environment: process.env.NODE_ENV || 'development',\n            jaegerEndpoint: process.env.JAEGER_ENDPOINT || 'http://localhost:14268/api/traces',\n            prometheusPort: parseInt(process.env.PROMETHEUS_PORT || '9090'),\n            enableConsoleExporter: process.env.NODE_ENV === 'development',\n            enableDetailedLogs: process.env.TELEMETRY_DETAILED_LOGS === 'true',\n            enableCustomMetrics: process.env.TELEMETRY_CUSTOM_METRICS !== 'false',\n            ...config\n        };\n    }\n}\n// Singleton instance\nlet telemetryManager = null;\n/**\n * Initialize telemetry with configuration\n */ export function initializeTelemetry(config = {}) {\n    if (!telemetryManager) {\n        telemetryManager = new TelemetryManager(config);\n        telemetryManager.initialize();\n    }\n    return telemetryManager;\n}\n/**\n * Get the current telemetry manager instance\n */ export function getTelemetryManager() {\n    return telemetryManager;\n}\n/**\n * Utility function to create traced decorators for class methods\n */ export function traced(operationName) {\n    return function(target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        const spanName = operationName || `${target.constructor.name}.${propertyKey}`;\n        descriptor.value = function(...args) {\n            const telemetry = getTelemetryManager();\n            if (!telemetry) {\n                return originalMethod.apply(this, args);\n            }\n            return telemetry.withSpan(spanName, (span)=>{\n                span.setAttributes({\n                    'method.class': target.constructor.name,\n                    'method.name': propertyKey,\n                    'method.args.count': args.length\n                });\n                return originalMethod.apply(this, args);\n            });\n        };\n        return descriptor;\n    };\n}\nexport default TelemetryManager;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}