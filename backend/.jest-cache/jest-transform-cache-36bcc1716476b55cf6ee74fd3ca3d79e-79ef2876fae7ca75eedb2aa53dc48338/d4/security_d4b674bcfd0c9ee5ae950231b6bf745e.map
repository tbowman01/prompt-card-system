{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/security.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport {\n  securityMonitor,\n  logAggregator,\n  alertingSystem,\n  complianceChecker,\n  SecurityEvent,\n  LogFilter,\n  Alert,\n  AlertRule,\n  NotificationChannel,\n  ComplianceCheck\n} from '../services/security';\n\nconst router = Router();\n\n// Security monitoring endpoints\nrouter.get('/status', async (req: Request, res: Response) => {\n  try {\n    const metrics = securityMonitor.getSecurityMetrics();\n    const alertStats = alertingSystem.getAlertStatistics();\n    const complianceMetrics = complianceChecker.getComplianceMetrics();\n    \n    res.json({\n      status: 'active',\n      timestamp: new Date().toISOString(),\n      security: metrics,\n      alerts: alertStats,\n      compliance: complianceMetrics\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get security status',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Vulnerability scanning endpoints\nrouter.post('/scan/dependencies', async (req: Request, res: Response) => {\n  try {\n    const report = await securityMonitor.scanDependencies();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Dependency scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/scan/code', async (req, res) => {\n  try {\n    const report = await securityMonitor.scanCode();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Code scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/scan/infrastructure', async (req, res) => {\n  try {\n    const report = await securityMonitor.scanInfrastructure();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Infrastructure scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/scan/comprehensive', async (req, res) => {\n  try {\n    const reports = await securityMonitor.performComprehensiveScan();\n    res.json({\n      timestamp: new Date().toISOString(),\n      reports\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Comprehensive scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Security events endpoints\nrouter.get('/events', (req, res) => {\n  try {\n    const {\n      severity,\n      type,\n      source,\n      since,\n      limit = '100'\n    } = req.query;\n    \n    const filters: any = {};\n    if (severity) filters.severity = severity;\n    if (type) filters.type = type;\n    if (source) filters.source = source as string;\n    if (since) filters.since = new Date(since as string);\n    filters.limit = parseInt(limit as string);\n    \n    const events = securityMonitor.getSecurityEvents(filters);\n    res.json({\n      total: events.length,\n      events\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get security events',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/events', (req, res) => {\n  try {\n    const { severity, type, source, message, details } = req.body;\n    \n    if (!severity || !type || !source || !message) {\n      return res.status(400).json({\n        error: 'Missing required fields: severity, type, source, message'\n      });\n    }\n    \n    securityMonitor.logSecurityEvent({\n      severity,\n      type,\n      source,\n      message,\n      details: details || {},\n      resolved: false\n    });\n    \n    res.status(201).json({ status: 'Event logged successfully' });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to log security event',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Log aggregation endpoints\nrouter.get('/logs', (req, res) => {\n  try {\n    const {\n      level,\n      source,\n      tags,\n      searchTerm,\n      since,\n      until,\n      limit = '100'\n    } = req.query;\n    \n    const filter: LogFilter = {};\n    if (level) filter.level = (level as string).split(',') as any;\n    if (source) filter.source = (source as string).split(',');\n    if (tags) filter.tags = (tags as string).split(',');\n    if (searchTerm) filter.searchTerm = searchTerm as string;\n    if (since || until) {\n      filter.timeRange = {\n        start: since ? new Date(since as string) : new Date(0),\n        end: until ? new Date(until as string) : new Date()\n      };\n    }\n    filter.limit = parseInt(limit as string);\n    \n    const logs = logAggregator.getLogs(filter);\n    res.json({\n      total: logs.length,\n      logs\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get logs',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/logs/analysis', async (req, res) => {\n  try {\n    const { since, until } = req.query;\n    \n    const timeRange = (since || until) ? {\n      start: since ? new Date(since as string) : new Date(Date.now() - 24 * 60 * 60 * 1000),\n      end: until ? new Date(until as string) : new Date()\n    } : undefined;\n    \n    const analysis = await logAggregator.performLogAnalysis(timeRange);\n    res.json(analysis);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to perform log analysis',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/logs/statistics', (req, res) => {\n  try {\n    const stats = logAggregator.getLogStatistics();\n    res.json(stats);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get log statistics',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Alerting endpoints\nrouter.get('/alerts', (req, res) => {\n  try {\n    const {\n      severity,\n      type,\n      acknowledged,\n      resolved,\n      since,\n      limit = '50'\n    } = req.query;\n    \n    const filters: any = {};\n    if (severity) filters.severity = (severity as string).split(',');\n    if (type) filters.type = (type as string).split(',');\n    if (acknowledged !== undefined) filters.acknowledged = acknowledged === 'true';\n    if (resolved !== undefined) filters.resolved = resolved === 'true';\n    if (since) filters.since = new Date(since as string);\n    filters.limit = parseInt(limit as string);\n    \n    const alerts = alertingSystem.getAlerts(filters);\n    res.json({\n      total: alerts.length,\n      alerts\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alerts',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.patch('/alerts/:alertId/acknowledge', (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { acknowledgedBy } = req.body;\n    \n    if (!acknowledgedBy) {\n      return res.status(400).json({\n        error: 'acknowledgedBy field is required'\n      });\n    }\n    \n    const success = alertingSystem.acknowledgeAlert(alertId, acknowledgedBy);\n    \n    if (success) {\n      res.json({ status: 'Alert acknowledged successfully' });\n    } else {\n      res.status(404).json({ error: 'Alert not found or already acknowledged' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to acknowledge alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.patch('/alerts/:alertId/resolve', (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { resolvedBy } = req.body;\n    \n    if (!resolvedBy) {\n      return res.status(400).json({\n        error: 'resolvedBy field is required'\n      });\n    }\n    \n    const success = alertingSystem.resolveAlert(alertId, resolvedBy);\n    \n    if (success) {\n      res.json({ status: 'Alert resolved successfully' });\n    } else {\n      res.status(404).json({ error: 'Alert not found or already resolved' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to resolve alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Alert rules management\nrouter.get('/alert-rules', (req, res) => {\n  try {\n    const rules = alertingSystem.getRules();\n    res.json({ rules });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert rules',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/alert-rules', (req, res) => {\n  try {\n    const rule = alertingSystem.addRule(req.body);\n    res.status(201).json(rule);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to create alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.put('/alert-rules/:ruleId', (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const success = alertingSystem.updateRule(ruleId, req.body);\n    \n    if (success) {\n      res.json({ status: 'Rule updated successfully' });\n    } else {\n      res.status(404).json({ error: 'Rule not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.delete('/alert-rules/:ruleId', (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const success = alertingSystem.removeRule(ruleId);\n    \n    if (success) {\n      res.json({ status: 'Rule deleted successfully' });\n    } else {\n      res.status(404).json({ error: 'Rule not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Notification channels management\nrouter.get('/notification-channels', (req, res) => {\n  try {\n    const channels = alertingSystem.getChannels();\n    res.json({ channels });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get notification channels',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/notification-channels', (req, res) => {\n  try {\n    const channel = alertingSystem.addChannel(req.body);\n    res.status(201).json(channel);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to create notification channel',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.put('/notification-channels/:channelId', (req, res) => {\n  try {\n    const { channelId } = req.params;\n    const success = alertingSystem.updateChannel(channelId, req.body);\n    \n    if (success) {\n      res.json({ status: 'Channel updated successfully' });\n    } else {\n      res.status(404).json({ error: 'Channel not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update notification channel',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.delete('/notification-channels/:channelId', (req, res) => {\n  try {\n    const { channelId } = req.params;\n    const success = alertingSystem.removeChannel(channelId);\n    \n    if (success) {\n      res.json({ status: 'Channel deleted successfully' });\n    } else {\n      res.status(404).json({ error: 'Channel not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete notification channel',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Compliance endpoints\nrouter.get('/compliance/status', (req, res) => {\n  try {\n    const metrics = complianceChecker.getComplianceMetrics();\n    const latestReport = complianceChecker.getLatestReport();\n    \n    res.json({\n      metrics,\n      latestReport\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get compliance status',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/compliance/scan', async (req, res) => {\n  try {\n    const { framework } = req.body;\n    const report = await complianceChecker.generateComplianceReport(framework);\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Compliance scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/compliance/reports', (req, res) => {\n  try {\n    const { limit = '10' } = req.query;\n    const reports = complianceChecker.getReports(parseInt(limit as string));\n    res.json({ reports });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get compliance reports',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/compliance/checks', (req, res) => {\n  try {\n    const { category, framework, severity, automated } = req.query;\n    \n    const filters: any = {};\n    if (category) filters.category = category;\n    if (framework) filters.framework = framework;\n    if (severity) filters.severity = severity;\n    if (automated !== undefined) filters.automated = automated === 'true';\n    \n    const checks = complianceChecker.getChecks(filters);\n    res.json({ checks });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get compliance checks',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/compliance/checks/:checkId/run', async (req, res) => {\n  try {\n    const { checkId } = req.params;\n    const result = await complianceChecker.runCheck(checkId);\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to run compliance check',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Security dashboard endpoint\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const [securityMetrics, alertStats, complianceMetrics, logStats] = await Promise.all([\n      Promise.resolve(securityMonitor.getSecurityMetrics()),\n      Promise.resolve(alertingSystem.getAlertStatistics()),\n      Promise.resolve(complianceChecker.getComplianceMetrics()),\n      Promise.resolve(logAggregator.getLogStatistics())\n    ]);\n    \n    const recentAlerts = alertingSystem.getAlerts({ limit: 10 });\n    const recentEvents = securityMonitor.getSecurityEvents({ limit: 10 });\n    const latestAnalysis = logAggregator.getAnalyses(1)[0];\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      metrics: {\n        security: securityMetrics,\n        alerts: alertStats,\n        compliance: complianceMetrics,\n        logs: logStats\n      },\n      recent: {\n        alerts: recentAlerts,\n        events: recentEvents,\n        analysis: latestAnalysis\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get security dashboard data',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport { router as securityRoutes };"],"names":["securityRoutes","router","Router","get","req","res","metrics","securityMonitor","getSecurityMetrics","alertStats","alertingSystem","getAlertStatistics","complianceMetrics","complianceChecker","getComplianceMetrics","json","status","timestamp","Date","toISOString","security","alerts","compliance","error","message","Error","post","report","scanDependencies","scanCode","scanInfrastructure","reports","performComprehensiveScan","severity","type","source","since","limit","query","filters","parseInt","events","getSecurityEvents","total","length","details","body","logSecurityEvent","resolved","level","tags","searchTerm","until","filter","split","timeRange","start","end","logs","logAggregator","getLogs","now","undefined","analysis","performLogAnalysis","stats","getLogStatistics","acknowledged","getAlerts","patch","alertId","params","acknowledgedBy","success","acknowledgeAlert","resolvedBy","resolveAlert","rules","getRules","rule","addRule","put","ruleId","updateRule","delete","removeRule","channels","getChannels","channel","addChannel","channelId","updateChannel","removeChannel","latestReport","getLatestReport","framework","generateComplianceReport","getReports","category","automated","checks","getChecks","checkId","result","runCheck","securityMetrics","logStats","Promise","all","resolve","recentAlerts","recentEvents","latestAnalysis","getAnalyses","recent"],"mappings":"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"}