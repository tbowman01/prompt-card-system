{"version":3,"names":["cov_2kugt2zsg3","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","db","CostTracker","initializeDatabase","console","log","exec","initializePricing","defaultPricing","model","prompt_token_cost","completion_token_cost","context_window","last_updated","Date","toISOString","insertPricing","prepare","pricing","run","modelPricing","set","trackUsage","executionId","promptTokens","completionTokens","executionTimeMs","testCaseId","promptCardId","totalTokens","cost","calculateCost","insertCost","result","costData","id","lastInsertRowid","execution_id","prompt_tokens","completion_tokens","total_tokens","cost_usd","execution_time_ms","test_case_id","prompt_card_id","created_at","checkBudgetAlerts","get","warn","promptCost","completionCost","getCostSummary","startDate","endDate","query","params","push","results","all","costByModel","tokensByModel","executionsByModel","totalCost","totalPromptTokens","totalCompletionTokens","totalExecutions","total_cost","tokens","executions","total_executions","total_prompt_tokens","total_completion_tokens","averageCostPerExecution","averageTokensPerExecution","generateOptimizationRecommendations","recommendations","summary","sortedModels","entries","sort","a","length","mostExpensiveModel","mostExpensiveCost","cheapestModel","cheapestCost","type","title","description","toFixed","estimatedSavings","estimatedSavingsPercentage","priority","actionRequired","metadata","currentModel","suggestedModel","currentCost","suggestedCost","averageTokens","avgCostPerExecution","createBudgetAlert","name","threshold","insertAlert","current_amount","percentage_used","status","alerts","triggeredAlerts","alert","currentAmount","getCurrentSpendingForAlert","percentageUsed","newStatus","now","getFullYear","getMonth","getDate","weekStart","setDate","getDay","generateCostPrediction","period","days","historicalData","predictedCost","confidence","basedOnDays","trend","factors","costs","map","d","daily_cost","avgDailyCost","reduce","recentCosts","slice","earlierCosts","recentAvg","earlierAvg","multiplier","Math","min","getUsageAnalytics","trendData","dayCount","max","ceil","getTime","peakDay","day","date","modelUsage","percentage","start","end","averageCostPerDay","averageTokensPerDay","averageExecutionsPerDay","peakUsageDay","peakUsageCost","costTrend","calculateROI","successfulExecutions","successful_executions","failedExecutions","failed_executions","successRate","averageCostPerSuccess","costEfficiency","getBudgetAlerts","updateOptimizationSettings","settings","optimizationSettings","enableAutoOptimization","costThreshold","tokenThreshold","JSON","stringify","modelPreferences","promptOptimization","batchingEnabled","cachingEnabled","getOptimizationSettings","constructor","Map","costTracker"],"sources":["CostTracker.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { db } from '../database/connection';\n/**\n * Comprehensive Cost Tracking Service\n * Tracks token usage, calculates costs, provides optimization recommendations\n */ export class CostTracker {\n    /**\n   * Initialize database tables for cost tracking\n   */ initializeDatabase() {\n        console.log('Initializing cost tracking database...');\n        // Cost tracking data table\n        db.exec(`\n      CREATE TABLE IF NOT EXISTS cost_tracking (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        prompt_tokens INTEGER NOT NULL DEFAULT 0,\n        completion_tokens INTEGER NOT NULL DEFAULT 0,\n        total_tokens INTEGER NOT NULL DEFAULT 0,\n        cost_usd REAL NOT NULL DEFAULT 0,\n        execution_time_ms INTEGER NOT NULL DEFAULT 0,\n        test_case_id INTEGER,\n        prompt_card_id INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n        // Model pricing table\n        db.exec(`\n      CREATE TABLE IF NOT EXISTS model_pricing (\n        model TEXT PRIMARY KEY,\n        prompt_token_cost REAL NOT NULL,\n        completion_token_cost REAL NOT NULL,\n        context_window INTEGER NOT NULL,\n        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n        // Budget alerts table\n        db.exec(`\n      CREATE TABLE IF NOT EXISTS budget_alerts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        type TEXT NOT NULL CHECK (type IN ('daily', 'weekly', 'monthly', 'total')),\n        threshold REAL NOT NULL,\n        current_amount REAL DEFAULT 0,\n        percentage_used REAL DEFAULT 0,\n        status TEXT DEFAULT 'active' CHECK (status IN ('active', 'triggered', 'exceeded')),\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        triggered_at DATETIME\n      )\n    `);\n        // Cost optimization settings table\n        db.exec(`\n      CREATE TABLE IF NOT EXISTS cost_optimization_settings (\n        id INTEGER PRIMARY KEY CHECK (id = 1),\n        enable_auto_optimization BOOLEAN DEFAULT 1,\n        cost_threshold REAL DEFAULT 10.0,\n        token_threshold INTEGER DEFAULT 100000,\n        model_preferences TEXT DEFAULT '[]',\n        prompt_optimization BOOLEAN DEFAULT 1,\n        batching_enabled BOOLEAN DEFAULT 1,\n        caching_enabled BOOLEAN DEFAULT 1,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n        // Create indexes for better performance\n        db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_execution_id ON cost_tracking(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_model ON cost_tracking(model);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_created_at ON cost_tracking(created_at);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_prompt_card_id ON cost_tracking(prompt_card_id);\n    `);\n        console.log('Cost tracking database initialized successfully');\n    }\n    /**\n   * Initialize model pricing data\n   */ initializePricing() {\n        const defaultPricing = [\n            {\n                model: 'gpt-4',\n                prompt_token_cost: 0.03,\n                completion_token_cost: 0.06,\n                context_window: 8192,\n                last_updated: new Date().toISOString()\n            },\n            {\n                model: 'gpt-4-turbo',\n                prompt_token_cost: 0.01,\n                completion_token_cost: 0.03,\n                context_window: 128000,\n                last_updated: new Date().toISOString()\n            },\n            {\n                model: 'gpt-3.5-turbo',\n                prompt_token_cost: 0.0015,\n                completion_token_cost: 0.002,\n                context_window: 16385,\n                last_updated: new Date().toISOString()\n            },\n            {\n                model: 'llama3',\n                prompt_token_cost: 0.0,\n                completion_token_cost: 0.0,\n                context_window: 8192,\n                last_updated: new Date().toISOString()\n            },\n            {\n                model: 'claude-3-sonnet',\n                prompt_token_cost: 0.003,\n                completion_token_cost: 0.015,\n                context_window: 200000,\n                last_updated: new Date().toISOString()\n            }\n        ];\n        // Insert default pricing into database\n        const insertPricing = db.prepare(`\n      INSERT OR REPLACE INTO model_pricing \n      (model, prompt_token_cost, completion_token_cost, context_window, last_updated)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n        for (const pricing of defaultPricing){\n            insertPricing.run(pricing.model, pricing.prompt_token_cost, pricing.completion_token_cost, pricing.context_window, pricing.last_updated);\n            this.modelPricing.set(pricing.model, pricing);\n        }\n        console.log('Model pricing initialized');\n    }\n    /**\n   * Track token usage and calculate cost for an execution\n   */ async trackUsage(executionId, model, promptTokens, completionTokens, executionTimeMs, testCaseId, promptCardId) {\n        const totalTokens = promptTokens + completionTokens;\n        const cost = this.calculateCost(model, promptTokens, completionTokens);\n        const insertCost = db.prepare(`\n      INSERT INTO cost_tracking \n      (execution_id, model, prompt_tokens, completion_tokens, total_tokens, cost_usd, execution_time_ms, test_case_id, prompt_card_id)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n        const result = insertCost.run(executionId, model, promptTokens, completionTokens, totalTokens, cost, executionTimeMs, testCaseId, promptCardId);\n        const costData = {\n            id: result.lastInsertRowid,\n            execution_id: executionId,\n            model,\n            prompt_tokens: promptTokens,\n            completion_tokens: completionTokens,\n            total_tokens: totalTokens,\n            cost_usd: cost,\n            execution_time_ms: executionTimeMs,\n            test_case_id: testCaseId,\n            prompt_card_id: promptCardId,\n            created_at: new Date().toISOString()\n        };\n        // Check budget alerts\n        await this.checkBudgetAlerts();\n        return costData;\n    }\n    /**\n   * Calculate cost for given token usage\n   */ calculateCost(model, promptTokens, completionTokens) {\n        const pricing = this.modelPricing.get(model);\n        if (!pricing) {\n            console.warn(`No pricing found for model: ${model}, assuming zero cost`);\n            return 0;\n        }\n        const promptCost = promptTokens / 1000 * pricing.prompt_token_cost;\n        const completionCost = completionTokens / 1000 * pricing.completion_token_cost;\n        return promptCost + completionCost;\n    }\n    /**\n   * Get cost summary for a given time period\n   */ async getCostSummary(startDate, endDate, promptCardId) {\n        let query = `\n      SELECT \n        model,\n        SUM(cost_usd) as total_cost,\n        SUM(total_tokens) as total_tokens,\n        SUM(prompt_tokens) as total_prompt_tokens,\n        SUM(completion_tokens) as total_completion_tokens,\n        COUNT(*) as total_executions\n      FROM cost_tracking\n      WHERE 1=1\n    `;\n        const params = [];\n        if (startDate) {\n            query += ` AND created_at >= ?`;\n            params.push(startDate);\n        }\n        if (endDate) {\n            query += ` AND created_at <= ?`;\n            params.push(endDate);\n        }\n        if (promptCardId) {\n            query += ` AND prompt_card_id = ?`;\n            params.push(promptCardId);\n        }\n        query += ` GROUP BY model`;\n        const results = db.prepare(query).all(...params);\n        const costByModel = {};\n        const tokensByModel = {};\n        const executionsByModel = {};\n        let totalCost = 0;\n        let totalTokens = 0;\n        let totalPromptTokens = 0;\n        let totalCompletionTokens = 0;\n        let totalExecutions = 0;\n        for (const result of results){\n            const model = result.model;\n            const cost = result.total_cost;\n            const tokens = result.total_tokens;\n            const executions = result.total_executions;\n            costByModel[model] = cost;\n            tokensByModel[model] = tokens;\n            executionsByModel[model] = executions;\n            totalCost += cost;\n            totalTokens += tokens;\n            totalPromptTokens += result.total_prompt_tokens;\n            totalCompletionTokens += result.total_completion_tokens;\n            totalExecutions += executions;\n        }\n        return {\n            totalCost,\n            totalTokens,\n            totalPromptTokens,\n            totalCompletionTokens,\n            totalExecutions,\n            averageCostPerExecution: totalExecutions > 0 ? totalCost / totalExecutions : 0,\n            averageTokensPerExecution: totalExecutions > 0 ? totalTokens / totalExecutions : 0,\n            costByModel,\n            tokensByModel,\n            executionsByModel\n        };\n    }\n    /**\n   * Generate cost optimization recommendations\n   */ async generateOptimizationRecommendations(startDate, endDate) {\n        const recommendations = [];\n        const summary = await this.getCostSummary(startDate, endDate);\n        // Model optimization recommendations\n        const sortedModels = Object.entries(summary.costByModel).sort(([, a], [, b])=>b - a);\n        if (sortedModels.length > 1) {\n            const mostExpensiveModel = sortedModels[0][0];\n            const mostExpensiveCost = sortedModels[0][1];\n            const cheapestModel = sortedModels[sortedModels.length - 1][0];\n            const cheapestCost = sortedModels[sortedModels.length - 1][1];\n            if (mostExpensiveCost > cheapestCost * 2) {\n                recommendations.push({\n                    type: 'model_suggestion',\n                    title: `Consider switching from ${mostExpensiveModel} to ${cheapestModel}`,\n                    description: `${mostExpensiveModel} accounts for $${mostExpensiveCost.toFixed(2)} of your costs. Consider using ${cheapestModel} for appropriate tasks.`,\n                    estimatedSavings: mostExpensiveCost - cheapestCost,\n                    estimatedSavingsPercentage: (mostExpensiveCost - cheapestCost) / mostExpensiveCost * 100,\n                    priority: 'high',\n                    actionRequired: `Review test cases using ${mostExpensiveModel} and evaluate if ${cheapestModel} would be sufficient.`,\n                    metadata: {\n                        currentModel: mostExpensiveModel,\n                        suggestedModel: cheapestModel,\n                        currentCost: mostExpensiveCost,\n                        suggestedCost: cheapestCost\n                    }\n                });\n            }\n        }\n        // High token usage recommendations\n        if (summary.averageTokensPerExecution > 2000) {\n            recommendations.push({\n                type: 'token_reduction',\n                title: 'High token usage detected',\n                description: `Average token usage is ${summary.averageTokensPerExecution.toFixed(0)} tokens per execution. Consider optimizing prompts.`,\n                estimatedSavings: summary.totalCost * 0.3,\n                estimatedSavingsPercentage: 30,\n                priority: 'medium',\n                actionRequired: 'Review and optimize prompt templates to reduce token usage.',\n                metadata: {\n                    averageTokens: summary.averageTokensPerExecution,\n                    totalTokens: summary.totalTokens\n                }\n            });\n        }\n        // Execution frequency recommendations\n        if (summary.totalExecutions > 1000) {\n            recommendations.push({\n                type: 'execution_reduction',\n                title: 'High execution frequency',\n                description: `${summary.totalExecutions} executions recorded. Consider implementing caching or batching.`,\n                estimatedSavings: summary.totalCost * 0.2,\n                estimatedSavingsPercentage: 20,\n                priority: 'low',\n                actionRequired: 'Implement result caching and batch processing for similar test cases.',\n                metadata: {\n                    totalExecutions: summary.totalExecutions,\n                    avgCostPerExecution: summary.averageCostPerExecution\n                }\n            });\n        }\n        return recommendations;\n    }\n    /**\n   * Create or update budget alert\n   */ async createBudgetAlert(name, type, threshold) {\n        const insertAlert = db.prepare(`\n      INSERT INTO budget_alerts (name, type, threshold)\n      VALUES (?, ?, ?)\n    `);\n        const result = insertAlert.run(name, type, threshold);\n        return {\n            id: result.lastInsertRowid,\n            name,\n            type,\n            threshold,\n            current_amount: 0,\n            percentage_used: 0,\n            status: 'active',\n            created_at: new Date().toISOString()\n        };\n    }\n    /**\n   * Check budget alerts and update their status\n   */ async checkBudgetAlerts() {\n        const alerts = db.prepare(`\n      SELECT * FROM budget_alerts WHERE status IN ('active', 'triggered')\n    `).all();\n        const triggeredAlerts = [];\n        for (const alert of alerts){\n            const currentAmount = await this.getCurrentSpendingForAlert(alert.type);\n            const percentageUsed = currentAmount / alert.threshold * 100;\n            let newStatus = alert.status;\n            if (percentageUsed >= 100) {\n                newStatus = 'exceeded';\n            } else if (percentageUsed >= 80) {\n                newStatus = 'triggered';\n            }\n            // Update alert with current amounts\n            db.prepare(`\n        UPDATE budget_alerts \n        SET current_amount = ?, percentage_used = ?, status = ?\n        WHERE id = ?\n      `).run(currentAmount, percentageUsed, newStatus, alert.id);\n            if (newStatus !== alert.status) {\n                triggeredAlerts.push({\n                    ...alert,\n                    current_amount: currentAmount,\n                    percentage_used: percentageUsed,\n                    status: newStatus\n                });\n            }\n        }\n        return triggeredAlerts;\n    }\n    /**\n   * Get current spending for alert period\n   */ async getCurrentSpendingForAlert(type) {\n        let startDate;\n        const now = new Date();\n        switch(type){\n            case 'daily':\n                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString();\n                break;\n            case 'weekly':\n                const weekStart = new Date(now);\n                weekStart.setDate(now.getDate() - now.getDay());\n                startDate = weekStart.toISOString();\n                break;\n            case 'monthly':\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n                break;\n            case 'total':\n                startDate = '1970-01-01T00:00:00.000Z';\n                break;\n            default:\n                return 0;\n        }\n        const result = db.prepare(`\n      SELECT SUM(cost_usd) as total_cost \n      FROM cost_tracking \n      WHERE created_at >= ?\n    `).get(startDate);\n        return result?.total_cost || 0;\n    }\n    /**\n   * Generate cost predictions based on historical data\n   */ async generateCostPrediction(period) {\n        const days = period === 'daily' ? 7 : period === 'weekly' ? 28 : 90;\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        const historicalData = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        SUM(cost_usd) as daily_cost,\n        SUM(total_tokens) as daily_tokens,\n        COUNT(*) as daily_executions\n      FROM cost_tracking\n      WHERE created_at >= ?\n      GROUP BY DATE(created_at)\n      ORDER BY date\n    `).all(startDate.toISOString());\n        if (historicalData.length < 3) {\n            return {\n                period,\n                predictedCost: 0,\n                confidence: 0,\n                basedOnDays: historicalData.length,\n                trend: 'stable',\n                factors: [\n                    'Insufficient historical data'\n                ]\n            };\n        }\n        const costs = historicalData.map((d)=>d.daily_cost);\n        const avgDailyCost = costs.reduce((a, b)=>a + b, 0) / costs.length;\n        // Simple trend analysis\n        const recentCosts = costs.slice(-7);\n        const earlierCosts = costs.slice(0, 7);\n        const recentAvg = recentCosts.reduce((a, b)=>a + b, 0) / recentCosts.length;\n        const earlierAvg = earlierCosts.reduce((a, b)=>a + b, 0) / earlierCosts.length;\n        let trend = 'stable';\n        if (recentAvg > earlierAvg * 1.1) {\n            trend = 'increasing';\n        } else if (recentAvg < earlierAvg * 0.9) {\n            trend = 'decreasing';\n        }\n        const multiplier = period === 'daily' ? 1 : period === 'weekly' ? 7 : 30;\n        const predictedCost = avgDailyCost * multiplier;\n        return {\n            period,\n            predictedCost,\n            confidence: Math.min(historicalData.length / 30, 1),\n            basedOnDays: historicalData.length,\n            trend,\n            factors: [\n                `Based on ${historicalData.length} days of historical data`,\n                `Average daily cost: $${avgDailyCost.toFixed(2)}`,\n                `Trend: ${trend}`\n            ]\n        };\n    }\n    /**\n   * Get usage analytics for a time period\n   */ async getUsageAnalytics(startDate, endDate) {\n        const summary = await this.getCostSummary(startDate, endDate);\n        // Get daily trend data\n        const trendData = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        SUM(cost_usd) as cost,\n        SUM(total_tokens) as tokens,\n        COUNT(*) as executions\n      FROM cost_tracking\n      WHERE created_at >= ? AND created_at <= ?\n      GROUP BY DATE(created_at)\n      ORDER BY date\n    `).all(startDate, endDate);\n        const dayCount = Math.max(1, Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (24 * 60 * 60 * 1000)));\n        // Find peak usage day\n        const peakDay = trendData.reduce((max, day)=>day.cost > max.cost ? day : max, trendData[0] || {\n            date: startDate,\n            cost: 0,\n            tokens: 0,\n            executions: 0\n        });\n        // Model usage breakdown\n        const modelUsage = Object.entries(summary.costByModel).map(([model, cost])=>({\n                model,\n                cost,\n                tokens: summary.tokensByModel[model] || 0,\n                executions: summary.executionsByModel[model] || 0,\n                percentage: cost / summary.totalCost * 100\n            })).sort((a, b)=>b.cost - a.cost);\n        return {\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalCost: summary.totalCost,\n            totalTokens: summary.totalTokens,\n            totalExecutions: summary.totalExecutions,\n            averageCostPerDay: summary.totalCost / dayCount,\n            averageTokensPerDay: summary.totalTokens / dayCount,\n            averageExecutionsPerDay: summary.totalExecutions / dayCount,\n            peakUsageDay: peakDay.date,\n            peakUsageCost: peakDay.cost,\n            costTrend: trendData.map((d)=>({\n                    date: d.date,\n                    cost: d.cost,\n                    tokens: d.tokens,\n                    executions: d.executions\n                })),\n            modelUsage\n        };\n    }\n    /**\n   * Calculate ROI for test executions\n   */ async calculateROI(startDate, endDate, promptCardId) {\n        const summary = await this.getCostSummary(startDate, endDate, promptCardId);\n        // Get success/failure statistics\n        let query = `\n      SELECT \n        COUNT(*) as total_executions,\n        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as successful_executions,\n        SUM(CASE WHEN passed = 0 THEN 1 ELSE 0 END) as failed_executions\n      FROM test_results tr\n      JOIN cost_tracking ct ON tr.execution_id = ct.execution_id\n      WHERE 1=1\n    `;\n        const params = [];\n        if (startDate) {\n            query += ` AND ct.created_at >= ?`;\n            params.push(startDate);\n        }\n        if (endDate) {\n            query += ` AND ct.created_at <= ?`;\n            params.push(endDate);\n        }\n        if (promptCardId) {\n            query += ` AND ct.prompt_card_id = ?`;\n            params.push(promptCardId);\n        }\n        const result = db.prepare(query).get(...params);\n        const totalExecutions = result?.total_executions || 0;\n        const successfulExecutions = result?.successful_executions || 0;\n        const failedExecutions = result?.failed_executions || 0;\n        const successRate = totalExecutions > 0 ? successfulExecutions / totalExecutions * 100 : 0;\n        const averageCostPerSuccess = successfulExecutions > 0 ? summary.totalCost / successfulExecutions : 0;\n        const costEfficiency = summary.totalCost > 0 ? successfulExecutions / summary.totalCost * 100 : 0;\n        const recommendations = await this.generateOptimizationRecommendations(startDate, endDate);\n        return {\n            totalCost: summary.totalCost,\n            totalExecutions,\n            successfulExecutions,\n            failedExecutions,\n            averageCostPerSuccess,\n            successRate,\n            costEfficiency,\n            recommendations\n        };\n    }\n    /**\n   * Get all budget alerts\n   */ async getBudgetAlerts() {\n        return db.prepare(`\n      SELECT * FROM budget_alerts ORDER BY created_at DESC\n    `).all();\n    }\n    /**\n   * Update optimization settings\n   */ async updateOptimizationSettings(settings) {\n        this.optimizationSettings = {\n            ...this.optimizationSettings,\n            ...settings\n        };\n        db.prepare(`\n      INSERT OR REPLACE INTO cost_optimization_settings \n      (id, enable_auto_optimization, cost_threshold, token_threshold, model_preferences, \n       prompt_optimization, batching_enabled, caching_enabled, updated_at)\n      VALUES (1, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n    `).run(settings.enableAutoOptimization ?? this.optimizationSettings.enableAutoOptimization, settings.costThreshold ?? this.optimizationSettings.costThreshold, settings.tokenThreshold ?? this.optimizationSettings.tokenThreshold, JSON.stringify(settings.modelPreferences ?? this.optimizationSettings.modelPreferences), settings.promptOptimization ?? this.optimizationSettings.promptOptimization, settings.batchingEnabled ?? this.optimizationSettings.batchingEnabled, settings.cachingEnabled ?? this.optimizationSettings.cachingEnabled);\n    }\n    /**\n   * Get optimization settings\n   */ getOptimizationSettings() {\n        return this.optimizationSettings;\n    }\n    constructor(){\n        _define_property(this, \"modelPricing\", new Map());\n        _define_property(this, \"optimizationSettings\", void 0);\n        this.optimizationSettings = {\n            enableAutoOptimization: true,\n            costThreshold: 10.0,\n            tokenThreshold: 100000,\n            modelPreferences: [\n                'gpt-3.5-turbo',\n                'llama3'\n            ],\n            promptOptimization: true,\n            batchingEnabled: true,\n            cachingEnabled: true\n        };\n        this.initializePricing();\n        this.initializeDatabase();\n    }\n}\nexport const costTracker = new CostTracker();\n"],"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","ignoreList":[]}