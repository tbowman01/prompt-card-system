{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/assertions/AssertionTypeRegistry.ts"],"sourcesContent":["import { db } from '../../database/connection';\nimport { AssertionContext, EnhancedAssertionType, EnhancedAssertionResult } from './AssertionEngine';\n\nexport type AssertionValidator = (\n  output: string,\n  assertion: EnhancedAssertionType,\n  context?: AssertionContext\n) => Promise<EnhancedAssertionResult>;\n\nexport interface AssertionTypeDefinition {\n  name: string;\n  description: string;\n  parameters: {\n    [key: string]: {\n      type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n      required: boolean;\n      description: string;\n      default?: any;\n    };\n  };\n  examples: Array<{\n    assertion: EnhancedAssertionType;\n    description: string;\n    expectedResult: boolean;\n  }>;\n  validator: AssertionValidator;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AssertionExecutionStats {\n  assertionType: string;\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  averageExecutionTime: number;\n  lastExecuted: string;\n}\n\nexport class AssertionTypeRegistry {\n  private customValidators: Map<string, AssertionValidator> = new Map();\n  private typeDefinitions: Map<string, AssertionTypeDefinition> = new Map();\n  private executionStats: Map<string, AssertionExecutionStats> = new Map();\n  private initialized: boolean = false;\n\n  /**\n   * Initialize the assertion type registry\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing AssertionTypeRegistry...');\n      \n      // Create custom assertion types table\n      await this.createAssertionTypesTable();\n      \n      // Load built-in assertion types\n      await this.loadBuiltInTypes();\n      \n      // Load custom assertion types from database\n      await this.loadCustomTypes();\n      \n      this.initialized = true;\n      \n      console.log('✅ AssertionTypeRegistry initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize AssertionTypeRegistry:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create the assertion types table in database\n   */\n  private async createAssertionTypesTable(): Promise<void> {\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_types (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT NOT NULL,\n        parameters TEXT NOT NULL, -- JSON\n        examples TEXT NOT NULL, -- JSON\n        validator_code TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_execution_stats (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        assertion_type TEXT NOT NULL,\n        total_executions INTEGER DEFAULT 0,\n        successful_executions INTEGER DEFAULT 0,\n        failed_executions INTEGER DEFAULT 0,\n        total_execution_time INTEGER DEFAULT 0,\n        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(assertion_type)\n      )\n    `);\n\n    // Create indexes\n    db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);\n      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);\n    `);\n  }\n\n  /**\n   * Load built-in assertion types\n   */\n  private async loadBuiltInTypes(): Promise<void> {\n    const builtInTypes: Partial<AssertionTypeDefinition>[] = [\n      {\n        name: 'contains',\n        description: 'Check if output contains a specific string',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'The string to search for'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'contains', value: 'hello' },\n            description: 'Check if output contains \"hello\"',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'semantic-similarity',\n        description: 'Check semantic similarity between output and expected text',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'The expected text to compare against'\n          },\n          threshold: {\n            type: 'number',\n            required: false,\n            description: 'Similarity threshold (0-1)',\n            default: 0.8\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'semantic-similarity', value: 'The weather is nice', threshold: 0.8 },\n            description: 'Check if output has similar meaning to \"The weather is nice\"',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'custom',\n        description: 'Execute custom JavaScript code for assertion',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'JavaScript code to execute'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'custom', value: 'return output.length > 10' },\n            description: 'Check if output has more than 10 characters',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'json-schema',\n        description: 'Validate output against JSON schema',\n        parameters: {\n          value: {\n            type: 'object',\n            required: true,\n            description: 'JSON schema to validate against'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'json-schema', value: { type: 'object', properties: { name: { type: 'string' } } } },\n            description: 'Validate JSON output has required structure',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'sentiment',\n        description: 'Check sentiment of the output',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'Expected sentiment: positive, negative, or neutral'\n          },\n          threshold: {\n            type: 'number',\n            required: false,\n            description: 'Confidence threshold (0-1)',\n            default: 0.6\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'sentiment', value: 'positive', threshold: 0.7 },\n            description: 'Check if output has positive sentiment',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'language',\n        description: 'Detect language of the output',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'Expected language code (e.g., \"en\", \"es\", \"fr\")'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'language', value: 'en' },\n            description: 'Check if output is in English',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'toxicity',\n        description: 'Check toxicity level of the output',\n        parameters: {\n          value: {\n            type: 'number',\n            required: true,\n            description: 'Maximum allowed toxicity score (0-1)'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'toxicity', value: 0.3 },\n            description: 'Check if output toxicity is below 0.3',\n            expectedResult: true\n          }\n        ]\n      }\n    ];\n\n    // Register built-in types\n    builtInTypes.forEach(type => {\n      if (type.name) {\n        this.typeDefinitions.set(type.name, {\n          ...type,\n          validator: this.createDummyValidator(type.name),\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        } as AssertionTypeDefinition);\n      }\n    });\n  }\n\n  /**\n   * Load custom assertion types from database\n   */\n  private async loadCustomTypes(): Promise<void> {\n    const stmt = db.prepare('SELECT * FROM assertion_types');\n    const customTypes = stmt.all();\n\n    for (const type of customTypes) {\n      try {\n        const definition: AssertionTypeDefinition = {\n          name: type.name,\n          description: type.description,\n          parameters: JSON.parse(type.parameters),\n          examples: JSON.parse(type.examples),\n          validator: this.createValidatorFromCode(type.validator_code),\n          created_at: type.created_at,\n          updated_at: type.updated_at\n        };\n\n        this.typeDefinitions.set(type.name, definition);\n      } catch (error) {\n        console.error(`Failed to load custom assertion type ${type.name}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Register a new custom assertion type\n   */\n  async register(name: string, validator: AssertionValidator): Promise<void> {\n    if (!this.initialized) {\n      throw new Error('AssertionTypeRegistry not initialized');\n    }\n\n    // Store in memory\n    this.customValidators.set(name, validator);\n\n    // Store in database\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO assertion_types (name, description, parameters, examples, validator_code, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    const definition: Partial<AssertionTypeDefinition> = {\n      name,\n      description: `Custom assertion type: ${name}`,\n      parameters: {},\n      examples: [],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    stmt.run(\n      name,\n      definition.description,\n      JSON.stringify(definition.parameters),\n      JSON.stringify(definition.examples),\n      validator.toString(),\n      new Date().toISOString()\n    );\n\n    console.log(`✅ Registered custom assertion type: ${name}`);\n  }\n\n  /**\n   * Get all registered assertion types\n   */\n  getRegisteredTypes(): string[] {\n    return Array.from(this.typeDefinitions.keys());\n  }\n\n  /**\n   * Get assertion type definition\n   */\n  getTypeDefinition(name: string): AssertionTypeDefinition | undefined {\n    return this.typeDefinitions.get(name);\n  }\n\n  /**\n   * Get all type definitions\n   */\n  getAllTypeDefinitions(): AssertionTypeDefinition[] {\n    return Array.from(this.typeDefinitions.values());\n  }\n\n  /**\n   * Update execution statistics\n   */\n  updateExecutionStats(\n    assertionType: string,\n    success: boolean,\n    executionTime: number\n  ): void {\n    const stats = this.executionStats.get(assertionType) || {\n      assertionType,\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      averageExecutionTime: 0,\n      lastExecuted: new Date().toISOString()\n    };\n\n    stats.totalExecutions++;\n    if (success) {\n      stats.successfulExecutions++;\n    } else {\n      stats.failedExecutions++;\n    }\n\n    // Update average execution time\n    stats.averageExecutionTime = (stats.averageExecutionTime * (stats.totalExecutions - 1) + executionTime) / stats.totalExecutions;\n    stats.lastExecuted = new Date().toISOString();\n\n    this.executionStats.set(assertionType, stats);\n\n    // Update database\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO assertion_execution_stats \n      (assertion_type, total_executions, successful_executions, failed_executions, total_execution_time, last_executed)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      assertionType,\n      stats.totalExecutions,\n      stats.successfulExecutions,\n      stats.failedExecutions,\n      Math.round(stats.averageExecutionTime * stats.totalExecutions),\n      stats.lastExecuted\n    );\n  }\n\n  /**\n   * Get execution statistics\n   */\n  getStatistics(): {\n    totalAssertions: number;\n    successfulAssertions: number;\n    failedAssertions: number;\n    averageExecutionTime: number;\n  } {\n    const stats = Array.from(this.executionStats.values());\n    \n    const totalAssertions = stats.reduce((sum, stat) => sum + stat.totalExecutions, 0);\n    const successfulAssertions = stats.reduce((sum, stat) => sum + stat.successfulExecutions, 0);\n    const failedAssertions = stats.reduce((sum, stat) => sum + stat.failedExecutions, 0);\n    const averageExecutionTime = stats.reduce((sum, stat) => sum + stat.averageExecutionTime, 0) / Math.max(1, stats.length);\n\n    return {\n      totalAssertions,\n      successfulAssertions,\n      failedAssertions,\n      averageExecutionTime\n    };\n  }\n\n  /**\n   * Get statistics for a specific assertion type\n   */\n  getTypeStatistics(assertionType: string): AssertionExecutionStats | undefined {\n    return this.executionStats.get(assertionType);\n  }\n\n  /**\n   * Create a dummy validator for built-in types\n   */\n  private createDummyValidator(typeName: string): AssertionValidator {\n    return async (output: string, assertion: EnhancedAssertionType, context?: AssertionContext): Promise<EnhancedAssertionResult> => {\n      // This would be replaced by the actual assertion engine validation\n      return {\n        assertion,\n        passed: false,\n        error: `Validator for ${typeName} should be handled by AssertionEngine`\n      };\n    };\n  }\n\n  /**\n   * Create a validator from stored code\n   */\n  private createValidatorFromCode(code: string): AssertionValidator {\n    return async (output: string, assertion: EnhancedAssertionType, context?: AssertionContext): Promise<EnhancedAssertionResult> => {\n      try {\n        // In a real implementation, this would safely execute the stored code\n        const func = new Function('output', 'assertion', 'context', code);\n        const result = func(output, assertion, context);\n        \n        return {\n          assertion,\n          passed: Boolean(result),\n          score: typeof result === 'number' ? result : (result ? 1 : 0)\n        };\n      } catch (error) {\n        return {\n          assertion,\n          passed: false,\n          error: error instanceof Error ? error.message : 'Custom validator execution failed'\n        };\n      }\n    };\n  }\n\n  /**\n   * Export assertion types to JSON\n   */\n  exportTypes(): string {\n    const types = Array.from(this.typeDefinitions.values()).map(type => ({\n      ...type,\n      validator: undefined // Don't export the validator function\n    }));\n\n    return JSON.stringify(types, null, 2);\n  }\n\n  /**\n   * Import assertion types from JSON\n   */\n  async importTypes(jsonData: string): Promise<void> {\n    try {\n      const types = JSON.parse(jsonData);\n      \n      for (const type of types) {\n        if ((type as any).name && (type as any).description && (type as any).parameters) {\n          const stmt = db.prepare(`\n            INSERT OR REPLACE INTO assertion_types (name, description, parameters, examples, validator_code, updated_at)\n            VALUES (?, ?, ?, ?, ?, ?)\n          `);\n\n          stmt.run(\n            (type as any).name,\n            (type as any).description,\n            JSON.stringify((type as any).parameters),\n            JSON.stringify((type as any).examples || []),\n            (type as any).validator_code || '',\n            new Date().toISOString()\n          );\n        }\n      }\n\n      // Reload types\n      await this.loadCustomTypes();\n      \n      console.log(`✅ Imported ${types.length} assertion types`);\n    } catch (error) {\n      throw new Error(`Failed to import assertion types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete a custom assertion type\n   */\n  async deleteType(name: string): Promise<void> {\n    if (!this.initialized) {\n      throw new Error('AssertionTypeRegistry not initialized');\n    }\n\n    // Remove from memory\n    this.customValidators.delete(name);\n    this.typeDefinitions.delete(name);\n    this.executionStats.delete(name);\n\n    // Remove from database\n    const stmt = db.prepare('DELETE FROM assertion_types WHERE name = ?');\n    stmt.run(name);\n\n    const statsStmt = db.prepare('DELETE FROM assertion_execution_stats WHERE assertion_type = ?');\n    statsStmt.run(name);\n\n    console.log(`✅ Deleted assertion type: ${name}`);\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.customValidators.clear();\n    this.typeDefinitions.clear();\n    this.executionStats.clear();\n    this.initialized = false;\n  }\n}"],"names":["AssertionTypeRegistry","initialize","console","log","createAssertionTypesTable","loadBuiltInTypes","loadCustomTypes","initialized","error","db","exec","builtInTypes","name","description","parameters","value","type","required","examples","assertion","expectedResult","threshold","default","properties","forEach","typeDefinitions","set","validator","createDummyValidator","created_at","Date","toISOString","updated_at","stmt","prepare","customTypes","all","definition","JSON","parse","createValidatorFromCode","validator_code","register","Error","customValidators","run","stringify","toString","getRegisteredTypes","Array","from","keys","getTypeDefinition","get","getAllTypeDefinitions","values","updateExecutionStats","assertionType","success","executionTime","stats","executionStats","totalExecutions","successfulExecutions","failedExecutions","averageExecutionTime","lastExecuted","Math","round","getStatistics","totalAssertions","reduce","sum","stat","successfulAssertions","failedAssertions","max","length","getTypeStatistics","typeName","output","context","passed","code","func","Function","result","Boolean","score","message","exportTypes","types","map","undefined","importTypes","jsonData","deleteType","delete","statsStmt","cleanup","clear","Map"],"mappings":"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"}