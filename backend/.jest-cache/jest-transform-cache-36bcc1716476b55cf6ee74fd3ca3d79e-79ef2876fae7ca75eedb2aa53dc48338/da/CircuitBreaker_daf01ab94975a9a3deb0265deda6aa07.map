{"version":3,"names":["cov_ivsxppgcx","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","EventEmitter","CircuitBreakerState","CircuitBreaker","execute","fn","totalRequests","state","shouldAttemptReset","successCount","console","log","serviceName","emit","reason","error","Error","nextAttempt","result","onSuccess","onFailure","totalSuccesses","lastSuccess","Date","config","successThreshold","reset","failureCount","totalFailures","lastFailure","message","trip","failureThreshold","now","resetTimeout","getStats","uptime","startTime","getTime","forceOpen","forceClose","updateConfig","newConfig","constructor","monitoringPeriod","CircuitBreakerRegistry","getBreaker","breakers","has","breaker","set","on","data","get","getAllBreakers","Map","stats","removeBreaker","delete","clear","event","listener","eventEmitter","args","off","circuitBreakerRegistry"],"sources":["CircuitBreaker.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { EventEmitter } from 'events';\nexport var CircuitBreakerState = /*#__PURE__*/ function(CircuitBreakerState) {\n    CircuitBreakerState[\"CLOSED\"] = \"CLOSED\";\n    CircuitBreakerState[\"OPEN\"] = \"OPEN\";\n    CircuitBreakerState[\"HALF_OPEN\"] = \"HALF_OPEN\"; // Testing if service has recovered\n    return CircuitBreakerState;\n}({});\nexport class CircuitBreaker extends EventEmitter {\n    async execute(fn) {\n        this.totalRequests++;\n        if (this.state === \"OPEN\") {\n            if (this.shouldAttemptReset()) {\n                this.state = \"HALF_OPEN\";\n                this.successCount = 0;\n                console.log(`ðŸ”„ Circuit breaker for ${this.serviceName} moved to HALF_OPEN`);\n                this.emit('stateChanged', {\n                    serviceName: this.serviceName,\n                    state: this.state,\n                    reason: 'Reset timeout elapsed'\n                });\n            } else {\n                const error = new Error(`Circuit breaker OPEN for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n                this.emit('requestRejected', {\n                    serviceName: this.serviceName,\n                    reason: 'Circuit breaker open',\n                    nextAttempt: this.nextAttempt\n                });\n                throw error;\n            }\n        }\n        try {\n            const result = await fn();\n            this.onSuccess();\n            return result;\n        } catch (error) {\n            this.onFailure(error);\n            throw error;\n        }\n    }\n    onSuccess() {\n        this.totalSuccesses++;\n        this.lastSuccess = new Date();\n        if (this.state === \"HALF_OPEN\") {\n            this.successCount++;\n            if (this.successCount >= this.config.successThreshold) {\n                this.reset();\n            }\n        } else if (this.state === \"CLOSED\") {\n            this.failureCount = 0; // Reset failure count on success\n        }\n        this.emit('success', {\n            serviceName: this.serviceName,\n            state: this.state,\n            successCount: this.successCount\n        });\n    }\n    onFailure(error) {\n        this.totalFailures++;\n        this.lastFailure = new Date();\n        this.failureCount++;\n        this.emit('failure', {\n            serviceName: this.serviceName,\n            state: this.state,\n            failureCount: this.failureCount,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n        if (this.state === \"HALF_OPEN\") {\n            // Any failure in half-open state moves back to open\n            this.trip();\n        } else if (this.state === \"CLOSED\") {\n            if (this.failureCount >= this.config.failureThreshold) {\n                this.trip();\n            }\n        }\n    }\n    trip() {\n        this.state = \"OPEN\";\n        this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n        console.log(`ðŸš¨ Circuit breaker OPENED for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n        this.emit('opened', {\n            serviceName: this.serviceName,\n            failureCount: this.failureCount,\n            nextAttempt: this.nextAttempt,\n            reason: `Failure threshold reached (${this.config.failureThreshold} failures)`\n        });\n    }\n    reset() {\n        this.state = \"CLOSED\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.nextAttempt = null;\n        console.log(`âœ… Circuit breaker CLOSED for ${this.serviceName} - Service recovered`);\n        this.emit('closed', {\n            serviceName: this.serviceName,\n            reason: `Service recovered (${this.config.successThreshold} successful requests)`\n        });\n    }\n    shouldAttemptReset() {\n        return this.nextAttempt !== null && new Date() >= this.nextAttempt;\n    }\n    getStats() {\n        return {\n            state: this.state,\n            failureCount: this.failureCount,\n            successCount: this.successCount,\n            nextAttempt: this.nextAttempt,\n            totalRequests: this.totalRequests,\n            totalFailures: this.totalFailures,\n            totalSuccesses: this.totalSuccesses,\n            uptime: Date.now() - this.startTime.getTime(),\n            lastFailure: this.lastFailure,\n            lastSuccess: this.lastSuccess\n        };\n    }\n    forceOpen() {\n        this.state = \"OPEN\";\n        this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n        console.log(`ðŸ”§ Circuit breaker MANUALLY OPENED for ${this.serviceName}`);\n        this.emit('forceOpened', {\n            serviceName: this.serviceName,\n            reason: 'Manual intervention'\n        });\n    }\n    forceClose() {\n        this.reset();\n        console.log(`ðŸ”§ Circuit breaker MANUALLY CLOSED for ${this.serviceName}`);\n        this.emit('forceClosed', {\n            serviceName: this.serviceName,\n            reason: 'Manual intervention'\n        });\n    }\n    updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n        this.emit('configUpdated', {\n            serviceName: this.serviceName,\n            config: this.config\n        });\n    }\n    constructor(serviceName, config = {}){\n        super(), _define_property(this, \"state\", \"CLOSED\"), _define_property(this, \"failureCount\", 0), _define_property(this, \"successCount\", 0), _define_property(this, \"nextAttempt\", null), _define_property(this, \"config\", void 0), _define_property(this, \"serviceName\", void 0), // Statistics\n        _define_property(this, \"totalRequests\", 0), _define_property(this, \"totalFailures\", 0), _define_property(this, \"totalSuccesses\", 0), _define_property(this, \"lastFailure\", null), _define_property(this, \"lastSuccess\", null), _define_property(this, \"startTime\", new Date());\n        this.serviceName = serviceName;\n        this.config = {\n            failureThreshold: 5,\n            resetTimeout: 60000,\n            monitoringPeriod: 300000,\n            successThreshold: 3,\n            ...config\n        };\n    }\n}\nexport class CircuitBreakerRegistry {\n    getBreaker(serviceName, config) {\n        if (!this.breakers.has(serviceName)) {\n            const breaker = new CircuitBreaker(serviceName, config);\n            this.breakers.set(serviceName, breaker);\n            // Forward events\n            breaker.on('opened', (data)=>this.emit('breakerOpened', data));\n            breaker.on('closed', (data)=>this.emit('breakerClosed', data));\n            breaker.on('stateChanged', (data)=>this.emit('breakerStateChanged', data));\n            breaker.on('failure', (data)=>this.emit('breakerFailure', data));\n            breaker.on('success', (data)=>this.emit('breakerSuccess', data));\n        }\n        return this.breakers.get(serviceName);\n    }\n    getAllBreakers() {\n        return new Map(this.breakers);\n    }\n    getStats() {\n        const stats = {};\n        for (const [serviceName, breaker] of this.breakers){\n            stats[serviceName] = breaker.getStats();\n        }\n        return stats;\n    }\n    removeBreaker(serviceName) {\n        return this.breakers.delete(serviceName);\n    }\n    clear() {\n        this.breakers.clear();\n    }\n    on(event, listener) {\n        this.eventEmitter.on(event, listener);\n        return this;\n    }\n    emit(event, ...args) {\n        return this.eventEmitter.emit(event, ...args);\n    }\n    off(event, listener) {\n        this.eventEmitter.off(event, listener);\n        return this;\n    }\n    constructor(){\n        _define_property(this, \"breakers\", new Map());\n        // Event emitter functionality\n        _define_property(this, \"eventEmitter\", new EventEmitter());\n    }\n}\nexport const circuitBreakerRegistry = new CircuitBreakerRegistry();\n"],"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","ignoreList":[]}