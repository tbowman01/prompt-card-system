{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/assertions/CustomAssertionValidator.ts"],"sourcesContent":["import { AssertionContext } from './AssertionEngine';\n\nexport interface CustomAssertionResult {\n  passed: boolean;\n  score?: number;\n  executionTime: number;\n  variables?: Record<string, any>;\n  logs?: string[];\n  error?: string;\n}\n\nexport class CustomAssertionValidator {\n  private initialized: boolean = false;\n  private allowedGlobals: Set<string>;\n  private bannedKeywords: Set<string>;\n\n  constructor() {\n    // Define allowed global functions and objects for security\n    this.allowedGlobals = new Set([\n      'Math', 'String', 'Number', 'Array', 'Object', 'Date', 'RegExp',\n      'JSON', 'parseFloat', 'parseInt', 'isNaN', 'isFinite',\n      'encodeURI', 'decodeURI', 'encodeURIComponent', 'decodeURIComponent'\n    ]);\n\n    // Define banned keywords for security\n    this.bannedKeywords = new Set([\n      'eval', 'Function', 'require', 'import', 'process', 'global',\n      'window', 'document', 'localStorage', 'sessionStorage', 'fetch',\n      'XMLHttpRequest', 'WebSocket', 'Worker', 'SharedWorker',\n      'setTimeout', 'setInterval', 'setImmediate', 'clearTimeout',\n      'clearInterval', 'clearImmediate', '__dirname', '__filename',\n      'module', 'exports', 'Buffer', 'console.log', 'console.error'\n    ]);\n  }\n\n  /**\n   * Initialize the custom assertion validator\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing CustomAssertionValidator...');\n      \n      this.initialized = true;\n      \n      console.log('✅ CustomAssertionValidator initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize CustomAssertionValidator:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute custom assertion code in a secure sandbox\n   */\n  async execute(\n    code: string,\n    output: string,\n    context?: AssertionContext\n  ): Promise<CustomAssertionResult> {\n    if (!this.initialized) {\n      throw new Error('CustomAssertionValidator not initialized');\n    }\n\n    const startTime = Date.now();\n    const logs: string[] = [];\n    const variables: Record<string, any> = {};\n\n    try {\n      // Security check - scan for banned keywords\n      const securityResult = this.performSecurityCheck(code);\n      if (!securityResult.safe) {\n        throw new Error(`Security violation: ${securityResult.reason}`);\n      }\n\n      // Prepare execution environment\n      const sandboxContext = this.createSandboxContext(output, context, logs, variables);\n      \n      // Execute the custom assertion\n      const result = await this.executeInSandbox(code, sandboxContext);\n      \n      const executionTime = Date.now() - startTime;\n      \n      return {\n        passed: Boolean(result),\n        score: typeof result === 'number' ? result : (Boolean(result) ? 1 : 0),\n        executionTime,\n        variables,\n        logs\n      };\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      \n      return {\n        passed: false,\n        executionTime,\n        variables,\n        logs,\n        error: error instanceof Error ? error.message : 'Unknown execution error'\n      };\n    }\n  }\n\n  /**\n   * Perform security checks on the custom code\n   */\n  private performSecurityCheck(code: string): { safe: boolean; reason?: string } {\n    // Check for banned keywords\n    for (const keyword of this.bannedKeywords) {\n      if (code.includes(keyword)) {\n        return {\n          safe: false,\n          reason: `Banned keyword detected: ${keyword}`\n        };\n      }\n    }\n\n    // Check for potential injection patterns\n    const dangerousPatterns = [\n      /constructor/i,\n      /prototype/i,\n      /(__proto__|__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__)/i,\n      /\\[\\s*[\"']constructor[\"']\\s*\\]/i,\n      /\\[\\s*[\"']__proto__[\"']\\s*\\]/i,\n      /\\[\\s*[\"']prototype[\"']\\s*\\]/i\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(code)) {\n        return {\n          safe: false,\n          reason: `Potentially dangerous pattern detected: ${pattern.toString()}`\n        };\n      }\n    }\n\n    // Check code length (prevent DoS)\n    if (code.length > 10000) {\n      return {\n        safe: false,\n        reason: 'Code too long (max 10000 characters)'\n      };\n    }\n\n    // Check for excessive nesting (prevent DoS)\n    const nestingLevel = this.checkNestingLevel(code);\n    if (nestingLevel > 20) {\n      return {\n        safe: false,\n        reason: 'Code nesting too deep (max 20 levels)'\n      };\n    }\n\n    return { safe: true };\n  }\n\n  /**\n   * Check nesting level of code\n   */\n  private checkNestingLevel(code: string): number {\n    let maxLevel = 0;\n    let currentLevel = 0;\n    \n    for (const char of code) {\n      if (char === '{' || char === '(' || char === '[') {\n        currentLevel++;\n        maxLevel = Math.max(maxLevel, currentLevel);\n      } else if (char === '}' || char === ')' || char === ']') {\n        currentLevel--;\n      }\n    }\n    \n    return maxLevel;\n  }\n\n  /**\n   * Create a sandbox context for code execution\n   */\n  private createSandboxContext(\n    output: string,\n    context?: AssertionContext,\n    logs?: string[],\n    variables?: Record<string, any>\n  ): Record<string, any> {\n    const sandboxContext: Record<string, any> = {\n      // Assertion input\n      output,\n      text: output,\n      content: output,\n      \n      // Context information\n      prompt: context?.prompt || '',\n      variables: { ...context?.variables } || {},\n      model: context?.model || '',\n      executionTime: context?.executionTime || 0,\n      \n      // Utility functions\n      length: output.length,\n      wordCount: output.split(/\\s+/).filter(w => w.length > 0).length,\n      lineCount: output.split('\\n').length,\n      \n      // Safe string operations\n      toLowerCase: () => output.toLowerCase(),\n      toUpperCase: () => output.toUpperCase(),\n      trim: () => output.trim(),\n      includes: (str: string) => output.includes(str),\n      startsWith: (str: string) => output.startsWith(str),\n      endsWith: (str: string) => output.endsWith(str),\n      indexOf: (str: string) => output.indexOf(str),\n      match: (pattern: string | RegExp) => output.match(pattern),\n      replace: (search: string | RegExp, replacement: string) => output.replace(search, replacement),\n      split: (separator: string | RegExp) => output.split(separator),\n      substring: (start: number, end?: number) => output.substring(start, end),\n      slice: (start: number, end?: number) => output.slice(start, end),\n      \n      // JSON operations\n      parseJSON: (str?: string) => {\n        try {\n          return JSON.parse(str || output);\n        } catch {\n          return null;\n        }\n      },\n      \n      // Regular expressions\n      regex: (pattern: string, flags?: string) => {\n        try {\n          return new RegExp(pattern, flags);\n        } catch {\n          return null;\n        }\n      },\n      \n      // Math operations\n      Math: {\n        ...Math,\n        random: () => { throw new Error('Math.random() is not allowed in assertions'); }\n      },\n      \n      // Safe logging\n      log: (message: any) => {\n        if (logs) {\n          logs.push(String(message));\n        }\n      },\n      \n      // Variable storage\n      set: (key: string, value: any) => {\n        if (variables) {\n          variables[key] = value;\n        }\n      },\n      \n      get: (key: string) => {\n        return variables?.[key];\n      },\n      \n      // Sentiment analysis helper\n      analyzeSentiment: (text?: string) => {\n        const content = text || output;\n        // Simple sentiment analysis\n        const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'like', 'happy'];\n        const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'dislike', 'sad', 'angry', 'disappointed'];\n        \n        const words = content.toLowerCase().split(/\\s+/);\n        const positive = words.filter(w => positiveWords.includes(w)).length;\n        const negative = words.filter(w => negativeWords.includes(w)).length;\n        \n        if (positive > negative) return 'positive';\n        if (negative > positive) return 'negative';\n        return 'neutral';\n      },\n      \n      // Word frequency analysis\n      wordFrequency: (text?: string) => {\n        const content = text || output;\n        const words = content.toLowerCase().split(/\\s+/).filter(w => w.length > 0);\n        const frequency: Record<string, number> = {};\n        \n        words.forEach(word => {\n          frequency[word] = (frequency[word] || 0) + 1;\n        });\n        \n        return frequency;\n      },\n      \n      // Language detection helper\n      detectLanguage: (text?: string) => {\n        const content = text || output;\n        // Very simple language detection\n        const englishWords = ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that'];\n        const words = content.toLowerCase().split(/\\s+/);\n        const englishCount = words.filter(w => englishWords.includes(w)).length;\n        \n        return englishCount > words.length * 0.1 ? 'en' : 'unknown';\n      }\n    };\n\n    // Add allowed globals\n    this.allowedGlobals.forEach(globalName => {\n      if (globalName === 'Math') {\n        sandboxContext[globalName] = sandboxContext.Math;\n      } else if (typeof global !== 'undefined' && globalName in global) {\n        sandboxContext[globalName] = (global as any)[globalName];\n      }\n    });\n\n    return sandboxContext;\n  }\n\n  /**\n   * Execute code in a simple sandbox environment\n   */\n  private async executeInSandbox(\n    code: string,\n    context: Record<string, any>\n  ): Promise<any> {\n    // Create a function that executes the code in the given context\n    const wrappedCode = `\n      (function() {\n        \"use strict\";\n        const {${Object.keys(context).join(', ')}} = arguments[0];\n        \n        // Prevent access to dangerous globals\n        const eval = undefined;\n        const Function = undefined;\n        const constructor = undefined;\n        const prototype = undefined;\n        const __proto__ = undefined;\n        \n        // Execute the custom assertion code\n        ${code}\n      })\n    `;\n\n    try {\n      // Use Function constructor as a safer alternative to eval\n      // This is still not completely secure, but better than direct eval\n      const func = new Function('return ' + wrappedCode)();\n      \n      // Execute with timeout to prevent infinite loops\n      const result = await this.executeWithTimeout(func, [context], 5000);\n      \n      return result;\n    } catch (error) {\n      throw new Error(`Code execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute a function with timeout\n   */\n  private async executeWithTimeout(\n    func: Function,\n    args: any[],\n    timeout: number\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Execution timeout'));\n      }, timeout);\n\n      try {\n        const result = func.apply(null, args);\n        clearTimeout(timer);\n        resolve(result);\n      } catch (error) {\n        clearTimeout(timer);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get execution statistics\n   */\n  getStatistics(): {\n    totalExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    securityViolations: number;\n    averageExecutionTime: number;\n  } {\n    // In a real implementation, this would track actual statistics\n    return {\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      securityViolations: 0,\n      averageExecutionTime: 0\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.initialized = false;\n  }\n}"],"names":["CustomAssertionValidator","initialize","console","log","initialized","error","execute","code","output","context","Error","startTime","Date","now","logs","variables","securityResult","performSecurityCheck","safe","reason","sandboxContext","createSandboxContext","result","executeInSandbox","executionTime","passed","Boolean","score","message","keyword","bannedKeywords","includes","dangerousPatterns","pattern","test","toString","length","nestingLevel","checkNestingLevel","maxLevel","currentLevel","char","Math","max","text","content","prompt","model","wordCount","split","filter","w","lineCount","toLowerCase","toUpperCase","trim","str","startsWith","endsWith","indexOf","match","replace","search","replacement","separator","substring","start","end","slice","parseJSON","JSON","parse","regex","flags","RegExp","random","push","String","set","key","value","get","analyzeSentiment","positiveWords","negativeWords","words","positive","negative","wordFrequency","frequency","forEach","word","detectLanguage","englishWords","englishCount","allowedGlobals","globalName","global","wrappedCode","Object","keys","join","func","Function","executeWithTimeout","args","timeout","Promise","resolve","reject","timer","setTimeout","apply","clearTimeout","getStatistics","totalExecutions","successfulExecutions","failedExecutions","securityViolations","averageExecutionTime","cleanup","Set"],"mappings":"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"}