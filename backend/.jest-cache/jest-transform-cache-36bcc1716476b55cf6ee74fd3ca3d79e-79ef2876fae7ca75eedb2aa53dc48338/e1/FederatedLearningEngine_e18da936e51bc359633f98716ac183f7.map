{"version":3,"names":["cov_1yoo2cjud7","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","EventEmitter","tf","createHash","LRUCache","EventStore","FederatedLearningEngine","initialize","isInitialized","console","log","initializeCryptography","loadFederatedNodes","loadGlobalModels","privacyAccountant","consensusEngine","emit","timestamp","Date","error","registerNode","nodeConfig","nodeId","now","Math","random","toString","substr","node","id","lastSeen","contributionHistory","roundsParticipated","averageAccuracy","totalDataSamples","reputationScore","validateNode","nodes","set","eventStore","recordEvent","event_type","entity_id","entity_type","data","name","startFederatedRound","modelId","config","roundId","globalModel","globalModels","get","Error","participants","selectParticipants","length","minParticipants","round","roundNumber","getCurrentRoundNumber","map","p","aggregationMethod","aggregationStrategy","privacyMechanism","status","startTime","modelUpdates","Map","aggregatedUpdate","performanceMetrics","accuracy","loss","convergenceRate","participationRate","getActiveNodes","privacyBudgetUsed","consensus","required","enabled","threshold","votes","approved","activeRounds","distributeGlobalModel","submitModelUpdate","update","includes","signedUpdate","signModelUpdate","privateUpdate","applyDifferentialPrivacy","updateNodeContribution","metadata","size","aggregateModelUpdates","federatedAveraging","federatedProximal","federatedNova","scaffoldAggregation","applyConsensus","finalizeRound","updates","Array","from","values","totalSamples","reduce","sum","trainingSamples","aggregatedWeights","layerIndex","modelWeights","layerSize","weightedSum","Float32Array","weight","layerWeights","i","push","gradients","localEpochs","u","localLoss","localAccuracy","computationTime","max","privacyNoise","signature","generateAggregatedSignature","encrypted","mu","globalWeights","getModelWeights","globalLayerWeights","proximalTerm","totalEffectiveSteps","normalizedWeight","epsilon","privacyPreferences","differentialPrivacyEpsilon","noiseVariance","clippingNorm","gradientClipping","clippedWeights","clipGradients","noisyWeights","addGaussianNoise","addNoiseEvent","vote","collectNodeVote","approvalCount","filter","approvalRate","updateGlobalModel","calculateRoundMetrics","endTime","updateNodeReputations","undefined","toFixed","metrics","delete","capabilities","trustScore","activeNodes","sort","a","scoreA","computePower","scoreB","slice","min","JSON","stringify","digest","model","weights","getWeights","tensor","dataSync","totalNorm","sqrt","layer","layerSum","scaleFactor","variance","noisyLayer","u1","u2","noise","cos","PI","w","currentWeights","newWeights","index","shape","setWeights","forEach","dispose","getTotalBudgetUsed","qualityScore","constructor","getInstance","cache","ttl","PrivacyAccountant","ConsensusEngine","currentBudget","budgetUsage","noiseEvents","budget","getNodeBudgetUsed","validateConsensus","federatedLearningEngine"],"sources":["FederatedLearningEngine.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { EventEmitter } from 'events';\nimport * as tf from '@tensorflow/tfjs-node';\nimport { createHash } from 'crypto';\nimport { LRUCache } from 'lru-cache';\nimport { EventStore } from '../analytics/EventStore';\nexport class FederatedLearningEngine extends EventEmitter {\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            console.log('üîó Initializing Federated Learning Engine...');\n            // Initialize cryptographic components\n            await this.initializeCryptography();\n            // Load existing nodes and models\n            await this.loadFederatedNodes();\n            await this.loadGlobalModels();\n            // Initialize privacy accountant\n            await this.privacyAccountant.initialize();\n            // Initialize consensus engine\n            await this.consensusEngine.initialize();\n            this.isInitialized = true;\n            console.log('‚úÖ Federated Learning Engine initialized successfully');\n            this.emit('initialized', {\n                timestamp: new Date()\n            });\n        } catch (error) {\n            console.error('‚ùå Failed to initialize Federated Learning Engine:', error);\n            throw error;\n        }\n    }\n    /**\n   * Register a new federated node\n   */ async registerNode(nodeConfig) {\n        const nodeId = `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const node = {\n            ...nodeConfig,\n            id: nodeId,\n            lastSeen: new Date(),\n            contributionHistory: {\n                roundsParticipated: 0,\n                averageAccuracy: 0,\n                totalDataSamples: 0,\n                reputationScore: 0.5 // Initial neutral reputation\n            }\n        };\n        // Validate node capabilities and security\n        await this.validateNode(node);\n        this.nodes.set(nodeId, node);\n        await this.eventStore.recordEvent({\n            event_type: 'federated_node_registered',\n            entity_id: nodeId,\n            entity_type: 'federated_node',\n            data: {\n                node\n            },\n            timestamp: new Date()\n        });\n        console.log(`ü§ù Registered new federated node: ${node.name} (${nodeId})`);\n        this.emit('nodeRegistered', {\n            nodeId,\n            node\n        });\n        return node;\n    }\n    /**\n   * Start a new federated learning round\n   */ async startFederatedRound(modelId, config) {\n        const roundId = `round_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        // Get global model\n        const globalModel = this.globalModels.get(modelId);\n        if (!globalModel) {\n            throw new Error(`Global model ${modelId} not found`);\n        }\n        // Select participants based on capabilities and trust\n        const participants = await this.selectParticipants(config);\n        if (participants.length < config.minParticipants) {\n            throw new Error(`Insufficient participants: ${participants.length} < ${config.minParticipants}`);\n        }\n        const round = {\n            id: roundId,\n            roundNumber: this.getCurrentRoundNumber(modelId) + 1,\n            globalModel: globalModel,\n            participants: participants.map((p)=>p.id),\n            aggregationMethod: config.aggregationStrategy === 'weighted_average' ? 'fedavg' : 'fedprox',\n            privacyMechanism: 'differential_privacy',\n            status: 'initializing',\n            startTime: new Date(),\n            modelUpdates: new Map(),\n            aggregatedUpdate: null,\n            performanceMetrics: {\n                accuracy: 0,\n                loss: 0,\n                convergenceRate: 0,\n                participationRate: participants.length / this.getActiveNodes().length,\n                privacyBudgetUsed: 0\n            },\n            consensus: {\n                required: config.consensus.enabled,\n                threshold: config.consensus.threshold,\n                votes: new Map(),\n                approved: false\n            }\n        };\n        this.activeRounds.set(roundId, round);\n        // Distribute global model to participants\n        await this.distributeGlobalModel(round, participants);\n        round.status = 'training';\n        await this.eventStore.recordEvent({\n            event_type: 'federated_round_started',\n            entity_id: roundId,\n            entity_type: 'federated_round',\n            data: {\n                round,\n                config\n            },\n            timestamp: new Date()\n        });\n        console.log(`üöÄ Started federated round ${round.roundNumber} with ${participants.length} participants`);\n        this.emit('roundStarted', {\n            roundId,\n            round\n        });\n        return round;\n    }\n    /**\n   * Submit model update from a federated node\n   */ async submitModelUpdate(update) {\n        const round = this.activeRounds.get(update.roundId);\n        if (!round) {\n            throw new Error(`Round ${update.roundId} not found`);\n        }\n        if (!round.participants.includes(update.nodeId)) {\n            throw new Error(`Node ${update.nodeId} not authorized for round ${update.roundId}`);\n        }\n        // Verify node signature and integrity\n        const signedUpdate = await this.signModelUpdate(update);\n        // Apply differential privacy\n        const privateUpdate = await this.applyDifferentialPrivacy(signedUpdate, round);\n        // Store model update\n        round.modelUpdates.set(update.nodeId, privateUpdate);\n        // Update node contribution history\n        await this.updateNodeContribution(update.nodeId, privateUpdate);\n        await this.eventStore.recordEvent({\n            event_type: 'model_update_submitted',\n            entity_id: update.nodeId,\n            entity_type: 'model_update',\n            data: {\n                roundId: update.roundId,\n                metadata: privateUpdate.metadata\n            },\n            timestamp: new Date()\n        });\n        console.log(`üì§ Received model update from node ${update.nodeId} for round ${update.roundId}`);\n        this.emit('updateReceived', {\n            roundId: update.roundId,\n            nodeId: update.nodeId\n        });\n        // Check if all participants have submitted updates\n        if (round.modelUpdates.size === round.participants.length) {\n            await this.aggregateModelUpdates(round);\n        }\n    }\n    /**\n   * Aggregate model updates using selected algorithm\n   */ async aggregateModelUpdates(round) {\n        round.status = 'aggregating';\n        console.log(`üîÑ Aggregating ${round.modelUpdates.size} model updates for round ${round.id}`);\n        try {\n            let aggregatedUpdate;\n            switch(round.aggregationMethod){\n                case 'fedavg':\n                    aggregatedUpdate = await this.federatedAveraging(round);\n                    break;\n                case 'fedprox':\n                    aggregatedUpdate = await this.federatedProximal(round);\n                    break;\n                case 'fednova':\n                    aggregatedUpdate = await this.federatedNova(round);\n                    break;\n                case 'scaffold':\n                    aggregatedUpdate = await this.scaffoldAggregation(round);\n                    break;\n                default:\n                    throw new Error(`Unsupported aggregation method: ${round.aggregationMethod}`);\n            }\n            round.aggregatedUpdate = aggregatedUpdate;\n            // Apply consensus mechanism if enabled\n            if (round.consensus.required) {\n                await this.applyConsensus(round);\n            } else {\n                await this.finalizeRound(round);\n            }\n        } catch (error) {\n            round.status = 'failed';\n            console.error(`‚ùå Failed to aggregate updates for round ${round.id}:`, error);\n            this.emit('roundFailed', {\n                roundId: round.id,\n                error\n            });\n        }\n    }\n    /**\n   * Federated Averaging (FedAvg) aggregation\n   */ async federatedAveraging(round) {\n        const updates = Array.from(round.modelUpdates.values());\n        const totalSamples = updates.reduce((sum, update)=>sum + update.metadata.trainingSamples, 0);\n        // Calculate weighted average of model weights\n        const aggregatedWeights = [];\n        for(let layerIndex = 0; layerIndex < updates[0].modelWeights.length; layerIndex++){\n            const layerSize = updates[0].modelWeights[layerIndex].length;\n            const weightedSum = new Float32Array(layerSize);\n            for (const update of updates){\n                const weight = update.metadata.trainingSamples / totalSamples;\n                const layerWeights = update.modelWeights[layerIndex];\n                for(let i = 0; i < layerSize; i++){\n                    weightedSum[i] += layerWeights[i] * weight;\n                }\n            }\n            aggregatedWeights.push(weightedSum);\n        }\n        return {\n            nodeId: 'aggregated',\n            roundId: round.id,\n            modelWeights: aggregatedWeights,\n            gradients: aggregatedWeights,\n            metadata: {\n                trainingSamples: totalSamples,\n                localEpochs: Math.round(updates.reduce((sum, u)=>sum + u.metadata.localEpochs, 0) / updates.length),\n                localLoss: updates.reduce((sum, u)=>sum + u.metadata.localLoss, 0) / updates.length,\n                localAccuracy: updates.reduce((sum, u)=>sum + u.metadata.localAccuracy, 0) / updates.length,\n                computationTime: Math.max(...updates.map((u)=>u.metadata.computationTime)),\n                privacyNoise: updates.reduce((sum, u)=>sum + u.metadata.privacyNoise, 0) / updates.length\n            },\n            signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n            timestamp: new Date(),\n            encrypted: false\n        };\n    }\n    /**\n   * Federated Proximal (FedProx) aggregation with proximal term\n   */ async federatedProximal(round, mu = 0.01) {\n        const updates = Array.from(round.modelUpdates.values());\n        const totalSamples = updates.reduce((sum, update)=>sum + update.metadata.trainingSamples, 0);\n        // Get global model weights\n        const globalWeights = await this.getModelWeights(round.globalModel);\n        // Calculate FedProx aggregation with proximal term\n        const aggregatedWeights = [];\n        for(let layerIndex = 0; layerIndex < globalWeights.length; layerIndex++){\n            const layerSize = globalWeights[layerIndex].length;\n            const weightedSum = new Float32Array(layerSize);\n            for (const update of updates){\n                const weight = update.metadata.trainingSamples / totalSamples;\n                const layerWeights = update.modelWeights[layerIndex];\n                const globalLayerWeights = globalWeights[layerIndex];\n                for(let i = 0; i < layerSize; i++){\n                    // Apply proximal term: w_i - mu * (w_i - w_global)\n                    const proximalTerm = layerWeights[i] - mu * (layerWeights[i] - globalLayerWeights[i]);\n                    weightedSum[i] += proximalTerm * weight;\n                }\n            }\n            aggregatedWeights.push(weightedSum);\n        }\n        return {\n            nodeId: 'aggregated_fedprox',\n            roundId: round.id,\n            modelWeights: aggregatedWeights,\n            gradients: aggregatedWeights,\n            metadata: {\n                trainingSamples: totalSamples,\n                localEpochs: Math.round(updates.reduce((sum, u)=>sum + u.metadata.localEpochs, 0) / updates.length),\n                localLoss: updates.reduce((sum, u)=>sum + u.metadata.localLoss, 0) / updates.length,\n                localAccuracy: updates.reduce((sum, u)=>sum + u.metadata.localAccuracy, 0) / updates.length,\n                computationTime: Math.max(...updates.map((u)=>u.metadata.computationTime)),\n                privacyNoise: updates.reduce((sum, u)=>sum + u.metadata.privacyNoise, 0) / updates.length\n            },\n            signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n            timestamp: new Date(),\n            encrypted: false\n        };\n    }\n    /**\n   * FedNova aggregation with normalized averaging\n   */ async federatedNova(round) {\n        const updates = Array.from(round.modelUpdates.values());\n        // Calculate normalized weights based on local steps\n        const totalEffectiveSteps = updates.reduce((sum, update)=>{\n            return sum + update.metadata.localEpochs * update.metadata.trainingSamples;\n        }, 0);\n        const aggregatedWeights = [];\n        for(let layerIndex = 0; layerIndex < updates[0].modelWeights.length; layerIndex++){\n            const layerSize = updates[0].modelWeights[layerIndex].length;\n            const weightedSum = new Float32Array(layerSize);\n            for (const update of updates){\n                const normalizedWeight = update.metadata.localEpochs * update.metadata.trainingSamples / totalEffectiveSteps;\n                const layerWeights = update.modelWeights[layerIndex];\n                for(let i = 0; i < layerSize; i++){\n                    weightedSum[i] += layerWeights[i] * normalizedWeight;\n                }\n            }\n            aggregatedWeights.push(weightedSum);\n        }\n        return {\n            nodeId: 'aggregated_fednova',\n            roundId: round.id,\n            modelWeights: aggregatedWeights,\n            gradients: aggregatedWeights,\n            metadata: {\n                trainingSamples: updates.reduce((sum, u)=>sum + u.metadata.trainingSamples, 0),\n                localEpochs: Math.round(updates.reduce((sum, u)=>sum + u.metadata.localEpochs, 0) / updates.length),\n                localLoss: updates.reduce((sum, u)=>sum + u.metadata.localLoss, 0) / updates.length,\n                localAccuracy: updates.reduce((sum, u)=>sum + u.metadata.localAccuracy, 0) / updates.length,\n                computationTime: Math.max(...updates.map((u)=>u.metadata.computationTime)),\n                privacyNoise: updates.reduce((sum, u)=>sum + u.metadata.privacyNoise, 0) / updates.length\n            },\n            signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n            timestamp: new Date(),\n            encrypted: false\n        };\n    }\n    /**\n   * SCAFFOLD aggregation with control variates\n   */ async scaffoldAggregation(round) {\n        // Simplified SCAFFOLD implementation\n        // In practice, this would maintain control variates for variance reduction\n        return await this.federatedAveraging(round);\n    }\n    /**\n   * Apply differential privacy to model updates\n   */ async applyDifferentialPrivacy(update, round) {\n        const node = this.nodes.get(update.nodeId);\n        if (!node) {\n            throw new Error(`Node ${update.nodeId} not found`);\n        }\n        const epsilon = node.privacyPreferences.differentialPrivacyEpsilon;\n        const noiseVariance = node.privacyPreferences.noiseVariance;\n        const clippingNorm = node.privacyPreferences.gradientClipping;\n        // Apply gradient clipping\n        const clippedWeights = this.clipGradients(update.modelWeights, clippingNorm);\n        // Add Gaussian noise for differential privacy\n        const noisyWeights = this.addGaussianNoise(clippedWeights, noiseVariance);\n        // Update privacy accountant\n        await this.privacyAccountant.addNoiseEvent(update.nodeId, epsilon, noiseVariance);\n        return {\n            ...update,\n            modelWeights: noisyWeights,\n            metadata: {\n                ...update.metadata,\n                privacyNoise: noiseVariance\n            }\n        };\n    }\n    /**\n   * Apply consensus mechanism\n   */ async applyConsensus(round) {\n        console.log(`üó≥Ô∏è Applying consensus for round ${round.id}`);\n        // Collect votes from participating nodes\n        for (const nodeId of round.participants){\n            const vote = await this.collectNodeVote(nodeId, round);\n            round.consensus.votes.set(nodeId, vote);\n        }\n        // Calculate consensus\n        const approvalCount = Array.from(round.consensus.votes.values()).filter((vote)=>vote).length;\n        const approvalRate = approvalCount / round.participants.length;\n        round.consensus.approved = approvalRate >= round.consensus.threshold;\n        if (round.consensus.approved) {\n            await this.finalizeRound(round);\n        } else {\n            round.status = 'failed';\n            console.log(`‚ùå Consensus failed for round ${round.id}: ${approvalRate} < ${round.consensus.threshold}`);\n            this.emit('consensusFailed', {\n                roundId: round.id,\n                approvalRate\n            });\n        }\n    }\n    /**\n   * Finalize federated round\n   */ async finalizeRound(round) {\n        if (!round.aggregatedUpdate) {\n            throw new Error('No aggregated update available');\n        }\n        // Update global model with aggregated weights\n        await this.updateGlobalModel(round.globalModel, round.aggregatedUpdate);\n        // Calculate performance metrics\n        round.performanceMetrics = await this.calculateRoundMetrics(round);\n        round.status = 'completed';\n        round.endTime = new Date();\n        // Update node reputations\n        await this.updateNodeReputations(round);\n        await this.eventStore.recordEvent({\n            event_type: 'federated_round_completed',\n            entity_id: round.id,\n            entity_type: 'federated_round',\n            data: {\n                round: {\n                    ...round,\n                    globalModel: undefined // Don't serialize the model\n                }\n            },\n            timestamp: new Date()\n        });\n        console.log(`‚úÖ Completed federated round ${round.roundNumber} with accuracy: ${round.performanceMetrics.accuracy.toFixed(4)}`);\n        this.emit('roundCompleted', {\n            roundId: round.id,\n            metrics: round.performanceMetrics\n        });\n        // Remove from active rounds\n        this.activeRounds.delete(round.id);\n    }\n    // Helper methods for coordination\n    async initializeCryptography() {\n        // Initialize cryptographic primitives for secure communication\n        console.log('üîê Initializing cryptographic components...');\n    }\n    async loadFederatedNodes() {\n        // Load existing federated nodes from storage\n        console.log('üë• Loading federated nodes...');\n    }\n    async loadGlobalModels() {\n        // Load global models from storage\n        console.log('üß† Loading global models...');\n    }\n    async validateNode(node) {\n        // Validate node capabilities and security credentials\n        if (node.capabilities.trustScore < 0.3) {\n            throw new Error('Node trust score too low');\n        }\n    }\n    async selectParticipants(config) {\n        const activeNodes = this.getActiveNodes();\n        // Select nodes based on trust score, capabilities, and reputation\n        return activeNodes.filter((node)=>node.capabilities.trustScore >= 0.5).sort((a, b)=>{\n            const scoreA = a.capabilities.trustScore * 0.4 + a.contributionHistory.reputationScore * 0.3 + a.capabilities.computePower * 0.3;\n            const scoreB = b.capabilities.trustScore * 0.4 + b.contributionHistory.reputationScore * 0.3 + b.capabilities.computePower * 0.3;\n            return scoreB - scoreA;\n        }).slice(0, Math.min(config.minParticipants * 2, activeNodes.length));\n    }\n    getActiveNodes() {\n        return Array.from(this.nodes.values()).filter((node)=>node.status === 'active');\n    }\n    getCurrentRoundNumber(modelId) {\n        // Get current round number for model\n        return 0; // Simplified implementation\n    }\n    async distributeGlobalModel(round, participants) {\n        // Distribute global model to participating nodes\n        console.log(`üì° Distributing global model to ${participants.length} participants`);\n    }\n    async signModelUpdate(update) {\n        const signature = createHash('sha256').update(JSON.stringify({\n            ...update,\n            modelWeights: 'hashed'\n        })).digest('hex');\n        return {\n            ...update,\n            signature,\n            timestamp: new Date()\n        };\n    }\n    async updateNodeContribution(nodeId, update) {\n        const node = this.nodes.get(nodeId);\n        if (node) {\n            node.contributionHistory.roundsParticipated += 1;\n            node.contributionHistory.totalDataSamples += update.metadata.trainingSamples;\n            node.contributionHistory.averageAccuracy = (node.contributionHistory.averageAccuracy + update.metadata.localAccuracy) / 2;\n            node.lastSeen = new Date();\n        }\n    }\n    async getModelWeights(model) {\n        const weights = model.getWeights();\n        return weights.map((tensor)=>tensor.dataSync());\n    }\n    clipGradients(weights, clippingNorm) {\n        const totalNorm = Math.sqrt(weights.reduce((sum, layer)=>{\n            return sum + layer.reduce((layerSum, weight)=>layerSum + weight * weight, 0);\n        }, 0));\n        if (totalNorm > clippingNorm) {\n            const scaleFactor = clippingNorm / totalNorm;\n            return weights.map((layer)=>layer.map((weight)=>weight * scaleFactor));\n        }\n        return weights;\n    }\n    addGaussianNoise(weights, variance) {\n        return weights.map((layer)=>{\n            const noisyLayer = new Float32Array(layer.length);\n            for(let i = 0; i < layer.length; i++){\n                // Box-Muller transform for Gaussian noise\n                const u1 = Math.random();\n                const u2 = Math.random();\n                const noise = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2) * Math.sqrt(variance);\n                noisyLayer[i] = layer[i] + noise;\n            }\n            return noisyLayer;\n        });\n    }\n    async generateAggregatedSignature(roundId, weights) {\n        return createHash('sha256').update(roundId + JSON.stringify(weights.map((w)=>Array.from(w.slice(0, 10))))).digest('hex');\n    }\n    async collectNodeVote(nodeId, round) {\n        // In practice, this would query the node for its vote on the aggregated update\n        // For now, return a random vote with bias towards approval\n        return Math.random() > 0.2; // 80% approval rate\n    }\n    async updateGlobalModel(model, update) {\n        // Apply aggregated weights to global model\n        const currentWeights = model.getWeights();\n        const newWeights = update.modelWeights.map((layerWeights, index)=>{\n            return tf.tensor(layerWeights, currentWeights[index].shape);\n        });\n        model.setWeights(newWeights);\n        // Dispose old tensors\n        currentWeights.forEach((tensor)=>tensor.dispose());\n    }\n    async calculateRoundMetrics(round) {\n        const updates = Array.from(round.modelUpdates.values());\n        return {\n            accuracy: updates.reduce((sum, u)=>sum + u.metadata.localAccuracy, 0) / updates.length,\n            loss: updates.reduce((sum, u)=>sum + u.metadata.localLoss, 0) / updates.length,\n            convergenceRate: 0.95,\n            participationRate: round.modelUpdates.size / round.participants.length,\n            privacyBudgetUsed: await this.privacyAccountant.getTotalBudgetUsed()\n        };\n    }\n    async updateNodeReputations(round) {\n        for (const [nodeId, update] of round.modelUpdates){\n            const node = this.nodes.get(nodeId);\n            if (node) {\n                // Update reputation based on contribution quality\n                const qualityScore = update.metadata.localAccuracy * 0.7 + (1 - update.metadata.localLoss) * 0.3;\n                node.contributionHistory.reputationScore = node.contributionHistory.reputationScore * 0.9 + qualityScore * 0.1;\n            }\n        }\n    }\n    constructor(){\n        super(), _define_property(this, \"nodes\", void 0), _define_property(this, \"activeRounds\", void 0), _define_property(this, \"globalModels\", void 0), _define_property(this, \"eventStore\", void 0), _define_property(this, \"modelTrainingEngine\", void 0), _define_property(this, \"cache\", void 0), _define_property(this, \"privacyAccountant\", void 0), _define_property(this, \"consensusEngine\", void 0), _define_property(this, \"isInitialized\", false);\n        this.nodes = new Map();\n        this.activeRounds = new Map();\n        this.globalModels = new Map();\n        this.eventStore = EventStore.getInstance();\n        this.cache = new LRUCache({\n            max: 1000,\n            ttl: 1000 * 60 * 30 // 30 minutes\n        });\n        this.privacyAccountant = new PrivacyAccountant();\n        this.consensusEngine = new ConsensusEngine();\n    }\n}\n/**\n * Privacy Accountant for tracking differential privacy budget\n */ class PrivacyAccountant {\n    async initialize() {\n        console.log('üîí Privacy Accountant initialized');\n    }\n    async addNoiseEvent(nodeId, epsilon, variance) {\n        const currentBudget = this.budgetUsage.get(nodeId) || 0;\n        this.budgetUsage.set(nodeId, currentBudget + epsilon);\n        this.noiseEvents.push({\n            nodeId,\n            epsilon,\n            timestamp: new Date()\n        });\n    }\n    async getTotalBudgetUsed() {\n        return Array.from(this.budgetUsage.values()).reduce((sum, budget)=>sum + budget, 0);\n    }\n    async getNodeBudgetUsed(nodeId) {\n        return this.budgetUsage.get(nodeId) || 0;\n    }\n    constructor(){\n        _define_property(this, \"budgetUsage\", new Map());\n        _define_property(this, \"noiseEvents\", []);\n    }\n}\n/**\n * Consensus Engine for distributed decision making\n */ class ConsensusEngine {\n    async initialize() {\n        console.log('ü§ù Consensus Engine initialized');\n    }\n    async validateConsensus(votes, threshold) {\n        const approvalCount = Array.from(votes.values()).filter((vote)=>vote).length;\n        return approvalCount / votes.size >= threshold;\n    }\n}\n// Export singleton instance\nexport const federatedLearningEngine = new FederatedLearningEngine();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}