b39292c0798b5332e807ded090a5f69f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get handleValidationErrors () {
        return handleValidationErrors;
    },
    get limitRequestSize () {
        return limitRequestSize;
    },
    get promptCardValidation () {
        return promptCardValidation;
    },
    get sanitizeInput () {
        return sanitizeInput;
    },
    get sanitizeRequestBody () {
        return sanitizeRequestBody;
    },
    get testCaseValidation () {
        return testCaseValidation;
    },
    get validateEmail () {
        return validateEmail;
    },
    get validatePromptCard () {
        return validatePromptCard;
    },
    get validateRequest () {
        return validateRequest;
    },
    get validateUrl () {
        return validateUrl;
    },
    get validation () {
        return validation;
    }
});
const _joi = /*#__PURE__*/ _interop_require_default(require("joi"));
const _expressvalidator = require("express-validator");
const _sanitizehtml = /*#__PURE__*/ _interop_require_default(require("sanitize-html"));
const _validator = /*#__PURE__*/ _interop_require_default(require("validator"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function validation(schema) {
    return (req, res, next)=>{
        const { error, value } = schema.validate(req.body);
        if (error) {
            res.status(400).json({
                error: 'Validation failed',
                details: error.details.map((detail)=>({
                        field: detail.path.join('.'),
                        message: detail.message
                    }))
            });
            return;
        }
        req.body = value;
        next();
    };
}
function validateRequest(schema) {
    return validation(schema);
}
const promptCardValidation = _joi.default.object({
    title: _joi.default.string().min(1).max(200).required().trim(),
    prompt_template: _joi.default.string().min(1).max(5000).required(),
    variables: _joi.default.array().items(_joi.default.string()).default([]),
    category_id: _joi.default.number().integer().positive().optional(),
    tags: _joi.default.array().items(_joi.default.string().max(50)).default([]),
    description: _joi.default.string().max(1000).optional().allow(''),
    is_active: _joi.default.boolean().default(true)
});
const testCaseValidation = _joi.default.object({
    prompt_card_id: _joi.default.number().integer().positive().required(),
    input_variables: _joi.default.object().required(),
    expected_output: _joi.default.string().required(),
    assertion_type: _joi.default.string().valid('contains', 'equals', 'regex', 'length', 'custom').required(),
    assertion_value: _joi.default.string().required(),
    description: _joi.default.string().max(500).optional().allow('')
});
function sanitizeInput(input) {
    return (0, _sanitizehtml.default)(input, {
        allowedTags: [],
        allowedAttributes: {}
    });
}
function validateEmail(email) {
    return _validator.default.isEmail(email);
}
function validateUrl(url) {
    return _validator.default.isURL(url);
}
function sanitizeRequestBody(req, res, next) {
    if (req.body && typeof req.body === 'object') {
        req.body = sanitizeObjectInputs(req.body);
    }
    next();
}
function handleValidationErrors(req, res, next) {
    const errors = (0, _expressvalidator.validationResult)(req);
    if (!errors.isEmpty()) {
        res.status(400).json({
            error: 'Validation failed',
            details: errors.array()
        });
        return;
    }
    next();
}
function limitRequestSize(limit) {
    return (req, res, next)=>{
        const contentLength = parseInt(req.get('content-length') || '0');
        if (contentLength > limit) {
            res.status(413).json({
                error: 'Request entity too large',
                maxSize: limit,
                actualSize: contentLength
            });
            return;
        }
        next();
    };
}
function validatePromptCard(req, res, next) {
    const { error, value } = promptCardValidation.validate(req.body);
    if (error) {
        res.status(400).json({
            error: 'Validation failed',
            details: error.details.map((detail)=>({
                    field: detail.path.join('.'),
                    message: detail.message
                }))
        });
        return;
    }
    req.body = value;
    next();
}
// Helper function to sanitize object inputs recursively
function sanitizeObjectInputs(obj) {
    if (typeof obj === 'string') {
        return sanitizeInput(obj);
    } else if (Array.isArray(obj)) {
        return obj.map((item)=>sanitizeObjectInputs(item));
    } else if (obj && typeof obj === 'object') {
        const sanitized = {};
        for (const [key, value] of Object.entries(obj)){
            sanitized[key] = sanitizeObjectInputs(value);
        }
        return sanitized;
    }
    return obj;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy9taWRkbGV3YXJlL3ZhbGlkYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IEpvaSBmcm9tICdqb2knO1xuaW1wb3J0IHsgYm9keSwgdmFsaWRhdGlvblJlc3VsdCwgcGFyYW0sIHF1ZXJ5IH0gZnJvbSAnZXhwcmVzcy12YWxpZGF0b3InO1xuaW1wb3J0IHNhbml0aXplSHRtbCBmcm9tICdzYW5pdGl6ZS1odG1sJztcbi8vIGltcG9ydCB7IGxvZ1NlY3VyaXR5RXZlbnQgfSBmcm9tICcuL3N0cnVjdHVyZWRMb2dnaW5nJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAndmFsaWRhdG9yJztcblxuLy8gRW5oYW5jZWQgdmFsaWRhdGlvbiBzY2hlbWEgZm9yIHByb21wdCBjYXJkcyB3aXRoIHNlY3VyaXR5IHJ1bGVzXG5cbi8vIEdlbmVyaWMgdmFsaWRhdGlvbiBtaWRkbGV3YXJlIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGlvbihzY2hlbWE6IEpvaS5PYmplY3RTY2hlbWEpIHtcbiAgcmV0dXJuIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSBzY2hlbWEudmFsaWRhdGUocmVxLmJvZHkpO1xuICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ1ZhbGlkYXRpb24gZmFpbGVkJyxcbiAgICAgICAgZGV0YWlsczogZXJyb3IuZGV0YWlscy5tYXAoZGV0YWlsID0+ICh7XG4gICAgICAgICAgZmllbGQ6IGRldGFpbC5wYXRoLmpvaW4oJy4nKSxcbiAgICAgICAgICBtZXNzYWdlOiBkZXRhaWwubWVzc2FnZVxuICAgICAgICB9KSlcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICByZXEuYm9keSA9IHZhbHVlO1xuICAgIG5leHQoKTtcbiAgfTtcbn1cblxuLy8gRXhwb3J0IHZhbGlkYXRlUmVxdWVzdCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUmVxdWVzdChzY2hlbWE6IEpvaS5PYmplY3RTY2hlbWEpIHtcbiAgcmV0dXJuIHZhbGlkYXRpb24oc2NoZW1hKTtcbn1cblxuLy8gU3RhbmRhcmQgdmFsaWRhdGlvbiBzY2hlbWFzXG5leHBvcnQgY29uc3QgcHJvbXB0Q2FyZFZhbGlkYXRpb24gPSBKb2kub2JqZWN0KHtcbiAgdGl0bGU6IEpvaS5zdHJpbmcoKS5taW4oMSkubWF4KDIwMCkucmVxdWlyZWQoKS50cmltKCksXG4gIHByb21wdF90ZW1wbGF0ZTogSm9pLnN0cmluZygpLm1pbigxKS5tYXgoNTAwMCkucmVxdWlyZWQoKSxcbiAgdmFyaWFibGVzOiBKb2kuYXJyYXkoKS5pdGVtcyhKb2kuc3RyaW5nKCkpLmRlZmF1bHQoW10pLFxuICBjYXRlZ29yeV9pZDogSm9pLm51bWJlcigpLmludGVnZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKCksXG4gIHRhZ3M6IEpvaS5hcnJheSgpLml0ZW1zKEpvaS5zdHJpbmcoKS5tYXgoNTApKS5kZWZhdWx0KFtdKSxcbiAgZGVzY3JpcHRpb246IEpvaS5zdHJpbmcoKS5tYXgoMTAwMCkub3B0aW9uYWwoKS5hbGxvdygnJyksXG4gIGlzX2FjdGl2ZTogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpXG59KTtcblxuZXhwb3J0IGNvbnN0IHRlc3RDYXNlVmFsaWRhdGlvbiA9IEpvaS5vYmplY3Qoe1xuICBwcm9tcHRfY2FyZF9pZDogSm9pLm51bWJlcigpLmludGVnZXIoKS5wb3NpdGl2ZSgpLnJlcXVpcmVkKCksXG4gIGlucHV0X3ZhcmlhYmxlczogSm9pLm9iamVjdCgpLnJlcXVpcmVkKCksXG4gIGV4cGVjdGVkX291dHB1dDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGFzc2VydGlvbl90eXBlOiBKb2kuc3RyaW5nKCkudmFsaWQoJ2NvbnRhaW5zJywgJ2VxdWFscycsICdyZWdleCcsICdsZW5ndGgnLCAnY3VzdG9tJykucmVxdWlyZWQoKSxcbiAgYXNzZXJ0aW9uX3ZhbHVlOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgZGVzY3JpcHRpb246IEpvaS5zdHJpbmcoKS5tYXgoNTAwKS5vcHRpb25hbCgpLmFsbG93KCcnKVxufSk7XG5cbi8vIFNlY3VyaXR5IHZhbGlkYXRpb24gaGVscGVyc1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplSW5wdXQoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzYW5pdGl6ZUh0bWwoaW5wdXQsIHtcbiAgICBhbGxvd2VkVGFnczogW10sXG4gICAgYWxsb3dlZEF0dHJpYnV0ZXM6IHt9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVFbWFpbChlbWFpbDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWxpZGF0b3IuaXNFbWFpbChlbWFpbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVVybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsaWRhdG9yLmlzVVJMKHVybCk7XG59XG5cbi8vIE1pc3NpbmcgZXhwb3J0cyB0aGF0IGFyZSBpbXBvcnRlZCBlbHNld2hlcmVcbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZVJlcXVlc3RCb2R5KHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gIGlmIChyZXEuYm9keSAmJiB0eXBlb2YgcmVxLmJvZHkgPT09ICdvYmplY3QnKSB7XG4gICAgcmVxLmJvZHkgPSBzYW5pdGl6ZU9iamVjdElucHV0cyhyZXEuYm9keSk7XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlVmFsaWRhdGlvbkVycm9ycyhyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQge1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0aW9uUmVzdWx0KHJlcSk7XG4gIGlmICghZXJyb3JzLmlzRW1wdHkoKSkge1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIGVycm9yOiAnVmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgZGV0YWlsczogZXJyb3JzLmFycmF5KClcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGltaXRSZXF1ZXN0U2l6ZShsaW1pdDogbnVtYmVyKSB7XG4gIHJldHVybiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkID0+IHtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gcGFyc2VJbnQocmVxLmdldCgnY29udGVudC1sZW5ndGgnKSB8fCAnMCcpO1xuICAgIGlmIChjb250ZW50TGVuZ3RoID4gbGltaXQpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDEzKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdSZXF1ZXN0IGVudGl0eSB0b28gbGFyZ2UnLFxuICAgICAgICBtYXhTaXplOiBsaW1pdCxcbiAgICAgICAgYWN0dWFsU2l6ZTogY29udGVudExlbmd0aFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJvbXB0Q2FyZChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQge1xuICBjb25zdCB7IGVycm9yLCB2YWx1ZSB9ID0gcHJvbXB0Q2FyZFZhbGlkYXRpb24udmFsaWRhdGUocmVxLmJvZHkpO1xuICBpZiAoZXJyb3IpIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBlcnJvcjogJ1ZhbGlkYXRpb24gZmFpbGVkJyxcbiAgICAgIGRldGFpbHM6IGVycm9yLmRldGFpbHMubWFwKGRldGFpbCA9PiAoe1xuICAgICAgICBmaWVsZDogZGV0YWlsLnBhdGguam9pbignLicpLFxuICAgICAgICBtZXNzYWdlOiBkZXRhaWwubWVzc2FnZVxuICAgICAgfSkpXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlcS5ib2R5ID0gdmFsdWU7XG4gIG5leHQoKTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNhbml0aXplIG9iamVjdCBpbnB1dHMgcmVjdXJzaXZlbHlcbmZ1bmN0aW9uIHNhbml0aXplT2JqZWN0SW5wdXRzKG9iajogYW55KTogYW55IHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHNhbml0aXplSW5wdXQob2JqKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLm1hcChpdGVtID0+IHNhbml0aXplT2JqZWN0SW5wdXRzKGl0ZW0pKTtcbiAgfSBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBzYW5pdGl6ZWQ6IGFueSA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICAgIHNhbml0aXplZFtrZXldID0gc2FuaXRpemVPYmplY3RJbnB1dHModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gc2FuaXRpemVkO1xuICB9XG4gIHJldHVybiBvYmo7XG59Il0sIm5hbWVzIjpbImhhbmRsZVZhbGlkYXRpb25FcnJvcnMiLCJsaW1pdFJlcXVlc3RTaXplIiwicHJvbXB0Q2FyZFZhbGlkYXRpb24iLCJzYW5pdGl6ZUlucHV0Iiwic2FuaXRpemVSZXF1ZXN0Qm9keSIsInRlc3RDYXNlVmFsaWRhdGlvbiIsInZhbGlkYXRlRW1haWwiLCJ2YWxpZGF0ZVByb21wdENhcmQiLCJ2YWxpZGF0ZVJlcXVlc3QiLCJ2YWxpZGF0ZVVybCIsInZhbGlkYXRpb24iLCJzY2hlbWEiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXJyb3IiLCJ2YWx1ZSIsInZhbGlkYXRlIiwiYm9keSIsInN0YXR1cyIsImpzb24iLCJkZXRhaWxzIiwibWFwIiwiZGV0YWlsIiwiZmllbGQiLCJwYXRoIiwiam9pbiIsIm1lc3NhZ2UiLCJKb2kiLCJvYmplY3QiLCJ0aXRsZSIsInN0cmluZyIsIm1pbiIsIm1heCIsInJlcXVpcmVkIiwidHJpbSIsInByb21wdF90ZW1wbGF0ZSIsInZhcmlhYmxlcyIsImFycmF5IiwiaXRlbXMiLCJkZWZhdWx0IiwiY2F0ZWdvcnlfaWQiLCJudW1iZXIiLCJpbnRlZ2VyIiwicG9zaXRpdmUiLCJvcHRpb25hbCIsInRhZ3MiLCJkZXNjcmlwdGlvbiIsImFsbG93IiwiaXNfYWN0aXZlIiwiYm9vbGVhbiIsInByb21wdF9jYXJkX2lkIiwiaW5wdXRfdmFyaWFibGVzIiwiZXhwZWN0ZWRfb3V0cHV0IiwiYXNzZXJ0aW9uX3R5cGUiLCJ2YWxpZCIsImFzc2VydGlvbl92YWx1ZSIsImlucHV0Iiwic2FuaXRpemVIdG1sIiwiYWxsb3dlZFRhZ3MiLCJhbGxvd2VkQXR0cmlidXRlcyIsImVtYWlsIiwidmFsaWRhdG9yIiwiaXNFbWFpbCIsInVybCIsImlzVVJMIiwic2FuaXRpemVPYmplY3RJbnB1dHMiLCJlcnJvcnMiLCJ2YWxpZGF0aW9uUmVzdWx0IiwiaXNFbXB0eSIsImxpbWl0IiwiY29udGVudExlbmd0aCIsInBhcnNlSW50IiwiZ2V0IiwibWF4U2l6ZSIsImFjdHVhbFNpemUiLCJvYmoiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtIiwic2FuaXRpemVkIiwia2V5IiwiT2JqZWN0IiwiZW50cmllcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUErRWdCQTtlQUFBQTs7UUFZQUM7ZUFBQUE7O1FB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