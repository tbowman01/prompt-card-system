{"version":3,"names":["cov_zeek9514e","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","EventEmitter","AnalyticsEngine","BlockchainAuditTrail","VoiceInterface","processVoiceCommand","audioData","userId","language","transcription","speechToText","nlpResult","nlpProcessor","processCommand","voiceCommand","id","Date","now","Math","random","toString","substr","command","intent","entities","confidence","timestamp","sessionId","activeSession","blockchainAudit","recordAuditEvent","eventType","data","response","executeCommand","emit","error","console","message","text","suggestions","handleCreatePrompt","handleRunTest","handleGetAnalytics","handleShowMetrics","handleExportReport","handleCompareModels","handleOptimizePrompt","handleScheduleTest","handleVoiceSettings","handleUnknownIntent","promptName","name","promptType","type","actions","testName","test","prompt","model","timeframe","metric","metrics","analyticsEngine","getDashboardMetrics","responseText","realtime","successRate","toFixed","historical","overallSuccessRate","averageResponseTime","activeTests","responseTime","totalTests","metricType","format","toUpperCase","model1","model2","promptId","schedule","time","setting","textToSpeech","ArrayBuffer","startVoiceSession","endVoiceSession","getSupportedLanguages","supportedLanguages","configureVoiceSettings","settings","constructor","getInstance","AdvancedNLPProcessor","initializePatterns","intentPatterns","set","entityExtractors","normalizedText","toLowerCase","trim","bestIntent","maxScore","patterns","pattern","score","calculatePatternScore","entityType","extractor","match","min","matchLength","length","textLength","positionScore","index","lengthScore","Map"],"sources":["VoiceInterface.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { EventEmitter } from 'events';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { BlockchainAuditTrail } from './BlockchainAuditTrail';\nexport class VoiceInterface extends EventEmitter {\n    /**\n   * Process voice command and return response\n   */ async processVoiceCommand(audioData, userId, language = 'en-US') {\n        try {\n            // Convert speech to text\n            const transcription = await this.speechToText(audioData, language);\n            // Process with NLP\n            const nlpResult = await this.nlpProcessor.processCommand(transcription);\n            // Create voice command record\n            const voiceCommand = {\n                id: `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n                command: transcription,\n                intent: nlpResult.intent,\n                entities: nlpResult.entities,\n                confidence: nlpResult.confidence,\n                timestamp: new Date(),\n                userId,\n                sessionId: this.activeSession || 'default'\n            };\n            // Log to blockchain audit trail\n            await this.blockchainAudit.recordAuditEvent({\n                eventType: 'voice_command',\n                userId,\n                data: voiceCommand,\n                timestamp: new Date()\n            });\n            // Execute command based on intent\n            const response = await this.executeCommand(voiceCommand);\n            this.emit('voiceCommandProcessed', voiceCommand, response);\n            return response;\n        } catch (error) {\n            console.error('Error processing voice command:', error);\n            // Log error to audit trail\n            await this.blockchainAudit.recordAuditEvent({\n                eventType: 'voice_command_error',\n                userId,\n                data: {\n                    error: error.message\n                },\n                timestamp: new Date()\n            });\n            return {\n                text: 'I apologize, but I encountered an error processing your voice command. Please try again.',\n                suggestions: [\n                    'Try speaking more clearly',\n                    'Check your microphone',\n                    'Use simpler commands'\n                ]\n            };\n        }\n    }\n    /**\n   * Execute command based on intent\n   */ async executeCommand(command) {\n        const { intent, entities } = command;\n        switch(intent){\n            case 'create_prompt':\n                return await this.handleCreatePrompt(entities);\n            case 'run_test':\n                return await this.handleRunTest(entities);\n            case 'get_analytics':\n                return await this.handleGetAnalytics(entities);\n            case 'show_metrics':\n                return await this.handleShowMetrics(entities);\n            case 'export_report':\n                return await this.handleExportReport(entities);\n            case 'compare_models':\n                return await this.handleCompareModels(entities);\n            case 'optimize_prompt':\n                return await this.handleOptimizePrompt(entities);\n            case 'schedule_test':\n                return await this.handleScheduleTest(entities);\n            case 'voice_settings':\n                return await this.handleVoiceSettings(entities);\n            default:\n                return this.handleUnknownIntent(command);\n        }\n    }\n    /**\n   * Handle create prompt command\n   */ async handleCreatePrompt(entities) {\n        const promptName = entities.name || 'Untitled Prompt';\n        const promptType = entities.type || 'general';\n        return {\n            text: `I'll help you create a new prompt card called \"${promptName}\" of type \"${promptType}\". What content would you like to include?`,\n            actions: [\n                'open_prompt_editor'\n            ],\n            data: {\n                name: promptName,\n                type: promptType\n            },\n            suggestions: [\n                'Add test cases',\n                'Set model parameters',\n                'Configure assertions'\n            ]\n        };\n    }\n    /**\n   * Handle run test command\n   */ async handleRunTest(entities) {\n        const testName = entities.test || entities.prompt;\n        const model = entities.model || 'default';\n        if (!testName) {\n            return {\n                text: 'Which test would you like to run? Please specify the test name or prompt card.',\n                suggestions: [\n                    'List available tests',\n                    'Show recent tests',\n                    'Help with testing'\n                ]\n            };\n        }\n        return {\n            text: `Running test \"${testName}\" with model \"${model}\". I'll notify you when it's complete.`,\n            actions: [\n                'start_test_execution'\n            ],\n            data: {\n                testName,\n                model\n            },\n            suggestions: [\n                'Monitor progress',\n                'View live results',\n                'Run additional tests'\n            ]\n        };\n    }\n    /**\n   * Handle analytics request\n   */ async handleGetAnalytics(entities) {\n        const timeframe = entities.timeframe || 'today';\n        const metric = entities.metric || 'overview';\n        try {\n            const metrics = await this.analyticsEngine.getDashboardMetrics();\n            let responseText = '';\n            let data = {};\n            switch(metric){\n                case 'success_rate':\n                    responseText = `Current success rate is ${(metrics.realtime.successRate * 100).toFixed(1)}%. `;\n                    responseText += `Overall success rate is ${(metrics.historical.overallSuccessRate * 100).toFixed(1)}%.`;\n                    data = {\n                        successRate: metrics.realtime.successRate\n                    };\n                    break;\n                case 'performance':\n                    responseText = `Average response time is ${metrics.realtime.averageResponseTime.toFixed(0)} milliseconds. `;\n                    responseText += `You have ${metrics.realtime.activeTests} active tests running.`;\n                    data = {\n                        responseTime: metrics.realtime.averageResponseTime\n                    };\n                    break;\n                default:\n                    responseText = `Here's your analytics overview: `;\n                    responseText += `${metrics.historical.totalTests} total tests, `;\n                    responseText += `${(metrics.realtime.successRate * 100).toFixed(1)}% success rate, `;\n                    responseText += `${metrics.realtime.averageResponseTime.toFixed(0)}ms average response time.`;\n                    data = metrics;\n            }\n            return {\n                text: responseText,\n                data,\n                actions: [\n                    'show_analytics_dashboard'\n                ],\n                suggestions: [\n                    'Show performance trends',\n                    'View detailed metrics',\n                    'Export analytics report'\n                ]\n            };\n        } catch (error) {\n            return {\n                text: 'I encountered an error retrieving analytics data. Please try again or check the dashboard manually.',\n                suggestions: [\n                    'Try again',\n                    'Check dashboard',\n                    'Contact support'\n                ]\n            };\n        }\n    }\n    /**\n   * Handle metrics display\n   */ async handleShowMetrics(entities) {\n        const metricType = entities.type || 'all';\n        return {\n            text: `Displaying ${metricType} metrics on your dashboard. You can also ask me specific questions about the data.`,\n            actions: [\n                'show_metrics_dashboard'\n            ],\n            data: {\n                metricType\n            },\n            suggestions: [\n                'What was yesterday\\'s performance?',\n                'Show model comparison',\n                'Export this data'\n            ]\n        };\n    }\n    /**\n   * Handle report export\n   */ async handleExportReport(entities) {\n        const format = entities.format || 'pdf';\n        const timeframe = entities.timeframe || 'last_week';\n        return {\n            text: `Generating ${format.toUpperCase()} report for ${timeframe}. I'll notify you when it's ready for download.`,\n            actions: [\n                'generate_report'\n            ],\n            data: {\n                format,\n                timeframe\n            },\n            suggestions: [\n                'Schedule regular reports',\n                'Customize report content',\n                'Share with team'\n            ]\n        };\n    }\n    /**\n   * Handle model comparison\n   */ async handleCompareModels(entities) {\n        const model1 = entities.model1;\n        const model2 = entities.model2;\n        const metric = entities.metric || 'performance';\n        if (!model1 || !model2) {\n            return {\n                text: 'Please specify which two models you\\'d like to compare.',\n                suggestions: [\n                    'Compare GPT-4 and Claude',\n                    'Show available models',\n                    'View model statistics'\n                ]\n            };\n        }\n        return {\n            text: `Comparing ${model1} and ${model2} based on ${metric}. Displaying results on your screen.`,\n            actions: [\n                'show_model_comparison'\n            ],\n            data: {\n                model1,\n                model2,\n                metric\n            },\n            suggestions: [\n                'Compare different metrics',\n                'Add more models',\n                'Export comparison'\n            ]\n        };\n    }\n    /**\n   * Handle prompt optimization\n   */ async handleOptimizePrompt(entities) {\n        const promptId = entities.prompt || entities.id;\n        return {\n            text: `Analyzing prompt for optimization opportunities. I'll suggest improvements based on performance data and best practices.`,\n            actions: [\n                'optimize_prompt'\n            ],\n            data: {\n                promptId\n            },\n            suggestions: [\n                'Apply suggested changes',\n                'Run A/B test',\n                'View optimization history'\n            ]\n        };\n    }\n    /**\n   * Handle test scheduling\n   */ async handleScheduleTest(entities) {\n        const schedule = entities.schedule || entities.time;\n        const test = entities.test || entities.prompt;\n        return {\n            text: `Scheduling test \"${test}\" to run ${schedule}. You'll receive notifications about the results.`,\n            actions: [\n                'schedule_test'\n            ],\n            data: {\n                test,\n                schedule\n            },\n            suggestions: [\n                'Set up recurring tests',\n                'Configure notifications',\n                'View scheduled tests'\n            ]\n        };\n    }\n    /**\n   * Handle voice settings\n   */ async handleVoiceSettings(entities) {\n        const setting = entities.setting;\n        const value = entities.value;\n        return {\n            text: 'Opening voice settings. You can configure language, speech rate, and voice preferences here.',\n            actions: [\n                'open_voice_settings'\n            ],\n            data: {\n                setting,\n                value\n            },\n            suggestions: [\n                'Change language',\n                'Adjust speech rate',\n                'Test voice output'\n            ]\n        };\n    }\n    /**\n   * Handle unknown intents\n   */ handleUnknownIntent(command) {\n        return {\n            text: `I didn't understand that command. Could you please rephrase it? I can help with creating prompts, running tests, viewing analytics, and more.`,\n            suggestions: [\n                'Create a new prompt',\n                'Run a test',\n                'Show analytics',\n                'Help me with voice commands'\n            ]\n        };\n    }\n    /**\n   * Convert speech to text\n   */ async speechToText(audioData, language) {\n        // This would integrate with a speech-to-text service like Google Speech-to-Text\n        // For now, returning a placeholder\n        return \"placeholder transcription\";\n    }\n    /**\n   * Convert text to speech\n   */ async textToSpeech(text, language = 'en-US') {\n        // This would integrate with a text-to-speech service\n        // For now, returning empty buffer\n        return new ArrayBuffer(0);\n    }\n    /**\n   * Start a voice session\n   */ startVoiceSession(userId) {\n        this.activeSession = `session_${Date.now()}_${userId}`;\n        this.emit('sessionStarted', this.activeSession);\n        return this.activeSession;\n    }\n    /**\n   * End voice session\n   */ endVoiceSession() {\n        if (this.activeSession) {\n            this.emit('sessionEnded', this.activeSession);\n            this.activeSession = null;\n        }\n    }\n    /**\n   * Get supported languages\n   */ getSupportedLanguages() {\n        return [\n            ...this.supportedLanguages\n        ];\n    }\n    /**\n   * Configure voice settings\n   */ configureVoiceSettings(settings) {\n        // Store voice settings configuration\n        this.emit('settingsChanged', settings);\n    }\n    constructor(){\n        super(), _define_property(this, \"analyticsEngine\", void 0), _define_property(this, \"blockchainAudit\", void 0), _define_property(this, \"nlpProcessor\", void 0), _define_property(this, \"supportedLanguages\", void 0), _define_property(this, \"activeSession\", void 0);\n        this.analyticsEngine = AnalyticsEngine.getInstance();\n        this.blockchainAudit = BlockchainAuditTrail.getInstance();\n        this.nlpProcessor = new AdvancedNLPProcessor();\n        this.supportedLanguages = [\n            'en-US',\n            'es-ES',\n            'fr-FR',\n            'de-DE',\n            'ja-JP',\n            'zh-CN'\n        ];\n        this.activeSession = null;\n    }\n}\n/**\n * Advanced NLP Processor for voice commands\n */ class AdvancedNLPProcessor {\n    initializePatterns() {\n        // Intent patterns\n        this.intentPatterns.set('create_prompt', [\n            /create\\s+(?:a\\s+)?(?:new\\s+)?prompt/i,\n            /new\\s+prompt/i,\n            /make\\s+(?:a\\s+)?prompt/i\n        ]);\n        this.intentPatterns.set('run_test', [\n            /run\\s+(?:the\\s+)?test/i,\n            /execute\\s+(?:the\\s+)?test/i,\n            /start\\s+(?:the\\s+)?test/i,\n            /test\\s+(?:the\\s+)?prompt/i\n        ]);\n        this.intentPatterns.set('get_analytics', [\n            /show\\s+(?:me\\s+)?analytics/i,\n            /get\\s+(?:the\\s+)?analytics/i,\n            /analytics\\s+(?:data|information)/i,\n            /performance\\s+(?:data|metrics)/i\n        ]);\n        this.intentPatterns.set('show_metrics', [\n            /show\\s+(?:me\\s+)?metrics/i,\n            /display\\s+metrics/i,\n            /view\\s+metrics/i\n        ]);\n        this.intentPatterns.set('export_report', [\n            /export\\s+(?:a\\s+)?report/i,\n            /generate\\s+(?:a\\s+)?report/i,\n            /create\\s+(?:a\\s+)?report/i,\n            /download\\s+report/i\n        ]);\n        this.intentPatterns.set('compare_models', [\n            /compare\\s+(?:the\\s+)?models/i,\n            /model\\s+comparison/i,\n            /compare\\s+\\w+\\s+(?:and|with|to)\\s+\\w+/i\n        ]);\n        this.intentPatterns.set('optimize_prompt', [\n            /optimize\\s+(?:the\\s+)?prompt/i,\n            /improve\\s+(?:the\\s+)?prompt/i,\n            /enhance\\s+(?:the\\s+)?prompt/i\n        ]);\n        this.intentPatterns.set('schedule_test', [\n            /schedule\\s+(?:a\\s+)?test/i,\n            /set\\s+up\\s+(?:a\\s+)?test/i,\n            /recurring\\s+test/i\n        ]);\n        this.intentPatterns.set('voice_settings', [\n            /voice\\s+settings/i,\n            /configure\\s+voice/i,\n            /change\\s+language/i,\n            /speech\\s+settings/i\n        ]);\n        // Entity extractors\n        this.entityExtractors.set('name', /(?:called|named)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n        this.entityExtractors.set('type', /(?:type|kind)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n        this.entityExtractors.set('model', /(?:model|using)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n        this.entityExtractors.set('timeframe', /(?:for|from|over)\\s+(?:the\\s+)?(?:last\\s+)?([^\"'\\s]+)/i);\n        this.entityExtractors.set('metric', /(?:metric|measure)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n        this.entityExtractors.set('format', /(?:as|in)\\s+([a-z]{3,4})\\s+(?:format)?/i);\n    }\n    async processCommand(text) {\n        const normalizedText = text.toLowerCase().trim();\n        let bestIntent = 'unknown';\n        let maxScore = 0;\n        // Find best matching intent\n        for (const [intent, patterns] of this.intentPatterns){\n            for (const pattern of patterns){\n                if (pattern.test(normalizedText)) {\n                    const score = this.calculatePatternScore(normalizedText, pattern);\n                    if (score > maxScore) {\n                        maxScore = score;\n                        bestIntent = intent;\n                    }\n                }\n            }\n        }\n        // Extract entities\n        const entities = {};\n        for (const [entityType, extractor] of this.entityExtractors){\n            const match = text.match(extractor);\n            if (match && match[1]) {\n                entities[entityType] = match[1];\n            }\n        }\n        const confidence = maxScore > 0 ? Math.min(maxScore / 10, 1) : 0.1;\n        return {\n            intent: bestIntent,\n            entities,\n            confidence\n        };\n    }\n    calculatePatternScore(text, pattern) {\n        const match = text.match(pattern);\n        if (!match) return 0;\n        // Score based on match length and position\n        const matchLength = match[0].length;\n        const textLength = text.length;\n        const positionScore = 1 - match.index / textLength;\n        const lengthScore = matchLength / textLength;\n        return (positionScore + lengthScore) * 5;\n    }\n    constructor(){\n        _define_property(this, \"intentPatterns\", void 0);\n        _define_property(this, \"entityExtractors\", void 0);\n        this.intentPatterns = new Map();\n        this.entityExtractors = new Map();\n        this.initializePatterns();\n    }\n}\n"],"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","ignoreList":[]}