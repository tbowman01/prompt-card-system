{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/reports/exporters/ExcelExporter.ts"],"sourcesContent":["import * as ExcelJS from 'exceljs';\nimport { ReportData, ReportExportOptions, ChartData, TableData, MetricData } from '../../../types/reports';\nimport { ChartConfiguration, ChartData as ChartJSData } from 'chart.js';\nimport { ChartJSNodeCanvas } from 'chartjs-node-canvas';\n\nexport class ExcelExporter {\n  private chartRenderer: ChartJSNodeCanvas;\n  private static readonly CHART_WIDTH = 800;\n  private static readonly CHART_HEIGHT = 400;\n\n  constructor() {\n    this.chartRenderer = new ChartJSNodeCanvas({\n      width: ExcelExporter.CHART_WIDTH,\n      height: ExcelExporter.CHART_HEIGHT,\n      backgroundColour: 'white'\n    });\n  }\n\n  async exportToExcel(\n    report: ReportData,\n    options: ReportExportOptions = { format: 'excel', includeCharts: true, includeRawData: true }\n  ): Promise<Buffer> {\n    const workbook = new ExcelJS.Workbook();\n    \n    // Set workbook properties\n    workbook.creator = 'Prompt Card System';\n    workbook.lastModifiedBy = 'Prompt Card System';\n    workbook.created = report.generatedAt;\n    workbook.modified = new Date();\n    workbook.lastPrinted = new Date();\n\n    // Add worksheets\n    await this.addSummaryWorksheet(workbook, report, options);\n    await this.addMetricsWorksheet(workbook, report, options);\n    \n    if (options.includeCharts) {\n      await this.addChartsWorksheet(workbook, report, options);\n    }\n\n    await this.addDataWorksheet(workbook, report, options);\n\n    if (options.includeRawData) {\n      await this.addRawDataWorksheet(workbook, report, options);\n    }\n\n    // Apply theme\n    if (options.customizations?.theme) {\n      this.applyTheme(workbook, options.customizations.theme);\n    }\n\n    // Generate buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n    return Buffer.from(buffer);\n  }\n\n  private async addSummaryWorksheet(workbook: ExcelJS.Workbook, report: ReportData, options: ReportExportOptions): Promise<void> {\n    const worksheet = workbook.addWorksheet('Summary');\n    \n    // Title\n    worksheet.mergeCells('A1:F1');\n    const titleCell = worksheet.getCell('A1');\n    titleCell.value = report.title;\n    titleCell.font = { size: 18, bold: true, color: { argb: '2c3e50' } };\n    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'ecf0f1' } };\n    worksheet.getRow(1).height = 30;\n\n    // Description\n    worksheet.mergeCells('A2:F2');\n    const descCell = worksheet.getCell('A2');\n    descCell.value = report.description;\n    descCell.font = { size: 12, italic: true };\n    descCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    worksheet.getRow(2).height = 25;\n\n    // Generation info\n    worksheet.mergeCells('A3:F3');\n    const infoCell = worksheet.getCell('A3');\n    infoCell.value = `Generated on: ${report.generatedAt.toLocaleDateString()} at ${report.generatedAt.toLocaleTimeString()}`;\n    infoCell.font = { size: 10 };\n    infoCell.alignment = { horizontal: 'center', vertical: 'middle' };\n\n    // Key metrics header\n    worksheet.mergeCells('A5:F5');\n    const metricsHeaderCell = worksheet.getCell('A5');\n    metricsHeaderCell.value = 'Key Performance Indicators';\n    metricsHeaderCell.font = { size: 14, bold: true };\n    metricsHeaderCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    metricsHeaderCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '3498db' } };\n    metricsHeaderCell.font.color = { argb: 'ffffff' };\n\n    // Key metrics\n    let row = 7;\n    report.summary.keyMetrics.forEach((metric, index) => {\n      const col = (index % 3) * 2 + 1; // A, C, E columns\n      const metricRow = Math.floor(index / 3) + row;\n\n      // Metric label\n      const labelCell = worksheet.getCell(metricRow, col);\n      labelCell.value = metric.label;\n      labelCell.font = { bold: true };\n      labelCell.alignment = { horizontal: 'left', vertical: 'middle' };\n\n      // Metric value\n      const valueCell = worksheet.getCell(metricRow, col + 1);\n      valueCell.value = metric.value;\n      valueCell.font = { size: 12, bold: true };\n      valueCell.alignment = { horizontal: 'right', vertical: 'middle' };\n\n      // Add trend indicator if available\n      if (metric.trend) {\n        const trendSymbol = metric.trend === 'up' ? '↑' : metric.trend === 'down' ? '↓' : '→';\n        const trendColor = metric.trend === 'up' ? '27ae60' : metric.trend === 'down' ? 'e74c3c' : '95a5a6';\n        valueCell.value = `${metric.value} ${trendSymbol}`;\n        valueCell.font.color = { argb: trendColor };\n      }\n\n      // Style the cells\n      labelCell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      valueCell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n    });\n\n    // Insights section\n    const insightsStartRow = row + Math.ceil(report.summary.keyMetrics.length / 3) + 2;\n    worksheet.mergeCells(`A${insightsStartRow}:F${insightsStartRow}`);\n    const insightsHeaderCell = worksheet.getCell(`A${insightsStartRow}`);\n    insightsHeaderCell.value = 'Key Insights';\n    insightsHeaderCell.font = { size: 14, bold: true };\n    insightsHeaderCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    insightsHeaderCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'e74c3c' } };\n    insightsHeaderCell.font.color = { argb: 'ffffff' };\n\n    let insightRow = insightsStartRow + 2;\n    report.summary.insights.slice(0, 5).forEach((insight, index) => {\n      // Insight title\n      worksheet.mergeCells(`A${insightRow}:F${insightRow}`);\n      const titleCell = worksheet.getCell(`A${insightRow}`);\n      titleCell.value = `${index + 1}. ${insight.title}`;\n      titleCell.font = { bold: true };\n      titleCell.alignment = { horizontal: 'left', vertical: 'middle' };\n      \n      // Severity indicator\n      const severityColor = insight.severity === 'critical' ? 'e74c3c' :\n                            insight.severity === 'high' ? 'f39c12' :\n                            insight.severity === 'medium' ? 'f1c40f' : '27ae60';\n      titleCell.font.color = { argb: severityColor };\n\n      // Insight description\n      insightRow++;\n      worksheet.mergeCells(`A${insightRow}:F${insightRow}`);\n      const descCell = worksheet.getCell(`A${insightRow}`);\n      descCell.value = insight.description;\n      descCell.font = { size: 10 };\n      descCell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };\n      worksheet.getRow(insightRow).height = 30;\n\n      insightRow += 2;\n    });\n\n    // Auto-fit columns\n    worksheet.columns.forEach(column => {\n      column.width = 20;\n    });\n  }\n\n  private async addMetricsWorksheet(workbook: ExcelJS.Workbook, report: ReportData, options: ReportExportOptions): Promise<void> {\n    const worksheet = workbook.addWorksheet('Detailed Metrics');\n    \n    // Title\n    worksheet.mergeCells('A1:D1');\n    const titleCell = worksheet.getCell('A1');\n    titleCell.value = 'Detailed Performance Metrics';\n    titleCell.font = { size: 16, bold: true };\n    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '3498db' } };\n    titleCell.font.color = { argb: 'ffffff' };\n    worksheet.getRow(1).height = 25;\n\n    let row = 3;\n\n    // Process each section that contains metrics\n    for (const section of report.sections.filter(s => s.type === 'metrics')) {\n      // Section header\n      worksheet.mergeCells(`A${row}:D${row}`);\n      const headerCell = worksheet.getCell(`A${row}`);\n      headerCell.value = section.title;\n      headerCell.font = { size: 14, bold: true };\n      headerCell.alignment = { horizontal: 'center', vertical: 'middle' };\n      headerCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '34495e' } };\n      headerCell.font.color = { argb: 'ffffff' };\n\n      row += 2;\n\n      // Metrics table header\n      ['Metric', 'Value', 'Unit', 'Status'].forEach((header, index) => {\n        const cell = worksheet.getCell(row, index + 1);\n        cell.value = header;\n        cell.font = { bold: true };\n        cell.alignment = { horizontal: 'center', vertical: 'middle' };\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '95a5a6' } };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      });\n\n      row++;\n\n      // Metrics data\n      const metrics = section.content as MetricData[];\n      metrics.forEach(metric => {\n        const values = [metric.label, metric.value, metric.unit || '-', metric.status || '-'];\n        values.forEach((value, index) => {\n          const cell = worksheet.getCell(row, index + 1);\n          cell.value = value;\n          cell.alignment = { horizontal: 'center', vertical: 'middle' };\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          \n          // Color code status\n          if (index === 3 && metric.status) {\n            const statusColor = metric.status === 'good' ? '27ae60' : \n                               metric.status === 'warning' ? 'f39c12' : 'e74c3c';\n            cell.font = { color: { argb: statusColor }, bold: true };\n          }\n        });\n        row++;\n      });\n\n      row += 2;\n    }\n\n    // Auto-fit columns\n    worksheet.columns.forEach(column => {\n      column.width = 20;\n    });\n  }\n\n  private async addChartsWorksheet(workbook: ExcelJS.Workbook, report: ReportData, options: ReportExportOptions): Promise<void> {\n    const worksheet = workbook.addWorksheet('Charts');\n    \n    // Title\n    worksheet.mergeCells('A1:H1');\n    const titleCell = worksheet.getCell('A1');\n    titleCell.value = 'Visual Analytics';\n    titleCell.font = { size: 16, bold: true };\n    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '9b59b6' } };\n    titleCell.font.color = { argb: 'ffffff' };\n    worksheet.getRow(1).height = 25;\n\n    let row = 3;\n\n    // Process each section that contains charts\n    for (const section of report.sections.filter(s => s.type === 'charts')) {\n      // Section header\n      worksheet.mergeCells(`A${row}:H${row}`);\n      const headerCell = worksheet.getCell(`A${row}`);\n      headerCell.value = section.title;\n      headerCell.font = { size: 14, bold: true };\n      headerCell.alignment = { horizontal: 'center', vertical: 'middle' };\n      headerCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '34495e' } };\n      headerCell.font.color = { argb: 'ffffff' };\n\n      row += 2;\n\n      try {\n        // Generate chart image\n        const chartData = section.content as ChartData;\n        const chartConfig: ChartConfiguration = {\n          type: 'line',\n          data: {\n            labels: chartData.labels,\n            datasets: chartData.datasets.map(dataset => ({\n              label: dataset.label,\n              data: dataset.data,\n              backgroundColor: dataset.backgroundColor,\n              borderColor: dataset.borderColor,\n              borderWidth: dataset.borderWidth\n            }))\n          },\n        };\n        const chartBuffer = await this.chartRenderer.renderToBuffer(chartConfig);\n\n        // Add chart as image\n        const imageId = workbook.addImage({\n          buffer: chartBuffer,\n          extension: 'png',\n        });\n\n        worksheet.addImage(imageId, {\n          tl: { col: 0, row: row - 1, nativeCol: 0, nativeColOff: 0, nativeRow: 0, nativeRowOff: 0 } as any,\n          br: { col: 7, row: row + 19, nativeCol: 0, nativeColOff: 0, nativeRow: 0, nativeRowOff: 0 } as any\n        });\n\n        // Add chart data table\n        const dataStartRow = row + 22;\n        \n        // Data table header\n        ['Label', ...chartData.datasets.map(d => d.label || 'Dataset')].forEach((header, index) => {\n          const cell = worksheet.getCell(dataStartRow, index + 1);\n          cell.value = header;\n          cell.font = { bold: true };\n          cell.alignment = { horizontal: 'center', vertical: 'middle' };\n          cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '95a5a6' } };\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        });\n\n        // Data table rows\n        chartData.labels.forEach((label, labelIndex) => {\n          const rowIndex = dataStartRow + labelIndex + 1;\n          const cell = worksheet.getCell(rowIndex, 1);\n          cell.value = label;\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n\n          chartData.datasets.forEach((dataset, datasetIndex) => {\n            const dataCell = worksheet.getCell(rowIndex, datasetIndex + 2);\n            dataCell.value = dataset.data[labelIndex] || 0;\n            dataCell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          });\n        });\n\n        row = dataStartRow + chartData.labels.length + 4;\n      } catch (error) {\n        console.error('Error generating chart for Excel:', error);\n        worksheet.getCell(`A${row}`).value = 'Chart generation failed';\n        row += 2;\n      }\n    }\n\n    // Auto-fit columns\n    worksheet.columns.forEach(column => {\n      column.width = 15;\n    });\n  }\n\n  private async addDataWorksheet(workbook: ExcelJS.Workbook, report: ReportData, options: ReportExportOptions): Promise<void> {\n    const worksheet = workbook.addWorksheet('Data Tables');\n    \n    // Title\n    worksheet.mergeCells('A1:J1');\n    const titleCell = worksheet.getCell('A1');\n    titleCell.value = 'Data Tables';\n    titleCell.font = { size: 16, bold: true };\n    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '16a085' } };\n    titleCell.font.color = { argb: 'ffffff' };\n    worksheet.getRow(1).height = 25;\n\n    let row = 3;\n\n    // Process each section that contains tables\n    for (const section of report.sections.filter(s => s.type === 'tables')) {\n      // Section header\n      worksheet.mergeCells(`A${row}:J${row}`);\n      const headerCell = worksheet.getCell(`A${row}`);\n      headerCell.value = section.title;\n      headerCell.font = { size: 14, bold: true };\n      headerCell.alignment = { horizontal: 'center', vertical: 'middle' };\n      headerCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '34495e' } };\n      headerCell.font.color = { argb: 'ffffff' };\n\n      row += 2;\n\n      const tableData = section.content as TableData;\n\n      // Table headers\n      tableData.headers.forEach((header, index) => {\n        const cell = worksheet.getCell(row, index + 1);\n        cell.value = header;\n        cell.font = { bold: true };\n        cell.alignment = { horizontal: 'center', vertical: 'middle' };\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '95a5a6' } };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      });\n\n      row++;\n\n      // Table data\n      tableData.rows.forEach((rowData, rowIndex) => {\n        rowData.forEach((cellData, colIndex) => {\n          const cell = worksheet.getCell(row, colIndex + 1);\n          cell.value = cellData;\n          cell.alignment = { horizontal: 'center', vertical: 'middle' };\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          \n          // Alternate row colors\n          if (rowIndex % 2 === 0) {\n            cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'f8f9fa' } };\n          }\n        });\n        row++;\n      });\n\n      row += 2;\n    }\n\n    // Auto-fit columns\n    worksheet.columns.forEach(column => {\n      column.width = 15;\n    });\n  }\n\n  private async addRawDataWorksheet(workbook: ExcelJS.Workbook, report: ReportData, options: ReportExportOptions): Promise<void> {\n    const worksheet = workbook.addWorksheet('Raw Data');\n    \n    // Title\n    worksheet.mergeCells('A1:F1');\n    const titleCell = worksheet.getCell('A1');\n    titleCell.value = 'Raw Report Data';\n    titleCell.font = { size: 16, bold: true };\n    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '7f8c8d' } };\n    titleCell.font.color = { argb: 'ffffff' };\n    worksheet.getRow(1).height = 25;\n\n    let row = 3;\n\n    // Report metadata\n    const metadata = [\n      ['Report ID', report.id],\n      ['Template', report.template.name],\n      ['Generated', report.generatedAt.toISOString()],\n      ['Total Executions', report.metadata.totalExecutions],\n      ['Total Cost', `$${report.metadata.totalCost.toFixed(2)}`],\n      ['Average Performance', `${report.metadata.averagePerformance.toFixed(2)}ms`],\n      ['Success Rate', `${report.metadata.successRate.toFixed(1)}%`],\n      ['Generation Time', `${report.metadata.generationTime}ms`]\n    ];\n\n    // Metadata header\n    worksheet.mergeCells(`A${row}:F${row}`);\n    const metadataHeaderCell = worksheet.getCell(`A${row}`);\n    metadataHeaderCell.value = 'Report Metadata';\n    metadataHeaderCell.font = { size: 14, bold: true };\n    metadataHeaderCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    metadataHeaderCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '34495e' } };\n    metadataHeaderCell.font.color = { argb: 'ffffff' };\n\n    row += 2;\n\n    // Metadata table\n    metadata.forEach(([key, value]) => {\n      worksheet.getCell(row, 1).value = key;\n      worksheet.getCell(row, 2).value = value;\n      worksheet.getCell(row, 1).font = { bold: true };\n      worksheet.getCell(row, 1).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      worksheet.getCell(row, 2).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      row++;\n    });\n\n    row += 2;\n\n    // Filters applied\n    if (Object.keys(report.filters).length > 0) {\n      worksheet.mergeCells(`A${row}:F${row}`);\n      const filtersHeaderCell = worksheet.getCell(`A${row}`);\n      filtersHeaderCell.value = 'Filters Applied';\n      filtersHeaderCell.font = { size: 14, bold: true };\n      filtersHeaderCell.alignment = { horizontal: 'center', vertical: 'middle' };\n      filtersHeaderCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '34495e' } };\n      filtersHeaderCell.font.color = { argb: 'ffffff' };\n\n      row += 2;\n\n      Object.entries(report.filters).forEach(([key, value]) => {\n        worksheet.getCell(row, 1).value = key;\n        worksheet.getCell(row, 2).value = value?.toString() || '';\n        worksheet.getCell(row, 1).font = { bold: true };\n        worksheet.getCell(row, 1).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        worksheet.getCell(row, 2).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        row++;\n      });\n    }\n\n    // Auto-fit columns\n    worksheet.columns.forEach(column => {\n      column.width = 25;\n    });\n  }\n\n  private applyTheme(workbook: ExcelJS.Workbook, theme: 'light' | 'dark' | 'corporate'): void {\n    const themes = {\n      light: {\n        primary: '3498db',\n        secondary: 'ecf0f1',\n        accent: '2ecc71',\n        text: '2c3e50'\n      },\n      dark: {\n        primary: '34495e',\n        secondary: '2c3e50',\n        accent: 'e74c3c',\n        text: 'ecf0f1'\n      },\n      corporate: {\n        primary: '2c3e50',\n        secondary: '95a5a6',\n        accent: '3498db',\n        text: '2c3e50'\n      }\n    };\n\n    const colors = themes[theme] || themes.light;\n    \n    // Apply theme colors to all worksheets\n    workbook.eachSheet((worksheet) => {\n      worksheet.eachRow((row, rowNumber) => {\n        if (rowNumber === 1) {\n          row.eachCell((cell) => {\n            if (cell.fill && cell.fill.type === 'pattern') {\n              cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: colors.primary } };\n            }\n          });\n        }\n      });\n    });\n  }\n}"],"names":["ExcelExporter","exportToExcel","report","options","format","includeCharts","includeRawData","workbook","ExcelJS","Workbook","creator","lastModifiedBy","created","generatedAt","modified","Date","lastPrinted","addSummaryWorksheet","addMetricsWorksheet","addChartsWorksheet","addDataWorksheet","addRawDataWorksheet","customizations","theme","applyTheme","buffer","xlsx","writeBuffer","Buffer","from","worksheet","addWorksheet","mergeCells","titleCell","getCell","value","title","font","size","bold","color","argb","alignment","horizontal","vertical","fill","type","pattern","fgColor","getRow","height","descCell","description","italic","infoCell","toLocaleDateString","toLocaleTimeString","metricsHeaderCell","row","summary","keyMetrics","forEach","metric","index","col","metricRow","Math","floor","labelCell","label","valueCell","trend","trendSymbol","trendColor","border","top","style","left","bottom","right","insightsStartRow","ceil","length","insightsHeaderCell","insightRow","insights","slice","insight","severityColor","severity","wrapText","columns","column","width","section","sections","filter","s","headerCell","header","cell","metrics","content","values","unit","status","statusColor","chartData","chartConfig","data","labels","datasets","map","dataset","backgroundColor","borderColor","borderWidth","chartBuffer","chartRenderer","renderToBuffer","imageId","addImage","extension","tl","nativeCol","nativeColOff","nativeRow","nativeRowOff","br","dataStartRow","d","labelIndex","rowIndex","datasetIndex","dataCell","error","console","tableData","headers","rows","rowData","cellData","colIndex","metadata","id","template","name","toISOString","totalExecutions","totalCost","toFixed","averagePerformance","successRate","generationTime","metadataHeaderCell","key","Object","keys","filters","filtersHeaderCell","entries","toString","themes","light","primary","secondary","accent","text","dark","corporate","colors","eachSheet","eachRow","rowNumber","eachCell","ChartJSNodeCanvas","CHART_WIDTH","CHART_HEIGHT","backgroundColour"],"mappings":"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"}