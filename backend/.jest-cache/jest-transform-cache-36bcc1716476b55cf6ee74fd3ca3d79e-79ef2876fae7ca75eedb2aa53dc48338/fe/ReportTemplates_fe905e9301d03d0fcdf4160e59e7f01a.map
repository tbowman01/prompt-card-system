{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/reports/templates/ReportTemplates.ts"],"sourcesContent":["import { ReportTemplate } from '../../../types/reports';\n\nexport class ReportTemplates {\n  private static templates: Map<string, ReportTemplate> = new Map();\n\n  static initialize(): void {\n    // Executive Summary Template\n    this.templates.set('executive-summary', {\n      id: 'executive-summary',\n      name: 'Executive Summary',\n      description: 'High-level overview of test execution metrics and cost analysis',\n      type: 'executive',\n      fields: [\n        {\n          key: 'overview-metrics',\n          label: 'Overview Metrics',\n          type: 'metric',\n          required: true,\n          description: 'Key performance indicators and success metrics'\n        },\n        {\n          key: 'cost-summary',\n          label: 'Cost Summary',\n          type: 'chart',\n          required: true,\n          description: 'Cost breakdown by model and time period',\n          chartType: 'pie'\n        },\n        {\n          key: 'performance-trends',\n          label: 'Performance Trends',\n          type: 'chart',\n          required: true,\n          description: 'Performance metrics over time',\n          chartType: 'line'\n        },\n        {\n          key: 'key-insights',\n          label: 'Key Insights',\n          type: 'insight',\n          required: true,\n          description: 'AI-generated insights and recommendations'\n        }\n      ],\n      defaultFilters: {\n        period: '30d',\n        status: 'all'\n      },\n      supportedFormats: ['pdf', 'excel', 'json'],\n      customizable: true\n    });\n\n    // Detailed Test Execution Template\n    this.templates.set('detailed-execution', {\n      id: 'detailed-execution',\n      name: 'Detailed Test Execution Report',\n      description: 'Comprehensive analysis of test execution with full analytics',\n      type: 'detailed',\n      fields: [\n        {\n          key: 'execution-overview',\n          label: 'Execution Overview',\n          type: 'metric',\n          required: true,\n          description: 'Overall execution statistics and success rates'\n        },\n        {\n          key: 'model-performance',\n          label: 'Model Performance Comparison',\n          type: 'table',\n          required: true,\n          description: 'Performance metrics by model'\n        },\n        {\n          key: 'failure-analysis',\n          label: 'Failure Analysis',\n          type: 'chart',\n          required: true,\n          description: 'Analysis of test failures and common issues',\n          chartType: 'bar'\n        },\n        {\n          key: 'execution-timeline',\n          label: 'Execution Timeline',\n          type: 'chart',\n          required: true,\n          description: 'Test execution timeline with performance metrics',\n          chartType: 'line'\n        },\n        {\n          key: 'detailed-results',\n          label: 'Detailed Results',\n          type: 'table',\n          required: true,\n          description: 'Detailed test results with execution data'\n        },\n        {\n          key: 'recommendations',\n          label: 'Optimization Recommendations',\n          type: 'insight',\n          required: true,\n          description: 'Performance and cost optimization suggestions'\n        }\n      ],\n      defaultFilters: {\n        period: '7d',\n        status: 'all',\n        includeFailures: true\n      },\n      supportedFormats: ['pdf', 'excel', 'json', 'csv'],\n      customizable: true\n    });\n\n    // Cost Analysis Template\n    this.templates.set('cost-analysis', {\n      id: 'cost-analysis',\n      name: 'Cost Analysis Report',\n      description: 'Detailed cost breakdown with optimization recommendations',\n      type: 'cost',\n      fields: [\n        {\n          key: 'cost-overview',\n          label: 'Cost Overview',\n          type: 'metric',\n          required: true,\n          description: 'Total costs and key cost metrics'\n        },\n        {\n          key: 'cost-by-model',\n          label: 'Cost by Model',\n          type: 'chart',\n          required: true,\n          description: 'Cost distribution across different models',\n          chartType: 'pie'\n        },\n        {\n          key: 'cost-trends',\n          label: 'Cost Trends',\n          type: 'chart',\n          required: true,\n          description: 'Cost trends over time',\n          chartType: 'line'\n        },\n        {\n          key: 'usage-patterns',\n          label: 'Usage Patterns',\n          type: 'table',\n          required: true,\n          description: 'Token usage and execution patterns'\n        },\n        {\n          key: 'roi-analysis',\n          label: 'ROI Analysis',\n          type: 'metric',\n          required: true,\n          description: 'Return on investment calculations'\n        },\n        {\n          key: 'cost-optimization',\n          label: 'Cost Optimization',\n          type: 'insight',\n          required: true,\n          description: 'Cost reduction recommendations and strategies'\n        }\n      ],\n      defaultFilters: {\n        period: '30d',\n        includeProjections: true\n      },\n      supportedFormats: ['pdf', 'excel', 'json'],\n      customizable: true\n    });\n\n    // Performance Analysis Template\n    this.templates.set('performance-analysis', {\n      id: 'performance-analysis',\n      name: 'Performance Analysis Report',\n      description: 'Comprehensive performance metrics and trend analysis',\n      type: 'performance',\n      fields: [\n        {\n          key: 'performance-overview',\n          label: 'Performance Overview',\n          type: 'metric',\n          required: true,\n          description: 'Key performance metrics and benchmarks'\n        },\n        {\n          key: 'response-times',\n          label: 'Response Time Analysis',\n          type: 'chart',\n          required: true,\n          description: 'Response time distribution and trends',\n          chartType: 'line'\n        },\n        {\n          key: 'throughput-analysis',\n          label: 'Throughput Analysis',\n          type: 'chart',\n          required: true,\n          description: 'Tests per second and throughput metrics',\n          chartType: 'bar'\n        },\n        {\n          key: 'performance-by-model',\n          label: 'Performance by Model',\n          type: 'table',\n          required: true,\n          description: 'Performance comparison across models'\n        },\n        {\n          key: 'bottleneck-analysis',\n          label: 'Bottleneck Analysis',\n          type: 'insight',\n          required: true,\n          description: 'Performance bottlenecks and optimization opportunities'\n        },\n        {\n          key: 'performance-trends',\n          label: 'Performance Trends',\n          type: 'chart',\n          required: true,\n          description: 'Historical performance trends',\n          chartType: 'area'\n        }\n      ],\n      defaultFilters: {\n        period: '7d',\n        includeSystemMetrics: true\n      },\n      supportedFormats: ['pdf', 'excel', 'json'],\n      customizable: true\n    });\n\n    // Custom Report Template\n    this.templates.set('custom-report', {\n      id: 'custom-report',\n      name: 'Custom Report',\n      description: 'Customizable report template with flexible fields',\n      type: 'custom',\n      fields: [\n        {\n          key: 'custom-metrics',\n          label: 'Custom Metrics',\n          type: 'metric',\n          required: false,\n          description: 'User-defined metrics and KPIs'\n        },\n        {\n          key: 'custom-charts',\n          label: 'Custom Charts',\n          type: 'chart',\n          required: false,\n          description: 'User-defined charts and visualizations'\n        },\n        {\n          key: 'custom-tables',\n          label: 'Custom Tables',\n          type: 'table',\n          required: false,\n          description: 'User-defined data tables'\n        },\n        {\n          key: 'custom-insights',\n          label: 'Custom Insights',\n          type: 'insight',\n          required: false,\n          description: 'User-defined insights and analysis'\n        }\n      ],\n      defaultFilters: {},\n      supportedFormats: ['pdf', 'excel', 'json', 'csv'],\n      customizable: true\n    });\n\n    console.log(`Initialized ${this.templates.size} report templates`);\n  }\n\n  static getTemplate(id: string): ReportTemplate | undefined {\n    return this.templates.get(id);\n  }\n\n  static getAllTemplates(): ReportTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  static getTemplatesByType(type: ReportTemplate['type']): ReportTemplate[] {\n    return Array.from(this.templates.values()).filter(template => template.type === type);\n  }\n\n  static addCustomTemplate(template: ReportTemplate): void {\n    this.templates.set(template.id, template);\n  }\n\n  static removeTemplate(id: string): boolean {\n    return this.templates.delete(id);\n  }\n\n  static updateTemplate(id: string, updates: Partial<ReportTemplate>): boolean {\n    const template = this.templates.get(id);\n    if (!template) return false;\n\n    const updatedTemplate = { ...template, ...updates };\n    this.templates.set(id, updatedTemplate);\n    return true;\n  }\n\n  static validateTemplate(template: ReportTemplate): string[] {\n    const errors: string[] = [];\n\n    if (!template.id) {\n      errors.push('Template ID is required');\n    }\n\n    if (!template.name) {\n      errors.push('Template name is required');\n    }\n\n    if (!template.type) {\n      errors.push('Template type is required');\n    }\n\n    if (!template.fields || template.fields.length === 0) {\n      errors.push('Template must have at least one field');\n    }\n\n    if (!template.supportedFormats || template.supportedFormats.length === 0) {\n      errors.push('Template must support at least one export format');\n    }\n\n    // Validate fields\n    template.fields?.forEach((field, index) => {\n      if (!field.key) {\n        errors.push(`Field ${index + 1} is missing key`);\n      }\n      if (!field.label) {\n        errors.push(`Field ${index + 1} is missing label`);\n      }\n      if (!field.type) {\n        errors.push(`Field ${index + 1} is missing type`);\n      }\n    });\n\n    return errors;\n  }\n}\n\n// Initialize templates on module load\nReportTemplates.initialize();"],"names":["ReportTemplates","initialize","templates","set","id","name","description","type","fields","key","label","required","chartType","defaultFilters","period","status","supportedFormats","customizable","includeFailures","includeProjections","includeSystemMetrics","console","log","size","getTemplate","get","getAllTemplates","Array","from","values","getTemplatesByType","filter","template","addCustomTemplate","removeTemplate","delete","updateTemplate","updates","updatedTemplate","validateTemplate","errors","push","length","forEach","field","index","Map"],"mappings":"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"}