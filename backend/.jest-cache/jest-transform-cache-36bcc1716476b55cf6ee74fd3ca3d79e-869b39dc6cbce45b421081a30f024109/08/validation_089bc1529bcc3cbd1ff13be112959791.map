{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/middleware/validation.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { body, validationResult, param, query } from 'express-validator';\nimport sanitizeHtml from 'sanitize-html';\n// import { logSecurityEvent } from './structuredLogging';\nimport validator from 'validator';\n\n// Enhanced validation schema for prompt cards with security rules\n\n// Generic validation middleware function\nexport function validation(schema: Joi.ObjectSchema) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const { error, value } = schema.validate(req.body);\n    \n    if (error) {\n      res.status(400).json({\n        error: 'Validation failed',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message\n        }))\n      });\n      return;\n    }\n    \n    req.body = value;\n    next();\n  };\n}\n\n// Export validateRequest function for compatibility\nexport function validateRequest(schema: Joi.ObjectSchema) {\n  return validation(schema);\n}\n\n// Standard validation schemas\nexport const promptCardValidation = Joi.object({\n  title: Joi.string().min(1).max(200).required().trim(),\n  prompt_template: Joi.string().min(1).max(5000).required(),\n  variables: Joi.array().items(Joi.string()).default([]),\n  category_id: Joi.number().integer().positive().optional(),\n  tags: Joi.array().items(Joi.string().max(50)).default([]),\n  description: Joi.string().max(1000).optional().allow(''),\n  is_active: Joi.boolean().default(true)\n});\n\nexport const testCaseValidation = Joi.object({\n  prompt_card_id: Joi.number().integer().positive().required(),\n  input_variables: Joi.object().required(),\n  expected_output: Joi.string().required(),\n  assertion_type: Joi.string().valid('contains', 'equals', 'regex', 'length', 'custom').required(),\n  assertion_value: Joi.string().required(),\n  description: Joi.string().max(500).optional().allow('')\n});\n\n// Security validation helpers\nexport function sanitizeInput(input: string): string {\n  return sanitizeHtml(input, {\n    allowedTags: [],\n    allowedAttributes: {}\n  });\n}\n\nexport function validateEmail(email: string): boolean {\n  return validator.isEmail(email);\n}\n\nexport function validateUrl(url: string): boolean {\n  return validator.isURL(url);\n}\n\n// Missing exports that are imported elsewhere\nexport function sanitizeRequestBody(req: Request, res: Response, next: NextFunction): void {\n  if (req.body && typeof req.body === 'object') {\n    req.body = sanitizeObjectInputs(req.body);\n  }\n  next();\n}\n\nexport function handleValidationErrors(req: Request, res: Response, next: NextFunction): void {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array()\n    });\n    return;\n  }\n  next();\n}\n\nexport function limitRequestSize(limit: number) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const contentLength = parseInt(req.get('content-length') || '0');\n    if (contentLength > limit) {\n      res.status(413).json({\n        error: 'Request entity too large',\n        maxSize: limit,\n        actualSize: contentLength\n      });\n      return;\n    }\n    next();\n  };\n}\n\nexport function validatePromptCard(req: Request, res: Response, next: NextFunction): void {\n  const { error, value } = promptCardValidation.validate(req.body);\n  if (error) {\n    res.status(400).json({\n      error: 'Validation failed',\n      details: error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message\n      }))\n    });\n    return;\n  }\n  req.body = value;\n  next();\n}\n\n// Helper function to sanitize object inputs recursively\nfunction sanitizeObjectInputs(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeInput(obj);\n  } else if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObjectInputs(item));\n  } else if (obj && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObjectInputs(value);\n    }\n    return sanitized;\n  }\n  return obj;\n}"],"names":["handleValidationErrors","limitRequestSize","promptCardValidation","sanitizeInput","sanitizeRequestBody","testCaseValidation","validateEmail","validatePromptCard","validateRequest","validateUrl","validation","schema","req","res","next","error","value","validate","body","status","json","details","map","detail","field","path","join","message","Joi","object","title","string","min","max","required","trim","prompt_template","variables","array","items","default","category_id","number","integer","positive","optional","tags","description","allow","is_active","boolean","prompt_card_id","input_variables","expected_output","assertion_type","valid","assertion_value","input","sanitizeHtml","allowedTags","allowedAttributes","email","validator","isEmail","url","isURL","sanitizeObjectInputs","errors","validationResult","isEmpty","limit","contentLength","parseInt","get","maxSize","actualSize","obj","Array","isArray","item","sanitized","key","Object","entries"],"mappings":"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"}