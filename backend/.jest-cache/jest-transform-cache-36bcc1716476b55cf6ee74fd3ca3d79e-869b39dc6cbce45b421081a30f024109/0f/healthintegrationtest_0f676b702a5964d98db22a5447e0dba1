14c746c9e2c99794dcec16285bb9074c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _supertest = /*#__PURE__*/ _interop_require_default(require("supertest"));
const _server = /*#__PURE__*/ _interop_require_default(require("../server"));
const _HealthOrchestrator = require("../services/health/HealthOrchestrator");
const _AlertingSystem = require("../services/health/AlertingSystem");
const _CircuitBreaker = require("../services/health/CircuitBreaker");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Health Check Integration Tests', ()=>{
    beforeAll(async ()=>{
        // Start health systems for testing
        await _HealthOrchestrator.healthOrchestrator.start();
        await _AlertingSystem.alertingSystem.initialize();
    });
    afterAll(async ()=>{
        // Clean up health systems
        await _HealthOrchestrator.healthOrchestrator.stop();
        await _AlertingSystem.alertingSystem.shutdown();
    });
    describe('Basic Health Endpoints', ()=>{
        it('should return basic health status', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health').expect(200);
            expect(response.body).toHaveProperty('status');
            expect(response.body).toHaveProperty('timestamp');
            expect(response.body).toHaveProperty('services');
        });
        it('should return enhanced health status', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/v2').expect(200);
            expect(response.body).toHaveProperty('status');
            expect(response.body).toHaveProperty('services');
            expect(response.body.services).toHaveProperty('database');
            expect(response.body.services).toHaveProperty('system');
        });
        it('should return detailed health when requested', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/v2?detailed=true').expect(200);
            expect(response.body.services.database).toHaveProperty('details');
            expect(response.body.services.system).toHaveProperty('details');
        });
    });
    describe('Health Orchestrator Endpoints', ()=>{
        it('should return system health summary', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/summary').expect(200);
            expect(response.body).toHaveProperty('overallStatus');
            expect(response.body).toHaveProperty('totalServices');
            expect(response.body).toHaveProperty('healthyServices');
            expect(response.body).toHaveProperty('criticalServices');
            expect(response.body).toHaveProperty('recentIssues');
        });
        it('should return detailed system health', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/system').expect(200);
            expect(response.body).toHaveProperty('services');
            expect(response.body).toHaveProperty('overallStatus');
            expect(typeof response.body.services).toBe('object');
        });
        it('should return individual service health', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/service/database').expect(200);
            expect(response.body).toHaveProperty('name', 'database');
            expect(response.body).toHaveProperty('status');
            expect(response.body).toHaveProperty('lastCheck');
            expect(response.body).toHaveProperty('responseTime');
        });
        it('should return 404 for non-existent service', async ()=>{
            await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/service/nonexistent').expect(404);
        });
    });
    describe('Alert System Endpoints', ()=>{
        it('should return alerts list', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/alerts').expect(200);
            expect(response.body).toHaveProperty('alerts');
            expect(response.body).toHaveProperty('total');
            expect(Array.isArray(response.body.alerts)).toBe(true);
        });
        it('should return alert statistics', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/alerts/stats').expect(200);
            expect(response.body).toHaveProperty('total');
            expect(response.body).toHaveProperty('bySeverity');
            expect(response.body).toHaveProperty('byService');
            expect(response.body).toHaveProperty('acknowledged');
            expect(response.body).toHaveProperty('resolved');
        });
        it('should return alert rules', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/alerts/rules/list').expect(200);
            expect(response.body).toHaveProperty('rules');
            expect(Array.isArray(response.body.rules)).toBe(true);
        });
        it('should filter alerts by service', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/alerts?service=database').expect(200);
            expect(response.body).toHaveProperty('alerts');
            expect(response.body).toHaveProperty('filters');
            expect(response.body.filters).toHaveProperty('service', 'database');
        });
        it('should filter alerts by severity', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/alerts?severity=critical').expect(200);
            expect(response.body.filters).toHaveProperty('severity', 'critical');
        });
    });
    describe('Health Check Validation', ()=>{
        it('should validate database connectivity', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/v2/database').expect(200);
            expect(response.body).toHaveProperty('status');
            expect([
                'healthy',
                'degraded',
                'unhealthy'
            ]).toContain(response.body.status);
        });
        it('should validate system resources', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/v2/system').expect(200);
            expect(response.body).toHaveProperty('status');
            expect(response.body).toHaveProperty('details');
            expect(response.body.details).toHaveProperty('memory');
            expect(response.body.details).toHaveProperty('cpu');
        });
        it('should handle service check timeouts gracefully', async ()=>{
            // This test simulates a timeout scenario
            const response = await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/service/ollama').timeout(15000) // 15 second timeout
            .expect((res)=>{
                expect([
                    200,
                    503
                ]).toContain(res.status);
            });
            expect(response.body).toHaveProperty('status');
        });
    });
    describe('Error Handling', ()=>{
        it('should handle malformed requests gracefully', async ()=>{
            const response = await (0, _supertest.default)(_server.default).post('/api/alerts/rules').send({
                invalid: 'data'
            }).expect(400);
            expect(response.body).toHaveProperty('error');
        });
        it('should return appropriate status codes for unhealthy services', async ()=>{
            // Test assumes some services might be unhealthy in test environment
            const response = await (0, _supertest.default)(_server.default).get('/api/health/v2').expect((res)=>{
                expect([
                    200,
                    503
                ]).toContain(res.status);
            });
            expect(response.body).toHaveProperty('status');
        });
    });
    describe('Real-time Features', ()=>{
        it('should establish SSE connection for health events', (done)=>{
            const req = (0, _supertest.default)(_server.default).get('/api/health/orchestrator/events').expect(200).expect('Content-Type', /text\/event-stream/).end(()=>{
                done();
            });
            // Close connection after a short delay
            setTimeout(()=>{
                req.abort();
            }, 1000);
        });
        it('should establish SSE connection for alert events', (done)=>{
            const req = (0, _supertest.default)(_server.default).get('/api/alerts/stream/live').expect(200).expect('Content-Type', /text\/event-stream/).end(()=>{
                done();
            });
            // Close connection after a short delay
            setTimeout(()=>{
                req.abort();
            }, 1000);
        });
    });
    describe('Performance Tests', ()=>{
        it('should handle concurrent health check requests', async ()=>{
            const promises = Array.from({
                length: 10
            }, ()=>(0, _supertest.default)(_server.default).get('/api/health/v2'));
            const responses = await Promise.all(promises);
            responses.forEach((response)=>{
                expect([
                    200,
                    503
                ]).toContain(response.status);
                expect(response.body).toHaveProperty('status');
            });
        });
        it('should respond to health checks within reasonable time', async ()=>{
            const startTime = Date.now();
            await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/summary').expect(200);
            const responseTime = Date.now() - startTime;
            expect(responseTime).toBeLessThan(5000); // 5 seconds
        });
    });
    describe('Security Tests', ()=>{
        it('should not expose sensitive information in health responses', async ()=>{
            const response = await (0, _supertest.default)(_server.default).get('/api/health/v2?detailed=true').expect(200);
            const responseStr = JSON.stringify(response.body);
            // Check that sensitive information is not exposed
            expect(responseStr).not.toMatch(/password/i);
            expect(responseStr).not.toMatch(/secret/i);
            expect(responseStr).not.toMatch(/token/i);
            expect(responseStr).not.toMatch(/key.*:/);
        });
        it('should handle malicious input safely', async ()=>{
            await (0, _supertest.default)(_server.default).get('/api/health/orchestrator/service/<script>alert("xss")</script>').expect(404);
        });
    });
    describe('Circuit Breaker Integration', ()=>{
        it('should track circuit breaker states', ()=>{
            const breakers = _CircuitBreaker.circuitBreakerRegistry.getAllBreakers();
            expect(breakers).toBeInstanceOf(Map);
        });
        it('should provide circuit breaker statistics', ()=>{
            const stats = _CircuitBreaker.circuitBreakerRegistry.getStats();
            expect(typeof stats).toBe('object');
        });
    });
});
