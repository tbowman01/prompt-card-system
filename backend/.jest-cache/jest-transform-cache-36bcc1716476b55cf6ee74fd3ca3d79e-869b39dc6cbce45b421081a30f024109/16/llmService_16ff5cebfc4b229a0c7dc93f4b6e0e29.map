{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/llmService.ts"],"sourcesContent":["import axios from 'axios';\nimport { assertionEngine, AssertionContext, EnhancedAssertionType, EnhancedAssertionResult } from './assertions';\n\nexport interface LLMResponse {\n  model: string;\n  created_at: string;\n  response: string;\n  done: boolean;\n  context?: number[];\n  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_count?: number;\n  prompt_eval_duration?: number;\n  eval_count?: number;\n  eval_duration?: number;\n}\n\nexport interface LLMRequest {\n  model: string;\n  prompt: string;\n  stream?: boolean;\n  format?: string;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n  };\n}\n\nclass LLMService {\n  private baseUrl: string;\n  public defaultModel: string;\n\n  constructor() {\n    this.baseUrl = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';\n    this.defaultModel = process.env.OLLAMA_DEFAULT_MODEL || 'llama3';\n  }\n\n  /**\n   * Generate text using Ollama LLM\n   */\n  async generate(prompt: string, model?: string, options?: LLMRequest['options']): Promise<LLMResponse> {\n    try {\n      const request: LLMRequest = {\n        model: model || this.defaultModel,\n        prompt,\n        stream: false,\n        options: {\n          temperature: 0.7,\n          ...options\n        }\n      };\n\n      const response = await axios.post(`${this.baseUrl}/api/generate`, request, {\n        timeout: 60000, // 60 second timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      return response.data as LLMResponse;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(`LLM Service Error: ${error.response?.data?.error || error.message}`);\n      }\n      throw new Error(`LLM Service Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if Ollama service is available\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/api/tags`, {\n        timeout: 5000\n      });\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get available models\n   */\n  async getModels(): Promise<string[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/api/tags`, {\n        timeout: 10000\n      });\n      return response.data.models?.map((model: any) => model.name) || [];\n    } catch (error) {\n      throw new Error(`Failed to fetch models: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Substitute variables in prompt template\n   */\n  substituteVariables(template: string, variables: Record<string, any>): string {\n    let result = template;\n    \n    // Replace variables in format {{variable_name}}\n    Object.entries(variables).forEach(([key, value]) => {\n      const regex = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(regex, String(value));\n    });\n\n    return result;\n  }\n\n  /**\n   * Initialize the LLM service with enhanced assertion engine\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing LLM Service with Enhanced Assertion Engine...');\n      await assertionEngine.initialize();\n      console.log('✅ LLM Service initialized successfully');\n    } catch (error) {\n      console.error('❌ Failed to initialize LLM Service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate assertions against LLM output using enhanced assertion engine\n   */\n  async validateAssertions(\n    output: string, \n    assertions: EnhancedAssertionType[],\n    context?: {\n      prompt?: string;\n      variables?: Record<string, any>;\n      model?: string;\n      executionTime?: number;\n    }\n  ): Promise<EnhancedAssertionResult[]> {\n    try {\n      const assertionContext: AssertionContext = {\n        prompt: context?.prompt || '',\n        variables: context?.variables || {},\n        model: context?.model || this.defaultModel,\n        executionTime: context?.executionTime || 0\n      };\n\n      return await assertionEngine.validateAssertions(output, assertions, assertionContext);\n    } catch (error) {\n      console.error('Error validating assertions:', error);\n      // Fallback to basic validation for compatibility\n      return this.validateAssertionsBasic(output, assertions);\n    }\n  }\n\n  /**\n   * Fallback basic assertion validation for compatibility\n   */\n  private async validateAssertionsBasic(\n    output: string, \n    assertions: EnhancedAssertionType[]\n  ): Promise<EnhancedAssertionResult[]> {\n    return assertions.map(assertion => {\n      try {\n        let passed = false;\n\n        switch (assertion.type) {\n          case 'contains':\n            passed = output.toLowerCase().includes(String(assertion.value).toLowerCase());\n            break;\n          \n          case 'not-contains':\n            passed = !output.toLowerCase().includes(String(assertion.value).toLowerCase());\n            break;\n          \n          case 'equals':\n            passed = output.trim() === String(assertion.value).trim();\n            break;\n          \n          case 'not-equals':\n            passed = output.trim() !== String(assertion.value).trim();\n            break;\n          \n          case 'regex':\n            const regex = new RegExp(String(assertion.value));\n            passed = regex.test(output);\n            break;\n          \n          case 'length':\n            if (typeof assertion.value === 'number') {\n              passed = output.length === assertion.value;\n            } else {\n              // Support range: \"10-20\" or \">10\" or \"<100\"\n              const valueStr = String(assertion.value);\n              if (valueStr.includes('-')) {\n                const [min, max] = valueStr.split('-').map(v => parseInt(v.trim()));\n                passed = output.length >= min && output.length <= max;\n              } else if (valueStr.startsWith('>')) {\n                const min = parseInt(valueStr.substring(1));\n                passed = output.length > min;\n              } else if (valueStr.startsWith('<')) {\n                const max = parseInt(valueStr.substring(1));\n                passed = output.length < max;\n              } else {\n                passed = output.length === parseInt(valueStr);\n              }\n            }\n            break;\n          \n          default:\n            return {\n              assertion,\n              passed: false,\n              error: `Unsupported assertion type in basic validation: ${assertion.type}`\n            };\n        }\n\n        return {\n          assertion,\n          passed\n        };\n      } catch (error) {\n        return {\n          assertion,\n          passed: false,\n          error: error instanceof Error ? error.message : 'Basic assertion validation failed'\n        };\n      }\n    });\n  }\n\n  /**\n   * Get available assertion types from the engine\n   */\n  getAvailableAssertionTypes(): string[] {\n    return assertionEngine.getRegisteredTypes();\n  }\n\n  /**\n   * Get assertion execution statistics\n   */\n  getAssertionStatistics(): {\n    totalAssertions: number;\n    successfulAssertions: number;\n    failedAssertions: number;\n    averageExecutionTime: number;\n  } {\n    return assertionEngine.getStatistics();\n  }\n}\n\nexport const llmService = new LLMService();\nexport default llmService;"],"names":["llmService","LLMService","generate","prompt","model","options","request","defaultModel","stream","temperature","response","axios","post","baseUrl","timeout","headers","data","error","isAxiosError","Error","message","healthCheck","get","status","getModels","models","map","name","substituteVariables","template","variables","result","Object","entries","forEach","key","value","regex","RegExp","replace","String","initialize","console","log","assertionEngine","validateAssertions","output","assertions","context","assertionContext","executionTime","validateAssertionsBasic","assertion","passed","type","toLowerCase","includes","trim","test","length","valueStr","min","max","split","v","parseInt","startsWith","substring","getAvailableAssertionTypes","getRegisteredTypes","getAssertionStatistics","getStatistics","process","env","OLLAMA_BASE_URL","OLLAMA_DEFAULT_MODEL"],"mappings":"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"}