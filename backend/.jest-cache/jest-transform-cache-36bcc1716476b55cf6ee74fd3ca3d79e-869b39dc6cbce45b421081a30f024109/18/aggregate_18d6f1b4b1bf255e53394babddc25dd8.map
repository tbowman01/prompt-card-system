{"version":3,"sources":["/workspaces/prompt-card-system/node_modules/better-sqlite3/lib/methods/aggregate.js"],"sourcesContent":["'use strict';\nconst { getBooleanOption, cppdb } = require('../util');\n\nmodule.exports = function defineAggregate(name, options) {\n\t// Validate arguments\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\n\n\t// Interpret options\n\tconst start = 'start' in options ? options.start : null;\n\tconst step = getFunctionOption(options, 'step', true);\n\tconst inverse = getFunctionOption(options, 'inverse', false);\n\tconst result = getFunctionOption(options, 'result', false);\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n\tconst deterministic = getBooleanOption(options, 'deterministic');\n\tconst directOnly = getBooleanOption(options, 'directOnly');\n\tconst varargs = getBooleanOption(options, 'varargs');\n\tlet argCount = -1;\n\n\t// Determine argument count\n\tif (!varargs) {\n\t\targCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n\t\tif (argCount > 0) argCount -= 1;\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n\t}\n\n\tthis[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);\n\treturn this;\n};\n\nconst getFunctionOption = (options, key, required) => {\n\tconst value = key in options ? options[key] : null;\n\tif (typeof value === 'function') return value;\n\tif (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n\tif (required) throw new TypeError(`Missing required option \"${key}\"`);\n\treturn null;\n};\n\nconst getLength = ({ length }) => {\n\tif (Number.isInteger(length) && length >= 0) return length;\n\tthrow new TypeError('Expected function.length to be a positive integer');\n};\n"],"names":["getBooleanOption","cppdb","require","module","exports","defineAggregate","name","options","TypeError","start","step","getFunctionOption","inverse","result","safeIntegers","deterministic","directOnly","varargs","argCount","Math","max","getLength","RangeError","aggregate","key","required","value","length","Number","isInteger"],"mappings":"AAAA;AACA,MAAM,EAAEA,gBAAgB,EAAEC,KAAK,EAAE,GAAGC,QAAQ;AAE5CC,OAAOC,OAAO,GAAG,SAASC,gBAAgBC,IAAI,EAAEC,OAAO;IACtD,qBAAqB;IACrB,IAAI,OAAOD,SAAS,UAAU,MAAM,IAAIE,UAAU;IAClD,IAAI,OAAOD,YAAY,YAAYA,YAAY,MAAM,MAAM,IAAIC,UAAU;IACzE,IAAI,CAACF,MAAM,MAAM,IAAIE,UAAU;IAE/B,oBAAoB;IACpB,MAAMC,QAAQ,WAAWF,UAAUA,QAAQE,KAAK,GAAG;IACnD,MAAMC,OAAOC,kBAAkBJ,SAAS,QAAQ;IAChD,MAAMK,UAAUD,kBAAkBJ,SAAS,WAAW;IACtD,MAAMM,SAASF,kBAAkBJ,SAAS,UAAU;IACpD,MAAMO,eAAe,kBAAkBP,UAAU,CAACP,iBAAiBO,SAAS,kBAAkB;IAC9F,MAAMQ,gBAAgBf,iBAAiBO,SAAS;IAChD,MAAMS,aAAahB,iBAAiBO,SAAS;IAC7C,MAAMU,UAAUjB,iBAAiBO,SAAS;IAC1C,IAAIW,WAAW,CAAC;IAEhB,2BAA2B;IAC3B,IAAI,CAACD,SAAS;QACbC,WAAWC,KAAKC,GAAG,CAACC,UAAUX,OAAOE,UAAUS,UAAUT,WAAW;QACpE,IAAIM,WAAW,GAAGA,YAAY;QAC9B,IAAIA,WAAW,KAAK,MAAM,IAAII,WAAW;IAC1C;IAEA,IAAI,CAACrB,MAAM,CAACsB,SAAS,CAACd,OAAOC,MAAME,SAASC,QAAQP,MAAMY,UAAUJ,cAAcC,eAAeC;IACjG,OAAO,IAAI;AACZ;AAEA,MAAML,oBAAoB,CAACJ,SAASiB,KAAKC;IACxC,MAAMC,QAAQF,OAAOjB,UAAUA,OAAO,CAACiB,IAAI,GAAG;IAC9C,IAAI,OAAOE,UAAU,YAAY,OAAOA;IACxC,IAAIA,SAAS,MAAM,MAAM,IAAIlB,UAAU,CAAC,cAAc,EAAEgB,IAAI,yBAAyB,CAAC;IACtF,IAAIC,UAAU,MAAM,IAAIjB,UAAU,CAAC,yBAAyB,EAAEgB,IAAI,CAAC,CAAC;IACpE,OAAO;AACR;AAEA,MAAMH,YAAY,CAAC,EAAEM,MAAM,EAAE;IAC5B,IAAIC,OAAOC,SAAS,CAACF,WAAWA,UAAU,GAAG,OAAOA;IACpD,MAAM,IAAInB,UAAU;AACrB"}