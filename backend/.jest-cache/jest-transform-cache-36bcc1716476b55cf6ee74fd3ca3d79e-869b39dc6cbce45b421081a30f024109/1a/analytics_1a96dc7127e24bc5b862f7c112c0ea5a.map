{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/analytics.ts"],"sourcesContent":["import express from 'express';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\n\nconst router = express.Router();\nconst analyticsEngine = AnalyticsEngine.getInstance();\n\n// Get dashboard metrics\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.getDashboardMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching dashboard metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch dashboard metrics' \n    });\n  }\n});\n\n// Get real-time metrics\nrouter.get('/realtime', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.calculateRealtimeMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching real-time metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch real-time metrics' \n    });\n  }\n});\n\n// Get historical metrics\nrouter.get('/historical', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.calculateHistoricalMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching historical metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch historical metrics' \n    });\n  }\n});\n\n// Get trends with optional parameters\nrouter.get('/trends', async (req, res) => {\n  try {\n    const { period = 'day', limit = 30 } = req.query;\n    const trends = await analyticsEngine.calculateTrends(\n      period as 'hour' | 'day' | 'week' | 'month',\n      parseInt(limit as string, 10)\n    );\n    res.json({ success: true, data: trends });\n  } catch (error) {\n    console.error('Error fetching trends:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch trends' \n    });\n  }\n});\n\n// Get insights\nrouter.get('/insights', async (req, res) => {\n  try {\n    const insights = await analyticsEngine.generateInsights();\n    res.json({ success: true, data: insights });\n  } catch (error) {\n    console.error('Error fetching insights:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch insights' \n    });\n  }\n});\n\n// Record test execution event\nrouter.post('/events/test-execution', async (req, res) => {\n  try {\n    const { testCaseId, executionId, model, passed, executionTime, metadata } = req.body;\n    \n    await analyticsEngine.recordTestExecution(\n      testCaseId,\n      executionId,\n      model,\n      passed,\n      executionTime,\n      metadata\n    );\n    \n    res.json({ success: true, message: 'Test execution recorded' });\n  } catch (error) {\n    console.error('Error recording test execution:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record test execution' \n    });\n  }\n});\n\n// Record batch execution event\nrouter.post('/events/batch-execution', async (req, res) => {\n  try {\n    const { promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata } = req.body;\n    \n    await analyticsEngine.recordBatchExecution(\n      promptCardId,\n      executionId,\n      model,\n      totalTests,\n      passedTests,\n      executionTime,\n      metadata\n    );\n    \n    res.json({ success: true, message: 'Batch execution recorded' });\n  } catch (error) {\n    console.error('Error recording batch execution:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record batch execution' \n    });\n  }\n});\n\n// Record model usage event\nrouter.post('/events/model-usage', async (req, res) => {\n  try {\n    const { model, usage } = req.body;\n    \n    await analyticsEngine.recordModelUsage(model, usage);\n    \n    res.json({ success: true, message: 'Model usage recorded' });\n  } catch (error) {\n    console.error('Error recording model usage:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record model usage' \n    });\n  }\n});\n\n// Record system metrics\nrouter.post('/events/system-metrics', async (req, res) => {\n  try {\n    const { metrics } = req.body;\n    \n    await analyticsEngine.recordSystemMetrics(metrics);\n    \n    res.json({ success: true, message: 'System metrics recorded' });\n  } catch (error) {\n    console.error('Error recording system metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record system metrics' \n    });\n  }\n});\n\nexport { router as analyticsRoutes };"],"names":["analyticsRoutes","router","express","Router","analyticsEngine","AnalyticsEngine","getInstance","get","req","res","metrics","getDashboardMetrics","json","success","data","error","console","status","calculateRealtimeMetrics","calculateHistoricalMetrics","period","limit","query","trends","calculateTrends","parseInt","insights","generateInsights","post","testCaseId","executionId","model","passed","executionTime","metadata","body","recordTestExecution","message","promptCardId","totalTests","passedTests","recordBatchExecution","usage","recordModelUsage","recordSystemMetrics"],"mappings":";;;;+BAmKmBA;;;eAAVC;;;gEAnKW;iCACY;;;;;;AAEhC,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAC7B,MAAMC,kBAAkBC,gCAAe,CAACC,WAAW;AAEnD,wBAAwB;AACxBL,OAAOM,GAAG,CAAC,cAAc,OAAOC,KAAKC;IACnC,IAAI;QACF,MAAMC,UAAU,MAAMN,gBAAgBO,mBAAmB;QACzDF,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMJ;QAAQ;IAC1C,EAAE,OAAOK,OAAO;QACdC,QAAQD,KAAK,CAAC,qCAAqCA;QACnDN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,wBAAwB;AACxBd,OAAOM,GAAG,CAAC,aAAa,OAAOC,KAAKC;IAClC,IAAI;QACF,MAAMC,UAAU,MAAMN,gBAAgBc,wBAAwB;QAC9DT,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMJ;QAAQ;IAC1C,EAAE,OAAOK,OAAO;QACdC,QAAQD,KAAK,CAAC,qCAAqCA;QACnDN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,yBAAyB;AACzBd,OAAOM,GAAG,CAAC,eAAe,OAAOC,KAAKC;IACpC,IAAI;QACF,MAAMC,UAAU,MAAMN,gBAAgBe,0BAA0B;QAChEV,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMJ;QAAQ;IAC1C,EAAE,OAAOK,OAAO;QACdC,QAAQD,KAAK,CAAC,sCAAsCA;QACpDN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,sCAAsC;AACtCd,OAAOM,GAAG,CAAC,WAAW,OAAOC,KAAKC;IAChC,IAAI;QACF,MAAM,EAAEW,SAAS,KAAK,EAAEC,QAAQ,EAAE,EAAE,GAAGb,IAAIc,KAAK;QAChD,MAAMC,SAAS,MAAMnB,gBAAgBoB,eAAe,CAClDJ,QACAK,SAASJ,OAAiB;QAE5BZ,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMS;QAAO;IACzC,EAAE,OAAOR,OAAO;QACdC,QAAQD,KAAK,CAAC,0BAA0BA;QACxCN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,eAAe;AACfd,OAAOM,GAAG,CAAC,aAAa,OAAOC,KAAKC;IAClC,IAAI;QACF,MAAMiB,WAAW,MAAMtB,gBAAgBuB,gBAAgB;QACvDlB,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMY;QAAS;IAC3C,EAAE,OAAOX,OAAO;QACdC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1CN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,8BAA8B;AAC9Bd,OAAO2B,IAAI,CAAC,0BAA0B,OAAOpB,KAAKC;IAChD,IAAI;QACF,MAAM,EAAEoB,UAAU,EAAEC,WAAW,EAAEC,KAAK,EAAEC,MAAM,EAAEC,aAAa,EAAEC,QAAQ,EAAE,GAAG1B,IAAI2B,IAAI;QAEpF,MAAM/B,gBAAgBgC,mBAAmB,CACvCP,YACAC,aACAC,OACAC,QACAC,eACAC;QAGFzB,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMwB,SAAS;QAA0B;IAC/D,EAAE,OAAOtB,OAAO;QACdC,QAAQD,KAAK,CAAC,mCAAmCA;QACjDN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,+BAA+B;AAC/Bd,OAAO2B,IAAI,CAAC,2BAA2B,OAAOpB,KAAKC;IACjD,IAAI;QACF,MAAM,EAAE6B,YAAY,EAAER,WAAW,EAAEC,KAAK,EAAEQ,UAAU,EAAEC,WAAW,EAAEP,aAAa,EAAEC,QAAQ,EAAE,GAAG1B,IAAI2B,IAAI;QAEvG,MAAM/B,gBAAgBqC,oBAAoB,CACxCH,cACAR,aACAC,OACAQ,YACAC,aACAP,eACAC;QAGFzB,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMwB,SAAS;QAA2B;IAChE,EAAE,OAAOtB,OAAO;QACdC,QAAQD,KAAK,CAAC,oCAAoCA;QAClDN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,2BAA2B;AAC3Bd,OAAO2B,IAAI,CAAC,uBAAuB,OAAOpB,KAAKC;IAC7C,IAAI;QACF,MAAM,EAAEsB,KAAK,EAAEW,KAAK,EAAE,GAAGlC,IAAI2B,IAAI;QAEjC,MAAM/B,gBAAgBuC,gBAAgB,CAACZ,OAAOW;QAE9CjC,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMwB,SAAS;QAAuB;IAC5D,EAAE,OAAOtB,OAAO;QACdC,QAAQD,KAAK,CAAC,gCAAgCA;QAC9CN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF;AAEA,wBAAwB;AACxBd,OAAO2B,IAAI,CAAC,0BAA0B,OAAOpB,KAAKC;IAChD,IAAI;QACF,MAAM,EAAEC,OAAO,EAAE,GAAGF,IAAI2B,IAAI;QAE5B,MAAM/B,gBAAgBwC,mBAAmB,CAAClC;QAE1CD,IAAIG,IAAI,CAAC;YAAEC,SAAS;YAAMwB,SAAS;QAA0B;IAC/D,EAAE,OAAOtB,OAAO;QACdC,QAAQD,KAAK,CAAC,mCAAmCA;QACjDN,IAAIQ,MAAM,CAAC,KAAKL,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAO;QACT;IACF;AACF"}