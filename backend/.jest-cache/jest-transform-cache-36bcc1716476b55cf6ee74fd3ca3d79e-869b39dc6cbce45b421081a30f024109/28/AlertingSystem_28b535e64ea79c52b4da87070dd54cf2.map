{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/security/AlertingSystem.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport crypto from 'crypto';\nimport { securityMonitor, SecurityEvent } from './SecurityMonitor';\nimport { logAggregator, LogAnalysis } from './LogAggregator';\n\nexport interface Alert {\n  id: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'security' | 'performance' | 'system' | 'compliance';\n  title: string;\n  message: string;\n  source: string;\n  metadata: any;\n  acknowledged: boolean;\n  acknowledgedBy?: string;\n  acknowledgedAt?: Date;\n  resolved: boolean;\n  resolvedBy?: string;\n  resolvedAt?: Date;\n  actions: AlertAction[];\n}\n\nexport interface AlertAction {\n  id: string;\n  type: 'email' | 'webhook' | 'sms' | 'slack' | 'log' | 'auto-remediate';\n  target: string;\n  config: any;\n  executed: boolean;\n  executedAt?: Date;\n  result?: string;\n  error?: string;\n}\n\nexport interface AlertRule {\n  id: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n  conditions: {\n    eventType?: string[];\n    severity?: string[];\n    source?: string[];\n    pattern?: RegExp;\n    threshold?: {\n      count: number;\n      timeWindow: number; // in minutes\n    };\n  };\n  actions: Omit<AlertAction, 'id' | 'executed' | 'executedAt' | 'result' | 'error'>[];\n  cooldown?: number; // minutes\n  lastTriggered?: Date;\n}\n\nexport interface NotificationChannel {\n  id: string;\n  type: 'email' | 'webhook' | 'slack' | 'sms';\n  name: string;\n  config: {\n    email?: { to: string[]; from: string; smtp?: any };\n    webhook?: { url: string; headers?: Record<string, string>; method?: string };\n    slack?: { webhook: string; channel: string };\n    sms?: { provider: string; credentials: any; to: string[] };\n  };\n  enabled: boolean;\n}\n\nexport class AlertingSystem extends EventEmitter {\n  private alerts: Alert[] = [];\n  private rules: AlertRule[] = [];\n  private channels: NotificationChannel[] = [];\n  private eventCounts: Map<string, { count: number; firstSeen: Date }> = new Map();\n  private cleanupInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    maxAlerts?: number;\n    alertRetentionDays?: number;\n    enableAutoRemediation?: boolean;\n  } = {}) {\n    super();\n    \n    const {\n      maxAlerts = 5000,\n      alertRetentionDays = 90,\n      enableAutoRemediation = false\n    } = options;\n\n    this.options = {\n      maxAlerts,\n      alertRetentionDays,\n      enableAutoRemediation\n    };\n\n    this.setupDefaultRules();\n    this.setupEventListeners();\n    this.setupCleanup();\n  }\n\n  // Alert management\n  createAlert(alertData: Omit<Alert, 'id' | 'timestamp' | 'acknowledged' | 'resolved' | 'actions'>): Alert {\n    const alert: Alert = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      acknowledged: false,\n      resolved: false,\n      actions: [],\n      ...alertData\n    };\n\n    this.alerts.push(alert);\n    this.emit('alert', alert);\n\n    // Execute alert actions\n    this.executeAlertActions(alert);\n\n    // Maintain alert limit\n    if (this.alerts.length > this.options.maxAlerts!) {\n      this.alerts = this.alerts.slice(-this.options.maxAlerts!);\n    }\n\n    return alert;\n  }\n\n  acknowledgeAlert(alertId: string, acknowledgedBy: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (!alert || alert.acknowledged) {\n      return false;\n    }\n\n    alert.acknowledged = true;\n    alert.acknowledgedBy = acknowledgedBy;\n    alert.acknowledgedAt = new Date();\n\n    this.emit('alertAcknowledged', alert);\n    return true;\n  }\n\n  resolveAlert(alertId: string, resolvedBy: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (!alert || alert.resolved) {\n      return false;\n    }\n\n    alert.resolved = true;\n    alert.resolvedBy = resolvedBy;\n    alert.resolvedAt = new Date();\n\n    this.emit('alertResolved', alert);\n    return true;\n  }\n\n  getAlerts(filters?: {\n    severity?: Alert['severity'][];\n    type?: Alert['type'][];\n    acknowledged?: boolean;\n    resolved?: boolean;\n    since?: Date;\n    limit?: number;\n  }): Alert[] {\n    let filteredAlerts = [...this.alerts];\n\n    if (filters) {\n      if (filters.severity) {\n        filteredAlerts = filteredAlerts.filter(a => filters.severity!.includes(a.severity));\n      }\n      if (filters.type) {\n        filteredAlerts = filteredAlerts.filter(a => filters.type!.includes(a.type));\n      }\n      if (filters.acknowledged !== undefined) {\n        filteredAlerts = filteredAlerts.filter(a => a.acknowledged === filters.acknowledged);\n      }\n      if (filters.resolved !== undefined) {\n        filteredAlerts = filteredAlerts.filter(a => a.resolved === filters.resolved);\n      }\n      if (filters.since) {\n        filteredAlerts = filteredAlerts.filter(a => a.timestamp >= filters.since!);\n      }\n      if (filters.limit) {\n        filteredAlerts = filteredAlerts.slice(-filters.limit);\n      }\n    }\n\n    return filteredAlerts.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // Rule management\n  addRule(rule: Omit<AlertRule, 'id'>): AlertRule {\n    const newRule: AlertRule = {\n      id: crypto.randomUUID(),\n      ...rule\n    };\n\n    this.rules.push(newRule);\n    this.emit('ruleAdded', newRule);\n    return newRule;\n  }\n\n  updateRule(ruleId: string, updates: Partial<AlertRule>): boolean {\n    const ruleIndex = this.rules.findIndex(r => r.id === ruleId);\n    if (ruleIndex === -1) {\n      return false;\n    }\n\n    this.rules[ruleIndex] = { ...this.rules[ruleIndex], ...updates };\n    this.emit('ruleUpdated', this.rules[ruleIndex]);\n    return true;\n  }\n\n  removeRule(ruleId: string): boolean {\n    const ruleIndex = this.rules.findIndex(r => r.id === ruleId);\n    if (ruleIndex === -1) {\n      return false;\n    }\n\n    const rule = this.rules.splice(ruleIndex, 1)[0];\n    this.emit('ruleRemoved', rule);\n    return true;\n  }\n\n  getRules(): AlertRule[] {\n    return [...this.rules];\n  }\n\n  // Notification channel management\n  addChannel(channel: Omit<NotificationChannel, 'id'>): NotificationChannel {\n    const newChannel: NotificationChannel = {\n      id: crypto.randomUUID(),\n      ...channel\n    };\n\n    this.channels.push(newChannel);\n    this.emit('channelAdded', newChannel);\n    return newChannel;\n  }\n\n  updateChannel(channelId: string, updates: Partial<NotificationChannel>): boolean {\n    const channelIndex = this.channels.findIndex(c => c.id === channelId);\n    if (channelIndex === -1) {\n      return false;\n    }\n\n    this.channels[channelIndex] = { ...this.channels[channelIndex], ...updates };\n    this.emit('channelUpdated', this.channels[channelIndex]);\n    return true;\n  }\n\n  removeChannel(channelId: string): boolean {\n    const channelIndex = this.channels.findIndex(c => c.id === channelId);\n    if (channelIndex === -1) {\n      return false;\n    }\n\n    const channel = this.channels.splice(channelIndex, 1)[0];\n    this.emit('channelRemoved', channel);\n    return true;\n  }\n\n  getChannels(): NotificationChannel[] {\n    return [...this.channels];\n  }\n\n  // Alert processing\n  private async executeAlertActions(alert: Alert): Promise<void> {\n    const matchingRules = this.rules.filter(rule => \n      rule.enabled && this.doesEventMatchRule(alert, rule)\n    );\n\n    for (const rule of matchingRules) {\n      // Check cooldown\n      if (rule.cooldown && rule.lastTriggered) {\n        const cooldownEnd = new Date(rule.lastTriggered.getTime() + rule.cooldown * 60 * 1000);\n        if (new Date() < cooldownEnd) {\n          continue;\n        }\n      }\n\n      // Execute rule actions\n      for (const actionTemplate of rule.actions) {\n        const action: AlertAction = {\n          id: crypto.randomUUID(),\n          executed: false,\n          ...actionTemplate\n        };\n\n        try {\n          await this.executeAction(action, alert);\n          action.executed = true;\n          action.executedAt = new Date();\n          action.result = 'success';\n        } catch (error) {\n          action.executed = false;\n          action.error = error instanceof Error ? error.message : 'Unknown error';\n        }\n\n        alert.actions.push(action);\n      }\n\n      rule.lastTriggered = new Date();\n    }\n  }\n\n  private doesEventMatchRule(alert: Alert, rule: AlertRule): boolean {\n    const { conditions } = rule;\n\n    if (conditions.eventType && !conditions.eventType.includes(alert.type)) {\n      return false;\n    }\n\n    if (conditions.severity && !conditions.severity.includes(alert.severity)) {\n      return false;\n    }\n\n    if (conditions.source && !conditions.source.some(s => alert.source.includes(s))) {\n      return false;\n    }\n\n    if (conditions.pattern && !conditions.pattern.test(alert.message)) {\n      return false;\n    }\n\n    if (conditions.threshold) {\n      const key = `${rule.id}_${alert.type}_${alert.source}`;\n      const now = new Date();\n      \n      if (!this.eventCounts.has(key)) {\n        this.eventCounts.set(key, { count: 1, firstSeen: now });\n        return false;\n      }\n\n      const eventData = this.eventCounts.get(key)!;\n      const windowStart = new Date(now.getTime() - conditions.threshold.timeWindow * 60 * 1000);\n      \n      if (eventData.firstSeen < windowStart) {\n        // Reset counter for new window\n        this.eventCounts.set(key, { count: 1, firstSeen: now });\n        return false;\n      }\n\n      eventData.count++;\n      return eventData.count >= conditions.threshold.count;\n    }\n\n    return true;\n  }\n\n  private async executeAction(action: AlertAction, alert: Alert): Promise<void> {\n    const channel = this.channels.find(c => c.id === action.target && c.enabled);\n    if (!channel) {\n      throw new Error(`Channel ${action.target} not found or disabled`);\n    }\n\n    switch (action.type) {\n      case 'email':\n        await this.sendEmailAlert(channel, alert, action);\n        break;\n      case 'webhook':\n        await this.sendWebhookAlert(channel, alert, action);\n        break;\n      case 'slack':\n        await this.sendSlackAlert(channel, alert, action);\n        break;\n      case 'sms':\n        await this.sendSMSAlert(channel, alert, action);\n        break;\n      case 'log':\n        await this.logAlert(alert, action);\n        break;\n      case 'auto-remediate':\n        if (this.options.enableAutoRemediation) {\n          await this.executeAutoRemediation(alert, action);\n        }\n        break;\n      default:\n        throw new Error(`Unknown action type: ${action.type}`);\n    }\n  }\n\n  private async sendEmailAlert(channel: NotificationChannel, alert: Alert, action: AlertAction): Promise<void> {\n    // Email implementation would go here\n    // For now, just log the action\n    logAggregator.info('alerting-system', `Email alert sent: ${alert.title}`, {\n      channel: channel.name,\n      alert: alert.id,\n      severity: alert.severity\n    }, ['alert', 'email']);\n  }\n\n  private async sendWebhookAlert(channel: NotificationChannel, alert: Alert, action: AlertAction): Promise<void> {\n    const { webhook } = channel.config;\n    if (!webhook) {\n      throw new Error('Webhook configuration missing');\n    }\n\n    const payload = {\n      alert: {\n        id: alert.id,\n        timestamp: alert.timestamp,\n        severity: alert.severity,\n        type: alert.type,\n        title: alert.title,\n        message: alert.message,\n        source: alert.source,\n        metadata: alert.metadata\n      },\n      action: action.config || {}\n    };\n\n    try {\n      const response = await fetch(webhook.url, {\n        method: webhook.method || 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...webhook.headers\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Webhook returned ${response.status}: ${response.statusText}`);\n      }\n\n      logAggregator.info('alerting-system', `Webhook alert sent: ${alert.title}`, {\n        channel: channel.name,\n        alert: alert.id,\n        webhook: webhook.url,\n        status: response.status\n      }, ['alert', 'webhook']);\n    } catch (error) {\n      throw new Error(`Webhook failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async sendSlackAlert(channel: NotificationChannel, alert: Alert, action: AlertAction): Promise<void> {\n    const { slack } = channel.config;\n    if (!slack) {\n      throw new Error('Slack configuration missing');\n    }\n\n    const severityEmoji = {\n      low: '🟢',\n      medium: '🟡',\n      high: '🟠',\n      critical: '🔴'\n    };\n\n    const payload = {\n      channel: slack.channel,\n      text: `${severityEmoji[alert.severity]} Security Alert: ${alert.title}`,\n      attachments: [{\n        color: alert.severity === 'critical' ? 'danger' : \n               alert.severity === 'high' ? 'warning' : 'good',\n        fields: [\n          { title: 'Severity', value: alert.severity.toUpperCase(), short: true },\n          { title: 'Type', value: alert.type, short: true },\n          { title: 'Source', value: alert.source, short: true },\n          { title: 'Time', value: alert.timestamp.toISOString(), short: true },\n          { title: 'Message', value: alert.message, short: false }\n        ],\n        timestamp: Math.floor(alert.timestamp.getTime() / 1000)\n      }]\n    };\n\n    try {\n      const response = await fetch(slack.webhook, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Slack webhook returned ${response.status}: ${response.statusText}`);\n      }\n\n      logAggregator.info('alerting-system', `Slack alert sent: ${alert.title}`, {\n        channel: channel.name,\n        alert: alert.id,\n        slackChannel: slack.channel\n      }, ['alert', 'slack']);\n    } catch (error) {\n      throw new Error(`Slack alert failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async sendSMSAlert(channel: NotificationChannel, alert: Alert, action: AlertAction): Promise<void> {\n    // SMS implementation would go here\n    logAggregator.info('alerting-system', `SMS alert sent: ${alert.title}`, {\n      channel: channel.name,\n      alert: alert.id,\n      severity: alert.severity\n    }, ['alert', 'sms']);\n  }\n\n  private async logAlert(alert: Alert, action: AlertAction): Promise<void> {\n    logAggregator.warn('alerting-system', `ALERT: ${alert.title}`, {\n      alertId: alert.id,\n      severity: alert.severity,\n      type: alert.type,\n      source: alert.source,\n      message: alert.message,\n      metadata: alert.metadata\n    }, ['alert', 'logged']);\n  }\n\n  private async executeAutoRemediation(alert: Alert, action: AlertAction): Promise<void> {\n    // Auto-remediation logic would go here\n    logAggregator.info('alerting-system', `Auto-remediation triggered for: ${alert.title}`, {\n      alert: alert.id,\n      remediation: action.config\n    }, ['alert', 'auto-remediation']);\n  }\n\n  // Event listeners setup\n  private setupEventListeners(): void {\n    // Listen to security events\n    securityMonitor.on('securityEvent', (event: SecurityEvent) => {\n      this.createAlert({\n        severity: event.severity,\n        type: 'security',\n        title: `Security Event: ${event.type}`,\n        message: event.message,\n        source: event.source,\n        metadata: {\n          eventId: event.id,\n          eventType: event.type,\n          eventDetails: event.details\n        }\n      });\n    });\n\n    securityMonitor.on('criticalAlert', (event: SecurityEvent) => {\n      this.createAlert({\n        severity: 'critical',\n        type: 'security',\n        title: `CRITICAL: ${event.type}`,\n        message: event.message,\n        source: event.source,\n        metadata: {\n          eventId: event.id,\n          eventType: event.type,\n          eventDetails: event.details,\n          critical: true\n        }\n      });\n    });\n\n    // Listen to log analysis events\n    logAggregator.on('analysisComplete', (analysis: LogAnalysis) => {\n      const criticalPatterns = analysis.patterns.filter(p => p.severity === 'critical');\n      const highPatterns = analysis.patterns.filter(p => p.severity === 'high');\n      \n      if (criticalPatterns.length > 0) {\n        this.createAlert({\n          severity: 'critical',\n          type: 'system',\n          title: 'Critical Log Patterns Detected',\n          message: `${criticalPatterns.length} critical patterns found in log analysis`,\n          source: 'log-analyzer',\n          metadata: {\n            analysisId: analysis.id,\n            patterns: criticalPatterns,\n            timeRange: analysis.timeRange\n          }\n        });\n      } else if (highPatterns.length > 0) {\n        this.createAlert({\n          severity: 'high',\n          type: 'system',\n          title: 'High-Severity Log Patterns Detected',\n          message: `${highPatterns.length} high-severity patterns found in log analysis`,\n          source: 'log-analyzer',\n          metadata: {\n            analysisId: analysis.id,\n            patterns: highPatterns,\n            timeRange: analysis.timeRange\n          }\n        });\n      }\n    });\n\n    logAggregator.on('patternDetected', (data: any) => {\n      if (data.pattern.severity === 'critical' || data.pattern.severity === 'high') {\n        this.createAlert({\n          severity: data.pattern.severity,\n          type: data.pattern.type,\n          title: `Pattern Detected: ${data.pattern.description}`,\n          message: data.logEntry.message,\n          source: data.logEntry.source,\n          metadata: {\n            pattern: data.pattern,\n            logEntry: data.logEntry\n          }\n        });\n      }\n    });\n  }\n\n  // Default rules setup\n  private setupDefaultRules(): void {\n    const defaultRules: Omit<AlertRule, 'id'>[] = [\n      {\n        name: 'Critical Security Events',\n        description: 'Alert on any critical security events',\n        enabled: true,\n        conditions: {\n          eventType: ['security'],\n          severity: ['critical']\n        },\n        actions: [\n          { type: 'log', target: 'system', config: {} }\n        ],\n        cooldown: 5\n      },\n      {\n        name: 'Multiple Authentication Failures',\n        description: 'Alert when multiple authentication failures occur',\n        enabled: true,\n        conditions: {\n          pattern: /authentication.*failed|login.*failed/i,\n          threshold: { count: 5, timeWindow: 15 }\n        },\n        actions: [\n          { type: 'log', target: 'system', config: {} }\n        ],\n        cooldown: 10\n      },\n      {\n        name: 'System Performance Issues',\n        description: 'Alert on system performance degradation',\n        enabled: true,\n        conditions: {\n          eventType: ['performance'],\n          severity: ['high', 'critical']\n        },\n        actions: [\n          { type: 'log', target: 'system', config: {} }\n        ],\n        cooldown: 15\n      }\n    ];\n\n    defaultRules.forEach(rule => this.addRule(rule));\n  }\n\n  // Analytics\n  getAlertStatistics(): {\n    total: number;\n    bySeverity: Record<Alert['severity'], number>;\n    byType: Record<Alert['type'], number>;\n    acknowledged: number;\n    resolved: number;\n    recentActivity: { date: string; count: number }[];\n  } {\n    const stats = {\n      total: this.alerts.length,\n      bySeverity: { low: 0, medium: 0, high: 0, critical: 0 } as Record<Alert['severity'], number>,\n      byType: { security: 0, performance: 0, system: 0, compliance: 0 } as Record<Alert['type'], number>,\n      acknowledged: this.alerts.filter(a => a.acknowledged).length,\n      resolved: this.alerts.filter(a => a.resolved).length,\n      recentActivity: [] as { date: string; count: number }[]\n    };\n\n    this.alerts.forEach(alert => {\n      stats.bySeverity[alert.severity]++;\n      stats.byType[alert.type]++;\n    });\n\n    // Recent activity (last 7 days)\n    const now = new Date();\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const dayStart = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n      const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);\n      \n      const count = this.alerts.filter(alert => \n        alert.timestamp >= dayStart && alert.timestamp < dayEnd\n      ).length;\n      \n      stats.recentActivity.push({\n        date: dayStart.toISOString().split('T')[0],\n        count\n      });\n    }\n\n    return stats;\n  }\n\n  // Cleanup\n  private setupCleanup(): void {\n    this.cleanupInterval = setInterval(() => {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - this.options.alertRetentionDays!);\n      \n      this.alerts = this.alerts.filter(alert => alert.timestamp >= cutoffDate);\n      \n      // Clean up event counts older than 24 hours\n      const eventCutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      for (const [key, data] of this.eventCounts.entries()) {\n        if (data.firstSeen < eventCutoff) {\n          this.eventCounts.delete(key);\n        }\n      }\n    }, 24 * 60 * 60 * 1000); // Daily cleanup\n  }\n\n  // Cleanup resources\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n\nexport const alertingSystem = new AlertingSystem({\n  maxAlerts: 5000,\n  alertRetentionDays: 90,\n  enableAutoRemediation: process.env.NODE_ENV === 'production'\n});"],"names":["AlertingSystem","alertingSystem","EventEmitter","createAlert","alertData","alert","id","crypto","randomUUID","timestamp","Date","acknowledged","resolved","actions","alerts","push","emit","executeAlertActions","length","options","maxAlerts","slice","acknowledgeAlert","alertId","acknowledgedBy","find","a","acknowledgedAt","resolveAlert","resolvedBy","resolvedAt","getAlerts","filters","filteredAlerts","severity","filter","includes","type","undefined","since","limit","sort","b","getTime","addRule","rule","newRule","rules","updateRule","ruleId","updates","ruleIndex","findIndex","r","removeRule","splice","getRules","addChannel","channel","newChannel","channels","updateChannel","channelId","channelIndex","c","removeChannel","getChannels","matchingRules","enabled","doesEventMatchRule","cooldown","lastTriggered","cooldownEnd","actionTemplate","action","executed","executeAction","executedAt","result","error","Error","message","conditions","eventType","source","some","s","pattern","test","threshold","key","now","eventCounts","has","set","count","firstSeen","eventData","get","windowStart","timeWindow","target","sendEmailAlert","sendWebhookAlert","sendSlackAlert","sendSMSAlert","logAlert","enableAutoRemediation","executeAutoRemediation","logAggregator","info","title","name","webhook","config","payload","metadata","response","fetch","url","method","headers","body","JSON","stringify","ok","status","statusText","slack","severityEmoji","low","medium","high","critical","text","attachments","color","fields","value","toUpperCase","short","toISOString","Math","floor","slackChannel","warn","remediation","setupEventListeners","securityMonitor","on","event","eventId","eventDetails","details","analysis","criticalPatterns","patterns","p","highPatterns","analysisId","timeRange","data","description","logEntry","setupDefaultRules","defaultRules","forEach","getAlertStatistics","stats","total","bySeverity","byType","security","performance","system","compliance","recentActivity","i","date","dayStart","getFullYear","getMonth","getDate","dayEnd","split","setupCleanup","cleanupInterval","setInterval","cutoffDate","setDate","alertRetentionDays","eventCutoff","entries","delete","destroy","clearInterval","removeAllListeners","Map","process","env","NODE_ENV"],"mappings":"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"}