{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/health-orchestrator.ts"],"sourcesContent":["import { Router } from 'express';\nimport { healthOrchestrator } from '../services/health/HealthOrchestrator';\n\nconst router = Router();\n\n// Get overall system health\nrouter.get('/system', async (req, res) => {\n  try {\n    const systemHealth = healthOrchestrator.getSystemHealth();\n    \n    const statusCode = systemHealth.overallStatus === 'healthy' ? 200 :\n                      systemHealth.overallStatus === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      ...systemHealth,\n      services: Object.fromEntries(systemHealth.services),\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get system health',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get specific service health\nrouter.get('/service/:serviceName', async (req, res) => {\n  try {\n    const { serviceName } = req.params;\n    const serviceHealth = healthOrchestrator.getServiceHealth(serviceName);\n    \n    if (!serviceHealth) {\n      return res.status(404).json({\n        error: 'Service not found',\n        serviceName\n      });\n    }\n    \n    const statusCode = serviceHealth.status === 'healthy' ? 200 :\n                      serviceHealth.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      ...serviceHealth,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get service health',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get health summary for dashboard\nrouter.get('/summary', async (req, res) => {\n  try {\n    const systemHealth = healthOrchestrator.getSystemHealth();\n    \n    const summary = {\n      overallStatus: systemHealth.overallStatus,\n      totalServices: systemHealth.totalServices,\n      healthyServices: systemHealth.healthyServices,\n      degradedServices: systemHealth.degradedServices,\n      unhealthyServices: systemHealth.unhealthyServices,\n      offlineServices: systemHealth.offlineServices,\n      lastCheck: systemHealth.lastFullCheck,\n      healthPercentage: Math.round((systemHealth.healthyServices / systemHealth.totalServices) * 100),\n      criticalServices: Array.from(systemHealth.services.values())\n        .filter(s => s.criticalService)\n        .map(s => ({\n          name: s.name,\n          status: s.status,\n          lastCheck: s.lastCheck,\n          responseTime: s.responseTime\n        })),\n      recentIssues: Array.from(systemHealth.services.values())\n        .filter(s => s.status !== 'healthy')\n        .map(s => ({\n          service: s.name,\n          status: s.status,\n          message: s.message,\n          lastCheck: s.lastCheck\n        }))\n        .sort((a, b) => new Date(b.lastCheck).getTime() - new Date(a.lastCheck).getTime())\n        .slice(0, 10)\n    };\n    \n    res.json(summary);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get health summary',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Start health monitoring\nrouter.post('/start', async (req, res) => {\n  try {\n    await healthOrchestrator.start();\n    res.json({\n      message: 'Health monitoring started',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to start health monitoring',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Stop health monitoring\nrouter.post('/stop', async (req, res) => {\n  try {\n    await healthOrchestrator.stop();\n    res.json({\n      message: 'Health monitoring stopped',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to stop health monitoring',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Update health monitoring configuration\nrouter.put('/config', async (req, res) => {\n  try {\n    const config = req.body;\n    healthOrchestrator.updateConfig(config);\n    \n    res.json({\n      message: 'Health monitoring configuration updated',\n      config,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update configuration',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Health events stream (for real-time updates)\nrouter.get('/events', (req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    'Connection': 'keep-alive',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Cache-Control'\n  });\n\n  const sendEvent = (data: any) => {\n    res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n  };\n\n  // Send initial system health\n  const initialHealth = healthOrchestrator.getSystemHealth();\n  sendEvent({\n    type: 'initial',\n    data: {\n      ...initialHealth,\n      services: Object.fromEntries(initialHealth.services)\n    }\n  });\n\n  // Set up event listeners\n  const onServiceStatusChanged = (data: any) => {\n    sendEvent({ type: 'serviceStatusChanged', data });\n  };\n\n  const onFullHealthCheckComplete = (data: any) => {\n    sendEvent({ \n      type: 'fullHealthCheckComplete', \n      data: {\n        ...data.systemHealth,\n        services: Object.fromEntries(data.systemHealth.services)\n      }\n    });\n  };\n\n  const onCriticalServiceDown = (data: any) => {\n    sendEvent({ type: 'criticalServiceDown', data });\n  };\n\n  healthOrchestrator.on('serviceStatusChanged', onServiceStatusChanged);\n  healthOrchestrator.on('fullHealthCheckComplete', onFullHealthCheckComplete);\n  healthOrchestrator.on('criticalServiceDown', onCriticalServiceDown);\n\n  // Handle client disconnect\n  req.on('close', () => {\n    healthOrchestrator.off('serviceStatusChanged', onServiceStatusChanged);\n    healthOrchestrator.off('fullHealthCheckComplete', onFullHealthCheckComplete);\n    healthOrchestrator.off('criticalServiceDown', onCriticalServiceDown);\n  });\n});\n\nexport { router as healthOrchestratorRoutes };"],"names":["healthOrchestratorRoutes","router","Router","get","req","res","systemHealth","healthOrchestrator","getSystemHealth","statusCode","overallStatus","status","json","services","Object","fromEntries","timestamp","Date","toISOString","error","message","Error","serviceName","params","serviceHealth","getServiceHealth","summary","totalServices","healthyServices","degradedServices","unhealthyServices","offlineServices","lastCheck","lastFullCheck","healthPercentage","Math","round","criticalServices","Array","from","values","filter","s","criticalService","map","name","responseTime","recentIssues","service","sort","a","b","getTime","slice","post","start","stop","put","config","body","updateConfig","writeHead","sendEvent","data","write","JSON","stringify","initialHealth","type","onServiceStatusChanged","onFullHealthCheckComplete","onCriticalServiceDown","on","off"],"mappings":"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"}