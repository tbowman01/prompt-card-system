{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/testing/ResourceManager.ts"],"sourcesContent":["import * as os from 'os';\nimport { EventEmitter } from 'events';\n\nexport interface ResourceRequirement {\n  cpu_percent: number;\n  memory_mb: number;\n  concurrent_tests: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface ResourceUsage {\n  cpu_percent: number;\n  memory_mb: number;\n  memory_total_mb: number;\n  active_tests: number;\n  queue_length: number;\n  load_average: number[];\n  timestamp: Date;\n}\n\nexport interface ResourceLimits {\n  max_cpu_percent: number;\n  max_memory_mb: number;\n  max_concurrent_tests: number;\n  emergency_threshold_cpu: number;\n  emergency_threshold_memory: number;\n}\n\nexport class ResourceManager extends EventEmitter {\n  private reservedResources: Map<string, ResourceRequirement> = new Map();\n  private currentUsage: ResourceUsage;\n  private limits: ResourceLimits;\n  private monitoringInterval: NodeJS.Timer;\n\n  constructor(limits?: Partial<ResourceLimits>) {\n    super();\n    \n    this.limits = {\n      max_cpu_percent: 80,\n      max_memory_mb: Math.floor(os.totalmem() / 1024 / 1024 * 0.8), // 80% of system memory\n      max_concurrent_tests: 10,\n      emergency_threshold_cpu: 90,\n      emergency_threshold_memory: Math.floor(os.totalmem() / 1024 / 1024 * 0.9), // 90% of system memory\n      ...limits\n    };\n\n    this.currentUsage = {\n      cpu_percent: 0,\n      memory_mb: 0,\n      memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n      active_tests: 0,\n      queue_length: 0,\n      load_average: os.loadavg(),\n      timestamp: new Date()\n    };\n\n    this.startMonitoring();\n  }\n\n  /**\n   * Check if resources are available for the given requirement\n   */\n  async checkResourceAvailability(requirement: ResourceRequirement): Promise<boolean> {\n    await this.updateCurrentUsage();\n    \n    // Calculate projected usage\n    const projectedCpu = this.currentUsage.cpu_percent + requirement.cpu_percent;\n    const projectedMemory = this.currentUsage.memory_mb + requirement.memory_mb;\n    const projectedTests = this.currentUsage.active_tests + requirement.concurrent_tests;\n\n    // Check against limits\n    const cpuOk = projectedCpu <= this.limits.max_cpu_percent;\n    const memoryOk = projectedMemory <= this.limits.max_memory_mb;\n    const testsOk = projectedTests <= this.limits.max_concurrent_tests;\n\n    // Priority-based overrides\n    if (requirement.priority === 'critical') {\n      // Critical tasks can use emergency thresholds\n      const emergencyCpuOk = projectedCpu <= this.limits.emergency_threshold_cpu;\n      const emergencyMemoryOk = projectedMemory <= this.limits.emergency_threshold_memory;\n      return emergencyCpuOk && emergencyMemoryOk;\n    }\n\n    return cpuOk && memoryOk && testsOk;\n  }\n\n  /**\n   * Reserve resources for a specific task\n   */\n  async reserveResources(taskId: string, requirement: ResourceRequirement): Promise<void> {\n    const isAvailable = await this.checkResourceAvailability(requirement);\n    \n    if (!isAvailable) {\n      throw new Error(`Insufficient resources for task ${taskId}`);\n    }\n\n    this.reservedResources.set(taskId, requirement);\n    this.emit('resourcesReserved', { taskId, requirement });\n  }\n\n  /**\n   * Release resources for a specific task\n   */\n  async releaseResources(taskId: string): Promise<void> {\n    const requirement = this.reservedResources.get(taskId);\n    if (requirement) {\n      this.reservedResources.delete(taskId);\n      this.emit('resourcesReleased', { taskId, requirement });\n    }\n  }\n\n  /**\n   * Get current resource usage\n   */\n  getCurrentUsage(): ResourceUsage {\n    return { ...this.currentUsage };\n  }\n\n  /**\n   * Get resource limits\n   */\n  getLimits(): ResourceLimits {\n    return { ...this.limits };\n  }\n\n  /**\n   * Set resource limits\n   */\n  setLimits(newLimits: Partial<ResourceLimits>): void {\n    this.limits = { ...this.limits, ...newLimits };\n    this.emit('limitsUpdated', this.limits);\n  }\n\n  /**\n   * Initialize the resource manager\n   */\n  async initialize(): Promise<void> {\n    await this.updateCurrentUsage();\n    console.log('ResourceManager initialized');\n  }\n\n  /**\n   * Cleanup and shutdown the resource manager\n   */\n  async cleanup(): Promise<void> {\n    this.destroy();\n    console.log('ResourceManager cleaned up');\n  }\n\n  /**\n   * Get reserved resources summary\n   */\n  getReservedResourcesSummary(): {\n    total_reserved_cpu: number;\n    total_reserved_memory: number;\n    total_reserved_tests: number;\n    active_reservations: number;\n  } {\n    let totalCpu = 0;\n    let totalMemory = 0;\n    let totalTests = 0;\n\n    for (const requirement of this.reservedResources.values()) {\n      totalCpu += requirement.cpu_percent;\n      totalMemory += requirement.memory_mb;\n      totalTests += requirement.concurrent_tests;\n    }\n\n    return {\n      total_reserved_cpu: totalCpu,\n      total_reserved_memory: totalMemory,\n      total_reserved_tests: totalTests,\n      active_reservations: this.reservedResources.size\n    };\n  }\n\n  /**\n   * Check if system is under stress\n   */\n  isSystemUnderStress(): boolean {\n    const cpuStress = this.currentUsage.cpu_percent > (this.limits.max_cpu_percent * 0.8);\n    const memoryStress = this.currentUsage.memory_mb > (this.limits.max_memory_mb * 0.8);\n    const loadStress = this.currentUsage.load_average[0] > os.cpus().length * 0.8;\n\n    return cpuStress || memoryStress || loadStress;\n  }\n\n  /**\n   * Get optimal concurrency level based on current resources\n   */\n  getOptimalConcurrency(): number {\n    const cpuBasedConcurrency = Math.max(1, Math.floor(\n      (this.limits.max_cpu_percent - this.currentUsage.cpu_percent) / 15\n    ));\n    \n    const memoryBasedConcurrency = Math.max(1, Math.floor(\n      (this.limits.max_memory_mb - this.currentUsage.memory_mb) / 100\n    ));\n\n    return Math.min(\n      cpuBasedConcurrency,\n      memoryBasedConcurrency,\n      this.limits.max_concurrent_tests\n    );\n  }\n\n  /**\n   * Update current resource usage\n   */\n  private async updateCurrentUsage(): Promise<void> {\n    return new Promise((resolve) => {\n      // Use a simple CPU usage calculation\n      const memUsage = process.memoryUsage();\n      const loadAvg = os.loadavg();\n      \n      // Estimate CPU usage from load average\n      const cpuCount = os.cpus().length;\n      const estimatedCpu = Math.min(100, (loadAvg[0] / cpuCount) * 100);\n\n      this.currentUsage = {\n        cpu_percent: estimatedCpu,\n        memory_mb: Math.floor(memUsage.rss / 1024 / 1024),\n        memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n        active_tests: this.reservedResources.size,\n        queue_length: 0, // Will be updated by queue manager\n        load_average: loadAvg,\n        timestamp: new Date()\n      };\n\n      resolve();\n    });\n  }\n\n  /**\n   * Start monitoring system resources\n   */\n  private startMonitoring(): void {\n    this.monitoringInterval = setInterval(async () => {\n      await this.updateCurrentUsage();\n      \n      // Emit events for significant changes\n      if (this.isSystemUnderStress()) {\n        this.emit('systemStress', this.currentUsage);\n      }\n\n      // Check for resource violations\n      if (this.currentUsage.cpu_percent > this.limits.emergency_threshold_cpu) {\n        this.emit('emergencyThreshold', { type: 'cpu', usage: this.currentUsage });\n      }\n\n      if (this.currentUsage.memory_mb > this.limits.emergency_threshold_memory) {\n        this.emit('emergencyThreshold', { type: 'memory', usage: this.currentUsage });\n      }\n\n      this.emit('resourcesUpdated', this.currentUsage);\n    }, 5000); // Update every 5 seconds\n  }\n\n  /**\n   * Stop monitoring and cleanup\n   */\n  destroy(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n    this.removeAllListeners();\n  }\n}"],"names":["ResourceManager","EventEmitter","checkResourceAvailability","requirement","updateCurrentUsage","projectedCpu","currentUsage","cpu_percent","projectedMemory","memory_mb","projectedTests","active_tests","concurrent_tests","cpuOk","limits","max_cpu_percent","memoryOk","max_memory_mb","testsOk","max_concurrent_tests","priority","emergencyCpuOk","emergency_threshold_cpu","emergencyMemoryOk","emergency_threshold_memory","reserveResources","taskId","isAvailable","Error","reservedResources","set","emit","releaseResources","get","delete","getCurrentUsage","getLimits","setLimits","newLimits","initialize","console","log","cleanup","destroy","getReservedResourcesSummary","totalCpu","totalMemory","totalTests","values","total_reserved_cpu","total_reserved_memory","total_reserved_tests","active_reservations","size","isSystemUnderStress","cpuStress","memoryStress","loadStress","load_average","os","cpus","length","getOptimalConcurrency","cpuBasedConcurrency","Math","max","floor","memoryBasedConcurrency","min","Promise","resolve","memUsage","process","memoryUsage","loadAvg","loadavg","cpuCount","estimatedCpu","rss","memory_total_mb","totalmem","queue_length","timestamp","Date","startMonitoring","monitoringInterval","setInterval","type","usage","clearInterval","removeAllListeners","Map"],"mappings":"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"}