{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/models/ModelHealthMonitor.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { ModelHealthStatus, ModelMetrics, ModelPerformanceConfig } from './types';\nimport { llmService } from '../llmService';\n\nexport class ModelHealthMonitor extends EventEmitter {\n  private healthStatuses: Map<string, ModelHealthStatus> = new Map();\n  private metrics: Map<string, ModelMetrics> = new Map();\n  private healthCheckIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private config: ModelPerformanceConfig;\n  private isInitialized = false;\n\n  constructor(config: ModelPerformanceConfig) {\n    super();\n    this.config = config;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('üîç Initializing Model Health Monitor...');\n      \n      // Get available models\n      const models = await llmService.getModels();\n      console.log(`üìä Found ${models.length} models to monitor`);\n      \n      // Initialize health status for each model\n      for (const model of models) {\n        await this.initializeModelHealth(model);\n      }\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Model Health Monitor initialized successfully');\n      \n      this.emit('initialized', { modelsCount: models.length });\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Model Health Monitor:', error);\n      throw error;\n    }\n  }\n\n  private async initializeModelHealth(modelName: string): Promise<void> {\n    const healthStatus: ModelHealthStatus = {\n      modelName,\n      status: 'offline',\n      lastHealthCheck: new Date(),\n      responseTime: 0,\n      errorCount: 0,\n      healthScore: 0,\n      issues: [],\n      uptime: 0\n    };\n\n    const metrics: ModelMetrics = {\n      modelName,\n      averageResponseTime: 0,\n      successRate: 0,\n      errorRate: 0,\n      tokensPerSecond: 0,\n      lastUpdated: new Date(),\n      totalRequests: 0,\n      failedRequests: 0,\n      averageTokens: 0,\n      peakMemoryUsage: 0,\n      cpuUsage: 0\n    };\n\n    this.healthStatuses.set(modelName, healthStatus);\n    this.metrics.set(modelName, metrics);\n\n    // Start health checks\n    this.startHealthChecks(modelName);\n  }\n\n  private startHealthChecks(modelName: string): void {\n    const interval = setInterval(async () => {\n      await this.performHealthCheck(modelName);\n    }, this.config.healthCheckInterval);\n\n    this.healthCheckIntervals.set(modelName, interval);\n  }\n\n  private async performHealthCheck(modelName: string): Promise<void> {\n    const startTime = Date.now();\n    const healthStatus = this.healthStatuses.get(modelName);\n    \n    if (!healthStatus) return;\n\n    try {\n      // Simple health check prompt\n      const testPrompt = 'Say \"OK\" if you are working correctly.';\n      const response = await llmService.generate(testPrompt, modelName, {\n        temperature: 0.1,\n        num_predict: 10\n      });\n\n      const responseTime = Date.now() - startTime;\n      const issues: string[] = [];\n\n      // Check response time\n      if (responseTime > this.config.maxResponseTime) {\n        issues.push(`High response time: ${responseTime}ms`);\n      }\n\n      // Check response validity\n      if (!response.response || response.response.trim().length === 0) {\n        issues.push('Empty response received');\n      }\n\n      // Calculate health score\n      let healthScore = 100;\n      if (responseTime > this.config.maxResponseTime) {\n        healthScore -= 30;\n      }\n      if (issues.length > 0) {\n        healthScore -= issues.length * 20;\n      }\n      if (healthStatus.errorCount > 5) {\n        healthScore -= 20;\n      }\n\n      // Update health status\n      const updatedStatus: ModelHealthStatus = {\n        ...healthStatus,\n        status: this.determineHealthStatus(healthScore, issues.length),\n        lastHealthCheck: new Date(),\n        responseTime,\n        healthScore: Math.max(0, healthScore),\n        issues,\n        uptime: healthStatus.uptime + this.config.healthCheckInterval\n      };\n\n      this.healthStatuses.set(modelName, updatedStatus);\n      this.updateMetrics(modelName, responseTime, true);\n\n      // Emit health check event\n      this.emit('healthCheck', {\n        modelName,\n        status: updatedStatus.status,\n        healthScore: updatedStatus.healthScore,\n        responseTime,\n        issues\n      });\n\n      // Check for alerts\n      await this.checkAlerts(modelName, updatedStatus);\n\n    } catch (error) {\n      console.error(`‚ùå Health check failed for model ${modelName}:`, error);\n      \n      const errorStatus: ModelHealthStatus = {\n        ...healthStatus,\n        status: 'unhealthy',\n        lastHealthCheck: new Date(),\n        responseTime: Date.now() - startTime,\n        errorCount: healthStatus.errorCount + 1,\n        healthScore: Math.max(0, healthStatus.healthScore - 25),\n        issues: [`Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`]\n      };\n\n      this.healthStatuses.set(modelName, errorStatus);\n      this.updateMetrics(modelName, Date.now() - startTime, false);\n\n      this.emit('healthCheckFailed', {\n        modelName,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        errorCount: errorStatus.errorCount\n      });\n    }\n  }\n\n  private determineHealthStatus(healthScore: number, issueCount: number): 'healthy' | 'degraded' | 'unhealthy' | 'offline' {\n    if (healthScore >= 80 && issueCount === 0) return 'healthy';\n    if (healthScore >= 60 && issueCount <= 2) return 'degraded';\n    if (healthScore >= 20) return 'unhealthy';\n    return 'offline';\n  }\n\n  private updateMetrics(modelName: string, responseTime: number, success: boolean): void {\n    const metrics = this.metrics.get(modelName);\n    if (!metrics) return;\n\n    const totalRequests = metrics.totalRequests + 1;\n    const failedRequests = success ? metrics.failedRequests : metrics.failedRequests + 1;\n    const successRate = ((totalRequests - failedRequests) / totalRequests) * 100;\n    const errorRate = (failedRequests / totalRequests) * 100;\n\n    // Update average response time using exponential moving average\n    const avgResponseTime = metrics.averageResponseTime === 0 \n      ? responseTime \n      : (metrics.averageResponseTime * 0.8) + (responseTime * 0.2);\n\n    const updatedMetrics: ModelMetrics = {\n      ...metrics,\n      averageResponseTime: avgResponseTime,\n      successRate,\n      errorRate,\n      lastUpdated: new Date(),\n      totalRequests,\n      failedRequests\n    };\n\n    this.metrics.set(modelName, updatedMetrics);\n  }\n\n  private async checkAlerts(modelName: string, status: ModelHealthStatus): Promise<void> {\n    const alerts: string[] = [];\n\n    if (status.responseTime > this.config.alertThresholds.responseTime) {\n      alerts.push(`High response time: ${status.responseTime}ms`);\n    }\n\n    const metrics = this.metrics.get(modelName);\n    if (metrics && metrics.errorRate > this.config.alertThresholds.errorRate) {\n      alerts.push(`High error rate: ${metrics.errorRate.toFixed(2)}%`);\n    }\n\n    if (status.healthScore < this.config.minHealthScore) {\n      alerts.push(`Low health score: ${status.healthScore}`);\n    }\n\n    if (alerts.length > 0) {\n      this.emit('alert', {\n        modelName,\n        alerts,\n        severity: status.status === 'unhealthy' ? 'critical' : 'warning',\n        timestamp: new Date()\n      });\n    }\n  }\n\n  public getModelHealth(modelName: string): ModelHealthStatus | undefined {\n    return this.healthStatuses.get(modelName);\n  }\n\n  public getModelMetrics(modelName: string): ModelMetrics | undefined {\n    return this.metrics.get(modelName);\n  }\n\n  public getAllHealthStatuses(): Map<string, ModelHealthStatus> {\n    return new Map(this.healthStatuses);\n  }\n\n  public getAllMetrics(): Map<string, ModelMetrics> {\n    return new Map(this.metrics);\n  }\n\n  public getHealthyModels(): string[] {\n    return Array.from(this.healthStatuses.entries())\n      .filter(([_, status]) => status.status === 'healthy')\n      .map(([modelName]) => modelName);\n  }\n\n  public getUnhealthyModels(): string[] {\n    return Array.from(this.healthStatuses.entries())\n      .filter(([_, status]) => status.status === 'unhealthy' || status.status === 'offline')\n      .map(([modelName]) => modelName);\n  }\n\n  public async refreshModelList(): Promise<void> {\n    try {\n      const models = await llmService.getModels();\n      const currentModels = new Set(this.healthStatuses.keys());\n      const newModels = models.filter(model => !currentModels.has(model));\n      const removedModels = Array.from(currentModels).filter(model => !models.includes(model));\n\n      // Add new models\n      for (const model of newModels) {\n        await this.initializeModelHealth(model);\n        console.log(`‚ûï Added monitoring for new model: ${model}`);\n      }\n\n      // Remove deleted models\n      for (const model of removedModels) {\n        const interval = this.healthCheckIntervals.get(model);\n        if (interval) {\n          clearInterval(interval);\n          this.healthCheckIntervals.delete(model);\n        }\n        this.healthStatuses.delete(model);\n        this.metrics.delete(model);\n        console.log(`‚ûñ Removed monitoring for deleted model: ${model}`);\n      }\n\n      if (newModels.length > 0 || removedModels.length > 0) {\n        this.emit('modelListUpdated', {\n          added: newModels,\n          removed: removedModels,\n          total: models.length\n        });\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to refresh model list:', error);\n      throw error;\n    }\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('üîÑ Shutting down Model Health Monitor...');\n    \n    // Clear all intervals\n    for (const interval of this.healthCheckIntervals.values()) {\n      clearInterval(interval);\n    }\n    \n    this.healthCheckIntervals.clear();\n    this.healthStatuses.clear();\n    this.metrics.clear();\n    this.isInitialized = false;\n    \n    console.log('‚úÖ Model Health Monitor shutdown complete');\n  }\n\n  public updateConfig(newConfig: Partial<ModelPerformanceConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('‚öôÔ∏è Model Health Monitor configuration updated');\n  }\n\n  public getStatus(): {\n    initialized: boolean;\n    modelsMonitored: number;\n    healthyModels: number;\n    unhealthyModels: number;\n    totalChecks: number;\n  } {\n    const healthyCount = this.getHealthyModels().length;\n    const unhealthyCount = this.getUnhealthyModels().length;\n    const totalChecks = Array.from(this.metrics.values())\n      .reduce((sum, metrics) => sum + metrics.totalRequests, 0);\n\n    return {\n      initialized: this.isInitialized,\n      modelsMonitored: this.healthStatuses.size,\n      healthyModels: healthyCount,\n      unhealthyModels: unhealthyCount,\n      totalChecks\n    };\n  }\n}"],"names":["ModelHealthMonitor","EventEmitter","initialize","isInitialized","console","log","models","llmService","getModels","length","model","initializeModelHealth","emit","modelsCount","error","modelName","healthStatus","status","lastHealthCheck","Date","responseTime","errorCount","healthScore","issues","uptime","metrics","averageResponseTime","successRate","errorRate","tokensPerSecond","lastUpdated","totalRequests","failedRequests","averageTokens","peakMemoryUsage","cpuUsage","healthStatuses","set","startHealthChecks","interval","setInterval","performHealthCheck","config","healthCheckInterval","healthCheckIntervals","startTime","now","get","testPrompt","response","generate","temperature","num_predict","maxResponseTime","push","trim","updatedStatus","determineHealthStatus","Math","max","updateMetrics","checkAlerts","errorStatus","Error","message","issueCount","success","avgResponseTime","updatedMetrics","alerts","alertThresholds","toFixed","minHealthScore","severity","timestamp","getModelHealth","getModelMetrics","getAllHealthStatuses","Map","getAllMetrics","getHealthyModels","Array","from","entries","filter","_","map","getUnhealthyModels","refreshModelList","currentModels","Set","keys","newModels","has","removedModels","includes","clearInterval","delete","added","removed","total","shutdown","values","clear","updateConfig","newConfig","getStatus","healthyCount","unhealthyCount","totalChecks","reduce","sum","initialized","modelsMonitored","size","healthyModels","unhealthyModels"],"mappings":"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"}