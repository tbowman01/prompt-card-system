{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/security/ComplianceChecker.ts"],"sourcesContent":["import crypto from 'crypto';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { securityMonitor } from './SecurityMonitor';\nimport { logAggregator } from './LogAggregator';\n\nexport interface ComplianceCheck {\n  id: string;\n  name: string;\n  description: string;\n  category: 'security' | 'privacy' | 'operational' | 'technical';\n  framework: 'SOC2' | 'GDPR' | 'OWASP' | 'NIST' | 'ISO27001' | 'CUSTOM';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  required: boolean;\n  automated: boolean;\n  checkFunction: () => Promise<ComplianceResult>;\n}\n\nexport interface ComplianceResult {\n  checkId: string;\n  timestamp: Date;\n  passed: boolean;\n  score: number; // 0-100\n  details: {\n    findings: string[];\n    recommendations: string[];\n    evidence: any[];\n    metrics?: any;\n  };\n  remediation?: {\n    actions: string[];\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    estimatedEffort: string;\n    automated: boolean;\n  };\n}\n\nexport interface ComplianceReport {\n  id: string;\n  timestamp: Date;\n  overallScore: number;\n  status: 'compliant' | 'non-compliant' | 'partially-compliant';\n  framework: string;\n  results: ComplianceResult[];\n  summary: {\n    totalChecks: number;\n    passed: number;\n    failed: number;\n    criticalFailures: number;\n    recommendations: string[];\n  };\n  nextAssessment?: Date;\n}\n\nexport class ComplianceChecker {\n  private checks: ComplianceCheck[] = [];\n  private reports: ComplianceReport[] = [];\n  private scanInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    enableContinuousChecking?: boolean;\n    checkIntervalHours?: number;\n    reportRetentionDays?: number;\n  } = {}) {\n    const {\n      enableContinuousChecking = true,\n      checkIntervalHours = 24,\n      reportRetentionDays = 365\n    } = options;\n\n    this.options = {\n      enableContinuousChecking,\n      checkIntervalHours,\n      reportRetentionDays\n    };\n\n    this.setupDefaultChecks();\n    \n    if (enableContinuousChecking) {\n      this.startContinuousChecking();\n    }\n  }\n\n  // Check management\n  addCheck(check: Omit<ComplianceCheck, 'id'>): ComplianceCheck {\n    const newCheck: ComplianceCheck = {\n      id: crypto.randomUUID(),\n      ...check\n    };\n\n    this.checks.push(newCheck);\n    return newCheck;\n  }\n\n  removeCheck(checkId: string): boolean {\n    const index = this.checks.findIndex(c => c.id === checkId);\n    if (index === -1) return false;\n    \n    this.checks.splice(index, 1);\n    return true;\n  }\n\n  getChecks(filters?: {\n    category?: ComplianceCheck['category'];\n    framework?: ComplianceCheck['framework'];\n    severity?: ComplianceCheck['severity'];\n    automated?: boolean;\n  }): ComplianceCheck[] {\n    let filteredChecks = [...this.checks];\n\n    if (filters) {\n      if (filters.category) {\n        filteredChecks = filteredChecks.filter(c => c.category === filters.category);\n      }\n      if (filters.framework) {\n        filteredChecks = filteredChecks.filter(c => c.framework === filters.framework);\n      }\n      if (filters.severity) {\n        filteredChecks = filteredChecks.filter(c => c.severity === filters.severity);\n      }\n      if (filters.automated !== undefined) {\n        filteredChecks = filteredChecks.filter(c => c.automated === filters.automated);\n      }\n    }\n\n    return filteredChecks;\n  }\n\n  // Compliance assessment\n  async runCheck(checkId: string): Promise<ComplianceResult> {\n    const check = this.checks.find(c => c.id === checkId);\n    if (!check) {\n      throw new Error(`Check ${checkId} not found`);\n    }\n\n    try {\n      const result = await check.checkFunction();\n      \n      logAggregator.info('compliance-checker', `Check completed: ${check.name}`, {\n        checkId: check.id,\n        passed: result.passed,\n        score: result.score,\n        framework: check.framework\n      }, ['compliance', check.framework.toLowerCase()]);\n\n      return result;\n    } catch (error) {\n      const failureResult: ComplianceResult = {\n        checkId: check.id,\n        timestamp: new Date(),\n        passed: false,\n        score: 0,\n        details: {\n          findings: [`Check execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`],\n          recommendations: ['Fix check implementation', 'Review system configuration'],\n          evidence: []\n        }\n      };\n\n      logAggregator.error('compliance-checker', `Check failed: ${check.name}`, {\n        checkId: check.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        framework: check.framework\n      }, ['compliance', 'error']);\n\n      return failureResult;\n    }\n  }\n\n  async runAllChecks(framework?: ComplianceCheck['framework']): Promise<ComplianceResult[]> {\n    const checksToRun = framework ? \n      this.checks.filter(c => c.framework === framework) : \n      this.checks;\n\n    const results = await Promise.allSettled(\n      checksToRun.map(check => this.runCheck(check.id))\n    );\n\n    return results\n      .filter((result): result is PromiseFulfilledResult<ComplianceResult> => \n        result.status === 'fulfilled'\n      )\n      .map(result => result.value);\n  }\n\n  async generateComplianceReport(framework?: ComplianceCheck['framework']): Promise<ComplianceReport> {\n    const results = await this.runAllChecks(framework);\n    \n    const totalChecks = results.length;\n    const passed = results.filter(r => r.passed).length;\n    const failed = totalChecks - passed;\n    const criticalFailures = results.filter(r => !r.passed && \n      this.checks.find(c => c.id === r.checkId)?.severity === 'critical'\n    ).length;\n\n    const overallScore = totalChecks > 0 ? \n      Math.round(results.reduce((sum, r) => sum + r.score, 0) / totalChecks) : 0;\n\n    const status: ComplianceReport['status'] = \n      criticalFailures > 0 ? 'non-compliant' :\n      failed === 0 ? 'compliant' : 'partially-compliant';\n\n    // Collect all recommendations\n    const allRecommendations = new Set<string>();\n    results.forEach(result => {\n      result.details.recommendations.forEach(rec => allRecommendations.add(rec));\n    });\n\n    const report: ComplianceReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      overallScore,\n      status,\n      framework: framework || 'ALL',\n      results,\n      summary: {\n        totalChecks,\n        passed,\n        failed,\n        criticalFailures,\n        recommendations: Array.from(allRecommendations).slice(0, 10) // Top 10\n      },\n      nextAssessment: new Date(Date.now() + this.options.checkIntervalHours! * 60 * 60 * 1000)\n    };\n\n    this.reports.push(report);\n\n    // Log compliance status\n    logAggregator.info('compliance-checker', `Compliance report generated`, {\n      reportId: report.id,\n      framework: report.framework,\n      status: report.status,\n      score: report.overallScore,\n      totalChecks,\n      failed,\n      criticalFailures\n    }, ['compliance', 'report']);\n\n    // Alert on compliance failures\n    if (report.status === 'non-compliant' || criticalFailures > 0) {\n      securityMonitor.logSecurityEvent({\n        severity: 'critical',\n        type: 'vulnerability',\n        source: 'compliance-checker',\n        message: `Compliance failure detected: ${criticalFailures} critical failures`,\n        details: {\n          reportId: report.id,\n          framework: report.framework,\n          criticalFailures,\n          overallScore\n        },\n        resolved: false\n      });\n    }\n\n    return report;\n  }\n\n  getReports(limit = 10): ComplianceReport[] {\n    return this.reports\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  getLatestReport(framework?: string): ComplianceReport | undefined {\n    return this.reports\n      .filter(r => !framework || r.framework === framework)\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n  }\n\n  // Default compliance checks\n  private setupDefaultChecks(): void {\n    // Security checks\n    this.addCheck({\n      name: 'Password Policy Enforcement',\n      description: 'Verify strong password policies are enforced',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkPasswordPolicy()\n    });\n\n    this.addCheck({\n      name: 'HTTPS Enforcement',\n      description: 'Verify all communications use HTTPS',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkHTTPSEnforcement()\n    });\n\n    this.addCheck({\n      name: 'Dependency Vulnerability Scan',\n      description: 'Check for known vulnerabilities in dependencies',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkDependencyVulnerabilities()\n    });\n\n    this.addCheck({\n      name: 'Security Headers',\n      description: 'Verify security headers are properly configured',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'medium',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkSecurityHeaders()\n    });\n\n    this.addCheck({\n      name: 'Access Control',\n      description: 'Verify proper access controls are in place',\n      category: 'security',\n      framework: 'SOC2',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkAccessControl()\n    });\n\n    this.addCheck({\n      name: 'Audit Logging',\n      description: 'Verify comprehensive audit logging is enabled',\n      category: 'operational',\n      framework: 'SOC2',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkAuditLogging()\n    });\n\n    this.addCheck({\n      name: 'Data Encryption',\n      description: 'Verify data is encrypted at rest and in transit',\n      category: 'security',\n      framework: 'GDPR',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkDataEncryption()\n    });\n\n    this.addCheck({\n      name: 'Environment Configuration',\n      description: 'Verify secure environment configuration',\n      category: 'technical',\n      framework: 'NIST',\n      severity: 'medium',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkEnvironmentConfiguration()\n    });\n  }\n\n  // Individual check implementations\n  private async checkPasswordPolicy(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if password requirements are configured\n    const hasMinLength = process.env.MIN_PASSWORD_LENGTH ? \n      parseInt(process.env.MIN_PASSWORD_LENGTH) >= 8 : false;\n    \n    if (!hasMinLength) {\n      findings.push('Minimum password length not enforced (should be >= 8)');\n      recommendations.push('Set MIN_PASSWORD_LENGTH environment variable to 8 or higher');\n      score -= 30;\n    } else {\n      evidence.push({ type: 'config', value: `MIN_PASSWORD_LENGTH=${process.env.MIN_PASSWORD_LENGTH}` });\n    }\n\n    // Check for complexity requirements\n    const hasComplexity = process.env.REQUIRE_PASSWORD_COMPLEXITY === 'true';\n    if (!hasComplexity) {\n      findings.push('Password complexity requirements not enforced');\n      recommendations.push('Enable password complexity requirements');\n      score -= 20;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkHTTPSEnforcement(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if HTTPS is enforced\n    const httpsEnforced = process.env.FORCE_HTTPS === 'true' || process.env.NODE_ENV === 'production';\n    \n    if (!httpsEnforced && process.env.NODE_ENV === 'production') {\n      findings.push('HTTPS not enforced in production environment');\n      recommendations.push('Set FORCE_HTTPS=true for production');\n      score = 0; // Critical failure\n    } else {\n      evidence.push({ type: 'config', value: `FORCE_HTTPS=${process.env.FORCE_HTTPS}` });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkDependencyVulnerabilities(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    try {\n      // Get latest vulnerability report from security monitor\n      const securityMetrics = securityMonitor.getSecurityMetrics();\n      const criticalVulns = securityMetrics.criticalVulnerabilities;\n      \n      if (criticalVulns > 0) {\n        findings.push(`${criticalVulns} critical vulnerabilities found in dependencies`);\n        recommendations.push('Update dependencies with critical vulnerabilities immediately');\n        score = Math.max(0, score - (criticalVulns * 20));\n      }\n\n      evidence.push({\n        type: 'scan-result',\n        value: securityMetrics,\n        lastScan: securityMetrics.lastScanTimestamp\n      });\n\n    } catch (error) {\n      findings.push('Unable to perform vulnerability scan');\n      recommendations.push('Ensure dependency scanning is properly configured');\n      score = 50;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkSecurityHeaders(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check for required security headers\n    const requiredHeaders = [\n      'X-Content-Type-Options',\n      'X-Frame-Options',\n      'X-XSS-Protection',\n      'Strict-Transport-Security',\n      'Content-Security-Policy'\n    ];\n\n    // This would typically check actual HTTP responses\n    // For now, check if helmet is configured (if available)\n    const helmetConfigured = process.env.ENABLE_SECURITY_HEADERS === 'true';\n    \n    if (!helmetConfigured) {\n      findings.push('Security headers not properly configured');\n      recommendations.push('Enable security headers using helmet or similar middleware');\n      score -= 40;\n    } else {\n      evidence.push({ type: 'config', value: 'Security headers enabled' });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkAccessControl(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if authentication is properly configured\n    const authEnabled = process.env.ENABLE_AUTH === 'true';\n    const jwtSecret = process.env.JWT_SECRET;\n    \n    if (!authEnabled) {\n      findings.push('Authentication not enabled');\n      recommendations.push('Enable authentication for all protected endpoints');\n      score -= 50;\n    }\n\n    if (!jwtSecret || jwtSecret.length < 32) {\n      findings.push('JWT secret not configured or too weak');\n      recommendations.push('Set a strong JWT_SECRET (at least 32 characters)');\n      score -= 30;\n    }\n\n    if (authEnabled) {\n      evidence.push({ type: 'config', value: 'Authentication enabled' });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkAuditLogging(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if audit logging is enabled\n    const auditEnabled = process.env.ENABLE_AUDIT_LOGGING === 'true';\n    const logLevel = process.env.LOG_LEVEL;\n    \n    if (!auditEnabled) {\n      findings.push('Audit logging not enabled');\n      recommendations.push('Enable comprehensive audit logging');\n      score -= 40;\n    }\n\n    if (logLevel && !['debug', 'info'].includes(logLevel.toLowerCase())) {\n      findings.push('Log level may not capture sufficient audit information');\n      recommendations.push('Set log level to info or debug for better audit trail');\n      score -= 20;\n    }\n\n    // Check if log aggregator is working\n    const logStats = logAggregator.getLogStatistics();\n    if (logStats.totalLogs === 0) {\n      findings.push('No logs detected - logging may not be working');\n      recommendations.push('Verify log aggregation is properly configured');\n      score -= 30;\n    } else {\n      evidence.push({ type: 'log-stats', value: logStats });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkDataEncryption(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check database encryption\n    const dbEncrypted = process.env.DATABASE_ENCRYPTED === 'true';\n    if (!dbEncrypted) {\n      findings.push('Database encryption not enabled');\n      recommendations.push('Enable database encryption at rest');\n      score -= 40;\n    }\n\n    // Check if TLS is configured for external communications\n    const tlsEnabled = process.env.ENABLE_TLS === 'true' || process.env.NODE_ENV === 'production';\n    if (!tlsEnabled && process.env.NODE_ENV === 'production') {\n      findings.push('TLS not enabled for production');\n      recommendations.push('Enable TLS for all external communications');\n      score -= 40;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkEnvironmentConfiguration(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if debug mode is disabled in production\n    if (process.env.NODE_ENV === 'production' && process.env.DEBUG === 'true') {\n      findings.push('Debug mode enabled in production');\n      recommendations.push('Disable debug mode in production environment');\n      score -= 30;\n    }\n\n    // Check if sensitive information is not exposed\n    const exposedVars = Object.keys(process.env).filter(key => \n      key.toLowerCase().includes('secret') || \n      key.toLowerCase().includes('password') ||\n      key.toLowerCase().includes('key')\n    );\n\n    if (exposedVars.length > 0) {\n      evidence.push({ type: 'env-vars', count: exposedVars.length });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  // Continuous checking\n  private startContinuousChecking(): void {\n    this.scanInterval = setInterval(async () => {\n      try {\n        await this.generateComplianceReport();\n      } catch (error) {\n        logAggregator.error('compliance-checker', 'Continuous compliance check failed', {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }, ['compliance', 'error']);\n      }\n    }, this.options.checkIntervalHours! * 60 * 60 * 1000);\n  }\n\n  // Analytics\n  getComplianceMetrics(): {\n    currentScore: number;\n    status: string;\n    trendsLast30Days: { date: string; score: number }[];\n    frameworkScores: { framework: string; score: number }[];\n    criticalIssues: number;\n  } {\n    const latestReport = this.getLatestReport();\n    const reports30Days = this.reports.filter(r => \n      r.timestamp >= new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n    );\n\n    const trends = reports30Days.map(r => ({\n      date: r.timestamp.toISOString().split('T')[0],\n      score: r.overallScore\n    }));\n\n    const frameworkScores = [...new Set(this.reports.map(r => r.framework))]\n      .map(framework => {\n        const latestFrameworkReport = this.getLatestReport(framework);\n        return {\n          framework,\n          score: latestFrameworkReport?.overallScore || 0\n        };\n      });\n\n    return {\n      currentScore: latestReport?.overallScore || 0,\n      status: latestReport?.status || 'unknown',\n      trendsLast30Days: trends,\n      frameworkScores,\n      criticalIssues: latestReport?.summary.criticalFailures || 0\n    };\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.scanInterval) {\n      clearInterval(this.scanInterval);\n    }\n  }\n}\n\nexport const complianceChecker = new ComplianceChecker({\n  enableContinuousChecking: process.env.NODE_ENV === 'production',\n  checkIntervalHours: 24,\n  reportRetentionDays: 365\n});"],"names":["ComplianceChecker","complianceChecker","addCheck","check","newCheck","id","crypto","randomUUID","checks","push","removeCheck","checkId","index","findIndex","c","splice","getChecks","filters","filteredChecks","category","filter","framework","severity","automated","undefined","runCheck","find","Error","result","checkFunction","logAggregator","info","name","passed","score","toLowerCase","error","failureResult","timestamp","Date","details","findings","message","recommendations","evidence","runAllChecks","checksToRun","results","Promise","allSettled","map","status","value","generateComplianceReport","totalChecks","length","r","failed","criticalFailures","overallScore","Math","round","reduce","sum","allRecommendations","Set","forEach","rec","add","report","summary","Array","from","slice","nextAssessment","now","options","checkIntervalHours","reports","reportId","securityMonitor","logSecurityEvent","type","source","resolved","getReports","limit","sort","a","b","getTime","getLatestReport","setupDefaultChecks","description","required","checkPasswordPolicy","checkHTTPSEnforcement","checkDependencyVulnerabilities","checkSecurityHeaders","checkAccessControl","checkAuditLogging","checkDataEncryption","checkEnvironmentConfiguration","hasMinLength","process","env","MIN_PASSWORD_LENGTH","parseInt","hasComplexity","REQUIRE_PASSWORD_COMPLEXITY","max","httpsEnforced","FORCE_HTTPS","NODE_ENV","securityMetrics","getSecurityMetrics","criticalVulns","criticalVulnerabilities","lastScan","lastScanTimestamp","requiredHeaders","helmetConfigured","ENABLE_SECURITY_HEADERS","authEnabled","ENABLE_AUTH","jwtSecret","JWT_SECRET","auditEnabled","ENABLE_AUDIT_LOGGING","logLevel","LOG_LEVEL","includes","logStats","getLogStatistics","totalLogs","dbEncrypted","DATABASE_ENCRYPTED","tlsEnabled","ENABLE_TLS","DEBUG","exposedVars","Object","keys","key","count","startContinuousChecking","scanInterval","setInterval","getComplianceMetrics","latestReport","reports30Days","trends","date","toISOString","split","frameworkScores","latestFrameworkReport","currentScore","trendsLast30Days","criticalIssues","destroy","clearInterval","enableContinuousChecking","reportRetentionDays"],"mappings":"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"}