{"version":3,"names":["cov_i3ndmct2y","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","exec","promisify","fs","path","crypto","EventEmitter","execAsync","SecurityMonitor","logSecurityEvent","event","securityEvent","id","randomUUID","timestamp","Date","events","push","emit","severity","length","options","maxEvents","slice","getSecurityEvents","filters","filteredEvents","filter","e","type","source","includes","since","limit","sort","a","getTime","scanDependencies","report","scanType","vulnerabilities","critical","high","medium","low","total","details","recommendations","stdout","cwd","process","auditResult","JSON","parse","vulns","keys","forEach","packageName","vuln","package","title","range","fixAvailable","error","message","Error","fallback","vulnerabilityReports","resolved","scanCode","srcPath","join","files","getSourceFiles","file","content","readFile","issues","analyzeCodeSecurity","issue","scanInfrastructure","dockerfilePaths","dockerFile","analyzeDockerSecurity","envIssues","analyzeEnvironmentSecurity","performComprehensiveScan","results","Promise","allSettled","reports","result","index","status","reason","getSecurityMetrics","now","last24h","eventsLast24h","criticalEvents","latestReport","criticalVulnerabilities","securityScore","Math","max","threatLevel","complianceChecks","name","passed","required","passedChecks","c","complianceScore","round","lastScanTimestamp","complianceStatus","score","checks","dir","entries","readdir","withFileTypes","entry","fullPath","isDirectory","startsWith","isFile","endsWith","filename","patterns","regex","pattern","matches","match","lineNumber","substring","indexOf","split","line","code","trim","envVars","env","toLowerCase","variable","setupEventCleanup","eventCleanupInterval","setInterval","cutoffDate","setDate","getDate","eventRetentionDays","startContinuousScanning","scanInterval","scanIntervalMinutes","destroy","clearInterval","removeAllListeners","constructor","enableContinuousScanning","securityMonitor","NODE_ENV"],"sources":["SecurityMonitor.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\nconst execAsync = promisify(exec);\nexport class SecurityMonitor extends EventEmitter {\n    // Security Event Management\n    logSecurityEvent(event) {\n        const securityEvent = {\n            id: crypto.randomUUID(),\n            timestamp: new Date(),\n            ...event\n        };\n        this.events.push(securityEvent);\n        this.emit('securityEvent', securityEvent);\n        // Trigger immediate alert for critical events\n        if (event.severity === 'critical') {\n            this.emit('criticalAlert', securityEvent);\n        }\n        // Maintain event limit\n        if (this.events.length > this.options.maxEvents) {\n            this.events = this.events.slice(-this.options.maxEvents);\n        }\n    }\n    getSecurityEvents(filters) {\n        let filteredEvents = [\n            ...this.events\n        ];\n        if (filters) {\n            if (filters.severity) {\n                filteredEvents = filteredEvents.filter((e)=>e.severity === filters.severity);\n            }\n            if (filters.type) {\n                filteredEvents = filteredEvents.filter((e)=>e.type === filters.type);\n            }\n            if (filters.source) {\n                filteredEvents = filteredEvents.filter((e)=>e.source.includes(filters.source));\n            }\n            if (filters.since) {\n                filteredEvents = filteredEvents.filter((e)=>e.timestamp >= filters.since);\n            }\n            if (filters.limit) {\n                filteredEvents = filteredEvents.slice(-filters.limit);\n            }\n        }\n        return filteredEvents.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());\n    }\n    // Vulnerability Scanning\n    async scanDependencies() {\n        try {\n            const report = {\n                id: crypto.randomUUID(),\n                timestamp: new Date(),\n                scanType: 'dependencies',\n                vulnerabilities: {\n                    critical: 0,\n                    high: 0,\n                    medium: 0,\n                    low: 0,\n                    total: 0\n                },\n                details: [],\n                recommendations: []\n            };\n            // Use npm audit for dependency scanning\n            try {\n                const { stdout } = await execAsync('npm audit --json', {\n                    cwd: process.cwd()\n                });\n                const auditResult = JSON.parse(stdout);\n                if (auditResult.vulnerabilities) {\n                    const vulns = auditResult.vulnerabilities;\n                    Object.keys(vulns).forEach((packageName)=>{\n                        const vuln = vulns[packageName];\n                        const severity = vuln.severity;\n                        report.vulnerabilities[severity]++;\n                        report.vulnerabilities.total++;\n                        report.details.push({\n                            package: packageName,\n                            severity: severity,\n                            title: vuln.title || 'Unknown vulnerability',\n                            range: vuln.range,\n                            fixAvailable: vuln.fixAvailable\n                        });\n                    });\n                }\n                // Generate recommendations\n                if (report.vulnerabilities.critical > 0) {\n                    report.recommendations.push('Immediately update packages with critical vulnerabilities');\n                }\n                if (report.vulnerabilities.high > 0) {\n                    report.recommendations.push('Update packages with high severity vulnerabilities within 24 hours');\n                }\n                if (report.vulnerabilities.total > 0) {\n                    report.recommendations.push('Run \"npm audit fix\" to automatically fix vulnerabilities');\n                }\n            } catch (error) {\n                // If npm audit fails, try alternative approaches\n                report.details.push({\n                    error: 'Failed to run npm audit',\n                    message: error instanceof Error ? error.message : 'Unknown error',\n                    fallback: 'Consider using yarn audit or manual dependency review'\n                });\n            }\n            this.vulnerabilityReports.push(report);\n            this.logSecurityEvent({\n                severity: report.vulnerabilities.critical > 0 ? 'critical' : report.vulnerabilities.high > 0 ? 'high' : report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n                type: 'vulnerability',\n                source: 'dependency-scanner',\n                message: `Dependency scan completed: ${report.vulnerabilities.total} vulnerabilities found`,\n                details: report,\n                resolved: false\n            });\n            return report;\n        } catch (error) {\n            throw new Error(`Dependency scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async scanCode() {\n        const report = {\n            id: crypto.randomUUID(),\n            timestamp: new Date(),\n            scanType: 'code',\n            vulnerabilities: {\n                critical: 0,\n                high: 0,\n                medium: 0,\n                low: 0,\n                total: 0\n            },\n            details: [],\n            recommendations: []\n        };\n        try {\n            // Basic static code analysis patterns\n            const srcPath = path.join(process.cwd(), 'src');\n            const files = await this.getSourceFiles(srcPath);\n            for (const file of files){\n                const content = await fs.readFile(file, 'utf-8');\n                const issues = this.analyzeCodeSecurity(content, file);\n                issues.forEach((issue)=>{\n                    report.vulnerabilities[issue.severity]++;\n                    report.vulnerabilities.total++;\n                    report.details.push(issue);\n                });\n            }\n            // Generate recommendations\n            if (report.vulnerabilities.total > 0) {\n                report.recommendations.push('Review and fix identified security issues in source code');\n                report.recommendations.push('Consider implementing automated security linting');\n                report.recommendations.push('Perform regular security code reviews');\n            }\n            this.vulnerabilityReports.push(report);\n            this.logSecurityEvent({\n                severity: report.vulnerabilities.critical > 0 ? 'critical' : report.vulnerabilities.high > 0 ? 'high' : report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n                type: 'vulnerability',\n                source: 'code-scanner',\n                message: `Code scan completed: ${report.vulnerabilities.total} issues found`,\n                details: report,\n                resolved: false\n            });\n            return report;\n        } catch (error) {\n            throw new Error(`Code scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async scanInfrastructure() {\n        const report = {\n            id: crypto.randomUUID(),\n            timestamp: new Date(),\n            scanType: 'infrastructure',\n            vulnerabilities: {\n                critical: 0,\n                high: 0,\n                medium: 0,\n                low: 0,\n                total: 0\n            },\n            details: [],\n            recommendations: []\n        };\n        try {\n            // Check Docker configuration if present\n            const dockerfilePaths = [\n                'Dockerfile',\n                'Dockerfile.dev',\n                'docker-compose.yml',\n                'docker-compose.dev.yml'\n            ];\n            for (const dockerFile of dockerfilePaths){\n                try {\n                    const content = await fs.readFile(dockerFile, 'utf-8');\n                    const issues = this.analyzeDockerSecurity(content, dockerFile);\n                    issues.forEach((issue)=>{\n                        report.vulnerabilities[issue.severity]++;\n                        report.vulnerabilities.total++;\n                        report.details.push(issue);\n                    });\n                } catch  {\n                // File doesn't exist, skip\n                }\n            }\n            // Check environment configuration\n            const envIssues = await this.analyzeEnvironmentSecurity();\n            envIssues.forEach((issue)=>{\n                report.vulnerabilities[issue.severity]++;\n                report.vulnerabilities.total++;\n                report.details.push(issue);\n            });\n            // Generate recommendations\n            if (report.vulnerabilities.total > 0) {\n                report.recommendations.push('Review and harden infrastructure configuration');\n                report.recommendations.push('Implement security best practices for containerization');\n                report.recommendations.push('Regular infrastructure security audits');\n            }\n            this.vulnerabilityReports.push(report);\n            this.logSecurityEvent({\n                severity: report.vulnerabilities.critical > 0 ? 'critical' : report.vulnerabilities.high > 0 ? 'high' : report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n                type: 'vulnerability',\n                source: 'infrastructure-scanner',\n                message: `Infrastructure scan completed: ${report.vulnerabilities.total} issues found`,\n                details: report,\n                resolved: false\n            });\n            return report;\n        } catch (error) {\n            throw new Error(`Infrastructure scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // Comprehensive security scan\n    async performComprehensiveScan() {\n        const results = await Promise.allSettled([\n            this.scanDependencies(),\n            this.scanCode(),\n            this.scanInfrastructure()\n        ]);\n        const reports = [];\n        results.forEach((result, index)=>{\n            if (result.status === 'fulfilled') {\n                reports.push(result.value);\n            } else {\n                this.logSecurityEvent({\n                    severity: 'high',\n                    type: 'vulnerability',\n                    source: 'comprehensive-scanner',\n                    message: `Scan failed: ${result.reason}`,\n                    details: {\n                        error: result.reason\n                    },\n                    resolved: false\n                });\n            }\n        });\n        return reports;\n    }\n    // Security Metrics\n    getSecurityMetrics() {\n        const now = new Date();\n        const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        const eventsLast24h = this.events.filter((e)=>e.timestamp >= last24h).length;\n        const criticalEvents = this.events.filter((e)=>e.severity === 'critical' && !e.resolved).length;\n        const latestReport = this.vulnerabilityReports.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime())[0];\n        const criticalVulnerabilities = latestReport?.vulnerabilities.critical || 0;\n        // Calculate security score (0-100)\n        let securityScore = 100;\n        securityScore -= criticalVulnerabilities * 20;\n        securityScore -= (latestReport?.vulnerabilities.high || 0) * 10;\n        securityScore -= (latestReport?.vulnerabilities.medium || 0) * 5;\n        securityScore -= criticalEvents * 15;\n        securityScore = Math.max(0, securityScore);\n        const threatLevel = criticalVulnerabilities > 0 || criticalEvents > 0 ? 'critical' : (latestReport?.vulnerabilities.high || 0) > 0 ? 'high' : (latestReport?.vulnerabilities.medium || 0) > 0 ? 'medium' : 'low';\n        // Compliance checks\n        const complianceChecks = [\n            {\n                name: 'Regular vulnerability scanning',\n                passed: this.vulnerabilityReports.length > 0,\n                required: true\n            },\n            {\n                name: 'Security event logging',\n                passed: this.events.length > 0,\n                required: true\n            },\n            {\n                name: 'No critical vulnerabilities',\n                passed: criticalVulnerabilities === 0,\n                required: true\n            },\n            {\n                name: 'Environment security',\n                passed: true,\n                required: true\n            },\n            {\n                name: 'Dependency security',\n                passed: (latestReport?.vulnerabilities.critical || 0) === 0,\n                required: true\n            }\n        ];\n        const passedChecks = complianceChecks.filter((c)=>c.passed).length;\n        const complianceScore = Math.round(passedChecks / complianceChecks.length * 100);\n        return {\n            eventsLast24h,\n            criticalVulnerabilities,\n            securityScore,\n            lastScanTimestamp: latestReport?.timestamp,\n            threatLevel,\n            complianceStatus: {\n                score: complianceScore,\n                checks: complianceChecks\n            }\n        };\n    }\n    // Helper methods\n    async getSourceFiles(dir) {\n        const files = [];\n        try {\n            const entries = await fs.readdir(dir, {\n                withFileTypes: true\n            });\n            for (const entry of entries){\n                const fullPath = path.join(dir, entry.name);\n                if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n                    files.push(...await this.getSourceFiles(fullPath));\n                } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.js'))) {\n                    files.push(fullPath);\n                }\n            }\n        } catch  {\n        // Directory doesn't exist or can't be read\n        }\n        return files;\n    }\n    analyzeCodeSecurity(content, filename) {\n        const issues = [];\n        // Security patterns to check\n        const patterns = [\n            {\n                regex: /eval\\s*\\(/g,\n                severity: 'critical',\n                message: 'Use of eval() function detected - potential code injection vulnerability',\n                type: 'code-injection'\n            },\n            {\n                regex: /document\\.write\\s*\\(/g,\n                severity: 'high',\n                message: 'Use of document.write() detected - potential XSS vulnerability',\n                type: 'xss'\n            },\n            {\n                regex: /innerHTML\\s*=/g,\n                severity: 'medium',\n                message: 'Use of innerHTML detected - potential XSS vulnerability if user input',\n                type: 'xss'\n            },\n            {\n                regex: /password\\s*=\\s*[\"'][^\"']+[\"']/gi,\n                severity: 'critical',\n                message: 'Hardcoded password detected in source code',\n                type: 'secrets'\n            },\n            {\n                regex: /api[_-]?key\\s*=\\s*[\"'][^\"']+[\"']/gi,\n                severity: 'critical',\n                message: 'Hardcoded API key detected in source code',\n                type: 'secrets'\n            },\n            {\n                regex: /\\.(exec|system)\\s*\\(/g,\n                severity: 'high',\n                message: 'Command execution detected - ensure input validation',\n                type: 'command-injection'\n            }\n        ];\n        patterns.forEach((pattern)=>{\n            const matches = content.match(pattern.regex);\n            if (matches) {\n                matches.forEach((match, index)=>{\n                    const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n                    issues.push({\n                        file: filename,\n                        line: lineNumber,\n                        severity: pattern.severity,\n                        type: pattern.type,\n                        message: pattern.message,\n                        code: match.trim()\n                    });\n                });\n            }\n        });\n        return issues;\n    }\n    analyzeDockerSecurity(content, filename) {\n        const issues = [];\n        // Docker security patterns\n        const patterns = [\n            {\n                regex: /USER\\s+root/gi,\n                severity: 'high',\n                message: 'Running as root user in Docker container',\n                type: 'privilege-escalation'\n            },\n            {\n                regex: /COPY\\s+.*\\s+\\//gi,\n                severity: 'medium',\n                message: 'Copying files to root directory - consider specific paths',\n                type: 'file-permissions'\n            },\n            {\n                regex: /--privileged/gi,\n                severity: 'critical',\n                message: 'Privileged mode detected - security risk',\n                type: 'privilege-escalation'\n            }\n        ];\n        patterns.forEach((pattern)=>{\n            const matches = content.match(pattern.regex);\n            if (matches) {\n                matches.forEach((match)=>{\n                    const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n                    issues.push({\n                        file: filename,\n                        line: lineNumber,\n                        severity: pattern.severity,\n                        type: pattern.type,\n                        message: pattern.message,\n                        code: match.trim()\n                    });\n                });\n            }\n        });\n        return issues;\n    }\n    async analyzeEnvironmentSecurity() {\n        const issues = [];\n        // Check for environment variable security\n        const envVars = process.env;\n        Object.keys(envVars).forEach((key)=>{\n            if (key.toLowerCase().includes('secret') || key.toLowerCase().includes('password') || key.toLowerCase().includes('key')) {\n                // Don't log actual values, just flag potential issues\n                if (envVars[key] && envVars[key].length < 8) {\n                    issues.push({\n                        type: 'weak-credentials',\n                        severity: 'medium',\n                        message: `Environment variable '${key}' appears to have weak value`,\n                        variable: key\n                    });\n                }\n            }\n        });\n        return issues;\n    }\n    setupEventCleanup() {\n        this.eventCleanupInterval = setInterval(()=>{\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - this.options.eventRetentionDays);\n            this.events = this.events.filter((event)=>event.timestamp >= cutoffDate);\n            this.vulnerabilityReports = this.vulnerabilityReports.filter((report)=>report.timestamp >= cutoffDate);\n        }, 24 * 60 * 60 * 1000); // Daily cleanup\n    }\n    startContinuousScanning() {\n        this.scanInterval = setInterval(async ()=>{\n            try {\n                await this.performComprehensiveScan();\n            } catch (error) {\n                this.logSecurityEvent({\n                    severity: 'medium',\n                    type: 'vulnerability',\n                    source: 'continuous-scanner',\n                    message: `Continuous scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                    details: {\n                        error\n                    },\n                    resolved: false\n                });\n            }\n        }, this.options.scanIntervalMinutes * 60 * 1000);\n    }\n    // Cleanup resources\n    destroy() {\n        if (this.scanInterval) {\n            clearInterval(this.scanInterval);\n        }\n        if (this.eventCleanupInterval) {\n            clearInterval(this.eventCleanupInterval);\n        }\n        this.removeAllListeners();\n    }\n    constructor(options = {}){\n        super(), _define_property(this, \"options\", void 0), _define_property(this, \"events\", void 0), _define_property(this, \"vulnerabilityReports\", void 0), _define_property(this, \"scanInterval\", void 0), _define_property(this, \"eventCleanupInterval\", void 0), this.options = options, this.events = [], this.vulnerabilityReports = [];\n        const { maxEvents = 10000, eventRetentionDays = 30, scanIntervalMinutes = 60, enableContinuousScanning = true } = options;\n        this.options = {\n            maxEvents,\n            eventRetentionDays,\n            scanIntervalMinutes,\n            enableContinuousScanning\n        };\n        this.setupEventCleanup();\n        if (enableContinuousScanning) {\n            this.startContinuousScanning();\n        }\n    }\n}\nexport const securityMonitor = new SecurityMonitor({\n    maxEvents: 10000,\n    eventRetentionDays: 30,\n    scanIntervalMinutes: 60,\n    enableContinuousScanning: process.env.NODE_ENV === 'production'\n});\n"],"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","ignoreList":[]}