{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/unit/mock-ollama.test.ts"],"sourcesContent":["import { MockOllamaService, createMockOllamaService } from '../mocks/MockOllamaService';\n\ndescribe('MockOllamaService', () => {\n  let mockService: MockOllamaService;\n\n  beforeEach(() => {\n    mockService = new MockOllamaService();\n  });\n\n  describe('Service Initialization', () => {\n    it('should initialize with default settings', () => {\n      const stats = mockService.getStats();\n      expect(stats.online).toBe(true);\n      expect(stats.models).toContain('llama3');\n      expect(stats.failureRate).toBe(0);\n    });\n\n    it('should initialize with custom settings', () => {\n      const customService = new MockOllamaService({\n        isOnline: false,\n        models: ['custom-model'],\n        responseDelay: 500,\n        failureRate: 0.2\n      });\n      \n      const stats = customService.getStats();\n      expect(stats.online).toBe(false);\n      expect(stats.models).toEqual(['custom-model']);\n      expect(stats.responseDelay).toBe(500);\n      expect(stats.failureRate).toBe(0.2);\n    });\n  });\n\n  describe('Model Management', () => {\n    it('should list available models', async () => {\n      const result = await mockService.listModels();\n      expect(result.models).toBeInstanceOf(Array);\n      expect(result.models.length).toBeGreaterThan(0);\n      expect(result.models[0]).toHaveProperty('name');\n      expect(result.models[0]).toHaveProperty('digest');\n      expect(result.models[0]).toHaveProperty('size');\n    });\n\n    it('should check if model exists', async () => {\n      const exists = await mockService.checkModelExists('llama3');\n      expect(exists).toBe(true);\n      \n      const notExists = await mockService.checkModelExists('nonexistent');\n      expect(notExists).toBe(false);\n    });\n\n    it('should get model information', async () => {\n      const info = await mockService.getModelInfo('llama3');\n      expect(info).toHaveProperty('license');\n      expect(info).toHaveProperty('modelfile');\n      expect(info).toHaveProperty('parameters');\n      expect(info).toHaveProperty('details');\n    });\n\n    it('should pull new models', async () => {\n      await mockService.pullModel('new-model');\n      const exists = await mockService.checkModelExists('new-model');\n      expect(exists).toBe(true);\n    });\n\n    it('should delete models', async () => {\n      await mockService.pullModel('temp-model');\n      await mockService.deleteModel('temp-model');\n      const exists = await mockService.checkModelExists('temp-model');\n      expect(exists).toBe(false);\n    });\n  });\n\n  describe('Text Generation', () => {\n    it('should generate responses', async () => {\n      const response = await mockService.generate({\n        model: 'llama3',\n        prompt: 'Hello, how are you?'\n      });\n      \n      expect(response).toHaveProperty('model', 'llama3');\n      expect(response).toHaveProperty('response');\n      expect(response).toHaveProperty('done', true);\n      expect(response.response).toBeTruthy();\n    });\n\n    it('should handle different prompt patterns', async () => {\n      const codeResponse = await mockService.generate({\n        model: 'llama3',\n        prompt: 'Write a function that calculates factorial'\n      });\n      \n      expect(codeResponse.response).toMatch(/function|code/i);\n    });\n\n    it('should include performance metrics', async () => {\n      const response = await mockService.generate({\n        model: 'llama3',\n        prompt: 'Test prompt'\n      });\n      \n      expect(response).toHaveProperty('total_duration');\n      expect(response).toHaveProperty('prompt_eval_count');\n      expect(response).toHaveProperty('eval_count');\n    });\n  });\n\n  describe('Chat Interface', () => {\n    it('should handle chat messages', async () => {\n      const messages = [\n        { role: 'user', content: 'Hello' }\n      ];\n      \n      const responses = [];\n      for await (const chunk of mockService.chat({ model: 'llama3', messages })) {\n        responses.push(chunk);\n      }\n      \n      expect(responses.length).toBeGreaterThan(0);\n      const lastResponse = responses[responses.length - 1];\n      expect(lastResponse.done).toBe(true);\n    });\n\n    it('should stream responses progressively', async () => {\n      const messages = [\n        { role: 'user', content: 'Tell me a story about artificial intelligence' }\n      ];\n      \n      const responses = [];\n      for await (const chunk of mockService.chat({ model: 'llama3', messages })) {\n        responses.push(chunk);\n        if (responses.length > 5) break; // Don't test entire stream\n      }\n      \n      expect(responses.length).toBeGreaterThan(1);\n      responses.forEach(response => {\n        expect(response).toHaveProperty('model', 'llama3');\n        expect(response).toHaveProperty('response');\n      });\n    });\n  });\n\n  describe('Error Simulation', () => {\n    it('should simulate offline state', async () => {\n      mockService.setOnlineStatus(false);\n      \n      await expect(mockService.listModels()).rejects.toThrow('offline');\n      await expect(mockService.generate({\n        model: 'llama3',\n        prompt: 'test'\n      })).rejects.toThrow('offline');\n    });\n\n    it('should simulate failures based on failure rate', async () => {\n      mockService.setFailureRate(1); // 100% failure rate\n      \n      await expect(mockService.generate({\n        model: 'llama3',\n        prompt: 'test'\n      })).rejects.toThrow('simulated failure');\n    });\n\n    it('should handle invalid models', async () => {\n      await expect(mockService.generate({\n        model: 'nonexistent-model',\n        prompt: 'test'\n      })).rejects.toThrow('not found');\n    });\n  });\n\n  describe('Health Monitoring', () => {\n    it('should provide health status', async () => {\n      const health = await mockService.healthCheck();\n      expect(health).toHaveProperty('status');\n      expect(health).toHaveProperty('online');\n      expect(health).toHaveProperty('models');\n    });\n\n    it('should reflect offline status in health', async () => {\n      mockService.setOnlineStatus(false);\n      const health = await mockService.healthCheck();\n      expect(health.status).toBe('offline');\n      expect(health.online).toBe(false);\n    });\n  });\n\n  describe('Factory Functions', () => {\n    it('should create healthy service', () => {\n      const service = createMockOllamaService('healthy');\n      const stats = service.getStats();\n      expect(stats.online).toBe(true);\n      expect(stats.failureRate).toBe(0);\n    });\n\n    it('should create offline service', () => {\n      const service = createMockOllamaService('offline');\n      const stats = service.getStats();\n      expect(stats.online).toBe(false);\n    });\n\n    it('should create slow service', () => {\n      const service = createMockOllamaService('slow');\n      const stats = service.getStats();\n      expect(stats.responseDelay).toBeGreaterThan(1000);\n    });\n\n    it('should create unreliable service', () => {\n      const service = createMockOllamaService('unreliable');\n      const stats = service.getStats();\n      expect(stats.failureRate).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Performance Testing', () => {\n    it('should handle concurrent requests', async () => {\n      const promises = Array.from({ length: 5 }, () =>\n        mockService.generate({\n          model: 'llama3',\n          prompt: 'Concurrent test'\n        })\n      );\n      \n      const responses = await Promise.all(promises);\n      expect(responses).toHaveLength(5);\n      responses.forEach(response => {\n        expect(response).toHaveProperty('response');\n        expect(response.done).toBe(true);\n      });\n    });\n\n    it('should respect response delays', async () => {\n      mockService.setResponseDelay(100);\n      \n      const start = Date.now();\n      await mockService.generate({\n        model: 'llama3',\n        prompt: 'Delay test'\n      });\n      const duration = Date.now() - start;\n      \n      expect(duration).toBeGreaterThanOrEqual(90); // Allow some variance\n    });\n  });\n});"],"names":["describe","mockService","beforeEach","MockOllamaService","it","stats","getStats","expect","online","toBe","models","toContain","failureRate","customService","isOnline","responseDelay","toEqual","result","listModels","toBeInstanceOf","Array","length","toBeGreaterThan","toHaveProperty","exists","checkModelExists","notExists","info","getModelInfo","pullModel","deleteModel","response","generate","model","prompt","toBeTruthy","codeResponse","toMatch","messages","role","content","responses","chunk","chat","push","lastResponse","done","forEach","setOnlineStatus","rejects","toThrow","setFailureRate","health","healthCheck","status","service","createMockOllamaService","promises","from","Promise","all","toHaveLength","setResponseDelay","start","Date","now","duration","toBeGreaterThanOrEqual"],"mappings":"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"}