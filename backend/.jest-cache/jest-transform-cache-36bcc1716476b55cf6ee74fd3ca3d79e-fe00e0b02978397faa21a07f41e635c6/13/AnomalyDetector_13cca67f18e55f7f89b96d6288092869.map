{"version":3,"names":["cov_1gposnz01p","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","tf","EventEmitter","LRUCache","AnalyticsEngine","PerformanceMonitor","EventStore","AnomalyDetector","startDetection","intervalMs","isRunning","console","log","detectionInterval","setInterval","performDetection","error","emit","performanceMonitor","startMonitoring","stopDetection","clearInterval","trainAutoencoderModel","metrics","trainingDays","join","trainingData","collectTrainingData","length","config","minSamples","Error","normalizedData","normalizationParams","normalizeData","inputDim","model","createAutoencoderModel","xTrain","tensor2d","splitIndex","Math","floor","xTrainSplit","slice","xVal","history","fit","epochs","batchSize","validationData","shuffle","verbose","callbacks","onEpochEnd","epoch","logs","loss","toFixed","predictions","predict","reconstructionErrors","calculateReconstructionErrors","threshold","calculateThreshold","finalLoss","accuracy","max","anomalyModel","id","Date","now","name","algorithm","parameters","reconstructionErrorStats","mean","reduce","sum","e","std","calculateStandardDeviation","trainedAt","features","isActive","models","set","dispose","updateStatisticalThresholds","metric","windowDays","historicalData","getHistoricalData","values","map","d","v","variance","pow","stdDev","sqrt","confidenceMap","low","medium","high","confidence","sensitivity","thresholds","upperBound","lowerBound","sampleSize","lastUpdated","statisticalThresholds","detectAnomalies","targetMetrics","keys","metricWeights","alerts","currentData","getCurrentMetricValues","enabledAlgorithms","algorithmAlerts","runDetectionAlgorithm","push","uniqueAlerts","deduplicateAlerts","alert","alertHistory","severity","setTimeout","acknowledgeAlert","alertId","userId","get","acknowledged","resolveAlert","resolved","resolvedAt","getActiveAlerts","Array","from","filter","sort","a","severityOrder","critical","severityDiff","timestamp","getTime","getDetectionStats","activeAlerts","alertsBySeveity","acc","acknowledgedAlerts","resolvedQuickly","falsePositiveRate","lastDetection","totalAlerts","detectionAccuracy","modelCount","size","updateConfig","newConfig","exportData","m","undefined","stats","initializeModels","keyMetrics","warn","message","includes","sequential","layers","dense","inputShape","units","activation","kernelRegularizer","regularizers","l2","dropout","rate","compile","optimizer","train","adam","cache","alertCount","entries","delete","runStatisticalDetection","runAutoencoderDetection","runEnsembleDetection","deviation","abs","calculateSeverity","min","isInCooldown","random","toString","substr","expectedRange","description","context","relatedMetrics","historicalComparison","getHistoricalComparison","patterns","recommendations","generateRecommendations","findAutoencoderModel","inputVector","feature","normalizedVector","normalizeVector","inputTensor","reconstruction","reconstructedVector","data","reconstructionError","calculateReconstructionError","contributingMetrics","identifyContributingMetrics","contribution","statAlerts","aeAlerts","Promise","all","combinedAlerts","metricAlerts","Map","forEach","has","avgConfidence","maxSeverity","ensembleAlert","Set","flatMap","days","vector","params","original","reconstructed","errors","sorted","reference","ratio","recentAlerts","cooldownPeriod","lastHour","lastDay","lastWeek","seen","unique","add","candidates","every","sumSquaredDiff","i","contributions","totalError","val","idx","constructor","ttl","windowSize","alertThreshold","analyticsEngine","getInstance","eventStore","anomalyDetector"],"sources":["AnomalyDetector.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport * as tf from '@tensorflow/tfjs-node';\nimport { EventEmitter } from 'events';\nimport { LRUCache } from 'lru-cache';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\nimport { EventStore } from './EventStore';\nexport class AnomalyDetector extends EventEmitter {\n    /**\n   * Start real-time anomaly detection\n   */ startDetection(intervalMs = 30000) {\n        if (this.isRunning) {\n            console.log('Anomaly detection already running');\n            return;\n        }\n        this.isRunning = true;\n        console.log(`Starting anomaly detection with ${intervalMs}ms interval`);\n        this.detectionInterval = setInterval(async ()=>{\n            try {\n                await this.performDetection();\n            } catch (error) {\n                console.error('Error during anomaly detection:', error);\n                this.emit('error', error);\n            }\n        }, intervalMs);\n        // Start performance monitoring if not already running\n        this.performanceMonitor.startMonitoring(5000);\n        this.emit('detection_started');\n    }\n    /**\n   * Stop anomaly detection\n   */ stopDetection() {\n        if (!this.isRunning) {\n            return;\n        }\n        this.isRunning = false;\n        if (this.detectionInterval) {\n            clearInterval(this.detectionInterval);\n            this.detectionInterval = null;\n        }\n        console.log('Anomaly detection stopped');\n        this.emit('detection_stopped');\n    }\n    /**\n   * Train autoencoder model for anomaly detection\n   */ async trainAutoencoderModel(metrics, trainingDays = 7) {\n        console.log(`Training autoencoder model for metrics: ${metrics.join(', ')}`);\n        // Collect training data\n        const trainingData = await this.collectTrainingData(metrics, trainingDays);\n        if (trainingData.length < this.config.minSamples) {\n            throw new Error(`Insufficient training data: ${trainingData.length} samples`);\n        }\n        // Normalize data\n        const { normalizedData, normalizationParams } = this.normalizeData(trainingData);\n        // Create autoencoder model\n        const inputDim = metrics.length;\n        const model = this.createAutoencoderModel(inputDim);\n        // Prepare training tensors\n        const xTrain = tf.tensor2d(normalizedData);\n        const splitIndex = Math.floor(normalizedData.length * 0.8);\n        const xTrainSplit = xTrain.slice([\n            0,\n            0\n        ], [\n            splitIndex,\n            -1\n        ]);\n        const xVal = xTrain.slice([\n            splitIndex,\n            0\n        ], [\n            -1,\n            -1\n        ]);\n        // Train model\n        const history = await model.fit(xTrainSplit, xTrainSplit, {\n            epochs: 50,\n            batchSize: 32,\n            validationData: [\n                xVal,\n                xVal\n            ],\n            shuffle: true,\n            verbose: 0,\n            callbacks: {\n                onEpochEnd: (epoch, logs)=>{\n                    if (epoch % 10 === 0) {\n                        console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}`);\n                    }\n                }\n            }\n        });\n        // Calculate reconstruction threshold\n        const predictions = model.predict(xVal);\n        const reconstructionErrors = await this.calculateReconstructionErrors(xVal, predictions);\n        const threshold = this.calculateThreshold(reconstructionErrors);\n        // Evaluate model\n        const finalLoss = history.history.loss[history.history.loss.length - 1];\n        const accuracy = Math.max(0, 1 - finalLoss);\n        // Create model object\n        const anomalyModel = {\n            id: `autoencoder_${metrics.join('_')}_${Date.now()}`,\n            name: `Autoencoder Anomaly Detection - ${metrics.join(', ')}`,\n            algorithm: 'autoencoder',\n            model,\n            parameters: {\n                threshold,\n                normalizationParams,\n                reconstructionErrorStats: {\n                    mean: reconstructionErrors.reduce((sum, e)=>sum + e, 0) / reconstructionErrors.length,\n                    std: this.calculateStandardDeviation(reconstructionErrors)\n                }\n            },\n            trainedAt: new Date(),\n            accuracy,\n            features: metrics,\n            isActive: true\n        };\n        // Store model\n        this.models.set(anomalyModel.id, anomalyModel);\n        // Clean up tensors\n        xTrain.dispose();\n        xTrainSplit.dispose();\n        xVal.dispose();\n        predictions.dispose();\n        console.log(`Autoencoder model trained with accuracy: ${accuracy.toFixed(4)}, threshold: ${threshold.toFixed(4)}`);\n        return anomalyModel;\n    }\n    /**\n   * Update statistical thresholds for a metric\n   */ async updateStatisticalThresholds(metric, windowDays = 7) {\n        console.log(`Updating statistical thresholds for ${metric}`);\n        // Get historical data\n        const historicalData = await this.getHistoricalData(metric, windowDays);\n        if (historicalData.length < this.config.minSamples) {\n            throw new Error(`Insufficient data for ${metric}: ${historicalData.length} samples`);\n        }\n        // Calculate statistics\n        const values = historicalData.map((d)=>d.value);\n        const mean = values.reduce((sum, v)=>sum + v, 0) / values.length;\n        const variance = values.reduce((sum, v)=>sum + Math.pow(v - mean, 2), 0) / values.length;\n        const stdDev = Math.sqrt(variance);\n        // Set confidence based on sensitivity\n        const confidenceMap = {\n            low: 2.0,\n            medium: 2.5,\n            high: 3.0\n        };\n        const confidence = confidenceMap[this.config.sensitivity];\n        const thresholds = {\n            metric,\n            mean,\n            stdDev,\n            upperBound: mean + confidence * stdDev,\n            lowerBound: mean - confidence * stdDev,\n            confidence,\n            sampleSize: values.length,\n            lastUpdated: new Date()\n        };\n        this.statisticalThresholds.set(metric, thresholds);\n        console.log(`Statistical thresholds updated for ${metric}: [${thresholds.lowerBound.toFixed(2)}, ${thresholds.upperBound.toFixed(2)}]`);\n        return thresholds;\n    }\n    /**\n   * Detect anomalies in current data\n   */ async detectAnomalies(metrics) {\n        const targetMetrics = metrics || Object.keys(this.config.metricWeights);\n        const alerts = [];\n        // Get current metric values\n        const currentData = await this.getCurrentMetricValues(targetMetrics);\n        if (Object.keys(currentData).length === 0) {\n            return alerts;\n        }\n        // Run enabled detection algorithms\n        for (const algorithm of this.config.enabledAlgorithms){\n            try {\n                const algorithmAlerts = await this.runDetectionAlgorithm(algorithm, currentData, targetMetrics);\n                alerts.push(...algorithmAlerts);\n            } catch (error) {\n                console.error(`Error running ${algorithm} detection:`, error);\n            }\n        }\n        // Deduplicate and prioritize alerts\n        const uniqueAlerts = this.deduplicateAlerts(alerts);\n        // Store new alerts\n        for (const alert of uniqueAlerts){\n            this.alerts.set(alert.id, alert);\n            this.alertHistory.push(alert);\n            // Emit alert event\n            this.emit('anomaly_detected', alert);\n            // Auto-acknowledge low severity alerts\n            if (alert.severity === 'low') {\n                setTimeout(()=>this.acknowledgeAlert(alert.id), 5 * 60 * 1000); // 5 minutes\n            }\n        }\n        return uniqueAlerts;\n    }\n    /**\n   * Acknowledge an alert\n   */ acknowledgeAlert(alertId, userId) {\n        const alert = this.alerts.get(alertId);\n        if (!alert) {\n            return false;\n        }\n        alert.acknowledged = true;\n        this.emit('alert_acknowledged', {\n            alert,\n            userId\n        });\n        return true;\n    }\n    /**\n   * Resolve an alert\n   */ resolveAlert(alertId, userId) {\n        const alert = this.alerts.get(alertId);\n        if (!alert) {\n            return false;\n        }\n        alert.resolved = true;\n        alert.resolvedAt = new Date();\n        this.emit('alert_resolved', {\n            alert,\n            userId\n        });\n        return true;\n    }\n    /**\n   * Get active alerts\n   */ getActiveAlerts() {\n        return Array.from(this.alerts.values()).filter((alert)=>!alert.resolved).sort((a, b)=>{\n            // Sort by severity then timestamp\n            const severityOrder = {\n                critical: 4,\n                high: 3,\n                medium: 2,\n                low: 1\n            };\n            const severityDiff = severityOrder[b.severity] - severityOrder[a.severity];\n            if (severityDiff !== 0) return severityDiff;\n            return b.timestamp.getTime() - a.timestamp.getTime();\n        });\n    }\n    /**\n   * Get detection statistics\n   */ getDetectionStats() {\n        const alerts = Array.from(this.alerts.values());\n        const activeAlerts = alerts.filter((a)=>!a.resolved);\n        const alertsBySeveity = alerts.reduce((acc, alert)=>{\n            acc[alert.severity] = (acc[alert.severity] || 0) + 1;\n            return acc;\n        }, {});\n        // Calculate accuracy (simplified - would need labeled data for real accuracy)\n        const acknowledgedAlerts = alerts.filter((a)=>a.acknowledged);\n        const accuracy = alerts.length > 0 ? acknowledgedAlerts.length / alerts.length : 0;\n        // Estimate false positive rate\n        const resolvedQuickly = alerts.filter((a)=>a.resolved && a.resolvedAt && a.resolvedAt.getTime() - a.timestamp.getTime() < 300000 // 5 minutes\n        );\n        const falsePositiveRate = alerts.length > 0 ? resolvedQuickly.length / alerts.length : 0;\n        const lastDetection = alerts.length > 0 ? new Date(Math.max(...alerts.map((a)=>a.timestamp.getTime()))) : null;\n        return {\n            totalAlerts: alerts.length,\n            activeAlerts: activeAlerts.length,\n            alertsBySeveity,\n            detectionAccuracy: accuracy,\n            falsePositiveRate,\n            modelCount: this.models.size,\n            lastDetection\n        };\n    }\n    /**\n   * Update detection configuration\n   */ updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n        console.log('Anomaly detection configuration updated');\n        this.emit('config_updated', this.config);\n    }\n    /**\n   * Export detection data\n   */ exportData() {\n        return {\n            config: this.config,\n            models: Array.from(this.models.values()).map((m)=>({\n                    ...m,\n                    model: undefined // Don't export TensorFlow models\n                })),\n            alerts: this.alertHistory,\n            thresholds: Array.from(this.statisticalThresholds.values()),\n            stats: this.getDetectionStats()\n        };\n    }\n    // Private methods\n    async initializeModels() {\n        try {\n            // Initialize statistical thresholds for key metrics\n            const keyMetrics = Object.keys(this.config.metricWeights);\n            for (const metric of keyMetrics){\n                try {\n                    await this.updateStatisticalThresholds(metric);\n                } catch (error) {\n                    console.warn(`Failed to initialize thresholds for ${metric}:`, error.message);\n                }\n            }\n            // Train initial autoencoder model if enabled\n            if (this.config.enabledAlgorithms.includes('autoencoder')) {\n                try {\n                    await this.trainAutoencoderModel(keyMetrics);\n                } catch (error) {\n                    console.warn('Failed to train initial autoencoder model:', error.message);\n                }\n            }\n        } catch (error) {\n            console.error('Error initializing anomaly detection models:', error);\n        }\n    }\n    createAutoencoderModel(inputDim) {\n        const model = tf.sequential({\n            layers: [\n                // Encoder\n                tf.layers.dense({\n                    inputShape: [\n                        inputDim\n                    ],\n                    units: Math.max(8, Math.floor(inputDim * 0.8)),\n                    activation: 'relu',\n                    kernelRegularizer: tf.regularizers.l2({\n                        l2: 0.01\n                    })\n                }),\n                tf.layers.dropout({\n                    rate: 0.1\n                }),\n                tf.layers.dense({\n                    units: Math.max(4, Math.floor(inputDim * 0.5)),\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: Math.max(2, Math.floor(inputDim * 0.3)),\n                    activation: 'relu'\n                }),\n                // Decoder\n                tf.layers.dense({\n                    units: Math.max(4, Math.floor(inputDim * 0.5)),\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: Math.max(8, Math.floor(inputDim * 0.8)),\n                    activation: 'relu'\n                }),\n                tf.layers.dense({\n                    units: inputDim,\n                    activation: 'linear'\n                })\n            ]\n        });\n        model.compile({\n            optimizer: tf.train.adam(0.001),\n            loss: 'meanSquaredError'\n        });\n        return model;\n    }\n    async performDetection() {\n        const alerts = await this.detectAnomalies();\n        // Update cache with detection results\n        this.cache.set('last_detection', {\n            timestamp: new Date(),\n            alertCount: alerts.length,\n            alerts: alerts.map((a)=>({\n                    id: a.id,\n                    severity: a.severity,\n                    metric: a.metric\n                }))\n        });\n        // Clean up old alerts (keep only last 1000)\n        if (this.alertHistory.length > 1000) {\n            this.alertHistory = this.alertHistory.slice(-1000);\n        }\n        // Clean up resolved alerts from active alerts map\n        for (const [id, alert] of this.alerts.entries()){\n            if (alert.resolved && Date.now() - alert.timestamp.getTime() > 24 * 60 * 60 * 1000) {\n                this.alerts.delete(id);\n            }\n        }\n    }\n    async runDetectionAlgorithm(algorithm, currentData, metrics) {\n        switch(algorithm){\n            case 'statistical':\n                return this.runStatisticalDetection(currentData, metrics);\n            case 'autoencoder':\n                return this.runAutoencoderDetection(currentData, metrics);\n            case 'ensemble':\n                return this.runEnsembleDetection(currentData, metrics);\n            default:\n                console.warn(`Unknown detection algorithm: ${algorithm}`);\n                return [];\n        }\n    }\n    async runStatisticalDetection(currentData, metrics) {\n        const alerts = [];\n        for (const metric of metrics){\n            const value = currentData[metric];\n            if (value === undefined) continue;\n            const thresholds = this.statisticalThresholds.get(metric);\n            if (!thresholds) continue;\n            // Check if value is outside thresholds\n            if (value > thresholds.upperBound || value < thresholds.lowerBound) {\n                const deviation = Math.max(Math.abs(value - thresholds.upperBound), Math.abs(value - thresholds.lowerBound));\n                const severity = this.calculateSeverity(deviation, thresholds.stdDev);\n                const confidence = Math.min(deviation / thresholds.stdDev, 1.0);\n                // Check cooldown period\n                if (this.isInCooldown(metric)) continue;\n                const alert = {\n                    id: `stat_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n                    timestamp: new Date(),\n                    metric,\n                    value,\n                    expectedRange: {\n                        min: thresholds.lowerBound,\n                        max: thresholds.upperBound\n                    },\n                    severity,\n                    confidence,\n                    description: `${metric} value ${value.toFixed(2)} is outside expected range [${thresholds.lowerBound.toFixed(2)}, ${thresholds.upperBound.toFixed(2)}]`,\n                    context: {\n                        relatedMetrics: {\n                            ...currentData\n                        },\n                        historicalComparison: await this.getHistoricalComparison(metric),\n                        patterns: [\n                            'statistical_outlier'\n                        ]\n                    },\n                    recommendations: this.generateRecommendations(metric, value, 'statistical'),\n                    acknowledged: false,\n                    resolved: false\n                };\n                alerts.push(alert);\n            }\n        }\n        return alerts;\n    }\n    async runAutoencoderDetection(currentData, metrics) {\n        const alerts = [];\n        // Find suitable autoencoder model\n        const model = this.findAutoencoderModel(metrics);\n        if (!model || !model.model) return alerts;\n        try {\n            // Prepare input data\n            const inputVector = model.features.map((feature)=>currentData[feature] || 0);\n            const { normalizedVector } = this.normalizeVector(inputVector, model.parameters.normalizationParams);\n            // Get reconstruction\n            const inputTensor = tf.tensor2d([\n                normalizedVector\n            ]);\n            const reconstruction = model.model.predict(inputTensor);\n            const reconstructedVector = await reconstruction.data();\n            // Calculate reconstruction error\n            const reconstructionError = this.calculateReconstructionError(normalizedVector, Array.from(reconstructedVector));\n            // Check against threshold\n            const threshold = model.parameters.threshold;\n            if (reconstructionError > threshold) {\n                // Determine which metrics contributed most to the anomaly\n                const contributingMetrics = this.identifyContributingMetrics(normalizedVector, Array.from(reconstructedVector), model.features);\n                for (const { metric, contribution } of contributingMetrics){\n                    if (contribution > 0.3 && !this.isInCooldown(metric)) {\n                        const value = currentData[metric];\n                        const severity = this.calculateSeverity(reconstructionError, threshold);\n                        const confidence = Math.min(reconstructionError / threshold, 1.0);\n                        const alert = {\n                            id: `ae_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n                            timestamp: new Date(),\n                            metric,\n                            value,\n                            expectedRange: {\n                                min: 0,\n                                max: 0\n                            },\n                            severity,\n                            confidence,\n                            description: `Autoencoder detected anomaly in ${metric} (reconstruction error: ${reconstructionError.toFixed(4)})`,\n                            context: {\n                                relatedMetrics: {\n                                    ...currentData\n                                },\n                                historicalComparison: await this.getHistoricalComparison(metric),\n                                patterns: [\n                                    'autoencoder_anomaly',\n                                    `contribution_${(contribution * 100).toFixed(1)}%`\n                                ]\n                            },\n                            recommendations: this.generateRecommendations(metric, value, 'autoencoder'),\n                            acknowledged: false,\n                            resolved: false\n                        };\n                        alerts.push(alert);\n                    }\n                }\n            }\n            // Cleanup tensors\n            inputTensor.dispose();\n            reconstruction.dispose();\n        } catch (error) {\n            console.error('Error in autoencoder detection:', error);\n        }\n        return alerts;\n    }\n    async runEnsembleDetection(currentData, metrics) {\n        // Run both statistical and autoencoder detection\n        const [statAlerts, aeAlerts] = await Promise.all([\n            this.runStatisticalDetection(currentData, metrics),\n            this.runAutoencoderDetection(currentData, metrics)\n        ]);\n        // Combine and weigh results\n        const combinedAlerts = [];\n        const metricAlerts = new Map();\n        // Group alerts by metric\n        [\n            ...statAlerts,\n            ...aeAlerts\n        ].forEach((alert)=>{\n            if (!metricAlerts.has(alert.metric)) {\n                metricAlerts.set(alert.metric, []);\n            }\n            metricAlerts.get(alert.metric).push(alert);\n        });\n        // Create ensemble alerts\n        for (const [metric, alerts] of metricAlerts.entries()){\n            if (alerts.length > 1) {\n                // Multiple algorithms detected anomaly - high confidence\n                const avgConfidence = alerts.reduce((sum, a)=>sum + a.confidence, 0) / alerts.length;\n                const maxSeverity = alerts.reduce((max, a)=>{\n                    const severityOrder = {\n                        low: 1,\n                        medium: 2,\n                        high: 3,\n                        critical: 4\n                    };\n                    return severityOrder[a.severity] > severityOrder[max.severity] ? a : max;\n                });\n                const ensembleAlert = {\n                    ...maxSeverity,\n                    id: `ensemble_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n                    confidence: Math.min(avgConfidence * 1.2, 1.0),\n                    description: `Multiple algorithms detected anomaly in ${metric}`,\n                    context: {\n                        ...maxSeverity.context,\n                        patterns: [\n                            ...new Set(alerts.flatMap((a)=>a.context.patterns)),\n                            'ensemble_detection'\n                        ]\n                    }\n                };\n                combinedAlerts.push(ensembleAlert);\n            } else {\n                // Single algorithm detection\n                combinedAlerts.push(alerts[0]);\n            }\n        }\n        return combinedAlerts;\n    }\n    // Additional helper methods...\n    async collectTrainingData(metrics, days) {\n        // Implementation to collect training data for specified metrics and time period\n        return [];\n    }\n    normalizeData(data) {\n        // Implementation for data normalization\n        return {\n            normalizedData: data,\n            normalizationParams: {}\n        };\n    }\n    normalizeVector(vector, params) {\n        // Implementation for vector normalization\n        return {\n            normalizedVector: vector\n        };\n    }\n    async calculateReconstructionErrors(original, reconstructed) {\n        // Implementation for calculating reconstruction errors\n        return [];\n    }\n    calculateThreshold(errors) {\n        // Use 95th percentile as threshold\n        const sorted = errors.sort((a, b)=>a - b);\n        return sorted[Math.floor(sorted.length * 0.95)];\n    }\n    calculateStandardDeviation(values) {\n        const mean = values.reduce((sum, v)=>sum + v, 0) / values.length;\n        const variance = values.reduce((sum, v)=>sum + Math.pow(v - mean, 2), 0) / values.length;\n        return Math.sqrt(variance);\n    }\n    async getHistoricalData(metric, days) {\n        // Implementation to get historical data for a metric\n        return [];\n    }\n    async getCurrentMetricValues(metrics) {\n        // Implementation to get current metric values\n        return {};\n    }\n    calculateSeverity(deviation, reference) {\n        const ratio = deviation / reference;\n        if (ratio > 3) return 'critical';\n        if (ratio > 2) return 'high';\n        if (ratio > 1.5) return 'medium';\n        return 'low';\n    }\n    isInCooldown(metric) {\n        const recentAlerts = Array.from(this.alerts.values()).filter((alert)=>alert.metric === metric && !alert.resolved && Date.now() - alert.timestamp.getTime() < this.config.cooldownPeriod * 60 * 1000);\n        return recentAlerts.length > 0;\n    }\n    async getHistoricalComparison(metric) {\n        // Implementation to get historical comparison data\n        return {\n            lastHour: 0,\n            lastDay: 0,\n            lastWeek: 0\n        };\n    }\n    generateRecommendations(metric, value, algorithm) {\n        const recommendations = [];\n        recommendations.push(`Investigate ${metric} anomaly detected by ${algorithm}`);\n        recommendations.push('Check system logs for related events');\n        recommendations.push('Monitor related metrics for cascading effects');\n        if (metric.includes('cpu') || metric.includes('memory')) {\n            recommendations.push('Consider scaling resources if pattern persists');\n        }\n        if (metric.includes('response_time')) {\n            recommendations.push('Check for database query performance issues');\n            recommendations.push('Review application bottlenecks');\n        }\n        return recommendations;\n    }\n    deduplicateAlerts(alerts) {\n        // Remove duplicate alerts for the same metric within a short time window\n        const seen = new Set();\n        const unique = [];\n        for (const alert of alerts.sort((a, b)=>b.confidence - a.confidence)){\n            const key = `${alert.metric}_${Math.floor(alert.timestamp.getTime() / (5 * 60 * 1000))}`; // 5-minute windows\n            if (!seen.has(key)) {\n                seen.add(key);\n                unique.push(alert);\n            }\n        }\n        return unique;\n    }\n    findAutoencoderModel(metrics) {\n        const candidates = Array.from(this.models.values()).filter((model)=>model.algorithm === 'autoencoder' && model.isActive && metrics.every((m)=>model.features.includes(m))).sort((a, b)=>b.accuracy - a.accuracy);\n        return candidates[0] || null;\n    }\n    calculateReconstructionError(original, reconstructed) {\n        let sumSquaredDiff = 0;\n        for(let i = 0; i < original.length; i++){\n            sumSquaredDiff += Math.pow(original[i] - reconstructed[i], 2);\n        }\n        return Math.sqrt(sumSquaredDiff / original.length);\n    }\n    identifyContributingMetrics(original, reconstructed, features) {\n        const contributions = [];\n        let totalError = 0;\n        const errors = original.map((val, idx)=>{\n            const error = Math.abs(val - reconstructed[idx]);\n            totalError += error;\n            return error;\n        });\n        features.forEach((feature, idx)=>{\n            const contribution = totalError > 0 ? errors[idx] / totalError : 0;\n            contributions.push({\n                metric: feature,\n                contribution\n            });\n        });\n        return contributions.sort((a, b)=>b.contribution - a.contribution);\n    }\n    constructor(config){\n        super(), _define_property(this, \"models\", void 0), _define_property(this, \"alerts\", void 0), _define_property(this, \"cache\", void 0), _define_property(this, \"config\", void 0), _define_property(this, \"statisticalThresholds\", void 0), _define_property(this, \"isRunning\", false), _define_property(this, \"detectionInterval\", null), _define_property(this, \"analyticsEngine\", void 0), _define_property(this, \"performanceMonitor\", void 0), _define_property(this, \"eventStore\", void 0), _define_property(this, \"alertHistory\", []);\n        this.models = new Map();\n        this.alerts = new Map();\n        this.statisticalThresholds = new Map();\n        this.alertHistory = [];\n        this.cache = new LRUCache({\n            max: 1000,\n            ttl: 1000 * 60 * 5 // 5 minutes\n        });\n        this.config = {\n            sensitivity: 'medium',\n            windowSize: 10,\n            minSamples: 30,\n            alertThreshold: 0.7,\n            cooldownPeriod: 15,\n            enabledAlgorithms: [\n                'autoencoder',\n                'statistical'\n            ],\n            metricWeights: {\n                'cpu_usage': 1.0,\n                'memory_usage': 1.0,\n                'app_response_time': 1.2,\n                'app_error_rate': 1.5,\n                'app_queue_size': 0.8\n            },\n            ...config\n        };\n        this.analyticsEngine = AnalyticsEngine.getInstance();\n        this.performanceMonitor = new PerformanceMonitor();\n        this.eventStore = EventStore.getInstance();\n        // Initialize default models\n        this.initializeModels();\n    }\n}\n// Export singleton instance\nexport const anomalyDetector = new AnomalyDetector();\n"],"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","ignoreList":[]}