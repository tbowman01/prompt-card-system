{"version":3,"names":["cov_1wnidn7wxl","actualCoverage","jwt","bcrypt","JWT_SECRET","s","b","process","env","JWT_REFRESH_SECRET","JWT_EXPIRY","JWT_REFRESH_EXPIRY","blacklistedTokens","Set","generateTokens","payload","f","accessToken","sign","expiresIn","refreshToken","hashPassword","password","saltRounds","hash","verifyPassword","hashedPassword","compare","verifyToken","req","res","next","authHeader","headers","authorization","startsWith","status","json","success","error","code","token","substring","has","decoded","verify","user","TokenExpiredError","JsonWebTokenError","optionalAuth","requireRole","allowedRoles","includes","role","join","requirePermission","requiredPermissions","hasPermission","some","permission","permissions","body","tokens","id","email","add","data","blacklistToken","logout","message","cleanupBlacklist","console","log"],"sources":["auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n// JWT Secret keys\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'your-super-secret-refresh-key-change-in-production';\nconst JWT_EXPIRY = process.env.JWT_EXPIRY || '15m';\nconst JWT_REFRESH_EXPIRY = process.env.JWT_REFRESH_EXPIRY || '7d';\n// In-memory blacklist for revoked tokens (use Redis in production)\nconst blacklistedTokens = new Set();\n// Token generation utilities\nexport const generateTokens = (payload)=>{\n    const accessToken = jwt.sign(payload, JWT_SECRET, {\n        expiresIn: JWT_EXPIRY\n    });\n    const refreshToken = jwt.sign(payload, JWT_REFRESH_SECRET, {\n        expiresIn: JWT_REFRESH_EXPIRY\n    });\n    return {\n        accessToken,\n        refreshToken\n    };\n};\n// Password hashing utilities\nexport const hashPassword = async (password)=>{\n    const saltRounds = 12;\n    return bcrypt.hash(password, saltRounds);\n};\nexport const verifyPassword = async (password, hashedPassword)=>{\n    return bcrypt.compare(password, hashedPassword);\n};\n// JWT verification middleware\nexport const verifyToken = (req, res, next)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            res.status(401).json({\n                success: false,\n                error: 'Access denied. No token provided or invalid format.',\n                code: 'NO_TOKEN'\n            });\n            return;\n        }\n        const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n        // Check if token is blacklisted\n        if (blacklistedTokens.has(token)) {\n            res.status(401).json({\n                success: false,\n                error: 'Token has been revoked.',\n                code: 'TOKEN_REVOKED'\n            });\n            return;\n        }\n        // Verify token\n        const decoded = jwt.verify(token, JWT_SECRET);\n        req.user = decoded;\n        next();\n    } catch (error) {\n        if (error instanceof jwt.TokenExpiredError) {\n            res.status(401).json({\n                success: false,\n                error: 'Token has expired.',\n                code: 'TOKEN_EXPIRED'\n            });\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid token.',\n                code: 'INVALID_TOKEN'\n            });\n        } else {\n            res.status(500).json({\n                success: false,\n                error: 'Token verification failed.',\n                code: 'TOKEN_VERIFICATION_ERROR'\n            });\n        }\n    }\n};\n// Optional authentication middleware (doesn't fail if no token)\nexport const optionalAuth = (req, res, next)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            next();\n            return;\n        }\n        const token = authHeader.substring(7);\n        if (!blacklistedTokens.has(token)) {\n            const decoded = jwt.verify(token, JWT_SECRET);\n            req.user = decoded;\n        }\n        next();\n    } catch (error) {\n        // Ignore token errors in optional auth\n        next();\n    }\n};\n// Role-based access control middleware\nexport const requireRole = (allowedRoles)=>{\n    return (req, res, next)=>{\n        if (!req.user) {\n            res.status(401).json({\n                success: false,\n                error: 'Authentication required.',\n                code: 'AUTH_REQUIRED'\n            });\n            return;\n        }\n        if (!allowedRoles.includes(req.user.role)) {\n            res.status(403).json({\n                success: false,\n                error: `Access denied. Required roles: ${allowedRoles.join(', ')}`,\n                code: 'INSUFFICIENT_ROLE'\n            });\n            return;\n        }\n        next();\n    };\n};\n// Permission-based access control middleware\nexport const requirePermission = (requiredPermissions)=>{\n    return (req, res, next)=>{\n        if (!req.user) {\n            res.status(401).json({\n                success: false,\n                error: 'Authentication required.',\n                code: 'AUTH_REQUIRED'\n            });\n            return;\n        }\n        const hasPermission = requiredPermissions.some((permission)=>req.user.permissions.includes(permission));\n        if (!hasPermission) {\n            res.status(403).json({\n                success: false,\n                error: `Access denied. Required permissions: ${requiredPermissions.join(', ')}`,\n                code: 'INSUFFICIENT_PERMISSIONS'\n            });\n            return;\n        }\n        next();\n    };\n};\n// Refresh token middleware\nexport const refreshToken = (req, res, next)=>{\n    try {\n        const { refreshToken } = req.body;\n        if (!refreshToken) {\n            res.status(401).json({\n                success: false,\n                error: 'Refresh token required.',\n                code: 'NO_REFRESH_TOKEN'\n            });\n            return;\n        }\n        // Check if refresh token is blacklisted\n        if (blacklistedTokens.has(refreshToken)) {\n            res.status(401).json({\n                success: false,\n                error: 'Refresh token has been revoked.',\n                code: 'REFRESH_TOKEN_REVOKED'\n            });\n            return;\n        }\n        const decoded = jwt.verify(refreshToken, JWT_REFRESH_SECRET);\n        // Generate new tokens\n        const tokens = generateTokens({\n            id: decoded.id,\n            email: decoded.email,\n            role: decoded.role,\n            permissions: decoded.permissions\n        });\n        // Blacklist old refresh token\n        blacklistedTokens.add(refreshToken);\n        res.json({\n            success: true,\n            data: tokens\n        });\n    } catch (error) {\n        if (error instanceof jwt.TokenExpiredError) {\n            res.status(401).json({\n                success: false,\n                error: 'Refresh token has expired.',\n                code: 'REFRESH_TOKEN_EXPIRED'\n            });\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            res.status(401).json({\n                success: false,\n                error: 'Invalid refresh token.',\n                code: 'INVALID_REFRESH_TOKEN'\n            });\n        } else {\n            res.status(500).json({\n                success: false,\n                error: 'Token refresh failed.',\n                code: 'TOKEN_REFRESH_ERROR'\n            });\n        }\n    }\n};\n// Token blacklisting utilities\nexport const blacklistToken = (token)=>{\n    blacklistedTokens.add(token);\n};\nexport const logout = (req, res)=>{\n    try {\n        const authHeader = req.headers.authorization;\n        if (authHeader && authHeader.startsWith('Bearer ')) {\n            const token = authHeader.substring(7);\n            blacklistToken(token);\n        }\n        // Also blacklist refresh token if provided\n        const { refreshToken } = req.body;\n        if (refreshToken) {\n            blacklistToken(refreshToken);\n        }\n        res.json({\n            success: true,\n            message: 'Logged out successfully'\n        });\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: 'Logout failed'\n        });\n    }\n};\n// Clean up expired tokens from blacklist (should be run periodically)\nexport const cleanupBlacklist = ()=>{\n    // In a real implementation, you would check token expiration times\n    // and remove expired tokens from the blacklist\n    // This is a simplified version\n    console.log('Cleaning up token blacklist...');\n};\n"],"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","ignoreList":[]}