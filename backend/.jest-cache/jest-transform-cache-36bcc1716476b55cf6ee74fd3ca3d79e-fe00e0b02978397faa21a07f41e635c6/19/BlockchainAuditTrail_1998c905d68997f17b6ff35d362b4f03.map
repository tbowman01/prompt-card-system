{"version":3,"names":["cov_31gm2g8gq","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","crypto","EventEmitter","BlockchainAuditTrail","getInstance","instance","recordAuditEvent","event","signedEvent","signEvent","pendingEvents","push","length","blockSize","mineBlock","executeSmartContracts","emit","calculateEventHash","Error","index","chain","timestamp","Date","previousHash","hash","data","merkleRoot","calculateMerkleRoot","nonce","calculateBlockHash","substring","difficulty","Array","join","block","storageHash","decentralizedStorage","store","distributeQualityTokens","console","log","createSmartContract","name","code","conditions","actions","createdBy","contractId","now","Math","random","toString","substr","contract","id","createdAt","isActive","smartContracts","set","eventType","userId","shouldExecute","evaluateContractConditions","executeContractActions","triggeredBy","error","message","createGovernanceProposal","title","description","proposer","votingPeriodDays","proposalId","end","getTime","proposal","votingPeriod","start","votes","status","requiredQuorum","executionTx","undefined","governanceProposals","voteOnProposal","vote","get","userTokens","qualityTokens","tokenWeight","reduce","sum","token","amount","filter","v","weight","checkProposalResolution","tokenAmount","mintQualityTokens","earnedFor","blockHash","has","verifyChainIntegrity","i","currentBlock","previousBlock","getAuditTrail","entityId","entityType","events","sort","a","getQualityTokenBalance","tokens","getBlockchainStats","totalEvents","totalTokenHolders","size","averageBlockTime","totalTime","totalBlocks","totalContracts","totalProposals","chainIntegrity","initializeGenesisBlock","genesisBlock","eventString","JSON","stringify","signature","createHmac","update","digest","metadata","createHash","blockString","toISOString","hashes","map","newHashes","combined","entries","includes","action","setupAutomaticGovernance","totalWeight","from","values","flat","votedWeight","yesWeight","constructor","Map","IPFSStorage","serialized","storage","retrieve","verify","calculatedHash"],"sources":["BlockchainAuditTrail.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\nexport class BlockchainAuditTrail extends EventEmitter {\n    static getInstance() {\n        if (!BlockchainAuditTrail.instance) {\n            BlockchainAuditTrail.instance = new BlockchainAuditTrail();\n        }\n        return BlockchainAuditTrail.instance;\n    }\n    /**\n   * Record an audit event to the blockchain\n   */ async recordAuditEvent(event) {\n        // Add cryptographic signature\n        const signedEvent = await this.signEvent(event);\n        // Add to pending events\n        this.pendingEvents.push(signedEvent);\n        // Check if we should mine a new block\n        if (this.pendingEvents.length >= this.blockSize) {\n            await this.mineBlock();\n        }\n        // Execute relevant smart contracts\n        await this.executeSmartContracts(signedEvent);\n        // Emit event for real-time monitoring\n        this.emit('auditEventRecorded', signedEvent);\n        return this.calculateEventHash(signedEvent);\n    }\n    /**\n   * Mine a new block with pending events\n   */ async mineBlock() {\n        if (this.pendingEvents.length === 0) {\n            throw new Error('No pending events to mine');\n        }\n        const index = this.chain.length;\n        const timestamp = new Date();\n        const previousHash = index === 0 ? '0' : this.chain[index - 1].hash;\n        const data = [\n            ...this.pendingEvents\n        ];\n        const merkleRoot = this.calculateMerkleRoot(data);\n        // Proof of Work mining\n        let nonce = 0;\n        let hash = '';\n        do {\n            nonce++;\n            hash = this.calculateBlockHash(index, timestamp, data, previousHash, nonce, merkleRoot);\n        }while (hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0'))\n        const block = {\n            index,\n            timestamp,\n            data,\n            previousHash,\n            hash,\n            nonce,\n            merkleRoot\n        };\n        // Add block to chain\n        this.chain.push(block);\n        // Store block in decentralized storage\n        const storageHash = await this.decentralizedStorage.store(`block_${index}`, block);\n        // Clear pending events\n        this.pendingEvents = [];\n        // Distribute quality tokens for contributions\n        await this.distributeQualityTokens(block);\n        // Emit block mined event\n        this.emit('blockMined', block, storageHash);\n        console.log(`Block ${index} mined with hash: ${hash}`);\n        return block;\n    }\n    /**\n   * Create and deploy a smart contract\n   */ async createSmartContract(name, code, conditions, actions, createdBy) {\n        const contractId = `contract_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const contract = {\n            id: contractId,\n            name,\n            code,\n            conditions,\n            actions,\n            createdAt: new Date(),\n            createdBy,\n            isActive: true\n        };\n        this.smartContracts.set(contractId, contract);\n        // Record contract creation in audit trail\n        await this.recordAuditEvent({\n            eventType: 'smart_contract_created',\n            userId: createdBy,\n            data: {\n                contractId,\n                name,\n                conditions,\n                actions\n            },\n            timestamp: new Date()\n        });\n        return contractId;\n    }\n    /**\n   * Execute smart contracts based on events\n   */ async executeSmartContracts(event) {\n        for (const [contractId, contract] of this.smartContracts){\n            if (!contract.isActive) continue;\n            try {\n                // Check if conditions are met\n                const shouldExecute = this.evaluateContractConditions(contract, event);\n                if (shouldExecute) {\n                    // Execute contract actions\n                    await this.executeContractActions(contract, event);\n                    // Record execution\n                    await this.recordAuditEvent({\n                        eventType: 'smart_contract_executed',\n                        userId: 'system',\n                        data: {\n                            contractId,\n                            triggeredBy: event\n                        },\n                        timestamp: new Date()\n                    });\n                }\n            } catch (error) {\n                console.error(`Error executing smart contract ${contractId}:`, error);\n                // Record error\n                await this.recordAuditEvent({\n                    eventType: 'smart_contract_error',\n                    userId: 'system',\n                    data: {\n                        contractId,\n                        error: error.message\n                    },\n                    timestamp: new Date()\n                });\n            }\n        }\n    }\n    /**\n   * Create a governance proposal\n   */ async createGovernanceProposal(title, description, proposer, votingPeriodDays = 7) {\n        const proposalId = `proposal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const now = new Date();\n        const end = new Date(now.getTime() + votingPeriodDays * 24 * 60 * 60 * 1000);\n        const proposal = {\n            id: proposalId,\n            title,\n            description,\n            proposer,\n            votingPeriod: {\n                start: now,\n                end\n            },\n            votes: [],\n            status: 'active',\n            requiredQuorum: 0.5,\n            executionTx: undefined\n        };\n        this.governanceProposals.set(proposalId, proposal);\n        // Record proposal creation\n        await this.recordAuditEvent({\n            eventType: 'governance_proposal_created',\n            userId: proposer,\n            data: proposal,\n            timestamp: new Date()\n        });\n        return proposalId;\n    }\n    /**\n   * Vote on a governance proposal\n   */ async voteOnProposal(proposalId, userId, vote) {\n        const proposal = this.governanceProposals.get(proposalId);\n        if (!proposal) {\n            throw new Error('Proposal not found');\n        }\n        if (proposal.status !== 'active') {\n            throw new Error('Proposal is not active');\n        }\n        const now = new Date();\n        if (now > proposal.votingPeriod.end) {\n            throw new Error('Voting period has ended');\n        }\n        // Get user's token weight\n        const userTokens = this.qualityTokens.get(userId) || [];\n        const tokenWeight = userTokens.reduce((sum, token)=>sum + token.amount, 0);\n        // Remove previous vote if exists\n        proposal.votes = proposal.votes.filter((v)=>v.userId !== userId);\n        // Add new vote\n        proposal.votes.push({\n            userId,\n            vote,\n            weight: tokenWeight\n        });\n        // Record vote\n        await this.recordAuditEvent({\n            eventType: 'governance_vote_cast',\n            userId,\n            data: {\n                proposalId,\n                vote,\n                weight: tokenWeight\n            },\n            timestamp: new Date()\n        });\n        // Check if proposal should be resolved\n        await this.checkProposalResolution(proposalId);\n    }\n    /**\n   * Distribute quality tokens for contributions\n   */ async distributeQualityTokens(block) {\n        for (const event of block.data){\n            let tokenAmount = 0;\n            // Calculate token rewards based on event type\n            switch(event.eventType){\n                case 'prompt_created':\n                    tokenAmount = 10;\n                    break;\n                case 'test_execution_success':\n                    tokenAmount = 5;\n                    break;\n                case 'bug_report':\n                    tokenAmount = 15;\n                    break;\n                case 'quality_improvement':\n                    tokenAmount = 20;\n                    break;\n                case 'peer_review':\n                    tokenAmount = 8;\n                    break;\n                default:\n                    tokenAmount = 1;\n            }\n            if (tokenAmount > 0) {\n                await this.mintQualityTokens(event.userId, tokenAmount, event.eventType, block.hash);\n            }\n        }\n    }\n    /**\n   * Mint quality tokens for a user\n   */ async mintQualityTokens(userId, amount, earnedFor, blockHash) {\n        const token = {\n            id: `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            userId,\n            amount,\n            earnedFor,\n            timestamp: new Date(),\n            blockHash\n        };\n        if (!this.qualityTokens.has(userId)) {\n            this.qualityTokens.set(userId, []);\n        }\n        this.qualityTokens.get(userId).push(token);\n        // Record token minting\n        await this.recordAuditEvent({\n            eventType: 'quality_tokens_minted',\n            userId,\n            data: token,\n            timestamp: new Date()\n        });\n        this.emit('qualityTokensMinted', token);\n    }\n    /**\n   * Verify blockchain integrity\n   */ verifyChainIntegrity() {\n        for(let i = 1; i < this.chain.length; i++){\n            const currentBlock = this.chain[i];\n            const previousBlock = this.chain[i - 1];\n            // Verify block hash\n            if (currentBlock.hash !== this.calculateBlockHash(currentBlock.index, currentBlock.timestamp, currentBlock.data, currentBlock.previousHash, currentBlock.nonce, currentBlock.merkleRoot)) {\n                console.error(`Invalid hash at block ${i}`);\n                return false;\n            }\n            // Verify previous hash link\n            if (currentBlock.previousHash !== previousBlock.hash) {\n                console.error(`Invalid previous hash at block ${i}`);\n                return false;\n            }\n            // Verify merkle root\n            if (currentBlock.merkleRoot !== this.calculateMerkleRoot(currentBlock.data)) {\n                console.error(`Invalid merkle root at block ${i}`);\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n   * Get audit trail for specific entity\n   */ getAuditTrail(entityId, entityType) {\n        const events = [];\n        for (const block of this.chain){\n            for (const event of block.data){\n                if (event.userId === entityId || event.data.entityId && event.data.entityId === entityId || entityType && event.data.entityType === entityType) {\n                    events.push(event);\n                }\n            }\n        }\n        return events.sort((a, b)=>a.timestamp.getTime() - b.timestamp.getTime());\n    }\n    /**\n   * Get user's quality token balance\n   */ getQualityTokenBalance(userId) {\n        const tokens = this.qualityTokens.get(userId) || [];\n        return tokens.reduce((sum, token)=>sum + token.amount, 0);\n    }\n    /**\n   * Get blockchain statistics\n   */ getBlockchainStats() {\n        const totalEvents = this.chain.reduce((sum, block)=>sum + block.data.length, 0);\n        const totalTokenHolders = this.qualityTokens.size;\n        let averageBlockTime = 0;\n        if (this.chain.length > 1) {\n            const totalTime = this.chain[this.chain.length - 1].timestamp.getTime() - this.chain[0].timestamp.getTime();\n            averageBlockTime = totalTime / (this.chain.length - 1);\n        }\n        return {\n            totalBlocks: this.chain.length,\n            totalEvents,\n            totalContracts: this.smartContracts.size,\n            totalProposals: this.governanceProposals.size,\n            totalTokenHolders,\n            averageBlockTime,\n            chainIntegrity: this.verifyChainIntegrity()\n        };\n    }\n    // Private helper methods\n    initializeGenesisBlock() {\n        const genesisBlock = {\n            index: 0,\n            timestamp: new Date('2024-01-01T00:00:00Z'),\n            data: [\n                {\n                    eventType: 'genesis',\n                    userId: 'system',\n                    data: {\n                        message: 'Blockchain audit trail initialized'\n                    },\n                    timestamp: new Date('2024-01-01T00:00:00Z')\n                }\n            ],\n            previousHash: '0',\n            hash: '',\n            nonce: 0,\n            merkleRoot: ''\n        };\n        genesisBlock.merkleRoot = this.calculateMerkleRoot(genesisBlock.data);\n        genesisBlock.hash = this.calculateBlockHash(0, genesisBlock.timestamp, genesisBlock.data, '0', 0, genesisBlock.merkleRoot);\n        this.chain.push(genesisBlock);\n    }\n    async signEvent(event) {\n        const eventString = JSON.stringify(event);\n        const signature = crypto.createHmac('sha256', 'audit_secret').update(eventString).digest('hex');\n        return {\n            ...event,\n            metadata: {\n                ...event.metadata,\n                signature,\n                hash: this.calculateEventHash(event)\n            }\n        };\n    }\n    calculateEventHash(event) {\n        const eventString = JSON.stringify(event);\n        return crypto.createHash('sha256').update(eventString).digest('hex');\n    }\n    calculateBlockHash(index, timestamp, data, previousHash, nonce, merkleRoot) {\n        const blockString = `${index}${timestamp.toISOString()}${JSON.stringify(data)}${previousHash}${nonce}${merkleRoot}`;\n        return crypto.createHash('sha256').update(blockString).digest('hex');\n    }\n    calculateMerkleRoot(data) {\n        if (data.length === 0) return '';\n        let hashes = data.map((event)=>this.calculateEventHash(event));\n        while(hashes.length > 1){\n            const newHashes = [];\n            for(let i = 0; i < hashes.length; i += 2){\n                if (i + 1 < hashes.length) {\n                    const combined = hashes[i] + hashes[i + 1];\n                    newHashes.push(crypto.createHash('sha256').update(combined).digest('hex'));\n                } else {\n                    newHashes.push(hashes[i]);\n                }\n            }\n            hashes = newHashes;\n        }\n        return hashes[0];\n    }\n    evaluateContractConditions(contract, event) {\n        // Simple condition evaluation - could be enhanced with a proper expression evaluator\n        const conditions = contract.conditions;\n        for (const [key, value] of Object.entries(conditions)){\n            switch(key){\n                case 'eventType':\n                    if (event.eventType !== value) return false;\n                    break;\n                case 'userId':\n                    if (event.userId !== value) return false;\n                    break;\n                case 'dataContains':\n                    if (!JSON.stringify(event.data).includes(value)) return false;\n                    break;\n            }\n        }\n        return true;\n    }\n    async executeContractActions(contract, event) {\n        for (const action of contract.actions){\n            switch(action){\n                case 'mint_tokens':\n                    await this.mintQualityTokens(event.userId, 5, 'contract_execution', '');\n                    break;\n                case 'create_proposal':\n                    break;\n                case 'alert_admin':\n                    this.emit('adminAlert', {\n                        contract,\n                        event\n                    });\n                    break;\n            }\n        }\n    }\n    setupAutomaticGovernance() {\n        // Set up default governance contracts\n        this.createSmartContract('Quality Assurance', 'if test_success_rate < 0.8 then alert_admin', {\n            eventType: 'batch_execution'\n        }, [\n            'alert_admin'\n        ], 'system');\n        this.createSmartContract('Contribution Rewards', 'if prompt_created then mint_tokens', {\n            eventType: 'prompt_created'\n        }, [\n            'mint_tokens'\n        ], 'system');\n    }\n    async checkProposalResolution(proposalId) {\n        const proposal = this.governanceProposals.get(proposalId);\n        if (!proposal || proposal.status !== 'active') return;\n        const now = new Date();\n        const totalWeight = Array.from(this.qualityTokens.values()).flat().reduce((sum, token)=>sum + token.amount, 0);\n        const votedWeight = proposal.votes.reduce((sum, vote)=>sum + vote.weight, 0);\n        const yesWeight = proposal.votes.filter((vote)=>vote.vote === 'yes').reduce((sum, vote)=>sum + vote.weight, 0);\n        // Check if quorum is met and voting period ended\n        if (now > proposal.votingPeriod.end || votedWeight >= totalWeight * proposal.requiredQuorum) {\n            if (yesWeight > votedWeight * 0.5) {\n                proposal.status = 'passed';\n            } else {\n                proposal.status = 'rejected';\n            }\n            // Record resolution\n            await this.recordAuditEvent({\n                eventType: 'governance_proposal_resolved',\n                userId: 'system',\n                data: {\n                    proposalId,\n                    status: proposal.status,\n                    votes: proposal.votes\n                },\n                timestamp: new Date()\n            });\n        }\n    }\n    constructor(){\n        super(), _define_property(this, \"chain\", void 0), _define_property(this, \"pendingEvents\", void 0), _define_property(this, \"smartContracts\", void 0), _define_property(this, \"governanceProposals\", void 0), _define_property(this, \"qualityTokens\", void 0), _define_property(this, \"decentralizedStorage\", void 0), _define_property(this, \"difficulty\", 4), _define_property(this, \"blockSize\", 100);\n        this.chain = [];\n        this.pendingEvents = [];\n        this.smartContracts = new Map();\n        this.governanceProposals = new Map();\n        this.qualityTokens = new Map();\n        this.decentralizedStorage = new IPFSStorage();\n        this.initializeGenesisBlock();\n        this.setupAutomaticGovernance();\n    }\n}\n_define_property(BlockchainAuditTrail, \"instance\", void 0);\n/**\n * IPFS-like decentralized storage implementation\n */ class IPFSStorage {\n    async store(key, data) {\n        const serialized = JSON.stringify(data);\n        const hash = crypto.createHash('sha256').update(serialized).digest('hex');\n        this.storage.set(hash, data);\n        return hash;\n    }\n    async retrieve(hash) {\n        return this.storage.get(hash);\n    }\n    verify(hash, data) {\n        const serialized = JSON.stringify(data);\n        const calculatedHash = crypto.createHash('sha256').update(serialized).digest('hex');\n        return calculatedHash === hash;\n    }\n    constructor(){\n        _define_property(this, \"storage\", void 0);\n        this.storage = new Map();\n    }\n}\n"],"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","ignoreList":[]}