{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/middleware/validation.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { body, validationResult, param, query } from 'express-validator';\nimport sanitizeHtml from 'sanitize-html';\n\n// Enhanced validation schema for prompt cards with security rules\n\n// Generic validation middleware function\nexport function validation(schema: Joi.ObjectSchema) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const { error, value } = schema.validate(req.body);\n    \n    if (error) {\n      res.status(400).json({\n        success: false,\n        error: 'Validation error',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message\n        }))\n      });\n      return;\n    }\n    \n    req.body = value;\n    next();\n  };\n}\n\n// Validation schema for prompt cards\nconst promptCardSchema = Joi.object({\n  title: Joi.string()\n    .required()\n    .min(1)\n    .max(255)\n    .pattern(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/) // Allow only safe characters\n    .messages({\n      'string.pattern.base': 'Title contains invalid characters'\n    }),\n  description: Joi.string()\n    .allow('')\n    .max(1000)\n    .pattern(/^[a-zA-Z0-9\\s\\-_.,!?()\\n\\r]*$/) // Allow safe characters and newlines\n    .messages({\n      'string.pattern.base': 'Description contains invalid characters'\n    }),\n  prompt_template: Joi.string()\n    .required()\n    .min(1)\n    .max(10000) // Reasonable limit for prompt templates\n    .custom((value, helpers) => {\n      // Check for potential injection patterns\n      const dangerousPatterns = [\n        /<script[^>]*>.*?<\\/script>/gi,\n        /javascript:/gi,\n        /on\\w+\\s*=/gi,\n        /eval\\s*\\(/gi,\n        /Function\\s*\\(/gi\n      ];\n      \n      for (const pattern of dangerousPatterns) {\n        if (pattern.test(value)) {\n          return helpers.error('any.invalid', { message: 'Prompt template contains potentially dangerous content' });\n        }\n      }\n      \n      return value;\n    }),\n  variables: Joi.array()\n    .items(Joi.string().max(100).pattern(/^[a-zA-Z0-9_]+$/)) // Variable names should be alphanumeric\n    .default([])\n    .max(50) // Limit number of variables\n});\n\n// Enhanced validation schema for test cases with security rules\nconst testCaseSchema = Joi.object({\n  prompt_card_id: Joi.number().integer().positive().required().max(1000000), // Reasonable upper limit\n  name: Joi.string()\n    .required()\n    .min(1)\n    .max(255)\n    .pattern(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/)\n    .messages({\n      'string.pattern.base': 'Test case name contains invalid characters'\n    }),\n  input_variables: Joi.object()\n    .required()\n    .pattern(/^[a-zA-Z0-9_]+$/, Joi.string().max(1000)) // Key validation and value size limit\n    .max(20), // Limit number of input variables\n  expected_output: Joi.string()\n    .allow('')\n    .max(50000) // Reasonable limit for expected output\n    .custom((value, helpers) => {\n      if (value && value.length > 0) {\n        // Sanitize HTML content\n        const sanitized = sanitizeHtml(value, {\n          allowedTags: ['p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li'],\n          allowedAttributes: {}\n        });\n        return sanitized;\n      }\n      return value;\n    }),\n  assertions: Joi.array()\n    .items(Joi.object({\n      type: Joi.string().valid('equals', 'contains', 'regex', 'length', 'semantic_similarity').required(),\n      value: Joi.alternatives().try(Joi.string().max(1000), Joi.number()),\n      threshold: Joi.number().min(0).max(1)\n    }))\n    .default([])\n    .max(10) // Limit number of assertions\n});\n\n// Middleware to validate prompt card requests\nexport function validatePromptCard(req: Request, res: Response, next: NextFunction): void {\n  const { error, value } = promptCardSchema.validate(req.body);\n  \n  if (error) {\n    res.status(400).json({\n      success: false,\n      error: 'Validation error',\n      details: error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message\n      }))\n    });\n    return;\n  }\n  \n  req.body = value;\n  next();\n}\n\n// Sanitization utilities\nexport const sanitizeInput = (input: string): string => {\n  if (typeof input !== 'string') return input;\n  \n  // Sanitize HTML content\n  const sanitized = sanitizeHtml(input, {\n    allowedTags: [],\n    allowedAttributes: {}\n  });\n  \n  return sanitized.trim();\n};\n\n// General input sanitization middleware\nexport const sanitizeRequestBody = (req: Request, res: Response, next: NextFunction): void => {\n  const sanitizeObject = (obj: any): any => {\n    if (typeof obj === 'string') {\n      return sanitizeInput(obj);\n    } else if (Array.isArray(obj)) {\n      return obj.map(sanitizeObject);\n    } else if (obj && typeof obj === 'object') {\n      const sanitized: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        sanitized[key] = sanitizeObject(value);\n      }\n      return sanitized;\n    }\n    return obj;\n  };\n\n  if (req.body && typeof req.body === 'object') {\n    req.body = sanitizeObject(req.body);\n  }\n  \n  next();\n};\n\n// Request size limiting middleware\nexport const limitRequestSize = (maxSize: number = 1024 * 1024) => { // Default 1MB\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const contentLength = parseInt(req.get('content-length') || '0', 10);\n    \n    if (contentLength > maxSize) {\n      res.status(413).json({\n        success: false,\n        error: 'Request entity too large',\n        maxSize: maxSize,\n        receivedSize: contentLength\n      });\n      return;\n    }\n    \n    next();\n  };\n};\n\n// Express-validator based validation chains\nexport const validatePromptCardExpressValidator = [\n  body('title')\n    .isLength({ min: 1, max: 255 })\n    .matches(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/)\n    .withMessage('Title contains invalid characters'),\n  body('description')\n    .optional()\n    .isLength({ max: 1000 })\n    .matches(/^[a-zA-Z0-9\\s\\-_.,!?()\\n\\r]*$/)\n    .withMessage('Description contains invalid characters'),\n  body('prompt_template')\n    .isLength({ min: 1, max: 10000 })\n    .custom((value) => {\n      const dangerousPatterns = [\n        /<script[^>]*>.*?<\\/script>/gi,\n        /javascript:/gi,\n        /on\\w+\\s*=/gi,\n        /eval\\s*\\(/gi,\n        /Function\\s*\\(/gi\n      ];\n      \n      for (const pattern of dangerousPatterns) {\n        if (pattern.test(value)) {\n          throw new Error('Prompt template contains potentially dangerous content');\n        }\n      }\n      \n      return true;\n    }),\n  body('variables')\n    .optional()\n    .isArray({ max: 50 })\n    .custom((variables) => {\n      if (!Array.isArray(variables)) return true;\n      \n      for (const variable of variables) {\n        if (typeof variable !== 'string' || !/^[a-zA-Z0-9_]+$/.test(variable) || variable.length > 100) {\n          throw new Error('Invalid variable name format');\n        }\n      }\n      \n      return true;\n    })\n];\n\nexport const validateTestCaseExpressValidator = [\n  body('prompt_card_id')\n    .isInt({ min: 1, max: 1000000 })\n    .withMessage('Invalid prompt card ID'),\n  body('name')\n    .isLength({ min: 1, max: 255 })\n    .matches(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/)\n    .withMessage('Test case name contains invalid characters'),\n  body('input_variables')\n    .isObject()\n    .custom((variables) => {\n      if (Object.keys(variables).length > 20) {\n        throw new Error('Too many input variables');\n      }\n      \n      for (const [key, value] of Object.entries(variables)) {\n        if (!/^[a-zA-Z0-9_]+$/.test(key)) {\n          throw new Error(`Invalid variable name: ${key}`);\n        }\n        \n        if (typeof value === 'string' && value.length > 1000) {\n          throw new Error(`Variable value too long: ${key}`);\n        }\n      }\n      \n      return true;\n    }),\n  body('expected_output')\n    .optional()\n    .isLength({ max: 50000 })\n    .customSanitizer((value) => {\n      if (typeof value === 'string' && value.length > 0) {\n        return sanitizeHtml(value, {\n          allowedTags: ['p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li'],\n          allowedAttributes: {}\n        });\n      }\n      return value;\n    }),\n  body('assertions')\n    .optional()\n    .isArray({ max: 10 })\n    .custom((assertions) => {\n      if (!Array.isArray(assertions)) return true;\n      \n      const validTypes = ['equals', 'contains', 'regex', 'length', 'semantic_similarity'];\n      \n      for (const assertion of assertions) {\n        if (!assertion.type || !validTypes.includes(assertion.type)) {\n          throw new Error('Invalid assertion type');\n        }\n        \n        if (assertion.value !== undefined) {\n          if (typeof assertion.value === 'string' && assertion.value.length > 1000) {\n            throw new Error('Assertion value too long');\n          }\n        }\n        \n        if (assertion.threshold !== undefined) {\n          if (typeof assertion.threshold !== 'number' || assertion.threshold < 0 || assertion.threshold > 1) {\n            throw new Error('Invalid threshold value');\n          }\n        }\n      }\n      \n      return true;\n    })\n];\n\n// Middleware to handle express-validator errors\nexport const handleValidationErrors = (req: Request, res: Response, next: NextFunction): void => {\n  const errors = validationResult(req);\n  \n  if (!errors.isEmpty()) {\n    res.status(400).json({\n      success: false,\n      error: 'Validation error',\n      details: errors.array().map(error => ({\n        field: error.type === 'field' ? error.path : 'unknown',\n        message: error.msg,\n        value: error.type === 'field' ? error.value : undefined\n      }))\n    });\n    return;\n  }\n  \n  next();\n};\n\n// Middleware to validate test case requests\nexport function validateTestCase(req: Request, res: Response, next: NextFunction): void {\n  const { error, value } = testCaseSchema.validate(req.body);\n  \n  if (error) {\n    res.status(400).json({\n      success: false,\n      error: 'Validation error',\n      details: error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message\n      }))\n    });\n    return;\n  }\n  \n  req.body = value;\n  next();\n}"],"names":["handleValidationErrors","limitRequestSize","sanitizeInput","sanitizeRequestBody","validatePromptCard","validatePromptCardExpressValidator","validateTestCase","validateTestCaseExpressValidator","validation","schema","req","res","next","error","value","validate","body","status","json","success","details","map","detail","field","path","join","message","promptCardSchema","Joi","object","title","string","required","min","max","pattern","messages","description","allow","prompt_template","custom","helpers","dangerousPatterns","test","variables","array","items","default","testCaseSchema","prompt_card_id","number","integer","positive","name","input_variables","expected_output","length","sanitized","sanitizeHtml","allowedTags","allowedAttributes","assertions","type","valid","alternatives","try","threshold","input","trim","sanitizeObject","obj","Array","isArray","key","Object","entries","maxSize","contentLength","parseInt","get","receivedSize","isLength","matches","withMessage","optional","Error","variable","isInt","isObject","keys","customSanitizer","validTypes","assertion","includes","undefined","errors","validationResult","isEmpty","msg"],"mappings":"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"}