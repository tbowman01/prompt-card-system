{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/assertions/index.ts"],"sourcesContent":["/**\n * Enhanced Assertion System\n * \n * This module provides a comprehensive assertion system for validating LLM outputs\n * with support for semantic similarity, custom JavaScript code execution, and\n * various other advanced validation techniques.\n */\n\nexport { \n  AssertionEngine\n} from './AssertionEngine';\n\nexport type { \n  EnhancedAssertionType,\n  EnhancedAssertionResult,\n  AssertionContext\n} from './AssertionEngine';\n\nexport { \n  SemanticSimilarityValidator,\n  type SimilarityResult,\n  type SentimentResult,\n  type LanguageResult,\n  type ToxicityResult\n} from './SemanticSimilarityValidator';\n\nexport { \n  CustomAssertionValidator,\n  type CustomAssertionResult\n} from './CustomAssertionValidator';\n\nexport { \n  AssertionTypeRegistry,\n  type AssertionValidator,\n  type AssertionTypeDefinition,\n  type AssertionExecutionStats\n} from './AssertionTypeRegistry';\n\n/**\n * Enhanced Assertion System Features:\n * \n * 1. **Basic Assertions**: contains, not-contains, equals, not-equals, regex, length\n * 2. **Semantic Similarity**: Compare text meaning using TF-IDF similarity\n * 3. **Custom Assertions**: Execute secure JavaScript code for complex validations\n * 4. **JSON Schema**: Validate JSON structure and content\n * 5. **Sentiment Analysis**: Detect positive, negative, or neutral sentiment\n * 6. **Language Detection**: Identify text language automatically\n * 7. **Toxicity Detection**: Check for inappropriate or harmful content\n * 8. **Performance Tracking**: Monitor execution time and success rates\n * 9. **Type Registry**: Manage and extend assertion types dynamically\n * 10. **Security**: Sandboxed execution environment for custom code\n * \n * Usage Examples:\n * \n * ```typescript\n * import { assertionEngine, EnhancedAssertionType } from './assertions';\n * \n * // Initialize the engine\n * await assertionEngine.initialize();\n * \n * // Basic assertion\n * const basicAssertion: EnhancedAssertionType = {\n *   type: 'contains',\n *   value: 'hello'\n * };\n * \n * // Semantic similarity\n * const semanticAssertion: EnhancedAssertionType = {\n *   type: 'semantic-similarity',\n *   value: 'The weather is nice',\n *   threshold: 0.8\n * };\n * \n * // Custom assertion\n * const customAssertion: EnhancedAssertionType = {\n *   type: 'custom',\n *   value: 'return output.length > 10 && wordCount > 2'\n * };\n * \n * // Validate assertions\n * const results = await assertionEngine.validateAssertions(\n *   'Hello world!',\n *   [basicAssertion, semanticAssertion, customAssertion]\n * );\n * ```\n */\n\n// Re-export types from testCase for convenience\nexport type { AssertionType } from '../../types/testCase';\nexport type { AssertionResult } from '../../types/testExecution';\n\n// Utility functions for common assertion patterns\nimport { EnhancedAssertionType } from './AssertionEngine';\n\nexport class AssertionUtils {\n  /**\n   * Create a basic contains assertion\n   */\n  static contains(value: string, description?: string): EnhancedAssertionType {\n    return {\n      type: 'contains',\n      value,\n      description: description || `Check if output contains \"${value}\"`\n    };\n  }\n\n  /**\n   * Create a length range assertion\n   */\n  static lengthRange(min: number, max: number, description?: string): EnhancedAssertionType {\n    return {\n      type: 'length',\n      value: `${min}-${max}`,\n      description: description || `Check if output length is between ${min} and ${max} characters`\n    };\n  }\n\n  /**\n   * Create a semantic similarity assertion\n   */\n  static semanticSimilarity(\n    expectedText: string, \n    threshold: number = 0.8, \n    description?: string\n  ): EnhancedAssertionType {\n    return {\n      type: 'semantic-similarity',\n      value: expectedText,\n      threshold,\n      description: description || `Check semantic similarity to \"${expectedText}\" (threshold: ${threshold})`\n    };\n  }\n\n  /**\n   * Create a sentiment assertion\n   */\n  static sentiment(\n    expectedSentiment: 'positive' | 'negative' | 'neutral',\n    threshold: number = 0.6,\n    description?: string\n  ): EnhancedAssertionType {\n    return {\n      type: 'sentiment',\n      value: expectedSentiment,\n      threshold,\n      description: description || `Check if sentiment is ${expectedSentiment} (threshold: ${threshold})`\n    };\n  }\n\n  /**\n   * Create a language detection assertion\n   */\n  static language(expectedLanguage: string, description?: string): EnhancedAssertionType {\n    return {\n      type: 'language',\n      value: expectedLanguage,\n      description: description || `Check if language is ${expectedLanguage}`\n    };\n  }\n\n  /**\n   * Create a toxicity assertion\n   */\n  static toxicity(maxScore: number = 0.5, description?: string): EnhancedAssertionType {\n    return {\n      type: 'toxicity',\n      value: maxScore,\n      description: description || `Check if toxicity score is below ${maxScore}`\n    };\n  }\n\n  /**\n   * Create a custom assertion with helper functions\n   */\n  static custom(code: string, description?: string): EnhancedAssertionType {\n    return {\n      type: 'custom',\n      value: code,\n      description: description || 'Custom assertion validation'\n    };\n  }\n\n  /**\n   * Create a JSON schema assertion\n   */\n  static jsonSchema(schema: object, description?: string): EnhancedAssertionType {\n    return {\n      type: 'json-schema',\n      value: schema,\n      description: description || 'Validate JSON structure'\n    };\n  }\n\n  /**\n   * Create a regex assertion\n   */\n  static regex(pattern: string, flags?: string, description?: string): EnhancedAssertionType {\n    return {\n      type: 'regex',\n      value: pattern,\n      config: flags ? { flags } : undefined,\n      description: description || `Check if output matches pattern: ${pattern}`\n    };\n  }\n\n  /**\n   * Create multiple assertions for comprehensive validation\n   */\n  static comprehensive(\n    expectedText: string,\n    options: {\n      semanticThreshold?: number;\n      sentimentExpected?: 'positive' | 'negative' | 'neutral';\n      minLength?: number;\n      maxLength?: number;\n      language?: string;\n      maxToxicity?: number;\n      customChecks?: string[];\n    } = {}\n  ): EnhancedAssertionType[] {\n    const assertions: EnhancedAssertionType[] = [];\n\n    // Semantic similarity\n    if (options.semanticThreshold !== undefined) {\n      assertions.push(this.semanticSimilarity(expectedText, options.semanticThreshold));\n    }\n\n    // Sentiment\n    if (options.sentimentExpected) {\n      assertions.push(this.sentiment(options.sentimentExpected));\n    }\n\n    // Length constraints\n    if (options.minLength !== undefined && options.maxLength !== undefined) {\n      assertions.push(this.lengthRange(options.minLength, options.maxLength));\n    }\n\n    // Language\n    if (options.language) {\n      assertions.push(this.language(options.language));\n    }\n\n    // Toxicity\n    if (options.maxToxicity !== undefined) {\n      assertions.push(this.toxicity(options.maxToxicity));\n    }\n\n    // Custom checks\n    if (options.customChecks) {\n      options.customChecks.forEach(check => {\n        assertions.push(this.custom(check));\n      });\n    }\n\n    return assertions;\n  }\n}\n\n// Create and export the default assertion engine instance\nimport { AssertionEngine } from './AssertionEngine';\n\nexport const assertionEngine = new AssertionEngine();\n\n// Initialize the global assertion engine\nassertionEngine.initialize().catch(console.error);\n\n// Export as default\nexport default assertionEngine;"],"names":["AssertionEngine","AssertionTypeRegistry","AssertionUtils","CustomAssertionValidator","SemanticSimilarityValidator","assertionEngine","contains","value","description","type","lengthRange","min","max","semanticSimilarity","expectedText","threshold","sentiment","expectedSentiment","language","expectedLanguage","toxicity","maxScore","custom","code","jsonSchema","schema","regex","pattern","flags","config","undefined","comprehensive","options","assertions","semanticThreshold","push","sentimentExpected","minLength","maxLength","maxToxicity","customChecks","forEach","check","initialize","catch","console","error"],"mappings":"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"}