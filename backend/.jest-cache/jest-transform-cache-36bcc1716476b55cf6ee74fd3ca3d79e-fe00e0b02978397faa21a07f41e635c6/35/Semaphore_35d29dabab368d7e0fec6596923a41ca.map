{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/testing/Semaphore.ts"],"sourcesContent":["/**\n * Semaphore implementation for controlling concurrency\n */\nexport class Semaphore {\n  private currentCount: number;\n  private maxCount: number;\n  private waitingQueue: Array<{\n    resolve: () => void;\n    reject: (error: Error) => void;\n  }> = [];\n\n  constructor(maxCount: number) {\n    this.currentCount = 0;\n    this.maxCount = maxCount;\n  }\n\n  /**\n   * Acquire a permit, resolving when one becomes available\n   */\n  async acquire(): Promise<() => void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentCount < this.maxCount) {\n        this.currentCount++;\n        const release = this.createReleaseFunction();\n        resolve(release);\n      } else {\n        this.waitingQueue.push({\n          resolve: () => {\n            this.currentCount++;\n            const release = this.createReleaseFunction();\n            resolve(release);\n          },\n          reject\n        });\n      }\n    });\n  }\n\n  /**\n   * Try to acquire a permit without waiting\n   */\n  tryAcquire(): (() => void) | null {\n    if (this.currentCount < this.maxCount) {\n      this.currentCount++;\n      return this.createReleaseFunction();\n    }\n    return null;\n  }\n\n  /**\n   * Get current number of acquired permits\n   */\n  getCurrentCount(): number {\n    return this.currentCount;\n  }\n\n  /**\n   * Get number of waiting requests\n   */\n  getWaitingCount(): number {\n    return this.waitingQueue.length;\n  }\n\n  /**\n   * Get available permits\n   */\n  getAvailableCount(): number {\n    return this.maxCount - this.currentCount;\n  }\n\n  private createReleaseFunction(): () => void {\n    let released = false;\n    \n    return () => {\n      if (released) {\n        throw new Error('Semaphore permit already released');\n      }\n      \n      released = true;\n      this.currentCount--;\n      \n      if (this.waitingQueue.length > 0) {\n        const waiter = this.waitingQueue.shift()!;\n        waiter.resolve();\n      }\n    };\n  }\n}\n\n/**\n * Resource-aware semaphore that considers system resources\n */\nexport class ResourceSemaphore extends Semaphore {\n  private resourceChecker: () => Promise<boolean>;\n  private checkInterval: number;\n\n  constructor(\n    maxCount: number,\n    resourceChecker: () => Promise<boolean>,\n    checkInterval: number = 1000\n  ) {\n    super(maxCount);\n    this.resourceChecker = resourceChecker;\n    this.checkInterval = checkInterval;\n    this.startResourceMonitoring();\n  }\n\n  async acquire(): Promise<() => void> {\n    // Check resources before acquiring\n    const hasResources = await this.resourceChecker();\n    if (!hasResources) {\n      throw new Error('Insufficient system resources');\n    }\n    \n    return super.acquire();\n  }\n\n  private startResourceMonitoring(): void {\n    setInterval(async () => {\n      const hasResources = await this.resourceChecker();\n      if (!hasResources && this.getCurrentCount() > 0) {\n        // Log resource constraint but don't interrupt running tasks\n        console.warn('System resources constrained, new tasks will be queued');\n      }\n    }, this.checkInterval);\n  }\n}"],"names":["ResourceSemaphore","Semaphore","acquire","Promise","resolve","reject","currentCount","maxCount","release","createReleaseFunction","waitingQueue","push","tryAcquire","getCurrentCount","getWaitingCount","length","getAvailableCount","released","Error","waiter","shift","hasResources","resourceChecker","startResourceMonitoring","setInterval","console","warn","checkInterval"],"mappings":"AAAA;;CAEC;;;;;;;;;;;QA0FYA;eAAAA;;QAzFAC;eAAAA;;;;;;;;;;;;;;;;AAAN,MAAMA;IAaX;;GAEC,GACD,MAAMC,UAA+B;QACnC,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,IAAI,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;gBACrC,IAAI,CAACD,YAAY;gBACjB,MAAME,UAAU,IAAI,CAACC,qBAAqB;gBAC1CL,QAAQI;YACV,OAAO;gBACL,IAAI,CAACE,YAAY,CAACC,IAAI,CAAC;oBACrBP,SAAS;wBACP,IAAI,CAACE,YAAY;wBACjB,MAAME,UAAU,IAAI,CAACC,qBAAqB;wBAC1CL,QAAQI;oBACV;oBACAH;gBACF;YACF;QACF;IACF;IAEA;;GAEC,GACDO,aAAkC;QAChC,IAAI,IAAI,CAACN,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;YACrC,IAAI,CAACD,YAAY;YACjB,OAAO,IAAI,CAACG,qBAAqB;QACnC;QACA,OAAO;IACT;IAEA;;GAEC,GACDI,kBAA0B;QACxB,OAAO,IAAI,CAACP,YAAY;IAC1B;IAEA;;GAEC,GACDQ,kBAA0B;QACxB,OAAO,IAAI,CAACJ,YAAY,CAACK,MAAM;IACjC;IAEA;;GAEC,GACDC,oBAA4B;QAC1B,OAAO,IAAI,CAACT,QAAQ,GAAG,IAAI,CAACD,YAAY;IAC1C;IAEQG,wBAAoC;QAC1C,IAAIQ,WAAW;QAEf,OAAO;YACL,IAAIA,UAAU;gBACZ,MAAM,IAAIC,MAAM;YAClB;YAEAD,WAAW;YACX,IAAI,CAACX,YAAY;YAEjB,IAAI,IAAI,CAACI,YAAY,CAACK,MAAM,GAAG,GAAG;gBAChC,MAAMI,SAAS,IAAI,CAACT,YAAY,CAACU,KAAK;gBACtCD,OAAOf,OAAO;YAChB;QACF;IACF;IA3EA,YAAYG,QAAgB,CAAE;QAP9B,uBAAQD,gBAAR,KAAA;QACA,uBAAQC,YAAR,KAAA;QACA,uBAAQG,gBAGH,EAAE;QAGL,IAAI,CAACJ,YAAY,GAAG;QACpB,IAAI,CAACC,QAAQ,GAAGA;IAClB;AAyEF;AAKO,MAAMP,0BAA0BC;IAerC,MAAMC,UAA+B;QACnC,mCAAmC;QACnC,MAAMmB,eAAe,MAAM,IAAI,CAACC,eAAe;QAC/C,IAAI,CAACD,cAAc;YACjB,MAAM,IAAIH,MAAM;QAClB;QAEA,OAAO,KAAK,CAAChB;IACf;IAEQqB,0BAAgC;QACtCC,YAAY;YACV,MAAMH,eAAe,MAAM,IAAI,CAACC,eAAe;YAC/C,IAAI,CAACD,gBAAgB,IAAI,CAACR,eAAe,KAAK,GAAG;gBAC/C,4DAA4D;gBAC5DY,QAAQC,IAAI,CAAC;YACf;QACF,GAAG,IAAI,CAACC,aAAa;IACvB;IA7BA,YACEpB,QAAgB,EAChBe,eAAuC,EACvCK,gBAAwB,IAAI,CAC5B;QACA,KAAK,CAACpB,WARR,uBAAQe,mBAAR,KAAA,IACA,uBAAQK,iBAAR,KAAA;QAQE,IAAI,CAACL,eAAe,GAAGA;QACvB,IAAI,CAACK,aAAa,GAAGA;QACrB,IAAI,CAACJ,uBAAuB;IAC9B;AAqBF"}