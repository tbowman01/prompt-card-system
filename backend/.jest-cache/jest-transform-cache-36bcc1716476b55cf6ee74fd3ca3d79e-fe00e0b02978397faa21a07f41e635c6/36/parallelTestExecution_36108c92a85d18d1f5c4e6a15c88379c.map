{"version":3,"names":["cov_2eh9t9sce6","actualCoverage","Router","TestQueueManager","db","v4","uuidv4","router","s","testQueueManager","on","progress","f","console","log","event","executionId","error","post","req","res","prompt_card_id","test_case_ids","model","configuration","priority","b","body","Array","isArray","length","status","json","success","promptCard","prepare","get","existingTestCases","map","join","all","queueTestExecution","data","execution_id","Error","message","params","getExecutionProgress","activeExecutions","getActiveExecutions","delete","cancelled","cancelExecution","stats","getQueueStats","results","formattedResults","result","assertion_results","JSON","parse","passed","Boolean","summary","total_tests","passed_tests","filter","r","failed_tests","total_execution_time","reduce","sum","execution_time_ms","average_execution_time","resourceManager","currentUsage","getCurrentUsage","limits","getLimits","reservedSummary","getReservedResourcesSummary","isUnderStress","isSystemUnderStress","optimalConcurrency","getOptimalConcurrency","current_usage","reserved_resources","system_under_stress","optimal_concurrency","executions","batchId","execution","push","batch_id","total_executions","successful_queued","failed_to_queue","process","shutdown","exit","parallelTestExecutionRoutes"],"sources":["parallelTestExecution.ts"],"sourcesContent":["import { Router } from 'express';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { db } from '../database/connection';\nimport { v4 as uuidv4 } from 'uuid';\nconst router = Router();\n// Initialize the test queue manager\nconst testQueueManager = new TestQueueManager();\n// Setup event handlers for real-time updates\ntestQueueManager.on('progressUpdated', (progress)=>{\n    // In a real implementation, this would emit to WebSocket clients\n    console.log('Progress updated:', progress);\n});\ntestQueueManager.on('jobCompleted', (event)=>{\n    console.log('Job completed:', event.executionId);\n});\ntestQueueManager.on('jobFailed', (event)=>{\n    console.error('Job failed:', event.executionId, event.error);\n});\n/**\n * Queue parallel test execution for a prompt card\n * POST /api/parallel-test-execution/queue\n */ router.post('/queue', async (req, res)=>{\n    try {\n        const { prompt_card_id, test_case_ids, model, configuration, priority = 0 } = req.body;\n        // Validate required fields\n        if (!prompt_card_id || !test_case_ids || !Array.isArray(test_case_ids) || test_case_ids.length === 0) {\n            return res.status(400).json({\n                success: false,\n                error: 'prompt_card_id and test_case_ids (array) are required'\n            });\n        }\n        // Verify prompt card exists\n        const promptCard = db.prepare('SELECT id, title FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n        if (!promptCard) {\n            return res.status(404).json({\n                success: false,\n                error: 'Prompt card not found'\n            });\n        }\n        // Verify test cases exist\n        const existingTestCases = db.prepare(`\n      SELECT id FROM test_cases \n      WHERE id IN (${test_case_ids.map(()=>'?').join(',')}) \n      AND prompt_card_id = ?\n    `).all(...test_case_ids, prompt_card_id);\n        if (existingTestCases.length !== test_case_ids.length) {\n            return res.status(400).json({\n                success: false,\n                error: 'Some test cases not found or do not belong to the specified prompt card'\n            });\n        }\n        // Queue the test execution\n        const executionId = await testQueueManager.queueTestExecution(prompt_card_id, test_case_ids, model || 'llama3', configuration, priority);\n        return res.status(202).json({\n            success: true,\n            data: {\n                execution_id: executionId,\n                status: 'queued',\n                prompt_card_id,\n                test_case_ids,\n                model: model || 'llama3',\n                configuration: configuration || testQueueManager['defaultConfiguration'],\n                priority\n            }\n        });\n    } catch (error) {\n        console.error('Error queuing test execution:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to queue test execution'\n        });\n    }\n});\n/**\n * Get execution progress\n * GET /api/parallel-test-execution/:executionId/progress\n */ router.get('/:executionId/progress', (req, res)=>{\n    try {\n        const { executionId } = req.params;\n        const progress = testQueueManager.getExecutionProgress(executionId);\n        if (!progress) {\n            return res.status(404).json({\n                success: false,\n                error: 'Execution not found or not active'\n            });\n        }\n        return res.json({\n            success: true,\n            data: progress\n        });\n    } catch (error) {\n        console.error('Error getting execution progress:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to get execution progress'\n        });\n    }\n});\n/**\n * Get all active executions\n * GET /api/parallel-test-execution/active\n */ router.get('/active', (req, res)=>{\n    try {\n        const activeExecutions = testQueueManager.getActiveExecutions();\n        return res.json({\n            success: true,\n            data: activeExecutions\n        });\n    } catch (error) {\n        console.error('Error getting active executions:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to get active executions'\n        });\n    }\n});\n/**\n * Cancel test execution\n * DELETE /api/parallel-test-execution/:executionId\n */ router.delete('/:executionId', async (req, res)=>{\n    try {\n        const { executionId } = req.params;\n        const cancelled = await testQueueManager.cancelExecution(executionId);\n        if (!cancelled) {\n            return res.status(404).json({\n                success: false,\n                error: 'Execution not found or cannot be cancelled'\n            });\n        }\n        return res.json({\n            success: true,\n            message: 'Test execution cancelled successfully'\n        });\n    } catch (error) {\n        console.error('Error cancelling test execution:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to cancel test execution'\n        });\n    }\n});\n/**\n * Get queue statistics\n * GET /api/parallel-test-execution/queue/stats\n */ router.get('/queue/stats', async (req, res)=>{\n    try {\n        const stats = await testQueueManager.getQueueStats();\n        return res.json({\n            success: true,\n            data: stats\n        });\n    } catch (error) {\n        console.error('Error getting queue stats:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to get queue statistics'\n        });\n    }\n});\n/**\n * Get test execution results\n * GET /api/parallel-test-execution/:executionId/results\n */ router.get('/:executionId/results', (req, res)=>{\n    try {\n        const { executionId } = req.params;\n        // Get results from database\n        const results = db.prepare(`\n      SELECT \n        tr.*,\n        tc.name as test_case_name,\n        pc.title as prompt_card_title\n      FROM test_results tr\n      JOIN test_cases tc ON tr.test_case_id = tc.id\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tr.execution_id LIKE ?\n      ORDER BY tr.created_at ASC\n    `).all(`${executionId}%`);\n        if (results.length === 0) {\n            return res.status(404).json({\n                success: false,\n                error: 'No results found for this execution'\n            });\n        }\n        // Parse JSON fields and format results\n        const formattedResults = results.map((result)=>({\n                ...result,\n                assertion_results: JSON.parse(result.assertion_results || '[]'),\n                passed: Boolean(result.passed)\n            }));\n        // Calculate summary statistics\n        const summary = {\n            total_tests: formattedResults.length,\n            passed_tests: formattedResults.filter((r)=>r.passed).length,\n            failed_tests: formattedResults.filter((r)=>!r.passed).length,\n            total_execution_time: formattedResults.reduce((sum, r)=>sum + r.execution_time_ms, 0),\n            average_execution_time: formattedResults.reduce((sum, r)=>sum + r.execution_time_ms, 0) / formattedResults.length\n        };\n        return res.json({\n            success: true,\n            data: {\n                execution_id: executionId,\n                summary,\n                results: formattedResults\n            }\n        });\n    } catch (error) {\n        console.error('Error getting execution results:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to get execution results'\n        });\n    }\n});\n/**\n * Get system resource status\n * GET /api/parallel-test-execution/system/resources\n */ router.get('/system/resources', (req, res)=>{\n    try {\n        const resourceManager = testQueueManager['resourceManager'];\n        const currentUsage = resourceManager.getCurrentUsage();\n        const limits = resourceManager.getLimits();\n        const reservedSummary = resourceManager.getReservedResourcesSummary();\n        const isUnderStress = resourceManager.isSystemUnderStress();\n        const optimalConcurrency = resourceManager.getOptimalConcurrency();\n        return res.json({\n            success: true,\n            data: {\n                current_usage: currentUsage,\n                limits,\n                reserved_resources: reservedSummary,\n                system_under_stress: isUnderStress,\n                optimal_concurrency: optimalConcurrency\n            }\n        });\n    } catch (error) {\n        console.error('Error getting system resources:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to get system resources'\n        });\n    }\n});\n/**\n * Batch execute multiple prompt cards\n * POST /api/parallel-test-execution/batch\n */ router.post('/batch', async (req, res)=>{\n    try {\n        const { executions } = req.body;\n        if (!Array.isArray(executions) || executions.length === 0) {\n            return res.status(400).json({\n                success: false,\n                error: 'executions array is required'\n            });\n        }\n        const results = [];\n        const batchId = uuidv4();\n        for (const execution of executions){\n            try {\n                const executionId = await testQueueManager.queueTestExecution(execution.prompt_card_id, execution.test_case_ids, execution.model || 'llama3', execution.configuration, execution.priority || 0);\n                results.push({\n                    execution_id: executionId,\n                    prompt_card_id: execution.prompt_card_id,\n                    status: 'queued',\n                    error: null\n                });\n            } catch (error) {\n                results.push({\n                    execution_id: null,\n                    prompt_card_id: execution.prompt_card_id,\n                    status: 'failed',\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n            }\n        }\n        return res.status(202).json({\n            success: true,\n            data: {\n                batch_id: batchId,\n                total_executions: executions.length,\n                successful_queued: results.filter((r)=>r.status === 'queued').length,\n                failed_to_queue: results.filter((r)=>r.status === 'failed').length,\n                results\n            }\n        });\n    } catch (error) {\n        console.error('Error batch executing tests:', error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to batch execute tests'\n        });\n    }\n});\n// Graceful shutdown handler\nprocess.on('SIGTERM', async ()=>{\n    console.log('Gracefully shutting down test queue manager...');\n    await testQueueManager.shutdown();\n    process.exit(0);\n});\nprocess.on('SIGINT', async ()=>{\n    console.log('Gracefully shutting down test queue manager...');\n    await testQueueManager.shutdown();\n    process.exit(0);\n});\nexport { router as parallelTestExecutionRoutes };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}