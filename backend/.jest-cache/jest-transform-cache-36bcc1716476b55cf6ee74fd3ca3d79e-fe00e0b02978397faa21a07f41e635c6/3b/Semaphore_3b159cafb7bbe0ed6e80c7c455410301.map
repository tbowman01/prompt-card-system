{"version":3,"names":["cov_2n02p6kykf","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","Semaphore","acquire","Promise","resolve","reject","currentCount","maxCount","release","createReleaseFunction","waitingQueue","push","tryAcquire","getCurrentCount","getWaitingCount","length","getAvailableCount","released","Error","waiter","shift","constructor","ResourceSemaphore","hasResources","resourceChecker","startResourceMonitoring","setInterval","console","warn","checkInterval"],"sources":["Semaphore.ts"],"sourcesContent":["/**\n * Semaphore implementation for controlling concurrency\n */ function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nexport class Semaphore {\n    /**\n   * Acquire a permit, resolving when one becomes available\n   */ async acquire() {\n        return new Promise((resolve, reject)=>{\n            if (this.currentCount < this.maxCount) {\n                this.currentCount++;\n                const release = this.createReleaseFunction();\n                resolve(release);\n            } else {\n                this.waitingQueue.push({\n                    resolve: ()=>{\n                        this.currentCount++;\n                        const release = this.createReleaseFunction();\n                        resolve(release);\n                    },\n                    reject\n                });\n            }\n        });\n    }\n    /**\n   * Try to acquire a permit without waiting\n   */ tryAcquire() {\n        if (this.currentCount < this.maxCount) {\n            this.currentCount++;\n            return this.createReleaseFunction();\n        }\n        return null;\n    }\n    /**\n   * Get current number of acquired permits\n   */ getCurrentCount() {\n        return this.currentCount;\n    }\n    /**\n   * Get number of waiting requests\n   */ getWaitingCount() {\n        return this.waitingQueue.length;\n    }\n    /**\n   * Get available permits\n   */ getAvailableCount() {\n        return this.maxCount - this.currentCount;\n    }\n    createReleaseFunction() {\n        let released = false;\n        return ()=>{\n            if (released) {\n                throw new Error('Semaphore permit already released');\n            }\n            released = true;\n            this.currentCount--;\n            if (this.waitingQueue.length > 0) {\n                const waiter = this.waitingQueue.shift();\n                waiter.resolve();\n            }\n        };\n    }\n    constructor(maxCount){\n        _define_property(this, \"currentCount\", void 0);\n        _define_property(this, \"maxCount\", void 0);\n        _define_property(this, \"waitingQueue\", []);\n        this.currentCount = 0;\n        this.maxCount = maxCount;\n    }\n}\n/**\n * Resource-aware semaphore that considers system resources\n */ export class ResourceSemaphore extends Semaphore {\n    async acquire() {\n        // Check resources before acquiring\n        const hasResources = await this.resourceChecker();\n        if (!hasResources) {\n            throw new Error('Insufficient system resources');\n        }\n        return super.acquire();\n    }\n    startResourceMonitoring() {\n        setInterval(async ()=>{\n            const hasResources = await this.resourceChecker();\n            if (!hasResources && this.getCurrentCount() > 0) {\n                // Log resource constraint but don't interrupt running tasks\n                console.warn('System resources constrained, new tasks will be queued');\n            }\n        }, this.checkInterval);\n    }\n    constructor(maxCount, resourceChecker, checkInterval = 1000){\n        super(maxCount), _define_property(this, \"resourceChecker\", void 0), _define_property(this, \"checkInterval\", void 0);\n        this.resourceChecker = resourceChecker;\n        this.checkInterval = checkInterval;\n        this.startResourceMonitoring();\n    }\n}\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA;AACA;AAAI,SAASE,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAAA;EAAAL,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EAC3C,IAAIH,GAAG,IAAID,GAAG,EAAE;IAAA;IAAAH,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAO,CAAA;IACZE,MAAM,CAACC,cAAc,CAACP,GAAG,EAAEC,GAAG,EAAE;MAC5BC,KAAK,EAAEA,KAAK;MACZM,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC,MAAM;IAAA;IAAAb,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAO,CAAA;IACHJ,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;EACpB;EAAC;EAAAL,cAAA,GAAAO,CAAA;EACD,OAAOJ,GAAG;AACd;AACA,OAAO,MAAMW,SAAS,CAAC;EACnB;AACJ;AACA;EAAM,MAAMC,OAAOA,CAAA,EAAG;IAAA;IAAAf,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACd,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAG;MAAA;MAAAlB,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAO,CAAA;MAClC,IAAI,IAAI,CAACY,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;QAAA;QAAApB,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAO,CAAA;QACnC,IAAI,CAACY,YAAY,EAAE;QACnB,MAAME,OAAO;QAAA;QAAA,CAAArB,cAAA,GAAAO,CAAA,OAAG,IAAI,CAACe,qBAAqB,CAAC,CAAC;QAAC;QAAAtB,cAAA,GAAAO,CAAA;QAC7CU,OAAO,CAACI,OAAO,CAAC;MACpB,CAAC,MAAM;QAAA;QAAArB,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAO,CAAA;QACH,IAAI,CAACgB,YAAY,CAACC,IAAI,CAAC;UACnBP,OAAO,EAAEA,CAAA,KAAI;YAAA;YAAAjB,cAAA,GAAAM,CAAA;YAAAN,cAAA,GAAAO,CAAA;YACT,IAAI,CAACY,YAAY,EAAE;YACnB,MAAME,OAAO;YAAA;YAAA,CAAArB,cAAA,GAAAO,CAAA,QAAG,IAAI,CAACe,qBAAqB,CAAC,CAAC;YAAC;YAAAtB,cAAA,GAAAO,CAAA;YAC7CU,OAAO,CAACI,OAAO,CAAC;UACpB,CAAC;UACDH;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;EAAMO,UAAUA,CAAA,EAAG;IAAA;IAAAzB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACX,IAAI,IAAI,CAACY,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;MAAA;MAAApB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAO,CAAA;MACnC,IAAI,CAACY,YAAY,EAAE;MAAC;MAAAnB,cAAA,GAAAO,CAAA;MACpB,OAAO,IAAI,CAACe,qBAAqB,CAAC,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAtB,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAO,CAAA;IACD,OAAO,IAAI;EACf;EACA;AACJ;AACA;EAAMmB,eAAeA,CAAA,EAAG;IAAA;IAAA1B,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAChB,OAAO,IAAI,CAACY,YAAY;EAC5B;EACA;AACJ;AACA;EAAMQ,eAAeA,CAAA,EAAG;IAAA;IAAA3B,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAChB,OAAO,IAAI,CAACgB,YAAY,CAACK,MAAM;EACnC;EACA;AACJ;AACA;EAAMC,iBAAiBA,CAAA,EAAG;IAAA;IAAA7B,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAClB,OAAO,IAAI,CAACa,QAAQ,GAAG,IAAI,CAACD,YAAY;EAC5C;EACAG,qBAAqBA,CAAA,EAAG;IAAA;IAAAtB,cAAA,GAAAM,CAAA;IACpB,IAAIwB,QAAQ;IAAA;IAAA,CAAA9B,cAAA,GAAAO,CAAA,QAAG,KAAK;IAAC;IAAAP,cAAA,GAAAO,CAAA;IACrB,OAAO,MAAI;MAAA;MAAAP,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAO,CAAA;MACP,IAAIuB,QAAQ,EAAE;QAAA;QAAA9B,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAO,CAAA;QACV,MAAM,IAAIwB,KAAK,CAAC,mCAAmC,CAAC;MACxD,CAAC;MAAA;MAAA;QAAA/B,cAAA,GAAAQ,CAAA;MAAA;MAAAR,cAAA,GAAAO,CAAA;MACDuB,QAAQ,GAAG,IAAI;MAAC;MAAA9B,cAAA,GAAAO,CAAA;MAChB,IAAI,CAACY,YAAY,EAAE;MAAC;MAAAnB,cAAA,GAAAO,CAAA;MACpB,IAAI,IAAI,CAACgB,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA5B,cAAA,GAAAQ,CAAA;QAC9B,MAAMwB,MAAM;QAAA;QAAA,CAAAhC,cAAA,GAAAO,CAAA,QAAG,IAAI,CAACgB,YAAY,CAACU,KAAK,CAAC,CAAC;QAAC;QAAAjC,cAAA,GAAAO,CAAA;QACzCyB,MAAM,CAACf,OAAO,CAAC,CAAC;MACpB,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAAQ,CAAA;MAAA;IACL,CAAC;EACL;EACA0B,WAAWA,CAACd,QAAQ,EAAC;IAAA;IAAApB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACjBL,gBAAgB,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAAC;IAAAF,cAAA,GAAAO,CAAA;IAC/CL,gBAAgB,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IAAC;IAAAF,cAAA,GAAAO,CAAA;IAC3CL,gBAAgB,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE,CAAC;IAAC;IAAAF,cAAA,GAAAO,CAAA;IAC3C,IAAI,CAACY,YAAY,GAAG,CAAC;IAAC;IAAAnB,cAAA,GAAAO,CAAA;IACtB,IAAI,CAACa,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AACA;AACA;AACA;AAAI,OAAO,MAAMe,iBAAiB,SAASrB,SAAS,CAAC;EACjD,MAAMC,OAAOA,CAAA,EAAG;IAAA;IAAAf,cAAA,GAAAM,CAAA;IACZ;IACA,MAAM8B,YAAY;IAAA;IAAA,CAAApC,cAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAAC8B,eAAe,CAAC,CAAC;IAAC;IAAArC,cAAA,GAAAO,CAAA;IAClD,IAAI,CAAC6B,YAAY,EAAE;MAAA;MAAApC,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAO,CAAA;MACf,MAAM,IAAIwB,KAAK,CAAC,+BAA+B,CAAC;IACpD,CAAC;IAAA;IAAA;MAAA/B,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAO,CAAA;IACD,OAAO,KAAK,CAACQ,OAAO,CAAC,CAAC;EAC1B;EACAuB,uBAAuBA,CAAA,EAAG;IAAA;IAAAtC,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACtBgC,WAAW,CAAC,YAAU;MAAA;MAAAvC,cAAA,GAAAM,CAAA;MAClB,MAAM8B,YAAY;MAAA;MAAA,CAAApC,cAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAAC8B,eAAe,CAAC,CAAC;MAAC;MAAArC,cAAA,GAAAO,CAAA;MAClD;MAAI;MAAA,CAAAP,cAAA,GAAAQ,CAAA,WAAC4B,YAAY;MAAA;MAAA,CAAApC,cAAA,GAAAQ,CAAA,UAAI,IAAI,CAACkB,eAAe,CAAC,CAAC,GAAG,CAAC,GAAE;QAAA;QAAA1B,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAO,CAAA;QAC7C;QACAiC,OAAO,CAACC,IAAI,CAAC,wDAAwD,CAAC;MAC1E,CAAC;MAAA;MAAA;QAAAzC,cAAA,GAAAQ,CAAA;MAAA;IACL,CAAC,EAAE,IAAI,CAACkC,aAAa,CAAC;EAC1B;EACAR,WAAWA,CAACd,QAAQ,EAAEiB,eAAe,EAAEK,aAAa;EAAA;EAAA,CAAA1C,cAAA,GAAAQ,CAAA,UAAG,IAAI,GAAC;IAAA;IAAAR,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACxD,KAAK,CAACa,QAAQ,CAAC,EAAElB,gBAAgB,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC,EAAEA,gBAAgB,CAAC,IAAI,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;IAAC;IAAAF,cAAA,GAAAO,CAAA;IACpH,IAAI,CAAC8B,eAAe,GAAGA,eAAe;IAAC;IAAArC,cAAA,GAAAO,CAAA;IACvC,IAAI,CAACmC,aAAa,GAAGA,aAAa;IAAC;IAAA1C,cAAA,GAAAO,CAAA;IACnC,IAAI,CAAC+B,uBAAuB,CAAC,CAAC;EAClC;AACJ","ignoreList":[]}