{"version":3,"names":["cov_hx4yt3de2","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","performance","EventEmitter","LRUCache","ProgressService","emitProgressUpdate","progress","startTime","now","roomName","job_id","progressCache","set","queueMessage","trackPerformance","emitTestResult","testId","result","compressedResult","compressionEnabled","compressTestResult","emitResourceUpdate","resources","Date","lastEmit","lastActivity","get","emitQueueStats","stats","getConnectedClientsCount","io","sockets","size","getSubscriptionCount","executionId","adapter","rooms","setupEventHandlers","on","socket","console","log","id","connectedClients","Set","length","join","add","emit","status","leave","delete","type","reason","error","broadcastMessage","event","data","sendToClient","socketId","to","getActiveRooms","Array","from","keys","destroy","clear","messageQueue","performanceMetrics","rateLimitMap","batchTimer","clearInterval","removeAllListeners","room","has","queue","push","timestamp","shift","startBatchProcessor","setInterval","processBatchedMessages","processedCount","messages","eventGroups","Map","forEach","msg","dataArray","compressed","llm_output","substring","prompt_used","optimizeSocketIO","engine","compression","perMessageDeflate","threshold","concurrencyLimit","memLevel","maxHttpBufferSize","pingTimeout","pingInterval","startHealthMonitoring","cleanupInactiveClients","logPerformanceStats","inactiveThreshold","clientId","operation","duration","metrics","warn","toFixed","avg","reduce","sum","time","max","Math","round","count","getCurrentProgress","jobId","getPerformanceStats","min","getConnectionStats","totalConnections","activeRooms","messageQueueSize","values","cacheSize","constructor","ttl"],"sources":["ProgressService.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { LRUCache } from 'lru-cache';\nexport class ProgressService extends EventEmitter {\n    /**\n   * Emit progress update to subscribed clients with batching\n   */ emitProgressUpdate(progress) {\n        const startTime = performance.now();\n        const roomName = `test-${progress.job_id}`;\n        // Cache the progress\n        this.progressCache.set(progress.job_id, progress);\n        // Add to batch queue for efficient processing\n        this.queueMessage(roomName, 'progress', progress);\n        // Track performance\n        this.trackPerformance('emitProgressUpdate', performance.now() - startTime);\n    }\n    /**\n   * Emit test result to subscribed clients with compression\n   */ emitTestResult(testId, result) {\n        const startTime = performance.now();\n        const roomName = `test-${testId}`;\n        // Compress large results if enabled\n        const compressedResult = this.compressionEnabled ? this.compressTestResult(result) : result;\n        this.queueMessage(roomName, 'test-complete', compressedResult);\n        // Track performance\n        this.trackPerformance('emitTestResult', performance.now() - startTime);\n    }\n    /**\n   * Emit system resource updates with rate limiting\n   */ emitResourceUpdate(resources) {\n        const now = Date.now();\n        const lastEmit = this.lastActivity.get('system-resources') || 0;\n        // Rate limit to prevent overwhelming clients (max 1 per second)\n        if (now - lastEmit < 1000) {\n            return;\n        }\n        this.lastActivity.set('system-resources', now);\n        this.queueMessage('system-resources', 'system-resources', resources);\n    }\n    /**\n   * Emit queue statistics updates with rate limiting\n   */ emitQueueStats(stats) {\n        const now = Date.now();\n        const lastEmit = this.lastActivity.get('queue-stats') || 0;\n        // Rate limit to prevent overwhelming clients (max 1 per 2 seconds)\n        if (now - lastEmit < 2000) {\n            return;\n        }\n        this.lastActivity.set('queue-stats', now);\n        this.queueMessage('queue-stats', 'queue-stats', stats);\n    }\n    /**\n   * Get connected clients count\n   */ getConnectedClientsCount() {\n        return this.io.sockets.sockets.size;\n    }\n    /**\n   * Get subscriptions for a specific execution\n   */ getSubscriptionCount(executionId) {\n        return this.io.sockets.adapter.rooms.get(`test-${executionId}`)?.size || 0;\n    }\n    /**\n   * Setup WebSocket event handlers\n   */ setupEventHandlers() {\n        this.io.on('connection', (socket)=>{\n            console.log(`WebSocket client connected: ${socket.id}`);\n            this.connectedClients.set(socket.id, new Set());\n            // Handle test execution subscription\n            socket.on('subscribe-test', (executionId)=>{\n                if (typeof executionId === 'string' && executionId.length > 0) {\n                    socket.join(`test-${executionId}`);\n                    this.connectedClients.get(socket.id)?.add(executionId);\n                    console.log(`Client ${socket.id} subscribed to test ${executionId}`);\n                    // Send acknowledgment\n                    socket.emit('subscription-confirmed', {\n                        executionId,\n                        status: 'subscribed'\n                    });\n                }\n            });\n            // Handle test execution unsubscription\n            socket.on('unsubscribe-test', (executionId)=>{\n                if (typeof executionId === 'string' && executionId.length > 0) {\n                    socket.leave(`test-${executionId}`);\n                    this.connectedClients.get(socket.id)?.delete(executionId);\n                    console.log(`Client ${socket.id} unsubscribed from test ${executionId}`);\n                    // Send acknowledgment\n                    socket.emit('subscription-confirmed', {\n                        executionId,\n                        status: 'unsubscribed'\n                    });\n                }\n            });\n            // Handle request for current progress\n            socket.on('get-progress', (executionId)=>{\n                if (typeof executionId === 'string' && executionId.length > 0) {\n                    // This would typically query the TestQueueManager for current progress\n                    // For now, we'll emit a response indicating the request was received\n                    socket.emit('progress-request-received', {\n                        executionId\n                    });\n                }\n            });\n            // Handle system resource subscription\n            socket.on('subscribe-system-resources', ()=>{\n                socket.join('system-resources');\n                console.log(`Client ${socket.id} subscribed to system resources`);\n                socket.emit('subscription-confirmed', {\n                    type: 'system-resources',\n                    status: 'subscribed'\n                });\n            });\n            // Handle system resource unsubscription\n            socket.on('unsubscribe-system-resources', ()=>{\n                socket.leave('system-resources');\n                console.log(`Client ${socket.id} unsubscribed from system resources`);\n                socket.emit('subscription-confirmed', {\n                    type: 'system-resources',\n                    status: 'unsubscribed'\n                });\n            });\n            // Handle queue statistics subscription\n            socket.on('subscribe-queue-stats', ()=>{\n                socket.join('queue-stats');\n                console.log(`Client ${socket.id} subscribed to queue statistics`);\n                socket.emit('subscription-confirmed', {\n                    type: 'queue-stats',\n                    status: 'subscribed'\n                });\n            });\n            // Handle queue statistics unsubscription\n            socket.on('unsubscribe-queue-stats', ()=>{\n                socket.leave('queue-stats');\n                console.log(`Client ${socket.id} unsubscribed from queue statistics`);\n                socket.emit('subscription-confirmed', {\n                    type: 'queue-stats',\n                    status: 'unsubscribed'\n                });\n            });\n            // Handle client disconnect\n            socket.on('disconnect', (reason)=>{\n                console.log(`WebSocket client disconnected: ${socket.id}, reason: ${reason}`);\n                this.connectedClients.delete(socket.id);\n            });\n            // Handle errors\n            socket.on('error', (error)=>{\n                console.error(`WebSocket error for client ${socket.id}:`, error);\n            });\n        });\n        // Handle adapter errors\n        this.io.on('error', (error)=>{\n            console.error('Socket.IO server error:', error);\n        });\n    }\n    /**\n   * Broadcast message to all connected clients\n   */ broadcastMessage(event, data) {\n        this.io.emit(event, data);\n    }\n    /**\n   * Send message to specific client\n   */ sendToClient(socketId, event, data) {\n        this.io.to(socketId).emit(event, data);\n    }\n    /**\n   * Get all active rooms (subscriptions)\n   */ getActiveRooms() {\n        return Array.from(this.io.sockets.adapter.rooms.keys());\n    }\n    /**\n   * Cleanup resources\n   */ destroy() {\n        this.connectedClients.clear();\n        this.messageQueue.clear();\n        this.progressCache.clear();\n        this.performanceMetrics.clear();\n        this.rateLimitMap.clear();\n        this.lastActivity.clear();\n        if (this.batchTimer) {\n            clearInterval(this.batchTimer);\n        }\n        this.io.removeAllListeners();\n        this.removeAllListeners();\n    }\n    /**\n   * Queue message for batch processing\n   */ queueMessage(room, event, data) {\n        if (!this.messageQueue.has(room)) {\n            this.messageQueue.set(room, []);\n        }\n        const queue = this.messageQueue.get(room);\n        queue.push({\n            event,\n            data,\n            timestamp: Date.now()\n        });\n        // Limit queue size to prevent memory issues\n        if (queue.length > 100) {\n            queue.shift();\n        }\n    }\n    /**\n   * Start batch processor for efficient message delivery\n   */ startBatchProcessor() {\n        this.batchTimer = setInterval(()=>{\n            this.processBatchedMessages();\n        }, 100); // Process every 100ms\n    }\n    /**\n   * Process batched messages\n   */ processBatchedMessages() {\n        const startTime = performance.now();\n        let processedCount = 0;\n        for (const [room, messages] of this.messageQueue){\n            if (messages.length === 0) continue;\n            // Group messages by event type\n            const eventGroups = new Map();\n            messages.forEach((msg)=>{\n                if (!eventGroups.has(msg.event)) {\n                    eventGroups.set(msg.event, []);\n                }\n                eventGroups.get(msg.event).push(msg.data);\n            });\n            // Send grouped messages\n            for (const [event, dataArray] of eventGroups){\n                if (dataArray.length === 1) {\n                    this.io.to(room).emit(event, dataArray[0]);\n                } else {\n                    // Send as batch if multiple messages\n                    this.io.to(room).emit(`${event}-batch`, dataArray);\n                }\n            }\n            processedCount += messages.length;\n            messages.length = 0; // Clear the queue\n        }\n        if (processedCount > 0) {\n            this.trackPerformance('processBatchedMessages', performance.now() - startTime);\n        }\n    }\n    /**\n   * Compress test result for efficient transmission\n   */ compressTestResult(result) {\n        // Create a compressed version by removing or truncating large fields\n        const compressed = {\n            ...result,\n            llm_output: result.llm_output.length > 1000 ? result.llm_output.substring(0, 1000) + '...[truncated]' : result.llm_output,\n            prompt_used: result.prompt_used.length > 500 ? result.prompt_used.substring(0, 500) + '...[truncated]' : result.prompt_used\n        };\n        return compressed;\n    }\n    /**\n   * Optimize Socket.IO configuration\n   */ optimizeSocketIO() {\n        // Enable compression\n        this.io.engine.compression = true;\n        this.io.engine.perMessageDeflate = {\n            threshold: 1024,\n            concurrencyLimit: 10,\n            memLevel: 7\n        };\n        // Set reasonable limits\n        this.io.engine.maxHttpBufferSize = 1e6; // 1MB\n        this.io.engine.pingTimeout = 20000; // 20 seconds\n        this.io.engine.pingInterval = 10000; // 10 seconds\n        console.log('WebSocket optimizations applied');\n    }\n    /**\n   * Start health monitoring\n   */ startHealthMonitoring() {\n        setInterval(()=>{\n            this.cleanupInactiveClients();\n            this.logPerformanceStats();\n        }, 1000 * 60 * 5); // Every 5 minutes\n    }\n    /**\n   * Clean up inactive clients\n   */ cleanupInactiveClients() {\n        const now = Date.now();\n        const inactiveThreshold = 1000 * 60 * 10; // 10 minutes\n        for (const [clientId, lastActivity] of this.lastActivity){\n            if (now - lastActivity > inactiveThreshold) {\n                this.lastActivity.delete(clientId);\n                this.connectedClients.delete(clientId);\n                this.rateLimitMap.delete(clientId);\n            }\n        }\n    }\n    /**\n   * Track performance metrics\n   */ trackPerformance(operation, duration) {\n        if (!this.performanceMetrics.has(operation)) {\n            this.performanceMetrics.set(operation, []);\n        }\n        const metrics = this.performanceMetrics.get(operation);\n        metrics.push(duration);\n        // Keep only last 100 measurements\n        if (metrics.length > 100) {\n            metrics.shift();\n        }\n        // Log slow operations\n        if (duration > 50) {\n            console.warn(`Slow WebSocket operation: ${operation} took ${duration.toFixed(2)}ms`);\n        }\n    }\n    /**\n   * Log performance statistics\n   */ logPerformanceStats() {\n        const stats = {};\n        for (const [operation, metrics] of this.performanceMetrics){\n            if (metrics.length > 0) {\n                const avg = metrics.reduce((sum, time)=>sum + time, 0) / metrics.length;\n                const max = Math.max(...metrics);\n                stats[operation] = {\n                    avg: Math.round(avg * 100) / 100,\n                    max: Math.round(max * 100) / 100,\n                    count: metrics.length\n                };\n            }\n        }\n        if (Object.keys(stats).length > 0) {\n            console.log('WebSocket Performance Stats:', stats);\n        }\n    }\n    /**\n   * Get current progress for a job\n   */ getCurrentProgress(jobId) {\n        return this.progressCache.get(jobId) || null;\n    }\n    /**\n   * Get performance statistics\n   */ getPerformanceStats() {\n        const stats = {};\n        for (const [operation, metrics] of this.performanceMetrics){\n            if (metrics.length > 0) {\n                const avg = metrics.reduce((sum, time)=>sum + time, 0) / metrics.length;\n                const max = Math.max(...metrics);\n                const min = Math.min(...metrics);\n                stats[operation] = {\n                    avg: Math.round(avg * 100) / 100,\n                    max: Math.round(max * 100) / 100,\n                    min: Math.round(min * 100) / 100,\n                    count: metrics.length\n                };\n            }\n        }\n        return stats;\n    }\n    /**\n   * Get connection statistics\n   */ getConnectionStats() {\n        return {\n            totalConnections: this.connectedClients.size,\n            activeRooms: this.getActiveRooms().length,\n            messageQueueSize: Array.from(this.messageQueue.values()).reduce((sum, queue)=>sum + queue.length, 0),\n            cacheSize: this.progressCache.size\n        };\n    }\n    constructor(io){\n        super(), _define_property(this, \"io\", void 0), _define_property(this, \"connectedClients\", new Map()) // socketId -> subscribed executionIds\n        , _define_property(this, \"messageQueue\", new Map()) // Room -> queued messages\n        , _define_property(this, \"progressCache\", void 0), _define_property(this, \"performanceMetrics\", void 0), _define_property(this, \"batchTimer\", null), _define_property(this, \"compressionEnabled\", void 0), _define_property(this, \"rateLimitMap\", new Map()), _define_property(this, \"lastActivity\", new Map());\n        this.io = io;\n        // Initialize performance optimizations\n        this.progressCache = new LRUCache({\n            max: 1000,\n            ttl: 1000 * 60 * 5 // 5 minutes\n        });\n        this.performanceMetrics = new Map();\n        this.compressionEnabled = true;\n        // Configure Socket.IO for better performance\n        this.optimizeSocketIO();\n        this.setupEventHandlers();\n        this.startBatchProcessor();\n        this.startHealthMonitoring();\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}