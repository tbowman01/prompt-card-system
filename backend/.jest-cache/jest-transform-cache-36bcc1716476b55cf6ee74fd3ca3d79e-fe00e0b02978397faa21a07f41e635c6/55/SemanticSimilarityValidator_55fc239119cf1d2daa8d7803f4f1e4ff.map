{"version":3,"names":["cov_zw8ezz7p8","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","tf","SemanticSimilarityValidator","initialize","console","log","initialized","error","computeSimilarity","text1","text2","Error","similarity","computeTextSimilarity","analyzeSentiment","text","sentiment","analyzeSentimentSimple","detectLanguage","language","detectLanguageSimple","detectToxicity","toxicity","detectToxicitySimple","getModelName","modelName","tokens1","tokenize","toLowerCase","tokens2","vocabulary","Array","from","Set","vector1","createTFIDFVector","vector2","cosineSimilarity","Math","max","min","replace","split","filter","token","length","tokens","vector","fill","tokenCounts","Map","forEach","set","get","word","index","idf","has","dotProduct","norm1","norm2","i","magnitude1","sqrt","magnitude2","positiveWords","negativeWords","words","positiveScore","negativeScore","includes","totalWords","netScore","label","score","abs","details","positive","negative","neutral","languageKeywords","scores","entries","lang","keywords","sortedLanguages","sort","a","topLanguage","topScore","confidence","alternatives","slice","map","toxicKeywords","profanity","harassment","threats","discrimination","spam","categoryScores","category","overallScore","values","reduce","sum","categories","threshold","cleanup","model","dispose","constructor","setBackend"],"sources":["SemanticSimilarityValidator.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport * as tf from '@tensorflow/tfjs-node';\nexport class SemanticSimilarityValidator {\n    /**\n   * Initialize the semantic similarity validator\n   */ async initialize() {\n        try {\n            console.log('Initializing SemanticSimilarityValidator...');\n            // For now, we'll use a simple fallback implementation\n            // In a production environment, you'd load actual transformer models\n            this.initialized = true;\n            console.log('✅ SemanticSimilarityValidator initialized with fallback implementation');\n        } catch (error) {\n            console.error('❌ Failed to initialize SemanticSimilarityValidator:', error);\n            throw error;\n        }\n    }\n    /**\n   * Compute semantic similarity between two texts\n   */ async computeSimilarity(text1, text2) {\n        if (!this.initialized) {\n            throw new Error('SemanticSimilarityValidator not initialized');\n        }\n        try {\n            // Fallback implementation using simple text similarity\n            // In production, this would use sentence embeddings\n            const similarity = await this.computeTextSimilarity(text1, text2);\n            return similarity;\n        } catch (error) {\n            console.error('Error computing similarity:', error);\n            throw error;\n        }\n    }\n    /**\n   * Analyze sentiment of text\n   */ async analyzeSentiment(text) {\n        if (!this.initialized) {\n            throw new Error('SemanticSimilarityValidator not initialized');\n        }\n        try {\n            // Simple sentiment analysis based on keywords\n            const sentiment = this.analyzeSentimentSimple(text);\n            return sentiment;\n        } catch (error) {\n            console.error('Error analyzing sentiment:', error);\n            throw error;\n        }\n    }\n    /**\n   * Detect language of text\n   */ async detectLanguage(text) {\n        if (!this.initialized) {\n            throw new Error('SemanticSimilarityValidator not initialized');\n        }\n        try {\n            // Simple language detection based on common words\n            const language = this.detectLanguageSimple(text);\n            return language;\n        } catch (error) {\n            console.error('Error detecting language:', error);\n            throw error;\n        }\n    }\n    /**\n   * Detect toxicity in text\n   */ async detectToxicity(text) {\n        if (!this.initialized) {\n            throw new Error('SemanticSimilarityValidator not initialized');\n        }\n        try {\n            // Simple toxicity detection based on keyword matching\n            const toxicity = this.detectToxicitySimple(text);\n            return toxicity;\n        } catch (error) {\n            console.error('Error detecting toxicity:', error);\n            throw error;\n        }\n    }\n    /**\n   * Get the model name being used\n   */ getModelName() {\n        return this.modelName;\n    }\n    /**\n   * Fallback text similarity using cosine similarity of TF-IDF vectors\n   */ async computeTextSimilarity(text1, text2) {\n        // Normalize and tokenize texts\n        const tokens1 = this.tokenize(text1.toLowerCase());\n        const tokens2 = this.tokenize(text2.toLowerCase());\n        // Create vocabulary\n        const vocabulary = Array.from(new Set([\n            ...tokens1,\n            ...tokens2\n        ]));\n        // Create TF-IDF vectors\n        const vector1 = this.createTFIDFVector(tokens1, vocabulary);\n        const vector2 = this.createTFIDFVector(tokens2, vocabulary);\n        // Compute cosine similarity\n        const similarity = this.cosineSimilarity(vector1, vector2);\n        return Math.max(0, Math.min(1, similarity));\n    }\n    /**\n   * Simple tokenization\n   */ tokenize(text) {\n        return text.replace(/[^\\w\\s]/g, ' ').split(/\\s+/).filter((token)=>token.length > 0);\n    }\n    /**\n   * Create TF-IDF vector for tokens\n   */ createTFIDFVector(tokens, vocabulary) {\n        const vector = new Array(vocabulary.length).fill(0);\n        const tokenCounts = new Map();\n        // Count token frequencies\n        tokens.forEach((token)=>{\n            tokenCounts.set(token, (tokenCounts.get(token) || 0) + 1);\n        });\n        // Calculate TF-IDF\n        vocabulary.forEach((word, index)=>{\n            const tf = (tokenCounts.get(word) || 0) / tokens.length;\n            // Simplified IDF (in production, use proper corpus-based IDF)\n            const idf = Math.log(vocabulary.length / (1 + (tokenCounts.has(word) ? 1 : 0)));\n            vector[index] = tf * idf;\n        });\n        return vector;\n    }\n    /**\n   * Compute cosine similarity between two vectors\n   */ cosineSimilarity(vector1, vector2) {\n        if (vector1.length !== vector2.length) {\n            throw new Error('Vectors must have the same length');\n        }\n        let dotProduct = 0;\n        let norm1 = 0;\n        let norm2 = 0;\n        for(let i = 0; i < vector1.length; i++){\n            dotProduct += vector1[i] * vector2[i];\n            norm1 += vector1[i] * vector1[i];\n            norm2 += vector2[i] * vector2[i];\n        }\n        const magnitude1 = Math.sqrt(norm1);\n        const magnitude2 = Math.sqrt(norm2);\n        if (magnitude1 === 0 || magnitude2 === 0) {\n            return 0;\n        }\n        return dotProduct / (magnitude1 * magnitude2);\n    }\n    /**\n   * Simple sentiment analysis using keyword matching\n   */ analyzeSentimentSimple(text) {\n        const positiveWords = [\n            'good',\n            'great',\n            'excellent',\n            'amazing',\n            'wonderful',\n            'fantastic',\n            'awesome',\n            'love',\n            'like',\n            'enjoy',\n            'happy',\n            'pleased',\n            'satisfied',\n            'perfect',\n            'best',\n            'better',\n            'brilliant',\n            'outstanding',\n            'superb',\n            'magnificent',\n            'yes',\n            'correct',\n            'right',\n            'accurate',\n            'successful',\n            'win',\n            'victory'\n        ];\n        const negativeWords = [\n            'bad',\n            'terrible',\n            'awful',\n            'horrible',\n            'disgusting',\n            'hate',\n            'dislike',\n            'angry',\n            'sad',\n            'disappointed',\n            'frustrated',\n            'annoyed',\n            'upset',\n            'wrong',\n            'incorrect',\n            'error',\n            'fail',\n            'failure',\n            'loss',\n            'defeat',\n            'no',\n            'not',\n            'never',\n            'nothing',\n            'none',\n            'worst',\n            'worse'\n        ];\n        const words = this.tokenize(text.toLowerCase());\n        let positiveScore = 0;\n        let negativeScore = 0;\n        words.forEach((word)=>{\n            if (positiveWords.includes(word)) {\n                positiveScore++;\n            } else if (negativeWords.includes(word)) {\n                negativeScore++;\n            }\n        });\n        const totalWords = words.length;\n        const netScore = (positiveScore - negativeScore) / Math.max(1, totalWords);\n        let label;\n        let score;\n        if (netScore > 0.1) {\n            label = 'positive';\n            score = Math.min(1, netScore * 5);\n        } else if (netScore < -0.1) {\n            label = 'negative';\n            score = Math.min(1, Math.abs(netScore) * 5);\n        } else {\n            label = 'neutral';\n            score = 0.5;\n        }\n        return {\n            label,\n            score,\n            details: {\n                positive: positiveScore,\n                negative: negativeScore,\n                neutral: totalWords - positiveScore - negativeScore,\n                netScore\n            }\n        };\n    }\n    /**\n   * Simple language detection using common words\n   */ detectLanguageSimple(text) {\n        const languageKeywords = {\n            'en': [\n                'the',\n                'and',\n                'is',\n                'in',\n                'to',\n                'of',\n                'a',\n                'that',\n                'it',\n                'with',\n                'for',\n                'as',\n                'was',\n                'on',\n                'are'\n            ],\n            'es': [\n                'el',\n                'la',\n                'de',\n                'que',\n                'y',\n                'es',\n                'en',\n                'un',\n                'se',\n                'no',\n                'te',\n                'lo',\n                'le',\n                'da',\n                'su'\n            ],\n            'fr': [\n                'le',\n                'de',\n                'et',\n                'à',\n                'un',\n                'il',\n                'être',\n                'et',\n                'en',\n                'avoir',\n                'que',\n                'pour',\n                'dans',\n                'ce',\n                'son'\n            ],\n            'de': [\n                'der',\n                'die',\n                'und',\n                'in',\n                'den',\n                'von',\n                'zu',\n                'das',\n                'mit',\n                'sich',\n                'des',\n                'auf',\n                'für',\n                'ist',\n                'im'\n            ],\n            'it': [\n                'il',\n                'di',\n                'che',\n                'e',\n                'la',\n                'per',\n                'un',\n                'in',\n                'con',\n                'del',\n                'da',\n                'a',\n                'al',\n                'le',\n                'si'\n            ],\n            'pt': [\n                'o',\n                'de',\n                'que',\n                'e',\n                'do',\n                'da',\n                'em',\n                'um',\n                'para',\n                'é',\n                'com',\n                'não',\n                'uma',\n                'os',\n                'no'\n            ],\n            'ru': [\n                'в',\n                'и',\n                'не',\n                'на',\n                'я',\n                'быть',\n                'то',\n                'он',\n                'оно',\n                'как',\n                'с',\n                'а',\n                'но',\n                'за',\n                'по'\n            ],\n            'zh': [\n                '的',\n                '是',\n                '在',\n                '了',\n                '和',\n                '有',\n                '一',\n                '我',\n                '不',\n                '你',\n                '他',\n                '这',\n                '个',\n                '人',\n                '来'\n            ]\n        };\n        const words = this.tokenize(text.toLowerCase());\n        const scores = {};\n        // Calculate scores for each language\n        Object.entries(languageKeywords).forEach(([lang, keywords])=>{\n            let score = 0;\n            words.forEach((word)=>{\n                if (keywords.includes(word)) {\n                    score++;\n                }\n            });\n            scores[lang] = score / Math.max(1, words.length);\n        });\n        // Find the language with highest score\n        const sortedLanguages = Object.entries(scores).sort(([, a], [, b])=>b - a);\n        const [topLanguage, topScore] = sortedLanguages[0];\n        return {\n            language: topLanguage,\n            confidence: Math.min(1, topScore * 10),\n            alternatives: sortedLanguages.slice(1, 4).map(([lang, score])=>({\n                    language: lang,\n                    confidence: Math.min(1, score * 10)\n                }))\n        };\n    }\n    /**\n   * Simple toxicity detection using keyword matching\n   */ detectToxicitySimple(text) {\n        const toxicKeywords = {\n            profanity: [\n                'damn',\n                'hell',\n                'crap',\n                'stupid',\n                'idiot',\n                'moron',\n                'dumb'\n            ],\n            harassment: [\n                'hate',\n                'kill',\n                'die',\n                'destroy',\n                'hurt',\n                'harm',\n                'attack'\n            ],\n            threats: [\n                'threat',\n                'threaten',\n                'violence',\n                'violent',\n                'dangerous',\n                'weapon'\n            ],\n            discrimination: [\n                'racist',\n                'sexist',\n                'bigot',\n                'discrimination',\n                'prejudice'\n            ],\n            spam: [\n                'spam',\n                'advertisement',\n                'promotion',\n                'click',\n                'buy',\n                'sale',\n                'offer'\n            ]\n        };\n        const words = this.tokenize(text.toLowerCase());\n        const categoryScores = {};\n        // Calculate scores for each toxicity category\n        Object.entries(toxicKeywords).forEach(([category, keywords])=>{\n            let score = 0;\n            words.forEach((word)=>{\n                if (keywords.includes(word)) {\n                    score++;\n                }\n            });\n            categoryScores[category] = score / Math.max(1, words.length);\n        });\n        // Calculate overall toxicity score\n        const overallScore = Object.values(categoryScores).reduce((sum, score)=>sum + score, 0);\n        return {\n            score: Math.min(1, overallScore * 2),\n            categories: categoryScores,\n            threshold: 0.3\n        };\n    }\n    /**\n   * Clean up resources\n   */ async cleanup() {\n        if (this.model) {\n            this.model.dispose();\n            this.model = null;\n        }\n        this.initialized = false;\n    }\n    constructor(){\n        _define_property(this, \"model\", null);\n        _define_property(this, \"modelName\", 'universal-sentence-encoder');\n        _define_property(this, \"initialized\", false);\n        // Initialize TensorFlow.js backend\n        tf.setBackend('cpu');\n    }\n}\n"],"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","ignoreList":[]}