{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/EventStore.ts"],"sourcesContent":["import { Database } from 'better-sqlite3';\nimport { initializeDatabase } from '../../database/connection';\n\nexport interface AnalyticsEvent {\n  id?: string;\n  event_type: string;\n  entity_id: string;\n  entity_type: string;\n  data: any;\n  timestamp: Date;\n  user_id?: string;\n  session_id?: string;\n  metadata?: any;\n}\n\nexport interface EventQuery {\n  event_type?: string;\n  entity_type?: string;\n  entity_id?: string;\n  start_time?: Date;\n  end_time?: Date;\n  limit?: number;\n  offset?: number;\n}\n\nexport class EventStore {\n  private db: Database;\n  private static instance: EventStore;\n\n  private constructor() {\n    this.db = initializeDatabase();\n    this.initializeEventStore();\n  }\n\n  public static getInstance(): EventStore {\n    if (!EventStore.instance) {\n      EventStore.instance = new EventStore();\n    }\n    return EventStore.instance;\n  }\n\n  private initializeEventStore(): void {\n    // Create analytics events table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS analytics_events (\n        id TEXT PRIMARY KEY DEFAULT (hex(randomblob(16))),\n        event_type TEXT NOT NULL,\n        entity_id TEXT NOT NULL,\n        entity_type TEXT NOT NULL,\n        data TEXT NOT NULL,\n        timestamp INTEGER NOT NULL,\n        user_id TEXT,\n        session_id TEXT,\n        metadata TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for performance\n    this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_type ON analytics_events(event_type);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_entity ON analytics_events(entity_type, entity_id);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_timestamp ON analytics_events(timestamp);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_session ON analytics_events(session_id);\n    `);\n\n    // Create aggregated metrics table for performance\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS analytics_metrics (\n        id TEXT PRIMARY KEY DEFAULT (hex(randomblob(16))),\n        metric_type TEXT NOT NULL,\n        metric_name TEXT NOT NULL,\n        value REAL NOT NULL,\n        dimensions TEXT,\n        timestamp INTEGER NOT NULL,\n        period TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for metrics\n    this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_analytics_metrics_type ON analytics_metrics(metric_type, metric_name);\n      CREATE INDEX IF NOT EXISTS idx_analytics_metrics_timestamp ON analytics_metrics(timestamp, period);\n    `);\n  }\n\n  public async recordEvent(event: AnalyticsEvent): Promise<string> {\n    const stmt = this.db.prepare(`\n      INSERT INTO analytics_events (event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const result = stmt.run(\n      event.event_type,\n      event.entity_id,\n      event.entity_type,\n      JSON.stringify(event.data),\n      event.timestamp.getTime(),\n      event.user_id,\n      event.session_id,\n      event.metadata ? JSON.stringify(event.metadata) : null\n    );\n\n    return result.lastInsertRowid.toString();\n  }\n\n  public async recordBatch(events: AnalyticsEvent[]): Promise<string[]> {\n    const stmt = this.db.prepare(`\n      INSERT INTO analytics_events (event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const transaction = this.db.transaction(() => {\n      const ids: string[] = [];\n      for (const event of events) {\n        const result = stmt.run(\n          event.event_type,\n          event.entity_id,\n          event.entity_type,\n          JSON.stringify(event.data),\n          event.timestamp.getTime(),\n          event.user_id,\n          event.session_id,\n          event.metadata ? JSON.stringify(event.metadata) : null\n        );\n        ids.push(result.lastInsertRowid.toString());\n      }\n      return ids;\n    });\n\n    return transaction();\n  }\n\n  public async getEvents(query: EventQuery): Promise<AnalyticsEvent[]> {\n    let sql = `\n      SELECT id, event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata\n      FROM analytics_events\n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    if (query.event_type) {\n      sql += ` AND event_type = ?`;\n      params.push(query.event_type);\n    }\n\n    if (query.entity_type) {\n      sql += ` AND entity_type = ?`;\n      params.push(query.entity_type);\n    }\n\n    if (query.entity_id) {\n      sql += ` AND entity_id = ?`;\n      params.push(query.entity_id);\n    }\n\n    if (query.start_time) {\n      sql += ` AND timestamp >= ?`;\n      params.push(query.start_time.getTime());\n    }\n\n    if (query.end_time) {\n      sql += ` AND timestamp <= ?`;\n      params.push(query.end_time.getTime());\n    }\n\n    sql += ` ORDER BY timestamp DESC`;\n\n    if (query.limit) {\n      sql += ` LIMIT ?`;\n      params.push(query.limit);\n    }\n\n    if (query.offset) {\n      sql += ` OFFSET ?`;\n      params.push(query.offset);\n    }\n\n    const stmt = this.db.prepare(sql);\n    const rows = stmt.all(...params);\n\n    return rows.map(row => {\n      const typedRow = row as any;\n      return {\n        id: typedRow.id,\n        event_type: typedRow.event_type,\n        entity_id: typedRow.entity_id,\n        entity_type: typedRow.entity_type,\n        data: JSON.parse(typedRow.data),\n        timestamp: new Date(typedRow.timestamp),\n        user_id: typedRow.user_id,\n        session_id: typedRow.session_id,\n        metadata: typedRow.metadata ? JSON.parse(typedRow.metadata) : null\n      };\n    });\n  }\n\n  public async getEventCount(query: EventQuery): Promise<number> {\n    let sql = `\n      SELECT COUNT(*) as count\n      FROM analytics_events\n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    if (query.event_type) {\n      sql += ` AND event_type = ?`;\n      params.push(query.event_type);\n    }\n\n    if (query.entity_type) {\n      sql += ` AND entity_type = ?`;\n      params.push(query.entity_type);\n    }\n\n    if (query.entity_id) {\n      sql += ` AND entity_id = ?`;\n      params.push(query.entity_id);\n    }\n\n    if (query.start_time) {\n      sql += ` AND timestamp >= ?`;\n      params.push(query.start_time.getTime());\n    }\n\n    if (query.end_time) {\n      sql += ` AND timestamp <= ?`;\n      params.push(query.end_time.getTime());\n    }\n\n    const stmt = this.db.prepare(sql);\n    const result = stmt.get(...params) as any;\n    return result.count;\n  }\n\n  public async storeMetric(\n    metricType: string,\n    metricName: string,\n    value: number,\n    dimensions?: Record<string, any>,\n    period: string = 'hour'\n  ): Promise<void> {\n    const stmt = this.db.prepare(`\n      INSERT INTO analytics_metrics (metric_type, metric_name, value, dimensions, timestamp, period)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      metricType,\n      metricName,\n      value,\n      dimensions ? JSON.stringify(dimensions) : null,\n      Date.now(),\n      period\n    );\n  }\n\n  public async getMetrics(\n    metricType: string,\n    metricName: string,\n    startTime?: Date,\n    endTime?: Date,\n    period?: string\n  ): Promise<any[]> {\n    let sql = `\n      SELECT metric_name, value, dimensions, timestamp, period\n      FROM analytics_metrics\n      WHERE metric_type = ? AND metric_name = ?\n    `;\n    const params: any[] = [metricType, metricName];\n\n    if (startTime) {\n      sql += ` AND timestamp >= ?`;\n      params.push(startTime.getTime());\n    }\n\n    if (endTime) {\n      sql += ` AND timestamp <= ?`;\n      params.push(endTime.getTime());\n    }\n\n    if (period) {\n      sql += ` AND period = ?`;\n      params.push(period);\n    }\n\n    sql += ` ORDER BY timestamp DESC`;\n\n    const stmt = this.db.prepare(sql);\n    const rows = stmt.all(...params);\n\n    return rows.map(row => {\n      const typedRow = row as any;\n      return {\n        metric_name: typedRow.metric_name,\n        value: typedRow.value,\n        dimensions: typedRow.dimensions ? JSON.parse(typedRow.dimensions) : null,\n        timestamp: new Date(typedRow.timestamp),\n        period: typedRow.period\n      };\n    });\n  }\n\n  public async clearOldEvents(olderThanDays: number = 90): Promise<number> {\n    const cutoffTime = new Date();\n    cutoffTime.setDate(cutoffTime.getDate() - olderThanDays);\n\n    const stmt = this.db.prepare(`\n      DELETE FROM analytics_events\n      WHERE timestamp < ?\n    `);\n\n    const result = stmt.run(cutoffTime.getTime());\n    return result.changes;\n  }\n}"],"names":["EventStore","getInstance","instance","initializeEventStore","db","exec","recordEvent","event","stmt","prepare","result","run","event_type","entity_id","entity_type","JSON","stringify","data","timestamp","getTime","user_id","session_id","metadata","lastInsertRowid","toString","recordBatch","events","transaction","ids","push","getEvents","query","sql","params","start_time","end_time","limit","offset","rows","all","map","row","typedRow","id","parse","Date","getEventCount","get","count","storeMetric","metricType","metricName","value","dimensions","period","now","getMetrics","startTime","endTime","metric_name","clearOldEvents","olderThanDays","cutoffTime","setDate","getDate","changes","initializeDatabase"],"mappings":"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"}