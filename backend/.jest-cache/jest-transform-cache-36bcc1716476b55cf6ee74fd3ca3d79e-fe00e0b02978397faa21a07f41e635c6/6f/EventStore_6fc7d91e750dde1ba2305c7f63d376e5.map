{"version":3,"names":["cov_1uf5qqmc8s","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","initializeDatabase","EventStore","getInstance","instance","initializeEventStore","db","exec","recordEvent","event","stmt","prepare","result","run","event_type","entity_id","entity_type","JSON","stringify","data","timestamp","getTime","user_id","session_id","metadata","lastInsertRowid","toString","recordBatch","events","transaction","ids","push","getEvents","query","sql","params","start_time","end_time","limit","offset","rows","all","map","row","typedRow","id","parse","Date","getEventCount","get","count","storeMetric","metricType","metricName","dimensions","period","now","getMetrics","startTime","endTime","metric_name","clearOldEvents","olderThanDays","cutoffTime","setDate","getDate","changes","constructor"],"sources":["EventStore.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { initializeDatabase } from '../../database/connection';\nexport class EventStore {\n    static getInstance() {\n        if (!EventStore.instance) {\n            EventStore.instance = new EventStore();\n        }\n        return EventStore.instance;\n    }\n    initializeEventStore() {\n        // Create analytics events table\n        this.db.exec(`\n      CREATE TABLE IF NOT EXISTS analytics_events (\n        id TEXT PRIMARY KEY DEFAULT (hex(randomblob(16))),\n        event_type TEXT NOT NULL,\n        entity_id TEXT NOT NULL,\n        entity_type TEXT NOT NULL,\n        data TEXT NOT NULL,\n        timestamp INTEGER NOT NULL,\n        user_id TEXT,\n        session_id TEXT,\n        metadata TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n        // Create indexes for performance\n        this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_type ON analytics_events(event_type);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_entity ON analytics_events(entity_type, entity_id);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_timestamp ON analytics_events(timestamp);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_session ON analytics_events(session_id);\n    `);\n        // Create aggregated metrics table for performance\n        this.db.exec(`\n      CREATE TABLE IF NOT EXISTS analytics_metrics (\n        id TEXT PRIMARY KEY DEFAULT (hex(randomblob(16))),\n        metric_type TEXT NOT NULL,\n        metric_name TEXT NOT NULL,\n        value REAL NOT NULL,\n        dimensions TEXT,\n        timestamp INTEGER NOT NULL,\n        period TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n        // Create indexes for metrics\n        this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_analytics_metrics_type ON analytics_metrics(metric_type, metric_name);\n      CREATE INDEX IF NOT EXISTS idx_analytics_metrics_timestamp ON analytics_metrics(timestamp, period);\n    `);\n    }\n    async recordEvent(event) {\n        const stmt = this.db.prepare(`\n      INSERT INTO analytics_events (event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n        const result = stmt.run(event.event_type, event.entity_id, event.entity_type, JSON.stringify(event.data), event.timestamp.getTime(), event.user_id, event.session_id, event.metadata ? JSON.stringify(event.metadata) : null);\n        return result.lastInsertRowid.toString();\n    }\n    async recordBatch(events) {\n        const stmt = this.db.prepare(`\n      INSERT INTO analytics_events (event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n        const transaction = this.db.transaction(()=>{\n            const ids = [];\n            for (const event of events){\n                const result = stmt.run(event.event_type, event.entity_id, event.entity_type, JSON.stringify(event.data), event.timestamp.getTime(), event.user_id, event.session_id, event.metadata ? JSON.stringify(event.metadata) : null);\n                ids.push(result.lastInsertRowid.toString());\n            }\n            return ids;\n        });\n        return transaction();\n    }\n    async getEvents(query) {\n        let sql = `\n      SELECT id, event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata\n      FROM analytics_events\n      WHERE 1=1\n    `;\n        const params = [];\n        if (query.event_type) {\n            sql += ` AND event_type = ?`;\n            params.push(query.event_type);\n        }\n        if (query.entity_type) {\n            sql += ` AND entity_type = ?`;\n            params.push(query.entity_type);\n        }\n        if (query.entity_id) {\n            sql += ` AND entity_id = ?`;\n            params.push(query.entity_id);\n        }\n        if (query.start_time) {\n            sql += ` AND timestamp >= ?`;\n            params.push(query.start_time.getTime());\n        }\n        if (query.end_time) {\n            sql += ` AND timestamp <= ?`;\n            params.push(query.end_time.getTime());\n        }\n        sql += ` ORDER BY timestamp DESC`;\n        if (query.limit) {\n            sql += ` LIMIT ?`;\n            params.push(query.limit);\n        }\n        if (query.offset) {\n            sql += ` OFFSET ?`;\n            params.push(query.offset);\n        }\n        const stmt = this.db.prepare(sql);\n        const rows = stmt.all(...params);\n        return rows.map((row)=>{\n            const typedRow = row;\n            return {\n                id: typedRow.id,\n                event_type: typedRow.event_type,\n                entity_id: typedRow.entity_id,\n                entity_type: typedRow.entity_type,\n                data: JSON.parse(typedRow.data),\n                timestamp: new Date(typedRow.timestamp),\n                user_id: typedRow.user_id,\n                session_id: typedRow.session_id,\n                metadata: typedRow.metadata ? JSON.parse(typedRow.metadata) : null\n            };\n        });\n    }\n    async getEventCount(query) {\n        let sql = `\n      SELECT COUNT(*) as count\n      FROM analytics_events\n      WHERE 1=1\n    `;\n        const params = [];\n        if (query.event_type) {\n            sql += ` AND event_type = ?`;\n            params.push(query.event_type);\n        }\n        if (query.entity_type) {\n            sql += ` AND entity_type = ?`;\n            params.push(query.entity_type);\n        }\n        if (query.entity_id) {\n            sql += ` AND entity_id = ?`;\n            params.push(query.entity_id);\n        }\n        if (query.start_time) {\n            sql += ` AND timestamp >= ?`;\n            params.push(query.start_time.getTime());\n        }\n        if (query.end_time) {\n            sql += ` AND timestamp <= ?`;\n            params.push(query.end_time.getTime());\n        }\n        const stmt = this.db.prepare(sql);\n        const result = stmt.get(...params);\n        return result.count;\n    }\n    async storeMetric(metricType, metricName, value, dimensions, period = 'hour') {\n        const stmt = this.db.prepare(`\n      INSERT INTO analytics_metrics (metric_type, metric_name, value, dimensions, timestamp, period)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n        stmt.run(metricType, metricName, value, dimensions ? JSON.stringify(dimensions) : null, Date.now(), period);\n    }\n    async getMetrics(metricType, metricName, startTime, endTime, period) {\n        let sql = `\n      SELECT metric_name, value, dimensions, timestamp, period\n      FROM analytics_metrics\n      WHERE metric_type = ? AND metric_name = ?\n    `;\n        const params = [\n            metricType,\n            metricName\n        ];\n        if (startTime) {\n            sql += ` AND timestamp >= ?`;\n            params.push(startTime.getTime());\n        }\n        if (endTime) {\n            sql += ` AND timestamp <= ?`;\n            params.push(endTime.getTime());\n        }\n        if (period) {\n            sql += ` AND period = ?`;\n            params.push(period);\n        }\n        sql += ` ORDER BY timestamp DESC`;\n        const stmt = this.db.prepare(sql);\n        const rows = stmt.all(...params);\n        return rows.map((row)=>{\n            const typedRow = row;\n            return {\n                metric_name: typedRow.metric_name,\n                value: typedRow.value,\n                dimensions: typedRow.dimensions ? JSON.parse(typedRow.dimensions) : null,\n                timestamp: new Date(typedRow.timestamp),\n                period: typedRow.period\n            };\n        });\n    }\n    async clearOldEvents(olderThanDays = 90) {\n        const cutoffTime = new Date();\n        cutoffTime.setDate(cutoffTime.getDate() - olderThanDays);\n        const stmt = this.db.prepare(`\n      DELETE FROM analytics_events\n      WHERE timestamp < ?\n    `);\n        const result = stmt.run(cutoffTime.getTime());\n        return result.changes;\n    }\n    constructor(){\n        _define_property(this, \"db\", void 0);\n        this.db = initializeDatabase();\n        this.initializeEventStore();\n    }\n}\n_define_property(EventStore, \"instance\", void 0);\n"],"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","ignoreList":[]}