{"version":3,"names":["cov_1tpc81qxah","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","CRDTService","initializeDocument","documentId","initialContent","document","id","nodes","Map","deletedNodes","Set","version","node","generateNodeId","position","major","minor","userId","content","visible","timestamp","Date","now","set","documents","insert","afterPosition","get","Error","generatePosition","nodeId","incrementVersion","operation","generateOperationId","type","causality","getVectorClock","delete","findNodeAtPosition","add","applyOperation","checkCausality","existingNode","getDocumentContent","visibleNodes","Array","from","values","filter","sort","a","comparePositions","map","join","userCounter","userIdCounter","afterIndex","findIndex","length","beforePosition","pos1","pos2","localeCompare","requiredVector","entries","currentVersion","Math","random","toString","substr","getDocumentState","nodeCount","size","deletedNodeCount","mergeDocuments","remoteDocument","localDocument","has","deletedNodeId","localVersion","max","getMetrics","documentsCount","totalNodes","totalDeletedNodes","averageNodesPerDocument","constructor"],"sources":["CRDTService.ts"],"sourcesContent":["/**\n * Conflict-free Replicated Data Types (CRDT) Service\n * Implements CRDT algorithms for distributed synchronization without conflicts\n */ function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nexport class CRDTService {\n    /**\n   * Initialize CRDT document\n   */ initializeDocument(documentId, initialContent) {\n        const document = {\n            id: documentId,\n            nodes: new Map(),\n            deletedNodes: new Set(),\n            version: new Map()\n        };\n        if (initialContent) {\n            // Initialize with content as a single node\n            const node = {\n                id: this.generateNodeId(),\n                position: {\n                    major: 0,\n                    minor: 0,\n                    userId: 'system'\n                },\n                content: initialContent,\n                visible: true,\n                userId: 'system',\n                timestamp: Date.now()\n            };\n            document.nodes.set(node.id, node);\n        }\n        this.documents.set(documentId, document);\n        return document;\n    }\n    /**\n   * Insert content at logical position\n   */ insert(documentId, content, afterPosition, userId) {\n        const document = this.documents.get(documentId);\n        if (!document) {\n            throw new Error(`Document ${documentId} not found`);\n        }\n        // Generate logical position between two positions\n        const position = this.generatePosition(document, afterPosition, userId);\n        const nodeId = this.generateNodeId();\n        const node = {\n            id: nodeId,\n            position,\n            content,\n            visible: true,\n            userId,\n            timestamp: Date.now()\n        };\n        document.nodes.set(nodeId, node);\n        this.incrementVersion(document, userId);\n        const operation = {\n            id: this.generateOperationId(),\n            type: 'insert',\n            position,\n            content,\n            userId,\n            timestamp: node.timestamp,\n            documentId,\n            causality: this.getVectorClock(document)\n        };\n        return operation;\n    }\n    /**\n   * Delete content at logical position\n   */ delete(documentId, position, userId) {\n        const document = this.documents.get(documentId);\n        if (!document) {\n            throw new Error(`Document ${documentId} not found`);\n        }\n        // Find node at position\n        const nodeId = this.findNodeAtPosition(document, position);\n        if (nodeId) {\n            document.deletedNodes.add(nodeId);\n            const node = document.nodes.get(nodeId);\n            if (node) {\n                node.visible = false;\n            }\n        }\n        this.incrementVersion(document, userId);\n        const operation = {\n            id: this.generateOperationId(),\n            type: 'delete',\n            position,\n            userId,\n            timestamp: Date.now(),\n            documentId,\n            causality: this.getVectorClock(document)\n        };\n        return operation;\n    }\n    /**\n   * Apply remote operation to document\n   */ applyOperation(operation) {\n        const document = this.documents.get(operation.documentId);\n        if (!document) {\n            return false;\n        }\n        // Check causality - ensure all required operations have been applied\n        if (!this.checkCausality(document, operation.causality)) {\n            return false; // Operation should be buffered until causality is satisfied\n        }\n        switch(operation.type){\n            case 'insert':\n                const node = {\n                    id: this.generateNodeId(),\n                    position: operation.position,\n                    content: operation.content || '',\n                    visible: true,\n                    userId: operation.userId,\n                    timestamp: operation.timestamp\n                };\n                document.nodes.set(node.id, node);\n                break;\n            case 'delete':\n                const nodeId = this.findNodeAtPosition(document, operation.position);\n                if (nodeId) {\n                    document.deletedNodes.add(nodeId);\n                    const existingNode = document.nodes.get(nodeId);\n                    if (existingNode) {\n                        existingNode.visible = false;\n                    }\n                }\n                break;\n        }\n        this.incrementVersion(document, operation.userId);\n        return true;\n    }\n    /**\n   * Get document content as string\n   */ getDocumentContent(documentId) {\n        const document = this.documents.get(documentId);\n        if (!document) {\n            return '';\n        }\n        // Sort nodes by logical position and concatenate visible content\n        const visibleNodes = Array.from(document.nodes.values()).filter((node)=>node.visible).sort((a, b)=>this.comparePositions(a.position, b.position));\n        return visibleNodes.map((node)=>node.content).join('');\n    }\n    /**\n   * Generate logical position between two positions\n   */ generatePosition(document, afterPosition, userId) {\n        const userCounter = this.userIdCounter.get(userId) || 0;\n        this.userIdCounter.set(userId, userCounter + 1);\n        if (!afterPosition) {\n            // Insert at beginning\n            return {\n                major: 0,\n                minor: userCounter,\n                userId\n            };\n        }\n        // Find next position\n        const nodes = Array.from(document.nodes.values()).filter((node)=>node.visible).sort((a, b)=>this.comparePositions(a.position, b.position));\n        const afterIndex = nodes.findIndex((node)=>this.comparePositions(node.position, afterPosition) === 0);\n        if (afterIndex === -1 || afterIndex === nodes.length - 1) {\n            // Insert at end\n            return {\n                major: afterPosition.major + 1,\n                minor: userCounter,\n                userId\n            };\n        }\n        const beforePosition = nodes[afterIndex + 1].position;\n        // Generate position between afterPosition and beforePosition\n        if (afterPosition.major < beforePosition.major) {\n            return {\n                major: afterPosition.major,\n                minor: afterPosition.minor + 1,\n                userId\n            };\n        } else {\n            // Need to create fractional position\n            return {\n                major: afterPosition.major,\n                minor: afterPosition.minor + 0.5,\n                userId\n            };\n        }\n    }\n    /**\n   * Compare logical positions\n   */ comparePositions(pos1, pos2) {\n        if (pos1.major !== pos2.major) {\n            return pos1.major - pos2.major;\n        }\n        if (pos1.minor !== pos2.minor) {\n            return pos1.minor - pos2.minor;\n        }\n        return pos1.userId.localeCompare(pos2.userId);\n    }\n    /**\n   * Find node at logical position\n   */ findNodeAtPosition(document, position) {\n        for (const [nodeId, node] of document.nodes){\n            if (this.comparePositions(node.position, position) === 0) {\n                return nodeId;\n            }\n        }\n        return null;\n    }\n    /**\n   * Check if causality constraints are satisfied\n   */ checkCausality(document, requiredVector) {\n        // Simple causality check - in a real implementation, this would be more sophisticated\n        return true; // For now, accept all operations\n    }\n    /**\n   * Get vector clock for document\n   */ getVectorClock(document) {\n        return Array.from(document.version.entries()).map(([userId, version])=>`${userId}:${version}`);\n    }\n    /**\n   * Increment version for user\n   */ incrementVersion(document, userId) {\n        const currentVersion = document.version.get(userId) || 0;\n        document.version.set(userId, currentVersion + 1);\n    }\n    /**\n   * Generate unique node ID\n   */ generateNodeId() {\n        return `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\n   * Generate unique operation ID\n   */ generateOperationId() {\n        return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\n   * Get document state for debugging\n   */ getDocumentState(documentId) {\n        const document = this.documents.get(documentId);\n        if (!document) {\n            return null;\n        }\n        return {\n            content: this.getDocumentContent(documentId),\n            nodeCount: document.nodes.size,\n            deletedNodeCount: document.deletedNodes.size,\n            version: new Map(document.version)\n        };\n    }\n    /**\n   * Merge documents from different replicas\n   */ mergeDocuments(documentId, remoteDocument) {\n        const localDocument = this.documents.get(documentId);\n        if (!localDocument) {\n            this.documents.set(documentId, remoteDocument);\n            return;\n        }\n        // Merge nodes\n        for (const [nodeId, node] of remoteDocument.nodes){\n            if (!localDocument.nodes.has(nodeId)) {\n                localDocument.nodes.set(nodeId, node);\n            }\n        }\n        // Merge deleted nodes\n        for (const deletedNodeId of remoteDocument.deletedNodes){\n            localDocument.deletedNodes.add(deletedNodeId);\n            const node = localDocument.nodes.get(deletedNodeId);\n            if (node) {\n                node.visible = false;\n            }\n        }\n        // Merge vector clocks\n        for (const [userId, version] of remoteDocument.version){\n            const localVersion = localDocument.version.get(userId) || 0;\n            localDocument.version.set(userId, Math.max(localVersion, version));\n        }\n    }\n    /**\n   * Get CRDT metrics\n   */ getMetrics() {\n        const documentsCount = this.documents.size;\n        let totalNodes = 0;\n        let totalDeletedNodes = 0;\n        for (const document of this.documents.values()){\n            totalNodes += document.nodes.size;\n            totalDeletedNodes += document.deletedNodes.size;\n        }\n        return {\n            documentsCount,\n            totalNodes,\n            totalDeletedNodes,\n            averageNodesPerDocument: documentsCount > 0 ? totalNodes / documentsCount : 0\n        };\n    }\n    constructor(){\n        _define_property(this, \"documents\", new Map());\n        _define_property(this, \"userIdCounter\", new Map());\n    }\n}\nexport default CRDTService;\n"],"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","ignoreList":[]}