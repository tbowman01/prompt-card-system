{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/alerts.ts"],"sourcesContent":["import { Router } from 'express';\nimport { alertingSystem, AlertSeverity } from '../services/health/AlertingSystem';\n\nconst router = Router();\n\n// Get all alerts with optional filtering\nrouter.get('/', async (req, res) => {\n  try {\n    const {\n      service,\n      severity,\n      acknowledged,\n      resolved,\n      limit\n    } = req.query;\n\n    const filters: any = {};\n    \n    if (service) filters.service = service as string;\n    if (severity) filters.severity = severity as AlertSeverity;\n    if (acknowledged !== undefined) filters.acknowledged = acknowledged === 'true';\n    if (resolved !== undefined) filters.resolved = resolved === 'true';\n    if (limit) filters.limit = parseInt(limit as string, 10);\n\n    const alerts = alertingSystem.getAlerts(filters);\n    \n    res.json({\n      alerts,\n      total: alerts.length,\n      filters: filters\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alerts',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get alert statistics\nrouter.get('/stats', async (req, res) => {\n  try {\n    const stats = alertingSystem.getAlertStats();\n    res.json(stats);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert statistics',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get specific alert by ID\nrouter.get('/:alertId', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const alerts = alertingSystem.getAlerts();\n    const alert = alerts.find(a => a.id === alertId);\n    \n    if (!alert) {\n      return res.status(404).json({\n        error: 'Alert not found',\n        alertId\n      });\n    }\n    \n    res.json(alert);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Acknowledge an alert\nrouter.post('/:alertId/acknowledge', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const success = alertingSystem.acknowledgeAlert(alertId);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert not found',\n        alertId\n      });\n    }\n    \n    res.json({\n      message: 'Alert acknowledged successfully',\n      alertId,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to acknowledge alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Resolve an alert\nrouter.post('/:alertId/resolve', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const success = alertingSystem.resolveAlert(alertId);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert not found',\n        alertId\n      });\n    }\n    \n    res.json({\n      message: 'Alert resolved successfully',\n      alertId,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to resolve alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get alert rules\nrouter.get('/rules/list', async (req, res) => {\n  try {\n    const rules = alertingSystem.getAlertRules();\n    res.json({ rules });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert rules',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Add new alert rule\nrouter.post('/rules', async (req, res) => {\n  try {\n    const rule = req.body;\n    \n    // Basic validation\n    if (!rule.id || !rule.name || !rule.type || !rule.severity) {\n      return res.status(400).json({\n        error: 'Missing required fields',\n        required: ['id', 'name', 'type', 'severity']\n      });\n    }\n    \n    alertingSystem.addAlertRule(rule);\n    \n    res.status(201).json({\n      message: 'Alert rule created successfully',\n      rule\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to create alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Update alert rule\nrouter.put('/rules/:ruleId', async (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const updates = req.body;\n    \n    const success = alertingSystem.updateAlertRule(ruleId, updates);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert rule not found',\n        ruleId\n      });\n    }\n    \n    res.json({\n      message: 'Alert rule updated successfully',\n      ruleId,\n      updates\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Delete alert rule\nrouter.delete('/rules/:ruleId', async (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const success = alertingSystem.removeAlertRule(ruleId);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert rule not found',\n        ruleId\n      });\n    }\n    \n    res.json({\n      message: 'Alert rule deleted successfully',\n      ruleId\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Real-time alert stream\nrouter.get('/stream/live', (req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    'Connection': 'keep-alive',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Cache-Control'\n  });\n\n  const sendEvent = (data: any) => {\n    res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n  };\n\n  // Send initial stats\n  const initialStats = alertingSystem.getAlertStats();\n  sendEvent({\n    type: 'stats',\n    data: initialStats\n  });\n\n  // Set up event listeners\n  const onAlertCreated = (alert: any) => {\n    sendEvent({ type: 'alertCreated', data: alert });\n  };\n\n  const onAlertAcknowledged = (alert: any) => {\n    sendEvent({ type: 'alertAcknowledged', data: alert });\n  };\n\n  const onAlertResolved = (alert: any) => {\n    sendEvent({ type: 'alertResolved', data: alert });\n  };\n\n  alertingSystem.on('alertCreated', onAlertCreated);\n  alertingSystem.on('alertAcknowledged', onAlertAcknowledged);\n  alertingSystem.on('alertResolved', onAlertResolved);\n\n  // Handle client disconnect\n  req.on('close', () => {\n    alertingSystem.off('alertCreated', onAlertCreated);\n    alertingSystem.off('alertAcknowledged', onAlertAcknowledged);\n    alertingSystem.off('alertResolved', onAlertResolved);\n  });\n});\n\nexport { router as alertRoutes };"],"names":["alertRoutes","router","Router","get","req","res","service","severity","acknowledged","resolved","limit","query","filters","undefined","parseInt","alerts","alertingSystem","getAlerts","json","total","length","error","status","message","Error","stats","getAlertStats","alertId","params","alert","find","a","id","post","success","acknowledgeAlert","timestamp","Date","toISOString","resolveAlert","rules","getAlertRules","rule","body","name","type","required","addAlertRule","put","ruleId","updates","updateAlertRule","delete","removeAlertRule","writeHead","sendEvent","data","write","JSON","stringify","initialStats","onAlertCreated","onAlertAcknowledged","onAlertResolved","on","off"],"mappings":"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"}