{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/server.ts"],"sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport dotenv from 'dotenv';\nimport { createServer } from 'http';\nimport { Server as SocketIOServer } from 'socket.io';\n\n// Security middleware imports\nimport { \n  generalRateLimit, \n  apiRateLimit, \n  testExecutionRateLimit,\n  heavyOperationRateLimit,\n  speedLimiter \n} from './middleware/rateLimiting';\nimport {\n  enhancedHelmetConfig,\n  requestId,\n  securityLogger,\n  securityHeaders,\n  csrfProtection,\n  getCSRFToken\n} from './middleware/security';\nimport { sanitizeRequestBody, limitRequestSize } from './middleware/validation';\nimport { optionalAuth } from './middleware/auth';\nimport { initializeDatabase } from './database/connection';\nimport { llmService } from './services/llmService';\nimport { healthRoutes } from './routes/health';\nimport { enhancedHealthRoutes } from './routes/health-enhanced';\nimport { healthOrchestratorRoutes } from './routes/health-orchestrator';\nimport { alertRoutes } from './routes/alerts';\nimport { promptCardRoutes } from './routes/promptCards';\nimport { testCaseRoutes } from './routes/testCases';\nimport { testExecutionRoutes } from './routes/testExecution';\nimport { parallelTestExecutionRoutes } from './routes/parallelTestExecution';\nimport { yamlRoutes } from './routes/yaml';\nimport { assertionRoutes } from './routes/assertions';\nimport { analyticsRoutes } from './routes/analytics';\nimport { predictiveAnalyticsRoutes } from './routes/predictive-analytics';\nimport optimizationRoutes from './routes/optimization';\nimport { reportRoutes } from './routes/reports';\nimport performanceRoutes from './routes/performance';\nimport trainingRoutes from './routes/training';\nimport { authRoutes } from './routes/auth';\nimport loadTestingRoutes from './routes/loadTesting';\nimport { securityRoutes } from './routes/security';\nimport { initializeOptimizationServices } from './services/optimization';\nimport { performanceMonitor } from './services/performance/PerformanceMonitor';\nimport { loadTestScheduler } from './services/performance/LoadTestScheduler';\nimport { performanceRegressionDetector } from './services/performance/PerformanceRegressionDetector';\nimport { ProgressService } from './services/websocket/ProgressService';\nimport { errorHandler } from './middleware/errorHandler';\nimport { healthOrchestrator } from './services/health/HealthOrchestrator';\nimport { alertingSystem } from './services/health/AlertingSystem';\nimport { modelTrainingEngine } from './services/training/ModelTrainingEngine';\nimport { modelRegistry } from './services/training/ModelRegistry';\nimport { securityMonitor, logAggregator, alertingSystem as securityAlerting, complianceChecker } from './services/security';\nimport { mlAnalyticsCoordinator } from './services/analytics/MLAnalyticsCoordinator';\n\ndotenv.config();\n\nconst app = express();\nconst server = createServer(app);\nconst PORT = process.env.PORT || 3001;\n\n// Trust proxy for correct IP detection behind reverse proxy\napp.set('trust proxy', 1);\n\n// Security middleware (order matters!)\napp.use(requestId); // Add request ID for tracing\napp.use(securityLogger); // Log security-relevant information\napp.use(enhancedHelmetConfig); // Enhanced security headers\napp.use(securityHeaders); // Additional security headers\napp.use(speedLimiter); // Slow down requests after threshold\napp.use(generalRateLimit); // General rate limiting\n\n// CORS configuration with security considerations\napp.use(cors({\n  origin: function (origin, callback) {\n    const allowedOrigins = (process.env.CORS_ORIGIN || 'http://localhost:3000').split(',');\n    \n    // Allow requests with no origin (mobile apps, curl, etc.)\n    if (!origin) return callback(null, true);\n    \n    if (allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'X-CSRF-Token', 'X-Session-ID', 'X-Request-ID'],\n  exposedHeaders: ['X-Request-ID', 'X-RateLimit-Limit', 'X-RateLimit-Remaining']\n}));\n// Setup log aggregation middleware\napp.use(logAggregator.getExpressMiddleware());\n\n// Morgan logging with custom format\napp.use(morgan('combined', {\n  skip: (req, res) => res.statusCode < 400 // Only log errors in production\n}));\n\n// Body parsing with security limits\napp.use(limitRequestSize(10 * 1024 * 1024)); // 10MB limit\napp.use(express.json({ \n  limit: '10mb',\n  verify: (req, res, buf, encoding) => {\n    // Store raw body for webhook verification if needed\n    (req as any).rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ \n  extended: true, \n  limit: '10mb',\n  parameterLimit: 100 // Limit number of parameters\n}));\n\n// Input sanitization (applied globally)\napp.use(sanitizeRequestBody);\n\n// Optional authentication for all routes (doesn't fail if no token)\napp.use(optionalAuth);\n\n// Initialize database\nconst db = initializeDatabase();\n\n// Initialize LLM service with enhanced assertion engine\nllmService.initialize().catch(error => {\n  console.error('Failed to initialize LLM service:', error);\n  // Continue without enhanced assertions if initialization fails\n});\n\n// Initialize AI-powered optimization services\ninitializeOptimizationServices().catch(error => {\n  console.error('Failed to initialize optimization services:', error);\n  // Continue without optimization services if initialization fails\n});\n\n// Setup WebSocket server\nconst io = new SocketIOServer(server, {\n  cors: {\n    origin: process.env.CORS_ORIGIN || 'http://localhost:3000',\n    methods: ['GET', 'POST'],\n    credentials: true\n  }\n});\n\n// Initialize performance monitoring\nconst progressService = new ProgressService(io);\nperformanceMonitor.startMonitoring(5000); // Monitor every 5 seconds\n\n// Initialize health orchestrator\nhealthOrchestrator.start().catch(error => {\n  console.error('Failed to start health orchestrator:', error);\n});\n\n// Initialize alerting system\nalertingSystem.initialize().catch(error => {\n  console.error('Failed to initialize alerting system:', error);\n});\n\n// Initialize training services\nmodelTrainingEngine.initialize().catch(error => {\n  console.error('Failed to initialize model training engine:', error);\n});\n\nmodelRegistry.initialize().catch(error => {\n  console.error('Failed to initialize model registry:', error);\n});\n\n// Initialize load testing services\nloadTestScheduler.initialize().catch(error => {\n  console.error('Failed to initialize load test scheduler:', error);\n});\n\nperformanceRegressionDetector.startMonitoring(15).catch?.(error => {\n  console.error('Failed to start regression monitoring:', error);\n}) || performanceRegressionDetector.startMonitoring(15);\n\n// Initialize security monitoring systems\nconsole.log('Initializing security monitoring systems...');\nlogAggregator.info('server', 'Security monitoring systems starting up', {}, ['security', 'startup']);\n\n// Perform initial security scan\nsecurityMonitor.performComprehensiveScan().then(() => {\n  logAggregator.info('server', 'Initial security scan completed', {}, ['security', 'scan']);\n}).catch(error => {\n  logAggregator.error('server', 'Initial security scan failed', { error }, ['security', 'error']);\n});\n\n// Generate initial compliance report\ncomplianceChecker.generateComplianceReport().then(() => {\n  logAggregator.info('server', 'Initial compliance report generated', {}, ['compliance', 'report']);\n}).catch(error => {\n  logAggregator.error('server', 'Initial compliance report failed', { error }, ['compliance', 'error']);\n});\n\n// Initialize ML Analytics Coordinator\nconsole.log('Initializing ML Analytics Coordinator...');\nmlAnalyticsCoordinator.initialize().then(() => {\n  console.log('ML Analytics Coordinator initialized successfully');\n  return mlAnalyticsCoordinator.start();\n}).then(() => {\n  console.log('ML Analytics Coordinator started successfully');\n}).catch(error => {\n  console.error('Failed to initialize ML Analytics Coordinator:', error);\n});\n\n// Security endpoints (no rate limiting for CSRF token)\napp.get('/api/security/csrf-token', getCSRFToken);\n\n// Authentication routes (with auth-specific rate limiting)\napp.use('/api/auth', authRoutes);\n\n// API routes with appropriate rate limiting\napp.use('/api/health', healthRoutes);\napp.use('/api/health/v2', enhancedHealthRoutes);\napp.use('/api/health/orchestrator', healthOrchestratorRoutes);\napp.use('/api/alerts', apiRateLimit, alertRoutes);\napp.use('/api/prompt-cards', apiRateLimit, promptCardRoutes);\napp.use('/api/test-cases', apiRateLimit, testCaseRoutes);\napp.use('/api/test-cases', testExecutionRateLimit, testExecutionRoutes); // Test execution routes\napp.use('/api/parallel-test-execution', testExecutionRateLimit, parallelTestExecutionRoutes); // Parallel test execution routes\napp.use('/api/yaml', apiRateLimit, yamlRoutes);\napp.use('/api/assertions', apiRateLimit, assertionRoutes);\napp.use('/api/analytics', apiRateLimit, analyticsRoutes);\napp.use('/api/predictive-analytics', predictiveAnalyticsRoutes);\napp.use('/api/optimization', heavyOperationRateLimit, optimizationRoutes); // Heavy operations\napp.use('/api/reports', heavyOperationRateLimit, reportRoutes); // Heavy operations\napp.use('/api/performance', apiRateLimit, performanceRoutes);\napp.use('/api/training', heavyOperationRateLimit, trainingRoutes); // Heavy operations\napp.use('/api/load-testing', loadTestingRoutes);\napp.use('/api/security', securityRoutes);\n\n// Error handling middleware\napp.use(errorHandler);\n\n// Store WebSocket instance for health checks and log aggregator\napp.set('io', io);\napp.set('logAggregator', logAggregator);\n\n// Start server\nserver.listen(PORT, () => {\n  console.log(`🚀 Backend server running on port ${PORT}`);\n  console.log(`🌍 Environment: ${process.env.NODE_ENV}`);\n  console.log(`💾 Database path: ${process.env.DATABASE_PATH}`);\n  console.log(`🤖 Ollama URL: ${process.env.OLLAMA_BASE_URL}`);\n  console.log(`🔌 WebSocket server initialized`);\n  console.log(`⚡ Parallel test execution system ready`);\n  console.log(`🧠 AI-powered prompt optimization services active`);\n  console.log(`📊 Performance monitoring active`);\n  console.log(`📈 Performance API available at /api/performance`);\n  console.log(`🏥 Health orchestrator system active`);\n  console.log(`📋 Health dashboard available at /api/health/orchestrator/summary`);\n  console.log(`🚨 Alerting system active`);\n  console.log(`📢 Alerts API available at /api/alerts`);\n  console.log(`🧪 Load testing framework active`);\n  console.log(`⚡ Load testing API available at /api/load-testing`);\n  console.log(`📉 Performance regression detection active`);\n  console.log(`⏰ Automated load test scheduling enabled`);\n  console.log(`🛡️ Security monitoring system active`);\n  console.log(`🔒 Security API available at /api/security`);\n  console.log(`🔍 Vulnerability scanning enabled`);\n  console.log(`✅ Compliance checking active`);\n  console.log(`📝 Log aggregation and analysis enabled`);\n  console.log(`🔮 Predictive Analytics API available at /api/predictive-analytics`);\n  console.log(`🤖 ML-powered anomaly detection active`);\n  console.log(`📊 Capacity planning and forecasting enabled`);\n  console.log(`🎯 Auto-training ML models enabled`);\n  \n  // Security status\n  console.log(`\\n🔒 Security Features Active:`);\n  console.log(`   ✅ Rate limiting enabled`);\n  console.log(`   ✅ Enhanced security headers`);\n  console.log(`   ✅ Input validation and sanitization`);\n  console.log(`   ✅ CSRF protection`);\n  console.log(`   ✅ JWT authentication`);\n  console.log(`   ✅ Request logging and monitoring`);\n  console.log(`   ✅ Content Security Policy`);\n  console.log(`   🔑 Auth API available at /api/auth`);\n  console.log(`   🛡️ CSRF token endpoint at /api/security/csrf-token`);\n  \n  if (process.env.NODE_ENV === 'production') {\n    console.log(`\\n🛡️ Production Security Reminders:`);\n    console.log(`   - Update JWT_SECRET and JWT_REFRESH_SECRET`);\n    console.log(`   - Configure Redis for distributed rate limiting`);\n    console.log(`   - Set up proper CORS origins`);\n    console.log(`   - Enable HTTPS`);\n    console.log(`   - Configure proper CSP directives`);\n  }\n});\n\nexport default app;"],"names":["dotenv","config","app","express","server","createServer","PORT","process","env","set","use","requestId","securityLogger","enhancedHelmetConfig","securityHeaders","speedLimiter","generalRateLimit","cors","origin","callback","allowedOrigins","CORS_ORIGIN","split","indexOf","Error","credentials","methods","allowedHeaders","exposedHeaders","logAggregator","getExpressMiddleware","morgan","skip","req","res","statusCode","limitRequestSize","json","limit","verify","buf","encoding","rawBody","urlencoded","extended","parameterLimit","sanitizeRequestBody","optionalAuth","db","initializeDatabase","llmService","initialize","catch","error","console","initializeOptimizationServices","io","SocketIOServer","progressService","ProgressService","performanceMonitor","startMonitoring","healthOrchestrator","start","alertingSystem","modelTrainingEngine","modelRegistry","loadTestScheduler","performanceRegressionDetector","log","info","securityMonitor","performComprehensiveScan","then","complianceChecker","generateComplianceReport","mlAnalyticsCoordinator","get","getCSRFToken","authRoutes","healthRoutes","enhancedHealthRoutes","healthOrchestratorRoutes","apiRateLimit","alertRoutes","promptCardRoutes","testCaseRoutes","testExecutionRateLimit","testExecutionRoutes","parallelTestExecutionRoutes","yamlRoutes","assertionRoutes","analyticsRoutes","predictiveAnalyticsRoutes","heavyOperationRateLimit","optimizationRoutes","reportRoutes","performanceRoutes","trainingRoutes","loadTestingRoutes","securityRoutes","errorHandler","listen","NODE_ENV","DATABASE_PATH","OLLAMA_BASE_URL"],"mappings":"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"}