{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/tests/predictive-analytics.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../server';\nimport { mlAnalyticsCoordinator } from '../services/analytics/MLAnalyticsCoordinator';\nimport { anomalyDetector } from '../services/analytics/AnomalyDetector';\nimport { capacityPlanner } from '../services/analytics/CapacityPlanner';\n\ndescribe('Predictive Analytics API', () => {\n  beforeAll(async () => {\n    // Initialize ML Analytics Coordinator for testing\n    await mlAnalyticsCoordinator.initialize();\n  });\n\n  afterAll(async () => {\n    // Clean up\n    await mlAnalyticsCoordinator.stop();\n  });\n\n  describe('Health Check', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/health')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('predictiveAnalytics');\n      expect(response.body.data).toHaveProperty('anomalyDetection');\n      expect(response.body.data).toHaveProperty('capacityPlanning');\n    });\n  });\n\n  describe('Model Training', () => {\n    it('should train capacity prediction model', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/models/capacity/train')\n        .send({\n          metric: 'cpu_usage',\n          timeframeDays: 7\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('modelId');\n      expect(response.body.data).toHaveProperty('accuracy');\n    });\n\n    it('should train anomaly detection model', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/models/anomaly/train')\n        .send({\n          metrics: ['cpu_usage', 'memory_usage'],\n          timeframeDays: 7\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('modelId');\n      expect(response.body.data).toHaveProperty('features');\n    });\n\n    it('should handle insufficient training data', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/models/capacity/train')\n        .send({\n          metric: 'nonexistent_metric',\n          timeframeDays: 1\n        })\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Insufficient training data');\n    });\n  });\n\n  describe('Predictions', () => {\n    it('should get capacity predictions', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/predictions/capacity')\n        .query({\n          metric: 'cpu_usage',\n          timeframe: '24h'\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('metric');\n      expect(response.body.data).toHaveProperty('currentValue');\n      expect(response.body.data).toHaveProperty('predictedValue');\n      expect(response.body.data).toHaveProperty('confidence');\n    });\n\n    it('should require metric parameter for predictions', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/predictions/capacity')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Metric parameter is required');\n    });\n\n    it('should get growth projections', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/projections/growth')\n        .query({\n          metric: 'memory_usage',\n          projectionDays: 14\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('current');\n      expect(response.body.data).toHaveProperty('projected');\n      expect(response.body.data).toHaveProperty('growthRate');\n      expect(response.body.data).toHaveProperty('recommendations');\n    });\n  });\n\n  describe('Anomaly Detection', () => {\n    it('should detect anomalies', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/anomalies/detect')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n    });\n\n    it('should start anomaly detection', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/anomaly-detection/start')\n        .send({ intervalMs: 60000 })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('started');\n    });\n\n    it('should stop anomaly detection', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/anomaly-detection/stop')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('stopped');\n    });\n\n    it('should get active alerts', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/anomaly-detection/alerts')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n    });\n\n    it('should get detection statistics', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/anomaly-detection/stats')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('totalAlerts');\n      expect(response.body.data).toHaveProperty('activeAlerts');\n      expect(response.body.data).toHaveProperty('detectionAccuracy');\n    });\n\n    it('should update statistical thresholds', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/anomaly-detection/thresholds')\n        .send({\n          metric: 'cpu_usage',\n          windowDays: 7\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('metric');\n      expect(response.body.data).toHaveProperty('upperBound');\n      expect(response.body.data).toHaveProperty('lowerBound');\n    });\n  });\n\n  describe('Capacity Planning', () => {\n    it('should start capacity monitoring', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/capacity/monitoring/start')\n        .send({ intervalMs: 300000 })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('started');\n    });\n\n    it('should generate capacity forecast', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/capacity/forecast')\n        .query({\n          resources: 'cpu,memory,storage',\n          timeframes: '1h,6h,24h'\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeInstanceOf(Object);\n    });\n\n    it('should generate scaling recommendations', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/capacity/recommendations/scaling')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n    });\n\n    it('should create growth projections', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/capacity/projections/cpu')\n        .query({ projectionDays: 30 })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('current');\n      expect(response.body.data).toHaveProperty('projected');\n      expect(response.body.data).toHaveProperty('seasonality');\n      expect(response.body.data).toHaveProperty('scenarios');\n    });\n\n    it('should generate optimization recommendations', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/capacity/recommendations/optimization')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('cpu');\n      expect(response.body.data).toHaveProperty('memory');\n      expect(response.body.data).toHaveProperty('storage');\n    });\n\n    it('should get capacity alerts', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/capacity/alerts')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n    });\n\n    it('should get capacity dashboard', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/capacity/dashboard')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('overview');\n      expect(response.body.data).toHaveProperty('resources');\n      expect(response.body.data).toHaveProperty('alerts');\n      expect(response.body.data).toHaveProperty('recommendations');\n      expect(response.body.data).toHaveProperty('forecasts');\n    });\n  });\n\n  describe('ML Insights', () => {\n    it('should generate ML insights', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/insights')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n    });\n\n    it('should auto-retrain models', async () => {\n      const response = await request(app)\n        .post('/api/predictive-analytics/models/retrain')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('retrained');\n    });\n  });\n\n  describe('Alert Management', () => {\n    it('should acknowledge an alert', async () => {\n      // First create a mock alert ID\n      const alertId = 'test_alert_123';\n      \n      const response = await request(app)\n        .post(`/api/predictive-analytics/anomaly-detection/alerts/${alertId}/acknowledge`)\n        .send({ userId: 'test_user' })\n        .expect(404); // Will be 404 for non-existent alert\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('not found');\n    });\n\n    it('should resolve an alert', async () => {\n      // First create a mock alert ID\n      const alertId = 'test_alert_123';\n      \n      const response = await request(app)\n        .post(`/api/predictive-analytics/anomaly-detection/alerts/${alertId}/resolve`)\n        .send({ userId: 'test_user' })\n        .expect(404); // Will be 404 for non-existent alert\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('not found');\n    });\n  });\n\n  describe('Configuration Management', () => {\n    it('should update detection configuration', async () => {\n      const response = await request(app)\n        .put('/api/predictive-analytics/anomaly-detection/config')\n        .send({\n          sensitivity: 'high',\n          alertThreshold: 0.8\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('updated');\n    });\n\n    it('should export detection data', async () => {\n      const response = await request(app)\n        .get('/api/predictive-analytics/anomaly-detection/export')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('config');\n      expect(response.body.data).toHaveProperty('models');\n      expect(response.body.data).toHaveProperty('alerts');\n      expect(response.body.data).toHaveProperty('stats');\n    });\n  });\n});\n\ndescribe('ML Analytics Coordinator', () => {\n  it('should get system health score', async () => {\n    const healthScore = await mlAnalyticsCoordinator.getSystemHealthScore();\n    \n    expect(healthScore).toHaveProperty('overall');\n    expect(healthScore).toHaveProperty('components');\n    expect(healthScore).toHaveProperty('trends');\n    expect(healthScore).toHaveProperty('riskLevel');\n    expect(healthScore).toHaveProperty('recommendations');\n    expect(Array.isArray(healthScore.recommendations)).toBe(true);\n  });\n\n  it('should get analytics summary', async () => {\n    const summary = await mlAnalyticsCoordinator.getAnalyticsSummary();\n    \n    expect(summary).toHaveProperty('timestamp');\n    expect(summary).toHaveProperty('systemHealth');\n    expect(summary).toHaveProperty('uptime');\n    expect(summary).toHaveProperty('insights');\n  });\n\n  it('should get status', () => {\n    const status = mlAnalyticsCoordinator.getStatus();\n    \n    expect(status).toHaveProperty('isInitialized');\n    expect(status).toHaveProperty('isRunning');\n    expect(status).toHaveProperty('uptime');\n    expect(status).toHaveProperty('services');\n  });\n\n  it('should perform comprehensive system analysis', async () => {\n    const analysis = await mlAnalyticsCoordinator.performSystemAnalysis();\n    \n    expect(analysis).toHaveProperty('healthScore');\n    expect(analysis).toHaveProperty('predictions');\n    expect(analysis).toHaveProperty('anomalies');\n    expect(analysis).toHaveProperty('capacityForecasts');\n    expect(analysis).toHaveProperty('optimizationRecommendations');\n    expect(analysis).toHaveProperty('actionPlan');\n    expect(Array.isArray(analysis.actionPlan)).toBe(true);\n  });\n\n  it('should update configuration', () => {\n    const newConfig = {\n      enablePredictiveAnalytics: false,\n      monitoring: {\n        anomalyDetectionInterval: 60000,\n        capacityPlanningInterval: 600000,\n        performanceInterval: 10000\n      }\n    };\n    \n    mlAnalyticsCoordinator.updateConfig(newConfig);\n    const config = mlAnalyticsCoordinator.getConfig();\n    \n    expect(config.enablePredictiveAnalytics).toBe(false);\n    expect(config.monitoring.anomalyDetectionInterval).toBe(60000);\n  });\n});\n\ndescribe('Error Handling', () => {\n  it('should handle missing parameters gracefully', async () => {\n    const response = await request(app)\n      .post('/api/predictive-analytics/models/capacity/train')\n      .send({})\n      .expect(400);\n\n    expect(response.body.success).toBe(false);\n    expect(response.body.error).toContain('required');\n  });\n\n  it('should handle invalid timeframes', async () => {\n    const response = await request(app)\n      .get('/api/predictive-analytics/predictions/capacity')\n      .query({\n        metric: 'cpu_usage',\n        timeframe: 'invalid'\n      })\n      .expect(500);\n\n    expect(response.body.success).toBe(false);\n  });\n\n  it('should handle service unavailable errors', async () => {\n    // This test would simulate service failures\n    // Implementation depends on how services handle failures\n  });\n});\n\ndescribe('Performance Tests', () => {\n  it('should respond quickly to health checks', async () => {\n    const start = Date.now();\n    \n    await request(app)\n      .get('/api/predictive-analytics/health')\n      .expect(200);\n    \n    const duration = Date.now() - start;\n    expect(duration).toBeLessThan(1000); // Should respond within 1 second\n  });\n\n  it('should handle concurrent requests', async () => {\n    const promises = Array(10).fill(null).map(() =>\n      request(app)\n        .get('/api/predictive-analytics/health')\n        .expect(200)\n    );\n\n    const responses = await Promise.all(promises);\n    responses.forEach(response => {\n      expect(response.body.success).toBe(true);\n    });\n  });\n});\n\ndescribe('Integration Tests', () => {\n  it('should integrate with existing analytics engine', async () => {\n    // Test that new predictive analytics works with existing analytics\n    const [analytics, predictive] = await Promise.all([\n      request(app).get('/api/analytics/dashboard'),\n      request(app).get('/api/predictive-analytics/health')\n    ]);\n\n    expect(analytics.status).toBe(200);\n    expect(predictive.status).toBe(200);\n  });\n\n  it('should work with performance monitoring', async () => {\n    const [performance, predictive] = await Promise.all([\n      request(app).get('/api/performance/summary'),\n      request(app).get('/api/predictive-analytics/capacity/dashboard')\n    ]);\n\n    expect(performance.status).toBe(200);\n    expect(predictive.status).toBe(200);\n  });\n});"],"names":["describe","beforeAll","mlAnalyticsCoordinator","initialize","afterAll","stop","it","response","request","app","get","expect","body","success","toBe","data","toHaveProperty","post","send","metric","timeframeDays","metrics","error","toContain","query","timeframe","projectionDays","Array","isArray","intervalMs","message","windowDays","resources","timeframes","toBeInstanceOf","Object","alertId","userId","put","sensitivity","alertThreshold","healthScore","getSystemHealthScore","recommendations","summary","getAnalyticsSummary","status","getStatus","analysis","performSystemAnalysis","actionPlan","newConfig","enablePredictiveAnalytics","monitoring","anomalyDetectionInterval","capacityPlanningInterval","performanceInterval","updateConfig","config","getConfig","start","Date","now","duration","toBeLessThan","promises","fill","map","responses","Promise","all","forEach","analytics","predictive","performance"],"mappings":"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"}