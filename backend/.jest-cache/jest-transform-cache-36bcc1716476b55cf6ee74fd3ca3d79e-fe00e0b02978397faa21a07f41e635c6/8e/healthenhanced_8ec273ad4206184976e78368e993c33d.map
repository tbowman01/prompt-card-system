{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/routes/health-enhanced.ts"],"sourcesContent":["import { Router } from 'express';\nimport { db } from '../database/connection';\nimport { llmService } from '../services/llmService';\nimport { performanceMonitor } from '../services/performance/PerformanceMonitor';\nimport { securityMonitor, logAggregator, alertingSystem, complianceChecker } from '../services/security';\nimport { createClient } from 'redis';\nimport axios from 'axios';\nimport os from 'os';\nimport { Server as SocketIOServer } from 'socket.io';\n\nconst router = Router();\n\ninterface HealthCheckResult {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  message?: string;\n  responseTime?: number;\n  details?: any;\n}\n\ninterface ServiceHealth {\n  [key: string]: HealthCheckResult;\n}\n\n// Utility function to perform health check with timeout\nasync function performHealthCheck(\n  name: string,\n  checkFn: () => Promise<HealthCheckResult>,\n  timeout = 5000\n): Promise<HealthCheckResult> {\n  const startTime = Date.now();\n  \n  try {\n    const result = await Promise.race([\n      checkFn(),\n      new Promise<HealthCheckResult>((_, reject) => \n        setTimeout(() => reject(new Error('Health check timeout')), timeout)\n      )\n    ]);\n    \n    return {\n      ...result,\n      responseTime: Date.now() - startTime\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'Unknown error',\n      responseTime: Date.now() - startTime\n    };\n  }\n}\n\n// Database health check\nasync function checkDatabase(): Promise<HealthCheckResult> {\n  try {\n    const result = db.prepare('SELECT 1 as healthy').get() as { healthy: number };\n    \n    // Get database stats\n    const stats = {\n      promptCards: db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number },\n      testCases: db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number },\n      testExecutions: db.prepare('SELECT COUNT(*) as count FROM test_executions').get() as { count: number }\n    };\n    \n    return {\n      status: result?.healthy === 1 ? 'healthy' : 'unhealthy',\n      details: {\n        type: 'SQLite',\n        path: process.env.DATABASE_PATH,\n        stats\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'Database connection failed'\n    };\n  }\n}\n\n// Redis health check\nasync function checkRedis(): Promise<HealthCheckResult> {\n  const redisUrl = process.env.REDIS_URL || 'redis://redis:6379';\n  \n  try {\n    const client = createClient({ url: redisUrl });\n    await client.connect();\n    \n    const pingResult = await client.ping();\n    const info = await client.info('server');\n    \n    await client.disconnect();\n    \n    // Extract version from info\n    const versionMatch = info.match(/redis_version:(.+)/);\n    const version = versionMatch ? versionMatch[1].trim() : 'unknown';\n    \n    return {\n      status: pingResult === 'PONG' ? 'healthy' : 'unhealthy',\n      details: {\n        url: redisUrl,\n        version,\n        ping: pingResult\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: `Redis connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: { url: redisUrl }\n    };\n  }\n}\n\n// Ollama/LLM health check\nasync function checkOllama(): Promise<HealthCheckResult> {\n  const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n  \n  try {\n    // Check Ollama API version\n    const versionResponse = await axios.get(`${ollamaUrl}/api/version`, { timeout: 3000 });\n    \n    // Get available models\n    const modelsResponse = await axios.get(`${ollamaUrl}/api/tags`, { timeout: 3000 });\n    const models = modelsResponse.data.models || [];\n    \n    // Try a simple generation with the first available model\n    let generationTest = null;\n    if (models.length > 0) {\n      try {\n        const testResponse = await axios.post(\n          `${ollamaUrl}/api/generate`,\n          {\n            model: models[0].name,\n            prompt: 'Respond with OK',\n            stream: false,\n            options: { num_predict: 5 }\n          },\n          { timeout: 5000 }\n        );\n        generationTest = testResponse.data.response?.includes('OK') ? 'passed' : 'failed';\n      } catch (e) {\n        generationTest = 'failed';\n      }\n    }\n    \n    return {\n      status: models.length > 0 ? 'healthy' : 'degraded',\n      message: models.length === 0 ? 'No models available' : undefined,\n      details: {\n        url: ollamaUrl,\n        version: versionResponse.data.version,\n        modelCount: models.length,\n        models: models.map((m: any) => ({\n          name: m.name,\n          size: m.size,\n          modified: m.modified_at\n        })),\n        generationTest\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: `Ollama connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: { url: ollamaUrl }\n    };\n  }\n}\n\n// WebSocket health check\nasync function checkWebSocket(io?: SocketIOServer): Promise<HealthCheckResult> {\n  try {\n    if (!io) {\n      return {\n        status: 'unhealthy',\n        message: 'WebSocket server not initialized'\n      };\n    }\n    \n    const sockets = await io.fetchSockets();\n    \n    return {\n      status: 'healthy',\n      details: {\n        engine: io.engine.constructor.name,\n        connectedClients: sockets.length,\n        transports: io.engine.opts.transports\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'WebSocket check failed'\n    };\n  }\n}\n\n// System health check\nasync function checkSystem(): Promise<HealthCheckResult> {\n  try {\n    const uptime = process.uptime();\n    const memoryUsage = process.memoryUsage();\n    const loadAverage = os.loadavg();\n    \n    // Check memory usage\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemoryPercent = ((totalMemory - freeMemory) / totalMemory) * 100;\n    \n    // Determine health based on metrics\n    let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    if (usedMemoryPercent > 90) {\n      status = 'unhealthy';\n    } else if (usedMemoryPercent > 80 || loadAverage[0] > os.cpus().length * 2) {\n      status = 'degraded';\n    }\n    \n    return {\n      status,\n      details: {\n        uptime: Math.floor(uptime),\n        memory: {\n          rss: Math.floor(memoryUsage.rss / 1024 / 1024),\n          heapTotal: Math.floor(memoryUsage.heapTotal / 1024 / 1024),\n          heapUsed: Math.floor(memoryUsage.heapUsed / 1024 / 1024),\n          external: Math.floor(memoryUsage.external / 1024 / 1024),\n          systemUsedPercent: Math.floor(usedMemoryPercent)\n        },\n        cpu: {\n          loadAverage,\n          cores: os.cpus().length\n        },\n        platform: os.platform(),\n        nodeVersion: process.version\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'System check failed'\n    };\n  }\n}\n\n// Security health check\nasync function checkSecurity(): Promise<HealthCheckResult> {\n  try {\n    const securityMetrics = securityMonitor.getSecurityMetrics();\n    const alertStats = alertingSystem.getAlertStatistics();\n    const complianceMetrics = complianceChecker.getComplianceMetrics();\n    \n    // Determine health based on security metrics\n    let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    if (securityMetrics.criticalVulnerabilities > 0 || alertStats.critical > 0) {\n      status = 'unhealthy';\n    } else if (securityMetrics.threatLevel === 'high' || complianceMetrics.criticalIssues > 0) {\n      status = 'degraded';\n    }\n    \n    return {\n      status,\n      details: {\n        securityScore: securityMetrics.securityScore,\n        threatLevel: securityMetrics.threatLevel,\n        criticalVulnerabilities: securityMetrics.criticalVulnerabilities,\n        eventsLast24h: securityMetrics.eventsLast24h,\n        complianceScore: complianceMetrics.currentScore,\n        criticalAlerts: alertStats.critical,\n        lastScanTimestamp: securityMetrics.lastScanTimestamp\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'Security check failed'\n    };\n  }\n}\n\n// Comprehensive health check endpoint\nrouter.get('/', async (req, res) => {\n  const detailed = req.query.detailed === 'true';\n  const startTime = Date.now();\n  \n  try {\n    // Run all health checks in parallel\n    const [database, redis, ollama, websocket, system, security] = await Promise.all([\n      performHealthCheck('database', checkDatabase),\n      performHealthCheck('redis', checkRedis),\n      performHealthCheck('ollama', checkOllama),\n      performHealthCheck('websocket', () => checkWebSocket(req.app.get('io'))),\n      performHealthCheck('system', checkSystem),\n      performHealthCheck('security', checkSecurity)\n    ]);\n    \n    const services: ServiceHealth = {\n      database,\n      redis,\n      ollama,\n      websocket,\n      system,\n      security\n    };\n    \n    // Calculate overall status\n    const statuses = Object.values(services).map(s => s.status);\n    let overallStatus: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    \n    if (statuses.includes('unhealthy')) {\n      overallStatus = 'unhealthy';\n    } else if (statuses.includes('degraded')) {\n      overallStatus = 'degraded';\n    }\n    \n    const response = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      totalResponseTime: Date.now() - startTime,\n      environment: process.env.NODE_ENV || 'development',\n      services: detailed ? services : Object.fromEntries(\n        Object.entries(services).map(([key, value]) => [key, {\n          status: value.status,\n          message: value.message,\n          responseTime: value.responseTime\n        }])\n      )\n    };\n    \n    const statusCode = overallStatus === 'healthy' ? 200 : \n                      overallStatus === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json(response);\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Health check failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Individual service health checks\nrouter.get('/database', async (req, res) => {\n  const result = await performHealthCheck('database', checkDatabase);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/redis', async (req, res) => {\n  const result = await performHealthCheck('redis', checkRedis);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/ollama', async (req, res) => {\n  const result = await performHealthCheck('ollama', checkOllama);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/websocket', async (req, res) => {\n  const result = await performHealthCheck('websocket', () => checkWebSocket(req.app.get('io')));\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/system', async (req, res) => {\n  const result = await performHealthCheck('system', checkSystem);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/security', async (req, res) => {\n  const result = await performHealthCheck('security', checkSecurity);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\n// Readiness check (for k8s/docker)\nrouter.get('/ready', async (req, res) => {\n  // Check only critical services for readiness\n  const [database, ollama, security] = await Promise.all([\n    performHealthCheck('database', checkDatabase),\n    performHealthCheck('ollama', checkOllama),\n    performHealthCheck('security', checkSecurity)\n  ]);\n  \n  const isReady = database.status === 'healthy' && \n                  (ollama.status === 'healthy' || ollama.status === 'degraded') &&\n                  security.status !== 'unhealthy';\n  \n  res.status(isReady ? 200 : 503).json({\n    ready: isReady,\n    services: { database, ollama, security }\n  });\n});\n\n// Liveness check (for k8s/docker)\nrouter.get('/live', (req, res) => {\n  // Simple liveness check - just verify the process is running\n  res.status(200).json({\n    alive: true,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\nexport { router as enhancedHealthRoutes };"],"names":["enhancedHealthRoutes","router","Router","performHealthCheck","name","checkFn","timeout","startTime","Date","now","result","Promise","race","_","reject","setTimeout","Error","responseTime","error","status","message","checkDatabase","db","prepare","get","stats","promptCards","testCases","testExecutions","healthy","details","type","path","process","env","DATABASE_PATH","checkRedis","redisUrl","REDIS_URL","client","createClient","url","connect","pingResult","ping","info","disconnect","versionMatch","match","version","trim","checkOllama","ollamaUrl","OLLAMA_BASE_URL","versionResponse","axios","modelsResponse","models","data","generationTest","length","testResponse","post","model","prompt","stream","options","num_predict","response","includes","e","undefined","modelCount","map","m","size","modified","modified_at","checkWebSocket","io","sockets","fetchSockets","engine","connectedClients","transports","opts","checkSystem","uptime","memoryUsage","loadAverage","os","loadavg","totalMemory","totalmem","freeMemory","freemem","usedMemoryPercent","cpus","Math","floor","memory","rss","heapTotal","heapUsed","external","systemUsedPercent","cpu","cores","platform","nodeVersion","checkSecurity","securityMetrics","securityMonitor","getSecurityMetrics","alertStats","alertingSystem","getAlertStatistics","complianceMetrics","complianceChecker","getComplianceMetrics","criticalVulnerabilities","critical","threatLevel","criticalIssues","securityScore","eventsLast24h","complianceScore","currentScore","criticalAlerts","lastScanTimestamp","req","res","detailed","query","database","redis","ollama","websocket","system","security","all","app","services","statuses","Object","values","s","overallStatus","timestamp","toISOString","totalResponseTime","environment","NODE_ENV","fromEntries","entries","key","value","statusCode","json","isReady","ready","alive"],"mappings":"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"}