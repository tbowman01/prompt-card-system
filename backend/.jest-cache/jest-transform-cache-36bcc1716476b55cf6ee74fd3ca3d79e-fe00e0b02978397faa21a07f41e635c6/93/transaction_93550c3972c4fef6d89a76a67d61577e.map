{"version":3,"sources":["/workspaces/prompt-card-system/backend/node_modules/better-sqlite3/lib/methods/transaction.js"],"sourcesContent":["'use strict';\nconst { cppdb } = require('../util');\nconst controllers = new WeakMap();\n\nmodule.exports = function transaction(fn) {\n\tif (typeof fn !== 'function') throw new TypeError('Expected first argument to be a function');\n\n\tconst db = this[cppdb];\n\tconst controller = getController(db, this);\n\tconst { apply } = Function.prototype;\n\n\t// Each version of the transaction function has these same properties\n\tconst properties = {\n\t\tdefault: { value: wrapTransaction(apply, fn, db, controller.default) },\n\t\tdeferred: { value: wrapTransaction(apply, fn, db, controller.deferred) },\n\t\timmediate: { value: wrapTransaction(apply, fn, db, controller.immediate) },\n\t\texclusive: { value: wrapTransaction(apply, fn, db, controller.exclusive) },\n\t\tdatabase: { value: this, enumerable: true },\n\t};\n\n\tObject.defineProperties(properties.default.value, properties);\n\tObject.defineProperties(properties.deferred.value, properties);\n\tObject.defineProperties(properties.immediate.value, properties);\n\tObject.defineProperties(properties.exclusive.value, properties);\n\n\t// Return the default version of the transaction function\n\treturn properties.default.value;\n};\n\n// Return the database's cached transaction controller, or create a new one\nconst getController = (db, self) => {\n\tlet controller = controllers.get(db);\n\tif (!controller) {\n\t\tconst shared = {\n\t\t\tcommit: db.prepare('COMMIT', self, false),\n\t\t\trollback: db.prepare('ROLLBACK', self, false),\n\t\t\tsavepoint: db.prepare('SAVEPOINT `\\t_bs3.\\t`', self, false),\n\t\t\trelease: db.prepare('RELEASE `\\t_bs3.\\t`', self, false),\n\t\t\trollbackTo: db.prepare('ROLLBACK TO `\\t_bs3.\\t`', self, false),\n\t\t};\n\t\tcontrollers.set(db, controller = {\n\t\t\tdefault: Object.assign({ begin: db.prepare('BEGIN', self, false) }, shared),\n\t\t\tdeferred: Object.assign({ begin: db.prepare('BEGIN DEFERRED', self, false) }, shared),\n\t\t\timmediate: Object.assign({ begin: db.prepare('BEGIN IMMEDIATE', self, false) }, shared),\n\t\t\texclusive: Object.assign({ begin: db.prepare('BEGIN EXCLUSIVE', self, false) }, shared),\n\t\t});\n\t}\n\treturn controller;\n};\n\n// Return a new transaction function by wrapping the given function\nconst wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo }) => function sqliteTransaction() {\n\tlet before, after, undo;\n\tif (db.inTransaction) {\n\t\tbefore = savepoint;\n\t\tafter = release;\n\t\tundo = rollbackTo;\n\t} else {\n\t\tbefore = begin;\n\t\tafter = commit;\n\t\tundo = rollback;\n\t}\n\tbefore.run();\n\ttry {\n\t\tconst result = apply.call(fn, this, arguments);\n\t\tafter.run();\n\t\treturn result;\n\t} catch (ex) {\n\t\tif (db.inTransaction) {\n\t\t\tundo.run();\n\t\t\tif (undo !== rollback) after.run();\n\t\t}\n\t\tthrow ex;\n\t}\n};\n"],"names":["cppdb","require","controllers","WeakMap","module","exports","transaction","fn","TypeError","db","controller","getController","apply","Function","prototype","properties","default","value","wrapTransaction","deferred","immediate","exclusive","database","enumerable","Object","defineProperties","self","get","shared","commit","prepare","rollback","savepoint","release","rollbackTo","set","assign","begin","sqliteTransaction","before","after","undo","inTransaction","run","result","call","arguments","ex"],"mappings":"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"}