{"version":3,"names":["cov_hpn4mrxmd","actualCoverage","Joi","body","validationResult","sanitizeHtml","validation","schema","f","s","req","res","next","error","value","validate","b","status","json","success","details","map","detail","field","path","join","message","promptCardSchema","object","title","string","required","min","max","pattern","messages","description","allow","prompt_template","custom","helpers","dangerousPatterns","test","variables","array","items","default","testCaseSchema","prompt_card_id","number","integer","positive","name","input_variables","expected_output","length","sanitized","allowedTags","allowedAttributes","assertions","type","valid","alternatives","try","threshold","validatePromptCard","sanitizeInput","input","trim","sanitizeRequestBody","sanitizeObject","obj","Array","isArray","key","Object","entries","limitRequestSize","maxSize","contentLength","parseInt","get","receivedSize","validatePromptCardExpressValidator","isLength","matches","withMessage","optional","Error","variable","validateTestCaseExpressValidator","isInt","isObject","keys","customSanitizer","validTypes","assertion","includes","undefined","handleValidationErrors","errors","isEmpty","msg","validateTestCase"],"sources":["validation.ts"],"sourcesContent":["import Joi from 'joi';\nimport { body, validationResult } from 'express-validator';\nimport sanitizeHtml from 'sanitize-html';\n// Enhanced validation schema for prompt cards with security rules\n// Generic validation middleware function\nexport function validation(schema) {\n    return (req, res, next)=>{\n        const { error, value } = schema.validate(req.body);\n        if (error) {\n            res.status(400).json({\n                success: false,\n                error: 'Validation error',\n                details: error.details.map((detail)=>({\n                        field: detail.path.join('.'),\n                        message: detail.message\n                    }))\n            });\n            return;\n        }\n        req.body = value;\n        next();\n    };\n}\n// Validation schema for prompt cards\nconst promptCardSchema = Joi.object({\n    title: Joi.string().required().min(1).max(255).pattern(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/) // Allow only safe characters\n    .messages({\n        'string.pattern.base': 'Title contains invalid characters'\n    }),\n    description: Joi.string().allow('').max(1000).pattern(/^[a-zA-Z0-9\\s\\-_.,!?()\\n\\r]*$/) // Allow safe characters and newlines\n    .messages({\n        'string.pattern.base': 'Description contains invalid characters'\n    }),\n    prompt_template: Joi.string().required().min(1).max(10000) // Reasonable limit for prompt templates\n    .custom((value, helpers)=>{\n        // Check for potential injection patterns\n        const dangerousPatterns = [\n            /<script[^>]*>.*?<\\/script>/gi,\n            /javascript:/gi,\n            /on\\w+\\s*=/gi,\n            /eval\\s*\\(/gi,\n            /Function\\s*\\(/gi\n        ];\n        for (const pattern of dangerousPatterns){\n            if (pattern.test(value)) {\n                return helpers.error('any.invalid', {\n                    message: 'Prompt template contains potentially dangerous content'\n                });\n            }\n        }\n        return value;\n    }),\n    variables: Joi.array().items(Joi.string().max(100).pattern(/^[a-zA-Z0-9_]+$/)) // Variable names should be alphanumeric\n    .default([]).max(50) // Limit number of variables\n});\n// Enhanced validation schema for test cases with security rules\nconst testCaseSchema = Joi.object({\n    prompt_card_id: Joi.number().integer().positive().required().max(1000000),\n    name: Joi.string().required().min(1).max(255).pattern(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/).messages({\n        'string.pattern.base': 'Test case name contains invalid characters'\n    }),\n    input_variables: Joi.object().required().pattern(/^[a-zA-Z0-9_]+$/, Joi.string().max(1000)) // Key validation and value size limit\n    .max(20),\n    expected_output: Joi.string().allow('').max(50000) // Reasonable limit for expected output\n    .custom((value, helpers)=>{\n        if (value && value.length > 0) {\n            // Sanitize HTML content\n            const sanitized = sanitizeHtml(value, {\n                allowedTags: [\n                    'p',\n                    'br',\n                    'strong',\n                    'em',\n                    'u',\n                    'ol',\n                    'ul',\n                    'li'\n                ],\n                allowedAttributes: {}\n            });\n            return sanitized;\n        }\n        return value;\n    }),\n    assertions: Joi.array().items(Joi.object({\n        type: Joi.string().valid('equals', 'contains', 'regex', 'length', 'semantic_similarity').required(),\n        value: Joi.alternatives().try(Joi.string().max(1000), Joi.number()),\n        threshold: Joi.number().min(0).max(1)\n    })).default([]).max(10) // Limit number of assertions\n});\n// Middleware to validate prompt card requests\nexport function validatePromptCard(req, res, next) {\n    const { error, value } = promptCardSchema.validate(req.body);\n    if (error) {\n        res.status(400).json({\n            success: false,\n            error: 'Validation error',\n            details: error.details.map((detail)=>({\n                    field: detail.path.join('.'),\n                    message: detail.message\n                }))\n        });\n        return;\n    }\n    req.body = value;\n    next();\n}\n// Sanitization utilities\nexport const sanitizeInput = (input)=>{\n    if (typeof input !== 'string') return input;\n    // Sanitize HTML content\n    const sanitized = sanitizeHtml(input, {\n        allowedTags: [],\n        allowedAttributes: {}\n    });\n    return sanitized.trim();\n};\n// General input sanitization middleware\nexport const sanitizeRequestBody = (req, res, next)=>{\n    const sanitizeObject = (obj)=>{\n        if (typeof obj === 'string') {\n            return sanitizeInput(obj);\n        } else if (Array.isArray(obj)) {\n            return obj.map(sanitizeObject);\n        } else if (obj && typeof obj === 'object') {\n            const sanitized = {};\n            for (const [key, value] of Object.entries(obj)){\n                sanitized[key] = sanitizeObject(value);\n            }\n            return sanitized;\n        }\n        return obj;\n    };\n    if (req.body && typeof req.body === 'object') {\n        req.body = sanitizeObject(req.body);\n    }\n    next();\n};\n// Request size limiting middleware\nexport const limitRequestSize = (maxSize = 1024 * 1024)=>{\n    return (req, res, next)=>{\n        const contentLength = parseInt(req.get('content-length') || '0', 10);\n        if (contentLength > maxSize) {\n            res.status(413).json({\n                success: false,\n                error: 'Request entity too large',\n                maxSize: maxSize,\n                receivedSize: contentLength\n            });\n            return;\n        }\n        next();\n    };\n};\n// Express-validator based validation chains\nexport const validatePromptCardExpressValidator = [\n    body('title').isLength({\n        min: 1,\n        max: 255\n    }).matches(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/).withMessage('Title contains invalid characters'),\n    body('description').optional().isLength({\n        max: 1000\n    }).matches(/^[a-zA-Z0-9\\s\\-_.,!?()\\n\\r]*$/).withMessage('Description contains invalid characters'),\n    body('prompt_template').isLength({\n        min: 1,\n        max: 10000\n    }).custom((value)=>{\n        const dangerousPatterns = [\n            /<script[^>]*>.*?<\\/script>/gi,\n            /javascript:/gi,\n            /on\\w+\\s*=/gi,\n            /eval\\s*\\(/gi,\n            /Function\\s*\\(/gi\n        ];\n        for (const pattern of dangerousPatterns){\n            if (pattern.test(value)) {\n                throw new Error('Prompt template contains potentially dangerous content');\n            }\n        }\n        return true;\n    }),\n    body('variables').optional().isArray({\n        max: 50\n    }).custom((variables)=>{\n        if (!Array.isArray(variables)) return true;\n        for (const variable of variables){\n            if (typeof variable !== 'string' || !/^[a-zA-Z0-9_]+$/.test(variable) || variable.length > 100) {\n                throw new Error('Invalid variable name format');\n            }\n        }\n        return true;\n    })\n];\nexport const validateTestCaseExpressValidator = [\n    body('prompt_card_id').isInt({\n        min: 1,\n        max: 1000000\n    }).withMessage('Invalid prompt card ID'),\n    body('name').isLength({\n        min: 1,\n        max: 255\n    }).matches(/^[a-zA-Z0-9\\s\\-_.,!?()]+$/).withMessage('Test case name contains invalid characters'),\n    body('input_variables').isObject().custom((variables)=>{\n        if (Object.keys(variables).length > 20) {\n            throw new Error('Too many input variables');\n        }\n        for (const [key, value] of Object.entries(variables)){\n            if (!/^[a-zA-Z0-9_]+$/.test(key)) {\n                throw new Error(`Invalid variable name: ${key}`);\n            }\n            if (typeof value === 'string' && value.length > 1000) {\n                throw new Error(`Variable value too long: ${key}`);\n            }\n        }\n        return true;\n    }),\n    body('expected_output').optional().isLength({\n        max: 50000\n    }).customSanitizer((value)=>{\n        if (typeof value === 'string' && value.length > 0) {\n            return sanitizeHtml(value, {\n                allowedTags: [\n                    'p',\n                    'br',\n                    'strong',\n                    'em',\n                    'u',\n                    'ol',\n                    'ul',\n                    'li'\n                ],\n                allowedAttributes: {}\n            });\n        }\n        return value;\n    }),\n    body('assertions').optional().isArray({\n        max: 10\n    }).custom((assertions)=>{\n        if (!Array.isArray(assertions)) return true;\n        const validTypes = [\n            'equals',\n            'contains',\n            'regex',\n            'length',\n            'semantic_similarity'\n        ];\n        for (const assertion of assertions){\n            if (!assertion.type || !validTypes.includes(assertion.type)) {\n                throw new Error('Invalid assertion type');\n            }\n            if (assertion.value !== undefined) {\n                if (typeof assertion.value === 'string' && assertion.value.length > 1000) {\n                    throw new Error('Assertion value too long');\n                }\n            }\n            if (assertion.threshold !== undefined) {\n                if (typeof assertion.threshold !== 'number' || assertion.threshold < 0 || assertion.threshold > 1) {\n                    throw new Error('Invalid threshold value');\n                }\n            }\n        }\n        return true;\n    })\n];\n// Middleware to handle express-validator errors\nexport const handleValidationErrors = (req, res, next)=>{\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        res.status(400).json({\n            success: false,\n            error: 'Validation error',\n            details: errors.array().map((error)=>({\n                    field: error.type === 'field' ? error.path : 'unknown',\n                    message: error.msg,\n                    value: error.type === 'field' ? error.value : undefined\n                }))\n        });\n        return;\n    }\n    next();\n};\n// Middleware to validate test case requests\nexport function validateTestCase(req, res, next) {\n    const { error, value } = testCaseSchema.validate(req.body);\n    if (error) {\n        res.status(400).json({\n            success: false,\n            error: 'Validation error',\n            details: error.details.map((detail)=>({\n                    field: detail.path.join('.'),\n                    message: detail.message\n                }))\n        });\n        return;\n    }\n    req.body = value;\n    next();\n}\n"],"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","ignoreList":[]}