{"version":3,"names":["cov_2jl98bluca","actualCoverage","express","AnalyticsEngine","router","s","Router","analyticsEngine","getInstance","get","req","res","f","metrics","getDashboardMetrics","json","success","data","error","console","status","calculateRealtimeMetrics","calculateHistoricalMetrics","period","b","limit","query","trends","calculateTrends","parseInt","insights","generateInsights","post","testCaseId","executionId","model","passed","executionTime","metadata","body","recordTestExecution","message","promptCardId","totalTests","passedTests","recordBatchExecution","usage","recordModelUsage","recordSystemMetrics","analyticsRoutes"],"sources":["analytics.ts"],"sourcesContent":["import express from 'express';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\nconst router = express.Router();\nconst analyticsEngine = AnalyticsEngine.getInstance();\n// Get dashboard metrics\nrouter.get('/dashboard', async (req, res)=>{\n    try {\n        const metrics = await analyticsEngine.getDashboardMetrics();\n        res.json({\n            success: true,\n            data: metrics\n        });\n    } catch (error) {\n        console.error('Error fetching dashboard metrics:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to fetch dashboard metrics'\n        });\n    }\n});\n// Get real-time metrics\nrouter.get('/realtime', async (req, res)=>{\n    try {\n        const metrics = await analyticsEngine.calculateRealtimeMetrics();\n        res.json({\n            success: true,\n            data: metrics\n        });\n    } catch (error) {\n        console.error('Error fetching real-time metrics:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to fetch real-time metrics'\n        });\n    }\n});\n// Get historical metrics\nrouter.get('/historical', async (req, res)=>{\n    try {\n        const metrics = await analyticsEngine.calculateHistoricalMetrics();\n        res.json({\n            success: true,\n            data: metrics\n        });\n    } catch (error) {\n        console.error('Error fetching historical metrics:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to fetch historical metrics'\n        });\n    }\n});\n// Get trends with optional parameters\nrouter.get('/trends', async (req, res)=>{\n    try {\n        const { period = 'day', limit = 30 } = req.query;\n        const trends = await analyticsEngine.calculateTrends(period, parseInt(limit, 10));\n        res.json({\n            success: true,\n            data: trends\n        });\n    } catch (error) {\n        console.error('Error fetching trends:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to fetch trends'\n        });\n    }\n});\n// Get insights\nrouter.get('/insights', async (req, res)=>{\n    try {\n        const insights = await analyticsEngine.generateInsights();\n        res.json({\n            success: true,\n            data: insights\n        });\n    } catch (error) {\n        console.error('Error fetching insights:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to fetch insights'\n        });\n    }\n});\n// Record test execution event\nrouter.post('/events/test-execution', async (req, res)=>{\n    try {\n        const { testCaseId, executionId, model, passed, executionTime, metadata } = req.body;\n        await analyticsEngine.recordTestExecution(testCaseId, executionId, model, passed, executionTime, metadata);\n        res.json({\n            success: true,\n            message: 'Test execution recorded'\n        });\n    } catch (error) {\n        console.error('Error recording test execution:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to record test execution'\n        });\n    }\n});\n// Record batch execution event\nrouter.post('/events/batch-execution', async (req, res)=>{\n    try {\n        const { promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata } = req.body;\n        await analyticsEngine.recordBatchExecution(promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata);\n        res.json({\n            success: true,\n            message: 'Batch execution recorded'\n        });\n    } catch (error) {\n        console.error('Error recording batch execution:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to record batch execution'\n        });\n    }\n});\n// Record model usage event\nrouter.post('/events/model-usage', async (req, res)=>{\n    try {\n        const { model, usage } = req.body;\n        await analyticsEngine.recordModelUsage(model, usage);\n        res.json({\n            success: true,\n            message: 'Model usage recorded'\n        });\n    } catch (error) {\n        console.error('Error recording model usage:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to record model usage'\n        });\n    }\n});\n// Record system metrics\nrouter.post('/events/system-metrics', async (req, res)=>{\n    try {\n        const { metrics } = req.body;\n        await analyticsEngine.recordSystemMetrics(metrics);\n        res.json({\n            success: true,\n            message: 'System metrics recorded'\n        });\n    } catch (error) {\n        console.error('Error recording system metrics:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to record system metrics'\n        });\n    }\n});\nexport { router as analyticsRoutes };\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,OAAOE,OAAO,MAAM,SAAS;AAC7B,SAASC,eAAe,QAAQ,uCAAuC;AACvE,MAAMC,MAAM;AAAA;AAAA,CAAAJ,cAAA,GAAAK,CAAA,OAAGH,OAAO,CAACI,MAAM,CAAC,CAAC;AAC/B,MAAMC,eAAe;AAAA;AAAA,CAAAP,cAAA,GAAAK,CAAA,OAAGF,eAAe,CAACK,WAAW,CAAC,CAAC;AACrD;AAAA;AAAAR,cAAA,GAAAK,CAAA;AACAD,MAAM,CAACK,GAAG,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACvC,IAAI;IACA,MAAMQ,OAAO;IAAA;IAAA,CAAAb,cAAA,GAAAK,CAAA,OAAG,MAAME,eAAe,CAACO,mBAAmB,CAAC,CAAC;IAAC;IAAAd,cAAA,GAAAK,CAAA;IAC5DM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEJ;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IAC1DM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAACK,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACtC,IAAI;IACA,MAAMQ,OAAO;IAAA;IAAA,CAAAb,cAAA,GAAAK,CAAA,QAAG,MAAME,eAAe,CAACc,wBAAwB,CAAC,CAAC;IAAC;IAAArB,cAAA,GAAAK,CAAA;IACjEM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEJ;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IAC1DM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAACK,GAAG,CAAC,aAAa,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACxC,IAAI;IACA,MAAMQ,OAAO;IAAA;IAAA,CAAAb,cAAA,GAAAK,CAAA,QAAG,MAAME,eAAe,CAACe,0BAA0B,CAAC,CAAC;IAAC;IAAAtB,cAAA,GAAAK,CAAA;IACnEM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEJ;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IAC3DM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAACK,GAAG,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACpC,IAAI;IACA,MAAM;MAAEkB,MAAM;MAAA;MAAA,CAAAvB,cAAA,GAAAwB,CAAA,UAAG,KAAK;MAAEC,KAAK;MAAA;MAAA,CAAAzB,cAAA,GAAAwB,CAAA,UAAG,EAAE;IAAC,CAAC;IAAA;IAAA,CAAAxB,cAAA,GAAAK,CAAA,QAAGK,GAAG,CAACgB,KAAK;IAChD,MAAMC,MAAM;IAAA;IAAA,CAAA3B,cAAA,GAAAK,CAAA,QAAG,MAAME,eAAe,CAACqB,eAAe,CAACL,MAAM,EAAEM,QAAQ,CAACJ,KAAK,EAAE,EAAE,CAAC,CAAC;IAAC;IAAAzB,cAAA,GAAAK,CAAA;IAClFM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEU;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOT,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IAC/CM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAACK,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACtC,IAAI;IACA,MAAMyB,QAAQ;IAAA;IAAA,CAAA9B,cAAA,GAAAK,CAAA,QAAG,MAAME,eAAe,CAACwB,gBAAgB,CAAC,CAAC;IAAC;IAAA/B,cAAA,GAAAK,CAAA;IAC1DM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEa;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOZ,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IACjDM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAAC4B,IAAI,CAAC,wBAAwB,EAAE,OAAOtB,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACpD,IAAI;IACA,MAAM;MAAE4B,UAAU;MAAEC,WAAW;MAAEC,KAAK;MAAEC,MAAM;MAAEC,aAAa;MAAEC;IAAS,CAAC;IAAA;IAAA,CAAAtC,cAAA,GAAAK,CAAA,QAAGK,GAAG,CAAC6B,IAAI;IAAC;IAAAvC,cAAA,GAAAK,CAAA;IACrF,MAAME,eAAe,CAACiC,mBAAmB,CAACP,UAAU,EAAEC,WAAW,EAAEC,KAAK,EAAEC,MAAM,EAAEC,aAAa,EAAEC,QAAQ,CAAC;IAAC;IAAAtC,cAAA,GAAAK,CAAA;IAC3GM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbyB,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOvB,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IACxDM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAAC4B,IAAI,CAAC,yBAAyB,EAAE,OAAOtB,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACrD,IAAI;IACA,MAAM;MAAEqC,YAAY;MAAER,WAAW;MAAEC,KAAK;MAAEQ,UAAU;MAAEC,WAAW;MAAEP,aAAa;MAAEC;IAAS,CAAC;IAAA;IAAA,CAAAtC,cAAA,GAAAK,CAAA,QAAGK,GAAG,CAAC6B,IAAI;IAAC;IAAAvC,cAAA,GAAAK,CAAA;IACxG,MAAME,eAAe,CAACsC,oBAAoB,CAACH,YAAY,EAAER,WAAW,EAAEC,KAAK,EAAEQ,UAAU,EAAEC,WAAW,EAAEP,aAAa,EAAEC,QAAQ,CAAC;IAAC;IAAAtC,cAAA,GAAAK,CAAA;IAC/HM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbyB,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOvB,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IACzDM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAAC4B,IAAI,CAAC,qBAAqB,EAAE,OAAOtB,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACjD,IAAI;IACA,MAAM;MAAE8B,KAAK;MAAEW;IAAM,CAAC;IAAA;IAAA,CAAA9C,cAAA,GAAAK,CAAA,QAAGK,GAAG,CAAC6B,IAAI;IAAC;IAAAvC,cAAA,GAAAK,CAAA;IAClC,MAAME,eAAe,CAACwC,gBAAgB,CAACZ,KAAK,EAAEW,KAAK,CAAC;IAAC;IAAA9C,cAAA,GAAAK,CAAA;IACrDM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbyB,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOvB,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IACrDM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF;AAAA;AAAAlB,cAAA,GAAAK,CAAA;AACAD,MAAM,CAAC4B,IAAI,CAAC,wBAAwB,EAAE,OAAOtB,GAAG,EAAEC,GAAG,KAAG;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAK,CAAA;EACpD,IAAI;IACA,MAAM;MAAEQ;IAAQ,CAAC;IAAA;IAAA,CAAAb,cAAA,GAAAK,CAAA,QAAGK,GAAG,CAAC6B,IAAI;IAAC;IAAAvC,cAAA,GAAAK,CAAA;IAC7B,MAAME,eAAe,CAACyC,mBAAmB,CAACnC,OAAO,CAAC;IAAC;IAAAb,cAAA,GAAAK,CAAA;IACnDM,GAAG,CAACI,IAAI,CAAC;MACLC,OAAO,EAAE,IAAI;MACbyB,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOvB,KAAK,EAAE;IAAA;IAAAlB,cAAA,GAAAK,CAAA;IACZc,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAlB,cAAA,GAAAK,CAAA;IACxDM,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdE,KAAK,EAAE;IACX,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF,SAASd,MAAM,IAAI6C,eAAe","ignoreList":[]}