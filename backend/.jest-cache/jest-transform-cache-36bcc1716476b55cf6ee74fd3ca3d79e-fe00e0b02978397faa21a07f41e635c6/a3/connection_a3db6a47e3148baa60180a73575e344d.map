{"version":3,"names":["cov_18r6wbbyia","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","Database","path","fs","DATABASE_PATH","process","env","join","__dirname","poolConfig","maxConnections","parseInt","DB_MAX_CONNECTIONS","idleTimeout","DB_IDLE_TIMEOUT","retryAttempts","DB_RETRY_ATTEMPTS","retryDelay","DB_RETRY_DELAY","DatabaseConnectionPool","createConnection","dataDir","dirname","dbPath","existsSync","mkdirSync","recursive","connection","verbose","NODE_ENV","console","log","undefined","timeout","pragma","initializePool","initialized","i","config","connections","push","availableConnections","retryCount","error","retryConnection","Error","Promise","resolve","setTimeout","getConnection","length","pop","busyConnections","add","releaseConnection","has","delete","withConnection","operation","getStats","total","available","busy","size","close","forEach","conn","clear","constructor","Set","connectionPool","db","prepare","sql","run","params","stmt","get","all","exec","transaction","operations","initializeDatabase","on","exit"],"sources":["connection.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\nconst DATABASE_PATH = process.env.DATABASE_PATH || path.join(__dirname, '../../data/database.sqlite');\nconst poolConfig = {\n    maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '5'),\n    idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),\n    retryAttempts: parseInt(process.env.DB_RETRY_ATTEMPTS || '3'),\n    retryDelay: parseInt(process.env.DB_RETRY_DELAY || '1000')\n};\n// Connection pool implementation\nclass DatabaseConnectionPool {\n    createConnection() {\n        // Ensure data directory exists\n        const dataDir = path.dirname(this.dbPath);\n        if (!fs.existsSync(dataDir)) {\n            fs.mkdirSync(dataDir, {\n                recursive: true\n            });\n        }\n        const connection = new Database(this.dbPath, {\n            verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n            timeout: 5000 // 5 second timeout\n        });\n        // Enable foreign keys and optimize for concurrent access\n        connection.pragma('foreign_keys = ON');\n        connection.pragma('journal_mode = WAL');\n        connection.pragma('synchronous = NORMAL');\n        connection.pragma('cache_size = 1000');\n        connection.pragma('temp_store = memory');\n        return connection;\n    }\n    async initializePool() {\n        if (this.initialized) return;\n        try {\n            // Create initial connections\n            for(let i = 0; i < this.config.maxConnections; i++){\n                const connection = this.createConnection();\n                this.connections.push(connection);\n                this.availableConnections.push(connection);\n            }\n            this.initialized = true;\n            this.retryCount = 0;\n            console.log(`Database connection pool initialized with ${this.config.maxConnections} connections`);\n        } catch (error) {\n            console.error('Failed to initialize database connection pool:', error);\n            await this.retryConnection();\n        }\n    }\n    async retryConnection() {\n        if (this.retryCount >= this.config.retryAttempts) {\n            throw new Error(`Failed to connect to database after ${this.config.retryAttempts} attempts`);\n        }\n        this.retryCount++;\n        console.log(`Retrying database connection (attempt ${this.retryCount}/${this.config.retryAttempts})...`);\n        await new Promise((resolve)=>setTimeout(resolve, this.config.retryDelay * this.retryCount));\n        await this.initializePool();\n    }\n    async getConnection() {\n        if (!this.initialized) {\n            await this.initializePool();\n        }\n        if (this.availableConnections.length === 0) {\n            // Wait for a connection to become available\n            await new Promise((resolve)=>setTimeout(resolve, 10));\n            return this.getConnection();\n        }\n        const connection = this.availableConnections.pop();\n        this.busyConnections.add(connection);\n        return connection;\n    }\n    releaseConnection(connection) {\n        if (this.busyConnections.has(connection)) {\n            this.busyConnections.delete(connection);\n            this.availableConnections.push(connection);\n        }\n    }\n    async withConnection(operation) {\n        const connection = await this.getConnection();\n        try {\n            return await operation(connection);\n        } finally{\n            this.releaseConnection(connection);\n        }\n    }\n    getStats() {\n        return {\n            total: this.connections.length,\n            available: this.availableConnections.length,\n            busy: this.busyConnections.size,\n            initialized: this.initialized\n        };\n    }\n    close() {\n        this.connections.forEach((conn)=>{\n            try {\n                conn.close();\n            } catch (error) {\n                console.error('Error closing database connection:', error);\n            }\n        });\n        this.connections = [];\n        this.availableConnections = [];\n        this.busyConnections.clear();\n        this.initialized = false;\n    }\n    constructor(dbPath, config){\n        _define_property(this, \"dbPath\", void 0);\n        _define_property(this, \"config\", void 0);\n        _define_property(this, \"connections\", void 0);\n        _define_property(this, \"availableConnections\", void 0);\n        _define_property(this, \"busyConnections\", void 0);\n        _define_property(this, \"initialized\", void 0);\n        _define_property(this, \"retryCount\", void 0);\n        this.dbPath = dbPath;\n        this.config = config;\n        this.connections = [];\n        this.availableConnections = [];\n        this.busyConnections = new Set();\n        this.initialized = false;\n        this.retryCount = 0;\n    }\n}\n// Create global connection pool\nconst connectionPool = new DatabaseConnectionPool(DATABASE_PATH, poolConfig);\n// Export legacy db interface for backward compatibility\nexport const db = {\n    prepare: (sql)=>{\n        return {\n            run: async (...params)=>{\n                return connectionPool.withConnection((conn)=>{\n                    const stmt = conn.prepare(sql);\n                    return stmt.run(...params);\n                });\n            },\n            get: async (...params)=>{\n                return connectionPool.withConnection((conn)=>{\n                    const stmt = conn.prepare(sql);\n                    return stmt.get(...params);\n                });\n            },\n            all: async (...params)=>{\n                return connectionPool.withConnection((conn)=>{\n                    const stmt = conn.prepare(sql);\n                    return stmt.all(...params);\n                });\n            }\n        };\n    },\n    exec: async (sql)=>{\n        return connectionPool.withConnection((conn)=>conn.exec(sql));\n    },\n    pragma: async (pragma)=>{\n        return connectionPool.withConnection((conn)=>conn.pragma(pragma));\n    },\n    close: ()=>connectionPool.close(),\n    transaction: (operations)=>{\n        return connectionPool.withConnection((conn)=>{\n            const transaction = conn.transaction(operations);\n            return transaction();\n        });\n    },\n    getStats: ()=>connectionPool.getStats()\n};\n// Export connection pool for advanced usage\nexport { connectionPool };\n// Initialize database tables\nexport async function initializeDatabase() {\n    console.log('Initializing database...');\n    try {\n        // Create prompt_cards table\n        await db.exec(`\n      CREATE TABLE IF NOT EXISTS prompt_cards (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        prompt_template TEXT NOT NULL,\n        variables TEXT DEFAULT '[]', -- JSON array of variable names\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n        // Create test_cases table\n        await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_cases (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        prompt_card_id INTEGER NOT NULL,\n        name TEXT NOT NULL,\n        input_variables TEXT NOT NULL, -- JSON object\n        expected_output TEXT,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion objects\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n        // Create enhanced test_results table for Phase 4\n        await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_results (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        test_case_id INTEGER NOT NULL,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        response TEXT NOT NULL,\n        passed BOOLEAN NOT NULL,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion results\n        execution_time_ms INTEGER,\n        error TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE\n      )\n    `);\n        // Create test execution queue table\n        await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_execution_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT UNIQUE NOT NULL,\n        prompt_card_id INTEGER NOT NULL,\n        test_case_ids TEXT NOT NULL, -- JSON array\n        model TEXT NOT NULL,\n        status TEXT DEFAULT 'pending', -- pending, running, completed, failed, cancelled\n        priority INTEGER DEFAULT 0,\n        configuration TEXT, -- JSON\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        started_at DATETIME,\n        completed_at DATETIME,\n        error_message TEXT,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id)\n      )\n    `);\n        // Create indexes for better performance\n        await db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_prompt_cards_title ON prompt_cards(title);\n      CREATE INDEX IF NOT EXISTS idx_test_cases_prompt_card_id ON test_cases(prompt_card_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_test_case_id ON test_results(test_case_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_execution_id ON test_results(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_status ON test_execution_queue(status);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_priority ON test_execution_queue(priority DESC);\n    `);\n        console.log('Database initialized successfully');\n        return db;\n    } catch (error) {\n        console.error('Error initializing database:', error);\n        throw error;\n    }\n}\n// Graceful shutdown\nprocess.on('SIGINT', ()=>{\n    console.log('Closing database connection...');\n    db.close();\n    process.exit(0);\n});\nexport default db;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}