{"version":3,"names":["cov_29x6jxts4f","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","llmService","promptAnalyzer","EventStore","LRUCache","performance","createHash","OptimizationEngine","generateOptimizationSuggestions","originalPrompt","targetMetrics","constraints","startTime","now","cacheKey","generateCacheKey","cached","suggestionCache","get","trackPerformance","suggestionId","Date","Math","random","toString","substr","analysis","getCachedAnalysis","strategies","generateOptimizationStrategiesParallel","suggestions","processStrategiesInParallel","storeOptimizationSuggestions","set","error","console","Error","message","createABTest","config","testId","testConfig","id","status","validateABTestConfig","variant","variants","securityValidation","validatePromptSecurity","prompt","passed","name","issues","join","eventStore","recordEvent","event_type","entity_id","entity_type","data","timestamp","runningTests","startABTest","duration","startDate","log","recordABTestResult","variantId","result","analyzeABTestResults","testResults","getEvents","variantResults","Map","forEach","has","push","variantMetrics","map","results","metrics","calculateVariantMetrics","sampleSize","length","performanceComparison","vsControl","pValue","winner","determineABTestWinner","primaryMetric","insights","generateABTestInsights","confidence","statisticalSignificance","significanceLevel","recommendations","completedAt","startPromptTuning","tuningId","tuningConfig","validateTuningConfig","runningTuning","executeTuningProcess","getTuningProgress","progress","currentIteration","iterations","totalIterations","bestMetrics","finalMetrics","estimatedCompletion","generateOptimizationStrategies","effectiveness","score","type","description","reasoning","expectedImprovement","successRate","responseTime","qualityScore","patterns","failurePatterns","consistencyScore","applyOptimizationStrategy","strategy","optimizationPrompt","maxLength","maintainStyle","securityLevel","response","generate","optimizedPrompt","trim","substring","basicIssues","pattern","check","test","enhancedIssues","strictIssues","totalWeight","reduce","sum","weight","abs","endDate","successfulResults","filter","r","success","bestVariant","bestScore","getMetricValue","avgScore","v","min","metricName","winnerMetrics","find","toFixed","controlVariant","toLowerCase","includes","improvement","currentPrompt","bestPrompt","i","generatePromptVariant","testPromptVariant","calculateTuningScore","objectives","iteration","improvements","baselineScore","totalImprovement","convergenceAnalysis","converged","slice","every","iter","stagnationPoint","optimalIteration","findIndex","variationPrompt","primary","requiredKeywords","prohibitedKeywords","mockMetrics","primaryWeight","secondaryWeight","secondary","objective","content","JSON","stringify","update","digest","analysisCache","analyzePrompt","strategyPromises","generateStructureStrategy","generateClarityStrategy","generateSpecificityStrategy","generateContextStrategy","generatePerformanceStrategy","Promise","all","processingPromises","changes","warn","initializeWorkerPool","maxWorkers","operation","performanceMetrics","shift","getPerformanceStats","stats","avg","time","max","round","count","clearCaches","clear","getCacheStats","size","hitRate","calculatedSize","constructor","getInstance","ttl","require","cpus","workerPool","optimizationEngine"],"sources":["OptimizationEngine.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { llmService } from '../llmService';\nimport { promptAnalyzer } from './PromptAnalyzer';\nimport { EventStore } from '../analytics/EventStore';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\nimport { createHash } from 'crypto';\nexport class OptimizationEngine {\n    /**\n   * Generate AI-powered optimization suggestions for a prompt\n   */ async generateOptimizationSuggestions(originalPrompt, targetMetrics = {}, constraints = {}) {\n        const startTime = performance.now();\n        const cacheKey = this.generateCacheKey(originalPrompt, targetMetrics, constraints);\n        // Check cache first\n        const cached = this.suggestionCache.get(cacheKey);\n        if (cached) {\n            this.trackPerformance('generateOptimizationSuggestions', performance.now() - startTime);\n            return cached;\n        }\n        const suggestionId = `opt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        try {\n            // Analyze current prompt with caching\n            const analysis = await this.getCachedAnalysis(originalPrompt);\n            // Generate multiple optimization strategies in parallel\n            const strategies = await this.generateOptimizationStrategiesParallel(originalPrompt, analysis, targetMetrics, constraints);\n            // Process strategies in parallel using worker pool\n            const suggestions = await this.processStrategiesInParallel(originalPrompt, strategies, constraints, suggestionId);\n            // Store suggestions (async, don't wait)\n            this.storeOptimizationSuggestions(suggestionId, originalPrompt, suggestions, targetMetrics, constraints);\n            // Cache results\n            this.suggestionCache.set(cacheKey, suggestions);\n            // Track performance\n            this.trackPerformance('generateOptimizationSuggestions', performance.now() - startTime);\n            return suggestions;\n        } catch (error) {\n            console.error('Error generating optimization suggestions:', error);\n            throw new Error(`Optimization suggestion generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Create and start an A/B test for prompt variants\n   */ async createABTest(config) {\n        const testId = `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const testConfig = {\n            ...config,\n            id: testId,\n            status: 'draft'\n        };\n        // Validate test configuration\n        await this.validateABTestConfig(testConfig);\n        // Security validation for all variants\n        for (const variant of testConfig.variants){\n            const securityValidation = await this.validatePromptSecurity(variant.prompt, 'enhanced');\n            if (!securityValidation.passed) {\n                throw new Error(`Security validation failed for variant ${variant.name}: ${securityValidation.issues.join(', ')}`);\n            }\n        }\n        // Store test configuration\n        await this.eventStore.recordEvent({\n            event_type: 'ab_test_created',\n            entity_id: testId,\n            entity_type: 'ab_test',\n            data: testConfig,\n            timestamp: new Date()\n        });\n        this.runningTests.set(testId, testConfig);\n        return testConfig;\n    }\n    /**\n   * Start an A/B test\n   */ async startABTest(testId) {\n        const testConfig = this.runningTests.get(testId);\n        if (!testConfig) {\n            throw new Error(`A/B test ${testId} not found`);\n        }\n        testConfig.status = 'running';\n        testConfig.duration.startDate = new Date();\n        await this.eventStore.recordEvent({\n            event_type: 'ab_test_started',\n            entity_id: testId,\n            entity_type: 'ab_test',\n            data: testConfig,\n            timestamp: new Date()\n        });\n        console.log(`A/B test ${testId} started`);\n    }\n    /**\n   * Record A/B test execution result\n   */ async recordABTestResult(testId, variantId, result) {\n        const testConfig = this.runningTests.get(testId);\n        if (!testConfig || testConfig.status !== 'running') {\n            throw new Error(`A/B test ${testId} is not running`);\n        }\n        await this.eventStore.recordEvent({\n            event_type: 'ab_test_result',\n            entity_id: testId,\n            entity_type: 'ab_test',\n            data: {\n                testId,\n                variantId,\n                result,\n                timestamp: new Date()\n            },\n            timestamp: new Date()\n        });\n    }\n    /**\n   * Analyze A/B test results and determine winner\n   */ async analyzeABTestResults(testId) {\n        const testConfig = this.runningTests.get(testId);\n        if (!testConfig) {\n            throw new Error(`A/B test ${testId} not found`);\n        }\n        // Get all test results\n        const testResults = await this.eventStore.getEvents({\n            event_type: 'ab_test_result',\n            entity_id: testId\n        });\n        // Group results by variant\n        const variantResults = new Map();\n        testResults.forEach((result)=>{\n            const variantId = result.data.variantId;\n            if (!variantResults.has(variantId)) {\n                variantResults.set(variantId, []);\n            }\n            variantResults.get(variantId).push(result.data.result);\n        });\n        // Calculate metrics for each variant\n        const variantMetrics = testConfig.variants.map((variant)=>{\n            const results = variantResults.get(variant.id) || [];\n            const metrics = this.calculateVariantMetrics(results);\n            return {\n                id: variant.id,\n                name: variant.name,\n                metrics: {\n                    ...metrics,\n                    sampleSize: results.length\n                },\n                performanceComparison: {\n                    vsControl: 0,\n                    pValue: 0 // Will be calculated below\n                }\n            };\n        });\n        // Determine winner using statistical significance\n        const winner = this.determineABTestWinner(variantMetrics, testConfig.metrics.primaryMetric);\n        // Generate insights\n        const insights = await this.generateABTestInsights(testConfig, variantMetrics, winner);\n        const result = {\n            testId,\n            winner: winner.id,\n            confidence: winner.confidence,\n            statisticalSignificance: winner.significanceLevel > 0.95,\n            variants: variantMetrics,\n            insights,\n            recommendations: winner.recommendations,\n            completedAt: new Date()\n        };\n        // Store results\n        await this.eventStore.recordEvent({\n            event_type: 'ab_test_completed',\n            entity_id: testId,\n            entity_type: 'ab_test',\n            data: result,\n            timestamp: new Date()\n        });\n        // Update test status\n        testConfig.status = 'completed';\n        testConfig.results = result;\n        return result;\n    }\n    /**\n   * Start automated prompt tuning\n   */ async startPromptTuning(config) {\n        const tuningId = `tuning_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const tuningConfig = {\n            ...config,\n            id: tuningId,\n            status: 'pending'\n        };\n        // Validate configuration\n        await this.validateTuningConfig(tuningConfig);\n        // Start tuning process\n        this.runningTuning.set(tuningId, tuningConfig);\n        // Run tuning in background\n        this.executeTuningProcess(tuningConfig);\n        return tuningConfig;\n    }\n    /**\n   * Get tuning progress\n   */ async getTuningProgress(tuningId) {\n        const tuningConfig = this.runningTuning.get(tuningId);\n        if (!tuningConfig) {\n            throw new Error(`Tuning process ${tuningId} not found`);\n        }\n        const progress = {\n            status: tuningConfig.status,\n            currentIteration: tuningConfig.results?.iterations.length || 0,\n            totalIterations: tuningConfig.iterations,\n            bestMetrics: tuningConfig.results?.finalMetrics || null,\n            estimatedCompletion: new Date(Date.now() + 60000) // Placeholder\n        };\n        return progress;\n    }\n    /**\n   * Generate optimization strategies\n   */ async generateOptimizationStrategies(originalPrompt, analysis, targetMetrics, constraints) {\n        const strategies = [];\n        // Structure optimization\n        if (analysis.effectiveness.score < 70) {\n            strategies.push({\n                type: 'structure',\n                description: 'Improve prompt structure and organization',\n                reasoning: 'Current prompt lacks clear structure and logical flow',\n                expectedImprovement: {\n                    successRate: 15,\n                    responseTime: 5,\n                    qualityScore: 10\n                },\n                confidence: 0.8\n            });\n        }\n        // Clarity optimization\n        if (analysis.patterns.failurePatterns.length > 0) {\n            strategies.push({\n                type: 'clarity',\n                description: 'Enhance prompt clarity and reduce ambiguity',\n                reasoning: 'Failure patterns indicate confusion or misunderstanding',\n                expectedImprovement: {\n                    successRate: 20,\n                    responseTime: 0,\n                    qualityScore: 15\n                },\n                confidence: 0.7\n            });\n        }\n        // Specificity optimization\n        if (analysis.metrics.consistencyScore < 60) {\n            strategies.push({\n                type: 'specificity',\n                description: 'Add more specific instructions and examples',\n                reasoning: 'Low consistency score indicates need for more specific guidance',\n                expectedImprovement: {\n                    successRate: 10,\n                    responseTime: -5,\n                    qualityScore: 20\n                },\n                confidence: 0.9\n            });\n        }\n        // Context optimization\n        strategies.push({\n            type: 'context',\n            description: 'Optimize context and background information',\n            reasoning: 'Enhanced context can improve response quality',\n            expectedImprovement: {\n                successRate: 8,\n                responseTime: 2,\n                qualityScore: 12\n            },\n            confidence: 0.6\n        });\n        return strategies;\n    }\n    /**\n   * Apply optimization strategy to prompt\n   */ async applyOptimizationStrategy(originalPrompt, strategy, constraints) {\n        const optimizationPrompt = `\n      Optimize this prompt based on the following strategy:\n      \n      Original Prompt: \"${originalPrompt}\"\n      \n      Strategy: ${strategy.type}\n      Description: ${strategy.description}\n      Reasoning: ${strategy.reasoning}\n      \n      Constraints:\n      ${constraints.maxLength ? `- Maximum length: ${constraints.maxLength} characters` : ''}\n      ${constraints.maintainStyle ? '- Maintain original writing style' : ''}\n      ${constraints.securityLevel ? `- Security level: ${constraints.securityLevel}` : ''}\n      \n      Return only the optimized prompt without any additional text or explanations.\n    `;\n        try {\n            const response = await llmService.generate(optimizationPrompt);\n            let optimizedPrompt = response.response.trim();\n            // Apply length constraint\n            if (constraints.maxLength && optimizedPrompt.length > constraints.maxLength) {\n                optimizedPrompt = optimizedPrompt.substring(0, constraints.maxLength);\n            }\n            return optimizedPrompt;\n        } catch (error) {\n            console.error('Error applying optimization strategy:', error);\n            return originalPrompt; // Return original if optimization fails\n        }\n    }\n    /**\n   * Validate prompt security\n   */ async validatePromptSecurity(prompt, securityLevel) {\n        const issues = [];\n        const recommendations = [];\n        // Basic security checks\n        const basicIssues = [\n            {\n                pattern: /ignore.*instructions/i,\n                message: 'Potential instruction bypass'\n            },\n            {\n                pattern: /system.*prompt/i,\n                message: 'System prompt manipulation'\n            },\n            {\n                pattern: /jailbreak/i,\n                message: 'Jailbreak attempt'\n            },\n            {\n                pattern: /password|api.*key|secret/i,\n                message: 'Sensitive information exposure'\n            }\n        ];\n        basicIssues.forEach((check)=>{\n            if (check.pattern.test(prompt)) {\n                issues.push(check.message);\n            }\n        });\n        // Enhanced security checks\n        if (securityLevel === 'enhanced' || securityLevel === 'strict') {\n            const enhancedIssues = [\n                {\n                    pattern: /role.*play/i,\n                    message: 'Role-playing instruction'\n                },\n                {\n                    pattern: /pretend/i,\n                    message: 'Pretend instruction'\n                },\n                {\n                    pattern: /act.*as/i,\n                    message: 'Acting instruction'\n                },\n                {\n                    pattern: /override/i,\n                    message: 'Override instruction'\n                }\n            ];\n            enhancedIssues.forEach((check)=>{\n                if (check.pattern.test(prompt)) {\n                    issues.push(check.message);\n                }\n            });\n        }\n        // Strict security checks\n        if (securityLevel === 'strict') {\n            const strictIssues = [\n                {\n                    pattern: /you.*must/i,\n                    message: 'Imperative instruction'\n                },\n                {\n                    pattern: /required.*to/i,\n                    message: 'Requirement instruction'\n                },\n                {\n                    pattern: /force|compel/i,\n                    message: 'Forceful instruction'\n                }\n            ];\n            strictIssues.forEach((check)=>{\n                if (check.pattern.test(prompt)) {\n                    issues.push(check.message);\n                }\n            });\n        }\n        // Generate recommendations\n        if (issues.length > 0) {\n            recommendations.push('Review and sanitize identified security issues');\n            recommendations.push('Use more neutral and instructional language');\n            recommendations.push('Avoid manipulative or coercive phrasing');\n        }\n        return {\n            passed: issues.length === 0,\n            issues,\n            recommendations\n        };\n    }\n    /**\n   * Validate A/B test configuration\n   */ async validateABTestConfig(config) {\n        if (config.variants.length < 2) {\n            throw new Error('A/B test must have at least 2 variants');\n        }\n        const totalWeight = config.variants.reduce((sum, variant)=>sum + variant.weight, 0);\n        if (Math.abs(totalWeight - 100) > 0.1) {\n            throw new Error('Variant weights must sum to 100%');\n        }\n        if (config.duration.endDate <= config.duration.startDate) {\n            throw new Error('End date must be after start date');\n        }\n    }\n    /**\n   * Calculate metrics for variant results\n   */ calculateVariantMetrics(results) {\n        if (results.length === 0) {\n            return {\n                successRate: 0,\n                responseTime: 0,\n                qualityScore: 0\n            };\n        }\n        const successfulResults = results.filter((r)=>r.success);\n        const successRate = successfulResults.length / results.length * 100;\n        const responseTime = results.reduce((sum, r)=>sum + r.responseTime, 0) / results.length;\n        const qualityScore = results.reduce((sum, r)=>sum + r.qualityScore, 0) / results.length;\n        return {\n            successRate,\n            responseTime,\n            qualityScore\n        };\n    }\n    /**\n   * Determine A/B test winner\n   */ determineABTestWinner(variantMetrics, primaryMetric) {\n        // Simple winner determination based on primary metric\n        let bestVariant = variantMetrics[0];\n        let bestScore = this.getMetricValue(bestVariant.metrics, primaryMetric);\n        for (const variant of variantMetrics){\n            const score = this.getMetricValue(variant.metrics, primaryMetric);\n            if (score > bestScore) {\n                bestScore = score;\n                bestVariant = variant;\n            }\n        }\n        // Calculate confidence (simplified)\n        const avgScore = variantMetrics.reduce((sum, v)=>sum + this.getMetricValue(v.metrics, primaryMetric), 0) / variantMetrics.length;\n        const confidence = Math.min(1, (bestScore - avgScore) / avgScore);\n        return {\n            id: bestVariant.id,\n            confidence,\n            significanceLevel: 0.95,\n            recommendations: [\n                `Implement ${bestVariant.name} as the winning variant`,\n                `Monitor performance for ${primaryMetric} improvements`,\n                'Consider running follow-up tests for further optimization'\n            ]\n        };\n    }\n    /**\n   * Get metric value by name\n   */ getMetricValue(metrics, metricName) {\n        switch(metricName){\n            case 'success_rate':\n                return metrics.successRate;\n            case 'response_time':\n                return 1000 / metrics.responseTime; // Invert for \"higher is better\"\n            case 'quality_score':\n                return metrics.qualityScore;\n            default:\n                return 0;\n        }\n    }\n    /**\n   * Generate A/B test insights\n   */ async generateABTestInsights(testConfig, variantMetrics, winner) {\n        const insights = [];\n        // Performance insights\n        const winnerMetrics = variantMetrics.find((v)=>v.id === winner.id);\n        if (winnerMetrics) {\n            insights.push(`${winnerMetrics.name} achieved ${winnerMetrics.metrics.successRate.toFixed(1)}% success rate`);\n            insights.push(`Response time was ${winnerMetrics.metrics.responseTime.toFixed(0)}ms on average`);\n            insights.push(`Quality score reached ${winnerMetrics.metrics.qualityScore.toFixed(1)}`);\n        }\n        // Comparative insights\n        const controlVariant = variantMetrics.find((v)=>v.name.toLowerCase().includes('control'));\n        if (controlVariant && winnerMetrics && winnerMetrics.id !== controlVariant.id) {\n            const improvement = (winnerMetrics.metrics.successRate - controlVariant.metrics.successRate) / controlVariant.metrics.successRate * 100;\n            insights.push(`Winner shows ${improvement.toFixed(1)}% improvement over control`);\n        }\n        return insights;\n    }\n    /**\n   * Validate tuning configuration\n   */ async validateTuningConfig(config) {\n        if (config.iterations < 1 || config.iterations > 100) {\n            throw new Error('Iterations must be between 1 and 100');\n        }\n        if (config.constraints.maxLength < 10) {\n            throw new Error('Maximum length must be at least 10 characters');\n        }\n    }\n    /**\n   * Execute tuning process\n   */ async executeTuningProcess(config) {\n        try {\n            config.status = 'running';\n            const iterations = [];\n            let currentPrompt = config.originalPrompt;\n            let bestPrompt = currentPrompt;\n            let bestScore = 0;\n            for(let i = 0; i < config.iterations; i++){\n                // Generate variant\n                const variant = await this.generatePromptVariant(currentPrompt, config);\n                // Test variant\n                const metrics = await this.testPromptVariant(variant, config);\n                // Calculate score\n                const score = this.calculateTuningScore(metrics, config.objectives);\n                // Update best if better\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestPrompt = variant;\n                }\n                // Record iteration\n                iterations.push({\n                    iteration: i + 1,\n                    prompt: variant,\n                    metrics,\n                    improvements: (score - bestScore) / bestScore * 100,\n                    timestamp: new Date()\n                });\n                // Update current prompt for next iteration\n                currentPrompt = variant;\n            }\n            // Calculate final results\n            const finalMetrics = iterations[iterations.length - 1].metrics;\n            const baselineScore = this.calculateTuningScore({\n                successRate: 50,\n                responseTime: 1000,\n                qualityScore: 50\n            }, config.objectives);\n            const totalImprovement = (bestScore - baselineScore) / baselineScore * 100;\n            const result = {\n                tuningId: config.id,\n                iterations,\n                bestPrompt,\n                finalMetrics,\n                totalImprovement,\n                convergenceAnalysis: {\n                    converged: iterations.length >= 5 && iterations.slice(-5).every((iter)=>Math.abs(iter.improvements) < 1),\n                    stagnationPoint: iterations.length,\n                    optimalIteration: iterations.findIndex((iter)=>iter.prompt === bestPrompt) + 1\n                },\n                completedAt: new Date()\n            };\n            config.status = 'completed';\n            config.results = result;\n            // Store results\n            await this.eventStore.recordEvent({\n                event_type: 'tuning_completed',\n                entity_id: config.id,\n                entity_type: 'tuning',\n                data: result,\n                timestamp: new Date()\n            });\n        } catch (error) {\n            config.status = 'failed';\n            console.error('Tuning process failed:', error);\n        }\n    }\n    /**\n   * Generate prompt variant for tuning\n   */ async generatePromptVariant(currentPrompt, config) {\n        const variationPrompt = `\n      Create a variation of this prompt that improves ${config.objectives.primary}:\n      \n      Current Prompt: \"${currentPrompt}\"\n      \n      Constraints:\n      - Maximum length: ${config.constraints.maxLength} characters\n      - Must include: ${config.constraints.requiredKeywords.join(', ')}\n      - Must not include: ${config.constraints.prohibitedKeywords.join(', ')}\n      \n      Return only the improved prompt without explanations.\n    `;\n        try {\n            const response = await llmService.generate(variationPrompt);\n            return response.response.trim();\n        } catch (error) {\n            console.error('Error generating prompt variant:', error);\n            return currentPrompt; // Return original if generation fails\n        }\n    }\n    /**\n   * Test prompt variant\n   */ async testPromptVariant(prompt, config) {\n        // Simplified testing - in real implementation, use actual test cases\n        const mockMetrics = {\n            successRate: 70 + Math.random() * 25,\n            responseTime: 800 + Math.random() * 400,\n            qualityScore: 60 + Math.random() * 30\n        };\n        return mockMetrics;\n    }\n    /**\n   * Calculate tuning score\n   */ calculateTuningScore(metrics, objectives) {\n        const primaryWeight = 0.6;\n        const secondaryWeight = 0.4 / objectives.secondary.length;\n        let score = 0;\n        // Primary objective\n        switch(objectives.primary){\n            case 'success_rate':\n                score += metrics.successRate * primaryWeight;\n                break;\n            case 'response_time':\n                score += 1000 / metrics.responseTime * primaryWeight;\n                break;\n            case 'quality_score':\n                score += metrics.qualityScore * primaryWeight;\n                break;\n        }\n        // Secondary objectives\n        objectives.secondary.forEach((objective)=>{\n            switch(objective){\n                case 'success_rate':\n                    score += metrics.successRate * secondaryWeight;\n                    break;\n                case 'response_time':\n                    score += 1000 / metrics.responseTime * secondaryWeight;\n                    break;\n                case 'quality_score':\n                    score += metrics.qualityScore * secondaryWeight;\n                    break;\n            }\n        });\n        return score;\n    }\n    /**\n   * Generate cache key for optimization suggestions\n   */ generateCacheKey(prompt, metrics, constraints) {\n        const content = `${prompt}${JSON.stringify(metrics)}${JSON.stringify(constraints)}`;\n        return createHash('md5').update(content).digest('hex');\n    }\n    /**\n   * Get cached prompt analysis\n   */ async getCachedAnalysis(prompt) {\n        const cacheKey = createHash('md5').update(prompt).digest('hex');\n        const cached = this.analysisCache.get(cacheKey);\n        if (cached) {\n            return cached;\n        }\n        const analysis = await promptAnalyzer.analyzePrompt('temp_prompt', prompt);\n        this.analysisCache.set(cacheKey, analysis);\n        return analysis;\n    }\n    /**\n   * Generate optimization strategies in parallel\n   */ async generateOptimizationStrategiesParallel(originalPrompt, analysis, targetMetrics, constraints) {\n        const strategyPromises = [\n            this.generateStructureStrategy(analysis),\n            this.generateClarityStrategy(analysis),\n            this.generateSpecificityStrategy(analysis),\n            this.generateContextStrategy(analysis),\n            this.generatePerformanceStrategy(analysis, targetMetrics)\n        ];\n        const strategies = await Promise.all(strategyPromises);\n        return strategies.filter((strategy)=>strategy !== null);\n    }\n    /**\n   * Process strategies in parallel using worker pool\n   */ async processStrategiesInParallel(originalPrompt, strategies, constraints, suggestionId) {\n        const suggestions = [];\n        const processingPromises = strategies.map(async (strategy)=>{\n            try {\n                const optimizedPrompt = await this.applyOptimizationStrategy(originalPrompt, strategy, constraints);\n                // Security validation\n                const securityValidation = await this.validatePromptSecurity(optimizedPrompt, constraints.securityLevel || 'basic');\n                if (securityValidation.passed || constraints.securityLevel === 'basic') {\n                    return {\n                        id: `${suggestionId}_${strategy.type}`,\n                        originalPrompt,\n                        optimizedPrompt,\n                        changes: [\n                            {\n                                type: strategy.type,\n                                description: strategy.description,\n                                reasoning: strategy.reasoning\n                            }\n                        ],\n                        expectedImprovement: strategy.expectedImprovement,\n                        confidence: strategy.confidence,\n                        securityValidation,\n                        timestamp: new Date()\n                    };\n                }\n                return null;\n            } catch (error) {\n                console.warn(`Strategy ${strategy.type} failed:`, error.message);\n                return null;\n            }\n        });\n        const results = await Promise.all(processingPromises);\n        return results.filter((result)=>result !== null);\n    }\n    /**\n   * Generate structure optimization strategy\n   */ async generateStructureStrategy(analysis) {\n        if (analysis.effectiveness.score < 70) {\n            return {\n                type: 'structure',\n                description: 'Improve prompt structure and organization',\n                reasoning: 'Current prompt lacks clear structure and logical flow',\n                expectedImprovement: {\n                    successRate: 15,\n                    responseTime: 5,\n                    qualityScore: 10\n                },\n                confidence: 0.8\n            };\n        }\n        return null;\n    }\n    /**\n   * Generate clarity optimization strategy\n   */ async generateClarityStrategy(analysis) {\n        if (analysis.patterns.failurePatterns.length > 0) {\n            return {\n                type: 'clarity',\n                description: 'Enhance prompt clarity and reduce ambiguity',\n                reasoning: 'Failure patterns indicate confusion or misunderstanding',\n                expectedImprovement: {\n                    successRate: 20,\n                    responseTime: 0,\n                    qualityScore: 15\n                },\n                confidence: 0.7\n            };\n        }\n        return null;\n    }\n    /**\n   * Generate specificity optimization strategy\n   */ async generateSpecificityStrategy(analysis) {\n        if (analysis.metrics.consistencyScore < 60) {\n            return {\n                type: 'specificity',\n                description: 'Add more specific instructions and examples',\n                reasoning: 'Low consistency score indicates need for more specific guidance',\n                expectedImprovement: {\n                    successRate: 10,\n                    responseTime: -5,\n                    qualityScore: 20\n                },\n                confidence: 0.9\n            };\n        }\n        return null;\n    }\n    /**\n   * Generate context optimization strategy\n   */ async generateContextStrategy(analysis) {\n        return {\n            type: 'context',\n            description: 'Optimize context and background information',\n            reasoning: 'Enhanced context can improve response quality',\n            expectedImprovement: {\n                successRate: 8,\n                responseTime: 2,\n                qualityScore: 12\n            },\n            confidence: 0.6\n        };\n    }\n    /**\n   * Generate performance optimization strategy\n   */ async generatePerformanceStrategy(analysis, targetMetrics) {\n        return {\n            type: 'performance',\n            description: 'Optimize for better response time and quality',\n            reasoning: 'Target specific performance improvements',\n            expectedImprovement: {\n                successRate: targetMetrics.successRate ? 10 : 5,\n                responseTime: targetMetrics.responseTime ? 15 : 8,\n                qualityScore: targetMetrics.qualityScore ? 12 : 6\n            },\n            confidence: 0.7\n        };\n    }\n    /**\n   * Store optimization suggestions asynchronously\n   */ async storeOptimizationSuggestions(suggestionId, originalPrompt, suggestions, targetMetrics, constraints) {\n        try {\n            await this.eventStore.recordEvent({\n                event_type: 'optimization_suggestions',\n                entity_id: suggestionId,\n                entity_type: 'prompt',\n                data: {\n                    originalPrompt,\n                    suggestions,\n                    targetMetrics,\n                    constraints\n                },\n                timestamp: new Date()\n            });\n        } catch (error) {\n            console.warn('Failed to store optimization suggestions:', error.message);\n        }\n    }\n    /**\n   * Initialize worker pool for parallel processing\n   */ initializeWorkerPool() {\n        // Worker pool implementation would go here\n        // For now, we'll use Promise.all for parallel processing\n        console.log(`Initialized optimization engine with ${this.maxWorkers} workers`);\n    }\n    /**\n   * Track performance metrics\n   */ trackPerformance(operation, duration) {\n        if (!this.performanceMetrics.has(operation)) {\n            this.performanceMetrics.set(operation, []);\n        }\n        const metrics = this.performanceMetrics.get(operation);\n        metrics.push(duration);\n        // Keep only last 100 measurements\n        if (metrics.length > 100) {\n            metrics.shift();\n        }\n        // Log slow operations\n        if (duration > 30000) {\n            console.warn(`Slow optimization operation: ${operation} took ${duration.toFixed(2)}ms`);\n        }\n    }\n    /**\n   * Get performance statistics\n   */ getPerformanceStats() {\n        const stats = {};\n        for (const [operation, metrics] of this.performanceMetrics){\n            if (metrics.length > 0) {\n                const avg = metrics.reduce((sum, time)=>sum + time, 0) / metrics.length;\n                const max = Math.max(...metrics);\n                const min = Math.min(...metrics);\n                stats[operation] = {\n                    avg: Math.round(avg),\n                    max: Math.round(max),\n                    min: Math.round(min),\n                    count: metrics.length\n                };\n            }\n        }\n        return stats;\n    }\n    /**\n   * Clear caches\n   */ clearCaches() {\n        this.analysisCache.clear();\n        this.suggestionCache.clear();\n        this.performanceMetrics.clear();\n        console.log('Optimization engine caches cleared');\n    }\n    /**\n   * Get cache statistics\n   */ getCacheStats() {\n        return {\n            analysis: {\n                size: this.analysisCache.size,\n                max: this.analysisCache.max,\n                hitRate: this.analysisCache.calculatedSize > 0 ? (this.analysisCache.calculatedSize - this.analysisCache.size) / this.analysisCache.calculatedSize : 0\n            },\n            suggestions: {\n                size: this.suggestionCache.size,\n                max: this.suggestionCache.max,\n                hitRate: this.suggestionCache.calculatedSize > 0 ? (this.suggestionCache.calculatedSize - this.suggestionCache.size) / this.suggestionCache.calculatedSize : 0\n            }\n        };\n    }\n    constructor(){\n        _define_property(this, \"eventStore\", void 0);\n        _define_property(this, \"runningTests\", void 0);\n        _define_property(this, \"runningTuning\", void 0);\n        _define_property(this, \"analysisCache\", void 0);\n        _define_property(this, \"suggestionCache\", void 0);\n        _define_property(this, \"performanceMetrics\", void 0);\n        _define_property(this, \"workerPool\", void 0);\n        _define_property(this, \"maxWorkers\", void 0);\n        this.eventStore = EventStore.getInstance();\n        this.runningTests = new Map();\n        this.runningTuning = new Map();\n        // Initialize caching for better performance\n        this.analysisCache = new LRUCache({\n            max: 500,\n            ttl: 1000 * 60 * 30 // 30 minutes\n        });\n        this.suggestionCache = new LRUCache({\n            max: 200,\n            ttl: 1000 * 60 * 15 // 15 minutes\n        });\n        this.performanceMetrics = new Map();\n        this.maxWorkers = Math.min(4, require('os').cpus().length);\n        this.workerPool = [];\n        // Initialize worker pool for parallel processing\n        this.initializeWorkerPool();\n    }\n}\n// Export singleton instance\nexport const optimizationEngine = new OptimizationEngine();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}