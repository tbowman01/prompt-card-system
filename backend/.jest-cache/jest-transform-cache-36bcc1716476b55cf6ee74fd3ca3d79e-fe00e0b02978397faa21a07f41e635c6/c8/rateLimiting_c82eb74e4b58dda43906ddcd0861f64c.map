{"version":3,"names":["cov_esdsqjozq","actualCoverage","rateLimit","slowDown","generalRateLimit","s","windowMs","max","message","success","error","retryAfter","standardHeaders","legacyHeaders","handler","req","res","f","status","json","limit","Math","round","ip","path","authRateLimit","skipSuccessfulRequests","apiRateLimit","testExecutionRateLimit","speedLimiter","delayAfter","delayMs","used","maxDelayMs","skipFailedRequests","heavyOperationRateLimit","uploadRateLimit"],"sources":["rateLimiting.ts"],"sourcesContent":["import rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\n// Redis store for distributed rate limiting (optional)\n// import RedisStore from 'rate-limit-redis';\n// import Redis from 'ioredis';\n// const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');\n// General API rate limit\nexport const generalRateLimit = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100,\n    message: {\n        success: false,\n        error: 'Too many requests from this IP, please try again later.',\n        retryAfter: 15 * 60 // seconds\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    // store: new RedisStore({\n    //   sendCommand: (...args: string[]) => redis.call(...args),\n    // }),\n    handler: (req, res)=>{\n        res.status(429).json({\n            success: false,\n            error: 'Rate limit exceeded',\n            limit: 100,\n            windowMs: 15 * 60 * 1000,\n            retryAfter: Math.round(15 * 60),\n            ip: req.ip,\n            path: req.path\n        });\n    }\n});\n// Strict rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 5,\n    message: {\n        success: false,\n        error: 'Too many authentication attempts, please try again later.',\n        retryAfter: 15 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skipSuccessfulRequests: true,\n    handler: (req, res)=>{\n        res.status(429).json({\n            success: false,\n            error: 'Authentication rate limit exceeded',\n            limit: 5,\n            windowMs: 15 * 60 * 1000,\n            retryAfter: Math.round(15 * 60),\n            ip: req.ip,\n            path: req.path\n        });\n    }\n});\n// API rate limit for high-frequency endpoints\nexport const apiRateLimit = rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 50,\n    message: {\n        success: false,\n        error: 'API rate limit exceeded',\n        retryAfter: 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n// Test execution rate limit (more permissive for testing)\nexport const testExecutionRateLimit = rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 20,\n    message: {\n        success: false,\n        error: 'Test execution rate limit exceeded',\n        retryAfter: 5 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n// Slow down middleware for additional protection\nexport const speedLimiter = slowDown({\n    windowMs: 15 * 60 * 1000,\n    delayAfter: 50,\n    delayMs: (used)=>{\n        return (used - 50) * 500; // Add 500ms delay for each request after delayAfter\n    },\n    maxDelayMs: 10000,\n    skipFailedRequests: false,\n    skipSuccessfulRequests: false\n});\n// Heavy operation rate limit (for resource-intensive operations)\nexport const heavyOperationRateLimit = rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 10,\n    message: {\n        success: false,\n        error: 'Heavy operation rate limit exceeded',\n        retryAfter: 60 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n// File upload rate limit\nexport const uploadRateLimit = rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 20,\n    message: {\n        success: false,\n        error: 'Upload rate limit exceeded',\n        retryAfter: 60 * 60\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n"],"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","ignoreList":[]}