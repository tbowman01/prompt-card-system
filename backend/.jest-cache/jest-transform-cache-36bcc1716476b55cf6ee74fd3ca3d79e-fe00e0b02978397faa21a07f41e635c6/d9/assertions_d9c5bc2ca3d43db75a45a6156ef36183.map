{"version":3,"names":["cov_2av6uq1w80","actualCoverage","express","llmService","assertionEngine","assertionRoutes","s","Router","get","req","res","f","types","getAvailableAssertionTypes","typeDefinitions","map","type","definition","getRegisteredTypes","includes","b","getStatistics","name","description","supported","json","success","data","totalTypes","length","error","console","status","Error","message","stats","getAssertionStatistics","post","output","assertions","context","body","Array","isArray","results","validateAssertions","summary","totalAssertions","passedAssertions","filter","r","passed","failedAssertions","averageExecutionTime","reduce","sum","executionTime","overallPassed","every","code","sampleOutput","customAssertion","value","result","valid","metadata","text1","text2","threshold","assertion","similarity","score","text","expectedSentiment","sentiment","actualSentiment","confidence","expectedLanguage","detectedLanguage","alternatives","maxToxicity","toxicityScore","categories","isToxic","exportData","exportTypes","setHeader","send","jsonData","JSON","stringify","importTypes","validatorCode","parameters","examples","validator","Function","registerAssertionType","availableTypes","totalExecutions","systemReady"],"sources":["assertions.ts"],"sourcesContent":["import express from 'express';\nimport { llmService } from '../services/llmService';\nimport { assertionEngine } from '../services/assertions';\nexport const assertionRoutes = express.Router();\n/**\n * Get available assertion types\n */ assertionRoutes.get('/types', async (req, res)=>{\n    try {\n        const types = llmService.getAvailableAssertionTypes();\n        const typeDefinitions = types.map((type)=>{\n            const definition = assertionEngine.getRegisteredTypes().includes(type) ? assertionEngine.getStatistics() : null;\n            return {\n                name: type,\n                description: `${type} assertion validation`,\n                supported: true\n            };\n        });\n        res.json({\n            success: true,\n            data: {\n                types: typeDefinitions,\n                totalTypes: types.length\n            }\n        });\n    } catch (error) {\n        console.error('Error getting assertion types:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Get assertion execution statistics\n */ assertionRoutes.get('/statistics', async (req, res)=>{\n    try {\n        const stats = llmService.getAssertionStatistics();\n        res.json({\n            success: true,\n            data: stats\n        });\n    } catch (error) {\n        console.error('Error getting assertion statistics:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Test assertion validation with sample data\n */ assertionRoutes.post('/test', async (req, res)=>{\n    try {\n        const { output, assertions, context } = req.body;\n        if (!output || !assertions || !Array.isArray(assertions)) {\n            return res.status(400).json({\n                success: false,\n                error: 'output and assertions array are required'\n            });\n        }\n        const results = await llmService.validateAssertions(output, assertions, context);\n        const summary = {\n            totalAssertions: results.length,\n            passedAssertions: results.filter((r)=>r.passed).length,\n            failedAssertions: results.filter((r)=>!r.passed).length,\n            averageExecutionTime: results.reduce((sum, r)=>sum + (r.executionTime || 0), 0) / results.length,\n            overallPassed: results.every((r)=>r.passed)\n        };\n        res.json({\n            success: true,\n            data: {\n                results,\n                summary\n            }\n        });\n    } catch (error) {\n        console.error('Error testing assertions:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Validate custom assertion code\n */ assertionRoutes.post('/validate-custom', async (req, res)=>{\n    try {\n        const { code, sampleOutput, description } = req.body;\n        if (!code || !sampleOutput) {\n            return res.status(400).json({\n                success: false,\n                error: 'code and sampleOutput are required'\n            });\n        }\n        const customAssertion = {\n            type: 'custom',\n            value: code,\n            description: description || 'Custom assertion validation'\n        };\n        const results = await llmService.validateAssertions(sampleOutput, [\n            customAssertion\n        ]);\n        const result = results[0];\n        res.json({\n            success: true,\n            data: {\n                valid: !result.error,\n                result: result.passed,\n                error: result.error,\n                executionTime: result.executionTime,\n                metadata: result.metadata\n            }\n        });\n    } catch (error) {\n        console.error('Error validating custom assertion:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Get semantic similarity score between two texts\n */ assertionRoutes.post('/semantic-similarity', async (req, res)=>{\n    try {\n        const { text1, text2, threshold } = req.body;\n        if (!text1 || !text2) {\n            return res.status(400).json({\n                success: false,\n                error: 'text1 and text2 are required'\n            });\n        }\n        const assertion = {\n            type: 'semantic-similarity',\n            value: text2,\n            threshold: threshold || 0.8\n        };\n        const results = await llmService.validateAssertions(text1, [\n            assertion\n        ]);\n        const result = results[0];\n        res.json({\n            success: true,\n            data: {\n                similarity: result.score || 0,\n                threshold: threshold || 0.8,\n                passed: result.passed,\n                metadata: result.metadata\n            }\n        });\n    } catch (error) {\n        console.error('Error computing semantic similarity:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Analyze text sentiment\n */ assertionRoutes.post('/sentiment', async (req, res)=>{\n    try {\n        const { text, expectedSentiment, threshold } = req.body;\n        if (!text) {\n            return res.status(400).json({\n                success: false,\n                error: 'text is required'\n            });\n        }\n        const assertion = {\n            type: 'sentiment',\n            value: expectedSentiment || 'neutral',\n            threshold: threshold || 0.6\n        };\n        const results = await llmService.validateAssertions(text, [\n            assertion\n        ]);\n        const result = results[0];\n        res.json({\n            success: true,\n            data: {\n                sentiment: result.metadata?.actualSentiment || 'unknown',\n                confidence: result.score || 0,\n                expectedSentiment: expectedSentiment || 'neutral',\n                passed: result.passed,\n                metadata: result.metadata\n            }\n        });\n    } catch (error) {\n        console.error('Error analyzing sentiment:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Detect text language\n */ assertionRoutes.post('/language', async (req, res)=>{\n    try {\n        const { text, expectedLanguage } = req.body;\n        if (!text) {\n            return res.status(400).json({\n                success: false,\n                error: 'text is required'\n            });\n        }\n        const assertion = {\n            type: 'language',\n            value: expectedLanguage || 'en'\n        };\n        const results = await llmService.validateAssertions(text, [\n            assertion\n        ]);\n        const result = results[0];\n        res.json({\n            success: true,\n            data: {\n                detectedLanguage: result.metadata?.detectedLanguage || 'unknown',\n                confidence: result.score || 0,\n                expectedLanguage: expectedLanguage || 'en',\n                passed: result.passed,\n                alternatives: result.metadata?.alternatives || []\n            }\n        });\n    } catch (error) {\n        console.error('Error detecting language:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Check text toxicity\n */ assertionRoutes.post('/toxicity', async (req, res)=>{\n    try {\n        const { text, maxToxicity } = req.body;\n        if (!text) {\n            return res.status(400).json({\n                success: false,\n                error: 'text is required'\n            });\n        }\n        const assertion = {\n            type: 'toxicity',\n            value: maxToxicity || 0.5\n        };\n        const results = await llmService.validateAssertions(text, [\n            assertion\n        ]);\n        const result = results[0];\n        res.json({\n            success: true,\n            data: {\n                toxicityScore: result.score || 0,\n                maxToxicity: maxToxicity || 0.5,\n                passed: result.passed,\n                categories: result.metadata?.categories || {},\n                isToxic: (result.score || 0) > 0.7\n            }\n        });\n    } catch (error) {\n        console.error('Error checking toxicity:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Export assertion type definitions\n */ assertionRoutes.get('/export', async (req, res)=>{\n    try {\n        const exportData = assertionEngine.exportTypes();\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"assertion-types.json\"');\n        res.send(exportData);\n    } catch (error) {\n        console.error('Error exporting assertion types:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Import assertion type definitions\n */ assertionRoutes.post('/import', async (req, res)=>{\n    try {\n        const { data } = req.body;\n        if (!data) {\n            return res.status(400).json({\n                success: false,\n                error: 'data is required'\n            });\n        }\n        const jsonData = typeof data === 'string' ? data : JSON.stringify(data);\n        await assertionEngine.importTypes(jsonData);\n        res.json({\n            success: true,\n            message: 'Assertion types imported successfully'\n        });\n    } catch (error) {\n        console.error('Error importing assertion types:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Register a new custom assertion type\n */ assertionRoutes.post('/register', async (req, res)=>{\n    try {\n        const { name, description, validatorCode, parameters, examples } = req.body;\n        if (!name || !validatorCode) {\n            return res.status(400).json({\n                success: false,\n                error: 'name and validatorCode are required'\n            });\n        }\n        // Create validator function from code\n        const validator = new Function('output', 'assertion', 'context', `\n      return (async function() {\n        ${validatorCode}\n      })();\n    `);\n        await assertionEngine.registerAssertionType(name, validator);\n        res.json({\n            success: true,\n            message: `Assertion type '${name}' registered successfully`\n        });\n    } catch (error) {\n        console.error('Error registering assertion type:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\n/**\n * Health check for assertion system\n */ assertionRoutes.get('/health', async (req, res)=>{\n    try {\n        const stats = llmService.getAssertionStatistics();\n        const types = llmService.getAvailableAssertionTypes();\n        res.json({\n            success: true,\n            data: {\n                status: 'healthy',\n                availableTypes: types.length,\n                totalExecutions: stats.totalAssertions,\n                systemReady: true\n            }\n        });\n    } catch (error) {\n        console.error('Error checking assertion system health:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n});\nexport default assertionRoutes;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}