{"version":3,"names":["cov_e3expu37m","actualCoverage","_define_property","obj","key","value","f","s","b","Object","defineProperty","enumerable","configurable","writable","EventEmitter","fs","path","crypto","securityMonitor","LogAggregator","log","entry","logEntry","id","randomUUID","timestamp","Date","logs","push","emit","options","enableFileLogging","logFile","writeToFile","level","analyzeLogEntry","length","maxLogs","slice","debug","source","message","metadata","tags","info","warn","error","critical","logSecurityEvent","event","severity","eventId","eventType","type","eventSource","eventDetails","details","resolved","correlationId","getLogs","filter","filteredLogs","includes","some","tag","timeRange","start","end","searchTerm","term","toLowerCase","limit","sort","a","getTime","securityPatterns","pattern","description","patternDef","test","performLogAnalysis","now","range","relevantLogs","analysis","summary","totalLogs","errorCount","l","warningCount","criticalCount","uniqueSources","Set","map","size","patterns","recommendations","securityEvents","getSecurityEvents","since","detectPatterns","generateRecommendations","analyses","patternMap","Map","rules","name","regex","minOccurrences","forEach","rule","matchingLogs","calculatePatternSeverity","occurrences","firstSeen","lastSeen","samples","p","criticalSecurity","errorPatterns","perfPatterns","setupExpressIntegration","getExpressMiddleware","req","res","next","startTime","method","ip","userAgent","get","originalSend","send","data","responseTime","statusCode","app","call","ensureLogDirectory","logDir","dirname","mkdir","recursive","console","logLine","JSON","stringify","toISOString","appendFile","setupLogCleanup","logCleanupInterval","setInterval","cutoffDate","setDate","getDate","logRetentionDays","startPeriodicAnalysis","analysisInterval","Error","analysisIntervalMinutes","getAnalyses","getLogStatistics","stats","logsByLevel","logsBySources","recentActivity","i","hour","hourStart","getFullYear","getMonth","getHours","hourEnd","count","substring","destroy","clearInterval","removeAllListeners","constructor","logFilePath","enableRealTimeAnalysis","on","logAggregator"],"sources":["LogAggregator.ts"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { EventEmitter } from 'events';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { securityMonitor } from './SecurityMonitor';\nexport class LogAggregator extends EventEmitter {\n    // Logging methods\n    log(entry) {\n        const logEntry = {\n            id: crypto.randomUUID(),\n            timestamp: new Date(),\n            ...entry\n        };\n        this.logs.push(logEntry);\n        this.emit('logEntry', logEntry);\n        // Write to file if enabled\n        if (this.options.enableFileLogging && this.logFile) {\n            this.writeToFile(logEntry);\n        }\n        // Real-time analysis for critical events\n        if (entry.level === 'critical' || entry.level === 'error') {\n            this.analyzeLogEntry(logEntry);\n        }\n        // Maintain log limit\n        if (this.logs.length > this.options.maxLogs) {\n            this.logs = this.logs.slice(-this.options.maxLogs);\n        }\n    }\n    debug(source, message, metadata, tags = []) {\n        this.log({\n            level: 'debug',\n            source,\n            message,\n            metadata,\n            tags\n        });\n    }\n    info(source, message, metadata, tags = []) {\n        this.log({\n            level: 'info',\n            source,\n            message,\n            metadata,\n            tags\n        });\n    }\n    warn(source, message, metadata, tags = []) {\n        this.log({\n            level: 'warn',\n            source,\n            message,\n            metadata,\n            tags\n        });\n    }\n    error(source, message, metadata, tags = []) {\n        this.log({\n            level: 'error',\n            source,\n            message,\n            metadata,\n            tags\n        });\n    }\n    critical(source, message, metadata, tags = []) {\n        this.log({\n            level: 'critical',\n            source,\n            message,\n            metadata,\n            tags\n        });\n    }\n    // Security-specific logging\n    logSecurityEvent(event) {\n        this.log({\n            level: event.severity === 'critical' ? 'critical' : event.severity === 'high' ? 'error' : event.severity === 'medium' ? 'warn' : 'info',\n            source: 'security-monitor',\n            message: `Security Event: ${event.message}`,\n            metadata: {\n                eventId: event.id,\n                eventType: event.type,\n                eventSource: event.source,\n                eventDetails: event.details,\n                resolved: event.resolved\n            },\n            tags: [\n                'security',\n                event.type,\n                event.severity\n            ],\n            correlationId: event.id\n        });\n    }\n    // Log retrieval and filtering\n    getLogs(filter) {\n        let filteredLogs = [\n            ...this.logs\n        ];\n        if (filter) {\n            if (filter.level) {\n                filteredLogs = filteredLogs.filter((log)=>filter.level.includes(log.level));\n            }\n            if (filter.source) {\n                filteredLogs = filteredLogs.filter((log)=>filter.source.some((source)=>log.source.includes(source)));\n            }\n            if (filter.tags) {\n                filteredLogs = filteredLogs.filter((log)=>filter.tags.some((tag)=>log.tags.includes(tag)));\n            }\n            if (filter.timeRange) {\n                filteredLogs = filteredLogs.filter((log)=>log.timestamp >= filter.timeRange.start && log.timestamp <= filter.timeRange.end);\n            }\n            if (filter.searchTerm) {\n                const term = filter.searchTerm.toLowerCase();\n                filteredLogs = filteredLogs.filter((log)=>log.message.toLowerCase().includes(term) || log.source.toLowerCase().includes(term) || log.tags.some((tag)=>tag.toLowerCase().includes(term)));\n            }\n            if (filter.limit) {\n                filteredLogs = filteredLogs.slice(-filter.limit);\n            }\n        }\n        return filteredLogs.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());\n    }\n    // Log analysis\n    async analyzeLogEntry(entry) {\n        // Real-time analysis for immediate threats\n        const securityPatterns = [\n            {\n                pattern: /failed.*login|authentication.*failed|invalid.*credentials/i,\n                type: 'security',\n                severity: 'high',\n                description: 'Authentication failure detected'\n            },\n            {\n                pattern: /sql.*injection|xss|cross.*site|csrf/i,\n                type: 'security',\n                severity: 'critical',\n                description: 'Potential security attack detected'\n            },\n            {\n                pattern: /rate.*limit|too.*many.*requests|ddos/i,\n                type: 'security',\n                severity: 'medium',\n                description: 'Potential abuse or DoS attack'\n            },\n            {\n                pattern: /memory.*leak|out.*of.*memory|heap.*overflow/i,\n                type: 'performance',\n                severity: 'high',\n                description: 'Memory-related issue detected'\n            },\n            {\n                pattern: /unauthorized|forbidden|access.*denied/i,\n                type: 'security',\n                severity: 'medium',\n                description: 'Unauthorized access attempt'\n            }\n        ];\n        for (const patternDef of securityPatterns){\n            if (patternDef.pattern.test(entry.message)) {\n                if (patternDef.type === 'security') {\n                    securityMonitor.logSecurityEvent({\n                        severity: patternDef.severity,\n                        type: 'intrusion',\n                        source: `log-analyzer:${entry.source}`,\n                        message: `${patternDef.description}: ${entry.message}`,\n                        details: {\n                            logEntry: entry,\n                            pattern: patternDef.pattern.source\n                        },\n                        resolved: false\n                    });\n                }\n                this.emit('patternDetected', {\n                    pattern: patternDef,\n                    logEntry: entry,\n                    timestamp: new Date()\n                });\n            }\n        }\n    }\n    async performLogAnalysis(timeRange) {\n        const now = new Date();\n        const range = timeRange || {\n            start: new Date(now.getTime() - 24 * 60 * 60 * 1000),\n            end: now\n        };\n        const relevantLogs = this.getLogs({\n            timeRange: range\n        });\n        const analysis = {\n            id: crypto.randomUUID(),\n            timestamp: now,\n            timeRange: range,\n            summary: {\n                totalLogs: relevantLogs.length,\n                errorCount: relevantLogs.filter((l)=>l.level === 'error').length,\n                warningCount: relevantLogs.filter((l)=>l.level === 'warn').length,\n                criticalCount: relevantLogs.filter((l)=>l.level === 'critical').length,\n                uniqueSources: new Set(relevantLogs.map((l)=>l.source)).size\n            },\n            patterns: [],\n            recommendations: [],\n            securityEvents: securityMonitor.getSecurityEvents({\n                since: range.start\n            })\n        };\n        // Pattern detection\n        const patterns = this.detectPatterns(relevantLogs);\n        analysis.patterns = patterns;\n        // Generate recommendations\n        analysis.recommendations = this.generateRecommendations(analysis);\n        this.analyses.push(analysis);\n        this.emit('analysisComplete', analysis);\n        return analysis;\n    }\n    detectPatterns(logs) {\n        const patterns = [];\n        const patternMap = new Map();\n        // Define pattern detection rules\n        const rules = [\n            {\n                name: 'repeated_errors',\n                regex: /(error|exception|fail)/i,\n                type: 'error',\n                minOccurrences: 5\n            },\n            {\n                name: 'security_violations',\n                regex: /(unauthorized|forbidden|access.*denied|authentication.*failed)/i,\n                type: 'security',\n                minOccurrences: 3\n            },\n            {\n                name: 'performance_issues',\n                regex: /(slow|timeout|high.*latency|memory.*usage)/i,\n                type: 'performance',\n                minOccurrences: 3\n            },\n            {\n                name: 'anomalous_activity',\n                regex: /(unusual|suspicious|anomaly|unexpected)/i,\n                type: 'anomaly',\n                minOccurrences: 2\n            }\n        ];\n        // Analyze logs for patterns\n        rules.forEach((rule)=>{\n            const matchingLogs = logs.filter((log)=>rule.regex.test(log.message));\n            if (matchingLogs.length >= rule.minOccurrences) {\n                const severity = this.calculatePatternSeverity(matchingLogs.length, rule.type);\n                patterns.push({\n                    type: rule.type,\n                    pattern: rule.name,\n                    occurrences: matchingLogs.length,\n                    severity,\n                    firstSeen: matchingLogs[matchingLogs.length - 1].timestamp,\n                    lastSeen: matchingLogs[0].timestamp,\n                    samples: matchingLogs.slice(0, 5) // First 5 samples\n                });\n            }\n        });\n        return patterns;\n    }\n    calculatePatternSeverity(occurrences, type) {\n        if (type === 'security') {\n            if (occurrences >= 20) return 'critical';\n            if (occurrences >= 10) return 'high';\n            if (occurrences >= 5) return 'medium';\n            return 'low';\n        }\n        if (type === 'error') {\n            if (occurrences >= 50) return 'critical';\n            if (occurrences >= 25) return 'high';\n            if (occurrences >= 10) return 'medium';\n            return 'low';\n        }\n        // Default severity calculation\n        if (occurrences >= 30) return 'high';\n        if (occurrences >= 15) return 'medium';\n        return 'low';\n    }\n    generateRecommendations(analysis) {\n        const recommendations = [];\n        // Security recommendations\n        const securityPatterns = analysis.patterns.filter((p)=>p.type === 'security');\n        if (securityPatterns.length > 0) {\n            recommendations.push('Review and investigate security-related log patterns');\n            recommendations.push('Consider implementing additional security measures');\n            const criticalSecurity = securityPatterns.filter((p)=>p.severity === 'critical');\n            if (criticalSecurity.length > 0) {\n                recommendations.push('URGENT: Critical security patterns detected - immediate investigation required');\n            }\n        }\n        // Error recommendations\n        const errorPatterns = analysis.patterns.filter((p)=>p.type === 'error');\n        if (errorPatterns.length > 0) {\n            recommendations.push('Investigate recurring error patterns to improve system stability');\n        }\n        // Performance recommendations\n        const perfPatterns = analysis.patterns.filter((p)=>p.type === 'performance');\n        if (perfPatterns.length > 0) {\n            recommendations.push('Review performance-related issues and optimize system resources');\n        }\n        // General recommendations\n        if (analysis.summary.criticalCount > 0) {\n            recommendations.push('Address all critical-level log entries immediately');\n        }\n        if (analysis.summary.errorCount > analysis.summary.totalLogs * 0.1) {\n            recommendations.push('High error rate detected - consider system health review');\n        }\n        return recommendations;\n    }\n    // Express middleware integration\n    setupExpressIntegration() {\n    // This would be used in the main server setup\n    }\n    getExpressMiddleware() {\n        return (req, res, next)=>{\n            const startTime = Date.now();\n            const correlationId = crypto.randomUUID();\n            req.correlationId = correlationId;\n            // Log request\n            this.info('express', `${req.method} ${req.path}`, {\n                method: req.method,\n                path: req.path,\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                correlationId\n            }, [\n                'request',\n                'http'\n            ]);\n            // Intercept response\n            const originalSend = res.send;\n            res.send = function(data) {\n                const responseTime = Date.now() - startTime;\n                const level = res.statusCode >= 500 ? 'error' : res.statusCode >= 400 ? 'warn' : 'info';\n                // Use the log aggregator instance\n                req.app.get('logAggregator').log({\n                    level,\n                    source: 'express',\n                    message: `${req.method} ${req.path} - ${res.statusCode}`,\n                    metadata: {\n                        method: req.method,\n                        path: req.path,\n                        statusCode: res.statusCode,\n                        responseTime,\n                        ip: req.ip,\n                        correlationId\n                    },\n                    tags: [\n                        'response',\n                        'http'\n                    ],\n                    correlationId\n                });\n                return originalSend.call(this, data);\n            };\n            next();\n        };\n    }\n    // File operations\n    async ensureLogDirectory() {\n        if (this.logFile) {\n            const logDir = path.dirname(this.logFile);\n            try {\n                await fs.mkdir(logDir, {\n                    recursive: true\n                });\n            } catch (error) {\n                console.error('Failed to create log directory:', error);\n            }\n        }\n    }\n    async writeToFile(entry) {\n        if (!this.logFile) return;\n        try {\n            const logLine = JSON.stringify({\n                timestamp: entry.timestamp.toISOString(),\n                level: entry.level,\n                source: entry.source,\n                message: entry.message,\n                metadata: entry.metadata,\n                tags: entry.tags,\n                correlationId: entry.correlationId\n            }) + '\\n';\n            await fs.appendFile(this.logFile, logLine);\n        } catch (error) {\n            console.error('Failed to write to log file:', error);\n        }\n    }\n    // Cleanup and maintenance\n    setupLogCleanup() {\n        this.logCleanupInterval = setInterval(()=>{\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - this.options.logRetentionDays);\n            this.logs = this.logs.filter((log)=>log.timestamp >= cutoffDate);\n            this.analyses = this.analyses.filter((analysis)=>analysis.timestamp >= cutoffDate);\n        }, 24 * 60 * 60 * 1000); // Daily cleanup\n    }\n    startPeriodicAnalysis() {\n        this.analysisInterval = setInterval(async ()=>{\n            try {\n                await this.performLogAnalysis();\n            } catch (error) {\n                this.error('log-aggregator', `Periodic analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`, {\n                    error\n                });\n            }\n        }, this.options.analysisIntervalMinutes * 60 * 1000);\n    }\n    // Analytics and reporting\n    getAnalyses(limit = 10) {\n        return this.analyses.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime()).slice(0, limit);\n    }\n    getLogStatistics() {\n        const stats = {\n            totalLogs: this.logs.length,\n            logsByLevel: {\n                debug: 0,\n                info: 0,\n                warn: 0,\n                error: 0,\n                critical: 0\n            },\n            logsBySources: {},\n            recentActivity: []\n        };\n        // Count by level\n        this.logs.forEach((log)=>{\n            stats.logsByLevel[log.level]++;\n            if (!stats.logsBySources[log.source]) {\n                stats.logsBySources[log.source] = 0;\n            }\n            stats.logsBySources[log.source]++;\n        });\n        // Recent activity (last 24 hours by hour)\n        const now = new Date();\n        for(let i = 23; i >= 0; i--){\n            const hour = new Date(now.getTime() - i * 60 * 60 * 1000);\n            const hourStart = new Date(hour.getFullYear(), hour.getMonth(), hour.getDate(), hour.getHours());\n            const hourEnd = new Date(hourStart.getTime() + 60 * 60 * 1000);\n            const count = this.logs.filter((log)=>log.timestamp >= hourStart && log.timestamp < hourEnd).length;\n            stats.recentActivity.push({\n                hour: hourStart.toISOString().substring(11, 16),\n                count\n            });\n        }\n        return stats;\n    }\n    // Cleanup resources\n    destroy() {\n        if (this.analysisInterval) {\n            clearInterval(this.analysisInterval);\n        }\n        if (this.logCleanupInterval) {\n            clearInterval(this.logCleanupInterval);\n        }\n        this.removeAllListeners();\n    }\n    constructor(options = {}){\n        super(), _define_property(this, \"options\", void 0), _define_property(this, \"logs\", void 0), _define_property(this, \"analyses\", void 0), _define_property(this, \"analysisInterval\", void 0), _define_property(this, \"logCleanupInterval\", void 0), _define_property(this, \"logFile\", void 0), this.options = options, this.logs = [], this.analyses = [];\n        const { maxLogs = 50000, logRetentionDays = 30, analysisIntervalMinutes = 15, enableFileLogging = true, logFilePath = './logs/security.log', enableRealTimeAnalysis = true } = options;\n        this.options = {\n            maxLogs,\n            logRetentionDays,\n            analysisIntervalMinutes,\n            enableFileLogging,\n            logFilePath,\n            enableRealTimeAnalysis\n        };\n        if (enableFileLogging) {\n            this.logFile = logFilePath;\n            this.ensureLogDirectory();\n        }\n        this.setupLogCleanup();\n        if (enableRealTimeAnalysis) {\n            this.startPeriodicAnalysis();\n        }\n        // Listen to security events\n        securityMonitor.on('securityEvent', (event)=>{\n            this.logSecurityEvent(event);\n        });\n        // Set up Express middleware integration\n        this.setupExpressIntegration();\n    }\n}\nexport const logAggregator = new LogAggregator({\n    maxLogs: 50000,\n    logRetentionDays: 30,\n    analysisIntervalMinutes: 15,\n    enableFileLogging: true,\n    logFilePath: './logs/security.log',\n    enableRealTimeAnalysis: true\n});\n"],"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","ignoreList":[]}