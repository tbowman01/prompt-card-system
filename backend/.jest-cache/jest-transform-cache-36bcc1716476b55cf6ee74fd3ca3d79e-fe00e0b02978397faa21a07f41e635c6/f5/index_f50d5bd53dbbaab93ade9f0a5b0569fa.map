{"version":3,"names":["cov_hnmf7p3j3","actualCoverage","AssertionEngine","SemanticSimilarityValidator","CustomAssertionValidator","AssertionTypeRegistry","AssertionUtils","contains","value","description","f","s","type","b","lengthRange","min","max","semanticSimilarity","expectedText","threshold","sentiment","expectedSentiment","language","expectedLanguage","toxicity","maxScore","custom","code","jsonSchema","schema","regex","pattern","flags","config","undefined","comprehensive","options","assertions","semanticThreshold","push","sentimentExpected","minLength","maxLength","maxToxicity","customChecks","forEach","check","assertionEngine","initialize","catch","console","error"],"sources":["index.ts"],"sourcesContent":["/**\n * Enhanced Assertion System\n * \n * This module provides a comprehensive assertion system for validating LLM outputs\n * with support for semantic similarity, custom JavaScript code execution, and\n * various other advanced validation techniques.\n */ export { AssertionEngine } from './AssertionEngine';\nexport { SemanticSimilarityValidator } from './SemanticSimilarityValidator';\nexport { CustomAssertionValidator } from './CustomAssertionValidator';\nexport { AssertionTypeRegistry } from './AssertionTypeRegistry';\nexport class AssertionUtils {\n    /**\n   * Create a basic contains assertion\n   */ static contains(value, description) {\n        return {\n            type: 'contains',\n            value,\n            description: description || `Check if output contains \"${value}\"`\n        };\n    }\n    /**\n   * Create a length range assertion\n   */ static lengthRange(min, max, description) {\n        return {\n            type: 'length',\n            value: `${min}-${max}`,\n            description: description || `Check if output length is between ${min} and ${max} characters`\n        };\n    }\n    /**\n   * Create a semantic similarity assertion\n   */ static semanticSimilarity(expectedText, threshold = 0.8, description) {\n        return {\n            type: 'semantic-similarity',\n            value: expectedText,\n            threshold,\n            description: description || `Check semantic similarity to \"${expectedText}\" (threshold: ${threshold})`\n        };\n    }\n    /**\n   * Create a sentiment assertion\n   */ static sentiment(expectedSentiment, threshold = 0.6, description) {\n        return {\n            type: 'sentiment',\n            value: expectedSentiment,\n            threshold,\n            description: description || `Check if sentiment is ${expectedSentiment} (threshold: ${threshold})`\n        };\n    }\n    /**\n   * Create a language detection assertion\n   */ static language(expectedLanguage, description) {\n        return {\n            type: 'language',\n            value: expectedLanguage,\n            description: description || `Check if language is ${expectedLanguage}`\n        };\n    }\n    /**\n   * Create a toxicity assertion\n   */ static toxicity(maxScore = 0.5, description) {\n        return {\n            type: 'toxicity',\n            value: maxScore,\n            description: description || `Check if toxicity score is below ${maxScore}`\n        };\n    }\n    /**\n   * Create a custom assertion with helper functions\n   */ static custom(code, description) {\n        return {\n            type: 'custom',\n            value: code,\n            description: description || 'Custom assertion validation'\n        };\n    }\n    /**\n   * Create a JSON schema assertion\n   */ static jsonSchema(schema, description) {\n        return {\n            type: 'json-schema',\n            value: schema,\n            description: description || 'Validate JSON structure'\n        };\n    }\n    /**\n   * Create a regex assertion\n   */ static regex(pattern, flags, description) {\n        return {\n            type: 'regex',\n            value: pattern,\n            config: flags ? {\n                flags\n            } : undefined,\n            description: description || `Check if output matches pattern: ${pattern}`\n        };\n    }\n    /**\n   * Create multiple assertions for comprehensive validation\n   */ static comprehensive(expectedText, options = {}) {\n        const assertions = [];\n        // Semantic similarity\n        if (options.semanticThreshold !== undefined) {\n            assertions.push(this.semanticSimilarity(expectedText, options.semanticThreshold));\n        }\n        // Sentiment\n        if (options.sentimentExpected) {\n            assertions.push(this.sentiment(options.sentimentExpected));\n        }\n        // Length constraints\n        if (options.minLength !== undefined && options.maxLength !== undefined) {\n            assertions.push(this.lengthRange(options.minLength, options.maxLength));\n        }\n        // Language\n        if (options.language) {\n            assertions.push(this.language(options.language));\n        }\n        // Toxicity\n        if (options.maxToxicity !== undefined) {\n            assertions.push(this.toxicity(options.maxToxicity));\n        }\n        // Custom checks\n        if (options.customChecks) {\n            options.customChecks.forEach((check)=>{\n                assertions.push(this.custom(check));\n            });\n        }\n        return assertions;\n    }\n}\n// Create and export the default assertion engine instance\nimport { AssertionEngine } from './AssertionEngine';\nexport const assertionEngine = new AssertionEngine();\n// Initialize the global assertion engine\nassertionEngine.initialize().catch(console.error);\n// Export as default\nexport default assertionEngine;\n"],"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","ignoreList":[]}