{"version":3,"sources":["/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts"],"sourcesContent":["import rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\nimport { Request, Response } from 'express';\n\n// Redis store for distributed rate limiting (optional)\n// import RedisStore from 'rate-limit-redis';\n// import Redis from 'ioredis';\n\n// const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');\n\n// General API rate limit\nexport const generalRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many requests from this IP, please try again later.',\n    retryAfter: 15 * 60 // seconds\n  },\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n  // store: new RedisStore({\n  //   sendCommand: (...args: string[]) => redis.call(...args),\n  // }),\n  handler: (req: Request, res: Response) => {\n    res.status(429).json({\n      success: false,\n      error: 'Rate limit exceeded',\n      limit: 100,\n      windowMs: 15 * 60 * 1000,\n      retryAfter: Math.round(15 * 60),\n      ip: req.ip,\n      path: req.path\n    });\n  }\n});\n\n// Strict rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 login attempts per windowMs\n  message: {\n    success: false,\n    error: 'Too many authentication attempts, please try again later.',\n    retryAfter: 15 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true, // Don't count successful requests\n  handler: (req: Request, res: Response) => {\n    res.status(429).json({\n      success: false,\n      error: 'Authentication rate limit exceeded',\n      limit: 5,\n      windowMs: 15 * 60 * 1000,\n      retryAfter: Math.round(15 * 60),\n      ip: req.ip,\n      path: req.path\n    });\n  }\n});\n\n// API rate limit for high-frequency endpoints\nexport const apiRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 50, // Limit each IP to 50 requests per minute\n  message: {\n    success: false,\n    error: 'API rate limit exceeded',\n    retryAfter: 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Test execution rate limit (more permissive for testing)\nexport const testExecutionRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 20, // Limit each IP to 20 test executions per 5 minutes\n  message: {\n    success: false,\n    error: 'Test execution rate limit exceeded',\n    retryAfter: 5 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Slow down middleware for additional protection\nexport const speedLimiter: any = slowDown({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  delayAfter: 50, // Allow 50 requests per 15 minutes at full speed\n  delayMs: (used: number) => {\n    return (used - 50) * 500; // Add 500ms delay for each request after delayAfter\n  },\n  maxDelayMs: 10000, // Maximum delay of 10 seconds\n  skipFailedRequests: false,\n  skipSuccessfulRequests: false\n});\n\n// Heavy operation rate limit (for resource-intensive operations)\nexport const heavyOperationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 10, // Limit each IP to 10 heavy operations per hour\n  message: {\n    success: false,\n    error: 'Heavy operation rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// File upload rate limit\nexport const uploadRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 20, // Limit each IP to 20 uploads per hour\n  message: {\n    success: false,\n    error: 'Upload rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});"],"names":["apiRateLimit","authRateLimit","generalRateLimit","heavyOperationRateLimit","speedLimiter","testExecutionRateLimit","uploadRateLimit","rateLimit","windowMs","max","message","success","error","retryAfter","standardHeaders","legacyHeaders","handler","req","res","status","json","limit","Math","round","ip","path","skipSuccessfulRequests","slowDown","delayAfter","delayMs","used","maxDelayMs","skipFailedRequests"],"mappings":";;;;;;;;;;;QA+DaA;eAAAA;;QAzBAC;eAAAA;;QA3BAC;eAAAA;;QA0FAC;eAAAA;;QAZAC;eAAAA;;QAbAC;eAAAA;;QAsCAC;eAAAA;;;yEAlHS;wEACD;;;;;;AAUd,MAAMJ,mBAAmBK,IAAAA,yBAAS,EAAC;IACxCC,UAAU,KAAK,KAAK;IACpBC,KAAK;IACLC,SAAS;QACPC,SAAS;QACTC,OAAO;QACPC,YAAY,KAAK,GAAG,UAAU;IAChC;IACAC,iBAAiB;IACjBC,eAAe;IACf,0BAA0B;IAC1B,6DAA6D;IAC7D,MAAM;IACNC,SAAS,CAACC,KAAcC;QACtBA,IAAIC,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBT,SAAS;YACTC,OAAO;YACPS,OAAO;YACPb,UAAU,KAAK,KAAK;YACpBK,YAAYS,KAAKC,KAAK,CAAC,KAAK;YAC5BC,IAAIP,IAAIO,EAAE;YACVC,MAAMR,IAAIQ,IAAI;QAChB;IACF;AACF;AAGO,MAAMxB,gBAAgBM,IAAAA,yBAAS,EAAC;IACrCC,UAAU,KAAK,KAAK;IACpBC,KAAK;IACLC,SAAS;QACPC,SAAS;QACTC,OAAO;QACPC,YAAY,KAAK;IACnB;IACAC,iBAAiB;IACjBC,eAAe;IACfW,wBAAwB;IACxBV,SAAS,CAACC,KAAcC;QACtBA,IAAIC,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBT,SAAS;YACTC,OAAO;YACPS,OAAO;YACPb,UAAU,KAAK,KAAK;YACpBK,YAAYS,KAAKC,KAAK,CAAC,KAAK;YAC5BC,IAAIP,IAAIO,EAAE;YACVC,MAAMR,IAAIQ,IAAI;QAChB;IACF;AACF;AAGO,MAAMzB,eAAeO,IAAAA,yBAAS,EAAC;IACpCC,UAAU,IAAI,KAAK;IACnBC,KAAK;IACLC,SAAS;QACPC,SAAS;QACTC,OAAO;QACPC,YAAY;IACd;IACAC,iBAAiB;IACjBC,eAAe;AACjB;AAGO,MAAMV,yBAAyBE,IAAAA,yBAAS,EAAC;IAC9CC,UAAU,IAAI,KAAK;IACnBC,KAAK;IACLC,SAAS;QACPC,SAAS;QACTC,OAAO;QACPC,YAAY,IAAI;IAClB;IACAC,iBAAiB;IACjBC,eAAe;AACjB;AAGO,MAAMX,eAAoBuB,IAAAA,wBAAQ,EAAC;IACxCnB,UAAU,KAAK,KAAK;IACpBoB,YAAY;IACZC,SAAS,CAACC;QACR,OAAO,AAACA,CAAAA,OAAO,EAAC,IAAK,KAAK,oDAAoD;IAChF;IACAC,YAAY;IACZC,oBAAoB;IACpBN,wBAAwB;AAC1B;AAGO,MAAMvB,0BAA0BI,IAAAA,yBAAS,EAAC;IAC/CC,UAAU,KAAK,KAAK;IACpBC,KAAK;IACLC,SAAS;QACPC,SAAS;QACTC,OAAO;QACPC,YAAY,KAAK;IACnB;IACAC,iBAAiB;IACjBC,eAAe;AACjB;AAGO,MAAMT,kBAAkBC,IAAAA,yBAAS,EAAC;IACvCC,UAAU,KAAK,KAAK;IACpBC,KAAK;IACLC,SAAS;QACPC,SAAS;QACTC,OAAO;QACPC,YAAY,KAAK;IACnB;IACAC,iBAAiB;IACjBC,eAAe;AACjB"}