8ea22c16594881e7cd408f78838a9a4d
"use strict";

/* istanbul ignore next */
function cov_1lpiajpp6y() {
  var path = "/workspaces/prompt-card-system/backend/src/services/reports/ReportService.ts";
  var hash = "1d8f54695dc9316a0df5fd7a193bb4ac8e34edef";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/reports/ReportService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 55
        }
      },
      "2": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 4,
          column: 65
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 56
        }
      },
      "4": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 6,
          column: 60
        }
      },
      "5": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 64
        }
      },
      "6": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 57
        }
      },
      "7": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 16
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 71
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 65
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "15": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "16": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 81
        }
      },
      "17": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "18": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 75
        }
      },
      "19": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "20": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "22": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "23": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 78,
          column: 7
        }
      },
      "24": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 92,
          column: 7
        }
      },
      "25": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 7
        }
      },
      "26": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 59
        }
      },
      "27": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 104,
          column: 67
        }
      },
      "28": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "29": {
        start: {
          line: 107,
          column: 33
        },
        end: {
          line: 107,
          column: 63
        }
      },
      "30": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "31": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 36
        }
      },
      "32": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "33": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 54
        }
      },
      "34": {
        start: {
          line: 118,
          column: 34
        },
        end: {
          line: 118,
          column: 91
        }
      },
      "35": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 62
        }
      },
      "36": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "37": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 50
        }
      },
      "38": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 51
        }
      },
      "39": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "40": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 71
        }
      },
      "41": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 26
        }
      },
      "42": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 50
        }
      },
      "43": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 82
        }
      },
      "44": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "45": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "46": {
        start: {
          line: 141,
          column: 23
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "47": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 50
        }
      },
      "48": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "49": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 22
        }
      },
      "50": {
        start: {
          line: 157,
          column: 23
        },
        end: {
          line: 157,
          column: 57
        }
      },
      "51": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "52": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 61
        }
      },
      "53": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "54": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 83
        }
      },
      "55": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 22
        }
      },
      "56": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 87
        }
      },
      "57": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 22
        }
      },
      "58": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 76
        }
      },
      "59": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 22
        }
      },
      "60": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 62
        }
      },
      "61": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 22
        }
      },
      "62": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 72
        }
      },
      "63": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 75
        }
      },
      "64": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "65": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 28
        }
      },
      "66": {
        start: {
          line: 190,
          column: 25
        },
        end: {
          line: 190,
          column: 27
        }
      },
      "67": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 69
        }
      },
      "68": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 180
        }
      },
      "69": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 180
        }
      },
      "70": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 184
        }
      },
      "71": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "72": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "73": {
        start: {
          line: 200,
          column: 34
        },
        end: {
          line: 200,
          column: 49
        }
      },
      "74": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 202,
          column: 80
        }
      },
      "75": {
        start: {
          line: 202,
          column: 61
        },
        end: {
          line: 202,
          column: 69
        }
      },
      "76": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 161
        }
      },
      "77": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 208,
          column: 19
        }
      },
      "78": {
        start: {
          line: 206,
          column: 36
        },
        end: {
          line: 206,
          column: 76
        }
      },
      "79": {
        start: {
          line: 206,
          column: 54
        },
        end: {
          line: 206,
          column: 65
        }
      },
      "80": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 207,
          column: 162
        }
      },
      "81": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 48
        }
      },
      "82": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 67
        }
      },
      "83": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 73
        }
      },
      "84": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 74
        }
      },
      "85": {
        start: {
          line: 224,
          column: 23
        },
        end: {
          line: 224,
          column: 83
        }
      },
      "86": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "87": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 80
        }
      },
      "88": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 70
        }
      },
      "89": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "90": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 24
        }
      },
      "91": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 242,
          column: 5
        }
      },
      "92": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 25
        }
      },
      "93": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "94": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 44
        }
      },
      "95": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 44
        }
      },
      "96": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "97": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 43
        }
      },
      "98": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 40
        }
      },
      "99": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "100": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 46
        }
      },
      "101": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 43
        }
      },
      "102": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "103": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 46
        }
      },
      "104": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 41
        }
      },
      "105": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 64
        }
      },
      "106": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 35
        }
      },
      "107": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 61
        }
      },
      "108": {
        start: {
          line: 264,
          column: 27
        },
        end: {
          line: 264,
          column: 118
        }
      },
      "109": {
        start: {
          line: 265,
          column: 28
        },
        end: {
          line: 265,
          column: 83
        }
      },
      "110": {
        start: {
          line: 266,
          column: 22
        },
        end: {
          line: 266,
          column: 45
        }
      },
      "111": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 34
        }
      },
      "112": {
        start: {
          line: 271,
          column: 25
        },
        end: {
          line: 271,
          column: 116
        }
      },
      "113": {
        start: {
          line: 271,
          column: 73
        },
        end: {
          line: 271,
          column: 115
        }
      },
      "114": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "115": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 50
        }
      },
      "116": {
        start: {
          line: 276,
          column: 23
        },
        end: {
          line: 278,
          column: 20
        }
      },
      "117": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "118": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 24
        }
      },
      "119": {
        start: {
          line: 284,
          column: 25
        },
        end: {
          line: 284,
          column: 90
        }
      },
      "120": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "121": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 24
        }
      },
      "122": {
        start: {
          line: 288,
          column: 24
        },
        end: {
          line: 288,
          column: 72
        }
      },
      "123": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 96
        }
      },
      "124": {
        start: {
          line: 293,
          column: 23
        },
        end: {
          line: 295,
          column: 20
        }
      },
      "125": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "126": {
        start: {
          line: 298,
          column: 29
        },
        end: {
          line: 298,
          column: 120
        }
      },
      "127": {
        start: {
          line: 298,
          column: 77
        },
        end: {
          line: 298,
          column: 119
        }
      },
      "128": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "129": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 50
        }
      },
      "130": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 76
        }
      },
      "131": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 24
        }
      },
      "132": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 21
        }
      },
      "133": {
        start: {
          line: 309,
          column: 27
        },
        end: {
          line: 309,
          column: 94
        }
      },
      "134": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "135": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 318,
          column: 231
        }
      },
      "136": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 105
        }
      },
      "137": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 28
        }
      },
      "138": {
        start: {
          line: 323,
          column: 26
        },
        end: {
          line: 325,
          column: 12
        }
      },
      "139": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 337,
          column: 12
        }
      },
      "140": {
        start: {
          line: 326,
          column: 42
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "141": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 340,
          column: 30
        }
      },
      "142": {
        start: {
          line: 341,
          column: 29
        },
        end: {
          line: 344,
          column: 29
        }
      },
      "143": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 376,
          column: 9
        }
      },
      "144": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 375,
          column: 13
        }
      },
      "145": {
        start: {
          line: 347,
          column: 32
        },
        end: {
          line: 347,
          column: 84
        }
      },
      "146": {
        start: {
          line: 348,
          column: 31
        },
        end: {
          line: 348,
          column: 112
        }
      },
      "147": {
        start: {
          line: 349,
          column: 37
        },
        end: {
          line: 349,
          column: 95
        }
      },
      "148": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 75
        }
      },
      "149": {
        start: {
          line: 354,
          column: 38
        },
        end: {
          line: 354,
          column: 90
        }
      },
      "150": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 359,
          column: 76
        }
      },
      "151": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 365,
          column: 19
        }
      },
      "152": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 368,
          column: 93
        }
      },
      "153": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 374,
          column: 19
        }
      },
      "154": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 58
        }
      },
      "155": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 388,
          column: 296
        }
      },
      "156": {
        start: {
          line: 391,
          column: 25
        },
        end: {
          line: 391,
          column: 90
        }
      },
      "157": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 395,
          column: 49
        }
      },
      "158": {
        start: {
          line: 398,
          column: 21
        },
        end: {
          line: 398,
          column: 39
        }
      },
      "159": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 414,
          column: 9
        }
      },
      "160": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 49
        }
      },
      "161": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 22
        }
      },
      "162": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 49
        }
      },
      "163": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 405,
          column: 22
        }
      },
      "164": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 407,
          column: 51
        }
      },
      "165": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 408,
          column: 22
        }
      },
      "166": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 51
        }
      },
      "167": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 411,
          column: 22
        }
      },
      "168": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 49
        }
      },
      "169": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 20
        }
      },
      "170": {
        start: {
          line: 420,
          column: 27
        },
        end: {
          line: 420,
          column: 54
        }
      },
      "171": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "172": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 424,
          column: 13
        }
      },
      "173": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 45
        }
      },
      "174": {
        start: {
          line: 427,
          column: 30
        },
        end: {
          line: 427,
          column: 77
        }
      },
      "175": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 431,
          column: 40
        }
      },
      "176": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 56
        }
      },
      "177": {
        start: {
          line: 435,
          column: 0
        },
        end: {
          line: 435,
          column: 38
        }
      },
      "178": {
        start: {
          line: 437,
          column: 0
        },
        end: {
          line: 437,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 34
          }
        },
        loc: {
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 21,
            column: 9
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 21,
            column: 18
          }
        },
        loc: {
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 23,
            column: 9
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 39
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 31
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 41
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 65
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 103
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 63
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 141,
            column: 86
          },
          end: {
            line: 141,
            column: 87
          }
        },
        loc: {
          start: {
            line: 141,
            column: 100
          },
          end: {
            line: 143,
            column: 9
          }
        },
        line: 141
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 107
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 155
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 30
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 189
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 202,
            column: 54
          },
          end: {
            line: 202,
            column: 55
          }
        },
        loc: {
          start: {
            line: 202,
            column: 61
          },
          end: {
            line: 202,
            column: 69
          }
        },
        line: 202
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 205,
            column: 39
          },
          end: {
            line: 205,
            column: 40
          }
        },
        loc: {
          start: {
            line: 205,
            column: 48
          },
          end: {
            line: 208,
            column: 17
          }
        },
        line: 205
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 206,
            column: 45
          }
        },
        loc: {
          start: {
            line: 206,
            column: 54
          },
          end: {
            line: 206,
            column: 65
          }
        },
        line: 206
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 19
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 214
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 28
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 217
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 29
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 220
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 41
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 223
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 65
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 238
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 34
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 269
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 271,
            column: 66
          },
          end: {
            line: 271,
            column: 67
          }
        },
        loc: {
          start: {
            line: 271,
            column: 73
          },
          end: {
            line: 271,
            column: 115
          }
        },
        line: 271
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 292
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 298,
            column: 70
          },
          end: {
            line: 298,
            column: 71
          }
        },
        loc: {
          start: {
            line: 298,
            column: 77
          },
          end: {
            line: 298,
            column: 119
          }
        },
        line: 298
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 35
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 308
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 322
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 326,
            column: 29
          },
          end: {
            line: 326,
            column: 30
          }
        },
        loc: {
          start: {
            line: 326,
            column: 42
          },
          end: {
            line: 337,
            column: 9
          }
        },
        line: 326
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 36
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 339
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 42
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 379
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 46
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 382
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 55
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 390
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 48
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 397
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 20
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 418
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 103,
            column: 37
          },
          end: {
            line: 103,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 103,
            column: 47
          },
          end: {
            line: 103,
            column: 49
          }
        }],
        line: 103
      },
      "2": {
        loc: {
          start: {
            line: 103,
            column: 51
          },
          end: {
            line: 103,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 103,
            column: 61
          },
          end: {
            line: 103,
            column: 63
          }
        }],
        line: 103
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 155,
            column: 41
          },
          end: {
            line: 155,
            column: 105
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 155,
            column: 51
          },
          end: {
            line: 155,
            column: 105
          }
        }],
        line: 155
      },
      "9": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "10": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 165,
            column: 22
          }
        }, {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 168,
            column: 22
          }
        }, {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 22
          }
        }, {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 174,
            column: 22
          }
        }, {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 176,
            column: 72
          }
        }],
        line: 162
      },
      "11": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "12": {
        loc: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 199,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 199,
            column: 41
          }
        }, {
          start: {
            line: 199,
            column: 45
          },
          end: {
            line: 199,
            column: 66
          }
        }],
        line: 199
      },
      "13": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "14": {
        loc: {
          start: {
            line: 238,
            column: 27
          },
          end: {
            line: 238,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 35
          },
          end: {
            line: 238,
            column: 37
          }
        }],
        line: 238
      },
      "15": {
        loc: {
          start: {
            line: 238,
            column: 39
          },
          end: {
            line: 238,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 48
          },
          end: {
            line: 238,
            column: 49
          }
        }],
        line: 238
      },
      "16": {
        loc: {
          start: {
            line: 238,
            column: 51
          },
          end: {
            line: 238,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 238,
            column: 61
          },
          end: {
            line: 238,
            column: 63
          }
        }],
        line: 238
      },
      "17": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "18": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "19": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "20": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "21": {
        loc: {
          start: {
            line: 266,
            column: 22
          },
          end: {
            line: 266,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 22
          },
          end: {
            line: 266,
            column: 40
          }
        }, {
          start: {
            line: 266,
            column: 44
          },
          end: {
            line: 266,
            column: 45
          }
        }],
        line: 266
      },
      "22": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "23": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "24": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "25": {
        loc: {
          start: {
            line: 288,
            column: 24
          },
          end: {
            line: 288,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 41
          },
          end: {
            line: 288,
            column: 67
          }
        }, {
          start: {
            line: 288,
            column: 70
          },
          end: {
            line: 288,
            column: 72
          }
        }],
        line: 288
      },
      "26": {
        loc: {
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "27": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "28": {
        loc: {
          start: {
            line: 318,
            column: 205
          },
          end: {
            line: 318,
            column: 229
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 224
          },
          end: {
            line: 318,
            column: 225
          }
        }, {
          start: {
            line: 318,
            column: 228
          },
          end: {
            line: 318,
            column: 229
          }
        }],
        line: 318
      },
      "29": {
        loc: {
          start: {
            line: 330,
            column: 21
          },
          end: {
            line: 330,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 40
          },
          end: {
            line: 330,
            column: 68
          }
        }, {
          start: {
            line: 330,
            column: 71
          },
          end: {
            line: 330,
            column: 73
          }
        }],
        line: 330
      },
      "30": {
        loc: {
          start: {
            line: 332,
            column: 24
          },
          end: {
            line: 332,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 46
          },
          end: {
            line: 332,
            column: 77
          }
        }, {
          start: {
            line: 332,
            column: 80
          },
          end: {
            line: 332,
            column: 82
          }
        }],
        line: 332
      },
      "31": {
        loc: {
          start: {
            line: 335,
            column: 27
          },
          end: {
            line: 335,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 53
          },
          end: {
            line: 335,
            column: 86
          }
        }, {
          start: {
            line: 335,
            column: 89
          },
          end: {
            line: 335,
            column: 98
          }
        }],
        line: 335
      },
      "32": {
        loc: {
          start: {
            line: 347,
            column: 32
          },
          end: {
            line: 347,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 51
          },
          end: {
            line: 347,
            column: 79
          }
        }, {
          start: {
            line: 347,
            column: 82
          },
          end: {
            line: 347,
            column: 84
          }
        }],
        line: 347
      },
      "33": {
        loc: {
          start: {
            line: 388,
            column: 263
          },
          end: {
            line: 388,
            column: 281
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 263
          },
          end: {
            line: 388,
            column: 269
          }
        }, {
          start: {
            line: 388,
            column: 273
          },
          end: {
            line: 388,
            column: 281
          }
        }],
        line: 388
      },
      "34": {
        loc: {
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 414,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 402,
            column: 22
          }
        }, {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 22
          }
        }, {
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 408,
            column: 22
          }
        }, {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 411,
            column: 22
          }
        }, {
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 413,
            column: 49
          }
        }],
        line: 399
      },
      "35": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0, 0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/reports/ReportService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/reports/ReportService.ts"],
      sourcesContent: ["import { ReportGenerator } from './generators/ReportGenerator';\nimport { PDFExporter } from './exporters/PDFExporter';\nimport { ExcelExporter } from './exporters/ExcelExporter';\nimport { ReportTemplates } from './templates/ReportTemplates';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { CostTracker } from '../CostTracker';\nimport { \n  ReportData, \n  ReportTemplate, \n  ReportFilters, \n  ReportExportOptions, \n  ReportGenerationProgress,\n  ReportSchedule\n} from '../../types/reports';\nimport { Database } from 'better-sqlite3';\nimport { initializeDatabase } from '../../database/connection';\nimport { EventEmitter } from 'events';\n\nexport class ReportService extends EventEmitter {\n  private reportGenerator: ReportGenerator;\n  private pdfExporter: PDFExporter;\n  private excelExporter: ExcelExporter;\n  private db: any;\n  private reportCache: Map<string, ReportData>;\n  private generationQueue: Map<string, Promise<ReportData>>;\n  private static instance: ReportService;\n\n  public constructor() {\n    super();\n    this.reportGenerator = new ReportGenerator();\n    this.pdfExporter = new PDFExporter();\n    this.excelExporter = new ExcelExporter();\n    this.reportCache = new Map();\n    this.generationQueue = new Map();\n    \n    // Initialize database first, then set up tables\n    this.initializeDb().then(() => {\n      this.initializeDatabase();\n    }).catch(error => {\n      console.error('Failed to initialize ReportService database:', error);\n    });\n  }\n\n  private async initializeDb(): Promise<void> {\n    this.db = await initializeDatabase();\n  }\n\n  /**\n   * Create test data for a prompt card\n   */\n  async createTestData(promptCardId: string): Promise<void> {\n    // Implementation for creating test data\n    console.log(`Creating test data for prompt card: ${promptCardId}`);\n  }\n\n  public static getInstance(): ReportService {\n    if (!ReportService.instance) {\n      ReportService.instance = new ReportService();\n    }\n    return ReportService.instance;\n  }\n\n  private initializeDatabase(): void {\n    // Report history table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS report_history (\n        id TEXT PRIMARY KEY,\n        template_id TEXT NOT NULL,\n        title TEXT NOT NULL,\n        description TEXT,\n        filters TEXT,\n        generated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        generation_time INTEGER,\n        total_executions INTEGER,\n        total_cost REAL,\n        success_rate REAL,\n        file_path TEXT,\n        file_size INTEGER,\n        export_format TEXT,\n        created_by TEXT,\n        status TEXT DEFAULT 'completed'\n      )\n    `);\n\n    // Report schedules table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS report_schedules (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        template_id TEXT NOT NULL,\n        filters TEXT,\n        frequency TEXT NOT NULL,\n        recipients TEXT,\n        export_format TEXT NOT NULL,\n        next_execution DATETIME,\n        last_execution DATETIME,\n        enabled BOOLEAN DEFAULT 1,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Report exports table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS report_exports (\n        id TEXT PRIMARY KEY,\n        report_id TEXT NOT NULL,\n        format TEXT NOT NULL,\n        file_path TEXT,\n        file_size INTEGER,\n        download_count INTEGER DEFAULT 0,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        expires_at DATETIME,\n        FOREIGN KEY (report_id) REFERENCES report_history(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Indexes\n    this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_report_history_template_id ON report_history(template_id);\n      CREATE INDEX IF NOT EXISTS idx_report_history_generated_at ON report_history(generated_at);\n      CREATE INDEX IF NOT EXISTS idx_report_schedules_next_execution ON report_schedules(next_execution);\n      CREATE INDEX IF NOT EXISTS idx_report_exports_report_id ON report_exports(report_id);\n    `);\n\n    console.log('Report service database initialized');\n  }\n\n  // Report Generation Methods\n  public async generateReport(\n    templateId: string,\n    filters: ReportFilters = {},\n    options: { saveToHistory?: boolean; userId?: string } = {}\n  ): Promise<ReportData> {\n    const cacheKey = this.generateCacheKey(templateId, filters);\n    \n    // Check cache first\n    if (this.reportCache.has(cacheKey)) {\n      const cachedReport = this.reportCache.get(cacheKey)!;\n      // Return cached report if it's less than 30 minutes old\n      if (Date.now() - cachedReport.generatedAt.getTime() < 30 * 60 * 1000) {\n        return cachedReport;\n      }\n    }\n\n    // Check if generation is already in progress\n    if (this.generationQueue.has(cacheKey)) {\n      return this.generationQueue.get(cacheKey)!;\n    }\n\n    // Generate new report\n    const generationPromise = this.generateReportInternal(templateId, filters, options);\n    this.generationQueue.set(cacheKey, generationPromise);\n\n    try {\n      const report = await generationPromise;\n      \n      // Cache the report\n      this.reportCache.set(cacheKey, report);\n      \n      // Save to history if requested\n      if (options.saveToHistory !== false) {\n        await this.saveReportToHistory(report, options.userId);\n      }\n      \n      return report;\n    } finally {\n      this.generationQueue.delete(cacheKey);\n    }\n  }\n\n  private async generateReportInternal(\n    templateId: string,\n    filters: ReportFilters,\n    options: { userId?: string }\n  ): Promise<ReportData> {\n    // Validate template\n    const template = ReportTemplates.getTemplate(templateId);\n    if (!template) {\n      throw new Error(`Template not found: ${templateId}`);\n    }\n\n    // Generate report with progress tracking\n    const report = await this.reportGenerator.generateReport(\n      templateId,\n      filters,\n      (progress) => {\n        this.emit('reportProgress', progress);\n      }\n    );\n\n    // Emit completion event\n    this.emit('reportGenerated', {\n      reportId: report.id,\n      templateId,\n      filters,\n      userId: options.userId,\n      generationTime: report.metadata.generationTime\n    });\n\n    return report;\n  }\n\n  // Export Methods\n  public async exportReport(\n    reportId: string,\n    format: 'pdf' | 'excel' | 'json' | 'csv',\n    options: ReportExportOptions = { format, includeCharts: true, includeRawData: false }\n  ): Promise<Buffer> {\n    // Get report from cache or history\n    const report = await this.getReportById(reportId);\n    if (!report) {\n      throw new Error(`Report not found: ${reportId}`);\n    }\n\n    let exportBuffer: Buffer;\n\n    switch (format) {\n      case 'pdf':\n        exportBuffer = await this.pdfExporter.exportToPDF(report, options);\n        break;\n      case 'excel':\n        exportBuffer = await this.excelExporter.exportToExcel(report, options);\n        break;\n      case 'json':\n        exportBuffer = Buffer.from(JSON.stringify(report, null, 2));\n        break;\n      case 'csv':\n        exportBuffer = await this.exportToCSV(report);\n        break;\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n\n    // Save export record\n    await this.saveExportRecord(reportId, format, exportBuffer.length);\n\n    // Emit export event\n    this.emit('reportExported', {\n      reportId,\n      format,\n      fileSize: exportBuffer.length,\n      timestamp: new Date()\n    });\n\n    return exportBuffer;\n  }\n\n  private async exportToCSV(report: ReportData): Promise<Buffer> {\n    const csvLines: string[] = [];\n    \n    // Add header\n    csvLines.push('Report,Template,Generated,Section,Type,Data');\n    \n    // Add report metadata\n    csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"Metadata\",\"Info\",\"Total Executions: ${report.metadata.totalExecutions}\"`);\n    csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"Metadata\",\"Info\",\"Total Cost: $${report.metadata.totalCost.toFixed(2)}\"`);\n    csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"Metadata\",\"Info\",\"Success Rate: ${report.metadata.successRate.toFixed(1)}%\"`);\n    \n    // Add section data\n    for (const section of report.sections) {\n      if (section.type === 'tables' && section.content?.rows) {\n        const tableData = section.content as any;\n        \n        // Add table headers\n        const headers = tableData.headers.map((h: string) => `\"${h}\"`).join(',');\n        csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"${section.title}\",\"TableHeader\",\"${headers}\"`);\n        \n        // Add table rows\n        tableData.rows.forEach((row: any[]) => {\n          const rowData = row.map((cell: any) => `\"${cell}\"`).join(',');\n          csvLines.push(`\"${report.title}\",\"${report.template.name}\",\"${report.generatedAt.toISOString()}\",\"${section.title}\",\"TableRow\",\"${rowData}\"`);\n        });\n      }\n    }\n    \n    return Buffer.from(csvLines.join('\\n'));\n  }\n\n  // Template Methods\n  public getTemplates(): ReportTemplate[] {\n    return ReportTemplates.getAllTemplates();\n  }\n\n  public getTemplate(templateId: string): ReportTemplate | undefined {\n    return ReportTemplates.getTemplate(templateId);\n  }\n\n  public getTemplatesByType(type: ReportTemplate['type']): ReportTemplate[] {\n    return ReportTemplates.getTemplatesByType(type);\n  }\n\n  public async createCustomTemplate(template: ReportTemplate): Promise<ReportTemplate> {\n    const errors = ReportTemplates.validateTemplate(template);\n    if (errors.length > 0) {\n      throw new Error(`Template validation failed: ${errors.join(', ')}`);\n    }\n\n    ReportTemplates.addCustomTemplate(template);\n    \n    // Emit template created event\n    this.emit('templateCreated', {\n      templateId: template.id,\n      templateName: template.name,\n      timestamp: new Date()\n    });\n\n    return template;\n  }\n\n  // Report History Methods\n  public async getReportHistory(\n    limit: number = 50,\n    offset: number = 0,\n    filters: { templateId?: string; userId?: string; startDate?: string; endDate?: string } = {}\n  ): Promise<{ reports: any[]; total: number }> {\n    let query = `\n      SELECT * FROM report_history \n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    if (filters.templateId) {\n      query += ` AND template_id = ?`;\n      params.push(filters.templateId);\n    }\n\n    if (filters.userId) {\n      query += ` AND created_by = ?`;\n      params.push(filters.userId);\n    }\n\n    if (filters.startDate) {\n      query += ` AND generated_at >= ?`;\n      params.push(filters.startDate);\n    }\n\n    if (filters.endDate) {\n      query += ` AND generated_at <= ?`;\n      params.push(filters.endDate);\n    }\n\n    query += ` ORDER BY generated_at DESC LIMIT ? OFFSET ?`;\n    params.push(limit, offset);\n\n    const reports = this.db.prepare(query).all(...params);\n    \n    // Get total count\n    const countQuery = query.replace(/SELECT \\* FROM/, 'SELECT COUNT(*) as count FROM').replace(/ORDER BY.*$/, '');\n    const totalResult = this.db.prepare(countQuery).get(...params.slice(0, -2)) as any;\n    const total = totalResult?.count || 0;\n\n    return { reports, total };\n  }\n\n  public async getReportById(reportId: string): Promise<ReportData | null> {\n    // Check cache first\n    const cacheKey = Array.from(this.reportCache.keys()).find(key => \n      this.reportCache.get(key)?.id === reportId\n    );\n    if (cacheKey) {\n      return this.reportCache.get(cacheKey)!;\n    }\n\n    // Check database\n    const record = this.db.prepare(`\n      SELECT * FROM report_history WHERE id = ?\n    `).get(reportId);\n\n    if (!record) {\n      return null;\n    }\n\n    // Reconstruct report data (this is a simplified version)\n    // In a real implementation, you might want to store the full report data\n    const template = ReportTemplates.getTemplate(record.template_id);\n    if (!template) {\n      return null;\n    }\n\n    const filters = record.filters ? JSON.parse(record.filters) : {};\n    \n    // Regenerate report (this could be optimized by storing the full report)\n    return await this.generateReport(record.template_id, filters, { saveToHistory: false });\n  }\n\n  public async deleteReport(reportId: string): Promise<boolean> {\n    const result = this.db.prepare(`\n      DELETE FROM report_history WHERE id = ?\n    `).run(reportId);\n\n    if (result.changes > 0) {\n      // Remove from cache\n      const cacheKey = Array.from(this.reportCache.keys()).find(key => \n        this.reportCache.get(key)?.id === reportId\n      );\n      if (cacheKey) {\n        this.reportCache.delete(cacheKey);\n      }\n\n      this.emit('reportDeleted', { reportId, timestamp: new Date() });\n      return true;\n    }\n\n    return false;\n  }\n\n  // Schedule Methods\n  public async createSchedule(schedule: Omit<ReportSchedule, 'id'>): Promise<ReportSchedule> {\n    const scheduleId = `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const fullSchedule: ReportSchedule = {\n      id: scheduleId,\n      ...schedule\n    };\n\n    this.db.prepare(`\n      INSERT INTO report_schedules \n      (id, name, template_id, filters, frequency, recipients, export_format, next_execution, enabled)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).run(\n      scheduleId,\n      schedule.name,\n      schedule.templateId,\n      JSON.stringify(schedule.filters),\n      schedule.frequency,\n      JSON.stringify(schedule.recipients),\n      schedule.format,\n      schedule.nextExecution.toISOString(),\n      schedule.enabled ? 1 : 0\n    );\n\n    this.emit('scheduleCreated', { scheduleId, scheduleName: schedule.name, timestamp: new Date() });\n    \n    return fullSchedule;\n  }\n\n  public async getSchedules(): Promise<ReportSchedule[]> {\n    const schedules = this.db.prepare(`\n      SELECT * FROM report_schedules ORDER BY created_at DESC\n    `).all();\n\n    return schedules.map(schedule => ({\n      id: schedule.id,\n      name: schedule.name,\n      templateId: schedule.template_id,\n      filters: schedule.filters ? JSON.parse(schedule.filters) : {},\n      frequency: schedule.frequency,\n      recipients: schedule.recipients ? JSON.parse(schedule.recipients) : [],\n      format: schedule.export_format,\n      nextExecution: new Date(schedule.next_execution),\n      lastExecution: schedule.last_execution ? new Date(schedule.last_execution) : undefined,\n      enabled: Boolean(schedule.enabled)\n    }));\n  }\n\n  public async executeScheduledReports(): Promise<void> {\n    const now = new Date();\n    const dueSchedules = this.db.prepare(`\n      SELECT * FROM report_schedules \n      WHERE enabled = 1 AND next_execution <= ?\n    `).all(now.toISOString());\n\n    for (const schedule of dueSchedules) {\n      try {\n        const filters = schedule.filters ? JSON.parse(schedule.filters) : {};\n        const report = await this.generateReport(schedule.template_id, filters, { saveToHistory: true });\n        \n        const exportBuffer = await this.exportReport(report.id, schedule.export_format);\n        \n        // In a real implementation, you would send the report to recipients\n        // For now, we just log the execution\n        console.log(`Executed scheduled report: ${schedule.name}`);\n        \n        // Update schedule\n        const nextExecution = this.calculateNextExecution(schedule.frequency, now);\n        this.db.prepare(`\n          UPDATE report_schedules \n          SET last_execution = ?, next_execution = ?\n          WHERE id = ?\n        `).run(now.toISOString(), nextExecution.toISOString(), schedule.id);\n        \n        this.emit('scheduleExecuted', {\n          scheduleId: schedule.id,\n          scheduleName: schedule.name,\n          reportId: report.id,\n          timestamp: now\n        });\n      } catch (error) {\n        console.error(`Failed to execute scheduled report ${schedule.name}:`, error);\n        this.emit('scheduleExecutionFailed', {\n          scheduleId: schedule.id,\n          scheduleName: schedule.name,\n          error: error.message,\n          timestamp: now\n        });\n      }\n    }\n  }\n\n  // Utility Methods\n  private generateCacheKey(templateId: string, filters: ReportFilters): string {\n    return `${templateId}:${JSON.stringify(filters)}`;\n  }\n\n  private async saveReportToHistory(report: ReportData, userId?: string): Promise<void> {\n    this.db.prepare(`\n      INSERT INTO report_history \n      (id, template_id, title, description, filters, generated_at, generation_time, \n       total_executions, total_cost, success_rate, created_by, status)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).run(\n      report.id,\n      report.template.id,\n      report.title,\n      report.description,\n      JSON.stringify(report.filters),\n      report.generatedAt.toISOString(),\n      report.metadata.generationTime,\n      report.metadata.totalExecutions,\n      report.metadata.totalCost,\n      report.metadata.successRate,\n      userId || 'system',\n      'completed'\n    );\n  }\n\n  private async saveExportRecord(reportId: string, format: string, fileSize: number): Promise<void> {\n    const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    this.db.prepare(`\n      INSERT INTO report_exports (id, report_id, format, file_size)\n      VALUES (?, ?, ?, ?)\n    `).run(exportId, reportId, format, fileSize);\n  }\n\n  private calculateNextExecution(frequency: string, fromDate: Date): Date {\n    const next = new Date(fromDate);\n    \n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        break;\n      case 'monthly':\n        next.setMonth(next.getMonth() + 1);\n        break;\n      case 'quarterly':\n        next.setMonth(next.getMonth() + 3);\n        break;\n      default:\n        next.setDate(next.getDate() + 1);\n    }\n    \n    return next;\n  }\n\n  // Cleanup Methods\n  public async cleanup(): Promise<void> {\n    // Clear old cache entries\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\n    for (const [key, report] of this.reportCache.entries()) {\n      if (report.generatedAt.getTime() < oneHourAgo) {\n        this.reportCache.delete(key);\n      }\n    }\n\n    // Clean up old export records\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    this.db.prepare(`\n      DELETE FROM report_exports \n      WHERE created_at < ?\n    `).run(thirtyDaysAgo.toISOString());\n\n    console.log('Report service cleanup completed');\n  }\n}\n\n// Export singleton instance\nexport const reportService = ReportService.getInstance();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1d8f54695dc9316a0df5fd7a193bb4ac8e34edef"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lpiajpp6y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lpiajpp6y();
cov_1lpiajpp6y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1lpiajpp6y().s[1]++;
exports.reportService = exports.ReportService = void 0;
const ReportGenerator_1 =
/* istanbul ignore next */
(cov_1lpiajpp6y().s[2]++, require("./generators/ReportGenerator"));
const PDFExporter_1 =
/* istanbul ignore next */
(cov_1lpiajpp6y().s[3]++, require("./exporters/PDFExporter"));
const ExcelExporter_1 =
/* istanbul ignore next */
(cov_1lpiajpp6y().s[4]++, require("./exporters/ExcelExporter"));
const ReportTemplates_1 =
/* istanbul ignore next */
(cov_1lpiajpp6y().s[5]++, require("./templates/ReportTemplates"));
const connection_1 =
/* istanbul ignore next */
(cov_1lpiajpp6y().s[6]++, require("../../database/connection"));
const events_1 =
/* istanbul ignore next */
(cov_1lpiajpp6y().s[7]++, require("events"));
class ReportService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[0]++;
    cov_1lpiajpp6y().s[8]++;
    super();
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[9]++;
    this.reportGenerator = new ReportGenerator_1.ReportGenerator();
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[10]++;
    this.pdfExporter = new PDFExporter_1.PDFExporter();
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[11]++;
    this.excelExporter = new ExcelExporter_1.ExcelExporter();
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[12]++;
    this.reportCache = new Map();
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[13]++;
    this.generationQueue = new Map();
    // Initialize database first, then set up tables
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[14]++;
    this.initializeDb().then(() => {
      /* istanbul ignore next */
      cov_1lpiajpp6y().f[1]++;
      cov_1lpiajpp6y().s[15]++;
      this.initializeDatabase();
    }).catch(error => {
      /* istanbul ignore next */
      cov_1lpiajpp6y().f[2]++;
      cov_1lpiajpp6y().s[16]++;
      console.error('Failed to initialize ReportService database:', error);
    });
  }
  async initializeDb() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[3]++;
    cov_1lpiajpp6y().s[17]++;
    this.db = await (0, connection_1.initializeDatabase)();
  }
  /**
   * Create test data for a prompt card
   */
  async createTestData(promptCardId) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[4]++;
    cov_1lpiajpp6y().s[18]++;
    // Implementation for creating test data
    console.log(`Creating test data for prompt card: ${promptCardId}`);
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[5]++;
    cov_1lpiajpp6y().s[19]++;
    if (!ReportService.instance) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[0][0]++;
      cov_1lpiajpp6y().s[20]++;
      ReportService.instance = new ReportService();
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[0][1]++;
    }
    cov_1lpiajpp6y().s[21]++;
    return ReportService.instance;
  }
  initializeDatabase() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[6]++;
    cov_1lpiajpp6y().s[22]++;
    // Report history table
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS report_history (
        id TEXT PRIMARY KEY,
        template_id TEXT NOT NULL,
        title TEXT NOT NULL,
        description TEXT,
        filters TEXT,
        generated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        generation_time INTEGER,
        total_executions INTEGER,
        total_cost REAL,
        success_rate REAL,
        file_path TEXT,
        file_size INTEGER,
        export_format TEXT,
        created_by TEXT,
        status TEXT DEFAULT 'completed'
      )
    `);
    // Report schedules table
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[23]++;
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS report_schedules (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        template_id TEXT NOT NULL,
        filters TEXT,
        frequency TEXT NOT NULL,
        recipients TEXT,
        export_format TEXT NOT NULL,
        next_execution DATETIME,
        last_execution DATETIME,
        enabled BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    // Report exports table
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[24]++;
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS report_exports (
        id TEXT PRIMARY KEY,
        report_id TEXT NOT NULL,
        format TEXT NOT NULL,
        file_path TEXT,
        file_size INTEGER,
        download_count INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        expires_at DATETIME,
        FOREIGN KEY (report_id) REFERENCES report_history(id) ON DELETE CASCADE
      )
    `);
    // Indexes
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[25]++;
    this.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_report_history_template_id ON report_history(template_id);
      CREATE INDEX IF NOT EXISTS idx_report_history_generated_at ON report_history(generated_at);
      CREATE INDEX IF NOT EXISTS idx_report_schedules_next_execution ON report_schedules(next_execution);
      CREATE INDEX IF NOT EXISTS idx_report_exports_report_id ON report_exports(report_id);
    `);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[26]++;
    console.log('Report service database initialized');
  }
  // Report Generation Methods
  async generateReport(templateId, filters =
  /* istanbul ignore next */
  (cov_1lpiajpp6y().b[1][0]++, {}), options =
  /* istanbul ignore next */
  (cov_1lpiajpp6y().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[7]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[27]++, this.generateCacheKey(templateId, filters));
    // Check cache first
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[28]++;
    if (this.reportCache.has(cacheKey)) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[3][0]++;
      const cachedReport =
      /* istanbul ignore next */
      (cov_1lpiajpp6y().s[29]++, this.reportCache.get(cacheKey));
      // Return cached report if it's less than 30 minutes old
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[30]++;
      if (Date.now() - cachedReport.generatedAt.getTime() < 30 * 60 * 1000) {
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[4][0]++;
        cov_1lpiajpp6y().s[31]++;
        return cachedReport;
      } else
      /* istanbul ignore next */
      {
        cov_1lpiajpp6y().b[4][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[3][1]++;
    }
    // Check if generation is already in progress
    cov_1lpiajpp6y().s[32]++;
    if (this.generationQueue.has(cacheKey)) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[5][0]++;
      cov_1lpiajpp6y().s[33]++;
      return this.generationQueue.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[5][1]++;
    }
    // Generate new report
    const generationPromise =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[34]++, this.generateReportInternal(templateId, filters, options));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[35]++;
    this.generationQueue.set(cacheKey, generationPromise);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[36]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_1lpiajpp6y().s[37]++, await generationPromise);
      // Cache the report
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[38]++;
      this.reportCache.set(cacheKey, report);
      // Save to history if requested
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[39]++;
      if (options.saveToHistory !== false) {
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[6][0]++;
        cov_1lpiajpp6y().s[40]++;
        await this.saveReportToHistory(report, options.userId);
      } else
      /* istanbul ignore next */
      {
        cov_1lpiajpp6y().b[6][1]++;
      }
      cov_1lpiajpp6y().s[41]++;
      return report;
    } finally {
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[42]++;
      this.generationQueue.delete(cacheKey);
    }
  }
  async generateReportInternal(templateId, filters, options) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[8]++;
    // Validate template
    const template =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[43]++, ReportTemplates_1.ReportTemplates.getTemplate(templateId));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[44]++;
    if (!template) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[7][0]++;
      cov_1lpiajpp6y().s[45]++;
      throw new Error(`Template not found: ${templateId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[7][1]++;
    }
    // Generate report with progress tracking
    const report =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[46]++, await this.reportGenerator.generateReport(templateId, filters, progress => {
      /* istanbul ignore next */
      cov_1lpiajpp6y().f[9]++;
      cov_1lpiajpp6y().s[47]++;
      this.emit('reportProgress', progress);
    }));
    // Emit completion event
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[48]++;
    this.emit('reportGenerated', {
      reportId: report.id,
      templateId,
      filters,
      userId: options.userId,
      generationTime: report.metadata.generationTime
    });
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[49]++;
    return report;
  }
  // Export Methods
  async exportReport(reportId, format, options =
  /* istanbul ignore next */
  (cov_1lpiajpp6y().b[8][0]++, {
    format,
    includeCharts: true,
    includeRawData: false
  })) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[10]++;
    // Get report from cache or history
    const report =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[50]++, await this.getReportById(reportId));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[51]++;
    if (!report) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[9][0]++;
      cov_1lpiajpp6y().s[52]++;
      throw new Error(`Report not found: ${reportId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[9][1]++;
    }
    let exportBuffer;
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[53]++;
    switch (format) {
      case 'pdf':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[10][0]++;
        cov_1lpiajpp6y().s[54]++;
        exportBuffer = await this.pdfExporter.exportToPDF(report, options);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[55]++;
        break;
      case 'excel':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[10][1]++;
        cov_1lpiajpp6y().s[56]++;
        exportBuffer = await this.excelExporter.exportToExcel(report, options);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[57]++;
        break;
      case 'json':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[10][2]++;
        cov_1lpiajpp6y().s[58]++;
        exportBuffer = Buffer.from(JSON.stringify(report, null, 2));
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[59]++;
        break;
      case 'csv':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[10][3]++;
        cov_1lpiajpp6y().s[60]++;
        exportBuffer = await this.exportToCSV(report);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[61]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[10][4]++;
        cov_1lpiajpp6y().s[62]++;
        throw new Error(`Unsupported export format: ${format}`);
    }
    // Save export record
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[63]++;
    await this.saveExportRecord(reportId, format, exportBuffer.length);
    // Emit export event
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[64]++;
    this.emit('reportExported', {
      reportId,
      format,
      fileSize: exportBuffer.length,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[65]++;
    return exportBuffer;
  }
  async exportToCSV(report) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[11]++;
    const csvLines =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[66]++, []);
    // Add header
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[67]++;
    csvLines.push('Report,Template,Generated,Section,Type,Data');
    // Add report metadata
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[68]++;
    csvLines.push(`"${report.title}","${report.template.name}","${report.generatedAt.toISOString()}","Metadata","Info","Total Executions: ${report.metadata.totalExecutions}"`);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[69]++;
    csvLines.push(`"${report.title}","${report.template.name}","${report.generatedAt.toISOString()}","Metadata","Info","Total Cost: $${report.metadata.totalCost.toFixed(2)}"`);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[70]++;
    csvLines.push(`"${report.title}","${report.template.name}","${report.generatedAt.toISOString()}","Metadata","Info","Success Rate: ${report.metadata.successRate.toFixed(1)}%"`);
    // Add section data
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[71]++;
    for (const section of report.sections) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[72]++;
      if (
      /* istanbul ignore next */
      (cov_1lpiajpp6y().b[12][0]++, section.type === 'tables') &&
      /* istanbul ignore next */
      (cov_1lpiajpp6y().b[12][1]++, section.content?.rows)) {
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[11][0]++;
        const tableData =
        /* istanbul ignore next */
        (cov_1lpiajpp6y().s[73]++, section.content);
        // Add table headers
        const headers =
        /* istanbul ignore next */
        (cov_1lpiajpp6y().s[74]++, tableData.headers.map(h => {
          /* istanbul ignore next */
          cov_1lpiajpp6y().f[12]++;
          cov_1lpiajpp6y().s[75]++;
          return `"${h}"`;
        }).join(','));
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[76]++;
        csvLines.push(`"${report.title}","${report.template.name}","${report.generatedAt.toISOString()}","${section.title}","TableHeader","${headers}"`);
        // Add table rows
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[77]++;
        tableData.rows.forEach(row => {
          /* istanbul ignore next */
          cov_1lpiajpp6y().f[13]++;
          const rowData =
          /* istanbul ignore next */
          (cov_1lpiajpp6y().s[78]++, row.map(cell => {
            /* istanbul ignore next */
            cov_1lpiajpp6y().f[14]++;
            cov_1lpiajpp6y().s[79]++;
            return `"${cell}"`;
          }).join(','));
          /* istanbul ignore next */
          cov_1lpiajpp6y().s[80]++;
          csvLines.push(`"${report.title}","${report.template.name}","${report.generatedAt.toISOString()}","${section.title}","TableRow","${rowData}"`);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1lpiajpp6y().b[11][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[81]++;
    return Buffer.from(csvLines.join('\n'));
  }
  // Template Methods
  getTemplates() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[15]++;
    cov_1lpiajpp6y().s[82]++;
    return ReportTemplates_1.ReportTemplates.getAllTemplates();
  }
  getTemplate(templateId) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[16]++;
    cov_1lpiajpp6y().s[83]++;
    return ReportTemplates_1.ReportTemplates.getTemplate(templateId);
  }
  getTemplatesByType(type) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[17]++;
    cov_1lpiajpp6y().s[84]++;
    return ReportTemplates_1.ReportTemplates.getTemplatesByType(type);
  }
  async createCustomTemplate(template) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[18]++;
    const errors =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[85]++, ReportTemplates_1.ReportTemplates.validateTemplate(template));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[86]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[13][0]++;
      cov_1lpiajpp6y().s[87]++;
      throw new Error(`Template validation failed: ${errors.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[13][1]++;
    }
    cov_1lpiajpp6y().s[88]++;
    ReportTemplates_1.ReportTemplates.addCustomTemplate(template);
    // Emit template created event
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[89]++;
    this.emit('templateCreated', {
      templateId: template.id,
      templateName: template.name,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[90]++;
    return template;
  }
  // Report History Methods
  async getReportHistory(limit =
  /* istanbul ignore next */
  (cov_1lpiajpp6y().b[14][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_1lpiajpp6y().b[15][0]++, 0), filters =
  /* istanbul ignore next */
  (cov_1lpiajpp6y().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[19]++;
    let query =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[91]++, `
      SELECT * FROM report_history 
      WHERE 1=1
    `);
    const params =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[92]++, []);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[93]++;
    if (filters.templateId) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[17][0]++;
      cov_1lpiajpp6y().s[94]++;
      query += ` AND template_id = ?`;
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[95]++;
      params.push(filters.templateId);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[17][1]++;
    }
    cov_1lpiajpp6y().s[96]++;
    if (filters.userId) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[18][0]++;
      cov_1lpiajpp6y().s[97]++;
      query += ` AND created_by = ?`;
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[98]++;
      params.push(filters.userId);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[18][1]++;
    }
    cov_1lpiajpp6y().s[99]++;
    if (filters.startDate) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[19][0]++;
      cov_1lpiajpp6y().s[100]++;
      query += ` AND generated_at >= ?`;
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[101]++;
      params.push(filters.startDate);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[19][1]++;
    }
    cov_1lpiajpp6y().s[102]++;
    if (filters.endDate) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[20][0]++;
      cov_1lpiajpp6y().s[103]++;
      query += ` AND generated_at <= ?`;
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[104]++;
      params.push(filters.endDate);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[20][1]++;
    }
    cov_1lpiajpp6y().s[105]++;
    query += ` ORDER BY generated_at DESC LIMIT ? OFFSET ?`;
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[106]++;
    params.push(limit, offset);
    const reports =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[107]++, this.db.prepare(query).all(...params));
    // Get total count
    const countQuery =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[108]++, query.replace(/SELECT \* FROM/, 'SELECT COUNT(*) as count FROM').replace(/ORDER BY.*$/, ''));
    const totalResult =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[109]++, this.db.prepare(countQuery).get(...params.slice(0, -2)));
    const total =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[110]++,
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[21][0]++, totalResult?.count) ||
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[21][1]++, 0));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[111]++;
    return {
      reports,
      total
    };
  }
  async getReportById(reportId) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[20]++;
    // Check cache first
    const cacheKey =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[112]++, Array.from(this.reportCache.keys()).find(key => {
      /* istanbul ignore next */
      cov_1lpiajpp6y().f[21]++;
      cov_1lpiajpp6y().s[113]++;
      return this.reportCache.get(key)?.id === reportId;
    }));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[114]++;
    if (cacheKey) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[22][0]++;
      cov_1lpiajpp6y().s[115]++;
      return this.reportCache.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[22][1]++;
    }
    // Check database
    const record =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[116]++, this.db.prepare(`
      SELECT * FROM report_history WHERE id = ?
    `).get(reportId));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[117]++;
    if (!record) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[23][0]++;
      cov_1lpiajpp6y().s[118]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[23][1]++;
    }
    // Reconstruct report data (this is a simplified version)
    // In a real implementation, you might want to store the full report data
    const template =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[119]++, ReportTemplates_1.ReportTemplates.getTemplate(record.template_id));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[120]++;
    if (!template) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[24][0]++;
      cov_1lpiajpp6y().s[121]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[24][1]++;
    }
    const filters =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[122]++, record.filters ?
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[25][0]++, JSON.parse(record.filters)) :
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[25][1]++, {}));
    // Regenerate report (this could be optimized by storing the full report)
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[123]++;
    return await this.generateReport(record.template_id, filters, {
      saveToHistory: false
    });
  }
  async deleteReport(reportId) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[22]++;
    const result =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[124]++, this.db.prepare(`
      DELETE FROM report_history WHERE id = ?
    `).run(reportId));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[125]++;
    if (result.changes > 0) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().b[26][0]++;
      // Remove from cache
      const cacheKey =
      /* istanbul ignore next */
      (cov_1lpiajpp6y().s[126]++, Array.from(this.reportCache.keys()).find(key => {
        /* istanbul ignore next */
        cov_1lpiajpp6y().f[23]++;
        cov_1lpiajpp6y().s[127]++;
        return this.reportCache.get(key)?.id === reportId;
      }));
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[128]++;
      if (cacheKey) {
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[27][0]++;
        cov_1lpiajpp6y().s[129]++;
        this.reportCache.delete(cacheKey);
      } else
      /* istanbul ignore next */
      {
        cov_1lpiajpp6y().b[27][1]++;
      }
      cov_1lpiajpp6y().s[130]++;
      this.emit('reportDeleted', {
        reportId,
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[131]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1lpiajpp6y().b[26][1]++;
    }
    cov_1lpiajpp6y().s[132]++;
    return false;
  }
  // Schedule Methods
  async createSchedule(schedule) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[24]++;
    const scheduleId =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[133]++, `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const fullSchedule =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[134]++, {
      id: scheduleId,
      ...schedule
    });
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[135]++;
    this.db.prepare(`
      INSERT INTO report_schedules 
      (id, name, template_id, filters, frequency, recipients, export_format, next_execution, enabled)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(scheduleId, schedule.name, schedule.templateId, JSON.stringify(schedule.filters), schedule.frequency, JSON.stringify(schedule.recipients), schedule.format, schedule.nextExecution.toISOString(), schedule.enabled ?
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[28][0]++, 1) :
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[28][1]++, 0));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[136]++;
    this.emit('scheduleCreated', {
      scheduleId,
      scheduleName: schedule.name,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[137]++;
    return fullSchedule;
  }
  async getSchedules() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[25]++;
    const schedules =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[138]++, this.db.prepare(`
      SELECT * FROM report_schedules ORDER BY created_at DESC
    `).all());
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[139]++;
    return schedules.map(schedule => {
      /* istanbul ignore next */
      cov_1lpiajpp6y().f[26]++;
      cov_1lpiajpp6y().s[140]++;
      return {
        id: schedule.id,
        name: schedule.name,
        templateId: schedule.template_id,
        filters: schedule.filters ?
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[29][0]++, JSON.parse(schedule.filters)) :
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[29][1]++, {}),
        frequency: schedule.frequency,
        recipients: schedule.recipients ?
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[30][0]++, JSON.parse(schedule.recipients)) :
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[30][1]++, []),
        format: schedule.export_format,
        nextExecution: new Date(schedule.next_execution),
        lastExecution: schedule.last_execution ?
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[31][0]++, new Date(schedule.last_execution)) :
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[31][1]++, undefined),
        enabled: Boolean(schedule.enabled)
      };
    });
  }
  async executeScheduledReports() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[27]++;
    const now =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[141]++, new Date());
    const dueSchedules =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[142]++, this.db.prepare(`
      SELECT * FROM report_schedules 
      WHERE enabled = 1 AND next_execution <= ?
    `).all(now.toISOString()));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[143]++;
    for (const schedule of dueSchedules) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[144]++;
      try {
        const filters =
        /* istanbul ignore next */
        (cov_1lpiajpp6y().s[145]++, schedule.filters ?
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[32][0]++, JSON.parse(schedule.filters)) :
        /* istanbul ignore next */
        (cov_1lpiajpp6y().b[32][1]++, {}));
        const report =
        /* istanbul ignore next */
        (cov_1lpiajpp6y().s[146]++, await this.generateReport(schedule.template_id, filters, {
          saveToHistory: true
        }));
        const exportBuffer =
        /* istanbul ignore next */
        (cov_1lpiajpp6y().s[147]++, await this.exportReport(report.id, schedule.export_format));
        // In a real implementation, you would send the report to recipients
        // For now, we just log the execution
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[148]++;
        console.log(`Executed scheduled report: ${schedule.name}`);
        // Update schedule
        const nextExecution =
        /* istanbul ignore next */
        (cov_1lpiajpp6y().s[149]++, this.calculateNextExecution(schedule.frequency, now));
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[150]++;
        this.db.prepare(`
          UPDATE report_schedules 
          SET last_execution = ?, next_execution = ?
          WHERE id = ?
        `).run(now.toISOString(), nextExecution.toISOString(), schedule.id);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[151]++;
        this.emit('scheduleExecuted', {
          scheduleId: schedule.id,
          scheduleName: schedule.name,
          reportId: report.id,
          timestamp: now
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[152]++;
        console.error(`Failed to execute scheduled report ${schedule.name}:`, error);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[153]++;
        this.emit('scheduleExecutionFailed', {
          scheduleId: schedule.id,
          scheduleName: schedule.name,
          error: error.message,
          timestamp: now
        });
      }
    }
  }
  // Utility Methods
  generateCacheKey(templateId, filters) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[28]++;
    cov_1lpiajpp6y().s[154]++;
    return `${templateId}:${JSON.stringify(filters)}`;
  }
  async saveReportToHistory(report, userId) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[29]++;
    cov_1lpiajpp6y().s[155]++;
    this.db.prepare(`
      INSERT INTO report_history 
      (id, template_id, title, description, filters, generated_at, generation_time, 
       total_executions, total_cost, success_rate, created_by, status)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(report.id, report.template.id, report.title, report.description, JSON.stringify(report.filters), report.generatedAt.toISOString(), report.metadata.generationTime, report.metadata.totalExecutions, report.metadata.totalCost, report.metadata.successRate,
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[33][0]++, userId) ||
    /* istanbul ignore next */
    (cov_1lpiajpp6y().b[33][1]++, 'system'), 'completed');
  }
  async saveExportRecord(reportId, format, fileSize) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[30]++;
    const exportId =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[156]++, `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[157]++;
    this.db.prepare(`
      INSERT INTO report_exports (id, report_id, format, file_size)
      VALUES (?, ?, ?, ?)
    `).run(exportId, reportId, format, fileSize);
  }
  calculateNextExecution(frequency, fromDate) {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[31]++;
    const next =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[158]++, new Date(fromDate));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[159]++;
    switch (frequency) {
      case 'daily':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[34][0]++;
        cov_1lpiajpp6y().s[160]++;
        next.setDate(next.getDate() + 1);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[161]++;
        break;
      case 'weekly':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[34][1]++;
        cov_1lpiajpp6y().s[162]++;
        next.setDate(next.getDate() + 7);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[163]++;
        break;
      case 'monthly':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[34][2]++;
        cov_1lpiajpp6y().s[164]++;
        next.setMonth(next.getMonth() + 1);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[165]++;
        break;
      case 'quarterly':
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[34][3]++;
        cov_1lpiajpp6y().s[166]++;
        next.setMonth(next.getMonth() + 3);
        /* istanbul ignore next */
        cov_1lpiajpp6y().s[167]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[34][4]++;
        cov_1lpiajpp6y().s[168]++;
        next.setDate(next.getDate() + 1);
    }
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[169]++;
    return next;
  }
  // Cleanup Methods
  async cleanup() {
    /* istanbul ignore next */
    cov_1lpiajpp6y().f[32]++;
    // Clear old cache entries
    const oneHourAgo =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[170]++, Date.now() - 60 * 60 * 1000);
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[171]++;
    for (const [key, report] of this.reportCache.entries()) {
      /* istanbul ignore next */
      cov_1lpiajpp6y().s[172]++;
      if (report.generatedAt.getTime() < oneHourAgo) {
        /* istanbul ignore next */
        cov_1lpiajpp6y().b[35][0]++;
        cov_1lpiajpp6y().s[173]++;
        this.reportCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_1lpiajpp6y().b[35][1]++;
      }
    }
    // Clean up old export records
    const thirtyDaysAgo =
    /* istanbul ignore next */
    (cov_1lpiajpp6y().s[174]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[175]++;
    this.db.prepare(`
      DELETE FROM report_exports 
      WHERE created_at < ?
    `).run(thirtyDaysAgo.toISOString());
    /* istanbul ignore next */
    cov_1lpiajpp6y().s[176]++;
    console.log('Report service cleanup completed');
  }
}
/* istanbul ignore next */
cov_1lpiajpp6y().s[177]++;
exports.ReportService = ReportService;
// Export singleton instance
/* istanbul ignore next */
cov_1lpiajpp6y().s[178]++;
exports.reportService = ReportService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,