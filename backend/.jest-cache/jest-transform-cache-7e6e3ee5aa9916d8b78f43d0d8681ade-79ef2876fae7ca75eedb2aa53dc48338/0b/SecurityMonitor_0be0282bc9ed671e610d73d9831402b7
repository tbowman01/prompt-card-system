a088131a7cbb48ec5aff52f2ccaa2a07
"use strict";

/* istanbul ignore next */
function cov_i3ndmct2y() {
  var path = "/workspaces/prompt-card-system/backend/src/services/security/SecurityMonitor.ts";
  var hash = "1074cc02a27e713de25f86d2e20310d321edbdc1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/security/SecurityMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 59
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 58
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "8": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 51
        }
      },
      "9": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 34
        }
      },
      "10": {
        start: {
          line: 13,
          column: 18
        },
        end: {
          line: 13,
          column: 61
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 16
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 25
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 39
        }
      },
      "15": {
        start: {
          line: 20,
          column: 122
        },
        end: {
          line: 20,
          column: 129
        }
      },
      "16": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "17": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 33
        }
      },
      "18": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "19": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "20": {
        start: {
          line: 34,
          column: 30
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 40
        }
      },
      "22": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 50
        }
      },
      "23": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "24": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 54
        }
      },
      "25": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "26": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 69
        }
      },
      "27": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 45
        }
      },
      "28": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "29": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "30": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 93
        }
      },
      "31": {
        start: {
          line: 54,
          column: 60
        },
        end: {
          line: 54,
          column: 91
        }
      },
      "32": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "33": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 85
        }
      },
      "34": {
        start: {
          line: 57,
          column: 60
        },
        end: {
          line: 57,
          column: 83
        }
      },
      "35": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "36": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 95
        }
      },
      "37": {
        start: {
          line: 60,
          column: 60
        },
        end: {
          line: 60,
          column: 93
        }
      },
      "38": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "39": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 90
        }
      },
      "40": {
        start: {
          line: 63,
          column: 60
        },
        end: {
          line: 63,
          column: 88
        }
      },
      "41": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "42": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 70
        }
      },
      "43": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 92
        }
      },
      "44": {
        start: {
          line: 69,
          column: 45
        },
        end: {
          line: 69,
          column: 90
        }
      },
      "45": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "46": {
        start: {
          line: 74,
          column: 27
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "47": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "48": {
        start: {
          line: 84,
          column: 35
        },
        end: {
          line: 84,
          column: 94
        }
      },
      "49": {
        start: {
          line: 85,
          column: 36
        },
        end: {
          line: 85,
          column: 54
        }
      },
      "50": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 101,
          column: 17
        }
      },
      "51": {
        start: {
          line: 87,
          column: 34
        },
        end: {
          line: 87,
          column: 61
        }
      },
      "52": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 100,
          column: 23
        }
      },
      "53": {
        start: {
          line: 89,
          column: 37
        },
        end: {
          line: 89,
          column: 55
        }
      },
      "54": {
        start: {
          line: 90,
          column: 41
        },
        end: {
          line: 90,
          column: 54
        }
      },
      "55": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "56": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 92,
          column: 55
        }
      },
      "57": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 99,
          column: 27
        }
      },
      "58": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "59": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 109
        }
      },
      "60": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "61": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 118
        }
      },
      "62": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "63": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 108
        }
      },
      "64": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 119,
          column: 19
        }
      },
      "65": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "66": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "67": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 26
        }
      },
      "68": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 115
        }
      },
      "69": {
        start: {
          line: 139,
          column: 23
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "70": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "71": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 69
        }
      },
      "72": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 60
        }
      },
      "73": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "74": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 80
        }
      },
      "75": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 70
        }
      },
      "76": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 158,
          column: 19
        }
      },
      "77": {
        start: {
          line: 155,
          column: 20
        },
        end: {
          line: 155,
          column: 61
        }
      },
      "78": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 51
        }
      },
      "79": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 47
        }
      },
      "80": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "81": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 104
        }
      },
      "82": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 96
        }
      },
      "83": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 85
        }
      },
      "84": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 51
        }
      },
      "85": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "86": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 26
        }
      },
      "87": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 109
        }
      },
      "88": {
        start: {
          line: 184,
          column: 23
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "89": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "90": {
        start: {
          line: 194,
          column: 36
        },
        end: {
          line: 194,
          column: 116
        }
      },
      "91": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "92": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 207,
          column: 17
        }
      },
      "93": {
        start: {
          line: 197,
          column: 36
        },
        end: {
          line: 197,
          column: 90
        }
      },
      "94": {
        start: {
          line: 198,
          column: 35
        },
        end: {
          line: 198,
          column: 82
        }
      },
      "95": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "96": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 200,
          column: 65
        }
      },
      "97": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 55
        }
      },
      "98": {
        start: {
          line: 202,
          column: 24
        },
        end: {
          line: 202,
          column: 51
        }
      },
      "99": {
        start: {
          line: 210,
          column: 30
        },
        end: {
          line: 210,
          column: 69
        }
      },
      "100": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "101": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 57
        }
      },
      "102": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 47
        }
      },
      "103": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 43
        }
      },
      "104": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "105": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 94
        }
      },
      "106": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 102
        }
      },
      "107": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 86
        }
      },
      "108": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 51
        }
      },
      "109": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 232,
          column: 15
        }
      },
      "110": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 26
        }
      },
      "111": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 119
        }
      },
      "112": {
        start: {
          line: 241,
          column: 24
        },
        end: {
          line: 245,
          column: 10
        }
      },
      "113": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 26
        }
      },
      "114": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 261,
          column: 11
        }
      },
      "115": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "116": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 43
        }
      },
      "117": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 259,
          column: 19
        }
      },
      "118": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 23
        }
      },
      "119": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 30
        }
      },
      "120": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 267,
          column: 69
        }
      },
      "121": {
        start: {
          line: 268,
          column: 30
        },
        end: {
          line: 268,
          column: 84
        }
      },
      "122": {
        start: {
          line: 268,
          column: 54
        },
        end: {
          line: 268,
          column: 76
        }
      },
      "123": {
        start: {
          line: 269,
          column: 31
        },
        end: {
          line: 269,
          column: 103
        }
      },
      "124": {
        start: {
          line: 269,
          column: 55
        },
        end: {
          line: 269,
          column: 95
        }
      },
      "125": {
        start: {
          line: 270,
          column: 29
        },
        end: {
          line: 271,
          column: 77
        }
      },
      "126": {
        start: {
          line: 271,
          column: 28
        },
        end: {
          line: 271,
          column: 73
        }
      },
      "127": {
        start: {
          line: 272,
          column: 40
        },
        end: {
          line: 272,
          column: 83
        }
      },
      "128": {
        start: {
          line: 274,
          column: 28
        },
        end: {
          line: 274,
          column: 31
        }
      },
      "129": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 54
        }
      },
      "130": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 72
        }
      },
      "131": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 73
        }
      },
      "132": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 45
        }
      },
      "133": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 51
        }
      },
      "134": {
        start: {
          line: 280,
          column: 28
        },
        end: {
          line: 282,
          column: 82
        }
      },
      "135": {
        start: {
          line: 284,
          column: 33
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "136": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 74
        }
      },
      "137": {
        start: {
          line: 291,
          column: 58
        },
        end: {
          line: 291,
          column: 66
        }
      },
      "138": {
        start: {
          line: 292,
          column: 32
        },
        end: {
          line: 292,
          column: 90
        }
      },
      "139": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 303,
          column: 10
        }
      },
      "140": {
        start: {
          line: 307,
          column: 22
        },
        end: {
          line: 307,
          column: 24
        }
      },
      "141": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "142": {
        start: {
          line: 309,
          column: 28
        },
        end: {
          line: 309,
          column: 90
        }
      },
      "143": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "144": {
        start: {
          line: 311,
          column: 33
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "145": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "146": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 313,
          column: 71
        }
      },
      "147": {
        start: {
          line: 315,
          column: 21
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "148": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 41
        }
      },
      "149": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 21
        }
      },
      "150": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 326,
          column: 25
        }
      },
      "151": {
        start: {
          line: 328,
          column: 25
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "152": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 381,
          column: 11
        }
      },
      "153": {
        start: {
          line: 367,
          column: 28
        },
        end: {
          line: 367,
          column: 56
        }
      },
      "154": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "155": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 379,
          column: 19
        }
      },
      "156": {
        start: {
          line: 370,
          column: 39
        },
        end: {
          line: 370,
          column: 102
        }
      },
      "157": {
        start: {
          line: 371,
          column: 20
        },
        end: {
          line: 378,
          column: 23
        }
      },
      "158": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 22
        }
      },
      "159": {
        start: {
          line: 385,
          column: 23
        },
        end: {
          line: 385,
          column: 25
        }
      },
      "160": {
        start: {
          line: 387,
          column: 25
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "161": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 422,
          column: 11
        }
      },
      "162": {
        start: {
          line: 408,
          column: 28
        },
        end: {
          line: 408,
          column: 56
        }
      },
      "163": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 421,
          column: 13
        }
      },
      "164": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 420,
          column: 19
        }
      },
      "165": {
        start: {
          line: 411,
          column: 39
        },
        end: {
          line: 411,
          column: 102
        }
      },
      "166": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 419,
          column: 23
        }
      },
      "167": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 22
        }
      },
      "168": {
        start: {
          line: 426,
          column: 23
        },
        end: {
          line: 426,
          column: 25
        }
      },
      "169": {
        start: {
          line: 428,
          column: 24
        },
        end: {
          line: 428,
          column: 35
        }
      },
      "170": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 443,
          column: 11
        }
      },
      "171": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "172": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 441,
          column: 17
        }
      },
      "173": {
        start: {
          line: 435,
          column: 20
        },
        end: {
          line: 440,
          column: 23
        }
      },
      "174": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 22
        }
      },
      "175": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 452,
          column: 32
        }
      },
      "176": {
        start: {
          line: 448,
          column: 31
        },
        end: {
          line: 448,
          column: 41
        }
      },
      "177": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 87
        }
      },
      "178": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 85
        }
      },
      "179": {
        start: {
          line: 450,
          column: 54
        },
        end: {
          line: 450,
          column: 83
        }
      },
      "180": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 115
        }
      },
      "181": {
        start: {
          line: 451,
          column: 83
        },
        end: {
          line: 451,
          column: 113
        }
      },
      "182": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 469,
          column: 57
        }
      },
      "183": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 468,
          column: 13
        }
      },
      "184": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 54
        }
      },
      "185": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 467,
          column: 19
        }
      },
      "186": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "187": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 45
        }
      },
      "188": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "189": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 53
        }
      },
      "190": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 34
        }
      },
      "191": {
        start: {
          line: 482,
          column: 0
        },
        end: {
          line: 482,
          column: 42
        }
      },
      "192": {
        start: {
          line: 483,
          column: 0
        },
        end: {
          line: 488,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 28
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 31
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 54,
            column: 55
          },
          end: {
            line: 54,
            column: 56
          }
        },
        loc: {
          start: {
            line: 54,
            column: 60
          },
          end: {
            line: 54,
            column: 91
          }
        },
        line: 54
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 55
          },
          end: {
            line: 57,
            column: 56
          }
        },
        loc: {
          start: {
            line: 57,
            column: 60
          },
          end: {
            line: 57,
            column: 83
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 60,
            column: 55
          },
          end: {
            line: 60,
            column: 56
          }
        },
        loc: {
          start: {
            line: 60,
            column: 60
          },
          end: {
            line: 60,
            column: 93
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 63,
            column: 55
          },
          end: {
            line: 63,
            column: 56
          }
        },
        loc: {
          start: {
            line: 63,
            column: 60
          },
          end: {
            line: 63,
            column: 88
          }
        },
        line: 63
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 69,
            column: 35
          },
          end: {
            line: 69,
            column: 36
          }
        },
        loc: {
          start: {
            line: 69,
            column: 45
          },
          end: {
            line: 69,
            column: 90
          }
        },
        line: 69
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 29
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 72
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 88,
            column: 47
          },
          end: {
            line: 88,
            column: 48
          }
        },
        loc: {
          start: {
            line: 88,
            column: 62
          },
          end: {
            line: 100,
            column: 21
          }
        },
        line: 88
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 21
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 138
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 154,
            column: 32
          }
        },
        loc: {
          start: {
            line: 154,
            column: 40
          },
          end: {
            line: 158,
            column: 17
          }
        },
        line: 154
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 31
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 183
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 199,
            column: 35
          },
          end: {
            line: 199,
            column: 36
          }
        },
        loc: {
          start: {
            line: 199,
            column: 44
          },
          end: {
            line: 203,
            column: 21
          }
        },
        line: 199
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 211,
            column: 30
          },
          end: {
            line: 211,
            column: 31
          }
        },
        loc: {
          start: {
            line: 211,
            column: 39
          },
          end: {
            line: 215,
            column: 13
          }
        },
        line: 211
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 37
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 240
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 247,
            column: 24
          },
          end: {
            line: 247,
            column: 25
          }
        },
        loc: {
          start: {
            line: 247,
            column: 43
          },
          end: {
            line: 261,
            column: 9
          }
        },
        line: 247
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 25
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 265
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 268,
            column: 49
          },
          end: {
            line: 268,
            column: 50
          }
        },
        loc: {
          start: {
            line: 268,
            column: 54
          },
          end: {
            line: 268,
            column: 76
          }
        },
        line: 268
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 269,
            column: 50
          },
          end: {
            line: 269,
            column: 51
          }
        },
        loc: {
          start: {
            line: 269,
            column: 55
          },
          end: {
            line: 269,
            column: 95
          }
        },
        line: 269
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 271,
            column: 18
          },
          end: {
            line: 271,
            column: 19
          }
        },
        loc: {
          start: {
            line: 271,
            column: 28
          },
          end: {
            line: 271,
            column: 73
          }
        },
        line: 271
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 291,
            column: 53
          },
          end: {
            line: 291,
            column: 54
          }
        },
        loc: {
          start: {
            line: 291,
            column: 58
          },
          end: {
            line: 291,
            column: 66
          }
        },
        line: 291
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 30
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 306
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 43
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 325
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 366,
            column: 25
          },
          end: {
            line: 366,
            column: 26
          }
        },
        loc: {
          start: {
            line: 366,
            column: 36
          },
          end: {
            line: 381,
            column: 9
          }
        },
        line: 366
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 369,
            column: 32
          },
          end: {
            line: 369,
            column: 33
          }
        },
        loc: {
          start: {
            line: 369,
            column: 50
          },
          end: {
            line: 379,
            column: 17
          }
        },
        line: 369
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 45
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 384
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 407,
            column: 25
          },
          end: {
            line: 407,
            column: 26
          }
        },
        loc: {
          start: {
            line: 407,
            column: 36
          },
          end: {
            line: 422,
            column: 9
          }
        },
        line: 407
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 410,
            column: 32
          },
          end: {
            line: 410,
            column: 33
          }
        },
        loc: {
          start: {
            line: 410,
            column: 41
          },
          end: {
            line: 420,
            column: 17
          }
        },
        line: 410
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 39
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 425
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 429,
            column: 37
          },
          end: {
            line: 429,
            column: 38
          }
        },
        loc: {
          start: {
            line: 429,
            column: 44
          },
          end: {
            line: 443,
            column: 9
          }
        },
        line: 429
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 24
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 446
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 447,
            column: 48
          },
          end: {
            line: 447,
            column: 49
          }
        },
        loc: {
          start: {
            line: 447,
            column: 54
          },
          end: {
            line: 452,
            column: 9
          }
        },
        line: 447
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 450,
            column: 45
          },
          end: {
            line: 450,
            column: 46
          }
        },
        loc: {
          start: {
            line: 450,
            column: 54
          },
          end: {
            line: 450,
            column: 83
          }
        },
        line: 450
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 451,
            column: 73
          },
          end: {
            line: 451,
            column: 74
          }
        },
        loc: {
          start: {
            line: 451,
            column: 83
          },
          end: {
            line: 451,
            column: 113
          }
        },
        line: 451
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 30
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 454
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 455,
            column: 40
          },
          end: {
            line: 455,
            column: 41
          }
        },
        loc: {
          start: {
            line: 455,
            column: 52
          },
          end: {
            line: 469,
            column: 9
          }
        },
        line: 455
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 14
          },
          end: {
            line: 480,
            column: 5
          }
        },
        line: 472
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 28
          }
        }],
        line: 15
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 20,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 20,
            column: 33
          }
        }],
        line: 20
      },
      "5": {
        loc: {
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 20,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 56
          },
          end: {
            line: 20,
            column: 58
          }
        }],
        line: 20
      },
      "6": {
        loc: {
          start: {
            line: 20,
            column: 60
          },
          end: {
            line: 20,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 82
          },
          end: {
            line: 20,
            column: 84
          }
        }],
        line: 20
      },
      "7": {
        loc: {
          start: {
            line: 20,
            column: 86
          },
          end: {
            line: 20,
            column: 117
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 113
          },
          end: {
            line: 20,
            column: 117
          }
        }],
        line: 20
      },
      "8": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "9": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "10": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "11": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "12": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "13": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "14": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "15": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "16": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "17": {
        loc: {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "18": {
        loc: {
          start: {
            line: 96,
            column: 35
          },
          end: {
            line: 96,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 35
          },
          end: {
            line: 96,
            column: 45
          }
        }, {
          start: {
            line: 96,
            column: 49
          },
          end: {
            line: 96,
            column: 72
          }
        }],
        line: 96
      },
      "19": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "20": {
        loc: {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "21": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "22": {
        loc: {
          start: {
            line: 117,
            column: 29
          },
          end: {
            line: 117,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 54
          },
          end: {
            line: 117,
            column: 67
          }
        }, {
          start: {
            line: 117,
            column: 70
          },
          end: {
            line: 117,
            column: 85
          }
        }],
        line: 117
      },
      "23": {
        loc: {
          start: {
            line: 123,
            column: 26
          },
          end: {
            line: 125,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 64
          },
          end: {
            line: 123,
            column: 74
          }
        }, {
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 125,
            column: 76
          }
        }],
        line: 123
      },
      "24": {
        loc: {
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 125,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 54
          },
          end: {
            line: 124,
            column: 60
          }
        }, {
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 125,
            column: 76
          }
        }],
        line: 124
      },
      "25": {
        loc: {
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 125,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 60
          },
          end: {
            line: 125,
            column: 68
          }
        }, {
          start: {
            line: 125,
            column: 71
          },
          end: {
            line: 125,
            column: 76
          }
        }],
        line: 125
      },
      "26": {
        loc: {
          start: {
            line: 135,
            column: 55
          },
          end: {
            line: 135,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 80
          },
          end: {
            line: 135,
            column: 93
          }
        }, {
          start: {
            line: 135,
            column: 96
          },
          end: {
            line: 135,
            column: 111
          }
        }],
        line: 135
      },
      "27": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "28": {
        loc: {
          start: {
            line: 168,
            column: 26
          },
          end: {
            line: 170,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 64
          },
          end: {
            line: 168,
            column: 74
          }
        }, {
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 170,
            column: 76
          }
        }],
        line: 168
      },
      "29": {
        loc: {
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 170,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 54
          },
          end: {
            line: 169,
            column: 60
          }
        }, {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 76
          }
        }],
        line: 169
      },
      "30": {
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 60
          },
          end: {
            line: 170,
            column: 68
          }
        }, {
          start: {
            line: 170,
            column: 71
          },
          end: {
            line: 170,
            column: 76
          }
        }],
        line: 170
      },
      "31": {
        loc: {
          start: {
            line: 180,
            column: 49
          },
          end: {
            line: 180,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 74
          },
          end: {
            line: 180,
            column: 87
          }
        }, {
          start: {
            line: 180,
            column: 90
          },
          end: {
            line: 180,
            column: 105
          }
        }],
        line: 180
      },
      "32": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "33": {
        loc: {
          start: {
            line: 224,
            column: 26
          },
          end: {
            line: 226,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 64
          },
          end: {
            line: 224,
            column: 74
          }
        }, {
          start: {
            line: 225,
            column: 20
          },
          end: {
            line: 226,
            column: 76
          }
        }],
        line: 224
      },
      "34": {
        loc: {
          start: {
            line: 225,
            column: 20
          },
          end: {
            line: 226,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 54
          },
          end: {
            line: 225,
            column: 60
          }
        }, {
          start: {
            line: 226,
            column: 24
          },
          end: {
            line: 226,
            column: 76
          }
        }],
        line: 225
      },
      "35": {
        loc: {
          start: {
            line: 226,
            column: 24
          },
          end: {
            line: 226,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 60
          },
          end: {
            line: 226,
            column: 68
          }
        }, {
          start: {
            line: 226,
            column: 71
          },
          end: {
            line: 226,
            column: 76
          }
        }],
        line: 226
      },
      "36": {
        loc: {
          start: {
            line: 236,
            column: 59
          },
          end: {
            line: 236,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 84
          },
          end: {
            line: 236,
            column: 97
          }
        }, {
          start: {
            line: 236,
            column: 100
          },
          end: {
            line: 236,
            column: 115
          }
        }],
        line: 236
      },
      "37": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: 251,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        }],
        line: 248
      },
      "38": {
        loc: {
          start: {
            line: 269,
            column: 55
          },
          end: {
            line: 269,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 55
          },
          end: {
            line: 269,
            column: 80
          }
        }, {
          start: {
            line: 269,
            column: 84
          },
          end: {
            line: 269,
            column: 95
          }
        }],
        line: 269
      },
      "39": {
        loc: {
          start: {
            line: 272,
            column: 40
          },
          end: {
            line: 272,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 40
          },
          end: {
            line: 272,
            column: 78
          }
        }, {
          start: {
            line: 272,
            column: 82
          },
          end: {
            line: 272,
            column: 83
          }
        }],
        line: 272
      },
      "40": {
        loc: {
          start: {
            line: 276,
            column: 26
          },
          end: {
            line: 276,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 26
          },
          end: {
            line: 276,
            column: 60
          }
        }, {
          start: {
            line: 276,
            column: 64
          },
          end: {
            line: 276,
            column: 65
          }
        }],
        line: 276
      },
      "41": {
        loc: {
          start: {
            line: 277,
            column: 26
          },
          end: {
            line: 277,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 26
          },
          end: {
            line: 277,
            column: 62
          }
        }, {
          start: {
            line: 277,
            column: 66
          },
          end: {
            line: 277,
            column: 67
          }
        }],
        line: 277
      },
      "42": {
        loc: {
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 282,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 80
          },
          end: {
            line: 280,
            column: 90
          }
        }, {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 282,
            column: 82
          }
        }],
        line: 280
      },
      "43": {
        loc: {
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 280,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 280,
            column: 55
          }
        }, {
          start: {
            line: 280,
            column: 59
          },
          end: {
            line: 280,
            column: 77
          }
        }],
        line: 280
      },
      "44": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 282,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 60
          },
          end: {
            line: 281,
            column: 66
          }
        }, {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 282,
            column: 82
          }
        }],
        line: 281
      },
      "45": {
        loc: {
          start: {
            line: 281,
            column: 13
          },
          end: {
            line: 281,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 13
          },
          end: {
            line: 281,
            column: 47
          }
        }, {
          start: {
            line: 281,
            column: 51
          },
          end: {
            line: 281,
            column: 52
          }
        }],
        line: 281
      },
      "46": {
        loc: {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 282,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 66
          },
          end: {
            line: 282,
            column: 74
          }
        }, {
          start: {
            line: 282,
            column: 77
          },
          end: {
            line: 282,
            column: 82
          }
        }],
        line: 282
      },
      "47": {
        loc: {
          start: {
            line: 282,
            column: 17
          },
          end: {
            line: 282,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 17
          },
          end: {
            line: 282,
            column: 53
          }
        }, {
          start: {
            line: 282,
            column: 57
          },
          end: {
            line: 282,
            column: 58
          }
        }],
        line: 282
      },
      "48": {
        loc: {
          start: {
            line: 289,
            column: 52
          },
          end: {
            line: 289,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 52
          },
          end: {
            line: 289,
            column: 90
          }
        }, {
          start: {
            line: 289,
            column: 94
          },
          end: {
            line: 289,
            column: 95
          }
        }],
        line: 289
      },
      "49": {
        loc: {
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        }, {
          start: {
            line: 315,
            column: 21
          },
          end: {
            line: 317,
            column: 17
          }
        }],
        line: 312
      },
      "50": {
        loc: {
          start: {
            line: 312,
            column: 20
          },
          end: {
            line: 312,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 20
          },
          end: {
            line: 312,
            column: 39
          }
        }, {
          start: {
            line: 312,
            column: 43
          },
          end: {
            line: 312,
            column: 70
          }
        }, {
          start: {
            line: 312,
            column: 74
          },
          end: {
            line: 312,
            column: 103
          }
        }],
        line: 312
      },
      "51": {
        loc: {
          start: {
            line: 315,
            column: 21
          },
          end: {
            line: 317,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 21
          },
          end: {
            line: 317,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "52": {
        loc: {
          start: {
            line: 315,
            column: 25
          },
          end: {
            line: 315,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 25
          },
          end: {
            line: 315,
            column: 39
          }
        }, {
          start: {
            line: 315,
            column: 44
          },
          end: {
            line: 315,
            column: 70
          }
        }, {
          start: {
            line: 315,
            column: 74
          },
          end: {
            line: 315,
            column: 100
          }
        }],
        line: 315
      },
      "53": {
        loc: {
          start: {
            line: 368,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "54": {
        loc: {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "55": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "56": {
        loc: {
          start: {
            line: 430,
            column: 16
          },
          end: {
            line: 432,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 16
          },
          end: {
            line: 430,
            column: 52
          }
        }, {
          start: {
            line: 431,
            column: 16
          },
          end: {
            line: 431,
            column: 54
          }
        }, {
          start: {
            line: 432,
            column: 16
          },
          end: {
            line: 432,
            column: 49
          }
        }],
        line: 430
      },
      "57": {
        loc: {
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 441,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 441,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      },
      "58": {
        loc: {
          start: {
            line: 434,
            column: 20
          },
          end: {
            line: 434,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 434,
            column: 20
          },
          end: {
            line: 434,
            column: 32
          }
        }, {
          start: {
            line: 434,
            column: 36
          },
          end: {
            line: 434,
            column: 59
          }
        }],
        line: 434
      },
      "59": {
        loc: {
          start: {
            line: 464,
            column: 56
          },
          end: {
            line: 464,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 464,
            column: 81
          },
          end: {
            line: 464,
            column: 94
          }
        }, {
          start: {
            line: 464,
            column: 97
          },
          end: {
            line: 464,
            column: 112
          }
        }],
        line: 464
      },
      "60": {
        loc: {
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "61": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 478,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 478,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0, 0],
      "51": [0, 0],
      "52": [0, 0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/security/SecurityMonitor.ts",
      mappings: ";;;;;;AAAA,iDAAqC;AACrC,+BAAiC;AACjC,2DAA6B;AAC7B,gDAAwB;AACxB,oDAA4B;AAC5B,mCAAsC;AAEtC,MAAM,SAAS,GAAG,IAAA,gBAAS,EAAC,oBAAI,CAAC,CAAC;AA4ClC,MAAa,eAAgB,SAAQ,qBAAY;IAM/C,YAAoB,UAKhB,EAAE;QACJ,KAAK,EAAE,CAAC;QANU,YAAO,GAAP,OAAO,CAKrB;QAVE,WAAM,GAAoB,EAAE,CAAC;QAC7B,yBAAoB,GAA0B,EAAE,CAAC;QAYvD,MAAM,EACJ,SAAS,GAAG,KAAK,EACjB,kBAAkB,GAAG,EAAE,EACvB,mBAAmB,GAAG,EAAE,EACxB,wBAAwB,GAAG,IAAI,EAChC,GAAG,OAAO,CAAC;QAEZ,IAAI,CAAC,OAAO,GAAG;YACb,SAAS;YACT,kBAAkB;YAClB,mBAAmB;YACnB,wBAAwB;SACzB,CAAC;QAEF,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,IAAI,wBAAwB,EAAE,CAAC;YAC7B,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACjC,CAAC;IACH,CAAC;IAED,4BAA4B;IAC5B,gBAAgB,CAAC,KAA8C;QAC7D,MAAM,aAAa,GAAkB;YACnC,EAAE,EAAE,gBAAM,CAAC,UAAU,EAAE;YACvB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,GAAG,KAAK;SACT,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QAE1C,8CAA8C;QAC9C,IAAI,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QAC5C,CAAC;QAED,uBAAuB;QACvB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAU,EAAE,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAU,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAED,iBAAiB,CAAC,OAMjB;QACC,IAAI,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACrB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC/E,CAAC;YACD,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;gBACjB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;YACvE,CAAC;YACD,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACjF,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,CAAC,KAAM,CAAC,CAAC;YAC7E,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;QAED,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;IACtF,CAAC;IAED,yBAAyB;IACzB,KAAK,CAAC,gBAAgB;QACpB,IAAI,CAAC;YACH,MAAM,MAAM,GAAwB;gBAClC,EAAE,EAAE,gBAAM,CAAC,UAAU,EAAE;gBACvB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,cAAc;gBACxB,eAAe,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;gBACtE,OAAO,EAAE,EAAE;gBACX,eAAe,EAAE,EAAE;aACpB,CAAC;YAEF,wCAAwC;YACxC,IAAI,CAAC;gBACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,SAAS,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBAC/E,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAEvC,IAAI,WAAW,CAAC,eAAe,EAAE,CAAC;oBAChC,MAAM,KAAK,GAAG,WAAW,CAAC,eAAe,CAAC;oBAE1C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;wBACvC,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;wBAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAE/B,MAAM,CAAC,eAAe,CAAC,QAA+C,CAAC,EAAE,CAAC;wBAC1E,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;wBAE/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;4BAClB,OAAO,EAAE,WAAW;4BACpB,QAAQ,EAAE,QAAQ;4BAClB,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,uBAAuB;4BAC5C,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,YAAY,EAAE,IAAI,CAAC,YAAY;yBAChC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,2BAA2B;gBAC3B,IAAI,MAAM,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC;oBACxC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;gBAC3F,CAAC;gBACD,IAAI,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;oBACpC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;gBACpG,CAAC;gBACD,IAAI,MAAM,CAAC,eAAe,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;oBACrC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;gBAC1F,CAAC;YAEH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,iDAAiD;gBACjD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;oBAClB,KAAK,EAAE,yBAAyB;oBAChC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;oBACjE,QAAQ,EAAE,uDAAuD;iBAClE,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;oBACnD,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;wBAC1C,MAAM,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;gBAC7D,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,oBAAoB;gBAC5B,OAAO,EAAE,8BAA8B,MAAM,CAAC,eAAe,CAAC,KAAK,wBAAwB;gBAC3F,OAAO,EAAE,MAAM;gBACf,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;QACzG,CAAC;IACH,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,MAAM,MAAM,GAAwB;YAClC,EAAE,EAAE,gBAAM,CAAC,UAAU,EAAE;YACvB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,QAAQ,EAAE,MAAM;YAChB,eAAe,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;YACtE,OAAO,EAAE,EAAE;YACX,eAAe,EAAE,EAAE;SACpB,CAAC;QAEF,IAAI,CAAC;YACH,sCAAsC;YACtC,MAAM,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAEjD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,OAAO,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACjD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAEvD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACrB,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,QAA+C,CAAC,EAAE,CAAC;oBAChF,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;oBAC/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACL,CAAC;YAED,2BAA2B;YAC3B,IAAI,MAAM,CAAC,eAAe,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;gBACrC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;gBACxF,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;gBAChF,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;YACvE,CAAC;YAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;oBACnD,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;wBAC1C,MAAM,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;gBAC7D,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,cAAc;gBACtB,OAAO,EAAE,wBAAwB,MAAM,CAAC,eAAe,CAAC,KAAK,eAAe;gBAC5E,OAAO,EAAE,MAAM;gBACf,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,qBAAqB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;QACnG,CAAC;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,MAAM,GAAwB;YAClC,EAAE,EAAE,gBAAM,CAAC,UAAU,EAAE;YACvB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,QAAQ,EAAE,gBAAgB;YAC1B,eAAe,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;YACtE,OAAO,EAAE,EAAE;YACX,eAAe,EAAE,EAAE;SACpB,CAAC;QAEF,IAAI,CAAC;YACH,wCAAwC;YACxC,MAAM,eAAe,GAAG,CAAC,YAAY,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,wBAAwB,CAAC,CAAC;YAEzG,KAAK,MAAM,UAAU,IAAI,eAAe,EAAE,CAAC;gBACzC,IAAI,CAAC;oBACH,MAAM,OAAO,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;oBACvD,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;oBAE/D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACrB,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,QAA+C,CAAC,EAAE,CAAC;wBAChF,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;wBAC/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC7B,CAAC,CAAC,CAAC;gBACL,CAAC;gBAAC,MAAM,CAAC;oBACP,2BAA2B;gBAC7B,CAAC;YACH,CAAC;YAED,kCAAkC;YAClC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAC1D,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACxB,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,QAA+C,CAAC,EAAE,CAAC;gBAChF,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;gBAC/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,2BAA2B;YAC3B,IAAI,MAAM,CAAC,eAAe,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;gBACrC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;gBAC9E,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;gBACtF,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;YACxE,CAAC;YAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;oBACnD,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;wBAC1C,MAAM,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;gBAC7D,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,wBAAwB;gBAChC,OAAO,EAAE,kCAAkC,MAAM,CAAC,eAAe,CAAC,KAAK,eAAe;gBACtF,OAAO,EAAE,MAAM;gBACf,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,+BAA+B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;QAC7G,CAAC;IACH,CAAC;IAED,8BAA8B;IAC9B,KAAK,CAAC,wBAAwB;QAC5B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;YACvC,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,kBAAkB,EAAE;SAC1B,CAAC,CAAC;QAEH,MAAM,OAAO,GAA0B,EAAE,CAAC;QAE1C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAChC,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;gBAClC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,gBAAgB,CAAC;oBACpB,QAAQ,EAAE,MAAM;oBAChB,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE,uBAAuB;oBAC/B,OAAO,EAAE,gBAAgB,MAAM,CAAC,MAAM,EAAE;oBACxC,OAAO,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE;oBACjC,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,mBAAmB;IACnB,kBAAkB;QAChB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAE9D,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC;QAC7E,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAEhG,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB;aAC3C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpE,MAAM,uBAAuB,GAAG,YAAY,EAAE,eAAe,CAAC,QAAQ,IAAI,CAAC,CAAC;QAE5E,mCAAmC;QACnC,IAAI,aAAa,GAAG,GAAG,CAAC;QACxB,aAAa,IAAI,uBAAuB,GAAG,EAAE,CAAC;QAC9C,aAAa,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;QAChE,aAAa,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACjE,aAAa,IAAI,cAAc,GAAG,EAAE,CAAC;QACrC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAE3C,MAAM,WAAW,GACf,uBAAuB,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YAChE,CAAC,YAAY,EAAE,eAAe,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBACxD,CAAC,YAAY,EAAE,eAAe,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;QAErE,oBAAoB;QACpB,MAAM,gBAAgB,GAAG;YACvB,EAAE,IAAI,EAAE,gCAAgC,EAAE,MAAM,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;YACxG,EAAE,IAAI,EAAE,wBAAwB,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;YAClF,EAAE,IAAI,EAAE,6BAA6B,EAAE,MAAM,EAAE,uBAAuB,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC9F,EAAE,IAAI,EAAE,sBAAsB,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,kCAAkC;YAClG,EAAE,IAAI,EAAE,qBAAqB,EAAE,MAAM,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC,QAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;SAC7G,CAAC;QAEF,MAAM,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;QACnE,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;QAEnF,OAAO;YACL,aAAa;YACb,uBAAuB;YACvB,aAAa;YACb,iBAAiB,EAAE,YAAY,EAAE,SAAS;YAC1C,WAAW;YACX,gBAAgB,EAAE;gBAChB,KAAK,EAAE,eAAe;gBACtB,MAAM,EAAE,gBAAgB;aACzB;SACF,CAAC;IACJ,CAAC;IAED,iBAAiB;IACT,KAAK,CAAC,cAAc,CAAC,GAAW;QACtC,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;YAE/D,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAC5B,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBAE5C,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;oBACxF,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrD,CAAC;qBAAM,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;oBACxF,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvB,CAAC;YACH,CAAC;QACH,CAAC;QAAC,MAAM,CAAC;YACP,2CAA2C;QAC7C,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,mBAAmB,CAAC,OAAe,EAAE,QAAgB;QAC3D,MAAM,MAAM,GAAU,EAAE,CAAC;QAEzB,6BAA6B;QAC7B,MAAM,QAAQ,GAAG;YACf;gBACE,KAAK,EAAE,YAAY;gBACnB,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,0EAA0E;gBACnF,IAAI,EAAE,gBAAgB;aACvB;YACD;gBACE,KAAK,EAAE,uBAAuB;gBAC9B,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,gEAAgE;gBACzE,IAAI,EAAE,KAAK;aACZ;YACD;gBACE,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAE,uEAAuE;gBAChF,IAAI,EAAE,KAAK;aACZ;YACD;gBACE,KAAK,EAAE,iCAAiC;gBACxC,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,4CAA4C;gBACrD,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,KAAK,EAAE,oCAAoC;gBAC3C,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,2CAA2C;gBACpD,IAAI,EAAE,SAAS;aAChB;YACD;gBACE,KAAK,EAAE,uBAAuB;gBAC9B,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,sDAAsD;gBAC/D,IAAI,EAAE,mBAAmB;aAC1B;SACF,CAAC;QAEF,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;oBAC/B,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;oBACnF,MAAM,CAAC,IAAI,CAAC;wBACV,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,OAAO,CAAC,QAAQ;wBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;wBAClB,OAAO,EAAE,OAAO,CAAC,OAAO;wBACxB,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE;qBACnB,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,qBAAqB,CAAC,OAAe,EAAE,QAAgB;QAC7D,MAAM,MAAM,GAAU,EAAE,CAAC;QAEzB,2BAA2B;QAC3B,MAAM,QAAQ,GAAG;YACf;gBACE,KAAK,EAAE,eAAe;gBACtB,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,0CAA0C;gBACnD,IAAI,EAAE,sBAAsB;aAC7B;YACD;gBACE,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAE,2DAA2D;gBACpE,IAAI,EAAE,kBAAkB;aACzB;YACD;gBACE,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,0CAA0C;gBACnD,IAAI,EAAE,sBAAsB;aAC7B;SACF,CAAC;QAEF,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACtB,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;oBACnF,MAAM,CAAC,IAAI,CAAC;wBACV,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,OAAO,CAAC,QAAQ;wBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;wBAClB,OAAO,EAAE,OAAO,CAAC,OAAO;wBACxB,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE;qBACnB,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,0BAA0B;QACtC,MAAM,MAAM,GAAU,EAAE,CAAC;QAEzB,0CAA0C;QAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACjC,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBACpC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACtC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBACtC,sDAAsD;gBACtD,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5C,MAAM,CAAC,IAAI,CAAC;wBACV,IAAI,EAAE,kBAAkB;wBACxB,QAAQ,EAAE,QAAQ;wBAClB,OAAO,EAAE,yBAAyB,GAAG,8BAA8B;wBACnE,QAAQ,EAAE,GAAG;qBACd,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,GAAG,EAAE;YAC3C,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAmB,CAAC,CAAC;YAE5E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC;YACzE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC;QACzG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,gBAAgB;IAC3C,CAAC;IAEO,uBAAuB;QAC7B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YACzC,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACxC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,gBAAgB,CAAC;oBACpB,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE,oBAAoB;oBAC5B,OAAO,EAAE,2BAA2B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE;oBAC9F,OAAO,EAAE,EAAE,KAAK,EAAE;oBAClB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,mBAAoB,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,oBAAoB;IACpB,OAAO;QACL,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC9B,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;CACF;AAniBD,0CAmiBC;AAEY,QAAA,eAAe,GAAG,IAAI,eAAe,CAAC;IACjD,SAAS,EAAE,KAAK;IAChB,kBAAkB,EAAE,EAAE;IACtB,mBAAmB,EAAE,EAAE;IACvB,wBAAwB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;CAChE,CAAC,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/security/SecurityMonitor.ts"],
      sourcesContent: ["import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\n\nconst execAsync = promisify(exec);\n\nexport interface SecurityEvent {\n  id: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'vulnerability' | 'intrusion' | 'authentication' | 'access' | 'malware';\n  source: string;\n  message: string;\n  details: any;\n  resolved: boolean;\n}\n\nexport interface VulnerabilityReport {\n  id: string;\n  timestamp: Date;\n  scanType: 'dependencies' | 'code' | 'docker' | 'infrastructure';\n  vulnerabilities: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    total: number;\n  };\n  details: any[];\n  recommendations: string[];\n}\n\nexport interface SecurityMetrics {\n  eventsLast24h: number;\n  criticalVulnerabilities: number;\n  securityScore: number;\n  lastScanTimestamp?: Date;\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  complianceStatus: {\n    score: number;\n    checks: {\n      name: string;\n      passed: boolean;\n      required: boolean;\n    }[];\n  };\n}\n\nexport class SecurityMonitor extends EventEmitter {\n  private events: SecurityEvent[] = [];\n  private vulnerabilityReports: VulnerabilityReport[] = [];\n  private scanInterval?: NodeJS.Timeout;\n  private eventCleanupInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    maxEvents?: number;\n    eventRetentionDays?: number;\n    scanIntervalMinutes?: number;\n    enableContinuousScanning?: boolean;\n  } = {}) {\n    super();\n    \n    const {\n      maxEvents = 10000,\n      eventRetentionDays = 30,\n      scanIntervalMinutes = 60,\n      enableContinuousScanning = true\n    } = options;\n\n    this.options = {\n      maxEvents,\n      eventRetentionDays,\n      scanIntervalMinutes,\n      enableContinuousScanning\n    };\n\n    this.setupEventCleanup();\n    \n    if (enableContinuousScanning) {\n      this.startContinuousScanning();\n    }\n  }\n\n  // Security Event Management\n  logSecurityEvent(event: Omit<SecurityEvent, 'id' | 'timestamp'>): void {\n    const securityEvent: SecurityEvent = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      ...event\n    };\n\n    this.events.push(securityEvent);\n    this.emit('securityEvent', securityEvent);\n\n    // Trigger immediate alert for critical events\n    if (event.severity === 'critical') {\n      this.emit('criticalAlert', securityEvent);\n    }\n\n    // Maintain event limit\n    if (this.events.length > this.options.maxEvents!) {\n      this.events = this.events.slice(-this.options.maxEvents!);\n    }\n  }\n\n  getSecurityEvents(filters?: {\n    severity?: SecurityEvent['severity'];\n    type?: SecurityEvent['type'];\n    source?: string;\n    since?: Date;\n    limit?: number;\n  }): SecurityEvent[] {\n    let filteredEvents = [...this.events];\n\n    if (filters) {\n      if (filters.severity) {\n        filteredEvents = filteredEvents.filter(e => e.severity === filters.severity);\n      }\n      if (filters.type) {\n        filteredEvents = filteredEvents.filter(e => e.type === filters.type);\n      }\n      if (filters.source) {\n        filteredEvents = filteredEvents.filter(e => e.source.includes(filters.source));\n      }\n      if (filters.since) {\n        filteredEvents = filteredEvents.filter(e => e.timestamp >= filters.since!);\n      }\n      if (filters.limit) {\n        filteredEvents = filteredEvents.slice(-filters.limit);\n      }\n    }\n\n    return filteredEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // Vulnerability Scanning\n  async scanDependencies(): Promise<VulnerabilityReport> {\n    try {\n      const report: VulnerabilityReport = {\n        id: crypto.randomUUID(),\n        timestamp: new Date(),\n        scanType: 'dependencies',\n        vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n        details: [],\n        recommendations: []\n      };\n\n      // Use npm audit for dependency scanning\n      try {\n        const { stdout } = await execAsync('npm audit --json', { cwd: process.cwd() });\n        const auditResult = JSON.parse(stdout);\n        \n        if (auditResult.vulnerabilities) {\n          const vulns = auditResult.vulnerabilities;\n          \n          Object.keys(vulns).forEach(packageName => {\n            const vuln = vulns[packageName];\n            const severity = vuln.severity;\n            \n            report.vulnerabilities[severity as keyof typeof report.vulnerabilities]++;\n            report.vulnerabilities.total++;\n            \n            report.details.push({\n              package: packageName,\n              severity: severity,\n              title: vuln.title || 'Unknown vulnerability',\n              range: vuln.range,\n              fixAvailable: vuln.fixAvailable\n            });\n          });\n        }\n\n        // Generate recommendations\n        if (report.vulnerabilities.critical > 0) {\n          report.recommendations.push('Immediately update packages with critical vulnerabilities');\n        }\n        if (report.vulnerabilities.high > 0) {\n          report.recommendations.push('Update packages with high severity vulnerabilities within 24 hours');\n        }\n        if (report.vulnerabilities.total > 0) {\n          report.recommendations.push('Run \"npm audit fix\" to automatically fix vulnerabilities');\n        }\n\n      } catch (error) {\n        // If npm audit fails, try alternative approaches\n        report.details.push({\n          error: 'Failed to run npm audit',\n          message: error instanceof Error ? error.message : 'Unknown error',\n          fallback: 'Consider using yarn audit or manual dependency review'\n        });\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'dependency-scanner',\n        message: `Dependency scan completed: ${report.vulnerabilities.total} vulnerabilities found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Dependency scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async scanCode(): Promise<VulnerabilityReport> {\n    const report: VulnerabilityReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      scanType: 'code',\n      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n      details: [],\n      recommendations: []\n    };\n\n    try {\n      // Basic static code analysis patterns\n      const srcPath = path.join(process.cwd(), 'src');\n      const files = await this.getSourceFiles(srcPath);\n      \n      for (const file of files) {\n        const content = await fs.readFile(file, 'utf-8');\n        const issues = this.analyzeCodeSecurity(content, file);\n        \n        issues.forEach(issue => {\n          report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n          report.vulnerabilities.total++;\n          report.details.push(issue);\n        });\n      }\n\n      // Generate recommendations\n      if (report.vulnerabilities.total > 0) {\n        report.recommendations.push('Review and fix identified security issues in source code');\n        report.recommendations.push('Consider implementing automated security linting');\n        report.recommendations.push('Perform regular security code reviews');\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'code-scanner',\n        message: `Code scan completed: ${report.vulnerabilities.total} issues found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Code scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async scanInfrastructure(): Promise<VulnerabilityReport> {\n    const report: VulnerabilityReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      scanType: 'infrastructure',\n      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n      details: [],\n      recommendations: []\n    };\n\n    try {\n      // Check Docker configuration if present\n      const dockerfilePaths = ['Dockerfile', 'Dockerfile.dev', 'docker-compose.yml', 'docker-compose.dev.yml'];\n      \n      for (const dockerFile of dockerfilePaths) {\n        try {\n          const content = await fs.readFile(dockerFile, 'utf-8');\n          const issues = this.analyzeDockerSecurity(content, dockerFile);\n          \n          issues.forEach(issue => {\n            report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n            report.vulnerabilities.total++;\n            report.details.push(issue);\n          });\n        } catch {\n          // File doesn't exist, skip\n        }\n      }\n\n      // Check environment configuration\n      const envIssues = await this.analyzeEnvironmentSecurity();\n      envIssues.forEach(issue => {\n        report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n        report.vulnerabilities.total++;\n        report.details.push(issue);\n      });\n\n      // Generate recommendations\n      if (report.vulnerabilities.total > 0) {\n        report.recommendations.push('Review and harden infrastructure configuration');\n        report.recommendations.push('Implement security best practices for containerization');\n        report.recommendations.push('Regular infrastructure security audits');\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'infrastructure-scanner',\n        message: `Infrastructure scan completed: ${report.vulnerabilities.total} issues found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Infrastructure scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Comprehensive security scan\n  async performComprehensiveScan(): Promise<VulnerabilityReport[]> {\n    const results = await Promise.allSettled([\n      this.scanDependencies(),\n      this.scanCode(),\n      this.scanInfrastructure()\n    ]);\n\n    const reports: VulnerabilityReport[] = [];\n    \n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        reports.push(result.value);\n      } else {\n        this.logSecurityEvent({\n          severity: 'high',\n          type: 'vulnerability',\n          source: 'comprehensive-scanner',\n          message: `Scan failed: ${result.reason}`,\n          details: { error: result.reason },\n          resolved: false\n        });\n      }\n    });\n\n    return reports;\n  }\n\n  // Security Metrics\n  getSecurityMetrics(): SecurityMetrics {\n    const now = new Date();\n    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    \n    const eventsLast24h = this.events.filter(e => e.timestamp >= last24h).length;\n    const criticalEvents = this.events.filter(e => e.severity === 'critical' && !e.resolved).length;\n    \n    const latestReport = this.vulnerabilityReports\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n    \n    const criticalVulnerabilities = latestReport?.vulnerabilities.critical || 0;\n    \n    // Calculate security score (0-100)\n    let securityScore = 100;\n    securityScore -= criticalVulnerabilities * 20;\n    securityScore -= (latestReport?.vulnerabilities.high || 0) * 10;\n    securityScore -= (latestReport?.vulnerabilities.medium || 0) * 5;\n    securityScore -= criticalEvents * 15;\n    securityScore = Math.max(0, securityScore);\n    \n    const threatLevel: SecurityMetrics['threatLevel'] = \n      criticalVulnerabilities > 0 || criticalEvents > 0 ? 'critical' :\n      (latestReport?.vulnerabilities.high || 0) > 0 ? 'high' :\n      (latestReport?.vulnerabilities.medium || 0) > 0 ? 'medium' : 'low';\n\n    // Compliance checks\n    const complianceChecks = [\n      { name: 'Regular vulnerability scanning', passed: this.vulnerabilityReports.length > 0, required: true },\n      { name: 'Security event logging', passed: this.events.length > 0, required: true },\n      { name: 'No critical vulnerabilities', passed: criticalVulnerabilities === 0, required: true },\n      { name: 'Environment security', passed: true, required: true }, // Would be determined by env scan\n      { name: 'Dependency security', passed: (latestReport?.vulnerabilities.critical || 0) === 0, required: true }\n    ];\n\n    const passedChecks = complianceChecks.filter(c => c.passed).length;\n    const complianceScore = Math.round((passedChecks / complianceChecks.length) * 100);\n\n    return {\n      eventsLast24h,\n      criticalVulnerabilities,\n      securityScore,\n      lastScanTimestamp: latestReport?.timestamp,\n      threatLevel,\n      complianceStatus: {\n        score: complianceScore,\n        checks: complianceChecks\n      }\n    };\n  }\n\n  // Helper methods\n  private async getSourceFiles(dir: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    try {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        \n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n          files.push(...await this.getSourceFiles(fullPath));\n        } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.js'))) {\n          files.push(fullPath);\n        }\n      }\n    } catch {\n      // Directory doesn't exist or can't be read\n    }\n    \n    return files;\n  }\n\n  private analyzeCodeSecurity(content: string, filename: string): any[] {\n    const issues: any[] = [];\n    \n    // Security patterns to check\n    const patterns = [\n      {\n        regex: /eval\\s*\\(/g,\n        severity: 'critical',\n        message: 'Use of eval() function detected - potential code injection vulnerability',\n        type: 'code-injection'\n      },\n      {\n        regex: /document\\.write\\s*\\(/g,\n        severity: 'high',\n        message: 'Use of document.write() detected - potential XSS vulnerability',\n        type: 'xss'\n      },\n      {\n        regex: /innerHTML\\s*=/g,\n        severity: 'medium',\n        message: 'Use of innerHTML detected - potential XSS vulnerability if user input',\n        type: 'xss'\n      },\n      {\n        regex: /password\\s*=\\s*[\"'][^\"']+[\"']/gi,\n        severity: 'critical',\n        message: 'Hardcoded password detected in source code',\n        type: 'secrets'\n      },\n      {\n        regex: /api[_-]?key\\s*=\\s*[\"'][^\"']+[\"']/gi,\n        severity: 'critical',\n        message: 'Hardcoded API key detected in source code',\n        type: 'secrets'\n      },\n      {\n        regex: /\\.(exec|system)\\s*\\(/g,\n        severity: 'high',\n        message: 'Command execution detected - ensure input validation',\n        type: 'command-injection'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        matches.forEach((match, index) => {\n          const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n          issues.push({\n            file: filename,\n            line: lineNumber,\n            severity: pattern.severity,\n            type: pattern.type,\n            message: pattern.message,\n            code: match.trim()\n          });\n        });\n      }\n    });\n    \n    return issues;\n  }\n\n  private analyzeDockerSecurity(content: string, filename: string): any[] {\n    const issues: any[] = [];\n    \n    // Docker security patterns\n    const patterns = [\n      {\n        regex: /USER\\s+root/gi,\n        severity: 'high',\n        message: 'Running as root user in Docker container',\n        type: 'privilege-escalation'\n      },\n      {\n        regex: /COPY\\s+.*\\s+\\//gi,\n        severity: 'medium',\n        message: 'Copying files to root directory - consider specific paths',\n        type: 'file-permissions'\n      },\n      {\n        regex: /--privileged/gi,\n        severity: 'critical',\n        message: 'Privileged mode detected - security risk',\n        type: 'privilege-escalation'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        matches.forEach(match => {\n          const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n          issues.push({\n            file: filename,\n            line: lineNumber,\n            severity: pattern.severity,\n            type: pattern.type,\n            message: pattern.message,\n            code: match.trim()\n          });\n        });\n      }\n    });\n    \n    return issues;\n  }\n\n  private async analyzeEnvironmentSecurity(): Promise<any[]> {\n    const issues: any[] = [];\n    \n    // Check for environment variable security\n    const envVars = process.env;\n    \n    Object.keys(envVars).forEach(key => {\n      if (key.toLowerCase().includes('secret') || \n          key.toLowerCase().includes('password') ||\n          key.toLowerCase().includes('key')) {\n        // Don't log actual values, just flag potential issues\n        if (envVars[key] && envVars[key].length < 8) {\n          issues.push({\n            type: 'weak-credentials',\n            severity: 'medium',\n            message: `Environment variable '${key}' appears to have weak value`,\n            variable: key\n          });\n        }\n      }\n    });\n    \n    return issues;\n  }\n\n  private setupEventCleanup(): void {\n    this.eventCleanupInterval = setInterval(() => {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - this.options.eventRetentionDays!);\n      \n      this.events = this.events.filter(event => event.timestamp >= cutoffDate);\n      this.vulnerabilityReports = this.vulnerabilityReports.filter(report => report.timestamp >= cutoffDate);\n    }, 24 * 60 * 60 * 1000); // Daily cleanup\n  }\n\n  private startContinuousScanning(): void {\n    this.scanInterval = setInterval(async () => {\n      try {\n        await this.performComprehensiveScan();\n      } catch (error) {\n        this.logSecurityEvent({\n          severity: 'medium',\n          type: 'vulnerability',\n          source: 'continuous-scanner',\n          message: `Continuous scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          details: { error },\n          resolved: false\n        });\n      }\n    }, this.options.scanIntervalMinutes! * 60 * 1000);\n  }\n\n  // Cleanup resources\n  destroy(): void {\n    if (this.scanInterval) {\n      clearInterval(this.scanInterval);\n    }\n    if (this.eventCleanupInterval) {\n      clearInterval(this.eventCleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n\nexport const securityMonitor = new SecurityMonitor({\n  maxEvents: 10000,\n  eventRetentionDays: 30,\n  scanIntervalMinutes: 60,\n  enableContinuousScanning: process.env.NODE_ENV === 'production'\n});"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1074cc02a27e713de25f86d2e20310d321edbdc1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_i3ndmct2y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_i3ndmct2y();
var __importDefault =
/* istanbul ignore next */
(cov_i3ndmct2y().s[0]++,
/* istanbul ignore next */
(cov_i3ndmct2y().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_i3ndmct2y().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_i3ndmct2y().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_i3ndmct2y().f[0]++;
  cov_i3ndmct2y().s[1]++;
  return /* istanbul ignore next */(cov_i3ndmct2y().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_i3ndmct2y().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_i3ndmct2y().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_i3ndmct2y().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_i3ndmct2y().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_i3ndmct2y().s[3]++;
exports.securityMonitor = exports.SecurityMonitor = void 0;
const child_process_1 =
/* istanbul ignore next */
(cov_i3ndmct2y().s[4]++, require("child_process"));
const util_1 =
/* istanbul ignore next */
(cov_i3ndmct2y().s[5]++, require("util"));
const promises_1 =
/* istanbul ignore next */
(cov_i3ndmct2y().s[6]++, __importDefault(require("fs/promises")));
const path_1 =
/* istanbul ignore next */
(cov_i3ndmct2y().s[7]++, __importDefault(require("path")));
const crypto_1 =
/* istanbul ignore next */
(cov_i3ndmct2y().s[8]++, __importDefault(require("crypto")));
const events_1 =
/* istanbul ignore next */
(cov_i3ndmct2y().s[9]++, require("events"));
const execAsync =
/* istanbul ignore next */
(cov_i3ndmct2y().s[10]++, (0, util_1.promisify)(child_process_1.exec));
class SecurityMonitor extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(options =
  /* istanbul ignore next */
  (cov_i3ndmct2y().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[1]++;
    cov_i3ndmct2y().s[11]++;
    super();
    /* istanbul ignore next */
    cov_i3ndmct2y().s[12]++;
    this.options = options;
    /* istanbul ignore next */
    cov_i3ndmct2y().s[13]++;
    this.events = [];
    /* istanbul ignore next */
    cov_i3ndmct2y().s[14]++;
    this.vulnerabilityReports = [];
    const {
      maxEvents =
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[4][0]++, 10000),
      eventRetentionDays =
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[5][0]++, 30),
      scanIntervalMinutes =
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[6][0]++, 60),
      enableContinuousScanning =
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[7][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[15]++, options);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[16]++;
    this.options = {
      maxEvents,
      eventRetentionDays,
      scanIntervalMinutes,
      enableContinuousScanning
    };
    /* istanbul ignore next */
    cov_i3ndmct2y().s[17]++;
    this.setupEventCleanup();
    /* istanbul ignore next */
    cov_i3ndmct2y().s[18]++;
    if (enableContinuousScanning) {
      /* istanbul ignore next */
      cov_i3ndmct2y().b[8][0]++;
      cov_i3ndmct2y().s[19]++;
      this.startContinuousScanning();
    } else
    /* istanbul ignore next */
    {
      cov_i3ndmct2y().b[8][1]++;
    }
  }
  // Security Event Management
  logSecurityEvent(event) {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[2]++;
    const securityEvent =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[20]++, {
      id: crypto_1.default.randomUUID(),
      timestamp: new Date(),
      ...event
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[21]++;
    this.events.push(securityEvent);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[22]++;
    this.emit('securityEvent', securityEvent);
    // Trigger immediate alert for critical events
    /* istanbul ignore next */
    cov_i3ndmct2y().s[23]++;
    if (event.severity === 'critical') {
      /* istanbul ignore next */
      cov_i3ndmct2y().b[9][0]++;
      cov_i3ndmct2y().s[24]++;
      this.emit('criticalAlert', securityEvent);
    } else
    /* istanbul ignore next */
    {
      cov_i3ndmct2y().b[9][1]++;
    }
    // Maintain event limit
    cov_i3ndmct2y().s[25]++;
    if (this.events.length > this.options.maxEvents) {
      /* istanbul ignore next */
      cov_i3ndmct2y().b[10][0]++;
      cov_i3ndmct2y().s[26]++;
      this.events = this.events.slice(-this.options.maxEvents);
    } else
    /* istanbul ignore next */
    {
      cov_i3ndmct2y().b[10][1]++;
    }
  }
  getSecurityEvents(filters) {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[3]++;
    let filteredEvents =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[27]++, [...this.events]);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[28]++;
    if (filters) {
      /* istanbul ignore next */
      cov_i3ndmct2y().b[11][0]++;
      cov_i3ndmct2y().s[29]++;
      if (filters.severity) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[12][0]++;
        cov_i3ndmct2y().s[30]++;
        filteredEvents = filteredEvents.filter(e => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[4]++;
          cov_i3ndmct2y().s[31]++;
          return e.severity === filters.severity;
        });
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[12][1]++;
      }
      cov_i3ndmct2y().s[32]++;
      if (filters.type) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[13][0]++;
        cov_i3ndmct2y().s[33]++;
        filteredEvents = filteredEvents.filter(e => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[5]++;
          cov_i3ndmct2y().s[34]++;
          return e.type === filters.type;
        });
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[13][1]++;
      }
      cov_i3ndmct2y().s[35]++;
      if (filters.source) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[14][0]++;
        cov_i3ndmct2y().s[36]++;
        filteredEvents = filteredEvents.filter(e => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[6]++;
          cov_i3ndmct2y().s[37]++;
          return e.source.includes(filters.source);
        });
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[14][1]++;
      }
      cov_i3ndmct2y().s[38]++;
      if (filters.since) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[15][0]++;
        cov_i3ndmct2y().s[39]++;
        filteredEvents = filteredEvents.filter(e => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[7]++;
          cov_i3ndmct2y().s[40]++;
          return e.timestamp >= filters.since;
        });
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[15][1]++;
      }
      cov_i3ndmct2y().s[41]++;
      if (filters.limit) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[16][0]++;
        cov_i3ndmct2y().s[42]++;
        filteredEvents = filteredEvents.slice(-filters.limit);
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[16][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_i3ndmct2y().b[11][1]++;
    }
    cov_i3ndmct2y().s[43]++;
    return filteredEvents.sort((a, b) => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[8]++;
      cov_i3ndmct2y().s[44]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
  }
  // Vulnerability Scanning
  async scanDependencies() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[9]++;
    cov_i3ndmct2y().s[45]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[46]++, {
        id: crypto_1.default.randomUUID(),
        timestamp: new Date(),
        scanType: 'dependencies',
        vulnerabilities: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
          total: 0
        },
        details: [],
        recommendations: []
      });
      // Use npm audit for dependency scanning
      /* istanbul ignore next */
      cov_i3ndmct2y().s[47]++;
      try {
        const {
          stdout
        } =
        /* istanbul ignore next */
        (cov_i3ndmct2y().s[48]++, await execAsync('npm audit --json', {
          cwd: process.cwd()
        }));
        const auditResult =
        /* istanbul ignore next */
        (cov_i3ndmct2y().s[49]++, JSON.parse(stdout));
        /* istanbul ignore next */
        cov_i3ndmct2y().s[50]++;
        if (auditResult.vulnerabilities) {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[17][0]++;
          const vulns =
          /* istanbul ignore next */
          (cov_i3ndmct2y().s[51]++, auditResult.vulnerabilities);
          /* istanbul ignore next */
          cov_i3ndmct2y().s[52]++;
          Object.keys(vulns).forEach(packageName => {
            /* istanbul ignore next */
            cov_i3ndmct2y().f[10]++;
            const vuln =
            /* istanbul ignore next */
            (cov_i3ndmct2y().s[53]++, vulns[packageName]);
            const severity =
            /* istanbul ignore next */
            (cov_i3ndmct2y().s[54]++, vuln.severity);
            /* istanbul ignore next */
            cov_i3ndmct2y().s[55]++;
            report.vulnerabilities[severity]++;
            /* istanbul ignore next */
            cov_i3ndmct2y().s[56]++;
            report.vulnerabilities.total++;
            /* istanbul ignore next */
            cov_i3ndmct2y().s[57]++;
            report.details.push({
              package: packageName,
              severity: severity,
              title:
              /* istanbul ignore next */
              (cov_i3ndmct2y().b[18][0]++, vuln.title) ||
              /* istanbul ignore next */
              (cov_i3ndmct2y().b[18][1]++, 'Unknown vulnerability'),
              range: vuln.range,
              fixAvailable: vuln.fixAvailable
            });
          });
        } else
        /* istanbul ignore next */
        {
          cov_i3ndmct2y().b[17][1]++;
        }
        // Generate recommendations
        cov_i3ndmct2y().s[58]++;
        if (report.vulnerabilities.critical > 0) {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[19][0]++;
          cov_i3ndmct2y().s[59]++;
          report.recommendations.push('Immediately update packages with critical vulnerabilities');
        } else
        /* istanbul ignore next */
        {
          cov_i3ndmct2y().b[19][1]++;
        }
        cov_i3ndmct2y().s[60]++;
        if (report.vulnerabilities.high > 0) {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[20][0]++;
          cov_i3ndmct2y().s[61]++;
          report.recommendations.push('Update packages with high severity vulnerabilities within 24 hours');
        } else
        /* istanbul ignore next */
        {
          cov_i3ndmct2y().b[20][1]++;
        }
        cov_i3ndmct2y().s[62]++;
        if (report.vulnerabilities.total > 0) {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[21][0]++;
          cov_i3ndmct2y().s[63]++;
          report.recommendations.push('Run "npm audit fix" to automatically fix vulnerabilities');
        } else
        /* istanbul ignore next */
        {
          cov_i3ndmct2y().b[21][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_i3ndmct2y().s[64]++;
        // If npm audit fails, try alternative approaches
        report.details.push({
          error: 'Failed to run npm audit',
          message: error instanceof Error ?
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[22][0]++, error.message) :
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[22][1]++, 'Unknown error'),
          fallback: 'Consider using yarn audit or manual dependency review'
        });
      }
      /* istanbul ignore next */
      cov_i3ndmct2y().s[65]++;
      this.vulnerabilityReports.push(report);
      /* istanbul ignore next */
      cov_i3ndmct2y().s[66]++;
      this.logSecurityEvent({
        severity: report.vulnerabilities.critical > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[23][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[23][1]++, report.vulnerabilities.high > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[24][0]++, 'high') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[24][1]++, report.vulnerabilities.medium > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[25][0]++, 'medium') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[25][1]++, 'low'))),
        type: 'vulnerability',
        source: 'dependency-scanner',
        message: `Dependency scan completed: ${report.vulnerabilities.total} vulnerabilities found`,
        details: report,
        resolved: false
      });
      /* istanbul ignore next */
      cov_i3ndmct2y().s[67]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_i3ndmct2y().s[68]++;
      throw new Error(`Dependency scan failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[26][1]++, 'Unknown error')}`);
    }
  }
  async scanCode() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[11]++;
    const report =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[69]++, {
      id: crypto_1.default.randomUUID(),
      timestamp: new Date(),
      scanType: 'code',
      vulnerabilities: {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        total: 0
      },
      details: [],
      recommendations: []
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[70]++;
    try {
      // Basic static code analysis patterns
      const srcPath =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[71]++, path_1.default.join(process.cwd(), 'src'));
      const files =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[72]++, await this.getSourceFiles(srcPath));
      /* istanbul ignore next */
      cov_i3ndmct2y().s[73]++;
      for (const file of files) {
        const content =
        /* istanbul ignore next */
        (cov_i3ndmct2y().s[74]++, await promises_1.default.readFile(file, 'utf-8'));
        const issues =
        /* istanbul ignore next */
        (cov_i3ndmct2y().s[75]++, this.analyzeCodeSecurity(content, file));
        /* istanbul ignore next */
        cov_i3ndmct2y().s[76]++;
        issues.forEach(issue => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[12]++;
          cov_i3ndmct2y().s[77]++;
          report.vulnerabilities[issue.severity]++;
          /* istanbul ignore next */
          cov_i3ndmct2y().s[78]++;
          report.vulnerabilities.total++;
          /* istanbul ignore next */
          cov_i3ndmct2y().s[79]++;
          report.details.push(issue);
        });
      }
      // Generate recommendations
      /* istanbul ignore next */
      cov_i3ndmct2y().s[80]++;
      if (report.vulnerabilities.total > 0) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[27][0]++;
        cov_i3ndmct2y().s[81]++;
        report.recommendations.push('Review and fix identified security issues in source code');
        /* istanbul ignore next */
        cov_i3ndmct2y().s[82]++;
        report.recommendations.push('Consider implementing automated security linting');
        /* istanbul ignore next */
        cov_i3ndmct2y().s[83]++;
        report.recommendations.push('Perform regular security code reviews');
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[27][1]++;
      }
      cov_i3ndmct2y().s[84]++;
      this.vulnerabilityReports.push(report);
      /* istanbul ignore next */
      cov_i3ndmct2y().s[85]++;
      this.logSecurityEvent({
        severity: report.vulnerabilities.critical > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[28][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[28][1]++, report.vulnerabilities.high > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[29][0]++, 'high') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[29][1]++, report.vulnerabilities.medium > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[30][0]++, 'medium') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[30][1]++, 'low'))),
        type: 'vulnerability',
        source: 'code-scanner',
        message: `Code scan completed: ${report.vulnerabilities.total} issues found`,
        details: report,
        resolved: false
      });
      /* istanbul ignore next */
      cov_i3ndmct2y().s[86]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_i3ndmct2y().s[87]++;
      throw new Error(`Code scan failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[31][0]++, error.message) :
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[31][1]++, 'Unknown error')}`);
    }
  }
  async scanInfrastructure() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[13]++;
    const report =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[88]++, {
      id: crypto_1.default.randomUUID(),
      timestamp: new Date(),
      scanType: 'infrastructure',
      vulnerabilities: {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        total: 0
      },
      details: [],
      recommendations: []
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[89]++;
    try {
      // Check Docker configuration if present
      const dockerfilePaths =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[90]++, ['Dockerfile', 'Dockerfile.dev', 'docker-compose.yml', 'docker-compose.dev.yml']);
      /* istanbul ignore next */
      cov_i3ndmct2y().s[91]++;
      for (const dockerFile of dockerfilePaths) {
        /* istanbul ignore next */
        cov_i3ndmct2y().s[92]++;
        try {
          const content =
          /* istanbul ignore next */
          (cov_i3ndmct2y().s[93]++, await promises_1.default.readFile(dockerFile, 'utf-8'));
          const issues =
          /* istanbul ignore next */
          (cov_i3ndmct2y().s[94]++, this.analyzeDockerSecurity(content, dockerFile));
          /* istanbul ignore next */
          cov_i3ndmct2y().s[95]++;
          issues.forEach(issue => {
            /* istanbul ignore next */
            cov_i3ndmct2y().f[14]++;
            cov_i3ndmct2y().s[96]++;
            report.vulnerabilities[issue.severity]++;
            /* istanbul ignore next */
            cov_i3ndmct2y().s[97]++;
            report.vulnerabilities.total++;
            /* istanbul ignore next */
            cov_i3ndmct2y().s[98]++;
            report.details.push(issue);
          });
        } catch {
          // File doesn't exist, skip
        }
      }
      // Check environment configuration
      const envIssues =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[99]++, await this.analyzeEnvironmentSecurity());
      /* istanbul ignore next */
      cov_i3ndmct2y().s[100]++;
      envIssues.forEach(issue => {
        /* istanbul ignore next */
        cov_i3ndmct2y().f[15]++;
        cov_i3ndmct2y().s[101]++;
        report.vulnerabilities[issue.severity]++;
        /* istanbul ignore next */
        cov_i3ndmct2y().s[102]++;
        report.vulnerabilities.total++;
        /* istanbul ignore next */
        cov_i3ndmct2y().s[103]++;
        report.details.push(issue);
      });
      // Generate recommendations
      /* istanbul ignore next */
      cov_i3ndmct2y().s[104]++;
      if (report.vulnerabilities.total > 0) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[32][0]++;
        cov_i3ndmct2y().s[105]++;
        report.recommendations.push('Review and harden infrastructure configuration');
        /* istanbul ignore next */
        cov_i3ndmct2y().s[106]++;
        report.recommendations.push('Implement security best practices for containerization');
        /* istanbul ignore next */
        cov_i3ndmct2y().s[107]++;
        report.recommendations.push('Regular infrastructure security audits');
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[32][1]++;
      }
      cov_i3ndmct2y().s[108]++;
      this.vulnerabilityReports.push(report);
      /* istanbul ignore next */
      cov_i3ndmct2y().s[109]++;
      this.logSecurityEvent({
        severity: report.vulnerabilities.critical > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[33][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[33][1]++, report.vulnerabilities.high > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[34][0]++, 'high') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[34][1]++, report.vulnerabilities.medium > 0 ?
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[35][0]++, 'medium') :
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[35][1]++, 'low'))),
        type: 'vulnerability',
        source: 'infrastructure-scanner',
        message: `Infrastructure scan completed: ${report.vulnerabilities.total} issues found`,
        details: report,
        resolved: false
      });
      /* istanbul ignore next */
      cov_i3ndmct2y().s[110]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_i3ndmct2y().s[111]++;
      throw new Error(`Infrastructure scan failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[36][0]++, error.message) :
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[36][1]++, 'Unknown error')}`);
    }
  }
  // Comprehensive security scan
  async performComprehensiveScan() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[16]++;
    const results =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[112]++, await Promise.allSettled([this.scanDependencies(), this.scanCode(), this.scanInfrastructure()]));
    const reports =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[113]++, []);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[114]++;
    results.forEach((result, index) => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[17]++;
      cov_i3ndmct2y().s[115]++;
      if (result.status === 'fulfilled') {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[37][0]++;
        cov_i3ndmct2y().s[116]++;
        reports.push(result.value);
      } else {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[37][1]++;
        cov_i3ndmct2y().s[117]++;
        this.logSecurityEvent({
          severity: 'high',
          type: 'vulnerability',
          source: 'comprehensive-scanner',
          message: `Scan failed: ${result.reason}`,
          details: {
            error: result.reason
          },
          resolved: false
        });
      }
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[118]++;
    return reports;
  }
  // Security Metrics
  getSecurityMetrics() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[18]++;
    const now =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[119]++, new Date());
    const last24h =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[120]++, new Date(now.getTime() - 24 * 60 * 60 * 1000));
    const eventsLast24h =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[121]++, this.events.filter(e => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[19]++;
      cov_i3ndmct2y().s[122]++;
      return e.timestamp >= last24h;
    }).length);
    const criticalEvents =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[123]++, this.events.filter(e => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[20]++;
      cov_i3ndmct2y().s[124]++;
      return /* istanbul ignore next */(cov_i3ndmct2y().b[38][0]++, e.severity === 'critical') &&
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[38][1]++, !e.resolved);
    }).length);
    const latestReport =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[125]++, this.vulnerabilityReports.sort((a, b) => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[21]++;
      cov_i3ndmct2y().s[126]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    })[0]);
    const criticalVulnerabilities =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[127]++,
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[39][0]++, latestReport?.vulnerabilities.critical) ||
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[39][1]++, 0));
    // Calculate security score (0-100)
    let securityScore =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[128]++, 100);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[129]++;
    securityScore -= criticalVulnerabilities * 20;
    /* istanbul ignore next */
    cov_i3ndmct2y().s[130]++;
    securityScore -= (
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[40][0]++, latestReport?.vulnerabilities.high) ||
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[40][1]++, 0)) * 10;
    /* istanbul ignore next */
    cov_i3ndmct2y().s[131]++;
    securityScore -= (
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[41][0]++, latestReport?.vulnerabilities.medium) ||
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[41][1]++, 0)) * 5;
    /* istanbul ignore next */
    cov_i3ndmct2y().s[132]++;
    securityScore -= criticalEvents * 15;
    /* istanbul ignore next */
    cov_i3ndmct2y().s[133]++;
    securityScore = Math.max(0, securityScore);
    const threatLevel =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[134]++,
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[43][0]++, criticalVulnerabilities > 0) ||
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[43][1]++, criticalEvents > 0) ?
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[42][0]++, 'critical') :
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[42][1]++, (
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[45][0]++, latestReport?.vulnerabilities.high) ||
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[45][1]++, 0)) > 0 ?
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[44][0]++, 'high') :
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[44][1]++, (
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[47][0]++, latestReport?.vulnerabilities.medium) ||
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[47][1]++, 0)) > 0 ?
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[46][0]++, 'medium') :
    /* istanbul ignore next */
    (cov_i3ndmct2y().b[46][1]++, 'low'))));
    // Compliance checks
    const complianceChecks =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[135]++, [{
      name: 'Regular vulnerability scanning',
      passed: this.vulnerabilityReports.length > 0,
      required: true
    }, {
      name: 'Security event logging',
      passed: this.events.length > 0,
      required: true
    }, {
      name: 'No critical vulnerabilities',
      passed: criticalVulnerabilities === 0,
      required: true
    }, {
      name: 'Environment security',
      passed: true,
      required: true
    },
    // Would be determined by env scan
    {
      name: 'Dependency security',
      passed: (
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[48][0]++, latestReport?.vulnerabilities.critical) ||
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[48][1]++, 0)) === 0,
      required: true
    }]);
    const passedChecks =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[136]++, complianceChecks.filter(c => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[22]++;
      cov_i3ndmct2y().s[137]++;
      return c.passed;
    }).length);
    const complianceScore =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[138]++, Math.round(passedChecks / complianceChecks.length * 100));
    /* istanbul ignore next */
    cov_i3ndmct2y().s[139]++;
    return {
      eventsLast24h,
      criticalVulnerabilities,
      securityScore,
      lastScanTimestamp: latestReport?.timestamp,
      threatLevel,
      complianceStatus: {
        score: complianceScore,
        checks: complianceChecks
      }
    };
  }
  // Helper methods
  async getSourceFiles(dir) {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[23]++;
    const files =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[140]++, []);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[141]++;
    try {
      const entries =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[142]++, await promises_1.default.readdir(dir, {
        withFileTypes: true
      }));
      /* istanbul ignore next */
      cov_i3ndmct2y().s[143]++;
      for (const entry of entries) {
        const fullPath =
        /* istanbul ignore next */
        (cov_i3ndmct2y().s[144]++, path_1.default.join(dir, entry.name));
        /* istanbul ignore next */
        cov_i3ndmct2y().s[145]++;
        if (
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[50][0]++, entry.isDirectory()) &&
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[50][1]++, !entry.name.startsWith('.')) &&
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[50][2]++, entry.name !== 'node_modules')) {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[49][0]++;
          cov_i3ndmct2y().s[146]++;
          files.push(...(await this.getSourceFiles(fullPath)));
        } else {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[49][1]++;
          cov_i3ndmct2y().s[147]++;
          if (
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[52][0]++, entry.isFile()) && (
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[52][1]++, entry.name.endsWith('.ts')) ||
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[52][2]++, entry.name.endsWith('.js')))) {
            /* istanbul ignore next */
            cov_i3ndmct2y().b[51][0]++;
            cov_i3ndmct2y().s[148]++;
            files.push(fullPath);
          } else
          /* istanbul ignore next */
          {
            cov_i3ndmct2y().b[51][1]++;
          }
        }
      }
    } catch {
      // Directory doesn't exist or can't be read
    }
    /* istanbul ignore next */
    cov_i3ndmct2y().s[149]++;
    return files;
  }
  analyzeCodeSecurity(content, filename) {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[24]++;
    const issues =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[150]++, []);
    // Security patterns to check
    const patterns =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[151]++, [{
      regex: /eval\s*\(/g,
      severity: 'critical',
      message: 'Use of eval() function detected - potential code injection vulnerability',
      type: 'code-injection'
    }, {
      regex: /document\.write\s*\(/g,
      severity: 'high',
      message: 'Use of document.write() detected - potential XSS vulnerability',
      type: 'xss'
    }, {
      regex: /innerHTML\s*=/g,
      severity: 'medium',
      message: 'Use of innerHTML detected - potential XSS vulnerability if user input',
      type: 'xss'
    }, {
      regex: /password\s*=\s*["'][^"']+["']/gi,
      severity: 'critical',
      message: 'Hardcoded password detected in source code',
      type: 'secrets'
    }, {
      regex: /api[_-]?key\s*=\s*["'][^"']+["']/gi,
      severity: 'critical',
      message: 'Hardcoded API key detected in source code',
      type: 'secrets'
    }, {
      regex: /\.(exec|system)\s*\(/g,
      severity: 'high',
      message: 'Command execution detected - ensure input validation',
      type: 'command-injection'
    }]);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[152]++;
    patterns.forEach(pattern => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[25]++;
      const matches =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[153]++, content.match(pattern.regex));
      /* istanbul ignore next */
      cov_i3ndmct2y().s[154]++;
      if (matches) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[53][0]++;
        cov_i3ndmct2y().s[155]++;
        matches.forEach((match, index) => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[26]++;
          const lineNumber =
          /* istanbul ignore next */
          (cov_i3ndmct2y().s[156]++, content.substring(0, content.indexOf(match)).split('\n').length);
          /* istanbul ignore next */
          cov_i3ndmct2y().s[157]++;
          issues.push({
            file: filename,
            line: lineNumber,
            severity: pattern.severity,
            type: pattern.type,
            message: pattern.message,
            code: match.trim()
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[53][1]++;
      }
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[158]++;
    return issues;
  }
  analyzeDockerSecurity(content, filename) {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[27]++;
    const issues =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[159]++, []);
    // Docker security patterns
    const patterns =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[160]++, [{
      regex: /USER\s+root/gi,
      severity: 'high',
      message: 'Running as root user in Docker container',
      type: 'privilege-escalation'
    }, {
      regex: /COPY\s+.*\s+\//gi,
      severity: 'medium',
      message: 'Copying files to root directory - consider specific paths',
      type: 'file-permissions'
    }, {
      regex: /--privileged/gi,
      severity: 'critical',
      message: 'Privileged mode detected - security risk',
      type: 'privilege-escalation'
    }]);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[161]++;
    patterns.forEach(pattern => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[28]++;
      const matches =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[162]++, content.match(pattern.regex));
      /* istanbul ignore next */
      cov_i3ndmct2y().s[163]++;
      if (matches) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[54][0]++;
        cov_i3ndmct2y().s[164]++;
        matches.forEach(match => {
          /* istanbul ignore next */
          cov_i3ndmct2y().f[29]++;
          const lineNumber =
          /* istanbul ignore next */
          (cov_i3ndmct2y().s[165]++, content.substring(0, content.indexOf(match)).split('\n').length);
          /* istanbul ignore next */
          cov_i3ndmct2y().s[166]++;
          issues.push({
            file: filename,
            line: lineNumber,
            severity: pattern.severity,
            type: pattern.type,
            message: pattern.message,
            code: match.trim()
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[54][1]++;
      }
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[167]++;
    return issues;
  }
  async analyzeEnvironmentSecurity() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[30]++;
    const issues =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[168]++, []);
    // Check for environment variable security
    const envVars =
    /* istanbul ignore next */
    (cov_i3ndmct2y().s[169]++, process.env);
    /* istanbul ignore next */
    cov_i3ndmct2y().s[170]++;
    Object.keys(envVars).forEach(key => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[31]++;
      cov_i3ndmct2y().s[171]++;
      if (
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[56][0]++, key.toLowerCase().includes('secret')) ||
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[56][1]++, key.toLowerCase().includes('password')) ||
      /* istanbul ignore next */
      (cov_i3ndmct2y().b[56][2]++, key.toLowerCase().includes('key'))) {
        /* istanbul ignore next */
        cov_i3ndmct2y().b[55][0]++;
        cov_i3ndmct2y().s[172]++;
        // Don't log actual values, just flag potential issues
        if (
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[58][0]++, envVars[key]) &&
        /* istanbul ignore next */
        (cov_i3ndmct2y().b[58][1]++, envVars[key].length < 8)) {
          /* istanbul ignore next */
          cov_i3ndmct2y().b[57][0]++;
          cov_i3ndmct2y().s[173]++;
          issues.push({
            type: 'weak-credentials',
            severity: 'medium',
            message: `Environment variable '${key}' appears to have weak value`,
            variable: key
          });
        } else
        /* istanbul ignore next */
        {
          cov_i3ndmct2y().b[57][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_i3ndmct2y().b[55][1]++;
      }
    });
    /* istanbul ignore next */
    cov_i3ndmct2y().s[174]++;
    return issues;
  }
  setupEventCleanup() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[32]++;
    cov_i3ndmct2y().s[175]++;
    this.eventCleanupInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[33]++;
      const cutoffDate =
      /* istanbul ignore next */
      (cov_i3ndmct2y().s[176]++, new Date());
      /* istanbul ignore next */
      cov_i3ndmct2y().s[177]++;
      cutoffDate.setDate(cutoffDate.getDate() - this.options.eventRetentionDays);
      /* istanbul ignore next */
      cov_i3ndmct2y().s[178]++;
      this.events = this.events.filter(event => {
        /* istanbul ignore next */
        cov_i3ndmct2y().f[34]++;
        cov_i3ndmct2y().s[179]++;
        return event.timestamp >= cutoffDate;
      });
      /* istanbul ignore next */
      cov_i3ndmct2y().s[180]++;
      this.vulnerabilityReports = this.vulnerabilityReports.filter(report => {
        /* istanbul ignore next */
        cov_i3ndmct2y().f[35]++;
        cov_i3ndmct2y().s[181]++;
        return report.timestamp >= cutoffDate;
      });
    }, 24 * 60 * 60 * 1000); // Daily cleanup
  }
  startContinuousScanning() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[36]++;
    cov_i3ndmct2y().s[182]++;
    this.scanInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_i3ndmct2y().f[37]++;
      cov_i3ndmct2y().s[183]++;
      try {
        /* istanbul ignore next */
        cov_i3ndmct2y().s[184]++;
        await this.performComprehensiveScan();
      } catch (error) {
        /* istanbul ignore next */
        cov_i3ndmct2y().s[185]++;
        this.logSecurityEvent({
          severity: 'medium',
          type: 'vulnerability',
          source: 'continuous-scanner',
          message: `Continuous scan failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[59][0]++, error.message) :
          /* istanbul ignore next */
          (cov_i3ndmct2y().b[59][1]++, 'Unknown error')}`,
          details: {
            error
          },
          resolved: false
        });
      }
    }, this.options.scanIntervalMinutes * 60 * 1000);
  }
  // Cleanup resources
  destroy() {
    /* istanbul ignore next */
    cov_i3ndmct2y().f[38]++;
    cov_i3ndmct2y().s[186]++;
    if (this.scanInterval) {
      /* istanbul ignore next */
      cov_i3ndmct2y().b[60][0]++;
      cov_i3ndmct2y().s[187]++;
      clearInterval(this.scanInterval);
    } else
    /* istanbul ignore next */
    {
      cov_i3ndmct2y().b[60][1]++;
    }
    cov_i3ndmct2y().s[188]++;
    if (this.eventCleanupInterval) {
      /* istanbul ignore next */
      cov_i3ndmct2y().b[61][0]++;
      cov_i3ndmct2y().s[189]++;
      clearInterval(this.eventCleanupInterval);
    } else
    /* istanbul ignore next */
    {
      cov_i3ndmct2y().b[61][1]++;
    }
    cov_i3ndmct2y().s[190]++;
    this.removeAllListeners();
  }
}
/* istanbul ignore next */
cov_i3ndmct2y().s[191]++;
exports.SecurityMonitor = SecurityMonitor;
/* istanbul ignore next */
cov_i3ndmct2y().s[192]++;
exports.securityMonitor = new SecurityMonitor({
  maxEvents: 10000,
  eventRetentionDays: 30,
  scanIntervalMinutes: 60,
  enableContinuousScanning: process.env.NODE_ENV === 'production'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfaTNuZG1jdDJ5IiwiYWN0dWFsQ292ZXJhZ2UiLCJjaGlsZF9wcm9jZXNzXzEiLCJzIiwicmVxdWlyZSIsInV0aWxfMSIsInByb21pc2VzXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJwYXRoXzEiLCJjcnlwdG9fMSIsImV2ZW50c18xIiwiZXhlY0FzeW5jIiwicHJvbWlzaWZ5IiwiZXhlYyIsIlNlY3VyaXR5TW9uaXRvciIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImIiLCJmIiwiZXZlbnRzIiwidnVsbmVyYWJpbGl0eVJlcG9ydHMiLCJtYXhFdmVudHMiLCJldmVudFJldGVudGlvbkRheXMiLCJzY2FuSW50ZXJ2YWxNaW51dGVzIiwiZW5hYmxlQ29udGludW91c1NjYW5uaW5nIiwic2V0dXBFdmVudENsZWFudXAiLCJzdGFydENvbnRpbnVvdXNTY2FubmluZyIsImxvZ1NlY3VyaXR5RXZlbnQiLCJldmVudCIsInNlY3VyaXR5RXZlbnQiLCJpZCIsImRlZmF1bHQiLCJyYW5kb21VVUlEIiwidGltZXN0YW1wIiwiRGF0ZSIsInB1c2giLCJlbWl0Iiwic2V2ZXJpdHkiLCJsZW5ndGgiLCJzbGljZSIsImdldFNlY3VyaXR5RXZlbnRzIiwiZmlsdGVycyIsImZpbHRlcmVkRXZlbnRzIiwiZmlsdGVyIiwiZSIsInR5cGUiLCJzb3VyY2UiLCJpbmNsdWRlcyIsInNpbmNlIiwibGltaXQiLCJzb3J0IiwiYSIsImdldFRpbWUiLCJzY2FuRGVwZW5kZW5jaWVzIiwicmVwb3J0Iiwic2NhblR5cGUiLCJ2dWxuZXJhYmlsaXRpZXMiLCJjcml0aWNhbCIsImhpZ2giLCJtZWRpdW0iLCJsb3ciLCJ0b3RhbCIsImRldGFpbHMiLCJyZWNvbW1lbmRhdGlvbnMiLCJzdGRvdXQiLCJjd2QiLCJwcm9jZXNzIiwiYXVkaXRSZXN1bHQiLCJKU09OIiwicGFyc2UiLCJ2dWxucyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicGFja2FnZU5hbWUiLCJ2dWxuIiwicGFja2FnZSIsInRpdGxlIiwicmFuZ2UiLCJmaXhBdmFpbGFibGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJFcnJvciIsImZhbGxiYWNrIiwicmVzb2x2ZWQiLCJzY2FuQ29kZSIsInNyY1BhdGgiLCJqb2luIiwiZmlsZXMiLCJnZXRTb3VyY2VGaWxlcyIsImZpbGUiLCJjb250ZW50IiwicmVhZEZpbGUiLCJpc3N1ZXMiLCJhbmFseXplQ29kZVNlY3VyaXR5IiwiaXNzdWUiLCJzY2FuSW5mcmFzdHJ1Y3R1cmUiLCJkb2NrZXJmaWxlUGF0aHMiLCJkb2NrZXJGaWxlIiwiYW5hbHl6ZURvY2tlclNlY3VyaXR5IiwiZW52SXNzdWVzIiwiYW5hbHl6ZUVudmlyb25tZW50U2VjdXJpdHkiLCJwZXJmb3JtQ29tcHJlaGVuc2l2ZVNjYW4iLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJyZXBvcnRzIiwicmVzdWx0IiwiaW5kZXgiLCJzdGF0dXMiLCJ2YWx1ZSIsInJlYXNvbiIsImdldFNlY3VyaXR5TWV0cmljcyIsIm5vdyIsImxhc3QyNGgiLCJldmVudHNMYXN0MjRoIiwiY3JpdGljYWxFdmVudHMiLCJsYXRlc3RSZXBvcnQiLCJjcml0aWNhbFZ1bG5lcmFiaWxpdGllcyIsInNlY3VyaXR5U2NvcmUiLCJNYXRoIiwibWF4IiwidGhyZWF0TGV2ZWwiLCJjb21wbGlhbmNlQ2hlY2tzIiwibmFtZSIsInBhc3NlZCIsInJlcXVpcmVkIiwicGFzc2VkQ2hlY2tzIiwiYyIsImNvbXBsaWFuY2VTY29yZSIsInJvdW5kIiwibGFzdFNjYW5UaW1lc3RhbXAiLCJjb21wbGlhbmNlU3RhdHVzIiwic2NvcmUiLCJjaGVja3MiLCJkaXIiLCJlbnRyaWVzIiwicmVhZGRpciIsIndpdGhGaWxlVHlwZXMiLCJlbnRyeSIsImZ1bGxQYXRoIiwiaXNEaXJlY3RvcnkiLCJzdGFydHNXaXRoIiwiaXNGaWxlIiwiZW5kc1dpdGgiLCJmaWxlbmFtZSIsInBhdHRlcm5zIiwicmVnZXgiLCJwYXR0ZXJuIiwibWF0Y2hlcyIsIm1hdGNoIiwibGluZU51bWJlciIsInN1YnN0cmluZyIsImluZGV4T2YiLCJzcGxpdCIsImxpbmUiLCJjb2RlIiwidHJpbSIsImVudlZhcnMiLCJlbnYiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInZhcmlhYmxlIiwiZXZlbnRDbGVhbnVwSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImN1dG9mZkRhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInNjYW5JbnRlcnZhbCIsImRlc3Ryb3kiLCJjbGVhckludGVydmFsIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZXhwb3J0cyIsInNlY3VyaXR5TW9uaXRvciIsIk5PREVfRU5WIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL3NlcnZpY2VzL3NlY3VyaXR5L1NlY3VyaXR5TW9uaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5cbmNvbnN0IGV4ZWNBc3luYyA9IHByb21pc2lmeShleGVjKTtcblxuZXhwb3J0IGludGVyZmFjZSBTZWN1cml0eUV2ZW50IHtcbiAgaWQ6IHN0cmluZztcbiAgdGltZXN0YW1wOiBEYXRlO1xuICBzZXZlcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCc7XG4gIHR5cGU6ICd2dWxuZXJhYmlsaXR5JyB8ICdpbnRydXNpb24nIHwgJ2F1dGhlbnRpY2F0aW9uJyB8ICdhY2Nlc3MnIHwgJ21hbHdhcmUnO1xuICBzb3VyY2U6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBkZXRhaWxzOiBhbnk7XG4gIHJlc29sdmVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZ1bG5lcmFiaWxpdHlSZXBvcnQge1xuICBpZDogc3RyaW5nO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIHNjYW5UeXBlOiAnZGVwZW5kZW5jaWVzJyB8ICdjb2RlJyB8ICdkb2NrZXInIHwgJ2luZnJhc3RydWN0dXJlJztcbiAgdnVsbmVyYWJpbGl0aWVzOiB7XG4gICAgY3JpdGljYWw6IG51bWJlcjtcbiAgICBoaWdoOiBudW1iZXI7XG4gICAgbWVkaXVtOiBudW1iZXI7XG4gICAgbG93OiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgfTtcbiAgZGV0YWlsczogYW55W107XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdXJpdHlNZXRyaWNzIHtcbiAgZXZlbnRzTGFzdDI0aDogbnVtYmVyO1xuICBjcml0aWNhbFZ1bG5lcmFiaWxpdGllczogbnVtYmVyO1xuICBzZWN1cml0eVNjb3JlOiBudW1iZXI7XG4gIGxhc3RTY2FuVGltZXN0YW1wPzogRGF0ZTtcbiAgdGhyZWF0TGV2ZWw6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAnY3JpdGljYWwnO1xuICBjb21wbGlhbmNlU3RhdHVzOiB7XG4gICAgc2NvcmU6IG51bWJlcjtcbiAgICBjaGVja3M6IHtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHBhc3NlZDogYm9vbGVhbjtcbiAgICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIH1bXTtcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFNlY3VyaXR5TW9uaXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHByaXZhdGUgZXZlbnRzOiBTZWN1cml0eUV2ZW50W10gPSBbXTtcbiAgcHJpdmF0ZSB2dWxuZXJhYmlsaXR5UmVwb3J0czogVnVsbmVyYWJpbGl0eVJlcG9ydFtdID0gW107XG4gIHByaXZhdGUgc2NhbkludGVydmFsPzogTm9kZUpTLlRpbWVvdXQ7XG4gIHByaXZhdGUgZXZlbnRDbGVhbnVwSW50ZXJ2YWw/OiBOb2RlSlMuVGltZW91dDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IHtcbiAgICBtYXhFdmVudHM/OiBudW1iZXI7XG4gICAgZXZlbnRSZXRlbnRpb25EYXlzPzogbnVtYmVyO1xuICAgIHNjYW5JbnRlcnZhbE1pbnV0ZXM/OiBudW1iZXI7XG4gICAgZW5hYmxlQ29udGludW91c1NjYW5uaW5nPzogYm9vbGVhbjtcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBcbiAgICBjb25zdCB7XG4gICAgICBtYXhFdmVudHMgPSAxMDAwMCxcbiAgICAgIGV2ZW50UmV0ZW50aW9uRGF5cyA9IDMwLFxuICAgICAgc2NhbkludGVydmFsTWludXRlcyA9IDYwLFxuICAgICAgZW5hYmxlQ29udGludW91c1NjYW5uaW5nID0gdHJ1ZVxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgbWF4RXZlbnRzLFxuICAgICAgZXZlbnRSZXRlbnRpb25EYXlzLFxuICAgICAgc2NhbkludGVydmFsTWludXRlcyxcbiAgICAgIGVuYWJsZUNvbnRpbnVvdXNTY2FubmluZ1xuICAgIH07XG5cbiAgICB0aGlzLnNldHVwRXZlbnRDbGVhbnVwKCk7XG4gICAgXG4gICAgaWYgKGVuYWJsZUNvbnRpbnVvdXNTY2FubmluZykge1xuICAgICAgdGhpcy5zdGFydENvbnRpbnVvdXNTY2FubmluZygpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNlY3VyaXR5IEV2ZW50IE1hbmFnZW1lbnRcbiAgbG9nU2VjdXJpdHlFdmVudChldmVudDogT21pdDxTZWN1cml0eUV2ZW50LCAnaWQnIHwgJ3RpbWVzdGFtcCc+KTogdm9pZCB7XG4gICAgY29uc3Qgc2VjdXJpdHlFdmVudDogU2VjdXJpdHlFdmVudCA9IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgLi4uZXZlbnRcbiAgICB9O1xuXG4gICAgdGhpcy5ldmVudHMucHVzaChzZWN1cml0eUV2ZW50KTtcbiAgICB0aGlzLmVtaXQoJ3NlY3VyaXR5RXZlbnQnLCBzZWN1cml0eUV2ZW50KTtcblxuICAgIC8vIFRyaWdnZXIgaW1tZWRpYXRlIGFsZXJ0IGZvciBjcml0aWNhbCBldmVudHNcbiAgICBpZiAoZXZlbnQuc2V2ZXJpdHkgPT09ICdjcml0aWNhbCcpIHtcbiAgICAgIHRoaXMuZW1pdCgnY3JpdGljYWxBbGVydCcsIHNlY3VyaXR5RXZlbnQpO1xuICAgIH1cblxuICAgIC8vIE1haW50YWluIGV2ZW50IGxpbWl0XG4gICAgaWYgKHRoaXMuZXZlbnRzLmxlbmd0aCA+IHRoaXMub3B0aW9ucy5tYXhFdmVudHMhKSB7XG4gICAgICB0aGlzLmV2ZW50cyA9IHRoaXMuZXZlbnRzLnNsaWNlKC10aGlzLm9wdGlvbnMubWF4RXZlbnRzISk7XG4gICAgfVxuICB9XG5cbiAgZ2V0U2VjdXJpdHlFdmVudHMoZmlsdGVycz86IHtcbiAgICBzZXZlcml0eT86IFNlY3VyaXR5RXZlbnRbJ3NldmVyaXR5J107XG4gICAgdHlwZT86IFNlY3VyaXR5RXZlbnRbJ3R5cGUnXTtcbiAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgc2luY2U/OiBEYXRlO1xuICAgIGxpbWl0PzogbnVtYmVyO1xuICB9KTogU2VjdXJpdHlFdmVudFtdIHtcbiAgICBsZXQgZmlsdGVyZWRFdmVudHMgPSBbLi4udGhpcy5ldmVudHNdO1xuXG4gICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgIGlmIChmaWx0ZXJzLnNldmVyaXR5KSB7XG4gICAgICAgIGZpbHRlcmVkRXZlbnRzID0gZmlsdGVyZWRFdmVudHMuZmlsdGVyKGUgPT4gZS5zZXZlcml0eSA9PT0gZmlsdGVycy5zZXZlcml0eSk7XG4gICAgICB9XG4gICAgICBpZiAoZmlsdGVycy50eXBlKSB7XG4gICAgICAgIGZpbHRlcmVkRXZlbnRzID0gZmlsdGVyZWRFdmVudHMuZmlsdGVyKGUgPT4gZS50eXBlID09PSBmaWx0ZXJzLnR5cGUpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbHRlcnMuc291cmNlKSB7XG4gICAgICAgIGZpbHRlcmVkRXZlbnRzID0gZmlsdGVyZWRFdmVudHMuZmlsdGVyKGUgPT4gZS5zb3VyY2UuaW5jbHVkZXMoZmlsdGVycy5zb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWx0ZXJzLnNpbmNlKSB7XG4gICAgICAgIGZpbHRlcmVkRXZlbnRzID0gZmlsdGVyZWRFdmVudHMuZmlsdGVyKGUgPT4gZS50aW1lc3RhbXAgPj0gZmlsdGVycy5zaW5jZSEpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbHRlcnMubGltaXQpIHtcbiAgICAgICAgZmlsdGVyZWRFdmVudHMgPSBmaWx0ZXJlZEV2ZW50cy5zbGljZSgtZmlsdGVycy5saW1pdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbHRlcmVkRXZlbnRzLnNvcnQoKGEsIGIpID0+IGIudGltZXN0YW1wLmdldFRpbWUoKSAtIGEudGltZXN0YW1wLmdldFRpbWUoKSk7XG4gIH1cblxuICAvLyBWdWxuZXJhYmlsaXR5IFNjYW5uaW5nXG4gIGFzeW5jIHNjYW5EZXBlbmRlbmNpZXMoKTogUHJvbWlzZTxWdWxuZXJhYmlsaXR5UmVwb3J0PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcG9ydDogVnVsbmVyYWJpbGl0eVJlcG9ydCA9IHtcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgc2NhblR5cGU6ICdkZXBlbmRlbmNpZXMnLFxuICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IHsgY3JpdGljYWw6IDAsIGhpZ2g6IDAsIG1lZGl1bTogMCwgbG93OiAwLCB0b3RhbDogMCB9LFxuICAgICAgICBkZXRhaWxzOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXVxuICAgICAgfTtcblxuICAgICAgLy8gVXNlIG5wbSBhdWRpdCBmb3IgZGVwZW5kZW5jeSBzY2FubmluZ1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBzdGRvdXQgfSA9IGF3YWl0IGV4ZWNBc3luYygnbnBtIGF1ZGl0IC0tanNvbicsIHsgY3dkOiBwcm9jZXNzLmN3ZCgpIH0pO1xuICAgICAgICBjb25zdCBhdWRpdFJlc3VsdCA9IEpTT04ucGFyc2Uoc3Rkb3V0KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhdWRpdFJlc3VsdC52dWxuZXJhYmlsaXRpZXMpIHtcbiAgICAgICAgICBjb25zdCB2dWxucyA9IGF1ZGl0UmVzdWx0LnZ1bG5lcmFiaWxpdGllcztcbiAgICAgICAgICBcbiAgICAgICAgICBPYmplY3Qua2V5cyh2dWxucykuZm9yRWFjaChwYWNrYWdlTmFtZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2dWxuID0gdnVsbnNbcGFja2FnZU5hbWVdO1xuICAgICAgICAgICAgY29uc3Qgc2V2ZXJpdHkgPSB2dWxuLnNldmVyaXR5O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXBvcnQudnVsbmVyYWJpbGl0aWVzW3NldmVyaXR5IGFzIGtleW9mIHR5cGVvZiByZXBvcnQudnVsbmVyYWJpbGl0aWVzXSsrO1xuICAgICAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllcy50b3RhbCsrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXBvcnQuZGV0YWlscy5wdXNoKHtcbiAgICAgICAgICAgICAgcGFja2FnZTogcGFja2FnZU5hbWUsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiBzZXZlcml0eSxcbiAgICAgICAgICAgICAgdGl0bGU6IHZ1bG4udGl0bGUgfHwgJ1Vua25vd24gdnVsbmVyYWJpbGl0eScsXG4gICAgICAgICAgICAgIHJhbmdlOiB2dWxuLnJhbmdlLFxuICAgICAgICAgICAgICBmaXhBdmFpbGFibGU6IHZ1bG4uZml4QXZhaWxhYmxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyYXRlIHJlY29tbWVuZGF0aW9uc1xuICAgICAgICBpZiAocmVwb3J0LnZ1bG5lcmFiaWxpdGllcy5jcml0aWNhbCA+IDApIHtcbiAgICAgICAgICByZXBvcnQucmVjb21tZW5kYXRpb25zLnB1c2goJ0ltbWVkaWF0ZWx5IHVwZGF0ZSBwYWNrYWdlcyB3aXRoIGNyaXRpY2FsIHZ1bG5lcmFiaWxpdGllcycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQudnVsbmVyYWJpbGl0aWVzLmhpZ2ggPiAwKSB7XG4gICAgICAgICAgcmVwb3J0LnJlY29tbWVuZGF0aW9ucy5wdXNoKCdVcGRhdGUgcGFja2FnZXMgd2l0aCBoaWdoIHNldmVyaXR5IHZ1bG5lcmFiaWxpdGllcyB3aXRoaW4gMjQgaG91cnMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0LnZ1bG5lcmFiaWxpdGllcy50b3RhbCA+IDApIHtcbiAgICAgICAgICByZXBvcnQucmVjb21tZW5kYXRpb25zLnB1c2goJ1J1biBcIm5wbSBhdWRpdCBmaXhcIiB0byBhdXRvbWF0aWNhbGx5IGZpeCB2dWxuZXJhYmlsaXRpZXMnKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiBucG0gYXVkaXQgZmFpbHMsIHRyeSBhbHRlcm5hdGl2ZSBhcHByb2FjaGVzXG4gICAgICAgIHJlcG9ydC5kZXRhaWxzLnB1c2goe1xuICAgICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIHJ1biBucG0gYXVkaXQnLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgIGZhbGxiYWNrOiAnQ29uc2lkZXIgdXNpbmcgeWFybiBhdWRpdCBvciBtYW51YWwgZGVwZW5kZW5jeSByZXZpZXcnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZ1bG5lcmFiaWxpdHlSZXBvcnRzLnB1c2gocmVwb3J0KTtcbiAgICAgIHRoaXMubG9nU2VjdXJpdHlFdmVudCh7XG4gICAgICAgIHNldmVyaXR5OiByZXBvcnQudnVsbmVyYWJpbGl0aWVzLmNyaXRpY2FsID4gMCA/ICdjcml0aWNhbCcgOiBcbiAgICAgICAgICAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllcy5oaWdoID4gMCA/ICdoaWdoJyA6XG4gICAgICAgICAgICAgICAgIHJlcG9ydC52dWxuZXJhYmlsaXRpZXMubWVkaXVtID4gMCA/ICdtZWRpdW0nIDogJ2xvdycsXG4gICAgICAgIHR5cGU6ICd2dWxuZXJhYmlsaXR5JyxcbiAgICAgICAgc291cmNlOiAnZGVwZW5kZW5jeS1zY2FubmVyJyxcbiAgICAgICAgbWVzc2FnZTogYERlcGVuZGVuY3kgc2NhbiBjb21wbGV0ZWQ6ICR7cmVwb3J0LnZ1bG5lcmFiaWxpdGllcy50b3RhbH0gdnVsbmVyYWJpbGl0aWVzIGZvdW5kYCxcbiAgICAgICAgZGV0YWlsczogcmVwb3J0LFxuICAgICAgICByZXNvbHZlZDogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVwb3J0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYERlcGVuZGVuY3kgc2NhbiBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2NhbkNvZGUoKTogUHJvbWlzZTxWdWxuZXJhYmlsaXR5UmVwb3J0PiB7XG4gICAgY29uc3QgcmVwb3J0OiBWdWxuZXJhYmlsaXR5UmVwb3J0ID0ge1xuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICBzY2FuVHlwZTogJ2NvZGUnLFxuICAgICAgdnVsbmVyYWJpbGl0aWVzOiB7IGNyaXRpY2FsOiAwLCBoaWdoOiAwLCBtZWRpdW06IDAsIGxvdzogMCwgdG90YWw6IDAgfSxcbiAgICAgIGRldGFpbHM6IFtdLFxuICAgICAgcmVjb21tZW5kYXRpb25zOiBbXVxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgLy8gQmFzaWMgc3RhdGljIGNvZGUgYW5hbHlzaXMgcGF0dGVybnNcbiAgICAgIGNvbnN0IHNyY1BhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3NyYycpO1xuICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmdldFNvdXJjZUZpbGVzKHNyY1BhdGgpO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGUsICd1dGYtOCcpO1xuICAgICAgICBjb25zdCBpc3N1ZXMgPSB0aGlzLmFuYWx5emVDb2RlU2VjdXJpdHkoY29udGVudCwgZmlsZSk7XG4gICAgICAgIFxuICAgICAgICBpc3N1ZXMuZm9yRWFjaChpc3N1ZSA9PiB7XG4gICAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllc1tpc3N1ZS5zZXZlcml0eSBhcyBrZXlvZiB0eXBlb2YgcmVwb3J0LnZ1bG5lcmFiaWxpdGllc10rKztcbiAgICAgICAgICByZXBvcnQudnVsbmVyYWJpbGl0aWVzLnRvdGFsKys7XG4gICAgICAgICAgcmVwb3J0LmRldGFpbHMucHVzaChpc3N1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvbnNcbiAgICAgIGlmIChyZXBvcnQudnVsbmVyYWJpbGl0aWVzLnRvdGFsID4gMCkge1xuICAgICAgICByZXBvcnQucmVjb21tZW5kYXRpb25zLnB1c2goJ1JldmlldyBhbmQgZml4IGlkZW50aWZpZWQgc2VjdXJpdHkgaXNzdWVzIGluIHNvdXJjZSBjb2RlJyk7XG4gICAgICAgIHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgaW1wbGVtZW50aW5nIGF1dG9tYXRlZCBzZWN1cml0eSBsaW50aW5nJyk7XG4gICAgICAgIHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMucHVzaCgnUGVyZm9ybSByZWd1bGFyIHNlY3VyaXR5IGNvZGUgcmV2aWV3cycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZ1bG5lcmFiaWxpdHlSZXBvcnRzLnB1c2gocmVwb3J0KTtcbiAgICAgIHRoaXMubG9nU2VjdXJpdHlFdmVudCh7XG4gICAgICAgIHNldmVyaXR5OiByZXBvcnQudnVsbmVyYWJpbGl0aWVzLmNyaXRpY2FsID4gMCA/ICdjcml0aWNhbCcgOiBcbiAgICAgICAgICAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllcy5oaWdoID4gMCA/ICdoaWdoJyA6XG4gICAgICAgICAgICAgICAgIHJlcG9ydC52dWxuZXJhYmlsaXRpZXMubWVkaXVtID4gMCA/ICdtZWRpdW0nIDogJ2xvdycsXG4gICAgICAgIHR5cGU6ICd2dWxuZXJhYmlsaXR5JyxcbiAgICAgICAgc291cmNlOiAnY29kZS1zY2FubmVyJyxcbiAgICAgICAgbWVzc2FnZTogYENvZGUgc2NhbiBjb21wbGV0ZWQ6ICR7cmVwb3J0LnZ1bG5lcmFiaWxpdGllcy50b3RhbH0gaXNzdWVzIGZvdW5kYCxcbiAgICAgICAgZGV0YWlsczogcmVwb3J0LFxuICAgICAgICByZXNvbHZlZDogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVwb3J0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGUgc2NhbiBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2NhbkluZnJhc3RydWN0dXJlKCk6IFByb21pc2U8VnVsbmVyYWJpbGl0eVJlcG9ydD4ge1xuICAgIGNvbnN0IHJlcG9ydDogVnVsbmVyYWJpbGl0eVJlcG9ydCA9IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgc2NhblR5cGU6ICdpbmZyYXN0cnVjdHVyZScsXG4gICAgICB2dWxuZXJhYmlsaXRpZXM6IHsgY3JpdGljYWw6IDAsIGhpZ2g6IDAsIG1lZGl1bTogMCwgbG93OiAwLCB0b3RhbDogMCB9LFxuICAgICAgZGV0YWlsczogW10sXG4gICAgICByZWNvbW1lbmRhdGlvbnM6IFtdXG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayBEb2NrZXIgY29uZmlndXJhdGlvbiBpZiBwcmVzZW50XG4gICAgICBjb25zdCBkb2NrZXJmaWxlUGF0aHMgPSBbJ0RvY2tlcmZpbGUnLCAnRG9ja2VyZmlsZS5kZXYnLCAnZG9ja2VyLWNvbXBvc2UueW1sJywgJ2RvY2tlci1jb21wb3NlLmRldi55bWwnXTtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBkb2NrZXJGaWxlIG9mIGRvY2tlcmZpbGVQYXRocykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShkb2NrZXJGaWxlLCAndXRmLTgnKTtcbiAgICAgICAgICBjb25zdCBpc3N1ZXMgPSB0aGlzLmFuYWx5emVEb2NrZXJTZWN1cml0eShjb250ZW50LCBkb2NrZXJGaWxlKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpc3N1ZXMuZm9yRWFjaChpc3N1ZSA9PiB7XG4gICAgICAgICAgICByZXBvcnQudnVsbmVyYWJpbGl0aWVzW2lzc3VlLnNldmVyaXR5IGFzIGtleW9mIHR5cGVvZiByZXBvcnQudnVsbmVyYWJpbGl0aWVzXSsrO1xuICAgICAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllcy50b3RhbCsrO1xuICAgICAgICAgICAgcmVwb3J0LmRldGFpbHMucHVzaChpc3N1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIC8vIEZpbGUgZG9lc24ndCBleGlzdCwgc2tpcFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25cbiAgICAgIGNvbnN0IGVudklzc3VlcyA9IGF3YWl0IHRoaXMuYW5hbHl6ZUVudmlyb25tZW50U2VjdXJpdHkoKTtcbiAgICAgIGVudklzc3Vlcy5mb3JFYWNoKGlzc3VlID0+IHtcbiAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllc1tpc3N1ZS5zZXZlcml0eSBhcyBrZXlvZiB0eXBlb2YgcmVwb3J0LnZ1bG5lcmFiaWxpdGllc10rKztcbiAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllcy50b3RhbCsrO1xuICAgICAgICByZXBvcnQuZGV0YWlscy5wdXNoKGlzc3VlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvbnNcbiAgICAgIGlmIChyZXBvcnQudnVsbmVyYWJpbGl0aWVzLnRvdGFsID4gMCkge1xuICAgICAgICByZXBvcnQucmVjb21tZW5kYXRpb25zLnB1c2goJ1JldmlldyBhbmQgaGFyZGVuIGluZnJhc3RydWN0dXJlIGNvbmZpZ3VyYXRpb24nKTtcbiAgICAgICAgcmVwb3J0LnJlY29tbWVuZGF0aW9ucy5wdXNoKCdJbXBsZW1lbnQgc2VjdXJpdHkgYmVzdCBwcmFjdGljZXMgZm9yIGNvbnRhaW5lcml6YXRpb24nKTtcbiAgICAgICAgcmVwb3J0LnJlY29tbWVuZGF0aW9ucy5wdXNoKCdSZWd1bGFyIGluZnJhc3RydWN0dXJlIHNlY3VyaXR5IGF1ZGl0cycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZ1bG5lcmFiaWxpdHlSZXBvcnRzLnB1c2gocmVwb3J0KTtcbiAgICAgIHRoaXMubG9nU2VjdXJpdHlFdmVudCh7XG4gICAgICAgIHNldmVyaXR5OiByZXBvcnQudnVsbmVyYWJpbGl0aWVzLmNyaXRpY2FsID4gMCA/ICdjcml0aWNhbCcgOiBcbiAgICAgICAgICAgICAgICAgcmVwb3J0LnZ1bG5lcmFiaWxpdGllcy5oaWdoID4gMCA/ICdoaWdoJyA6XG4gICAgICAgICAgICAgICAgIHJlcG9ydC52dWxuZXJhYmlsaXRpZXMubWVkaXVtID4gMCA/ICdtZWRpdW0nIDogJ2xvdycsXG4gICAgICAgIHR5cGU6ICd2dWxuZXJhYmlsaXR5JyxcbiAgICAgICAgc291cmNlOiAnaW5mcmFzdHJ1Y3R1cmUtc2Nhbm5lcicsXG4gICAgICAgIG1lc3NhZ2U6IGBJbmZyYXN0cnVjdHVyZSBzY2FuIGNvbXBsZXRlZDogJHtyZXBvcnQudnVsbmVyYWJpbGl0aWVzLnRvdGFsfSBpc3N1ZXMgZm91bmRgLFxuICAgICAgICBkZXRhaWxzOiByZXBvcnQsXG4gICAgICAgIHJlc29sdmVkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5mcmFzdHJ1Y3R1cmUgc2NhbiBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHJlaGVuc2l2ZSBzZWN1cml0eSBzY2FuXG4gIGFzeW5jIHBlcmZvcm1Db21wcmVoZW5zaXZlU2NhbigpOiBQcm9taXNlPFZ1bG5lcmFiaWxpdHlSZXBvcnRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoW1xuICAgICAgdGhpcy5zY2FuRGVwZW5kZW5jaWVzKCksXG4gICAgICB0aGlzLnNjYW5Db2RlKCksXG4gICAgICB0aGlzLnNjYW5JbmZyYXN0cnVjdHVyZSgpXG4gICAgXSk7XG5cbiAgICBjb25zdCByZXBvcnRzOiBWdWxuZXJhYmlsaXR5UmVwb3J0W10gPSBbXTtcbiAgICBcbiAgICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgICByZXBvcnRzLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nU2VjdXJpdHlFdmVudCh7XG4gICAgICAgICAgc2V2ZXJpdHk6ICdoaWdoJyxcbiAgICAgICAgICB0eXBlOiAndnVsbmVyYWJpbGl0eScsXG4gICAgICAgICAgc291cmNlOiAnY29tcHJlaGVuc2l2ZS1zY2FubmVyJyxcbiAgICAgICAgICBtZXNzYWdlOiBgU2NhbiBmYWlsZWQ6ICR7cmVzdWx0LnJlYXNvbn1gLFxuICAgICAgICAgIGRldGFpbHM6IHsgZXJyb3I6IHJlc3VsdC5yZWFzb24gfSxcbiAgICAgICAgICByZXNvbHZlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVwb3J0cztcbiAgfVxuXG4gIC8vIFNlY3VyaXR5IE1ldHJpY3NcbiAgZ2V0U2VjdXJpdHlNZXRyaWNzKCk6IFNlY3VyaXR5TWV0cmljcyB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBsYXN0MjRoID0gbmV3IERhdGUobm93LmdldFRpbWUoKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgIFxuICAgIGNvbnN0IGV2ZW50c0xhc3QyNGggPSB0aGlzLmV2ZW50cy5maWx0ZXIoZSA9PiBlLnRpbWVzdGFtcCA+PSBsYXN0MjRoKS5sZW5ndGg7XG4gICAgY29uc3QgY3JpdGljYWxFdmVudHMgPSB0aGlzLmV2ZW50cy5maWx0ZXIoZSA9PiBlLnNldmVyaXR5ID09PSAnY3JpdGljYWwnICYmICFlLnJlc29sdmVkKS5sZW5ndGg7XG4gICAgXG4gICAgY29uc3QgbGF0ZXN0UmVwb3J0ID0gdGhpcy52dWxuZXJhYmlsaXR5UmVwb3J0c1xuICAgICAgLnNvcnQoKGEsIGIpID0+IGIudGltZXN0YW1wLmdldFRpbWUoKSAtIGEudGltZXN0YW1wLmdldFRpbWUoKSlbMF07XG4gICAgXG4gICAgY29uc3QgY3JpdGljYWxWdWxuZXJhYmlsaXRpZXMgPSBsYXRlc3RSZXBvcnQ/LnZ1bG5lcmFiaWxpdGllcy5jcml0aWNhbCB8fCAwO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBzZWN1cml0eSBzY29yZSAoMC0xMDApXG4gICAgbGV0IHNlY3VyaXR5U2NvcmUgPSAxMDA7XG4gICAgc2VjdXJpdHlTY29yZSAtPSBjcml0aWNhbFZ1bG5lcmFiaWxpdGllcyAqIDIwO1xuICAgIHNlY3VyaXR5U2NvcmUgLT0gKGxhdGVzdFJlcG9ydD8udnVsbmVyYWJpbGl0aWVzLmhpZ2ggfHwgMCkgKiAxMDtcbiAgICBzZWN1cml0eVNjb3JlIC09IChsYXRlc3RSZXBvcnQ/LnZ1bG5lcmFiaWxpdGllcy5tZWRpdW0gfHwgMCkgKiA1O1xuICAgIHNlY3VyaXR5U2NvcmUgLT0gY3JpdGljYWxFdmVudHMgKiAxNTtcbiAgICBzZWN1cml0eVNjb3JlID0gTWF0aC5tYXgoMCwgc2VjdXJpdHlTY29yZSk7XG4gICAgXG4gICAgY29uc3QgdGhyZWF0TGV2ZWw6IFNlY3VyaXR5TWV0cmljc1sndGhyZWF0TGV2ZWwnXSA9IFxuICAgICAgY3JpdGljYWxWdWxuZXJhYmlsaXRpZXMgPiAwIHx8IGNyaXRpY2FsRXZlbnRzID4gMCA/ICdjcml0aWNhbCcgOlxuICAgICAgKGxhdGVzdFJlcG9ydD8udnVsbmVyYWJpbGl0aWVzLmhpZ2ggfHwgMCkgPiAwID8gJ2hpZ2gnIDpcbiAgICAgIChsYXRlc3RSZXBvcnQ/LnZ1bG5lcmFiaWxpdGllcy5tZWRpdW0gfHwgMCkgPiAwID8gJ21lZGl1bScgOiAnbG93JztcblxuICAgIC8vIENvbXBsaWFuY2UgY2hlY2tzXG4gICAgY29uc3QgY29tcGxpYW5jZUNoZWNrcyA9IFtcbiAgICAgIHsgbmFtZTogJ1JlZ3VsYXIgdnVsbmVyYWJpbGl0eSBzY2FubmluZycsIHBhc3NlZDogdGhpcy52dWxuZXJhYmlsaXR5UmVwb3J0cy5sZW5ndGggPiAwLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgeyBuYW1lOiAnU2VjdXJpdHkgZXZlbnQgbG9nZ2luZycsIHBhc3NlZDogdGhpcy5ldmVudHMubGVuZ3RoID4gMCwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgIHsgbmFtZTogJ05vIGNyaXRpY2FsIHZ1bG5lcmFiaWxpdGllcycsIHBhc3NlZDogY3JpdGljYWxWdWxuZXJhYmlsaXRpZXMgPT09IDAsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICB7IG5hbWU6ICdFbnZpcm9ubWVudCBzZWN1cml0eScsIHBhc3NlZDogdHJ1ZSwgcmVxdWlyZWQ6IHRydWUgfSwgLy8gV291bGQgYmUgZGV0ZXJtaW5lZCBieSBlbnYgc2NhblxuICAgICAgeyBuYW1lOiAnRGVwZW5kZW5jeSBzZWN1cml0eScsIHBhc3NlZDogKGxhdGVzdFJlcG9ydD8udnVsbmVyYWJpbGl0aWVzLmNyaXRpY2FsIHx8IDApID09PSAwLCByZXF1aXJlZDogdHJ1ZSB9XG4gICAgXTtcblxuICAgIGNvbnN0IHBhc3NlZENoZWNrcyA9IGNvbXBsaWFuY2VDaGVja3MuZmlsdGVyKGMgPT4gYy5wYXNzZWQpLmxlbmd0aDtcbiAgICBjb25zdCBjb21wbGlhbmNlU2NvcmUgPSBNYXRoLnJvdW5kKChwYXNzZWRDaGVja3MgLyBjb21wbGlhbmNlQ2hlY2tzLmxlbmd0aCkgKiAxMDApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50c0xhc3QyNGgsXG4gICAgICBjcml0aWNhbFZ1bG5lcmFiaWxpdGllcyxcbiAgICAgIHNlY3VyaXR5U2NvcmUsXG4gICAgICBsYXN0U2NhblRpbWVzdGFtcDogbGF0ZXN0UmVwb3J0Py50aW1lc3RhbXAsXG4gICAgICB0aHJlYXRMZXZlbCxcbiAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgc2NvcmU6IGNvbXBsaWFuY2VTY29yZSxcbiAgICAgICAgY2hlY2tzOiBjb21wbGlhbmNlQ2hlY2tzXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEhlbHBlciBtZXRob2RzXG4gIHByaXZhdGUgYXN5bmMgZ2V0U291cmNlRmlsZXMoZGlyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBhd2FpdCBmcy5yZWFkZGlyKGRpciwgeyB3aXRoRmlsZVR5cGVzOiB0cnVlIH0pO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyLCBlbnRyeS5uYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSgpICYmICFlbnRyeS5uYW1lLnN0YXJ0c1dpdGgoJy4nKSAmJiBlbnRyeS5uYW1lICE9PSAnbm9kZV9tb2R1bGVzJykge1xuICAgICAgICAgIGZpbGVzLnB1c2goLi4uYXdhaXQgdGhpcy5nZXRTb3VyY2VGaWxlcyhmdWxsUGF0aCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGVudHJ5LmlzRmlsZSgpICYmIChlbnRyeS5uYW1lLmVuZHNXaXRoKCcudHMnKSB8fCBlbnRyeS5uYW1lLmVuZHNXaXRoKCcuanMnKSkpIHtcbiAgICAgICAgICBmaWxlcy5wdXNoKGZ1bGxQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gRGlyZWN0b3J5IGRvZXNuJ3QgZXhpc3Qgb3IgY2FuJ3QgYmUgcmVhZFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmlsZXM7XG4gIH1cblxuICBwcml2YXRlIGFuYWx5emVDb2RlU2VjdXJpdHkoY29udGVudDogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogYW55W10ge1xuICAgIGNvbnN0IGlzc3VlczogYW55W10gPSBbXTtcbiAgICBcbiAgICAvLyBTZWN1cml0eSBwYXR0ZXJucyB0byBjaGVja1xuICAgIGNvbnN0IHBhdHRlcm5zID0gW1xuICAgICAge1xuICAgICAgICByZWdleDogL2V2YWxcXHMqXFwoL2csXG4gICAgICAgIHNldmVyaXR5OiAnY3JpdGljYWwnLFxuICAgICAgICBtZXNzYWdlOiAnVXNlIG9mIGV2YWwoKSBmdW5jdGlvbiBkZXRlY3RlZCAtIHBvdGVudGlhbCBjb2RlIGluamVjdGlvbiB2dWxuZXJhYmlsaXR5JyxcbiAgICAgICAgdHlwZTogJ2NvZGUtaW5qZWN0aW9uJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9kb2N1bWVudFxcLndyaXRlXFxzKlxcKC9nLFxuICAgICAgICBzZXZlcml0eTogJ2hpZ2gnLFxuICAgICAgICBtZXNzYWdlOiAnVXNlIG9mIGRvY3VtZW50LndyaXRlKCkgZGV0ZWN0ZWQgLSBwb3RlbnRpYWwgWFNTIHZ1bG5lcmFiaWxpdHknLFxuICAgICAgICB0eXBlOiAneHNzJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9pbm5lckhUTUxcXHMqPS9nLFxuICAgICAgICBzZXZlcml0eTogJ21lZGl1bScsXG4gICAgICAgIG1lc3NhZ2U6ICdVc2Ugb2YgaW5uZXJIVE1MIGRldGVjdGVkIC0gcG90ZW50aWFsIFhTUyB2dWxuZXJhYmlsaXR5IGlmIHVzZXIgaW5wdXQnLFxuICAgICAgICB0eXBlOiAneHNzJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9wYXNzd29yZFxccyo9XFxzKltcIiddW15cIiddK1tcIiddL2dpLFxuICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyxcbiAgICAgICAgbWVzc2FnZTogJ0hhcmRjb2RlZCBwYXNzd29yZCBkZXRlY3RlZCBpbiBzb3VyY2UgY29kZScsXG4gICAgICAgIHR5cGU6ICdzZWNyZXRzJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9hcGlbXy1dP2tleVxccyo9XFxzKltcIiddW15cIiddK1tcIiddL2dpLFxuICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyxcbiAgICAgICAgbWVzc2FnZTogJ0hhcmRjb2RlZCBBUEkga2V5IGRldGVjdGVkIGluIHNvdXJjZSBjb2RlJyxcbiAgICAgICAgdHlwZTogJ3NlY3JldHMnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZWdleDogL1xcLihleGVjfHN5c3RlbSlcXHMqXFwoL2csXG4gICAgICAgIHNldmVyaXR5OiAnaGlnaCcsXG4gICAgICAgIG1lc3NhZ2U6ICdDb21tYW5kIGV4ZWN1dGlvbiBkZXRlY3RlZCAtIGVuc3VyZSBpbnB1dCB2YWxpZGF0aW9uJyxcbiAgICAgICAgdHlwZTogJ2NvbW1hbmQtaW5qZWN0aW9uJ1xuICAgICAgfVxuICAgIF07XG4gICAgXG4gICAgcGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKHBhdHRlcm4ucmVnZXgpO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gY29udGVudC5zdWJzdHJpbmcoMCwgY29udGVudC5pbmRleE9mKG1hdGNoKSkuc3BsaXQoJ1xcbicpLmxlbmd0aDtcbiAgICAgICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlOiBmaWxlbmFtZSxcbiAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBzZXZlcml0eTogcGF0dGVybi5zZXZlcml0eSxcbiAgICAgICAgICAgIHR5cGU6IHBhdHRlcm4udHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHBhdHRlcm4ubWVzc2FnZSxcbiAgICAgICAgICAgIGNvZGU6IG1hdGNoLnRyaW0oKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gaXNzdWVzO1xuICB9XG5cbiAgcHJpdmF0ZSBhbmFseXplRG9ja2VyU2VjdXJpdHkoY29udGVudDogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogYW55W10ge1xuICAgIGNvbnN0IGlzc3VlczogYW55W10gPSBbXTtcbiAgICBcbiAgICAvLyBEb2NrZXIgc2VjdXJpdHkgcGF0dGVybnNcbiAgICBjb25zdCBwYXR0ZXJucyA9IFtcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9VU0VSXFxzK3Jvb3QvZ2ksXG4gICAgICAgIHNldmVyaXR5OiAnaGlnaCcsXG4gICAgICAgIG1lc3NhZ2U6ICdSdW5uaW5nIGFzIHJvb3QgdXNlciBpbiBEb2NrZXIgY29udGFpbmVyJyxcbiAgICAgICAgdHlwZTogJ3ByaXZpbGVnZS1lc2NhbGF0aW9uJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcmVnZXg6IC9DT1BZXFxzKy4qXFxzK1xcLy9naSxcbiAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxuICAgICAgICBtZXNzYWdlOiAnQ29weWluZyBmaWxlcyB0byByb290IGRpcmVjdG9yeSAtIGNvbnNpZGVyIHNwZWNpZmljIHBhdGhzJyxcbiAgICAgICAgdHlwZTogJ2ZpbGUtcGVybWlzc2lvbnMnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZWdleDogLy0tcHJpdmlsZWdlZC9naSxcbiAgICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCcsXG4gICAgICAgIG1lc3NhZ2U6ICdQcml2aWxlZ2VkIG1vZGUgZGV0ZWN0ZWQgLSBzZWN1cml0eSByaXNrJyxcbiAgICAgICAgdHlwZTogJ3ByaXZpbGVnZS1lc2NhbGF0aW9uJ1xuICAgICAgfVxuICAgIF07XG4gICAgXG4gICAgcGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKHBhdHRlcm4ucmVnZXgpO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gY29udGVudC5zdWJzdHJpbmcoMCwgY29udGVudC5pbmRleE9mKG1hdGNoKSkuc3BsaXQoJ1xcbicpLmxlbmd0aDtcbiAgICAgICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlOiBmaWxlbmFtZSxcbiAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBzZXZlcml0eTogcGF0dGVybi5zZXZlcml0eSxcbiAgICAgICAgICAgIHR5cGU6IHBhdHRlcm4udHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHBhdHRlcm4ubWVzc2FnZSxcbiAgICAgICAgICAgIGNvZGU6IG1hdGNoLnRyaW0oKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gaXNzdWVzO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplRW52aXJvbm1lbnRTZWN1cml0eSgpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgY29uc3QgaXNzdWVzOiBhbnlbXSA9IFtdO1xuICAgIFxuICAgIC8vIENoZWNrIGZvciBlbnZpcm9ubWVudCB2YXJpYWJsZSBzZWN1cml0eVxuICAgIGNvbnN0IGVudlZhcnMgPSBwcm9jZXNzLmVudjtcbiAgICBcbiAgICBPYmplY3Qua2V5cyhlbnZWYXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3NlY3JldCcpIHx8IFxuICAgICAgICAgIGtleS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdwYXNzd29yZCcpIHx8XG4gICAgICAgICAga2V5LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2tleScpKSB7XG4gICAgICAgIC8vIERvbid0IGxvZyBhY3R1YWwgdmFsdWVzLCBqdXN0IGZsYWcgcG90ZW50aWFsIGlzc3Vlc1xuICAgICAgICBpZiAoZW52VmFyc1trZXldICYmIGVudlZhcnNba2V5XS5sZW5ndGggPCA4KSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3dlYWstY3JlZGVudGlhbHMnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgICAgbWVzc2FnZTogYEVudmlyb25tZW50IHZhcmlhYmxlICcke2tleX0nIGFwcGVhcnMgdG8gaGF2ZSB3ZWFrIHZhbHVlYCxcbiAgICAgICAgICAgIHZhcmlhYmxlOiBrZXlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBpc3N1ZXM7XG4gIH1cblxuICBwcml2YXRlIHNldHVwRXZlbnRDbGVhbnVwKCk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRDbGVhbnVwSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBjdXRvZmZEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGN1dG9mZkRhdGUuc2V0RGF0ZShjdXRvZmZEYXRlLmdldERhdGUoKSAtIHRoaXMub3B0aW9ucy5ldmVudFJldGVudGlvbkRheXMhKTtcbiAgICAgIFxuICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cy5maWx0ZXIoZXZlbnQgPT4gZXZlbnQudGltZXN0YW1wID49IGN1dG9mZkRhdGUpO1xuICAgICAgdGhpcy52dWxuZXJhYmlsaXR5UmVwb3J0cyA9IHRoaXMudnVsbmVyYWJpbGl0eVJlcG9ydHMuZmlsdGVyKHJlcG9ydCA9PiByZXBvcnQudGltZXN0YW1wID49IGN1dG9mZkRhdGUpO1xuICAgIH0sIDI0ICogNjAgKiA2MCAqIDEwMDApOyAvLyBEYWlseSBjbGVhbnVwXG4gIH1cblxuICBwcml2YXRlIHN0YXJ0Q29udGludW91c1NjYW5uaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuc2NhbkludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wZXJmb3JtQ29tcHJlaGVuc2l2ZVNjYW4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRoaXMubG9nU2VjdXJpdHlFdmVudCh7XG4gICAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgIHR5cGU6ICd2dWxuZXJhYmlsaXR5JyxcbiAgICAgICAgICBzb3VyY2U6ICdjb250aW51b3VzLXNjYW5uZXInLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDb250aW51b3VzIHNjYW4gZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWAsXG4gICAgICAgICAgZGV0YWlsczogeyBlcnJvciB9LFxuICAgICAgICAgIHJlc29sdmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLm9wdGlvbnMuc2NhbkludGVydmFsTWludXRlcyEgKiA2MCAqIDEwMDApO1xuICB9XG5cbiAgLy8gQ2xlYW51cCByZXNvdXJjZXNcbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zY2FuSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zY2FuSW50ZXJ2YWwpO1xuICAgIH1cbiAgICBpZiAodGhpcy5ldmVudENsZWFudXBJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmV2ZW50Q2xlYW51cEludGVydmFsKTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2VjdXJpdHlNb25pdG9yID0gbmV3IFNlY3VyaXR5TW9uaXRvcih7XG4gIG1heEV2ZW50czogMTAwMDAsXG4gIGV2ZW50UmV0ZW50aW9uRGF5czogMzAsXG4gIHNjYW5JbnRlcnZhbE1pbnV0ZXM6IDYwLFxuICBlbmFibGVDb250aW51b3VzU2Nhbm5pbmc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQStESTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBL0RKLE1BQUFFLGVBQUE7QUFBQTtBQUFBLENBQUFGLGFBQUEsR0FBQUcsQ0FBQSxPQUFBQyxPQUFBO0FBQ0EsTUFBQUMsTUFBQTtBQUFBO0FBQUEsQ0FBQUwsYUFBQSxHQUFBRyxDQUFBLE9BQUFDLE9BQUE7QUFDQSxNQUFB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