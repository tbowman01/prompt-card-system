{"version":3,"names":["cov_i3ndmct2y","actualCoverage","child_process_1","s","require","util_1","promises_1","__importDefault","path_1","crypto_1","events_1","execAsync","promisify","exec","SecurityMonitor","EventEmitter","constructor","options","b","f","events","vulnerabilityReports","maxEvents","eventRetentionDays","scanIntervalMinutes","enableContinuousScanning","setupEventCleanup","startContinuousScanning","logSecurityEvent","event","securityEvent","id","default","randomUUID","timestamp","Date","push","emit","severity","length","slice","getSecurityEvents","filters","filteredEvents","filter","e","type","source","includes","since","limit","sort","a","getTime","scanDependencies","report","scanType","vulnerabilities","critical","high","medium","low","total","details","recommendations","stdout","cwd","process","auditResult","JSON","parse","vulns","Object","keys","forEach","packageName","vuln","package","title","range","fixAvailable","error","message","Error","fallback","resolved","scanCode","srcPath","join","files","getSourceFiles","file","content","readFile","issues","analyzeCodeSecurity","issue","scanInfrastructure","dockerfilePaths","dockerFile","analyzeDockerSecurity","envIssues","analyzeEnvironmentSecurity","performComprehensiveScan","results","Promise","allSettled","reports","result","index","status","value","reason","getSecurityMetrics","now","last24h","eventsLast24h","criticalEvents","latestReport","criticalVulnerabilities","securityScore","Math","max","threatLevel","complianceChecks","name","passed","required","passedChecks","c","complianceScore","round","lastScanTimestamp","complianceStatus","score","checks","dir","entries","readdir","withFileTypes","entry","fullPath","isDirectory","startsWith","isFile","endsWith","filename","patterns","regex","pattern","matches","match","lineNumber","substring","indexOf","split","line","code","trim","envVars","env","key","toLowerCase","variable","eventCleanupInterval","setInterval","cutoffDate","setDate","getDate","scanInterval","destroy","clearInterval","removeAllListeners","exports","securityMonitor","NODE_ENV"],"sources":["/workspaces/prompt-card-system/backend/src/services/security/SecurityMonitor.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\n\nconst execAsync = promisify(exec);\n\nexport interface SecurityEvent {\n  id: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'vulnerability' | 'intrusion' | 'authentication' | 'access' | 'malware';\n  source: string;\n  message: string;\n  details: any;\n  resolved: boolean;\n}\n\nexport interface VulnerabilityReport {\n  id: string;\n  timestamp: Date;\n  scanType: 'dependencies' | 'code' | 'docker' | 'infrastructure';\n  vulnerabilities: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    total: number;\n  };\n  details: any[];\n  recommendations: string[];\n}\n\nexport interface SecurityMetrics {\n  eventsLast24h: number;\n  criticalVulnerabilities: number;\n  securityScore: number;\n  lastScanTimestamp?: Date;\n  threatLevel: 'low' | 'medium' | 'high' | 'critical';\n  complianceStatus: {\n    score: number;\n    checks: {\n      name: string;\n      passed: boolean;\n      required: boolean;\n    }[];\n  };\n}\n\nexport class SecurityMonitor extends EventEmitter {\n  private events: SecurityEvent[] = [];\n  private vulnerabilityReports: VulnerabilityReport[] = [];\n  private scanInterval?: NodeJS.Timeout;\n  private eventCleanupInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    maxEvents?: number;\n    eventRetentionDays?: number;\n    scanIntervalMinutes?: number;\n    enableContinuousScanning?: boolean;\n  } = {}) {\n    super();\n    \n    const {\n      maxEvents = 10000,\n      eventRetentionDays = 30,\n      scanIntervalMinutes = 60,\n      enableContinuousScanning = true\n    } = options;\n\n    this.options = {\n      maxEvents,\n      eventRetentionDays,\n      scanIntervalMinutes,\n      enableContinuousScanning\n    };\n\n    this.setupEventCleanup();\n    \n    if (enableContinuousScanning) {\n      this.startContinuousScanning();\n    }\n  }\n\n  // Security Event Management\n  logSecurityEvent(event: Omit<SecurityEvent, 'id' | 'timestamp'>): void {\n    const securityEvent: SecurityEvent = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      ...event\n    };\n\n    this.events.push(securityEvent);\n    this.emit('securityEvent', securityEvent);\n\n    // Trigger immediate alert for critical events\n    if (event.severity === 'critical') {\n      this.emit('criticalAlert', securityEvent);\n    }\n\n    // Maintain event limit\n    if (this.events.length > this.options.maxEvents!) {\n      this.events = this.events.slice(-this.options.maxEvents!);\n    }\n  }\n\n  getSecurityEvents(filters?: {\n    severity?: SecurityEvent['severity'];\n    type?: SecurityEvent['type'];\n    source?: string;\n    since?: Date;\n    limit?: number;\n  }): SecurityEvent[] {\n    let filteredEvents = [...this.events];\n\n    if (filters) {\n      if (filters.severity) {\n        filteredEvents = filteredEvents.filter(e => e.severity === filters.severity);\n      }\n      if (filters.type) {\n        filteredEvents = filteredEvents.filter(e => e.type === filters.type);\n      }\n      if (filters.source) {\n        filteredEvents = filteredEvents.filter(e => e.source.includes(filters.source));\n      }\n      if (filters.since) {\n        filteredEvents = filteredEvents.filter(e => e.timestamp >= filters.since!);\n      }\n      if (filters.limit) {\n        filteredEvents = filteredEvents.slice(-filters.limit);\n      }\n    }\n\n    return filteredEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // Vulnerability Scanning\n  async scanDependencies(): Promise<VulnerabilityReport> {\n    try {\n      const report: VulnerabilityReport = {\n        id: crypto.randomUUID(),\n        timestamp: new Date(),\n        scanType: 'dependencies',\n        vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n        details: [],\n        recommendations: []\n      };\n\n      // Use npm audit for dependency scanning\n      try {\n        const { stdout } = await execAsync('npm audit --json', { cwd: process.cwd() });\n        const auditResult = JSON.parse(stdout);\n        \n        if (auditResult.vulnerabilities) {\n          const vulns = auditResult.vulnerabilities;\n          \n          Object.keys(vulns).forEach(packageName => {\n            const vuln = vulns[packageName];\n            const severity = vuln.severity;\n            \n            report.vulnerabilities[severity as keyof typeof report.vulnerabilities]++;\n            report.vulnerabilities.total++;\n            \n            report.details.push({\n              package: packageName,\n              severity: severity,\n              title: vuln.title || 'Unknown vulnerability',\n              range: vuln.range,\n              fixAvailable: vuln.fixAvailable\n            });\n          });\n        }\n\n        // Generate recommendations\n        if (report.vulnerabilities.critical > 0) {\n          report.recommendations.push('Immediately update packages with critical vulnerabilities');\n        }\n        if (report.vulnerabilities.high > 0) {\n          report.recommendations.push('Update packages with high severity vulnerabilities within 24 hours');\n        }\n        if (report.vulnerabilities.total > 0) {\n          report.recommendations.push('Run \"npm audit fix\" to automatically fix vulnerabilities');\n        }\n\n      } catch (error) {\n        // If npm audit fails, try alternative approaches\n        report.details.push({\n          error: 'Failed to run npm audit',\n          message: error instanceof Error ? error.message : 'Unknown error',\n          fallback: 'Consider using yarn audit or manual dependency review'\n        });\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'dependency-scanner',\n        message: `Dependency scan completed: ${report.vulnerabilities.total} vulnerabilities found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Dependency scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async scanCode(): Promise<VulnerabilityReport> {\n    const report: VulnerabilityReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      scanType: 'code',\n      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n      details: [],\n      recommendations: []\n    };\n\n    try {\n      // Basic static code analysis patterns\n      const srcPath = path.join(process.cwd(), 'src');\n      const files = await this.getSourceFiles(srcPath);\n      \n      for (const file of files) {\n        const content = await fs.readFile(file, 'utf-8');\n        const issues = this.analyzeCodeSecurity(content, file);\n        \n        issues.forEach(issue => {\n          report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n          report.vulnerabilities.total++;\n          report.details.push(issue);\n        });\n      }\n\n      // Generate recommendations\n      if (report.vulnerabilities.total > 0) {\n        report.recommendations.push('Review and fix identified security issues in source code');\n        report.recommendations.push('Consider implementing automated security linting');\n        report.recommendations.push('Perform regular security code reviews');\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'code-scanner',\n        message: `Code scan completed: ${report.vulnerabilities.total} issues found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Code scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async scanInfrastructure(): Promise<VulnerabilityReport> {\n    const report: VulnerabilityReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      scanType: 'infrastructure',\n      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, total: 0 },\n      details: [],\n      recommendations: []\n    };\n\n    try {\n      // Check Docker configuration if present\n      const dockerfilePaths = ['Dockerfile', 'Dockerfile.dev', 'docker-compose.yml', 'docker-compose.dev.yml'];\n      \n      for (const dockerFile of dockerfilePaths) {\n        try {\n          const content = await fs.readFile(dockerFile, 'utf-8');\n          const issues = this.analyzeDockerSecurity(content, dockerFile);\n          \n          issues.forEach(issue => {\n            report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n            report.vulnerabilities.total++;\n            report.details.push(issue);\n          });\n        } catch {\n          // File doesn't exist, skip\n        }\n      }\n\n      // Check environment configuration\n      const envIssues = await this.analyzeEnvironmentSecurity();\n      envIssues.forEach(issue => {\n        report.vulnerabilities[issue.severity as keyof typeof report.vulnerabilities]++;\n        report.vulnerabilities.total++;\n        report.details.push(issue);\n      });\n\n      // Generate recommendations\n      if (report.vulnerabilities.total > 0) {\n        report.recommendations.push('Review and harden infrastructure configuration');\n        report.recommendations.push('Implement security best practices for containerization');\n        report.recommendations.push('Regular infrastructure security audits');\n      }\n\n      this.vulnerabilityReports.push(report);\n      this.logSecurityEvent({\n        severity: report.vulnerabilities.critical > 0 ? 'critical' : \n                 report.vulnerabilities.high > 0 ? 'high' :\n                 report.vulnerabilities.medium > 0 ? 'medium' : 'low',\n        type: 'vulnerability',\n        source: 'infrastructure-scanner',\n        message: `Infrastructure scan completed: ${report.vulnerabilities.total} issues found`,\n        details: report,\n        resolved: false\n      });\n\n      return report;\n    } catch (error) {\n      throw new Error(`Infrastructure scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Comprehensive security scan\n  async performComprehensiveScan(): Promise<VulnerabilityReport[]> {\n    const results = await Promise.allSettled([\n      this.scanDependencies(),\n      this.scanCode(),\n      this.scanInfrastructure()\n    ]);\n\n    const reports: VulnerabilityReport[] = [];\n    \n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        reports.push(result.value);\n      } else {\n        this.logSecurityEvent({\n          severity: 'high',\n          type: 'vulnerability',\n          source: 'comprehensive-scanner',\n          message: `Scan failed: ${result.reason}`,\n          details: { error: result.reason },\n          resolved: false\n        });\n      }\n    });\n\n    return reports;\n  }\n\n  // Security Metrics\n  getSecurityMetrics(): SecurityMetrics {\n    const now = new Date();\n    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    \n    const eventsLast24h = this.events.filter(e => e.timestamp >= last24h).length;\n    const criticalEvents = this.events.filter(e => e.severity === 'critical' && !e.resolved).length;\n    \n    const latestReport = this.vulnerabilityReports\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n    \n    const criticalVulnerabilities = latestReport?.vulnerabilities.critical || 0;\n    \n    // Calculate security score (0-100)\n    let securityScore = 100;\n    securityScore -= criticalVulnerabilities * 20;\n    securityScore -= (latestReport?.vulnerabilities.high || 0) * 10;\n    securityScore -= (latestReport?.vulnerabilities.medium || 0) * 5;\n    securityScore -= criticalEvents * 15;\n    securityScore = Math.max(0, securityScore);\n    \n    const threatLevel: SecurityMetrics['threatLevel'] = \n      criticalVulnerabilities > 0 || criticalEvents > 0 ? 'critical' :\n      (latestReport?.vulnerabilities.high || 0) > 0 ? 'high' :\n      (latestReport?.vulnerabilities.medium || 0) > 0 ? 'medium' : 'low';\n\n    // Compliance checks\n    const complianceChecks = [\n      { name: 'Regular vulnerability scanning', passed: this.vulnerabilityReports.length > 0, required: true },\n      { name: 'Security event logging', passed: this.events.length > 0, required: true },\n      { name: 'No critical vulnerabilities', passed: criticalVulnerabilities === 0, required: true },\n      { name: 'Environment security', passed: true, required: true }, // Would be determined by env scan\n      { name: 'Dependency security', passed: (latestReport?.vulnerabilities.critical || 0) === 0, required: true }\n    ];\n\n    const passedChecks = complianceChecks.filter(c => c.passed).length;\n    const complianceScore = Math.round((passedChecks / complianceChecks.length) * 100);\n\n    return {\n      eventsLast24h,\n      criticalVulnerabilities,\n      securityScore,\n      lastScanTimestamp: latestReport?.timestamp,\n      threatLevel,\n      complianceStatus: {\n        score: complianceScore,\n        checks: complianceChecks\n      }\n    };\n  }\n\n  // Helper methods\n  private async getSourceFiles(dir: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    try {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        \n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n          files.push(...await this.getSourceFiles(fullPath));\n        } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.js'))) {\n          files.push(fullPath);\n        }\n      }\n    } catch {\n      // Directory doesn't exist or can't be read\n    }\n    \n    return files;\n  }\n\n  private analyzeCodeSecurity(content: string, filename: string): any[] {\n    const issues: any[] = [];\n    \n    // Security patterns to check\n    const patterns = [\n      {\n        regex: /eval\\s*\\(/g,\n        severity: 'critical',\n        message: 'Use of eval() function detected - potential code injection vulnerability',\n        type: 'code-injection'\n      },\n      {\n        regex: /document\\.write\\s*\\(/g,\n        severity: 'high',\n        message: 'Use of document.write() detected - potential XSS vulnerability',\n        type: 'xss'\n      },\n      {\n        regex: /innerHTML\\s*=/g,\n        severity: 'medium',\n        message: 'Use of innerHTML detected - potential XSS vulnerability if user input',\n        type: 'xss'\n      },\n      {\n        regex: /password\\s*=\\s*[\"'][^\"']+[\"']/gi,\n        severity: 'critical',\n        message: 'Hardcoded password detected in source code',\n        type: 'secrets'\n      },\n      {\n        regex: /api[_-]?key\\s*=\\s*[\"'][^\"']+[\"']/gi,\n        severity: 'critical',\n        message: 'Hardcoded API key detected in source code',\n        type: 'secrets'\n      },\n      {\n        regex: /\\.(exec|system)\\s*\\(/g,\n        severity: 'high',\n        message: 'Command execution detected - ensure input validation',\n        type: 'command-injection'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        matches.forEach((match, index) => {\n          const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n          issues.push({\n            file: filename,\n            line: lineNumber,\n            severity: pattern.severity,\n            type: pattern.type,\n            message: pattern.message,\n            code: match.trim()\n          });\n        });\n      }\n    });\n    \n    return issues;\n  }\n\n  private analyzeDockerSecurity(content: string, filename: string): any[] {\n    const issues: any[] = [];\n    \n    // Docker security patterns\n    const patterns = [\n      {\n        regex: /USER\\s+root/gi,\n        severity: 'high',\n        message: 'Running as root user in Docker container',\n        type: 'privilege-escalation'\n      },\n      {\n        regex: /COPY\\s+.*\\s+\\//gi,\n        severity: 'medium',\n        message: 'Copying files to root directory - consider specific paths',\n        type: 'file-permissions'\n      },\n      {\n        regex: /--privileged/gi,\n        severity: 'critical',\n        message: 'Privileged mode detected - security risk',\n        type: 'privilege-escalation'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        matches.forEach(match => {\n          const lineNumber = content.substring(0, content.indexOf(match)).split('\\n').length;\n          issues.push({\n            file: filename,\n            line: lineNumber,\n            severity: pattern.severity,\n            type: pattern.type,\n            message: pattern.message,\n            code: match.trim()\n          });\n        });\n      }\n    });\n    \n    return issues;\n  }\n\n  private async analyzeEnvironmentSecurity(): Promise<any[]> {\n    const issues: any[] = [];\n    \n    // Check for environment variable security\n    const envVars = process.env;\n    \n    Object.keys(envVars).forEach(key => {\n      if (key.toLowerCase().includes('secret') || \n          key.toLowerCase().includes('password') ||\n          key.toLowerCase().includes('key')) {\n        // Don't log actual values, just flag potential issues\n        if (envVars[key] && envVars[key].length < 8) {\n          issues.push({\n            type: 'weak-credentials',\n            severity: 'medium',\n            message: `Environment variable '${key}' appears to have weak value`,\n            variable: key\n          });\n        }\n      }\n    });\n    \n    return issues;\n  }\n\n  private setupEventCleanup(): void {\n    this.eventCleanupInterval = setInterval(() => {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - this.options.eventRetentionDays!);\n      \n      this.events = this.events.filter(event => event.timestamp >= cutoffDate);\n      this.vulnerabilityReports = this.vulnerabilityReports.filter(report => report.timestamp >= cutoffDate);\n    }, 24 * 60 * 60 * 1000); // Daily cleanup\n  }\n\n  private startContinuousScanning(): void {\n    this.scanInterval = setInterval(async () => {\n      try {\n        await this.performComprehensiveScan();\n      } catch (error) {\n        this.logSecurityEvent({\n          severity: 'medium',\n          type: 'vulnerability',\n          source: 'continuous-scanner',\n          message: `Continuous scan failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          details: { error },\n          resolved: false\n        });\n      }\n    }, this.options.scanIntervalMinutes! * 60 * 1000);\n  }\n\n  // Cleanup resources\n  destroy(): void {\n    if (this.scanInterval) {\n      clearInterval(this.scanInterval);\n    }\n    if (this.eventCleanupInterval) {\n      clearInterval(this.eventCleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n\nexport const securityMonitor = new SecurityMonitor({\n  maxEvents: 10000,\n  eventRetentionDays: 30,\n  scanIntervalMinutes: 60,\n  enableContinuousScanning: process.env.NODE_ENV === 'production'\n});"],"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","ignoreList":[]}