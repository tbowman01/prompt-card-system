b88e9cceb0b98cc04181c64f5b9d85bc
"use strict";

/* istanbul ignore next */
function cov_1yoo2cjud7() {
  var path = "/workspaces/prompt-card-system/backend/src/services/ml/FederatedLearningEngine.ts";
  var hash = "db7c153eea80507f0ce58b6dd11db30bbd447f13";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/ml/FederatedLearningEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 75
        }
      },
      "37": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "38": {
        start: {
          line: 38,
          column: 11
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "39": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "40": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 40
        }
      },
      "41": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 55
        }
      },
      "42": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 16
        }
      },
      "43": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 35
        }
      },
      "44": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 31
        }
      },
      "45": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 38
        }
      },
      "46": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 38
        }
      },
      "47": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 64
        }
      },
      "48": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "49": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 57
        }
      },
      "50": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 53
        }
      },
      "51": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "52": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "53": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "54": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 72
        }
      },
      "55": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 48
        }
      },
      "56": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 44
        }
      },
      "57": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 42
        }
      },
      "58": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 54
        }
      },
      "59": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 52
        }
      },
      "60": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 38
        }
      },
      "61": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 80
        }
      },
      "62": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 64
        }
      },
      "63": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 86
        }
      },
      "64": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "65": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 86
        }
      },
      "66": {
        start: {
          line: 85,
          column: 21
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "67": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "68": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 37
        }
      },
      "69": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "70": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 82
        }
      },
      "71": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 54
        }
      },
      "72": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 20
        }
      },
      "73": {
        start: {
          line: 114,
          column: 24
        },
        end: {
          line: 114,
          column: 88
        }
      },
      "74": {
        start: {
          line: 116,
          column: 28
        },
        end: {
          line: 116,
          column: 58
        }
      },
      "75": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "76": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 65
        }
      },
      "77": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 66
        }
      },
      "78": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "79": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 109
        }
      },
      "80": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "81": {
        start: {
          line: 129,
          column: 48
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "82": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 46
        }
      },
      "83": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 62
        }
      },
      "84": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "85": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "86": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 112
        }
      },
      "87": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 54
        }
      },
      "88": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 21
        }
      },
      "89": {
        start: {
          line: 169,
          column: 22
        },
        end: {
          line: 169,
          column: 59
        }
      },
      "90": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "91": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 65
        }
      },
      "92": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "93": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 96
        }
      },
      "94": {
        start: {
          line: 177,
          column: 29
        },
        end: {
          line: 177,
          column: 63
        }
      },
      "95": {
        start: {
          line: 179,
          column: 30
        },
        end: {
          line: 179,
          column: 86
        }
      },
      "96": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 61
        }
      },
      "97": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 72
        }
      },
      "98": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "99": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 103
        }
      },
      "100": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 88
        }
      },
      "101": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "102": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 52
        }
      },
      "103": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 37
        }
      },
      "104": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 101
        }
      },
      "105": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "106": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "107": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 208,
          column: 76
        }
      },
      "108": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 26
        }
      },
      "109": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 75
        }
      },
      "110": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 26
        }
      },
      "111": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 71
        }
      },
      "112": {
        start: {
          line: 215,
          column: 20
        },
        end: {
          line: 215,
          column: 26
        }
      },
      "113": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 77
        }
      },
      "114": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 218,
          column: 26
        }
      },
      "115": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 98
        }
      },
      "116": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 54
        }
      },
      "117": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "118": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 49
        }
      },
      "119": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 48
        }
      },
      "120": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 36
        }
      },
      "121": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 89
        }
      },
      "122": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 67
        }
      },
      "123": {
        start: {
          line: 241,
          column: 24
        },
        end: {
          line: 241,
          column: 63
        }
      },
      "124": {
        start: {
          line: 242,
          column: 29
        },
        end: {
          line: 242,
          column: 102
        }
      },
      "125": {
        start: {
          line: 242,
          column: 61
        },
        end: {
          line: 242,
          column: 98
        }
      },
      "126": {
        start: {
          line: 244,
          column: 34
        },
        end: {
          line: 244,
          column: 36
        }
      },
      "127": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "128": {
        start: {
          line: 245,
          column: 30
        },
        end: {
          line: 245,
          column: 31
        }
      },
      "129": {
        start: {
          line: 246,
          column: 30
        },
        end: {
          line: 246,
          column: 72
        }
      },
      "130": {
        start: {
          line: 247,
          column: 32
        },
        end: {
          line: 247,
          column: 59
        }
      },
      "131": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "132": {
        start: {
          line: 249,
          column: 31
        },
        end: {
          line: 249,
          column: 77
        }
      },
      "133": {
        start: {
          line: 250,
          column: 37
        },
        end: {
          line: 250,
          column: 68
        }
      },
      "134": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "135": {
        start: {
          line: 251,
          column: 29
        },
        end: {
          line: 251,
          column: 30
        }
      },
      "136": {
        start: {
          line: 252,
          column: 20
        },
        end: {
          line: 252,
          column: 63
        }
      },
      "137": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 48
        }
      },
      "138": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 273,
          column: 10
        }
      },
      "139": {
        start: {
          line: 264,
          column: 67
        },
        end: {
          line: 264,
          column: 95
        }
      },
      "140": {
        start: {
          line: 265,
          column: 54
        },
        end: {
          line: 265,
          column: 80
        }
      },
      "141": {
        start: {
          line: 266,
          column: 58
        },
        end: {
          line: 266,
          column: 88
        }
      },
      "142": {
        start: {
          line: 267,
          column: 62
        },
        end: {
          line: 267,
          column: 88
        }
      },
      "143": {
        start: {
          line: 268,
          column: 57
        },
        end: {
          line: 268,
          column: 86
        }
      },
      "144": {
        start: {
          line: 279,
          column: 24
        },
        end: {
          line: 279,
          column: 63
        }
      },
      "145": {
        start: {
          line: 280,
          column: 29
        },
        end: {
          line: 280,
          column: 102
        }
      },
      "146": {
        start: {
          line: 280,
          column: 61
        },
        end: {
          line: 280,
          column: 98
        }
      },
      "147": {
        start: {
          line: 282,
          column: 30
        },
        end: {
          line: 282,
          column: 75
        }
      },
      "148": {
        start: {
          line: 284,
          column: 34
        },
        end: {
          line: 284,
          column: 36
        }
      },
      "149": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "150": {
        start: {
          line: 285,
          column: 30
        },
        end: {
          line: 285,
          column: 31
        }
      },
      "151": {
        start: {
          line: 286,
          column: 30
        },
        end: {
          line: 286,
          column: 62
        }
      },
      "152": {
        start: {
          line: 287,
          column: 32
        },
        end: {
          line: 287,
          column: 59
        }
      },
      "153": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "154": {
        start: {
          line: 289,
          column: 31
        },
        end: {
          line: 289,
          column: 77
        }
      },
      "155": {
        start: {
          line: 290,
          column: 37
        },
        end: {
          line: 290,
          column: 68
        }
      },
      "156": {
        start: {
          line: 291,
          column: 43
        },
        end: {
          line: 291,
          column: 68
        }
      },
      "157": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 296,
          column: 17
        }
      },
      "158": {
        start: {
          line: 292,
          column: 29
        },
        end: {
          line: 292,
          column: 30
        }
      },
      "159": {
        start: {
          line: 294,
          column: 41
        },
        end: {
          line: 294,
          column: 105
        }
      },
      "160": {
        start: {
          line: 295,
          column: 20
        },
        end: {
          line: 295,
          column: 60
        }
      },
      "161": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 48
        }
      },
      "162": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 316,
          column: 10
        }
      },
      "163": {
        start: {
          line: 307,
          column: 67
        },
        end: {
          line: 307,
          column: 95
        }
      },
      "164": {
        start: {
          line: 308,
          column: 54
        },
        end: {
          line: 308,
          column: 80
        }
      },
      "165": {
        start: {
          line: 309,
          column: 58
        },
        end: {
          line: 309,
          column: 88
        }
      },
      "166": {
        start: {
          line: 310,
          column: 62
        },
        end: {
          line: 310,
          column: 88
        }
      },
      "167": {
        start: {
          line: 311,
          column: 57
        },
        end: {
          line: 311,
          column: 86
        }
      },
      "168": {
        start: {
          line: 322,
          column: 24
        },
        end: {
          line: 322,
          column: 63
        }
      },
      "169": {
        start: {
          line: 324,
          column: 36
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "170": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 89
        }
      },
      "171": {
        start: {
          line: 327,
          column: 34
        },
        end: {
          line: 327,
          column: 36
        }
      },
      "172": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "173": {
        start: {
          line: 328,
          column: 30
        },
        end: {
          line: 328,
          column: 31
        }
      },
      "174": {
        start: {
          line: 329,
          column: 30
        },
        end: {
          line: 329,
          column: 72
        }
      },
      "175": {
        start: {
          line: 330,
          column: 32
        },
        end: {
          line: 330,
          column: 59
        }
      },
      "176": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 337,
          column: 13
        }
      },
      "177": {
        start: {
          line: 332,
          column: 41
        },
        end: {
          line: 332,
          column: 126
        }
      },
      "178": {
        start: {
          line: 333,
          column: 37
        },
        end: {
          line: 333,
          column: 68
        }
      },
      "179": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 336,
          column: 17
        }
      },
      "180": {
        start: {
          line: 334,
          column: 29
        },
        end: {
          line: 334,
          column: 30
        }
      },
      "181": {
        start: {
          line: 335,
          column: 20
        },
        end: {
          line: 335,
          column: 73
        }
      },
      "182": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 48
        }
      },
      "183": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 356,
          column: 10
        }
      },
      "184": {
        start: {
          line: 346,
          column: 60
        },
        end: {
          line: 346,
          column: 92
        }
      },
      "185": {
        start: {
          line: 347,
          column: 67
        },
        end: {
          line: 347,
          column: 95
        }
      },
      "186": {
        start: {
          line: 348,
          column: 54
        },
        end: {
          line: 348,
          column: 80
        }
      },
      "187": {
        start: {
          line: 349,
          column: 58
        },
        end: {
          line: 349,
          column: 88
        }
      },
      "188": {
        start: {
          line: 350,
          column: 62
        },
        end: {
          line: 350,
          column: 88
        }
      },
      "189": {
        start: {
          line: 351,
          column: 57
        },
        end: {
          line: 351,
          column: 86
        }
      },
      "190": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 52
        }
      },
      "191": {
        start: {
          line: 370,
          column: 21
        },
        end: {
          line: 370,
          column: 50
        }
      },
      "192": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "193": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 63
        }
      },
      "194": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 374,
          column: 74
        }
      },
      "195": {
        start: {
          line: 375,
          column: 30
        },
        end: {
          line: 375,
          column: 67
        }
      },
      "196": {
        start: {
          line: 376,
          column: 29
        },
        end: {
          line: 376,
          column: 69
        }
      },
      "197": {
        start: {
          line: 378,
          column: 31
        },
        end: {
          line: 378,
          column: 84
        }
      },
      "198": {
        start: {
          line: 380,
          column: 29
        },
        end: {
          line: 380,
          column: 81
        }
      },
      "199": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 90
        }
      },
      "200": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 390,
          column: 10
        }
      },
      "201": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 68
        }
      },
      "202": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "203": {
        start: {
          line: 399,
          column: 25
        },
        end: {
          line: 399,
          column: 66
        }
      },
      "204": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 52
        }
      },
      "205": {
        start: {
          line: 403,
          column: 30
        },
        end: {
          line: 403,
          column: 100
        }
      },
      "206": {
        start: {
          line: 403,
          column: 88
        },
        end: {
          line: 403,
          column: 92
        }
      },
      "207": {
        start: {
          line: 404,
          column: 29
        },
        end: {
          line: 404,
          column: 70
        }
      },
      "208": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 77
        }
      },
      "209": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "210": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 44
        }
      },
      "211": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 36
        }
      },
      "212": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 116
        }
      },
      "213": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 78
        }
      },
      "214": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "215": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 62
        }
      },
      "216": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 80
        }
      },
      "217": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 75
        }
      },
      "218": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 35
        }
      },
      "219": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 35
        }
      },
      "220": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 48
        }
      },
      "221": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 441,
          column: 11
        }
      },
      "222": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 135
        }
      },
      "223": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 94
        }
      },
      "224": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 43
        }
      },
      "225": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 67
        }
      },
      "226": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 53
        }
      },
      "227": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 51
        }
      },
      "228": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "229": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 56
        }
      },
      "230": {
        start: {
          line: 467,
          column: 28
        },
        end: {
          line: 467,
          column: 49
        }
      },
      "231": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 480,
          column: 80
        }
      },
      "232": {
        start: {
          line: 470,
          column: 28
        },
        end: {
          line: 470,
          column: 63
        }
      },
      "233": {
        start: {
          line: 472,
          column: 27
        },
        end: {
          line: 474,
          column: 49
        }
      },
      "234": {
        start: {
          line: 475,
          column: 27
        },
        end: {
          line: 477,
          column: 49
        }
      },
      "235": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 35
        }
      },
      "236": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 88
        }
      },
      "237": {
        start: {
          line: 483,
          column: 62
        },
        end: {
          line: 483,
          column: 86
        }
      },
      "238": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 17
        }
      },
      "239": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 91
        }
      },
      "240": {
        start: {
          line: 494,
          column: 26
        },
        end: {
          line: 496,
          column: 26
        }
      },
      "241": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 501,
          column: 10
        }
      },
      "242": {
        start: {
          line: 504,
          column: 21
        },
        end: {
          line: 504,
          column: 43
        }
      },
      "243": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "244": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 61
        }
      },
      "245": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 89
        }
      },
      "246": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 509,
          column: 95
        }
      },
      "247": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 39
        }
      },
      "248": {
        start: {
          line: 514,
          column: 24
        },
        end: {
          line: 514,
          column: 42
        }
      },
      "249": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 515,
          column: 56
        }
      },
      "250": {
        start: {
          line: 515,
          column: 37
        },
        end: {
          line: 515,
          column: 54
        }
      },
      "251": {
        start: {
          line: 518,
          column: 26
        },
        end: {
          line: 520,
          column: 14
        }
      },
      "252": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 519,
          column: 91
        }
      },
      "253": {
        start: {
          line: 519,
          column: 60
        },
        end: {
          line: 519,
          column: 86
        }
      },
      "254": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 524,
          column: 9
        }
      },
      "255": {
        start: {
          line: 522,
          column: 32
        },
        end: {
          line: 522,
          column: 56
        }
      },
      "256": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 83
        }
      },
      "257": {
        start: {
          line: 523,
          column: 40
        },
        end: {
          line: 523,
          column: 81
        }
      },
      "258": {
        start: {
          line: 523,
          column: 60
        },
        end: {
          line: 523,
          column: 80
        }
      },
      "259": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 23
        }
      },
      "260": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 538,
          column: 11
        }
      },
      "261": {
        start: {
          line: 529,
          column: 31
        },
        end: {
          line: 529,
          column: 61
        }
      },
      "262": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 536,
          column: 13
        }
      },
      "263": {
        start: {
          line: 530,
          column: 25
        },
        end: {
          line: 530,
          column: 26
        }
      },
      "264": {
        start: {
          line: 532,
          column: 27
        },
        end: {
          line: 532,
          column: 40
        }
      },
      "265": {
        start: {
          line: 533,
          column: 27
        },
        end: {
          line: 533,
          column: 40
        }
      },
      "266": {
        start: {
          line: 534,
          column: 30
        },
        end: {
          line: 534,
          column: 109
        }
      },
      "267": {
        start: {
          line: 535,
          column: 16
        },
        end: {
          line: 535,
          column: 49
        }
      },
      "268": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 30
        }
      },
      "269": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 543,
          column: 27
        }
      },
      "270": {
        start: {
          line: 542,
          column: 62
        },
        end: {
          line: 542,
          column: 88
        }
      },
      "271": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 548,
          column: 35
        }
      },
      "272": {
        start: {
          line: 552,
          column: 31
        },
        end: {
          line: 552,
          column: 49
        }
      },
      "273": {
        start: {
          line: 553,
          column: 27
        },
        end: {
          line: 555,
          column: 10
        }
      },
      "274": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 72
        }
      },
      "275": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 556,
          column: 37
        }
      },
      "276": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 558,
          column: 59
        }
      },
      "277": {
        start: {
          line: 558,
          column: 41
        },
        end: {
          line: 558,
          column: 57
        }
      },
      "278": {
        start: {
          line: 561,
          column: 24
        },
        end: {
          line: 561,
          column: 63
        }
      },
      "279": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 568,
          column: 10
        }
      },
      "280": {
        start: {
          line: 563,
          column: 49
        },
        end: {
          line: 563,
          column: 79
        }
      },
      "281": {
        start: {
          line: 564,
          column: 45
        },
        end: {
          line: 564,
          column: 71
        }
      },
      "282": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 580,
          column: 9
        }
      },
      "283": {
        start: {
          line: 572,
          column: 25
        },
        end: {
          line: 572,
          column: 47
        }
      },
      "284": {
        start: {
          line: 573,
          column: 12
        },
        end: {
          line: 579,
          column: 13
        }
      },
      "285": {
        start: {
          line: 575,
          column: 37
        },
        end: {
          line: 576,
          column: 57
        }
      },
      "286": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 578,
          column: 92
        }
      },
      "287": {
        start: {
          line: 583,
          column: 0
        },
        end: {
          line: 583,
          column: 58
        }
      },
      "288": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 589,
          column: 37
        }
      },
      "289": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 590,
          column: 30
        }
      },
      "290": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 593,
          column: 57
        }
      },
      "291": {
        start: {
          line: 596,
          column: 30
        },
        end: {
          line: 596,
          column: 63
        }
      },
      "292": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 62
        }
      },
      "293": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 602,
          column: 11
        }
      },
      "294": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 94
        }
      },
      "295": {
        start: {
          line: 605,
          column: 77
        },
        end: {
          line: 605,
          column: 89
        }
      },
      "296": {
        start: {
          line: 608,
          column: 8
        },
        end: {
          line: 608,
          column: 49
        }
      },
      "297": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 616,
          column: 55
        }
      },
      "298": {
        start: {
          line: 619,
          column: 30
        },
        end: {
          line: 619,
          column: 84
        }
      },
      "299": {
        start: {
          line: 619,
          column: 72
        },
        end: {
          line: 619,
          column: 76
        }
      },
      "300": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 620,
          column: 57
        }
      },
      "301": {
        start: {
          line: 624,
          column: 0
        },
        end: {
          line: 624,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 18
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 43
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 57
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 35
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 83
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 47
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 113
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 129,
            column: 43
          },
          end: {
            line: 129,
            column: 44
          }
        },
        loc: {
          start: {
            line: 129,
            column: 48
          },
          end: {
            line: 129,
            column: 52
          }
        },
        line: 129
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 168
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 39
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 201
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 36
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 240
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 242,
            column: 44
          },
          end: {
            line: 242,
            column: 45
          }
        },
        loc: {
          start: {
            line: 242,
            column: 61
          },
          end: {
            line: 242,
            column: 98
          }
        },
        line: 242
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 264,
            column: 55
          },
          end: {
            line: 264,
            column: 56
          }
        },
        loc: {
          start: {
            line: 264,
            column: 67
          },
          end: {
            line: 264,
            column: 95
          }
        },
        line: 264
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 265,
            column: 42
          },
          end: {
            line: 265,
            column: 43
          }
        },
        loc: {
          start: {
            line: 265,
            column: 54
          },
          end: {
            line: 265,
            column: 80
          }
        },
        line: 265
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 266,
            column: 46
          },
          end: {
            line: 266,
            column: 47
          }
        },
        loc: {
          start: {
            line: 266,
            column: 58
          },
          end: {
            line: 266,
            column: 88
          }
        },
        line: 266
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 267,
            column: 57
          },
          end: {
            line: 267,
            column: 58
          }
        },
        loc: {
          start: {
            line: 267,
            column: 62
          },
          end: {
            line: 267,
            column: 88
          }
        },
        line: 267
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 268,
            column: 45
          },
          end: {
            line: 268,
            column: 46
          }
        },
        loc: {
          start: {
            line: 268,
            column: 57
          },
          end: {
            line: 268,
            column: 86
          }
        },
        line: 268
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 46
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 278
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 280,
            column: 45
          }
        },
        loc: {
          start: {
            line: 280,
            column: 61
          },
          end: {
            line: 280,
            column: 98
          }
        },
        line: 280
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 307,
            column: 55
          },
          end: {
            line: 307,
            column: 56
          }
        },
        loc: {
          start: {
            line: 307,
            column: 67
          },
          end: {
            line: 307,
            column: 95
          }
        },
        line: 307
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 308,
            column: 42
          },
          end: {
            line: 308,
            column: 43
          }
        },
        loc: {
          start: {
            line: 308,
            column: 54
          },
          end: {
            line: 308,
            column: 80
          }
        },
        line: 308
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 309,
            column: 46
          },
          end: {
            line: 309,
            column: 47
          }
        },
        loc: {
          start: {
            line: 309,
            column: 58
          },
          end: {
            line: 309,
            column: 88
          }
        },
        line: 309
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 310,
            column: 57
          },
          end: {
            line: 310,
            column: 58
          }
        },
        loc: {
          start: {
            line: 310,
            column: 62
          },
          end: {
            line: 310,
            column: 88
          }
        },
        line: 310
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 311,
            column: 45
          },
          end: {
            line: 311,
            column: 46
          }
        },
        loc: {
          start: {
            line: 311,
            column: 57
          },
          end: {
            line: 311,
            column: 86
          }
        },
        line: 311
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 31
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 321
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 324,
            column: 51
          },
          end: {
            line: 324,
            column: 52
          }
        },
        loc: {
          start: {
            line: 324,
            column: 68
          },
          end: {
            line: 326,
            column: 9
          }
        },
        line: 324
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 346,
            column: 48
          },
          end: {
            line: 346,
            column: 49
          }
        },
        loc: {
          start: {
            line: 346,
            column: 60
          },
          end: {
            line: 346,
            column: 92
          }
        },
        line: 346
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 347,
            column: 55
          },
          end: {
            line: 347,
            column: 56
          }
        },
        loc: {
          start: {
            line: 347,
            column: 67
          },
          end: {
            line: 347,
            column: 95
          }
        },
        line: 347
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 348,
            column: 42
          },
          end: {
            line: 348,
            column: 43
          }
        },
        loc: {
          start: {
            line: 348,
            column: 54
          },
          end: {
            line: 348,
            column: 80
          }
        },
        line: 348
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 349,
            column: 46
          },
          end: {
            line: 349,
            column: 47
          }
        },
        loc: {
          start: {
            line: 349,
            column: 58
          },
          end: {
            line: 349,
            column: 88
          }
        },
        line: 349
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 350,
            column: 57
          },
          end: {
            line: 350,
            column: 58
          }
        },
        loc: {
          start: {
            line: 350,
            column: 62
          },
          end: {
            line: 350,
            column: 88
          }
        },
        line: 350
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 351,
            column: 45
          },
          end: {
            line: 351,
            column: 46
          }
        },
        loc: {
          start: {
            line: 351,
            column: 57
          },
          end: {
            line: 351,
            column: 86
          }
        },
        line: 351
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 37
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 361
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 50
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 369
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 32
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 395
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 403,
            column: 80
          },
          end: {
            line: 403,
            column: 81
          }
        },
        loc: {
          start: {
            line: 403,
            column: 88
          },
          end: {
            line: 403,
            column: 92
          }
        },
        line: 403
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 31
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 418
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 35
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 448
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 31
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 452
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 29
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 456
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 29
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 460
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 37
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 466
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 470,
            column: 21
          }
        },
        loc: {
          start: {
            line: 470,
            column: 28
          },
          end: {
            line: 470,
            column: 63
          }
        },
        line: 470
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 471,
            column: 18
          },
          end: {
            line: 471,
            column: 19
          }
        },
        loc: {
          start: {
            line: 471,
            column: 28
          },
          end: {
            line: 479,
            column: 9
          }
        },
        line: 471
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 21
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 482
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 483,
            column: 54
          },
          end: {
            line: 483,
            column: 55
          }
        },
        loc: {
          start: {
            line: 483,
            column: 62
          },
          end: {
            line: 483,
            column: 86
          }
        },
        line: 483
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 35
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 485
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 53
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 489
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 34
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 493
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 49
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 503
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 513,
            column: 4
          },
          end: {
            line: 513,
            column: 5
          }
        },
        loc: {
          start: {
            line: 513,
            column: 33
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 513
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 515,
            column: 27
          },
          end: {
            line: 515,
            column: 28
          }
        },
        loc: {
          start: {
            line: 515,
            column: 37
          },
          end: {
            line: 515,
            column: 54
          }
        },
        line: 515
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 41
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 517
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 518,
            column: 51
          },
          end: {
            line: 518,
            column: 52
          }
        },
        loc: {
          start: {
            line: 518,
            column: 67
          },
          end: {
            line: 520,
            column: 9
          }
        },
        line: 518
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 519,
            column: 38
          },
          end: {
            line: 519,
            column: 39
          }
        },
        loc: {
          start: {
            line: 519,
            column: 60
          },
          end: {
            line: 519,
            column: 86
          }
        },
        line: 519
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 523,
            column: 31
          },
          end: {
            line: 523,
            column: 32
          }
        },
        loc: {
          start: {
            line: 523,
            column: 40
          },
          end: {
            line: 523,
            column: 81
          }
        },
        line: 523
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 523,
            column: 50
          },
          end: {
            line: 523,
            column: 51
          }
        },
        loc: {
          start: {
            line: 523,
            column: 60
          },
          end: {
            line: 523,
            column: 80
          }
        },
        line: 523
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 5
          }
        },
        loc: {
          start: {
            line: 527,
            column: 40
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 527
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 528,
            column: 27
          },
          end: {
            line: 528,
            column: 28
          }
        },
        loc: {
          start: {
            line: 528,
            column: 36
          },
          end: {
            line: 538,
            column: 9
          }
        },
        line: 528
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 56
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 540
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 542,
            column: 57
          },
          end: {
            line: 542,
            column: 58
          }
        },
        loc: {
          start: {
            line: 542,
            column: 62
          },
          end: {
            line: 542,
            column: 88
          }
        },
        line: 542
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 41
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 545
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 550,
            column: 4
          },
          end: {
            line: 550,
            column: 5
          }
        },
        loc: {
          start: {
            line: 550,
            column: 43
          },
          end: {
            line: 559,
            column: 5
          }
        },
        line: 550
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 553,
            column: 51
          },
          end: {
            line: 553,
            column: 52
          }
        },
        loc: {
          start: {
            line: 553,
            column: 76
          },
          end: {
            line: 555,
            column: 9
          }
        },
        line: 553
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 558,
            column: 31
          },
          end: {
            line: 558,
            column: 32
          }
        },
        loc: {
          start: {
            line: 558,
            column: 41
          },
          end: {
            line: 558,
            column: 57
          }
        },
        line: 558
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 560,
            column: 4
          },
          end: {
            line: 560,
            column: 5
          }
        },
        loc: {
          start: {
            line: 560,
            column: 39
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 560
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 563,
            column: 37
          },
          end: {
            line: 563,
            column: 38
          }
        },
        loc: {
          start: {
            line: 563,
            column: 49
          },
          end: {
            line: 563,
            column: 79
          }
        },
        line: 563
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 564,
            column: 33
          },
          end: {
            line: 564,
            column: 34
          }
        },
        loc: {
          start: {
            line: 564,
            column: 45
          },
          end: {
            line: 564,
            column: 71
          }
        },
        line: 564
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 570,
            column: 4
          },
          end: {
            line: 570,
            column: 5
          }
        },
        loc: {
          start: {
            line: 570,
            column: 39
          },
          end: {
            line: 581,
            column: 5
          }
        },
        line: 570
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 588,
            column: 4
          },
          end: {
            line: 588,
            column: 5
          }
        },
        loc: {
          start: {
            line: 588,
            column: 18
          },
          end: {
            line: 591,
            column: 5
          }
        },
        line: 588
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 592,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        loc: {
          start: {
            line: 592,
            column: 23
          },
          end: {
            line: 594,
            column: 5
          }
        },
        line: 592
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 595,
            column: 5
          }
        },
        loc: {
          start: {
            line: 595,
            column: 51
          },
          end: {
            line: 603,
            column: 5
          }
        },
        line: 595
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 604,
            column: 4
          },
          end: {
            line: 604,
            column: 5
          }
        },
        loc: {
          start: {
            line: 604,
            column: 31
          },
          end: {
            line: 606,
            column: 5
          }
        },
        line: 604
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 605,
            column: 60
          },
          end: {
            line: 605,
            column: 61
          }
        },
        loc: {
          start: {
            line: 605,
            column: 77
          },
          end: {
            line: 605,
            column: 89
          }
        },
        line: 605
      },
      "80": {
        name: "(anonymous_80)",
        decl: {
          start: {
            line: 607,
            column: 4
          },
          end: {
            line: 607,
            column: 5
          }
        },
        loc: {
          start: {
            line: 607,
            column: 36
          },
          end: {
            line: 609,
            column: 5
          }
        },
        line: 607
      },
      "81": {
        name: "(anonymous_81)",
        decl: {
          start: {
            line: 615,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        loc: {
          start: {
            line: 615,
            column: 23
          },
          end: {
            line: 617,
            column: 5
          }
        },
        line: 615
      },
      "82": {
        name: "(anonymous_82)",
        decl: {
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 618,
            column: 5
          }
        },
        loc: {
          start: {
            line: 618,
            column: 46
          },
          end: {
            line: 621,
            column: 5
          }
        },
        line: 618
      },
      "83": {
        name: "(anonymous_83)",
        decl: {
          start: {
            line: 619,
            column: 64
          },
          end: {
            line: 619,
            column: 65
          }
        },
        loc: {
          start: {
            line: 619,
            column: 72
          },
          end: {
            line: 619,
            column: 76
          }
        },
        line: 619
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 59,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 59,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "18": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "19": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "20": {
        loc: {
          start: {
            line: 130,
            column: 31
          },
          end: {
            line: 130,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 83
          },
          end: {
            line: 130,
            column: 91
          }
        }, {
          start: {
            line: 130,
            column: 94
          },
          end: {
            line: 130,
            column: 103
          }
        }],
        line: 130
      },
      "21": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "22": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "23": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "24": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 209,
            column: 26
          }
        }, {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 212,
            column: 26
          }
        }, {
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 215,
            column: 26
          }
        }, {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 218,
            column: 26
          }
        }, {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 220,
            column: 98
          }
        }],
        line: 206
      },
      "25": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: 227,
            column: 17
          },
          end: {
            line: 229,
            column: 13
          }
        }],
        line: 224
      },
      "26": {
        loc: {
          start: {
            line: 278,
            column: 35
          },
          end: {
            line: 278,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 278,
            column: 40
          },
          end: {
            line: 278,
            column: 44
          }
        }],
        line: 278
      },
      "27": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "28": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        }, {
          start: {
            line: 409,
            column: 13
          },
          end: {
            line: 413,
            column: 9
          }
        }],
        line: 406
      },
      "29": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "30": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "31": {
        loc: {
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      },
      "32": {
        loc: {
          start: {
            line: 521,
            column: 8
          },
          end: {
            line: 524,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 521,
            column: 8
          },
          end: {
            line: 524,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 521
      },
      "33": {
        loc: {
          start: {
            line: 573,
            column: 12
          },
          end: {
            line: 579,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 12
          },
          end: {
            line: 579,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "34": {
        loc: {
          start: {
            line: 596,
            column: 30
          },
          end: {
            line: 596,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 596,
            column: 30
          },
          end: {
            line: 596,
            column: 58
          }
        }, {
          start: {
            line: 596,
            column: 62
          },
          end: {
            line: 596,
            column: 63
          }
        }],
        line: 596
      },
      "35": {
        loc: {
          start: {
            line: 608,
            column: 15
          },
          end: {
            line: 608,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 608,
            column: 15
          },
          end: {
            line: 608,
            column: 43
          }
        }, {
          start: {
            line: 608,
            column: 47
          },
          end: {
            line: 608,
            column: 48
          }
        }],
        line: 608
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/ml/FederatedLearningEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/ml/FederatedLearningEngine.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport * as tf from '@tensorflow/tfjs-node';\nimport { createHash, randomBytes, createCipher, createDecipher, pbkdf2Sync } from 'crypto';\nimport { LRUCache } from 'lru-cache';\nimport { EventStore } from '../analytics/EventStore';\nimport { ModelTrainingEngine } from '../training/ModelTrainingEngine';\n\nexport interface FederatedNode {\n  id: string;\n  name: string;\n  endpoint: string;\n  publicKey: string;\n  capabilities: {\n    computePower: number; // FLOPS rating\n    memoryCapacity: number; // GB\n    bandwidthCapacity: number; // Mbps\n    trustScore: number; // 0-1\n    dataQuality: number; // 0-1\n  };\n  status: 'active' | 'inactive' | 'training' | 'offline';\n  lastSeen: Date;\n  contributionHistory: {\n    roundsParticipated: number;\n    averageAccuracy: number;\n    totalDataSamples: number;\n    reputationScore: number;\n  };\n  privacyPreferences: {\n    differentialPrivacyEpsilon: number;\n    noiseVariance: number;\n    gradientClipping: number;\n    secureBatchSize: number;\n  };\n}\n\nexport interface FederatedRound {\n  id: string;\n  roundNumber: number;\n  globalModel: tf.LayersModel;\n  participants: string[]; // Node IDs\n  aggregationMethod: 'fedavg' | 'fedprox' | 'fednova' | 'scaffold';\n  privacyMechanism: 'differential_privacy' | 'secure_aggregation' | 'homomorphic';\n  status: 'initializing' | 'training' | 'aggregating' | 'completed' | 'failed';\n  startTime: Date;\n  endTime?: Date;\n  modelUpdates: Map<string, ModelUpdate>;\n  aggregatedUpdate: ModelUpdate | null;\n  performanceMetrics: {\n    accuracy: number;\n    loss: number;\n    convergenceRate: number;\n    participationRate: number;\n    privacyBudgetUsed: number;\n  };\n  consensus: {\n    required: boolean;\n    threshold: number;\n    votes: Map<string, boolean>;\n    approved: boolean;\n  };\n}\n\nexport interface ModelUpdate {\n  nodeId: string;\n  roundId: string;\n  modelWeights: Float32Array[];\n  gradients: Float32Array[];\n  metadata: {\n    trainingSamples: number;\n    localEpochs: number;\n    localLoss: number;\n    localAccuracy: number;\n    computationTime: number;\n    privacyNoise: number;\n  };\n  signature: string;\n  timestamp: Date;\n  encrypted: boolean;\n  encryptionKey?: string;\n}\n\nexport interface DifferentialPrivacyConfig {\n  epsilon: number; // Privacy budget\n  delta: number; // Failure probability\n  noiseType: 'gaussian' | 'laplacian';\n  clippingNorm: number; // Gradient clipping threshold\n  adaptiveNoise: boolean;\n  privacyAccountant: boolean;\n}\n\nexport interface SecureAggregationConfig {\n  threshold: number; // Minimum participants for aggregation\n  polynomialDegree: number;\n  keyAgreementProtocol: 'diffie_hellman' | 'ecdh';\n  homomorphicScheme: 'paillier' | 'elgamal' | 'bfv';\n  verifiableSecretSharing: boolean;\n}\n\nexport interface FederatedLearningConfig {\n  maxRounds: number;\n  minParticipants: number;\n  targetAccuracy: number;\n  convergenceThreshold: number;\n  privacyBudget: number;\n  aggregationStrategy: 'weighted_average' | 'median' | 'trimmed_mean' | 'byzantine_robust';\n  differentialPrivacy: DifferentialPrivacyConfig;\n  secureAggregation: SecureAggregationConfig;\n  consensus: {\n    enabled: boolean;\n    mechanism: 'voting' | 'proof_of_stake' | 'proof_of_contribution';\n    threshold: number;\n  };\n  incentives: {\n    reputationBased: boolean;\n    tokenRewards: boolean;\n    dataContributionBonus: number;\n    qualityMultiplier: number;\n  };\n}\n\nexport class FederatedLearningEngine extends EventEmitter {\n  private nodes: Map<string, FederatedNode>;\n  private activeRounds: Map<string, FederatedRound>;\n  private globalModels: Map<string, tf.LayersModel>;\n  private eventStore: EventStore;\n  private modelTrainingEngine: ModelTrainingEngine;\n  private cache: LRUCache<string, any>;\n  private privacyAccountant: PrivacyAccountant;\n  private consensusEngine: ConsensusEngine;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.nodes = new Map();\n    this.activeRounds = new Map();\n    this.globalModels = new Map();\n    this.eventStore = EventStore.getInstance();\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 30 // 30 minutes\n    });\n    this.privacyAccountant = new PrivacyAccountant();\n    this.consensusEngine = new ConsensusEngine();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('\uD83D\uDD17 Initializing Federated Learning Engine...');\n      \n      // Initialize cryptographic components\n      await this.initializeCryptography();\n      \n      // Load existing nodes and models\n      await this.loadFederatedNodes();\n      await this.loadGlobalModels();\n      \n      // Initialize privacy accountant\n      await this.privacyAccountant.initialize();\n      \n      // Initialize consensus engine\n      await this.consensusEngine.initialize();\n      \n      this.isInitialized = true;\n      console.log('\u2705 Federated Learning Engine initialized successfully');\n      \n      this.emit('initialized', { timestamp: new Date() });\n    } catch (error) {\n      console.error('\u274C Failed to initialize Federated Learning Engine:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new federated node\n   */\n  async registerNode(nodeConfig: Omit<FederatedNode, 'id' | 'lastSeen' | 'contributionHistory'>): Promise<FederatedNode> {\n    const nodeId = `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const node: FederatedNode = {\n      ...nodeConfig,\n      id: nodeId,\n      lastSeen: new Date(),\n      contributionHistory: {\n        roundsParticipated: 0,\n        averageAccuracy: 0,\n        totalDataSamples: 0,\n        reputationScore: 0.5 // Initial neutral reputation\n      }\n    };\n\n    // Validate node capabilities and security\n    await this.validateNode(node);\n    \n    this.nodes.set(nodeId, node);\n    \n    await this.eventStore.recordEvent({\n      event_type: 'federated_node_registered',\n      entity_id: nodeId,\n      entity_type: 'federated_node',\n      data: { node },\n      timestamp: new Date()\n    });\n\n    console.log(`\uD83E\uDD1D Registered new federated node: ${node.name} (${nodeId})`);\n    this.emit('nodeRegistered', { nodeId, node });\n    \n    return node;\n  }\n\n  /**\n   * Start a new federated learning round\n   */\n  async startFederatedRound(\n    modelId: string,\n    config: FederatedLearningConfig\n  ): Promise<FederatedRound> {\n    const roundId = `round_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Get global model\n    const globalModel = this.globalModels.get(modelId);\n    if (!globalModel) {\n      throw new Error(`Global model ${modelId} not found`);\n    }\n\n    // Select participants based on capabilities and trust\n    const participants = await this.selectParticipants(config);\n    \n    if (participants.length < config.minParticipants) {\n      throw new Error(`Insufficient participants: ${participants.length} < ${config.minParticipants}`);\n    }\n\n    const round: FederatedRound = {\n      id: roundId,\n      roundNumber: this.getCurrentRoundNumber(modelId) + 1,\n      globalModel: globalModel,\n      participants: participants.map(p => p.id),\n      aggregationMethod: config.aggregationStrategy === 'weighted_average' ? 'fedavg' : 'fedprox',\n      privacyMechanism: 'differential_privacy',\n      status: 'initializing',\n      startTime: new Date(),\n      modelUpdates: new Map(),\n      aggregatedUpdate: null,\n      performanceMetrics: {\n        accuracy: 0,\n        loss: 0,\n        convergenceRate: 0,\n        participationRate: participants.length / this.getActiveNodes().length,\n        privacyBudgetUsed: 0\n      },\n      consensus: {\n        required: config.consensus.enabled,\n        threshold: config.consensus.threshold,\n        votes: new Map(),\n        approved: false\n      }\n    };\n\n    this.activeRounds.set(roundId, round);\n    \n    // Distribute global model to participants\n    await this.distributeGlobalModel(round, participants);\n    \n    round.status = 'training';\n    \n    await this.eventStore.recordEvent({\n      event_type: 'federated_round_started',\n      entity_id: roundId,\n      entity_type: 'federated_round',\n      data: { round, config },\n      timestamp: new Date()\n    });\n\n    console.log(`\uD83D\uDE80 Started federated round ${round.roundNumber} with ${participants.length} participants`);\n    this.emit('roundStarted', { roundId, round });\n    \n    return round;\n  }\n\n  /**\n   * Submit model update from a federated node\n   */\n  async submitModelUpdate(update: Omit<ModelUpdate, 'signature' | 'timestamp'>): Promise<void> {\n    const round = this.activeRounds.get(update.roundId);\n    if (!round) {\n      throw new Error(`Round ${update.roundId} not found`);\n    }\n\n    if (!round.participants.includes(update.nodeId)) {\n      throw new Error(`Node ${update.nodeId} not authorized for round ${update.roundId}`);\n    }\n\n    // Verify node signature and integrity\n    const signedUpdate = await this.signModelUpdate(update);\n    \n    // Apply differential privacy\n    const privateUpdate = await this.applyDifferentialPrivacy(signedUpdate, round);\n    \n    // Store model update\n    round.modelUpdates.set(update.nodeId, privateUpdate);\n    \n    // Update node contribution history\n    await this.updateNodeContribution(update.nodeId, privateUpdate);\n    \n    await this.eventStore.recordEvent({\n      event_type: 'model_update_submitted',\n      entity_id: update.nodeId,\n      entity_type: 'model_update',\n      data: { roundId: update.roundId, metadata: privateUpdate.metadata },\n      timestamp: new Date()\n    });\n\n    console.log(`\uD83D\uDCE4 Received model update from node ${update.nodeId} for round ${update.roundId}`);\n    this.emit('updateReceived', { roundId: update.roundId, nodeId: update.nodeId });\n    \n    // Check if all participants have submitted updates\n    if (round.modelUpdates.size === round.participants.length) {\n      await this.aggregateModelUpdates(round);\n    }\n  }\n\n  /**\n   * Aggregate model updates using selected algorithm\n   */\n  private async aggregateModelUpdates(round: FederatedRound): Promise<void> {\n    round.status = 'aggregating';\n    \n    console.log(`\uD83D\uDD04 Aggregating ${round.modelUpdates.size} model updates for round ${round.id}`);\n    \n    try {\n      let aggregatedUpdate: ModelUpdate;\n      \n      switch (round.aggregationMethod) {\n        case 'fedavg':\n          aggregatedUpdate = await this.federatedAveraging(round);\n          break;\n        case 'fedprox':\n          aggregatedUpdate = await this.federatedProximal(round);\n          break;\n        case 'fednova':\n          aggregatedUpdate = await this.federatedNova(round);\n          break;\n        case 'scaffold':\n          aggregatedUpdate = await this.scaffoldAggregation(round);\n          break;\n        default:\n          throw new Error(`Unsupported aggregation method: ${round.aggregationMethod}`);\n      }\n      \n      round.aggregatedUpdate = aggregatedUpdate;\n      \n      // Apply consensus mechanism if enabled\n      if (round.consensus.required) {\n        await this.applyConsensus(round);\n      } else {\n        await this.finalizeRound(round);\n      }\n      \n    } catch (error) {\n      round.status = 'failed';\n      console.error(`\u274C Failed to aggregate updates for round ${round.id}:`, error);\n      this.emit('roundFailed', { roundId: round.id, error });\n    }\n  }\n\n  /**\n   * Federated Averaging (FedAvg) aggregation\n   */\n  private async federatedAveraging(round: FederatedRound): Promise<ModelUpdate> {\n    const updates = Array.from(round.modelUpdates.values());\n    const totalSamples = updates.reduce((sum, update) => sum + update.metadata.trainingSamples, 0);\n    \n    // Calculate weighted average of model weights\n    const aggregatedWeights: Float32Array[] = [];\n    \n    for (let layerIndex = 0; layerIndex < updates[0].modelWeights.length; layerIndex++) {\n      const layerSize = updates[0].modelWeights[layerIndex].length;\n      const weightedSum = new Float32Array(layerSize);\n      \n      for (const update of updates) {\n        const weight = update.metadata.trainingSamples / totalSamples;\n        const layerWeights = update.modelWeights[layerIndex];\n        \n        for (let i = 0; i < layerSize; i++) {\n          weightedSum[i] += layerWeights[i] * weight;\n        }\n      }\n      \n      aggregatedWeights.push(weightedSum);\n    }\n    \n    return {\n      nodeId: 'aggregated',\n      roundId: round.id,\n      modelWeights: aggregatedWeights,\n      gradients: aggregatedWeights, // For FedAvg, gradients are the weight updates\n      metadata: {\n        trainingSamples: totalSamples,\n        localEpochs: Math.round(updates.reduce((sum, u) => sum + u.metadata.localEpochs, 0) / updates.length),\n        localLoss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n        localAccuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n        computationTime: Math.max(...updates.map(u => u.metadata.computationTime)),\n        privacyNoise: updates.reduce((sum, u) => sum + u.metadata.privacyNoise, 0) / updates.length\n      },\n      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n      timestamp: new Date(),\n      encrypted: false\n    };\n  }\n\n  /**\n   * Federated Proximal (FedProx) aggregation with proximal term\n   */\n  private async federatedProximal(round: FederatedRound, mu: number = 0.01): Promise<ModelUpdate> {\n    const updates = Array.from(round.modelUpdates.values());\n    const totalSamples = updates.reduce((sum, update) => sum + update.metadata.trainingSamples, 0);\n    \n    // Get global model weights\n    const globalWeights = await this.getModelWeights(round.globalModel);\n    \n    // Calculate FedProx aggregation with proximal term\n    const aggregatedWeights: Float32Array[] = [];\n    \n    for (let layerIndex = 0; layerIndex < globalWeights.length; layerIndex++) {\n      const layerSize = globalWeights[layerIndex].length;\n      const weightedSum = new Float32Array(layerSize);\n      \n      for (const update of updates) {\n        const weight = update.metadata.trainingSamples / totalSamples;\n        const layerWeights = update.modelWeights[layerIndex];\n        const globalLayerWeights = globalWeights[layerIndex];\n        \n        for (let i = 0; i < layerSize; i++) {\n          // Apply proximal term: w_i - mu * (w_i - w_global)\n          const proximalTerm = layerWeights[i] - mu * (layerWeights[i] - globalLayerWeights[i]);\n          weightedSum[i] += proximalTerm * weight;\n        }\n      }\n      \n      aggregatedWeights.push(weightedSum);\n    }\n    \n    return {\n      nodeId: 'aggregated_fedprox',\n      roundId: round.id,\n      modelWeights: aggregatedWeights,\n      gradients: aggregatedWeights,\n      metadata: {\n        trainingSamples: totalSamples,\n        localEpochs: Math.round(updates.reduce((sum, u) => sum + u.metadata.localEpochs, 0) / updates.length),\n        localLoss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n        localAccuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n        computationTime: Math.max(...updates.map(u => u.metadata.computationTime)),\n        privacyNoise: updates.reduce((sum, u) => sum + u.metadata.privacyNoise, 0) / updates.length\n      },\n      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n      timestamp: new Date(),\n      encrypted: false\n    };\n  }\n\n  /**\n   * FedNova aggregation with normalized averaging\n   */\n  private async federatedNova(round: FederatedRound): Promise<ModelUpdate> {\n    const updates = Array.from(round.modelUpdates.values());\n    \n    // Calculate normalized weights based on local steps\n    const totalEffectiveSteps = updates.reduce((sum, update) => {\n      return sum + (update.metadata.localEpochs * update.metadata.trainingSamples);\n    }, 0);\n    \n    const aggregatedWeights: Float32Array[] = [];\n    \n    for (let layerIndex = 0; layerIndex < updates[0].modelWeights.length; layerIndex++) {\n      const layerSize = updates[0].modelWeights[layerIndex].length;\n      const weightedSum = new Float32Array(layerSize);\n      \n      for (const update of updates) {\n        const normalizedWeight = (update.metadata.localEpochs * update.metadata.trainingSamples) / totalEffectiveSteps;\n        const layerWeights = update.modelWeights[layerIndex];\n        \n        for (let i = 0; i < layerSize; i++) {\n          weightedSum[i] += layerWeights[i] * normalizedWeight;\n        }\n      }\n      \n      aggregatedWeights.push(weightedSum);\n    }\n    \n    return {\n      nodeId: 'aggregated_fednova',\n      roundId: round.id,\n      modelWeights: aggregatedWeights,\n      gradients: aggregatedWeights,\n      metadata: {\n        trainingSamples: updates.reduce((sum, u) => sum + u.metadata.trainingSamples, 0),\n        localEpochs: Math.round(updates.reduce((sum, u) => sum + u.metadata.localEpochs, 0) / updates.length),\n        localLoss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n        localAccuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n        computationTime: Math.max(...updates.map(u => u.metadata.computationTime)),\n        privacyNoise: updates.reduce((sum, u) => sum + u.metadata.privacyNoise, 0) / updates.length\n      },\n      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n      timestamp: new Date(),\n      encrypted: false\n    };\n  }\n\n  /**\n   * SCAFFOLD aggregation with control variates\n   */\n  private async scaffoldAggregation(round: FederatedRound): Promise<ModelUpdate> {\n    // Simplified SCAFFOLD implementation\n    // In practice, this would maintain control variates for variance reduction\n    return await this.federatedAveraging(round);\n  }\n\n  /**\n   * Apply differential privacy to model updates\n   */\n  private async applyDifferentialPrivacy(\n    update: ModelUpdate,\n    round: FederatedRound\n  ): Promise<ModelUpdate> {\n    const node = this.nodes.get(update.nodeId);\n    if (!node) {\n      throw new Error(`Node ${update.nodeId} not found`);\n    }\n\n    const epsilon = node.privacyPreferences.differentialPrivacyEpsilon;\n    const noiseVariance = node.privacyPreferences.noiseVariance;\n    const clippingNorm = node.privacyPreferences.gradientClipping;\n    \n    // Apply gradient clipping\n    const clippedWeights = this.clipGradients(update.modelWeights, clippingNorm);\n    \n    // Add Gaussian noise for differential privacy\n    const noisyWeights = this.addGaussianNoise(clippedWeights, noiseVariance);\n    \n    // Update privacy accountant\n    await this.privacyAccountant.addNoiseEvent(update.nodeId, epsilon, noiseVariance);\n    \n    return {\n      ...update,\n      modelWeights: noisyWeights,\n      metadata: {\n        ...update.metadata,\n        privacyNoise: noiseVariance\n      }\n    };\n  }\n\n  /**\n   * Apply consensus mechanism\n   */\n  private async applyConsensus(round: FederatedRound): Promise<void> {\n    console.log(`\uD83D\uDDF3\uFE0F Applying consensus for round ${round.id}`);\n    \n    // Collect votes from participating nodes\n    for (const nodeId of round.participants) {\n      const vote = await this.collectNodeVote(nodeId, round);\n      round.consensus.votes.set(nodeId, vote);\n    }\n    \n    // Calculate consensus\n    const approvalCount = Array.from(round.consensus.votes.values()).filter(vote => vote).length;\n    const approvalRate = approvalCount / round.participants.length;\n    \n    round.consensus.approved = approvalRate >= round.consensus.threshold;\n    \n    if (round.consensus.approved) {\n      await this.finalizeRound(round);\n    } else {\n      round.status = 'failed';\n      console.log(`\u274C Consensus failed for round ${round.id}: ${approvalRate} < ${round.consensus.threshold}`);\n      this.emit('consensusFailed', { roundId: round.id, approvalRate });\n    }\n  }\n\n  /**\n   * Finalize federated round\n   */\n  private async finalizeRound(round: FederatedRound): Promise<void> {\n    if (!round.aggregatedUpdate) {\n      throw new Error('No aggregated update available');\n    }\n    \n    // Update global model with aggregated weights\n    await this.updateGlobalModel(round.globalModel, round.aggregatedUpdate);\n    \n    // Calculate performance metrics\n    round.performanceMetrics = await this.calculateRoundMetrics(round);\n    \n    round.status = 'completed';\n    round.endTime = new Date();\n    \n    // Update node reputations\n    await this.updateNodeReputations(round);\n    \n    await this.eventStore.recordEvent({\n      event_type: 'federated_round_completed',\n      entity_id: round.id,\n      entity_type: 'federated_round',\n      data: { \n        round: {\n          ...round,\n          globalModel: undefined // Don't serialize the model\n        }\n      },\n      timestamp: new Date()\n    });\n\n    console.log(`\u2705 Completed federated round ${round.roundNumber} with accuracy: ${round.performanceMetrics.accuracy.toFixed(4)}`);\n    this.emit('roundCompleted', { roundId: round.id, metrics: round.performanceMetrics });\n    \n    // Remove from active rounds\n    this.activeRounds.delete(round.id);\n  }\n\n  // Helper methods for coordination\n  private async initializeCryptography(): Promise<void> {\n    // Initialize cryptographic primitives for secure communication\n    console.log('\uD83D\uDD10 Initializing cryptographic components...');\n  }\n\n  private async loadFederatedNodes(): Promise<void> {\n    // Load existing federated nodes from storage\n    console.log('\uD83D\uDC65 Loading federated nodes...');\n  }\n\n  private async loadGlobalModels(): Promise<void> {\n    // Load global models from storage\n    console.log('\uD83E\uDDE0 Loading global models...');\n  }\n\n  private async validateNode(node: FederatedNode): Promise<void> {\n    // Validate node capabilities and security credentials\n    if (node.capabilities.trustScore < 0.3) {\n      throw new Error('Node trust score too low');\n    }\n  }\n\n  private async selectParticipants(config: FederatedLearningConfig): Promise<FederatedNode[]> {\n    const activeNodes = this.getActiveNodes();\n    \n    // Select nodes based on trust score, capabilities, and reputation\n    return activeNodes\n      .filter(node => node.capabilities.trustScore >= 0.5)\n      .sort((a, b) => {\n        const scoreA = a.capabilities.trustScore * 0.4 + \n                     a.contributionHistory.reputationScore * 0.3 +\n                     a.capabilities.computePower * 0.3;\n        const scoreB = b.capabilities.trustScore * 0.4 + \n                     b.contributionHistory.reputationScore * 0.3 +\n                     b.capabilities.computePower * 0.3;\n        return scoreB - scoreA;\n      })\n      .slice(0, Math.min(config.minParticipants * 2, activeNodes.length));\n  }\n\n  private getActiveNodes(): FederatedNode[] {\n    return Array.from(this.nodes.values()).filter(node => node.status === 'active');\n  }\n\n  private getCurrentRoundNumber(modelId: string): number {\n    // Get current round number for model\n    return 0; // Simplified implementation\n  }\n\n  private async distributeGlobalModel(round: FederatedRound, participants: FederatedNode[]): Promise<void> {\n    // Distribute global model to participating nodes\n    console.log(`\uD83D\uDCE1 Distributing global model to ${participants.length} participants`);\n  }\n\n  private async signModelUpdate(update: Omit<ModelUpdate, 'signature' | 'timestamp'>): Promise<ModelUpdate> {\n    const signature = createHash('sha256')\n      .update(JSON.stringify({ ...update, modelWeights: 'hashed' }))\n      .digest('hex');\n    \n    return {\n      ...update,\n      signature,\n      timestamp: new Date()\n    };\n  }\n\n  private async updateNodeContribution(nodeId: string, update: ModelUpdate): Promise<void> {\n    const node = this.nodes.get(nodeId);\n    if (node) {\n      node.contributionHistory.roundsParticipated += 1;\n      node.contributionHistory.totalDataSamples += update.metadata.trainingSamples;\n      node.contributionHistory.averageAccuracy = \n        (node.contributionHistory.averageAccuracy + update.metadata.localAccuracy) / 2;\n      node.lastSeen = new Date();\n    }\n  }\n\n  private async getModelWeights(model: tf.LayersModel): Promise<Float32Array[]> {\n    const weights = model.getWeights();\n    return weights.map(tensor => tensor.dataSync() as Float32Array);\n  }\n\n  private clipGradients(weights: Float32Array[], clippingNorm: number): Float32Array[] {\n    const totalNorm = Math.sqrt(\n      weights.reduce((sum, layer) => {\n        return sum + layer.reduce((layerSum, weight) => layerSum + weight * weight, 0);\n      }, 0)\n    );\n    \n    if (totalNorm > clippingNorm) {\n      const scaleFactor = clippingNorm / totalNorm;\n      return weights.map(layer => \n        layer.map(weight => weight * scaleFactor) as Float32Array\n      );\n    }\n    \n    return weights;\n  }\n\n  private addGaussianNoise(weights: Float32Array[], variance: number): Float32Array[] {\n    return weights.map(layer => {\n      const noisyLayer = new Float32Array(layer.length);\n      for (let i = 0; i < layer.length; i++) {\n        // Box-Muller transform for Gaussian noise\n        const u1 = Math.random();\n        const u2 = Math.random();\n        const noise = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2) * Math.sqrt(variance);\n        noisyLayer[i] = layer[i] + noise;\n      }\n      return noisyLayer;\n    });\n  }\n\n  private async generateAggregatedSignature(roundId: string, weights: Float32Array[]): Promise<string> {\n    return createHash('sha256')\n      .update(roundId + JSON.stringify(weights.map(w => Array.from(w.slice(0, 10)))))\n      .digest('hex');\n  }\n\n  private async collectNodeVote(nodeId: string, round: FederatedRound): Promise<boolean> {\n    // In practice, this would query the node for its vote on the aggregated update\n    // For now, return a random vote with bias towards approval\n    return Math.random() > 0.2; // 80% approval rate\n  }\n\n  private async updateGlobalModel(model: tf.LayersModel, update: ModelUpdate): Promise<void> {\n    // Apply aggregated weights to global model\n    const currentWeights = model.getWeights();\n    const newWeights = update.modelWeights.map((layerWeights, index) => {\n      return tf.tensor(layerWeights, currentWeights[index].shape);\n    });\n    \n    model.setWeights(newWeights);\n    \n    // Dispose old tensors\n    currentWeights.forEach(tensor => tensor.dispose());\n  }\n\n  private async calculateRoundMetrics(round: FederatedRound): Promise<FederatedRound['performanceMetrics']> {\n    const updates = Array.from(round.modelUpdates.values());\n    \n    return {\n      accuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n      loss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n      convergenceRate: 0.95, // Simplified calculation\n      participationRate: round.modelUpdates.size / round.participants.length,\n      privacyBudgetUsed: await this.privacyAccountant.getTotalBudgetUsed()\n    };\n  }\n\n  private async updateNodeReputations(round: FederatedRound): Promise<void> {\n    for (const [nodeId, update] of round.modelUpdates) {\n      const node = this.nodes.get(nodeId);\n      if (node) {\n        // Update reputation based on contribution quality\n        const qualityScore = update.metadata.localAccuracy * 0.7 + \n                           (1 - update.metadata.localLoss) * 0.3;\n        node.contributionHistory.reputationScore = \n          (node.contributionHistory.reputationScore * 0.9) + (qualityScore * 0.1);\n      }\n    }\n  }\n}\n\n/**\n * Privacy Accountant for tracking differential privacy budget\n */\nclass PrivacyAccountant {\n  private budgetUsage: Map<string, number> = new Map();\n  private noiseEvents: Array<{ nodeId: string; epsilon: number; timestamp: Date }> = [];\n\n  async initialize(): Promise<void> {\n    console.log('\uD83D\uDD12 Privacy Accountant initialized');\n  }\n\n  async addNoiseEvent(nodeId: string, epsilon: number, variance: number): Promise<void> {\n    const currentBudget = this.budgetUsage.get(nodeId) || 0;\n    this.budgetUsage.set(nodeId, currentBudget + epsilon);\n    \n    this.noiseEvents.push({\n      nodeId,\n      epsilon,\n      timestamp: new Date()\n    });\n  }\n\n  async getTotalBudgetUsed(): Promise<number> {\n    return Array.from(this.budgetUsage.values()).reduce((sum, budget) => sum + budget, 0);\n  }\n\n  async getNodeBudgetUsed(nodeId: string): Promise<number> {\n    return this.budgetUsage.get(nodeId) || 0;\n  }\n}\n\n/**\n * Consensus Engine for distributed decision making\n */\nclass ConsensusEngine {\n  async initialize(): Promise<void> {\n    console.log('\uD83E\uDD1D Consensus Engine initialized');\n  }\n\n  async validateConsensus(votes: Map<string, boolean>, threshold: number): Promise<boolean> {\n    const approvalCount = Array.from(votes.values()).filter(vote => vote).length;\n    return (approvalCount / votes.size) >= threshold;\n  }\n}\n\n// Export singleton instance\nexport const federatedLearningEngine = new FederatedLearningEngine();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "db7c153eea80507f0ce58b6dd11db30bbd447f13"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yoo2cjud7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yoo2cjud7();
var __createBinding =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[0]++,
/* istanbul ignore next */
(cov_1yoo2cjud7().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1yoo2cjud7().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1yoo2cjud7().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1yoo2cjud7().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1yoo2cjud7().f[0]++;
  cov_1yoo2cjud7().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().b[2][0]++;
    cov_1yoo2cjud7().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1yoo2cjud7().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1yoo2cjud7().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1yoo2cjud7().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[5][1]++,
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().b[3][0]++;
    cov_1yoo2cjud7().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1yoo2cjud7().f[1]++;
        cov_1yoo2cjud7().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1yoo2cjud7().b[3][1]++;
  }
  cov_1yoo2cjud7().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1yoo2cjud7().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1yoo2cjud7().f[2]++;
  cov_1yoo2cjud7().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().b[7][0]++;
    cov_1yoo2cjud7().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1yoo2cjud7().b[7][1]++;
  }
  cov_1yoo2cjud7().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[11]++,
/* istanbul ignore next */
(cov_1yoo2cjud7().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1yoo2cjud7().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1yoo2cjud7().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1yoo2cjud7().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1yoo2cjud7().f[3]++;
  cov_1yoo2cjud7().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1yoo2cjud7().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1yoo2cjud7().f[4]++;
  cov_1yoo2cjud7().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[14]++,
/* istanbul ignore next */
(cov_1yoo2cjud7().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1yoo2cjud7().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1yoo2cjud7().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1yoo2cjud7().f[5]++;
  cov_1yoo2cjud7().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[6]++;
    cov_1yoo2cjud7().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[17]++, []);
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[12][0]++;
          cov_1yoo2cjud7().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1yoo2cjud7().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1yoo2cjud7().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[8]++;
    cov_1yoo2cjud7().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[13][0]++;
      cov_1yoo2cjud7().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[26]++, {});
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[15][0]++;
      cov_1yoo2cjud7().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[16][0]++;
          cov_1yoo2cjud7().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1yoo2cjud7().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[15][1]++;
    }
    cov_1yoo2cjud7().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1yoo2cjud7().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1yoo2cjud7().s[36]++;
exports.federatedLearningEngine = exports.FederatedLearningEngine = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[37]++, require("events"));
const tf =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[38]++, __importStar(require("@tensorflow/tfjs-node")));
const crypto_1 =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[39]++, require("crypto"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[40]++, require("lru-cache"));
const EventStore_1 =
/* istanbul ignore next */
(cov_1yoo2cjud7().s[41]++, require("../analytics/EventStore"));
class FederatedLearningEngine extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[9]++;
    cov_1yoo2cjud7().s[42]++;
    super();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[43]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[44]++;
    this.nodes = new Map();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[45]++;
    this.activeRounds = new Map();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[46]++;
    this.globalModels = new Map();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[47]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[48]++;
    this.cache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 30 // 30 minutes
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[49]++;
    this.privacyAccountant = new PrivacyAccountant();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[50]++;
    this.consensusEngine = new ConsensusEngine();
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[10]++;
    cov_1yoo2cjud7().s[51]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[17][0]++;
      cov_1yoo2cjud7().s[52]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[17][1]++;
    }
    cov_1yoo2cjud7().s[53]++;
    try {
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[54]++;
      console.log('🔗 Initializing Federated Learning Engine...');
      // Initialize cryptographic components
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[55]++;
      await this.initializeCryptography();
      // Load existing nodes and models
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[56]++;
      await this.loadFederatedNodes();
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[57]++;
      await this.loadGlobalModels();
      // Initialize privacy accountant
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[58]++;
      await this.privacyAccountant.initialize();
      // Initialize consensus engine
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[59]++;
      await this.consensusEngine.initialize();
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[60]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[61]++;
      console.log('✅ Federated Learning Engine initialized successfully');
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[62]++;
      this.emit('initialized', {
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[63]++;
      console.error('❌ Failed to initialize Federated Learning Engine:', error);
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[64]++;
      throw error;
    }
  }
  /**
   * Register a new federated node
   */
  async registerNode(nodeConfig) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[11]++;
    const nodeId =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[65]++, `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const node =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[66]++, {
      ...nodeConfig,
      id: nodeId,
      lastSeen: new Date(),
      contributionHistory: {
        roundsParticipated: 0,
        averageAccuracy: 0,
        totalDataSamples: 0,
        reputationScore: 0.5 // Initial neutral reputation
      }
    });
    // Validate node capabilities and security
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[67]++;
    await this.validateNode(node);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[68]++;
    this.nodes.set(nodeId, node);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[69]++;
    await this.eventStore.recordEvent({
      event_type: 'federated_node_registered',
      entity_id: nodeId,
      entity_type: 'federated_node',
      data: {
        node
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[70]++;
    console.log(`🤝 Registered new federated node: ${node.name} (${nodeId})`);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[71]++;
    this.emit('nodeRegistered', {
      nodeId,
      node
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[72]++;
    return node;
  }
  /**
   * Start a new federated learning round
   */
  async startFederatedRound(modelId, config) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[12]++;
    const roundId =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[73]++, `round_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    // Get global model
    const globalModel =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[74]++, this.globalModels.get(modelId));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[75]++;
    if (!globalModel) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[18][0]++;
      cov_1yoo2cjud7().s[76]++;
      throw new Error(`Global model ${modelId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[18][1]++;
    }
    // Select participants based on capabilities and trust
    const participants =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[77]++, await this.selectParticipants(config));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[78]++;
    if (participants.length < config.minParticipants) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[19][0]++;
      cov_1yoo2cjud7().s[79]++;
      throw new Error(`Insufficient participants: ${participants.length} < ${config.minParticipants}`);
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[19][1]++;
    }
    const round =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[80]++, {
      id: roundId,
      roundNumber: this.getCurrentRoundNumber(modelId) + 1,
      globalModel: globalModel,
      participants: participants.map(p => {
        /* istanbul ignore next */
        cov_1yoo2cjud7().f[13]++;
        cov_1yoo2cjud7().s[81]++;
        return p.id;
      }),
      aggregationMethod: config.aggregationStrategy === 'weighted_average' ?
      /* istanbul ignore next */
      (cov_1yoo2cjud7().b[20][0]++, 'fedavg') :
      /* istanbul ignore next */
      (cov_1yoo2cjud7().b[20][1]++, 'fedprox'),
      privacyMechanism: 'differential_privacy',
      status: 'initializing',
      startTime: new Date(),
      modelUpdates: new Map(),
      aggregatedUpdate: null,
      performanceMetrics: {
        accuracy: 0,
        loss: 0,
        convergenceRate: 0,
        participationRate: participants.length / this.getActiveNodes().length,
        privacyBudgetUsed: 0
      },
      consensus: {
        required: config.consensus.enabled,
        threshold: config.consensus.threshold,
        votes: new Map(),
        approved: false
      }
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[82]++;
    this.activeRounds.set(roundId, round);
    // Distribute global model to participants
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[83]++;
    await this.distributeGlobalModel(round, participants);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[84]++;
    round.status = 'training';
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[85]++;
    await this.eventStore.recordEvent({
      event_type: 'federated_round_started',
      entity_id: roundId,
      entity_type: 'federated_round',
      data: {
        round,
        config
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[86]++;
    console.log(`🚀 Started federated round ${round.roundNumber} with ${participants.length} participants`);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[87]++;
    this.emit('roundStarted', {
      roundId,
      round
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[88]++;
    return round;
  }
  /**
   * Submit model update from a federated node
   */
  async submitModelUpdate(update) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[14]++;
    const round =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[89]++, this.activeRounds.get(update.roundId));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[90]++;
    if (!round) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[21][0]++;
      cov_1yoo2cjud7().s[91]++;
      throw new Error(`Round ${update.roundId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[21][1]++;
    }
    cov_1yoo2cjud7().s[92]++;
    if (!round.participants.includes(update.nodeId)) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[22][0]++;
      cov_1yoo2cjud7().s[93]++;
      throw new Error(`Node ${update.nodeId} not authorized for round ${update.roundId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[22][1]++;
    }
    // Verify node signature and integrity
    const signedUpdate =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[94]++, await this.signModelUpdate(update));
    // Apply differential privacy
    const privateUpdate =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[95]++, await this.applyDifferentialPrivacy(signedUpdate, round));
    // Store model update
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[96]++;
    round.modelUpdates.set(update.nodeId, privateUpdate);
    // Update node contribution history
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[97]++;
    await this.updateNodeContribution(update.nodeId, privateUpdate);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[98]++;
    await this.eventStore.recordEvent({
      event_type: 'model_update_submitted',
      entity_id: update.nodeId,
      entity_type: 'model_update',
      data: {
        roundId: update.roundId,
        metadata: privateUpdate.metadata
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[99]++;
    console.log(`📤 Received model update from node ${update.nodeId} for round ${update.roundId}`);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[100]++;
    this.emit('updateReceived', {
      roundId: update.roundId,
      nodeId: update.nodeId
    });
    // Check if all participants have submitted updates
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[101]++;
    if (round.modelUpdates.size === round.participants.length) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[23][0]++;
      cov_1yoo2cjud7().s[102]++;
      await this.aggregateModelUpdates(round);
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[23][1]++;
    }
  }
  /**
   * Aggregate model updates using selected algorithm
   */
  async aggregateModelUpdates(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[15]++;
    cov_1yoo2cjud7().s[103]++;
    round.status = 'aggregating';
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[104]++;
    console.log(`🔄 Aggregating ${round.modelUpdates.size} model updates for round ${round.id}`);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[105]++;
    try {
      let aggregatedUpdate;
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[106]++;
      switch (round.aggregationMethod) {
        case 'fedavg':
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[24][0]++;
          cov_1yoo2cjud7().s[107]++;
          aggregatedUpdate = await this.federatedAveraging(round);
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[108]++;
          break;
        case 'fedprox':
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[24][1]++;
          cov_1yoo2cjud7().s[109]++;
          aggregatedUpdate = await this.federatedProximal(round);
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[110]++;
          break;
        case 'fednova':
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[24][2]++;
          cov_1yoo2cjud7().s[111]++;
          aggregatedUpdate = await this.federatedNova(round);
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[112]++;
          break;
        case 'scaffold':
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[24][3]++;
          cov_1yoo2cjud7().s[113]++;
          aggregatedUpdate = await this.scaffoldAggregation(round);
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[114]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1yoo2cjud7().b[24][4]++;
          cov_1yoo2cjud7().s[115]++;
          throw new Error(`Unsupported aggregation method: ${round.aggregationMethod}`);
      }
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[116]++;
      round.aggregatedUpdate = aggregatedUpdate;
      // Apply consensus mechanism if enabled
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[117]++;
      if (round.consensus.required) {
        /* istanbul ignore next */
        cov_1yoo2cjud7().b[25][0]++;
        cov_1yoo2cjud7().s[118]++;
        await this.applyConsensus(round);
      } else {
        /* istanbul ignore next */
        cov_1yoo2cjud7().b[25][1]++;
        cov_1yoo2cjud7().s[119]++;
        await this.finalizeRound(round);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[120]++;
      round.status = 'failed';
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[121]++;
      console.error(`❌ Failed to aggregate updates for round ${round.id}:`, error);
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[122]++;
      this.emit('roundFailed', {
        roundId: round.id,
        error
      });
    }
  }
  /**
   * Federated Averaging (FedAvg) aggregation
   */
  async federatedAveraging(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[16]++;
    const updates =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[123]++, Array.from(round.modelUpdates.values()));
    const totalSamples =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[124]++, updates.reduce((sum, update) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[17]++;
      cov_1yoo2cjud7().s[125]++;
      return sum + update.metadata.trainingSamples;
    }, 0));
    // Calculate weighted average of model weights
    const aggregatedWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[126]++, []);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[127]++;
    for (let layerIndex =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[128]++, 0); layerIndex < updates[0].modelWeights.length; layerIndex++) {
      const layerSize =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[129]++, updates[0].modelWeights[layerIndex].length);
      const weightedSum =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[130]++, new Float32Array(layerSize));
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[131]++;
      for (const update of updates) {
        const weight =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[132]++, update.metadata.trainingSamples / totalSamples);
        const layerWeights =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[133]++, update.modelWeights[layerIndex]);
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[134]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[135]++, 0); i < layerSize; i++) {
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[136]++;
          weightedSum[i] += layerWeights[i] * weight;
        }
      }
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[137]++;
      aggregatedWeights.push(weightedSum);
    }
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[138]++;
    return {
      nodeId: 'aggregated',
      roundId: round.id,
      modelWeights: aggregatedWeights,
      gradients: aggregatedWeights,
      // For FedAvg, gradients are the weight updates
      metadata: {
        trainingSamples: totalSamples,
        localEpochs: Math.round(updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[18]++;
          cov_1yoo2cjud7().s[139]++;
          return sum + u.metadata.localEpochs;
        }, 0) / updates.length),
        localLoss: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[19]++;
          cov_1yoo2cjud7().s[140]++;
          return sum + u.metadata.localLoss;
        }, 0) / updates.length,
        localAccuracy: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[20]++;
          cov_1yoo2cjud7().s[141]++;
          return sum + u.metadata.localAccuracy;
        }, 0) / updates.length,
        computationTime: Math.max(...updates.map(u => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[21]++;
          cov_1yoo2cjud7().s[142]++;
          return u.metadata.computationTime;
        })),
        privacyNoise: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[22]++;
          cov_1yoo2cjud7().s[143]++;
          return sum + u.metadata.privacyNoise;
        }, 0) / updates.length
      },
      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),
      timestamp: new Date(),
      encrypted: false
    };
  }
  /**
   * Federated Proximal (FedProx) aggregation with proximal term
   */
  async federatedProximal(round, mu =
  /* istanbul ignore next */
  (cov_1yoo2cjud7().b[26][0]++, 0.01)) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[23]++;
    const updates =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[144]++, Array.from(round.modelUpdates.values()));
    const totalSamples =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[145]++, updates.reduce((sum, update) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[24]++;
      cov_1yoo2cjud7().s[146]++;
      return sum + update.metadata.trainingSamples;
    }, 0));
    // Get global model weights
    const globalWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[147]++, await this.getModelWeights(round.globalModel));
    // Calculate FedProx aggregation with proximal term
    const aggregatedWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[148]++, []);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[149]++;
    for (let layerIndex =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[150]++, 0); layerIndex < globalWeights.length; layerIndex++) {
      const layerSize =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[151]++, globalWeights[layerIndex].length);
      const weightedSum =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[152]++, new Float32Array(layerSize));
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[153]++;
      for (const update of updates) {
        const weight =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[154]++, update.metadata.trainingSamples / totalSamples);
        const layerWeights =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[155]++, update.modelWeights[layerIndex]);
        const globalLayerWeights =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[156]++, globalWeights[layerIndex]);
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[157]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[158]++, 0); i < layerSize; i++) {
          // Apply proximal term: w_i - mu * (w_i - w_global)
          const proximalTerm =
          /* istanbul ignore next */
          (cov_1yoo2cjud7().s[159]++, layerWeights[i] - mu * (layerWeights[i] - globalLayerWeights[i]));
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[160]++;
          weightedSum[i] += proximalTerm * weight;
        }
      }
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[161]++;
      aggregatedWeights.push(weightedSum);
    }
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[162]++;
    return {
      nodeId: 'aggregated_fedprox',
      roundId: round.id,
      modelWeights: aggregatedWeights,
      gradients: aggregatedWeights,
      metadata: {
        trainingSamples: totalSamples,
        localEpochs: Math.round(updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[25]++;
          cov_1yoo2cjud7().s[163]++;
          return sum + u.metadata.localEpochs;
        }, 0) / updates.length),
        localLoss: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[26]++;
          cov_1yoo2cjud7().s[164]++;
          return sum + u.metadata.localLoss;
        }, 0) / updates.length,
        localAccuracy: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[27]++;
          cov_1yoo2cjud7().s[165]++;
          return sum + u.metadata.localAccuracy;
        }, 0) / updates.length,
        computationTime: Math.max(...updates.map(u => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[28]++;
          cov_1yoo2cjud7().s[166]++;
          return u.metadata.computationTime;
        })),
        privacyNoise: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[29]++;
          cov_1yoo2cjud7().s[167]++;
          return sum + u.metadata.privacyNoise;
        }, 0) / updates.length
      },
      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),
      timestamp: new Date(),
      encrypted: false
    };
  }
  /**
   * FedNova aggregation with normalized averaging
   */
  async federatedNova(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[30]++;
    const updates =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[168]++, Array.from(round.modelUpdates.values()));
    // Calculate normalized weights based on local steps
    const totalEffectiveSteps =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[169]++, updates.reduce((sum, update) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[31]++;
      cov_1yoo2cjud7().s[170]++;
      return sum + update.metadata.localEpochs * update.metadata.trainingSamples;
    }, 0));
    const aggregatedWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[171]++, []);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[172]++;
    for (let layerIndex =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[173]++, 0); layerIndex < updates[0].modelWeights.length; layerIndex++) {
      const layerSize =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[174]++, updates[0].modelWeights[layerIndex].length);
      const weightedSum =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[175]++, new Float32Array(layerSize));
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[176]++;
      for (const update of updates) {
        const normalizedWeight =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[177]++, update.metadata.localEpochs * update.metadata.trainingSamples / totalEffectiveSteps);
        const layerWeights =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[178]++, update.modelWeights[layerIndex]);
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[179]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[180]++, 0); i < layerSize; i++) {
          /* istanbul ignore next */
          cov_1yoo2cjud7().s[181]++;
          weightedSum[i] += layerWeights[i] * normalizedWeight;
        }
      }
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[182]++;
      aggregatedWeights.push(weightedSum);
    }
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[183]++;
    return {
      nodeId: 'aggregated_fednova',
      roundId: round.id,
      modelWeights: aggregatedWeights,
      gradients: aggregatedWeights,
      metadata: {
        trainingSamples: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[32]++;
          cov_1yoo2cjud7().s[184]++;
          return sum + u.metadata.trainingSamples;
        }, 0),
        localEpochs: Math.round(updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[33]++;
          cov_1yoo2cjud7().s[185]++;
          return sum + u.metadata.localEpochs;
        }, 0) / updates.length),
        localLoss: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[34]++;
          cov_1yoo2cjud7().s[186]++;
          return sum + u.metadata.localLoss;
        }, 0) / updates.length,
        localAccuracy: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[35]++;
          cov_1yoo2cjud7().s[187]++;
          return sum + u.metadata.localAccuracy;
        }, 0) / updates.length,
        computationTime: Math.max(...updates.map(u => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[36]++;
          cov_1yoo2cjud7().s[188]++;
          return u.metadata.computationTime;
        })),
        privacyNoise: updates.reduce((sum, u) => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[37]++;
          cov_1yoo2cjud7().s[189]++;
          return sum + u.metadata.privacyNoise;
        }, 0) / updates.length
      },
      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),
      timestamp: new Date(),
      encrypted: false
    };
  }
  /**
   * SCAFFOLD aggregation with control variates
   */
  async scaffoldAggregation(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[38]++;
    cov_1yoo2cjud7().s[190]++;
    // Simplified SCAFFOLD implementation
    // In practice, this would maintain control variates for variance reduction
    return await this.federatedAveraging(round);
  }
  /**
   * Apply differential privacy to model updates
   */
  async applyDifferentialPrivacy(update, round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[39]++;
    const node =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[191]++, this.nodes.get(update.nodeId));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[192]++;
    if (!node) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[27][0]++;
      cov_1yoo2cjud7().s[193]++;
      throw new Error(`Node ${update.nodeId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[27][1]++;
    }
    const epsilon =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[194]++, node.privacyPreferences.differentialPrivacyEpsilon);
    const noiseVariance =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[195]++, node.privacyPreferences.noiseVariance);
    const clippingNorm =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[196]++, node.privacyPreferences.gradientClipping);
    // Apply gradient clipping
    const clippedWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[197]++, this.clipGradients(update.modelWeights, clippingNorm));
    // Add Gaussian noise for differential privacy
    const noisyWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[198]++, this.addGaussianNoise(clippedWeights, noiseVariance));
    // Update privacy accountant
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[199]++;
    await this.privacyAccountant.addNoiseEvent(update.nodeId, epsilon, noiseVariance);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[200]++;
    return {
      ...update,
      modelWeights: noisyWeights,
      metadata: {
        ...update.metadata,
        privacyNoise: noiseVariance
      }
    };
  }
  /**
   * Apply consensus mechanism
   */
  async applyConsensus(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[40]++;
    cov_1yoo2cjud7().s[201]++;
    console.log(`🗳️ Applying consensus for round ${round.id}`);
    // Collect votes from participating nodes
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[202]++;
    for (const nodeId of round.participants) {
      const vote =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[203]++, await this.collectNodeVote(nodeId, round));
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[204]++;
      round.consensus.votes.set(nodeId, vote);
    }
    // Calculate consensus
    const approvalCount =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[205]++, Array.from(round.consensus.votes.values()).filter(vote => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[41]++;
      cov_1yoo2cjud7().s[206]++;
      return vote;
    }).length);
    const approvalRate =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[207]++, approvalCount / round.participants.length);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[208]++;
    round.consensus.approved = approvalRate >= round.consensus.threshold;
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[209]++;
    if (round.consensus.approved) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[28][0]++;
      cov_1yoo2cjud7().s[210]++;
      await this.finalizeRound(round);
    } else {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[28][1]++;
      cov_1yoo2cjud7().s[211]++;
      round.status = 'failed';
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[212]++;
      console.log(`❌ Consensus failed for round ${round.id}: ${approvalRate} < ${round.consensus.threshold}`);
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[213]++;
      this.emit('consensusFailed', {
        roundId: round.id,
        approvalRate
      });
    }
  }
  /**
   * Finalize federated round
   */
  async finalizeRound(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[42]++;
    cov_1yoo2cjud7().s[214]++;
    if (!round.aggregatedUpdate) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[29][0]++;
      cov_1yoo2cjud7().s[215]++;
      throw new Error('No aggregated update available');
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[29][1]++;
    }
    // Update global model with aggregated weights
    cov_1yoo2cjud7().s[216]++;
    await this.updateGlobalModel(round.globalModel, round.aggregatedUpdate);
    // Calculate performance metrics
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[217]++;
    round.performanceMetrics = await this.calculateRoundMetrics(round);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[218]++;
    round.status = 'completed';
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[219]++;
    round.endTime = new Date();
    // Update node reputations
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[220]++;
    await this.updateNodeReputations(round);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[221]++;
    await this.eventStore.recordEvent({
      event_type: 'federated_round_completed',
      entity_id: round.id,
      entity_type: 'federated_round',
      data: {
        round: {
          ...round,
          globalModel: undefined // Don't serialize the model
        }
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[222]++;
    console.log(`✅ Completed federated round ${round.roundNumber} with accuracy: ${round.performanceMetrics.accuracy.toFixed(4)}`);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[223]++;
    this.emit('roundCompleted', {
      roundId: round.id,
      metrics: round.performanceMetrics
    });
    // Remove from active rounds
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[224]++;
    this.activeRounds.delete(round.id);
  }
  // Helper methods for coordination
  async initializeCryptography() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[43]++;
    cov_1yoo2cjud7().s[225]++;
    // Initialize cryptographic primitives for secure communication
    console.log('🔐 Initializing cryptographic components...');
  }
  async loadFederatedNodes() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[44]++;
    cov_1yoo2cjud7().s[226]++;
    // Load existing federated nodes from storage
    console.log('👥 Loading federated nodes...');
  }
  async loadGlobalModels() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[45]++;
    cov_1yoo2cjud7().s[227]++;
    // Load global models from storage
    console.log('🧠 Loading global models...');
  }
  async validateNode(node) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[46]++;
    cov_1yoo2cjud7().s[228]++;
    // Validate node capabilities and security credentials
    if (node.capabilities.trustScore < 0.3) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[30][0]++;
      cov_1yoo2cjud7().s[229]++;
      throw new Error('Node trust score too low');
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[30][1]++;
    }
  }
  async selectParticipants(config) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[47]++;
    const activeNodes =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[230]++, this.getActiveNodes());
    // Select nodes based on trust score, capabilities, and reputation
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[231]++;
    return activeNodes.filter(node => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[48]++;
      cov_1yoo2cjud7().s[232]++;
      return node.capabilities.trustScore >= 0.5;
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[49]++;
      const scoreA =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[233]++, a.capabilities.trustScore * 0.4 + a.contributionHistory.reputationScore * 0.3 + a.capabilities.computePower * 0.3);
      const scoreB =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[234]++, b.capabilities.trustScore * 0.4 + b.contributionHistory.reputationScore * 0.3 + b.capabilities.computePower * 0.3);
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[235]++;
      return scoreB - scoreA;
    }).slice(0, Math.min(config.minParticipants * 2, activeNodes.length));
  }
  getActiveNodes() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[50]++;
    cov_1yoo2cjud7().s[236]++;
    return Array.from(this.nodes.values()).filter(node => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[51]++;
      cov_1yoo2cjud7().s[237]++;
      return node.status === 'active';
    });
  }
  getCurrentRoundNumber(modelId) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[52]++;
    cov_1yoo2cjud7().s[238]++;
    // Get current round number for model
    return 0; // Simplified implementation
  }
  async distributeGlobalModel(round, participants) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[53]++;
    cov_1yoo2cjud7().s[239]++;
    // Distribute global model to participating nodes
    console.log(`📡 Distributing global model to ${participants.length} participants`);
  }
  async signModelUpdate(update) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[54]++;
    const signature =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[240]++, (0, crypto_1.createHash)('sha256').update(JSON.stringify({
      ...update,
      modelWeights: 'hashed'
    })).digest('hex'));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[241]++;
    return {
      ...update,
      signature,
      timestamp: new Date()
    };
  }
  async updateNodeContribution(nodeId, update) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[55]++;
    const node =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[242]++, this.nodes.get(nodeId));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[243]++;
    if (node) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[31][0]++;
      cov_1yoo2cjud7().s[244]++;
      node.contributionHistory.roundsParticipated += 1;
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[245]++;
      node.contributionHistory.totalDataSamples += update.metadata.trainingSamples;
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[246]++;
      node.contributionHistory.averageAccuracy = (node.contributionHistory.averageAccuracy + update.metadata.localAccuracy) / 2;
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[247]++;
      node.lastSeen = new Date();
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[31][1]++;
    }
  }
  async getModelWeights(model) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[56]++;
    const weights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[248]++, model.getWeights());
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[249]++;
    return weights.map(tensor => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[57]++;
      cov_1yoo2cjud7().s[250]++;
      return tensor.dataSync();
    });
  }
  clipGradients(weights, clippingNorm) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[58]++;
    const totalNorm =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[251]++, Math.sqrt(weights.reduce((sum, layer) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[59]++;
      cov_1yoo2cjud7().s[252]++;
      return sum + layer.reduce((layerSum, weight) => {
        /* istanbul ignore next */
        cov_1yoo2cjud7().f[60]++;
        cov_1yoo2cjud7().s[253]++;
        return layerSum + weight * weight;
      }, 0);
    }, 0)));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[254]++;
    if (totalNorm > clippingNorm) {
      /* istanbul ignore next */
      cov_1yoo2cjud7().b[32][0]++;
      const scaleFactor =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[255]++, clippingNorm / totalNorm);
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[256]++;
      return weights.map(layer => {
        /* istanbul ignore next */
        cov_1yoo2cjud7().f[61]++;
        cov_1yoo2cjud7().s[257]++;
        return layer.map(weight => {
          /* istanbul ignore next */
          cov_1yoo2cjud7().f[62]++;
          cov_1yoo2cjud7().s[258]++;
          return weight * scaleFactor;
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_1yoo2cjud7().b[32][1]++;
    }
    cov_1yoo2cjud7().s[259]++;
    return weights;
  }
  addGaussianNoise(weights, variance) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[63]++;
    cov_1yoo2cjud7().s[260]++;
    return weights.map(layer => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[64]++;
      const noisyLayer =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[261]++, new Float32Array(layer.length));
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[262]++;
      for (let i =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[263]++, 0); i < layer.length; i++) {
        // Box-Muller transform for Gaussian noise
        const u1 =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[264]++, Math.random());
        const u2 =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[265]++, Math.random());
        const noise =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[266]++, Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2) * Math.sqrt(variance));
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[267]++;
        noisyLayer[i] = layer[i] + noise;
      }
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[268]++;
      return noisyLayer;
    });
  }
  async generateAggregatedSignature(roundId, weights) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[65]++;
    cov_1yoo2cjud7().s[269]++;
    return (0, crypto_1.createHash)('sha256').update(roundId + JSON.stringify(weights.map(w => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[66]++;
      cov_1yoo2cjud7().s[270]++;
      return Array.from(w.slice(0, 10));
    }))).digest('hex');
  }
  async collectNodeVote(nodeId, round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[67]++;
    cov_1yoo2cjud7().s[271]++;
    // In practice, this would query the node for its vote on the aggregated update
    // For now, return a random vote with bias towards approval
    return Math.random() > 0.2; // 80% approval rate
  }
  async updateGlobalModel(model, update) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[68]++;
    // Apply aggregated weights to global model
    const currentWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[272]++, model.getWeights());
    const newWeights =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[273]++, update.modelWeights.map((layerWeights, index) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[69]++;
      cov_1yoo2cjud7().s[274]++;
      return tf.tensor(layerWeights, currentWeights[index].shape);
    }));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[275]++;
    model.setWeights(newWeights);
    // Dispose old tensors
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[276]++;
    currentWeights.forEach(tensor => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[70]++;
      cov_1yoo2cjud7().s[277]++;
      return tensor.dispose();
    });
  }
  async calculateRoundMetrics(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[71]++;
    const updates =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[278]++, Array.from(round.modelUpdates.values()));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[279]++;
    return {
      accuracy: updates.reduce((sum, u) => {
        /* istanbul ignore next */
        cov_1yoo2cjud7().f[72]++;
        cov_1yoo2cjud7().s[280]++;
        return sum + u.metadata.localAccuracy;
      }, 0) / updates.length,
      loss: updates.reduce((sum, u) => {
        /* istanbul ignore next */
        cov_1yoo2cjud7().f[73]++;
        cov_1yoo2cjud7().s[281]++;
        return sum + u.metadata.localLoss;
      }, 0) / updates.length,
      convergenceRate: 0.95,
      // Simplified calculation
      participationRate: round.modelUpdates.size / round.participants.length,
      privacyBudgetUsed: await this.privacyAccountant.getTotalBudgetUsed()
    };
  }
  async updateNodeReputations(round) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[74]++;
    cov_1yoo2cjud7().s[282]++;
    for (const [nodeId, update] of round.modelUpdates) {
      const node =
      /* istanbul ignore next */
      (cov_1yoo2cjud7().s[283]++, this.nodes.get(nodeId));
      /* istanbul ignore next */
      cov_1yoo2cjud7().s[284]++;
      if (node) {
        /* istanbul ignore next */
        cov_1yoo2cjud7().b[33][0]++;
        // Update reputation based on contribution quality
        const qualityScore =
        /* istanbul ignore next */
        (cov_1yoo2cjud7().s[285]++, update.metadata.localAccuracy * 0.7 + (1 - update.metadata.localLoss) * 0.3);
        /* istanbul ignore next */
        cov_1yoo2cjud7().s[286]++;
        node.contributionHistory.reputationScore = node.contributionHistory.reputationScore * 0.9 + qualityScore * 0.1;
      } else
      /* istanbul ignore next */
      {
        cov_1yoo2cjud7().b[33][1]++;
      }
    }
  }
}
/* istanbul ignore next */
cov_1yoo2cjud7().s[287]++;
exports.FederatedLearningEngine = FederatedLearningEngine;
/**
 * Privacy Accountant for tracking differential privacy budget
 */
class PrivacyAccountant {
  constructor() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[75]++;
    cov_1yoo2cjud7().s[288]++;
    this.budgetUsage = new Map();
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[289]++;
    this.noiseEvents = [];
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[76]++;
    cov_1yoo2cjud7().s[290]++;
    console.log('🔒 Privacy Accountant initialized');
  }
  async addNoiseEvent(nodeId, epsilon, variance) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[77]++;
    const currentBudget =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[291]++,
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[34][0]++, this.budgetUsage.get(nodeId)) ||
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[34][1]++, 0));
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[292]++;
    this.budgetUsage.set(nodeId, currentBudget + epsilon);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[293]++;
    this.noiseEvents.push({
      nodeId,
      epsilon,
      timestamp: new Date()
    });
  }
  async getTotalBudgetUsed() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[78]++;
    cov_1yoo2cjud7().s[294]++;
    return Array.from(this.budgetUsage.values()).reduce((sum, budget) => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[79]++;
      cov_1yoo2cjud7().s[295]++;
      return sum + budget;
    }, 0);
  }
  async getNodeBudgetUsed(nodeId) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[80]++;
    cov_1yoo2cjud7().s[296]++;
    return /* istanbul ignore next */(cov_1yoo2cjud7().b[35][0]++, this.budgetUsage.get(nodeId)) ||
    /* istanbul ignore next */
    (cov_1yoo2cjud7().b[35][1]++, 0);
  }
}
/**
 * Consensus Engine for distributed decision making
 */
class ConsensusEngine {
  async initialize() {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[81]++;
    cov_1yoo2cjud7().s[297]++;
    console.log('🤝 Consensus Engine initialized');
  }
  async validateConsensus(votes, threshold) {
    /* istanbul ignore next */
    cov_1yoo2cjud7().f[82]++;
    const approvalCount =
    /* istanbul ignore next */
    (cov_1yoo2cjud7().s[298]++, Array.from(votes.values()).filter(vote => {
      /* istanbul ignore next */
      cov_1yoo2cjud7().f[83]++;
      cov_1yoo2cjud7().s[299]++;
      return vote;
    }).length);
    /* istanbul ignore next */
    cov_1yoo2cjud7().s[300]++;
    return approvalCount / votes.size >= threshold;
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_1yoo2cjud7().s[301]++;
exports.federatedLearningEngine = new FederatedLearningEngine();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,