{"version":3,"names":["events_1","cov_1yoo2cjud7","s","require","tf","__importStar","crypto_1","lru_cache_1","EventStore_1","FederatedLearningEngine","EventEmitter","constructor","f","isInitialized","nodes","Map","activeRounds","globalModels","eventStore","EventStore","getInstance","cache","LRUCache","max","ttl","privacyAccountant","PrivacyAccountant","consensusEngine","ConsensusEngine","initialize","b","console","log","initializeCryptography","loadFederatedNodes","loadGlobalModels","emit","timestamp","Date","error","registerNode","nodeConfig","nodeId","now","Math","random","toString","substr","node","id","lastSeen","contributionHistory","roundsParticipated","averageAccuracy","totalDataSamples","reputationScore","validateNode","set","recordEvent","event_type","entity_id","entity_type","data","name","startFederatedRound","modelId","config","roundId","globalModel","get","Error","participants","selectParticipants","length","minParticipants","round","roundNumber","getCurrentRoundNumber","map","p","aggregationMethod","aggregationStrategy","privacyMechanism","status","startTime","modelUpdates","aggregatedUpdate","performanceMetrics","accuracy","loss","convergenceRate","participationRate","getActiveNodes","privacyBudgetUsed","consensus","required","enabled","threshold","votes","approved","distributeGlobalModel","submitModelUpdate","update","includes","signedUpdate","signModelUpdate","privateUpdate","applyDifferentialPrivacy","updateNodeContribution","metadata","size","aggregateModelUpdates","federatedAveraging","federatedProximal","federatedNova","scaffoldAggregation","applyConsensus","finalizeRound","updates","Array","from","values","totalSamples","reduce","sum","trainingSamples","aggregatedWeights","layerIndex","modelWeights","layerSize","weightedSum","Float32Array","weight","layerWeights","i","push","gradients","localEpochs","u","localLoss","localAccuracy","computationTime","privacyNoise","signature","generateAggregatedSignature","encrypted","mu","globalWeights","getModelWeights","globalLayerWeights","proximalTerm","totalEffectiveSteps","normalizedWeight","epsilon","privacyPreferences","differentialPrivacyEpsilon","noiseVariance","clippingNorm","gradientClipping","clippedWeights","clipGradients","noisyWeights","addGaussianNoise","addNoiseEvent","vote","collectNodeVote","approvalCount","filter","approvalRate","updateGlobalModel","calculateRoundMetrics","endTime","updateNodeReputations","undefined","toFixed","metrics","delete","capabilities","trustScore","activeNodes","sort","a","scoreA","computePower","scoreB","slice","min","createHash","JSON","stringify","digest","model","weights","getWeights","tensor","dataSync","totalNorm","sqrt","layer","layerSum","scaleFactor","variance","noisyLayer","u1","u2","noise","cos","PI","w","currentWeights","newWeights","index","shape","setWeights","forEach","dispose","getTotalBudgetUsed","qualityScore","exports","budgetUsage","noiseEvents","currentBudget","budget","getNodeBudgetUsed","validateConsensus","federatedLearningEngine"],"sources":["/workspaces/prompt-card-system/backend/src/services/ml/FederatedLearningEngine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport * as tf from '@tensorflow/tfjs-node';\nimport { createHash, randomBytes, createCipher, createDecipher, pbkdf2Sync } from 'crypto';\nimport { LRUCache } from 'lru-cache';\nimport { EventStore } from '../analytics/EventStore';\nimport { ModelTrainingEngine } from '../training/ModelTrainingEngine';\n\nexport interface FederatedNode {\n  id: string;\n  name: string;\n  endpoint: string;\n  publicKey: string;\n  capabilities: {\n    computePower: number; // FLOPS rating\n    memoryCapacity: number; // GB\n    bandwidthCapacity: number; // Mbps\n    trustScore: number; // 0-1\n    dataQuality: number; // 0-1\n  };\n  status: 'active' | 'inactive' | 'training' | 'offline';\n  lastSeen: Date;\n  contributionHistory: {\n    roundsParticipated: number;\n    averageAccuracy: number;\n    totalDataSamples: number;\n    reputationScore: number;\n  };\n  privacyPreferences: {\n    differentialPrivacyEpsilon: number;\n    noiseVariance: number;\n    gradientClipping: number;\n    secureBatchSize: number;\n  };\n}\n\nexport interface FederatedRound {\n  id: string;\n  roundNumber: number;\n  globalModel: tf.LayersModel;\n  participants: string[]; // Node IDs\n  aggregationMethod: 'fedavg' | 'fedprox' | 'fednova' | 'scaffold';\n  privacyMechanism: 'differential_privacy' | 'secure_aggregation' | 'homomorphic';\n  status: 'initializing' | 'training' | 'aggregating' | 'completed' | 'failed';\n  startTime: Date;\n  endTime?: Date;\n  modelUpdates: Map<string, ModelUpdate>;\n  aggregatedUpdate: ModelUpdate | null;\n  performanceMetrics: {\n    accuracy: number;\n    loss: number;\n    convergenceRate: number;\n    participationRate: number;\n    privacyBudgetUsed: number;\n  };\n  consensus: {\n    required: boolean;\n    threshold: number;\n    votes: Map<string, boolean>;\n    approved: boolean;\n  };\n}\n\nexport interface ModelUpdate {\n  nodeId: string;\n  roundId: string;\n  modelWeights: Float32Array[];\n  gradients: Float32Array[];\n  metadata: {\n    trainingSamples: number;\n    localEpochs: number;\n    localLoss: number;\n    localAccuracy: number;\n    computationTime: number;\n    privacyNoise: number;\n  };\n  signature: string;\n  timestamp: Date;\n  encrypted: boolean;\n  encryptionKey?: string;\n}\n\nexport interface DifferentialPrivacyConfig {\n  epsilon: number; // Privacy budget\n  delta: number; // Failure probability\n  noiseType: 'gaussian' | 'laplacian';\n  clippingNorm: number; // Gradient clipping threshold\n  adaptiveNoise: boolean;\n  privacyAccountant: boolean;\n}\n\nexport interface SecureAggregationConfig {\n  threshold: number; // Minimum participants for aggregation\n  polynomialDegree: number;\n  keyAgreementProtocol: 'diffie_hellman' | 'ecdh';\n  homomorphicScheme: 'paillier' | 'elgamal' | 'bfv';\n  verifiableSecretSharing: boolean;\n}\n\nexport interface FederatedLearningConfig {\n  maxRounds: number;\n  minParticipants: number;\n  targetAccuracy: number;\n  convergenceThreshold: number;\n  privacyBudget: number;\n  aggregationStrategy: 'weighted_average' | 'median' | 'trimmed_mean' | 'byzantine_robust';\n  differentialPrivacy: DifferentialPrivacyConfig;\n  secureAggregation: SecureAggregationConfig;\n  consensus: {\n    enabled: boolean;\n    mechanism: 'voting' | 'proof_of_stake' | 'proof_of_contribution';\n    threshold: number;\n  };\n  incentives: {\n    reputationBased: boolean;\n    tokenRewards: boolean;\n    dataContributionBonus: number;\n    qualityMultiplier: number;\n  };\n}\n\nexport class FederatedLearningEngine extends EventEmitter {\n  private nodes: Map<string, FederatedNode>;\n  private activeRounds: Map<string, FederatedRound>;\n  private globalModels: Map<string, tf.LayersModel>;\n  private eventStore: EventStore;\n  private modelTrainingEngine: ModelTrainingEngine;\n  private cache: LRUCache<string, any>;\n  private privacyAccountant: PrivacyAccountant;\n  private consensusEngine: ConsensusEngine;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.nodes = new Map();\n    this.activeRounds = new Map();\n    this.globalModels = new Map();\n    this.eventStore = EventStore.getInstance();\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 30 // 30 minutes\n    });\n    this.privacyAccountant = new PrivacyAccountant();\n    this.consensusEngine = new ConsensusEngine();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('üîó Initializing Federated Learning Engine...');\n      \n      // Initialize cryptographic components\n      await this.initializeCryptography();\n      \n      // Load existing nodes and models\n      await this.loadFederatedNodes();\n      await this.loadGlobalModels();\n      \n      // Initialize privacy accountant\n      await this.privacyAccountant.initialize();\n      \n      // Initialize consensus engine\n      await this.consensusEngine.initialize();\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Federated Learning Engine initialized successfully');\n      \n      this.emit('initialized', { timestamp: new Date() });\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Federated Learning Engine:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new federated node\n   */\n  async registerNode(nodeConfig: Omit<FederatedNode, 'id' | 'lastSeen' | 'contributionHistory'>): Promise<FederatedNode> {\n    const nodeId = `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const node: FederatedNode = {\n      ...nodeConfig,\n      id: nodeId,\n      lastSeen: new Date(),\n      contributionHistory: {\n        roundsParticipated: 0,\n        averageAccuracy: 0,\n        totalDataSamples: 0,\n        reputationScore: 0.5 // Initial neutral reputation\n      }\n    };\n\n    // Validate node capabilities and security\n    await this.validateNode(node);\n    \n    this.nodes.set(nodeId, node);\n    \n    await this.eventStore.recordEvent({\n      event_type: 'federated_node_registered',\n      entity_id: nodeId,\n      entity_type: 'federated_node',\n      data: { node },\n      timestamp: new Date()\n    });\n\n    console.log(`ü§ù Registered new federated node: ${node.name} (${nodeId})`);\n    this.emit('nodeRegistered', { nodeId, node });\n    \n    return node;\n  }\n\n  /**\n   * Start a new federated learning round\n   */\n  async startFederatedRound(\n    modelId: string,\n    config: FederatedLearningConfig\n  ): Promise<FederatedRound> {\n    const roundId = `round_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Get global model\n    const globalModel = this.globalModels.get(modelId);\n    if (!globalModel) {\n      throw new Error(`Global model ${modelId} not found`);\n    }\n\n    // Select participants based on capabilities and trust\n    const participants = await this.selectParticipants(config);\n    \n    if (participants.length < config.minParticipants) {\n      throw new Error(`Insufficient participants: ${participants.length} < ${config.minParticipants}`);\n    }\n\n    const round: FederatedRound = {\n      id: roundId,\n      roundNumber: this.getCurrentRoundNumber(modelId) + 1,\n      globalModel: globalModel,\n      participants: participants.map(p => p.id),\n      aggregationMethod: config.aggregationStrategy === 'weighted_average' ? 'fedavg' : 'fedprox',\n      privacyMechanism: 'differential_privacy',\n      status: 'initializing',\n      startTime: new Date(),\n      modelUpdates: new Map(),\n      aggregatedUpdate: null,\n      performanceMetrics: {\n        accuracy: 0,\n        loss: 0,\n        convergenceRate: 0,\n        participationRate: participants.length / this.getActiveNodes().length,\n        privacyBudgetUsed: 0\n      },\n      consensus: {\n        required: config.consensus.enabled,\n        threshold: config.consensus.threshold,\n        votes: new Map(),\n        approved: false\n      }\n    };\n\n    this.activeRounds.set(roundId, round);\n    \n    // Distribute global model to participants\n    await this.distributeGlobalModel(round, participants);\n    \n    round.status = 'training';\n    \n    await this.eventStore.recordEvent({\n      event_type: 'federated_round_started',\n      entity_id: roundId,\n      entity_type: 'federated_round',\n      data: { round, config },\n      timestamp: new Date()\n    });\n\n    console.log(`üöÄ Started federated round ${round.roundNumber} with ${participants.length} participants`);\n    this.emit('roundStarted', { roundId, round });\n    \n    return round;\n  }\n\n  /**\n   * Submit model update from a federated node\n   */\n  async submitModelUpdate(update: Omit<ModelUpdate, 'signature' | 'timestamp'>): Promise<void> {\n    const round = this.activeRounds.get(update.roundId);\n    if (!round) {\n      throw new Error(`Round ${update.roundId} not found`);\n    }\n\n    if (!round.participants.includes(update.nodeId)) {\n      throw new Error(`Node ${update.nodeId} not authorized for round ${update.roundId}`);\n    }\n\n    // Verify node signature and integrity\n    const signedUpdate = await this.signModelUpdate(update);\n    \n    // Apply differential privacy\n    const privateUpdate = await this.applyDifferentialPrivacy(signedUpdate, round);\n    \n    // Store model update\n    round.modelUpdates.set(update.nodeId, privateUpdate);\n    \n    // Update node contribution history\n    await this.updateNodeContribution(update.nodeId, privateUpdate);\n    \n    await this.eventStore.recordEvent({\n      event_type: 'model_update_submitted',\n      entity_id: update.nodeId,\n      entity_type: 'model_update',\n      data: { roundId: update.roundId, metadata: privateUpdate.metadata },\n      timestamp: new Date()\n    });\n\n    console.log(`üì§ Received model update from node ${update.nodeId} for round ${update.roundId}`);\n    this.emit('updateReceived', { roundId: update.roundId, nodeId: update.nodeId });\n    \n    // Check if all participants have submitted updates\n    if (round.modelUpdates.size === round.participants.length) {\n      await this.aggregateModelUpdates(round);\n    }\n  }\n\n  /**\n   * Aggregate model updates using selected algorithm\n   */\n  private async aggregateModelUpdates(round: FederatedRound): Promise<void> {\n    round.status = 'aggregating';\n    \n    console.log(`üîÑ Aggregating ${round.modelUpdates.size} model updates for round ${round.id}`);\n    \n    try {\n      let aggregatedUpdate: ModelUpdate;\n      \n      switch (round.aggregationMethod) {\n        case 'fedavg':\n          aggregatedUpdate = await this.federatedAveraging(round);\n          break;\n        case 'fedprox':\n          aggregatedUpdate = await this.federatedProximal(round);\n          break;\n        case 'fednova':\n          aggregatedUpdate = await this.federatedNova(round);\n          break;\n        case 'scaffold':\n          aggregatedUpdate = await this.scaffoldAggregation(round);\n          break;\n        default:\n          throw new Error(`Unsupported aggregation method: ${round.aggregationMethod}`);\n      }\n      \n      round.aggregatedUpdate = aggregatedUpdate;\n      \n      // Apply consensus mechanism if enabled\n      if (round.consensus.required) {\n        await this.applyConsensus(round);\n      } else {\n        await this.finalizeRound(round);\n      }\n      \n    } catch (error) {\n      round.status = 'failed';\n      console.error(`‚ùå Failed to aggregate updates for round ${round.id}:`, error);\n      this.emit('roundFailed', { roundId: round.id, error });\n    }\n  }\n\n  /**\n   * Federated Averaging (FedAvg) aggregation\n   */\n  private async federatedAveraging(round: FederatedRound): Promise<ModelUpdate> {\n    const updates = Array.from(round.modelUpdates.values());\n    const totalSamples = updates.reduce((sum, update) => sum + update.metadata.trainingSamples, 0);\n    \n    // Calculate weighted average of model weights\n    const aggregatedWeights: Float32Array[] = [];\n    \n    for (let layerIndex = 0; layerIndex < updates[0].modelWeights.length; layerIndex++) {\n      const layerSize = updates[0].modelWeights[layerIndex].length;\n      const weightedSum = new Float32Array(layerSize);\n      \n      for (const update of updates) {\n        const weight = update.metadata.trainingSamples / totalSamples;\n        const layerWeights = update.modelWeights[layerIndex];\n        \n        for (let i = 0; i < layerSize; i++) {\n          weightedSum[i] += layerWeights[i] * weight;\n        }\n      }\n      \n      aggregatedWeights.push(weightedSum);\n    }\n    \n    return {\n      nodeId: 'aggregated',\n      roundId: round.id,\n      modelWeights: aggregatedWeights,\n      gradients: aggregatedWeights, // For FedAvg, gradients are the weight updates\n      metadata: {\n        trainingSamples: totalSamples,\n        localEpochs: Math.round(updates.reduce((sum, u) => sum + u.metadata.localEpochs, 0) / updates.length),\n        localLoss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n        localAccuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n        computationTime: Math.max(...updates.map(u => u.metadata.computationTime)),\n        privacyNoise: updates.reduce((sum, u) => sum + u.metadata.privacyNoise, 0) / updates.length\n      },\n      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n      timestamp: new Date(),\n      encrypted: false\n    };\n  }\n\n  /**\n   * Federated Proximal (FedProx) aggregation with proximal term\n   */\n  private async federatedProximal(round: FederatedRound, mu: number = 0.01): Promise<ModelUpdate> {\n    const updates = Array.from(round.modelUpdates.values());\n    const totalSamples = updates.reduce((sum, update) => sum + update.metadata.trainingSamples, 0);\n    \n    // Get global model weights\n    const globalWeights = await this.getModelWeights(round.globalModel);\n    \n    // Calculate FedProx aggregation with proximal term\n    const aggregatedWeights: Float32Array[] = [];\n    \n    for (let layerIndex = 0; layerIndex < globalWeights.length; layerIndex++) {\n      const layerSize = globalWeights[layerIndex].length;\n      const weightedSum = new Float32Array(layerSize);\n      \n      for (const update of updates) {\n        const weight = update.metadata.trainingSamples / totalSamples;\n        const layerWeights = update.modelWeights[layerIndex];\n        const globalLayerWeights = globalWeights[layerIndex];\n        \n        for (let i = 0; i < layerSize; i++) {\n          // Apply proximal term: w_i - mu * (w_i - w_global)\n          const proximalTerm = layerWeights[i] - mu * (layerWeights[i] - globalLayerWeights[i]);\n          weightedSum[i] += proximalTerm * weight;\n        }\n      }\n      \n      aggregatedWeights.push(weightedSum);\n    }\n    \n    return {\n      nodeId: 'aggregated_fedprox',\n      roundId: round.id,\n      modelWeights: aggregatedWeights,\n      gradients: aggregatedWeights,\n      metadata: {\n        trainingSamples: totalSamples,\n        localEpochs: Math.round(updates.reduce((sum, u) => sum + u.metadata.localEpochs, 0) / updates.length),\n        localLoss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n        localAccuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n        computationTime: Math.max(...updates.map(u => u.metadata.computationTime)),\n        privacyNoise: updates.reduce((sum, u) => sum + u.metadata.privacyNoise, 0) / updates.length\n      },\n      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n      timestamp: new Date(),\n      encrypted: false\n    };\n  }\n\n  /**\n   * FedNova aggregation with normalized averaging\n   */\n  private async federatedNova(round: FederatedRound): Promise<ModelUpdate> {\n    const updates = Array.from(round.modelUpdates.values());\n    \n    // Calculate normalized weights based on local steps\n    const totalEffectiveSteps = updates.reduce((sum, update) => {\n      return sum + (update.metadata.localEpochs * update.metadata.trainingSamples);\n    }, 0);\n    \n    const aggregatedWeights: Float32Array[] = [];\n    \n    for (let layerIndex = 0; layerIndex < updates[0].modelWeights.length; layerIndex++) {\n      const layerSize = updates[0].modelWeights[layerIndex].length;\n      const weightedSum = new Float32Array(layerSize);\n      \n      for (const update of updates) {\n        const normalizedWeight = (update.metadata.localEpochs * update.metadata.trainingSamples) / totalEffectiveSteps;\n        const layerWeights = update.modelWeights[layerIndex];\n        \n        for (let i = 0; i < layerSize; i++) {\n          weightedSum[i] += layerWeights[i] * normalizedWeight;\n        }\n      }\n      \n      aggregatedWeights.push(weightedSum);\n    }\n    \n    return {\n      nodeId: 'aggregated_fednova',\n      roundId: round.id,\n      modelWeights: aggregatedWeights,\n      gradients: aggregatedWeights,\n      metadata: {\n        trainingSamples: updates.reduce((sum, u) => sum + u.metadata.trainingSamples, 0),\n        localEpochs: Math.round(updates.reduce((sum, u) => sum + u.metadata.localEpochs, 0) / updates.length),\n        localLoss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n        localAccuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n        computationTime: Math.max(...updates.map(u => u.metadata.computationTime)),\n        privacyNoise: updates.reduce((sum, u) => sum + u.metadata.privacyNoise, 0) / updates.length\n      },\n      signature: await this.generateAggregatedSignature(round.id, aggregatedWeights),\n      timestamp: new Date(),\n      encrypted: false\n    };\n  }\n\n  /**\n   * SCAFFOLD aggregation with control variates\n   */\n  private async scaffoldAggregation(round: FederatedRound): Promise<ModelUpdate> {\n    // Simplified SCAFFOLD implementation\n    // In practice, this would maintain control variates for variance reduction\n    return await this.federatedAveraging(round);\n  }\n\n  /**\n   * Apply differential privacy to model updates\n   */\n  private async applyDifferentialPrivacy(\n    update: ModelUpdate,\n    round: FederatedRound\n  ): Promise<ModelUpdate> {\n    const node = this.nodes.get(update.nodeId);\n    if (!node) {\n      throw new Error(`Node ${update.nodeId} not found`);\n    }\n\n    const epsilon = node.privacyPreferences.differentialPrivacyEpsilon;\n    const noiseVariance = node.privacyPreferences.noiseVariance;\n    const clippingNorm = node.privacyPreferences.gradientClipping;\n    \n    // Apply gradient clipping\n    const clippedWeights = this.clipGradients(update.modelWeights, clippingNorm);\n    \n    // Add Gaussian noise for differential privacy\n    const noisyWeights = this.addGaussianNoise(clippedWeights, noiseVariance);\n    \n    // Update privacy accountant\n    await this.privacyAccountant.addNoiseEvent(update.nodeId, epsilon, noiseVariance);\n    \n    return {\n      ...update,\n      modelWeights: noisyWeights,\n      metadata: {\n        ...update.metadata,\n        privacyNoise: noiseVariance\n      }\n    };\n  }\n\n  /**\n   * Apply consensus mechanism\n   */\n  private async applyConsensus(round: FederatedRound): Promise<void> {\n    console.log(`üó≥Ô∏è Applying consensus for round ${round.id}`);\n    \n    // Collect votes from participating nodes\n    for (const nodeId of round.participants) {\n      const vote = await this.collectNodeVote(nodeId, round);\n      round.consensus.votes.set(nodeId, vote);\n    }\n    \n    // Calculate consensus\n    const approvalCount = Array.from(round.consensus.votes.values()).filter(vote => vote).length;\n    const approvalRate = approvalCount / round.participants.length;\n    \n    round.consensus.approved = approvalRate >= round.consensus.threshold;\n    \n    if (round.consensus.approved) {\n      await this.finalizeRound(round);\n    } else {\n      round.status = 'failed';\n      console.log(`‚ùå Consensus failed for round ${round.id}: ${approvalRate} < ${round.consensus.threshold}`);\n      this.emit('consensusFailed', { roundId: round.id, approvalRate });\n    }\n  }\n\n  /**\n   * Finalize federated round\n   */\n  private async finalizeRound(round: FederatedRound): Promise<void> {\n    if (!round.aggregatedUpdate) {\n      throw new Error('No aggregated update available');\n    }\n    \n    // Update global model with aggregated weights\n    await this.updateGlobalModel(round.globalModel, round.aggregatedUpdate);\n    \n    // Calculate performance metrics\n    round.performanceMetrics = await this.calculateRoundMetrics(round);\n    \n    round.status = 'completed';\n    round.endTime = new Date();\n    \n    // Update node reputations\n    await this.updateNodeReputations(round);\n    \n    await this.eventStore.recordEvent({\n      event_type: 'federated_round_completed',\n      entity_id: round.id,\n      entity_type: 'federated_round',\n      data: { \n        round: {\n          ...round,\n          globalModel: undefined // Don't serialize the model\n        }\n      },\n      timestamp: new Date()\n    });\n\n    console.log(`‚úÖ Completed federated round ${round.roundNumber} with accuracy: ${round.performanceMetrics.accuracy.toFixed(4)}`);\n    this.emit('roundCompleted', { roundId: round.id, metrics: round.performanceMetrics });\n    \n    // Remove from active rounds\n    this.activeRounds.delete(round.id);\n  }\n\n  // Helper methods for coordination\n  private async initializeCryptography(): Promise<void> {\n    // Initialize cryptographic primitives for secure communication\n    console.log('üîê Initializing cryptographic components...');\n  }\n\n  private async loadFederatedNodes(): Promise<void> {\n    // Load existing federated nodes from storage\n    console.log('üë• Loading federated nodes...');\n  }\n\n  private async loadGlobalModels(): Promise<void> {\n    // Load global models from storage\n    console.log('üß† Loading global models...');\n  }\n\n  private async validateNode(node: FederatedNode): Promise<void> {\n    // Validate node capabilities and security credentials\n    if (node.capabilities.trustScore < 0.3) {\n      throw new Error('Node trust score too low');\n    }\n  }\n\n  private async selectParticipants(config: FederatedLearningConfig): Promise<FederatedNode[]> {\n    const activeNodes = this.getActiveNodes();\n    \n    // Select nodes based on trust score, capabilities, and reputation\n    return activeNodes\n      .filter(node => node.capabilities.trustScore >= 0.5)\n      .sort((a, b) => {\n        const scoreA = a.capabilities.trustScore * 0.4 + \n                     a.contributionHistory.reputationScore * 0.3 +\n                     a.capabilities.computePower * 0.3;\n        const scoreB = b.capabilities.trustScore * 0.4 + \n                     b.contributionHistory.reputationScore * 0.3 +\n                     b.capabilities.computePower * 0.3;\n        return scoreB - scoreA;\n      })\n      .slice(0, Math.min(config.minParticipants * 2, activeNodes.length));\n  }\n\n  private getActiveNodes(): FederatedNode[] {\n    return Array.from(this.nodes.values()).filter(node => node.status === 'active');\n  }\n\n  private getCurrentRoundNumber(modelId: string): number {\n    // Get current round number for model\n    return 0; // Simplified implementation\n  }\n\n  private async distributeGlobalModel(round: FederatedRound, participants: FederatedNode[]): Promise<void> {\n    // Distribute global model to participating nodes\n    console.log(`üì° Distributing global model to ${participants.length} participants`);\n  }\n\n  private async signModelUpdate(update: Omit<ModelUpdate, 'signature' | 'timestamp'>): Promise<ModelUpdate> {\n    const signature = createHash('sha256')\n      .update(JSON.stringify({ ...update, modelWeights: 'hashed' }))\n      .digest('hex');\n    \n    return {\n      ...update,\n      signature,\n      timestamp: new Date()\n    };\n  }\n\n  private async updateNodeContribution(nodeId: string, update: ModelUpdate): Promise<void> {\n    const node = this.nodes.get(nodeId);\n    if (node) {\n      node.contributionHistory.roundsParticipated += 1;\n      node.contributionHistory.totalDataSamples += update.metadata.trainingSamples;\n      node.contributionHistory.averageAccuracy = \n        (node.contributionHistory.averageAccuracy + update.metadata.localAccuracy) / 2;\n      node.lastSeen = new Date();\n    }\n  }\n\n  private async getModelWeights(model: tf.LayersModel): Promise<Float32Array[]> {\n    const weights = model.getWeights();\n    return weights.map(tensor => tensor.dataSync() as Float32Array);\n  }\n\n  private clipGradients(weights: Float32Array[], clippingNorm: number): Float32Array[] {\n    const totalNorm = Math.sqrt(\n      weights.reduce((sum, layer) => {\n        return sum + layer.reduce((layerSum, weight) => layerSum + weight * weight, 0);\n      }, 0)\n    );\n    \n    if (totalNorm > clippingNorm) {\n      const scaleFactor = clippingNorm / totalNorm;\n      return weights.map(layer => \n        layer.map(weight => weight * scaleFactor) as Float32Array\n      );\n    }\n    \n    return weights;\n  }\n\n  private addGaussianNoise(weights: Float32Array[], variance: number): Float32Array[] {\n    return weights.map(layer => {\n      const noisyLayer = new Float32Array(layer.length);\n      for (let i = 0; i < layer.length; i++) {\n        // Box-Muller transform for Gaussian noise\n        const u1 = Math.random();\n        const u2 = Math.random();\n        const noise = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2) * Math.sqrt(variance);\n        noisyLayer[i] = layer[i] + noise;\n      }\n      return noisyLayer;\n    });\n  }\n\n  private async generateAggregatedSignature(roundId: string, weights: Float32Array[]): Promise<string> {\n    return createHash('sha256')\n      .update(roundId + JSON.stringify(weights.map(w => Array.from(w.slice(0, 10)))))\n      .digest('hex');\n  }\n\n  private async collectNodeVote(nodeId: string, round: FederatedRound): Promise<boolean> {\n    // In practice, this would query the node for its vote on the aggregated update\n    // For now, return a random vote with bias towards approval\n    return Math.random() > 0.2; // 80% approval rate\n  }\n\n  private async updateGlobalModel(model: tf.LayersModel, update: ModelUpdate): Promise<void> {\n    // Apply aggregated weights to global model\n    const currentWeights = model.getWeights();\n    const newWeights = update.modelWeights.map((layerWeights, index) => {\n      return tf.tensor(layerWeights, currentWeights[index].shape);\n    });\n    \n    model.setWeights(newWeights);\n    \n    // Dispose old tensors\n    currentWeights.forEach(tensor => tensor.dispose());\n  }\n\n  private async calculateRoundMetrics(round: FederatedRound): Promise<FederatedRound['performanceMetrics']> {\n    const updates = Array.from(round.modelUpdates.values());\n    \n    return {\n      accuracy: updates.reduce((sum, u) => sum + u.metadata.localAccuracy, 0) / updates.length,\n      loss: updates.reduce((sum, u) => sum + u.metadata.localLoss, 0) / updates.length,\n      convergenceRate: 0.95, // Simplified calculation\n      participationRate: round.modelUpdates.size / round.participants.length,\n      privacyBudgetUsed: await this.privacyAccountant.getTotalBudgetUsed()\n    };\n  }\n\n  private async updateNodeReputations(round: FederatedRound): Promise<void> {\n    for (const [nodeId, update] of round.modelUpdates) {\n      const node = this.nodes.get(nodeId);\n      if (node) {\n        // Update reputation based on contribution quality\n        const qualityScore = update.metadata.localAccuracy * 0.7 + \n                           (1 - update.metadata.localLoss) * 0.3;\n        node.contributionHistory.reputationScore = \n          (node.contributionHistory.reputationScore * 0.9) + (qualityScore * 0.1);\n      }\n    }\n  }\n}\n\n/**\n * Privacy Accountant for tracking differential privacy budget\n */\nclass PrivacyAccountant {\n  private budgetUsage: Map<string, number> = new Map();\n  private noiseEvents: Array<{ nodeId: string; epsilon: number; timestamp: Date }> = [];\n\n  async initialize(): Promise<void> {\n    console.log('üîí Privacy Accountant initialized');\n  }\n\n  async addNoiseEvent(nodeId: string, epsilon: number, variance: number): Promise<void> {\n    const currentBudget = this.budgetUsage.get(nodeId) || 0;\n    this.budgetUsage.set(nodeId, currentBudget + epsilon);\n    \n    this.noiseEvents.push({\n      nodeId,\n      epsilon,\n      timestamp: new Date()\n    });\n  }\n\n  async getTotalBudgetUsed(): Promise<number> {\n    return Array.from(this.budgetUsage.values()).reduce((sum, budget) => sum + budget, 0);\n  }\n\n  async getNodeBudgetUsed(nodeId: string): Promise<number> {\n    return this.budgetUsage.get(nodeId) || 0;\n  }\n}\n\n/**\n * Consensus Engine for distributed decision making\n */\nclass ConsensusEngine {\n  async initialize(): Promise<void> {\n    console.log('ü§ù Consensus Engine initialized');\n  }\n\n  async validateConsensus(votes: Map<string, boolean>, threshold: number): Promise<boolean> {\n    const approvalCount = Array.from(votes.values()).filter(vote => vote).length;\n    return (approvalCount / votes.size) >= threshold;\n  }\n}\n\n// Export singleton instance\nexport const federatedLearningEngine = new FederatedLearningEngine();"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,QAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAC,EAAA;AAAA;AAAA,CAAAH,cAAA,GAAAC,CAAA,QAAAG,YAAA,CAAAF,OAAA;AACA,MAAAG,QAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAI,WAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAK,YAAA;AAAA;AAAA,CAAAP,cAAA,GAAAC,CAAA,QAAAC,OAAA;AAoHA,MAAaM,uBAAwB;AAAA;AAAA,CAAQT,QAAA,CAAAU,YAAY;EAWvDC,YAAA;IAAA;IAAAV,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACE,KAAK,EAAE;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAHF,KAAAW,aAAa,GAAG,KAAK;IAAC;IAAAZ,cAAA,GAAAC,CAAA;IAI5B,IAAI,CAACY,KAAK,GAAG,IAAIC,GAAG,EAAE;IAAC;IAAAd,cAAA,GAAAC,CAAA;IACvB,IAAI,CAACc,YAAY,GAAG,IAAID,GAAG,EAAE;IAAC;IAAAd,cAAA,GAAAC,CAAA;IAC9B,IAAI,CAACe,YAAY,GAAG,IAAIF,GAAG,EAAE;IAAC;IAAAd,cAAA,GAAAC,CAAA;IAC9B,IAAI,CAACgB,UAAU,GAAGV,YAAA,CAAAW,UAAU,CAACC,WAAW,EAAE;IAAC;IAAAnB,cAAA,GAAAC,CAAA;IAC3C,IAAI,CAACmB,KAAK,GAAG,IAAId,WAAA,CAAAe,QAAQ,CAAC;MACxBC,GAAG,EAAE,IAAI;MACTC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;KACrB,CAAC;IAAC;IAAAvB,cAAA,GAAAC,CAAA;IACH,IAAI,CAACuB,iBAAiB,GAAG,IAAIC,iBAAiB,EAAE;IAAC;IAAAzB,cAAA,GAAAC,CAAA;IACjD,IAAI,CAACyB,eAAe,GAAG,IAAIC,eAAe,EAAE;EAC9C;EAEA,MAAMC,UAAUA,CAAA;IAAA;IAAA5B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACd,IAAI,IAAI,CAACW,aAAa,EAAE;MAAA;MAAAZ,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAD,cAAA,GAAA6B,CAAA;IAAA;IAAA7B,cAAA,GAAAC,CAAA;IAE/B,IAAI;MAAA;MAAAD,cAAA,GAAAC,CAAA;MACF6B,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAE3D;MAAA;MAAA/B,cAAA,GAAAC,CAAA;MACA,MAAM,IAAI,CAAC+B,sBAAsB,EAAE;MAEnC;MAAA;MAAAhC,cAAA,GAAAC,CAAA;MACA,MAAM,IAAI,CAACgC,kBAAkB,EAAE;MAAC;MAAAjC,cAAA,GAAAC,CAAA;MAChC,MAAM,IAAI,CAACiC,gBAAgB,EAAE;MAE7B;MAAA;MAAAlC,cAAA,GAAAC,CAAA;MACA,MAAM,IAAI,CAACuB,iBAAiB,CAACI,UAAU,EAAE;MAEzC;MAAA;MAAA5B,cAAA,GAAAC,CAAA;MACA,MAAM,IAAI,CAACyB,eAAe,CAACE,UAAU,EAAE;MAAC;MAAA5B,cAAA,GAAAC,CAAA;MAExC,IAAI,CAACW,aAAa,GAAG,IAAI;MAAC;MAAAZ,cAAA,GAAAC,CAAA;MAC1B6B,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MAAC;MAAA/B,cAAA,GAAAC,CAAA;MAEpE,IAAI,CAACkC,IAAI,CAAC,aAAa,EAAE;QAAEC,SAAS,EAAE,IAAIC,IAAI;MAAE,CAAE,CAAC;IACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAC,CAAA;MACd6B,OAAO,CAACQ,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAC,CAAA;MAC1E,MAAMqC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMC,YAAYA,CAACC,UAA0E;IAAA;IAAAxC,cAAA,GAAAW,CAAA;IAC3F,MAAM8B,MAAM;IAAA;IAAA,CAAAzC,cAAA,GAAAC,CAAA,QAAG,QAAQoC,IAAI,CAACK,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAE9E,MAAMC,IAAI;IAAA;IAAA,CAAA/C,cAAA,GAAAC,CAAA,QAAkB;MAC1B,GAAGuC,UAAU;MACbQ,EAAE,EAAEP,MAAM;MACVQ,QAAQ,EAAE,IAAIZ,IAAI,EAAE;MACpBa,mBAAmB,EAAE;QACnBC,kBAAkB,EAAE,CAAC;QACrBC,eAAe,EAAE,CAAC;QAClBC,gBAAgB,EAAE,CAAC;QACnBC,eAAe,EAAE,GAAG,CAAC;;KAExB;IAED;IAAA;IAAAtD,cAAA,GAAAC,CAAA;IACA,MAAM,IAAI,CAACsD,YAAY,CAACR,IAAI,CAAC;IAAC;IAAA/C,cAAA,GAAAC,CAAA;IAE9B,IAAI,CAACY,KAAK,CAAC2C,GAAG,CAACf,MAAM,EAAEM,IAAI,CAAC;IAAC;IAAA/C,cAAA,GAAAC,CAAA;IAE7B,MAAM,IAAI,CAACgB,UAAU,CAACwC,WAAW,CAAC;MAChCC,UAAU,EAAE,2BAA2B;MACvCC,SAAS,EAAElB,MAAM;MACjBmB,WAAW,EAAE,gBAAgB;MAC7BC,IAAI,EAAE;QAAEd;MAAI,CAAE;MACdX,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;IAAC;IAAArC,cAAA,GAAAC,CAAA;IAEH6B,OAAO,CAACC,GAAG,CAAC,qCAAqCgB,IAAI,CAACe,IAAI,KAAKrB,MAAM,GAAG,CAAC;IAAC;IAAAzC,cAAA,GAAAC,CAAA;IAC1E,IAAI,CAACkC,IAAI,CAAC,gBAAgB,EAAE;MAAEM,MAAM;MAAEM;IAAI,CAAE,CAAC;IAAC;IAAA/C,cAAA,GAAAC,CAAA;IAE9C,OAAO8C,IAAI;EACb;EAEA;;;EAGA,MAAMgB,mBAAmBA,CACvBC,OAAe,EACfC,MAA+B;IAAA;IAAAjE,cAAA,GAAAW,CAAA;IAE/B,MAAMuD,OAAO;IAAA;IAAA,CAAAlE,cAAA,GAAAC,CAAA,QAAG,SAASoC,IAAI,CAACK,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAEhF;IACA,MAAMqB,WAAW;IAAA;IAAA,CAAAnE,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACe,YAAY,CAACoD,GAAG,CAACJ,OAAO,CAAC;IAAC;IAAAhE,cAAA,GAAAC,CAAA;IACnD,IAAI,CAACkE,WAAW,EAAE;MAAA;MAAAnE,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MAChB,MAAM,IAAIoE,KAAK,CAAC,gBAAgBL,OAAO,YAAY,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAA6B,CAAA;IAAA;IAED;IACA,MAAMyC,YAAY;IAAA;IAAA,CAAAtE,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACsE,kBAAkB,CAACN,MAAM,CAAC;IAAC;IAAAjE,cAAA,GAAAC,CAAA;IAE3D,IAAIqE,YAAY,CAACE,MAAM,GAAGP,MAAM,CAACQ,eAAe,EAAE;MAAA;MAAAzE,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MAChD,MAAM,IAAIoE,KAAK,CAAC,8BAA8BC,YAAY,CAACE,MAAM,MAAMP,MAAM,CAACQ,eAAe,EAAE,CAAC;IAClG,CAAC;IAAA;IAAA;MAAAzE,cAAA,GAAA6B,CAAA;IAAA;IAED,MAAM6C,KAAK;IAAA;IAAA,CAAA1E,cAAA,GAAAC,CAAA,QAAmB;MAC5B+C,EAAE,EAAEkB,OAAO;MACXS,WAAW,EAAE,IAAI,CAACC,qBAAqB,CAACZ,OAAO,CAAC,GAAG,CAAC;MACpDG,WAAW,EAAEA,WAAW;MACxBG,YAAY,EAAEA,YAAY,CAACO,GAAG,CAACC,CAAC,IAAI;QAAA;QAAA9E,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAC,CAAA;QAAA,OAAA6E,CAAC,CAAC9B,EAAE;MAAF,CAAE,CAAC;MACzC+B,iBAAiB,EAAEd,MAAM,CAACe,mBAAmB,KAAK,kBAAkB;MAAA;MAAA,CAAAhF,cAAA,GAAA6B,CAAA,WAAG,QAAQ;MAAA;MAAA,CAAA7B,cAAA,GAAA6B,CAAA,WAAG,SAAS;MAC3FoD,gBAAgB,EAAE,sBAAsB;MACxCC,MAAM,EAAE,cAAc;MACtBC,SAAS,EAAE,IAAI9C,IAAI,EAAE;MACrB+C,YAAY,EAAE,IAAItE,GAAG,EAAE;MACvBuE,gBAAgB,EAAE,IAAI;MACtBC,kBAAkB,EAAE;QAClBC,QAAQ,EAAE,CAAC;QACXC,IAAI,EAAE,CAAC;QACPC,eAAe,EAAE,CAAC;QAClBC,iBAAiB,EAAEpB,YAAY,CAACE,MAAM,GAAG,IAAI,CAACmB,cAAc,EAAE,CAACnB,MAAM;QACrEoB,iBAAiB,EAAE;OACpB;MACDC,SAAS,EAAE;QACTC,QAAQ,EAAE7B,MAAM,CAAC4B,SAAS,CAACE,OAAO;QAClCC,SAAS,EAAE/B,MAAM,CAAC4B,SAAS,CAACG,SAAS;QACrCC,KAAK,EAAE,IAAInF,GAAG,EAAE;QAChBoF,QAAQ,EAAE;;KAEb;IAAC;IAAAlG,cAAA,GAAAC,CAAA;IAEF,IAAI,CAACc,YAAY,CAACyC,GAAG,CAACU,OAAO,EAAEQ,KAAK,CAAC;IAErC;IAAA;IAAA1E,cAAA,GAAAC,CAAA;IACA,MAAM,IAAI,CAACkG,qBAAqB,CAACzB,KAAK,EAAEJ,YAAY,CAAC;IAAC;IAAAtE,cAAA,GAAAC,CAAA;IAEtDyE,KAAK,CAACQ,MAAM,GAAG,UAAU;IAAC;IAAAlF,cAAA,GAAAC,CAAA;IAE1B,MAAM,IAAI,CAACgB,UAAU,CAACwC,WAAW,CAAC;MAChCC,UAAU,EAAE,yBAAyB;MACrCC,SAAS,EAAEO,OAAO;MAClBN,WAAW,EAAE,iBAAiB;MAC9BC,IAAI,EAAE;QAAEa,KAAK;QAAET;MAAM,CAAE;MACvB7B,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;IAAC;IAAArC,cAAA,GAAAC,CAAA;IAEH6B,OAAO,CAACC,GAAG,CAAC,8BAA8B2C,KAAK,CAACC,WAAW,SAASL,YAAY,CAACE,MAAM,eAAe,CAAC;IAAC;IAAAxE,cAAA,GAAAC,CAAA;IACxG,IAAI,CAACkC,IAAI,CAAC,cAAc,EAAE;MAAE+B,OAAO;MAAEQ;IAAK,CAAE,CAAC;IAAC;IAAA1E,cAAA,GAAAC,CAAA;IAE9C,OAAOyE,KAAK;EACd;EAEA;;;EAGA,MAAM0B,iBAAiBA,CAACC,MAAoD;IAAA;IAAArG,cAAA,GAAAW,CAAA;IAC1E,MAAM+D,KAAK;IAAA;IAAA,CAAA1E,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACc,YAAY,CAACqD,GAAG,CAACiC,MAAM,CAACnC,OAAO,CAAC;IAAC;IAAAlE,cAAA,GAAAC,CAAA;IACpD,IAAI,CAACyE,KAAK,EAAE;MAAA;MAAA1E,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MACV,MAAM,IAAIoE,KAAK,CAAC,SAASgC,MAAM,CAACnC,OAAO,YAAY,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAlE,cAAA,GAAA6B,CAAA;IAAA;IAAA7B,cAAA,GAAAC,CAAA;IAED,IAAI,CAACyE,KAAK,CAACJ,YAAY,CAACgC,QAAQ,CAACD,MAAM,CAAC5D,MAAM,CAAC,EAAE;MAAA;MAAAzC,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MAC/C,MAAM,IAAIoE,KAAK,CAAC,QAAQgC,MAAM,CAAC5D,MAAM,6BAA6B4D,MAAM,CAACnC,OAAO,EAAE,CAAC;IACrF,CAAC;IAAA;IAAA;MAAAlE,cAAA,GAAA6B,CAAA;IAAA;IAED;IACA,MAAM0E,YAAY;IAAA;IAAA,CAAAvG,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACuG,eAAe,CAACH,MAAM,CAAC;IAEvD;IACA,MAAMI,aAAa;IAAA;IAAA,CAAAzG,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACyG,wBAAwB,CAACH,YAAY,EAAE7B,KAAK,CAAC;IAE9E;IAAA;IAAA1E,cAAA,GAAAC,CAAA;IACAyE,KAAK,CAACU,YAAY,CAAC5B,GAAG,CAAC6C,MAAM,CAAC5D,MAAM,EAAEgE,aAAa,CAAC;IAEpD;IAAA;IAAAzG,cAAA,GAAAC,CAAA;IACA,MAAM,IAAI,CAAC0G,sBAAsB,CAACN,MAAM,CAAC5D,MAAM,EAAEgE,aAAa,CAAC;IAAC;IAAAzG,cAAA,GAAAC,CAAA;IAEhE,MAAM,IAAI,CAACgB,UAAU,CAACwC,WAAW,CAAC;MAChCC,UAAU,EAAE,wBAAwB;MACpCC,SAAS,EAAE0C,MAAM,CAAC5D,MAAM;MACxBmB,WAAW,EAAE,cAAc;MAC3BC,IAAI,EAAE;QAAEK,OAAO,EAAEmC,MAAM,CAACnC,OAAO;QAAE0C,QAAQ,EAAEH,aAAa,CAACG;MAAQ,CAAE;MACnExE,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;IAAC;IAAArC,cAAA,GAAAC,CAAA;IAEH6B,OAAO,CAACC,GAAG,CAAC,sCAAsCsE,MAAM,CAAC5D,MAAM,cAAc4D,MAAM,CAACnC,OAAO,EAAE,CAAC;IAAC;IAAAlE,cAAA,GAAAC,CAAA;IAC/F,IAAI,CAACkC,IAAI,CAAC,gBAAgB,EAAE;MAAE+B,OAAO,EAAEmC,MAAM,CAACnC,OAAO;MAAEzB,MAAM,EAAE4D,MAAM,CAAC5D;IAAM,CAAE,CAAC;IAE/E;IAAA;IAAAzC,cAAA,GAAAC,CAAA;IACA,IAAIyE,KAAK,CAACU,YAAY,CAACyB,IAAI,KAAKnC,KAAK,CAACJ,YAAY,CAACE,MAAM,EAAE;MAAA;MAAAxE,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MACzD,MAAM,IAAI,CAAC6G,qBAAqB,CAACpC,KAAK,CAAC;IACzC,CAAC;IAAA;IAAA;MAAA1E,cAAA,GAAA6B,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAMiF,qBAAqBA,CAACpC,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACvDyE,KAAK,CAACQ,MAAM,GAAG,aAAa;IAAC;IAAAlF,cAAA,GAAAC,CAAA;IAE7B6B,OAAO,CAACC,GAAG,CAAC,kBAAkB2C,KAAK,CAACU,YAAY,CAACyB,IAAI,4BAA4BnC,KAAK,CAAC1B,EAAE,EAAE,CAAC;IAAC;IAAAhD,cAAA,GAAAC,CAAA;IAE7F,IAAI;MACF,IAAIoF,gBAA6B;MAAC;MAAArF,cAAA,GAAAC,CAAA;MAElC,QAAQyE,KAAK,CAACK,iBAAiB;QAC7B,KAAK,QAAQ;UAAA;UAAA/E,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAC,CAAA;UACXoF,gBAAgB,GAAG,MAAM,IAAI,CAAC0B,kBAAkB,CAACrC,KAAK,CAAC;UAAC;UAAA1E,cAAA,GAAAC,CAAA;UACxD;QACF,KAAK,SAAS;UAAA;UAAAD,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAC,CAAA;UACZoF,gBAAgB,GAAG,MAAM,IAAI,CAAC2B,iBAAiB,CAACtC,KAAK,CAAC;UAAC;UAAA1E,cAAA,GAAAC,CAAA;UACvD;QACF,KAAK,SAAS;UAAA;UAAAD,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAC,CAAA;UACZoF,gBAAgB,GAAG,MAAM,IAAI,CAAC4B,aAAa,CAACvC,KAAK,CAAC;UAAC;UAAA1E,cAAA,GAAAC,CAAA;UACnD;QACF,KAAK,UAAU;UAAA;UAAAD,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAC,CAAA;UACboF,gBAAgB,GAAG,MAAM,IAAI,CAAC6B,mBAAmB,CAACxC,KAAK,CAAC;UAAC;UAAA1E,cAAA,GAAAC,CAAA;UACzD;QACF;UAAA;UAAAD,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAC,CAAA;UACE,MAAM,IAAIoE,KAAK,CAAC,mCAAmCK,KAAK,CAACK,iBAAiB,EAAE,CAAC;MACjF;MAAC;MAAA/E,cAAA,GAAAC,CAAA;MAEDyE,KAAK,CAACW,gBAAgB,GAAGA,gBAAgB;MAEzC;MAAA;MAAArF,cAAA,GAAAC,CAAA;MACA,IAAIyE,KAAK,CAACmB,SAAS,CAACC,QAAQ,EAAE;QAAA;QAAA9F,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAC,CAAA;QAC5B,MAAM,IAAI,CAACkH,cAAc,CAACzC,KAAK,CAAC;MAClC,CAAC,MAAM;QAAA;QAAA1E,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAC,CAAA;QACL,MAAM,IAAI,CAACmH,aAAa,CAAC1C,KAAK,CAAC;MACjC;IAEF,CAAC,CAAC,OAAOpC,KAAK,EAAE;MAAA;MAAAtC,cAAA,GAAAC,CAAA;MACdyE,KAAK,CAACQ,MAAM,GAAG,QAAQ;MAAC;MAAAlF,cAAA,GAAAC,CAAA;MACxB6B,OAAO,CAACQ,KAAK,CAAC,2CAA2CoC,KAAK,CAAC1B,EAAE,GAAG,EAAEV,KAAK,CAAC;MAAC;MAAAtC,cAAA,GAAAC,CAAA;MAC7E,IAAI,CAACkC,IAAI,CAAC,aAAa,EAAE;QAAE+B,OAAO,EAAEQ,KAAK,CAAC1B,EAAE;QAAEV;MAAK,CAAE,CAAC;IACxD;EACF;EAEA;;;EAGQ,MAAMyE,kBAAkBA,CAACrC,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IACpD,MAAM0G,OAAO;IAAA;IAAA,CAAArH,cAAA,GAAAC,CAAA,SAAGqH,KAAK,CAACC,IAAI,CAAC7C,KAAK,CAACU,YAAY,CAACoC,MAAM,EAAE,CAAC;IACvD,MAAMC,YAAY;IAAA;IAAA,CAAAzH,cAAA,GAAAC,CAAA,SAAGoH,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEtB,MAAM,KAAK;MAAA;MAAArG,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAA0H,GAAG,GAAGtB,MAAM,CAACO,QAAQ,CAACgB,eAAe;IAAf,CAAe,EAAE,CAAC,CAAC;IAE9F;IACA,MAAMC,iBAAiB;IAAA;IAAA,CAAA7H,cAAA,GAAAC,CAAA,SAAmB,EAAE;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAE7C,KAAK,IAAI6H,UAAU;IAAA;IAAA,CAAA9H,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAE6H,UAAU,GAAGT,OAAO,CAAC,CAAC,CAAC,CAACU,YAAY,CAACvD,MAAM,EAAEsD,UAAU,EAAE,EAAE;MAClF,MAAME,SAAS;MAAA;MAAA,CAAAhI,cAAA,GAAAC,CAAA,SAAGoH,OAAO,CAAC,CAAC,CAAC,CAACU,YAAY,CAACD,UAAU,CAAC,CAACtD,MAAM;MAC5D,MAAMyD,WAAW;MAAA;MAAA,CAAAjI,cAAA,GAAAC,CAAA,SAAG,IAAIiI,YAAY,CAACF,SAAS,CAAC;MAAC;MAAAhI,cAAA,GAAAC,CAAA;MAEhD,KAAK,MAAMoG,MAAM,IAAIgB,OAAO,EAAE;QAC5B,MAAMc,MAAM;QAAA;QAAA,CAAAnI,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAACO,QAAQ,CAACgB,eAAe,GAAGH,YAAY;QAC7D,MAAMW,YAAY;QAAA;QAAA,CAAApI,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAAC0B,YAAY,CAACD,UAAU,CAAC;QAAC;QAAA9H,cAAA,GAAAC,CAAA;QAErD,KAAK,IAAIoI,CAAC;QAAA;QAAA,CAAArI,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAEoI,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;UAAA;UAAArI,cAAA,GAAAC,CAAA;UAClCgI,WAAW,CAACI,CAAC,CAAC,IAAID,YAAY,CAACC,CAAC,CAAC,GAAGF,MAAM;QAC5C;MACF;MAAC;MAAAnI,cAAA,GAAAC,CAAA;MAED4H,iBAAiB,CAACS,IAAI,CAACL,WAAW,CAAC;IACrC;IAAC;IAAAjI,cAAA,GAAAC,CAAA;IAED,OAAO;MACLwC,MAAM,EAAE,YAAY;MACpByB,OAAO,EAAEQ,KAAK,CAAC1B,EAAE;MACjB+E,YAAY,EAAEF,iBAAiB;MAC/BU,SAAS,EAAEV,iBAAiB;MAAE;MAC9BjB,QAAQ,EAAE;QACRgB,eAAe,EAAEH,YAAY;QAC7Be,WAAW,EAAE7F,IAAI,CAAC+B,KAAK,CAAC2C,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC4B,WAAW;QAAX,CAAW,EAAE,CAAC,CAAC,GAAGnB,OAAO,CAAC7C,MAAM,CAAC;QACrGkE,SAAS,EAAErB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC8B,SAAS;QAAT,CAAS,EAAE,CAAC,CAAC,GAAGrB,OAAO,CAAC7C,MAAM;QACrFmE,aAAa,EAAEtB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC+B,aAAa;QAAb,CAAa,EAAE,CAAC,CAAC,GAAGtB,OAAO,CAAC7C,MAAM;QAC7FoE,eAAe,EAAEjG,IAAI,CAACrB,GAAG,CAAC,GAAG+F,OAAO,CAACxC,GAAG,CAAC4D,CAAC,IAAI;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAAwI,CAAC,CAAC7B,QAAQ,CAACgC,eAAe;QAAf,CAAe,CAAC,CAAC;QAC1EC,YAAY,EAAExB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAACiC,YAAY;QAAZ,CAAY,EAAE,CAAC,CAAC,GAAGxB,OAAO,CAAC7C;OACtF;MACDsE,SAAS,EAAE,MAAM,IAAI,CAACC,2BAA2B,CAACrE,KAAK,CAAC1B,EAAE,EAAE6E,iBAAiB,CAAC;MAC9EzF,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrB2G,SAAS,EAAE;KACZ;EACH;EAEA;;;EAGQ,MAAMhC,iBAAiBA,CAACtC,KAAqB,EAAEuE,EAAA;EAAA;EAAA,CAAAjJ,cAAA,GAAA6B,CAAA,WAAa,IAAI;IAAA;IAAA7B,cAAA,GAAAW,CAAA;IACtE,MAAM0G,OAAO;IAAA;IAAA,CAAArH,cAAA,GAAAC,CAAA,SAAGqH,KAAK,CAACC,IAAI,CAAC7C,KAAK,CAACU,YAAY,CAACoC,MAAM,EAAE,CAAC;IACvD,MAAMC,YAAY;IAAA;IAAA,CAAAzH,cAAA,GAAAC,CAAA,SAAGoH,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEtB,MAAM,KAAK;MAAA;MAAArG,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAA0H,GAAG,GAAGtB,MAAM,CAACO,QAAQ,CAACgB,eAAe;IAAf,CAAe,EAAE,CAAC,CAAC;IAE9F;IACA,MAAMsB,aAAa;IAAA;IAAA,CAAAlJ,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAI,CAACkJ,eAAe,CAACzE,KAAK,CAACP,WAAW,CAAC;IAEnE;IACA,MAAM0D,iBAAiB;IAAA;IAAA,CAAA7H,cAAA,GAAAC,CAAA,SAAmB,EAAE;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAE7C,KAAK,IAAI6H,UAAU;IAAA;IAAA,CAAA9H,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAE6H,UAAU,GAAGoB,aAAa,CAAC1E,MAAM,EAAEsD,UAAU,EAAE,EAAE;MACxE,MAAME,SAAS;MAAA;MAAA,CAAAhI,cAAA,GAAAC,CAAA,SAAGiJ,aAAa,CAACpB,UAAU,CAAC,CAACtD,MAAM;MAClD,MAAMyD,WAAW;MAAA;MAAA,CAAAjI,cAAA,GAAAC,CAAA,SAAG,IAAIiI,YAAY,CAACF,SAAS,CAAC;MAAC;MAAAhI,cAAA,GAAAC,CAAA;MAEhD,KAAK,MAAMoG,MAAM,IAAIgB,OAAO,EAAE;QAC5B,MAAMc,MAAM;QAAA;QAAA,CAAAnI,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAACO,QAAQ,CAACgB,eAAe,GAAGH,YAAY;QAC7D,MAAMW,YAAY;QAAA;QAAA,CAAApI,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAAC0B,YAAY,CAACD,UAAU,CAAC;QACpD,MAAMsB,kBAAkB;QAAA;QAAA,CAAApJ,cAAA,GAAAC,CAAA,SAAGiJ,aAAa,CAACpB,UAAU,CAAC;QAAC;QAAA9H,cAAA,GAAAC,CAAA;QAErD,KAAK,IAAIoI,CAAC;QAAA;QAAA,CAAArI,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAEoI,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;UAClC;UACA,MAAMgB,YAAY;UAAA;UAAA,CAAArJ,cAAA,GAAAC,CAAA,SAAGmI,YAAY,CAACC,CAAC,CAAC,GAAGY,EAAE,IAAIb,YAAY,CAACC,CAAC,CAAC,GAAGe,kBAAkB,CAACf,CAAC,CAAC,CAAC;UAAC;UAAArI,cAAA,GAAAC,CAAA;UACtFgI,WAAW,CAACI,CAAC,CAAC,IAAIgB,YAAY,GAAGlB,MAAM;QACzC;MACF;MAAC;MAAAnI,cAAA,GAAAC,CAAA;MAED4H,iBAAiB,CAACS,IAAI,CAACL,WAAW,CAAC;IACrC;IAAC;IAAAjI,cAAA,GAAAC,CAAA;IAED,OAAO;MACLwC,MAAM,EAAE,oBAAoB;MAC5ByB,OAAO,EAAEQ,KAAK,CAAC1B,EAAE;MACjB+E,YAAY,EAAEF,iBAAiB;MAC/BU,SAAS,EAAEV,iBAAiB;MAC5BjB,QAAQ,EAAE;QACRgB,eAAe,EAAEH,YAAY;QAC7Be,WAAW,EAAE7F,IAAI,CAAC+B,KAAK,CAAC2C,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC4B,WAAW;QAAX,CAAW,EAAE,CAAC,CAAC,GAAGnB,OAAO,CAAC7C,MAAM,CAAC;QACrGkE,SAAS,EAAErB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC8B,SAAS;QAAT,CAAS,EAAE,CAAC,CAAC,GAAGrB,OAAO,CAAC7C,MAAM;QACrFmE,aAAa,EAAEtB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC+B,aAAa;QAAb,CAAa,EAAE,CAAC,CAAC,GAAGtB,OAAO,CAAC7C,MAAM;QAC7FoE,eAAe,EAAEjG,IAAI,CAACrB,GAAG,CAAC,GAAG+F,OAAO,CAACxC,GAAG,CAAC4D,CAAC,IAAI;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAAwI,CAAC,CAAC7B,QAAQ,CAACgC,eAAe;QAAf,CAAe,CAAC,CAAC;QAC1EC,YAAY,EAAExB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAACiC,YAAY;QAAZ,CAAY,EAAE,CAAC,CAAC,GAAGxB,OAAO,CAAC7C;OACtF;MACDsE,SAAS,EAAE,MAAM,IAAI,CAACC,2BAA2B,CAACrE,KAAK,CAAC1B,EAAE,EAAE6E,iBAAiB,CAAC;MAC9EzF,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrB2G,SAAS,EAAE;KACZ;EACH;EAEA;;;EAGQ,MAAM/B,aAAaA,CAACvC,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAC/C,MAAM0G,OAAO;IAAA;IAAA,CAAArH,cAAA,GAAAC,CAAA,SAAGqH,KAAK,CAACC,IAAI,CAAC7C,KAAK,CAACU,YAAY,CAACoC,MAAM,EAAE,CAAC;IAEvD;IACA,MAAM8B,mBAAmB;IAAA;IAAA,CAAAtJ,cAAA,GAAAC,CAAA,SAAGoH,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEtB,MAAM,KAAI;MAAA;MAAArG,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MACzD,OAAO0H,GAAG,GAAItB,MAAM,CAACO,QAAQ,CAAC4B,WAAW,GAAGnC,MAAM,CAACO,QAAQ,CAACgB,eAAgB;IAC9E,CAAC,EAAE,CAAC,CAAC;IAEL,MAAMC,iBAAiB;IAAA;IAAA,CAAA7H,cAAA,GAAAC,CAAA,SAAmB,EAAE;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAE7C,KAAK,IAAI6H,UAAU;IAAA;IAAA,CAAA9H,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAE6H,UAAU,GAAGT,OAAO,CAAC,CAAC,CAAC,CAACU,YAAY,CAACvD,MAAM,EAAEsD,UAAU,EAAE,EAAE;MAClF,MAAME,SAAS;MAAA;MAAA,CAAAhI,cAAA,GAAAC,CAAA,SAAGoH,OAAO,CAAC,CAAC,CAAC,CAACU,YAAY,CAACD,UAAU,CAAC,CAACtD,MAAM;MAC5D,MAAMyD,WAAW;MAAA;MAAA,CAAAjI,cAAA,GAAAC,CAAA,SAAG,IAAIiI,YAAY,CAACF,SAAS,CAAC;MAAC;MAAAhI,cAAA,GAAAC,CAAA;MAEhD,KAAK,MAAMoG,MAAM,IAAIgB,OAAO,EAAE;QAC5B,MAAMkC,gBAAgB;QAAA;QAAA,CAAAvJ,cAAA,GAAAC,CAAA,SAAIoG,MAAM,CAACO,QAAQ,CAAC4B,WAAW,GAAGnC,MAAM,CAACO,QAAQ,CAACgB,eAAe,GAAI0B,mBAAmB;QAC9G,MAAMlB,YAAY;QAAA;QAAA,CAAApI,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAAC0B,YAAY,CAACD,UAAU,CAAC;QAAC;QAAA9H,cAAA,GAAAC,CAAA;QAErD,KAAK,IAAIoI,CAAC;QAAA;QAAA,CAAArI,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAEoI,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;UAAA;UAAArI,cAAA,GAAAC,CAAA;UAClCgI,WAAW,CAACI,CAAC,CAAC,IAAID,YAAY,CAACC,CAAC,CAAC,GAAGkB,gBAAgB;QACtD;MACF;MAAC;MAAAvJ,cAAA,GAAAC,CAAA;MAED4H,iBAAiB,CAACS,IAAI,CAACL,WAAW,CAAC;IACrC;IAAC;IAAAjI,cAAA,GAAAC,CAAA;IAED,OAAO;MACLwC,MAAM,EAAE,oBAAoB;MAC5ByB,OAAO,EAAEQ,KAAK,CAAC1B,EAAE;MACjB+E,YAAY,EAAEF,iBAAiB;MAC/BU,SAAS,EAAEV,iBAAiB;MAC5BjB,QAAQ,EAAE;QACRgB,eAAe,EAAEP,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAACgB,eAAe;QAAf,CAAe,EAAE,CAAC,CAAC;QAChFY,WAAW,EAAE7F,IAAI,CAAC+B,KAAK,CAAC2C,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC4B,WAAW;QAAX,CAAW,EAAE,CAAC,CAAC,GAAGnB,OAAO,CAAC7C,MAAM,CAAC;QACrGkE,SAAS,EAAErB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC8B,SAAS;QAAT,CAAS,EAAE,CAAC,CAAC,GAAGrB,OAAO,CAAC7C,MAAM;QACrFmE,aAAa,EAAEtB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC+B,aAAa;QAAb,CAAa,EAAE,CAAC,CAAC,GAAGtB,OAAO,CAAC7C,MAAM;QAC7FoE,eAAe,EAAEjG,IAAI,CAACrB,GAAG,CAAC,GAAG+F,OAAO,CAACxC,GAAG,CAAC4D,CAAC,IAAI;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAAwI,CAAC,CAAC7B,QAAQ,CAACgC,eAAe;QAAf,CAAe,CAAC,CAAC;QAC1EC,YAAY,EAAExB,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;UAAA;UAAAzI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAACiC,YAAY;QAAZ,CAAY,EAAE,CAAC,CAAC,GAAGxB,OAAO,CAAC7C;OACtF;MACDsE,SAAS,EAAE,MAAM,IAAI,CAACC,2BAA2B,CAACrE,KAAK,CAAC1B,EAAE,EAAE6E,iBAAiB,CAAC;MAC9EzF,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrB2G,SAAS,EAAE;KACZ;EACH;EAEA;;;EAGQ,MAAM9B,mBAAmBA,CAACxC,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACrD;IACA;IACA,OAAO,MAAM,IAAI,CAAC8G,kBAAkB,CAACrC,KAAK,CAAC;EAC7C;EAEA;;;EAGQ,MAAMgC,wBAAwBA,CACpCL,MAAmB,EACnB3B,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAErB,MAAMoC,IAAI;IAAA;IAAA,CAAA/C,cAAA,GAAAC,CAAA,SAAG,IAAI,CAACY,KAAK,CAACuD,GAAG,CAACiC,MAAM,CAAC5D,MAAM,CAAC;IAAC;IAAAzC,cAAA,GAAAC,CAAA;IAC3C,IAAI,CAAC8C,IAAI,EAAE;MAAA;MAAA/C,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MACT,MAAM,IAAIoE,KAAK,CAAC,QAAQgC,MAAM,CAAC5D,MAAM,YAAY,CAAC;IACpD,CAAC;IAAA;IAAA;MAAAzC,cAAA,GAAA6B,CAAA;IAAA;IAED,MAAM2H,OAAO;IAAA;IAAA,CAAAxJ,cAAA,GAAAC,CAAA,SAAG8C,IAAI,CAAC0G,kBAAkB,CAACC,0BAA0B;IAClE,MAAMC,aAAa;IAAA;IAAA,CAAA3J,cAAA,GAAAC,CAAA,SAAG8C,IAAI,CAAC0G,kBAAkB,CAACE,aAAa;IAC3D,MAAMC,YAAY;IAAA;IAAA,CAAA5J,cAAA,GAAAC,CAAA,SAAG8C,IAAI,CAAC0G,kBAAkB,CAACI,gBAAgB;IAE7D;IACA,MAAMC,cAAc;IAAA;IAAA,CAAA9J,cAAA,GAAAC,CAAA,SAAG,IAAI,CAAC8J,aAAa,CAAC1D,MAAM,CAAC0B,YAAY,EAAE6B,YAAY,CAAC;IAE5E;IACA,MAAMI,YAAY;IAAA;IAAA,CAAAhK,cAAA,GAAAC,CAAA,SAAG,IAAI,CAACgK,gBAAgB,CAACH,cAAc,EAAEH,aAAa,CAAC;IAEzE;IAAA;IAAA3J,cAAA,GAAAC,CAAA;IACA,MAAM,IAAI,CAACuB,iBAAiB,CAAC0I,aAAa,CAAC7D,MAAM,CAAC5D,MAAM,EAAE+G,OAAO,EAAEG,aAAa,CAAC;IAAC;IAAA3J,cAAA,GAAAC,CAAA;IAElF,OAAO;MACL,GAAGoG,MAAM;MACT0B,YAAY,EAAEiC,YAAY;MAC1BpD,QAAQ,EAAE;QACR,GAAGP,MAAM,CAACO,QAAQ;QAClBiC,YAAY,EAAEc;;KAEjB;EACH;EAEA;;;EAGQ,MAAMxC,cAAcA,CAACzC,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAChD6B,OAAO,CAACC,GAAG,CAAC,oCAAoC2C,KAAK,CAAC1B,EAAE,EAAE,CAAC;IAE3D;IAAA;IAAAhD,cAAA,GAAAC,CAAA;IACA,KAAK,MAAMwC,MAAM,IAAIiC,KAAK,CAACJ,YAAY,EAAE;MACvC,MAAM6F,IAAI;MAAA;MAAA,CAAAnK,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAI,CAACmK,eAAe,CAAC3H,MAAM,EAAEiC,KAAK,CAAC;MAAC;MAAA1E,cAAA,GAAAC,CAAA;MACvDyE,KAAK,CAACmB,SAAS,CAACI,KAAK,CAACzC,GAAG,CAACf,MAAM,EAAE0H,IAAI,CAAC;IACzC;IAEA;IACA,MAAME,aAAa;IAAA;IAAA,CAAArK,cAAA,GAAAC,CAAA,SAAGqH,KAAK,CAACC,IAAI,CAAC7C,KAAK,CAACmB,SAAS,CAACI,KAAK,CAACuB,MAAM,EAAE,CAAC,CAAC8C,MAAM,CAACH,IAAI,IAAIA;MAAAA;MAAAA,wBAAA;MAAAA,yBAAA;MAAAA,MAAA,CAAAA,IAAI;IAAJ,CAAI,CAAC,CAAC3F,MAAM;IAC5F,MAAM+F,YAAY;IAAA;IAAA,CAAAvK,cAAA,GAAAC,CAAA,SAAGoK,aAAa,GAAG3F,KAAK,CAACJ,YAAY,CAACE,MAAM;IAAC;IAAAxE,cAAA,GAAAC,CAAA;IAE/DyE,KAAK,CAACmB,SAAS,CAACK,QAAQ,GAAGqE,YAAY,IAAI7F,KAAK,CAACmB,SAAS,CAACG,SAAS;IAAC;IAAAhG,cAAA,GAAAC,CAAA;IAErE,IAAIyE,KAAK,CAACmB,SAAS,CAACK,QAAQ,EAAE;MAAA;MAAAlG,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MAC5B,MAAM,IAAI,CAACmH,aAAa,CAAC1C,KAAK,CAAC;IACjC,CAAC,MAAM;MAAA;MAAA1E,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MACLyE,KAAK,CAACQ,MAAM,GAAG,QAAQ;MAAC;MAAAlF,cAAA,GAAAC,CAAA;MACxB6B,OAAO,CAACC,GAAG,CAAC,gCAAgC2C,KAAK,CAAC1B,EAAE,KAAKuH,YAAY,MAAM7F,KAAK,CAACmB,SAAS,CAACG,SAAS,EAAE,CAAC;MAAC;MAAAhG,cAAA,GAAAC,CAAA;MACxG,IAAI,CAACkC,IAAI,CAAC,iBAAiB,EAAE;QAAE+B,OAAO,EAAEQ,KAAK,CAAC1B,EAAE;QAAEuH;MAAY,CAAE,CAAC;IACnE;EACF;EAEA;;;EAGQ,MAAMnD,aAAaA,CAAC1C,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAC/C,IAAI,CAACyE,KAAK,CAACW,gBAAgB,EAAE;MAAA;MAAArF,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MAC3B,MAAM,IAAIoE,KAAK,CAAC,gCAAgC,CAAC;IACnD,CAAC;IAAA;IAAA;MAAArE,cAAA,GAAA6B,CAAA;IAAA;IAED;IAAA7B,cAAA,GAAAC,CAAA;IACA,MAAM,IAAI,CAACuK,iBAAiB,CAAC9F,KAAK,CAACP,WAAW,EAAEO,KAAK,CAACW,gBAAgB,CAAC;IAEvE;IAAA;IAAArF,cAAA,GAAAC,CAAA;IACAyE,KAAK,CAACY,kBAAkB,GAAG,MAAM,IAAI,CAACmF,qBAAqB,CAAC/F,KAAK,CAAC;IAAC;IAAA1E,cAAA,GAAAC,CAAA;IAEnEyE,KAAK,CAACQ,MAAM,GAAG,WAAW;IAAC;IAAAlF,cAAA,GAAAC,CAAA;IAC3ByE,KAAK,CAACgG,OAAO,GAAG,IAAIrI,IAAI,EAAE;IAE1B;IAAA;IAAArC,cAAA,GAAAC,CAAA;IACA,MAAM,IAAI,CAAC0K,qBAAqB,CAACjG,KAAK,CAAC;IAAC;IAAA1E,cAAA,GAAAC,CAAA;IAExC,MAAM,IAAI,CAACgB,UAAU,CAACwC,WAAW,CAAC;MAChCC,UAAU,EAAE,2BAA2B;MACvCC,SAAS,EAAEe,KAAK,CAAC1B,EAAE;MACnBY,WAAW,EAAE,iBAAiB;MAC9BC,IAAI,EAAE;QACJa,KAAK,EAAE;UACL,GAAGA,KAAK;UACRP,WAAW,EAAEyG,SAAS,CAAC;;OAE1B;MACDxI,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;IAAC;IAAArC,cAAA,GAAAC,CAAA;IAEH6B,OAAO,CAACC,GAAG,CAAC,+BAA+B2C,KAAK,CAACC,WAAW,mBAAmBD,KAAK,CAACY,kBAAkB,CAACC,QAAQ,CAACsF,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IAAC;IAAA7K,cAAA,GAAAC,CAAA;IAC/H,IAAI,CAACkC,IAAI,CAAC,gBAAgB,EAAE;MAAE+B,OAAO,EAAEQ,KAAK,CAAC1B,EAAE;MAAE8H,OAAO,EAAEpG,KAAK,CAACY;IAAkB,CAAE,CAAC;IAErF;IAAA;IAAAtF,cAAA,GAAAC,CAAA;IACA,IAAI,CAACc,YAAY,CAACgK,MAAM,CAACrG,KAAK,CAAC1B,EAAE,CAAC;EACpC;EAEA;EACQ,MAAMhB,sBAAsBA,CAAA;IAAA;IAAAhC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAClC;IACA6B,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;EAC5D;EAEQ,MAAME,kBAAkBA,CAAA;IAAA;IAAAjC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAC9B;IACA6B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C;EAEQ,MAAMG,gBAAgBA,CAAA;IAAA;IAAAlC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAC5B;IACA6B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC5C;EAEQ,MAAMwB,YAAYA,CAACR,IAAmB;IAAA;IAAA/C,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAC5C;IACA,IAAI8C,IAAI,CAACiI,YAAY,CAACC,UAAU,GAAG,GAAG,EAAE;MAAA;MAAAjL,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MACtC,MAAM,IAAIoE,KAAK,CAAC,0BAA0B,CAAC;IAC7C,CAAC;IAAA;IAAA;MAAArE,cAAA,GAAA6B,CAAA;IAAA;EACH;EAEQ,MAAM0C,kBAAkBA,CAACN,MAA+B;IAAA;IAAAjE,cAAA,GAAAW,CAAA;IAC9D,MAAMuK,WAAW;IAAA;IAAA,CAAAlL,cAAA,GAAAC,CAAA,SAAG,IAAI,CAAC0F,cAAc,EAAE;IAEzC;IAAA;IAAA3F,cAAA,GAAAC,CAAA;IACA,OAAOiL,WAAW,CACfZ,MAAM,CAACvH,IAAI,IAAI;MAAA;MAAA/C,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAA8C,IAAI,CAACiI,YAAY,CAACC,UAAU,IAAI,GAAG;IAAH,CAAG,CAAC,CACnDE,IAAI,CAAC,CAACC,CAAC,EAAEvJ,CAAC,KAAI;MAAA;MAAA7B,cAAA,GAAAW,CAAA;MACb,MAAM0K,MAAM;MAAA;MAAA,CAAArL,cAAA,GAAAC,CAAA,SAAGmL,CAAC,CAACJ,YAAY,CAACC,UAAU,GAAG,GAAG,GACjCG,CAAC,CAAClI,mBAAmB,CAACI,eAAe,GAAG,GAAG,GAC3C8H,CAAC,CAACJ,YAAY,CAACM,YAAY,GAAG,GAAG;MAC9C,MAAMC,MAAM;MAAA;MAAA,CAAAvL,cAAA,GAAAC,CAAA,SAAG4B,CAAC,CAACmJ,YAAY,CAACC,UAAU,GAAG,GAAG,GACjCpJ,CAAC,CAACqB,mBAAmB,CAACI,eAAe,GAAG,GAAG,GAC3CzB,CAAC,CAACmJ,YAAY,CAACM,YAAY,GAAG,GAAG;MAAC;MAAAtL,cAAA,GAAAC,CAAA;MAC/C,OAAOsL,MAAM,GAAGF,MAAM;IACxB,CAAC,CAAC,CACDG,KAAK,CAAC,CAAC,EAAE7I,IAAI,CAAC8I,GAAG,CAACxH,MAAM,CAACQ,eAAe,GAAG,CAAC,EAAEyG,WAAW,CAAC1G,MAAM,CAAC,CAAC;EACvE;EAEQmB,cAAcA,CAAA;IAAA;IAAA3F,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACpB,OAAOqH,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1G,KAAK,CAAC2G,MAAM,EAAE,CAAC,CAAC8C,MAAM,CAACvH,IAAI,IAAI;MAAA;MAAA/C,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAA8C,IAAI,CAACmC,MAAM,KAAK,QAAQ;IAAR,CAAQ,CAAC;EACjF;EAEQN,qBAAqBA,CAACZ,OAAe;IAAA;IAAAhE,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAC3C;IACA,OAAO,CAAC,CAAC,CAAC;EACZ;EAEQ,MAAMkG,qBAAqBA,CAACzB,KAAqB,EAAEJ,YAA6B;IAAA;IAAAtE,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACtF;IACA6B,OAAO,CAACC,GAAG,CAAC,mCAAmCuC,YAAY,CAACE,MAAM,eAAe,CAAC;EACpF;EAEQ,MAAMgC,eAAeA,CAACH,MAAoD;IAAA;IAAArG,cAAA,GAAAW,CAAA;IAChF,MAAMmI,SAAS;IAAA;IAAA,CAAA9I,cAAA,GAAAC,CAAA,SAAG,IAAAI,QAAA,CAAAqL,UAAU,EAAC,QAAQ,CAAC,CACnCrF,MAAM,CAACsF,IAAI,CAACC,SAAS,CAAC;MAAE,GAAGvF,MAAM;MAAE0B,YAAY,EAAE;IAAQ,CAAE,CAAC,CAAC,CAC7D8D,MAAM,CAAC,KAAK,CAAC;IAAC;IAAA7L,cAAA,GAAAC,CAAA;IAEjB,OAAO;MACL,GAAGoG,MAAM;MACTyC,SAAS;MACT1G,SAAS,EAAE,IAAIC,IAAI;KACpB;EACH;EAEQ,MAAMsE,sBAAsBA,CAAClE,MAAc,EAAE4D,MAAmB;IAAA;IAAArG,cAAA,GAAAW,CAAA;IACtE,MAAMoC,IAAI;IAAA;IAAA,CAAA/C,cAAA,GAAAC,CAAA,SAAG,IAAI,CAACY,KAAK,CAACuD,GAAG,CAAC3B,MAAM,CAAC;IAAC;IAAAzC,cAAA,GAAAC,CAAA;IACpC,IAAI8C,IAAI,EAAE;MAAA;MAAA/C,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAC,CAAA;MACR8C,IAAI,CAACG,mBAAmB,CAACC,kBAAkB,IAAI,CAAC;MAAC;MAAAnD,cAAA,GAAAC,CAAA;MACjD8C,IAAI,CAACG,mBAAmB,CAACG,gBAAgB,IAAIgD,MAAM,CAACO,QAAQ,CAACgB,eAAe;MAAC;MAAA5H,cAAA,GAAAC,CAAA;MAC7E8C,IAAI,CAACG,mBAAmB,CAACE,eAAe,GACtC,CAACL,IAAI,CAACG,mBAAmB,CAACE,eAAe,GAAGiD,MAAM,CAACO,QAAQ,CAAC+B,aAAa,IAAI,CAAC;MAAC;MAAA3I,cAAA,GAAAC,CAAA;MACjF8C,IAAI,CAACE,QAAQ,GAAG,IAAIZ,IAAI,EAAE;IAC5B,CAAC;IAAA;IAAA;MAAArC,cAAA,GAAA6B,CAAA;IAAA;EACH;EAEQ,MAAMsH,eAAeA,CAAC2C,KAAqB;IAAA;IAAA9L,cAAA,GAAAW,CAAA;IACjD,MAAMoL,OAAO;IAAA;IAAA,CAAA/L,cAAA,GAAAC,CAAA,SAAG6L,KAAK,CAACE,UAAU,EAAE;IAAC;IAAAhM,cAAA,GAAAC,CAAA;IACnC,OAAO8L,OAAO,CAAClH,GAAG,CAACoH,MAAM,IAAI;MAAA;MAAAjM,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAAgM,MAAM,CAACC,QAAQ,EAAkB;IAAlB,CAAkB,CAAC;EACjE;EAEQnC,aAAaA,CAACgC,OAAuB,EAAEnC,YAAoB;IAAA;IAAA5J,cAAA,GAAAW,CAAA;IACjE,MAAMwL,SAAS;IAAA;IAAA,CAAAnM,cAAA,GAAAC,CAAA,SAAG0C,IAAI,CAACyJ,IAAI,CACzBL,OAAO,CAACrE,MAAM,CAAC,CAACC,GAAG,EAAE0E,KAAK,KAAI;MAAA;MAAArM,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAC5B,OAAO0H,GAAG,GAAG0E,KAAK,CAAC3E,MAAM,CAAC,CAAC4E,QAAQ,EAAEnE,MAAM,KAAK;QAAA;QAAAnI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAC,CAAA;QAAA,OAAAqM,QAAQ,GAAGnE,MAAM,GAAGA,MAAM;MAAN,CAAM,EAAE,CAAC,CAAC;IAChF,CAAC,EAAE,CAAC,CAAC,CACN;IAAC;IAAAnI,cAAA,GAAAC,CAAA;IAEF,IAAIkM,SAAS,GAAGvC,YAAY,EAAE;MAAA;MAAA5J,cAAA,GAAA6B,CAAA;MAC5B,MAAM0K,WAAW;MAAA;MAAA,CAAAvM,cAAA,GAAAC,CAAA,SAAG2J,YAAY,GAAGuC,SAAS;MAAC;MAAAnM,cAAA,GAAAC,CAAA;MAC7C,OAAO8L,OAAO,CAAClH,GAAG,CAACwH,KAAK,IACtB;QAAA;QAAArM,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAC,CAAA;QAAA,OAAAoM,KAAK,CAACxH,GAAG,CAACsD,MAAM,IAAI;UAAA;UAAAnI,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UAAA,OAAAkI,MAAM,GAAGoE,WAAW;QAAX,CAAW,CAAiB;MAAjB,CAAiB,CAC1D;IACH,CAAC;IAAA;IAAA;MAAAvM,cAAA,GAAA6B,CAAA;IAAA;IAAA7B,cAAA,GAAAC,CAAA;IAED,OAAO8L,OAAO;EAChB;EAEQ9B,gBAAgBA,CAAC8B,OAAuB,EAAES,QAAgB;IAAA;IAAAxM,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAChE,OAAO8L,OAAO,CAAClH,GAAG,CAACwH,KAAK,IAAG;MAAA;MAAArM,cAAA,GAAAW,CAAA;MACzB,MAAM8L,UAAU;MAAA;MAAA,CAAAzM,cAAA,GAAAC,CAAA,SAAG,IAAIiI,YAAY,CAACmE,KAAK,CAAC7H,MAAM,CAAC;MAAC;MAAAxE,cAAA,GAAAC,CAAA;MAClD,KAAK,IAAIoI,CAAC;MAAA;MAAA,CAAArI,cAAA,GAAAC,CAAA,SAAG,CAAC,GAAEoI,CAAC,GAAGgE,KAAK,CAAC7H,MAAM,EAAE6D,CAAC,EAAE,EAAE;QACrC;QACA,MAAMqE,EAAE;QAAA;QAAA,CAAA1M,cAAA,GAAAC,CAAA,SAAG0C,IAAI,CAACC,MAAM,EAAE;QACxB,MAAM+J,EAAE;QAAA;QAAA,CAAA3M,cAAA,GAAAC,CAAA,SAAG0C,IAAI,CAACC,MAAM,EAAE;QACxB,MAAMgK,KAAK;QAAA;QAAA,CAAA5M,cAAA,GAAAC,CAAA,SAAG0C,IAAI,CAACyJ,IAAI,CAAC,CAAC,CAAC,GAAGzJ,IAAI,CAACZ,GAAG,CAAC2K,EAAE,CAAC,CAAC,GAAG/J,IAAI,CAACkK,GAAG,CAAC,CAAC,GAAGlK,IAAI,CAACmK,EAAE,GAAGH,EAAE,CAAC,GAAGhK,IAAI,CAACyJ,IAAI,CAACI,QAAQ,CAAC;QAAC;QAAAxM,cAAA,GAAAC,CAAA;QAC9FwM,UAAU,CAACpE,CAAC,CAAC,GAAGgE,KAAK,CAAChE,CAAC,CAAC,GAAGuE,KAAK;MAClC;MAAC;MAAA5M,cAAA,GAAAC,CAAA;MACD,OAAOwM,UAAU;IACnB,CAAC,CAAC;EACJ;EAEQ,MAAM1D,2BAA2BA,CAAC7E,OAAe,EAAE6H,OAAuB;IAAA;IAAA/L,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAChF,OAAO,IAAAI,QAAA,CAAAqL,UAAU,EAAC,QAAQ,CAAC,CACxBrF,MAAM,CAACnC,OAAO,GAAGyH,IAAI,CAACC,SAAS,CAACG,OAAO,CAAClH,GAAG,CAACkI,CAAC,IAAI;MAAA;MAAA/M,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAAqH,KAAK,CAACC,IAAI,CAACwF,CAAC,CAACvB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAAD,CAAC,CAAC,CAAC,CAAC,CAC9EK,MAAM,CAAC,KAAK,CAAC;EAClB;EAEQ,MAAMzB,eAAeA,CAAC3H,MAAc,EAAEiC,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACjE;IACA;IACA,OAAO0C,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;EAC9B;EAEQ,MAAM4H,iBAAiBA,CAACsB,KAAqB,EAAEzF,MAAmB;IAAA;IAAArG,cAAA,GAAAW,CAAA;IACxE;IACA,MAAMqM,cAAc;IAAA;IAAA,CAAAhN,cAAA,GAAAC,CAAA,SAAG6L,KAAK,CAACE,UAAU,EAAE;IACzC,MAAMiB,UAAU;IAAA;IAAA,CAAAjN,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAAC0B,YAAY,CAAClD,GAAG,CAAC,CAACuD,YAAY,EAAE8E,KAAK,KAAI;MAAA;MAAAlN,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MACjE,OAAOE,EAAE,CAAC8L,MAAM,CAAC7D,YAAY,EAAE4E,cAAc,CAACE,KAAK,CAAC,CAACC,KAAK,CAAC;IAC7D,CAAC,CAAC;IAAC;IAAAnN,cAAA,GAAAC,CAAA;IAEH6L,KAAK,CAACsB,UAAU,CAACH,UAAU,CAAC;IAE5B;IAAA;IAAAjN,cAAA,GAAAC,CAAA;IACA+M,cAAc,CAACK,OAAO,CAACpB,MAAM,IAAI;MAAA;MAAAjM,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAAgM,MAAM,CAACqB,OAAO,EAAE;IAAF,CAAE,CAAC;EACpD;EAEQ,MAAM7C,qBAAqBA,CAAC/F,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IACvD,MAAM0G,OAAO;IAAA;IAAA,CAAArH,cAAA,GAAAC,CAAA,SAAGqH,KAAK,CAACC,IAAI,CAAC7C,KAAK,CAACU,YAAY,CAACoC,MAAM,EAAE,CAAC;IAAC;IAAAxH,cAAA,GAAAC,CAAA;IAExD,OAAO;MACLsF,QAAQ,EAAE8B,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;QAAA;QAAAzI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAC,CAAA;QAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC+B,aAAa;MAAb,CAAa,EAAE,CAAC,CAAC,GAAGtB,OAAO,CAAC7C,MAAM;MACxFgB,IAAI,EAAE6B,OAAO,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEc,CAAC,KAAK;QAAA;QAAAzI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAC,CAAA;QAAA,OAAA0H,GAAG,GAAGc,CAAC,CAAC7B,QAAQ,CAAC8B,SAAS;MAAT,CAAS,EAAE,CAAC,CAAC,GAAGrB,OAAO,CAAC7C,MAAM;MAChFiB,eAAe,EAAE,IAAI;MAAE;MACvBC,iBAAiB,EAAEhB,KAAK,CAACU,YAAY,CAACyB,IAAI,GAAGnC,KAAK,CAACJ,YAAY,CAACE,MAAM;MACtEoB,iBAAiB,EAAE,MAAM,IAAI,CAACpE,iBAAiB,CAAC+L,kBAAkB;KACnE;EACH;EAEQ,MAAM5C,qBAAqBA,CAACjG,KAAqB;IAAA;IAAA1E,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACvD,KAAK,MAAM,CAACwC,MAAM,EAAE4D,MAAM,CAAC,IAAI3B,KAAK,CAACU,YAAY,EAAE;MACjD,MAAMrC,IAAI;MAAA;MAAA,CAAA/C,cAAA,GAAAC,CAAA,SAAG,IAAI,CAACY,KAAK,CAACuD,GAAG,CAAC3B,MAAM,CAAC;MAAC;MAAAzC,cAAA,GAAAC,CAAA;MACpC,IAAI8C,IAAI,EAAE;QAAA;QAAA/C,cAAA,GAAA6B,CAAA;QACR;QACA,MAAM2L,YAAY;QAAA;QAAA,CAAAxN,cAAA,GAAAC,CAAA,SAAGoG,MAAM,CAACO,QAAQ,CAAC+B,aAAa,GAAG,GAAG,GACrC,CAAC,CAAC,GAAGtC,MAAM,CAACO,QAAQ,CAAC8B,SAAS,IAAI,GAAG;QAAC;QAAA1I,cAAA,GAAAC,CAAA;QACzD8C,IAAI,CAACG,mBAAmB,CAACI,eAAe,GACrCP,IAAI,CAACG,mBAAmB,CAACI,eAAe,GAAG,GAAG,GAAKkK,YAAY,GAAG,GAAI;MAC3E,CAAC;MAAA;MAAA;QAAAxN,cAAA,GAAA6B,CAAA;MAAA;IACH;EACF;;AACD;AAAA7B,cAAA,GAAAC,CAAA;AAxpBDwN,OAAA,CAAAjN,uBAAA,GAAAA,uBAAA;AA0pBA;;;AAGA,MAAMiB,iBAAiB;EAAvBf,YAAA;IAAA;IAAAV,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACU,KAAAyN,WAAW,GAAwB,IAAI5M,GAAG,EAAE;IAAC;IAAAd,cAAA,GAAAC,CAAA;IAC7C,KAAA0N,WAAW,GAAgE,EAAE;EAwBvF;EAtBE,MAAM/L,UAAUA,CAAA;IAAA;IAAA5B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACd6B,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;EAClD;EAEA,MAAMmI,aAAaA,CAACzH,MAAc,EAAE+G,OAAe,EAAEgD,QAAgB;IAAA;IAAAxM,cAAA,GAAAW,CAAA;IACnE,MAAMiN,aAAa;IAAA;IAAA,CAAA5N,cAAA,GAAAC,CAAA;IAAG;IAAA,CAAAD,cAAA,GAAA6B,CAAA,eAAI,CAAC6L,WAAW,CAACtJ,GAAG,CAAC3B,MAAM,CAAC;IAAA;IAAA,CAAAzC,cAAA,GAAA6B,CAAA,WAAI,CAAC;IAAC;IAAA7B,cAAA,GAAAC,CAAA;IACxD,IAAI,CAACyN,WAAW,CAAClK,GAAG,CAACf,MAAM,EAAEmL,aAAa,GAAGpE,OAAO,CAAC;IAAC;IAAAxJ,cAAA,GAAAC,CAAA;IAEtD,IAAI,CAAC0N,WAAW,CAACrF,IAAI,CAAC;MACpB7F,MAAM;MACN+G,OAAO;MACPpH,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;EACJ;EAEA,MAAMkL,kBAAkBA,CAAA;IAAA;IAAAvN,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACtB,OAAOqH,KAAK,CAACC,IAAI,CAAC,IAAI,CAACmG,WAAW,CAAClG,MAAM,EAAE,CAAC,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEkG,MAAM,KAAK;MAAA;MAAA7N,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAC,CAAA;MAAA,OAAA0H,GAAG,GAAGkG,MAAM;IAAN,CAAM,EAAE,CAAC,CAAC;EACvF;EAEA,MAAMC,iBAAiBA,CAACrL,MAAc;IAAA;IAAAzC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACpC,OAAO,2BAAAD,cAAA,GAAA6B,CAAA,eAAI,CAAC6L,WAAW,CAACtJ,GAAG,CAAC3B,MAAM,CAAC;IAAA;IAAA,CAAAzC,cAAA,GAAA6B,CAAA,WAAI,CAAC;EAC1C;;AAGF;;;AAGA,MAAMF,eAAe;EACnB,MAAMC,UAAUA,CAAA;IAAA;IAAA5B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IACd6B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD;EAEA,MAAMgM,iBAAiBA,CAAC9H,KAA2B,EAAED,SAAiB;IAAA;IAAAhG,cAAA,GAAAW,CAAA;IACpE,MAAM0J,aAAa;IAAA;IAAA,CAAArK,cAAA,GAAAC,CAAA,SAAGqH,KAAK,CAACC,IAAI,CAACtB,KAAK,CAACuB,MAAM,EAAE,CAAC,CAAC8C,MAAM,CAACH,IAAI,IAAIA;MAAAA;MAAAA,wBAAA;MAAAA,yBAAA;MAAAA,MAAA,CAAAA,IAAI;IAAJ,CAAI,CAAC,CAAC3F,MAAM;IAAC;IAAAxE,cAAA,GAAAC,CAAA;IAC7E,OAAQoK,aAAa,GAAGpE,KAAK,CAACY,IAAI,IAAKb,SAAS;EAClD;;AAGF;AAAA;AAAAhG,cAAA,GAAAC,CAAA;AACawN,OAAA,CAAAO,uBAAuB,GAAG,IAAIxN,uBAAuB,EAAE","ignoreList":[]}