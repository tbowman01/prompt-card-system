a08bbff727cd8aea4152021c8c518f1c
"use strict";

/* istanbul ignore next */
function cov_204qeijc4k() {
  var path = "/workspaces/prompt-card-system/backend/src/services/performance/LoadTestScheduler.ts";
  var hash = "d9b475c165ee873ab9178daf5ddab9b261dc714e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/performance/LoadTestScheduler.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 63
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 31
        },
        end: {
          line: 5,
          column: 64
        }
      },
      "4": {
        start: {
          line: 6,
          column: 40
        },
        end: {
          line: 6,
          column: 82
        }
      },
      "5": {
        start: {
          line: 7,
          column: 31
        },
        end: {
          line: 7,
          column: 64
        }
      },
      "6": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 57
        }
      },
      "7": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 30
        }
      },
      "8": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 30
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 16
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 40
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 34
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "14": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 60
        }
      },
      "15": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 25,
          column: 19
        }
      },
      "16": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 19
        }
      },
      "17": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "18": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "19": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 44
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "21": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "22": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 46
        }
      },
      "23": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "24": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 42
        }
      },
      "25": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "26": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 37
        }
      },
      "27": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 59
        }
      },
      "28": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 78
        }
      },
      "29": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "30": {
        start: {
          line: 50,
          column: 30
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "31": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "32": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 70
        }
      },
      "33": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 73
        }
      },
      "34": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "35": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 65
        }
      },
      "36": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "37": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 45
        }
      },
      "38": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 57
        }
      },
      "39": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "40": {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 80,
          column: 57
        }
      },
      "41": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "42": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 63
        }
      },
      "43": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "44": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "45": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "46": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 77
        }
      },
      "47": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 80
        }
      },
      "48": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 50
        }
      },
      "49": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 49
        }
      },
      "50": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "51": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 33
        }
      },
      "52": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "53": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 47
        }
      },
      "54": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 55
        }
      },
      "55": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "56": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "57": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 63
        }
      },
      "58": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 29
        }
      },
      "59": {
        start: {
          line: 122,
          column: 21
        },
        end: {
          line: 122,
          column: 88
        }
      },
      "60": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 21
        }
      },
      "61": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 39
        }
      },
      "62": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 46
        }
      },
      "63": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "64": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 43
        }
      },
      "65": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "66": {
        start: {
          line: 150,
          column: 23
        },
        end: {
          line: 150,
          column: 91
        }
      },
      "67": {
        start: {
          line: 151,
          column: 21
        },
        end: {
          line: 151,
          column: 51
        }
      },
      "68": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 40
        }
      },
      "69": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 163,
          column: 12
        }
      },
      "70": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "71": {
        start: {
          line: 169,
          column: 30
        },
        end: {
          line: 169,
          column: 70
        }
      },
      "72": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "73": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 76
        }
      },
      "74": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "75": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 55
        }
      },
      "76": {
        start: {
          line: 176,
          column: 28
        },
        end: {
          line: 176,
          column: 44
        }
      },
      "77": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "78": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 62
        }
      },
      "79": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 53
        }
      },
      "80": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "81": {
        start: {
          line: 188,
          column: 36
        },
        end: {
          line: 191,
          column: 14
        }
      },
      "82": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 48
        }
      },
      "83": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "84": {
        start: {
          line: 195,
          column: 41
        },
        end: {
          line: 195,
          column: 166
        }
      },
      "85": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 62
        }
      },
      "86": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "87": {
        start: {
          line: 200,
          column: 41
        },
        end: {
          line: 200,
          column: 155
        }
      },
      "88": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 62
        }
      },
      "89": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 37
        }
      },
      "90": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 43
        }
      },
      "91": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "92": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 210,
          column: 19
        }
      },
      "93": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 215,
          column: 19
        }
      },
      "94": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "95": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 81
        }
      },
      "96": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 224,
          column: 13
        }
      },
      "97": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 84
        }
      },
      "98": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 38
        }
      },
      "99": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 44
        }
      },
      "100": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 43
        }
      },
      "101": {
        start: {
          line: 231,
          column: 36
        },
        end: {
          line: 231,
          column: 73
        }
      },
      "102": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 235,
          column: 15
        }
      },
      "103": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "104": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 84
        }
      },
      "105": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 105
        }
      },
      "106": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "107": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 81
        }
      },
      "108": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 91
        }
      },
      "109": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 58
        }
      },
      "110": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 48
        }
      },
      "111": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 59
        }
      },
      "112": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 25
        }
      },
      "113": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 66
        }
      },
      "114": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 39
        }
      },
      "115": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "116": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 267,
          column: 13
        }
      },
      "117": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 46
        }
      },
      "118": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 45
        }
      },
      "119": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 62
        }
      },
      "120": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 41
        }
      },
      "121": {
        start: {
          line: 281,
          column: 33
        },
        end: {
          line: 286,
          column: 11
        }
      },
      "122": {
        start: {
          line: 281,
          column: 94
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "123": {
        start: {
          line: 287,
          column: 31
        },
        end: {
          line: 295,
          column: 11
        }
      },
      "124": {
        start: {
          line: 288,
          column: 28
        },
        end: {
          line: 288,
          column: 56
        }
      },
      "125": {
        start: {
          line: 289,
          column: 28
        },
        end: {
          line: 289,
          column: 69
        }
      },
      "126": {
        start: {
          line: 291,
          column: 26
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "127": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 302,
          column: 10
        }
      },
      "128": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 37
        }
      },
      "129": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 91
        }
      },
      "130": {
        start: {
          line: 311,
          column: 37
        },
        end: {
          line: 311,
          column: 112
        }
      },
      "131": {
        start: {
          line: 312,
          column: 32
        },
        end: {
          line: 312,
          column: 82
        }
      },
      "132": {
        start: {
          line: 314,
          column: 33
        },
        end: {
          line: 314,
          column: 130
        }
      },
      "133": {
        start: {
          line: 315,
          column: 28
        },
        end: {
          line: 315,
          column: 74
        }
      },
      "134": {
        start: {
          line: 316,
          column: 23
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "135": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 46
        }
      },
      "136": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 50
        }
      },
      "137": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 22
        }
      },
      "138": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 37
        }
      },
      "139": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 34
        }
      },
      "140": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 62
        }
      },
      "141": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 351,
          column: 7
        }
      },
      "142": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 368,
          column: 7
        }
      },
      "143": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 376,
          column: 7
        }
      },
      "144": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 384,
          column: 7
        }
      },
      "145": {
        start: {
          line: 387,
          column: 21
        },
        end: {
          line: 387,
          column: 77
        }
      },
      "146": {
        start: {
          line: 388,
          column: 21
        },
        end: {
          line: 388,
          column: 31
        }
      },
      "147": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "148": {
        start: {
          line: 390,
          column: 34
        },
        end: {
          line: 402,
          column: 13
        }
      },
      "149": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 69
        }
      },
      "150": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 61
        }
      },
      "151": {
        start: {
          line: 408,
          column: 21
        },
        end: {
          line: 413,
          column: 6
        }
      },
      "152": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 257
        }
      },
      "153": {
        start: {
          line: 417,
          column: 21
        },
        end: {
          line: 422,
          column: 6
        }
      },
      "154": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 393
        }
      },
      "155": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "156": {
        start: {
          line: 427,
          column: 25
        },
        end: {
          line: 427,
          column: 112
        }
      },
      "157": {
        start: {
          line: 428,
          column: 24
        },
        end: {
          line: 428,
          column: 34
        }
      },
      "158": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 431,
          column: 13
        }
      },
      "159": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 95
        }
      },
      "160": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 65
        }
      },
      "161": {
        start: {
          line: 438,
          column: 21
        },
        end: {
          line: 441,
          column: 6
        }
      },
      "162": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 79
        }
      },
      "163": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 461,
          column: 10
        }
      },
      "164": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "165": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 467,
          column: 13
        }
      },
      "166": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 49
        }
      },
      "167": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 59
        }
      },
      "168": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "169": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 36
        }
      },
      "170": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 51
        }
      },
      "171": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "172": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 47
        }
      },
      "173": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "174": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 487,
          column: 18
        }
      },
      "175": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 485,
          column: 19
        }
      },
      "176": {
        start: {
          line: 484,
          column: 20
        },
        end: {
          line: 484,
          column: 99
        }
      },
      "177": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 53
        }
      },
      "178": {
        start: {
          line: 490,
          column: 28
        },
        end: {
          line: 490,
          column: 54
        }
      },
      "179": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 493,
          column: 13
        }
      },
      "180": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 48
        }
      },
      "181": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 494,
          column: 99
        }
      },
      "182": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 88
        }
      },
      "183": {
        start: {
          line: 501,
          column: 20
        },
        end: {
          line: 501,
          column: 54
        }
      },
      "184": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 505,
          column: 9
        }
      },
      "185": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 23
        }
      },
      "186": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 50
        }
      },
      "187": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 513,
          column: 30
        }
      },
      "188": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 512,
          column: 15
        }
      },
      "189": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 60
        }
      },
      "190": {
        start: {
          line: 518,
          column: 24
        },
        end: {
          line: 518,
          column: 86
        }
      },
      "191": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "192": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 521,
          column: 44
        }
      },
      "193": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 22
        }
      },
      "194": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 46
        }
      },
      "195": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 22
        }
      },
      "196": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 527,
          column: 46
        }
      },
      "197": {
        start: {
          line: 528,
          column: 16
        },
        end: {
          line: 528,
          column: 22
        }
      },
      "198": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 83
        }
      },
      "199": {
        start: {
          line: 533,
          column: 25
        },
        end: {
          line: 533,
          column: 84
        }
      },
      "200": {
        start: {
          line: 534,
          column: 28
        },
        end: {
          line: 534,
          column: 61
        }
      },
      "201": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 545,
          column: 9
        }
      },
      "202": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 100
        }
      },
      "203": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 539,
          column: 107
        }
      },
      "204": {
        start: {
          line: 541,
          column: 35
        },
        end: {
          line: 541,
          column: 74
        }
      },
      "205": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 108
        }
      },
      "206": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 544,
          column: 69
        }
      },
      "207": {
        start: {
          line: 548,
          column: 0
        },
        end: {
          line: 548,
          column: 46
        }
      },
      "208": {
        start: {
          line: 550,
          column: 0
        },
        end: {
          line: 550,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 36
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 46
          },
          end: {
            line: 60,
            column: 47
          }
        },
        loc: {
          start: {
            line: 60,
            column: 52
          },
          end: {
            line: 60,
            column: 55
          }
        },
        line: 60
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 43
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 79
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 53
          },
          end: {
            line: 92,
            column: 54
          }
        },
        loc: {
          start: {
            line: 92,
            column: 59
          },
          end: {
            line: 92,
            column: 62
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 34
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 114
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 25
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 137
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 71
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 143
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 153,
            column: 24
          },
          end: {
            line: 153,
            column: 25
          }
        },
        loc: {
          start: {
            line: 153,
            column: 32
          },
          end: {
            line: 163,
            column: 9
          }
        },
        line: 153
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 39
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 168
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 38
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 257
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 23
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 274
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 280
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 281,
            column: 80
          },
          end: {
            line: 281,
            column: 81
          }
        },
        loc: {
          start: {
            line: 281,
            column: 94
          },
          end: {
            line: 286,
            column: 9
          }
        },
        line: 281
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 288,
            column: 20
          },
          end: {
            line: 288,
            column: 21
          }
        },
        loc: {
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 288,
            column: 56
          }
        },
        line: 288
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 289,
            column: 18
          },
          end: {
            line: 289,
            column: 19
          }
        },
        loc: {
          start: {
            line: 289,
            column: 28
          },
          end: {
            line: 289,
            column: 69
          }
        },
        line: 289
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 291,
            column: 17
          },
          end: {
            line: 291,
            column: 18
          }
        },
        loc: {
          start: {
            line: 291,
            column: 26
          },
          end: {
            line: 295,
            column: 9
          }
        },
        line: 291
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 30
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 307
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 327,
            column: 5
          }
        },
        loc: {
          start: {
            line: 327,
            column: 21
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 327
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 25
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 335
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 31
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 386
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 34
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 407
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 35
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 416
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 30
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 425
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 30
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 437
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 444,
            column: 30
          },
          end: {
            line: 462,
            column: 5
          }
        },
        line: 444
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 463,
            column: 4
          },
          end: {
            line: 463,
            column: 5
          }
        },
        loc: {
          start: {
            line: 463,
            column: 29
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 463
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 28
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 471
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 32
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 477
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 482,
            column: 67
          },
          end: {
            line: 482,
            column: 68
          }
        },
        loc: {
          start: {
            line: 482,
            column: 73
          },
          end: {
            line: 486,
            column: 13
          }
        },
        line: 482
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 483,
            column: 57
          },
          end: {
            line: 483,
            column: 58
          }
        },
        loc: {
          start: {
            line: 483,
            column: 66
          },
          end: {
            line: 485,
            column: 17
          }
        },
        line: 483
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 33
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 500
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 507,
            column: 4
          },
          end: {
            line: 507,
            column: 5
          }
        },
        loc: {
          start: {
            line: 507,
            column: 25
          },
          end: {
            line: 514,
            column: 5
          }
        },
        line: 507
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 509,
            column: 40
          },
          end: {
            line: 509,
            column: 41
          }
        },
        loc: {
          start: {
            line: 509,
            column: 46
          },
          end: {
            line: 513,
            column: 9
          }
        },
        line: 509
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 510,
            column: 43
          },
          end: {
            line: 510,
            column: 44
          }
        },
        loc: {
          start: {
            line: 510,
            column: 52
          },
          end: {
            line: 512,
            column: 13
          }
        },
        line: 510
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 515,
            column: 4
          },
          end: {
            line: 515,
            column: 5
          }
        },
        loc: {
          start: {
            line: 515,
            column: 59
          },
          end: {
            line: 531,
            column: 5
          }
        },
        line: 515
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 62
          },
          end: {
            line: 546,
            column: 5
          }
        },
        line: 532
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 25,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 25,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 63
          }
        }, {
          start: {
            line: 54,
            column: 67
          },
          end: {
            line: 54,
            column: 68
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 33
          }
        }, {
          start: {
            line: 70,
            column: 37
          },
          end: {
            line: 70,
            column: 63
          }
        }],
        line: 70
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 28
          }
        }, {
          start: {
            line: 90,
            column: 32
          },
          end: {
            line: 90,
            column: 75
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 28
          }
        }, {
          start: {
            line: 103,
            column: 32
          },
          end: {
            line: 103,
            column: 61
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 105,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 105,
            column: 35
          }
        }, {
          start: {
            line: 105,
            column: 39
          },
          end: {
            line: 105,
            column: 65
          }
        }],
        line: 105
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 143,
            column: 47
          },
          end: {
            line: 143,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 55
          },
          end: {
            line: 143,
            column: 57
          }
        }],
        line: 143
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 59
          },
          end: {
            line: 143,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 143,
            column: 69
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 146,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 26
          },
          end: {
            line: 146,
            column: 55
          }
        }, {
          start: {
            line: 146,
            column: 58
          },
          end: {
            line: 146,
            column: 60
          }
        }],
        line: 146
      },
      "17": {
        loc: {
          start: {
            line: 150,
            column: 23
          },
          end: {
            line: 150,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 41
          },
          end: {
            line: 150,
            column: 73
          }
        }, {
          start: {
            line: 150,
            column: 76
          },
          end: {
            line: 150,
            column: 91
          }
        }],
        line: 150
      },
      "18": {
        loc: {
          start: {
            line: 160,
            column: 21
          },
          end: {
            line: 160,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 35
          },
          end: {
            line: 160,
            column: 58
          }
        }, {
          start: {
            line: 160,
            column: 61
          },
          end: {
            line: 160,
            column: 70
          }
        }],
        line: 160
      },
      "19": {
        loc: {
          start: {
            line: 161,
            column: 30
          },
          end: {
            line: 161,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 54
          },
          end: {
            line: 161,
            column: 87
          }
        }, {
          start: {
            line: 161,
            column: 90
          },
          end: {
            line: 161,
            column: 99
          }
        }],
        line: 161
      },
      "20": {
        loc: {
          start: {
            line: 162,
            column: 30
          },
          end: {
            line: 162,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 54
          },
          end: {
            line: 162,
            column: 87
          }
        }, {
          start: {
            line: 162,
            column: 90
          },
          end: {
            line: 162,
            column: 99
          }
        }],
        line: 162
      },
      "21": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "22": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "23": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "24": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "25": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: 212,
            column: 17
          },
          end: {
            line: 216,
            column: 13
          }
        }],
        line: 206
      },
      "26": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "27": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 56
          }
        }, {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 218,
            column: 102
          }
        }],
        line: 218
      },
      "28": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 224,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 224,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "29": {
        loc: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 222,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 221,
            column: 42
          }
        }, {
          start: {
            line: 221,
            column: 46
          },
          end: {
            line: 221,
            column: 83
          }
        }, {
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 222,
            column: 61
          }
        }],
        line: 221
      },
      "30": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "31": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "32": {
        loc: {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 56
          }
        }, {
          start: {
            line: 242,
            column: 60
          },
          end: {
            line: 242,
            column: 102
          }
        }],
        line: 242
      },
      "33": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "34": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        }, {
          start: {
            line: 265,
            column: 17
          },
          end: {
            line: 267,
            column: 13
          }
        }],
        line: 262
      },
      "35": {
        loc: {
          start: {
            line: 285,
            column: 22
          },
          end: {
            line: 285,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 22
          },
          end: {
            line: 285,
            column: 78
          }
        }, {
          start: {
            line: 285,
            column: 82
          },
          end: {
            line: 285,
            column: 91
          }
        }],
        line: 285
      },
      "36": {
        loc: {
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 288,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 288,
            column: 40
          }
        }, {
          start: {
            line: 288,
            column: 44
          },
          end: {
            line: 288,
            column: 56
          }
        }],
        line: 288
      },
      "37": {
        loc: {
          start: {
            line: 397,
            column: 25
          },
          end: {
            line: 397,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 40
          },
          end: {
            line: 397,
            column: 62
          }
        }, {
          start: {
            line: 397,
            column: 65
          },
          end: {
            line: 397,
            column: 74
          }
        }],
        line: 397
      },
      "38": {
        loc: {
          start: {
            line: 423,
            column: 171
          },
          end: {
            line: 423,
            column: 231
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 191
          },
          end: {
            line: 423,
            column: 224
          }
        }, {
          start: {
            line: 423,
            column: 227
          },
          end: {
            line: 423,
            column: 231
          }
        }],
        line: 423
      },
      "39": {
        loc: {
          start: {
            line: 423,
            column: 233
          },
          end: {
            line: 423,
            column: 311
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 262
          },
          end: {
            line: 423,
            column: 304
          }
        }, {
          start: {
            line: 423,
            column: 307
          },
          end: {
            line: 423,
            column: 311
          }
        }],
        line: 423
      },
      "40": {
        loc: {
          start: {
            line: 423,
            column: 313
          },
          end: {
            line: 423,
            column: 391
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 342
          },
          end: {
            line: 423,
            column: 384
          }
        }, {
          start: {
            line: 423,
            column: 387
          },
          end: {
            line: 423,
            column: 391
          }
        }],
        line: 423
      },
      "41": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 431,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 431,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "42": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "43": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "44": {
        loc: {
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "45": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "46": {
        loc: {
          start: {
            line: 519,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 520,
            column: 12
          },
          end: {
            line: 522,
            column: 22
          }
        }, {
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 525,
            column: 22
          }
        }, {
          start: {
            line: 526,
            column: 12
          },
          end: {
            line: 528,
            column: 22
          }
        }],
        line: 519
      },
      "47": {
        loc: {
          start: {
            line: 535,
            column: 8
          },
          end: {
            line: 545,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 536,
            column: 12
          },
          end: {
            line: 537,
            column: 100
          }
        }, {
          start: {
            line: 538,
            column: 12
          },
          end: {
            line: 539,
            column: 107
          }
        }, {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 542,
            column: 108
          }
        }, {
          start: {
            line: 543,
            column: 12
          },
          end: {
            line: 544,
            column: 69
          }
        }],
        line: 535
      },
      "48": {
        loc: {
          start: {
            line: 541,
            column: 35
          },
          end: {
            line: 541,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 541,
            column: 35
          },
          end: {
            line: 541,
            column: 69
          }
        }, {
          start: {
            line: 541,
            column: 73
          },
          end: {
            line: 541,
            column: 74
          }
        }],
        line: 541
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0, 0],
      "47": [0, 0, 0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/performance/LoadTestScheduler.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/performance/LoadTestScheduler.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { loadTestingFramework } from './LoadTestingFramework';\nimport { performanceRegressionDetector } from './PerformanceRegressionDetector';\nimport { performanceBenchmark } from './PerformanceBenchmark';\nimport { db } from '../../database/connection';\nimport { CronJob } from 'cron';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ScheduledTest {\n  id: string;\n  name: string;\n  scenarioId: string;\n  schedule: string; // Cron expression\n  enabled: boolean;\n  options: {\n    saveBaseline?: boolean;\n    compareBaseline?: boolean;\n    notifyOnRegression?: boolean;\n    runBenchmarks?: boolean;\n  };\n  lastRun?: Date;\n  nextRun?: Date;\n  consecutiveFailures: number;\n  maxConsecutiveFailures: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface TestExecutionResult {\n  scheduledTestId: string;\n  executionId: string;\n  startTime: Date;\n  endTime: Date;\n  success: boolean;\n  error?: string;\n  results?: any;\n  regressionAlerts?: any[];\n  benchmarkResults?: any;\n}\n\nexport interface SchedulerConfiguration {\n  enabled: boolean;\n  maxConcurrentTests: number;\n  defaultTimeout: number; // milliseconds\n  retryFailedTests: boolean;\n  maxRetries: number;\n  retryDelay: number; // milliseconds\n  cleanupOldResults: boolean;\n  resultsRetentionDays: number;\n  notifications: {\n    enabled: boolean;\n    channels: string[]; // email, slack, webhook\n    onSuccess: boolean;\n    onFailure: boolean;\n    onRegression: boolean;\n  };\n}\n\nexport class LoadTestScheduler extends EventEmitter {\n  private scheduledTests: Map<string, ScheduledTest> = new Map();\n  private cronJobs: Map<string, CronJob> = new Map();\n  private activeExecutions: Map<string, TestExecutionResult> = new Map();\n  private configuration: SchedulerConfiguration;\n  private isInitialized: boolean = false;\n\n  constructor() {\n    super();\n    this.configuration = this.getDefaultConfiguration();\n  }\n\n  /**\n   * Initialize the scheduler\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      await this.createTables();\n      await this.loadScheduledTests();\n      await this.loadConfiguration();\n      \n      if (this.configuration.enabled) {\n        this.startAllScheduledTests();\n      }\n\n      // Start cleanup job (daily at 2 AM)\n      if (this.configuration.cleanupOldResults) {\n        this.scheduleCleanupJob();\n      }\n\n      this.isInitialized = true;\n      this.emit('initialized');\n      console.log('Load test scheduler initialized');\n    } catch (error) {\n      console.error('Failed to initialize load test scheduler:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new scheduled test\n   */\n  async createScheduledTest(test: Omit<ScheduledTest, 'id' | 'createdAt' | 'updatedAt' | 'consecutiveFailures'>): Promise<string> {\n    const scheduledTest: ScheduledTest = {\n      ...test,\n      id: uuidv4(),\n      consecutiveFailures: 0,\n      maxConsecutiveFailures: test.maxConsecutiveFailures || 3,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Validate cron expression\n    try {\n      new CronJob(test.schedule, () => {}, null, false);\n    } catch (error) {\n      throw new Error(`Invalid cron expression: ${test.schedule}`);\n    }\n\n    // Save to database\n    await this.saveScheduledTest(scheduledTest);\n    \n    // Add to memory\n    this.scheduledTests.set(scheduledTest.id, scheduledTest);\n\n    // Start cron job if enabled\n    if (scheduledTest.enabled && this.configuration.enabled) {\n      this.startCronJob(scheduledTest);\n    }\n\n    this.emit('scheduledTestCreated', scheduledTest);\n    return scheduledTest.id;\n  }\n\n  /**\n   * Update a scheduled test\n   */\n  async updateScheduledTest(id: string, updates: Partial<ScheduledTest>): Promise<void> {\n    const scheduledTest = this.scheduledTests.get(id);\n    if (!scheduledTest) {\n      throw new Error(`Scheduled test not found: ${id}`);\n    }\n\n    const updatedTest = {\n      ...scheduledTest,\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    // Validate cron expression if changed\n    if (updates.schedule && updates.schedule !== scheduledTest.schedule) {\n      try {\n        new CronJob(updates.schedule, () => {}, null, false);\n      } catch (error) {\n        throw new Error(`Invalid cron expression: ${updates.schedule}`);\n      }\n    }\n\n    // Update database\n    await this.saveScheduledTest(updatedTest);\n    \n    // Update memory\n    this.scheduledTests.set(id, updatedTest);\n\n    // Restart cron job if schedule or enabled status changed\n    if (updates.schedule || updates.enabled !== undefined) {\n      this.stopCronJob(id);\n      if (updatedTest.enabled && this.configuration.enabled) {\n        this.startCronJob(updatedTest);\n      }\n    }\n\n    this.emit('scheduledTestUpdated', updatedTest);\n  }\n\n  /**\n   * Delete a scheduled test\n   */\n  async deleteScheduledTest(id: string): Promise<void> {\n    const scheduledTest = this.scheduledTests.get(id);\n    if (!scheduledTest) {\n      throw new Error(`Scheduled test not found: ${id}`);\n    }\n\n    // Stop cron job\n    this.stopCronJob(id);\n\n    // Remove from database\n    const stmt = db.prepare('DELETE FROM scheduled_tests WHERE id = ?');\n    stmt.run(id);\n\n    // Remove from memory\n    this.scheduledTests.delete(id);\n\n    this.emit('scheduledTestDeleted', id);\n  }\n\n  /**\n   * Get all scheduled tests\n   */\n  getScheduledTests(): ScheduledTest[] {\n    return Array.from(this.scheduledTests.values());\n  }\n\n  /**\n   * Get a specific scheduled test\n   */\n  getScheduledTest(id: string): ScheduledTest | undefined {\n    return this.scheduledTests.get(id);\n  }\n\n  /**\n   * Get test execution history\n   */\n  async getExecutionHistory(scheduledTestId?: string, limit: number = 50, offset: number = 0): Promise<TestExecutionResult[]> {\n    let query = `\n      SELECT * FROM test_executions \n      ${scheduledTestId ? 'WHERE scheduled_test_id = ?' : ''}\n      ORDER BY start_time DESC \n      LIMIT ? OFFSET ?\n    `;\n    \n    const params = scheduledTestId ? [scheduledTestId, limit, offset] : [limit, offset];\n    const stmt = db.prepare(query);\n    const rows = stmt.all(...params) as any[];\n    \n    return rows.map(row => ({\n      scheduledTestId: row.scheduled_test_id,\n      executionId: row.execution_id,\n      startTime: new Date(row.start_time),\n      endTime: new Date(row.end_time),\n      success: Boolean(row.success),\n      error: row.error,\n      results: row.results ? JSON.parse(row.results) : undefined,\n      regressionAlerts: row.regression_alerts ? JSON.parse(row.regression_alerts) : undefined,\n      benchmarkResults: row.benchmark_results ? JSON.parse(row.benchmark_results) : undefined\n    }));\n  }\n\n  /**\n   * Manually execute a scheduled test\n   */\n  async executeTest(scheduledTestId: string): Promise<TestExecutionResult> {\n    const scheduledTest = this.scheduledTests.get(scheduledTestId);\n    if (!scheduledTest) {\n      throw new Error(`Scheduled test not found: ${scheduledTestId}`);\n    }\n\n    if (this.activeExecutions.has(scheduledTestId)) {\n      throw new Error('Test is already running');\n    }\n\n    const executionId = uuidv4();\n    const execution: TestExecutionResult = {\n      scheduledTestId,\n      executionId,\n      startTime: new Date(),\n      endTime: new Date(),\n      success: false\n    };\n\n    this.activeExecutions.set(scheduledTestId, execution);\n    this.emit('testExecutionStarted', execution);\n\n    try {\n      // Execute load test\n      const loadTestResults = await loadTestingFramework.runLoadTest(\n        scheduledTest.scenarioId,\n        {\n          saveBaseline: scheduledTest.options.saveBaseline,\n          compareBaseline: scheduledTest.options.compareBaseline\n        }\n      );\n\n      execution.results = loadTestResults;\n\n      // Check for regressions if enabled\n      if (scheduledTest.options.compareBaseline) {\n        const regressionAlerts = await performanceRegressionDetector.analyzeResults(\n          scheduledTest.scenarioId,\n          loadTestResults\n        );\n        execution.regressionAlerts = regressionAlerts;\n      }\n\n      // Run benchmarks if enabled\n      if (scheduledTest.options.runBenchmarks) {\n        const benchmarkResults = await performanceBenchmark.runBenchmarkSuite(\n          `Scheduled Benchmark - ${scheduledTest.name}`\n        );\n        execution.benchmarkResults = benchmarkResults;\n      }\n\n      execution.success = true;\n      execution.endTime = new Date();\n\n      // Reset consecutive failures on success\n      if (scheduledTest.consecutiveFailures > 0) {\n        await this.updateScheduledTest(scheduledTestId, { \n          consecutiveFailures: 0,\n          lastRun: new Date()\n        });\n      } else {\n        await this.updateScheduledTest(scheduledTestId, { \n          lastRun: new Date()\n        });\n      }\n\n      // Send notifications if configured\n      if (this.configuration.notifications.enabled && this.configuration.notifications.onSuccess) {\n        await this.sendNotification('success', scheduledTest, execution);\n      }\n\n      if (execution.regressionAlerts && execution.regressionAlerts.length > 0 && \n          this.configuration.notifications.onRegression) {\n        await this.sendNotification('regression', scheduledTest, execution);\n      }\n\n    } catch (error) {\n      execution.success = false;\n      execution.error = error.message;\n      execution.endTime = new Date();\n\n      // Increment consecutive failures\n      const newFailureCount = scheduledTest.consecutiveFailures + 1;\n      await this.updateScheduledTest(scheduledTestId, { \n        consecutiveFailures: newFailureCount,\n        lastRun: new Date()\n      });\n\n      // Disable test if max consecutive failures reached\n      if (newFailureCount >= scheduledTest.maxConsecutiveFailures) {\n        await this.updateScheduledTest(scheduledTestId, { enabled: false });\n        console.log(`Disabled scheduled test ${scheduledTest.name} due to consecutive failures`);\n      }\n\n      // Send failure notification\n      if (this.configuration.notifications.enabled && this.configuration.notifications.onFailure) {\n        await this.sendNotification('failure', scheduledTest, execution);\n      }\n\n      console.error(`Scheduled test execution failed: ${scheduledTest.name}`, error);\n    } finally {\n      this.activeExecutions.delete(scheduledTestId);\n      await this.saveExecution(execution);\n      this.emit('testExecutionCompleted', execution);\n    }\n\n    return execution;\n  }\n\n  /**\n   * Update scheduler configuration\n   */\n  async updateConfiguration(config: Partial<SchedulerConfiguration>): Promise<void> {\n    this.configuration = { ...this.configuration, ...config };\n    await this.saveConfiguration();\n\n    // Restart scheduler if enabled status changed\n    if (config.enabled !== undefined) {\n      if (config.enabled) {\n        this.startAllScheduledTests();\n      } else {\n        this.stopAllScheduledTests();\n      }\n    }\n\n    this.emit('configurationUpdated', this.configuration);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfiguration(): SchedulerConfiguration {\n    return { ...this.configuration };\n  }\n\n  /**\n   * Get scheduler status\n   */\n  getStatus(): {\n    enabled: boolean;\n    scheduledTestsCount: number;\n    activeExecutionsCount: number;\n    activeExecutions: Array<{\n      scheduledTestId: string;\n      executionId: string;\n      startTime: Date;\n      testName: string;\n    }>;\n    nextExecutions: Array<{\n      scheduledTestId: string;\n      testName: string;\n      nextRun: Date;\n    }>;\n  } {\n    const activeExecutions = Array.from(this.activeExecutions.values()).map(execution => ({\n      scheduledTestId: execution.scheduledTestId,\n      executionId: execution.executionId,\n      startTime: execution.startTime,\n      testName: this.scheduledTests.get(execution.scheduledTestId)?.name || 'Unknown'\n    }));\n\n    const nextExecutions = Array.from(this.scheduledTests.values())\n      .filter(test => test.enabled && test.nextRun)\n      .sort((a, b) => a.nextRun!.getTime() - b.nextRun!.getTime())\n      .slice(0, 10)\n      .map(test => ({\n        scheduledTestId: test.id,\n        testName: test.name,\n        nextRun: test.nextRun!\n      }));\n\n    return {\n      enabled: this.configuration.enabled,\n      scheduledTestsCount: this.scheduledTests.size,\n      activeExecutionsCount: this.activeExecutions.size,\n      activeExecutions,\n      nextExecutions\n    };\n  }\n\n  /**\n   * Clean up old test results\n   */\n  async cleanupOldResults(): Promise<{ deletedExecutions: number; deletedAlerts: number }> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - this.configuration.resultsRetentionDays);\n    \n    // Delete old executions\n    const deleteExecutionsStmt = db.prepare(\n      'DELETE FROM test_executions WHERE start_time < ?'\n    );\n    const executionResult = deleteExecutionsStmt.run(cutoffDate.toISOString());\n    \n    // Delete old regression alerts\n    const deleteAlertsStmt = db.prepare(\n      'DELETE FROM regression_alerts WHERE timestamp < ? AND acknowledged = 1'\n    );\n    const alertResult = deleteAlertsStmt.run(cutoffDate.toISOString());\n    \n    const result = {\n      deletedExecutions: executionResult.changes,\n      deletedAlerts: alertResult.changes\n    };\n    \n    this.emit('cleanupCompleted', result);\n    console.log('Cleanup completed:', result);\n    \n    return result;\n  }\n\n  /**\n   * Shutdown the scheduler\n   */\n  async shutdown(): Promise<void> {\n    this.stopAllScheduledTests();\n    this.removeAllListeners();\n    console.log('Load test scheduler shutdown completed');\n  }\n\n  /**\n   * Private methods\n   */\n  private async createTables(): Promise<void> {\n    // Create scheduled tests table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS scheduled_tests (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        scenario_id TEXT NOT NULL,\n        schedule TEXT NOT NULL,\n        enabled BOOLEAN NOT NULL,\n        options_json TEXT NOT NULL,\n        last_run TEXT,\n        consecutive_failures INTEGER DEFAULT 0,\n        max_consecutive_failures INTEGER DEFAULT 3,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      )\n    `);\n\n    // Create test executions table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS test_executions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        scheduled_test_id TEXT NOT NULL,\n        execution_id TEXT NOT NULL,\n        start_time TEXT NOT NULL,\n        end_time TEXT NOT NULL,\n        success BOOLEAN NOT NULL,\n        error TEXT,\n        results TEXT,\n        regression_alerts TEXT,\n        benchmark_results TEXT,\n        created_at TEXT DEFAULT (datetime('now')),\n        FOREIGN KEY (scheduled_test_id) REFERENCES scheduled_tests (id)\n      )\n    `);\n\n    // Create scheduler configuration table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS scheduler_configuration (\n        id INTEGER PRIMARY KEY CHECK (id = 1),\n        config_json TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      )\n    `);\n\n    // Create indexes\n    db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_test_executions_scheduled_test_id \n      ON test_executions(scheduled_test_id);\n      \n      CREATE INDEX IF NOT EXISTS idx_test_executions_start_time \n      ON test_executions(start_time);\n    `);\n  }\n\n  private async loadScheduledTests(): Promise<void> {\n    const stmt = db.prepare('SELECT * FROM scheduled_tests');\n    const rows = stmt.all() as any[];\n    \n    for (const row of rows) {\n      const scheduledTest: ScheduledTest = {\n        id: row.id,\n        name: row.name,\n        scenarioId: row.scenario_id,\n        schedule: row.schedule,\n        enabled: Boolean(row.enabled),\n        options: JSON.parse(row.options_json),\n        lastRun: row.last_run ? new Date(row.last_run) : undefined,\n        consecutiveFailures: row.consecutive_failures,\n        maxConsecutiveFailures: row.max_consecutive_failures,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      };\n      \n      this.scheduledTests.set(scheduledTest.id, scheduledTest);\n    }\n    \n    console.log(`Loaded ${rows.length} scheduled tests`);\n  }\n\n  private async saveScheduledTest(test: ScheduledTest): Promise<void> {\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO scheduled_tests \n      (id, name, scenario_id, schedule, enabled, options_json, last_run, \n       consecutive_failures, max_consecutive_failures, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    \n    stmt.run(\n      test.id,\n      test.name,\n      test.scenarioId,\n      test.schedule,\n      test.enabled,\n      JSON.stringify(test.options),\n      test.lastRun?.toISOString(),\n      test.consecutiveFailures,\n      test.maxConsecutiveFailures,\n      test.createdAt.toISOString(),\n      test.updatedAt.toISOString()\n    );\n  }\n\n  private async saveExecution(execution: TestExecutionResult): Promise<void> {\n    const stmt = db.prepare(`\n      INSERT INTO test_executions \n      (scheduled_test_id, execution_id, start_time, end_time, success, error, \n       results, regression_alerts, benchmark_results)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    \n    stmt.run(\n      execution.scheduledTestId,\n      execution.executionId,\n      execution.startTime.toISOString(),\n      execution.endTime.toISOString(),\n      execution.success,\n      execution.error,\n      execution.results ? JSON.stringify(execution.results) : null,\n      execution.regressionAlerts ? JSON.stringify(execution.regressionAlerts) : null,\n      execution.benchmarkResults ? JSON.stringify(execution.benchmarkResults) : null\n    );\n  }\n\n  private async loadConfiguration(): Promise<void> {\n    try {\n      const stmt = db.prepare('SELECT config_json FROM scheduler_configuration WHERE id = 1');\n      const row = stmt.get() as any;\n      \n      if (row) {\n        this.configuration = { ...this.configuration, ...JSON.parse(row.config_json) };\n      }\n    } catch (error) {\n      console.log('Using default scheduler configuration');\n    }\n  }\n\n  private async saveConfiguration(): Promise<void> {\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO scheduler_configuration (id, config_json, updated_at)\n      VALUES (1, ?, ?)\n    `);\n    \n    stmt.run(JSON.stringify(this.configuration), new Date().toISOString());\n  }\n\n  private getDefaultConfiguration(): SchedulerConfiguration {\n    return {\n      enabled: true,\n      maxConcurrentTests: 3,\n      defaultTimeout: 600000, // 10 minutes\n      retryFailedTests: true,\n      maxRetries: 2,\n      retryDelay: 60000, // 1 minute\n      cleanupOldResults: true,\n      resultsRetentionDays: 30,\n      notifications: {\n        enabled: false,\n        channels: ['console'],\n        onSuccess: false,\n        onFailure: true,\n        onRegression: true\n      }\n    };\n  }\n\n  private startAllScheduledTests(): void {\n    for (const scheduledTest of this.scheduledTests.values()) {\n      if (scheduledTest.enabled) {\n        this.startCronJob(scheduledTest);\n      }\n    }\n    console.log('Started all enabled scheduled tests');\n  }\n\n  private stopAllScheduledTests(): void {\n    for (const jobId of this.cronJobs.keys()) {\n      this.stopCronJob(jobId);\n    }\n    console.log('Stopped all scheduled tests');\n  }\n\n  private startCronJob(scheduledTest: ScheduledTest): void {\n    if (this.cronJobs.has(scheduledTest.id)) {\n      this.stopCronJob(scheduledTest.id);\n    }\n\n    try {\n      const job = new CronJob(\n        scheduledTest.schedule,\n        () => {\n          this.executeTest(scheduledTest.id).catch(error => {\n            console.error(`Scheduled test execution failed: ${scheduledTest.name}`, error);\n          });\n        },\n        null,\n        true, // Start immediately\n        'UTC'\n      );\n\n      this.cronJobs.set(scheduledTest.id, job);\n      \n      // Update next run time\n      const nextRun = job.nextDate()?.toJSDate();\n      if (nextRun) {\n        scheduledTest.nextRun = nextRun;\n      }\n\n      console.log(`Started cron job for: ${scheduledTest.name} (${scheduledTest.schedule})`);\n    } catch (error) {\n      console.error(`Failed to start cron job for: ${scheduledTest.name}`, error);\n    }\n  }\n\n  private stopCronJob(scheduledTestId: string): void {\n    const job = this.cronJobs.get(scheduledTestId);\n    if (job) {\n      job.stop();\n      this.cronJobs.delete(scheduledTestId);\n    }\n  }\n\n  private scheduleCleanupJob(): void {\n    // Run cleanup daily at 2 AM UTC\n    new CronJob(\n      '0 2 * * *',\n      () => {\n        this.cleanupOldResults().catch(error => {\n          console.error('Cleanup job failed:', error);\n        });\n      },\n      null,\n      true,\n      'UTC'\n    );\n  }\n\n  private async sendNotification(type: 'success' | 'failure' | 'regression', scheduledTest: ScheduledTest, execution: TestExecutionResult): Promise<void> {\n    // Simple console logging for now\n    // In production, implement actual notification channels (email, Slack, etc.)\n    \n    const message = this.formatNotificationMessage(type, scheduledTest, execution);\n    \n    switch (type) {\n      case 'success':\n        console.log(`\u2705 ${message}`);\n        break;\n      case 'failure':\n        console.error(`\u274C ${message}`);\n        break;\n      case 'regression':\n        console.warn(`\u26A0\uFE0F ${message}`);\n        break;\n    }\n    \n    this.emit('notificationSent', { type, scheduledTest, execution, message });\n  }\n\n  private formatNotificationMessage(type: 'success' | 'failure' | 'regression', scheduledTest: ScheduledTest, execution: TestExecutionResult): string {\n    const duration = execution.endTime.getTime() - execution.startTime.getTime();\n    const durationStr = `${Math.round(duration / 1000)}s`;\n    \n    switch (type) {\n      case 'success':\n        return `Load test '${scheduledTest.name}' completed successfully in ${durationStr}`;\n      case 'failure':\n        return `Load test '${scheduledTest.name}' failed after ${durationStr}: ${execution.error}`;\n      case 'regression':\n        const alertCount = execution.regressionAlerts?.length || 0;\n        return `Load test '${scheduledTest.name}' detected ${alertCount} performance regression(s)`;\n      default:\n        return `Load test '${scheduledTest.name}' completed`;\n    }\n  }\n}\n\n// Export singleton instance\nexport const loadTestScheduler = new LoadTestScheduler();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d9b475c165ee873ab9178daf5ddab9b261dc714e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_204qeijc4k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_204qeijc4k();
cov_204qeijc4k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_204qeijc4k().s[1]++;
exports.loadTestScheduler = exports.LoadTestScheduler = void 0;
const events_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[2]++, require("events"));
const LoadTestingFramework_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[3]++, require("./LoadTestingFramework"));
const PerformanceRegressionDetector_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[4]++, require("./PerformanceRegressionDetector"));
const PerformanceBenchmark_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[5]++, require("./PerformanceBenchmark"));
const connection_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[6]++, require("../../database/connection"));
const cron_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[7]++, require("cron"));
const uuid_1 =
/* istanbul ignore next */
(cov_204qeijc4k().s[8]++, require("uuid"));
class LoadTestScheduler extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[0]++;
    cov_204qeijc4k().s[9]++;
    super();
    /* istanbul ignore next */
    cov_204qeijc4k().s[10]++;
    this.scheduledTests = new Map();
    /* istanbul ignore next */
    cov_204qeijc4k().s[11]++;
    this.cronJobs = new Map();
    /* istanbul ignore next */
    cov_204qeijc4k().s[12]++;
    this.activeExecutions = new Map();
    /* istanbul ignore next */
    cov_204qeijc4k().s[13]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_204qeijc4k().s[14]++;
    this.configuration = this.getDefaultConfiguration();
  }
  /**
   * Initialize the scheduler
   */
  async initialize() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[1]++;
    cov_204qeijc4k().s[15]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[0][0]++;
      cov_204qeijc4k().s[16]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[0][1]++;
    }
    cov_204qeijc4k().s[17]++;
    try {
      /* istanbul ignore next */
      cov_204qeijc4k().s[18]++;
      await this.createTables();
      /* istanbul ignore next */
      cov_204qeijc4k().s[19]++;
      await this.loadScheduledTests();
      /* istanbul ignore next */
      cov_204qeijc4k().s[20]++;
      await this.loadConfiguration();
      /* istanbul ignore next */
      cov_204qeijc4k().s[21]++;
      if (this.configuration.enabled) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[1][0]++;
        cov_204qeijc4k().s[22]++;
        this.startAllScheduledTests();
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[1][1]++;
      }
      // Start cleanup job (daily at 2 AM)
      cov_204qeijc4k().s[23]++;
      if (this.configuration.cleanupOldResults) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[2][0]++;
        cov_204qeijc4k().s[24]++;
        this.scheduleCleanupJob();
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[2][1]++;
      }
      cov_204qeijc4k().s[25]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_204qeijc4k().s[26]++;
      this.emit('initialized');
      /* istanbul ignore next */
      cov_204qeijc4k().s[27]++;
      console.log('Load test scheduler initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[28]++;
      console.error('Failed to initialize load test scheduler:', error);
      /* istanbul ignore next */
      cov_204qeijc4k().s[29]++;
      throw error;
    }
  }
  /**
   * Create a new scheduled test
   */
  async createScheduledTest(test) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[2]++;
    const scheduledTest =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[30]++, {
      ...test,
      id: (0, uuid_1.v4)(),
      consecutiveFailures: 0,
      maxConsecutiveFailures:
      /* istanbul ignore next */
      (cov_204qeijc4k().b[3][0]++, test.maxConsecutiveFailures) ||
      /* istanbul ignore next */
      (cov_204qeijc4k().b[3][1]++, 3),
      createdAt: new Date(),
      updatedAt: new Date()
    });
    // Validate cron expression
    /* istanbul ignore next */
    cov_204qeijc4k().s[31]++;
    try {
      /* istanbul ignore next */
      cov_204qeijc4k().s[32]++;
      new cron_1.CronJob(test.schedule, () => {
        /* istanbul ignore next */
        cov_204qeijc4k().f[3]++;
      }, null, false);
    } catch (error) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[33]++;
      throw new Error(`Invalid cron expression: ${test.schedule}`);
    }
    // Save to database
    /* istanbul ignore next */
    cov_204qeijc4k().s[34]++;
    await this.saveScheduledTest(scheduledTest);
    // Add to memory
    /* istanbul ignore next */
    cov_204qeijc4k().s[35]++;
    this.scheduledTests.set(scheduledTest.id, scheduledTest);
    // Start cron job if enabled
    /* istanbul ignore next */
    cov_204qeijc4k().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_204qeijc4k().b[5][0]++, scheduledTest.enabled) &&
    /* istanbul ignore next */
    (cov_204qeijc4k().b[5][1]++, this.configuration.enabled)) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[4][0]++;
      cov_204qeijc4k().s[37]++;
      this.startCronJob(scheduledTest);
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[4][1]++;
    }
    cov_204qeijc4k().s[38]++;
    this.emit('scheduledTestCreated', scheduledTest);
    /* istanbul ignore next */
    cov_204qeijc4k().s[39]++;
    return scheduledTest.id;
  }
  /**
   * Update a scheduled test
   */
  async updateScheduledTest(id, updates) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[4]++;
    const scheduledTest =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[40]++, this.scheduledTests.get(id));
    /* istanbul ignore next */
    cov_204qeijc4k().s[41]++;
    if (!scheduledTest) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[6][0]++;
      cov_204qeijc4k().s[42]++;
      throw new Error(`Scheduled test not found: ${id}`);
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[6][1]++;
    }
    const updatedTest =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[43]++, {
      ...scheduledTest,
      ...updates,
      updatedAt: new Date()
    });
    // Validate cron expression if changed
    /* istanbul ignore next */
    cov_204qeijc4k().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_204qeijc4k().b[8][0]++, updates.schedule) &&
    /* istanbul ignore next */
    (cov_204qeijc4k().b[8][1]++, updates.schedule !== scheduledTest.schedule)) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[7][0]++;
      cov_204qeijc4k().s[45]++;
      try {
        /* istanbul ignore next */
        cov_204qeijc4k().s[46]++;
        new cron_1.CronJob(updates.schedule, () => {
          /* istanbul ignore next */
          cov_204qeijc4k().f[5]++;
        }, null, false);
      } catch (error) {
        /* istanbul ignore next */
        cov_204qeijc4k().s[47]++;
        throw new Error(`Invalid cron expression: ${updates.schedule}`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[7][1]++;
    }
    // Update database
    cov_204qeijc4k().s[48]++;
    await this.saveScheduledTest(updatedTest);
    // Update memory
    /* istanbul ignore next */
    cov_204qeijc4k().s[49]++;
    this.scheduledTests.set(id, updatedTest);
    // Restart cron job if schedule or enabled status changed
    /* istanbul ignore next */
    cov_204qeijc4k().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_204qeijc4k().b[10][0]++, updates.schedule) ||
    /* istanbul ignore next */
    (cov_204qeijc4k().b[10][1]++, updates.enabled !== undefined)) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[9][0]++;
      cov_204qeijc4k().s[51]++;
      this.stopCronJob(id);
      /* istanbul ignore next */
      cov_204qeijc4k().s[52]++;
      if (
      /* istanbul ignore next */
      (cov_204qeijc4k().b[12][0]++, updatedTest.enabled) &&
      /* istanbul ignore next */
      (cov_204qeijc4k().b[12][1]++, this.configuration.enabled)) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[11][0]++;
        cov_204qeijc4k().s[53]++;
        this.startCronJob(updatedTest);
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[11][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[9][1]++;
    }
    cov_204qeijc4k().s[54]++;
    this.emit('scheduledTestUpdated', updatedTest);
  }
  /**
   * Delete a scheduled test
   */
  async deleteScheduledTest(id) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[6]++;
    const scheduledTest =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[55]++, this.scheduledTests.get(id));
    /* istanbul ignore next */
    cov_204qeijc4k().s[56]++;
    if (!scheduledTest) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[13][0]++;
      cov_204qeijc4k().s[57]++;
      throw new Error(`Scheduled test not found: ${id}`);
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[13][1]++;
    }
    // Stop cron job
    cov_204qeijc4k().s[58]++;
    this.stopCronJob(id);
    // Remove from database
    const stmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[59]++, connection_1.db.prepare('DELETE FROM scheduled_tests WHERE id = ?'));
    /* istanbul ignore next */
    cov_204qeijc4k().s[60]++;
    stmt.run(id);
    // Remove from memory
    /* istanbul ignore next */
    cov_204qeijc4k().s[61]++;
    this.scheduledTests.delete(id);
    /* istanbul ignore next */
    cov_204qeijc4k().s[62]++;
    this.emit('scheduledTestDeleted', id);
  }
  /**
   * Get all scheduled tests
   */
  getScheduledTests() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[7]++;
    cov_204qeijc4k().s[63]++;
    return Array.from(this.scheduledTests.values());
  }
  /**
   * Get a specific scheduled test
   */
  getScheduledTest(id) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[8]++;
    cov_204qeijc4k().s[64]++;
    return this.scheduledTests.get(id);
  }
  /**
   * Get test execution history
   */
  async getExecutionHistory(scheduledTestId, limit =
  /* istanbul ignore next */
  (cov_204qeijc4k().b[14][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_204qeijc4k().b[15][0]++, 0)) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[9]++;
    let query =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[65]++, `
      SELECT * FROM test_executions 
      ${scheduledTestId ?
    /* istanbul ignore next */
    (cov_204qeijc4k().b[16][0]++, 'WHERE scheduled_test_id = ?') :
    /* istanbul ignore next */
    (cov_204qeijc4k().b[16][1]++, '')}
      ORDER BY start_time DESC 
      LIMIT ? OFFSET ?
    `);
    const params =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[66]++, scheduledTestId ?
    /* istanbul ignore next */
    (cov_204qeijc4k().b[17][0]++, [scheduledTestId, limit, offset]) :
    /* istanbul ignore next */
    (cov_204qeijc4k().b[17][1]++, [limit, offset]));
    const stmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[67]++, connection_1.db.prepare(query));
    const rows =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[68]++, stmt.all(...params));
    /* istanbul ignore next */
    cov_204qeijc4k().s[69]++;
    return rows.map(row => {
      /* istanbul ignore next */
      cov_204qeijc4k().f[10]++;
      cov_204qeijc4k().s[70]++;
      return {
        scheduledTestId: row.scheduled_test_id,
        executionId: row.execution_id,
        startTime: new Date(row.start_time),
        endTime: new Date(row.end_time),
        success: Boolean(row.success),
        error: row.error,
        results: row.results ?
        /* istanbul ignore next */
        (cov_204qeijc4k().b[18][0]++, JSON.parse(row.results)) :
        /* istanbul ignore next */
        (cov_204qeijc4k().b[18][1]++, undefined),
        regressionAlerts: row.regression_alerts ?
        /* istanbul ignore next */
        (cov_204qeijc4k().b[19][0]++, JSON.parse(row.regression_alerts)) :
        /* istanbul ignore next */
        (cov_204qeijc4k().b[19][1]++, undefined),
        benchmarkResults: row.benchmark_results ?
        /* istanbul ignore next */
        (cov_204qeijc4k().b[20][0]++, JSON.parse(row.benchmark_results)) :
        /* istanbul ignore next */
        (cov_204qeijc4k().b[20][1]++, undefined)
      };
    });
  }
  /**
   * Manually execute a scheduled test
   */
  async executeTest(scheduledTestId) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[11]++;
    const scheduledTest =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[71]++, this.scheduledTests.get(scheduledTestId));
    /* istanbul ignore next */
    cov_204qeijc4k().s[72]++;
    if (!scheduledTest) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[21][0]++;
      cov_204qeijc4k().s[73]++;
      throw new Error(`Scheduled test not found: ${scheduledTestId}`);
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[21][1]++;
    }
    cov_204qeijc4k().s[74]++;
    if (this.activeExecutions.has(scheduledTestId)) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[22][0]++;
      cov_204qeijc4k().s[75]++;
      throw new Error('Test is already running');
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[22][1]++;
    }
    const executionId =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[76]++, (0, uuid_1.v4)());
    const execution =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[77]++, {
      scheduledTestId,
      executionId,
      startTime: new Date(),
      endTime: new Date(),
      success: false
    });
    /* istanbul ignore next */
    cov_204qeijc4k().s[78]++;
    this.activeExecutions.set(scheduledTestId, execution);
    /* istanbul ignore next */
    cov_204qeijc4k().s[79]++;
    this.emit('testExecutionStarted', execution);
    /* istanbul ignore next */
    cov_204qeijc4k().s[80]++;
    try {
      // Execute load test
      const loadTestResults =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[81]++, await LoadTestingFramework_1.loadTestingFramework.runLoadTest(scheduledTest.scenarioId, {
        saveBaseline: scheduledTest.options.saveBaseline,
        compareBaseline: scheduledTest.options.compareBaseline
      }));
      /* istanbul ignore next */
      cov_204qeijc4k().s[82]++;
      execution.results = loadTestResults;
      // Check for regressions if enabled
      /* istanbul ignore next */
      cov_204qeijc4k().s[83]++;
      if (scheduledTest.options.compareBaseline) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[23][0]++;
        const regressionAlerts =
        /* istanbul ignore next */
        (cov_204qeijc4k().s[84]++, await PerformanceRegressionDetector_1.performanceRegressionDetector.analyzeResults(scheduledTest.scenarioId, loadTestResults));
        /* istanbul ignore next */
        cov_204qeijc4k().s[85]++;
        execution.regressionAlerts = regressionAlerts;
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[23][1]++;
      }
      // Run benchmarks if enabled
      cov_204qeijc4k().s[86]++;
      if (scheduledTest.options.runBenchmarks) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[24][0]++;
        const benchmarkResults =
        /* istanbul ignore next */
        (cov_204qeijc4k().s[87]++, await PerformanceBenchmark_1.performanceBenchmark.runBenchmarkSuite(`Scheduled Benchmark - ${scheduledTest.name}`));
        /* istanbul ignore next */
        cov_204qeijc4k().s[88]++;
        execution.benchmarkResults = benchmarkResults;
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[24][1]++;
      }
      cov_204qeijc4k().s[89]++;
      execution.success = true;
      /* istanbul ignore next */
      cov_204qeijc4k().s[90]++;
      execution.endTime = new Date();
      // Reset consecutive failures on success
      /* istanbul ignore next */
      cov_204qeijc4k().s[91]++;
      if (scheduledTest.consecutiveFailures > 0) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[25][0]++;
        cov_204qeijc4k().s[92]++;
        await this.updateScheduledTest(scheduledTestId, {
          consecutiveFailures: 0,
          lastRun: new Date()
        });
      } else {
        /* istanbul ignore next */
        cov_204qeijc4k().b[25][1]++;
        cov_204qeijc4k().s[93]++;
        await this.updateScheduledTest(scheduledTestId, {
          lastRun: new Date()
        });
      }
      // Send notifications if configured
      /* istanbul ignore next */
      cov_204qeijc4k().s[94]++;
      if (
      /* istanbul ignore next */
      (cov_204qeijc4k().b[27][0]++, this.configuration.notifications.enabled) &&
      /* istanbul ignore next */
      (cov_204qeijc4k().b[27][1]++, this.configuration.notifications.onSuccess)) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[26][0]++;
        cov_204qeijc4k().s[95]++;
        await this.sendNotification('success', scheduledTest, execution);
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[26][1]++;
      }
      cov_204qeijc4k().s[96]++;
      if (
      /* istanbul ignore next */
      (cov_204qeijc4k().b[29][0]++, execution.regressionAlerts) &&
      /* istanbul ignore next */
      (cov_204qeijc4k().b[29][1]++, execution.regressionAlerts.length > 0) &&
      /* istanbul ignore next */
      (cov_204qeijc4k().b[29][2]++, this.configuration.notifications.onRegression)) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[28][0]++;
        cov_204qeijc4k().s[97]++;
        await this.sendNotification('regression', scheduledTest, execution);
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[28][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[98]++;
      execution.success = false;
      /* istanbul ignore next */
      cov_204qeijc4k().s[99]++;
      execution.error = error.message;
      /* istanbul ignore next */
      cov_204qeijc4k().s[100]++;
      execution.endTime = new Date();
      // Increment consecutive failures
      const newFailureCount =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[101]++, scheduledTest.consecutiveFailures + 1);
      /* istanbul ignore next */
      cov_204qeijc4k().s[102]++;
      await this.updateScheduledTest(scheduledTestId, {
        consecutiveFailures: newFailureCount,
        lastRun: new Date()
      });
      // Disable test if max consecutive failures reached
      /* istanbul ignore next */
      cov_204qeijc4k().s[103]++;
      if (newFailureCount >= scheduledTest.maxConsecutiveFailures) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[30][0]++;
        cov_204qeijc4k().s[104]++;
        await this.updateScheduledTest(scheduledTestId, {
          enabled: false
        });
        /* istanbul ignore next */
        cov_204qeijc4k().s[105]++;
        console.log(`Disabled scheduled test ${scheduledTest.name} due to consecutive failures`);
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[30][1]++;
      }
      // Send failure notification
      cov_204qeijc4k().s[106]++;
      if (
      /* istanbul ignore next */
      (cov_204qeijc4k().b[32][0]++, this.configuration.notifications.enabled) &&
      /* istanbul ignore next */
      (cov_204qeijc4k().b[32][1]++, this.configuration.notifications.onFailure)) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[31][0]++;
        cov_204qeijc4k().s[107]++;
        await this.sendNotification('failure', scheduledTest, execution);
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[31][1]++;
      }
      cov_204qeijc4k().s[108]++;
      console.error(`Scheduled test execution failed: ${scheduledTest.name}`, error);
    } finally {
      /* istanbul ignore next */
      cov_204qeijc4k().s[109]++;
      this.activeExecutions.delete(scheduledTestId);
      /* istanbul ignore next */
      cov_204qeijc4k().s[110]++;
      await this.saveExecution(execution);
      /* istanbul ignore next */
      cov_204qeijc4k().s[111]++;
      this.emit('testExecutionCompleted', execution);
    }
    /* istanbul ignore next */
    cov_204qeijc4k().s[112]++;
    return execution;
  }
  /**
   * Update scheduler configuration
   */
  async updateConfiguration(config) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[12]++;
    cov_204qeijc4k().s[113]++;
    this.configuration = {
      ...this.configuration,
      ...config
    };
    /* istanbul ignore next */
    cov_204qeijc4k().s[114]++;
    await this.saveConfiguration();
    // Restart scheduler if enabled status changed
    /* istanbul ignore next */
    cov_204qeijc4k().s[115]++;
    if (config.enabled !== undefined) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[33][0]++;
      cov_204qeijc4k().s[116]++;
      if (config.enabled) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[34][0]++;
        cov_204qeijc4k().s[117]++;
        this.startAllScheduledTests();
      } else {
        /* istanbul ignore next */
        cov_204qeijc4k().b[34][1]++;
        cov_204qeijc4k().s[118]++;
        this.stopAllScheduledTests();
      }
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[33][1]++;
    }
    cov_204qeijc4k().s[119]++;
    this.emit('configurationUpdated', this.configuration);
  }
  /**
   * Get current configuration
   */
  getConfiguration() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[13]++;
    cov_204qeijc4k().s[120]++;
    return {
      ...this.configuration
    };
  }
  /**
   * Get scheduler status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[14]++;
    const activeExecutions =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[121]++, Array.from(this.activeExecutions.values()).map(execution => {
      /* istanbul ignore next */
      cov_204qeijc4k().f[15]++;
      cov_204qeijc4k().s[122]++;
      return {
        scheduledTestId: execution.scheduledTestId,
        executionId: execution.executionId,
        startTime: execution.startTime,
        testName:
        /* istanbul ignore next */
        (cov_204qeijc4k().b[35][0]++, this.scheduledTests.get(execution.scheduledTestId)?.name) ||
        /* istanbul ignore next */
        (cov_204qeijc4k().b[35][1]++, 'Unknown')
      };
    }));
    const nextExecutions =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[123]++, Array.from(this.scheduledTests.values()).filter(test => {
      /* istanbul ignore next */
      cov_204qeijc4k().f[16]++;
      cov_204qeijc4k().s[124]++;
      return /* istanbul ignore next */(cov_204qeijc4k().b[36][0]++, test.enabled) &&
      /* istanbul ignore next */
      (cov_204qeijc4k().b[36][1]++, test.nextRun);
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_204qeijc4k().f[17]++;
      cov_204qeijc4k().s[125]++;
      return a.nextRun.getTime() - b.nextRun.getTime();
    }).slice(0, 10).map(test => {
      /* istanbul ignore next */
      cov_204qeijc4k().f[18]++;
      cov_204qeijc4k().s[126]++;
      return {
        scheduledTestId: test.id,
        testName: test.name,
        nextRun: test.nextRun
      };
    }));
    /* istanbul ignore next */
    cov_204qeijc4k().s[127]++;
    return {
      enabled: this.configuration.enabled,
      scheduledTestsCount: this.scheduledTests.size,
      activeExecutionsCount: this.activeExecutions.size,
      activeExecutions,
      nextExecutions
    };
  }
  /**
   * Clean up old test results
   */
  async cleanupOldResults() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[19]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[128]++, new Date());
    /* istanbul ignore next */
    cov_204qeijc4k().s[129]++;
    cutoffDate.setDate(cutoffDate.getDate() - this.configuration.resultsRetentionDays);
    // Delete old executions
    const deleteExecutionsStmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[130]++, connection_1.db.prepare('DELETE FROM test_executions WHERE start_time < ?'));
    const executionResult =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[131]++, deleteExecutionsStmt.run(cutoffDate.toISOString()));
    // Delete old regression alerts
    const deleteAlertsStmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[132]++, connection_1.db.prepare('DELETE FROM regression_alerts WHERE timestamp < ? AND acknowledged = 1'));
    const alertResult =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[133]++, deleteAlertsStmt.run(cutoffDate.toISOString()));
    const result =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[134]++, {
      deletedExecutions: executionResult.changes,
      deletedAlerts: alertResult.changes
    });
    /* istanbul ignore next */
    cov_204qeijc4k().s[135]++;
    this.emit('cleanupCompleted', result);
    /* istanbul ignore next */
    cov_204qeijc4k().s[136]++;
    console.log('Cleanup completed:', result);
    /* istanbul ignore next */
    cov_204qeijc4k().s[137]++;
    return result;
  }
  /**
   * Shutdown the scheduler
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[20]++;
    cov_204qeijc4k().s[138]++;
    this.stopAllScheduledTests();
    /* istanbul ignore next */
    cov_204qeijc4k().s[139]++;
    this.removeAllListeners();
    /* istanbul ignore next */
    cov_204qeijc4k().s[140]++;
    console.log('Load test scheduler shutdown completed');
  }
  /**
   * Private methods
   */
  async createTables() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[21]++;
    cov_204qeijc4k().s[141]++;
    // Create scheduled tests table
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS scheduled_tests (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        scenario_id TEXT NOT NULL,
        schedule TEXT NOT NULL,
        enabled BOOLEAN NOT NULL,
        options_json TEXT NOT NULL,
        last_run TEXT,
        consecutive_failures INTEGER DEFAULT 0,
        max_consecutive_failures INTEGER DEFAULT 3,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);
    // Create test executions table
    /* istanbul ignore next */
    cov_204qeijc4k().s[142]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS test_executions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        scheduled_test_id TEXT NOT NULL,
        execution_id TEXT NOT NULL,
        start_time TEXT NOT NULL,
        end_time TEXT NOT NULL,
        success BOOLEAN NOT NULL,
        error TEXT,
        results TEXT,
        regression_alerts TEXT,
        benchmark_results TEXT,
        created_at TEXT DEFAULT (datetime('now')),
        FOREIGN KEY (scheduled_test_id) REFERENCES scheduled_tests (id)
      )
    `);
    // Create scheduler configuration table
    /* istanbul ignore next */
    cov_204qeijc4k().s[143]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS scheduler_configuration (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        config_json TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);
    // Create indexes
    /* istanbul ignore next */
    cov_204qeijc4k().s[144]++;
    connection_1.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_test_executions_scheduled_test_id 
      ON test_executions(scheduled_test_id);
      
      CREATE INDEX IF NOT EXISTS idx_test_executions_start_time 
      ON test_executions(start_time);
    `);
  }
  async loadScheduledTests() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[22]++;
    const stmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[145]++, connection_1.db.prepare('SELECT * FROM scheduled_tests'));
    const rows =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[146]++, stmt.all());
    /* istanbul ignore next */
    cov_204qeijc4k().s[147]++;
    for (const row of rows) {
      const scheduledTest =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[148]++, {
        id: row.id,
        name: row.name,
        scenarioId: row.scenario_id,
        schedule: row.schedule,
        enabled: Boolean(row.enabled),
        options: JSON.parse(row.options_json),
        lastRun: row.last_run ?
        /* istanbul ignore next */
        (cov_204qeijc4k().b[37][0]++, new Date(row.last_run)) :
        /* istanbul ignore next */
        (cov_204qeijc4k().b[37][1]++, undefined),
        consecutiveFailures: row.consecutive_failures,
        maxConsecutiveFailures: row.max_consecutive_failures,
        createdAt: new Date(row.created_at),
        updatedAt: new Date(row.updated_at)
      });
      /* istanbul ignore next */
      cov_204qeijc4k().s[149]++;
      this.scheduledTests.set(scheduledTest.id, scheduledTest);
    }
    /* istanbul ignore next */
    cov_204qeijc4k().s[150]++;
    console.log(`Loaded ${rows.length} scheduled tests`);
  }
  async saveScheduledTest(test) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[23]++;
    const stmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[151]++, connection_1.db.prepare(`
      INSERT OR REPLACE INTO scheduled_tests 
      (id, name, scenario_id, schedule, enabled, options_json, last_run, 
       consecutive_failures, max_consecutive_failures, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `));
    /* istanbul ignore next */
    cov_204qeijc4k().s[152]++;
    stmt.run(test.id, test.name, test.scenarioId, test.schedule, test.enabled, JSON.stringify(test.options), test.lastRun?.toISOString(), test.consecutiveFailures, test.maxConsecutiveFailures, test.createdAt.toISOString(), test.updatedAt.toISOString());
  }
  async saveExecution(execution) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[24]++;
    const stmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[153]++, connection_1.db.prepare(`
      INSERT INTO test_executions 
      (scheduled_test_id, execution_id, start_time, end_time, success, error, 
       results, regression_alerts, benchmark_results)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `));
    /* istanbul ignore next */
    cov_204qeijc4k().s[154]++;
    stmt.run(execution.scheduledTestId, execution.executionId, execution.startTime.toISOString(), execution.endTime.toISOString(), execution.success, execution.error, execution.results ?
    /* istanbul ignore next */
    (cov_204qeijc4k().b[38][0]++, JSON.stringify(execution.results)) :
    /* istanbul ignore next */
    (cov_204qeijc4k().b[38][1]++, null), execution.regressionAlerts ?
    /* istanbul ignore next */
    (cov_204qeijc4k().b[39][0]++, JSON.stringify(execution.regressionAlerts)) :
    /* istanbul ignore next */
    (cov_204qeijc4k().b[39][1]++, null), execution.benchmarkResults ?
    /* istanbul ignore next */
    (cov_204qeijc4k().b[40][0]++, JSON.stringify(execution.benchmarkResults)) :
    /* istanbul ignore next */
    (cov_204qeijc4k().b[40][1]++, null));
  }
  async loadConfiguration() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[25]++;
    cov_204qeijc4k().s[155]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[156]++, connection_1.db.prepare('SELECT config_json FROM scheduler_configuration WHERE id = 1'));
      const row =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[157]++, stmt.get());
      /* istanbul ignore next */
      cov_204qeijc4k().s[158]++;
      if (row) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[41][0]++;
        cov_204qeijc4k().s[159]++;
        this.configuration = {
          ...this.configuration,
          ...JSON.parse(row.config_json)
        };
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[41][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[160]++;
      console.log('Using default scheduler configuration');
    }
  }
  async saveConfiguration() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[26]++;
    const stmt =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[161]++, connection_1.db.prepare(`
      INSERT OR REPLACE INTO scheduler_configuration (id, config_json, updated_at)
      VALUES (1, ?, ?)
    `));
    /* istanbul ignore next */
    cov_204qeijc4k().s[162]++;
    stmt.run(JSON.stringify(this.configuration), new Date().toISOString());
  }
  getDefaultConfiguration() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[27]++;
    cov_204qeijc4k().s[163]++;
    return {
      enabled: true,
      maxConcurrentTests: 3,
      defaultTimeout: 600000,
      // 10 minutes
      retryFailedTests: true,
      maxRetries: 2,
      retryDelay: 60000,
      // 1 minute
      cleanupOldResults: true,
      resultsRetentionDays: 30,
      notifications: {
        enabled: false,
        channels: ['console'],
        onSuccess: false,
        onFailure: true,
        onRegression: true
      }
    };
  }
  startAllScheduledTests() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[28]++;
    cov_204qeijc4k().s[164]++;
    for (const scheduledTest of this.scheduledTests.values()) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[165]++;
      if (scheduledTest.enabled) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[42][0]++;
        cov_204qeijc4k().s[166]++;
        this.startCronJob(scheduledTest);
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[42][1]++;
      }
    }
    /* istanbul ignore next */
    cov_204qeijc4k().s[167]++;
    console.log('Started all enabled scheduled tests');
  }
  stopAllScheduledTests() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[29]++;
    cov_204qeijc4k().s[168]++;
    for (const jobId of this.cronJobs.keys()) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[169]++;
      this.stopCronJob(jobId);
    }
    /* istanbul ignore next */
    cov_204qeijc4k().s[170]++;
    console.log('Stopped all scheduled tests');
  }
  startCronJob(scheduledTest) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[30]++;
    cov_204qeijc4k().s[171]++;
    if (this.cronJobs.has(scheduledTest.id)) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[43][0]++;
      cov_204qeijc4k().s[172]++;
      this.stopCronJob(scheduledTest.id);
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[43][1]++;
    }
    cov_204qeijc4k().s[173]++;
    try {
      const job =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[174]++, new cron_1.CronJob(scheduledTest.schedule, () => {
        /* istanbul ignore next */
        cov_204qeijc4k().f[31]++;
        cov_204qeijc4k().s[175]++;
        this.executeTest(scheduledTest.id).catch(error => {
          /* istanbul ignore next */
          cov_204qeijc4k().f[32]++;
          cov_204qeijc4k().s[176]++;
          console.error(`Scheduled test execution failed: ${scheduledTest.name}`, error);
        });
      }, null, true,
      // Start immediately
      'UTC'));
      /* istanbul ignore next */
      cov_204qeijc4k().s[177]++;
      this.cronJobs.set(scheduledTest.id, job);
      // Update next run time
      const nextRun =
      /* istanbul ignore next */
      (cov_204qeijc4k().s[178]++, job.nextDate()?.toJSDate());
      /* istanbul ignore next */
      cov_204qeijc4k().s[179]++;
      if (nextRun) {
        /* istanbul ignore next */
        cov_204qeijc4k().b[44][0]++;
        cov_204qeijc4k().s[180]++;
        scheduledTest.nextRun = nextRun;
      } else
      /* istanbul ignore next */
      {
        cov_204qeijc4k().b[44][1]++;
      }
      cov_204qeijc4k().s[181]++;
      console.log(`Started cron job for: ${scheduledTest.name} (${scheduledTest.schedule})`);
    } catch (error) {
      /* istanbul ignore next */
      cov_204qeijc4k().s[182]++;
      console.error(`Failed to start cron job for: ${scheduledTest.name}`, error);
    }
  }
  stopCronJob(scheduledTestId) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[33]++;
    const job =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[183]++, this.cronJobs.get(scheduledTestId));
    /* istanbul ignore next */
    cov_204qeijc4k().s[184]++;
    if (job) {
      /* istanbul ignore next */
      cov_204qeijc4k().b[45][0]++;
      cov_204qeijc4k().s[185]++;
      job.stop();
      /* istanbul ignore next */
      cov_204qeijc4k().s[186]++;
      this.cronJobs.delete(scheduledTestId);
    } else
    /* istanbul ignore next */
    {
      cov_204qeijc4k().b[45][1]++;
    }
  }
  scheduleCleanupJob() {
    /* istanbul ignore next */
    cov_204qeijc4k().f[34]++;
    cov_204qeijc4k().s[187]++;
    // Run cleanup daily at 2 AM UTC
    new cron_1.CronJob('0 2 * * *', () => {
      /* istanbul ignore next */
      cov_204qeijc4k().f[35]++;
      cov_204qeijc4k().s[188]++;
      this.cleanupOldResults().catch(error => {
        /* istanbul ignore next */
        cov_204qeijc4k().f[36]++;
        cov_204qeijc4k().s[189]++;
        console.error('Cleanup job failed:', error);
      });
    }, null, true, 'UTC');
  }
  async sendNotification(type, scheduledTest, execution) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[37]++;
    // Simple console logging for now
    // In production, implement actual notification channels (email, Slack, etc.)
    const message =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[190]++, this.formatNotificationMessage(type, scheduledTest, execution));
    /* istanbul ignore next */
    cov_204qeijc4k().s[191]++;
    switch (type) {
      case 'success':
        /* istanbul ignore next */
        cov_204qeijc4k().b[46][0]++;
        cov_204qeijc4k().s[192]++;
        console.log(`✅ ${message}`);
        /* istanbul ignore next */
        cov_204qeijc4k().s[193]++;
        break;
      case 'failure':
        /* istanbul ignore next */
        cov_204qeijc4k().b[46][1]++;
        cov_204qeijc4k().s[194]++;
        console.error(`❌ ${message}`);
        /* istanbul ignore next */
        cov_204qeijc4k().s[195]++;
        break;
      case 'regression':
        /* istanbul ignore next */
        cov_204qeijc4k().b[46][2]++;
        cov_204qeijc4k().s[196]++;
        console.warn(`⚠️ ${message}`);
        /* istanbul ignore next */
        cov_204qeijc4k().s[197]++;
        break;
    }
    /* istanbul ignore next */
    cov_204qeijc4k().s[198]++;
    this.emit('notificationSent', {
      type,
      scheduledTest,
      execution,
      message
    });
  }
  formatNotificationMessage(type, scheduledTest, execution) {
    /* istanbul ignore next */
    cov_204qeijc4k().f[38]++;
    const duration =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[199]++, execution.endTime.getTime() - execution.startTime.getTime());
    const durationStr =
    /* istanbul ignore next */
    (cov_204qeijc4k().s[200]++, `${Math.round(duration / 1000)}s`);
    /* istanbul ignore next */
    cov_204qeijc4k().s[201]++;
    switch (type) {
      case 'success':
        /* istanbul ignore next */
        cov_204qeijc4k().b[47][0]++;
        cov_204qeijc4k().s[202]++;
        return `Load test '${scheduledTest.name}' completed successfully in ${durationStr}`;
      case 'failure':
        /* istanbul ignore next */
        cov_204qeijc4k().b[47][1]++;
        cov_204qeijc4k().s[203]++;
        return `Load test '${scheduledTest.name}' failed after ${durationStr}: ${execution.error}`;
      case 'regression':
        /* istanbul ignore next */
        cov_204qeijc4k().b[47][2]++;
        const alertCount =
        /* istanbul ignore next */
        (cov_204qeijc4k().s[204]++,
        /* istanbul ignore next */
        (cov_204qeijc4k().b[48][0]++, execution.regressionAlerts?.length) ||
        /* istanbul ignore next */
        (cov_204qeijc4k().b[48][1]++, 0));
        /* istanbul ignore next */
        cov_204qeijc4k().s[205]++;
        return `Load test '${scheduledTest.name}' detected ${alertCount} performance regression(s)`;
      default:
        /* istanbul ignore next */
        cov_204qeijc4k().b[47][3]++;
        cov_204qeijc4k().s[206]++;
        return `Load test '${scheduledTest.name}' completed`;
    }
  }
}
/* istanbul ignore next */
cov_204qeijc4k().s[207]++;
exports.LoadTestScheduler = LoadTestScheduler;
// Export singleton instance
/* istanbul ignore next */
cov_204qeijc4k().s[208]++;
exports.loadTestScheduler = new LoadTestScheduler();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,