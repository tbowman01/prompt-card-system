8731399ffee09ad091d47f7bc4b12d92
"use strict";

/* istanbul ignore next */
function cov_1annctun28() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/optimization.ts";
  var hash = "ef844ff22bf1a8185adfc3bb16b36207af3e7b28";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/optimization.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 75
        }
      },
      "5": {
        start: {
          line: 8,
          column: 29
        },
        end: {
          line: 8,
          column: 83
        }
      },
      "6": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 79
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 36,
          column: 3
        }
      },
      "9": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "10": {
        start: {
          line: 17,
          column: 52
        },
        end: {
          line: 17,
          column: 60
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "12": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 21,
          column: 15
        }
      },
      "13": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 23,
          column: 109
        }
      },
      "14": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 55
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "17": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 67,
          column: 3
        }
      },
      "18": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "19": {
        start: {
          line: 43,
          column: 55
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "20": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "21": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "22": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "23": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "24": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 115
        }
      },
      "25": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "26": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 57
        }
      },
      "27": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "28": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 96,
          column: 3
        }
      },
      "29": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "30": {
        start: {
          line: 74,
          column: 29
        },
        end: {
          line: 74,
          column: 39
        }
      },
      "31": {
        start: {
          line: 75,
          column: 63
        },
        end: {
          line: 75,
          column: 72
        }
      },
      "32": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "33": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "34": {
        start: {
          line: 81,
          column: 36
        },
        end: {
          line: 81,
          column: 82
        }
      },
      "35": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 82,
          column: 76
        }
      },
      "36": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 161
        }
      },
      "37": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "38": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 64
        }
      },
      "39": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "40": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "41": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "42": {
        start: {
          line: 103,
          column: 63
        },
        end: {
          line: 103,
          column: 71
        }
      },
      "43": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "44": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "45": {
        start: {
          line: 109,
          column: 28
        },
        end: {
          line: 109,
          column: 161
        }
      },
      "46": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "47": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 64
        }
      },
      "48": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "49": {
        start: {
          line: 127,
          column: 0
        },
        end: {
          line: 153,
          column: 3
        }
      },
      "50": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "51": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 129,
          column: 35
        }
      },
      "52": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "53": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "54": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "55": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "56": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 140,
          column: 93
        }
      },
      "57": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "58": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 57
        }
      },
      "59": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "60": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 174,
          column: 3
        }
      },
      "61": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 173,
          column: 5
        }
      },
      "62": {
        start: {
          line: 160,
          column: 27
        },
        end: {
          line: 160,
          column: 37
        }
      },
      "63": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 74
        }
      },
      "64": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "65": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 54
        }
      },
      "66": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "67": {
        start: {
          line: 179,
          column: 0
        },
        end: {
          line: 201,
          column: 3
        }
      },
      "68": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 200,
          column: 5
        }
      },
      "69": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 37
        }
      },
      "70": {
        start: {
          line: 182,
          column: 38
        },
        end: {
          line: 182,
          column: 46
        }
      },
      "71": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "72": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "73": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 100
        }
      },
      "74": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "75": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 65
        }
      },
      "76": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "77": {
        start: {
          line: 206,
          column: 0
        },
        end: {
          line: 222,
          column: 3
        }
      },
      "78": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "79": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 37
        }
      },
      "80": {
        start: {
          line: 209,
          column: 24
        },
        end: {
          line: 209,
          column: 98
        }
      },
      "81": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "82": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 56
        }
      },
      "83": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "84": {
        start: {
          line: 227,
          column: 0
        },
        end: {
          line: 248,
          column: 3
        }
      },
      "85": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 247,
          column: 5
        }
      },
      "86": {
        start: {
          line: 229,
          column: 29
        },
        end: {
          line: 229,
          column: 37
        }
      },
      "87": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "88": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "89": {
        start: {
          line: 235,
          column: 30
        },
        end: {
          line: 235,
          column: 107
        }
      },
      "90": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 239,
          column: 11
        }
      },
      "91": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 53
        }
      },
      "92": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "93": {
        start: {
          line: 253,
          column: 0
        },
        end: {
          line: 269,
          column: 3
        }
      },
      "94": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 268,
          column: 5
        }
      },
      "95": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 255,
          column: 39
        }
      },
      "96": {
        start: {
          line: 256,
          column: 25
        },
        end: {
          line: 256,
          column: 98
        }
      },
      "97": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "98": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 55
        }
      },
      "99": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "100": {
        start: {
          line: 274,
          column: 0
        },
        end: {
          line: 295,
          column: 3
        }
      },
      "101": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "102": {
        start: {
          line: 276,
          column: 46
        },
        end: {
          line: 276,
          column: 54
        }
      },
      "103": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "104": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "105": {
        start: {
          line: 282,
          column: 33
        },
        end: {
          line: 282,
          column: 129
        }
      },
      "106": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 286,
          column: 11
        }
      },
      "107": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 59
        }
      },
      "108": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 293,
          column: 11
        }
      },
      "109": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 321,
          column: 3
        }
      },
      "110": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 320,
          column: 5
        }
      },
      "111": {
        start: {
          line: 302,
          column: 27
        },
        end: {
          line: 302,
          column: 35
        }
      },
      "112": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "113": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "114": {
        start: {
          line: 308,
          column: 32
        },
        end: {
          line: 308,
          column: 103
        }
      },
      "115": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "116": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 59
        }
      },
      "117": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "118": {
        start: {
          line: 326,
          column: 0
        },
        end: {
          line: 347,
          column: 3
        }
      },
      "119": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 346,
          column: 5
        }
      },
      "120": {
        start: {
          line: 328,
          column: 34
        },
        end: {
          line: 328,
          column: 42
        }
      },
      "121": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "122": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 15
        }
      },
      "123": {
        start: {
          line: 334,
          column: 31
        },
        end: {
          line: 334,
          column: 123
        }
      },
      "124": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 338,
          column: 11
        }
      },
      "125": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 57
        }
      },
      "126": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 345,
          column: 11
        }
      },
      "127": {
        start: {
          line: 352,
          column: 0
        },
        end: {
          line: 373,
          column: 3
        }
      },
      "128": {
        start: {
          line: 353,
          column: 4
        },
        end: {
          line: 372,
          column: 5
        }
      },
      "129": {
        start: {
          line: 354,
          column: 28
        },
        end: {
          line: 354,
          column: 36
        }
      },
      "130": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "131": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 358,
          column: 15
        }
      },
      "132": {
        start: {
          line: 360,
          column: 31
        },
        end: {
          line: 360,
          column: 102
        }
      },
      "133": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 364,
          column: 11
        }
      },
      "134": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 55
        }
      },
      "135": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 371,
          column: 11
        }
      },
      "136": {
        start: {
          line: 378,
          column: 0
        },
        end: {
          line: 399,
          column: 3
        }
      },
      "137": {
        start: {
          line: 379,
          column: 4
        },
        end: {
          line: 398,
          column: 5
        }
      },
      "138": {
        start: {
          line: 380,
          column: 40
        },
        end: {
          line: 380,
          column: 48
        }
      },
      "139": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "140": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 384,
          column: 15
        }
      },
      "141": {
        start: {
          line: 386,
          column: 34
        },
        end: {
          line: 386,
          column: 115
        }
      },
      "142": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 390,
          column: 11
        }
      },
      "143": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 61
        }
      },
      "144": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "145": {
        start: {
          line: 404,
          column: 0
        },
        end: {
          line: 425,
          column: 3
        }
      },
      "146": {
        start: {
          line: 405,
          column: 4
        },
        end: {
          line: 424,
          column: 5
        }
      },
      "147": {
        start: {
          line: 406,
          column: 50
        },
        end: {
          line: 406,
          column: 58
        }
      },
      "148": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "149": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 410,
          column: 15
        }
      },
      "150": {
        start: {
          line: 412,
          column: 29
        },
        end: {
          line: 412,
          column: 136
        }
      },
      "151": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 416,
          column: 11
        }
      },
      "152": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 64
        }
      },
      "153": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 423,
          column: 11
        }
      },
      "154": {
        start: {
          line: 430,
          column: 0
        },
        end: {
          line: 446,
          column: 3
        }
      },
      "155": {
        start: {
          line: 431,
          column: 4
        },
        end: {
          line: 445,
          column: 5
        }
      },
      "156": {
        start: {
          line: 432,
          column: 29
        },
        end: {
          line: 432,
          column: 39
        }
      },
      "157": {
        start: {
          line: 433,
          column: 26
        },
        end: {
          line: 433,
          column: 92
        }
      },
      "158": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 437,
          column: 11
        }
      },
      "159": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 56
        }
      },
      "160": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 444,
          column: 11
        }
      },
      "161": {
        start: {
          line: 451,
          column: 0
        },
        end: {
          line: 462,
          column: 3
        }
      },
      "162": {
        start: {
          line: 452,
          column: 4
        },
        end: {
          line: 461,
          column: 7
        }
      },
      "163": {
        start: {
          line: 463,
          column: 0
        },
        end: {
          line: 463,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 25
          }
        },
        loc: {
          start: {
            line: 15,
            column: 44
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 25
          }
        },
        loc: {
          start: {
            line: 41,
            column: 44
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 38
          }
        },
        loc: {
          start: {
            line: 72,
            column: 57
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 28
          },
          end: {
            line: 101,
            column: 29
          }
        },
        loc: {
          start: {
            line: 101,
            column: 48
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 25
          }
        },
        loc: {
          start: {
            line: 127,
            column: 44
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 127
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 158,
            column: 38
          },
          end: {
            line: 158,
            column: 39
          }
        },
        loc: {
          start: {
            line: 158,
            column: 58
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 158
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 179,
            column: 39
          },
          end: {
            line: 179,
            column: 40
          }
        },
        loc: {
          start: {
            line: 179,
            column: 59
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 179
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 206,
            column: 39
          },
          end: {
            line: 206,
            column: 40
          }
        },
        loc: {
          start: {
            line: 206,
            column: 59
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 206
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 227,
            column: 21
          },
          end: {
            line: 227,
            column: 22
          }
        },
        loc: {
          start: {
            line: 227,
            column: 41
          },
          end: {
            line: 248,
            column: 1
          }
        },
        line: 227
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 253,
            column: 39
          },
          end: {
            line: 253,
            column: 40
          }
        },
        loc: {
          start: {
            line: 253,
            column: 59
          },
          end: {
            line: 269,
            column: 1
          }
        },
        line: 253
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 274,
            column: 35
          }
        },
        loc: {
          start: {
            line: 274,
            column: 54
          },
          end: {
            line: 295,
            column: 1
          }
        },
        line: 274
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 300,
            column: 33
          },
          end: {
            line: 300,
            column: 34
          }
        },
        loc: {
          start: {
            line: 300,
            column: 53
          },
          end: {
            line: 321,
            column: 1
          }
        },
        line: 300
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 326,
            column: 31
          },
          end: {
            line: 326,
            column: 32
          }
        },
        loc: {
          start: {
            line: 326,
            column: 51
          },
          end: {
            line: 347,
            column: 1
          }
        },
        line: 326
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 352,
            column: 31
          },
          end: {
            line: 352,
            column: 32
          }
        },
        loc: {
          start: {
            line: 352,
            column: 51
          },
          end: {
            line: 373,
            column: 1
          }
        },
        line: 352
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 378,
            column: 36
          },
          end: {
            line: 378,
            column: 37
          }
        },
        loc: {
          start: {
            line: 378,
            column: 56
          },
          end: {
            line: 399,
            column: 1
          }
        },
        line: 378
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 404,
            column: 32
          },
          end: {
            line: 404,
            column: 33
          }
        },
        loc: {
          start: {
            line: 404,
            column: 52
          },
          end: {
            line: 425,
            column: 1
          }
        },
        line: 404
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 430,
            column: 35
          },
          end: {
            line: 430,
            column: 36
          }
        },
        loc: {
          start: {
            line: 430,
            column: 55
          },
          end: {
            line: 446,
            column: 1
          }
        },
        line: 430
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 451,
            column: 22
          },
          end: {
            line: 451,
            column: 23
          }
        },
        loc: {
          start: {
            line: 451,
            column: 36
          },
          end: {
            line: 462,
            column: 1
          }
        },
        line: 451
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 21
          }
        }, {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 36
          }
        }],
        line: 18
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 21
          },
          end: {
            line: 33,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 46
          },
          end: {
            line: 33,
            column: 59
          }
        }, {
          start: {
            line: 33,
            column: 62
          },
          end: {
            line: 33,
            column: 77
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 20
          }
        }, {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 32
          }
        }],
        line: 44
      },
      "8": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "9": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 22
          }
        }, {
          start: {
            line: 49,
            column: 26
          },
          end: {
            line: 49,
            column: 51
          }
        }, {
          start: {
            line: 49,
            column: 55
          },
          end: {
            line: 49,
            column: 77
          }
        }],
        line: 49
      },
      "10": {
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 59
          }
        }, {
          start: {
            line: 64,
            column: 62
          },
          end: {
            line: 64,
            column: 77
          }
        }],
        line: 64
      },
      "11": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "12": {
        loc: {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 81,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 52
          },
          end: {
            line: 81,
            column: 77
          }
        }, {
          start: {
            line: 81,
            column: 80
          },
          end: {
            line: 81,
            column: 82
          }
        }],
        line: 81
      },
      "13": {
        loc: {
          start: {
            line: 82,
            column: 34
          },
          end: {
            line: 82,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 48
          },
          end: {
            line: 82,
            column: 71
          }
        }, {
          start: {
            line: 82,
            column: 74
          },
          end: {
            line: 82,
            column: 76
          }
        }],
        line: 82
      },
      "14": {
        loc: {
          start: {
            line: 93,
            column: 21
          },
          end: {
            line: 93,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 46
          },
          end: {
            line: 93,
            column: 59
          }
        }, {
          start: {
            line: 93,
            column: 62
          },
          end: {
            line: 93,
            column: 77
          }
        }],
        line: 93
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "16": {
        loc: {
          start: {
            line: 109,
            column: 122
          },
          end: {
            line: 109,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 122
          },
          end: {
            line: 109,
            column: 135
          }
        }, {
          start: {
            line: 109,
            column: 139
          },
          end: {
            line: 109,
            column: 141
          }
        }],
        line: 109
      },
      "17": {
        loc: {
          start: {
            line: 109,
            column: 143
          },
          end: {
            line: 109,
            column: 160
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 143
          },
          end: {
            line: 109,
            column: 154
          }
        }, {
          start: {
            line: 109,
            column: 158
          },
          end: {
            line: 109,
            column: 160
          }
        }],
        line: 109
      },
      "18": {
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 119,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 46
          },
          end: {
            line: 119,
            column: 59
          }
        }, {
          start: {
            line: 119,
            column: 62
          },
          end: {
            line: 119,
            column: 77
          }
        }],
        line: 119
      },
      "19": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "20": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 28
          }
        }, {
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 130,
            column: 52
          }
        }, {
          start: {
            line: 130,
            column: 56
          },
          end: {
            line: 130,
            column: 91
          }
        }],
        line: 130
      },
      "21": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "22": {
        loc: {
          start: {
            line: 150,
            column: 21
          },
          end: {
            line: 150,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 46
          },
          end: {
            line: 150,
            column: 59
          }
        }, {
          start: {
            line: 150,
            column: 62
          },
          end: {
            line: 150,
            column: 77
          }
        }],
        line: 150
      },
      "23": {
        loc: {
          start: {
            line: 171,
            column: 21
          },
          end: {
            line: 171,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 46
          },
          end: {
            line: 171,
            column: 59
          }
        }, {
          start: {
            line: 171,
            column: 62
          },
          end: {
            line: 171,
            column: 77
          }
        }],
        line: 171
      },
      "24": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "25": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 22
          }
        }, {
          start: {
            line: 183,
            column: 26
          },
          end: {
            line: 183,
            column: 33
          }
        }],
        line: 183
      },
      "26": {
        loc: {
          start: {
            line: 198,
            column: 21
          },
          end: {
            line: 198,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 198,
            column: 46
          },
          end: {
            line: 198,
            column: 59
          }
        }, {
          start: {
            line: 198,
            column: 62
          },
          end: {
            line: 198,
            column: 77
          }
        }],
        line: 198
      },
      "27": {
        loc: {
          start: {
            line: 219,
            column: 21
          },
          end: {
            line: 219,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 46
          },
          end: {
            line: 219,
            column: 59
          }
        }, {
          start: {
            line: 219,
            column: 62
          },
          end: {
            line: 219,
            column: 77
          }
        }],
        line: 219
      },
      "28": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "29": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 40
          }
        }, {
          start: {
            line: 230,
            column: 44
          },
          end: {
            line: 230,
            column: 68
          }
        }],
        line: 230
      },
      "30": {
        loc: {
          start: {
            line: 245,
            column: 21
          },
          end: {
            line: 245,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 46
          },
          end: {
            line: 245,
            column: 59
          }
        }, {
          start: {
            line: 245,
            column: 62
          },
          end: {
            line: 245,
            column: 77
          }
        }],
        line: 245
      },
      "31": {
        loc: {
          start: {
            line: 266,
            column: 21
          },
          end: {
            line: 266,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 266,
            column: 46
          },
          end: {
            line: 266,
            column: 59
          }
        }, {
          start: {
            line: 266,
            column: 62
          },
          end: {
            line: 266,
            column: 77
          }
        }],
        line: 266
      },
      "32": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "33": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 277,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 277,
            column: 21
          }
        }, {
          start: {
            line: 277,
            column: 25
          },
          end: {
            line: 277,
            column: 32
          }
        }],
        line: 277
      },
      "34": {
        loc: {
          start: {
            line: 282,
            column: 115
          },
          end: {
            line: 282,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 115
          },
          end: {
            line: 282,
            column: 122
          }
        }, {
          start: {
            line: 282,
            column: 126
          },
          end: {
            line: 282,
            column: 128
          }
        }],
        line: 282
      },
      "35": {
        loc: {
          start: {
            line: 292,
            column: 21
          },
          end: {
            line: 292,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 46
          },
          end: {
            line: 292,
            column: 59
          }
        }, {
          start: {
            line: 292,
            column: 62
          },
          end: {
            line: 292,
            column: 77
          }
        }],
        line: 292
      },
      "36": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "37": {
        loc: {
          start: {
            line: 318,
            column: 21
          },
          end: {
            line: 318,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 46
          },
          end: {
            line: 318,
            column: 59
          }
        }, {
          start: {
            line: 318,
            column: 62
          },
          end: {
            line: 318,
            column: 77
          }
        }],
        line: 318
      },
      "38": {
        loc: {
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "39": {
        loc: {
          start: {
            line: 334,
            column: 105
          },
          end: {
            line: 334,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 105
          },
          end: {
            line: 334,
            column: 110
          }
        }, {
          start: {
            line: 334,
            column: 114
          },
          end: {
            line: 334,
            column: 122
          }
        }],
        line: 334
      },
      "40": {
        loc: {
          start: {
            line: 344,
            column: 21
          },
          end: {
            line: 344,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 344,
            column: 46
          },
          end: {
            line: 344,
            column: 59
          }
        }, {
          start: {
            line: 344,
            column: 62
          },
          end: {
            line: 344,
            column: 77
          }
        }],
        line: 344
      },
      "41": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "42": {
        loc: {
          start: {
            line: 370,
            column: 21
          },
          end: {
            line: 370,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 370,
            column: 46
          },
          end: {
            line: 370,
            column: 59
          }
        }, {
          start: {
            line: 370,
            column: 62
          },
          end: {
            line: 370,
            column: 77
          }
        }],
        line: 370
      },
      "43": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "44": {
        loc: {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 381,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 381,
            column: 19
          }
        }, {
          start: {
            line: 381,
            column: 23
          },
          end: {
            line: 381,
            column: 35
          }
        }, {
          start: {
            line: 381,
            column: 39
          },
          end: {
            line: 381,
            column: 66
          }
        }],
        line: 381
      },
      "45": {
        loc: {
          start: {
            line: 396,
            column: 21
          },
          end: {
            line: 396,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 46
          },
          end: {
            line: 396,
            column: 59
          }
        }, {
          start: {
            line: 396,
            column: 62
          },
          end: {
            line: 396,
            column: 77
          }
        }],
        line: 396
      },
      "46": {
        loc: {
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "47": {
        loc: {
          start: {
            line: 412,
            column: 108
          },
          end: {
            line: 412,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 108
          },
          end: {
            line: 412,
            column: 121
          }
        }, {
          start: {
            line: 412,
            column: 125
          },
          end: {
            line: 412,
            column: 135
          }
        }],
        line: 412
      },
      "48": {
        loc: {
          start: {
            line: 422,
            column: 21
          },
          end: {
            line: 422,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 422,
            column: 46
          },
          end: {
            line: 422,
            column: 59
          }
        }, {
          start: {
            line: 422,
            column: 62
          },
          end: {
            line: 422,
            column: 77
          }
        }],
        line: 422
      },
      "49": {
        loc: {
          start: {
            line: 443,
            column: 21
          },
          end: {
            line: 443,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 443,
            column: 46
          },
          end: {
            line: 443,
            column: 59
          }
        }, {
          start: {
            line: 443,
            column: 62
          },
          end: {
            line: 443,
            column: 77
          }
        }],
        line: 443
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/optimization.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/optimization.ts"],
      sourcesContent: ["import express from 'express';\nimport { Request, Response } from 'express';\nimport { promptAnalyzer } from '../services/optimization/PromptAnalyzer';\nimport { optimizationEngine } from '../services/optimization/OptimizationEngine';\nimport { securityAnalyzer } from '../services/optimization/SecurityAnalyzer';\n\nconst router = express.Router();\n\n/**\n * POST /api/optimization/analyze\n * Analyze prompt effectiveness and generate insights\n */\nrouter.post('/analyze', async (req: Request, res: Response) => {\n  try {\n    const { promptId, promptText, timeRange } = req.body;\n    \n    if (!promptId || !promptText) {\n      return res.status(400).json({\n        error: 'Missing required fields: promptId, promptText'\n      });\n    }\n    \n    const analysis = await promptAnalyzer.analyzePrompt(\n      promptId,\n      promptText,\n      timeRange\n    );\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Prompt analysis error:', error);\n    res.status(500).json({\n      error: 'Prompt analysis failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/compare\n * Compare two prompts and determine which performs better\n */\nrouter.post('/compare', async (req: Request, res: Response) => {\n  try {\n    const { promptA, promptB, testCases, model } = req.body;\n    \n    if (!promptA || !promptB) {\n      return res.status(400).json({\n        error: 'Missing required fields: promptA, promptB'\n      });\n    }\n    \n    if (!testCases || !Array.isArray(testCases) || testCases.length === 0) {\n      return res.status(400).json({\n        error: 'testCases must be a non-empty array'\n      });\n    }\n    \n    const comparison = await promptAnalyzer.comparePrompts(\n      promptA,\n      promptB,\n      testCases,\n      model\n    );\n    \n    res.json({\n      success: true,\n      data: comparison\n    });\n  } catch (error) {\n    console.error('Prompt comparison error:', error);\n    res.status(500).json({\n      error: 'Prompt comparison failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/suggestions/:promptId\n * Get AI-powered optimization suggestions for a prompt\n */\nrouter.get('/suggestions/:promptId', async (req: Request, res: Response) => {\n  try {\n    const { promptId } = req.params;\n    const { originalPrompt, targetMetrics, constraints } = req.query;\n    \n    if (!originalPrompt) {\n      return res.status(400).json({\n        error: 'Missing required query parameter: originalPrompt'\n      });\n    }\n    \n    const parsedTargetMetrics = targetMetrics ? JSON.parse(targetMetrics as string) : {};\n    const parsedConstraints = constraints ? JSON.parse(constraints as string) : {};\n    \n    const suggestions = await optimizationEngine.generateOptimizationSuggestions(\n      originalPrompt as string,\n      parsedTargetMetrics,\n      parsedConstraints\n    );\n    \n    res.json({\n      success: true,\n      data: suggestions\n    });\n  } catch (error) {\n    console.error('Optimization suggestions error:', error);\n    res.status(500).json({\n      error: 'Failed to generate optimization suggestions',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/suggestions\n * Generate optimization suggestions with POST data\n */\nrouter.post('/suggestions', async (req: Request, res: Response) => {\n  try {\n    const { originalPrompt, targetMetrics, constraints } = req.body;\n    \n    if (!originalPrompt) {\n      return res.status(400).json({\n        error: 'Missing required field: originalPrompt'\n      });\n    }\n    \n    const suggestions = await optimizationEngine.generateOptimizationSuggestions(\n      originalPrompt,\n      targetMetrics || {},\n      constraints || {}\n    );\n    \n    res.json({\n      success: true,\n      data: suggestions\n    });\n  } catch (error) {\n    console.error('Optimization suggestions error:', error);\n    res.status(500).json({\n      error: 'Failed to generate optimization suggestions',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/ab-test\n * Create and start an A/B test for prompt variations\n */\nrouter.post('/ab-test', async (req: Request, res: Response) => {\n  try {\n    const testConfig = req.body;\n    \n    if (!testConfig.name || !testConfig.variants || !Array.isArray(testConfig.variants)) {\n      return res.status(400).json({\n        error: 'Missing required fields: name, variants (array)'\n      });\n    }\n    \n    if (testConfig.variants.length < 2) {\n      return res.status(400).json({\n        error: 'At least 2 variants are required for A/B testing'\n      });\n    }\n    \n    const abTest = await optimizationEngine.createABTest(testConfig);\n    \n    res.json({\n      success: true,\n      data: abTest\n    });\n  } catch (error) {\n    console.error('A/B test creation error:', error);\n    res.status(500).json({\n      error: 'Failed to create A/B test',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/ab-test/:testId/start\n * Start an A/B test\n */\nrouter.post('/ab-test/:testId/start', async (req: Request, res: Response) => {\n  try {\n    const { testId } = req.params;\n    \n    await optimizationEngine.startABTest(testId);\n    \n    res.json({\n      success: true,\n      message: `A/B test ${testId} started successfully`\n    });\n  } catch (error) {\n    console.error('A/B test start error:', error);\n    res.status(500).json({\n      error: 'Failed to start A/B test',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/ab-test/:testId/result\n * Record A/B test execution result\n */\nrouter.post('/ab-test/:testId/result', async (req: Request, res: Response) => {\n  try {\n    const { testId } = req.params;\n    const { variantId, result } = req.body;\n    \n    if (!variantId || !result) {\n      return res.status(400).json({\n        error: 'Missing required fields: variantId, result'\n      });\n    }\n    \n    await optimizationEngine.recordABTestResult(testId, variantId, result);\n    \n    res.json({\n      success: true,\n      message: 'A/B test result recorded successfully'\n    });\n  } catch (error) {\n    console.error('A/B test result recording error:', error);\n    res.status(500).json({\n      error: 'Failed to record A/B test result',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/ab-test/:testId/results\n * Get A/B test results and analysis\n */\nrouter.get('/ab-test/:testId/results', async (req: Request, res: Response) => {\n  try {\n    const { testId } = req.params;\n    \n    const results = await optimizationEngine.analyzeABTestResults(testId);\n    \n    res.json({\n      success: true,\n      data: results\n    });\n  } catch (error) {\n    console.error('A/B test results error:', error);\n    res.status(500).json({\n      error: 'Failed to analyze A/B test results',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/tune\n * Start automated prompt tuning\n */\nrouter.post('/tune', async (req: Request, res: Response) => {\n  try {\n    const tuningConfig = req.body;\n    \n    if (!tuningConfig.originalPrompt || !tuningConfig.objectives) {\n      return res.status(400).json({\n        error: 'Missing required fields: originalPrompt, objectives'\n      });\n    }\n    \n    const tuningProcess = await optimizationEngine.startPromptTuning(tuningConfig);\n    \n    res.json({\n      success: true,\n      data: tuningProcess\n    });\n  } catch (error) {\n    console.error('Prompt tuning error:', error);\n    res.status(500).json({\n      error: 'Failed to start prompt tuning',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/tune/:tuningId/progress\n * Get prompt tuning progress\n */\nrouter.get('/tune/:tuningId/progress', async (req: Request, res: Response) => {\n  try {\n    const { tuningId } = req.params;\n    \n    const progress = await optimizationEngine.getTuningProgress(tuningId);\n    \n    res.json({\n      success: true,\n      data: progress\n    });\n  } catch (error) {\n    console.error('Tuning progress error:', error);\n    res.status(500).json({\n      error: 'Failed to get tuning progress',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/validate-security\n * Validate prompt security and detect threats\n */\nrouter.post('/validate-security', async (req: Request, res: Response) => {\n  try {\n    const { promptId, prompt, context } = req.body;\n    \n    if (!promptId || !prompt) {\n      return res.status(400).json({\n        error: 'Missing required fields: promptId, prompt'\n      });\n    }\n    \n    const securityAnalysis = await securityAnalyzer.analyzePromptSecurity(\n      promptId,\n      prompt,\n      context || {}\n    );\n    \n    res.json({\n      success: true,\n      data: securityAnalysis\n    });\n  } catch (error) {\n    console.error('Security validation error:', error);\n    res.status(500).json({\n      error: 'Security validation failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/detect-injection\n * Detect prompt injection attempts\n */\nrouter.post('/detect-injection', async (req: Request, res: Response) => {\n  try {\n    const { prompt } = req.body;\n    \n    if (!prompt) {\n      return res.status(400).json({\n        error: 'Missing required field: prompt'\n      });\n    }\n    \n    const injectionResult = await securityAnalyzer.detectPromptInjection(prompt);\n    \n    res.json({\n      success: true,\n      data: injectionResult\n    });\n  } catch (error) {\n    console.error('Injection detection error:', error);\n    res.status(500).json({\n      error: 'Injection detection failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/test-jailbreak\n * Test prompt resistance to jailbreak attempts\n */\nrouter.post('/test-jailbreak', async (req: Request, res: Response) => {\n  try {\n    const { prompt, model } = req.body;\n    \n    if (!prompt) {\n      return res.status(400).json({\n        error: 'Missing required field: prompt'\n      });\n    }\n    \n    const jailbreakTests = await securityAnalyzer.testJailbreakResistance(\n      prompt,\n      model || 'llama3'\n    );\n    \n    res.json({\n      success: true,\n      data: jailbreakTests\n    });\n  } catch (error) {\n    console.error('Jailbreak testing error:', error);\n    res.status(500).json({\n      error: 'Jailbreak testing failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/analyze-safety\n * Analyze content safety\n */\nrouter.post('/analyze-safety', async (req: Request, res: Response) => {\n  try {\n    const { content } = req.body;\n    \n    if (!content) {\n      return res.status(400).json({\n        error: 'Missing required field: content'\n      });\n    }\n    \n    const safetyAnalysis = await securityAnalyzer.analyzeContentSafety(content);\n    \n    res.json({\n      success: true,\n      data: safetyAnalysis\n    });\n  } catch (error) {\n    console.error('Safety analysis error:', error);\n    res.status(500).json({\n      error: 'Safety analysis failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/validate-compliance\n * Validate prompt compliance with regulations\n */\nrouter.post('/validate-compliance', async (req: Request, res: Response) => {\n  try {\n    const { prompt, regulations } = req.body;\n    \n    if (!prompt || !regulations || !Array.isArray(regulations)) {\n      return res.status(400).json({\n        error: 'Missing required fields: prompt, regulations (array)'\n      });\n    }\n    \n    const complianceResults = await securityAnalyzer.validateCompliance(\n      prompt,\n      regulations\n    );\n    \n    res.json({\n      success: true,\n      data: complianceResults\n    });\n  } catch (error) {\n    console.error('Compliance validation error:', error);\n    res.status(500).json({\n      error: 'Compliance validation failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * POST /api/optimization/generate-secure\n * Generate security-hardened prompt\n */\nrouter.post('/generate-secure', async (req: Request, res: Response) => {\n  try {\n    const { originalPrompt, securityLevel } = req.body;\n    \n    if (!originalPrompt) {\n      return res.status(400).json({\n        error: 'Missing required field: originalPrompt'\n      });\n    }\n    \n    const securePrompt = await securityAnalyzer.generateSecurePrompt(\n      originalPrompt,\n      securityLevel || 'enhanced'\n    );\n    \n    res.json({\n      success: true,\n      data: securePrompt\n    });\n  } catch (error) {\n    console.error('Secure prompt generation error:', error);\n    res.status(500).json({\n      error: 'Secure prompt generation failed',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/evolution/:promptId\n * Get prompt evolution history\n */\nrouter.get('/evolution/:promptId', async (req: Request, res: Response) => {\n  try {\n    const { promptId } = req.params;\n    \n    const evolution = await promptAnalyzer.getPromptEvolution(promptId);\n    \n    res.json({\n      success: true,\n      data: evolution\n    });\n  } catch (error) {\n    console.error('Prompt evolution error:', error);\n    res.status(500).json({\n      error: 'Failed to get prompt evolution',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n/**\n * GET /api/optimization/health\n * Health check for optimization services\n */\nrouter.get('/health', (req: Request, res: Response) => {\n  res.json({\n    success: true,\n    message: 'AI-powered prompt optimization services are running',\n    services: {\n      promptAnalyzer: 'active',\n      optimizationEngine: 'active',\n      securityAnalyzer: 'active'\n    },\n    timestamp: new Date().toISOString()\n  });\n});\n\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ef844ff22bf1a8185adfc3bb16b36207af3e7b28"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1annctun28 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1annctun28();
var __importDefault =
/* istanbul ignore next */
(cov_1annctun28().s[0]++,
/* istanbul ignore next */
(cov_1annctun28().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1annctun28().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1annctun28().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1annctun28().f[0]++;
  cov_1annctun28().s[1]++;
  return /* istanbul ignore next */(cov_1annctun28().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1annctun28().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1annctun28().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1annctun28().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1annctun28().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1annctun28().s[3]++, __importDefault(require("express")));
const PromptAnalyzer_1 =
/* istanbul ignore next */
(cov_1annctun28().s[4]++, require("../services/optimization/PromptAnalyzer"));
const OptimizationEngine_1 =
/* istanbul ignore next */
(cov_1annctun28().s[5]++, require("../services/optimization/OptimizationEngine"));
const SecurityAnalyzer_1 =
/* istanbul ignore next */
(cov_1annctun28().s[6]++, require("../services/optimization/SecurityAnalyzer"));
const router =
/* istanbul ignore next */
(cov_1annctun28().s[7]++, express_1.default.Router());
/**
 * POST /api/optimization/analyze
 * Analyze prompt effectiveness and generate insights
 */
/* istanbul ignore next */
cov_1annctun28().s[8]++;
router.post('/analyze', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[1]++;
  cov_1annctun28().s[9]++;
  try {
    const {
      promptId,
      promptText,
      timeRange
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[10]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[4][0]++, !promptId) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[4][1]++, !promptText)) {
      /* istanbul ignore next */
      cov_1annctun28().b[3][0]++;
      cov_1annctun28().s[12]++;
      return res.status(400).json({
        error: 'Missing required fields: promptId, promptText'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[3][1]++;
    }
    const analysis =
    /* istanbul ignore next */
    (cov_1annctun28().s[13]++, await PromptAnalyzer_1.promptAnalyzer.analyzePrompt(promptId, promptText, timeRange));
    /* istanbul ignore next */
    cov_1annctun28().s[14]++;
    res.json({
      success: true,
      data: analysis
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[15]++;
    console.error('Prompt analysis error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[16]++;
    res.status(500).json({
      error: 'Prompt analysis failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[5][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/compare
 * Compare two prompts and determine which performs better
 */
/* istanbul ignore next */
cov_1annctun28().s[17]++;
router.post('/compare', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[2]++;
  cov_1annctun28().s[18]++;
  try {
    const {
      promptA,
      promptB,
      testCases,
      model
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[19]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[7][0]++, !promptA) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[7][1]++, !promptB)) {
      /* istanbul ignore next */
      cov_1annctun28().b[6][0]++;
      cov_1annctun28().s[21]++;
      return res.status(400).json({
        error: 'Missing required fields: promptA, promptB'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[6][1]++;
    }
    cov_1annctun28().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[9][0]++, !testCases) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[9][1]++, !Array.isArray(testCases)) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[9][2]++, testCases.length === 0)) {
      /* istanbul ignore next */
      cov_1annctun28().b[8][0]++;
      cov_1annctun28().s[23]++;
      return res.status(400).json({
        error: 'testCases must be a non-empty array'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[8][1]++;
    }
    const comparison =
    /* istanbul ignore next */
    (cov_1annctun28().s[24]++, await PromptAnalyzer_1.promptAnalyzer.comparePrompts(promptA, promptB, testCases, model));
    /* istanbul ignore next */
    cov_1annctun28().s[25]++;
    res.json({
      success: true,
      data: comparison
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[26]++;
    console.error('Prompt comparison error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[27]++;
    res.status(500).json({
      error: 'Prompt comparison failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[10][1]++, 'Unknown error')
    });
  }
});
/**
 * GET /api/optimization/suggestions/:promptId
 * Get AI-powered optimization suggestions for a prompt
 */
/* istanbul ignore next */
cov_1annctun28().s[28]++;
router.get('/suggestions/:promptId', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[3]++;
  cov_1annctun28().s[29]++;
  try {
    const {
      promptId
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[30]++, req.params);
    const {
      originalPrompt,
      targetMetrics,
      constraints
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[31]++, req.query);
    /* istanbul ignore next */
    cov_1annctun28().s[32]++;
    if (!originalPrompt) {
      /* istanbul ignore next */
      cov_1annctun28().b[11][0]++;
      cov_1annctun28().s[33]++;
      return res.status(400).json({
        error: 'Missing required query parameter: originalPrompt'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[11][1]++;
    }
    const parsedTargetMetrics =
    /* istanbul ignore next */
    (cov_1annctun28().s[34]++, targetMetrics ?
    /* istanbul ignore next */
    (cov_1annctun28().b[12][0]++, JSON.parse(targetMetrics)) :
    /* istanbul ignore next */
    (cov_1annctun28().b[12][1]++, {}));
    const parsedConstraints =
    /* istanbul ignore next */
    (cov_1annctun28().s[35]++, constraints ?
    /* istanbul ignore next */
    (cov_1annctun28().b[13][0]++, JSON.parse(constraints)) :
    /* istanbul ignore next */
    (cov_1annctun28().b[13][1]++, {}));
    const suggestions =
    /* istanbul ignore next */
    (cov_1annctun28().s[36]++, await OptimizationEngine_1.optimizationEngine.generateOptimizationSuggestions(originalPrompt, parsedTargetMetrics, parsedConstraints));
    /* istanbul ignore next */
    cov_1annctun28().s[37]++;
    res.json({
      success: true,
      data: suggestions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[38]++;
    console.error('Optimization suggestions error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[39]++;
    res.status(500).json({
      error: 'Failed to generate optimization suggestions',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[14][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/suggestions
 * Generate optimization suggestions with POST data
 */
/* istanbul ignore next */
cov_1annctun28().s[40]++;
router.post('/suggestions', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[4]++;
  cov_1annctun28().s[41]++;
  try {
    const {
      originalPrompt,
      targetMetrics,
      constraints
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[42]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[43]++;
    if (!originalPrompt) {
      /* istanbul ignore next */
      cov_1annctun28().b[15][0]++;
      cov_1annctun28().s[44]++;
      return res.status(400).json({
        error: 'Missing required field: originalPrompt'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[15][1]++;
    }
    const suggestions =
    /* istanbul ignore next */
    (cov_1annctun28().s[45]++, await OptimizationEngine_1.optimizationEngine.generateOptimizationSuggestions(originalPrompt,
    /* istanbul ignore next */
    (cov_1annctun28().b[16][0]++, targetMetrics) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[16][1]++, {}),
    /* istanbul ignore next */
    (cov_1annctun28().b[17][0]++, constraints) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[17][1]++, {})));
    /* istanbul ignore next */
    cov_1annctun28().s[46]++;
    res.json({
      success: true,
      data: suggestions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[47]++;
    console.error('Optimization suggestions error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[48]++;
    res.status(500).json({
      error: 'Failed to generate optimization suggestions',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[18][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/ab-test
 * Create and start an A/B test for prompt variations
 */
/* istanbul ignore next */
cov_1annctun28().s[49]++;
router.post('/ab-test', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[5]++;
  cov_1annctun28().s[50]++;
  try {
    const testConfig =
    /* istanbul ignore next */
    (cov_1annctun28().s[51]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[20][0]++, !testConfig.name) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[20][1]++, !testConfig.variants) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[20][2]++, !Array.isArray(testConfig.variants))) {
      /* istanbul ignore next */
      cov_1annctun28().b[19][0]++;
      cov_1annctun28().s[53]++;
      return res.status(400).json({
        error: 'Missing required fields: name, variants (array)'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[19][1]++;
    }
    cov_1annctun28().s[54]++;
    if (testConfig.variants.length < 2) {
      /* istanbul ignore next */
      cov_1annctun28().b[21][0]++;
      cov_1annctun28().s[55]++;
      return res.status(400).json({
        error: 'At least 2 variants are required for A/B testing'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[21][1]++;
    }
    const abTest =
    /* istanbul ignore next */
    (cov_1annctun28().s[56]++, await OptimizationEngine_1.optimizationEngine.createABTest(testConfig));
    /* istanbul ignore next */
    cov_1annctun28().s[57]++;
    res.json({
      success: true,
      data: abTest
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[58]++;
    console.error('A/B test creation error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[59]++;
    res.status(500).json({
      error: 'Failed to create A/B test',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[22][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/ab-test/:testId/start
 * Start an A/B test
 */
/* istanbul ignore next */
cov_1annctun28().s[60]++;
router.post('/ab-test/:testId/start', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[6]++;
  cov_1annctun28().s[61]++;
  try {
    const {
      testId
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[62]++, req.params);
    /* istanbul ignore next */
    cov_1annctun28().s[63]++;
    await OptimizationEngine_1.optimizationEngine.startABTest(testId);
    /* istanbul ignore next */
    cov_1annctun28().s[64]++;
    res.json({
      success: true,
      message: `A/B test ${testId} started successfully`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[65]++;
    console.error('A/B test start error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[66]++;
    res.status(500).json({
      error: 'Failed to start A/B test',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[23][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/ab-test/:testId/result
 * Record A/B test execution result
 */
/* istanbul ignore next */
cov_1annctun28().s[67]++;
router.post('/ab-test/:testId/result', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[7]++;
  cov_1annctun28().s[68]++;
  try {
    const {
      testId
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[69]++, req.params);
    const {
      variantId,
      result
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[70]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[71]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[25][0]++, !variantId) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[25][1]++, !result)) {
      /* istanbul ignore next */
      cov_1annctun28().b[24][0]++;
      cov_1annctun28().s[72]++;
      return res.status(400).json({
        error: 'Missing required fields: variantId, result'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[24][1]++;
    }
    cov_1annctun28().s[73]++;
    await OptimizationEngine_1.optimizationEngine.recordABTestResult(testId, variantId, result);
    /* istanbul ignore next */
    cov_1annctun28().s[74]++;
    res.json({
      success: true,
      message: 'A/B test result recorded successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[75]++;
    console.error('A/B test result recording error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[76]++;
    res.status(500).json({
      error: 'Failed to record A/B test result',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[26][1]++, 'Unknown error')
    });
  }
});
/**
 * GET /api/optimization/ab-test/:testId/results
 * Get A/B test results and analysis
 */
/* istanbul ignore next */
cov_1annctun28().s[77]++;
router.get('/ab-test/:testId/results', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[8]++;
  cov_1annctun28().s[78]++;
  try {
    const {
      testId
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[79]++, req.params);
    const results =
    /* istanbul ignore next */
    (cov_1annctun28().s[80]++, await OptimizationEngine_1.optimizationEngine.analyzeABTestResults(testId));
    /* istanbul ignore next */
    cov_1annctun28().s[81]++;
    res.json({
      success: true,
      data: results
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[82]++;
    console.error('A/B test results error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[83]++;
    res.status(500).json({
      error: 'Failed to analyze A/B test results',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[27][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[27][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/tune
 * Start automated prompt tuning
 */
/* istanbul ignore next */
cov_1annctun28().s[84]++;
router.post('/tune', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[9]++;
  cov_1annctun28().s[85]++;
  try {
    const tuningConfig =
    /* istanbul ignore next */
    (cov_1annctun28().s[86]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[29][0]++, !tuningConfig.originalPrompt) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[29][1]++, !tuningConfig.objectives)) {
      /* istanbul ignore next */
      cov_1annctun28().b[28][0]++;
      cov_1annctun28().s[88]++;
      return res.status(400).json({
        error: 'Missing required fields: originalPrompt, objectives'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[28][1]++;
    }
    const tuningProcess =
    /* istanbul ignore next */
    (cov_1annctun28().s[89]++, await OptimizationEngine_1.optimizationEngine.startPromptTuning(tuningConfig));
    /* istanbul ignore next */
    cov_1annctun28().s[90]++;
    res.json({
      success: true,
      data: tuningProcess
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[91]++;
    console.error('Prompt tuning error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[92]++;
    res.status(500).json({
      error: 'Failed to start prompt tuning',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[30][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[30][1]++, 'Unknown error')
    });
  }
});
/**
 * GET /api/optimization/tune/:tuningId/progress
 * Get prompt tuning progress
 */
/* istanbul ignore next */
cov_1annctun28().s[93]++;
router.get('/tune/:tuningId/progress', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[10]++;
  cov_1annctun28().s[94]++;
  try {
    const {
      tuningId
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[95]++, req.params);
    const progress =
    /* istanbul ignore next */
    (cov_1annctun28().s[96]++, await OptimizationEngine_1.optimizationEngine.getTuningProgress(tuningId));
    /* istanbul ignore next */
    cov_1annctun28().s[97]++;
    res.json({
      success: true,
      data: progress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[98]++;
    console.error('Tuning progress error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[99]++;
    res.status(500).json({
      error: 'Failed to get tuning progress',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[31][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[31][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/validate-security
 * Validate prompt security and detect threats
 */
/* istanbul ignore next */
cov_1annctun28().s[100]++;
router.post('/validate-security', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[11]++;
  cov_1annctun28().s[101]++;
  try {
    const {
      promptId,
      prompt,
      context
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[102]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[103]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[33][0]++, !promptId) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[33][1]++, !prompt)) {
      /* istanbul ignore next */
      cov_1annctun28().b[32][0]++;
      cov_1annctun28().s[104]++;
      return res.status(400).json({
        error: 'Missing required fields: promptId, prompt'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[32][1]++;
    }
    const securityAnalysis =
    /* istanbul ignore next */
    (cov_1annctun28().s[105]++, await SecurityAnalyzer_1.securityAnalyzer.analyzePromptSecurity(promptId, prompt,
    /* istanbul ignore next */
    (cov_1annctun28().b[34][0]++, context) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[34][1]++, {})));
    /* istanbul ignore next */
    cov_1annctun28().s[106]++;
    res.json({
      success: true,
      data: securityAnalysis
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[107]++;
    console.error('Security validation error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[108]++;
    res.status(500).json({
      error: 'Security validation failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[35][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[35][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/detect-injection
 * Detect prompt injection attempts
 */
/* istanbul ignore next */
cov_1annctun28().s[109]++;
router.post('/detect-injection', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[12]++;
  cov_1annctun28().s[110]++;
  try {
    const {
      prompt
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[111]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[112]++;
    if (!prompt) {
      /* istanbul ignore next */
      cov_1annctun28().b[36][0]++;
      cov_1annctun28().s[113]++;
      return res.status(400).json({
        error: 'Missing required field: prompt'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[36][1]++;
    }
    const injectionResult =
    /* istanbul ignore next */
    (cov_1annctun28().s[114]++, await SecurityAnalyzer_1.securityAnalyzer.detectPromptInjection(prompt));
    /* istanbul ignore next */
    cov_1annctun28().s[115]++;
    res.json({
      success: true,
      data: injectionResult
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[116]++;
    console.error('Injection detection error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[117]++;
    res.status(500).json({
      error: 'Injection detection failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[37][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/test-jailbreak
 * Test prompt resistance to jailbreak attempts
 */
/* istanbul ignore next */
cov_1annctun28().s[118]++;
router.post('/test-jailbreak', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[13]++;
  cov_1annctun28().s[119]++;
  try {
    const {
      prompt,
      model
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[120]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[121]++;
    if (!prompt) {
      /* istanbul ignore next */
      cov_1annctun28().b[38][0]++;
      cov_1annctun28().s[122]++;
      return res.status(400).json({
        error: 'Missing required field: prompt'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[38][1]++;
    }
    const jailbreakTests =
    /* istanbul ignore next */
    (cov_1annctun28().s[123]++, await SecurityAnalyzer_1.securityAnalyzer.testJailbreakResistance(prompt,
    /* istanbul ignore next */
    (cov_1annctun28().b[39][0]++, model) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[39][1]++, 'llama3')));
    /* istanbul ignore next */
    cov_1annctun28().s[124]++;
    res.json({
      success: true,
      data: jailbreakTests
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[125]++;
    console.error('Jailbreak testing error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[126]++;
    res.status(500).json({
      error: 'Jailbreak testing failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[40][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[40][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/analyze-safety
 * Analyze content safety
 */
/* istanbul ignore next */
cov_1annctun28().s[127]++;
router.post('/analyze-safety', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[14]++;
  cov_1annctun28().s[128]++;
  try {
    const {
      content
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[129]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[130]++;
    if (!content) {
      /* istanbul ignore next */
      cov_1annctun28().b[41][0]++;
      cov_1annctun28().s[131]++;
      return res.status(400).json({
        error: 'Missing required field: content'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[41][1]++;
    }
    const safetyAnalysis =
    /* istanbul ignore next */
    (cov_1annctun28().s[132]++, await SecurityAnalyzer_1.securityAnalyzer.analyzeContentSafety(content));
    /* istanbul ignore next */
    cov_1annctun28().s[133]++;
    res.json({
      success: true,
      data: safetyAnalysis
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[134]++;
    console.error('Safety analysis error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[135]++;
    res.status(500).json({
      error: 'Safety analysis failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[42][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[42][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/validate-compliance
 * Validate prompt compliance with regulations
 */
/* istanbul ignore next */
cov_1annctun28().s[136]++;
router.post('/validate-compliance', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[15]++;
  cov_1annctun28().s[137]++;
  try {
    const {
      prompt,
      regulations
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[138]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[139]++;
    if (
    /* istanbul ignore next */
    (cov_1annctun28().b[44][0]++, !prompt) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[44][1]++, !regulations) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[44][2]++, !Array.isArray(regulations))) {
      /* istanbul ignore next */
      cov_1annctun28().b[43][0]++;
      cov_1annctun28().s[140]++;
      return res.status(400).json({
        error: 'Missing required fields: prompt, regulations (array)'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[43][1]++;
    }
    const complianceResults =
    /* istanbul ignore next */
    (cov_1annctun28().s[141]++, await SecurityAnalyzer_1.securityAnalyzer.validateCompliance(prompt, regulations));
    /* istanbul ignore next */
    cov_1annctun28().s[142]++;
    res.json({
      success: true,
      data: complianceResults
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[143]++;
    console.error('Compliance validation error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[144]++;
    res.status(500).json({
      error: 'Compliance validation failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[45][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[45][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/optimization/generate-secure
 * Generate security-hardened prompt
 */
/* istanbul ignore next */
cov_1annctun28().s[145]++;
router.post('/generate-secure', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[16]++;
  cov_1annctun28().s[146]++;
  try {
    const {
      originalPrompt,
      securityLevel
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[147]++, req.body);
    /* istanbul ignore next */
    cov_1annctun28().s[148]++;
    if (!originalPrompt) {
      /* istanbul ignore next */
      cov_1annctun28().b[46][0]++;
      cov_1annctun28().s[149]++;
      return res.status(400).json({
        error: 'Missing required field: originalPrompt'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1annctun28().b[46][1]++;
    }
    const securePrompt =
    /* istanbul ignore next */
    (cov_1annctun28().s[150]++, await SecurityAnalyzer_1.securityAnalyzer.generateSecurePrompt(originalPrompt,
    /* istanbul ignore next */
    (cov_1annctun28().b[47][0]++, securityLevel) ||
    /* istanbul ignore next */
    (cov_1annctun28().b[47][1]++, 'enhanced')));
    /* istanbul ignore next */
    cov_1annctun28().s[151]++;
    res.json({
      success: true,
      data: securePrompt
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[152]++;
    console.error('Secure prompt generation error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[153]++;
    res.status(500).json({
      error: 'Secure prompt generation failed',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[48][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[48][1]++, 'Unknown error')
    });
  }
});
/**
 * GET /api/optimization/evolution/:promptId
 * Get prompt evolution history
 */
/* istanbul ignore next */
cov_1annctun28().s[154]++;
router.get('/evolution/:promptId', async (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[17]++;
  cov_1annctun28().s[155]++;
  try {
    const {
      promptId
    } =
    /* istanbul ignore next */
    (cov_1annctun28().s[156]++, req.params);
    const evolution =
    /* istanbul ignore next */
    (cov_1annctun28().s[157]++, await PromptAnalyzer_1.promptAnalyzer.getPromptEvolution(promptId));
    /* istanbul ignore next */
    cov_1annctun28().s[158]++;
    res.json({
      success: true,
      data: evolution
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1annctun28().s[159]++;
    console.error('Prompt evolution error:', error);
    /* istanbul ignore next */
    cov_1annctun28().s[160]++;
    res.status(500).json({
      error: 'Failed to get prompt evolution',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1annctun28().b[49][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1annctun28().b[49][1]++, 'Unknown error')
    });
  }
});
/**
 * GET /api/optimization/health
 * Health check for optimization services
 */
/* istanbul ignore next */
cov_1annctun28().s[161]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_1annctun28().f[18]++;
  cov_1annctun28().s[162]++;
  res.json({
    success: true,
    message: 'AI-powered prompt optimization services are running',
    services: {
      promptAnalyzer: 'active',
      optimizationEngine: 'active',
      securityAnalyzer: 'active'
    },
    timestamp: new Date().toISOString()
  });
});
/* istanbul ignore next */
cov_1annctun28().s[163]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,