98c27639aa13c7c1f205547a55d0fd8b
"use strict";

/* istanbul ignore next */
function cov_1gposnz01p() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/AnomalyDetector.ts";
  var hash = "cbfd8699bf36bf5be72dc89a31bd7923b7cd7bf4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/AnomalyDetector.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 59
        }
      },
      "37": {
        start: {
          line: 37,
          column: 11
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "38": {
        start: {
          line: 38,
          column: 17
        },
        end: {
          line: 38,
          column: 34
        }
      },
      "39": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 40
        }
      },
      "40": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 40,
          column: 54
        }
      },
      "41": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 73
        }
      },
      "42": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 42,
          column: 44
        }
      },
      "43": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 16
        }
      },
      "44": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 31
        }
      },
      "45": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 38
        }
      },
      "46": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 31
        }
      },
      "47": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 32
        }
      },
      "48": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 32
        }
      },
      "49": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 47
        }
      },
      "50": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 31
        }
      },
      "51": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "52": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 72,
          column: 10
        }
      },
      "53": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 79
        }
      },
      "54": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 80
        }
      },
      "55": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 64
        }
      },
      "56": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 32
        }
      },
      "57": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "58": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 61
        }
      },
      "59": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 19
        }
      },
      "60": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 30
        }
      },
      "61": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "62": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 97,
          column: 23
        }
      },
      "63": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "64": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "65": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 72
        }
      },
      "66": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 42
        }
      },
      "67": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 54
        }
      },
      "68": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 39
        }
      },
      "69": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "70": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 19
        }
      },
      "71": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 31
        }
      },
      "72": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "73": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 50
        }
      },
      "74": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 42
        }
      },
      "75": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 49
        }
      },
      "76": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 39
        }
      },
      "77": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 85
        }
      },
      "78": {
        start: {
          line: 123,
          column: 29
        },
        end: {
          line: 123,
          column: 82
        }
      },
      "79": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "80": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 90
        }
      },
      "81": {
        start: {
          line: 128,
          column: 56
        },
        end: {
          line: 128,
          column: 88
        }
      },
      "82": {
        start: {
          line: 130,
          column: 25
        },
        end: {
          line: 130,
          column: 39
        }
      },
      "83": {
        start: {
          line: 131,
          column: 22
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "84": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 133,
          column: 50
        }
      },
      "85": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 66
        }
      },
      "86": {
        start: {
          line: 135,
          column: 28
        },
        end: {
          line: 135,
          column: 66
        }
      },
      "87": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 136,
          column: 60
        }
      },
      "88": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 151,
          column: 10
        }
      },
      "89": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 148,
          column: 21
        }
      },
      "90": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 88
        }
      },
      "91": {
        start: {
          line: 153,
          column: 28
        },
        end: {
          line: 153,
          column: 47
        }
      },
      "92": {
        start: {
          line: 154,
          column: 37
        },
        end: {
          line: 154,
          column: 96
        }
      },
      "93": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 155,
          column: 71
        }
      },
      "94": {
        start: {
          line: 157,
          column: 26
        },
        end: {
          line: 157,
          column: 79
        }
      },
      "95": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "96": {
        start: {
          line: 160,
          column: 29
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "97": {
        start: {
          line: 169,
          column: 66
        },
        end: {
          line: 169,
          column: 73
        }
      },
      "98": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 55
        }
      },
      "99": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 25
        }
      },
      "100": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 30
        }
      },
      "101": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 23
        }
      },
      "102": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 30
        }
      },
      "103": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 123
        }
      },
      "104": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 28
        }
      },
      "105": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 69
        }
      },
      "106": {
        start: {
          line: 194,
          column: 31
        },
        end: {
          line: 194,
          column: 79
        }
      },
      "107": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "108": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 97
        }
      },
      "109": {
        start: {
          line: 199,
          column: 23
        },
        end: {
          line: 199,
          column: 55
        }
      },
      "110": {
        start: {
          line: 199,
          column: 47
        },
        end: {
          line: 199,
          column: 54
        }
      },
      "111": {
        start: {
          line: 200,
          column: 21
        },
        end: {
          line: 200,
          column: 74
        }
      },
      "112": {
        start: {
          line: 200,
          column: 47
        },
        end: {
          line: 200,
          column: 54
        }
      },
      "113": {
        start: {
          line: 201,
          column: 25
        },
        end: {
          line: 201,
          column: 98
        }
      },
      "114": {
        start: {
          line: 201,
          column: 51
        },
        end: {
          line: 201,
          column: 78
        }
      },
      "115": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 42
        }
      },
      "116": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 204,
          column: 66
        }
      },
      "117": {
        start: {
          line: 205,
          column: 27
        },
        end: {
          line: 205,
          column: 65
        }
      },
      "118": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "119": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 59
        }
      },
      "120": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 144
        }
      },
      "121": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 26
        }
      },
      "122": {
        start: {
          line: 224,
          column: 30
        },
        end: {
          line: 224,
          column: 79
        }
      },
      "123": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 225,
          column: 25
        }
      },
      "124": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 76
        }
      },
      "125": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "126": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 26
        }
      },
      "127": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "128": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "129": {
        start: {
          line: 234,
          column: 40
        },
        end: {
          line: 234,
          column: 111
        }
      },
      "130": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 48
        }
      },
      "131": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 78
        }
      },
      "132": {
        start: {
          line: 242,
          column: 29
        },
        end: {
          line: 242,
          column: 59
        }
      },
      "133": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "134": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 45
        }
      },
      "135": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 42
        }
      },
      "136": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 49
        }
      },
      "137": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "138": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 81
        }
      },
      "139": {
        start: {
          line: 251,
          column: 33
        },
        end: {
          line: 251,
          column: 64
        }
      },
      "140": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 28
        }
      },
      "141": {
        start: {
          line: 260,
          column: 22
        },
        end: {
          line: 260,
          column: 46
        }
      },
      "142": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "143": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 25
        }
      },
      "144": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 34
        }
      },
      "145": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 59
        }
      },
      "146": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 20
        }
      },
      "147": {
        start: {
          line: 272,
          column: 22
        },
        end: {
          line: 272,
          column: 46
        }
      },
      "148": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "149": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 25
        }
      },
      "150": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 30
        }
      },
      "151": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 38
        }
      },
      "152": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 55
        }
      },
      "153": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 20
        }
      },
      "154": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      },
      "155": {
        start: {
          line: 286,
          column: 29
        },
        end: {
          line: 286,
          column: 44
        }
      },
      "156": {
        start: {
          line: 289,
          column: 34
        },
        end: {
          line: 289,
          column: 77
        }
      },
      "157": {
        start: {
          line: 290,
          column: 33
        },
        end: {
          line: 290,
          column: 86
        }
      },
      "158": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 292,
          column: 36
        }
      },
      "159": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 36
        }
      },
      "160": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 65
        }
      },
      "161": {
        start: {
          line: 300,
          column: 23
        },
        end: {
          line: 300,
          column: 55
        }
      },
      "162": {
        start: {
          line: 301,
          column: 29
        },
        end: {
          line: 301,
          column: 60
        }
      },
      "163": {
        start: {
          line: 301,
          column: 48
        },
        end: {
          line: 301,
          column: 59
        }
      },
      "164": {
        start: {
          line: 302,
          column: 33
        },
        end: {
          line: 305,
          column: 14
        }
      },
      "165": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 65
        }
      },
      "166": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 23
        }
      },
      "167": {
        start: {
          line: 307,
          column: 35
        },
        end: {
          line: 307,
          column: 69
        }
      },
      "168": {
        start: {
          line: 307,
          column: 54
        },
        end: {
          line: 307,
          column: 68
        }
      },
      "169": {
        start: {
          line: 308,
          column: 25
        },
        end: {
          line: 308,
          column: 90
        }
      },
      "170": {
        start: {
          line: 310,
          column: 32
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "171": {
        start: {
          line: 310,
          column: 51
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "172": {
        start: {
          line: 313,
          column: 34
        },
        end: {
          line: 313,
          column: 96
        }
      },
      "173": {
        start: {
          line: 314,
          column: 30
        },
        end: {
          line: 316,
          column: 18
        }
      },
      "174": {
        start: {
          line: 315,
          column: 51
        },
        end: {
          line: 315,
          column: 72
        }
      },
      "175": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 325,
          column: 10
        }
      },
      "176": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 55
        }
      },
      "177": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 63
        }
      },
      "178": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 49
        }
      },
      "179": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 348,
          column: 10
        }
      },
      "180": {
        start: {
          line: 341,
          column: 63
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "181": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "182": {
        start: {
          line: 354,
          column: 31
        },
        end: {
          line: 354,
          column: 69
        }
      },
      "183": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "184": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "185": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 67
        }
      },
      "186": {
        start: {
          line: 360,
          column: 20
        },
        end: {
          line: 360,
          column: 98
        }
      },
      "187": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "188": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 370,
          column: 17
        }
      },
      "189": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 366,
          column: 65
        }
      },
      "190": {
        start: {
          line: 369,
          column: 20
        },
        end: {
          line: 369,
          column: 94
        }
      },
      "191": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 81
        }
      },
      "192": {
        start: {
          line: 378,
          column: 22
        },
        end: {
          line: 410,
          column: 10
        }
      },
      "193": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 414,
          column: 11
        }
      },
      "194": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 21
        }
      },
      "195": {
        start: {
          line: 418,
          column: 23
        },
        end: {
          line: 418,
          column: 51
        }
      },
      "196": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 424,
          column: 11
        }
      },
      "197": {
        start: {
          line: 423,
          column: 37
        },
        end: {
          line: 423,
          column: 89
        }
      },
      "198": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 428,
          column: 9
        }
      },
      "199": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 63
        }
      },
      "200": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "201": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "202": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 39
        }
      },
      "203": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "204": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 74
        }
      },
      "205": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 74
        }
      },
      "206": {
        start: {
          line: 444,
          column: 16
        },
        end: {
          line: 444,
          column: 71
        }
      },
      "207": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 74
        }
      },
      "208": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 26
        }
      },
      "209": {
        start: {
          line: 451,
          column: 23
        },
        end: {
          line: 451,
          column: 25
        }
      },
      "210": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "211": {
        start: {
          line: 453,
          column: 26
        },
        end: {
          line: 453,
          column: 45
        }
      },
      "212": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 455,
          column: 25
        }
      },
      "213": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 25
        }
      },
      "214": {
        start: {
          line: 456,
          column: 31
        },
        end: {
          line: 456,
          column: 69
        }
      },
      "215": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 458,
          column: 25
        }
      },
      "216": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 25
        }
      },
      "217": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 489,
          column: 13
        }
      },
      "218": {
        start: {
          line: 461,
          column: 34
        },
        end: {
          line: 461,
          column: 124
        }
      },
      "219": {
        start: {
          line: 462,
          column: 33
        },
        end: {
          line: 462,
          column: 85
        }
      },
      "220": {
        start: {
          line: 463,
          column: 35
        },
        end: {
          line: 463,
          column: 79
        }
      },
      "221": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 466,
          column: 29
        }
      },
      "222": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 29
        }
      },
      "223": {
        start: {
          line: 467,
          column: 30
        },
        end: {
          line: 487,
          column: 17
        }
      },
      "224": {
        start: {
          line: 488,
          column: 16
        },
        end: {
          line: 488,
          column: 35
        }
      },
      "225": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 22
        }
      },
      "226": {
        start: {
          line: 494,
          column: 23
        },
        end: {
          line: 494,
          column: 25
        }
      },
      "227": {
        start: {
          line: 496,
          column: 22
        },
        end: {
          line: 496,
          column: 56
        }
      },
      "228": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 498,
          column: 26
        }
      },
      "229": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 26
        }
      },
      "230": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 547,
          column: 9
        }
      },
      "231": {
        start: {
          line: 501,
          column: 32
        },
        end: {
          line: 501,
          column: 88
        }
      },
      "232": {
        start: {
          line: 501,
          column: 62
        },
        end: {
          line: 501,
          column: 87
        }
      },
      "233": {
        start: {
          line: 502,
          column: 41
        },
        end: {
          line: 502,
          column: 112
        }
      },
      "234": {
        start: {
          line: 504,
          column: 32
        },
        end: {
          line: 504,
          column: 63
        }
      },
      "235": {
        start: {
          line: 505,
          column: 35
        },
        end: {
          line: 505,
          column: 67
        }
      },
      "236": {
        start: {
          line: 506,
          column: 40
        },
        end: {
          line: 506,
          column: 67
        }
      },
      "237": {
        start: {
          line: 508,
          column: 40
        },
        end: {
          line: 508,
          column: 124
        }
      },
      "238": {
        start: {
          line: 510,
          column: 30
        },
        end: {
          line: 510,
          column: 56
        }
      },
      "239": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 540,
          column: 13
        }
      },
      "240": {
        start: {
          line: 513,
          column: 44
        },
        end: {
          line: 513,
          column: 143
        }
      },
      "241": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 539,
          column: 17
        }
      },
      "242": {
        start: {
          line: 515,
          column: 20
        },
        end: {
          line: 538,
          column: 21
        }
      },
      "243": {
        start: {
          line: 516,
          column: 38
        },
        end: {
          line: 516,
          column: 57
        }
      },
      "244": {
        start: {
          line: 517,
          column: 41
        },
        end: {
          line: 517,
          column: 95
        }
      },
      "245": {
        start: {
          line: 518,
          column: 43
        },
        end: {
          line: 518,
          column: 89
        }
      },
      "246": {
        start: {
          line: 519,
          column: 38
        },
        end: {
          line: 536,
          column: 25
        }
      },
      "247": {
        start: {
          line: 537,
          column: 24
        },
        end: {
          line: 537,
          column: 43
        }
      },
      "248": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 542,
          column: 34
        }
      },
      "249": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 37
        }
      },
      "250": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 546,
          column: 68
        }
      },
      "251": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 548,
          column: 22
        }
      },
      "252": {
        start: {
          line: 552,
          column: 39
        },
        end: {
          line: 555,
          column: 10
        }
      },
      "253": {
        start: {
          line: 557,
          column: 31
        },
        end: {
          line: 557,
          column: 33
        }
      },
      "254": {
        start: {
          line: 558,
          column: 29
        },
        end: {
          line: 558,
          column: 38
        }
      },
      "255": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 565,
          column: 11
        }
      },
      "256": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 563,
          column: 13
        }
      },
      "257": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 51
        }
      },
      "258": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 564,
          column: 55
        }
      },
      "259": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "260": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 590,
          column: 13
        }
      },
      "261": {
        start: {
          line: 570,
          column: 38
        },
        end: {
          line: 570,
          column: 102
        }
      },
      "262": {
        start: {
          line: 570,
          column: 64
        },
        end: {
          line: 570,
          column: 82
        }
      },
      "263": {
        start: {
          line: 571,
          column: 36
        },
        end: {
          line: 574,
          column: 18
        }
      },
      "264": {
        start: {
          line: 572,
          column: 42
        },
        end: {
          line: 572,
          column: 85
        }
      },
      "265": {
        start: {
          line: 573,
          column: 20
        },
        end: {
          line: 573,
          column: 93
        }
      },
      "266": {
        start: {
          line: 575,
          column: 38
        },
        end: {
          line: 584,
          column: 17
        }
      },
      "267": {
        start: {
          line: 582,
          column: 66
        },
        end: {
          line: 582,
          column: 84
        }
      },
      "268": {
        start: {
          line: 585,
          column: 16
        },
        end: {
          line: 585,
          column: 51
        }
      },
      "269": {
        start: {
          line: 589,
          column: 16
        },
        end: {
          line: 589,
          column: 47
        }
      },
      "270": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 592,
          column: 30
        }
      },
      "271": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 18
        }
      },
      "272": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 601,
          column: 65
        }
      },
      "273": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 44
        }
      },
      "274": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 609,
          column: 18
        }
      },
      "275": {
        start: {
          line: 613,
          column: 23
        },
        end: {
          line: 613,
          column: 51
        }
      },
      "276": {
        start: {
          line: 613,
          column: 45
        },
        end: {
          line: 613,
          column: 50
        }
      },
      "277": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 56
        }
      },
      "278": {
        start: {
          line: 617,
          column: 21
        },
        end: {
          line: 617,
          column: 74
        }
      },
      "279": {
        start: {
          line: 617,
          column: 47
        },
        end: {
          line: 617,
          column: 54
        }
      },
      "280": {
        start: {
          line: 618,
          column: 25
        },
        end: {
          line: 618,
          column: 98
        }
      },
      "281": {
        start: {
          line: 618,
          column: 51
        },
        end: {
          line: 618,
          column: 78
        }
      },
      "282": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 35
        }
      },
      "283": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 623,
          column: 18
        }
      },
      "284": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 627,
          column: 18
        }
      },
      "285": {
        start: {
          line: 630,
          column: 22
        },
        end: {
          line: 630,
          column: 43
        }
      },
      "286": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 632,
          column: 30
        }
      },
      "287": {
        start: {
          line: 632,
          column: 12
        },
        end: {
          line: 632,
          column: 30
        }
      },
      "288": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 634,
          column: 26
        }
      },
      "289": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 634,
          column: 26
        }
      },
      "290": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 636,
          column: 28
        }
      },
      "291": {
        start: {
          line: 636,
          column: 12
        },
        end: {
          line: 636,
          column: 28
        }
      },
      "292": {
        start: {
          line: 637,
          column: 8
        },
        end: {
          line: 637,
          column: 21
        }
      },
      "293": {
        start: {
          line: 640,
          column: 29
        },
        end: {
          line: 643,
          column: 96
        }
      },
      "294": {
        start: {
          line: 641,
          column: 29
        },
        end: {
          line: 643,
          column: 95
        }
      },
      "295": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 39
        }
      },
      "296": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 648,
          column: 56
        }
      },
      "297": {
        start: {
          line: 651,
          column: 32
        },
        end: {
          line: 651,
          column: 34
        }
      },
      "298": {
        start: {
          line: 652,
          column: 8
        },
        end: {
          line: 652,
          column: 87
        }
      },
      "299": {
        start: {
          line: 653,
          column: 8
        },
        end: {
          line: 653,
          column: 69
        }
      },
      "300": {
        start: {
          line: 654,
          column: 8
        },
        end: {
          line: 654,
          column: 78
        }
      },
      "301": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 657,
          column: 9
        }
      },
      "302": {
        start: {
          line: 656,
          column: 12
        },
        end: {
          line: 656,
          column: 83
        }
      },
      "303": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 661,
          column: 9
        }
      },
      "304": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 659,
          column: 80
        }
      },
      "305": {
        start: {
          line: 660,
          column: 12
        },
        end: {
          line: 660,
          column: 67
        }
      },
      "306": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 662,
          column: 31
        }
      },
      "307": {
        start: {
          line: 666,
          column: 21
        },
        end: {
          line: 666,
          column: 30
        }
      },
      "308": {
        start: {
          line: 667,
          column: 23
        },
        end: {
          line: 667,
          column: 25
        }
      },
      "309": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 674,
          column: 9
        }
      },
      "310": {
        start: {
          line: 668,
          column: 50
        },
        end: {
          line: 668,
          column: 77
        }
      },
      "311": {
        start: {
          line: 669,
          column: 24
        },
        end: {
          line: 669,
          column: 100
        }
      },
      "312": {
        start: {
          line: 670,
          column: 12
        },
        end: {
          line: 673,
          column: 13
        }
      },
      "313": {
        start: {
          line: 671,
          column: 16
        },
        end: {
          line: 671,
          column: 30
        }
      },
      "314": {
        start: {
          line: 672,
          column: 16
        },
        end: {
          line: 672,
          column: 35
        }
      },
      "315": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 675,
          column: 22
        }
      },
      "316": {
        start: {
          line: 678,
          column: 27
        },
        end: {
          line: 682,
          column: 52
        }
      },
      "317": {
        start: {
          line: 679,
          column: 29
        },
        end: {
          line: 681,
          column: 58
        }
      },
      "318": {
        start: {
          line: 681,
          column: 31
        },
        end: {
          line: 681,
          column: 57
        }
      },
      "319": {
        start: {
          line: 682,
          column: 28
        },
        end: {
          line: 682,
          column: 51
        }
      },
      "320": {
        start: {
          line: 683,
          column: 8
        },
        end: {
          line: 683,
          column: 37
        }
      },
      "321": {
        start: {
          line: 686,
          column: 29
        },
        end: {
          line: 686,
          column: 30
        }
      },
      "322": {
        start: {
          line: 687,
          column: 8
        },
        end: {
          line: 689,
          column: 9
        }
      },
      "323": {
        start: {
          line: 687,
          column: 21
        },
        end: {
          line: 687,
          column: 22
        }
      },
      "324": {
        start: {
          line: 688,
          column: 12
        },
        end: {
          line: 688,
          column: 74
        }
      },
      "325": {
        start: {
          line: 690,
          column: 8
        },
        end: {
          line: 690,
          column: 59
        }
      },
      "326": {
        start: {
          line: 693,
          column: 30
        },
        end: {
          line: 693,
          column: 32
        }
      },
      "327": {
        start: {
          line: 694,
          column: 25
        },
        end: {
          line: 694,
          column: 26
        }
      },
      "328": {
        start: {
          line: 695,
          column: 23
        },
        end: {
          line: 699,
          column: 10
        }
      },
      "329": {
        start: {
          line: 696,
          column: 26
        },
        end: {
          line: 696,
          column: 60
        }
      },
      "330": {
        start: {
          line: 697,
          column: 12
        },
        end: {
          line: 697,
          column: 32
        }
      },
      "331": {
        start: {
          line: 698,
          column: 12
        },
        end: {
          line: 698,
          column: 25
        }
      },
      "332": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 703,
          column: 11
        }
      },
      "333": {
        start: {
          line: 701,
          column: 33
        },
        end: {
          line: 701,
          column: 78
        }
      },
      "334": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 702,
          column: 66
        }
      },
      "335": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 704,
          column: 77
        }
      },
      "336": {
        start: {
          line: 704,
          column: 44
        },
        end: {
          line: 704,
          column: 75
        }
      },
      "337": {
        start: {
          line: 707,
          column: 0
        },
        end: {
          line: 707,
          column: 42
        }
      },
      "338": {
        start: {
          line: 709,
          column: 0
        },
        end: {
          line: 709,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 44
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 39
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 82
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 89,
            column: 45
          },
          end: {
            line: 89,
            column: 46
          }
        },
        loc: {
          start: {
            line: 89,
            column: 57
          },
          end: {
            line: 97,
            column: 9
          }
        },
        line: 89
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 20
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 105
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 59
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 120
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 145,
            column: 28
          },
          end: {
            line: 145,
            column: 29
          }
        },
        loc: {
          start: {
            line: 145,
            column: 45
          },
          end: {
            line: 149,
            column: 17
          }
        },
        line: 145
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 169,
            column: 54
          },
          end: {
            line: 169,
            column: 55
          }
        },
        loc: {
          start: {
            line: 169,
            column: 66
          },
          end: {
            line: 169,
            column: 73
          }
        },
        line: 169
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 62
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 191
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 199,
            column: 42
          },
          end: {
            line: 199,
            column: 43
          }
        },
        loc: {
          start: {
            line: 199,
            column: 47
          },
          end: {
            line: 199,
            column: 54
          }
        },
        line: 199
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 200,
            column: 35
          },
          end: {
            line: 200,
            column: 36
          }
        },
        loc: {
          start: {
            line: 200,
            column: 47
          },
          end: {
            line: 200,
            column: 54
          }
        },
        line: 200
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 201,
            column: 39
          },
          end: {
            line: 201,
            column: 40
          }
        },
        loc: {
          start: {
            line: 201,
            column: 51
          },
          end: {
            line: 201,
            column: 78
          }
        },
        line: 201
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 35
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 223
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 251,
            column: 27
          },
          end: {
            line: 251,
            column: 28
          }
        },
        loc: {
          start: {
            line: 251,
            column: 33
          },
          end: {
            line: 251,
            column: 64
          }
        },
        line: 251
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 38
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 259
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 34
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 271
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 22
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 284
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        },
        loc: {
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 286,
            column: 44
          }
        },
        line: 286
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 287,
            column: 18
          },
          end: {
            line: 287,
            column: 19
          }
        },
        loc: {
          start: {
            line: 287,
            column: 28
          },
          end: {
            line: 294,
            column: 9
          }
        },
        line: 287
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 24
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 299
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 301,
            column: 43
          },
          end: {
            line: 301,
            column: 44
          }
        },
        loc: {
          start: {
            line: 301,
            column: 48
          },
          end: {
            line: 301,
            column: 59
          }
        },
        line: 301
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 302,
            column: 47
          },
          end: {
            line: 302,
            column: 48
          }
        },
        loc: {
          start: {
            line: 302,
            column: 63
          },
          end: {
            line: 305,
            column: 9
          }
        },
        line: 302
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 307,
            column: 49
          },
          end: {
            line: 307,
            column: 50
          }
        },
        loc: {
          start: {
            line: 307,
            column: 54
          },
          end: {
            line: 307,
            column: 68
          }
        },
        line: 307
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 310,
            column: 46
          },
          end: {
            line: 310,
            column: 47
          }
        },
        loc: {
          start: {
            line: 310,
            column: 51
          },
          end: {
            line: 311,
            column: 69
          }
        },
        line: 310
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 315,
            column: 46
          },
          end: {
            line: 315,
            column: 47
          }
        },
        loc: {
          start: {
            line: 315,
            column: 51
          },
          end: {
            line: 315,
            column: 72
          }
        },
        line: 315
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 28
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 330
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        loc: {
          start: {
            line: 338,
            column: 17
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 338
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 341,
            column: 57
          },
          end: {
            line: 341,
            column: 58
          }
        },
        loc: {
          start: {
            line: 341,
            column: 63
          },
          end: {
            line: 344,
            column: 13
          }
        },
        line: 341
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 29
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 351
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 37
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 377
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 417,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        loc: {
          start: {
            line: 417,
            column: 29
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 417
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 423,
            column: 31
          },
          end: {
            line: 423,
            column: 32
          }
        },
        loc: {
          start: {
            line: 423,
            column: 37
          },
          end: {
            line: 423,
            column: 89
          }
        },
        line: 423
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 65
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 437
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 56
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 450
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 56
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 493
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 501,
            column: 51
          },
          end: {
            line: 501,
            column: 52
          }
        },
        loc: {
          start: {
            line: 501,
            column: 62
          },
          end: {
            line: 501,
            column: 87
          }
        },
        line: 501
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 550,
            column: 4
          },
          end: {
            line: 550,
            column: 5
          }
        },
        loc: {
          start: {
            line: 550,
            column: 53
          },
          end: {
            line: 593,
            column: 5
          }
        },
        line: 550
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 560,
            column: 45
          },
          end: {
            line: 560,
            column: 46
          }
        },
        loc: {
          start: {
            line: 560,
            column: 54
          },
          end: {
            line: 565,
            column: 9
          }
        },
        line: 560
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 570,
            column: 52
          },
          end: {
            line: 570,
            column: 53
          }
        },
        loc: {
          start: {
            line: 570,
            column: 64
          },
          end: {
            line: 570,
            column: 82
          }
        },
        line: 570
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 571,
            column: 50
          },
          end: {
            line: 571,
            column: 51
          }
        },
        loc: {
          start: {
            line: 571,
            column: 62
          },
          end: {
            line: 574,
            column: 17
          }
        },
        line: 571
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 582,
            column: 61
          },
          end: {
            line: 582,
            column: 62
          }
        },
        loc: {
          start: {
            line: 582,
            column: 66
          },
          end: {
            line: 582,
            column: 84
          }
        },
        line: 582
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 595,
            column: 5
          }
        },
        loc: {
          start: {
            line: 595,
            column: 45
          },
          end: {
            line: 598,
            column: 5
          }
        },
        line: 595
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 599,
            column: 4
          },
          end: {
            line: 599,
            column: 5
          }
        },
        loc: {
          start: {
            line: 599,
            column: 24
          },
          end: {
            line: 602,
            column: 5
          }
        },
        line: 599
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 603,
            column: 5
          }
        },
        loc: {
          start: {
            line: 603,
            column: 36
          },
          end: {
            line: 606,
            column: 5
          }
        },
        line: 603
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 607,
            column: 4
          },
          end: {
            line: 607,
            column: 5
          }
        },
        loc: {
          start: {
            line: 607,
            column: 65
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 607
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 611,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        },
        loc: {
          start: {
            line: 611,
            column: 31
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 611
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 613,
            column: 35
          },
          end: {
            line: 613,
            column: 36
          }
        },
        loc: {
          start: {
            line: 613,
            column: 45
          },
          end: {
            line: 613,
            column: 50
          }
        },
        line: 613
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 616,
            column: 4
          },
          end: {
            line: 616,
            column: 5
          }
        },
        loc: {
          start: {
            line: 616,
            column: 39
          },
          end: {
            line: 620,
            column: 5
          }
        },
        line: 616
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 617,
            column: 35
          },
          end: {
            line: 617,
            column: 36
          }
        },
        loc: {
          start: {
            line: 617,
            column: 47
          },
          end: {
            line: 617,
            column: 54
          }
        },
        line: 617
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 618,
            column: 39
          },
          end: {
            line: 618,
            column: 40
          }
        },
        loc: {
          start: {
            line: 618,
            column: 51
          },
          end: {
            line: 618,
            column: 78
          }
        },
        line: 618
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 621,
            column: 4
          },
          end: {
            line: 621,
            column: 5
          }
        },
        loc: {
          start: {
            line: 621,
            column: 42
          },
          end: {
            line: 624,
            column: 5
          }
        },
        line: 621
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 625,
            column: 4
          },
          end: {
            line: 625,
            column: 5
          }
        },
        loc: {
          start: {
            line: 625,
            column: 42
          },
          end: {
            line: 628,
            column: 5
          }
        },
        line: 625
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 629,
            column: 4
          },
          end: {
            line: 629,
            column: 5
          }
        },
        loc: {
          start: {
            line: 629,
            column: 44
          },
          end: {
            line: 638,
            column: 5
          }
        },
        line: 629
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 639,
            column: 5
          }
        },
        loc: {
          start: {
            line: 639,
            column: 25
          },
          end: {
            line: 645,
            column: 5
          }
        },
        line: 639
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 641,
            column: 20
          },
          end: {
            line: 641,
            column: 21
          }
        },
        loc: {
          start: {
            line: 641,
            column: 29
          },
          end: {
            line: 643,
            column: 95
          }
        },
        line: 641
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 646,
            column: 4
          },
          end: {
            line: 646,
            column: 5
          }
        },
        loc: {
          start: {
            line: 646,
            column: 42
          },
          end: {
            line: 649,
            column: 5
          }
        },
        line: 646
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 650,
            column: 4
          },
          end: {
            line: 650,
            column: 5
          }
        },
        loc: {
          start: {
            line: 650,
            column: 54
          },
          end: {
            line: 663,
            column: 5
          }
        },
        line: 650
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 664,
            column: 4
          },
          end: {
            line: 664,
            column: 5
          }
        },
        loc: {
          start: {
            line: 664,
            column: 30
          },
          end: {
            line: 676,
            column: 5
          }
        },
        line: 664
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 668,
            column: 40
          },
          end: {
            line: 668,
            column: 41
          }
        },
        loc: {
          start: {
            line: 668,
            column: 50
          },
          end: {
            line: 668,
            column: 77
          }
        },
        line: 668
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 677,
            column: 4
          },
          end: {
            line: 677,
            column: 5
          }
        },
        loc: {
          start: {
            line: 677,
            column: 34
          },
          end: {
            line: 684,
            column: 5
          }
        },
        line: 677
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 679,
            column: 20
          },
          end: {
            line: 679,
            column: 21
          }
        },
        loc: {
          start: {
            line: 679,
            column: 29
          },
          end: {
            line: 681,
            column: 58
          }
        },
        line: 679
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 681,
            column: 26
          },
          end: {
            line: 681,
            column: 27
          }
        },
        loc: {
          start: {
            line: 681,
            column: 31
          },
          end: {
            line: 681,
            column: 57
          }
        },
        line: 681
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 682,
            column: 18
          },
          end: {
            line: 682,
            column: 19
          }
        },
        loc: {
          start: {
            line: 682,
            column: 28
          },
          end: {
            line: 682,
            column: 51
          }
        },
        line: 682
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 685,
            column: 4
          },
          end: {
            line: 685,
            column: 5
          }
        },
        loc: {
          start: {
            line: 685,
            column: 58
          },
          end: {
            line: 691,
            column: 5
          }
        },
        line: 685
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 692,
            column: 4
          },
          end: {
            line: 692,
            column: 5
          }
        },
        loc: {
          start: {
            line: 692,
            column: 67
          },
          end: {
            line: 705,
            column: 5
          }
        },
        line: 692
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 695,
            column: 36
          },
          end: {
            line: 695,
            column: 37
          }
        },
        loc: {
          start: {
            line: 695,
            column: 50
          },
          end: {
            line: 699,
            column: 9
          }
        },
        line: 695
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 700,
            column: 25
          },
          end: {
            line: 700,
            column: 26
          }
        },
        loc: {
          start: {
            line: 700,
            column: 43
          },
          end: {
            line: 703,
            column: 9
          }
        },
        line: 700
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 704,
            column: 34
          },
          end: {
            line: 704,
            column: 35
          }
        },
        loc: {
          start: {
            line: 704,
            column: 44
          },
          end: {
            line: 704,
            column: 75
          }
        },
        line: 704
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 82,
            column: 19
          },
          end: {
            line: 82,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 82,
            column: 37
          }
        }],
        line: 82
      },
      "18": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "19": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "20": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "21": {
        loc: {
          start: {
            line: 120,
            column: 41
          },
          end: {
            line: 120,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 120,
            column: 56
          },
          end: {
            line: 120,
            column: 57
          }
        }],
        line: 120
      },
      "22": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "23": {
        loc: {
          start: {
            line: 146,
            column: 20
          },
          end: {
            line: 148,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 20
          },
          end: {
            line: 148,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "24": {
        loc: {
          start: {
            line: 191,
            column: 46
          },
          end: {
            line: 191,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 191,
            column: 59
          },
          end: {
            line: 191,
            column: 60
          }
        }],
        line: 191
      },
      "25": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "26": {
        loc: {
          start: {
            line: 224,
            column: 30
          },
          end: {
            line: 224,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 30
          },
          end: {
            line: 224,
            column: 37
          }
        }, {
          start: {
            line: 224,
            column: 41
          },
          end: {
            line: 224,
            column: 79
          }
        }],
        line: 224
      },
      "27": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "28": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "29": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "30": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "31": {
        loc: {
          start: {
            line: 291,
            column: 12
          },
          end: {
            line: 292,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 12
          },
          end: {
            line: 292,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "32": {
        loc: {
          start: {
            line: 303,
            column: 35
          },
          end: {
            line: 303,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 35
          },
          end: {
            line: 303,
            column: 54
          }
        }, {
          start: {
            line: 303,
            column: 58
          },
          end: {
            line: 303,
            column: 59
          }
        }],
        line: 303
      },
      "33": {
        loc: {
          start: {
            line: 308,
            column: 25
          },
          end: {
            line: 308,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 308,
            column: 45
          },
          end: {
            line: 308,
            column: 86
          }
        }, {
          start: {
            line: 308,
            column: 89
          },
          end: {
            line: 308,
            column: 90
          }
        }],
        line: 308
      },
      "34": {
        loc: {
          start: {
            line: 310,
            column: 51
          },
          end: {
            line: 311,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 51
          },
          end: {
            line: 310,
            column: 61
          }
        }, {
          start: {
            line: 310,
            column: 65
          },
          end: {
            line: 310,
            column: 77
          }
        }, {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 311,
            column: 69
          }
        }],
        line: 310
      },
      "35": {
        loc: {
          start: {
            line: 313,
            column: 34
          },
          end: {
            line: 313,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 54
          },
          end: {
            line: 313,
            column: 92
          }
        }, {
          start: {
            line: 313,
            column: 95
          },
          end: {
            line: 313,
            column: 96
          }
        }],
        line: 313
      },
      "36": {
        loc: {
          start: {
            line: 314,
            column: 30
          },
          end: {
            line: 316,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 14
          },
          end: {
            line: 315,
            column: 75
          }
        }, {
          start: {
            line: 316,
            column: 14
          },
          end: {
            line: 316,
            column: 18
          }
        }],
        line: 314
      },
      "37": {
        loc: {
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "38": {
        loc: {
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 428,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 428,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "39": {
        loc: {
          start: {
            line: 431,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "40": {
        loc: {
          start: {
            line: 431,
            column: 16
          },
          end: {
            line: 432,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 16
          },
          end: {
            line: 431,
            column: 30
          }
        }, {
          start: {
            line: 432,
            column: 16
          },
          end: {
            line: 432,
            column: 78
          }
        }],
        line: 431
      },
      "41": {
        loc: {
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 440,
            column: 74
          }
        }, {
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 442,
            column: 74
          }
        }, {
          start: {
            line: 443,
            column: 12
          },
          end: {
            line: 444,
            column: 71
          }
        }, {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 447,
            column: 26
          }
        }],
        line: 438
      },
      "42": {
        loc: {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 455,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 455,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "43": {
        loc: {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 458,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 458,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "44": {
        loc: {
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 489,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 489,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "45": {
        loc: {
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 460,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 460,
            column: 45
          }
        }, {
          start: {
            line: 460,
            column: 49
          },
          end: {
            line: 460,
            column: 78
          }
        }],
        line: 460
      },
      "46": {
        loc: {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 466,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 466,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "47": {
        loc: {
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 498,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 498,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 497
      },
      "48": {
        loc: {
          start: {
            line: 497,
            column: 12
          },
          end: {
            line: 497,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 497,
            column: 12
          },
          end: {
            line: 497,
            column: 18
          }
        }, {
          start: {
            line: 497,
            column: 22
          },
          end: {
            line: 497,
            column: 34
          }
        }],
        line: 497
      },
      "49": {
        loc: {
          start: {
            line: 501,
            column: 62
          },
          end: {
            line: 501,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 62
          },
          end: {
            line: 501,
            column: 82
          }
        }, {
          start: {
            line: 501,
            column: 86
          },
          end: {
            line: 501,
            column: 87
          }
        }],
        line: 501
      },
      "50": {
        loc: {
          start: {
            line: 511,
            column: 12
          },
          end: {
            line: 540,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 511,
            column: 12
          },
          end: {
            line: 540,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 511
      },
      "51": {
        loc: {
          start: {
            line: 515,
            column: 20
          },
          end: {
            line: 538,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 20
          },
          end: {
            line: 538,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "52": {
        loc: {
          start: {
            line: 515,
            column: 24
          },
          end: {
            line: 515,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 515,
            column: 24
          },
          end: {
            line: 515,
            column: 42
          }
        }, {
          start: {
            line: 515,
            column: 46
          },
          end: {
            line: 515,
            column: 72
          }
        }],
        line: 515
      },
      "53": {
        loc: {
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 561
      },
      "54": {
        loc: {
          start: {
            line: 568,
            column: 12
          },
          end: {
            line: 590,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 568,
            column: 12
          },
          end: {
            line: 590,
            column: 13
          }
        }, {
          start: {
            line: 587,
            column: 17
          },
          end: {
            line: 590,
            column: 13
          }
        }],
        line: 568
      },
      "55": {
        loc: {
          start: {
            line: 573,
            column: 27
          },
          end: {
            line: 573,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 573,
            column: 85
          },
          end: {
            line: 573,
            column: 86
          }
        }, {
          start: {
            line: 573,
            column: 89
          },
          end: {
            line: 573,
            column: 92
          }
        }],
        line: 573
      },
      "56": {
        loc: {
          start: {
            line: 631,
            column: 8
          },
          end: {
            line: 632,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 631,
            column: 8
          },
          end: {
            line: 632,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 631
      },
      "57": {
        loc: {
          start: {
            line: 633,
            column: 8
          },
          end: {
            line: 634,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 633,
            column: 8
          },
          end: {
            line: 634,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 633
      },
      "58": {
        loc: {
          start: {
            line: 635,
            column: 8
          },
          end: {
            line: 636,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 635,
            column: 8
          },
          end: {
            line: 636,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 635
      },
      "59": {
        loc: {
          start: {
            line: 641,
            column: 29
          },
          end: {
            line: 643,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 641,
            column: 29
          },
          end: {
            line: 641,
            column: 52
          }
        }, {
          start: {
            line: 642,
            column: 12
          },
          end: {
            line: 642,
            column: 27
          }
        }, {
          start: {
            line: 643,
            column: 12
          },
          end: {
            line: 643,
            column: 95
          }
        }],
        line: 641
      },
      "60": {
        loc: {
          start: {
            line: 655,
            column: 8
          },
          end: {
            line: 657,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 655,
            column: 8
          },
          end: {
            line: 657,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 655
      },
      "61": {
        loc: {
          start: {
            line: 655,
            column: 12
          },
          end: {
            line: 655,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 655,
            column: 12
          },
          end: {
            line: 655,
            column: 34
          }
        }, {
          start: {
            line: 655,
            column: 38
          },
          end: {
            line: 655,
            column: 63
          }
        }],
        line: 655
      },
      "62": {
        loc: {
          start: {
            line: 658,
            column: 8
          },
          end: {
            line: 661,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 658,
            column: 8
          },
          end: {
            line: 661,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 658
      },
      "63": {
        loc: {
          start: {
            line: 670,
            column: 12
          },
          end: {
            line: 673,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 670,
            column: 12
          },
          end: {
            line: 673,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 670
      },
      "64": {
        loc: {
          start: {
            line: 679,
            column: 29
          },
          end: {
            line: 681,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 679,
            column: 29
          },
          end: {
            line: 679,
            column: 62
          }
        }, {
          start: {
            line: 680,
            column: 12
          },
          end: {
            line: 680,
            column: 26
          }
        }, {
          start: {
            line: 681,
            column: 12
          },
          end: {
            line: 681,
            column: 58
          }
        }],
        line: 679
      },
      "65": {
        loc: {
          start: {
            line: 683,
            column: 15
          },
          end: {
            line: 683,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 683,
            column: 15
          },
          end: {
            line: 683,
            column: 28
          }
        }, {
          start: {
            line: 683,
            column: 32
          },
          end: {
            line: 683,
            column: 36
          }
        }],
        line: 683
      },
      "66": {
        loc: {
          start: {
            line: 701,
            column: 33
          },
          end: {
            line: 701,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 701,
            column: 50
          },
          end: {
            line: 701,
            column: 74
          }
        }, {
          start: {
            line: 701,
            column: 77
          },
          end: {
            line: 701,
            column: 78
          }
        }],
        line: 701
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0],
      "65": [0, 0],
      "66": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/AnomalyDetector.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/AnomalyDetector.ts"],
      sourcesContent: ["import * as tf from '@tensorflow/tfjs-node';\nimport { EventEmitter } from 'events';\nimport { LRUCache } from 'lru-cache';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\nimport { EventStore } from './EventStore';\n\nexport interface AnomalyModel {\n  id: string;\n  name: string;\n  algorithm: 'isolation_forest' | 'autoencoder' | 'statistical' | 'ensemble';\n  model?: tf.LayersModel;\n  parameters: Record<string, any>;\n  trainedAt: Date;\n  accuracy: number;\n  features: string[];\n  isActive: boolean;\n}\n\nexport interface AnomalyAlert {\n  id: string;\n  timestamp: Date;\n  metric: string;\n  value: number;\n  expectedRange: { min: number; max: number };\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  confidence: number;\n  description: string;\n  context: {\n    relatedMetrics: Record<string, number>;\n    historicalComparison: {\n      lastHour: number;\n      lastDay: number;\n      lastWeek: number;\n    };\n    patterns: string[];\n  };\n  recommendations: string[];\n  acknowledged: boolean;\n  resolved: boolean;\n  resolvedAt?: Date;\n}\n\nexport interface DetectionConfig {\n  sensitivity: 'low' | 'medium' | 'high';\n  windowSize: number; // minutes\n  minSamples: number;\n  alertThreshold: number;\n  cooldownPeriod: number; // minutes\n  enabledAlgorithms: string[];\n  metricWeights: Record<string, number>;\n}\n\nexport interface StatisticalThresholds {\n  metric: string;\n  mean: number;\n  stdDev: number;\n  upperBound: number;\n  lowerBound: number;\n  confidence: number;\n  sampleSize: number;\n  lastUpdated: Date;\n}\n\nexport class AnomalyDetector extends EventEmitter {\n  private models: Map<string, AnomalyModel>;\n  private alerts: Map<string, AnomalyAlert>;\n  private cache: LRUCache<string, any>;\n  private config: DetectionConfig;\n  private statisticalThresholds: Map<string, StatisticalThresholds>;\n  private isRunning: boolean = false;\n  private detectionInterval: NodeJS.Timeout | null = null;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  private eventStore: EventStore;\n  private alertHistory: AnomalyAlert[] = [];\n\n  constructor(config?: Partial<DetectionConfig>) {\n    super();\n    \n    this.models = new Map();\n    this.alerts = new Map();\n    this.statisticalThresholds = new Map();\n    this.alertHistory = [];\n    \n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n\n    this.config = {\n      sensitivity: 'medium',\n      windowSize: 10,\n      minSamples: 30,\n      alertThreshold: 0.7,\n      cooldownPeriod: 15,\n      enabledAlgorithms: ['autoencoder', 'statistical'],\n      metricWeights: {\n        'cpu_usage': 1.0,\n        'memory_usage': 1.0,\n        'app_response_time': 1.2,\n        'app_error_rate': 1.5,\n        'app_queue_size': 0.8\n      },\n      ...config\n    };\n\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n    this.eventStore = EventStore.getInstance();\n\n    // Initialize default models\n    this.initializeModels();\n  }\n\n  /**\n   * Start real-time anomaly detection\n   */\n  public startDetection(intervalMs: number = 30000): void {\n    if (this.isRunning) {\n      console.log('Anomaly detection already running');\n      return;\n    }\n\n    this.isRunning = true;\n    \n    console.log(`Starting anomaly detection with ${intervalMs}ms interval`);\n    \n    this.detectionInterval = setInterval(async () => {\n      try {\n        await this.performDetection();\n      } catch (error) {\n        console.error('Error during anomaly detection:', error);\n        this.emit('error', error);\n      }\n    }, intervalMs);\n\n    // Start performance monitoring if not already running\n    this.performanceMonitor.startMonitoring(5000);\n\n    this.emit('detection_started');\n  }\n\n  /**\n   * Stop anomaly detection\n   */\n  public stopDetection(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n\n    if (this.detectionInterval) {\n      clearInterval(this.detectionInterval);\n      this.detectionInterval = null;\n    }\n\n    console.log('Anomaly detection stopped');\n    this.emit('detection_stopped');\n  }\n\n  /**\n   * Train autoencoder model for anomaly detection\n   */\n  public async trainAutoencoderModel(\n    metrics: string[],\n    trainingDays: number = 7\n  ): Promise<AnomalyModel> {\n    console.log(`Training autoencoder model for metrics: ${metrics.join(', ')}`);\n\n    // Collect training data\n    const trainingData = await this.collectTrainingData(metrics, trainingDays);\n    \n    if (trainingData.length < this.config.minSamples) {\n      throw new Error(`Insufficient training data: ${trainingData.length} samples`);\n    }\n\n    // Normalize data\n    const { normalizedData, normalizationParams } = this.normalizeData(trainingData);\n\n    // Create autoencoder model\n    const inputDim = metrics.length;\n    const model = this.createAutoencoderModel(inputDim);\n\n    // Prepare training tensors\n    const xTrain = tf.tensor2d(normalizedData);\n    const splitIndex = Math.floor(normalizedData.length * 0.8);\n    const xTrainSplit = xTrain.slice([0, 0], [splitIndex, -1]);\n    const xVal = xTrain.slice([splitIndex, 0], [-1, -1]);\n\n    // Train model\n    const history = await model.fit(xTrainSplit, xTrainSplit, {\n      epochs: 50,\n      batchSize: 32,\n      validationData: [xVal, xVal],\n      shuffle: true,\n      verbose: 0,\n      callbacks: {\n        onEpochEnd: (epoch, logs) => {\n          if (epoch % 10 === 0) {\n            console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}`);\n          }\n        }\n      }\n    });\n\n    // Calculate reconstruction threshold\n    const predictions = model.predict(xVal) as tf.Tensor;\n    const reconstructionErrors = await this.calculateReconstructionErrors(xVal, predictions);\n    const threshold = this.calculateThreshold(reconstructionErrors);\n\n    // Evaluate model\n    const finalLoss = history.history.loss[history.history.loss.length - 1] as number;\n    const accuracy = Math.max(0, 1 - finalLoss);\n\n    // Create model object\n    const anomalyModel: AnomalyModel = {\n      id: `autoencoder_${metrics.join('_')}_${Date.now()}`,\n      name: `Autoencoder Anomaly Detection - ${metrics.join(', ')}`,\n      algorithm: 'autoencoder',\n      model,\n      parameters: {\n        threshold,\n        normalizationParams,\n        reconstructionErrorStats: {\n          mean: reconstructionErrors.reduce((sum, e) => sum + e, 0) / reconstructionErrors.length,\n          std: this.calculateStandardDeviation(reconstructionErrors)\n        }\n      },\n      trainedAt: new Date(),\n      accuracy,\n      features: metrics,\n      isActive: true\n    };\n\n    // Store model\n    this.models.set(anomalyModel.id, anomalyModel);\n\n    // Clean up tensors\n    xTrain.dispose();\n    xTrainSplit.dispose();\n    xVal.dispose();\n    predictions.dispose();\n\n    console.log(`Autoencoder model trained with accuracy: ${accuracy.toFixed(4)}, threshold: ${threshold.toFixed(4)}`);\n    \n    return anomalyModel;\n  }\n\n  /**\n   * Update statistical thresholds for a metric\n   */\n  public async updateStatisticalThresholds(\n    metric: string,\n    windowDays: number = 7\n  ): Promise<StatisticalThresholds> {\n    console.log(`Updating statistical thresholds for ${metric}`);\n\n    // Get historical data\n    const historicalData = await this.getHistoricalData(metric, windowDays);\n    \n    if (historicalData.length < this.config.minSamples) {\n      throw new Error(`Insufficient data for ${metric}: ${historicalData.length} samples`);\n    }\n\n    // Calculate statistics\n    const values = historicalData.map(d => d.value);\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n\n    // Set confidence based on sensitivity\n    const confidenceMap = { low: 2.0, medium: 2.5, high: 3.0 };\n    const confidence = confidenceMap[this.config.sensitivity];\n\n    const thresholds: StatisticalThresholds = {\n      metric,\n      mean,\n      stdDev,\n      upperBound: mean + (confidence * stdDev),\n      lowerBound: mean - (confidence * stdDev),\n      confidence,\n      sampleSize: values.length,\n      lastUpdated: new Date()\n    };\n\n    this.statisticalThresholds.set(metric, thresholds);\n\n    console.log(`Statistical thresholds updated for ${metric}: [${thresholds.lowerBound.toFixed(2)}, ${thresholds.upperBound.toFixed(2)}]`);\n    \n    return thresholds;\n  }\n\n  /**\n   * Detect anomalies in current data\n   */\n  public async detectAnomalies(metrics?: string[]): Promise<AnomalyAlert[]> {\n    const targetMetrics = metrics || Object.keys(this.config.metricWeights);\n    const alerts: AnomalyAlert[] = [];\n\n    // Get current metric values\n    const currentData = await this.getCurrentMetricValues(targetMetrics);\n    \n    if (Object.keys(currentData).length === 0) {\n      return alerts;\n    }\n\n    // Run enabled detection algorithms\n    for (const algorithm of this.config.enabledAlgorithms) {\n      try {\n        const algorithmAlerts = await this.runDetectionAlgorithm(\n          algorithm,\n          currentData,\n          targetMetrics\n        );\n        alerts.push(...algorithmAlerts);\n      } catch (error) {\n        console.error(`Error running ${algorithm} detection:`, error);\n      }\n    }\n\n    // Deduplicate and prioritize alerts\n    const uniqueAlerts = this.deduplicateAlerts(alerts);\n\n    // Store new alerts\n    for (const alert of uniqueAlerts) {\n      this.alerts.set(alert.id, alert);\n      this.alertHistory.push(alert);\n      \n      // Emit alert event\n      this.emit('anomaly_detected', alert);\n      \n      // Auto-acknowledge low severity alerts\n      if (alert.severity === 'low') {\n        setTimeout(() => this.acknowledgeAlert(alert.id), 5 * 60 * 1000); // 5 minutes\n      }\n    }\n\n    return uniqueAlerts;\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  public acknowledgeAlert(alertId: string, userId?: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) {\n      return false;\n    }\n\n    alert.acknowledged = true;\n    this.emit('alert_acknowledged', { alert, userId });\n    \n    return true;\n  }\n\n  /**\n   * Resolve an alert\n   */\n  public resolveAlert(alertId: string, userId?: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) {\n      return false;\n    }\n\n    alert.resolved = true;\n    alert.resolvedAt = new Date();\n    this.emit('alert_resolved', { alert, userId });\n    \n    return true;\n  }\n\n  /**\n   * Get active alerts\n   */\n  public getActiveAlerts(): AnomalyAlert[] {\n    return Array.from(this.alerts.values())\n      .filter(alert => !alert.resolved)\n      .sort((a, b) => {\n        // Sort by severity then timestamp\n        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n        const severityDiff = severityOrder[b.severity] - severityOrder[a.severity];\n        if (severityDiff !== 0) return severityDiff;\n        return b.timestamp.getTime() - a.timestamp.getTime();\n      });\n  }\n\n  /**\n   * Get detection statistics\n   */\n  public getDetectionStats(): {\n    totalAlerts: number;\n    activeAlerts: number;\n    alertsByseverity: Record<string, number>;\n    detectionAccuracy: number;\n    falsePositiveRate: number;\n    modelCount: number;\n    lastDetection: Date | null;\n  } {\n    const alerts = Array.from(this.alerts.values());\n    const activeAlerts = alerts.filter(a => !a.resolved);\n    \n    const alertsByseverity = alerts.reduce((acc, alert) => {\n      acc[alert.severity] = (acc[alert.severity] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    // Calculate accuracy (simplified - would need labeled data for real accuracy)\n    const acknowledgedAlerts = alerts.filter(a => a.acknowledged);\n    const accuracy = alerts.length > 0 ? acknowledgedAlerts.length / alerts.length : 0;\n\n    // Estimate false positive rate\n    const resolvedQuickly = alerts.filter(a => \n      a.resolved && a.resolvedAt && \n      (a.resolvedAt.getTime() - a.timestamp.getTime()) < 300000 // 5 minutes\n    );\n    const falsePositiveRate = alerts.length > 0 ? resolvedQuickly.length / alerts.length : 0;\n\n    const lastDetection = alerts.length > 0 \n      ? new Date(Math.max(...alerts.map(a => a.timestamp.getTime())))\n      : null;\n\n    return {\n      totalAlerts: alerts.length,\n      activeAlerts: activeAlerts.length,\n      alertsByseverity,\n      detectionAccuracy: accuracy,\n      falsePositiveRate,\n      modelCount: this.models.size,\n      lastDetection\n    };\n  }\n\n  /**\n   * Update detection configuration\n   */\n  public updateConfig(newConfig: Partial<DetectionConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('Anomaly detection configuration updated');\n    this.emit('config_updated', this.config);\n  }\n\n  /**\n   * Export detection data\n   */\n  public exportData(): {\n    config: DetectionConfig;\n    models: any[];\n    alerts: AnomalyAlert[];\n    thresholds: StatisticalThresholds[];\n    stats: any;\n  } {\n    return {\n      config: this.config,\n      models: Array.from(this.models.values()).map(m => ({\n        ...m,\n        model: undefined // Don't export TensorFlow models\n      })),\n      alerts: this.alertHistory,\n      thresholds: Array.from(this.statisticalThresholds.values()),\n      stats: this.getDetectionStats()\n    };\n  }\n\n  // Private methods\n\n  private async initializeModels(): Promise<void> {\n    try {\n      // Initialize statistical thresholds for key metrics\n      const keyMetrics = Object.keys(this.config.metricWeights);\n      \n      for (const metric of keyMetrics) {\n        try {\n          await this.updateStatisticalThresholds(metric);\n        } catch (error) {\n          console.warn(`Failed to initialize thresholds for ${metric}:`, error.message);\n        }\n      }\n\n      // Train initial autoencoder model if enabled\n      if (this.config.enabledAlgorithms.includes('autoencoder')) {\n        try {\n          await this.trainAutoencoderModel(keyMetrics);\n        } catch (error) {\n          console.warn('Failed to train initial autoencoder model:', error.message);\n        }\n      }\n\n    } catch (error) {\n      console.error('Error initializing anomaly detection models:', error);\n    }\n  }\n\n  private createAutoencoderModel(inputDim: number): tf.LayersModel {\n    const model = tf.sequential({\n      layers: [\n        // Encoder\n        tf.layers.dense({\n          inputShape: [inputDim],\n          units: Math.max(8, Math.floor(inputDim * 0.8)),\n          activation: 'relu',\n          kernelRegularizer: tf.regularizers.l2({ l2: 0.01 })\n        }),\n        tf.layers.dropout({ rate: 0.1 }),\n        tf.layers.dense({\n          units: Math.max(4, Math.floor(inputDim * 0.5)),\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: Math.max(2, Math.floor(inputDim * 0.3)),\n          activation: 'relu'\n        }),\n        // Decoder\n        tf.layers.dense({\n          units: Math.max(4, Math.floor(inputDim * 0.5)),\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: Math.max(8, Math.floor(inputDim * 0.8)),\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: inputDim,\n          activation: 'linear'\n        })\n      ]\n    });\n\n    model.compile({\n      optimizer: tf.train.adam(0.001),\n      loss: 'meanSquaredError'\n    });\n\n    return model;\n  }\n\n  private async performDetection(): Promise<void> {\n    const alerts = await this.detectAnomalies();\n    \n    // Update cache with detection results\n    this.cache.set('last_detection', {\n      timestamp: new Date(),\n      alertCount: alerts.length,\n      alerts: alerts.map(a => ({ id: a.id, severity: a.severity, metric: a.metric }))\n    });\n\n    // Clean up old alerts (keep only last 1000)\n    if (this.alertHistory.length > 1000) {\n      this.alertHistory = this.alertHistory.slice(-1000);\n    }\n\n    // Clean up resolved alerts from active alerts map\n    for (const [id, alert] of this.alerts.entries()) {\n      if (alert.resolved && \n          (Date.now() - alert.timestamp.getTime()) > 24 * 60 * 60 * 1000) { // 24 hours\n        this.alerts.delete(id);\n      }\n    }\n  }\n\n  private async runDetectionAlgorithm(\n    algorithm: string,\n    currentData: Record<string, number>,\n    metrics: string[]\n  ): Promise<AnomalyAlert[]> {\n    switch (algorithm) {\n      case 'statistical':\n        return this.runStatisticalDetection(currentData, metrics);\n      case 'autoencoder':\n        return this.runAutoencoderDetection(currentData, metrics);\n      case 'ensemble':\n        return this.runEnsembleDetection(currentData, metrics);\n      default:\n        console.warn(`Unknown detection algorithm: ${algorithm}`);\n        return [];\n    }\n  }\n\n  private async runStatisticalDetection(\n    currentData: Record<string, number>,\n    metrics: string[]\n  ): Promise<AnomalyAlert[]> {\n    const alerts: AnomalyAlert[] = [];\n\n    for (const metric of metrics) {\n      const value = currentData[metric];\n      if (value === undefined) continue;\n\n      const thresholds = this.statisticalThresholds.get(metric);\n      if (!thresholds) continue;\n\n      // Check if value is outside thresholds\n      if (value > thresholds.upperBound || value < thresholds.lowerBound) {\n        const deviation = Math.max(\n          Math.abs(value - thresholds.upperBound),\n          Math.abs(value - thresholds.lowerBound)\n        );\n        \n        const severity = this.calculateSeverity(deviation, thresholds.stdDev);\n        const confidence = Math.min(deviation / thresholds.stdDev, 1.0);\n\n        // Check cooldown period\n        if (this.isInCooldown(metric)) continue;\n\n        const alert: AnomalyAlert = {\n          id: `stat_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n          timestamp: new Date(),\n          metric,\n          value,\n          expectedRange: {\n            min: thresholds.lowerBound,\n            max: thresholds.upperBound\n          },\n          severity,\n          confidence,\n          description: `${metric} value ${value.toFixed(2)} is outside expected range [${thresholds.lowerBound.toFixed(2)}, ${thresholds.upperBound.toFixed(2)}]`,\n          context: {\n            relatedMetrics: { ...currentData },\n            historicalComparison: await this.getHistoricalComparison(metric),\n            patterns: ['statistical_outlier']\n          },\n          recommendations: this.generateRecommendations(metric, value, 'statistical'),\n          acknowledged: false,\n          resolved: false\n        };\n\n        alerts.push(alert);\n      }\n    }\n\n    return alerts;\n  }\n\n  private async runAutoencoderDetection(\n    currentData: Record<string, number>,\n    metrics: string[]\n  ): Promise<AnomalyAlert[]> {\n    const alerts: AnomalyAlert[] = [];\n\n    // Find suitable autoencoder model\n    const model = this.findAutoencoderModel(metrics);\n    if (!model || !model.model) return alerts;\n\n    try {\n      // Prepare input data\n      const inputVector = model.features.map(feature => currentData[feature] || 0);\n      const { normalizedVector } = this.normalizeVector(inputVector, model.parameters.normalizationParams);\n\n      // Get reconstruction\n      const inputTensor = tf.tensor2d([normalizedVector]);\n      const reconstruction = model.model.predict(inputTensor) as tf.Tensor;\n      const reconstructedVector = await reconstruction.data();\n\n      // Calculate reconstruction error\n      const reconstructionError = this.calculateReconstructionError(\n        normalizedVector,\n        Array.from(reconstructedVector)\n      );\n\n      // Check against threshold\n      const threshold = model.parameters.threshold;\n      \n      if (reconstructionError > threshold) {\n        // Determine which metrics contributed most to the anomaly\n        const contributingMetrics = this.identifyContributingMetrics(\n          normalizedVector,\n          Array.from(reconstructedVector),\n          model.features\n        );\n\n        for (const { metric, contribution } of contributingMetrics) {\n          if (contribution > 0.3 && !this.isInCooldown(metric)) { // 30% contribution threshold\n            const value = currentData[metric];\n            const severity = this.calculateSeverity(reconstructionError, threshold);\n            const confidence = Math.min(reconstructionError / threshold, 1.0);\n\n            const alert: AnomalyAlert = {\n              id: `ae_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n              timestamp: new Date(),\n              metric,\n              value,\n              expectedRange: { min: 0, max: 0 }, // Autoencoder doesn't provide explicit ranges\n              severity,\n              confidence,\n              description: `Autoencoder detected anomaly in ${metric} (reconstruction error: ${reconstructionError.toFixed(4)})`,\n              context: {\n                relatedMetrics: { ...currentData },\n                historicalComparison: await this.getHistoricalComparison(metric),\n                patterns: ['autoencoder_anomaly', `contribution_${(contribution * 100).toFixed(1)}%`]\n              },\n              recommendations: this.generateRecommendations(metric, value, 'autoencoder'),\n              acknowledged: false,\n              resolved: false\n            };\n\n            alerts.push(alert);\n          }\n        }\n      }\n\n      // Cleanup tensors\n      inputTensor.dispose();\n      reconstruction.dispose();\n\n    } catch (error) {\n      console.error('Error in autoencoder detection:', error);\n    }\n\n    return alerts;\n  }\n\n  private async runEnsembleDetection(\n    currentData: Record<string, number>,\n    metrics: string[]\n  ): Promise<AnomalyAlert[]> {\n    // Run both statistical and autoencoder detection\n    const [statAlerts, aeAlerts] = await Promise.all([\n      this.runStatisticalDetection(currentData, metrics),\n      this.runAutoencoderDetection(currentData, metrics)\n    ]);\n\n    // Combine and weigh results\n    const combinedAlerts: AnomalyAlert[] = [];\n    const metricAlerts = new Map<string, AnomalyAlert[]>();\n\n    // Group alerts by metric\n    [...statAlerts, ...aeAlerts].forEach(alert => {\n      if (!metricAlerts.has(alert.metric)) {\n        metricAlerts.set(alert.metric, []);\n      }\n      metricAlerts.get(alert.metric)!.push(alert);\n    });\n\n    // Create ensemble alerts\n    for (const [metric, alerts] of metricAlerts.entries()) {\n      if (alerts.length > 1) {\n        // Multiple algorithms detected anomaly - high confidence\n        const avgConfidence = alerts.reduce((sum, a) => sum + a.confidence, 0) / alerts.length;\n        const maxSeverity = alerts.reduce((max, a) => {\n          const severityOrder = { low: 1, medium: 2, high: 3, critical: 4 };\n          return severityOrder[a.severity] > severityOrder[max.severity] ? a : max;\n        });\n\n        const ensembleAlert: AnomalyAlert = {\n          ...maxSeverity,\n          id: `ensemble_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n          confidence: Math.min(avgConfidence * 1.2, 1.0), // Boost confidence for ensemble\n          description: `Multiple algorithms detected anomaly in ${metric}`,\n          context: {\n            ...maxSeverity.context,\n            patterns: [...new Set(alerts.flatMap(a => a.context.patterns)), 'ensemble_detection']\n          }\n        };\n\n        combinedAlerts.push(ensembleAlert);\n      } else {\n        // Single algorithm detection\n        combinedAlerts.push(alerts[0]);\n      }\n    }\n\n    return combinedAlerts;\n  }\n\n  // Additional helper methods...\n\n  private async collectTrainingData(metrics: string[], days: number): Promise<number[][]> {\n    // Implementation to collect training data for specified metrics and time period\n    return [];\n  }\n\n  private normalizeData(data: number[][]): { normalizedData: number[][]; normalizationParams: any } {\n    // Implementation for data normalization\n    return { normalizedData: data, normalizationParams: {} };\n  }\n\n  private normalizeVector(vector: number[], params: any): { normalizedVector: number[] } {\n    // Implementation for vector normalization\n    return { normalizedVector: vector };\n  }\n\n  private async calculateReconstructionErrors(original: tf.Tensor, reconstructed: tf.Tensor): Promise<number[]> {\n    // Implementation for calculating reconstruction errors\n    return [];\n  }\n\n  private calculateThreshold(errors: number[]): number {\n    // Use 95th percentile as threshold\n    const sorted = errors.sort((a, b) => a - b);\n    return sorted[Math.floor(sorted.length * 0.95)];\n  }\n\n  private calculateStandardDeviation(values: number[]): number {\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  private async getHistoricalData(metric: string, days: number): Promise<any[]> {\n    // Implementation to get historical data for a metric\n    return [];\n  }\n\n  private async getCurrentMetricValues(metrics: string[]): Promise<Record<string, number>> {\n    // Implementation to get current metric values\n    return {};\n  }\n\n  private calculateSeverity(deviation: number, reference: number): AnomalyAlert['severity'] {\n    const ratio = deviation / reference;\n    if (ratio > 3) return 'critical';\n    if (ratio > 2) return 'high';\n    if (ratio > 1.5) return 'medium';\n    return 'low';\n  }\n\n  private isInCooldown(metric: string): boolean {\n    const recentAlerts = Array.from(this.alerts.values())\n      .filter(alert => \n        alert.metric === metric && \n        !alert.resolved &&\n        (Date.now() - alert.timestamp.getTime()) < (this.config.cooldownPeriod * 60 * 1000)\n      );\n    return recentAlerts.length > 0;\n  }\n\n  private async getHistoricalComparison(metric: string): Promise<{ lastHour: number; lastDay: number; lastWeek: number }> {\n    // Implementation to get historical comparison data\n    return { lastHour: 0, lastDay: 0, lastWeek: 0 };\n  }\n\n  private generateRecommendations(metric: string, value: number, algorithm: string): string[] {\n    const recommendations: string[] = [];\n    \n    recommendations.push(`Investigate ${metric} anomaly detected by ${algorithm}`);\n    recommendations.push('Check system logs for related events');\n    recommendations.push('Monitor related metrics for cascading effects');\n    \n    if (metric.includes('cpu') || metric.includes('memory')) {\n      recommendations.push('Consider scaling resources if pattern persists');\n    }\n    \n    if (metric.includes('response_time')) {\n      recommendations.push('Check for database query performance issues');\n      recommendations.push('Review application bottlenecks');\n    }\n    \n    return recommendations;\n  }\n\n  private deduplicateAlerts(alerts: AnomalyAlert[]): AnomalyAlert[] {\n    // Remove duplicate alerts for the same metric within a short time window\n    const seen = new Set<string>();\n    const unique: AnomalyAlert[] = [];\n    \n    for (const alert of alerts.sort((a, b) => b.confidence - a.confidence)) {\n      const key = `${alert.metric}_${Math.floor(alert.timestamp.getTime() / (5 * 60 * 1000))}`; // 5-minute windows\n      if (!seen.has(key)) {\n        seen.add(key);\n        unique.push(alert);\n      }\n    }\n    \n    return unique;\n  }\n\n  private findAutoencoderModel(metrics: string[]): AnomalyModel | null {\n    const candidates = Array.from(this.models.values())\n      .filter(model => \n        model.algorithm === 'autoencoder' && \n        model.isActive &&\n        metrics.every(m => model.features.includes(m))\n      )\n      .sort((a, b) => b.accuracy - a.accuracy);\n\n    return candidates[0] || null;\n  }\n\n  private calculateReconstructionError(original: number[], reconstructed: number[]): number {\n    let sumSquaredDiff = 0;\n    for (let i = 0; i < original.length; i++) {\n      sumSquaredDiff += Math.pow(original[i] - reconstructed[i], 2);\n    }\n    return Math.sqrt(sumSquaredDiff / original.length);\n  }\n\n  private identifyContributingMetrics(\n    original: number[],\n    reconstructed: number[],\n    features: string[]\n  ): Array<{ metric: string; contribution: number }> {\n    const contributions: Array<{ metric: string; contribution: number }> = [];\n    \n    let totalError = 0;\n    const errors = original.map((val, idx) => {\n      const error = Math.abs(val - reconstructed[idx]);\n      totalError += error;\n      return error;\n    });\n\n    features.forEach((feature, idx) => {\n      const contribution = totalError > 0 ? errors[idx] / totalError : 0;\n      contributions.push({ metric: feature, contribution });\n    });\n\n    return contributions.sort((a, b) => b.contribution - a.contribution);\n  }\n}\n\n// Export singleton instance\nexport const anomalyDetector = new AnomalyDetector();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cbfd8699bf36bf5be72dc89a31bd7923b7cd7bf4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gposnz01p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gposnz01p();
var __createBinding =
/* istanbul ignore next */
(cov_1gposnz01p().s[0]++,
/* istanbul ignore next */
(cov_1gposnz01p().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1gposnz01p().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1gposnz01p().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1gposnz01p().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1gposnz01p().f[0]++;
  cov_1gposnz01p().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1gposnz01p().b[2][0]++;
    cov_1gposnz01p().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1gposnz01p().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1gposnz01p().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1gposnz01p().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1gposnz01p().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1gposnz01p().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1gposnz01p().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1gposnz01p().b[5][1]++,
  /* istanbul ignore next */
  (cov_1gposnz01p().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1gposnz01p().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1gposnz01p().b[3][0]++;
    cov_1gposnz01p().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1gposnz01p().f[1]++;
        cov_1gposnz01p().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1gposnz01p().b[3][1]++;
  }
  cov_1gposnz01p().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1gposnz01p().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1gposnz01p().f[2]++;
  cov_1gposnz01p().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1gposnz01p().b[7][0]++;
    cov_1gposnz01p().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1gposnz01p().b[7][1]++;
  }
  cov_1gposnz01p().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1gposnz01p().s[11]++,
/* istanbul ignore next */
(cov_1gposnz01p().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1gposnz01p().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1gposnz01p().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1gposnz01p().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1gposnz01p().f[3]++;
  cov_1gposnz01p().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1gposnz01p().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1gposnz01p().f[4]++;
  cov_1gposnz01p().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1gposnz01p().s[14]++,
/* istanbul ignore next */
(cov_1gposnz01p().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1gposnz01p().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1gposnz01p().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1gposnz01p().f[5]++;
  cov_1gposnz01p().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[6]++;
    cov_1gposnz01p().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1gposnz01p().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1gposnz01p().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1gposnz01p().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[17]++, []);
      /* istanbul ignore next */
      cov_1gposnz01p().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1gposnz01p().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1gposnz01p().b[12][0]++;
          cov_1gposnz01p().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1gposnz01p().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1gposnz01p().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1gposnz01p().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[8]++;
    cov_1gposnz01p().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1gposnz01p().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1gposnz01p().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[13][0]++;
      cov_1gposnz01p().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[26]++, {});
    /* istanbul ignore next */
    cov_1gposnz01p().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[15][0]++;
      cov_1gposnz01p().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1gposnz01p().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1gposnz01p().b[16][0]++;
          cov_1gposnz01p().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1gposnz01p().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[15][1]++;
    }
    cov_1gposnz01p().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1gposnz01p().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1gposnz01p().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1gposnz01p().s[36]++;
exports.anomalyDetector = exports.AnomalyDetector = void 0;
const tf =
/* istanbul ignore next */
(cov_1gposnz01p().s[37]++, __importStar(require("@tensorflow/tfjs-node")));
const events_1 =
/* istanbul ignore next */
(cov_1gposnz01p().s[38]++, require("events"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_1gposnz01p().s[39]++, require("lru-cache"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1gposnz01p().s[40]++, require("./AnalyticsEngine"));
const PerformanceMonitor_1 =
/* istanbul ignore next */
(cov_1gposnz01p().s[41]++, require("../performance/PerformanceMonitor"));
const EventStore_1 =
/* istanbul ignore next */
(cov_1gposnz01p().s[42]++, require("./EventStore"));
class AnomalyDetector extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[9]++;
    cov_1gposnz01p().s[43]++;
    super();
    /* istanbul ignore next */
    cov_1gposnz01p().s[44]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1gposnz01p().s[45]++;
    this.detectionInterval = null;
    /* istanbul ignore next */
    cov_1gposnz01p().s[46]++;
    this.alertHistory = [];
    /* istanbul ignore next */
    cov_1gposnz01p().s[47]++;
    this.models = new Map();
    /* istanbul ignore next */
    cov_1gposnz01p().s[48]++;
    this.alerts = new Map();
    /* istanbul ignore next */
    cov_1gposnz01p().s[49]++;
    this.statisticalThresholds = new Map();
    /* istanbul ignore next */
    cov_1gposnz01p().s[50]++;
    this.alertHistory = [];
    /* istanbul ignore next */
    cov_1gposnz01p().s[51]++;
    this.cache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 5 // 5 minutes
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[52]++;
    this.config = {
      sensitivity: 'medium',
      windowSize: 10,
      minSamples: 30,
      alertThreshold: 0.7,
      cooldownPeriod: 15,
      enabledAlgorithms: ['autoencoder', 'statistical'],
      metricWeights: {
        'cpu_usage': 1.0,
        'memory_usage': 1.0,
        'app_response_time': 1.2,
        'app_error_rate': 1.5,
        'app_queue_size': 0.8
      },
      ...config
    };
    /* istanbul ignore next */
    cov_1gposnz01p().s[53]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_1gposnz01p().s[54]++;
    this.performanceMonitor = new PerformanceMonitor_1.PerformanceMonitor();
    /* istanbul ignore next */
    cov_1gposnz01p().s[55]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    // Initialize default models
    /* istanbul ignore next */
    cov_1gposnz01p().s[56]++;
    this.initializeModels();
  }
  /**
   * Start real-time anomaly detection
   */
  startDetection(intervalMs =
  /* istanbul ignore next */
  (cov_1gposnz01p().b[17][0]++, 30000)) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[10]++;
    cov_1gposnz01p().s[57]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[18][0]++;
      cov_1gposnz01p().s[58]++;
      console.log('Anomaly detection already running');
      /* istanbul ignore next */
      cov_1gposnz01p().s[59]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[18][1]++;
    }
    cov_1gposnz01p().s[60]++;
    this.isRunning = true;
    /* istanbul ignore next */
    cov_1gposnz01p().s[61]++;
    console.log(`Starting anomaly detection with ${intervalMs}ms interval`);
    /* istanbul ignore next */
    cov_1gposnz01p().s[62]++;
    this.detectionInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[11]++;
      cov_1gposnz01p().s[63]++;
      try {
        /* istanbul ignore next */
        cov_1gposnz01p().s[64]++;
        await this.performDetection();
      } catch (error) {
        /* istanbul ignore next */
        cov_1gposnz01p().s[65]++;
        console.error('Error during anomaly detection:', error);
        /* istanbul ignore next */
        cov_1gposnz01p().s[66]++;
        this.emit('error', error);
      }
    }, intervalMs);
    // Start performance monitoring if not already running
    /* istanbul ignore next */
    cov_1gposnz01p().s[67]++;
    this.performanceMonitor.startMonitoring(5000);
    /* istanbul ignore next */
    cov_1gposnz01p().s[68]++;
    this.emit('detection_started');
  }
  /**
   * Stop anomaly detection
   */
  stopDetection() {
    /* istanbul ignore next */
    cov_1gposnz01p().f[12]++;
    cov_1gposnz01p().s[69]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[19][0]++;
      cov_1gposnz01p().s[70]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[19][1]++;
    }
    cov_1gposnz01p().s[71]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1gposnz01p().s[72]++;
    if (this.detectionInterval) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[20][0]++;
      cov_1gposnz01p().s[73]++;
      clearInterval(this.detectionInterval);
      /* istanbul ignore next */
      cov_1gposnz01p().s[74]++;
      this.detectionInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[20][1]++;
    }
    cov_1gposnz01p().s[75]++;
    console.log('Anomaly detection stopped');
    /* istanbul ignore next */
    cov_1gposnz01p().s[76]++;
    this.emit('detection_stopped');
  }
  /**
   * Train autoencoder model for anomaly detection
   */
  async trainAutoencoderModel(metrics, trainingDays =
  /* istanbul ignore next */
  (cov_1gposnz01p().b[21][0]++, 7)) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[13]++;
    cov_1gposnz01p().s[77]++;
    console.log(`Training autoencoder model for metrics: ${metrics.join(', ')}`);
    // Collect training data
    const trainingData =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[78]++, await this.collectTrainingData(metrics, trainingDays));
    /* istanbul ignore next */
    cov_1gposnz01p().s[79]++;
    if (trainingData.length < this.config.minSamples) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[22][0]++;
      cov_1gposnz01p().s[80]++;
      throw new Error(`Insufficient training data: ${trainingData.length} samples`);
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[22][1]++;
    }
    // Normalize data
    const {
      normalizedData,
      normalizationParams
    } =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[81]++, this.normalizeData(trainingData));
    // Create autoencoder model
    const inputDim =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[82]++, metrics.length);
    const model =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[83]++, this.createAutoencoderModel(inputDim));
    // Prepare training tensors
    const xTrain =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[84]++, tf.tensor2d(normalizedData));
    const splitIndex =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[85]++, Math.floor(normalizedData.length * 0.8));
    const xTrainSplit =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[86]++, xTrain.slice([0, 0], [splitIndex, -1]));
    const xVal =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[87]++, xTrain.slice([splitIndex, 0], [-1, -1]));
    // Train model
    const history =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[88]++, await model.fit(xTrainSplit, xTrainSplit, {
      epochs: 50,
      batchSize: 32,
      validationData: [xVal, xVal],
      shuffle: true,
      verbose: 0,
      callbacks: {
        onEpochEnd: (epoch, logs) => {
          /* istanbul ignore next */
          cov_1gposnz01p().f[14]++;
          cov_1gposnz01p().s[89]++;
          if (epoch % 10 === 0) {
            /* istanbul ignore next */
            cov_1gposnz01p().b[23][0]++;
            cov_1gposnz01p().s[90]++;
            console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}`);
          } else
          /* istanbul ignore next */
          {
            cov_1gposnz01p().b[23][1]++;
          }
        }
      }
    }));
    // Calculate reconstruction threshold
    const predictions =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[91]++, model.predict(xVal));
    const reconstructionErrors =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[92]++, await this.calculateReconstructionErrors(xVal, predictions));
    const threshold =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[93]++, this.calculateThreshold(reconstructionErrors));
    // Evaluate model
    const finalLoss =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[94]++, history.history.loss[history.history.loss.length - 1]);
    const accuracy =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[95]++, Math.max(0, 1 - finalLoss));
    // Create model object
    const anomalyModel =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[96]++, {
      id: `autoencoder_${metrics.join('_')}_${Date.now()}`,
      name: `Autoencoder Anomaly Detection - ${metrics.join(', ')}`,
      algorithm: 'autoencoder',
      model,
      parameters: {
        threshold,
        normalizationParams,
        reconstructionErrorStats: {
          mean: reconstructionErrors.reduce((sum, e) => {
            /* istanbul ignore next */
            cov_1gposnz01p().f[15]++;
            cov_1gposnz01p().s[97]++;
            return sum + e;
          }, 0) / reconstructionErrors.length,
          std: this.calculateStandardDeviation(reconstructionErrors)
        }
      },
      trainedAt: new Date(),
      accuracy,
      features: metrics,
      isActive: true
    });
    // Store model
    /* istanbul ignore next */
    cov_1gposnz01p().s[98]++;
    this.models.set(anomalyModel.id, anomalyModel);
    // Clean up tensors
    /* istanbul ignore next */
    cov_1gposnz01p().s[99]++;
    xTrain.dispose();
    /* istanbul ignore next */
    cov_1gposnz01p().s[100]++;
    xTrainSplit.dispose();
    /* istanbul ignore next */
    cov_1gposnz01p().s[101]++;
    xVal.dispose();
    /* istanbul ignore next */
    cov_1gposnz01p().s[102]++;
    predictions.dispose();
    /* istanbul ignore next */
    cov_1gposnz01p().s[103]++;
    console.log(`Autoencoder model trained with accuracy: ${accuracy.toFixed(4)}, threshold: ${threshold.toFixed(4)}`);
    /* istanbul ignore next */
    cov_1gposnz01p().s[104]++;
    return anomalyModel;
  }
  /**
   * Update statistical thresholds for a metric
   */
  async updateStatisticalThresholds(metric, windowDays =
  /* istanbul ignore next */
  (cov_1gposnz01p().b[24][0]++, 7)) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[16]++;
    cov_1gposnz01p().s[105]++;
    console.log(`Updating statistical thresholds for ${metric}`);
    // Get historical data
    const historicalData =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[106]++, await this.getHistoricalData(metric, windowDays));
    /* istanbul ignore next */
    cov_1gposnz01p().s[107]++;
    if (historicalData.length < this.config.minSamples) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[25][0]++;
      cov_1gposnz01p().s[108]++;
      throw new Error(`Insufficient data for ${metric}: ${historicalData.length} samples`);
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[25][1]++;
    }
    // Calculate statistics
    const values =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[109]++, historicalData.map(d => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[17]++;
      cov_1gposnz01p().s[110]++;
      return d.value;
    }));
    const mean =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[111]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[18]++;
      cov_1gposnz01p().s[112]++;
      return sum + v;
    }, 0) / values.length);
    const variance =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[113]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[19]++;
      cov_1gposnz01p().s[114]++;
      return sum + Math.pow(v - mean, 2);
    }, 0) / values.length);
    const stdDev =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[115]++, Math.sqrt(variance));
    // Set confidence based on sensitivity
    const confidenceMap =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[116]++, {
      low: 2.0,
      medium: 2.5,
      high: 3.0
    });
    const confidence =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[117]++, confidenceMap[this.config.sensitivity]);
    const thresholds =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[118]++, {
      metric,
      mean,
      stdDev,
      upperBound: mean + confidence * stdDev,
      lowerBound: mean - confidence * stdDev,
      confidence,
      sampleSize: values.length,
      lastUpdated: new Date()
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[119]++;
    this.statisticalThresholds.set(metric, thresholds);
    /* istanbul ignore next */
    cov_1gposnz01p().s[120]++;
    console.log(`Statistical thresholds updated for ${metric}: [${thresholds.lowerBound.toFixed(2)}, ${thresholds.upperBound.toFixed(2)}]`);
    /* istanbul ignore next */
    cov_1gposnz01p().s[121]++;
    return thresholds;
  }
  /**
   * Detect anomalies in current data
   */
  async detectAnomalies(metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[20]++;
    const targetMetrics =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[122]++,
    /* istanbul ignore next */
    (cov_1gposnz01p().b[26][0]++, metrics) ||
    /* istanbul ignore next */
    (cov_1gposnz01p().b[26][1]++, Object.keys(this.config.metricWeights)));
    const alerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[123]++, []);
    // Get current metric values
    const currentData =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[124]++, await this.getCurrentMetricValues(targetMetrics));
    /* istanbul ignore next */
    cov_1gposnz01p().s[125]++;
    if (Object.keys(currentData).length === 0) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[27][0]++;
      cov_1gposnz01p().s[126]++;
      return alerts;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[27][1]++;
    }
    // Run enabled detection algorithms
    cov_1gposnz01p().s[127]++;
    for (const algorithm of this.config.enabledAlgorithms) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[128]++;
      try {
        const algorithmAlerts =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[129]++, await this.runDetectionAlgorithm(algorithm, currentData, targetMetrics));
        /* istanbul ignore next */
        cov_1gposnz01p().s[130]++;
        alerts.push(...algorithmAlerts);
      } catch (error) {
        /* istanbul ignore next */
        cov_1gposnz01p().s[131]++;
        console.error(`Error running ${algorithm} detection:`, error);
      }
    }
    // Deduplicate and prioritize alerts
    const uniqueAlerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[132]++, this.deduplicateAlerts(alerts));
    // Store new alerts
    /* istanbul ignore next */
    cov_1gposnz01p().s[133]++;
    for (const alert of uniqueAlerts) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[134]++;
      this.alerts.set(alert.id, alert);
      /* istanbul ignore next */
      cov_1gposnz01p().s[135]++;
      this.alertHistory.push(alert);
      // Emit alert event
      /* istanbul ignore next */
      cov_1gposnz01p().s[136]++;
      this.emit('anomaly_detected', alert);
      // Auto-acknowledge low severity alerts
      /* istanbul ignore next */
      cov_1gposnz01p().s[137]++;
      if (alert.severity === 'low') {
        /* istanbul ignore next */
        cov_1gposnz01p().b[28][0]++;
        cov_1gposnz01p().s[138]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_1gposnz01p().f[21]++;
          cov_1gposnz01p().s[139]++;
          return this.acknowledgeAlert(alert.id);
        }, 5 * 60 * 1000); // 5 minutes
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1gposnz01p().s[140]++;
    return uniqueAlerts;
  }
  /**
   * Acknowledge an alert
   */
  acknowledgeAlert(alertId, userId) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[22]++;
    const alert =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[141]++, this.alerts.get(alertId));
    /* istanbul ignore next */
    cov_1gposnz01p().s[142]++;
    if (!alert) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[29][0]++;
      cov_1gposnz01p().s[143]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[29][1]++;
    }
    cov_1gposnz01p().s[144]++;
    alert.acknowledged = true;
    /* istanbul ignore next */
    cov_1gposnz01p().s[145]++;
    this.emit('alert_acknowledged', {
      alert,
      userId
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[146]++;
    return true;
  }
  /**
   * Resolve an alert
   */
  resolveAlert(alertId, userId) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[23]++;
    const alert =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[147]++, this.alerts.get(alertId));
    /* istanbul ignore next */
    cov_1gposnz01p().s[148]++;
    if (!alert) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[30][0]++;
      cov_1gposnz01p().s[149]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[30][1]++;
    }
    cov_1gposnz01p().s[150]++;
    alert.resolved = true;
    /* istanbul ignore next */
    cov_1gposnz01p().s[151]++;
    alert.resolvedAt = new Date();
    /* istanbul ignore next */
    cov_1gposnz01p().s[152]++;
    this.emit('alert_resolved', {
      alert,
      userId
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[153]++;
    return true;
  }
  /**
   * Get active alerts
   */
  getActiveAlerts() {
    /* istanbul ignore next */
    cov_1gposnz01p().f[24]++;
    cov_1gposnz01p().s[154]++;
    return Array.from(this.alerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[25]++;
      cov_1gposnz01p().s[155]++;
      return !alert.resolved;
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[26]++;
      // Sort by severity then timestamp
      const severityOrder =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[156]++, {
        critical: 4,
        high: 3,
        medium: 2,
        low: 1
      });
      const severityDiff =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[157]++, severityOrder[b.severity] - severityOrder[a.severity]);
      /* istanbul ignore next */
      cov_1gposnz01p().s[158]++;
      if (severityDiff !== 0) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[31][0]++;
        cov_1gposnz01p().s[159]++;
        return severityDiff;
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[31][1]++;
      }
      cov_1gposnz01p().s[160]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
  }
  /**
   * Get detection statistics
   */
  getDetectionStats() {
    /* istanbul ignore next */
    cov_1gposnz01p().f[27]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[161]++, Array.from(this.alerts.values()));
    const activeAlerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[162]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[28]++;
      cov_1gposnz01p().s[163]++;
      return !a.resolved;
    }));
    const alertsByseverity =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[164]++, alerts.reduce((acc, alert) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[29]++;
      cov_1gposnz01p().s[165]++;
      acc[alert.severity] = (
      /* istanbul ignore next */
      (cov_1gposnz01p().b[32][0]++, acc[alert.severity]) ||
      /* istanbul ignore next */
      (cov_1gposnz01p().b[32][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1gposnz01p().s[166]++;
      return acc;
    }, {}));
    // Calculate accuracy (simplified - would need labeled data for real accuracy)
    const acknowledgedAlerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[167]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[30]++;
      cov_1gposnz01p().s[168]++;
      return a.acknowledged;
    }));
    const accuracy =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[169]++, alerts.length > 0 ?
    /* istanbul ignore next */
    (cov_1gposnz01p().b[33][0]++, acknowledgedAlerts.length / alerts.length) :
    /* istanbul ignore next */
    (cov_1gposnz01p().b[33][1]++, 0));
    // Estimate false positive rate
    const resolvedQuickly =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[170]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[31]++;
      cov_1gposnz01p().s[171]++;
      return /* istanbul ignore next */(cov_1gposnz01p().b[34][0]++, a.resolved) &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[34][1]++, a.resolvedAt) &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[34][2]++, a.resolvedAt.getTime() - a.timestamp.getTime() < 300000);
    } // 5 minutes
    ));
    const falsePositiveRate =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[172]++, alerts.length > 0 ?
    /* istanbul ignore next */
    (cov_1gposnz01p().b[35][0]++, resolvedQuickly.length / alerts.length) :
    /* istanbul ignore next */
    (cov_1gposnz01p().b[35][1]++, 0));
    const lastDetection =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[173]++, alerts.length > 0 ?
    /* istanbul ignore next */
    (cov_1gposnz01p().b[36][0]++, new Date(Math.max(...alerts.map(a => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[32]++;
      cov_1gposnz01p().s[174]++;
      return a.timestamp.getTime();
    })))) :
    /* istanbul ignore next */
    (cov_1gposnz01p().b[36][1]++, null));
    /* istanbul ignore next */
    cov_1gposnz01p().s[175]++;
    return {
      totalAlerts: alerts.length,
      activeAlerts: activeAlerts.length,
      alertsByseverity,
      detectionAccuracy: accuracy,
      falsePositiveRate,
      modelCount: this.models.size,
      lastDetection
    };
  }
  /**
   * Update detection configuration
   */
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[33]++;
    cov_1gposnz01p().s[176]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_1gposnz01p().s[177]++;
    console.log('Anomaly detection configuration updated');
    /* istanbul ignore next */
    cov_1gposnz01p().s[178]++;
    this.emit('config_updated', this.config);
  }
  /**
   * Export detection data
   */
  exportData() {
    /* istanbul ignore next */
    cov_1gposnz01p().f[34]++;
    cov_1gposnz01p().s[179]++;
    return {
      config: this.config,
      models: Array.from(this.models.values()).map(m => {
        /* istanbul ignore next */
        cov_1gposnz01p().f[35]++;
        cov_1gposnz01p().s[180]++;
        return {
          ...m,
          model: undefined // Don't export TensorFlow models
        };
      }),
      alerts: this.alertHistory,
      thresholds: Array.from(this.statisticalThresholds.values()),
      stats: this.getDetectionStats()
    };
  }
  // Private methods
  async initializeModels() {
    /* istanbul ignore next */
    cov_1gposnz01p().f[36]++;
    cov_1gposnz01p().s[181]++;
    try {
      // Initialize statistical thresholds for key metrics
      const keyMetrics =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[182]++, Object.keys(this.config.metricWeights));
      /* istanbul ignore next */
      cov_1gposnz01p().s[183]++;
      for (const metric of keyMetrics) {
        /* istanbul ignore next */
        cov_1gposnz01p().s[184]++;
        try {
          /* istanbul ignore next */
          cov_1gposnz01p().s[185]++;
          await this.updateStatisticalThresholds(metric);
        } catch (error) {
          /* istanbul ignore next */
          cov_1gposnz01p().s[186]++;
          console.warn(`Failed to initialize thresholds for ${metric}:`, error.message);
        }
      }
      // Train initial autoencoder model if enabled
      /* istanbul ignore next */
      cov_1gposnz01p().s[187]++;
      if (this.config.enabledAlgorithms.includes('autoencoder')) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[37][0]++;
        cov_1gposnz01p().s[188]++;
        try {
          /* istanbul ignore next */
          cov_1gposnz01p().s[189]++;
          await this.trainAutoencoderModel(keyMetrics);
        } catch (error) {
          /* istanbul ignore next */
          cov_1gposnz01p().s[190]++;
          console.warn('Failed to train initial autoencoder model:', error.message);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[37][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[191]++;
      console.error('Error initializing anomaly detection models:', error);
    }
  }
  createAutoencoderModel(inputDim) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[37]++;
    const model =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[192]++, tf.sequential({
      layers: [
      // Encoder
      tf.layers.dense({
        inputShape: [inputDim],
        units: Math.max(8, Math.floor(inputDim * 0.8)),
        activation: 'relu',
        kernelRegularizer: tf.regularizers.l2({
          l2: 0.01
        })
      }), tf.layers.dropout({
        rate: 0.1
      }), tf.layers.dense({
        units: Math.max(4, Math.floor(inputDim * 0.5)),
        activation: 'relu'
      }), tf.layers.dense({
        units: Math.max(2, Math.floor(inputDim * 0.3)),
        activation: 'relu'
      }),
      // Decoder
      tf.layers.dense({
        units: Math.max(4, Math.floor(inputDim * 0.5)),
        activation: 'relu'
      }), tf.layers.dense({
        units: Math.max(8, Math.floor(inputDim * 0.8)),
        activation: 'relu'
      }), tf.layers.dense({
        units: inputDim,
        activation: 'linear'
      })]
    }));
    /* istanbul ignore next */
    cov_1gposnz01p().s[193]++;
    model.compile({
      optimizer: tf.train.adam(0.001),
      loss: 'meanSquaredError'
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[194]++;
    return model;
  }
  async performDetection() {
    /* istanbul ignore next */
    cov_1gposnz01p().f[38]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[195]++, await this.detectAnomalies());
    // Update cache with detection results
    /* istanbul ignore next */
    cov_1gposnz01p().s[196]++;
    this.cache.set('last_detection', {
      timestamp: new Date(),
      alertCount: alerts.length,
      alerts: alerts.map(a => {
        /* istanbul ignore next */
        cov_1gposnz01p().f[39]++;
        cov_1gposnz01p().s[197]++;
        return {
          id: a.id,
          severity: a.severity,
          metric: a.metric
        };
      })
    });
    // Clean up old alerts (keep only last 1000)
    /* istanbul ignore next */
    cov_1gposnz01p().s[198]++;
    if (this.alertHistory.length > 1000) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[38][0]++;
      cov_1gposnz01p().s[199]++;
      this.alertHistory = this.alertHistory.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[38][1]++;
    }
    // Clean up resolved alerts from active alerts map
    cov_1gposnz01p().s[200]++;
    for (const [id, alert] of this.alerts.entries()) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[201]++;
      if (
      /* istanbul ignore next */
      (cov_1gposnz01p().b[40][0]++, alert.resolved) &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[40][1]++, Date.now() - alert.timestamp.getTime() > 24 * 60 * 60 * 1000)) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[39][0]++;
        cov_1gposnz01p().s[202]++;
        // 24 hours
        this.alerts.delete(id);
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[39][1]++;
      }
    }
  }
  async runDetectionAlgorithm(algorithm, currentData, metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[40]++;
    cov_1gposnz01p().s[203]++;
    switch (algorithm) {
      case 'statistical':
        /* istanbul ignore next */
        cov_1gposnz01p().b[41][0]++;
        cov_1gposnz01p().s[204]++;
        return this.runStatisticalDetection(currentData, metrics);
      case 'autoencoder':
        /* istanbul ignore next */
        cov_1gposnz01p().b[41][1]++;
        cov_1gposnz01p().s[205]++;
        return this.runAutoencoderDetection(currentData, metrics);
      case 'ensemble':
        /* istanbul ignore next */
        cov_1gposnz01p().b[41][2]++;
        cov_1gposnz01p().s[206]++;
        return this.runEnsembleDetection(currentData, metrics);
      default:
        /* istanbul ignore next */
        cov_1gposnz01p().b[41][3]++;
        cov_1gposnz01p().s[207]++;
        console.warn(`Unknown detection algorithm: ${algorithm}`);
        /* istanbul ignore next */
        cov_1gposnz01p().s[208]++;
        return [];
    }
  }
  async runStatisticalDetection(currentData, metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[41]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[209]++, []);
    /* istanbul ignore next */
    cov_1gposnz01p().s[210]++;
    for (const metric of metrics) {
      const value =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[211]++, currentData[metric]);
      /* istanbul ignore next */
      cov_1gposnz01p().s[212]++;
      if (value === undefined) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[42][0]++;
        cov_1gposnz01p().s[213]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[42][1]++;
      }
      const thresholds =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[214]++, this.statisticalThresholds.get(metric));
      /* istanbul ignore next */
      cov_1gposnz01p().s[215]++;
      if (!thresholds) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[43][0]++;
        cov_1gposnz01p().s[216]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[43][1]++;
      }
      // Check if value is outside thresholds
      cov_1gposnz01p().s[217]++;
      if (
      /* istanbul ignore next */
      (cov_1gposnz01p().b[45][0]++, value > thresholds.upperBound) ||
      /* istanbul ignore next */
      (cov_1gposnz01p().b[45][1]++, value < thresholds.lowerBound)) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[44][0]++;
        const deviation =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[218]++, Math.max(Math.abs(value - thresholds.upperBound), Math.abs(value - thresholds.lowerBound)));
        const severity =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[219]++, this.calculateSeverity(deviation, thresholds.stdDev));
        const confidence =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[220]++, Math.min(deviation / thresholds.stdDev, 1.0));
        // Check cooldown period
        /* istanbul ignore next */
        cov_1gposnz01p().s[221]++;
        if (this.isInCooldown(metric)) {
          /* istanbul ignore next */
          cov_1gposnz01p().b[46][0]++;
          cov_1gposnz01p().s[222]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1gposnz01p().b[46][1]++;
        }
        const alert =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[223]++, {
          id: `stat_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
          timestamp: new Date(),
          metric,
          value,
          expectedRange: {
            min: thresholds.lowerBound,
            max: thresholds.upperBound
          },
          severity,
          confidence,
          description: `${metric} value ${value.toFixed(2)} is outside expected range [${thresholds.lowerBound.toFixed(2)}, ${thresholds.upperBound.toFixed(2)}]`,
          context: {
            relatedMetrics: {
              ...currentData
            },
            historicalComparison: await this.getHistoricalComparison(metric),
            patterns: ['statistical_outlier']
          },
          recommendations: this.generateRecommendations(metric, value, 'statistical'),
          acknowledged: false,
          resolved: false
        });
        /* istanbul ignore next */
        cov_1gposnz01p().s[224]++;
        alerts.push(alert);
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[44][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1gposnz01p().s[225]++;
    return alerts;
  }
  async runAutoencoderDetection(currentData, metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[42]++;
    const alerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[226]++, []);
    // Find suitable autoencoder model
    const model =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[227]++, this.findAutoencoderModel(metrics));
    /* istanbul ignore next */
    cov_1gposnz01p().s[228]++;
    if (
    /* istanbul ignore next */
    (cov_1gposnz01p().b[48][0]++, !model) ||
    /* istanbul ignore next */
    (cov_1gposnz01p().b[48][1]++, !model.model)) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[47][0]++;
      cov_1gposnz01p().s[229]++;
      return alerts;
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[47][1]++;
    }
    cov_1gposnz01p().s[230]++;
    try {
      // Prepare input data
      const inputVector =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[231]++, model.features.map(feature => {
        /* istanbul ignore next */
        cov_1gposnz01p().f[43]++;
        cov_1gposnz01p().s[232]++;
        return /* istanbul ignore next */(cov_1gposnz01p().b[49][0]++, currentData[feature]) ||
        /* istanbul ignore next */
        (cov_1gposnz01p().b[49][1]++, 0);
      }));
      const {
        normalizedVector
      } =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[233]++, this.normalizeVector(inputVector, model.parameters.normalizationParams));
      // Get reconstruction
      const inputTensor =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[234]++, tf.tensor2d([normalizedVector]));
      const reconstruction =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[235]++, model.model.predict(inputTensor));
      const reconstructedVector =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[236]++, await reconstruction.data());
      // Calculate reconstruction error
      const reconstructionError =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[237]++, this.calculateReconstructionError(normalizedVector, Array.from(reconstructedVector)));
      // Check against threshold
      const threshold =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[238]++, model.parameters.threshold);
      /* istanbul ignore next */
      cov_1gposnz01p().s[239]++;
      if (reconstructionError > threshold) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[50][0]++;
        // Determine which metrics contributed most to the anomaly
        const contributingMetrics =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[240]++, this.identifyContributingMetrics(normalizedVector, Array.from(reconstructedVector), model.features));
        /* istanbul ignore next */
        cov_1gposnz01p().s[241]++;
        for (const {
          metric,
          contribution
        } of contributingMetrics) {
          /* istanbul ignore next */
          cov_1gposnz01p().s[242]++;
          if (
          /* istanbul ignore next */
          (cov_1gposnz01p().b[52][0]++, contribution > 0.3) &&
          /* istanbul ignore next */
          (cov_1gposnz01p().b[52][1]++, !this.isInCooldown(metric))) {
            /* istanbul ignore next */
            cov_1gposnz01p().b[51][0]++;
            // 30% contribution threshold
            const value =
            /* istanbul ignore next */
            (cov_1gposnz01p().s[243]++, currentData[metric]);
            const severity =
            /* istanbul ignore next */
            (cov_1gposnz01p().s[244]++, this.calculateSeverity(reconstructionError, threshold));
            const confidence =
            /* istanbul ignore next */
            (cov_1gposnz01p().s[245]++, Math.min(reconstructionError / threshold, 1.0));
            const alert =
            /* istanbul ignore next */
            (cov_1gposnz01p().s[246]++, {
              id: `ae_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
              timestamp: new Date(),
              metric,
              value,
              expectedRange: {
                min: 0,
                max: 0
              },
              // Autoencoder doesn't provide explicit ranges
              severity,
              confidence,
              description: `Autoencoder detected anomaly in ${metric} (reconstruction error: ${reconstructionError.toFixed(4)})`,
              context: {
                relatedMetrics: {
                  ...currentData
                },
                historicalComparison: await this.getHistoricalComparison(metric),
                patterns: ['autoencoder_anomaly', `contribution_${(contribution * 100).toFixed(1)}%`]
              },
              recommendations: this.generateRecommendations(metric, value, 'autoencoder'),
              acknowledged: false,
              resolved: false
            });
            /* istanbul ignore next */
            cov_1gposnz01p().s[247]++;
            alerts.push(alert);
          } else
          /* istanbul ignore next */
          {
            cov_1gposnz01p().b[51][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[50][1]++;
      }
      // Cleanup tensors
      cov_1gposnz01p().s[248]++;
      inputTensor.dispose();
      /* istanbul ignore next */
      cov_1gposnz01p().s[249]++;
      reconstruction.dispose();
    } catch (error) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[250]++;
      console.error('Error in autoencoder detection:', error);
    }
    /* istanbul ignore next */
    cov_1gposnz01p().s[251]++;
    return alerts;
  }
  async runEnsembleDetection(currentData, metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[44]++;
    // Run both statistical and autoencoder detection
    const [statAlerts, aeAlerts] =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[252]++, await Promise.all([this.runStatisticalDetection(currentData, metrics), this.runAutoencoderDetection(currentData, metrics)]));
    // Combine and weigh results
    const combinedAlerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[253]++, []);
    const metricAlerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[254]++, new Map());
    // Group alerts by metric
    /* istanbul ignore next */
    cov_1gposnz01p().s[255]++;
    [...statAlerts, ...aeAlerts].forEach(alert => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[45]++;
      cov_1gposnz01p().s[256]++;
      if (!metricAlerts.has(alert.metric)) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[53][0]++;
        cov_1gposnz01p().s[257]++;
        metricAlerts.set(alert.metric, []);
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[53][1]++;
      }
      cov_1gposnz01p().s[258]++;
      metricAlerts.get(alert.metric).push(alert);
    });
    // Create ensemble alerts
    /* istanbul ignore next */
    cov_1gposnz01p().s[259]++;
    for (const [metric, alerts] of metricAlerts.entries()) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[260]++;
      if (alerts.length > 1) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[54][0]++;
        // Multiple algorithms detected anomaly - high confidence
        const avgConfidence =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[261]++, alerts.reduce((sum, a) => {
          /* istanbul ignore next */
          cov_1gposnz01p().f[46]++;
          cov_1gposnz01p().s[262]++;
          return sum + a.confidence;
        }, 0) / alerts.length);
        const maxSeverity =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[263]++, alerts.reduce((max, a) => {
          /* istanbul ignore next */
          cov_1gposnz01p().f[47]++;
          const severityOrder =
          /* istanbul ignore next */
          (cov_1gposnz01p().s[264]++, {
            low: 1,
            medium: 2,
            high: 3,
            critical: 4
          });
          /* istanbul ignore next */
          cov_1gposnz01p().s[265]++;
          return severityOrder[a.severity] > severityOrder[max.severity] ?
          /* istanbul ignore next */
          (cov_1gposnz01p().b[55][0]++, a) :
          /* istanbul ignore next */
          (cov_1gposnz01p().b[55][1]++, max);
        }));
        const ensembleAlert =
        /* istanbul ignore next */
        (cov_1gposnz01p().s[266]++, {
          ...maxSeverity,
          id: `ensemble_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
          confidence: Math.min(avgConfidence * 1.2, 1.0),
          // Boost confidence for ensemble
          description: `Multiple algorithms detected anomaly in ${metric}`,
          context: {
            ...maxSeverity.context,
            patterns: [...new Set(alerts.flatMap(a => {
              /* istanbul ignore next */
              cov_1gposnz01p().f[48]++;
              cov_1gposnz01p().s[267]++;
              return a.context.patterns;
            })), 'ensemble_detection']
          }
        });
        /* istanbul ignore next */
        cov_1gposnz01p().s[268]++;
        combinedAlerts.push(ensembleAlert);
      } else {
        /* istanbul ignore next */
        cov_1gposnz01p().b[54][1]++;
        cov_1gposnz01p().s[269]++;
        // Single algorithm detection
        combinedAlerts.push(alerts[0]);
      }
    }
    /* istanbul ignore next */
    cov_1gposnz01p().s[270]++;
    return combinedAlerts;
  }
  // Additional helper methods...
  async collectTrainingData(metrics, days) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[49]++;
    cov_1gposnz01p().s[271]++;
    // Implementation to collect training data for specified metrics and time period
    return [];
  }
  normalizeData(data) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[50]++;
    cov_1gposnz01p().s[272]++;
    // Implementation for data normalization
    return {
      normalizedData: data,
      normalizationParams: {}
    };
  }
  normalizeVector(vector, params) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[51]++;
    cov_1gposnz01p().s[273]++;
    // Implementation for vector normalization
    return {
      normalizedVector: vector
    };
  }
  async calculateReconstructionErrors(original, reconstructed) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[52]++;
    cov_1gposnz01p().s[274]++;
    // Implementation for calculating reconstruction errors
    return [];
  }
  calculateThreshold(errors) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[53]++;
    // Use 95th percentile as threshold
    const sorted =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[275]++, errors.sort((a, b) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[54]++;
      cov_1gposnz01p().s[276]++;
      return a - b;
    }));
    /* istanbul ignore next */
    cov_1gposnz01p().s[277]++;
    return sorted[Math.floor(sorted.length * 0.95)];
  }
  calculateStandardDeviation(values) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[55]++;
    const mean =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[278]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[56]++;
      cov_1gposnz01p().s[279]++;
      return sum + v;
    }, 0) / values.length);
    const variance =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[280]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[57]++;
      cov_1gposnz01p().s[281]++;
      return sum + Math.pow(v - mean, 2);
    }, 0) / values.length);
    /* istanbul ignore next */
    cov_1gposnz01p().s[282]++;
    return Math.sqrt(variance);
  }
  async getHistoricalData(metric, days) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[58]++;
    cov_1gposnz01p().s[283]++;
    // Implementation to get historical data for a metric
    return [];
  }
  async getCurrentMetricValues(metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[59]++;
    cov_1gposnz01p().s[284]++;
    // Implementation to get current metric values
    return {};
  }
  calculateSeverity(deviation, reference) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[60]++;
    const ratio =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[285]++, deviation / reference);
    /* istanbul ignore next */
    cov_1gposnz01p().s[286]++;
    if (ratio > 3) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[56][0]++;
      cov_1gposnz01p().s[287]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[56][1]++;
    }
    cov_1gposnz01p().s[288]++;
    if (ratio > 2) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[57][0]++;
      cov_1gposnz01p().s[289]++;
      return 'high';
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[57][1]++;
    }
    cov_1gposnz01p().s[290]++;
    if (ratio > 1.5) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[58][0]++;
      cov_1gposnz01p().s[291]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[58][1]++;
    }
    cov_1gposnz01p().s[292]++;
    return 'low';
  }
  isInCooldown(metric) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[61]++;
    const recentAlerts =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[293]++, Array.from(this.alerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[62]++;
      cov_1gposnz01p().s[294]++;
      return /* istanbul ignore next */(cov_1gposnz01p().b[59][0]++, alert.metric === metric) &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[59][1]++, !alert.resolved) &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[59][2]++, Date.now() - alert.timestamp.getTime() < this.config.cooldownPeriod * 60 * 1000);
    }));
    /* istanbul ignore next */
    cov_1gposnz01p().s[295]++;
    return recentAlerts.length > 0;
  }
  async getHistoricalComparison(metric) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[63]++;
    cov_1gposnz01p().s[296]++;
    // Implementation to get historical comparison data
    return {
      lastHour: 0,
      lastDay: 0,
      lastWeek: 0
    };
  }
  generateRecommendations(metric, value, algorithm) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[64]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[297]++, []);
    /* istanbul ignore next */
    cov_1gposnz01p().s[298]++;
    recommendations.push(`Investigate ${metric} anomaly detected by ${algorithm}`);
    /* istanbul ignore next */
    cov_1gposnz01p().s[299]++;
    recommendations.push('Check system logs for related events');
    /* istanbul ignore next */
    cov_1gposnz01p().s[300]++;
    recommendations.push('Monitor related metrics for cascading effects');
    /* istanbul ignore next */
    cov_1gposnz01p().s[301]++;
    if (
    /* istanbul ignore next */
    (cov_1gposnz01p().b[61][0]++, metric.includes('cpu')) ||
    /* istanbul ignore next */
    (cov_1gposnz01p().b[61][1]++, metric.includes('memory'))) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[60][0]++;
      cov_1gposnz01p().s[302]++;
      recommendations.push('Consider scaling resources if pattern persists');
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[60][1]++;
    }
    cov_1gposnz01p().s[303]++;
    if (metric.includes('response_time')) {
      /* istanbul ignore next */
      cov_1gposnz01p().b[62][0]++;
      cov_1gposnz01p().s[304]++;
      recommendations.push('Check for database query performance issues');
      /* istanbul ignore next */
      cov_1gposnz01p().s[305]++;
      recommendations.push('Review application bottlenecks');
    } else
    /* istanbul ignore next */
    {
      cov_1gposnz01p().b[62][1]++;
    }
    cov_1gposnz01p().s[306]++;
    return recommendations;
  }
  deduplicateAlerts(alerts) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[65]++;
    // Remove duplicate alerts for the same metric within a short time window
    const seen =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[307]++, new Set());
    const unique =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[308]++, []);
    /* istanbul ignore next */
    cov_1gposnz01p().s[309]++;
    for (const alert of alerts.sort((a, b) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[66]++;
      cov_1gposnz01p().s[310]++;
      return b.confidence - a.confidence;
    })) {
      const key =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[311]++, `${alert.metric}_${Math.floor(alert.timestamp.getTime() / (5 * 60 * 1000))}`); // 5-minute windows
      /* istanbul ignore next */
      cov_1gposnz01p().s[312]++;
      if (!seen.has(key)) {
        /* istanbul ignore next */
        cov_1gposnz01p().b[63][0]++;
        cov_1gposnz01p().s[313]++;
        seen.add(key);
        /* istanbul ignore next */
        cov_1gposnz01p().s[314]++;
        unique.push(alert);
      } else
      /* istanbul ignore next */
      {
        cov_1gposnz01p().b[63][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1gposnz01p().s[315]++;
    return unique;
  }
  findAutoencoderModel(metrics) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[67]++;
    const candidates =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[316]++, Array.from(this.models.values()).filter(model => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[68]++;
      cov_1gposnz01p().s[317]++;
      return /* istanbul ignore next */(cov_1gposnz01p().b[64][0]++, model.algorithm === 'autoencoder') &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[64][1]++, model.isActive) &&
      /* istanbul ignore next */
      (cov_1gposnz01p().b[64][2]++, metrics.every(m => {
        /* istanbul ignore next */
        cov_1gposnz01p().f[69]++;
        cov_1gposnz01p().s[318]++;
        return model.features.includes(m);
      }));
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[70]++;
      cov_1gposnz01p().s[319]++;
      return b.accuracy - a.accuracy;
    }));
    /* istanbul ignore next */
    cov_1gposnz01p().s[320]++;
    return /* istanbul ignore next */(cov_1gposnz01p().b[65][0]++, candidates[0]) ||
    /* istanbul ignore next */
    (cov_1gposnz01p().b[65][1]++, null);
  }
  calculateReconstructionError(original, reconstructed) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[71]++;
    let sumSquaredDiff =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[321]++, 0);
    /* istanbul ignore next */
    cov_1gposnz01p().s[322]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[323]++, 0); i < original.length; i++) {
      /* istanbul ignore next */
      cov_1gposnz01p().s[324]++;
      sumSquaredDiff += Math.pow(original[i] - reconstructed[i], 2);
    }
    /* istanbul ignore next */
    cov_1gposnz01p().s[325]++;
    return Math.sqrt(sumSquaredDiff / original.length);
  }
  identifyContributingMetrics(original, reconstructed, features) {
    /* istanbul ignore next */
    cov_1gposnz01p().f[72]++;
    const contributions =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[326]++, []);
    let totalError =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[327]++, 0);
    const errors =
    /* istanbul ignore next */
    (cov_1gposnz01p().s[328]++, original.map((val, idx) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[73]++;
      const error =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[329]++, Math.abs(val - reconstructed[idx]));
      /* istanbul ignore next */
      cov_1gposnz01p().s[330]++;
      totalError += error;
      /* istanbul ignore next */
      cov_1gposnz01p().s[331]++;
      return error;
    }));
    /* istanbul ignore next */
    cov_1gposnz01p().s[332]++;
    features.forEach((feature, idx) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[74]++;
      const contribution =
      /* istanbul ignore next */
      (cov_1gposnz01p().s[333]++, totalError > 0 ?
      /* istanbul ignore next */
      (cov_1gposnz01p().b[66][0]++, errors[idx] / totalError) :
      /* istanbul ignore next */
      (cov_1gposnz01p().b[66][1]++, 0));
      /* istanbul ignore next */
      cov_1gposnz01p().s[334]++;
      contributions.push({
        metric: feature,
        contribution
      });
    });
    /* istanbul ignore next */
    cov_1gposnz01p().s[335]++;
    return contributions.sort((a, b) => {
      /* istanbul ignore next */
      cov_1gposnz01p().f[75]++;
      cov_1gposnz01p().s[336]++;
      return b.contribution - a.contribution;
    });
  }
}
/* istanbul ignore next */
cov_1gposnz01p().s[337]++;
exports.AnomalyDetector = AnomalyDetector;
// Export singleton instance
/* istanbul ignore next */
cov_1gposnz01p().s[338]++;
exports.anomalyDetector = new AnomalyDetector();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,