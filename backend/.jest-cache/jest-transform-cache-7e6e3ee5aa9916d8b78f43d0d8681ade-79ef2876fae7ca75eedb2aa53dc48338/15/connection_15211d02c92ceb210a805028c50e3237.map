{"file":"/workspaces/prompt-card-system/backend/src/database/connection.ts","mappings":"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","names":[],"sources":["/workspaces/prompt-card-system/backend/src/database/connection.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DATABASE_PATH = process.env.DATABASE_PATH || path.join(__dirname, '../../data/database.sqlite');\n\n// Connection pool configuration\ninterface ConnectionPoolConfig {\n  maxConnections: number;\n  idleTimeout: number;\n  retryAttempts: number;\n  retryDelay: number;\n}\n\nconst poolConfig: ConnectionPoolConfig = {\n  maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '5'),\n  idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),\n  retryAttempts: parseInt(process.env.DB_RETRY_ATTEMPTS || '3'),\n  retryDelay: parseInt(process.env.DB_RETRY_DELAY || '1000')\n};\n\n// Connection pool implementation\nclass DatabaseConnectionPool {\n  private connections: Database.Database[] = [];\n  private availableConnections: Database.Database[] = [];\n  private busyConnections: Set<Database.Database> = new Set();\n  private initialized = false;\n  private retryCount = 0;\n\n  constructor(private dbPath: string, private config: ConnectionPoolConfig) {}\n\n  private createConnection(): Database.Database {\n    // Ensure data directory exists\n    const dataDir = path.dirname(this.dbPath);\n    if (!fs.existsSync(dataDir)) {\n      fs.mkdirSync(dataDir, { recursive: true });\n    }\n\n    const connection = new Database(this.dbPath, {\n      verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n      timeout: 5000 // 5 second timeout\n    });\n\n    // Enable foreign keys and optimize for concurrent access\n    connection.pragma('foreign_keys = ON');\n    connection.pragma('journal_mode = WAL');\n    connection.pragma('synchronous = NORMAL');\n    connection.pragma('cache_size = 1000');\n    connection.pragma('temp_store = memory');\n    \n    return connection;\n  }\n\n  private async initializePool(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Create initial connections\n      for (let i = 0; i < this.config.maxConnections; i++) {\n        const connection = this.createConnection();\n        this.connections.push(connection);\n        this.availableConnections.push(connection);\n      }\n      \n      this.initialized = true;\n      this.retryCount = 0;\n      console.log(`Database connection pool initialized with ${this.config.maxConnections} connections`);\n    } catch (error) {\n      console.error('Failed to initialize database connection pool:', error);\n      await this.retryConnection();\n    }\n  }\n\n  private async retryConnection(): Promise<void> {\n    if (this.retryCount >= this.config.retryAttempts) {\n      throw new Error(`Failed to connect to database after ${this.config.retryAttempts} attempts`);\n    }\n\n    this.retryCount++;\n    console.log(`Retrying database connection (attempt ${this.retryCount}/${this.config.retryAttempts})...`);\n    \n    await new Promise(resolve => setTimeout(resolve, this.config.retryDelay * this.retryCount));\n    await this.initializePool();\n  }\n\n  async getConnection(): Promise<Database.Database> {\n    if (!this.initialized) {\n      await this.initializePool();\n    }\n\n    if (this.availableConnections.length === 0) {\n      // Wait for a connection to become available\n      await new Promise(resolve => setTimeout(resolve, 10));\n      return this.getConnection();\n    }\n\n    const connection = this.availableConnections.pop()!;\n    this.busyConnections.add(connection);\n    return connection;\n  }\n\n  releaseConnection(connection: Database.Database): void {\n    if (this.busyConnections.has(connection)) {\n      this.busyConnections.delete(connection);\n      this.availableConnections.push(connection);\n    }\n  }\n\n  async withConnection<T>(operation: (db: Database.Database) => Promise<T> | T): Promise<T> {\n    const connection = await this.getConnection();\n    try {\n      return await operation(connection);\n    } finally {\n      this.releaseConnection(connection);\n    }\n  }\n\n  getStats() {\n    return {\n      total: this.connections.length,\n      available: this.availableConnections.length,\n      busy: this.busyConnections.size,\n      initialized: this.initialized\n    };\n  }\n\n  close(): void {\n    this.connections.forEach(conn => {\n      try {\n        conn.close();\n      } catch (error) {\n        console.error('Error closing database connection:', error);\n      }\n    });\n    this.connections = [];\n    this.availableConnections = [];\n    this.busyConnections.clear();\n    this.initialized = false;\n  }\n}\n\n// Create global connection pool\nconst connectionPool = new DatabaseConnectionPool(DATABASE_PATH, poolConfig);\n\n// Export legacy db interface for backward compatibility\nexport const db: any = {\n  prepare: (sql: string) => {\n    return {\n      run: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.run(...params);\n        });\n      },\n      get: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.get(...params);\n        });\n      },\n      all: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.all(...params);\n        });\n      }\n    };\n  },\n  exec: async (sql: string) => {\n    return connectionPool.withConnection((conn) => {\n      try {\n        return conn.exec(sql);\n      } catch (error) {\n        throw error; // Ensure errors are properly propagated\n      }\n    });\n  },\n  pragma: async (pragma: string) => {\n    return connectionPool.withConnection((conn) => conn.pragma(pragma));\n  },\n  close: () => connectionPool.close(),\n  transaction: (operations: (db: Database.Database) => any) => {\n    return connectionPool.withConnection((conn) => {\n      const transaction = conn.transaction(operations);\n      return transaction(conn);\n    });\n  },\n  getStats: () => connectionPool.getStats()\n};\n\n// Export connection pool for advanced usage\nexport { connectionPool };\n\n// Initialize database tables\nexport async function initializeDatabase(): Promise<any> {\n  console.log('Initializing database...');\n  \n  try {\n    // Create prompt_cards table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS prompt_cards (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        prompt_template TEXT NOT NULL,\n        variables TEXT DEFAULT '[]', -- JSON array of variable names\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create test_cases table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_cases (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        prompt_card_id INTEGER NOT NULL,\n        name TEXT NOT NULL,\n        input_variables TEXT NOT NULL, -- JSON object\n        expected_output TEXT,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion objects\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create enhanced test_results table for Phase 4\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_results (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        test_case_id INTEGER NOT NULL,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        response TEXT NOT NULL,\n        passed BOOLEAN NOT NULL,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion results\n        execution_time_ms INTEGER,\n        error TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create test execution queue table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_execution_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT UNIQUE NOT NULL,\n        prompt_card_id INTEGER NOT NULL,\n        test_case_ids TEXT NOT NULL, -- JSON array\n        model TEXT NOT NULL,\n        status TEXT DEFAULT 'pending', -- pending, running, completed, failed, cancelled\n        priority INTEGER DEFAULT 0,\n        configuration TEXT, -- JSON\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        started_at DATETIME,\n        completed_at DATETIME,\n        error_message TEXT,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id)\n      )\n    `);\n\n    // Create assertion_types table for advanced assertion system\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_types (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT NOT NULL,\n        parameters TEXT NOT NULL, -- JSON\n        examples TEXT NOT NULL, -- JSON\n        validator_code TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create assertion execution stats table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_execution_stats (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        assertion_type TEXT NOT NULL,\n        total_executions INTEGER DEFAULT 0,\n        successful_executions INTEGER DEFAULT 0,\n        failed_executions INTEGER DEFAULT 0,\n        total_execution_time INTEGER DEFAULT 0,\n        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(assertion_type)\n      )\n    `);\n\n    // Create indexes for better performance\n    await db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_prompt_cards_title ON prompt_cards(title);\n      CREATE INDEX IF NOT EXISTS idx_test_cases_prompt_card_id ON test_cases(prompt_card_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_test_case_id ON test_results(test_case_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_execution_id ON test_results(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_status ON test_execution_queue(status);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_priority ON test_execution_queue(priority DESC);\n      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);\n      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);\n    `);\n\n    console.log('Database initialized successfully');\n    return db;\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    throw error;\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('Closing database connection...');\n  db.close();\n  process.exit(0);\n});\n\nexport default db;"],"version":3}