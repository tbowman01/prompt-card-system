27d8ad16d149b74521504c95626c2706
"use strict";

/* istanbul ignore next */
function cov_2fvjyvu41l() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/samplePrompts.ts";
  var hash = "fdc10444990f6d678d788162ade5e8f82d2a773e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/samplePrompts.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 5,
          column: 72
        }
      },
      "4": {
        start: {
          line: 6,
          column: 32
        },
        end: {
          line: 6,
          column: 76
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 38
        }
      },
      "6": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 36
        }
      },
      "7": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 77
        }
      },
      "8": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 83
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "10": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "11": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 43
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "13": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 73
        }
      },
      "14": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 55
        }
      },
      "15": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "17": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "18": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "19": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 56
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "21": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "22": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 69,
          column: 3
        }
      },
      "23": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "24": {
        start: {
          line: 57,
          column: 22
        },
        end: {
          line: 57,
          column: 58
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "26": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "27": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 98,
          column: 3
        }
      },
      "28": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "29": {
        start: {
          line: 73,
          column: 26
        },
        end: {
          line: 73,
          column: 36
        }
      },
      "30": {
        start: {
          line: 74,
          column: 29
        },
        end: {
          line: 74,
          column: 54
        }
      },
      "31": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 75,
          column: 73
        }
      },
      "32": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "33": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "34": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 69
        }
      },
      "35": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "36": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "37": {
        start: {
          line: 100,
          column: 0
        },
        end: {
          line: 131,
          column: 3
        }
      },
      "38": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "39": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 36
        }
      },
      "40": {
        start: {
          line: 103,
          column: 44
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "41": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 54
        }
      },
      "42": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 105,
          column: 83
        }
      },
      "43": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "44": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "45": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 26
        }
      },
      "46": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "47": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 100
        }
      },
      "48": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "49": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "50": {
        start: {
          line: 133,
          column: 0
        },
        end: {
          line: 155,
          column: 3
        }
      },
      "51": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "52": {
        start: {
          line: 135,
          column: 44
        },
        end: {
          line: 135,
          column: 52
        }
      },
      "53": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 54
        }
      },
      "54": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "55": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 59
        }
      },
      "56": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "57": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "58": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 178,
          column: 3
        }
      },
      "59": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "60": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 159,
          column: 37
        }
      },
      "61": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "62": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "63": {
        start: {
          line: 166,
          column: 27
        },
        end: {
          line: 166,
          column: 75
        }
      },
      "64": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "65": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "66": {
        start: {
          line: 180,
          column: 0
        },
        end: {
          line: 200,
          column: 3
        }
      },
      "67": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "68": {
        start: {
          line: 182,
          column: 26
        },
        end: {
          line: 182,
          column: 36
        }
      },
      "69": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "70": {
        start: {
          line: 184,
          column: 26
        },
        end: {
          line: 184,
          column: 85
        }
      },
      "71": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "72": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "73": {
        start: {
          line: 202,
          column: 0
        },
        end: {
          line: 216,
          column: 3
        }
      },
      "74": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "75": {
        start: {
          line: 204,
          column: 22
        },
        end: {
          line: 204,
          column: 56
        }
      },
      "76": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "77": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 12,
            column: 17
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 39,
            column: 26
          },
          end: {
            line: 39,
            column: 27
          }
        },
        loc: {
          start: {
            line: 39,
            column: 40
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 39
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 21
          },
          end: {
            line: 55,
            column: 22
          }
        },
        loc: {
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 71,
            column: 31
          }
        },
        loc: {
          start: {
            line: 71,
            column: 44
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 71
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 100,
            column: 30
          },
          end: {
            line: 100,
            column: 31
          }
        },
        loc: {
          start: {
            line: 100,
            column: 50
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 100
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 27
          },
          end: {
            line: 133,
            column: 28
          }
        },
        loc: {
          start: {
            line: 133,
            column: 47
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 157,
            column: 26
          }
        },
        loc: {
          start: {
            line: 157,
            column: 39
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 180,
            column: 33
          },
          end: {
            line: 180,
            column: 34
          }
        },
        loc: {
          start: {
            line: 180,
            column: 47
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 180
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 202,
            column: 32
          },
          end: {
            line: 202,
            column: 33
          }
        },
        loc: {
          start: {
            line: 202,
            column: 46
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 202
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        }, {
          start: {
            line: 19,
            column: 13
          },
          end: {
            line: 21,
            column: 9
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 27,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 27,
            column: 34
          }
        }, {
          start: {
            line: 27,
            column: 38
          },
          end: {
            line: 27,
            column: 43
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 19
          },
          end: {
            line: 34,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 44
          },
          end: {
            line: 34,
            column: 57
          }
        }, {
          start: {
            line: 34,
            column: 60
          },
          end: {
            line: 34,
            column: 92
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 50,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 44
          },
          end: {
            line: 50,
            column: 57
          }
        }, {
          start: {
            line: 50,
            column: 60
          },
          end: {
            line: 50,
            column: 88
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 19
          },
          end: {
            line: 66,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 66,
            column: 44
          },
          end: {
            line: 66,
            column: 57
          }
        }, {
          start: {
            line: 66,
            column: 60
          },
          end: {
            line: 66,
            column: 88
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 95,
            column: 19
          },
          end: {
            line: 95,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 44
          },
          end: {
            line: 95,
            column: 57
          }
        }, {
          start: {
            line: 95,
            column: 60
          },
          end: {
            line: 95,
            column: 91
          }
        }],
        line: 95
      },
      "7": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 39
          }
        }],
        line: 103
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 68
          },
          end: {
            line: 122,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 87
          },
          end: {
            line: 122,
            column: 105
          }
        }, {
          start: {
            line: 122,
            column: 108
          },
          end: {
            line: 122,
            column: 110
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 19
          },
          end: {
            line: 128,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 57
          }
        }, {
          start: {
            line: 128,
            column: 60
          },
          end: {
            line: 128,
            column: 102
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 135,
            column: 35
          },
          end: {
            line: 135,
            column: 39
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 142,
            column: 63
          },
          end: {
            line: 142,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 82
          },
          end: {
            line: 142,
            column: 100
          }
        }, {
          start: {
            line: 142,
            column: 103
          },
          end: {
            line: 142,
            column: 105
          }
        }],
        line: 142
      },
      "15": {
        loc: {
          start: {
            line: 145,
            column: 31
          },
          end: {
            line: 145,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 50
          },
          end: {
            line: 145,
            column: 84
          }
        }, {
          start: {
            line: 145,
            column: 87
          },
          end: {
            line: 145,
            column: 91
          }
        }],
        line: 145
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 19
          },
          end: {
            line: 152,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 44
          },
          end: {
            line: 152,
            column: 57
          }
        }, {
          start: {
            line: 152,
            column: 60
          },
          end: {
            line: 152,
            column: 97
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "18": {
        loc: {
          start: {
            line: 175,
            column: 19
          },
          end: {
            line: 175,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 44
          },
          end: {
            line: 175,
            column: 57
          }
        }, {
          start: {
            line: 175,
            column: 60
          },
          end: {
            line: 175,
            column: 94
          }
        }],
        line: 175
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 19
          },
          end: {
            line: 197,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 44
          },
          end: {
            line: 197,
            column: 57
          }
        }, {
          start: {
            line: 197,
            column: 60
          },
          end: {
            line: 197,
            column: 97
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 213,
            column: 19
          },
          end: {
            line: 213,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 44
          },
          end: {
            line: 213,
            column: 57
          }
        }, {
          start: {
            line: 213,
            column: 60
          },
          end: {
            line: 213,
            column: 98
          }
        }],
        line: 213
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/samplePrompts.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/samplePrompts.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { SamplePromptService } from '../services/SamplePromptService';\nimport { SampleTestCaseService } from '../services/SampleTestCaseService';\n\nconst router = Router();\nconst sampleService = SamplePromptService.getInstance();\nconst testCaseService = SampleTestCaseService.getInstance();\n\n// Get all sample prompts\nrouter.get('/', (req: Request, res: Response) => {\n  try {\n    const category = req.query.category as string;\n    \n    let samples;\n    if (category) {\n      samples = sampleService.getSamplePromptsByCategory(category);\n    } else {\n      samples = sampleService.getSamplePrompts();\n    }\n\n    return res.json({\n      success: true,\n      data: samples,\n      meta: {\n        total: samples.length,\n        category: category || 'all'\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch sample prompts'\n    });\n  }\n});\n\n// Get sample prompt categories\nrouter.get('/categories', (req: Request, res: Response) => {\n  try {\n    const categories = sampleService.getCategories();\n    \n    return res.json({\n      success: true,\n      data: categories\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch categories'\n    });\n  }\n});\n\n// Get sample prompt statistics\nrouter.get('/stats', (req: Request, res: Response) => {\n  try {\n    const stats = sampleService.getSamplePromptStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch statistics'\n    });\n  }\n});\n\n// Get specific sample prompt preview\nrouter.get('/:title/preview', (req: Request, res: Response) => {\n  try {\n    const { title } = req.params;\n    const decodedTitle = decodeURIComponent(title);\n    \n    const sample = sampleService.getSamplePromptPreview(decodedTitle);\n    \n    if (!sample) {\n      return res.status(404).json({\n        success: false,\n        error: 'Sample prompt not found'\n      });\n    }\n\n    // Validate the sample\n    const validation = sampleService.validateSamplePrompt(sample);\n    \n    return res.json({\n      success: true,\n      data: {\n        ...sample,\n        validation\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch sample prompt'\n    });\n  }\n});\n\n// Create prompt card from sample with test cases\nrouter.post('/:title/create', async (req: Request, res: Response) => {\n  try {\n    const { title } = req.params;\n    const { includeTestCases = true } = req.body;\n    const decodedTitle = decodeURIComponent(title);\n    \n    const promptCard = await sampleService.createPromptFromSample(decodedTitle);\n    \n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Sample prompt not found'\n      });\n    }\n\n    let testCases = [];\n    if (includeTestCases) {\n      testCases = await testCaseService.createTestCasesForPrompt(promptCard.id, decodedTitle);\n    }\n\n    return res.status(201).json({\n      success: true,\n      data: {\n        ...promptCard,\n        test_cases: testCases\n      },\n      message: `Prompt card created successfully from sample${includeTestCases ? ' with test cases' : ''}`\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create prompt card from sample'\n    });\n  }\n});\n\n// Initialize sample prompts in database\nrouter.post('/initialize', async (req: Request, res: Response) => {\n  try {\n    const { includeTestCases = true } = req.body;\n    \n    await sampleService.initializeSamplePrompts();\n    \n    if (includeTestCases) {\n      await testCaseService.initializeAllTestCases();\n    }\n    \n    return res.json({\n      success: true,\n      message: `Sample prompts initialized successfully${includeTestCases ? ' with test cases' : ''}`,\n      data: {\n        promptStats: sampleService.getSamplePromptStats(),\n        testCaseStats: includeTestCases ? testCaseService.getTestCaseStats() : null\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to initialize sample prompts'\n    });\n  }\n});\n\n// Validate sample prompt\nrouter.post('/validate', (req: Request, res: Response) => {\n  try {\n    const samplePrompt = req.body;\n    \n    if (!samplePrompt) {\n      return res.status(400).json({\n        success: false,\n        error: 'Sample prompt data is required'\n      });\n    }\n\n    const validation = sampleService.validateSamplePrompt(samplePrompt);\n    \n    return res.json({\n      success: true,\n      data: validation\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to validate sample prompt'\n    });\n  }\n});\n\n// Get test case templates for a prompt\nrouter.get('/:title/test-cases', (req: Request, res: Response) => {\n  try {\n    const { title } = req.params;\n    const decodedTitle = decodeURIComponent(title);\n    \n    const testCases = testCaseService.getTestCaseTemplatesForPrompt(decodedTitle);\n    \n    return res.json({\n      success: true,\n      data: testCases,\n      meta: {\n        prompt: decodedTitle,\n        testCaseCount: testCases.length\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test case templates'\n    });\n  }\n});\n\n// Get test case statistics\nrouter.get('/test-cases/stats', (req: Request, res: Response) => {\n  try {\n    const stats = testCaseService.getTestCaseStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test case statistics'\n    });\n  }\n});\n\nexport { router as samplePromptRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fdc10444990f6d678d788162ade5e8f82d2a773e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2fvjyvu41l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2fvjyvu41l();
cov_2fvjyvu41l().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2fvjyvu41l().s[1]++;
exports.samplePromptRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_2fvjyvu41l().s[2]++, require("express"));
const SamplePromptService_1 =
/* istanbul ignore next */
(cov_2fvjyvu41l().s[3]++, require("../services/SamplePromptService"));
const SampleTestCaseService_1 =
/* istanbul ignore next */
(cov_2fvjyvu41l().s[4]++, require("../services/SampleTestCaseService"));
const router =
/* istanbul ignore next */
(cov_2fvjyvu41l().s[5]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_2fvjyvu41l().s[6]++;
exports.samplePromptRoutes = router;
const sampleService =
/* istanbul ignore next */
(cov_2fvjyvu41l().s[7]++, SamplePromptService_1.SamplePromptService.getInstance());
const testCaseService =
/* istanbul ignore next */
(cov_2fvjyvu41l().s[8]++, SampleTestCaseService_1.SampleTestCaseService.getInstance());
// Get all sample prompts
/* istanbul ignore next */
cov_2fvjyvu41l().s[9]++;
router.get('/', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[0]++;
  cov_2fvjyvu41l().s[10]++;
  try {
    const category =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[11]++, req.query.category);
    let samples;
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[12]++;
    if (category) {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[0][0]++;
      cov_2fvjyvu41l().s[13]++;
      samples = sampleService.getSamplePromptsByCategory(category);
    } else {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[0][1]++;
      cov_2fvjyvu41l().s[14]++;
      samples = sampleService.getSamplePrompts();
    }
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[15]++;
    return res.json({
      success: true,
      data: samples,
      meta: {
        total: samples.length,
        category:
        /* istanbul ignore next */
        (cov_2fvjyvu41l().b[1][0]++, category) ||
        /* istanbul ignore next */
        (cov_2fvjyvu41l().b[1][1]++, 'all')
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[16]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[2][1]++, 'Failed to fetch sample prompts')
    });
  }
});
// Get sample prompt categories
/* istanbul ignore next */
cov_2fvjyvu41l().s[17]++;
router.get('/categories', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[1]++;
  cov_2fvjyvu41l().s[18]++;
  try {
    const categories =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[19]++, sampleService.getCategories());
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[20]++;
    return res.json({
      success: true,
      data: categories
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[21]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[3][1]++, 'Failed to fetch categories')
    });
  }
});
// Get sample prompt statistics
/* istanbul ignore next */
cov_2fvjyvu41l().s[22]++;
router.get('/stats', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[2]++;
  cov_2fvjyvu41l().s[23]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[24]++, sampleService.getSamplePromptStats());
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[25]++;
    return res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[26]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[4][1]++, 'Failed to fetch statistics')
    });
  }
});
// Get specific sample prompt preview
/* istanbul ignore next */
cov_2fvjyvu41l().s[27]++;
router.get('/:title/preview', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[3]++;
  cov_2fvjyvu41l().s[28]++;
  try {
    const {
      title
    } =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[29]++, req.params);
    const decodedTitle =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[30]++, decodeURIComponent(title));
    const sample =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[31]++, sampleService.getSamplePromptPreview(decodedTitle));
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[32]++;
    if (!sample) {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[5][0]++;
      cov_2fvjyvu41l().s[33]++;
      return res.status(404).json({
        success: false,
        error: 'Sample prompt not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fvjyvu41l().b[5][1]++;
    }
    // Validate the sample
    const validation =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[34]++, sampleService.validateSamplePrompt(sample));
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[35]++;
    return res.json({
      success: true,
      data: {
        ...sample,
        validation
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[36]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[6][1]++, 'Failed to fetch sample prompt')
    });
  }
});
// Create prompt card from sample with test cases
/* istanbul ignore next */
cov_2fvjyvu41l().s[37]++;
router.post('/:title/create', async (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[4]++;
  cov_2fvjyvu41l().s[38]++;
  try {
    const {
      title
    } =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[39]++, req.params);
    const {
      includeTestCases =
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[7][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[40]++, req.body);
    const decodedTitle =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[41]++, decodeURIComponent(title));
    const promptCard =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[42]++, await sampleService.createPromptFromSample(decodedTitle));
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[43]++;
    if (!promptCard) {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[8][0]++;
      cov_2fvjyvu41l().s[44]++;
      return res.status(404).json({
        success: false,
        error: 'Sample prompt not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fvjyvu41l().b[8][1]++;
    }
    let testCases =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[45]++, []);
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[46]++;
    if (includeTestCases) {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[9][0]++;
      cov_2fvjyvu41l().s[47]++;
      testCases = await testCaseService.createTestCasesForPrompt(promptCard.id, decodedTitle);
    } else
    /* istanbul ignore next */
    {
      cov_2fvjyvu41l().b[9][1]++;
    }
    cov_2fvjyvu41l().s[48]++;
    return res.status(201).json({
      success: true,
      data: {
        ...promptCard,
        test_cases: testCases
      },
      message: `Prompt card created successfully from sample${includeTestCases ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[10][0]++, ' with test cases') :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[10][1]++, '')}`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[49]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[11][1]++, 'Failed to create prompt card from sample')
    });
  }
});
// Initialize sample prompts in database
/* istanbul ignore next */
cov_2fvjyvu41l().s[50]++;
router.post('/initialize', async (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[5]++;
  cov_2fvjyvu41l().s[51]++;
  try {
    const {
      includeTestCases =
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[12][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[52]++, req.body);
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[53]++;
    await sampleService.initializeSamplePrompts();
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[54]++;
    if (includeTestCases) {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[13][0]++;
      cov_2fvjyvu41l().s[55]++;
      await testCaseService.initializeAllTestCases();
    } else
    /* istanbul ignore next */
    {
      cov_2fvjyvu41l().b[13][1]++;
    }
    cov_2fvjyvu41l().s[56]++;
    return res.json({
      success: true,
      message: `Sample prompts initialized successfully${includeTestCases ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[14][0]++, ' with test cases') :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[14][1]++, '')}`,
      data: {
        promptStats: sampleService.getSamplePromptStats(),
        testCaseStats: includeTestCases ?
        /* istanbul ignore next */
        (cov_2fvjyvu41l().b[15][0]++, testCaseService.getTestCaseStats()) :
        /* istanbul ignore next */
        (cov_2fvjyvu41l().b[15][1]++, null)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[57]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[16][1]++, 'Failed to initialize sample prompts')
    });
  }
});
// Validate sample prompt
/* istanbul ignore next */
cov_2fvjyvu41l().s[58]++;
router.post('/validate', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[6]++;
  cov_2fvjyvu41l().s[59]++;
  try {
    const samplePrompt =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[60]++, req.body);
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[61]++;
    if (!samplePrompt) {
      /* istanbul ignore next */
      cov_2fvjyvu41l().b[17][0]++;
      cov_2fvjyvu41l().s[62]++;
      return res.status(400).json({
        success: false,
        error: 'Sample prompt data is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fvjyvu41l().b[17][1]++;
    }
    const validation =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[63]++, sampleService.validateSamplePrompt(samplePrompt));
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[64]++;
    return res.json({
      success: true,
      data: validation
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[65]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[18][1]++, 'Failed to validate sample prompt')
    });
  }
});
// Get test case templates for a prompt
/* istanbul ignore next */
cov_2fvjyvu41l().s[66]++;
router.get('/:title/test-cases', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[7]++;
  cov_2fvjyvu41l().s[67]++;
  try {
    const {
      title
    } =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[68]++, req.params);
    const decodedTitle =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[69]++, decodeURIComponent(title));
    const testCases =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[70]++, testCaseService.getTestCaseTemplatesForPrompt(decodedTitle));
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[71]++;
    return res.json({
      success: true,
      data: testCases,
      meta: {
        prompt: decodedTitle,
        testCaseCount: testCases.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[72]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[19][1]++, 'Failed to fetch test case templates')
    });
  }
});
// Get test case statistics
/* istanbul ignore next */
cov_2fvjyvu41l().s[73]++;
router.get('/test-cases/stats', (req, res) => {
  /* istanbul ignore next */
  cov_2fvjyvu41l().f[8]++;
  cov_2fvjyvu41l().s[74]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_2fvjyvu41l().s[75]++, testCaseService.getTestCaseStats());
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[76]++;
    return res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fvjyvu41l().s[77]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2fvjyvu41l().b[20][1]++, 'Failed to fetch test case statistics')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,