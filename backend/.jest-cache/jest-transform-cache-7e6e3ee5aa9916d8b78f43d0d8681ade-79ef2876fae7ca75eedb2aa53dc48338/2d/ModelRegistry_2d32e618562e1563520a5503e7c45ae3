893fd87ddd231f7628344ade6b0cae63
"use strict";

/* istanbul ignore next */
function cov_1mywnac1o2() {
  var path = "/workspaces/prompt-card-system/backend/src/services/training/ModelRegistry.ts";
  var hash = "2d310bb8908a21d7de4013010cfe32adf509151c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/training/ModelRegistry.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 55
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 55
        }
      },
      "4": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 16
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 35
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 64
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 32
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 39
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "11": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "13": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 61
        }
      },
      "14": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "15": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "16": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 50
        }
      },
      "17": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "18": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 69
        }
      },
      "19": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "20": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 75
        }
      },
      "21": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "22": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 79
        }
      },
      "23": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 48
        }
      },
      "24": {
        start: {
          line: 46,
          column: 25
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "25": {
        start: {
          line: 47,
          column: 22
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "27": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 71
        }
      },
      "28": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 40
        }
      },
      "29": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 75,
          column: 16
        }
      },
      "30": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "31": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 76
        }
      },
      "32": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 48
        }
      },
      "33": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "34": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 54
        }
      },
      "35": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "36": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 58
        }
      },
      "37": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 97,
          column: 92
        }
      },
      "38": {
        start: {
          line: 98,
          column: 29
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "39": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "40": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 84
        }
      },
      "41": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 47
        }
      },
      "42": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "43": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 66
        }
      },
      "44": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "45": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 54
        }
      },
      "46": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "47": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 87
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 76
        }
      },
      "49": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 28
        }
      },
      "50": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 40
        }
      },
      "51": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 61
        }
      },
      "52": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "53": {
        start: {
          line: 146,
          column: 26
        },
        end: {
          line: 146,
          column: 58
        }
      },
      "54": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 75
        }
      },
      "55": {
        start: {
          line: 147,
          column: 60
        },
        end: {
          line: 149,
          column: 73
        }
      },
      "56": {
        start: {
          line: 149,
          column: 39
        },
        end: {
          line: 149,
          column: 72
        }
      },
      "57": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "58": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 44
        }
      },
      "59": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "60": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 111
        }
      },
      "61": {
        start: {
          line: 155,
          column: 64
        },
        end: {
          line: 155,
          column: 109
        }
      },
      "62": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "63": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 123
        }
      },
      "64": {
        start: {
          line: 158,
          column: 64
        },
        end: {
          line: 158,
          column: 121
        }
      },
      "65": {
        start: {
          line: 158,
          column: 97
        },
        end: {
          line: 158,
          column: 120
        }
      },
      "66": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "67": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 167,
          column: 19
        }
      },
      "68": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 163,
          column: 37
        }
      },
      "69": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 37
        }
      },
      "70": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 165,
          column: 37
        }
      },
      "71": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 165,
          column: 37
        }
      },
      "72": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 32
        }
      },
      "73": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "74": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 175,
          column: 19
        }
      },
      "75": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 174,
          column: 23
        }
      },
      "76": {
        start: {
          line: 172,
          column: 38
        },
        end: {
          line: 172,
          column: 71
        }
      },
      "77": {
        start: {
          line: 173,
          column: 24
        },
        end: {
          line: 173,
          column: 73
        }
      },
      "78": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "79": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 130
        }
      },
      "80": {
        start: {
          line: 178,
          column: 64
        },
        end: {
          line: 178,
          column: 128
        }
      },
      "81": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "82": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 116
        }
      },
      "83": {
        start: {
          line: 181,
          column: 64
        },
        end: {
          line: 181,
          column: 114
        }
      },
      "84": {
        start: {
          line: 181,
          column: 89
        },
        end: {
          line: 181,
          column: 113
        }
      },
      "85": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "86": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 107
        }
      },
      "87": {
        start: {
          line: 184,
          column: 64
        },
        end: {
          line: 184,
          column: 105
        }
      },
      "88": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "89": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 108
        }
      },
      "90": {
        start: {
          line: 187,
          column: 64
        },
        end: {
          line: 187,
          column: 106
        }
      },
      "91": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "92": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "93": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 217,
          column: 17
        }
      },
      "94": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 196,
          column: 38
        }
      },
      "95": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 38
        }
      },
      "96": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 30
        }
      },
      "97": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 200,
          column: 54
        }
      },
      "98": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 54
        }
      },
      "99": {
        start: {
          line: 202,
          column: 24
        },
        end: {
          line: 202,
          column: 30
        }
      },
      "100": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 41
        }
      },
      "101": {
        start: {
          line: 205,
          column: 24
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "102": {
        start: {
          line: 206,
          column: 24
        },
        end: {
          line: 206,
          column: 30
        }
      },
      "103": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 67
        }
      },
      "104": {
        start: {
          line: 209,
          column: 24
        },
        end: {
          line: 209,
          column: 67
        }
      },
      "105": {
        start: {
          line: 210,
          column: 24
        },
        end: {
          line: 210,
          column: 30
        }
      },
      "106": {
        start: {
          line: 212,
          column: 24
        },
        end: {
          line: 212,
          column: 65
        }
      },
      "107": {
        start: {
          line: 213,
          column: 24
        },
        end: {
          line: 213,
          column: 65
        }
      },
      "108": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 214,
          column: 30
        }
      },
      "109": {
        start: {
          line: 216,
          column: 24
        },
        end: {
          line: 216,
          column: 33
        }
      },
      "110": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 220,
          column: 17
        }
      },
      "111": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 219,
          column: 48
        }
      },
      "112": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 44
        }
      },
      "113": {
        start: {
          line: 225,
          column: 22
        },
        end: {
          line: 225,
          column: 46
        }
      },
      "114": {
        start: {
          line: 226,
          column: 23
        },
        end: {
          line: 226,
          column: 47
        }
      },
      "115": {
        start: {
          line: 227,
          column: 32
        },
        end: {
          line: 227,
          column: 76
        }
      },
      "116": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 228,
          column: 62
        }
      },
      "117": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "118": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 48
        }
      },
      "119": {
        start: {
          line: 244,
          column: 23
        },
        end: {
          line: 244,
          column: 48
        }
      },
      "120": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "121": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 60
        }
      },
      "122": {
        start: {
          line: 248,
          column: 27
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "123": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 264,
          column: 10
        }
      },
      "124": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "125": {
        start: {
          line: 266,
          column: 27
        },
        end: {
          line: 266,
          column: 66
        }
      },
      "126": {
        start: {
          line: 267,
          column: 27
        },
        end: {
          line: 267,
          column: 66
        }
      },
      "127": {
        start: {
          line: 268,
          column: 35
        },
        end: {
          line: 268,
          column: 88
        }
      },
      "128": {
        start: {
          line: 269,
          column: 25
        },
        end: {
          line: 269,
          column: 30
        }
      },
      "129": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "130": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 93
        }
      },
      "131": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 93
        }
      },
      "132": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "133": {
        start: {
          line: 286,
          column: 22
        },
        end: {
          line: 286,
          column: 109
        }
      },
      "134": {
        start: {
          line: 286,
          column: 79
        },
        end: {
          line: 286,
          column: 101
        }
      },
      "135": {
        start: {
          line: 287,
          column: 22
        },
        end: {
          line: 287,
          column: 109
        }
      },
      "136": {
        start: {
          line: 287,
          column: 79
        },
        end: {
          line: 287,
          column: 101
        }
      },
      "137": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 114
        }
      },
      "138": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 107
        }
      },
      "139": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 113
        }
      },
      "140": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 300,
          column: 11
        }
      },
      "141": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 26
        }
      },
      "142": {
        start: {
          line: 307,
          column: 22
        },
        end: {
          line: 307,
          column: 46
        }
      },
      "143": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "144": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 58
        }
      },
      "145": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 322,
          column: 10
        }
      },
      "146": {
        start: {
          line: 328,
          column: 22
        },
        end: {
          line: 328,
          column: 46
        }
      },
      "147": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "148": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 58
        }
      },
      "149": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 48
        }
      },
      "150": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "151": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 57
        }
      },
      "152": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 53
        }
      },
      "153": {
        start: {
          line: 341,
          column: 22
        },
        end: {
          line: 341,
          column: 25
        }
      },
      "154": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 343,
          column: 107
        }
      },
      "155": {
        start: {
          line: 345,
          column: 24
        },
        end: {
          line: 345,
          column: 73
        }
      },
      "156": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 109
        }
      },
      "157": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 65
        }
      },
      "158": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 348,
          column: 38
        }
      },
      "159": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 40
        }
      },
      "160": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 53
        }
      },
      "161": {
        start: {
          line: 361,
          column: 22
        },
        end: {
          line: 361,
          column: 46
        }
      },
      "162": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "163": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 58
        }
      },
      "164": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "165": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 100
        }
      },
      "166": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 36
        }
      },
      "167": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 43
        }
      },
      "168": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 379,
          column: 11
        }
      },
      "169": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 74
        }
      },
      "170": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 54
        }
      },
      "171": {
        start: {
          line: 387,
          column: 23
        },
        end: {
          line: 387,
          column: 55
        }
      },
      "172": {
        start: {
          line: 388,
          column: 29
        },
        end: {
          line: 391,
          column: 14
        }
      },
      "173": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 69
        }
      },
      "174": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 23
        }
      },
      "175": {
        start: {
          line: 392,
          column: 31
        },
        end: {
          line: 395,
          column: 14
        }
      },
      "176": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 93
        }
      },
      "177": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 23
        }
      },
      "178": {
        start: {
          line: 396,
          column: 26
        },
        end: {
          line: 396,
          column: 79
        }
      },
      "179": {
        start: {
          line: 396,
          column: 56
        },
        end: {
          line: 396,
          column: 75
        }
      },
      "180": {
        start: {
          line: 397,
          column: 25
        },
        end: {
          line: 400,
          column: 25
        }
      },
      "181": {
        start: {
          line: 398,
          column: 27
        },
        end: {
          line: 398,
          column: 101
        }
      },
      "182": {
        start: {
          line: 399,
          column: 28
        },
        end: {
          line: 399,
          column: 57
        }
      },
      "183": {
        start: {
          line: 401,
          column: 36
        },
        end: {
          line: 403,
          column: 24
        }
      },
      "184": {
        start: {
          line: 402,
          column: 28
        },
        end: {
          line: 402,
          column: 75
        }
      },
      "185": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 411,
          column: 10
        }
      },
      "186": {
        start: {
          line: 415,
          column: 24
        },
        end: {
          line: 415,
          column: 85
        }
      },
      "187": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 97
        }
      },
      "188": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "189": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 54
        }
      },
      "190": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "191": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 57
        }
      },
      "192": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "193": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 50
        }
      },
      "194": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "195": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 65
        }
      },
      "196": {
        start: {
          line: 434,
          column: 24
        },
        end: {
          line: 439,
          column: 10
        }
      },
      "197": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 80
        }
      },
      "198": {
        start: {
          line: 443,
          column: 22
        },
        end: {
          line: 443,
          column: 24
        }
      },
      "199": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 450,
          column: 11
        }
      },
      "200": {
        start: {
          line: 445,
          column: 29
        },
        end: {
          line: 445,
          column: 65
        }
      },
      "201": {
        start: {
          line: 446,
          column: 29
        },
        end: {
          line: 446,
          column: 65
        }
      },
      "202": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 449,
          column: 13
        }
      },
      "203": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 52
        }
      },
      "204": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 21
        }
      },
      "205": {
        start: {
          line: 454,
          column: 26
        },
        end: {
          line: 454,
          column: 28
        }
      },
      "206": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "207": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 161
        }
      },
      "208": {
        start: {
          line: 459,
          column: 13
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "209": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 161
        }
      },
      "210": {
        start: {
          line: 463,
          column: 26
        },
        end: {
          line: 463,
          column: 66
        }
      },
      "211": {
        start: {
          line: 464,
          column: 26
        },
        end: {
          line: 464,
          column: 66
        }
      },
      "212": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "213": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 150
        }
      },
      "214": {
        start: {
          line: 468,
          column: 13
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "215": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 150
        }
      },
      "216": {
        start: {
          line: 472,
          column: 25
        },
        end: {
          line: 472,
          column: 72
        }
      },
      "217": {
        start: {
          line: 473,
          column: 25
        },
        end: {
          line: 473,
          column: 72
        }
      },
      "218": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "219": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "220": {
        start: {
          line: 476,
          column: 16
        },
        end: {
          line: 476,
          column: 120
        }
      },
      "221": {
        start: {
          line: 478,
          column: 17
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "222": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 120
        }
      },
      "223": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 482,
          column: 25
        }
      },
      "224": {
        start: {
          line: 485,
          column: 32
        },
        end: {
          line: 485,
          column: 34
        }
      },
      "225": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 494,
          column: 9
        }
      },
      "226": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 61
        }
      },
      "227": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 65
        }
      },
      "228": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 65
        }
      },
      "229": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 63
        }
      },
      "230": {
        start: {
          line: 496,
          column: 25
        },
        end: {
          line: 496,
          column: 72
        }
      },
      "231": {
        start: {
          line: 497,
          column: 25
        },
        end: {
          line: 497,
          column: 72
        }
      },
      "232": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "233": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 506,
          column: 13
        }
      },
      "234": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 72
        }
      },
      "235": {
        start: {
          line: 501,
          column: 16
        },
        end: {
          line: 501,
          column: 69
        }
      },
      "236": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 504,
          column: 66
        }
      },
      "237": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 505,
          column: 66
        }
      },
      "238": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 514,
          column: 9
        }
      },
      "239": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 61
        }
      },
      "240": {
        start: {
          line: 512,
          column: 13
        },
        end: {
          line: 514,
          column: 9
        }
      },
      "241": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 513,
          column: 61
        }
      },
      "242": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 515,
          column: 31
        }
      },
      "243": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 527,
          column: 9
        }
      },
      "244": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 520,
          column: 61
        }
      },
      "245": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 76
        }
      },
      "246": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 526,
          column: 74
        }
      },
      "247": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "248": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 531,
          column: 59
        }
      },
      "249": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 535,
          column: 13
        }
      },
      "250": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 536,
          column: 68
        }
      },
      "251": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 75
        }
      },
      "252": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 557,
          column: 9
        }
      },
      "253": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 544,
          column: 62
        }
      },
      "254": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 552,
          column: 13
        }
      },
      "255": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 551,
          column: 17
        }
      },
      "256": {
        start: {
          line: 548,
          column: 38
        },
        end: {
          line: 548,
          column: 72
        }
      },
      "257": {
        start: {
          line: 549,
          column: 20
        },
        end: {
          line: 549,
          column: 94
        }
      },
      "258": {
        start: {
          line: 550,
          column: 20
        },
        end: {
          line: 550,
          column: 73
        }
      },
      "259": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 64
        }
      },
      "260": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 76
        }
      },
      "261": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 569,
          column: 9
        }
      },
      "262": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 562,
          column: 29
        }
      },
      "263": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 29
        }
      },
      "264": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 565,
          column: 24
        }
      },
      "265": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 568,
          column: 25
        }
      },
      "266": {
        start: {
          line: 572,
          column: 0
        },
        end: {
          line: 572,
          column: 38
        }
      },
      "267": {
        start: {
          line: 574,
          column: 0
        },
        end: {
          line: 574,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 40
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 22
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 136
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 31
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 142
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 51
          },
          end: {
            line: 147,
            column: 52
          }
        },
        loc: {
          start: {
            line: 147,
            column: 60
          },
          end: {
            line: 149,
            column: 73
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 149,
            column: 32
          },
          end: {
            line: 149,
            column: 33
          }
        },
        loc: {
          start: {
            line: 149,
            column: 39
          },
          end: {
            line: 149,
            column: 72
          }
        },
        line: 149
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 155,
            column: 55
          },
          end: {
            line: 155,
            column: 56
          }
        },
        loc: {
          start: {
            line: 155,
            column: 64
          },
          end: {
            line: 155,
            column: 109
          }
        },
        line: 155
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 55
          },
          end: {
            line: 158,
            column: 56
          }
        },
        loc: {
          start: {
            line: 158,
            column: 64
          },
          end: {
            line: 158,
            column: 121
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 158,
            column: 90
          },
          end: {
            line: 158,
            column: 91
          }
        },
        loc: {
          start: {
            line: 158,
            column: 97
          },
          end: {
            line: 158,
            column: 120
          }
        },
        line: 158
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 161,
            column: 55
          },
          end: {
            line: 161,
            column: 56
          }
        },
        loc: {
          start: {
            line: 161,
            column: 64
          },
          end: {
            line: 167,
            column: 17
          }
        },
        line: 161
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 170,
            column: 55
          },
          end: {
            line: 170,
            column: 56
          }
        },
        loc: {
          start: {
            line: 170,
            column: 64
          },
          end: {
            line: 175,
            column: 17
          }
        },
        line: 170
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 79
          },
          end: {
            line: 171,
            column: 80
          }
        },
        loc: {
          start: {
            line: 171,
            column: 104
          },
          end: {
            line: 174,
            column: 21
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 178,
            column: 55
          },
          end: {
            line: 178,
            column: 56
          }
        },
        loc: {
          start: {
            line: 178,
            column: 64
          },
          end: {
            line: 178,
            column: 128
          }
        },
        line: 178
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 181,
            column: 55
          },
          end: {
            line: 181,
            column: 56
          }
        },
        loc: {
          start: {
            line: 181,
            column: 64
          },
          end: {
            line: 181,
            column: 114
          }
        },
        line: 181
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 181,
            column: 82
          },
          end: {
            line: 181,
            column: 83
          }
        },
        loc: {
          start: {
            line: 181,
            column: 89
          },
          end: {
            line: 181,
            column: 113
          }
        },
        line: 181
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 184,
            column: 55
          },
          end: {
            line: 184,
            column: 56
          }
        },
        loc: {
          start: {
            line: 184,
            column: 64
          },
          end: {
            line: 184,
            column: 105
          }
        },
        line: 184
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 187,
            column: 56
          }
        },
        loc: {
          start: {
            line: 187,
            column: 64
          },
          end: {
            line: 187,
            column: 106
          }
        },
        line: 187
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 192,
            column: 32
          },
          end: {
            line: 192,
            column: 33
          }
        },
        loc: {
          start: {
            line: 192,
            column: 42
          },
          end: {
            line: 222,
            column: 13
          }
        },
        line: 192
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 44
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 242
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 286,
            column: 74
          },
          end: {
            line: 286,
            column: 75
          }
        },
        loc: {
          start: {
            line: 286,
            column: 79
          },
          end: {
            line: 286,
            column: 101
          }
        },
        line: 286
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 287,
            column: 74
          },
          end: {
            line: 287,
            column: 75
          }
        },
        loc: {
          start: {
            line: 287,
            column: 79
          },
          end: {
            line: 287,
            column: 101
          }
        },
        line: 287
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        loc: {
          start: {
            line: 306,
            column: 43
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 306
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 327,
            column: 5
          }
        },
        loc: {
          start: {
            line: 327,
            column: 54
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 327
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 36
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 354
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 46
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 360
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 28
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 386
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 388,
            column: 43
          },
          end: {
            line: 388,
            column: 44
          }
        },
        loc: {
          start: {
            line: 388,
            column: 59
          },
          end: {
            line: 391,
            column: 9
          }
        },
        line: 388
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 392,
            column: 45
          },
          end: {
            line: 392,
            column: 46
          }
        },
        loc: {
          start: {
            line: 392,
            column: 61
          },
          end: {
            line: 395,
            column: 9
          }
        },
        line: 392
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 396,
            column: 40
          },
          end: {
            line: 396,
            column: 41
          }
        },
        loc: {
          start: {
            line: 396,
            column: 56
          },
          end: {
            line: 396,
            column: 75
          }
        },
        line: 396
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 398,
            column: 17
          },
          end: {
            line: 398,
            column: 18
          }
        },
        loc: {
          start: {
            line: 398,
            column: 27
          },
          end: {
            line: 398,
            column: 101
          }
        },
        line: 398
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 399,
            column: 18
          },
          end: {
            line: 399,
            column: 19
          }
        },
        loc: {
          start: {
            line: 399,
            column: 28
          },
          end: {
            line: 399,
            column: 57
          }
        },
        line: 399
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 402,
            column: 18
          },
          end: {
            line: 402,
            column: 19
          }
        },
        loc: {
          start: {
            line: 402,
            column: 28
          },
          end: {
            line: 402,
            column: 75
          }
        },
        line: 402
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 35
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 414
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 39
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 418
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 40
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 432
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 50
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 442
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 444,
            column: 58
          },
          end: {
            line: 444,
            column: 59
          }
        },
        loc: {
          start: {
            line: 444,
            column: 68
          },
          end: {
            line: 450,
            column: 9
          }
        },
        line: 444
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 60
          },
          end: {
            line: 483,
            column: 5
          }
        },
        line: 453
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 484,
            column: 4
          },
          end: {
            line: 484,
            column: 5
          }
        },
        loc: {
          start: {
            line: 484,
            column: 51
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 484
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 34
          },
          end: {
            line: 528,
            column: 5
          }
        },
        line: 517
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 529,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        },
        loc: {
          start: {
            line: 529,
            column: 33
          },
          end: {
            line: 541,
            column: 5
          }
        },
        line: 529
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 542,
            column: 4
          },
          end: {
            line: 542,
            column: 5
          }
        },
        loc: {
          start: {
            line: 542,
            column: 37
          },
          end: {
            line: 558,
            column: 5
          }
        },
        line: 542
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 5
          }
        },
        loc: {
          start: {
            line: 559,
            column: 34
          },
          end: {
            line: 570,
            column: 5
          }
        },
        line: 559
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 17,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 17,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "3": {
        loc: {
          start: {
            line: 97,
            column: 32
          },
          end: {
            line: 97,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 32
          },
          end: {
            line: 97,
            column: 47
          }
        }, {
          start: {
            line: 97,
            column: 51
          },
          end: {
            line: 97,
            column: 92
          }
        }],
        line: 97
      },
      "4": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "5": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 29
          }
        }, {
          start: {
            line: 105,
            column: 33
          },
          end: {
            line: 105,
            column: 52
          }
        }, {
          start: {
            line: 105,
            column: 56
          },
          end: {
            line: 105,
            column: 78
          }
        }],
        line: 105
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 111,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 111,
            column: 60
          }
        }, {
          start: {
            line: 111,
            column: 64
          },
          end: {
            line: 111,
            column: 66
          }
        }],
        line: 111
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 24
          },
          end: {
            line: 123,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 42
          },
          end: {
            line: 123,
            column: 65
          }
        }, {
          start: {
            line: 123,
            column: 68
          },
          end: {
            line: 123,
            column: 92
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "10": {
        loc: {
          start: {
            line: 147,
            column: 60
          },
          end: {
            line: 149,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 60
          },
          end: {
            line: 147,
            column: 100
          }
        }, {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 148,
            column: 63
          }
        }, {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 73
          }
        }],
        line: 147
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "13": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "14": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "15": {
        loc: {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 163,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 163,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "16": {
        loc: {
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 162,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 162,
            column: 49
          }
        }, {
          start: {
            line: 162,
            column: 53
          },
          end: {
            line: 162,
            column: 94
          }
        }],
        line: 162
      },
      "17": {
        loc: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 165,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 165,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "18": {
        loc: {
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 49
          }
        }, {
          start: {
            line: 164,
            column: 53
          },
          end: {
            line: 164,
            column: 94
          }
        }],
        line: 164
      },
      "19": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "20": {
        loc: {
          start: {
            line: 173,
            column: 31
          },
          end: {
            line: 173,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 31
          },
          end: {
            line: 173,
            column: 50
          }
        }, {
          start: {
            line: 173,
            column: 54
          },
          end: {
            line: 173,
            column: 72
          }
        }],
        line: 173
      },
      "21": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "22": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "23": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "24": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 195,
            column: 20
          },
          end: {
            line: 198,
            column: 30
          }
        }, {
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 202,
            column: 30
          }
        }, {
          start: {
            line: 203,
            column: 20
          },
          end: {
            line: 206,
            column: 30
          }
        }, {
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 210,
            column: 30
          }
        }, {
          start: {
            line: 211,
            column: 20
          },
          end: {
            line: 214,
            column: 30
          }
        }, {
          start: {
            line: 215,
            column: 20
          },
          end: {
            line: 216,
            column: 33
          }
        }],
        line: 194
      },
      "27": {
        loc: {
          start: {
            line: 208,
            column: 31
          },
          end: {
            line: 208,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 31
          },
          end: {
            line: 208,
            column: 61
          }
        }, {
          start: {
            line: 208,
            column: 65
          },
          end: {
            line: 208,
            column: 66
          }
        }],
        line: 208
      },
      "28": {
        loc: {
          start: {
            line: 209,
            column: 31
          },
          end: {
            line: 209,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 31
          },
          end: {
            line: 209,
            column: 61
          }
        }, {
          start: {
            line: 209,
            column: 65
          },
          end: {
            line: 209,
            column: 66
          }
        }],
        line: 209
      },
      "29": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 220,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 220,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "30": {
        loc: {
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 219,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 41
          },
          end: {
            line: 219,
            column: 42
          }
        }, {
          start: {
            line: 219,
            column: 45
          },
          end: {
            line: 219,
            column: 47
          }
        }],
        line: 219
      },
      "31": {
        loc: {
          start: {
            line: 221,
            column: 23
          },
          end: {
            line: 221,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 37
          },
          end: {
            line: 221,
            column: 38
          }
        }, {
          start: {
            line: 221,
            column: 41
          },
          end: {
            line: 221,
            column: 43
          }
        }],
        line: 221
      },
      "32": {
        loc: {
          start: {
            line: 225,
            column: 22
          },
          end: {
            line: 225,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 22
          },
          end: {
            line: 225,
            column: 40
          }
        }, {
          start: {
            line: 225,
            column: 44
          },
          end: {
            line: 225,
            column: 46
          }
        }],
        line: 225
      },
      "33": {
        loc: {
          start: {
            line: 226,
            column: 23
          },
          end: {
            line: 226,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 23
          },
          end: {
            line: 226,
            column: 42
          }
        }, {
          start: {
            line: 226,
            column: 46
          },
          end: {
            line: 226,
            column: 47
          }
        }],
        line: 226
      },
      "34": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "35": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 19
          }
        }, {
          start: {
            line: 245,
            column: 23
          },
          end: {
            line: 245,
            column: 30
          }
        }],
        line: 245
      },
      "36": {
        loc: {
          start: {
            line: 266,
            column: 27
          },
          end: {
            line: 266,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 27
          },
          end: {
            line: 266,
            column: 61
          }
        }, {
          start: {
            line: 266,
            column: 65
          },
          end: {
            line: 266,
            column: 66
          }
        }],
        line: 266
      },
      "37": {
        loc: {
          start: {
            line: 267,
            column: 27
          },
          end: {
            line: 267,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 27
          },
          end: {
            line: 267,
            column: 61
          }
        }, {
          start: {
            line: 267,
            column: 65
          },
          end: {
            line: 267,
            column: 66
          }
        }],
        line: 267
      },
      "38": {
        loc: {
          start: {
            line: 268,
            column: 35
          },
          end: {
            line: 268,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 50
          },
          end: {
            line: 268,
            column: 84
          }
        }, {
          start: {
            line: 268,
            column: 87
          },
          end: {
            line: 268,
            column: 88
          }
        }],
        line: 268
      },
      "39": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: 274,
            column: 17
          },
          end: {
            line: 277,
            column: 13
          }
        }],
        line: 270
      },
      "40": {
        loc: {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 49
          }
        }, {
          start: {
            line: 270,
            column: 53
          },
          end: {
            line: 270,
            column: 81
          }
        }],
        line: 270
      },
      "41": {
        loc: {
          start: {
            line: 272,
            column: 25
          },
          end: {
            line: 272,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 43
          },
          end: {
            line: 272,
            column: 52
          }
        }, {
          start: {
            line: 272,
            column: 56
          },
          end: {
            line: 272,
            column: 91
          }
        }],
        line: 272
      },
      "42": {
        loc: {
          start: {
            line: 272,
            column: 56
          },
          end: {
            line: 272,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 74
          },
          end: {
            line: 272,
            column: 83
          }
        }, {
          start: {
            line: 272,
            column: 86
          },
          end: {
            line: 272,
            column: 91
          }
        }],
        line: 272
      },
      "43": {
        loc: {
          start: {
            line: 276,
            column: 25
          },
          end: {
            line: 276,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 43
          },
          end: {
            line: 276,
            column: 52
          }
        }, {
          start: {
            line: 276,
            column: 56
          },
          end: {
            line: 276,
            column: 91
          }
        }],
        line: 276
      },
      "44": {
        loc: {
          start: {
            line: 276,
            column: 56
          },
          end: {
            line: 276,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 74
          },
          end: {
            line: 276,
            column: 83
          }
        }, {
          start: {
            line: 276,
            column: 86
          },
          end: {
            line: 276,
            column: 91
          }
        }],
        line: 276
      },
      "45": {
        loc: {
          start: {
            line: 288,
            column: 52
          },
          end: {
            line: 288,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 68
          },
          end: {
            line: 288,
            column: 76
          }
        }, {
          start: {
            line: 288,
            column: 80
          },
          end: {
            line: 288,
            column: 112
          }
        }],
        line: 288
      },
      "46": {
        loc: {
          start: {
            line: 288,
            column: 80
          },
          end: {
            line: 288,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 96
          },
          end: {
            line: 288,
            column: 104
          }
        }, {
          start: {
            line: 288,
            column: 107
          },
          end: {
            line: 288,
            column: 112
          }
        }],
        line: 288
      },
      "47": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "48": {
        loc: {
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "49": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: 337,
            column: 13
          },
          end: {
            line: 339,
            column: 9
          }
        }],
        line: 334
      },
      "50": {
        loc: {
          start: {
            line: 346,
            column: 55
          },
          end: {
            line: 346,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 55
          },
          end: {
            line: 346,
            column: 98
          }
        }, {
          start: {
            line: 346,
            column: 102
          },
          end: {
            line: 346,
            column: 103
          }
        }],
        line: 346
      },
      "51": {
        loc: {
          start: {
            line: 355,
            column: 15
          },
          end: {
            line: 355,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 15
          },
          end: {
            line: 355,
            column: 46
          }
        }, {
          start: {
            line: 355,
            column: 50
          },
          end: {
            line: 355,
            column: 52
          }
        }],
        line: 355
      },
      "52": {
        loc: {
          start: {
            line: 360,
            column: 31
          },
          end: {
            line: 360,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 360,
            column: 39
          },
          end: {
            line: 360,
            column: 44
          }
        }],
        line: 360
      },
      "53": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "54": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "55": {
        loc: {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 366,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 366,
            column: 55
          }
        }, {
          start: {
            line: 366,
            column: 59
          },
          end: {
            line: 366,
            column: 65
          }
        }],
        line: 366
      },
      "56": {
        loc: {
          start: {
            line: 389,
            column: 37
          },
          end: {
            line: 389,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 37
          },
          end: {
            line: 389,
            column: 58
          }
        }, {
          start: {
            line: 389,
            column: 62
          },
          end: {
            line: 389,
            column: 63
          }
        }],
        line: 389
      },
      "57": {
        loc: {
          start: {
            line: 393,
            column: 49
          },
          end: {
            line: 393,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 49
          },
          end: {
            line: 393,
            column: 82
          }
        }, {
          start: {
            line: 393,
            column: 86
          },
          end: {
            line: 393,
            column: 87
          }
        }],
        line: 393
      },
      "58": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "59": {
        loc: {
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 419,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 419,
            column: 27
          }
        }, {
          start: {
            line: 419,
            column: 31
          },
          end: {
            line: 419,
            column: 65
          }
        }],
        line: 419
      },
      "60": {
        loc: {
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "61": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 30
          }
        }, {
          start: {
            line: 422,
            column: 34
          },
          end: {
            line: 422,
            column: 71
          }
        }],
        line: 422
      },
      "62": {
        loc: {
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "63": {
        loc: {
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 425,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 425,
            column: 33
          }
        }, {
          start: {
            line: 425,
            column: 37
          },
          end: {
            line: 425,
            column: 122
          }
        }],
        line: 425
      },
      "64": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "65": {
        loc: {
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 449,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 449,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "66": {
        loc: {
          start: {
            line: 447,
            column: 16
          },
          end: {
            line: 447,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 447,
            column: 16
          },
          end: {
            line: 447,
            column: 38
          }
        }, {
          start: {
            line: 447,
            column: 42
          },
          end: {
            line: 447,
            column: 64
          }
        }],
        line: 447
      },
      "67": {
        loc: {
          start: {
            line: 456,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        }, {
          start: {
            line: 459,
            column: 13
          },
          end: {
            line: 461,
            column: 9
          }
        }],
        line: 456
      },
      "68": {
        loc: {
          start: {
            line: 459,
            column: 13
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 13
          },
          end: {
            line: 461,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "69": {
        loc: {
          start: {
            line: 463,
            column: 26
          },
          end: {
            line: 463,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 463,
            column: 26
          },
          end: {
            line: 463,
            column: 61
          }
        }, {
          start: {
            line: 463,
            column: 65
          },
          end: {
            line: 463,
            column: 66
          }
        }],
        line: 463
      },
      "70": {
        loc: {
          start: {
            line: 464,
            column: 26
          },
          end: {
            line: 464,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 26
          },
          end: {
            line: 464,
            column: 61
          }
        }, {
          start: {
            line: 464,
            column: 65
          },
          end: {
            line: 464,
            column: 66
          }
        }],
        line: 464
      },
      "71": {
        loc: {
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: 468,
            column: 13
          },
          end: {
            line: 470,
            column: 9
          }
        }],
        line: 465
      },
      "72": {
        loc: {
          start: {
            line: 468,
            column: 13
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 13
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "73": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "74": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 474,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 474,
            column: 20
          }
        }, {
          start: {
            line: 474,
            column: 24
          },
          end: {
            line: 474,
            column: 32
          }
        }],
        line: 474
      },
      "75": {
        loc: {
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: 478,
            column: 17
          },
          end: {
            line: 480,
            column: 13
          }
        }],
        line: 475
      },
      "76": {
        loc: {
          start: {
            line: 478,
            column: 17
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 17
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "77": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 494,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 494,
            column: 9
          }
        }, {
          start: {
            line: 491,
            column: 13
          },
          end: {
            line: 494,
            column: 9
          }
        }],
        line: 487
      },
      "78": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "79": {
        loc: {
          start: {
            line: 498,
            column: 12
          },
          end: {
            line: 498,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 498,
            column: 12
          },
          end: {
            line: 498,
            column: 20
          }
        }, {
          start: {
            line: 498,
            column: 24
          },
          end: {
            line: 498,
            column: 32
          }
        }],
        line: 498
      },
      "80": {
        loc: {
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 506,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 506,
            column: 13
          }
        }, {
          start: {
            line: 503,
            column: 17
          },
          end: {
            line: 506,
            column: 13
          }
        }],
        line: 499
      },
      "81": {
        loc: {
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 514,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 514,
            column: 9
          }
        }, {
          start: {
            line: 512,
            column: 13
          },
          end: {
            line: 514,
            column: 9
          }
        }],
        line: 509
      },
      "82": {
        loc: {
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 509,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 509,
            column: 47
          }
        }, {
          start: {
            line: 509,
            column: 51
          },
          end: {
            line: 509,
            column: 87
          }
        }],
        line: 509
      },
      "83": {
        loc: {
          start: {
            line: 512,
            column: 13
          },
          end: {
            line: 514,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 512,
            column: 13
          },
          end: {
            line: 514,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 512
      },
      "84": {
        loc: {
          start: {
            line: 512,
            column: 17
          },
          end: {
            line: 512,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 17
          },
          end: {
            line: 512,
            column: 52
          }
        }, {
          start: {
            line: 512,
            column: 56
          },
          end: {
            line: 512,
            column: 92
          }
        }],
        line: 512
      },
      "85": {
        loc: {
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 551,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 551,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 546
      },
      "86": {
        loc: {
          start: {
            line: 549,
            column: 58
          },
          end: {
            line: 549,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 549,
            column: 70
          },
          end: {
            line: 549,
            column: 79
          }
        }, {
          start: {
            line: 549,
            column: 82
          },
          end: {
            line: 549,
            column: 93
          }
        }],
        line: 549
      },
      "87": {
        loc: {
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 562,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 562,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 561
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/training/ModelRegistry.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/training/ModelRegistry.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { EventStore } from '../analytics/EventStore';\nimport { createHash } from 'crypto';\nimport * as tf from '@tensorflow/tfjs-node';\n\nexport interface ModelMetadata {\n  id: string;\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license: string;\n  tags: string[];\n  created_at: Date;\n  updated_at: Date;\n  model_type: 'foundation' | 'fine_tuned' | 'specialized' | 'custom';\n  base_model?: string;\n  training_job_id?: string;\n  size_mb: number;\n  parameter_count: number;\n  architecture: {\n    model_family: string;\n    layers: number;\n    hidden_size: number;\n    attention_heads: number;\n    vocab_size: number;\n    max_sequence_length: number;\n  };\n  capabilities: {\n    text_generation: boolean;\n    text_classification: boolean;\n    question_answering: boolean;\n    summarization: boolean;\n    code_generation: boolean;\n    embedding_generation: boolean;\n    multimodal: boolean;\n  };\n  performance_metrics: {\n    accuracy?: number;\n    f1_score?: number;\n    bleu_score?: number;\n    rouge_score?: number;\n    perplexity?: number;\n    inference_latency_ms: number;\n    throughput_tokens_per_sec: number;\n    memory_usage_mb: number;\n  };\n  deployment_info: {\n    status: 'pending' | 'deployed' | 'deprecated' | 'failed';\n    deployed_at?: Date;\n    deployment_target?: string;\n    endpoint?: string;\n    health_status?: 'healthy' | 'degraded' | 'unhealthy';\n    last_health_check?: Date;\n  };\n  usage_statistics: {\n    total_requests: number;\n    successful_requests: number;\n    failed_requests: number;\n    average_response_time: number;\n    last_used: Date;\n    daily_usage: Record<string, number>;\n  };\n  checksum: string;\n  file_path?: string;\n  config_path?: string;\n  tokenizer_path?: string;\n}\n\nexport interface ModelVersion {\n  version: string;\n  changelog: string;\n  created_at: Date;\n  performance_delta: Record<string, number>;\n  backward_compatible: boolean;\n  migration_notes?: string;\n}\n\nexport interface ModelComparison {\n  model_a: string;\n  model_b: string;\n  comparison_date: Date;\n  metrics_comparison: Record<string, {\n    model_a_value: number;\n    model_b_value: number;\n    percentage_diff: number;\n    winner: 'model_a' | 'model_b' | 'tie';\n  }>;\n  benchmark_results: Record<string, any>;\n  recommendation: {\n    preferred_model: string;\n    reasoning: string[];\n    use_case_recommendations: Record<string, string>;\n  };\n}\n\nexport interface ModelSearch {\n  query?: string;\n  filters: {\n    model_type?: string[];\n    capabilities?: string[];\n    size_range?: { min_mb?: number; max_mb?: number };\n    performance_threshold?: Record<string, number>;\n    deployment_status?: string[];\n    tags?: string[];\n    created_after?: Date;\n    created_before?: Date;\n  };\n  sort_by?: 'name' | 'created_at' | 'size_mb' | 'performance' | 'usage';\n  sort_order?: 'asc' | 'desc';\n  limit?: number;\n  offset?: number;\n}\n\nexport class ModelRegistry extends EventEmitter {\n  private eventStore: EventStore;\n  private models: Map<string, ModelMetadata>;\n  private modelVersions: Map<string, ModelVersion[]>;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.eventStore = EventStore.getInstance();\n    this.models = new Map();\n    this.modelVersions = new Map();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('\uD83D\uDD04 Initializing Model Registry...');\n      \n      // Load existing models from storage\n      await this.loadModelsFromStorage();\n      \n      // Verify model integrity\n      await this.verifyModelIntegrity();\n      \n      // Update deployment statuses\n      await this.updateDeploymentStatuses();\n      \n      this.isInitialized = true;\n      console.log('\u2705 Model Registry initialized successfully');\n      \n      this.emit('initialized', {\n        total_models: this.models.size,\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.error('\u274C Failed to initialize Model Registry:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new model\n   */\n  async registerModel(modelData: Omit<ModelMetadata, 'id' | 'created_at' | 'updated_at' | 'checksum'>): Promise<ModelMetadata> {\n    const modelId = this.generateModelId(modelData.name, modelData.version);\n    \n    // Validate model data\n    await this.validateModelData(modelData);\n    \n    // Calculate checksum\n    const checksum = await this.calculateModelChecksum(modelData);\n    \n    const model: ModelMetadata = {\n      ...modelData,\n      id: modelId,\n      created_at: new Date(),\n      updated_at: new Date(),\n      checksum,\n      usage_statistics: {\n        total_requests: 0,\n        successful_requests: 0,\n        failed_requests: 0,\n        average_response_time: 0,\n        last_used: new Date(),\n        daily_usage: {}\n      }\n    };\n\n    // Check for duplicate\n    if (this.models.has(modelId)) {\n      throw new Error(`Model with ID ${modelId} already exists`);\n    }\n\n    // Store model\n    this.models.set(modelId, model);\n    \n    // Initialize version history\n    this.modelVersions.set(modelId, [{\n      version: model.version,\n      changelog: 'Initial registration',\n      created_at: new Date(),\n      performance_delta: {},\n      backward_compatible: true\n    }]);\n\n    // Record registration event\n    await this.eventStore.recordEvent({\n      event_type: 'model_registered',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: model,\n      timestamp: new Date()\n    });\n\n    console.log(`\uD83D\uDCDD Registered model: ${model.name} v${model.version}`);\n    this.emit('modelRegistered', { model });\n\n    return model;\n  }\n\n  /**\n   * Update model metadata\n   */\n  async updateModel(modelId: string, updates: Partial<ModelMetadata>): Promise<ModelMetadata> {\n    const existingModel = this.models.get(modelId);\n    if (!existingModel) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Create new version if version number changed\n    const isVersionUpdate = updates.version && updates.version !== existingModel.version;\n    \n    const updatedModel: ModelMetadata = {\n      ...existingModel,\n      ...updates,\n      id: modelId, // Ensure ID doesn't change\n      updated_at: new Date()\n    };\n\n    // Recalculate checksum if content changed\n    if (updates.file_path || updates.config_path || updates.tokenizer_path) {\n      updatedModel.checksum = await this.calculateModelChecksum(updatedModel);\n    }\n\n    this.models.set(modelId, updatedModel);\n\n    // Add version history entry\n    if (isVersionUpdate) {\n      const versions = this.modelVersions.get(modelId) || [];\n      versions.push({\n        version: updatedModel.version,\n        changelog: 'Model updated',\n        created_at: new Date(),\n        performance_delta: this.calculatePerformanceDelta(existingModel, updatedModel),\n        backward_compatible: true // Should be determined by analysis\n      });\n      this.modelVersions.set(modelId, versions);\n    }\n\n    // Record update event\n    await this.eventStore.recordEvent({\n      event_type: isVersionUpdate ? 'model_version_updated' : 'model_metadata_updated',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: { updates, new_version: isVersionUpdate },\n      timestamp: new Date()\n    });\n\n    console.log(`\uD83D\uDCDD Updated model: ${updatedModel.name} v${updatedModel.version}`);\n    this.emit('modelUpdated', { model: updatedModel, isVersionUpdate });\n\n    return updatedModel;\n  }\n\n  /**\n   * Get model by ID\n   */\n  getModel(modelId: string): ModelMetadata | undefined {\n    return this.models.get(modelId);\n  }\n\n  /**\n   * Search models\n   */\n  searchModels(searchParams: ModelSearch): {\n    models: ModelMetadata[];\n    total_count: number;\n    pagination: {\n      limit: number;\n      offset: number;\n      has_more: boolean;\n    };\n  } {\n    let filteredModels = Array.from(this.models.values());\n\n    // Apply text search\n    if (searchParams.query) {\n      const query = searchParams.query.toLowerCase();\n      filteredModels = filteredModels.filter(model => \n        model.name.toLowerCase().includes(query) ||\n        model.description.toLowerCase().includes(query) ||\n        model.tags.some(tag => tag.toLowerCase().includes(query))\n      );\n    }\n\n    // Apply filters\n    if (searchParams.filters) {\n      const { filters } = searchParams;\n\n      if (filters.model_type?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.model_type!.includes(model.model_type)\n        );\n      }\n\n      if (filters.capabilities?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.capabilities!.some(cap => model.capabilities[cap])\n        );\n      }\n\n      if (filters.size_range) {\n        filteredModels = filteredModels.filter(model => {\n          if (filters.size_range!.min_mb && model.size_mb < filters.size_range!.min_mb) return false;\n          if (filters.size_range!.max_mb && model.size_mb > filters.size_range!.max_mb) return false;\n          return true;\n        });\n      }\n\n      if (filters.performance_threshold) {\n        filteredModels = filteredModels.filter(model => {\n          return Object.entries(filters.performance_threshold!).every(([metric, threshold]) => {\n            const value = model.performance_metrics[metric];\n            return value !== undefined && value >= threshold;\n          });\n        });\n      }\n\n      if (filters.deployment_status?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.deployment_status!.includes(model.deployment_info.status)\n        );\n      }\n\n      if (filters.tags?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.tags!.some(tag => model.tags.includes(tag))\n        );\n      }\n\n      if (filters.created_after) {\n        filteredModels = filteredModels.filter(model => \n          model.created_at >= filters.created_after!\n        );\n      }\n\n      if (filters.created_before) {\n        filteredModels = filteredModels.filter(model => \n          model.created_at <= filters.created_before!\n        );\n      }\n    }\n\n    // Apply sorting\n    if (searchParams.sort_by) {\n      filteredModels.sort((a, b) => {\n        let aVal: any, bVal: any;\n        \n        switch (searchParams.sort_by) {\n          case 'name':\n            aVal = a.name;\n            bVal = b.name;\n            break;\n          case 'created_at':\n            aVal = a.created_at.getTime();\n            bVal = b.created_at.getTime();\n            break;\n          case 'size_mb':\n            aVal = a.size_mb;\n            bVal = b.size_mb;\n            break;\n          case 'performance':\n            aVal = a.performance_metrics.accuracy || 0;\n            bVal = b.performance_metrics.accuracy || 0;\n            break;\n          case 'usage':\n            aVal = a.usage_statistics.total_requests;\n            bVal = b.usage_statistics.total_requests;\n            break;\n          default:\n            return 0;\n        }\n\n        if (searchParams.sort_order === 'desc') {\n          return aVal < bVal ? 1 : -1;\n        }\n        return aVal > bVal ? 1 : -1;\n      });\n    }\n\n    // Apply pagination\n    const limit = searchParams.limit || 20;\n    const offset = searchParams.offset || 0;\n    const paginatedModels = filteredModels.slice(offset, offset + limit);\n    const hasMore = offset + limit < filteredModels.length;\n\n    return {\n      models: paginatedModels,\n      total_count: filteredModels.length,\n      pagination: {\n        limit,\n        offset,\n        has_more: hasMore\n      }\n    };\n  }\n\n  /**\n   * Compare two models\n   */\n  async compareModels(modelAId: string, modelBId: string): Promise<ModelComparison> {\n    const modelA = this.models.get(modelAId);\n    const modelB = this.models.get(modelBId);\n\n    if (!modelA || !modelB) {\n      throw new Error('One or both models not found');\n    }\n\n    const comparison: ModelComparison = {\n      model_a: modelAId,\n      model_b: modelBId,\n      comparison_date: new Date(),\n      metrics_comparison: {},\n      benchmark_results: {},\n      recommendation: {\n        preferred_model: '',\n        reasoning: [],\n        use_case_recommendations: {}\n      }\n    };\n\n    // Compare performance metrics\n    const allMetrics = new Set([\n      ...Object.keys(modelA.performance_metrics),\n      ...Object.keys(modelB.performance_metrics)\n    ]);\n\n    for (const metric of allMetrics) {\n      const aValue = modelA.performance_metrics[metric] || 0;\n      const bValue = modelB.performance_metrics[metric] || 0;\n      const percentageDiff = bValue !== 0 ? ((aValue - bValue) / bValue) * 100 : 0;\n      \n      let winner: 'model_a' | 'model_b' | 'tie' = 'tie';\n      if (metric === 'inference_latency_ms' || metric === 'memory_usage_mb') {\n        // Lower is better for latency and memory\n        winner = aValue < bValue ? 'model_a' : (aValue > bValue ? 'model_b' : 'tie');\n      } else {\n        // Higher is better for other metrics\n        winner = aValue > bValue ? 'model_a' : (aValue < bValue ? 'model_b' : 'tie');\n      }\n\n      comparison.metrics_comparison[metric] = {\n        model_a_value: aValue,\n        model_b_value: bValue,\n        percentage_diff: percentageDiff,\n        winner\n      };\n    }\n\n    // Generate recommendation\n    const aWins = Object.values(comparison.metrics_comparison).filter(m => m.winner === 'model_a').length;\n    const bWins = Object.values(comparison.metrics_comparison).filter(m => m.winner === 'model_b').length;\n    \n    comparison.recommendation.preferred_model = aWins > bWins ? modelAId : (bWins > aWins ? modelBId : 'tie');\n    \n    // Generate reasoning\n    comparison.recommendation.reasoning = this.generateComparisonReasoning(modelA, modelB, comparison);\n    \n    // Generate use case recommendations\n    comparison.recommendation.use_case_recommendations = this.generateUseCaseRecommendations(modelA, modelB);\n\n    // Record comparison event\n    await this.eventStore.recordEvent({\n      event_type: 'models_compared',\n      entity_id: `${modelAId}_vs_${modelBId}`,\n      entity_type: 'comparison',\n      data: comparison,\n      timestamp: new Date()\n    });\n\n    return comparison;\n  }\n\n  /**\n   * Get model usage statistics\n   */\n  getModelUsageStats(modelId: string, timeRange?: { start: Date; end: Date }): {\n    total_requests: number;\n    success_rate: number;\n    average_response_time: number;\n    usage_trend: Record<string, number>;\n    top_error_types: Array<{ error_type: string; count: number }>;\n  } {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // This would typically query actual usage data from logs/analytics\n    return {\n      total_requests: model.usage_statistics.total_requests,\n      success_rate: model.usage_statistics.successful_requests / model.usage_statistics.total_requests * 100,\n      average_response_time: model.usage_statistics.average_response_time,\n      usage_trend: model.usage_statistics.daily_usage,\n      top_error_types: [\n        { error_type: 'timeout', count: 12 },\n        { error_type: 'rate_limit', count: 8 },\n        { error_type: 'invalid_input', count: 5 }\n      ]\n    };\n  }\n\n  /**\n   * Update model usage statistics\n   */\n  async updateUsageStatistics(\n    modelId: string,\n    requestData: {\n      success: boolean;\n      response_time: number;\n      error_type?: string;\n      timestamp: Date;\n    }\n  ): Promise<void> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Update statistics\n    model.usage_statistics.total_requests++;\n    if (requestData.success) {\n      model.usage_statistics.successful_requests++;\n    } else {\n      model.usage_statistics.failed_requests++;\n    }\n\n    // Update average response time (exponential moving average)\n    const alpha = 0.1; // Smoothing factor\n    model.usage_statistics.average_response_time = \n      alpha * requestData.response_time + (1 - alpha) * model.usage_statistics.average_response_time;\n\n    // Update daily usage\n    const dateKey = requestData.timestamp.toISOString().split('T')[0];\n    model.usage_statistics.daily_usage[dateKey] = (model.usage_statistics.daily_usage[dateKey] || 0) + 1;\n\n    model.usage_statistics.last_used = requestData.timestamp;\n    model.updated_at = new Date();\n\n    this.models.set(modelId, model);\n  }\n\n  /**\n   * Get model version history\n   */\n  getModelVersionHistory(modelId: string): ModelVersion[] {\n    return this.modelVersions.get(modelId) || [];\n  }\n\n  /**\n   * Delete model\n   */\n  async deleteModel(modelId: string, force: boolean = false): Promise<void> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Check if model is deployed\n    if (model.deployment_info.status === 'deployed' && !force) {\n      throw new Error(`Cannot delete deployed model ${modelId}. Use force=true to override.`);\n    }\n\n    // Remove from registry\n    this.models.delete(modelId);\n    this.modelVersions.delete(modelId);\n\n    // Record deletion event\n    await this.eventStore.recordEvent({\n      event_type: 'model_deleted',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: { model_name: model.name, force },\n      timestamp: new Date()\n    });\n\n    console.log(`\uD83D\uDDD1\uFE0F Deleted model: ${model.name} v${model.version}`);\n    this.emit('modelDeleted', { modelId, model });\n  }\n\n  /**\n   * Get registry statistics\n   */\n  getRegistryStatistics(): {\n    total_models: number;\n    models_by_type: Record<string, number>;\n    models_by_status: Record<string, number>;\n    total_size_mb: number;\n    most_used_models: Array<{ model_id: string; usage_count: number }>;\n    recent_registrations: ModelMetadata[];\n  } {\n    const models = Array.from(this.models.values());\n    \n    const modelsByType = models.reduce((acc, model) => {\n      acc[model.model_type] = (acc[model.model_type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const modelsByStatus = models.reduce((acc, model) => {\n      acc[model.deployment_info.status] = (acc[model.deployment_info.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const totalSize = models.reduce((sum, model) => sum + model.size_mb, 0);\n\n    const mostUsed = models\n      .map(model => ({ model_id: model.id, usage_count: model.usage_statistics.total_requests }))\n      .sort((a, b) => b.usage_count - a.usage_count)\n      .slice(0, 10);\n\n    const recentRegistrations = models\n      .sort((a, b) => b.created_at.getTime() - a.created_at.getTime())\n      .slice(0, 5);\n\n    return {\n      total_models: models.length,\n      models_by_type: modelsByType,\n      models_by_status: modelsByStatus,\n      total_size_mb: totalSize,\n      most_used_models: mostUsed,\n      recent_registrations: recentRegistrations\n    };\n  }\n\n  // Private methods\n  private generateModelId(name: string, version: string): string {\n    const content = `${name.toLowerCase().replace(/[^a-z0-9]/g, '_')}_${version}`;\n    return createHash('sha256').update(content).digest('hex').substring(0, 16);\n  }\n\n  private async validateModelData(modelData: any): Promise<void> {\n    if (!modelData.name || modelData.name.trim().length === 0) {\n      throw new Error('Model name is required');\n    }\n\n    if (!modelData.version || modelData.version.trim().length === 0) {\n      throw new Error('Model version is required');\n    }\n\n    if (!modelData.model_type || !['foundation', 'fine_tuned', 'specialized', 'custom'].includes(modelData.model_type)) {\n      throw new Error('Invalid model type');\n    }\n\n    if (modelData.size_mb <= 0) {\n      throw new Error('Model size must be greater than 0');\n    }\n  }\n\n  private async calculateModelChecksum(model: any): Promise<string> {\n    // In a real implementation, this would calculate checksum of the actual model files\n    const content = JSON.stringify({\n      name: model.name,\n      version: model.version,\n      architecture: model.architecture,\n      size_mb: model.size_mb\n    });\n    \n    return createHash('sha256').update(content).digest('hex');\n  }\n\n  private calculatePerformanceDelta(oldModel: ModelMetadata, newModel: ModelMetadata): Record<string, number> {\n    const delta: Record<string, number> = {};\n    \n    Object.keys(newModel.performance_metrics).forEach(metric => {\n      const oldValue = oldModel.performance_metrics[metric];\n      const newValue = newModel.performance_metrics[metric];\n      \n      if (oldValue !== undefined && newValue !== undefined) {\n        delta[metric] = newValue - oldValue;\n      }\n    });\n    \n    return delta;\n  }\n\n  private generateComparisonReasoning(modelA: ModelMetadata, modelB: ModelMetadata, comparison: ModelComparison): string[] {\n    const reasoning: string[] = [];\n    \n    // Size comparison\n    if (modelA.size_mb < modelB.size_mb * 0.8) {\n      reasoning.push(`${modelA.name} is significantly smaller (${modelA.size_mb}MB vs ${modelB.size_mb}MB), better for resource-constrained environments`);\n    } else if (modelB.size_mb < modelA.size_mb * 0.8) {\n      reasoning.push(`${modelB.name} is significantly smaller (${modelB.size_mb}MB vs ${modelA.size_mb}MB), better for resource-constrained environments`);\n    }\n    \n    // Performance comparison\n    const aAccuracy = modelA.performance_metrics.accuracy || 0;\n    const bAccuracy = modelB.performance_metrics.accuracy || 0;\n    \n    if (aAccuracy > bAccuracy * 1.1) {\n      reasoning.push(`${modelA.name} has significantly better accuracy (${(aAccuracy * 100).toFixed(1)}% vs ${(bAccuracy * 100).toFixed(1)}%)`);\n    } else if (bAccuracy > aAccuracy * 1.1) {\n      reasoning.push(`${modelB.name} has significantly better accuracy (${(bAccuracy * 100).toFixed(1)}% vs ${(aAccuracy * 100).toFixed(1)}%)`);\n    }\n    \n    // Latency comparison\n    const aLatency = modelA.performance_metrics.inference_latency_ms;\n    const bLatency = modelB.performance_metrics.inference_latency_ms;\n    \n    if (aLatency && bLatency) {\n      if (aLatency < bLatency * 0.8) {\n        reasoning.push(`${modelA.name} is significantly faster (${aLatency}ms vs ${bLatency}ms response time)`);\n      } else if (bLatency < aLatency * 0.8) {\n        reasoning.push(`${modelB.name} is significantly faster (${bLatency}ms vs ${aLatency}ms response time)`);\n      }\n    }\n    \n    return reasoning;\n  }\n\n  private generateUseCaseRecommendations(modelA: ModelMetadata, modelB: ModelMetadata): Record<string, string> {\n    const recommendations: Record<string, string> = {};\n    \n    // Size-based recommendations\n    if (modelA.size_mb < modelB.size_mb) {\n      recommendations['edge_deployment'] = modelA.name;\n      recommendations['mobile_applications'] = modelA.name;\n    } else {\n      recommendations['high_accuracy_tasks'] = modelB.name;\n      recommendations['server_deployment'] = modelB.name;\n    }\n    \n    // Performance-based recommendations\n    const aLatency = modelA.performance_metrics.inference_latency_ms;\n    const bLatency = modelB.performance_metrics.inference_latency_ms;\n    \n    if (aLatency && bLatency) {\n      if (aLatency < bLatency) {\n        recommendations['real_time_applications'] = modelA.name;\n        recommendations['interactive_systems'] = modelA.name;\n      } else {\n        recommendations['batch_processing'] = modelB.name;\n        recommendations['offline_analysis'] = modelB.name;\n      }\n    }\n    \n    // Capability-based recommendations\n    if (modelA.capabilities.code_generation && !modelB.capabilities.code_generation) {\n      recommendations['code_generation'] = modelA.name;\n    } else if (modelB.capabilities.code_generation && !modelA.capabilities.code_generation) {\n      recommendations['code_generation'] = modelB.name;\n    }\n    \n    return recommendations;\n  }\n\n  private async loadModelsFromStorage(): Promise<void> {\n    try {\n      // Load models from persistent storage (database, file system, etc.)\n      console.log('\uD83D\uDCE5 Loading models from storage...');\n      \n      // This would typically load from a database or file system\n      // For now, we'll initialize with empty registry\n      \n      console.log(`\u2705 Loaded ${this.models.size} models from storage`);\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to load models from storage:', error);\n    }\n  }\n\n  private async verifyModelIntegrity(): Promise<void> {\n    try {\n      console.log('\uD83D\uDD0D Verifying model integrity...');\n      \n      for (const [modelId, model] of this.models) {\n        // Verify checksums, file existence, etc.\n        // Mark models as corrupted if verification fails\n      }\n      \n      console.log('\u2705 Model integrity verification completed');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Model integrity verification failed:', error);\n    }\n  }\n\n  private async updateDeploymentStatuses(): Promise<void> {\n    try {\n      console.log('\uD83D\uDD04 Updating deployment statuses...');\n      \n      for (const [modelId, model] of this.models) {\n        if (model.deployment_info.status === 'deployed') {\n          // Check if model is actually healthy\n          const isHealthy = await this.checkModelHealth(model);\n          model.deployment_info.health_status = isHealthy ? 'healthy' : 'unhealthy';\n          model.deployment_info.last_health_check = new Date();\n        }\n      }\n      \n      console.log('\u2705 Deployment status update completed');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to update deployment statuses:', error);\n    }\n  }\n\n  private async checkModelHealth(model: ModelMetadata): Promise<boolean> {\n    try {\n      if (!model.deployment_info.endpoint) return false;\n      \n      // Perform actual health check against the deployed model\n      // This is a placeholder - implement actual health check logic\n      \n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const modelRegistry = new ModelRegistry();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2d310bb8908a21d7de4013010cfe32adf509151c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mywnac1o2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mywnac1o2();
cov_1mywnac1o2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mywnac1o2().s[1]++;
exports.modelRegistry = exports.ModelRegistry = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1mywnac1o2().s[2]++, require("events"));
const EventStore_1 =
/* istanbul ignore next */
(cov_1mywnac1o2().s[3]++, require("../analytics/EventStore"));
const crypto_1 =
/* istanbul ignore next */
(cov_1mywnac1o2().s[4]++, require("crypto"));
class ModelRegistry extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[0]++;
    cov_1mywnac1o2().s[5]++;
    super();
    /* istanbul ignore next */
    cov_1mywnac1o2().s[6]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_1mywnac1o2().s[7]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_1mywnac1o2().s[8]++;
    this.models = new Map();
    /* istanbul ignore next */
    cov_1mywnac1o2().s[9]++;
    this.modelVersions = new Map();
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[1]++;
    cov_1mywnac1o2().s[10]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[0][0]++;
      cov_1mywnac1o2().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[0][1]++;
    }
    cov_1mywnac1o2().s[12]++;
    try {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[13]++;
      console.log('🔄 Initializing Model Registry...');
      // Load existing models from storage
      /* istanbul ignore next */
      cov_1mywnac1o2().s[14]++;
      await this.loadModelsFromStorage();
      // Verify model integrity
      /* istanbul ignore next */
      cov_1mywnac1o2().s[15]++;
      await this.verifyModelIntegrity();
      // Update deployment statuses
      /* istanbul ignore next */
      cov_1mywnac1o2().s[16]++;
      await this.updateDeploymentStatuses();
      /* istanbul ignore next */
      cov_1mywnac1o2().s[17]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_1mywnac1o2().s[18]++;
      console.log('✅ Model Registry initialized successfully');
      /* istanbul ignore next */
      cov_1mywnac1o2().s[19]++;
      this.emit('initialized', {
        total_models: this.models.size,
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[20]++;
      console.error('❌ Failed to initialize Model Registry:', error);
      /* istanbul ignore next */
      cov_1mywnac1o2().s[21]++;
      throw error;
    }
  }
  /**
   * Register a new model
   */
  async registerModel(modelData) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[2]++;
    const modelId =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[22]++, this.generateModelId(modelData.name, modelData.version));
    // Validate model data
    /* istanbul ignore next */
    cov_1mywnac1o2().s[23]++;
    await this.validateModelData(modelData);
    // Calculate checksum
    const checksum =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[24]++, await this.calculateModelChecksum(modelData));
    const model =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[25]++, {
      ...modelData,
      id: modelId,
      created_at: new Date(),
      updated_at: new Date(),
      checksum,
      usage_statistics: {
        total_requests: 0,
        successful_requests: 0,
        failed_requests: 0,
        average_response_time: 0,
        last_used: new Date(),
        daily_usage: {}
      }
    });
    // Check for duplicate
    /* istanbul ignore next */
    cov_1mywnac1o2().s[26]++;
    if (this.models.has(modelId)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[1][0]++;
      cov_1mywnac1o2().s[27]++;
      throw new Error(`Model with ID ${modelId} already exists`);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[1][1]++;
    }
    // Store model
    cov_1mywnac1o2().s[28]++;
    this.models.set(modelId, model);
    // Initialize version history
    /* istanbul ignore next */
    cov_1mywnac1o2().s[29]++;
    this.modelVersions.set(modelId, [{
      version: model.version,
      changelog: 'Initial registration',
      created_at: new Date(),
      performance_delta: {},
      backward_compatible: true
    }]);
    // Record registration event
    /* istanbul ignore next */
    cov_1mywnac1o2().s[30]++;
    await this.eventStore.recordEvent({
      event_type: 'model_registered',
      entity_id: modelId,
      entity_type: 'model',
      data: model,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[31]++;
    console.log(`📝 Registered model: ${model.name} v${model.version}`);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[32]++;
    this.emit('modelRegistered', {
      model
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[33]++;
    return model;
  }
  /**
   * Update model metadata
   */
  async updateModel(modelId, updates) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[3]++;
    const existingModel =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[34]++, this.models.get(modelId));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[35]++;
    if (!existingModel) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[2][0]++;
      cov_1mywnac1o2().s[36]++;
      throw new Error(`Model ${modelId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[2][1]++;
    }
    // Create new version if version number changed
    const isVersionUpdate =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[37]++,
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[3][0]++, updates.version) &&
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[3][1]++, updates.version !== existingModel.version));
    const updatedModel =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[38]++, {
      ...existingModel,
      ...updates,
      id: modelId,
      // Ensure ID doesn't change
      updated_at: new Date()
    });
    // Recalculate checksum if content changed
    /* istanbul ignore next */
    cov_1mywnac1o2().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[5][0]++, updates.file_path) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[5][1]++, updates.config_path) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[5][2]++, updates.tokenizer_path)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[4][0]++;
      cov_1mywnac1o2().s[40]++;
      updatedModel.checksum = await this.calculateModelChecksum(updatedModel);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[4][1]++;
    }
    cov_1mywnac1o2().s[41]++;
    this.models.set(modelId, updatedModel);
    // Add version history entry
    /* istanbul ignore next */
    cov_1mywnac1o2().s[42]++;
    if (isVersionUpdate) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[6][0]++;
      const versions =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[43]++,
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[7][0]++, this.modelVersions.get(modelId)) ||
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[7][1]++, []));
      /* istanbul ignore next */
      cov_1mywnac1o2().s[44]++;
      versions.push({
        version: updatedModel.version,
        changelog: 'Model updated',
        created_at: new Date(),
        performance_delta: this.calculatePerformanceDelta(existingModel, updatedModel),
        backward_compatible: true // Should be determined by analysis
      });
      /* istanbul ignore next */
      cov_1mywnac1o2().s[45]++;
      this.modelVersions.set(modelId, versions);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[6][1]++;
    }
    // Record update event
    cov_1mywnac1o2().s[46]++;
    await this.eventStore.recordEvent({
      event_type: isVersionUpdate ?
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[8][0]++, 'model_version_updated') :
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[8][1]++, 'model_metadata_updated'),
      entity_id: modelId,
      entity_type: 'model',
      data: {
        updates,
        new_version: isVersionUpdate
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[47]++;
    console.log(`📝 Updated model: ${updatedModel.name} v${updatedModel.version}`);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[48]++;
    this.emit('modelUpdated', {
      model: updatedModel,
      isVersionUpdate
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[49]++;
    return updatedModel;
  }
  /**
   * Get model by ID
   */
  getModel(modelId) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[4]++;
    cov_1mywnac1o2().s[50]++;
    return this.models.get(modelId);
  }
  /**
   * Search models
   */
  searchModels(searchParams) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[5]++;
    let filteredModels =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[51]++, Array.from(this.models.values()));
    // Apply text search
    /* istanbul ignore next */
    cov_1mywnac1o2().s[52]++;
    if (searchParams.query) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[9][0]++;
      const query =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[53]++, searchParams.query.toLowerCase());
      /* istanbul ignore next */
      cov_1mywnac1o2().s[54]++;
      filteredModels = filteredModels.filter(model => {
        /* istanbul ignore next */
        cov_1mywnac1o2().f[6]++;
        cov_1mywnac1o2().s[55]++;
        return /* istanbul ignore next */(cov_1mywnac1o2().b[10][0]++, model.name.toLowerCase().includes(query)) ||
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[10][1]++, model.description.toLowerCase().includes(query)) ||
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[10][2]++, model.tags.some(tag => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[7]++;
          cov_1mywnac1o2().s[56]++;
          return tag.toLowerCase().includes(query);
        }));
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[9][1]++;
    }
    // Apply filters
    cov_1mywnac1o2().s[57]++;
    if (searchParams.filters) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[11][0]++;
      const {
        filters
      } =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[58]++, searchParams);
      /* istanbul ignore next */
      cov_1mywnac1o2().s[59]++;
      if (filters.model_type?.length) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[12][0]++;
        cov_1mywnac1o2().s[60]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[8]++;
          cov_1mywnac1o2().s[61]++;
          return filters.model_type.includes(model.model_type);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[12][1]++;
      }
      cov_1mywnac1o2().s[62]++;
      if (filters.capabilities?.length) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[13][0]++;
        cov_1mywnac1o2().s[63]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[9]++;
          cov_1mywnac1o2().s[64]++;
          return filters.capabilities.some(cap => {
            /* istanbul ignore next */
            cov_1mywnac1o2().f[10]++;
            cov_1mywnac1o2().s[65]++;
            return model.capabilities[cap];
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[13][1]++;
      }
      cov_1mywnac1o2().s[66]++;
      if (filters.size_range) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[14][0]++;
        cov_1mywnac1o2().s[67]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[11]++;
          cov_1mywnac1o2().s[68]++;
          if (
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[16][0]++, filters.size_range.min_mb) &&
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[16][1]++, model.size_mb < filters.size_range.min_mb)) {
            /* istanbul ignore next */
            cov_1mywnac1o2().b[15][0]++;
            cov_1mywnac1o2().s[69]++;
            return false;
          } else
          /* istanbul ignore next */
          {
            cov_1mywnac1o2().b[15][1]++;
          }
          cov_1mywnac1o2().s[70]++;
          if (
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[18][0]++, filters.size_range.max_mb) &&
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[18][1]++, model.size_mb > filters.size_range.max_mb)) {
            /* istanbul ignore next */
            cov_1mywnac1o2().b[17][0]++;
            cov_1mywnac1o2().s[71]++;
            return false;
          } else
          /* istanbul ignore next */
          {
            cov_1mywnac1o2().b[17][1]++;
          }
          cov_1mywnac1o2().s[72]++;
          return true;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[14][1]++;
      }
      cov_1mywnac1o2().s[73]++;
      if (filters.performance_threshold) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[19][0]++;
        cov_1mywnac1o2().s[74]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[12]++;
          cov_1mywnac1o2().s[75]++;
          return Object.entries(filters.performance_threshold).every(([metric, threshold]) => {
            /* istanbul ignore next */
            cov_1mywnac1o2().f[13]++;
            const value =
            /* istanbul ignore next */
            (cov_1mywnac1o2().s[76]++, model.performance_metrics[metric]);
            /* istanbul ignore next */
            cov_1mywnac1o2().s[77]++;
            return /* istanbul ignore next */(cov_1mywnac1o2().b[20][0]++, value !== undefined) &&
            /* istanbul ignore next */
            (cov_1mywnac1o2().b[20][1]++, value >= threshold);
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[19][1]++;
      }
      cov_1mywnac1o2().s[78]++;
      if (filters.deployment_status?.length) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[21][0]++;
        cov_1mywnac1o2().s[79]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[14]++;
          cov_1mywnac1o2().s[80]++;
          return filters.deployment_status.includes(model.deployment_info.status);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[21][1]++;
      }
      cov_1mywnac1o2().s[81]++;
      if (filters.tags?.length) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[22][0]++;
        cov_1mywnac1o2().s[82]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[15]++;
          cov_1mywnac1o2().s[83]++;
          return filters.tags.some(tag => {
            /* istanbul ignore next */
            cov_1mywnac1o2().f[16]++;
            cov_1mywnac1o2().s[84]++;
            return model.tags.includes(tag);
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[22][1]++;
      }
      cov_1mywnac1o2().s[85]++;
      if (filters.created_after) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[23][0]++;
        cov_1mywnac1o2().s[86]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[17]++;
          cov_1mywnac1o2().s[87]++;
          return model.created_at >= filters.created_after;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[23][1]++;
      }
      cov_1mywnac1o2().s[88]++;
      if (filters.created_before) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[24][0]++;
        cov_1mywnac1o2().s[89]++;
        filteredModels = filteredModels.filter(model => {
          /* istanbul ignore next */
          cov_1mywnac1o2().f[18]++;
          cov_1mywnac1o2().s[90]++;
          return model.created_at <= filters.created_before;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[11][1]++;
    }
    // Apply sorting
    cov_1mywnac1o2().s[91]++;
    if (searchParams.sort_by) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[25][0]++;
      cov_1mywnac1o2().s[92]++;
      filteredModels.sort((a, b) => {
        /* istanbul ignore next */
        cov_1mywnac1o2().f[19]++;
        let aVal, bVal;
        /* istanbul ignore next */
        cov_1mywnac1o2().s[93]++;
        switch (searchParams.sort_by) {
          case 'name':
            /* istanbul ignore next */
            cov_1mywnac1o2().b[26][0]++;
            cov_1mywnac1o2().s[94]++;
            aVal = a.name;
            /* istanbul ignore next */
            cov_1mywnac1o2().s[95]++;
            bVal = b.name;
            /* istanbul ignore next */
            cov_1mywnac1o2().s[96]++;
            break;
          case 'created_at':
            /* istanbul ignore next */
            cov_1mywnac1o2().b[26][1]++;
            cov_1mywnac1o2().s[97]++;
            aVal = a.created_at.getTime();
            /* istanbul ignore next */
            cov_1mywnac1o2().s[98]++;
            bVal = b.created_at.getTime();
            /* istanbul ignore next */
            cov_1mywnac1o2().s[99]++;
            break;
          case 'size_mb':
            /* istanbul ignore next */
            cov_1mywnac1o2().b[26][2]++;
            cov_1mywnac1o2().s[100]++;
            aVal = a.size_mb;
            /* istanbul ignore next */
            cov_1mywnac1o2().s[101]++;
            bVal = b.size_mb;
            /* istanbul ignore next */
            cov_1mywnac1o2().s[102]++;
            break;
          case 'performance':
            /* istanbul ignore next */
            cov_1mywnac1o2().b[26][3]++;
            cov_1mywnac1o2().s[103]++;
            aVal =
            /* istanbul ignore next */
            (cov_1mywnac1o2().b[27][0]++, a.performance_metrics.accuracy) ||
            /* istanbul ignore next */
            (cov_1mywnac1o2().b[27][1]++, 0);
            /* istanbul ignore next */
            cov_1mywnac1o2().s[104]++;
            bVal =
            /* istanbul ignore next */
            (cov_1mywnac1o2().b[28][0]++, b.performance_metrics.accuracy) ||
            /* istanbul ignore next */
            (cov_1mywnac1o2().b[28][1]++, 0);
            /* istanbul ignore next */
            cov_1mywnac1o2().s[105]++;
            break;
          case 'usage':
            /* istanbul ignore next */
            cov_1mywnac1o2().b[26][4]++;
            cov_1mywnac1o2().s[106]++;
            aVal = a.usage_statistics.total_requests;
            /* istanbul ignore next */
            cov_1mywnac1o2().s[107]++;
            bVal = b.usage_statistics.total_requests;
            /* istanbul ignore next */
            cov_1mywnac1o2().s[108]++;
            break;
          default:
            /* istanbul ignore next */
            cov_1mywnac1o2().b[26][5]++;
            cov_1mywnac1o2().s[109]++;
            return 0;
        }
        /* istanbul ignore next */
        cov_1mywnac1o2().s[110]++;
        if (searchParams.sort_order === 'desc') {
          /* istanbul ignore next */
          cov_1mywnac1o2().b[29][0]++;
          cov_1mywnac1o2().s[111]++;
          return aVal < bVal ?
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[30][0]++, 1) :
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[30][1]++, -1);
        } else
        /* istanbul ignore next */
        {
          cov_1mywnac1o2().b[29][1]++;
        }
        cov_1mywnac1o2().s[112]++;
        return aVal > bVal ?
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[31][0]++, 1) :
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[31][1]++, -1);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[25][1]++;
    }
    // Apply pagination
    const limit =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[113]++,
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[32][0]++, searchParams.limit) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[32][1]++, 20));
    const offset =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[114]++,
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[33][0]++, searchParams.offset) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[33][1]++, 0));
    const paginatedModels =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[115]++, filteredModels.slice(offset, offset + limit));
    const hasMore =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[116]++, offset + limit < filteredModels.length);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[117]++;
    return {
      models: paginatedModels,
      total_count: filteredModels.length,
      pagination: {
        limit,
        offset,
        has_more: hasMore
      }
    };
  }
  /**
   * Compare two models
   */
  async compareModels(modelAId, modelBId) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[20]++;
    const modelA =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[118]++, this.models.get(modelAId));
    const modelB =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[119]++, this.models.get(modelBId));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[120]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[35][0]++, !modelA) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[35][1]++, !modelB)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[34][0]++;
      cov_1mywnac1o2().s[121]++;
      throw new Error('One or both models not found');
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[34][1]++;
    }
    const comparison =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[122]++, {
      model_a: modelAId,
      model_b: modelBId,
      comparison_date: new Date(),
      metrics_comparison: {},
      benchmark_results: {},
      recommendation: {
        preferred_model: '',
        reasoning: [],
        use_case_recommendations: {}
      }
    });
    // Compare performance metrics
    const allMetrics =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[123]++, new Set([...Object.keys(modelA.performance_metrics), ...Object.keys(modelB.performance_metrics)]));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[124]++;
    for (const metric of allMetrics) {
      const aValue =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[125]++,
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[36][0]++, modelA.performance_metrics[metric]) ||
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[36][1]++, 0));
      const bValue =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[126]++,
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[37][0]++, modelB.performance_metrics[metric]) ||
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[37][1]++, 0));
      const percentageDiff =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[127]++, bValue !== 0 ?
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[38][0]++, (aValue - bValue) / bValue * 100) :
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[38][1]++, 0));
      let winner =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[128]++, 'tie');
      /* istanbul ignore next */
      cov_1mywnac1o2().s[129]++;
      if (
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[40][0]++, metric === 'inference_latency_ms') ||
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[40][1]++, metric === 'memory_usage_mb')) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[39][0]++;
        cov_1mywnac1o2().s[130]++;
        // Lower is better for latency and memory
        winner = aValue < bValue ?
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[41][0]++, 'model_a') :
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[41][1]++, aValue > bValue ?
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[42][0]++, 'model_b') :
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[42][1]++, 'tie'));
      } else {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[39][1]++;
        cov_1mywnac1o2().s[131]++;
        // Higher is better for other metrics
        winner = aValue > bValue ?
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[43][0]++, 'model_a') :
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[43][1]++, aValue < bValue ?
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[44][0]++, 'model_b') :
        /* istanbul ignore next */
        (cov_1mywnac1o2().b[44][1]++, 'tie'));
      }
      /* istanbul ignore next */
      cov_1mywnac1o2().s[132]++;
      comparison.metrics_comparison[metric] = {
        model_a_value: aValue,
        model_b_value: bValue,
        percentage_diff: percentageDiff,
        winner
      };
    }
    // Generate recommendation
    const aWins =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[133]++, Object.values(comparison.metrics_comparison).filter(m => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[21]++;
      cov_1mywnac1o2().s[134]++;
      return m.winner === 'model_a';
    }).length);
    const bWins =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[135]++, Object.values(comparison.metrics_comparison).filter(m => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[22]++;
      cov_1mywnac1o2().s[136]++;
      return m.winner === 'model_b';
    }).length);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[137]++;
    comparison.recommendation.preferred_model = aWins > bWins ?
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[45][0]++, modelAId) :
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[45][1]++, bWins > aWins ?
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[46][0]++, modelBId) :
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[46][1]++, 'tie'));
    // Generate reasoning
    /* istanbul ignore next */
    cov_1mywnac1o2().s[138]++;
    comparison.recommendation.reasoning = this.generateComparisonReasoning(modelA, modelB, comparison);
    // Generate use case recommendations
    /* istanbul ignore next */
    cov_1mywnac1o2().s[139]++;
    comparison.recommendation.use_case_recommendations = this.generateUseCaseRecommendations(modelA, modelB);
    // Record comparison event
    /* istanbul ignore next */
    cov_1mywnac1o2().s[140]++;
    await this.eventStore.recordEvent({
      event_type: 'models_compared',
      entity_id: `${modelAId}_vs_${modelBId}`,
      entity_type: 'comparison',
      data: comparison,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[141]++;
    return comparison;
  }
  /**
   * Get model usage statistics
   */
  getModelUsageStats(modelId, timeRange) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[23]++;
    const model =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[142]++, this.models.get(modelId));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[143]++;
    if (!model) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[47][0]++;
      cov_1mywnac1o2().s[144]++;
      throw new Error(`Model ${modelId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[47][1]++;
    }
    // This would typically query actual usage data from logs/analytics
    cov_1mywnac1o2().s[145]++;
    return {
      total_requests: model.usage_statistics.total_requests,
      success_rate: model.usage_statistics.successful_requests / model.usage_statistics.total_requests * 100,
      average_response_time: model.usage_statistics.average_response_time,
      usage_trend: model.usage_statistics.daily_usage,
      top_error_types: [{
        error_type: 'timeout',
        count: 12
      }, {
        error_type: 'rate_limit',
        count: 8
      }, {
        error_type: 'invalid_input',
        count: 5
      }]
    };
  }
  /**
   * Update model usage statistics
   */
  async updateUsageStatistics(modelId, requestData) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[24]++;
    const model =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[146]++, this.models.get(modelId));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[147]++;
    if (!model) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[48][0]++;
      cov_1mywnac1o2().s[148]++;
      throw new Error(`Model ${modelId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[48][1]++;
    }
    // Update statistics
    cov_1mywnac1o2().s[149]++;
    model.usage_statistics.total_requests++;
    /* istanbul ignore next */
    cov_1mywnac1o2().s[150]++;
    if (requestData.success) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[49][0]++;
      cov_1mywnac1o2().s[151]++;
      model.usage_statistics.successful_requests++;
    } else {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[49][1]++;
      cov_1mywnac1o2().s[152]++;
      model.usage_statistics.failed_requests++;
    }
    // Update average response time (exponential moving average)
    const alpha =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[153]++, 0.1); // Smoothing factor
    /* istanbul ignore next */
    cov_1mywnac1o2().s[154]++;
    model.usage_statistics.average_response_time = alpha * requestData.response_time + (1 - alpha) * model.usage_statistics.average_response_time;
    // Update daily usage
    const dateKey =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[155]++, requestData.timestamp.toISOString().split('T')[0]);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[156]++;
    model.usage_statistics.daily_usage[dateKey] = (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[50][0]++, model.usage_statistics.daily_usage[dateKey]) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[50][1]++, 0)) + 1;
    /* istanbul ignore next */
    cov_1mywnac1o2().s[157]++;
    model.usage_statistics.last_used = requestData.timestamp;
    /* istanbul ignore next */
    cov_1mywnac1o2().s[158]++;
    model.updated_at = new Date();
    /* istanbul ignore next */
    cov_1mywnac1o2().s[159]++;
    this.models.set(modelId, model);
  }
  /**
   * Get model version history
   */
  getModelVersionHistory(modelId) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[25]++;
    cov_1mywnac1o2().s[160]++;
    return /* istanbul ignore next */(cov_1mywnac1o2().b[51][0]++, this.modelVersions.get(modelId)) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[51][1]++, []);
  }
  /**
   * Delete model
   */
  async deleteModel(modelId, force =
  /* istanbul ignore next */
  (cov_1mywnac1o2().b[52][0]++, false)) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[26]++;
    const model =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[161]++, this.models.get(modelId));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[162]++;
    if (!model) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[53][0]++;
      cov_1mywnac1o2().s[163]++;
      throw new Error(`Model ${modelId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[53][1]++;
    }
    // Check if model is deployed
    cov_1mywnac1o2().s[164]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[55][0]++, model.deployment_info.status === 'deployed') &&
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[55][1]++, !force)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[54][0]++;
      cov_1mywnac1o2().s[165]++;
      throw new Error(`Cannot delete deployed model ${modelId}. Use force=true to override.`);
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[54][1]++;
    }
    // Remove from registry
    cov_1mywnac1o2().s[166]++;
    this.models.delete(modelId);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[167]++;
    this.modelVersions.delete(modelId);
    // Record deletion event
    /* istanbul ignore next */
    cov_1mywnac1o2().s[168]++;
    await this.eventStore.recordEvent({
      event_type: 'model_deleted',
      entity_id: modelId,
      entity_type: 'model',
      data: {
        model_name: model.name,
        force
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[169]++;
    console.log(`🗑️ Deleted model: ${model.name} v${model.version}`);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[170]++;
    this.emit('modelDeleted', {
      modelId,
      model
    });
  }
  /**
   * Get registry statistics
   */
  getRegistryStatistics() {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[27]++;
    const models =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[171]++, Array.from(this.models.values()));
    const modelsByType =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[172]++, models.reduce((acc, model) => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[28]++;
      cov_1mywnac1o2().s[173]++;
      acc[model.model_type] = (
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[56][0]++, acc[model.model_type]) ||
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[56][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1mywnac1o2().s[174]++;
      return acc;
    }, {}));
    const modelsByStatus =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[175]++, models.reduce((acc, model) => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[29]++;
      cov_1mywnac1o2().s[176]++;
      acc[model.deployment_info.status] = (
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[57][0]++, acc[model.deployment_info.status]) ||
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[57][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1mywnac1o2().s[177]++;
      return acc;
    }, {}));
    const totalSize =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[178]++, models.reduce((sum, model) => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[30]++;
      cov_1mywnac1o2().s[179]++;
      return sum + model.size_mb;
    }, 0));
    const mostUsed =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[180]++, models.map(model => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[31]++;
      cov_1mywnac1o2().s[181]++;
      return {
        model_id: model.id,
        usage_count: model.usage_statistics.total_requests
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[32]++;
      cov_1mywnac1o2().s[182]++;
      return b.usage_count - a.usage_count;
    }).slice(0, 10));
    const recentRegistrations =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[183]++, models.sort((a, b) => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[33]++;
      cov_1mywnac1o2().s[184]++;
      return b.created_at.getTime() - a.created_at.getTime();
    }).slice(0, 5));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[185]++;
    return {
      total_models: models.length,
      models_by_type: modelsByType,
      models_by_status: modelsByStatus,
      total_size_mb: totalSize,
      most_used_models: mostUsed,
      recent_registrations: recentRegistrations
    };
  }
  // Private methods
  generateModelId(name, version) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[34]++;
    const content =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[186]++, `${name.toLowerCase().replace(/[^a-z0-9]/g, '_')}_${version}`);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[187]++;
    return (0, crypto_1.createHash)('sha256').update(content).digest('hex').substring(0, 16);
  }
  async validateModelData(modelData) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[35]++;
    cov_1mywnac1o2().s[188]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[59][0]++, !modelData.name) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[59][1]++, modelData.name.trim().length === 0)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[58][0]++;
      cov_1mywnac1o2().s[189]++;
      throw new Error('Model name is required');
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[58][1]++;
    }
    cov_1mywnac1o2().s[190]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[61][0]++, !modelData.version) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[61][1]++, modelData.version.trim().length === 0)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[60][0]++;
      cov_1mywnac1o2().s[191]++;
      throw new Error('Model version is required');
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[60][1]++;
    }
    cov_1mywnac1o2().s[192]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[63][0]++, !modelData.model_type) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[63][1]++, !['foundation', 'fine_tuned', 'specialized', 'custom'].includes(modelData.model_type))) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[62][0]++;
      cov_1mywnac1o2().s[193]++;
      throw new Error('Invalid model type');
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[62][1]++;
    }
    cov_1mywnac1o2().s[194]++;
    if (modelData.size_mb <= 0) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[64][0]++;
      cov_1mywnac1o2().s[195]++;
      throw new Error('Model size must be greater than 0');
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[64][1]++;
    }
  }
  async calculateModelChecksum(model) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[36]++;
    // In a real implementation, this would calculate checksum of the actual model files
    const content =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[196]++, JSON.stringify({
      name: model.name,
      version: model.version,
      architecture: model.architecture,
      size_mb: model.size_mb
    }));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[197]++;
    return (0, crypto_1.createHash)('sha256').update(content).digest('hex');
  }
  calculatePerformanceDelta(oldModel, newModel) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[37]++;
    const delta =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[198]++, {});
    /* istanbul ignore next */
    cov_1mywnac1o2().s[199]++;
    Object.keys(newModel.performance_metrics).forEach(metric => {
      /* istanbul ignore next */
      cov_1mywnac1o2().f[38]++;
      const oldValue =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[200]++, oldModel.performance_metrics[metric]);
      const newValue =
      /* istanbul ignore next */
      (cov_1mywnac1o2().s[201]++, newModel.performance_metrics[metric]);
      /* istanbul ignore next */
      cov_1mywnac1o2().s[202]++;
      if (
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[66][0]++, oldValue !== undefined) &&
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[66][1]++, newValue !== undefined)) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[65][0]++;
        cov_1mywnac1o2().s[203]++;
        delta[metric] = newValue - oldValue;
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[65][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1mywnac1o2().s[204]++;
    return delta;
  }
  generateComparisonReasoning(modelA, modelB, comparison) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[39]++;
    const reasoning =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[205]++, []);
    // Size comparison
    /* istanbul ignore next */
    cov_1mywnac1o2().s[206]++;
    if (modelA.size_mb < modelB.size_mb * 0.8) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[67][0]++;
      cov_1mywnac1o2().s[207]++;
      reasoning.push(`${modelA.name} is significantly smaller (${modelA.size_mb}MB vs ${modelB.size_mb}MB), better for resource-constrained environments`);
    } else {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[67][1]++;
      cov_1mywnac1o2().s[208]++;
      if (modelB.size_mb < modelA.size_mb * 0.8) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[68][0]++;
        cov_1mywnac1o2().s[209]++;
        reasoning.push(`${modelB.name} is significantly smaller (${modelB.size_mb}MB vs ${modelA.size_mb}MB), better for resource-constrained environments`);
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[68][1]++;
      }
    }
    // Performance comparison
    const aAccuracy =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[210]++,
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[69][0]++, modelA.performance_metrics.accuracy) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[69][1]++, 0));
    const bAccuracy =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[211]++,
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[70][0]++, modelB.performance_metrics.accuracy) ||
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[70][1]++, 0));
    /* istanbul ignore next */
    cov_1mywnac1o2().s[212]++;
    if (aAccuracy > bAccuracy * 1.1) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[71][0]++;
      cov_1mywnac1o2().s[213]++;
      reasoning.push(`${modelA.name} has significantly better accuracy (${(aAccuracy * 100).toFixed(1)}% vs ${(bAccuracy * 100).toFixed(1)}%)`);
    } else {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[71][1]++;
      cov_1mywnac1o2().s[214]++;
      if (bAccuracy > aAccuracy * 1.1) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[72][0]++;
        cov_1mywnac1o2().s[215]++;
        reasoning.push(`${modelB.name} has significantly better accuracy (${(bAccuracy * 100).toFixed(1)}% vs ${(aAccuracy * 100).toFixed(1)}%)`);
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[72][1]++;
      }
    }
    // Latency comparison
    const aLatency =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[216]++, modelA.performance_metrics.inference_latency_ms);
    const bLatency =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[217]++, modelB.performance_metrics.inference_latency_ms);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[218]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[74][0]++, aLatency) &&
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[74][1]++, bLatency)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[73][0]++;
      cov_1mywnac1o2().s[219]++;
      if (aLatency < bLatency * 0.8) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[75][0]++;
        cov_1mywnac1o2().s[220]++;
        reasoning.push(`${modelA.name} is significantly faster (${aLatency}ms vs ${bLatency}ms response time)`);
      } else {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[75][1]++;
        cov_1mywnac1o2().s[221]++;
        if (bLatency < aLatency * 0.8) {
          /* istanbul ignore next */
          cov_1mywnac1o2().b[76][0]++;
          cov_1mywnac1o2().s[222]++;
          reasoning.push(`${modelB.name} is significantly faster (${bLatency}ms vs ${aLatency}ms response time)`);
        } else
        /* istanbul ignore next */
        {
          cov_1mywnac1o2().b[76][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[73][1]++;
    }
    cov_1mywnac1o2().s[223]++;
    return reasoning;
  }
  generateUseCaseRecommendations(modelA, modelB) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[40]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[224]++, {});
    // Size-based recommendations
    /* istanbul ignore next */
    cov_1mywnac1o2().s[225]++;
    if (modelA.size_mb < modelB.size_mb) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[77][0]++;
      cov_1mywnac1o2().s[226]++;
      recommendations['edge_deployment'] = modelA.name;
      /* istanbul ignore next */
      cov_1mywnac1o2().s[227]++;
      recommendations['mobile_applications'] = modelA.name;
    } else {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[77][1]++;
      cov_1mywnac1o2().s[228]++;
      recommendations['high_accuracy_tasks'] = modelB.name;
      /* istanbul ignore next */
      cov_1mywnac1o2().s[229]++;
      recommendations['server_deployment'] = modelB.name;
    }
    // Performance-based recommendations
    const aLatency =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[230]++, modelA.performance_metrics.inference_latency_ms);
    const bLatency =
    /* istanbul ignore next */
    (cov_1mywnac1o2().s[231]++, modelB.performance_metrics.inference_latency_ms);
    /* istanbul ignore next */
    cov_1mywnac1o2().s[232]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[79][0]++, aLatency) &&
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[79][1]++, bLatency)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[78][0]++;
      cov_1mywnac1o2().s[233]++;
      if (aLatency < bLatency) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[80][0]++;
        cov_1mywnac1o2().s[234]++;
        recommendations['real_time_applications'] = modelA.name;
        /* istanbul ignore next */
        cov_1mywnac1o2().s[235]++;
        recommendations['interactive_systems'] = modelA.name;
      } else {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[80][1]++;
        cov_1mywnac1o2().s[236]++;
        recommendations['batch_processing'] = modelB.name;
        /* istanbul ignore next */
        cov_1mywnac1o2().s[237]++;
        recommendations['offline_analysis'] = modelB.name;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1mywnac1o2().b[78][1]++;
    }
    // Capability-based recommendations
    cov_1mywnac1o2().s[238]++;
    if (
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[82][0]++, modelA.capabilities.code_generation) &&
    /* istanbul ignore next */
    (cov_1mywnac1o2().b[82][1]++, !modelB.capabilities.code_generation)) {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[81][0]++;
      cov_1mywnac1o2().s[239]++;
      recommendations['code_generation'] = modelA.name;
    } else {
      /* istanbul ignore next */
      cov_1mywnac1o2().b[81][1]++;
      cov_1mywnac1o2().s[240]++;
      if (
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[84][0]++, modelB.capabilities.code_generation) &&
      /* istanbul ignore next */
      (cov_1mywnac1o2().b[84][1]++, !modelA.capabilities.code_generation)) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[83][0]++;
        cov_1mywnac1o2().s[241]++;
        recommendations['code_generation'] = modelB.name;
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[83][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1mywnac1o2().s[242]++;
    return recommendations;
  }
  async loadModelsFromStorage() {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[41]++;
    cov_1mywnac1o2().s[243]++;
    try {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[244]++;
      // Load models from persistent storage (database, file system, etc.)
      console.log('📥 Loading models from storage...');
      // This would typically load from a database or file system
      // For now, we'll initialize with empty registry
      /* istanbul ignore next */
      cov_1mywnac1o2().s[245]++;
      console.log(`✅ Loaded ${this.models.size} models from storage`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[246]++;
      console.warn('⚠️ Failed to load models from storage:', error);
    }
  }
  async verifyModelIntegrity() {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[42]++;
    cov_1mywnac1o2().s[247]++;
    try {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[248]++;
      console.log('🔍 Verifying model integrity...');
      /* istanbul ignore next */
      cov_1mywnac1o2().s[249]++;
      for (const [modelId, model] of this.models) {
        // Verify checksums, file existence, etc.
        // Mark models as corrupted if verification fails
      }
      /* istanbul ignore next */
      cov_1mywnac1o2().s[250]++;
      console.log('✅ Model integrity verification completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[251]++;
      console.warn('⚠️ Model integrity verification failed:', error);
    }
  }
  async updateDeploymentStatuses() {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[43]++;
    cov_1mywnac1o2().s[252]++;
    try {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[253]++;
      console.log('🔄 Updating deployment statuses...');
      /* istanbul ignore next */
      cov_1mywnac1o2().s[254]++;
      for (const [modelId, model] of this.models) {
        /* istanbul ignore next */
        cov_1mywnac1o2().s[255]++;
        if (model.deployment_info.status === 'deployed') {
          /* istanbul ignore next */
          cov_1mywnac1o2().b[85][0]++;
          // Check if model is actually healthy
          const isHealthy =
          /* istanbul ignore next */
          (cov_1mywnac1o2().s[256]++, await this.checkModelHealth(model));
          /* istanbul ignore next */
          cov_1mywnac1o2().s[257]++;
          model.deployment_info.health_status = isHealthy ?
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[86][0]++, 'healthy') :
          /* istanbul ignore next */
          (cov_1mywnac1o2().b[86][1]++, 'unhealthy');
          /* istanbul ignore next */
          cov_1mywnac1o2().s[258]++;
          model.deployment_info.last_health_check = new Date();
        } else
        /* istanbul ignore next */
        {
          cov_1mywnac1o2().b[85][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1mywnac1o2().s[259]++;
      console.log('✅ Deployment status update completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[260]++;
      console.warn('⚠️ Failed to update deployment statuses:', error);
    }
  }
  async checkModelHealth(model) {
    /* istanbul ignore next */
    cov_1mywnac1o2().f[44]++;
    cov_1mywnac1o2().s[261]++;
    try {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[262]++;
      if (!model.deployment_info.endpoint) {
        /* istanbul ignore next */
        cov_1mywnac1o2().b[87][0]++;
        cov_1mywnac1o2().s[263]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1mywnac1o2().b[87][1]++;
      }
      // Perform actual health check against the deployed model
      // This is a placeholder - implement actual health check logic
      cov_1mywnac1o2().s[264]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1mywnac1o2().s[265]++;
      return false;
    }
  }
}
/* istanbul ignore next */
cov_1mywnac1o2().s[266]++;
exports.ModelRegistry = ModelRegistry;
// Export singleton instance
/* istanbul ignore next */
cov_1mywnac1o2().s[267]++;
exports.modelRegistry = new ModelRegistry();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW15d25hYzFvMiIsImFjdHVhbENvdmVyYWdlIiwicyIsImV2ZW50c18xIiwicmVxdWlyZSIsIkV2ZW50U3RvcmVfMSIsImNyeXB0b18xIiwiTW9kZWxSZWdpc3RyeSIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiZiIsImlzSW5pdGlhbGl6ZWQiLCJldmVudFN0b3JlIiwiRXZlbnRTdG9yZSIsImdldEluc3RhbmNlIiwibW9kZWxzIiwiTWFwIiwibW9kZWxWZXJzaW9ucyIsImluaXRpYWxpemUiLCJiIiwiY29uc29sZSIsImxvZyIsImxvYWRNb2RlbHNGcm9tU3RvcmFnZSIsInZlcmlmeU1vZGVsSW50ZWdyaXR5IiwidXBkYXRlRGVwbG95bWVudFN0YXR1c2VzIiwiZW1pdCIsInRvdGFsX21vZGVscyIsInNpemUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwiZXJyb3IiLCJyZWdpc3Rlck1vZGVsIiwibW9kZWxEYXRhIiwibW9kZWxJZCIsImdlbmVyYXRlTW9kZWxJZCIsIm5hbWUiLCJ2ZXJzaW9uIiwidmFsaWRhdGVNb2RlbERhdGEiLCJjaGVja3N1bSIsImNhbGN1bGF0ZU1vZGVsQ2hlY2tzdW0iLCJtb2RlbCIsImlkIiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJ1c2FnZV9zdGF0aXN0aWNzIiwidG90YWxfcmVxdWVzdHMiLCJzdWNjZXNzZnVsX3JlcXVlc3RzIiwiZmFpbGVkX3JlcXVlc3RzIiwiYXZlcmFnZV9yZXNwb25zZV90aW1lIiwibGFzdF91c2VkIiwiZGFpbHlfdXNhZ2UiLCJoYXMiLCJFcnJvciIsInNldCIsImNoYW5nZWxvZyIsInBlcmZvcm1hbmNlX2RlbHRhIiwiYmFja3dhcmRfY29tcGF0aWJsZSIsInJlY29yZEV2ZW50IiwiZXZlbnRfdHlwZSIsImVudGl0eV9pZCIsImVudGl0eV90eXBlIiwiZGF0YSIsInVwZGF0ZU1vZGVsIiwidXBkYXRlcyIsImV4aXN0aW5nTW9kZWwiLCJnZXQiLCJpc1ZlcnNpb25VcGRhdGUiLCJ1cGRhdGVkTW9kZWwiLCJmaWxlX3BhdGgiLCJjb25maWdfcGF0aCIsInRva2VuaXplcl9wYXRoIiwidmVyc2lvbnMiLCJwdXNoIiwiY2FsY3VsYXRlUGVyZm9ybWFuY2VEZWx0YSIsIm5ld192ZXJzaW9uIiwiZ2V0TW9kZWwiLCJzZWFyY2hNb2RlbHMiLCJzZWFyY2hQYXJhbXMiLCJmaWx0ZXJlZE1vZGVscyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInF1ZXJ5IiwidG9Mb3dlckNhc2UiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsImRlc2NyaXB0aW9uIiwidGFncyIsInNvbWUiLCJ0YWciLCJmaWx0ZXJzIiwibW9kZWxfdHlwZSIsImxlbmd0aCIsImNhcGFiaWxpdGllcyIsImNhcCIsInNpemVfcmFuZ2UiLCJtaW5fbWIiLCJzaXplX21iIiwibWF4X21iIiwicGVyZm9ybWFuY2VfdGhyZXNob2xkIiwiT2JqZWN0IiwiZW50cmllcyIsImV2ZXJ5IiwibWV0cmljIiwidGhyZXNob2xkIiwidmFsdWUiLCJwZXJmb3JtYW5jZV9tZXRyaWNzIiwidW5kZWZpbmVkIiwiZGVwbG95bWVudF9zdGF0dXMiLCJkZXBsb3ltZW50X2luZm8iLCJzdGF0dXMiLCJjcmVhdGVkX2FmdGVyIiwiY3JlYXRlZF9iZWZvcmUiLCJzb3J0X2J5Iiwic29ydCIsImEiLCJhVmFsIiwiYlZhbCIsImdldFRpbWUiLCJhY2N1cmFjeSIsInNvcnRfb3JkZXIiLCJsaW1pdCIsIm9mZnNldCIsInBhZ2luYXRlZE1vZGVscyIsInNsaWNlIiwiaGFzTW9yZSIsInRvdGFsX2NvdW50IiwicGFnaW5hdGlvbiIsImhhc19tb3JlIiwiY29tcGFyZU1vZGVscyIsIm1vZGVsQUlkIiwibW9kZWxCSWQiLCJtb2RlbEEiLCJtb2RlbEIiLCJjb21wYXJpc29uIiwibW9kZWxfYSIsIm1vZGVsX2IiLCJjb21wYXJpc29uX2RhdGUiLCJtZXRyaWNzX2NvbXBhcmlzb24iLCJiZW5jaG1hcmtfcmVzdWx0cyIsInJlY29tbWVuZGF0aW9uIiwicHJlZmVycmVkX21vZGVsIiwicmVhc29uaW5nIiwidXNlX2Nhc2VfcmVjb21tZW5kYXRpb25zIiwiYWxsTWV0cmljcyIsIlNldCIsImtleXMiLCJhVmFsdWUiLCJiVmFsdWUiLCJwZXJjZW50YWdlRGlmZiIsIndpbm5lciIsIm1vZGVsX2FfdmFsdWUiLCJtb2RlbF9iX3ZhbHVlIiwicGVyY2VudGFnZV9kaWZmIiwiYVdpbnMiLCJtIiwiYldpbnMiLCJnZW5lcmF0ZUNvbXBhcmlzb25SZWFzb25pbmciLCJnZW5lcmF0ZVVzZUNhc2VSZWNvbW1lbmRhdGlvbnMiLCJnZXRNb2RlbFVzYWdlU3RhdHMiLCJ0aW1lUmFuZ2UiLCJzdWNjZXNzX3JhdGUiLCJ1c2FnZV90cmVuZCIsInRvcF9lcnJvcl90eXBlcyIsImVycm9yX3R5cGUiLCJjb3VudCIsInVwZGF0ZVVzYWdlU3RhdGlzdGljcyIsInJlcXVlc3REYXRhIiwic3VjY2VzcyIsImFscGhhIiwicmVzcG9uc2VfdGltZSIsImRhdGVLZXkiLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwiZ2V0TW9kZWxWZXJzaW9uSGlzdG9yeSIsImRlbGV0ZU1vZGVsIiwiZm9yY2UiLCJkZWxldGUiLCJtb2RlbF9uYW1lIiwiZ2V0UmVnaXN0cnlTdGF0aXN0aWNzIiwibW9kZWxzQnlUeXBlIiwicmVkdWNlIiwiYWNjIiwibW9kZWxzQnlTdGF0dXMiLCJ0b3RhbFNpemUiLCJzdW0iLCJtb3N0VXNlZCIsIm1hcCIsIm1vZGVsX2lkIiwidXNhZ2VfY291bnQiLCJyZWNlbnRSZWdpc3RyYXRpb25zIiwibW9kZWxzX2J5X3R5cGUiLCJtb2RlbHNfYnlfc3RhdHVzIiwidG90YWxfc2l6ZV9tYiIsIm1vc3RfdXNlZF9tb2RlbHMiLCJyZWNlbnRfcmVnaXN0cmF0aW9ucyIsImNvbnRlbnQiLCJyZXBsYWNlIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsInN1YnN0cmluZyIsInRyaW0iLCJKU09OIiwic3RyaW5naWZ5IiwiYXJjaGl0ZWN0dXJlIiwib2xkTW9kZWwiLCJuZXdNb2RlbCIsImRlbHRhIiwiZm9yRWFjaCIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJhQWNjdXJhY3kiLCJiQWNjdXJhY3kiLCJ0b0ZpeGVkIiwiYUxhdGVuY3kiLCJpbmZlcmVuY2VfbGF0ZW5jeV9tcyIsImJMYXRlbmN5IiwicmVjb21tZW5kYXRpb25zIiwiY29kZV9nZW5lcmF0aW9uIiwid2FybiIsImlzSGVhbHRoeSIsImNoZWNrTW9kZWxIZWFsdGgiLCJoZWFsdGhfc3RhdHVzIiwibGFzdF9oZWFsdGhfY2hlY2siLCJlbmRwb2ludCIsImV4cG9ydHMiLCJtb2RlbFJlZ2lzdHJ5Il0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL3NlcnZpY2VzL3RyYWluaW5nL01vZGVsUmVnaXN0cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IEV2ZW50U3RvcmUgfSBmcm9tICcuLi9hbmFseXRpY3MvRXZlbnRTdG9yZSc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtbm9kZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxNZXRhZGF0YSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBhdXRob3I6IHN0cmluZztcbiAgbGljZW5zZTogc3RyaW5nO1xuICB0YWdzOiBzdHJpbmdbXTtcbiAgY3JlYXRlZF9hdDogRGF0ZTtcbiAgdXBkYXRlZF9hdDogRGF0ZTtcbiAgbW9kZWxfdHlwZTogJ2ZvdW5kYXRpb24nIHwgJ2ZpbmVfdHVuZWQnIHwgJ3NwZWNpYWxpemVkJyB8ICdjdXN0b20nO1xuICBiYXNlX21vZGVsPzogc3RyaW5nO1xuICB0cmFpbmluZ19qb2JfaWQ/OiBzdHJpbmc7XG4gIHNpemVfbWI6IG51bWJlcjtcbiAgcGFyYW1ldGVyX2NvdW50OiBudW1iZXI7XG4gIGFyY2hpdGVjdHVyZToge1xuICAgIG1vZGVsX2ZhbWlseTogc3RyaW5nO1xuICAgIGxheWVyczogbnVtYmVyO1xuICAgIGhpZGRlbl9zaXplOiBudW1iZXI7XG4gICAgYXR0ZW50aW9uX2hlYWRzOiBudW1iZXI7XG4gICAgdm9jYWJfc2l6ZTogbnVtYmVyO1xuICAgIG1heF9zZXF1ZW5jZV9sZW5ndGg6IG51bWJlcjtcbiAgfTtcbiAgY2FwYWJpbGl0aWVzOiB7XG4gICAgdGV4dF9nZW5lcmF0aW9uOiBib29sZWFuO1xuICAgIHRleHRfY2xhc3NpZmljYXRpb246IGJvb2xlYW47XG4gICAgcXVlc3Rpb25fYW5zd2VyaW5nOiBib29sZWFuO1xuICAgIHN1bW1hcml6YXRpb246IGJvb2xlYW47XG4gICAgY29kZV9nZW5lcmF0aW9uOiBib29sZWFuO1xuICAgIGVtYmVkZGluZ19nZW5lcmF0aW9uOiBib29sZWFuO1xuICAgIG11bHRpbW9kYWw6IGJvb2xlYW47XG4gIH07XG4gIHBlcmZvcm1hbmNlX21ldHJpY3M6IHtcbiAgICBhY2N1cmFjeT86IG51bWJlcjtcbiAgICBmMV9zY29yZT86IG51bWJlcjtcbiAgICBibGV1X3Njb3JlPzogbnVtYmVyO1xuICAgIHJvdWdlX3Njb3JlPzogbnVtYmVyO1xuICAgIHBlcnBsZXhpdHk/OiBudW1iZXI7XG4gICAgaW5mZXJlbmNlX2xhdGVuY3lfbXM6IG51bWJlcjtcbiAgICB0aHJvdWdocHV0X3Rva2Vuc19wZXJfc2VjOiBudW1iZXI7XG4gICAgbWVtb3J5X3VzYWdlX21iOiBudW1iZXI7XG4gIH07XG4gIGRlcGxveW1lbnRfaW5mbzoge1xuICAgIHN0YXR1czogJ3BlbmRpbmcnIHwgJ2RlcGxveWVkJyB8ICdkZXByZWNhdGVkJyB8ICdmYWlsZWQnO1xuICAgIGRlcGxveWVkX2F0PzogRGF0ZTtcbiAgICBkZXBsb3ltZW50X3RhcmdldD86IHN0cmluZztcbiAgICBlbmRwb2ludD86IHN0cmluZztcbiAgICBoZWFsdGhfc3RhdHVzPzogJ2hlYWx0aHknIHwgJ2RlZ3JhZGVkJyB8ICd1bmhlYWx0aHknO1xuICAgIGxhc3RfaGVhbHRoX2NoZWNrPzogRGF0ZTtcbiAgfTtcbiAgdXNhZ2Vfc3RhdGlzdGljczoge1xuICAgIHRvdGFsX3JlcXVlc3RzOiBudW1iZXI7XG4gICAgc3VjY2Vzc2Z1bF9yZXF1ZXN0czogbnVtYmVyO1xuICAgIGZhaWxlZF9yZXF1ZXN0czogbnVtYmVyO1xuICAgIGF2ZXJhZ2VfcmVzcG9uc2VfdGltZTogbnVtYmVyO1xuICAgIGxhc3RfdXNlZDogRGF0ZTtcbiAgICBkYWlseV91c2FnZTogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgfTtcbiAgY2hlY2tzdW06IHN0cmluZztcbiAgZmlsZV9wYXRoPzogc3RyaW5nO1xuICBjb25maWdfcGF0aD86IHN0cmluZztcbiAgdG9rZW5pemVyX3BhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxWZXJzaW9uIHtcbiAgdmVyc2lvbjogc3RyaW5nO1xuICBjaGFuZ2Vsb2c6IHN0cmluZztcbiAgY3JlYXRlZF9hdDogRGF0ZTtcbiAgcGVyZm9ybWFuY2VfZGVsdGE6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIGJhY2t3YXJkX2NvbXBhdGlibGU6IGJvb2xlYW47XG4gIG1pZ3JhdGlvbl9ub3Rlcz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbENvbXBhcmlzb24ge1xuICBtb2RlbF9hOiBzdHJpbmc7XG4gIG1vZGVsX2I6IHN0cmluZztcbiAgY29tcGFyaXNvbl9kYXRlOiBEYXRlO1xuICBtZXRyaWNzX2NvbXBhcmlzb246IFJlY29yZDxzdHJpbmcsIHtcbiAgICBtb2RlbF9hX3ZhbHVlOiBudW1iZXI7XG4gICAgbW9kZWxfYl92YWx1ZTogbnVtYmVyO1xuICAgIHBlcmNlbnRhZ2VfZGlmZjogbnVtYmVyO1xuICAgIHdpbm5lcjogJ21vZGVsX2EnIHwgJ21vZGVsX2InIHwgJ3RpZSc7XG4gIH0+O1xuICBiZW5jaG1hcmtfcmVzdWx0czogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgcmVjb21tZW5kYXRpb246IHtcbiAgICBwcmVmZXJyZWRfbW9kZWw6IHN0cmluZztcbiAgICByZWFzb25pbmc6IHN0cmluZ1tdO1xuICAgIHVzZV9jYXNlX3JlY29tbWVuZGF0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbFNlYXJjaCB7XG4gIHF1ZXJ5Pzogc3RyaW5nO1xuICBmaWx0ZXJzOiB7XG4gICAgbW9kZWxfdHlwZT86IHN0cmluZ1tdO1xuICAgIGNhcGFiaWxpdGllcz86IHN0cmluZ1tdO1xuICAgIHNpemVfcmFuZ2U/OiB7IG1pbl9tYj86IG51bWJlcjsgbWF4X21iPzogbnVtYmVyIH07XG4gICAgcGVyZm9ybWFuY2VfdGhyZXNob2xkPzogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgICBkZXBsb3ltZW50X3N0YXR1cz86IHN0cmluZ1tdO1xuICAgIHRhZ3M/OiBzdHJpbmdbXTtcbiAgICBjcmVhdGVkX2FmdGVyPzogRGF0ZTtcbiAgICBjcmVhdGVkX2JlZm9yZT86IERhdGU7XG4gIH07XG4gIHNvcnRfYnk/OiAnbmFtZScgfCAnY3JlYXRlZF9hdCcgfCAnc2l6ZV9tYicgfCAncGVyZm9ybWFuY2UnIHwgJ3VzYWdlJztcbiAgc29ydF9vcmRlcj86ICdhc2MnIHwgJ2Rlc2MnO1xuICBsaW1pdD86IG51bWJlcjtcbiAgb2Zmc2V0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTW9kZWxSZWdpc3RyeSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHByaXZhdGUgZXZlbnRTdG9yZTogRXZlbnRTdG9yZTtcbiAgcHJpdmF0ZSBtb2RlbHM6IE1hcDxzdHJpbmcsIE1vZGVsTWV0YWRhdGE+O1xuICBwcml2YXRlIG1vZGVsVmVyc2lvbnM6IE1hcDxzdHJpbmcsIE1vZGVsVmVyc2lvbltdPjtcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmV2ZW50U3RvcmUgPSBFdmVudFN0b3JlLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5tb2RlbHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5tb2RlbFZlcnNpb25zID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/CflIQgSW5pdGlhbGl6aW5nIE1vZGVsIFJlZ2lzdHJ5Li4uJyk7XG4gICAgICBcbiAgICAgIC8vIExvYWQgZXhpc3RpbmcgbW9kZWxzIGZyb20gc3RvcmFnZVxuICAgICAgYXdhaXQgdGhpcy5sb2FkTW9kZWxzRnJvbVN0b3JhZ2UoKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IG1vZGVsIGludGVncml0eVxuICAgICAgYXdhaXQgdGhpcy52ZXJpZnlNb2RlbEludGVncml0eSgpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgZGVwbG95bWVudCBzdGF0dXNlc1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGVEZXBsb3ltZW50U3RhdHVzZXMoKTtcbiAgICAgIFxuICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgTW9kZWwgUmVnaXN0cnkgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICBcbiAgICAgIHRoaXMuZW1pdCgnaW5pdGlhbGl6ZWQnLCB7XG4gICAgICAgIHRvdGFsX21vZGVsczogdGhpcy5tb2RlbHMuc2l6ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBpbml0aWFsaXplIE1vZGVsIFJlZ2lzdHJ5OicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIG5ldyBtb2RlbFxuICAgKi9cbiAgYXN5bmMgcmVnaXN0ZXJNb2RlbChtb2RlbERhdGE6IE9taXQ8TW9kZWxNZXRhZGF0YSwgJ2lkJyB8ICdjcmVhdGVkX2F0JyB8ICd1cGRhdGVkX2F0JyB8ICdjaGVja3N1bSc+KTogUHJvbWlzZTxNb2RlbE1ldGFkYXRhPiB7XG4gICAgY29uc3QgbW9kZWxJZCA9IHRoaXMuZ2VuZXJhdGVNb2RlbElkKG1vZGVsRGF0YS5uYW1lLCBtb2RlbERhdGEudmVyc2lvbik7XG4gICAgXG4gICAgLy8gVmFsaWRhdGUgbW9kZWwgZGF0YVxuICAgIGF3YWl0IHRoaXMudmFsaWRhdGVNb2RlbERhdGEobW9kZWxEYXRhKTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgY2hlY2tzdW1cbiAgICBjb25zdCBjaGVja3N1bSA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlTW9kZWxDaGVja3N1bShtb2RlbERhdGEpO1xuICAgIFxuICAgIGNvbnN0IG1vZGVsOiBNb2RlbE1ldGFkYXRhID0ge1xuICAgICAgLi4ubW9kZWxEYXRhLFxuICAgICAgaWQ6IG1vZGVsSWQsXG4gICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICAgIGNoZWNrc3VtLFxuICAgICAgdXNhZ2Vfc3RhdGlzdGljczoge1xuICAgICAgICB0b3RhbF9yZXF1ZXN0czogMCxcbiAgICAgICAgc3VjY2Vzc2Z1bF9yZXF1ZXN0czogMCxcbiAgICAgICAgZmFpbGVkX3JlcXVlc3RzOiAwLFxuICAgICAgICBhdmVyYWdlX3Jlc3BvbnNlX3RpbWU6IDAsXG4gICAgICAgIGxhc3RfdXNlZDogbmV3IERhdGUoKSxcbiAgICAgICAgZGFpbHlfdXNhZ2U6IHt9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIENoZWNrIGZvciBkdXBsaWNhdGVcbiAgICBpZiAodGhpcy5tb2RlbHMuaGFzKG1vZGVsSWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vZGVsIHdpdGggSUQgJHttb2RlbElkfSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIG1vZGVsXG4gICAgdGhpcy5tb2RlbHMuc2V0KG1vZGVsSWQsIG1vZGVsKTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIHZlcnNpb24gaGlzdG9yeVxuICAgIHRoaXMubW9kZWxWZXJzaW9ucy5zZXQobW9kZWxJZCwgW3tcbiAgICAgIHZlcnNpb246IG1vZGVsLnZlcnNpb24sXG4gICAgICBjaGFuZ2Vsb2c6ICdJbml0aWFsIHJlZ2lzdHJhdGlvbicsXG4gICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgcGVyZm9ybWFuY2VfZGVsdGE6IHt9LFxuICAgICAgYmFja3dhcmRfY29tcGF0aWJsZTogdHJ1ZVxuICAgIH1dKTtcblxuICAgIC8vIFJlY29yZCByZWdpc3RyYXRpb24gZXZlbnRcbiAgICBhd2FpdCB0aGlzLmV2ZW50U3RvcmUucmVjb3JkRXZlbnQoe1xuICAgICAgZXZlbnRfdHlwZTogJ21vZGVsX3JlZ2lzdGVyZWQnLFxuICAgICAgZW50aXR5X2lkOiBtb2RlbElkLFxuICAgICAgZW50aXR5X3R5cGU6ICdtb2RlbCcsXG4gICAgICBkYXRhOiBtb2RlbCxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coYPCfk50gUmVnaXN0ZXJlZCBtb2RlbDogJHttb2RlbC5uYW1lfSB2JHttb2RlbC52ZXJzaW9ufWApO1xuICAgIHRoaXMuZW1pdCgnbW9kZWxSZWdpc3RlcmVkJywgeyBtb2RlbCB9KTtcblxuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgbW9kZWwgbWV0YWRhdGFcbiAgICovXG4gIGFzeW5jIHVwZGF0ZU1vZGVsKG1vZGVsSWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxNb2RlbE1ldGFkYXRhPik6IFByb21pc2U8TW9kZWxNZXRhZGF0YT4ge1xuICAgIGNvbnN0IGV4aXN0aW5nTW9kZWwgPSB0aGlzLm1vZGVscy5nZXQobW9kZWxJZCk7XG4gICAgaWYgKCFleGlzdGluZ01vZGVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vZGVsICR7bW9kZWxJZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG5ldyB2ZXJzaW9uIGlmIHZlcnNpb24gbnVtYmVyIGNoYW5nZWRcbiAgICBjb25zdCBpc1ZlcnNpb25VcGRhdGUgPSB1cGRhdGVzLnZlcnNpb24gJiYgdXBkYXRlcy52ZXJzaW9uICE9PSBleGlzdGluZ01vZGVsLnZlcnNpb247XG4gICAgXG4gICAgY29uc3QgdXBkYXRlZE1vZGVsOiBNb2RlbE1ldGFkYXRhID0ge1xuICAgICAgLi4uZXhpc3RpbmdNb2RlbCxcbiAgICAgIC4uLnVwZGF0ZXMsXG4gICAgICBpZDogbW9kZWxJZCwgLy8gRW5zdXJlIElEIGRvZXNuJ3QgY2hhbmdlXG4gICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpXG4gICAgfTtcblxuICAgIC8vIFJlY2FsY3VsYXRlIGNoZWNrc3VtIGlmIGNvbnRlbnQgY2hhbmdlZFxuICAgIGlmICh1cGRhdGVzLmZpbGVfcGF0aCB8fCB1cGRhdGVzLmNvbmZpZ19wYXRoIHx8IHVwZGF0ZXMudG9rZW5pemVyX3BhdGgpIHtcbiAgICAgIHVwZGF0ZWRNb2RlbC5jaGVja3N1bSA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlTW9kZWxDaGVja3N1bSh1cGRhdGVkTW9kZWwpO1xuICAgIH1cblxuICAgIHRoaXMubW9kZWxzLnNldChtb2RlbElkLCB1cGRhdGVkTW9kZWwpO1xuXG4gICAgLy8gQWRkIHZlcnNpb24gaGlzdG9yeSBlbnRyeVxuICAgIGlmIChpc1ZlcnNpb25VcGRhdGUpIHtcbiAgICAgIGNvbnN0IHZlcnNpb25zID0gdGhpcy5tb2RlbFZlcnNpb25zLmdldChtb2RlbElkKSB8fCBbXTtcbiAgICAgIHZlcnNpb25zLnB1c2goe1xuICAgICAgICB2ZXJzaW9uOiB1cGRhdGVkTW9kZWwudmVyc2lvbixcbiAgICAgICAgY2hhbmdlbG9nOiAnTW9kZWwgdXBkYXRlZCcsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHBlcmZvcm1hbmNlX2RlbHRhOiB0aGlzLmNhbGN1bGF0ZVBlcmZvcm1hbmNlRGVsdGEoZXhpc3RpbmdNb2RlbCwgdXBkYXRlZE1vZGVsKSxcbiAgICAgICAgYmFja3dhcmRfY29tcGF0aWJsZTogdHJ1ZSAvLyBTaG91bGQgYmUgZGV0ZXJtaW5lZCBieSBhbmFseXNpc1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1vZGVsVmVyc2lvbnMuc2V0KG1vZGVsSWQsIHZlcnNpb25zKTtcbiAgICB9XG5cbiAgICAvLyBSZWNvcmQgdXBkYXRlIGV2ZW50XG4gICAgYXdhaXQgdGhpcy5ldmVudFN0b3JlLnJlY29yZEV2ZW50KHtcbiAgICAgIGV2ZW50X3R5cGU6IGlzVmVyc2lvblVwZGF0ZSA/ICdtb2RlbF92ZXJzaW9uX3VwZGF0ZWQnIDogJ21vZGVsX21ldGFkYXRhX3VwZGF0ZWQnLFxuICAgICAgZW50aXR5X2lkOiBtb2RlbElkLFxuICAgICAgZW50aXR5X3R5cGU6ICdtb2RlbCcsXG4gICAgICBkYXRhOiB7IHVwZGF0ZXMsIG5ld192ZXJzaW9uOiBpc1ZlcnNpb25VcGRhdGUgfSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coYPCfk50gVXBkYXRlZCBtb2RlbDogJHt1cGRhdGVkTW9kZWwubmFtZX0gdiR7dXBkYXRlZE1vZGVsLnZlcnNpb259YCk7XG4gICAgdGhpcy5lbWl0KCdtb2RlbFVwZGF0ZWQnLCB7IG1vZGVsOiB1cGRhdGVkTW9kZWwsIGlzVmVyc2lvblVwZGF0ZSB9KTtcblxuICAgIHJldHVybiB1cGRhdGVkTW9kZWw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG1vZGVsIGJ5IElEXG4gICAqL1xuICBnZXRNb2RlbChtb2RlbElkOiBzdHJpbmcpOiBNb2RlbE1ldGFkYXRhIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbHMuZ2V0KG1vZGVsSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaCBtb2RlbHNcbiAgICovXG4gIHNlYXJjaE1vZGVscyhzZWFyY2hQYXJhbXM6IE1vZGVsU2VhcmNoKToge1xuICAgIG1vZGVsczogTW9kZWxNZXRhZGF0YVtdO1xuICAgIHRvdGFsX2NvdW50OiBudW1iZXI7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgbGltaXQ6IG51bWJlcjtcbiAgICAgIG9mZnNldDogbnVtYmVyO1xuICAgICAgaGFzX21vcmU6IGJvb2xlYW47XG4gICAgfTtcbiAgfSB7XG4gICAgbGV0IGZpbHRlcmVkTW9kZWxzID0gQXJyYXkuZnJvbSh0aGlzLm1vZGVscy52YWx1ZXMoKSk7XG5cbiAgICAvLyBBcHBseSB0ZXh0IHNlYXJjaFxuICAgIGlmIChzZWFyY2hQYXJhbXMucXVlcnkpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gc2VhcmNoUGFyYW1zLnF1ZXJ5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBmaWx0ZXJlZE1vZGVscyA9IGZpbHRlcmVkTW9kZWxzLmZpbHRlcihtb2RlbCA9PiBcbiAgICAgICAgbW9kZWwubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5KSB8fFxuICAgICAgICBtb2RlbC5kZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5KSB8fFxuICAgICAgICBtb2RlbC50YWdzLnNvbWUodGFnID0+IHRhZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5KSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgZmlsdGVyc1xuICAgIGlmIChzZWFyY2hQYXJhbXMuZmlsdGVycykge1xuICAgICAgY29uc3QgeyBmaWx0ZXJzIH0gPSBzZWFyY2hQYXJhbXM7XG5cbiAgICAgIGlmIChmaWx0ZXJzLm1vZGVsX3R5cGU/Lmxlbmd0aCkge1xuICAgICAgICBmaWx0ZXJlZE1vZGVscyA9IGZpbHRlcmVkTW9kZWxzLmZpbHRlcihtb2RlbCA9PiBcbiAgICAgICAgICBmaWx0ZXJzLm1vZGVsX3R5cGUhLmluY2x1ZGVzKG1vZGVsLm1vZGVsX3R5cGUpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJzLmNhcGFiaWxpdGllcz8ubGVuZ3RoKSB7XG4gICAgICAgIGZpbHRlcmVkTW9kZWxzID0gZmlsdGVyZWRNb2RlbHMuZmlsdGVyKG1vZGVsID0+IFxuICAgICAgICAgIGZpbHRlcnMuY2FwYWJpbGl0aWVzIS5zb21lKGNhcCA9PiBtb2RlbC5jYXBhYmlsaXRpZXNbY2FwXSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpbHRlcnMuc2l6ZV9yYW5nZSkge1xuICAgICAgICBmaWx0ZXJlZE1vZGVscyA9IGZpbHRlcmVkTW9kZWxzLmZpbHRlcihtb2RlbCA9PiB7XG4gICAgICAgICAgaWYgKGZpbHRlcnMuc2l6ZV9yYW5nZSEubWluX21iICYmIG1vZGVsLnNpemVfbWIgPCBmaWx0ZXJzLnNpemVfcmFuZ2UhLm1pbl9tYikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChmaWx0ZXJzLnNpemVfcmFuZ2UhLm1heF9tYiAmJiBtb2RlbC5zaXplX21iID4gZmlsdGVycy5zaXplX3JhbmdlIS5tYXhfbWIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJzLnBlcmZvcm1hbmNlX3RocmVzaG9sZCkge1xuICAgICAgICBmaWx0ZXJlZE1vZGVscyA9IGZpbHRlcmVkTW9kZWxzLmZpbHRlcihtb2RlbCA9PiB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZpbHRlcnMucGVyZm9ybWFuY2VfdGhyZXNob2xkISkuZXZlcnkoKFttZXRyaWMsIHRocmVzaG9sZF0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbW9kZWwucGVyZm9ybWFuY2VfbWV0cmljc1ttZXRyaWNdO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPj0gdGhyZXNob2xkO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpbHRlcnMuZGVwbG95bWVudF9zdGF0dXM/Lmxlbmd0aCkge1xuICAgICAgICBmaWx0ZXJlZE1vZGVscyA9IGZpbHRlcmVkTW9kZWxzLmZpbHRlcihtb2RlbCA9PiBcbiAgICAgICAgICBmaWx0ZXJzLmRlcGxveW1lbnRfc3RhdHVzIS5pbmNsdWRlcyhtb2RlbC5kZXBsb3ltZW50X2luZm8uc3RhdHVzKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlsdGVycy50YWdzPy5sZW5ndGgpIHtcbiAgICAgICAgZmlsdGVyZWRNb2RlbHMgPSBmaWx0ZXJlZE1vZGVscy5maWx0ZXIobW9kZWwgPT4gXG4gICAgICAgICAgZmlsdGVycy50YWdzIS5zb21lKHRhZyA9PiBtb2RlbC50YWdzLmluY2x1ZGVzKHRhZykpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJzLmNyZWF0ZWRfYWZ0ZXIpIHtcbiAgICAgICAgZmlsdGVyZWRNb2RlbHMgPSBmaWx0ZXJlZE1vZGVscy5maWx0ZXIobW9kZWwgPT4gXG4gICAgICAgICAgbW9kZWwuY3JlYXRlZF9hdCA+PSBmaWx0ZXJzLmNyZWF0ZWRfYWZ0ZXIhXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJzLmNyZWF0ZWRfYmVmb3JlKSB7XG4gICAgICAgIGZpbHRlcmVkTW9kZWxzID0gZmlsdGVyZWRNb2RlbHMuZmlsdGVyKG1vZGVsID0+IFxuICAgICAgICAgIG1vZGVsLmNyZWF0ZWRfYXQgPD0gZmlsdGVycy5jcmVhdGVkX2JlZm9yZSFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBcHBseSBzb3J0aW5nXG4gICAgaWYgKHNlYXJjaFBhcmFtcy5zb3J0X2J5KSB7XG4gICAgICBmaWx0ZXJlZE1vZGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGxldCBhVmFsOiBhbnksIGJWYWw6IGFueTtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAoc2VhcmNoUGFyYW1zLnNvcnRfYnkpIHtcbiAgICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICAgIGFWYWwgPSBhLm5hbWU7XG4gICAgICAgICAgICBiVmFsID0gYi5uYW1lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY3JlYXRlZF9hdCc6XG4gICAgICAgICAgICBhVmFsID0gYS5jcmVhdGVkX2F0LmdldFRpbWUoKTtcbiAgICAgICAgICAgIGJWYWwgPSBiLmNyZWF0ZWRfYXQuZ2V0VGltZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2l6ZV9tYic6XG4gICAgICAgICAgICBhVmFsID0gYS5zaXplX21iO1xuICAgICAgICAgICAgYlZhbCA9IGIuc2l6ZV9tYjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3BlcmZvcm1hbmNlJzpcbiAgICAgICAgICAgIGFWYWwgPSBhLnBlcmZvcm1hbmNlX21ldHJpY3MuYWNjdXJhY3kgfHwgMDtcbiAgICAgICAgICAgIGJWYWwgPSBiLnBlcmZvcm1hbmNlX21ldHJpY3MuYWNjdXJhY3kgfHwgMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3VzYWdlJzpcbiAgICAgICAgICAgIGFWYWwgPSBhLnVzYWdlX3N0YXRpc3RpY3MudG90YWxfcmVxdWVzdHM7XG4gICAgICAgICAgICBiVmFsID0gYi51c2FnZV9zdGF0aXN0aWNzLnRvdGFsX3JlcXVlc3RzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaFBhcmFtcy5zb3J0X29yZGVyID09PSAnZGVzYycpIHtcbiAgICAgICAgICByZXR1cm4gYVZhbCA8IGJWYWwgPyAxIDogLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFWYWwgPiBiVmFsID8gMSA6IC0xO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgcGFnaW5hdGlvblxuICAgIGNvbnN0IGxpbWl0ID0gc2VhcmNoUGFyYW1zLmxpbWl0IHx8IDIwO1xuICAgIGNvbnN0IG9mZnNldCA9IHNlYXJjaFBhcmFtcy5vZmZzZXQgfHwgMDtcbiAgICBjb25zdCBwYWdpbmF0ZWRNb2RlbHMgPSBmaWx0ZXJlZE1vZGVscy5zbGljZShvZmZzZXQsIG9mZnNldCArIGxpbWl0KTtcbiAgICBjb25zdCBoYXNNb3JlID0gb2Zmc2V0ICsgbGltaXQgPCBmaWx0ZXJlZE1vZGVscy5sZW5ndGg7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbW9kZWxzOiBwYWdpbmF0ZWRNb2RlbHMsXG4gICAgICB0b3RhbF9jb3VudDogZmlsdGVyZWRNb2RlbHMubGVuZ3RoLFxuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBsaW1pdCxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBoYXNfbW9yZTogaGFzTW9yZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyZSB0d28gbW9kZWxzXG4gICAqL1xuICBhc3luYyBjb21wYXJlTW9kZWxzKG1vZGVsQUlkOiBzdHJpbmcsIG1vZGVsQklkOiBzdHJpbmcpOiBQcm9taXNlPE1vZGVsQ29tcGFyaXNvbj4ge1xuICAgIGNvbnN0IG1vZGVsQSA9IHRoaXMubW9kZWxzLmdldChtb2RlbEFJZCk7XG4gICAgY29uc3QgbW9kZWxCID0gdGhpcy5tb2RlbHMuZ2V0KG1vZGVsQklkKTtcblxuICAgIGlmICghbW9kZWxBIHx8ICFtb2RlbEIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25lIG9yIGJvdGggbW9kZWxzIG5vdCBmb3VuZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBhcmlzb246IE1vZGVsQ29tcGFyaXNvbiA9IHtcbiAgICAgIG1vZGVsX2E6IG1vZGVsQUlkLFxuICAgICAgbW9kZWxfYjogbW9kZWxCSWQsXG4gICAgICBjb21wYXJpc29uX2RhdGU6IG5ldyBEYXRlKCksXG4gICAgICBtZXRyaWNzX2NvbXBhcmlzb246IHt9LFxuICAgICAgYmVuY2htYXJrX3Jlc3VsdHM6IHt9LFxuICAgICAgcmVjb21tZW5kYXRpb246IHtcbiAgICAgICAgcHJlZmVycmVkX21vZGVsOiAnJyxcbiAgICAgICAgcmVhc29uaW5nOiBbXSxcbiAgICAgICAgdXNlX2Nhc2VfcmVjb21tZW5kYXRpb25zOiB7fVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDb21wYXJlIHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICBjb25zdCBhbGxNZXRyaWNzID0gbmV3IFNldChbXG4gICAgICAuLi5PYmplY3Qua2V5cyhtb2RlbEEucGVyZm9ybWFuY2VfbWV0cmljcyksXG4gICAgICAuLi5PYmplY3Qua2V5cyhtb2RlbEIucGVyZm9ybWFuY2VfbWV0cmljcylcbiAgICBdKTtcblxuICAgIGZvciAoY29uc3QgbWV0cmljIG9mIGFsbE1ldHJpY3MpIHtcbiAgICAgIGNvbnN0IGFWYWx1ZSA9IG1vZGVsQS5wZXJmb3JtYW5jZV9tZXRyaWNzW21ldHJpY10gfHwgMDtcbiAgICAgIGNvbnN0IGJWYWx1ZSA9IG1vZGVsQi5wZXJmb3JtYW5jZV9tZXRyaWNzW21ldHJpY10gfHwgMDtcbiAgICAgIGNvbnN0IHBlcmNlbnRhZ2VEaWZmID0gYlZhbHVlICE9PSAwID8gKChhVmFsdWUgLSBiVmFsdWUpIC8gYlZhbHVlKSAqIDEwMCA6IDA7XG4gICAgICBcbiAgICAgIGxldCB3aW5uZXI6ICdtb2RlbF9hJyB8ICdtb2RlbF9iJyB8ICd0aWUnID0gJ3RpZSc7XG4gICAgICBpZiAobWV0cmljID09PSAnaW5mZXJlbmNlX2xhdGVuY3lfbXMnIHx8IG1ldHJpYyA9PT0gJ21lbW9yeV91c2FnZV9tYicpIHtcbiAgICAgICAgLy8gTG93ZXIgaXMgYmV0dGVyIGZvciBsYXRlbmN5IGFuZCBtZW1vcnlcbiAgICAgICAgd2lubmVyID0gYVZhbHVlIDwgYlZhbHVlID8gJ21vZGVsX2EnIDogKGFWYWx1ZSA+IGJWYWx1ZSA/ICdtb2RlbF9iJyA6ICd0aWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEhpZ2hlciBpcyBiZXR0ZXIgZm9yIG90aGVyIG1ldHJpY3NcbiAgICAgICAgd2lubmVyID0gYVZhbHVlID4gYlZhbHVlID8gJ21vZGVsX2EnIDogKGFWYWx1ZSA8IGJWYWx1ZSA/ICdtb2RlbF9iJyA6ICd0aWUnKTtcbiAgICAgIH1cblxuICAgICAgY29tcGFyaXNvbi5tZXRyaWNzX2NvbXBhcmlzb25bbWV0cmljXSA9IHtcbiAgICAgICAgbW9kZWxfYV92YWx1ZTogYVZhbHVlLFxuICAgICAgICBtb2RlbF9iX3ZhbHVlOiBiVmFsdWUsXG4gICAgICAgIHBlcmNlbnRhZ2VfZGlmZjogcGVyY2VudGFnZURpZmYsXG4gICAgICAgIHdpbm5lclxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvblxuICAgIGNvbnN0IGFXaW5zID0gT2JqZWN0LnZhbHVlcyhjb21wYXJpc29uLm1ldHJpY3NfY29tcGFyaXNvbikuZmlsdGVyKG0gPT4gbS53aW5uZXIgPT09ICdtb2RlbF9hJykubGVuZ3RoO1xuICAgIGNvbnN0IGJXaW5zID0gT2JqZWN0LnZhbHVlcyhjb21wYXJpc29uLm1ldHJpY3NfY29tcGFyaXNvbikuZmlsdGVyKG0gPT4gbS53aW5uZXIgPT09ICdtb2RlbF9iJykubGVuZ3RoO1xuICAgIFxuICAgIGNvbXBhcmlzb24ucmVjb21tZW5kYXRpb24ucHJlZmVycmVkX21vZGVsID0gYVdpbnMgPiBiV2lucyA/IG1vZGVsQUlkIDogKGJXaW5zID4gYVdpbnMgPyBtb2RlbEJJZCA6ICd0aWUnKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSByZWFzb25pbmdcbiAgICBjb21wYXJpc29uLnJlY29tbWVuZGF0aW9uLnJlYXNvbmluZyA9IHRoaXMuZ2VuZXJhdGVDb21wYXJpc29uUmVhc29uaW5nKG1vZGVsQSwgbW9kZWxCLCBjb21wYXJpc29uKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSB1c2UgY2FzZSByZWNvbW1lbmRhdGlvbnNcbiAgICBjb21wYXJpc29uLnJlY29tbWVuZGF0aW9uLnVzZV9jYXNlX3JlY29tbWVuZGF0aW9ucyA9IHRoaXMuZ2VuZXJhdGVVc2VDYXNlUmVjb21tZW5kYXRpb25zKG1vZGVsQSwgbW9kZWxCKTtcblxuICAgIC8vIFJlY29yZCBjb21wYXJpc29uIGV2ZW50XG4gICAgYXdhaXQgdGhpcy5ldmVudFN0b3JlLnJlY29yZEV2ZW50KHtcbiAgICAgIGV2ZW50X3R5cGU6ICdtb2RlbHNfY29tcGFyZWQnLFxuICAgICAgZW50aXR5X2lkOiBgJHttb2RlbEFJZH1fdnNfJHttb2RlbEJJZH1gLFxuICAgICAgZW50aXR5X3R5cGU6ICdjb21wYXJpc29uJyxcbiAgICAgIGRhdGE6IGNvbXBhcmlzb24sXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgICB9KTtcblxuICAgIHJldHVybiBjb21wYXJpc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtb2RlbCB1c2FnZSBzdGF0aXN0aWNzXG4gICAqL1xuICBnZXRNb2RlbFVzYWdlU3RhdHMobW9kZWxJZDogc3RyaW5nLCB0aW1lUmFuZ2U/OiB7IHN0YXJ0OiBEYXRlOyBlbmQ6IERhdGUgfSk6IHtcbiAgICB0b3RhbF9yZXF1ZXN0czogbnVtYmVyO1xuICAgIHN1Y2Nlc3NfcmF0ZTogbnVtYmVyO1xuICAgIGF2ZXJhZ2VfcmVzcG9uc2VfdGltZTogbnVtYmVyO1xuICAgIHVzYWdlX3RyZW5kOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICAgIHRvcF9lcnJvcl90eXBlczogQXJyYXk8eyBlcnJvcl90eXBlOiBzdHJpbmc7IGNvdW50OiBudW1iZXIgfT47XG4gIH0ge1xuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5tb2RlbHMuZ2V0KG1vZGVsSWQpO1xuICAgIGlmICghbW9kZWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTW9kZWwgJHttb2RlbElkfSBub3QgZm91bmRgKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIHdvdWxkIHR5cGljYWxseSBxdWVyeSBhY3R1YWwgdXNhZ2UgZGF0YSBmcm9tIGxvZ3MvYW5hbHl0aWNzXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsX3JlcXVlc3RzOiBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLnRvdGFsX3JlcXVlc3RzLFxuICAgICAgc3VjY2Vzc19yYXRlOiBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLnN1Y2Nlc3NmdWxfcmVxdWVzdHMgLyBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLnRvdGFsX3JlcXVlc3RzICogMTAwLFxuICAgICAgYXZlcmFnZV9yZXNwb25zZV90aW1lOiBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLmF2ZXJhZ2VfcmVzcG9uc2VfdGltZSxcbiAgICAgIHVzYWdlX3RyZW5kOiBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLmRhaWx5X3VzYWdlLFxuICAgICAgdG9wX2Vycm9yX3R5cGVzOiBbXG4gICAgICAgIHsgZXJyb3JfdHlwZTogJ3RpbWVvdXQnLCBjb3VudDogMTIgfSxcbiAgICAgICAgeyBlcnJvcl90eXBlOiAncmF0ZV9saW1pdCcsIGNvdW50OiA4IH0sXG4gICAgICAgIHsgZXJyb3JfdHlwZTogJ2ludmFsaWRfaW5wdXQnLCBjb3VudDogNSB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgbW9kZWwgdXNhZ2Ugc3RhdGlzdGljc1xuICAgKi9cbiAgYXN5bmMgdXBkYXRlVXNhZ2VTdGF0aXN0aWNzKFxuICAgIG1vZGVsSWQ6IHN0cmluZyxcbiAgICByZXF1ZXN0RGF0YToge1xuICAgICAgc3VjY2VzczogYm9vbGVhbjtcbiAgICAgIHJlc3BvbnNlX3RpbWU6IG51bWJlcjtcbiAgICAgIGVycm9yX3R5cGU/OiBzdHJpbmc7XG4gICAgICB0aW1lc3RhbXA6IERhdGU7XG4gICAgfVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBtb2RlbCA9IHRoaXMubW9kZWxzLmdldChtb2RlbElkKTtcbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vZGVsICR7bW9kZWxJZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHN0YXRpc3RpY3NcbiAgICBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLnRvdGFsX3JlcXVlc3RzKys7XG4gICAgaWYgKHJlcXVlc3REYXRhLnN1Y2Nlc3MpIHtcbiAgICAgIG1vZGVsLnVzYWdlX3N0YXRpc3RpY3Muc3VjY2Vzc2Z1bF9yZXF1ZXN0cysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLmZhaWxlZF9yZXF1ZXN0cysrO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBhdmVyYWdlIHJlc3BvbnNlIHRpbWUgKGV4cG9uZW50aWFsIG1vdmluZyBhdmVyYWdlKVxuICAgIGNvbnN0IGFscGhhID0gMC4xOyAvLyBTbW9vdGhpbmcgZmFjdG9yXG4gICAgbW9kZWwudXNhZ2Vfc3RhdGlzdGljcy5hdmVyYWdlX3Jlc3BvbnNlX3RpbWUgPSBcbiAgICAgIGFscGhhICogcmVxdWVzdERhdGEucmVzcG9uc2VfdGltZSArICgxIC0gYWxwaGEpICogbW9kZWwudXNhZ2Vfc3RhdGlzdGljcy5hdmVyYWdlX3Jlc3BvbnNlX3RpbWU7XG5cbiAgICAvLyBVcGRhdGUgZGFpbHkgdXNhZ2VcbiAgICBjb25zdCBkYXRlS2V5ID0gcmVxdWVzdERhdGEudGltZXN0YW1wLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICBtb2RlbC51c2FnZV9zdGF0aXN0aWNzLmRhaWx5X3VzYWdlW2RhdGVLZXldID0gKG1vZGVsLnVzYWdlX3N0YXRpc3RpY3MuZGFpbHlfdXNhZ2VbZGF0ZUtleV0gfHwgMCkgKyAxO1xuXG4gICAgbW9kZWwudXNhZ2Vfc3RhdGlzdGljcy5sYXN0X3VzZWQgPSByZXF1ZXN0RGF0YS50aW1lc3RhbXA7XG4gICAgbW9kZWwudXBkYXRlZF9hdCA9IG5ldyBEYXRlKCk7XG5cbiAgICB0aGlzLm1vZGVscy5zZXQobW9kZWxJZCwgbW9kZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtb2RlbCB2ZXJzaW9uIGhpc3RvcnlcbiAgICovXG4gIGdldE1vZGVsVmVyc2lvbkhpc3RvcnkobW9kZWxJZDogc3RyaW5nKTogTW9kZWxWZXJzaW9uW10ge1xuICAgIHJldHVybiB0aGlzLm1vZGVsVmVyc2lvbnMuZ2V0KG1vZGVsSWQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBtb2RlbFxuICAgKi9cbiAgYXN5bmMgZGVsZXRlTW9kZWwobW9kZWxJZDogc3RyaW5nLCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbW9kZWwgPSB0aGlzLm1vZGVscy5nZXQobW9kZWxJZCk7XG4gICAgaWYgKCFtb2RlbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNb2RlbCAke21vZGVsSWR9IG5vdCBmb3VuZGApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIG1vZGVsIGlzIGRlcGxveWVkXG4gICAgaWYgKG1vZGVsLmRlcGxveW1lbnRfaW5mby5zdGF0dXMgPT09ICdkZXBsb3llZCcgJiYgIWZvcmNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZWxldGUgZGVwbG95ZWQgbW9kZWwgJHttb2RlbElkfS4gVXNlIGZvcmNlPXRydWUgdG8gb3ZlcnJpZGUuYCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGZyb20gcmVnaXN0cnlcbiAgICB0aGlzLm1vZGVscy5kZWxldGUobW9kZWxJZCk7XG4gICAgdGhpcy5tb2RlbFZlcnNpb25zLmRlbGV0ZShtb2RlbElkKTtcblxuICAgIC8vIFJlY29yZCBkZWxldGlvbiBldmVudFxuICAgIGF3YWl0IHRoaXMuZXZlbnRTdG9yZS5yZWNvcmRFdmVudCh7XG4gICAgICBldmVudF90eXBlOiAnbW9kZWxfZGVsZXRlZCcsXG4gICAgICBlbnRpdHlfaWQ6IG1vZGVsSWQsXG4gICAgICBlbnRpdHlfdHlwZTogJ21vZGVsJyxcbiAgICAgIGRhdGE6IHsgbW9kZWxfbmFtZTogbW9kZWwubmFtZSwgZm9yY2UgfSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coYPCfl5HvuI8gRGVsZXRlZCBtb2RlbDogJHttb2RlbC5uYW1lfSB2JHttb2RlbC52ZXJzaW9ufWApO1xuICAgIHRoaXMuZW1pdCgnbW9kZWxEZWxldGVkJywgeyBtb2RlbElkLCBtb2RlbCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVnaXN0cnkgc3RhdGlzdGljc1xuICAgKi9cbiAgZ2V0UmVnaXN0cnlTdGF0aXN0aWNzKCk6IHtcbiAgICB0b3RhbF9tb2RlbHM6IG51bWJlcjtcbiAgICBtb2RlbHNfYnlfdHlwZTogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgICBtb2RlbHNfYnlfc3RhdHVzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICAgIHRvdGFsX3NpemVfbWI6IG51bWJlcjtcbiAgICBtb3N0X3VzZWRfbW9kZWxzOiBBcnJheTx7IG1vZGVsX2lkOiBzdHJpbmc7IHVzYWdlX2NvdW50OiBudW1iZXIgfT47XG4gICAgcmVjZW50X3JlZ2lzdHJhdGlvbnM6IE1vZGVsTWV0YWRhdGFbXTtcbiAgfSB7XG4gICAgY29uc3QgbW9kZWxzID0gQXJyYXkuZnJvbSh0aGlzLm1vZGVscy52YWx1ZXMoKSk7XG4gICAgXG4gICAgY29uc3QgbW9kZWxzQnlUeXBlID0gbW9kZWxzLnJlZHVjZSgoYWNjLCBtb2RlbCkgPT4ge1xuICAgICAgYWNjW21vZGVsLm1vZGVsX3R5cGVdID0gKGFjY1ttb2RlbC5tb2RlbF90eXBlXSB8fCAwKSArIDE7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj4pO1xuXG4gICAgY29uc3QgbW9kZWxzQnlTdGF0dXMgPSBtb2RlbHMucmVkdWNlKChhY2MsIG1vZGVsKSA9PiB7XG4gICAgICBhY2NbbW9kZWwuZGVwbG95bWVudF9pbmZvLnN0YXR1c10gPSAoYWNjW21vZGVsLmRlcGxveW1lbnRfaW5mby5zdGF0dXNdIHx8IDApICsgMTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPik7XG5cbiAgICBjb25zdCB0b3RhbFNpemUgPSBtb2RlbHMucmVkdWNlKChzdW0sIG1vZGVsKSA9PiBzdW0gKyBtb2RlbC5zaXplX21iLCAwKTtcblxuICAgIGNvbnN0IG1vc3RVc2VkID0gbW9kZWxzXG4gICAgICAubWFwKG1vZGVsID0+ICh7IG1vZGVsX2lkOiBtb2RlbC5pZCwgdXNhZ2VfY291bnQ6IG1vZGVsLnVzYWdlX3N0YXRpc3RpY3MudG90YWxfcmVxdWVzdHMgfSkpXG4gICAgICAuc29ydCgoYSwgYikgPT4gYi51c2FnZV9jb3VudCAtIGEudXNhZ2VfY291bnQpXG4gICAgICAuc2xpY2UoMCwgMTApO1xuXG4gICAgY29uc3QgcmVjZW50UmVnaXN0cmF0aW9ucyA9IG1vZGVsc1xuICAgICAgLnNvcnQoKGEsIGIpID0+IGIuY3JlYXRlZF9hdC5nZXRUaW1lKCkgLSBhLmNyZWF0ZWRfYXQuZ2V0VGltZSgpKVxuICAgICAgLnNsaWNlKDAsIDUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsX21vZGVsczogbW9kZWxzLmxlbmd0aCxcbiAgICAgIG1vZGVsc19ieV90eXBlOiBtb2RlbHNCeVR5cGUsXG4gICAgICBtb2RlbHNfYnlfc3RhdHVzOiBtb2RlbHNCeVN0YXR1cyxcbiAgICAgIHRvdGFsX3NpemVfbWI6IHRvdGFsU2l6ZSxcbiAgICAgIG1vc3RfdXNlZF9tb2RlbHM6IG1vc3RVc2VkLFxuICAgICAgcmVjZW50X3JlZ2lzdHJhdGlvbnM6IHJlY2VudFJlZ2lzdHJhdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBtZXRob2RzXG4gIHByaXZhdGUgZ2VuZXJhdGVNb2RlbElkKG5hbWU6IHN0cmluZywgdmVyc2lvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb250ZW50ID0gYCR7bmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05XS9nLCAnXycpfV8ke3ZlcnNpb259YDtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGNvbnRlbnQpLmRpZ2VzdCgnaGV4Jykuc3Vic3RyaW5nKDAsIDE2KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdmFsaWRhdGVNb2RlbERhdGEobW9kZWxEYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIW1vZGVsRGF0YS5uYW1lIHx8IG1vZGVsRGF0YS5uYW1lLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZWwgbmFtZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIGlmICghbW9kZWxEYXRhLnZlcnNpb24gfHwgbW9kZWxEYXRhLnZlcnNpb24udHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlbCB2ZXJzaW9uIGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgaWYgKCFtb2RlbERhdGEubW9kZWxfdHlwZSB8fCAhWydmb3VuZGF0aW9uJywgJ2ZpbmVfdHVuZWQnLCAnc3BlY2lhbGl6ZWQnLCAnY3VzdG9tJ10uaW5jbHVkZXMobW9kZWxEYXRhLm1vZGVsX3R5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZWwgdHlwZScpO1xuICAgIH1cblxuICAgIGlmIChtb2RlbERhdGEuc2l6ZV9tYiA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHNpemUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2FsY3VsYXRlTW9kZWxDaGVja3N1bShtb2RlbDogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgY2FsY3VsYXRlIGNoZWNrc3VtIG9mIHRoZSBhY3R1YWwgbW9kZWwgZmlsZXNcbiAgICBjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgbmFtZTogbW9kZWwubmFtZSxcbiAgICAgIHZlcnNpb246IG1vZGVsLnZlcnNpb24sXG4gICAgICBhcmNoaXRlY3R1cmU6IG1vZGVsLmFyY2hpdGVjdHVyZSxcbiAgICAgIHNpemVfbWI6IG1vZGVsLnNpemVfbWJcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGNvbnRlbnQpLmRpZ2VzdCgnaGV4Jyk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZVBlcmZvcm1hbmNlRGVsdGEob2xkTW9kZWw6IE1vZGVsTWV0YWRhdGEsIG5ld01vZGVsOiBNb2RlbE1ldGFkYXRhKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gICAgY29uc3QgZGVsdGE6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICBcbiAgICBPYmplY3Qua2V5cyhuZXdNb2RlbC5wZXJmb3JtYW5jZV9tZXRyaWNzKS5mb3JFYWNoKG1ldHJpYyA9PiB7XG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZE1vZGVsLnBlcmZvcm1hbmNlX21ldHJpY3NbbWV0cmljXTtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3TW9kZWwucGVyZm9ybWFuY2VfbWV0cmljc1ttZXRyaWNdO1xuICAgICAgXG4gICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbHRhW21ldHJpY10gPSBuZXdWYWx1ZSAtIG9sZFZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVDb21wYXJpc29uUmVhc29uaW5nKG1vZGVsQTogTW9kZWxNZXRhZGF0YSwgbW9kZWxCOiBNb2RlbE1ldGFkYXRhLCBjb21wYXJpc29uOiBNb2RlbENvbXBhcmlzb24pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcmVhc29uaW5nOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIC8vIFNpemUgY29tcGFyaXNvblxuICAgIGlmIChtb2RlbEEuc2l6ZV9tYiA8IG1vZGVsQi5zaXplX21iICogMC44KSB7XG4gICAgICByZWFzb25pbmcucHVzaChgJHttb2RlbEEubmFtZX0gaXMgc2lnbmlmaWNhbnRseSBzbWFsbGVyICgke21vZGVsQS5zaXplX21ifU1CIHZzICR7bW9kZWxCLnNpemVfbWJ9TUIpLCBiZXR0ZXIgZm9yIHJlc291cmNlLWNvbnN0cmFpbmVkIGVudmlyb25tZW50c2ApO1xuICAgIH0gZWxzZSBpZiAobW9kZWxCLnNpemVfbWIgPCBtb2RlbEEuc2l6ZV9tYiAqIDAuOCkge1xuICAgICAgcmVhc29uaW5nLnB1c2goYCR7bW9kZWxCLm5hbWV9IGlzIHNpZ25pZmljYW50bHkgc21hbGxlciAoJHttb2RlbEIuc2l6ZV9tYn1NQiB2cyAke21vZGVsQS5zaXplX21ifU1CKSwgYmV0dGVyIGZvciByZXNvdXJjZS1jb25zdHJhaW5lZCBlbnZpcm9ubWVudHNgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUGVyZm9ybWFuY2UgY29tcGFyaXNvblxuICAgIGNvbnN0IGFBY2N1cmFjeSA9IG1vZGVsQS5wZXJmb3JtYW5jZV9tZXRyaWNzLmFjY3VyYWN5IHx8IDA7XG4gICAgY29uc3QgYkFjY3VyYWN5ID0gbW9kZWxCLnBlcmZvcm1hbmNlX21ldHJpY3MuYWNjdXJhY3kgfHwgMDtcbiAgICBcbiAgICBpZiAoYUFjY3VyYWN5ID4gYkFjY3VyYWN5ICogMS4xKSB7XG4gICAgICByZWFzb25pbmcucHVzaChgJHttb2RlbEEubmFtZX0gaGFzIHNpZ25pZmljYW50bHkgYmV0dGVyIGFjY3VyYWN5ICgkeyhhQWNjdXJhY3kgKiAxMDApLnRvRml4ZWQoMSl9JSB2cyAkeyhiQWNjdXJhY3kgKiAxMDApLnRvRml4ZWQoMSl9JSlgKTtcbiAgICB9IGVsc2UgaWYgKGJBY2N1cmFjeSA+IGFBY2N1cmFjeSAqIDEuMSkge1xuICAgICAgcmVhc29uaW5nLnB1c2goYCR7bW9kZWxCLm5hbWV9IGhhcyBzaWduaWZpY2FudGx5IGJldHRlciBhY2N1cmFjeSAoJHsoYkFjY3VyYWN5ICogMTAwKS50b0ZpeGVkKDEpfSUgdnMgJHsoYUFjY3VyYWN5ICogMTAwKS50b0ZpeGVkKDEpfSUpYCk7XG4gICAgfVxuICAgIFxuICAgIC8vIExhdGVuY3kgY29tcGFyaXNvblxuICAgIGNvbnN0IGFMYXRlbmN5ID0gbW9kZWxBLnBlcmZvcm1hbmNlX21ldHJpY3MuaW5mZXJlbmNlX2xhdGVuY3lfbXM7XG4gICAgY29uc3QgYkxhdGVuY3kgPSBtb2RlbEIucGVyZm9ybWFuY2VfbWV0cmljcy5pbmZlcmVuY2VfbGF0ZW5jeV9tcztcbiAgICBcbiAgICBpZiAoYUxhdGVuY3kgJiYgYkxhdGVuY3kpIHtcbiAgICAgIGlmIChhTGF0ZW5jeSA8IGJMYXRlbmN5ICogMC44KSB7XG4gICAgICAgIHJlYXNvbmluZy5wdXNoKGAke21vZGVsQS5uYW1lfSBpcyBzaWduaWZpY2FudGx5IGZhc3RlciAoJHthTGF0ZW5jeX1tcyB2cyAke2JMYXRlbmN5fW1zIHJlc3BvbnNlIHRpbWUpYCk7XG4gICAgICB9IGVsc2UgaWYgKGJMYXRlbmN5IDwgYUxhdGVuY3kgKiAwLjgpIHtcbiAgICAgICAgcmVhc29uaW5nLnB1c2goYCR7bW9kZWxCLm5hbWV9IGlzIHNpZ25pZmljYW50bHkgZmFzdGVyICgke2JMYXRlbmN5fW1zIHZzICR7YUxhdGVuY3l9bXMgcmVzcG9uc2UgdGltZSlgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlYXNvbmluZztcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVVc2VDYXNlUmVjb21tZW5kYXRpb25zKG1vZGVsQTogTW9kZWxNZXRhZGF0YSwgbW9kZWxCOiBNb2RlbE1ldGFkYXRhKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgXG4gICAgLy8gU2l6ZS1iYXNlZCByZWNvbW1lbmRhdGlvbnNcbiAgICBpZiAobW9kZWxBLnNpemVfbWIgPCBtb2RlbEIuc2l6ZV9tYikge1xuICAgICAgcmVjb21tZW5kYXRpb25zWydlZGdlX2RlcGxveW1lbnQnXSA9IG1vZGVsQS5uYW1lO1xuICAgICAgcmVjb21tZW5kYXRpb25zWydtb2JpbGVfYXBwbGljYXRpb25zJ10gPSBtb2RlbEEubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb21tZW5kYXRpb25zWydoaWdoX2FjY3VyYWN5X3Rhc2tzJ10gPSBtb2RlbEIubmFtZTtcbiAgICAgIHJlY29tbWVuZGF0aW9uc1snc2VydmVyX2RlcGxveW1lbnQnXSA9IG1vZGVsQi5uYW1lO1xuICAgIH1cbiAgICBcbiAgICAvLyBQZXJmb3JtYW5jZS1iYXNlZCByZWNvbW1lbmRhdGlvbnNcbiAgICBjb25zdCBhTGF0ZW5jeSA9IG1vZGVsQS5wZXJmb3JtYW5jZV9tZXRyaWNzLmluZmVyZW5jZV9sYXRlbmN5X21zO1xuICAgIGNvbnN0IGJMYXRlbmN5ID0gbW9kZWxCLnBlcmZvcm1hbmNlX21ldHJpY3MuaW5mZXJlbmNlX2xhdGVuY3lfbXM7XG4gICAgXG4gICAgaWYgKGFMYXRlbmN5ICYmIGJMYXRlbmN5KSB7XG4gICAgICBpZiAoYUxhdGVuY3kgPCBiTGF0ZW5jeSkge1xuICAgICAgICByZWNvbW1lbmRhdGlvbnNbJ3JlYWxfdGltZV9hcHBsaWNhdGlvbnMnXSA9IG1vZGVsQS5uYW1lO1xuICAgICAgICByZWNvbW1lbmRhdGlvbnNbJ2ludGVyYWN0aXZlX3N5c3RlbXMnXSA9IG1vZGVsQS5uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjb21tZW5kYXRpb25zWydiYXRjaF9wcm9jZXNzaW5nJ10gPSBtb2RlbEIubmFtZTtcbiAgICAgICAgcmVjb21tZW5kYXRpb25zWydvZmZsaW5lX2FuYWx5c2lzJ10gPSBtb2RlbEIubmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQ2FwYWJpbGl0eS1iYXNlZCByZWNvbW1lbmRhdGlvbnNcbiAgICBpZiAobW9kZWxBLmNhcGFiaWxpdGllcy5jb2RlX2dlbmVyYXRpb24gJiYgIW1vZGVsQi5jYXBhYmlsaXRpZXMuY29kZV9nZW5lcmF0aW9uKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnNbJ2NvZGVfZ2VuZXJhdGlvbiddID0gbW9kZWxBLm5hbWU7XG4gICAgfSBlbHNlIGlmIChtb2RlbEIuY2FwYWJpbGl0aWVzLmNvZGVfZ2VuZXJhdGlvbiAmJiAhbW9kZWxBLmNhcGFiaWxpdGllcy5jb2RlX2dlbmVyYXRpb24pIHtcbiAgICAgIHJlY29tbWVuZGF0aW9uc1snY29kZV9nZW5lcmF0aW9uJ10gPSBtb2RlbEIubmFtZTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZE1vZGVsc0Zyb21TdG9yYWdlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBMb2FkIG1vZGVscyBmcm9tIHBlcnNpc3RlbnQgc3RvcmFnZSAoZGF0YWJhc2UsIGZpbGUgc3lzdGVtLCBldGMuKVxuICAgICAgY29uc29sZS5sb2coJ/Cfk6UgTG9hZGluZyBtb2RlbHMgZnJvbSBzdG9yYWdlLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGxvYWQgZnJvbSBhIGRhdGFiYXNlIG9yIGZpbGUgc3lzdGVtXG4gICAgICAvLyBGb3Igbm93LCB3ZSdsbCBpbml0aWFsaXplIHdpdGggZW1wdHkgcmVnaXN0cnlcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYOKchSBMb2FkZWQgJHt0aGlzLm1vZGVscy5zaXplfSBtb2RlbHMgZnJvbSBzdG9yYWdlYCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEZhaWxlZCB0byBsb2FkIG1vZGVscyBmcm9tIHN0b3JhZ2U6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdmVyaWZ5TW9kZWxJbnRlZ3JpdHkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFZlcmlmeWluZyBtb2RlbCBpbnRlZ3JpdHkuLi4nKTtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBbbW9kZWxJZCwgbW9kZWxdIG9mIHRoaXMubW9kZWxzKSB7XG4gICAgICAgIC8vIFZlcmlmeSBjaGVja3N1bXMsIGZpbGUgZXhpc3RlbmNlLCBldGMuXG4gICAgICAgIC8vIE1hcmsgbW9kZWxzIGFzIGNvcnJ1cHRlZCBpZiB2ZXJpZmljYXRpb24gZmFpbHNcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ+KchSBNb2RlbCBpbnRlZ3JpdHkgdmVyaWZpY2F0aW9uIGNvbXBsZXRlZCcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBNb2RlbCBpbnRlZ3JpdHkgdmVyaWZpY2F0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1cGRhdGVEZXBsb3ltZW50U3RhdHVzZXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFVwZGF0aW5nIGRlcGxveW1lbnQgc3RhdHVzZXMuLi4nKTtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBbbW9kZWxJZCwgbW9kZWxdIG9mIHRoaXMubW9kZWxzKSB7XG4gICAgICAgIGlmIChtb2RlbC5kZXBsb3ltZW50X2luZm8uc3RhdHVzID09PSAnZGVwbG95ZWQnKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgbW9kZWwgaXMgYWN0dWFsbHkgaGVhbHRoeVxuICAgICAgICAgIGNvbnN0IGlzSGVhbHRoeSA9IGF3YWl0IHRoaXMuY2hlY2tNb2RlbEhlYWx0aChtb2RlbCk7XG4gICAgICAgICAgbW9kZWwuZGVwbG95bWVudF9pbmZvLmhlYWx0aF9zdGF0dXMgPSBpc0hlYWx0aHkgPyAnaGVhbHRoeScgOiAndW5oZWFsdGh5JztcbiAgICAgICAgICBtb2RlbC5kZXBsb3ltZW50X2luZm8ubGFzdF9oZWFsdGhfY2hlY2sgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgRGVwbG95bWVudCBzdGF0dXMgdXBkYXRlIGNvbXBsZXRlZCcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBGYWlsZWQgdG8gdXBkYXRlIGRlcGxveW1lbnQgc3RhdHVzZXM6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2hlY2tNb2RlbEhlYWx0aChtb2RlbDogTW9kZWxNZXRhZGF0YSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW1vZGVsLmRlcGxveW1lbnRfaW5mby5lbmRwb2ludCkgcmV0dXJuIGZhbHNlO1xuICAgICAgXG4gICAgICAvLyBQZXJmb3JtIGFjdHVhbCBoZWFsdGggY2hlY2sgYWdhaW5zdCB0aGUgZGVwbG95ZWQgbW9kZWxcbiAgICAgIC8vIFRoaXMgaXMgYSBwbGFjZWhvbGRlciAtIGltcGxlbWVudCBhY3R1YWwgaGVhbHRoIGNoZWNrIGxvZ2ljXG4gICAgICBcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBtb2RlbFJlZ2lzdHJ5ID0gbmV3IE1vZGVsUmVnaXN0cnkoKTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWdJUTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OztBQWhJUixNQUFBQyxRQUFBO0FBQUE7QUFBQSxDQUFBSCxjQUFBLEdBQUFFLENBQUEsT0FBQUUsT0FBQTtBQUNBLE1BQUFDLFlBQUE7QUFBQTtBQUFBLENBQUFMLGNBQUEsR0FBQUUsQ0FBQSxPQUFBRSxPQUFBO0FBQ0EsTUFBQUUsUUFBQTtBQUFBO0FBQUEsQ0FBQU4sY0FBQSxHQUFBRSxDQUFBLE9BQUFFLE9BQUE7QUFnSEEsTUFBYUcsYUFBYztBQUFBO0FBQUEsQ0FBUUosUUFBQSxDQUFBSyxZQUFZO0VBTTdDQyxZQUFBO0lBQUE7SUFBQVQsY0FBQSxHQUFBVSxDQUFBO0lBQUFWLGNBQUEsR0FBQUUsQ0FBQTtJQUNFLEtBQUssRUFBRTtJQUFDO0lBQUFGLGNBQUEsR0FBQUUsQ0FBQTtJQUhGLEtBQUFTLGFBQWEsR0FBRyxLQUFLO0lBQUM7SUFBQVgsY0FBQSxHQUFBRSxDQUFBO0lBSTVCLElBQUksQ0FBQ1UsVUFBVSxHQUFHUCxZQUFBLENBQUFRLFVBQVUsQ0FBQ0MsV0FBVyxFQUFFO0lBQUM7SUFBQWQsY0FBQSxHQUFBRSxDQUFBO0lBQzNDLElBQUksQ0FBQ2EsTUFBTSxHQUFHLElBQUlDLEdBQUcsRUFBRTtJQUFDO0lBQUFoQixjQUFBLEdBQUFFLENBQUE7SUFDeEIsSUFBSSxDQUFDZSxhQUFhLEdBQUcsSUFBSUQsR0FBRyxFQUFFO0VBQ2hDO0VBRUEsTUFBTUUsVUFBVUEsQ0FBQTtJQUFBO0lBQUFsQixjQUFBLEdBQUFVLENBQUE7SUFBQVYsY0FBQSxHQUFBRSxDQUFBO0lBQ2QsSUFBSSxJQUFJLENBQUNTLGFBQWEsRUFBRTtNQUFBO01BQUFYLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUFBO0lBQUEsQ0FBTztJQUFBO0lBQUE7TUFBQUYsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFFL0IsSUFBSTtNQUFBO01BQUFGLGNBQUEsR0FBQUUsQ0FBQTtNQUNGa0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsbUNBQW1DLENBQUM7TUFFaEQ7TUFBQTtNQUFBckIsY0FBQSxHQUFBRSxDQUFBO01BQ0EsTUFBTSxJQUFJLENBQUNvQixxQkFBcUIsRUFBRTtNQUVsQztNQUFBO01BQUF0QixjQUFBLEdBQUFFLENBQUE7TUFDQSxNQUFNLElBQUksQ0FBQ3FCLG9CQUFvQixFQUFFO01BRWpDO01BQUE7TUFBQXZCLGNBQUEsR0FBQUUsQ0FBQTtNQUNBLE1BQU0sSUFBSSxDQUFDc0Isd0JBQXdCLEVBQUU7TUFBQztNQUFBeEIsY0FBQSxHQUFBRSxDQUFBO01BRXRDLElBQUksQ0FBQ1MsYUFBYSxHQUFHLElBQUk7TUFBQztNQUFBWCxjQUFBLEdBQUFFLENBQUE7TUFDMUJrQixPQUFPLENBQUNDLEdBQUcsQ0FBQywyQ0FBMkMsQ0FBQztNQUFDO01BQUFyQixjQUFBLEdBQUFFLENBQUE7TUFFekQsSUFBSSxDQUFDdUIsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUN2QkMsWUFBWSxFQUFFLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJO1FBQzlCQyxTQUFTLEVBQUUsSUFBSUMsSUFBSTtPQUNwQixDQUFDO0lBQ0osQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtNQUFBO01BQUE5QixjQUFBLEdBQUFFLENBQUE7TUFDZGtCLE9BQU8sQ0FBQ1UsS0FBSyxDQUFDLHdDQUF3QyxFQUFFQSxLQUFLLENBQUM7TUFBQztNQUFBOUIsY0FBQSxHQUFBRSxDQUFBO01BQy9ELE1BQU00QixLQUFLO0lBQ2I7RUFDRjtFQUVBOzs7RUFHQSxNQUFNQyxhQUFhQSxDQUFDQyxTQUErRTtJQUFBO0lBQUFoQyxjQUFBLEdBQUFVLENBQUE7SUFDakcsTUFBTXVCLE9BQU87SUFBQTtJQUFBLENBQUFqQyxjQUFBLEdBQUFFLENBQUEsUUFBRyxJQUFJLENBQUNnQyxlQUFlLENBQUNGLFNBQVMsQ0FBQ0csSUFBSSxFQUFFSCxTQUFTLENBQUNJLE9BQU8sQ0FBQztJQUV2RTtJQUFBO0lBQUFwQyxjQUFBLEdBQUFFLENBQUE7SUFDQSxNQUFNLElBQUksQ0FBQ21DLGlCQUFpQixDQUFDTCxTQUFTLENBQUM7SUFFdkM7SUFDQSxNQUFNTSxRQUFRO0lBQUE7SUFBQSxDQUFBdEMsY0FBQSxHQUFBRSxDQUFBLFFBQUcsTUFBTSxJQUFJLENBQUNxQyxzQkFBc0IsQ0FBQ1AsU0FBUyxDQUFDO0lBRTdELE1BQU1RLEtBQUs7SUFBQTtJQUFBLENBQUF4QyxjQUFBLEdBQUFFLENBQUEsUUFBa0I7TUFDM0IsR0FBRzhCLFNBQVM7TUFDWlMsRUFBRSxFQUFFUixPQUFPO01BQ1hTLFVBQVUsRUFBRSxJQUFJYixJQUFJLEVBQUU7TUFDdEJjLFVBQVUsRUFBRSxJQUFJZCxJQUFJLEVBQUU7TUFDdEJTLFFBQVE7TUFDUk0sZ0JBQWdCLEVBQUU7UUFDaEJDLGNBQWMsRUFBRSxDQUFDO1FBQ2pCQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3RCQyxlQUFlLEVBQUUsQ0FBQztRQUNsQkMscUJBQXFCLEVBQUUsQ0FBQztRQUN4QkMsU0FBUyxFQUFFLElBQUlwQixJQUFJLEVBQUU7UUFDckJxQixXQUFXLEVBQUU7O0tBRWhCO0lBRUQ7SUFBQTtJQUFBbEQsY0FBQSxHQUFBRSxDQUFBO0lBQ0EsSUFBSSxJQUFJLENBQUNhLE1BQU0sQ0FBQ29DLEdBQUcsQ0FBQ2xCLE9BQU8sQ0FBQyxFQUFFO01BQUE7TUFBQWpDLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUM1QixNQUFNLElBQUlrRCxLQUFLLENBQUMsaUJBQWlCbkIsT0FBTyxpQkFBaUIsQ0FBQztJQUM1RCxDQUFDO0lBQUE7SUFBQTtNQUFBakMsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLElBQUksQ0FBQ2EsTUFBTSxDQUFDc0MsR0FBRyxDQUFDcEIsT0FBTyxFQUFFTyxLQUFLLENBQUM7SUFFL0I7SUFBQTtJQUFBeEMsY0FBQSxHQUFBRSxDQUFBO0lBQ0EsSUFBSSxDQUFDZSxhQUFhLENBQUNvQyxHQUFHLENBQUNwQixPQUFPLEVBQUUsQ0FBQztNQUMvQkcsT0FBTyxFQUFFSSxLQUFLLENBQUNKLE9BQU87TUFDdEJrQixTQUFTLEVBQUUsc0JBQXNCO01BQ2pDWixVQUFVLEVBQUUsSUFBSWIsSUFBSSxFQUFFO01BQ3RCMEIsaUJBQWlCLEVBQUUsRUFBRTtNQUNyQkMsbUJBQW1CLEVBQUU7S0FDdEIsQ0FBQyxDQUFDO0lBRUg7SUFBQTtJQUFBeEQsY0FBQSxHQUFBRSxDQUFBO0lBQ0EsTUFBTSxJQUFJLENBQUNVLFVBQVUsQ0FBQzZDLFdBQVcsQ0FBQztNQUNoQ0MsVUFBVSxFQUFFLGtCQUFrQjtNQUM5QkMsU0FBUyxFQUFFMUIsT0FBTztNQUNsQjJCLFdBQVcsRUFBRSxPQUFPO01BQ3BCQyxJQUFJLEVBQUVyQixLQUFLO01BQ1haLFNBQVMsRUFBRSxJQUFJQyxJQUFJO0tBQ3BCLENBQUM7SUFBQztJQUFBN0IsY0FBQSxHQUFBRSxDQUFBO0lBRUhrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyx3QkFBd0JtQixLQUFLLENBQUNMLElBQUksS0FBS0ssS0FBSyxDQUFDSixPQUFPLEVBQUUsQ0FBQztJQUFDO0lBQUFwQyxjQUFBLEdBQUFFLENBQUE7SUFDcEUsSUFBSSxDQUFDdUIsSUFBSSxDQUFDLGlCQUFpQixFQUFFO01BQUVlO0lBQUssQ0FBRSxDQUFDO0lBQUM7SUFBQXhDLGNBQUEsR0FBQUUsQ0FBQTtJQUV4QyxPQUFPc0MsS0FBSztFQUNkO0VBRUE7OztFQUdBLE1BQU1zQixXQUFXQSxDQUFDN0IsT0FBZSxFQUFFOEIsT0FBK0I7SUFBQTtJQUFBL0QsY0FBQSxHQUFBVSxDQUFBO0lBQ2hFLE1BQU1zRCxhQUFhO0lBQUE7SUFBQSxDQUFBaEUsY0FBQSxHQUFBRSxDQUFBLFFBQUcsSUFBSSxDQUFDYSxNQUFNLENBQUNrRCxHQUFHLENBQUNoQyxPQUFPLENBQUM7SUFBQztJQUFBakMsY0FBQSxHQUFBRSxDQUFBO0lBQy9DLElBQUksQ0FBQzhELGFBQWEsRUFBRTtNQUFBO01BQUFoRSxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDbEIsTUFBTSxJQUFJa0QsS0FBSyxDQUFDLFNBQVNuQixPQUFPLFlBQVksQ0FBQztJQUMvQyxDQUFDO0lBQUE7SUFBQTtNQUFBakMsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFDQSxNQUFNK0MsZUFBZTtJQUFBO0lBQUEsQ0FBQWxFLGNBQUEsR0FBQUUsQ0FBQTtJQUFHO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxVQUFBNEMsT0FBTyxDQUFDM0IsT0FBTztJQUFBO0lBQUEsQ0FBQXBDLGNBQUEsR0FBQW1CLENBQUEsVUFBSTRDLE9BQU8sQ0FBQzNCLE9BQU8sS0FBSzRCLGFBQWEsQ0FBQzVCLE9BQU87SUFFcEYsTUFBTStCLFlBQVk7SUFBQTtJQUFBLENBQUFuRSxjQUFBLEdBQUFFLENBQUEsUUFBa0I7TUFDbEMsR0FBRzhELGFBQWE7TUFDaEIsR0FBR0QsT0FBTztNQUNWdEIsRUFBRSxFQUFFUixPQUFPO01BQUU7TUFDYlUsVUFBVSxFQUFFLElBQUlkLElBQUk7S0FDckI7SUFFRDtJQUFBO0lBQUE3QixjQUFBLEdBQUFFLENBQUE7SUFDQTtJQUFJO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxVQUFBNEMsT0FBTyxDQUFDSyxTQUFTO0lBQUE7SUFBQSxDQUFBcEUsY0FBQSxHQUFBbUIsQ0FBQSxVQUFJNEMsT0FBTyxDQUFDTSxXQUFXO0lBQUE7SUFBQSxDQUFBckUsY0FBQSxHQUFBbUIsQ0FBQSxVQUFJNEMsT0FBTyxDQUFDTyxjQUFjLEdBQUU7TUFBQTtNQUFBdEUsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQ3RFaUUsWUFBWSxDQUFDN0IsUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxzQkFBc0IsQ0FBQzRCLFlBQVksQ0FBQztJQUN6RSxDQUFDO0lBQUE7SUFBQTtNQUFBbkUsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFFRCxJQUFJLENBQUNhLE1BQU0sQ0FBQ3NDLEdBQUcsQ0FBQ3BCLE9BQU8sRUFBRWtDLFlBQVksQ0FBQztJQUV0QztJQUFBO0lBQUFuRSxjQUFBLEdBQUFFLENBQUE7SUFDQSxJQUFJZ0UsZUFBZSxFQUFFO01BQUE7TUFBQWxFLGNBQUEsR0FBQW1CLENBQUE7TUFDbkIsTUFBTW9ELFFBQVE7TUFBQTtNQUFBLENBQUF2RSxjQUFBLEdBQUFFLENBQUE7TUFBRztNQUFBLENBQUFGLGNBQUEsR0FBQW1CLENBQUEsY0FBSSxDQUFDRixhQUFhLENBQUNnRCxHQUFHLENBQUNoQyxPQUFPLENBQUM7TUFBQTtNQUFBLENBQUFqQyxjQUFBLEdBQUFtQixDQUFBLFVBQUksRUFBRTtNQUFDO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDdkRxRSxRQUFRLENBQUNDLElBQUksQ0FBQztRQUNacEMsT0FBTyxFQUFFK0IsWUFBWSxDQUFDL0IsT0FBTztRQUM3QmtCLFNBQVMsRUFBRSxlQUFlO1FBQzFCWixVQUFVLEVBQUUsSUFBSWIsSUFBSSxFQUFFO1FBQ3RCMEIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDa0IseUJBQXlCLENBQUNULGFBQWEsRUFBRUcsWUFBWSxDQUFDO1FBQzlFWCxtQkFBbUIsRUFBRSxJQUFJLENBQUM7T0FDM0IsQ0FBQztNQUFDO01BQUF4RCxjQUFBLEdBQUFFLENBQUE7TUFDSCxJQUFJLENBQUNlLGFBQWEsQ0FBQ29DLEdBQUcsQ0FBQ3BCLE9BQU8sRUFBRXNDLFFBQVEsQ0FBQztJQUMzQyxDQUFDO0lBQUE7SUFBQTtNQUFBdkUsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLE1BQU0sSUFBSSxDQUFDVSxVQUFVLENBQUM2QyxXQUFXLENBQUM7TUFDaENDLFVBQVUsRUFBRVEsZUFBZTtNQUFBO01BQUEsQ0FBQWxFLGNBQUEsR0FBQW1CLENBQUEsVUFBRyx1QkFBdUI7TUFBQTtNQUFBLENBQUFuQixjQUFBLEdBQUFtQixDQUFBLFVBQUcsd0JBQXdCO01BQ2hGd0MsU0FBUyxFQUFFMUIsT0FBTztNQUNsQjJCLFdBQVcsRUFBRSxPQUFPO01BQ3BCQyxJQUFJLEVBQUU7UUFBRUUsT0FBTztRQUFFVyxXQUFXLEVBQUVSO01BQWUsQ0FBRTtNQUMvQ3RDLFNBQVMsRUFBRSxJQUFJQyxJQUFJO0tBQ3BCLENBQUM7SUFBQztJQUFBN0IsY0FBQSxHQUFBRSxDQUFBO0lBRUhrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxxQkFBcUI4QyxZQUFZLENBQUNoQyxJQUFJLEtBQUtnQyxZQUFZLENBQUMvQixPQUFPLEVBQUUsQ0FBQztJQUFDO0lBQUFwQyxjQUFBLEdBQUFFLENBQUE7SUFDL0UsSUFBSSxDQUFDdUIsSUFBSSxDQUFDLGNBQWMsRUFBRTtNQUFFZSxLQUFLLEVBQUUyQixZQUFZO01BQUVEO0lBQWUsQ0FBRSxDQUFDO0lBQUM7SUFBQWxFLGNBQUEsR0FBQUUsQ0FBQTtJQUVwRSxPQUFPaUUsWUFBWTtFQUNyQjtFQUVBOzs7RUFHQVEsUUFBUUEsQ0FBQzFDLE9BQWU7SUFBQTtJQUFBakMsY0FBQSxHQUFBVSxDQUFBO0lBQUFWLGNBQUEsR0FBQUUsQ0FBQTtJQUN0QixPQUFPLElBQUksQ0FBQ2EsTUFBTSxDQUFDa0QsR0FBRyxDQUFDaEMsT0FBTyxDQUFDO0VBQ2pDO0VBRUE7OztFQUdBMkMsWUFBWUEsQ0FBQ0MsWUFBeUI7SUFBQTtJQUFBN0UsY0FBQSxHQUFBVSxDQUFBO0lBU3BDLElBQUlvRSxjQUFjO0lBQUE7SUFBQSxDQUFBOUUsY0FBQSxHQUFBRSxDQUFBLFFBQUc2RSxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNqRSxNQUFNLENBQUNrRSxNQUFNLEVBQUUsQ0FBQztJQUVyRDtJQUFBO0lBQUFqRixjQUFBLEdBQUFFLENBQUE7SUFDQSxJQUFJMkUsWUFBWSxDQUFDSyxLQUFLLEVBQUU7TUFBQTtNQUFBbEYsY0FBQSxHQUFBbUIsQ0FBQTtNQUN0QixNQUFNK0QsS0FBSztNQUFBO01BQUEsQ0FBQWxGLGNBQUEsR0FBQUUsQ0FBQSxRQUFHMkUsWUFBWSxDQUFDSyxLQUFLLENBQUNDLFdBQVcsRUFBRTtNQUFDO01BQUFuRixjQUFBLEdBQUFFLENBQUE7TUFDL0M0RSxjQUFjLEdBQUdBLGNBQWMsQ0FBQ00sTUFBTSxDQUFDNUMsS0FBSyxJQUMxQztRQUFBO1FBQUF4QyxjQUFBLEdBQUFVLENBQUE7UUFBQVYsY0FBQSxHQUFBRSxDQUFBO1FBQUEsa0NBQUFGLGNBQUEsR0FBQW1CLENBQUEsV0FBQXFCLEtBQUssQ0FBQ0wsSUFBSSxDQUFDZ0QsV0FBVyxFQUFFLENBQUNFLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDO1FBQUE7UUFBQSxDQUFBbEYsY0FBQSxHQUFBbUIsQ0FBQSxXQUN4Q3FCLEtBQUssQ0FBQzhDLFdBQVcsQ0FBQ0gsV0FBVyxFQUFFLENBQUNFLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDO1FBQUE7UUFBQSxDQUFBbEYsY0FBQSxHQUFBbUIsQ0FBQSxXQUMvQ3FCLEtBQUssQ0FBQytDLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLElBQUk7VUFBQTtVQUFBekYsY0FBQSxHQUFBVSxDQUFBO1VBQUFWLGNBQUEsR0FBQUUsQ0FBQTtVQUFBLE9BQUF1RixHQUFHLENBQUNOLFdBQVcsRUFBRSxDQUFDRSxRQUFRLENBQUNILEtBQUssQ0FBQztRQUFELENBQUMsQ0FBQztNQUFELENBQUMsQ0FDMUQ7SUFDSCxDQUFDO0lBQUE7SUFBQTtNQUFBbEYsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLElBQUkyRSxZQUFZLENBQUNhLE9BQU8sRUFBRTtNQUFBO01BQUExRixjQUFBLEdBQUFtQixDQUFBO01BQ3hCLE1BQU07UUFBRXVFO01BQU8sQ0FBRTtNQUFBO01BQUEsQ0FBQTFGLGNBQUEsR0FBQUUsQ0FBQSxRQUFHMkUsWUFBWTtNQUFDO01BQUE3RSxjQUFBLEdBQUFFLENBQUE7TUFFakMsSUFBSXdGLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFQyxNQUFNLEVBQUU7UUFBQTtRQUFBNUYsY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQzlCNEUsY0FBYyxHQUFHQSxjQUFjLENBQUNNLE1BQU0sQ0FBQzVDLEtBQUssSUFDMUM7VUFBQTtVQUFBeEMsY0FBQSxHQUFBVSxDQUFBO1VBQUFWLGNBQUEsR0FBQUUsQ0FBQTtVQUFBLE9BQUF3RixPQUFPLENBQUNDLFVBQVcsQ0FBQ04sUUFBUSxDQUFDN0MsS0FBSyxDQUFDbUQsVUFBVSxDQUFDO1FBQUQsQ0FBQyxDQUMvQztNQUNILENBQUM7TUFBQTtNQUFBO1FBQUEzRixjQUFBLEdBQUFtQixDQUFBO01BQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUVELElBQUl3RixPQUFPLENBQUNHLFlBQVksRUFBRUQsTUFBTSxFQUFFO1FBQUE7UUFBQTVGLGNBQUEsR0FBQW1CLENBQUE7UUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtRQUNoQzRFLGNBQWMsR0FBR0EsY0FBYyxDQUFDTSxNQUFNLENBQUM1QyxLQUFLLElBQzFDO1VBQUE7VUFBQXhDLGNBQUEsR0FBQVUsQ0FBQTtVQUFBVixjQUFBLEdBQUFFLENBQUE7VUFBQSxPQUFBd0YsT0FBTyxDQUFDRyxZQUFhLENBQUNMLElBQUksQ0FBQ00sR0FBRyxJQUFJO1lBQUE7WUFBQTlGLGNBQUEsR0FBQVUsQ0FBQTtZQUFBVixjQUFBLEdBQUFFLENBQUE7WUFBQSxPQUFBc0MsS0FBSyxDQUFDcUQsWUFBWSxDQUFDQyxHQUFHLENBQUM7VUFBRCxDQUFDLENBQUM7UUFBRCxDQUFDLENBQzNEO01BQ0gsQ0FBQztNQUFBO01BQUE7UUFBQTlGLGNBQUEsR0FBQW1CLENBQUE7TUFBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BRUQsSUFBSXdGLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFO1FBQUE7UUFBQS9GLGNBQUEsR0FBQW1CLENBQUE7UUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtRQUN0QjRFLGNBQWMsR0FBR0EsY0FBYyxDQUFDTSxNQUFNLENBQUM1QyxLQUFLLElBQUc7VUFBQTtVQUFBeEMsY0FBQSxHQUFBVSxDQUFBO1VBQUFWLGNBQUEsR0FBQUUsQ0FBQTtVQUM3QztVQUFJO1VBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBdUUsT0FBTyxDQUFDSyxVQUFXLENBQUNDLE1BQU07VUFBQTtVQUFBLENBQUFoRyxjQUFBLEdBQUFtQixDQUFBLFdBQUlxQixLQUFLLENBQUN5RCxPQUFPLEdBQUdQLE9BQU8sQ0FBQ0ssVUFBVyxDQUFDQyxNQUFNLEdBQUU7WUFBQTtZQUFBaEcsY0FBQSxHQUFBbUIsQ0FBQTtZQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1lBQUEsT0FBTyxLQUFLO1VBQUEsQ0FBQztVQUFBO1VBQUE7WUFBQUYsY0FBQSxHQUFBbUIsQ0FBQTtVQUFBO1VBQUFuQixjQUFBLEdBQUFFLENBQUE7VUFDM0Y7VUFBSTtVQUFBLENBQUFGLGNBQUEsR0FBQW1CLENBQUEsV0FBQXVFLE9BQU8sQ0FBQ0ssVUFBVyxDQUFDRyxNQUFNO1VBQUE7VUFBQSxDQUFBbEcsY0FBQSxHQUFBbUIsQ0FBQSxXQUFJcUIsS0FBSyxDQUFDeUQsT0FBTyxHQUFHUCxPQUFPLENBQUNLLFVBQVcsQ0FBQ0csTUFBTSxHQUFFO1lBQUE7WUFBQWxHLGNBQUEsR0FBQW1CLENBQUE7WUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtZQUFBLE9BQU8sS0FBSztVQUFBLENBQUM7VUFBQTtVQUFBO1lBQUFGLGNBQUEsR0FBQW1CLENBQUE7VUFBQTtVQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1VBQzNGLE9BQU8sSUFBSTtRQUNiLENBQUMsQ0FBQztNQUNKLENBQUM7TUFBQTtNQUFBO1FBQUFGLGNBQUEsR0FBQW1CLENBQUE7TUFBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BRUQsSUFBSXdGLE9BQU8sQ0FBQ1MscUJBQXFCLEVBQUU7UUFBQTtRQUFBbkcsY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQ2pDNEUsY0FBYyxHQUFHQSxjQUFjLENBQUNNLE1BQU0sQ0FBQzVDLEtBQUssSUFBRztVQUFBO1VBQUF4QyxjQUFBLEdBQUFVLENBQUE7VUFBQVYsY0FBQSxHQUFBRSxDQUFBO1VBQzdDLE9BQU9rRyxNQUFNLENBQUNDLE9BQU8sQ0FBQ1gsT0FBTyxDQUFDUyxxQkFBc0IsQ0FBQyxDQUFDRyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxNQUFNLEVBQUVDLFNBQVMsQ0FBQyxLQUFJO1lBQUE7WUFBQXhHLGNBQUEsR0FBQVUsQ0FBQTtZQUNsRixNQUFNK0YsS0FBSztZQUFBO1lBQUEsQ0FBQXpHLGNBQUEsR0FBQUUsQ0FBQSxRQUFHc0MsS0FBSyxDQUFDa0UsbUJBQW1CLENBQUNILE1BQU0sQ0FBQztZQUFDO1lBQUF2RyxjQUFBLEdBQUFFLENBQUE7WUFDaEQsT0FBTywyQkFBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBc0YsS0FBSyxLQUFLRSxTQUFTO1lBQUE7WUFBQSxDQUFBM0csY0FBQSxHQUFBbUIsQ0FBQSxXQUFJc0YsS0FBSyxJQUFJRCxTQUFTO1VBQ2xELENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQztNQUNKLENBQUM7TUFBQTtNQUFBO1FBQUF4RyxjQUFBLEdBQUFtQixDQUFBO01BQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUVELElBQUl3RixPQUFPLENBQUNrQixpQkFBaUIsRUFBRWhCLE1BQU0sRUFBRTtRQUFBO1FBQUE1RixjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFDckM0RSxjQUFjLEdBQUdBLGNBQWMsQ0FBQ00sTUFBTSxDQUFDNUMsS0FBSyxJQUMxQztVQUFBO1VBQUF4QyxjQUFBLEdBQUFVLENBQUE7VUFBQVYsY0FBQSxHQUFBRSxDQUFBO1VBQUEsT0FBQXdGLE9BQU8sQ0FBQ2tCLGlCQUFrQixDQUFDdkIsUUFBUSxDQUFDN0MsS0FBSyxDQUFDcUUsZUFBZSxDQUFDQyxNQUFNLENBQUM7UUFBRCxDQUFDLENBQ2xFO01BQ0gsQ0FBQztNQUFBO01BQUE7UUFBQTlHLGNBQUEsR0FBQW1CLENBQUE7TUFBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BRUQsSUFBSXdGLE9BQU8sQ0FBQ0gsSUFBSSxFQUFFSyxNQUFNLEVBQUU7UUFBQTtRQUFBNUYsY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQ3hCNEUsY0FBYyxHQUFHQSxjQUFjLENBQUNNLE1BQU0sQ0FBQzVDLEtBQUssSUFDMUM7VUFBQTtVQUFBeEMsY0FBQSxHQUFBVSxDQUFBO1VBQUFWLGNBQUEsR0FBQUUsQ0FBQTtVQUFBLE9BQUF3RixPQUFPLENBQUNILElBQUssQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLElBQUk7WUFBQTtZQUFBekYsY0FBQSxHQUFBVSxDQUFBO1lBQUFWLGNBQUEsR0FBQUUsQ0FBQTtZQUFBLE9BQUFzQyxLQUFLLENBQUMrQyxJQUFJLENBQUNGLFFBQVEsQ0FBQ0ksR0FBRyxDQUFDO1VBQUQsQ0FBQyxDQUFDO1FBQUQsQ0FBQyxDQUNwRDtNQUNILENBQUM7TUFBQTtNQUFBO1FBQUF6RixjQUFBLEdBQUFtQixDQUFBO01BQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUVELElBQUl3RixPQUFPLENBQUNxQixhQUFhLEVBQUU7UUFBQTtRQUFBL0csY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQ3pCNEUsY0FBYyxHQUFHQSxjQUFjLENBQUNNLE1BQU0sQ0FBQzVDLEtBQUssSUFDMUM7VUFBQTtVQUFBeEMsY0FBQSxHQUFBVSxDQUFBO1VBQUFWLGNBQUEsR0FBQUUsQ0FBQTtVQUFBLE9BQUFzQyxLQUFLLENBQUNFLFVBQVUsSUFBSWdELE9BQU8sQ0FBQ3FCLGFBQWM7UUFBZCxDQUFjLENBQzNDO01BQ0gsQ0FBQztNQUFBO01BQUE7UUFBQS9HLGNBQUEsR0FBQW1CLENBQUE7TUFBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BRUQsSUFBSXdGLE9BQU8sQ0FBQ3NCLGNBQWMsRUFBRTtRQUFBO1FBQUFoSCxjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFDMUI0RSxjQUFjLEdBQUdBLGNBQWMsQ0FBQ00sTUFBTSxDQUFDNUMsS0FBSyxJQUMxQztVQUFBO1VBQUF4QyxjQUFBLEdBQUFVLENBQUE7VUFBQVYsY0FBQSxHQUFBRSxDQUFBO1VBQUEsT0FBQXNDLEtBQUssQ0FBQ0UsVUFBVSxJQUFJZ0QsT0FBTyxDQUFDc0IsY0FBZTtRQUFmLENBQWUsQ0FDNUM7TUFDSCxDQUFDO01BQUE7TUFBQTtRQUFBaEgsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBO0lBQ0gsQ0FBQztJQUFBO0lBQUE7TUFBQW5CLGNBQUEsR0FBQW1CLENBQUE7SUFBQTtJQUVEO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFDQSxJQUFJMkUsWUFBWSxDQUFDb0MsT0FBTyxFQUFFO01BQUE7TUFBQWpILGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUN4QjRFLGNBQWMsQ0FBQ29DLElBQUksQ0FBQyxDQUFDQyxDQUFDLEVBQUVoRyxDQUFDLEtBQUk7UUFBQTtRQUFBbkIsY0FBQSxHQUFBVSxDQUFBO1FBQzNCLElBQUkwRyxJQUFTLEVBQUVDLElBQVM7UUFBQztRQUFBckgsY0FBQSxHQUFBRSxDQUFBO1FBRXpCLFFBQVEyRSxZQUFZLENBQUNvQyxPQUFPO1VBQzFCLEtBQUssTUFBTTtZQUFBO1lBQUFqSCxjQUFBLEdBQUFtQixDQUFBO1lBQUFuQixjQUFBLEdBQUFFLENBQUE7WUFDVGtILElBQUksR0FBR0QsQ0FBQyxDQUFDaEYsSUFBSTtZQUFDO1lBQUFuQyxjQUFBLEdBQUFFLENBQUE7WUFDZG1ILElBQUksR0FBR2xHLENBQUMsQ0FBQ2dCLElBQUk7WUFBQztZQUFBbkMsY0FBQSxHQUFBRSxDQUFBO1lBQ2Q7VUFDRixLQUFLLFlBQVk7WUFBQTtZQUFBRixjQUFBLEdBQUFtQixDQUFBO1lBQUFuQixjQUFBLEdBQUFFLENBQUE7WUFDZmtILElBQUksR0FBR0QsQ0FBQyxDQUFDekUsVUFBVSxDQUFDNEUsT0FBTyxFQUFFO1lBQUM7WUFBQXRILGNBQUEsR0FBQUUsQ0FBQTtZQUM5Qm1ILElBQUksR0FBR2xHLENBQUMsQ0FBQ3VCLFVBQVUsQ0FBQzRFLE9BQU8sRUFBRTtZQUFDO1lBQUF0SCxjQUFBLEdBQUFFLENBQUE7WUFDOUI7VUFDRixLQUFLLFNBQVM7WUFBQTtZQUFBRixjQUFBLEdBQUFtQixDQUFBO1lBQUFuQixjQUFBLEdBQUFFLENBQUE7WUFDWmtILElBQUksR0FBR0QsQ0FBQyxDQUFDbEIsT0FBTztZQUFDO1lBQUFqRyxjQUFBLEdBQUFFLENBQUE7WUFDakJtSCxJQUFJLEdBQUdsRyxDQUFDLENBQUM4RSxPQUFPO1lBQUM7WUFBQWpHLGNBQUEsR0FBQUUsQ0FBQTtZQUNqQjtVQUNGLEtBQUssYUFBYTtZQUFBO1lBQUFGLGNBQUEsR0FBQW1CLENBQUE7WUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtZQUNoQmtILElBQUk7WUFBRztZQUFBLENBQUFwSCxjQUFBLEdBQUFtQixDQUFBLFdBQUFnRyxDQUFDLENBQUNULG1CQUFtQixDQUFDYSxRQUFRO1lBQUE7WUFBQSxDQUFBdkgsY0FBQSxHQUFBbUIsQ0FBQSxXQUFJLENBQUM7WUFBQztZQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1lBQzNDbUgsSUFBSTtZQUFHO1lBQUEsQ0FBQXJILGNBQUEsR0FBQW1CLENBQUEsV0FBQUEsQ0FBQyxDQUFDdUYsbUJBQW1CLENBQUNhLFFBQVE7WUFBQTtZQUFBLENBQUF2SCxjQUFBLEdBQUFtQixDQUFBLFdBQUksQ0FBQztZQUFDO1lBQUFuQixjQUFBLEdBQUFFLENBQUE7WUFDM0M7VUFDRixLQUFLLE9BQU87WUFBQTtZQUFBRixjQUFBLEdBQUFtQixDQUFBO1lBQUFuQixjQUFBLEdBQUFFLENBQUE7WUFDVmtILElBQUksR0FBR0QsQ0FBQyxDQUFDdkUsZ0JBQWdCLENBQUNDLGNBQWM7WUFBQztZQUFBN0MsY0FBQSxHQUFBRSxDQUFBO1lBQ3pDbUgsSUFBSSxHQUFHbEcsQ0FBQyxDQUFDeUIsZ0JBQWdCLENBQUNDLGNBQWM7WUFBQztZQUFBN0MsY0FBQSxHQUFBRSxDQUFBO1lBQ3pDO1VBQ0Y7WUFBQTtZQUFBRixjQUFBLEdBQUFtQixDQUFBO1lBQUFuQixjQUFBLEdBQUFFLENBQUE7WUFDRSxPQUFPLENBQUM7UUFDWjtRQUFDO1FBQUFGLGNBQUEsR0FBQUUsQ0FBQTtRQUVELElBQUkyRSxZQUFZLENBQUMyQyxVQUFVLEtBQUssTUFBTSxFQUFFO1VBQUE7VUFBQXhILGNBQUEsR0FBQW1CLENBQUE7VUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtVQUN0QyxPQUFPa0gsSUFBSSxHQUFHQyxJQUFJO1VBQUE7VUFBQSxDQUFBckgsY0FBQSxHQUFBbUIsQ0FBQSxXQUFHLENBQUM7VUFBQTtVQUFBLENBQUFuQixjQUFBLEdBQUFtQixDQUFBLFdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFBQTtRQUFBO1VBQUFuQixjQUFBLEdBQUFtQixDQUFBO1FBQUE7UUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtRQUNELE9BQU9rSCxJQUFJLEdBQUdDLElBQUk7UUFBQTtRQUFBLENBQUFySCxjQUFBLEdBQUFtQixDQUFBLFdBQUcsQ0FBQztRQUFBO1FBQUEsQ0FBQW5CLGNBQUEsR0FBQW1CLENBQUEsV0FBRyxDQUFDLENBQUM7TUFDN0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUFBO0lBQUE7TUFBQW5CLGNBQUEsR0FBQW1CLENBQUE7SUFBQTtJQUVEO0lBQ0EsTUFBTXNHLEtBQUs7SUFBQTtJQUFBLENBQUF6SCxjQUFBLEdBQUFFLENBQUE7SUFBRztJQUFBLENBQUFGLGNBQUEsR0FBQW1CLENBQUEsV0FBQTBELFlBQVksQ0FBQzRDLEtBQUs7SUFBQTtJQUFBLENBQUF6SCxjQUFBLEdBQUFtQixDQUFBLFdBQUksRUFBRTtJQUN0QyxNQUFNdUcsTUFBTTtJQUFBO0lBQUEsQ0FBQTFILGNBQUEsR0FBQUUsQ0FBQTtJQUFHO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBMEQsWUFBWSxDQUFDNkMsTUFBTTtJQUFBO0lBQUEsQ0FBQTFILGNBQUEsR0FBQW1CLENBQUEsV0FBSSxDQUFDO0lBQ3ZDLE1BQU13RyxlQUFlO0lBQUE7SUFBQSxDQUFBM0gsY0FBQSxHQUFBRSxDQUFBLFNBQUc0RSxjQUFjLENBQUM4QyxLQUFLLENBQUNGLE1BQU0sRUFBRUEsTUFBTSxHQUFHRCxLQUFLLENBQUM7SUFDcEUsTUFBTUksT0FBTztJQUFBO0lBQUEsQ0FBQTdILGNBQUEsR0FBQUUsQ0FBQSxTQUFHd0gsTUFBTSxHQUFHRCxLQUFLLEdBQUczQyxjQUFjLENBQUNjLE1BQU07SUFBQztJQUFBNUYsY0FBQSxHQUFBRSxDQUFBO0lBRXZELE9BQU87TUFDTGEsTUFBTSxFQUFFNEcsZUFBZTtNQUN2QkcsV0FBVyxFQUFFaEQsY0FBYyxDQUFDYyxNQUFNO01BQ2xDbUMsVUFBVSxFQUFFO1FBQ1ZOLEtBQUs7UUFDTEMsTUFBTTtRQUNOTSxRQUFRLEVBQUVIOztLQUViO0VBQ0g7RUFFQTs7O0VBR0EsTUFBTUksYUFBYUEsQ0FBQ0MsUUFBZ0IsRUFBRUMsUUFBZ0I7SUFBQTtJQUFBbkksY0FBQSxHQUFBVSxDQUFBO0lBQ3BELE1BQU0wSCxNQUFNO0lBQUE7SUFBQSxDQUFBcEksY0FBQSxHQUFBRSxDQUFBLFNBQUcsSUFBSSxDQUFDYSxNQUFNLENBQUNrRCxHQUFHLENBQUNpRSxRQUFRLENBQUM7SUFDeEMsTUFBTUcsTUFBTTtJQUFBO0lBQUEsQ0FBQXJJLGNBQUEsR0FBQUUsQ0FBQSxTQUFHLElBQUksQ0FBQ2EsTUFBTSxDQUFDa0QsR0FBRyxDQUFDa0UsUUFBUSxDQUFDO0lBQUM7SUFBQW5JLGNBQUEsR0FBQUUsQ0FBQTtJQUV6QztJQUFJO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxZQUFDaUgsTUFBTTtJQUFBO0lBQUEsQ0FBQXBJLGNBQUEsR0FBQW1CLENBQUEsV0FBSSxDQUFDa0gsTUFBTSxHQUFFO01BQUE7TUFBQXJJLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUN0QixNQUFNLElBQUlrRCxLQUFLLENBQUMsOEJBQThCLENBQUM7SUFDakQsQ0FBQztJQUFBO0lBQUE7TUFBQXBELGNBQUEsR0FBQW1CLENBQUE7SUFBQTtJQUVELE1BQU1tSCxVQUFVO0lBQUE7SUFBQSxDQUFBdEksY0FBQSxHQUFBRSxDQUFBLFNBQW9CO01BQ2xDcUksT0FBTyxFQUFFTCxRQUFRO01BQ2pCTSxPQUFPLEVBQUVMLFFBQVE7TUFDakJNLGVBQWUsRUFBRSxJQUFJNUcsSUFBSSxFQUFFO01BQzNCNkcsa0JBQWtCLEVBQUUsRUFBRTtNQUN0QkMsaUJBQWlCLEVBQUUsRUFBRTtNQUNyQkMsY0FBYyxFQUFFO1FBQ2RDLGVBQWUsRUFBRSxFQUFFO1FBQ25CQyxTQUFTLEVBQUUsRUFBRTtRQUNiQyx3QkFBd0IsRUFBRTs7S0FFN0I7SUFFRDtJQUNBLE1BQU1DLFVBQVU7SUFBQTtJQUFBLENBQUFoSixjQUFBLEdBQUFFLENBQUEsU0FBRyxJQUFJK0ksR0FBRyxDQUFDLENBQ3pCLEdBQUc3QyxNQUFNLENBQUM4QyxJQUFJLENBQUNkLE1BQU0sQ0FBQzFCLG1CQUFtQixDQUFDLEVBQzFDLEdBQUdOLE1BQU0sQ0FBQzhDLElBQUksQ0FBQ2IsTUFBTSxDQUFDM0IsbUJBQW1CLENBQUMsQ0FDM0MsQ0FBQztJQUFDO0lBQUExRyxjQUFBLEdBQUFFLENBQUE7SUFFSCxLQUFLLE1BQU1xRyxNQUFNLElBQUl5QyxVQUFVLEVBQUU7TUFDL0IsTUFBTUcsTUFBTTtNQUFBO01BQUEsQ0FBQW5KLGNBQUEsR0FBQUUsQ0FBQTtNQUFHO01BQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBaUgsTUFBTSxDQUFDMUIsbUJBQW1CLENBQUNILE1BQU0sQ0FBQztNQUFBO01BQUEsQ0FBQXZHLGNBQUEsR0FBQW1CLENBQUEsV0FBSSxDQUFDO01BQ3RELE1BQU1pSSxNQUFNO01BQUE7TUFBQSxDQUFBcEosY0FBQSxHQUFBRSxDQUFBO01BQUc7TUFBQSxDQUFBRixjQUFBLEdBQUFtQixDQUFBLFdBQUFrSCxNQUFNLENBQUMzQixtQkFBbUIsQ0FBQ0gsTUFBTSxDQUFDO01BQUE7TUFBQSxDQUFBdkcsY0FBQSxHQUFBbUIsQ0FBQSxXQUFJLENBQUM7TUFDdEQsTUFBTWtJLGNBQWM7TUFBQTtNQUFBLENBQUFySixjQUFBLEdBQUFFLENBQUEsU0FBR2tKLE1BQU0sS0FBSyxDQUFDO01BQUE7TUFBQSxDQUFBcEosY0FBQSxHQUFBbUIsQ0FBQSxXQUFJLENBQUNnSSxNQUFNLEdBQUdDLE1BQU0sSUFBSUEsTUFBTSxHQUFJLEdBQUc7TUFBQTtNQUFBLENBQUFwSixjQUFBLEdBQUFtQixDQUFBLFdBQUcsQ0FBQztNQUU1RSxJQUFJbUksTUFBTTtNQUFBO01BQUEsQ0FBQXRKLGNBQUEsR0FBQUUsQ0FBQSxTQUFrQyxLQUFLO01BQUM7TUFBQUYsY0FBQSxHQUFBRSxDQUFBO01BQ2xEO01BQUk7TUFBQSxDQUFBRixjQUFBLEdBQUFtQixDQUFBLFdBQUFvRixNQUFNLEtBQUssc0JBQXNCO01BQUE7TUFBQSxDQUFBdkcsY0FBQSxHQUFBbUIsQ0FBQSxXQUFJb0YsTUFBTSxLQUFLLGlCQUFpQixHQUFFO1FBQUE7UUFBQXZHLGNBQUEsR0FBQW1CLENBQUE7UUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtRQUNyRTtRQUNBb0osTUFBTSxHQUFHSCxNQUFNLEdBQUdDLE1BQU07UUFBQTtRQUFBLENBQUFwSixjQUFBLEdBQUFtQixDQUFBLFdBQUcsU0FBUztRQUFBO1FBQUEsQ0FBQW5CLGNBQUEsR0FBQW1CLENBQUEsV0FBSWdJLE1BQU0sR0FBR0MsTUFBTTtRQUFBO1FBQUEsQ0FBQXBKLGNBQUEsR0FBQW1CLENBQUEsV0FBRyxTQUFTO1FBQUE7UUFBQSxDQUFBbkIsY0FBQSxHQUFBbUIsQ0FBQSxXQUFHLEtBQUssRUFBQztNQUM5RSxDQUFDLE1BQU07UUFBQTtRQUFBbkIsY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQ0w7UUFDQW9KLE1BQU0sR0FBR0gsTUFBTSxHQUFHQyxNQUFNO1FBQUE7UUFBQSxDQUFBcEosY0FBQSxHQUFBbUIsQ0FBQSxXQUFHLFNBQVM7UUFBQTtRQUFBLENBQUFuQixjQUFBLEdBQUFtQixDQUFBLFdBQUlnSSxNQUFNLEdBQUdDLE1BQU07UUFBQTtRQUFBLENBQUFwSixjQUFBLEdBQUFtQixDQUFBLFdBQUcsU0FBUztRQUFBO1FBQUEsQ0FBQW5CLGNBQUEsR0FBQW1CLENBQUEsV0FBRyxLQUFLLEVBQUM7TUFDOUU7TUFBQztNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BRURvSSxVQUFVLENBQUNJLGtCQUFrQixDQUFDbkMsTUFBTSxDQUFDLEdBQUc7UUFDdENnRCxhQUFhLEVBQUVKLE1BQU07UUFDckJLLGFBQWEsRUFBRUosTUFBTTtRQUNyQkssZUFBZSxFQUFFSixjQUFjO1FBQy9CQztPQUNEO0lBQ0g7SUFFQTtJQUNBLE1BQU1JLEtBQUs7SUFBQTtJQUFBLENBQUExSixjQUFBLEdBQUFFLENBQUEsU0FBR2tHLE1BQU0sQ0FBQ25CLE1BQU0sQ0FBQ3FELFVBQVUsQ0FBQ0ksa0JBQWtCLENBQUMsQ0FBQ3RELE1BQU0sQ0FBQ3VFLENBQUMsSUFBSTtNQUFBO01BQUEzSixjQUFBLEdBQUFVLENBQUE7TUFBQVYsY0FBQSxHQUFBRSxDQUFBO01BQUEsT0FBQXlKLENBQUMsQ0FBQ0wsTUFBTSxLQUFLLFNBQVM7SUFBVCxDQUFTLENBQUMsQ0FBQzFELE1BQU07SUFDckcsTUFBTWdFLEtBQUs7SUFBQTtJQUFBLENBQUE1SixjQUFBLEdBQUFFLENBQUEsU0FBR2tHLE1BQU0sQ0FBQ25CLE1BQU0sQ0FBQ3FELFVBQVUsQ0FBQ0ksa0JBQWtCLENBQUMsQ0FBQ3RELE1BQU0sQ0FBQ3VFLENBQUMsSUFBSTtNQUFBO01BQUEzSixjQUFBLEdBQUFVLENBQUE7TUFBQVYsY0FBQSxHQUFBRSxDQUFBO01BQUEsT0FBQXlKLENBQUMsQ0FBQ0wsTUFBTSxLQUFLLFNBQVM7SUFBVCxDQUFTLENBQUMsQ0FBQzFELE1BQU07SUFBQztJQUFBNUYsY0FBQSxHQUFBRSxDQUFBO0lBRXRHb0ksVUFBVSxDQUFDTSxjQUFjLENBQUNDLGVBQWUsR0FBR2EsS0FBSyxHQUFHRSxLQUFLO0lBQUE7SUFBQSxDQUFBNUosY0FBQSxHQUFBbUIsQ0FBQSxXQUFHK0csUUFBUTtJQUFBO0lBQUEsQ0FBQWxJLGNBQUEsR0FBQW1CLENBQUEsV0FBSXlJLEtBQUssR0FBR0YsS0FBSztJQUFBO0lBQUEsQ0FBQTFKLGNBQUEsR0FBQW1CLENBQUEsV0FBR2dILFFBQVE7SUFBQTtJQUFBLENBQUFuSSxjQUFBLEdBQUFtQixDQUFBLFdBQUcsS0FBSyxFQUFDO0lBRXpHO0lBQUE7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBb0ksVUFBVSxDQUFDTSxjQUFjLENBQUNFLFNBQVMsR0FBRyxJQUFJLENBQUNlLDJCQUEyQixDQUFDekIsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsQ0FBQztJQUVsRztJQUFBO0lBQUF0SSxjQUFBLEdBQUFFLENBQUE7SUFDQW9JLFVBQVUsQ0FBQ00sY0FBYyxDQUFDRyx3QkFBd0IsR0FBRyxJQUFJLENBQUNlLDhCQUE4QixDQUFDMUIsTUFBTSxFQUFFQyxNQUFNLENBQUM7SUFFeEc7SUFBQTtJQUFBckksY0FBQSxHQUFBRSxDQUFBO0lBQ0EsTUFBTSxJQUFJLENBQUNVLFVBQVUsQ0FBQzZDLFdBQVcsQ0FBQztNQUNoQ0MsVUFBVSxFQUFFLGlCQUFpQjtNQUM3QkMsU0FBUyxFQUFFLEdBQUd1RSxRQUFRLE9BQU9DLFFBQVEsRUFBRTtNQUN2Q3ZFLFdBQVcsRUFBRSxZQUFZO01BQ3pCQyxJQUFJLEVBQUV5RSxVQUFVO01BQ2hCMUcsU0FBUyxFQUFFLElBQUlDLElBQUk7S0FDcEIsQ0FBQztJQUFDO0lBQUE3QixjQUFBLEdBQUFFLENBQUE7SUFFSCxPQUFPb0ksVUFBVTtFQUNuQjtFQUVBOzs7RUFHQXlCLGtCQUFrQkEsQ0FBQzlILE9BQWUsRUFBRStILFNBQXNDO0lBQUE7SUFBQWhLLGNBQUEsR0FBQVUsQ0FBQTtJQU94RSxNQUFNOEIsS0FBSztJQUFBO0lBQUEsQ0FBQXhDLGNBQUEsR0FBQUUsQ0FBQSxTQUFHLElBQUksQ0FBQ2EsTUFBTSxDQUFDa0QsR0FBRyxDQUFDaEMsT0FBTyxDQUFDO0lBQUM7SUFBQWpDLGNBQUEsR0FBQUUsQ0FBQTtJQUN2QyxJQUFJLENBQUNzQyxLQUFLLEVBQUU7TUFBQTtNQUFBeEMsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQ1YsTUFBTSxJQUFJa0QsS0FBSyxDQUFDLFNBQVNuQixPQUFPLFlBQVksQ0FBQztJQUMvQyxDQUFDO0lBQUE7SUFBQTtNQUFBakMsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLE9BQU87TUFDTDJDLGNBQWMsRUFBRUwsS0FBSyxDQUFDSSxnQkFBZ0IsQ0FBQ0MsY0FBYztNQUNyRG9ILFlBQVksRUFBRXpILEtBQUssQ0FBQ0ksZ0JBQWdCLENBQUNFLG1CQUFtQixHQUFHTixLQUFLLENBQUNJLGdCQUFnQixDQUFDQyxjQUFjLEdBQUcsR0FBRztNQUN0R0cscUJBQXFCLEVBQUVSLEtBQUssQ0FBQ0ksZ0JBQWdCLENBQUNJLHFCQUFxQjtNQUNuRWtILFdBQVcsRUFBRTFILEtBQUssQ0FBQ0ksZ0JBQWdCLENBQUNNLFdBQVc7TUFDL0NpSCxlQUFlLEVBQUUsQ0FDZjtRQUFFQyxVQUFVLEVBQUUsU0FBUztRQUFFQyxLQUFLLEVBQUU7TUFBRSxDQUFFLEVBQ3BDO1FBQUVELFVBQVUsRUFBRSxZQUFZO1FBQUVDLEtBQUssRUFBRTtNQUFDLENBQUUsRUFDdEM7UUFBRUQsVUFBVSxFQUFFLGVBQWU7UUFBRUMsS0FBSyxFQUFFO01BQUMsQ0FBRTtLQUU1QztFQUNIO0VBRUE7OztFQUdBLE1BQU1DLHFCQUFxQkEsQ0FDekJySSxPQUFlLEVBQ2ZzSSxXQUtDO0lBQUE7SUFBQXZLLGNBQUEsR0FBQVUsQ0FBQTtJQUVELE1BQU04QixLQUFLO0lBQUE7SUFBQSxDQUFBeEMsY0FBQSxHQUFBRSxDQUFBLFNBQUcsSUFBSSxDQUFDYSxNQUFNLENBQUNrRCxHQUFHLENBQUNoQyxPQUFPLENBQUM7SUFBQztJQUFBakMsY0FBQSxHQUFBRSxDQUFBO0lBQ3ZDLElBQUksQ0FBQ3NDLEtBQUssRUFBRTtNQUFBO01BQUF4QyxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDVixNQUFNLElBQUlrRCxLQUFLLENBQUMsU0FBU25CLE9BQU8sWUFBWSxDQUFDO0lBQy9DLENBQUM7SUFBQTtJQUFBO01BQUFqQyxjQUFBLEdBQUFtQixDQUFBO0lBQUE7SUFFRDtJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBQ0FzQyxLQUFLLENBQUNJLGdCQUFnQixDQUFDQyxjQUFjLEVBQUU7SUFBQztJQUFBN0MsY0FBQSxHQUFBRSxDQUFBO0lBQ3hDLElBQUlxSyxXQUFXLENBQUNDLE9BQU8sRUFBRTtNQUFBO01BQUF4SyxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDdkJzQyxLQUFLLENBQUNJLGdCQUFnQixDQUFDRSxtQkFBbUIsRUFBRTtJQUM5QyxDQUFDLE1BQU07TUFBQTtNQUFBOUMsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQ0xzQyxLQUFLLENBQUNJLGdCQUFnQixDQUFDRyxlQUFlLEVBQUU7SUFDMUM7SUFFQTtJQUNBLE1BQU0wSCxLQUFLO0lBQUE7SUFBQSxDQUFBekssY0FBQSxHQUFBRSxDQUFBLFNBQUcsR0FBRyxFQUFDLENBQUM7SUFBQTtJQUFBRixjQUFBLEdBQUFFLENBQUE7SUFDbkJzQyxLQUFLLENBQUNJLGdCQUFnQixDQUFDSSxxQkFBcUIsR0FDMUN5SCxLQUFLLEdBQUdGLFdBQVcsQ0FBQ0csYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHRCxLQUFLLElBQUlqSSxLQUFLLENBQUNJLGdCQUFnQixDQUFDSSxxQkFBcUI7SUFFaEc7SUFDQSxNQUFNMkgsT0FBTztJQUFBO0lBQUEsQ0FBQTNLLGNBQUEsR0FBQUUsQ0FBQSxTQUFHcUssV0FBVyxDQUFDM0ksU0FBUyxDQUFDZ0osV0FBVyxFQUFFLENBQUNDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQztJQUFBN0ssY0FBQSxHQUFBRSxDQUFBO0lBQ2xFc0MsS0FBSyxDQUFDSSxnQkFBZ0IsQ0FBQ00sV0FBVyxDQUFDeUgsT0FBTyxDQUFDLEdBQUc7SUFBQztJQUFBLENBQUEzSyxjQUFBLEdBQUFtQixDQUFBLFdBQUFxQixLQUFLLENBQUNJLGdCQUFnQixDQUFDTSxXQUFXLENBQUN5SCxPQUFPLENBQUM7SUFBQTtJQUFBLENBQUEzSyxjQUFBLEdBQUFtQixDQUFBLFdBQUksQ0FBQyxLQUFJLENBQUM7SUFBQztJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBRXJHc0MsS0FBSyxDQUFDSSxnQkFBZ0IsQ0FBQ0ssU0FBUyxHQUFHc0gsV0FBVyxDQUFDM0ksU0FBUztJQUFDO0lBQUE1QixjQUFBLEdBQUFFLENBQUE7SUFDekRzQyxLQUFLLENBQUNHLFVBQVUsR0FBRyxJQUFJZCxJQUFJLEVBQUU7SUFBQztJQUFBN0IsY0FBQSxHQUFBRSxDQUFBO0lBRTlCLElBQUksQ0FBQ2EsTUFBTSxDQUFDc0MsR0FBRyxDQUFDcEIsT0FBTyxFQUFFTyxLQUFLLENBQUM7RUFDakM7RUFFQTs7O0VBR0FzSSxzQkFBc0JBLENBQUM3SSxPQUFlO0lBQUE7SUFBQWpDLGNBQUEsR0FBQVUsQ0FBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDcEMsT0FBTywyQkFBQUYsY0FBQSxHQUFBbUIsQ0FBQSxlQUFJLENBQUNGLGFBQWEsQ0FBQ2dELEdBQUcsQ0FBQ2hDLE9BQU8sQ0FBQztJQUFBO0lBQUEsQ0FBQWpDLGNBQUEsR0FBQW1CLENBQUEsV0FBSSxFQUFFO0VBQzlDO0VBRUE7OztFQUdBLE1BQU00SixXQUFXQSxDQUFDOUksT0FBZSxFQUFFK0ksS0FBQTtFQUFBO0VBQUEsQ0FBQWhMLGNBQUEsR0FBQW1CLENBQUEsV0FBaUIsS0FBSztJQUFBO0lBQUFuQixjQUFBLEdBQUFVLENBQUE7SUFDdkQsTUFBTThCLEtBQUs7SUFBQTtJQUFBLENBQUF4QyxjQUFBLEdBQUFFLENBQUEsU0FBRyxJQUFJLENBQUNhLE1BQU0sQ0FBQ2tELEdBQUcsQ0FBQ2hDLE9BQU8sQ0FBQztJQUFDO0lBQUFqQyxjQUFBLEdBQUFFLENBQUE7SUFDdkMsSUFBSSxDQUFDc0MsS0FBSyxFQUFFO01BQUE7TUFBQXhDLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUNWLE1BQU0sSUFBSWtELEtBQUssQ0FBQyxTQUFTbkIsT0FBTyxZQUFZLENBQUM7SUFDL0MsQ0FBQztJQUFBO0lBQUE7TUFBQWpDLGNBQUEsR0FBQW1CLENBQUE7SUFBQTtJQUVEO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFDQTtJQUFJO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBcUIsS0FBSyxDQUFDcUUsZUFBZSxDQUFDQyxNQUFNLEtBQUssVUFBVTtJQUFBO0lBQUEsQ0FBQTlHLGNBQUEsR0FBQW1CLENBQUEsV0FBSSxDQUFDNkosS0FBSyxHQUFFO01BQUE7TUFBQWhMLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUN6RCxNQUFNLElBQUlrRCxLQUFLLENBQUMsZ0NBQWdDbkIsT0FBTywrQkFBK0IsQ0FBQztJQUN6RixDQUFDO0lBQUE7SUFBQTtNQUFBakMsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLElBQUksQ0FBQ2EsTUFBTSxDQUFDa0ssTUFBTSxDQUFDaEosT0FBTyxDQUFDO0lBQUM7SUFBQWpDLGNBQUEsR0FBQUUsQ0FBQTtJQUM1QixJQUFJLENBQUNlLGFBQWEsQ0FBQ2dLLE1BQU0sQ0FBQ2hKLE9BQU8sQ0FBQztJQUVsQztJQUFBO0lBQUFqQyxjQUFBLEdBQUFFLENBQUE7SUFDQSxNQUFNLElBQUksQ0FBQ1UsVUFBVSxDQUFDNkMsV0FBVyxDQUFDO01BQ2hDQyxVQUFVLEVBQUUsZUFBZTtNQUMzQkMsU0FBUyxFQUFFMUIsT0FBTztNQUNsQjJCLFdBQVcsRUFBRSxPQUFPO01BQ3BCQyxJQUFJLEVBQUU7UUFBRXFILFVBQVUsRUFBRTFJLEtBQUssQ0FBQ0wsSUFBSTtRQUFFNkk7TUFBSyxDQUFFO01BQ3ZDcEosU0FBUyxFQUFFLElBQUlDLElBQUk7S0FDcEIsQ0FBQztJQUFDO0lBQUE3QixjQUFBLEdBQUFFLENBQUE7SUFFSGtCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHNCQUFzQm1CLEtBQUssQ0FBQ0wsSUFBSSxLQUFLSyxLQUFLLENBQUNKLE9BQU8sRUFBRSxDQUFDO0lBQUM7SUFBQXBDLGNBQUEsR0FBQUUsQ0FBQTtJQUNsRSxJQUFJLENBQUN1QixJQUFJLENBQUMsY0FBYyxFQUFFO01BQUVRLE9BQU87TUFBRU87SUFBSyxDQUFFLENBQUM7RUFDL0M7RUFFQTs7O0VBR0EySSxxQkFBcUJBLENBQUE7SUFBQTtJQUFBbkwsY0FBQSxHQUFBVSxDQUFBO0lBUW5CLE1BQU1LLE1BQU07SUFBQTtJQUFBLENBQUFmLGNBQUEsR0FBQUUsQ0FBQSxTQUFHNkUsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDakUsTUFBTSxDQUFDa0UsTUFBTSxFQUFFLENBQUM7SUFFL0MsTUFBTW1HLFlBQVk7SUFBQTtJQUFBLENBQUFwTCxjQUFBLEdBQUFFLENBQUEsU0FBR2EsTUFBTSxDQUFDc0ssTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRTlJLEtBQUssS0FBSTtNQUFBO01BQUF4QyxjQUFBLEdBQUFVLENBQUE7TUFBQVYsY0FBQSxHQUFBRSxDQUFBO01BQ2hEb0wsR0FBRyxDQUFDOUksS0FBSyxDQUFDbUQsVUFBVSxDQUFDLEdBQUc7TUFBQztNQUFBLENBQUEzRixjQUFBLEdBQUFtQixDQUFBLFdBQUFtSyxHQUFHLENBQUM5SSxLQUFLLENBQUNtRCxVQUFVLENBQUM7TUFBQTtNQUFBLENBQUEzRixjQUFBLEdBQUFtQixDQUFBLFdBQUksQ0FBQyxLQUFJLENBQUM7TUFBQztNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQ3pELE9BQU9vTCxHQUFHO0lBQ1osQ0FBQyxFQUFFLEVBQTRCLENBQUM7SUFFaEMsTUFBTUMsY0FBYztJQUFBO0lBQUEsQ0FBQXZMLGNBQUEsR0FBQUUsQ0FBQSxTQUFHYSxNQUFNLENBQUNzSyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFOUksS0FBSyxLQUFJO01BQUE7TUFBQXhDLGNBQUEsR0FBQVUsQ0FBQTtNQUFBVixjQUFBLEdBQUFFLENBQUE7TUFDbERvTCxHQUFHLENBQUM5SSxLQUFLLENBQUNxRSxlQUFlLENBQUNDLE1BQU0sQ0FBQyxHQUFHO01BQUM7TUFBQSxDQUFBOUcsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBbUssR0FBRyxDQUFDOUksS0FBSyxDQUFDcUUsZUFBZSxDQUFDQyxNQUFNLENBQUM7TUFBQTtNQUFBLENBQUE5RyxjQUFBLEdBQUFtQixDQUFBLFdBQUksQ0FBQyxLQUFJLENBQUM7TUFBQztNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQ2pGLE9BQU9vTCxHQUFHO0lBQ1osQ0FBQyxFQUFFLEVBQTRCLENBQUM7SUFFaEMsTUFBTUUsU0FBUztJQUFBO0lBQUEsQ0FBQXhMLGNBQUEsR0FBQUUsQ0FBQSxTQUFHYSxNQUFNLENBQUNzSyxNQUFNLENBQUMsQ0FBQ0ksR0FBRyxFQUFFakosS0FBSyxLQUFLO01BQUE7TUFBQXhDLGNBQUEsR0FBQVUsQ0FBQTtNQUFBVixjQUFBLEdBQUFFLENBQUE7TUFBQSxPQUFBdUwsR0FBRyxHQUFHakosS0FBSyxDQUFDeUQsT0FBTztJQUFQLENBQU8sRUFBRSxDQUFDLENBQUM7SUFFdkUsTUFBTXlGLFFBQVE7SUFBQTtJQUFBLENBQUExTCxjQUFBLEdBQUFFLENBQUEsU0FBR2EsTUFBTSxDQUNwQjRLLEdBQUcsQ0FBQ25KLEtBQUssSUFBSztNQUFBO01BQUF4QyxjQUFBLEdBQUFVLENBQUE7TUFBQVYsY0FBQSxHQUFBRSxDQUFBO01BQUE7UUFBRTBMLFFBQVEsRUFBRXBKLEtBQUssQ0FBQ0MsRUFBRTtRQUFFb0osV0FBVyxFQUFFckosS0FBSyxDQUFDSSxnQkFBZ0IsQ0FBQ0M7TUFBYyxDQUFFO0lBQUYsQ0FBRyxDQUFDLENBQzFGcUUsSUFBSSxDQUFDLENBQUNDLENBQUMsRUFBRWhHLENBQUMsS0FBSztNQUFBO01BQUFuQixjQUFBLEdBQUFVLENBQUE7TUFBQVYsY0FBQSxHQUFBRSxDQUFBO01BQUEsT0FBQWlCLENBQUMsQ0FBQzBLLFdBQVcsR0FBRzFFLENBQUMsQ0FBQzBFLFdBQVc7SUFBWCxDQUFXLENBQUMsQ0FDN0NqRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUVmLE1BQU1rRSxtQkFBbUI7SUFBQTtJQUFBLENBQUE5TCxjQUFBLEdBQUFFLENBQUEsU0FBR2EsTUFBTSxDQUMvQm1HLElBQUksQ0FBQyxDQUFDQyxDQUFDLEVBQUVoRyxDQUFDLEtBQUs7TUFBQTtNQUFBbkIsY0FBQSxHQUFBVSxDQUFBO01BQUFWLGNBQUEsR0FBQUUsQ0FBQTtNQUFBLE9BQUFpQixDQUFDLENBQUN1QixVQUFVLENBQUM0RSxPQUFPLEVBQUUsR0FBR0gsQ0FBQyxDQUFDekUsVUFBVSxDQUFDNEUsT0FBTyxFQUFFO0lBQUYsQ0FBRSxDQUFDLENBQy9ETSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUFDO0lBQUE1SCxjQUFBLEdBQUFFLENBQUE7SUFFZixPQUFPO01BQ0x3QixZQUFZLEVBQUVYLE1BQU0sQ0FBQzZFLE1BQU07TUFDM0JtRyxjQUFjLEVBQUVYLFlBQVk7TUFDNUJZLGdCQUFnQixFQUFFVCxjQUFjO01BQ2hDVSxhQUFhLEVBQUVULFNBQVM7TUFDeEJVLGdCQUFnQixFQUFFUixRQUFRO01BQzFCUyxvQkFBb0IsRUFBRUw7S0FDdkI7RUFDSDtFQUVBO0VBQ1E1SixlQUFlQSxDQUFDQyxJQUFZLEVBQUVDLE9BQWU7SUFBQTtJQUFBcEMsY0FBQSxHQUFBVSxDQUFBO0lBQ25ELE1BQU0wTCxPQUFPO0lBQUE7SUFBQSxDQUFBcE0sY0FBQSxHQUFBRSxDQUFBLFNBQUcsR0FBR2lDLElBQUksQ0FBQ2dELFdBQVcsRUFBRSxDQUFDa0gsT0FBTyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsSUFBSWpLLE9BQU8sRUFBRTtJQUFDO0lBQUFwQyxjQUFBLEdBQUFFLENBQUE7SUFDOUUsT0FBTyxJQUFBSSxRQUFBLENBQUFnTSxVQUFVLEVBQUMsUUFBUSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0gsT0FBTyxDQUFDLENBQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7RUFDNUU7RUFFUSxNQUFNcEssaUJBQWlCQSxDQUFDTCxTQUFjO0lBQUE7SUFBQWhDLGNBQUEsR0FBQVUsQ0FBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDNUM7SUFBSTtJQUFBLENBQUFGLGNBQUEsR0FBQW1CLENBQUEsWUFBQ2EsU0FBUyxDQUFDRyxJQUFJO0lBQUE7SUFBQSxDQUFBbkMsY0FBQSxHQUFBbUIsQ0FBQSxXQUFJYSxTQUFTLENBQUNHLElBQUksQ0FBQ3VLLElBQUksRUFBRSxDQUFDOUcsTUFBTSxLQUFLLENBQUMsR0FBRTtNQUFBO01BQUE1RixjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDekQsTUFBTSxJQUFJa0QsS0FBSyxDQUFDLHdCQUF3QixDQUFDO0lBQzNDLENBQUM7SUFBQTtJQUFBO01BQUFwRCxjQUFBLEdBQUFtQixDQUFBO0lBQUE7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUVEO0lBQUk7SUFBQSxDQUFBRixjQUFBLEdBQUFtQixDQUFBLFlBQUNhLFNBQVMsQ0FBQ0ksT0FBTztJQUFBO0lBQUEsQ0FBQXBDLGNBQUEsR0FBQW1CLENBQUEsV0FBSWEsU0FBUyxDQUFDSSxPQUFPLENBQUNzSyxJQUFJLEVBQUUsQ0FBQzlHLE1BQU0sS0FBSyxDQUFDLEdBQUU7TUFBQTtNQUFBNUYsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQy9ELE1BQU0sSUFBSWtELEtBQUssQ0FBQywyQkFBMkIsQ0FBQztJQUM5QyxDQUFDO0lBQUE7SUFBQTtNQUFBcEQsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFFRDtJQUFJO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxZQUFDYSxTQUFTLENBQUMyRCxVQUFVO0lBQUE7SUFBQSxDQUFBM0YsY0FBQSxHQUFBbUIsQ0FBQSxXQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQ2tFLFFBQVEsQ0FBQ3JELFNBQVMsQ0FBQzJELFVBQVUsQ0FBQyxHQUFFO01BQUE7TUFBQTNGLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUNsSCxNQUFNLElBQUlrRCxLQUFLLENBQUMsb0JBQW9CLENBQUM7SUFDdkMsQ0FBQztJQUFBO0lBQUE7TUFBQXBELGNBQUEsR0FBQW1CLENBQUE7SUFBQTtJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBRUQsSUFBSThCLFNBQVMsQ0FBQ2lFLE9BQU8sSUFBSSxDQUFDLEVBQUU7TUFBQTtNQUFBakcsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQzFCLE1BQU0sSUFBSWtELEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQztJQUN0RCxDQUFDO0lBQUE7SUFBQTtNQUFBcEQsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0VBQ0g7RUFFUSxNQUFNb0Isc0JBQXNCQSxDQUFDQyxLQUFVO0lBQUE7SUFBQXhDLGNBQUEsR0FBQVUsQ0FBQTtJQUM3QztJQUNBLE1BQU0wTCxPQUFPO0lBQUE7SUFBQSxDQUFBcE0sY0FBQSxHQUFBRSxDQUFBLFNBQUd5TSxJQUFJLENBQUNDLFNBQVMsQ0FBQztNQUM3QnpLLElBQUksRUFBRUssS0FBSyxDQUFDTCxJQUFJO01BQ2hCQyxPQUFPLEVBQUVJLEtBQUssQ0FBQ0osT0FBTztNQUN0QnlLLFlBQVksRUFBRXJLLEtBQUssQ0FBQ3FLLFlBQVk7TUFDaEM1RyxPQUFPLEVBQUV6RCxLQUFLLENBQUN5RDtLQUNoQixDQUFDO0lBQUM7SUFBQWpHLGNBQUEsR0FBQUUsQ0FBQTtJQUVILE9BQU8sSUFBQUksUUFBQSxDQUFBZ00sVUFBVSxFQUFDLFFBQVEsQ0FBQyxDQUFDQyxNQUFNLENBQUNILE9BQU8sQ0FBQyxDQUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDO0VBQzNEO0VBRVEvSCx5QkFBeUJBLENBQUNxSSxRQUF1QixFQUFFQyxRQUF1QjtJQUFBO0lBQUEvTSxjQUFBLEdBQUFVLENBQUE7SUFDaEYsTUFBTXNNLEtBQUs7SUFBQTtJQUFBLENBQUFoTixjQUFBLEdBQUFFLENBQUEsU0FBMkIsRUFBRTtJQUFDO0lBQUFGLGNBQUEsR0FBQUUsQ0FBQTtJQUV6Q2tHLE1BQU0sQ0FBQzhDLElBQUksQ0FBQzZELFFBQVEsQ0FBQ3JHLG1CQUFtQixDQUFDLENBQUN1RyxPQUFPLENBQUMxRyxNQUFNLElBQUc7TUFBQTtNQUFBdkcsY0FBQSxHQUFBVSxDQUFBO01BQ3pELE1BQU13TSxRQUFRO01BQUE7TUFBQSxDQUFBbE4sY0FBQSxHQUFBRSxDQUFBLFNBQUc0TSxRQUFRLENBQUNwRyxtQkFBbUIsQ0FBQ0gsTUFBTSxDQUFDO01BQ3JELE1BQU00RyxRQUFRO01BQUE7TUFBQSxDQUFBbk4sY0FBQSxHQUFBRSxDQUFBLFNBQUc2TSxRQUFRLENBQUNyRyxtQkFBbUIsQ0FBQ0gsTUFBTSxDQUFDO01BQUM7TUFBQXZHLGNBQUEsR0FBQUUsQ0FBQTtNQUV0RDtNQUFJO01BQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBK0wsUUFBUSxLQUFLdkcsU0FBUztNQUFBO01BQUEsQ0FBQTNHLGNBQUEsR0FBQW1CLENBQUEsV0FBSWdNLFFBQVEsS0FBS3hHLFNBQVMsR0FBRTtRQUFBO1FBQUEzRyxjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFDcEQ4TSxLQUFLLENBQUN6RyxNQUFNLENBQUMsR0FBRzRHLFFBQVEsR0FBR0QsUUFBUTtNQUNyQyxDQUFDO01BQUE7TUFBQTtRQUFBbE4sY0FBQSxHQUFBbUIsQ0FBQTtNQUFBO0lBQ0gsQ0FBQyxDQUFDO0lBQUM7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUVILE9BQU84TSxLQUFLO0VBQ2Q7RUFFUW5ELDJCQUEyQkEsQ0FBQ3pCLE1BQXFCLEVBQUVDLE1BQXFCLEVBQUVDLFVBQTJCO0lBQUE7SUFBQXRJLGNBQUEsR0FBQVUsQ0FBQTtJQUMzRyxNQUFNb0ksU0FBUztJQUFBO0lBQUEsQ0FBQTlJLGNBQUEsR0FBQUUsQ0FBQSxTQUFhLEVBQUU7SUFFOUI7SUFBQTtJQUFBRixjQUFBLEdBQUFFLENBQUE7SUFDQSxJQUFJa0ksTUFBTSxDQUFDbkMsT0FBTyxHQUFHb0MsTUFBTSxDQUFDcEMsT0FBTyxHQUFHLEdBQUcsRUFBRTtNQUFBO01BQUFqRyxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDekM0SSxTQUFTLENBQUN0RSxJQUFJLENBQUMsR0FBRzRELE1BQU0sQ0FBQ2pHLElBQUksOEJBQThCaUcsTUFBTSxDQUFDbkMsT0FBTyxTQUFTb0MsTUFBTSxDQUFDcEMsT0FBTyxtREFBbUQsQ0FBQztJQUN0SixDQUFDLE1BQU07TUFBQTtNQUFBakcsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQUEsSUFBSW1JLE1BQU0sQ0FBQ3BDLE9BQU8sR0FBR21DLE1BQU0sQ0FBQ25DLE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFBQTtRQUFBakcsY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQ2hENEksU0FBUyxDQUFDdEUsSUFBSSxDQUFDLEdBQUc2RCxNQUFNLENBQUNsRyxJQUFJLDhCQUE4QmtHLE1BQU0sQ0FBQ3BDLE9BQU8sU0FBU21DLE1BQU0sQ0FBQ25DLE9BQU8sbURBQW1ELENBQUM7TUFDdEosQ0FBQztNQUFBO01BQUE7UUFBQWpHLGNBQUEsR0FBQW1CLENBQUE7TUFBQTtJQUFEO0lBRUE7SUFDQSxNQUFNaU0sU0FBUztJQUFBO0lBQUEsQ0FBQXBOLGNBQUEsR0FBQUUsQ0FBQTtJQUFHO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBaUgsTUFBTSxDQUFDMUIsbUJBQW1CLENBQUNhLFFBQVE7SUFBQTtJQUFBLENBQUF2SCxjQUFBLEdBQUFtQixDQUFBLFdBQUksQ0FBQztJQUMxRCxNQUFNa00sU0FBUztJQUFBO0lBQUEsQ0FBQXJOLGNBQUEsR0FBQUUsQ0FBQTtJQUFHO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBa0gsTUFBTSxDQUFDM0IsbUJBQW1CLENBQUNhLFFBQVE7SUFBQTtJQUFBLENBQUF2SCxjQUFBLEdBQUFtQixDQUFBLFdBQUksQ0FBQztJQUFDO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFFM0QsSUFBSWtOLFNBQVMsR0FBR0MsU0FBUyxHQUFHLEdBQUcsRUFBRTtNQUFBO01BQUFyTixjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDL0I0SSxTQUFTLENBQUN0RSxJQUFJLENBQUMsR0FBRzRELE1BQU0sQ0FBQ2pHLElBQUksdUNBQXVDLENBQUNpTCxTQUFTLEdBQUcsR0FBRyxFQUFFRSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQ0QsU0FBUyxHQUFHLEdBQUcsRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDM0ksQ0FBQyxNQUFNO01BQUE7TUFBQXROLGNBQUEsR0FBQW1CLENBQUE7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUFBLElBQUltTixTQUFTLEdBQUdELFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFBQTtRQUFBcE4sY0FBQSxHQUFBbUIsQ0FBQTtRQUFBbkIsY0FBQSxHQUFBRSxDQUFBO1FBQ3RDNEksU0FBUyxDQUFDdEUsSUFBSSxDQUFDLEdBQUc2RCxNQUFNLENBQUNsRyxJQUFJLHVDQUF1QyxDQUFDa0wsU0FBUyxHQUFHLEdBQUcsRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUNGLFNBQVMsR0FBRyxHQUFHLEVBQUVFLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO01BQzNJLENBQUM7TUFBQTtNQUFBO1FBQUF0TixjQUFBLEdBQUFtQixDQUFBO01BQUE7SUFBRDtJQUVBO0lBQ0EsTUFBTW9NLFFBQVE7SUFBQTtJQUFBLENBQUF2TixjQUFBLEdBQUFFLENBQUEsU0FBR2tJLE1BQU0sQ0FBQzFCLG1CQUFtQixDQUFDOEcsb0JBQW9CO0lBQ2hFLE1BQU1DLFFBQVE7SUFBQTtJQUFBLENBQUF6TixjQUFBLEdBQUFFLENBQUEsU0FBR21JLE1BQU0sQ0FBQzNCLG1CQUFtQixDQUFDOEcsb0JBQW9CO0lBQUM7SUFBQXhOLGNBQUEsR0FBQUUsQ0FBQTtJQUVqRTtJQUFJO0lBQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBb00sUUFBUTtJQUFBO0lBQUEsQ0FBQXZOLGNBQUEsR0FBQW1CLENBQUEsV0FBSXNNLFFBQVEsR0FBRTtNQUFBO01BQUF6TixjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDeEIsSUFBSXFOLFFBQVEsR0FBR0UsUUFBUSxHQUFHLEdBQUcsRUFBRTtRQUFBO1FBQUF6TixjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFDN0I0SSxTQUFTLENBQUN0RSxJQUFJLENBQUMsR0FBRzRELE1BQU0sQ0FBQ2pHLElBQUksNkJBQTZCb0wsUUFBUSxTQUFTRSxRQUFRLG1CQUFtQixDQUFDO01BQ3pHLENBQUMsTUFBTTtRQUFBO1FBQUF6TixjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFBQSxJQUFJdU4sUUFBUSxHQUFHRixRQUFRLEdBQUcsR0FBRyxFQUFFO1VBQUE7VUFBQXZOLGNBQUEsR0FBQW1CLENBQUE7VUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtVQUNwQzRJLFNBQVMsQ0FBQ3RFLElBQUksQ0FBQyxHQUFHNkQsTUFBTSxDQUFDbEcsSUFBSSw2QkFBNkJzTCxRQUFRLFNBQVNGLFFBQVEsbUJBQW1CLENBQUM7UUFDekcsQ0FBQztRQUFBO1FBQUE7VUFBQXZOLGNBQUEsR0FBQW1CLENBQUE7UUFBQTtNQUFEO0lBQ0YsQ0FBQztJQUFBO0lBQUE7TUFBQW5CLGNBQUEsR0FBQW1CLENBQUE7SUFBQTtJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBRUQsT0FBTzRJLFNBQVM7RUFDbEI7RUFFUWdCLDhCQUE4QkEsQ0FBQzFCLE1BQXFCLEVBQUVDLE1BQXFCO0lBQUE7SUFBQXJJLGNBQUEsR0FBQVUsQ0FBQTtJQUNqRixNQUFNZ04sZUFBZTtJQUFBO0lBQUEsQ0FBQTFOLGNBQUEsR0FBQUUsQ0FBQSxTQUEyQixFQUFFO0lBRWxEO0lBQUE7SUFBQUYsY0FBQSxHQUFBRSxDQUFBO0lBQ0EsSUFBSWtJLE1BQU0sQ0FBQ25DLE9BQU8sR0FBR29DLE1BQU0sQ0FBQ3BDLE9BQU8sRUFBRTtNQUFBO01BQUFqRyxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDbkN3TixlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBR3RGLE1BQU0sQ0FBQ2pHLElBQUk7TUFBQztNQUFBbkMsY0FBQSxHQUFBRSxDQUFBO01BQ2pEd04sZUFBZSxDQUFDLHFCQUFxQixDQUFDLEdBQUd0RixNQUFNLENBQUNqRyxJQUFJO0lBQ3RELENBQUMsTUFBTTtNQUFBO01BQUFuQyxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFDTHdOLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHckYsTUFBTSxDQUFDbEcsSUFBSTtNQUFDO01BQUFuQyxjQUFBLEdBQUFFLENBQUE7TUFDckR3TixlQUFlLENBQUMsbUJBQW1CLENBQUMsR0FBR3JGLE1BQU0sQ0FBQ2xHLElBQUk7SUFDcEQ7SUFFQTtJQUNBLE1BQU1vTCxRQUFRO0lBQUE7SUFBQSxDQUFBdk4sY0FBQSxHQUFBRSxDQUFBLFNBQUdrSSxNQUFNLENBQUMxQixtQkFBbUIsQ0FBQzhHLG9CQUFvQjtJQUNoRSxNQUFNQyxRQUFRO0lBQUE7SUFBQSxDQUFBek4sY0FBQSxHQUFBRSxDQUFBLFNBQUdtSSxNQUFNLENBQUMzQixtQkFBbUIsQ0FBQzhHLG9CQUFvQjtJQUFDO0lBQUF4TixjQUFBLEdBQUFFLENBQUE7SUFFakU7SUFBSTtJQUFBLENBQUFGLGNBQUEsR0FBQW1CLENBQUEsV0FBQW9NLFFBQVE7SUFBQTtJQUFBLENBQUF2TixjQUFBLEdBQUFtQixDQUFBLFdBQUlzTSxRQUFRLEdBQUU7TUFBQTtNQUFBek4sY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQ3hCLElBQUlxTixRQUFRLEdBQUdFLFFBQVEsRUFBRTtRQUFBO1FBQUF6TixjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFDdkJ3TixlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBR3RGLE1BQU0sQ0FBQ2pHLElBQUk7UUFBQztRQUFBbkMsY0FBQSxHQUFBRSxDQUFBO1FBQ3hEd04sZUFBZSxDQUFDLHFCQUFxQixDQUFDLEdBQUd0RixNQUFNLENBQUNqRyxJQUFJO01BQ3RELENBQUMsTUFBTTtRQUFBO1FBQUFuQyxjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFDTHdOLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHckYsTUFBTSxDQUFDbEcsSUFBSTtRQUFDO1FBQUFuQyxjQUFBLEdBQUFFLENBQUE7UUFDbER3TixlQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBR3JGLE1BQU0sQ0FBQ2xHLElBQUk7TUFDbkQ7SUFDRixDQUFDO0lBQUE7SUFBQTtNQUFBbkMsY0FBQSxHQUFBbUIsQ0FBQTtJQUFBO0lBRUQ7SUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtJQUNBO0lBQUk7SUFBQSxDQUFBRixjQUFBLEdBQUFtQixDQUFBLFdBQUFpSCxNQUFNLENBQUN2QyxZQUFZLENBQUM4SCxlQUFlO0lBQUE7SUFBQSxDQUFBM04sY0FBQSxHQUFBbUIsQ0FBQSxXQUFJLENBQUNrSCxNQUFNLENBQUN4QyxZQUFZLENBQUM4SCxlQUFlLEdBQUU7TUFBQTtNQUFBM04sY0FBQSxHQUFBbUIsQ0FBQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BQy9Fd04sZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUd0RixNQUFNLENBQUNqRyxJQUFJO0lBQ2xELENBQUMsTUFBTTtNQUFBO01BQUFuQyxjQUFBLEdBQUFtQixDQUFBO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFBQTtNQUFJO01BQUEsQ0FBQUYsY0FBQSxHQUFBbUIsQ0FBQSxXQUFBa0gsTUFBTSxDQUFDeEMsWUFBWSxDQUFDOEgsZUFBZTtNQUFBO01BQUEsQ0FBQTNOLGNBQUEsR0FBQW1CLENBQUEsV0FBSSxDQUFDaUgsTUFBTSxDQUFDdkMsWUFBWSxDQUFDOEgsZUFBZSxHQUFFO1FBQUE7UUFBQTNOLGNBQUEsR0FBQW1CLENBQUE7UUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtRQUN0RndOLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHckYsTUFBTSxDQUFDbEcsSUFBSTtNQUNsRCxDQUFDO01BQUE7TUFBQTtRQUFBbkMsY0FBQSxHQUFBbUIsQ0FBQTtNQUFBO0lBQUQ7SUFBQztJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBRUQsT0FBT3dOLGVBQWU7RUFDeEI7RUFFUSxNQUFNcE0scUJBQXFCQSxDQUFBO0lBQUE7SUFBQXRCLGNBQUEsR0FBQVUsQ0FBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDakMsSUFBSTtNQUFBO01BQUFGLGNBQUEsR0FBQUUsQ0FBQTtNQUNGO01BQ0FrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQztNQUVoRDtNQUNBO01BQUE7TUFBQXJCLGNBQUEsR0FBQUUsQ0FBQTtNQUVBa0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUNOLE1BQU0sQ0FBQ1ksSUFBSSxzQkFBc0IsQ0FBQztJQUNqRSxDQUFDLENBQUMsT0FBT0csS0FBSyxFQUFFO01BQUE7TUFBQTlCLGNBQUEsR0FBQUUsQ0FBQTtNQUNka0IsT0FBTyxDQUFDd00sSUFBSSxDQUFDLHdDQUF3QyxFQUFFOUwsS0FBSyxDQUFDO0lBQy9EO0VBQ0Y7RUFFUSxNQUFNUCxvQkFBb0JBLENBQUE7SUFBQTtJQUFBdkIsY0FBQSxHQUFBVSxDQUFBO0lBQUFWLGNBQUEsR0FBQUUsQ0FBQTtJQUNoQyxJQUFJO01BQUE7TUFBQUYsY0FBQSxHQUFBRSxDQUFBO01BQ0ZrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQztNQUFDO01BQUFyQixjQUFBLEdBQUFFLENBQUE7TUFFL0MsS0FBSyxNQUFNLENBQUMrQixPQUFPLEVBQUVPLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQ3pCLE1BQU0sRUFBRTtRQUMxQztRQUNBO01BQUE7TUFDRDtNQUFBZixjQUFBLEdBQUFFLENBQUE7TUFFRGtCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBDQUEwQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxPQUFPUyxLQUFLLEVBQUU7TUFBQTtNQUFBOUIsY0FBQSxHQUFBRSxDQUFBO01BQ2RrQixPQUFPLENBQUN3TSxJQUFJLENBQUMseUNBQXlDLEVBQUU5TCxLQUFLLENBQUM7SUFDaEU7RUFDRjtFQUVRLE1BQU1OLHdCQUF3QkEsQ0FBQTtJQUFBO0lBQUF4QixjQUFBLEdBQUFVLENBQUE7SUFBQVYsY0FBQSxHQUFBRSxDQUFBO0lBQ3BDLElBQUk7TUFBQTtNQUFBRixjQUFBLEdBQUFFLENBQUE7TUFDRmtCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG9DQUFvQyxDQUFDO01BQUM7TUFBQXJCLGNBQUEsR0FBQUUsQ0FBQTtNQUVsRCxLQUFLLE1BQU0sQ0FBQytCLE9BQU8sRUFBRU8sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDekIsTUFBTSxFQUFFO1FBQUE7UUFBQWYsY0FBQSxHQUFBRSxDQUFBO1FBQzFDLElBQUlzQyxLQUFLLENBQUNxRSxlQUFlLENBQUNDLE1BQU0sS0FBSyxVQUFVLEVBQUU7VUFBQTtVQUFBOUcsY0FBQSxHQUFBbUIsQ0FBQTtVQUMvQztVQUNBLE1BQU0wTSxTQUFTO1VBQUE7VUFBQSxDQUFBN04sY0FBQSxHQUFBRSxDQUFBLFNBQUcsTUFBTSxJQUFJLENBQUM0TixnQkFBZ0IsQ0FBQ3RMLEtBQUssQ0FBQztVQUFDO1VBQUF4QyxjQUFBLEdBQUFFLENBQUE7VUFDckRzQyxLQUFLLENBQUNxRSxlQUFlLENBQUNrSCxhQUFhLEdBQUdGLFNBQVM7VUFBQTtVQUFBLENBQUE3TixjQUFBLEdBQUFtQixDQUFBLFdBQUcsU0FBUztVQUFBO1VBQUEsQ0FBQW5CLGNBQUEsR0FBQW1CLENBQUEsV0FBRyxXQUFXO1VBQUM7VUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtVQUMxRXNDLEtBQUssQ0FBQ3FFLGVBQWUsQ0FBQ21ILGlCQUFpQixHQUFHLElBQUluTSxJQUFJLEVBQUU7UUFDdEQsQ0FBQztRQUFBO1FBQUE7VUFBQTdCLGNBQUEsR0FBQW1CLENBQUE7UUFBQTtNQUNIO01BQUM7TUFBQW5CLGNBQUEsR0FBQUUsQ0FBQTtNQUVEa0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0NBQXNDLENBQUM7SUFDckQsQ0FBQyxDQUFDLE9BQU9TLEtBQUssRUFBRTtNQUFBO01BQUE5QixjQUFBLEdBQUFFLENBQUE7TUFDZGtCLE9BQU8sQ0FBQ3dNLElBQUksQ0FBQywwQ0FBMEMsRUFBRTlMLEtBQUssQ0FBQztJQUNqRTtFQUNGO0VBRVEsTUFBTWdNLGdCQUFnQkEsQ0FBQ3RMLEtBQW9CO0lBQUE7SUFBQXhDLGNBQUEsR0FBQVUsQ0FBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDakQsSUFBSTtNQUFBO01BQUFGLGNBQUEsR0FBQUUsQ0FBQTtNQUNGLElBQUksQ0FBQ3NDLEtBQUssQ0FBQ3FFLGVBQWUsQ0FBQ29ILFFBQVEsRUFBRTtRQUFBO1FBQUFqTyxjQUFBLEdBQUFtQixDQUFBO1FBQUFuQixjQUFBLEdBQUFFLENBQUE7UUFBQSxPQUFPLEtBQUs7TUFBQSxDQUFDO01BQUE7TUFBQTtRQUFBRixjQUFBLEdBQUFtQixDQUFBO01BQUE7TUFFbEQ7TUFDQTtNQUFBbkIsY0FBQSxHQUFBRSxDQUFBO01BRUEsT0FBTyxJQUFJO0lBQ2IsQ0FBQyxDQUFDLE9BQU80QixLQUFLLEVBQUU7TUFBQTtNQUFBOUIsY0FBQSxHQUFBRSxDQUFBO01BQ2QsT0FBTyxLQUFLO0lBQ2Q7RUFDRjs7QUFDRDtBQUFBRixjQUFBLEdBQUFFLENBQUE7QUFuc0JEZ08sT0FBQSxDQUFBM04sYUFBQSxHQUFBQSxhQUFBO0FBcXNCQTtBQUFBO0FBQUFQLGNBQUEsR0FBQUUsQ0FBQTtBQUNhZ08sT0FBQSxDQUFBQyxhQUFhLEdBQUcsSUFBSTVOLGFBQWEsRUFBRSIsImlnbm9yZUxpc3QiOltdfQ==