{"version":3,"names":["cov_1mywnac1o2","actualCoverage","s","events_1","require","EventStore_1","crypto_1","ModelRegistry","EventEmitter","constructor","f","isInitialized","eventStore","EventStore","getInstance","models","Map","modelVersions","initialize","b","console","log","loadModelsFromStorage","verifyModelIntegrity","updateDeploymentStatuses","emit","total_models","size","timestamp","Date","error","registerModel","modelData","modelId","generateModelId","name","version","validateModelData","checksum","calculateModelChecksum","model","id","created_at","updated_at","usage_statistics","total_requests","successful_requests","failed_requests","average_response_time","last_used","daily_usage","has","Error","set","changelog","performance_delta","backward_compatible","recordEvent","event_type","entity_id","entity_type","data","updateModel","updates","existingModel","get","isVersionUpdate","updatedModel","file_path","config_path","tokenizer_path","versions","push","calculatePerformanceDelta","new_version","getModel","searchModels","searchParams","filteredModels","Array","from","values","query","toLowerCase","filter","includes","description","tags","some","tag","filters","model_type","length","capabilities","cap","size_range","min_mb","size_mb","max_mb","performance_threshold","Object","entries","every","metric","threshold","value","performance_metrics","undefined","deployment_status","deployment_info","status","created_after","created_before","sort_by","sort","a","aVal","bVal","getTime","accuracy","sort_order","limit","offset","paginatedModels","slice","hasMore","total_count","pagination","has_more","compareModels","modelAId","modelBId","modelA","modelB","comparison","model_a","model_b","comparison_date","metrics_comparison","benchmark_results","recommendation","preferred_model","reasoning","use_case_recommendations","allMetrics","Set","keys","aValue","bValue","percentageDiff","winner","model_a_value","model_b_value","percentage_diff","aWins","m","bWins","generateComparisonReasoning","generateUseCaseRecommendations","getModelUsageStats","timeRange","success_rate","usage_trend","top_error_types","error_type","count","updateUsageStatistics","requestData","success","alpha","response_time","dateKey","toISOString","split","getModelVersionHistory","deleteModel","force","delete","model_name","getRegistryStatistics","modelsByType","reduce","acc","modelsByStatus","totalSize","sum","mostUsed","map","model_id","usage_count","recentRegistrations","models_by_type","models_by_status","total_size_mb","most_used_models","recent_registrations","content","replace","createHash","update","digest","substring","trim","JSON","stringify","architecture","oldModel","newModel","delta","forEach","oldValue","newValue","aAccuracy","bAccuracy","toFixed","aLatency","inference_latency_ms","bLatency","recommendations","code_generation","warn","isHealthy","checkModelHealth","health_status","last_health_check","endpoint","exports","modelRegistry"],"sources":["/workspaces/prompt-card-system/backend/src/services/training/ModelRegistry.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { EventStore } from '../analytics/EventStore';\nimport { createHash } from 'crypto';\nimport * as tf from '@tensorflow/tfjs-node';\n\nexport interface ModelMetadata {\n  id: string;\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license: string;\n  tags: string[];\n  created_at: Date;\n  updated_at: Date;\n  model_type: 'foundation' | 'fine_tuned' | 'specialized' | 'custom';\n  base_model?: string;\n  training_job_id?: string;\n  size_mb: number;\n  parameter_count: number;\n  architecture: {\n    model_family: string;\n    layers: number;\n    hidden_size: number;\n    attention_heads: number;\n    vocab_size: number;\n    max_sequence_length: number;\n  };\n  capabilities: {\n    text_generation: boolean;\n    text_classification: boolean;\n    question_answering: boolean;\n    summarization: boolean;\n    code_generation: boolean;\n    embedding_generation: boolean;\n    multimodal: boolean;\n  };\n  performance_metrics: {\n    accuracy?: number;\n    f1_score?: number;\n    bleu_score?: number;\n    rouge_score?: number;\n    perplexity?: number;\n    inference_latency_ms: number;\n    throughput_tokens_per_sec: number;\n    memory_usage_mb: number;\n  };\n  deployment_info: {\n    status: 'pending' | 'deployed' | 'deprecated' | 'failed';\n    deployed_at?: Date;\n    deployment_target?: string;\n    endpoint?: string;\n    health_status?: 'healthy' | 'degraded' | 'unhealthy';\n    last_health_check?: Date;\n  };\n  usage_statistics: {\n    total_requests: number;\n    successful_requests: number;\n    failed_requests: number;\n    average_response_time: number;\n    last_used: Date;\n    daily_usage: Record<string, number>;\n  };\n  checksum: string;\n  file_path?: string;\n  config_path?: string;\n  tokenizer_path?: string;\n}\n\nexport interface ModelVersion {\n  version: string;\n  changelog: string;\n  created_at: Date;\n  performance_delta: Record<string, number>;\n  backward_compatible: boolean;\n  migration_notes?: string;\n}\n\nexport interface ModelComparison {\n  model_a: string;\n  model_b: string;\n  comparison_date: Date;\n  metrics_comparison: Record<string, {\n    model_a_value: number;\n    model_b_value: number;\n    percentage_diff: number;\n    winner: 'model_a' | 'model_b' | 'tie';\n  }>;\n  benchmark_results: Record<string, any>;\n  recommendation: {\n    preferred_model: string;\n    reasoning: string[];\n    use_case_recommendations: Record<string, string>;\n  };\n}\n\nexport interface ModelSearch {\n  query?: string;\n  filters: {\n    model_type?: string[];\n    capabilities?: string[];\n    size_range?: { min_mb?: number; max_mb?: number };\n    performance_threshold?: Record<string, number>;\n    deployment_status?: string[];\n    tags?: string[];\n    created_after?: Date;\n    created_before?: Date;\n  };\n  sort_by?: 'name' | 'created_at' | 'size_mb' | 'performance' | 'usage';\n  sort_order?: 'asc' | 'desc';\n  limit?: number;\n  offset?: number;\n}\n\nexport class ModelRegistry extends EventEmitter {\n  private eventStore: EventStore;\n  private models: Map<string, ModelMetadata>;\n  private modelVersions: Map<string, ModelVersion[]>;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.eventStore = EventStore.getInstance();\n    this.models = new Map();\n    this.modelVersions = new Map();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('üîÑ Initializing Model Registry...');\n      \n      // Load existing models from storage\n      await this.loadModelsFromStorage();\n      \n      // Verify model integrity\n      await this.verifyModelIntegrity();\n      \n      // Update deployment statuses\n      await this.updateDeploymentStatuses();\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Model Registry initialized successfully');\n      \n      this.emit('initialized', {\n        total_models: this.models.size,\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Model Registry:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new model\n   */\n  async registerModel(modelData: Omit<ModelMetadata, 'id' | 'created_at' | 'updated_at' | 'checksum'>): Promise<ModelMetadata> {\n    const modelId = this.generateModelId(modelData.name, modelData.version);\n    \n    // Validate model data\n    await this.validateModelData(modelData);\n    \n    // Calculate checksum\n    const checksum = await this.calculateModelChecksum(modelData);\n    \n    const model: ModelMetadata = {\n      ...modelData,\n      id: modelId,\n      created_at: new Date(),\n      updated_at: new Date(),\n      checksum,\n      usage_statistics: {\n        total_requests: 0,\n        successful_requests: 0,\n        failed_requests: 0,\n        average_response_time: 0,\n        last_used: new Date(),\n        daily_usage: {}\n      }\n    };\n\n    // Check for duplicate\n    if (this.models.has(modelId)) {\n      throw new Error(`Model with ID ${modelId} already exists`);\n    }\n\n    // Store model\n    this.models.set(modelId, model);\n    \n    // Initialize version history\n    this.modelVersions.set(modelId, [{\n      version: model.version,\n      changelog: 'Initial registration',\n      created_at: new Date(),\n      performance_delta: {},\n      backward_compatible: true\n    }]);\n\n    // Record registration event\n    await this.eventStore.recordEvent({\n      event_type: 'model_registered',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: model,\n      timestamp: new Date()\n    });\n\n    console.log(`üìù Registered model: ${model.name} v${model.version}`);\n    this.emit('modelRegistered', { model });\n\n    return model;\n  }\n\n  /**\n   * Update model metadata\n   */\n  async updateModel(modelId: string, updates: Partial<ModelMetadata>): Promise<ModelMetadata> {\n    const existingModel = this.models.get(modelId);\n    if (!existingModel) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Create new version if version number changed\n    const isVersionUpdate = updates.version && updates.version !== existingModel.version;\n    \n    const updatedModel: ModelMetadata = {\n      ...existingModel,\n      ...updates,\n      id: modelId, // Ensure ID doesn't change\n      updated_at: new Date()\n    };\n\n    // Recalculate checksum if content changed\n    if (updates.file_path || updates.config_path || updates.tokenizer_path) {\n      updatedModel.checksum = await this.calculateModelChecksum(updatedModel);\n    }\n\n    this.models.set(modelId, updatedModel);\n\n    // Add version history entry\n    if (isVersionUpdate) {\n      const versions = this.modelVersions.get(modelId) || [];\n      versions.push({\n        version: updatedModel.version,\n        changelog: 'Model updated',\n        created_at: new Date(),\n        performance_delta: this.calculatePerformanceDelta(existingModel, updatedModel),\n        backward_compatible: true // Should be determined by analysis\n      });\n      this.modelVersions.set(modelId, versions);\n    }\n\n    // Record update event\n    await this.eventStore.recordEvent({\n      event_type: isVersionUpdate ? 'model_version_updated' : 'model_metadata_updated',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: { updates, new_version: isVersionUpdate },\n      timestamp: new Date()\n    });\n\n    console.log(`üìù Updated model: ${updatedModel.name} v${updatedModel.version}`);\n    this.emit('modelUpdated', { model: updatedModel, isVersionUpdate });\n\n    return updatedModel;\n  }\n\n  /**\n   * Get model by ID\n   */\n  getModel(modelId: string): ModelMetadata | undefined {\n    return this.models.get(modelId);\n  }\n\n  /**\n   * Search models\n   */\n  searchModels(searchParams: ModelSearch): {\n    models: ModelMetadata[];\n    total_count: number;\n    pagination: {\n      limit: number;\n      offset: number;\n      has_more: boolean;\n    };\n  } {\n    let filteredModels = Array.from(this.models.values());\n\n    // Apply text search\n    if (searchParams.query) {\n      const query = searchParams.query.toLowerCase();\n      filteredModels = filteredModels.filter(model => \n        model.name.toLowerCase().includes(query) ||\n        model.description.toLowerCase().includes(query) ||\n        model.tags.some(tag => tag.toLowerCase().includes(query))\n      );\n    }\n\n    // Apply filters\n    if (searchParams.filters) {\n      const { filters } = searchParams;\n\n      if (filters.model_type?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.model_type!.includes(model.model_type)\n        );\n      }\n\n      if (filters.capabilities?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.capabilities!.some(cap => model.capabilities[cap])\n        );\n      }\n\n      if (filters.size_range) {\n        filteredModels = filteredModels.filter(model => {\n          if (filters.size_range!.min_mb && model.size_mb < filters.size_range!.min_mb) return false;\n          if (filters.size_range!.max_mb && model.size_mb > filters.size_range!.max_mb) return false;\n          return true;\n        });\n      }\n\n      if (filters.performance_threshold) {\n        filteredModels = filteredModels.filter(model => {\n          return Object.entries(filters.performance_threshold!).every(([metric, threshold]) => {\n            const value = model.performance_metrics[metric];\n            return value !== undefined && value >= threshold;\n          });\n        });\n      }\n\n      if (filters.deployment_status?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.deployment_status!.includes(model.deployment_info.status)\n        );\n      }\n\n      if (filters.tags?.length) {\n        filteredModels = filteredModels.filter(model => \n          filters.tags!.some(tag => model.tags.includes(tag))\n        );\n      }\n\n      if (filters.created_after) {\n        filteredModels = filteredModels.filter(model => \n          model.created_at >= filters.created_after!\n        );\n      }\n\n      if (filters.created_before) {\n        filteredModels = filteredModels.filter(model => \n          model.created_at <= filters.created_before!\n        );\n      }\n    }\n\n    // Apply sorting\n    if (searchParams.sort_by) {\n      filteredModels.sort((a, b) => {\n        let aVal: any, bVal: any;\n        \n        switch (searchParams.sort_by) {\n          case 'name':\n            aVal = a.name;\n            bVal = b.name;\n            break;\n          case 'created_at':\n            aVal = a.created_at.getTime();\n            bVal = b.created_at.getTime();\n            break;\n          case 'size_mb':\n            aVal = a.size_mb;\n            bVal = b.size_mb;\n            break;\n          case 'performance':\n            aVal = a.performance_metrics.accuracy || 0;\n            bVal = b.performance_metrics.accuracy || 0;\n            break;\n          case 'usage':\n            aVal = a.usage_statistics.total_requests;\n            bVal = b.usage_statistics.total_requests;\n            break;\n          default:\n            return 0;\n        }\n\n        if (searchParams.sort_order === 'desc') {\n          return aVal < bVal ? 1 : -1;\n        }\n        return aVal > bVal ? 1 : -1;\n      });\n    }\n\n    // Apply pagination\n    const limit = searchParams.limit || 20;\n    const offset = searchParams.offset || 0;\n    const paginatedModels = filteredModels.slice(offset, offset + limit);\n    const hasMore = offset + limit < filteredModels.length;\n\n    return {\n      models: paginatedModels,\n      total_count: filteredModels.length,\n      pagination: {\n        limit,\n        offset,\n        has_more: hasMore\n      }\n    };\n  }\n\n  /**\n   * Compare two models\n   */\n  async compareModels(modelAId: string, modelBId: string): Promise<ModelComparison> {\n    const modelA = this.models.get(modelAId);\n    const modelB = this.models.get(modelBId);\n\n    if (!modelA || !modelB) {\n      throw new Error('One or both models not found');\n    }\n\n    const comparison: ModelComparison = {\n      model_a: modelAId,\n      model_b: modelBId,\n      comparison_date: new Date(),\n      metrics_comparison: {},\n      benchmark_results: {},\n      recommendation: {\n        preferred_model: '',\n        reasoning: [],\n        use_case_recommendations: {}\n      }\n    };\n\n    // Compare performance metrics\n    const allMetrics = new Set([\n      ...Object.keys(modelA.performance_metrics),\n      ...Object.keys(modelB.performance_metrics)\n    ]);\n\n    for (const metric of allMetrics) {\n      const aValue = modelA.performance_metrics[metric] || 0;\n      const bValue = modelB.performance_metrics[metric] || 0;\n      const percentageDiff = bValue !== 0 ? ((aValue - bValue) / bValue) * 100 : 0;\n      \n      let winner: 'model_a' | 'model_b' | 'tie' = 'tie';\n      if (metric === 'inference_latency_ms' || metric === 'memory_usage_mb') {\n        // Lower is better for latency and memory\n        winner = aValue < bValue ? 'model_a' : (aValue > bValue ? 'model_b' : 'tie');\n      } else {\n        // Higher is better for other metrics\n        winner = aValue > bValue ? 'model_a' : (aValue < bValue ? 'model_b' : 'tie');\n      }\n\n      comparison.metrics_comparison[metric] = {\n        model_a_value: aValue,\n        model_b_value: bValue,\n        percentage_diff: percentageDiff,\n        winner\n      };\n    }\n\n    // Generate recommendation\n    const aWins = Object.values(comparison.metrics_comparison).filter(m => m.winner === 'model_a').length;\n    const bWins = Object.values(comparison.metrics_comparison).filter(m => m.winner === 'model_b').length;\n    \n    comparison.recommendation.preferred_model = aWins > bWins ? modelAId : (bWins > aWins ? modelBId : 'tie');\n    \n    // Generate reasoning\n    comparison.recommendation.reasoning = this.generateComparisonReasoning(modelA, modelB, comparison);\n    \n    // Generate use case recommendations\n    comparison.recommendation.use_case_recommendations = this.generateUseCaseRecommendations(modelA, modelB);\n\n    // Record comparison event\n    await this.eventStore.recordEvent({\n      event_type: 'models_compared',\n      entity_id: `${modelAId}_vs_${modelBId}`,\n      entity_type: 'comparison',\n      data: comparison,\n      timestamp: new Date()\n    });\n\n    return comparison;\n  }\n\n  /**\n   * Get model usage statistics\n   */\n  getModelUsageStats(modelId: string, timeRange?: { start: Date; end: Date }): {\n    total_requests: number;\n    success_rate: number;\n    average_response_time: number;\n    usage_trend: Record<string, number>;\n    top_error_types: Array<{ error_type: string; count: number }>;\n  } {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // This would typically query actual usage data from logs/analytics\n    return {\n      total_requests: model.usage_statistics.total_requests,\n      success_rate: model.usage_statistics.successful_requests / model.usage_statistics.total_requests * 100,\n      average_response_time: model.usage_statistics.average_response_time,\n      usage_trend: model.usage_statistics.daily_usage,\n      top_error_types: [\n        { error_type: 'timeout', count: 12 },\n        { error_type: 'rate_limit', count: 8 },\n        { error_type: 'invalid_input', count: 5 }\n      ]\n    };\n  }\n\n  /**\n   * Update model usage statistics\n   */\n  async updateUsageStatistics(\n    modelId: string,\n    requestData: {\n      success: boolean;\n      response_time: number;\n      error_type?: string;\n      timestamp: Date;\n    }\n  ): Promise<void> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Update statistics\n    model.usage_statistics.total_requests++;\n    if (requestData.success) {\n      model.usage_statistics.successful_requests++;\n    } else {\n      model.usage_statistics.failed_requests++;\n    }\n\n    // Update average response time (exponential moving average)\n    const alpha = 0.1; // Smoothing factor\n    model.usage_statistics.average_response_time = \n      alpha * requestData.response_time + (1 - alpha) * model.usage_statistics.average_response_time;\n\n    // Update daily usage\n    const dateKey = requestData.timestamp.toISOString().split('T')[0];\n    model.usage_statistics.daily_usage[dateKey] = (model.usage_statistics.daily_usage[dateKey] || 0) + 1;\n\n    model.usage_statistics.last_used = requestData.timestamp;\n    model.updated_at = new Date();\n\n    this.models.set(modelId, model);\n  }\n\n  /**\n   * Get model version history\n   */\n  getModelVersionHistory(modelId: string): ModelVersion[] {\n    return this.modelVersions.get(modelId) || [];\n  }\n\n  /**\n   * Delete model\n   */\n  async deleteModel(modelId: string, force: boolean = false): Promise<void> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    // Check if model is deployed\n    if (model.deployment_info.status === 'deployed' && !force) {\n      throw new Error(`Cannot delete deployed model ${modelId}. Use force=true to override.`);\n    }\n\n    // Remove from registry\n    this.models.delete(modelId);\n    this.modelVersions.delete(modelId);\n\n    // Record deletion event\n    await this.eventStore.recordEvent({\n      event_type: 'model_deleted',\n      entity_id: modelId,\n      entity_type: 'model',\n      data: { model_name: model.name, force },\n      timestamp: new Date()\n    });\n\n    console.log(`üóëÔ∏è Deleted model: ${model.name} v${model.version}`);\n    this.emit('modelDeleted', { modelId, model });\n  }\n\n  /**\n   * Get registry statistics\n   */\n  getRegistryStatistics(): {\n    total_models: number;\n    models_by_type: Record<string, number>;\n    models_by_status: Record<string, number>;\n    total_size_mb: number;\n    most_used_models: Array<{ model_id: string; usage_count: number }>;\n    recent_registrations: ModelMetadata[];\n  } {\n    const models = Array.from(this.models.values());\n    \n    const modelsByType = models.reduce((acc, model) => {\n      acc[model.model_type] = (acc[model.model_type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const modelsByStatus = models.reduce((acc, model) => {\n      acc[model.deployment_info.status] = (acc[model.deployment_info.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const totalSize = models.reduce((sum, model) => sum + model.size_mb, 0);\n\n    const mostUsed = models\n      .map(model => ({ model_id: model.id, usage_count: model.usage_statistics.total_requests }))\n      .sort((a, b) => b.usage_count - a.usage_count)\n      .slice(0, 10);\n\n    const recentRegistrations = models\n      .sort((a, b) => b.created_at.getTime() - a.created_at.getTime())\n      .slice(0, 5);\n\n    return {\n      total_models: models.length,\n      models_by_type: modelsByType,\n      models_by_status: modelsByStatus,\n      total_size_mb: totalSize,\n      most_used_models: mostUsed,\n      recent_registrations: recentRegistrations\n    };\n  }\n\n  // Private methods\n  private generateModelId(name: string, version: string): string {\n    const content = `${name.toLowerCase().replace(/[^a-z0-9]/g, '_')}_${version}`;\n    return createHash('sha256').update(content).digest('hex').substring(0, 16);\n  }\n\n  private async validateModelData(modelData: any): Promise<void> {\n    if (!modelData.name || modelData.name.trim().length === 0) {\n      throw new Error('Model name is required');\n    }\n\n    if (!modelData.version || modelData.version.trim().length === 0) {\n      throw new Error('Model version is required');\n    }\n\n    if (!modelData.model_type || !['foundation', 'fine_tuned', 'specialized', 'custom'].includes(modelData.model_type)) {\n      throw new Error('Invalid model type');\n    }\n\n    if (modelData.size_mb <= 0) {\n      throw new Error('Model size must be greater than 0');\n    }\n  }\n\n  private async calculateModelChecksum(model: any): Promise<string> {\n    // In a real implementation, this would calculate checksum of the actual model files\n    const content = JSON.stringify({\n      name: model.name,\n      version: model.version,\n      architecture: model.architecture,\n      size_mb: model.size_mb\n    });\n    \n    return createHash('sha256').update(content).digest('hex');\n  }\n\n  private calculatePerformanceDelta(oldModel: ModelMetadata, newModel: ModelMetadata): Record<string, number> {\n    const delta: Record<string, number> = {};\n    \n    Object.keys(newModel.performance_metrics).forEach(metric => {\n      const oldValue = oldModel.performance_metrics[metric];\n      const newValue = newModel.performance_metrics[metric];\n      \n      if (oldValue !== undefined && newValue !== undefined) {\n        delta[metric] = newValue - oldValue;\n      }\n    });\n    \n    return delta;\n  }\n\n  private generateComparisonReasoning(modelA: ModelMetadata, modelB: ModelMetadata, comparison: ModelComparison): string[] {\n    const reasoning: string[] = [];\n    \n    // Size comparison\n    if (modelA.size_mb < modelB.size_mb * 0.8) {\n      reasoning.push(`${modelA.name} is significantly smaller (${modelA.size_mb}MB vs ${modelB.size_mb}MB), better for resource-constrained environments`);\n    } else if (modelB.size_mb < modelA.size_mb * 0.8) {\n      reasoning.push(`${modelB.name} is significantly smaller (${modelB.size_mb}MB vs ${modelA.size_mb}MB), better for resource-constrained environments`);\n    }\n    \n    // Performance comparison\n    const aAccuracy = modelA.performance_metrics.accuracy || 0;\n    const bAccuracy = modelB.performance_metrics.accuracy || 0;\n    \n    if (aAccuracy > bAccuracy * 1.1) {\n      reasoning.push(`${modelA.name} has significantly better accuracy (${(aAccuracy * 100).toFixed(1)}% vs ${(bAccuracy * 100).toFixed(1)}%)`);\n    } else if (bAccuracy > aAccuracy * 1.1) {\n      reasoning.push(`${modelB.name} has significantly better accuracy (${(bAccuracy * 100).toFixed(1)}% vs ${(aAccuracy * 100).toFixed(1)}%)`);\n    }\n    \n    // Latency comparison\n    const aLatency = modelA.performance_metrics.inference_latency_ms;\n    const bLatency = modelB.performance_metrics.inference_latency_ms;\n    \n    if (aLatency && bLatency) {\n      if (aLatency < bLatency * 0.8) {\n        reasoning.push(`${modelA.name} is significantly faster (${aLatency}ms vs ${bLatency}ms response time)`);\n      } else if (bLatency < aLatency * 0.8) {\n        reasoning.push(`${modelB.name} is significantly faster (${bLatency}ms vs ${aLatency}ms response time)`);\n      }\n    }\n    \n    return reasoning;\n  }\n\n  private generateUseCaseRecommendations(modelA: ModelMetadata, modelB: ModelMetadata): Record<string, string> {\n    const recommendations: Record<string, string> = {};\n    \n    // Size-based recommendations\n    if (modelA.size_mb < modelB.size_mb) {\n      recommendations['edge_deployment'] = modelA.name;\n      recommendations['mobile_applications'] = modelA.name;\n    } else {\n      recommendations['high_accuracy_tasks'] = modelB.name;\n      recommendations['server_deployment'] = modelB.name;\n    }\n    \n    // Performance-based recommendations\n    const aLatency = modelA.performance_metrics.inference_latency_ms;\n    const bLatency = modelB.performance_metrics.inference_latency_ms;\n    \n    if (aLatency && bLatency) {\n      if (aLatency < bLatency) {\n        recommendations['real_time_applications'] = modelA.name;\n        recommendations['interactive_systems'] = modelA.name;\n      } else {\n        recommendations['batch_processing'] = modelB.name;\n        recommendations['offline_analysis'] = modelB.name;\n      }\n    }\n    \n    // Capability-based recommendations\n    if (modelA.capabilities.code_generation && !modelB.capabilities.code_generation) {\n      recommendations['code_generation'] = modelA.name;\n    } else if (modelB.capabilities.code_generation && !modelA.capabilities.code_generation) {\n      recommendations['code_generation'] = modelB.name;\n    }\n    \n    return recommendations;\n  }\n\n  private async loadModelsFromStorage(): Promise<void> {\n    try {\n      // Load models from persistent storage (database, file system, etc.)\n      console.log('üì• Loading models from storage...');\n      \n      // This would typically load from a database or file system\n      // For now, we'll initialize with empty registry\n      \n      console.log(`‚úÖ Loaded ${this.models.size} models from storage`);\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load models from storage:', error);\n    }\n  }\n\n  private async verifyModelIntegrity(): Promise<void> {\n    try {\n      console.log('üîç Verifying model integrity...');\n      \n      for (const [modelId, model] of this.models) {\n        // Verify checksums, file existence, etc.\n        // Mark models as corrupted if verification fails\n      }\n      \n      console.log('‚úÖ Model integrity verification completed');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Model integrity verification failed:', error);\n    }\n  }\n\n  private async updateDeploymentStatuses(): Promise<void> {\n    try {\n      console.log('üîÑ Updating deployment statuses...');\n      \n      for (const [modelId, model] of this.models) {\n        if (model.deployment_info.status === 'deployed') {\n          // Check if model is actually healthy\n          const isHealthy = await this.checkModelHealth(model);\n          model.deployment_info.health_status = isHealthy ? 'healthy' : 'unhealthy';\n          model.deployment_info.last_health_check = new Date();\n        }\n      }\n      \n      console.log('‚úÖ Deployment status update completed');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to update deployment statuses:', error);\n    }\n  }\n\n  private async checkModelHealth(model: ModelMetadata): Promise<boolean> {\n    try {\n      if (!model.deployment_info.endpoint) return false;\n      \n      // Perform actual health check against the deployed model\n      // This is a placeholder - implement actual health check logic\n      \n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const modelRegistry = new ModelRegistry();"],"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","ignoreList":[]}