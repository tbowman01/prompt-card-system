e9b4e8708475f1e86c1ee2a57a49a7cd
"use strict";

/* istanbul ignore next */
function cov_zw8ezz7p8() {
  var path = "/workspaces/prompt-card-system/backend/src/services/assertions/SemanticSimilarityValidator.ts";
  var hash = "338cf8c60c84ca61ae94c367b5c9eac1662eed70";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/assertions/SemanticSimilarityValidator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 45
        }
      },
      "37": {
        start: {
          line: 37,
          column: 11
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "38": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 26
        }
      },
      "39": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 54
        }
      },
      "40": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 33
        }
      },
      "41": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 29
        }
      },
      "42": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "43": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "44": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 36
        }
      },
      "45": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 98
        }
      },
      "46": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "47": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 24
        }
      },
      "48": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "49": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 75
        }
      },
      "50": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "51": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 72,
          column: 77
        }
      },
      "52": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 30
        }
      },
      "53": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 64
        }
      },
      "54": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "55": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "56": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 75
        }
      },
      "57": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "58": {
        start: {
          line: 89,
          column: 30
        },
        end: {
          line: 89,
          column: 63
        }
      },
      "59": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 29
        }
      },
      "60": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 63
        }
      },
      "61": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "62": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "63": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 75
        }
      },
      "64": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "65": {
        start: {
          line: 106,
          column: 29
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "66": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 28
        }
      },
      "67": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 62
        }
      },
      "68": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 24
        }
      },
      "69": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "70": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 75
        }
      },
      "71": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "72": {
        start: {
          line: 123,
          column: 29
        },
        end: {
          line: 123,
          column: 60
        }
      },
      "73": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 28
        }
      },
      "74": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 62
        }
      },
      "75": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "76": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 30
        }
      },
      "77": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 142,
          column: 58
        }
      },
      "78": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "79": {
        start: {
          line: 145,
          column: 27
        },
        end: {
          line: 145,
          column: 72
        }
      },
      "80": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 67
        }
      },
      "81": {
        start: {
          line: 148,
          column: 24
        },
        end: {
          line: 148,
          column: 67
        }
      },
      "82": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 66
        }
      },
      "83": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 52
        }
      },
      "84": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 47
        }
      },
      "85": {
        start: {
          line: 160,
          column: 29
        },
        end: {
          line: 160,
          column: 45
        }
      },
      "86": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 59
        }
      },
      "87": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 37
        }
      },
      "88": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "89": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 70
        }
      },
      "90": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "91": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 67
        }
      },
      "92": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 176,
          column: 91
        }
      },
      "93": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 37
        }
      },
      "94": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 22
        }
      },
      "95": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "96": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 65
        }
      },
      "97": {
        start: {
          line: 188,
          column: 25
        },
        end: {
          line: 188,
          column: 26
        }
      },
      "98": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "99": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 21
        }
      },
      "100": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "101": {
        start: {
          line: 191,
          column: 21
        },
        end: {
          line: 191,
          column: 22
        }
      },
      "102": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 50
        }
      },
      "103": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 45
        }
      },
      "104": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 45
        }
      },
      "105": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 196,
          column: 43
        }
      },
      "106": {
        start: {
          line: 197,
          column: 27
        },
        end: {
          line: 197,
          column: 43
        }
      },
      "107": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "108": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 21
        }
      },
      "109": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 54
        }
      },
      "110": {
        start: {
          line: 207,
          column: 30
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "111": {
        start: {
          line: 213,
          column: 30
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "112": {
        start: {
          line: 219,
          column: 22
        },
        end: {
          line: 219,
          column: 55
        }
      },
      "113": {
        start: {
          line: 220,
          column: 28
        },
        end: {
          line: 220,
          column: 29
        }
      },
      "114": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 221,
          column: 29
        }
      },
      "115": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 229,
          column: 11
        }
      },
      "116": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "117": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 32
        }
      },
      "118": {
        start: {
          line: 226,
          column: 17
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "119": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 32
        }
      },
      "120": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 39
        }
      },
      "121": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 82
        }
      },
      "122": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "123": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 31
        }
      },
      "124": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 46
        }
      },
      "125": {
        start: {
          line: 238,
          column: 13
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "126": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 31
        }
      },
      "127": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 56
        }
      },
      "128": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 30
        }
      },
      "129": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 24
        }
      },
      "130": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 255,
          column: 10
        }
      },
      "131": {
        start: {
          line: 261,
          column: 33
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "132": {
        start: {
          line: 271,
          column: 22
        },
        end: {
          line: 271,
          column: 55
        }
      },
      "133": {
        start: {
          line: 272,
          column: 23
        },
        end: {
          line: 272,
          column: 25
        }
      },
      "134": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "135": {
        start: {
          line: 275,
          column: 24
        },
        end: {
          line: 275,
          column: 25
        }
      },
      "136": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "137": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "138": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 28
        }
      },
      "139": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 61
        }
      },
      "140": {
        start: {
          line: 284,
          column: 32
        },
        end: {
          line: 285,
          column: 42
        }
      },
      "141": {
        start: {
          line: 285,
          column: 36
        },
        end: {
          line: 285,
          column: 41
        }
      },
      "142": {
        start: {
          line: 286,
          column: 40
        },
        end: {
          line: 286,
          column: 58
        }
      },
      "143": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 294,
          column: 10
        }
      },
      "144": {
        start: {
          line: 290,
          column: 78
        },
        end: {
          line: 293,
          column: 13
        }
      },
      "145": {
        start: {
          line: 300,
          column: 30
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "146": {
        start: {
          line: 307,
          column: 22
        },
        end: {
          line: 307,
          column: 55
        }
      },
      "147": {
        start: {
          line: 308,
          column: 31
        },
        end: {
          line: 308,
          column: 33
        }
      },
      "148": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      },
      "149": {
        start: {
          line: 311,
          column: 24
        },
        end: {
          line: 311,
          column: 25
        }
      },
      "150": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "151": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 315,
          column: 17
        }
      },
      "152": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 28
        }
      },
      "153": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 73
        }
      },
      "154": {
        start: {
          line: 320,
          column: 29
        },
        end: {
          line: 320,
          column: 97
        }
      },
      "155": {
        start: {
          line: 320,
          column: 82
        },
        end: {
          line: 320,
          column: 93
        }
      },
      "156": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 325,
          column: 10
        }
      },
      "157": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "158": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 33
        }
      },
      "159": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 30
        }
      },
      "160": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 33
        }
      },
      "161": {
        start: {
          line: 338,
          column: 0
        },
        end: {
          line: 338,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 18
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 39
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 49
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 42
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 65
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 33
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 83
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 31
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 100
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 31
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 134
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 46
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 140
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 19
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 156
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 160,
            column: 21
          }
        },
        loc: {
          start: {
            line: 160,
            column: 29
          },
          end: {
            line: 160,
            column: 45
          }
        },
        line: 160
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 42
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 165
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 169,
            column: 23
          },
          end: {
            line: 169,
            column: 24
          }
        },
        loc: {
          start: {
            line: 169,
            column: 32
          },
          end: {
            line: 171,
            column: 9
          }
        },
        line: 169
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 173,
            column: 28
          }
        },
        loc: {
          start: {
            line: 173,
            column: 44
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 173
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 39
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 184
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 33
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 206
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 222,
            column: 22
          },
          end: {
            line: 222,
            column: 23
          }
        },
        loc: {
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 229,
            column: 9
          }
        },
        line: 222
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 31
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 260
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 274,
            column: 49
          },
          end: {
            line: 274,
            column: 50
          }
        },
        loc: {
          start: {
            line: 274,
            column: 71
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 274
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 276,
            column: 26
          },
          end: {
            line: 276,
            column: 27
          }
        },
        loc: {
          start: {
            line: 276,
            column: 34
          },
          end: {
            line: 280,
            column: 13
          }
        },
        line: 276
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 285,
            column: 18
          },
          end: {
            line: 285,
            column: 19
          }
        },
        loc: {
          start: {
            line: 285,
            column: 36
          },
          end: {
            line: 285,
            column: 41
          }
        },
        line: 285
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 290,
            column: 58
          },
          end: {
            line: 290,
            column: 59
          }
        },
        loc: {
          start: {
            line: 290,
            column: 78
          },
          end: {
            line: 293,
            column: 13
          }
        },
        line: 290
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 31
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 299
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 310,
            column: 46
          },
          end: {
            line: 310,
            column: 47
          }
        },
        loc: {
          start: {
            line: 310,
            column: 72
          },
          end: {
            line: 318,
            column: 9
          }
        },
        line: 310
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 312,
            column: 26
          },
          end: {
            line: 312,
            column: 27
          }
        },
        loc: {
          start: {
            line: 312,
            column: 34
          },
          end: {
            line: 316,
            column: 13
          }
        },
        line: 312
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 320,
            column: 66
          },
          end: {
            line: 320,
            column: 67
          }
        },
        loc: {
          start: {
            line: 320,
            column: 82
          },
          end: {
            line: 320,
            column: 93
          }
        },
        line: 320
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 20
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 330
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "18": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "19": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "20": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "21": {
        loc: {
          start: {
            line: 170,
            column: 36
          },
          end: {
            line: 170,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 36
          },
          end: {
            line: 170,
            column: 58
          }
        }, {
          start: {
            line: 170,
            column: 62
          },
          end: {
            line: 170,
            column: 63
          }
        }],
        line: 170
      },
      "22": {
        loc: {
          start: {
            line: 174,
            column: 24
          },
          end: {
            line: 174,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 24
          },
          end: {
            line: 174,
            column: 45
          }
        }, {
          start: {
            line: 174,
            column: 49
          },
          end: {
            line: 174,
            column: 50
          }
        }],
        line: 174
      },
      "23": {
        loc: {
          start: {
            line: 176,
            column: 59
          },
          end: {
            line: 176,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 83
          },
          end: {
            line: 176,
            column: 84
          }
        }, {
          start: {
            line: 176,
            column: 87
          },
          end: {
            line: 176,
            column: 88
          }
        }],
        line: 176
      },
      "24": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "25": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "26": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 28
          }
        }, {
          start: {
            line: 198,
            column: 32
          },
          end: {
            line: 198,
            column: 48
          }
        }],
        line: 198
      },
      "27": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 228,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 228,
            column: 13
          }
        }, {
          start: {
            line: 226,
            column: 17
          },
          end: {
            line: 228,
            column: 13
          }
        }],
        line: 223
      },
      "28": {
        loc: {
          start: {
            line: 226,
            column: 17
          },
          end: {
            line: 228,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 17
          },
          end: {
            line: 228,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "29": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: 238,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        }],
        line: 234
      },
      "30": {
        loc: {
          start: {
            line: 238,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: 242,
            column: 13
          },
          end: {
            line: 245,
            column: 9
          }
        }],
        line: 238
      },
      "31": {
        loc: {
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "32": {
        loc: {
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 315,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 315,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "33": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/assertions/SemanticSimilarityValidator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/assertions/SemanticSimilarityValidator.ts"],
      sourcesContent: ["import * as tf from '@tensorflow/tfjs-node';\n\nexport interface SimilarityResult {\n  similarity: number;\n  confidence: number;\n  method: string;\n}\n\nexport interface SentimentResult {\n  label: 'positive' | 'negative' | 'neutral';\n  score: number;\n  details?: Record<string, number>;\n}\n\nexport interface LanguageResult {\n  language: string;\n  confidence: number;\n  alternatives?: Array<{ language: string; confidence: number }>;\n}\n\nexport interface ToxicityResult {\n  score: number;\n  categories: Record<string, number>;\n  threshold: number;\n}\n\nexport class SemanticSimilarityValidator {\n  private model: any = null;\n  private modelName: string = 'universal-sentence-encoder';\n  private initialized: boolean = false;\n\n  constructor() {\n    // Initialize TensorFlow.js backend\n    tf.setBackend('cpu');\n  }\n\n  /**\n   * Initialize the semantic similarity validator\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing SemanticSimilarityValidator...');\n      \n      // For now, we'll use a simple fallback implementation\n      // In a production environment, you'd load actual transformer models\n      this.initialized = true;\n      \n      console.log('\u2705 SemanticSimilarityValidator initialized with fallback implementation');\n    } catch (error) {\n      console.error('\u274C Failed to initialize SemanticSimilarityValidator:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Compute semantic similarity between two texts\n   */\n  async computeSimilarity(text1: string, text2: string): Promise<number> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Fallback implementation using simple text similarity\n      // In production, this would use sentence embeddings\n      const similarity = await this.computeTextSimilarity(text1, text2);\n      return similarity;\n    } catch (error) {\n      console.error('Error computing similarity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze sentiment of text\n   */\n  async analyzeSentiment(text: string): Promise<SentimentResult> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Simple sentiment analysis based on keywords\n      const sentiment = this.analyzeSentimentSimple(text);\n      return sentiment;\n    } catch (error) {\n      console.error('Error analyzing sentiment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Detect language of text\n   */\n  async detectLanguage(text: string): Promise<LanguageResult> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Simple language detection based on common words\n      const language = this.detectLanguageSimple(text);\n      return language;\n    } catch (error) {\n      console.error('Error detecting language:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Detect toxicity in text\n   */\n  async detectToxicity(text: string): Promise<ToxicityResult> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Simple toxicity detection based on keyword matching\n      const toxicity = this.detectToxicitySimple(text);\n      return toxicity;\n    } catch (error) {\n      console.error('Error detecting toxicity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the model name being used\n   */\n  getModelName(): string {\n    return this.modelName;\n  }\n\n  /**\n   * Fallback text similarity using cosine similarity of TF-IDF vectors\n   */\n  private async computeTextSimilarity(text1: string, text2: string): Promise<number> {\n    // Normalize and tokenize texts\n    const tokens1 = this.tokenize(text1.toLowerCase());\n    const tokens2 = this.tokenize(text2.toLowerCase());\n    \n    // Create vocabulary\n    const vocabulary = Array.from(new Set([...tokens1, ...tokens2]));\n    \n    // Create TF-IDF vectors\n    const vector1 = this.createTFIDFVector(tokens1, vocabulary);\n    const vector2 = this.createTFIDFVector(tokens2, vocabulary);\n    \n    // Compute cosine similarity\n    const similarity = this.cosineSimilarity(vector1, vector2);\n    \n    return Math.max(0, Math.min(1, similarity));\n  }\n\n  /**\n   * Simple tokenization\n   */\n  private tokenize(text: string): string[] {\n    return text\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(/\\s+/)\n      .filter(token => token.length > 0);\n  }\n\n  /**\n   * Create TF-IDF vector for tokens\n   */\n  private createTFIDFVector(tokens: string[], vocabulary: string[]): number[] {\n    const vector = new Array(vocabulary.length).fill(0);\n    const tokenCounts = new Map<string, number>();\n    \n    // Count token frequencies\n    tokens.forEach(token => {\n      tokenCounts.set(token, (tokenCounts.get(token) || 0) + 1);\n    });\n    \n    // Calculate TF-IDF\n    vocabulary.forEach((word, index) => {\n      const tf = (tokenCounts.get(word) || 0) / tokens.length;\n      // Simplified IDF (in production, use proper corpus-based IDF)\n      const idf = Math.log(vocabulary.length / (1 + (tokenCounts.has(word) ? 1 : 0)));\n      vector[index] = tf * idf;\n    });\n    \n    return vector;\n  }\n\n  /**\n   * Compute cosine similarity between two vectors\n   */\n  private cosineSimilarity(vector1: number[], vector2: number[]): number {\n    if (vector1.length !== vector2.length) {\n      throw new Error('Vectors must have the same length');\n    }\n    \n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n    \n    for (let i = 0; i < vector1.length; i++) {\n      dotProduct += vector1[i] * vector2[i];\n      norm1 += vector1[i] * vector1[i];\n      norm2 += vector2[i] * vector2[i];\n    }\n    \n    const magnitude1 = Math.sqrt(norm1);\n    const magnitude2 = Math.sqrt(norm2);\n    \n    if (magnitude1 === 0 || magnitude2 === 0) {\n      return 0;\n    }\n    \n    return dotProduct / (magnitude1 * magnitude2);\n  }\n\n  /**\n   * Simple sentiment analysis using keyword matching\n   */\n  private analyzeSentimentSimple(text: string): SentimentResult {\n    const positiveWords = [\n      'good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'awesome',\n      'love', 'like', 'enjoy', 'happy', 'pleased', 'satisfied', 'perfect',\n      'best', 'better', 'brilliant', 'outstanding', 'superb', 'magnificent',\n      'yes', 'correct', 'right', 'accurate', 'successful', 'win', 'victory'\n    ];\n    \n    const negativeWords = [\n      'bad', 'terrible', 'awful', 'horrible', 'disgusting', 'hate', 'dislike',\n      'angry', 'sad', 'disappointed', 'frustrated', 'annoyed', 'upset',\n      'wrong', 'incorrect', 'error', 'fail', 'failure', 'loss', 'defeat',\n      'no', 'not', 'never', 'nothing', 'none', 'worst', 'worse'\n    ];\n    \n    const words = this.tokenize(text.toLowerCase());\n    \n    let positiveScore = 0;\n    let negativeScore = 0;\n    \n    words.forEach(word => {\n      if (positiveWords.includes(word)) {\n        positiveScore++;\n      } else if (negativeWords.includes(word)) {\n        negativeScore++;\n      }\n    });\n    \n    const totalWords = words.length;\n    const netScore = (positiveScore - negativeScore) / Math.max(1, totalWords);\n    \n    let label: 'positive' | 'negative' | 'neutral';\n    let score: number;\n    \n    if (netScore > 0.1) {\n      label = 'positive';\n      score = Math.min(1, netScore * 5);\n    } else if (netScore < -0.1) {\n      label = 'negative';\n      score = Math.min(1, Math.abs(netScore) * 5);\n    } else {\n      label = 'neutral';\n      score = 0.5;\n    }\n    \n    return {\n      label,\n      score,\n      details: {\n        positive: positiveScore,\n        negative: negativeScore,\n        neutral: totalWords - positiveScore - negativeScore,\n        netScore\n      }\n    };\n  }\n\n  /**\n   * Simple language detection using common words\n   */\n  private detectLanguageSimple(text: string): LanguageResult {\n    const languageKeywords = {\n      'en': ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that', 'it', 'with', 'for', 'as', 'was', 'on', 'are'],\n      'es': ['el', 'la', 'de', 'que', 'y', 'es', 'en', 'un', 'se', 'no', 'te', 'lo', 'le', 'da', 'su'],\n      'fr': ['le', 'de', 'et', '\xE0', 'un', 'il', '\xEAtre', 'et', 'en', 'avoir', 'que', 'pour', 'dans', 'ce', 'son'],\n      'de': ['der', 'die', 'und', 'in', 'den', 'von', 'zu', 'das', 'mit', 'sich', 'des', 'auf', 'f\xFCr', 'ist', 'im'],\n      'it': ['il', 'di', 'che', 'e', 'la', 'per', 'un', 'in', 'con', 'del', 'da', 'a', 'al', 'le', 'si'],\n      'pt': ['o', 'de', 'que', 'e', 'do', 'da', 'em', 'um', 'para', '\xE9', 'com', 'n\xE3o', 'uma', 'os', 'no'],\n      'ru': ['\u0432', '\u0438', '\u043D\u0435', '\u043D\u0430', '\u044F', '\u0431\u044B\u0442\u044C', '\u0442\u043E', '\u043E\u043D', '\u043E\u043D\u043E', '\u043A\u0430\u043A', '\u0441', '\u0430', '\u043D\u043E', '\u0437\u0430', '\u043F\u043E'],\n      'zh': ['\u7684', '\u662F', '\u5728', '\u4E86', '\u548C', '\u6709', '\u4E00', '\u6211', '\u4E0D', '\u4F60', '\u4ED6', '\u8FD9', '\u4E2A', '\u4EBA', '\u6765']\n    };\n    \n    const words = this.tokenize(text.toLowerCase());\n    const scores: Record<string, number> = {};\n    \n    // Calculate scores for each language\n    Object.entries(languageKeywords).forEach(([lang, keywords]) => {\n      let score = 0;\n      words.forEach(word => {\n        if (keywords.includes(word)) {\n          score++;\n        }\n      });\n      scores[lang] = score / Math.max(1, words.length);\n    });\n    \n    // Find the language with highest score\n    const sortedLanguages = Object.entries(scores)\n      .sort(([, a], [, b]) => b - a);\n    \n    const [topLanguage, topScore] = sortedLanguages[0];\n    \n    return {\n      language: topLanguage,\n      confidence: Math.min(1, topScore * 10),\n      alternatives: sortedLanguages.slice(1, 4).map(([lang, score]) => ({\n        language: lang,\n        confidence: Math.min(1, score * 10)\n      }))\n    };\n  }\n\n  /**\n   * Simple toxicity detection using keyword matching\n   */\n  private detectToxicitySimple(text: string): ToxicityResult {\n    const toxicKeywords = {\n      profanity: ['damn', 'hell', 'crap', 'stupid', 'idiot', 'moron', 'dumb'],\n      harassment: ['hate', 'kill', 'die', 'destroy', 'hurt', 'harm', 'attack'],\n      threats: ['threat', 'threaten', 'violence', 'violent', 'dangerous', 'weapon'],\n      discrimination: ['racist', 'sexist', 'bigot', 'discrimination', 'prejudice'],\n      spam: ['spam', 'advertisement', 'promotion', 'click', 'buy', 'sale', 'offer']\n    };\n    \n    const words = this.tokenize(text.toLowerCase());\n    const categoryScores: Record<string, number> = {};\n    \n    // Calculate scores for each toxicity category\n    Object.entries(toxicKeywords).forEach(([category, keywords]) => {\n      let score = 0;\n      words.forEach(word => {\n        if (keywords.includes(word)) {\n          score++;\n        }\n      });\n      categoryScores[category] = score / Math.max(1, words.length);\n    });\n    \n    // Calculate overall toxicity score\n    const overallScore = Object.values(categoryScores).reduce((sum, score) => sum + score, 0);\n    \n    return {\n      score: Math.min(1, overallScore * 2),\n      categories: categoryScores,\n      threshold: 0.3\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.model) {\n      this.model.dispose();\n      this.model = null;\n    }\n    this.initialized = false;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "338cf8c60c84ca61ae94c367b5c9eac1662eed70"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zw8ezz7p8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zw8ezz7p8();
var __createBinding =
/* istanbul ignore next */
(cov_zw8ezz7p8().s[0]++,
/* istanbul ignore next */
(cov_zw8ezz7p8().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_zw8ezz7p8().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_zw8ezz7p8().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_zw8ezz7p8().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_zw8ezz7p8().f[0]++;
  cov_zw8ezz7p8().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().b[2][0]++;
    cov_zw8ezz7p8().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_zw8ezz7p8().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_zw8ezz7p8().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_zw8ezz7p8().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_zw8ezz7p8().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_zw8ezz7p8().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_zw8ezz7p8().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_zw8ezz7p8().b[5][1]++,
  /* istanbul ignore next */
  (cov_zw8ezz7p8().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_zw8ezz7p8().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().b[3][0]++;
    cov_zw8ezz7p8().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_zw8ezz7p8().f[1]++;
        cov_zw8ezz7p8().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_zw8ezz7p8().b[3][1]++;
  }
  cov_zw8ezz7p8().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_zw8ezz7p8().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_zw8ezz7p8().f[2]++;
  cov_zw8ezz7p8().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().b[7][0]++;
    cov_zw8ezz7p8().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_zw8ezz7p8().b[7][1]++;
  }
  cov_zw8ezz7p8().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_zw8ezz7p8().s[11]++,
/* istanbul ignore next */
(cov_zw8ezz7p8().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_zw8ezz7p8().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_zw8ezz7p8().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_zw8ezz7p8().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_zw8ezz7p8().f[3]++;
  cov_zw8ezz7p8().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_zw8ezz7p8().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_zw8ezz7p8().f[4]++;
  cov_zw8ezz7p8().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_zw8ezz7p8().s[14]++,
/* istanbul ignore next */
(cov_zw8ezz7p8().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_zw8ezz7p8().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_zw8ezz7p8().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_zw8ezz7p8().f[5]++;
  cov_zw8ezz7p8().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[6]++;
    cov_zw8ezz7p8().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_zw8ezz7p8().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[17]++, []);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_zw8ezz7p8().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_zw8ezz7p8().b[12][0]++;
          cov_zw8ezz7p8().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_zw8ezz7p8().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_zw8ezz7p8().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[8]++;
    cov_zw8ezz7p8().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_zw8ezz7p8().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_zw8ezz7p8().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[13][0]++;
      cov_zw8ezz7p8().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[26]++, {});
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[15][0]++;
      cov_zw8ezz7p8().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_zw8ezz7p8().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_zw8ezz7p8().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_zw8ezz7p8().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_zw8ezz7p8().b[16][0]++;
          cov_zw8ezz7p8().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_zw8ezz7p8().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[15][1]++;
    }
    cov_zw8ezz7p8().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_zw8ezz7p8().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_zw8ezz7p8().s[36]++;
exports.SemanticSimilarityValidator = void 0;
const tf =
/* istanbul ignore next */
(cov_zw8ezz7p8().s[37]++, __importStar(require("@tensorflow/tfjs-node")));
class SemanticSimilarityValidator {
  constructor() {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[9]++;
    cov_zw8ezz7p8().s[38]++;
    this.model = null;
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[39]++;
    this.modelName = 'universal-sentence-encoder';
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[40]++;
    this.initialized = false;
    // Initialize TensorFlow.js backend
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[41]++;
    tf.setBackend('cpu');
  }
  /**
   * Initialize the semantic similarity validator
   */
  async initialize() {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[10]++;
    cov_zw8ezz7p8().s[42]++;
    try {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[43]++;
      console.log('Initializing SemanticSimilarityValidator...');
      // For now, we'll use a simple fallback implementation
      // In a production environment, you'd load actual transformer models
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[44]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[45]++;
      console.log('✅ SemanticSimilarityValidator initialized with fallback implementation');
    } catch (error) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[46]++;
      console.error('❌ Failed to initialize SemanticSimilarityValidator:', error);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[47]++;
      throw error;
    }
  }
  /**
   * Compute semantic similarity between two texts
   */
  async computeSimilarity(text1, text2) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[11]++;
    cov_zw8ezz7p8().s[48]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[17][0]++;
      cov_zw8ezz7p8().s[49]++;
      throw new Error('SemanticSimilarityValidator not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[17][1]++;
    }
    cov_zw8ezz7p8().s[50]++;
    try {
      // Fallback implementation using simple text similarity
      // In production, this would use sentence embeddings
      const similarity =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[51]++, await this.computeTextSimilarity(text1, text2));
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[52]++;
      return similarity;
    } catch (error) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[53]++;
      console.error('Error computing similarity:', error);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[54]++;
      throw error;
    }
  }
  /**
   * Analyze sentiment of text
   */
  async analyzeSentiment(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[12]++;
    cov_zw8ezz7p8().s[55]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[18][0]++;
      cov_zw8ezz7p8().s[56]++;
      throw new Error('SemanticSimilarityValidator not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[18][1]++;
    }
    cov_zw8ezz7p8().s[57]++;
    try {
      // Simple sentiment analysis based on keywords
      const sentiment =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[58]++, this.analyzeSentimentSimple(text));
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[59]++;
      return sentiment;
    } catch (error) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[60]++;
      console.error('Error analyzing sentiment:', error);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[61]++;
      throw error;
    }
  }
  /**
   * Detect language of text
   */
  async detectLanguage(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[13]++;
    cov_zw8ezz7p8().s[62]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[19][0]++;
      cov_zw8ezz7p8().s[63]++;
      throw new Error('SemanticSimilarityValidator not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[19][1]++;
    }
    cov_zw8ezz7p8().s[64]++;
    try {
      // Simple language detection based on common words
      const language =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[65]++, this.detectLanguageSimple(text));
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[66]++;
      return language;
    } catch (error) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[67]++;
      console.error('Error detecting language:', error);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[68]++;
      throw error;
    }
  }
  /**
   * Detect toxicity in text
   */
  async detectToxicity(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[14]++;
    cov_zw8ezz7p8().s[69]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[20][0]++;
      cov_zw8ezz7p8().s[70]++;
      throw new Error('SemanticSimilarityValidator not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[20][1]++;
    }
    cov_zw8ezz7p8().s[71]++;
    try {
      // Simple toxicity detection based on keyword matching
      const toxicity =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[72]++, this.detectToxicitySimple(text));
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[73]++;
      return toxicity;
    } catch (error) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[74]++;
      console.error('Error detecting toxicity:', error);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[75]++;
      throw error;
    }
  }
  /**
   * Get the model name being used
   */
  getModelName() {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[15]++;
    cov_zw8ezz7p8().s[76]++;
    return this.modelName;
  }
  /**
   * Fallback text similarity using cosine similarity of TF-IDF vectors
   */
  async computeTextSimilarity(text1, text2) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[16]++;
    // Normalize and tokenize texts
    const tokens1 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[77]++, this.tokenize(text1.toLowerCase()));
    const tokens2 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[78]++, this.tokenize(text2.toLowerCase()));
    // Create vocabulary
    const vocabulary =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[79]++, Array.from(new Set([...tokens1, ...tokens2])));
    // Create TF-IDF vectors
    const vector1 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[80]++, this.createTFIDFVector(tokens1, vocabulary));
    const vector2 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[81]++, this.createTFIDFVector(tokens2, vocabulary));
    // Compute cosine similarity
    const similarity =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[82]++, this.cosineSimilarity(vector1, vector2));
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[83]++;
    return Math.max(0, Math.min(1, similarity));
  }
  /**
   * Simple tokenization
   */
  tokenize(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[17]++;
    cov_zw8ezz7p8().s[84]++;
    return text.replace(/[^\w\s]/g, ' ').split(/\s+/).filter(token => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[18]++;
      cov_zw8ezz7p8().s[85]++;
      return token.length > 0;
    });
  }
  /**
   * Create TF-IDF vector for tokens
   */
  createTFIDFVector(tokens, vocabulary) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[19]++;
    const vector =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[86]++, new Array(vocabulary.length).fill(0));
    const tokenCounts =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[87]++, new Map());
    // Count token frequencies
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[88]++;
    tokens.forEach(token => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[20]++;
      cov_zw8ezz7p8().s[89]++;
      tokenCounts.set(token, (
      /* istanbul ignore next */
      (cov_zw8ezz7p8().b[21][0]++, tokenCounts.get(token)) ||
      /* istanbul ignore next */
      (cov_zw8ezz7p8().b[21][1]++, 0)) + 1);
    });
    // Calculate TF-IDF
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[90]++;
    vocabulary.forEach((word, index) => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[21]++;
      const tf =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[91]++, (
      /* istanbul ignore next */
      (cov_zw8ezz7p8().b[22][0]++, tokenCounts.get(word)) ||
      /* istanbul ignore next */
      (cov_zw8ezz7p8().b[22][1]++, 0)) / tokens.length);
      // Simplified IDF (in production, use proper corpus-based IDF)
      const idf =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[92]++, Math.log(vocabulary.length / (1 + (tokenCounts.has(word) ?
      /* istanbul ignore next */
      (cov_zw8ezz7p8().b[23][0]++, 1) :
      /* istanbul ignore next */
      (cov_zw8ezz7p8().b[23][1]++, 0)))));
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[93]++;
      vector[index] = tf * idf;
    });
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[94]++;
    return vector;
  }
  /**
   * Compute cosine similarity between two vectors
   */
  cosineSimilarity(vector1, vector2) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[22]++;
    cov_zw8ezz7p8().s[95]++;
    if (vector1.length !== vector2.length) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[24][0]++;
      cov_zw8ezz7p8().s[96]++;
      throw new Error('Vectors must have the same length');
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[24][1]++;
    }
    let dotProduct =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[97]++, 0);
    let norm1 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[98]++, 0);
    let norm2 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[99]++, 0);
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[100]++;
    for (let i =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[101]++, 0); i < vector1.length; i++) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[102]++;
      dotProduct += vector1[i] * vector2[i];
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[103]++;
      norm1 += vector1[i] * vector1[i];
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[104]++;
      norm2 += vector2[i] * vector2[i];
    }
    const magnitude1 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[105]++, Math.sqrt(norm1));
    const magnitude2 =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[106]++, Math.sqrt(norm2));
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_zw8ezz7p8().b[26][0]++, magnitude1 === 0) ||
    /* istanbul ignore next */
    (cov_zw8ezz7p8().b[26][1]++, magnitude2 === 0)) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[25][0]++;
      cov_zw8ezz7p8().s[108]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[25][1]++;
    }
    cov_zw8ezz7p8().s[109]++;
    return dotProduct / (magnitude1 * magnitude2);
  }
  /**
   * Simple sentiment analysis using keyword matching
   */
  analyzeSentimentSimple(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[23]++;
    const positiveWords =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[110]++, ['good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'awesome', 'love', 'like', 'enjoy', 'happy', 'pleased', 'satisfied', 'perfect', 'best', 'better', 'brilliant', 'outstanding', 'superb', 'magnificent', 'yes', 'correct', 'right', 'accurate', 'successful', 'win', 'victory']);
    const negativeWords =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[111]++, ['bad', 'terrible', 'awful', 'horrible', 'disgusting', 'hate', 'dislike', 'angry', 'sad', 'disappointed', 'frustrated', 'annoyed', 'upset', 'wrong', 'incorrect', 'error', 'fail', 'failure', 'loss', 'defeat', 'no', 'not', 'never', 'nothing', 'none', 'worst', 'worse']);
    const words =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[112]++, this.tokenize(text.toLowerCase()));
    let positiveScore =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[113]++, 0);
    let negativeScore =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[114]++, 0);
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[115]++;
    words.forEach(word => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[24]++;
      cov_zw8ezz7p8().s[116]++;
      if (positiveWords.includes(word)) {
        /* istanbul ignore next */
        cov_zw8ezz7p8().b[27][0]++;
        cov_zw8ezz7p8().s[117]++;
        positiveScore++;
      } else {
        /* istanbul ignore next */
        cov_zw8ezz7p8().b[27][1]++;
        cov_zw8ezz7p8().s[118]++;
        if (negativeWords.includes(word)) {
          /* istanbul ignore next */
          cov_zw8ezz7p8().b[28][0]++;
          cov_zw8ezz7p8().s[119]++;
          negativeScore++;
        } else
        /* istanbul ignore next */
        {
          cov_zw8ezz7p8().b[28][1]++;
        }
      }
    });
    const totalWords =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[120]++, words.length);
    const netScore =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[121]++, (positiveScore - negativeScore) / Math.max(1, totalWords));
    let label;
    let score;
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[122]++;
    if (netScore > 0.1) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[29][0]++;
      cov_zw8ezz7p8().s[123]++;
      label = 'positive';
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[124]++;
      score = Math.min(1, netScore * 5);
    } else {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[29][1]++;
      cov_zw8ezz7p8().s[125]++;
      if (netScore < -0.1) {
        /* istanbul ignore next */
        cov_zw8ezz7p8().b[30][0]++;
        cov_zw8ezz7p8().s[126]++;
        label = 'negative';
        /* istanbul ignore next */
        cov_zw8ezz7p8().s[127]++;
        score = Math.min(1, Math.abs(netScore) * 5);
      } else {
        /* istanbul ignore next */
        cov_zw8ezz7p8().b[30][1]++;
        cov_zw8ezz7p8().s[128]++;
        label = 'neutral';
        /* istanbul ignore next */
        cov_zw8ezz7p8().s[129]++;
        score = 0.5;
      }
    }
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[130]++;
    return {
      label,
      score,
      details: {
        positive: positiveScore,
        negative: negativeScore,
        neutral: totalWords - positiveScore - negativeScore,
        netScore
      }
    };
  }
  /**
   * Simple language detection using common words
   */
  detectLanguageSimple(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[25]++;
    const languageKeywords =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[131]++, {
      'en': ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that', 'it', 'with', 'for', 'as', 'was', 'on', 'are'],
      'es': ['el', 'la', 'de', 'que', 'y', 'es', 'en', 'un', 'se', 'no', 'te', 'lo', 'le', 'da', 'su'],
      'fr': ['le', 'de', 'et', 'à', 'un', 'il', 'être', 'et', 'en', 'avoir', 'que', 'pour', 'dans', 'ce', 'son'],
      'de': ['der', 'die', 'und', 'in', 'den', 'von', 'zu', 'das', 'mit', 'sich', 'des', 'auf', 'für', 'ist', 'im'],
      'it': ['il', 'di', 'che', 'e', 'la', 'per', 'un', 'in', 'con', 'del', 'da', 'a', 'al', 'le', 'si'],
      'pt': ['o', 'de', 'que', 'e', 'do', 'da', 'em', 'um', 'para', 'é', 'com', 'não', 'uma', 'os', 'no'],
      'ru': ['в', 'и', 'не', 'на', 'я', 'быть', 'то', 'он', 'оно', 'как', 'с', 'а', 'но', 'за', 'по'],
      'zh': ['的', '是', '在', '了', '和', '有', '一', '我', '不', '你', '他', '这', '个', '人', '来']
    });
    const words =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[132]++, this.tokenize(text.toLowerCase()));
    const scores =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[133]++, {});
    // Calculate scores for each language
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[134]++;
    Object.entries(languageKeywords).forEach(([lang, keywords]) => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[26]++;
      let score =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[135]++, 0);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[136]++;
      words.forEach(word => {
        /* istanbul ignore next */
        cov_zw8ezz7p8().f[27]++;
        cov_zw8ezz7p8().s[137]++;
        if (keywords.includes(word)) {
          /* istanbul ignore next */
          cov_zw8ezz7p8().b[31][0]++;
          cov_zw8ezz7p8().s[138]++;
          score++;
        } else
        /* istanbul ignore next */
        {
          cov_zw8ezz7p8().b[31][1]++;
        }
      });
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[139]++;
      scores[lang] = score / Math.max(1, words.length);
    });
    // Find the language with highest score
    const sortedLanguages =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[140]++, Object.entries(scores).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[28]++;
      cov_zw8ezz7p8().s[141]++;
      return b - a;
    }));
    const [topLanguage, topScore] =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[142]++, sortedLanguages[0]);
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[143]++;
    return {
      language: topLanguage,
      confidence: Math.min(1, topScore * 10),
      alternatives: sortedLanguages.slice(1, 4).map(([lang, score]) => {
        /* istanbul ignore next */
        cov_zw8ezz7p8().f[29]++;
        cov_zw8ezz7p8().s[144]++;
        return {
          language: lang,
          confidence: Math.min(1, score * 10)
        };
      })
    };
  }
  /**
   * Simple toxicity detection using keyword matching
   */
  detectToxicitySimple(text) {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[30]++;
    const toxicKeywords =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[145]++, {
      profanity: ['damn', 'hell', 'crap', 'stupid', 'idiot', 'moron', 'dumb'],
      harassment: ['hate', 'kill', 'die', 'destroy', 'hurt', 'harm', 'attack'],
      threats: ['threat', 'threaten', 'violence', 'violent', 'dangerous', 'weapon'],
      discrimination: ['racist', 'sexist', 'bigot', 'discrimination', 'prejudice'],
      spam: ['spam', 'advertisement', 'promotion', 'click', 'buy', 'sale', 'offer']
    });
    const words =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[146]++, this.tokenize(text.toLowerCase()));
    const categoryScores =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[147]++, {});
    // Calculate scores for each toxicity category
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[148]++;
    Object.entries(toxicKeywords).forEach(([category, keywords]) => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[31]++;
      let score =
      /* istanbul ignore next */
      (cov_zw8ezz7p8().s[149]++, 0);
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[150]++;
      words.forEach(word => {
        /* istanbul ignore next */
        cov_zw8ezz7p8().f[32]++;
        cov_zw8ezz7p8().s[151]++;
        if (keywords.includes(word)) {
          /* istanbul ignore next */
          cov_zw8ezz7p8().b[32][0]++;
          cov_zw8ezz7p8().s[152]++;
          score++;
        } else
        /* istanbul ignore next */
        {
          cov_zw8ezz7p8().b[32][1]++;
        }
      });
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[153]++;
      categoryScores[category] = score / Math.max(1, words.length);
    });
    // Calculate overall toxicity score
    const overallScore =
    /* istanbul ignore next */
    (cov_zw8ezz7p8().s[154]++, Object.values(categoryScores).reduce((sum, score) => {
      /* istanbul ignore next */
      cov_zw8ezz7p8().f[33]++;
      cov_zw8ezz7p8().s[155]++;
      return sum + score;
    }, 0));
    /* istanbul ignore next */
    cov_zw8ezz7p8().s[156]++;
    return {
      score: Math.min(1, overallScore * 2),
      categories: categoryScores,
      threshold: 0.3
    };
  }
  /**
   * Clean up resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_zw8ezz7p8().f[34]++;
    cov_zw8ezz7p8().s[157]++;
    if (this.model) {
      /* istanbul ignore next */
      cov_zw8ezz7p8().b[33][0]++;
      cov_zw8ezz7p8().s[158]++;
      this.model.dispose();
      /* istanbul ignore next */
      cov_zw8ezz7p8().s[159]++;
      this.model = null;
    } else
    /* istanbul ignore next */
    {
      cov_zw8ezz7p8().b[33][1]++;
    }
    cov_zw8ezz7p8().s[160]++;
    this.initialized = false;
  }
}
/* istanbul ignore next */
cov_zw8ezz7p8().s[161]++;
exports.SemanticSimilarityValidator = SemanticSimilarityValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZiIsImNvdl96dzhleno3cDgiLCJzIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsIlNlbWFudGljU2ltaWxhcml0eVZhbGlkYXRvciIsImNvbnN0cnVjdG9yIiwiZiIsIm1vZGVsIiwibW9kZWxOYW1lIiwiaW5pdGlhbGl6ZWQiLCJzZXRCYWNrZW5kIiwiaW5pdGlhbGl6ZSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImNvbXB1dGVTaW1pbGFyaXR5IiwidGV4dDEiLCJ0ZXh0MiIsImIiLCJFcnJvciIsInNpbWlsYXJpdHkiLCJjb21wdXRlVGV4dFNpbWlsYXJpdHkiLCJhbmFseXplU2VudGltZW50IiwidGV4dCIsInNlbnRpbWVudCIsImFuYWx5emVTZW50aW1lbnRTaW1wbGUiLCJkZXRlY3RMYW5ndWFnZSIsImxhbmd1YWdlIiwiZGV0ZWN0TGFuZ3VhZ2VTaW1wbGUiLCJkZXRlY3RUb3hpY2l0eSIsInRveGljaXR5IiwiZGV0ZWN0VG94aWNpdHlTaW1wbGUiLCJnZXRNb2RlbE5hbWUiLCJ0b2tlbnMxIiwidG9rZW5pemUiLCJ0b0xvd2VyQ2FzZSIsInRva2VuczIiLCJ2b2NhYnVsYXJ5IiwiQXJyYXkiLCJmcm9tIiwiU2V0IiwidmVjdG9yMSIsImNyZWF0ZVRGSURGVmVjdG9yIiwidmVjdG9yMiIsImNvc2luZVNpbWlsYXJpdHkiLCJNYXRoIiwibWF4IiwibWluIiwicmVwbGFjZSIsInNwbGl0IiwiZmlsdGVyIiwidG9rZW4iLCJsZW5ndGgiLCJ0b2tlbnMiLCJ2ZWN0b3IiLCJmaWxsIiwidG9rZW5Db3VudHMiLCJNYXAiLCJmb3JFYWNoIiwic2V0IiwiZ2V0Iiwid29yZCIsImluZGV4IiwiaWRmIiwiaGFzIiwiZG90UHJvZHVjdCIsIm5vcm0xIiwibm9ybTIiLCJpIiwibWFnbml0dWRlMSIsInNxcnQiLCJtYWduaXR1ZGUyIiwicG9zaXRpdmVXb3JkcyIsIm5lZ2F0aXZlV29yZHMiLCJ3b3JkcyIsInBvc2l0aXZlU2NvcmUiLCJuZWdhdGl2ZVNjb3JlIiwiaW5jbHVkZXMiLCJ0b3RhbFdvcmRzIiwibmV0U2NvcmUiLCJsYWJlbCIsInNjb3JlIiwiYWJzIiwiZGV0YWlscyIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJuZXV0cmFsIiwibGFuZ3VhZ2VLZXl3b3JkcyIsInNjb3JlcyIsIk9iamVjdCIsImVudHJpZXMiLCJsYW5nIiwia2V5d29yZHMiLCJzb3J0ZWRMYW5ndWFnZXMiLCJzb3J0IiwiYSIsInRvcExhbmd1YWdlIiwidG9wU2NvcmUiLCJjb25maWRlbmNlIiwiYWx0ZXJuYXRpdmVzIiwic2xpY2UiLCJtYXAiLCJ0b3hpY0tleXdvcmRzIiwicHJvZmFuaXR5IiwiaGFyYXNzbWVudCIsInRocmVhdHMiLCJkaXNjcmltaW5hdGlvbiIsInNwYW0iLCJjYXRlZ29yeVNjb3JlcyIsImNhdGVnb3J5Iiwib3ZlcmFsbFNjb3JlIiwidmFsdWVzIiwicmVkdWNlIiwic3VtIiwiY2F0ZWdvcmllcyIsInRocmVzaG9sZCIsImNsZWFudXAiLCJkaXNwb3NlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy9zZXJ2aWNlcy9hc3NlcnRpb25zL1NlbWFudGljU2ltaWxhcml0eVZhbGlkYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLW5vZGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpbWlsYXJpdHlSZXN1bHQge1xuICBzaW1pbGFyaXR5OiBudW1iZXI7XG4gIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgbWV0aG9kOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VudGltZW50UmVzdWx0IHtcbiAgbGFiZWw6ICdwb3NpdGl2ZScgfCAnbmVnYXRpdmUnIHwgJ25ldXRyYWwnO1xuICBzY29yZTogbnVtYmVyO1xuICBkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZVJlc3VsdCB7XG4gIGxhbmd1YWdlOiBzdHJpbmc7XG4gIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgYWx0ZXJuYXRpdmVzPzogQXJyYXk8eyBsYW5ndWFnZTogc3RyaW5nOyBjb25maWRlbmNlOiBudW1iZXIgfT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG94aWNpdHlSZXN1bHQge1xuICBzY29yZTogbnVtYmVyO1xuICBjYXRlZ29yaWVzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICB0aHJlc2hvbGQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFNlbWFudGljU2ltaWxhcml0eVZhbGlkYXRvciB7XG4gIHByaXZhdGUgbW9kZWw6IGFueSA9IG51bGw7XG4gIHByaXZhdGUgbW9kZWxOYW1lOiBzdHJpbmcgPSAndW5pdmVyc2FsLXNlbnRlbmNlLWVuY29kZXInO1xuICBwcml2YXRlIGluaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBUZW5zb3JGbG93LmpzIGJhY2tlbmRcbiAgICB0Zi5zZXRCYWNrZW5kKCdjcHUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBzZW1hbnRpYyBzaW1pbGFyaXR5IHZhbGlkYXRvclxuICAgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ0luaXRpYWxpemluZyBTZW1hbnRpY1NpbWlsYXJpdHlWYWxpZGF0b3IuLi4nKTtcbiAgICAgIFxuICAgICAgLy8gRm9yIG5vdywgd2UnbGwgdXNlIGEgc2ltcGxlIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyBJbiBhIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQsIHlvdSdkIGxvYWQgYWN0dWFsIHRyYW5zZm9ybWVyIG1vZGVsc1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgU2VtYW50aWNTaW1pbGFyaXR5VmFsaWRhdG9yIGluaXRpYWxpemVkIHdpdGggZmFsbGJhY2sgaW1wbGVtZW50YXRpb24nKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBpbml0aWFsaXplIFNlbWFudGljU2ltaWxhcml0eVZhbGlkYXRvcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSBzZW1hbnRpYyBzaW1pbGFyaXR5IGJldHdlZW4gdHdvIHRleHRzXG4gICAqL1xuICBhc3luYyBjb21wdXRlU2ltaWxhcml0eSh0ZXh0MTogc3RyaW5nLCB0ZXh0Mjogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VtYW50aWNTaW1pbGFyaXR5VmFsaWRhdG9yIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBGYWxsYmFjayBpbXBsZW1lbnRhdGlvbiB1c2luZyBzaW1wbGUgdGV4dCBzaW1pbGFyaXR5XG4gICAgICAvLyBJbiBwcm9kdWN0aW9uLCB0aGlzIHdvdWxkIHVzZSBzZW50ZW5jZSBlbWJlZGRpbmdzXG4gICAgICBjb25zdCBzaW1pbGFyaXR5ID0gYXdhaXQgdGhpcy5jb21wdXRlVGV4dFNpbWlsYXJpdHkodGV4dDEsIHRleHQyKTtcbiAgICAgIHJldHVybiBzaW1pbGFyaXR5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb21wdXRpbmcgc2ltaWxhcml0eTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQW5hbHl6ZSBzZW50aW1lbnQgb2YgdGV4dFxuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZVNlbnRpbWVudCh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPFNlbnRpbWVudFJlc3VsdD4ge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZW1hbnRpY1NpbWlsYXJpdHlWYWxpZGF0b3Igbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFNpbXBsZSBzZW50aW1lbnQgYW5hbHlzaXMgYmFzZWQgb24ga2V5d29yZHNcbiAgICAgIGNvbnN0IHNlbnRpbWVudCA9IHRoaXMuYW5hbHl6ZVNlbnRpbWVudFNpbXBsZSh0ZXh0KTtcbiAgICAgIHJldHVybiBzZW50aW1lbnQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFuYWx5emluZyBzZW50aW1lbnQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERldGVjdCBsYW5ndWFnZSBvZiB0ZXh0XG4gICAqL1xuICBhc3luYyBkZXRlY3RMYW5ndWFnZSh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPExhbmd1YWdlUmVzdWx0PiB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbWFudGljU2ltaWxhcml0eVZhbGlkYXRvciBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gU2ltcGxlIGxhbmd1YWdlIGRldGVjdGlvbiBiYXNlZCBvbiBjb21tb24gd29yZHNcbiAgICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5kZXRlY3RMYW5ndWFnZVNpbXBsZSh0ZXh0KTtcbiAgICAgIHJldHVybiBsYW5ndWFnZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGV0ZWN0aW5nIGxhbmd1YWdlOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3QgdG94aWNpdHkgaW4gdGV4dFxuICAgKi9cbiAgYXN5bmMgZGV0ZWN0VG94aWNpdHkodGV4dDogc3RyaW5nKTogUHJvbWlzZTxUb3hpY2l0eVJlc3VsdD4ge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZW1hbnRpY1NpbWlsYXJpdHlWYWxpZGF0b3Igbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFNpbXBsZSB0b3hpY2l0eSBkZXRlY3Rpb24gYmFzZWQgb24ga2V5d29yZCBtYXRjaGluZ1xuICAgICAgY29uc3QgdG94aWNpdHkgPSB0aGlzLmRldGVjdFRveGljaXR5U2ltcGxlKHRleHQpO1xuICAgICAgcmV0dXJuIHRveGljaXR5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZXRlY3RpbmcgdG94aWNpdHk6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbW9kZWwgbmFtZSBiZWluZyB1c2VkXG4gICAqL1xuICBnZXRNb2RlbE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbE5hbWU7XG4gIH1cblxuICAvKipcbiAgICogRmFsbGJhY2sgdGV4dCBzaW1pbGFyaXR5IHVzaW5nIGNvc2luZSBzaW1pbGFyaXR5IG9mIFRGLUlERiB2ZWN0b3JzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNvbXB1dGVUZXh0U2ltaWxhcml0eSh0ZXh0MTogc3RyaW5nLCB0ZXh0Mjogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAvLyBOb3JtYWxpemUgYW5kIHRva2VuaXplIHRleHRzXG4gICAgY29uc3QgdG9rZW5zMSA9IHRoaXMudG9rZW5pemUodGV4dDEudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3QgdG9rZW5zMiA9IHRoaXMudG9rZW5pemUodGV4dDIudG9Mb3dlckNhc2UoKSk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIHZvY2FidWxhcnlcbiAgICBjb25zdCB2b2NhYnVsYXJ5ID0gQXJyYXkuZnJvbShuZXcgU2V0KFsuLi50b2tlbnMxLCAuLi50b2tlbnMyXSkpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBURi1JREYgdmVjdG9yc1xuICAgIGNvbnN0IHZlY3RvcjEgPSB0aGlzLmNyZWF0ZVRGSURGVmVjdG9yKHRva2VuczEsIHZvY2FidWxhcnkpO1xuICAgIGNvbnN0IHZlY3RvcjIgPSB0aGlzLmNyZWF0ZVRGSURGVmVjdG9yKHRva2VuczIsIHZvY2FidWxhcnkpO1xuICAgIFxuICAgIC8vIENvbXB1dGUgY29zaW5lIHNpbWlsYXJpdHlcbiAgICBjb25zdCBzaW1pbGFyaXR5ID0gdGhpcy5jb3NpbmVTaW1pbGFyaXR5KHZlY3RvcjEsIHZlY3RvcjIpO1xuICAgIFxuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBzaW1pbGFyaXR5KSk7XG4gIH1cblxuICAvKipcbiAgICogU2ltcGxlIHRva2VuaXphdGlvblxuICAgKi9cbiAgcHJpdmF0ZSB0b2tlbml6ZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRleHRcbiAgICAgIC5yZXBsYWNlKC9bXlxcd1xcc10vZywgJyAnKVxuICAgICAgLnNwbGl0KC9cXHMrLylcbiAgICAgIC5maWx0ZXIodG9rZW4gPT4gdG9rZW4ubGVuZ3RoID4gMCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIFRGLUlERiB2ZWN0b3IgZm9yIHRva2Vuc1xuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVURklERlZlY3Rvcih0b2tlbnM6IHN0cmluZ1tdLCB2b2NhYnVsYXJ5OiBzdHJpbmdbXSk6IG51bWJlcltdIHtcbiAgICBjb25zdCB2ZWN0b3IgPSBuZXcgQXJyYXkodm9jYWJ1bGFyeS5sZW5ndGgpLmZpbGwoMCk7XG4gICAgY29uc3QgdG9rZW5Db3VudHMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICAgIFxuICAgIC8vIENvdW50IHRva2VuIGZyZXF1ZW5jaWVzXG4gICAgdG9rZW5zLmZvckVhY2godG9rZW4gPT4ge1xuICAgICAgdG9rZW5Db3VudHMuc2V0KHRva2VuLCAodG9rZW5Db3VudHMuZ2V0KHRva2VuKSB8fCAwKSArIDEpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBURi1JREZcbiAgICB2b2NhYnVsYXJ5LmZvckVhY2goKHdvcmQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCB0ZiA9ICh0b2tlbkNvdW50cy5nZXQod29yZCkgfHwgMCkgLyB0b2tlbnMubGVuZ3RoO1xuICAgICAgLy8gU2ltcGxpZmllZCBJREYgKGluIHByb2R1Y3Rpb24sIHVzZSBwcm9wZXIgY29ycHVzLWJhc2VkIElERilcbiAgICAgIGNvbnN0IGlkZiA9IE1hdGgubG9nKHZvY2FidWxhcnkubGVuZ3RoIC8gKDEgKyAodG9rZW5Db3VudHMuaGFzKHdvcmQpID8gMSA6IDApKSk7XG4gICAgICB2ZWN0b3JbaW5kZXhdID0gdGYgKiBpZGY7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHZlY3RvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlIGNvc2luZSBzaW1pbGFyaXR5IGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICovXG4gIHByaXZhdGUgY29zaW5lU2ltaWxhcml0eSh2ZWN0b3IxOiBudW1iZXJbXSwgdmVjdG9yMjogbnVtYmVyW10pOiBudW1iZXIge1xuICAgIGlmICh2ZWN0b3IxLmxlbmd0aCAhPT0gdmVjdG9yMi5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVmVjdG9ycyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoJyk7XG4gICAgfVxuICAgIFxuICAgIGxldCBkb3RQcm9kdWN0ID0gMDtcbiAgICBsZXQgbm9ybTEgPSAwO1xuICAgIGxldCBub3JtMiA9IDA7XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZWN0b3IxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkb3RQcm9kdWN0ICs9IHZlY3RvcjFbaV0gKiB2ZWN0b3IyW2ldO1xuICAgICAgbm9ybTEgKz0gdmVjdG9yMVtpXSAqIHZlY3RvcjFbaV07XG4gICAgICBub3JtMiArPSB2ZWN0b3IyW2ldICogdmVjdG9yMltpXTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgbWFnbml0dWRlMSA9IE1hdGguc3FydChub3JtMSk7XG4gICAgY29uc3QgbWFnbml0dWRlMiA9IE1hdGguc3FydChub3JtMik7XG4gICAgXG4gICAgaWYgKG1hZ25pdHVkZTEgPT09IDAgfHwgbWFnbml0dWRlMiA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBkb3RQcm9kdWN0IC8gKG1hZ25pdHVkZTEgKiBtYWduaXR1ZGUyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW1wbGUgc2VudGltZW50IGFuYWx5c2lzIHVzaW5nIGtleXdvcmQgbWF0Y2hpbmdcbiAgICovXG4gIHByaXZhdGUgYW5hbHl6ZVNlbnRpbWVudFNpbXBsZSh0ZXh0OiBzdHJpbmcpOiBTZW50aW1lbnRSZXN1bHQge1xuICAgIGNvbnN0IHBvc2l0aXZlV29yZHMgPSBbXG4gICAgICAnZ29vZCcsICdncmVhdCcsICdleGNlbGxlbnQnLCAnYW1hemluZycsICd3b25kZXJmdWwnLCAnZmFudGFzdGljJywgJ2F3ZXNvbWUnLFxuICAgICAgJ2xvdmUnLCAnbGlrZScsICdlbmpveScsICdoYXBweScsICdwbGVhc2VkJywgJ3NhdGlzZmllZCcsICdwZXJmZWN0JyxcbiAgICAgICdiZXN0JywgJ2JldHRlcicsICdicmlsbGlhbnQnLCAnb3V0c3RhbmRpbmcnLCAnc3VwZXJiJywgJ21hZ25pZmljZW50JyxcbiAgICAgICd5ZXMnLCAnY29ycmVjdCcsICdyaWdodCcsICdhY2N1cmF0ZScsICdzdWNjZXNzZnVsJywgJ3dpbicsICd2aWN0b3J5J1xuICAgIF07XG4gICAgXG4gICAgY29uc3QgbmVnYXRpdmVXb3JkcyA9IFtcbiAgICAgICdiYWQnLCAndGVycmlibGUnLCAnYXdmdWwnLCAnaG9ycmlibGUnLCAnZGlzZ3VzdGluZycsICdoYXRlJywgJ2Rpc2xpa2UnLFxuICAgICAgJ2FuZ3J5JywgJ3NhZCcsICdkaXNhcHBvaW50ZWQnLCAnZnJ1c3RyYXRlZCcsICdhbm5veWVkJywgJ3Vwc2V0JyxcbiAgICAgICd3cm9uZycsICdpbmNvcnJlY3QnLCAnZXJyb3InLCAnZmFpbCcsICdmYWlsdXJlJywgJ2xvc3MnLCAnZGVmZWF0JyxcbiAgICAgICdubycsICdub3QnLCAnbmV2ZXInLCAnbm90aGluZycsICdub25lJywgJ3dvcnN0JywgJ3dvcnNlJ1xuICAgIF07XG4gICAgXG4gICAgY29uc3Qgd29yZHMgPSB0aGlzLnRva2VuaXplKHRleHQudG9Mb3dlckNhc2UoKSk7XG4gICAgXG4gICAgbGV0IHBvc2l0aXZlU2NvcmUgPSAwO1xuICAgIGxldCBuZWdhdGl2ZVNjb3JlID0gMDtcbiAgICBcbiAgICB3b3Jkcy5mb3JFYWNoKHdvcmQgPT4ge1xuICAgICAgaWYgKHBvc2l0aXZlV29yZHMuaW5jbHVkZXMod29yZCkpIHtcbiAgICAgICAgcG9zaXRpdmVTY29yZSsrO1xuICAgICAgfSBlbHNlIGlmIChuZWdhdGl2ZVdvcmRzLmluY2x1ZGVzKHdvcmQpKSB7XG4gICAgICAgIG5lZ2F0aXZlU2NvcmUrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCB0b3RhbFdvcmRzID0gd29yZHMubGVuZ3RoO1xuICAgIGNvbnN0IG5ldFNjb3JlID0gKHBvc2l0aXZlU2NvcmUgLSBuZWdhdGl2ZVNjb3JlKSAvIE1hdGgubWF4KDEsIHRvdGFsV29yZHMpO1xuICAgIFxuICAgIGxldCBsYWJlbDogJ3Bvc2l0aXZlJyB8ICduZWdhdGl2ZScgfCAnbmV1dHJhbCc7XG4gICAgbGV0IHNjb3JlOiBudW1iZXI7XG4gICAgXG4gICAgaWYgKG5ldFNjb3JlID4gMC4xKSB7XG4gICAgICBsYWJlbCA9ICdwb3NpdGl2ZSc7XG4gICAgICBzY29yZSA9IE1hdGgubWluKDEsIG5ldFNjb3JlICogNSk7XG4gICAgfSBlbHNlIGlmIChuZXRTY29yZSA8IC0wLjEpIHtcbiAgICAgIGxhYmVsID0gJ25lZ2F0aXZlJztcbiAgICAgIHNjb3JlID0gTWF0aC5taW4oMSwgTWF0aC5hYnMobmV0U2NvcmUpICogNSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhYmVsID0gJ25ldXRyYWwnO1xuICAgICAgc2NvcmUgPSAwLjU7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBsYWJlbCxcbiAgICAgIHNjb3JlLFxuICAgICAgZGV0YWlsczoge1xuICAgICAgICBwb3NpdGl2ZTogcG9zaXRpdmVTY29yZSxcbiAgICAgICAgbmVnYXRpdmU6IG5lZ2F0aXZlU2NvcmUsXG4gICAgICAgIG5ldXRyYWw6IHRvdGFsV29yZHMgLSBwb3NpdGl2ZVNjb3JlIC0gbmVnYXRpdmVTY29yZSxcbiAgICAgICAgbmV0U2NvcmVcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBsYW5ndWFnZSBkZXRlY3Rpb24gdXNpbmcgY29tbW9uIHdvcmRzXG4gICAqL1xuICBwcml2YXRlIGRldGVjdExhbmd1YWdlU2ltcGxlKHRleHQ6IHN0cmluZyk6IExhbmd1YWdlUmVzdWx0IHtcbiAgICBjb25zdCBsYW5ndWFnZUtleXdvcmRzID0ge1xuICAgICAgJ2VuJzogWyd0aGUnLCAnYW5kJywgJ2lzJywgJ2luJywgJ3RvJywgJ29mJywgJ2EnLCAndGhhdCcsICdpdCcsICd3aXRoJywgJ2ZvcicsICdhcycsICd3YXMnLCAnb24nLCAnYXJlJ10sXG4gICAgICAnZXMnOiBbJ2VsJywgJ2xhJywgJ2RlJywgJ3F1ZScsICd5JywgJ2VzJywgJ2VuJywgJ3VuJywgJ3NlJywgJ25vJywgJ3RlJywgJ2xvJywgJ2xlJywgJ2RhJywgJ3N1J10sXG4gICAgICAnZnInOiBbJ2xlJywgJ2RlJywgJ2V0JywgJ8OgJywgJ3VuJywgJ2lsJywgJ8OqdHJlJywgJ2V0JywgJ2VuJywgJ2F2b2lyJywgJ3F1ZScsICdwb3VyJywgJ2RhbnMnLCAnY2UnLCAnc29uJ10sXG4gICAgICAnZGUnOiBbJ2RlcicsICdkaWUnLCAndW5kJywgJ2luJywgJ2RlbicsICd2b24nLCAnenUnLCAnZGFzJywgJ21pdCcsICdzaWNoJywgJ2RlcycsICdhdWYnLCAnZsO8cicsICdpc3QnLCAnaW0nXSxcbiAgICAgICdpdCc6IFsnaWwnLCAnZGknLCAnY2hlJywgJ2UnLCAnbGEnLCAncGVyJywgJ3VuJywgJ2luJywgJ2NvbicsICdkZWwnLCAnZGEnLCAnYScsICdhbCcsICdsZScsICdzaSddLFxuICAgICAgJ3B0JzogWydvJywgJ2RlJywgJ3F1ZScsICdlJywgJ2RvJywgJ2RhJywgJ2VtJywgJ3VtJywgJ3BhcmEnLCAnw6knLCAnY29tJywgJ27Do28nLCAndW1hJywgJ29zJywgJ25vJ10sXG4gICAgICAncnUnOiBbJ9CyJywgJ9C4JywgJ9C90LUnLCAn0L3QsCcsICfRjycsICfQsdGL0YLRjCcsICfRgtC+JywgJ9C+0L0nLCAn0L7QvdC+JywgJ9C60LDQuicsICfRgScsICfQsCcsICfQvdC+JywgJ9C30LAnLCAn0L/QviddLFxuICAgICAgJ3poJzogWyfnmoQnLCAn5pivJywgJ+WcqCcsICfkuoYnLCAn5ZKMJywgJ+aciScsICfkuIAnLCAn5oiRJywgJ+S4jScsICfkvaAnLCAn5LuWJywgJ+i/mScsICfkuKonLCAn5Lq6JywgJ+adpSddXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB3b3JkcyA9IHRoaXMudG9rZW5pemUodGV4dC50b0xvd2VyQ2FzZSgpKTtcbiAgICBjb25zdCBzY29yZXM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgc2NvcmVzIGZvciBlYWNoIGxhbmd1YWdlXG4gICAgT2JqZWN0LmVudHJpZXMobGFuZ3VhZ2VLZXl3b3JkcykuZm9yRWFjaCgoW2xhbmcsIGtleXdvcmRzXSkgPT4ge1xuICAgICAgbGV0IHNjb3JlID0gMDtcbiAgICAgIHdvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgICAgIGlmIChrZXl3b3Jkcy5pbmNsdWRlcyh3b3JkKSkge1xuICAgICAgICAgIHNjb3JlKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2NvcmVzW2xhbmddID0gc2NvcmUgLyBNYXRoLm1heCgxLCB3b3Jkcy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEZpbmQgdGhlIGxhbmd1YWdlIHdpdGggaGlnaGVzdCBzY29yZVxuICAgIGNvbnN0IHNvcnRlZExhbmd1YWdlcyA9IE9iamVjdC5lbnRyaWVzKHNjb3JlcylcbiAgICAgIC5zb3J0KChbLCBhXSwgWywgYl0pID0+IGIgLSBhKTtcbiAgICBcbiAgICBjb25zdCBbdG9wTGFuZ3VhZ2UsIHRvcFNjb3JlXSA9IHNvcnRlZExhbmd1YWdlc1swXTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgbGFuZ3VhZ2U6IHRvcExhbmd1YWdlLFxuICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4oMSwgdG9wU2NvcmUgKiAxMCksXG4gICAgICBhbHRlcm5hdGl2ZXM6IHNvcnRlZExhbmd1YWdlcy5zbGljZSgxLCA0KS5tYXAoKFtsYW5nLCBzY29yZV0pID0+ICh7XG4gICAgICAgIGxhbmd1YWdlOiBsYW5nLFxuICAgICAgICBjb25maWRlbmNlOiBNYXRoLm1pbigxLCBzY29yZSAqIDEwKVxuICAgICAgfSkpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW1wbGUgdG94aWNpdHkgZGV0ZWN0aW9uIHVzaW5nIGtleXdvcmQgbWF0Y2hpbmdcbiAgICovXG4gIHByaXZhdGUgZGV0ZWN0VG94aWNpdHlTaW1wbGUodGV4dDogc3RyaW5nKTogVG94aWNpdHlSZXN1bHQge1xuICAgIGNvbnN0IHRveGljS2V5d29yZHMgPSB7XG4gICAgICBwcm9mYW5pdHk6IFsnZGFtbicsICdoZWxsJywgJ2NyYXAnLCAnc3R1cGlkJywgJ2lkaW90JywgJ21vcm9uJywgJ2R1bWInXSxcbiAgICAgIGhhcmFzc21lbnQ6IFsnaGF0ZScsICdraWxsJywgJ2RpZScsICdkZXN0cm95JywgJ2h1cnQnLCAnaGFybScsICdhdHRhY2snXSxcbiAgICAgIHRocmVhdHM6IFsndGhyZWF0JywgJ3RocmVhdGVuJywgJ3Zpb2xlbmNlJywgJ3Zpb2xlbnQnLCAnZGFuZ2Vyb3VzJywgJ3dlYXBvbiddLFxuICAgICAgZGlzY3JpbWluYXRpb246IFsncmFjaXN0JywgJ3NleGlzdCcsICdiaWdvdCcsICdkaXNjcmltaW5hdGlvbicsICdwcmVqdWRpY2UnXSxcbiAgICAgIHNwYW06IFsnc3BhbScsICdhZHZlcnRpc2VtZW50JywgJ3Byb21vdGlvbicsICdjbGljaycsICdidXknLCAnc2FsZScsICdvZmZlciddXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB3b3JkcyA9IHRoaXMudG9rZW5pemUodGV4dC50b0xvd2VyQ2FzZSgpKTtcbiAgICBjb25zdCBjYXRlZ29yeVNjb3JlczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBzY29yZXMgZm9yIGVhY2ggdG94aWNpdHkgY2F0ZWdvcnlcbiAgICBPYmplY3QuZW50cmllcyh0b3hpY0tleXdvcmRzKS5mb3JFYWNoKChbY2F0ZWdvcnksIGtleXdvcmRzXSkgPT4ge1xuICAgICAgbGV0IHNjb3JlID0gMDtcbiAgICAgIHdvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgICAgIGlmIChrZXl3b3Jkcy5pbmNsdWRlcyh3b3JkKSkge1xuICAgICAgICAgIHNjb3JlKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2F0ZWdvcnlTY29yZXNbY2F0ZWdvcnldID0gc2NvcmUgLyBNYXRoLm1heCgxLCB3b3Jkcy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBvdmVyYWxsIHRveGljaXR5IHNjb3JlXG4gICAgY29uc3Qgb3ZlcmFsbFNjb3JlID0gT2JqZWN0LnZhbHVlcyhjYXRlZ29yeVNjb3JlcykucmVkdWNlKChzdW0sIHNjb3JlKSA9PiBzdW0gKyBzY29yZSwgMCk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3JlOiBNYXRoLm1pbigxLCBvdmVyYWxsU2NvcmUgKiAyKSxcbiAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3J5U2NvcmVzLFxuICAgICAgdGhyZXNob2xkOiAwLjNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIHVwIHJlc291cmNlc1xuICAgKi9cbiAgYXN5bmMgY2xlYW51cCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5tb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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