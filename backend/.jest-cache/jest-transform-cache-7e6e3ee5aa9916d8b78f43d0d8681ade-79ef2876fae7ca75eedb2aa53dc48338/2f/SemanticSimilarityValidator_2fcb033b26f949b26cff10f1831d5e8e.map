{"version":3,"names":["tf","cov_zw8ezz7p8","s","__importStar","require","SemanticSimilarityValidator","constructor","f","model","modelName","initialized","setBackend","initialize","console","log","error","computeSimilarity","text1","text2","b","Error","similarity","computeTextSimilarity","analyzeSentiment","text","sentiment","analyzeSentimentSimple","detectLanguage","language","detectLanguageSimple","detectToxicity","toxicity","detectToxicitySimple","getModelName","tokens1","tokenize","toLowerCase","tokens2","vocabulary","Array","from","Set","vector1","createTFIDFVector","vector2","cosineSimilarity","Math","max","min","replace","split","filter","token","length","tokens","vector","fill","tokenCounts","Map","forEach","set","get","word","index","idf","has","dotProduct","norm1","norm2","i","magnitude1","sqrt","magnitude2","positiveWords","negativeWords","words","positiveScore","negativeScore","includes","totalWords","netScore","label","score","abs","details","positive","negative","neutral","languageKeywords","scores","Object","entries","lang","keywords","sortedLanguages","sort","a","topLanguage","topScore","confidence","alternatives","slice","map","toxicKeywords","profanity","harassment","threats","discrimination","spam","categoryScores","category","overallScore","values","reduce","sum","categories","threshold","cleanup","dispose","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/assertions/SemanticSimilarityValidator.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-node';\n\nexport interface SimilarityResult {\n  similarity: number;\n  confidence: number;\n  method: string;\n}\n\nexport interface SentimentResult {\n  label: 'positive' | 'negative' | 'neutral';\n  score: number;\n  details?: Record<string, number>;\n}\n\nexport interface LanguageResult {\n  language: string;\n  confidence: number;\n  alternatives?: Array<{ language: string; confidence: number }>;\n}\n\nexport interface ToxicityResult {\n  score: number;\n  categories: Record<string, number>;\n  threshold: number;\n}\n\nexport class SemanticSimilarityValidator {\n  private model: any = null;\n  private modelName: string = 'universal-sentence-encoder';\n  private initialized: boolean = false;\n\n  constructor() {\n    // Initialize TensorFlow.js backend\n    tf.setBackend('cpu');\n  }\n\n  /**\n   * Initialize the semantic similarity validator\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing SemanticSimilarityValidator...');\n      \n      // For now, we'll use a simple fallback implementation\n      // In a production environment, you'd load actual transformer models\n      this.initialized = true;\n      \n      console.log('✅ SemanticSimilarityValidator initialized with fallback implementation');\n    } catch (error) {\n      console.error('❌ Failed to initialize SemanticSimilarityValidator:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Compute semantic similarity between two texts\n   */\n  async computeSimilarity(text1: string, text2: string): Promise<number> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Fallback implementation using simple text similarity\n      // In production, this would use sentence embeddings\n      const similarity = await this.computeTextSimilarity(text1, text2);\n      return similarity;\n    } catch (error) {\n      console.error('Error computing similarity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze sentiment of text\n   */\n  async analyzeSentiment(text: string): Promise<SentimentResult> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Simple sentiment analysis based on keywords\n      const sentiment = this.analyzeSentimentSimple(text);\n      return sentiment;\n    } catch (error) {\n      console.error('Error analyzing sentiment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Detect language of text\n   */\n  async detectLanguage(text: string): Promise<LanguageResult> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Simple language detection based on common words\n      const language = this.detectLanguageSimple(text);\n      return language;\n    } catch (error) {\n      console.error('Error detecting language:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Detect toxicity in text\n   */\n  async detectToxicity(text: string): Promise<ToxicityResult> {\n    if (!this.initialized) {\n      throw new Error('SemanticSimilarityValidator not initialized');\n    }\n\n    try {\n      // Simple toxicity detection based on keyword matching\n      const toxicity = this.detectToxicitySimple(text);\n      return toxicity;\n    } catch (error) {\n      console.error('Error detecting toxicity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the model name being used\n   */\n  getModelName(): string {\n    return this.modelName;\n  }\n\n  /**\n   * Fallback text similarity using cosine similarity of TF-IDF vectors\n   */\n  private async computeTextSimilarity(text1: string, text2: string): Promise<number> {\n    // Normalize and tokenize texts\n    const tokens1 = this.tokenize(text1.toLowerCase());\n    const tokens2 = this.tokenize(text2.toLowerCase());\n    \n    // Create vocabulary\n    const vocabulary = Array.from(new Set([...tokens1, ...tokens2]));\n    \n    // Create TF-IDF vectors\n    const vector1 = this.createTFIDFVector(tokens1, vocabulary);\n    const vector2 = this.createTFIDFVector(tokens2, vocabulary);\n    \n    // Compute cosine similarity\n    const similarity = this.cosineSimilarity(vector1, vector2);\n    \n    return Math.max(0, Math.min(1, similarity));\n  }\n\n  /**\n   * Simple tokenization\n   */\n  private tokenize(text: string): string[] {\n    return text\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(/\\s+/)\n      .filter(token => token.length > 0);\n  }\n\n  /**\n   * Create TF-IDF vector for tokens\n   */\n  private createTFIDFVector(tokens: string[], vocabulary: string[]): number[] {\n    const vector = new Array(vocabulary.length).fill(0);\n    const tokenCounts = new Map<string, number>();\n    \n    // Count token frequencies\n    tokens.forEach(token => {\n      tokenCounts.set(token, (tokenCounts.get(token) || 0) + 1);\n    });\n    \n    // Calculate TF-IDF\n    vocabulary.forEach((word, index) => {\n      const tf = (tokenCounts.get(word) || 0) / tokens.length;\n      // Simplified IDF (in production, use proper corpus-based IDF)\n      const idf = Math.log(vocabulary.length / (1 + (tokenCounts.has(word) ? 1 : 0)));\n      vector[index] = tf * idf;\n    });\n    \n    return vector;\n  }\n\n  /**\n   * Compute cosine similarity between two vectors\n   */\n  private cosineSimilarity(vector1: number[], vector2: number[]): number {\n    if (vector1.length !== vector2.length) {\n      throw new Error('Vectors must have the same length');\n    }\n    \n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n    \n    for (let i = 0; i < vector1.length; i++) {\n      dotProduct += vector1[i] * vector2[i];\n      norm1 += vector1[i] * vector1[i];\n      norm2 += vector2[i] * vector2[i];\n    }\n    \n    const magnitude1 = Math.sqrt(norm1);\n    const magnitude2 = Math.sqrt(norm2);\n    \n    if (magnitude1 === 0 || magnitude2 === 0) {\n      return 0;\n    }\n    \n    return dotProduct / (magnitude1 * magnitude2);\n  }\n\n  /**\n   * Simple sentiment analysis using keyword matching\n   */\n  private analyzeSentimentSimple(text: string): SentimentResult {\n    const positiveWords = [\n      'good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'awesome',\n      'love', 'like', 'enjoy', 'happy', 'pleased', 'satisfied', 'perfect',\n      'best', 'better', 'brilliant', 'outstanding', 'superb', 'magnificent',\n      'yes', 'correct', 'right', 'accurate', 'successful', 'win', 'victory'\n    ];\n    \n    const negativeWords = [\n      'bad', 'terrible', 'awful', 'horrible', 'disgusting', 'hate', 'dislike',\n      'angry', 'sad', 'disappointed', 'frustrated', 'annoyed', 'upset',\n      'wrong', 'incorrect', 'error', 'fail', 'failure', 'loss', 'defeat',\n      'no', 'not', 'never', 'nothing', 'none', 'worst', 'worse'\n    ];\n    \n    const words = this.tokenize(text.toLowerCase());\n    \n    let positiveScore = 0;\n    let negativeScore = 0;\n    \n    words.forEach(word => {\n      if (positiveWords.includes(word)) {\n        positiveScore++;\n      } else if (negativeWords.includes(word)) {\n        negativeScore++;\n      }\n    });\n    \n    const totalWords = words.length;\n    const netScore = (positiveScore - negativeScore) / Math.max(1, totalWords);\n    \n    let label: 'positive' | 'negative' | 'neutral';\n    let score: number;\n    \n    if (netScore > 0.1) {\n      label = 'positive';\n      score = Math.min(1, netScore * 5);\n    } else if (netScore < -0.1) {\n      label = 'negative';\n      score = Math.min(1, Math.abs(netScore) * 5);\n    } else {\n      label = 'neutral';\n      score = 0.5;\n    }\n    \n    return {\n      label,\n      score,\n      details: {\n        positive: positiveScore,\n        negative: negativeScore,\n        neutral: totalWords - positiveScore - negativeScore,\n        netScore\n      }\n    };\n  }\n\n  /**\n   * Simple language detection using common words\n   */\n  private detectLanguageSimple(text: string): LanguageResult {\n    const languageKeywords = {\n      'en': ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that', 'it', 'with', 'for', 'as', 'was', 'on', 'are'],\n      'es': ['el', 'la', 'de', 'que', 'y', 'es', 'en', 'un', 'se', 'no', 'te', 'lo', 'le', 'da', 'su'],\n      'fr': ['le', 'de', 'et', 'à', 'un', 'il', 'être', 'et', 'en', 'avoir', 'que', 'pour', 'dans', 'ce', 'son'],\n      'de': ['der', 'die', 'und', 'in', 'den', 'von', 'zu', 'das', 'mit', 'sich', 'des', 'auf', 'für', 'ist', 'im'],\n      'it': ['il', 'di', 'che', 'e', 'la', 'per', 'un', 'in', 'con', 'del', 'da', 'a', 'al', 'le', 'si'],\n      'pt': ['o', 'de', 'que', 'e', 'do', 'da', 'em', 'um', 'para', 'é', 'com', 'não', 'uma', 'os', 'no'],\n      'ru': ['в', 'и', 'не', 'на', 'я', 'быть', 'то', 'он', 'оно', 'как', 'с', 'а', 'но', 'за', 'по'],\n      'zh': ['的', '是', '在', '了', '和', '有', '一', '我', '不', '你', '他', '这', '个', '人', '来']\n    };\n    \n    const words = this.tokenize(text.toLowerCase());\n    const scores: Record<string, number> = {};\n    \n    // Calculate scores for each language\n    Object.entries(languageKeywords).forEach(([lang, keywords]) => {\n      let score = 0;\n      words.forEach(word => {\n        if (keywords.includes(word)) {\n          score++;\n        }\n      });\n      scores[lang] = score / Math.max(1, words.length);\n    });\n    \n    // Find the language with highest score\n    const sortedLanguages = Object.entries(scores)\n      .sort(([, a], [, b]) => b - a);\n    \n    const [topLanguage, topScore] = sortedLanguages[0];\n    \n    return {\n      language: topLanguage,\n      confidence: Math.min(1, topScore * 10),\n      alternatives: sortedLanguages.slice(1, 4).map(([lang, score]) => ({\n        language: lang,\n        confidence: Math.min(1, score * 10)\n      }))\n    };\n  }\n\n  /**\n   * Simple toxicity detection using keyword matching\n   */\n  private detectToxicitySimple(text: string): ToxicityResult {\n    const toxicKeywords = {\n      profanity: ['damn', 'hell', 'crap', 'stupid', 'idiot', 'moron', 'dumb'],\n      harassment: ['hate', 'kill', 'die', 'destroy', 'hurt', 'harm', 'attack'],\n      threats: ['threat', 'threaten', 'violence', 'violent', 'dangerous', 'weapon'],\n      discrimination: ['racist', 'sexist', 'bigot', 'discrimination', 'prejudice'],\n      spam: ['spam', 'advertisement', 'promotion', 'click', 'buy', 'sale', 'offer']\n    };\n    \n    const words = this.tokenize(text.toLowerCase());\n    const categoryScores: Record<string, number> = {};\n    \n    // Calculate scores for each toxicity category\n    Object.entries(toxicKeywords).forEach(([category, keywords]) => {\n      let score = 0;\n      words.forEach(word => {\n        if (keywords.includes(word)) {\n          score++;\n        }\n      });\n      categoryScores[category] = score / Math.max(1, words.length);\n    });\n    \n    // Calculate overall toxicity score\n    const overallScore = Object.values(categoryScores).reduce((sum, score) => sum + score, 0);\n    \n    return {\n      score: Math.min(1, overallScore * 2),\n      categories: categoryScores,\n      threshold: 0.3\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.model) {\n      this.model.dispose();\n      this.model = null;\n    }\n    this.initialized = false;\n  }\n}"],"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","ignoreList":[]}