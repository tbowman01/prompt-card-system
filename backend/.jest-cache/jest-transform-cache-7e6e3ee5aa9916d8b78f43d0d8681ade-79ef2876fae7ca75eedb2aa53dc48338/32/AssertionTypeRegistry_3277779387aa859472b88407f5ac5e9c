1b435a9b19c630de3afca92866a35950
"use strict";

/* istanbul ignore next */
function cov_lpo6rkaqm() {
  var path = "/workspaces/prompt-card-system/backend/src/services/assertions/AssertionTypeRegistry.ts";
  var hash = "c72750c6d03ff068345348780df7f66a6eabc6bf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/assertions/AssertionTypeRegistry.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 57
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "9": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 51
        }
      },
      "10": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "12": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 36
        }
      },
      "13": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 63
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 82
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 59,
          column: 7
        }
      },
      "18": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 64,
          column: 7
        }
      },
      "19": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "20": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "21": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "22": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "23": {
        start: {
          line: 226,
          column: 21
        },
        end: {
          line: 226,
          column: 77
        }
      },
      "24": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 38
        }
      },
      "25": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "26": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "27": {
        start: {
          line: 230,
          column: 35
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "28": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 64
        }
      },
      "29": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 91
        }
      },
      "30": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "31": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 69
        }
      },
      "32": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 51
        }
      },
      "33": {
        start: {
          line: 256,
          column: 21
        },
        end: {
          line: 259,
          column: 6
        }
      },
      "34": {
        start: {
          line: 260,
          column: 27
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "35": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 171
        }
      },
      "36": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 67
        }
      },
      "37": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 55
        }
      },
      "38": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 46
        }
      },
      "39": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 57
        }
      },
      "40": {
        start: {
          line: 293,
          column: 22
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "41": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 32
        }
      },
      "42": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "43": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 41
        }
      },
      "44": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 37
        }
      },
      "45": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 136
        }
      },
      "46": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 54
        }
      },
      "47": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 54
        }
      },
      "48": {
        start: {
          line: 313,
          column: 21
        },
        end: {
          line: 317,
          column: 6
        }
      },
      "49": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 191
        }
      },
      "50": {
        start: {
          line: 324,
          column: 22
        },
        end: {
          line: 324,
          column: 62
        }
      },
      "51": {
        start: {
          line: 325,
          column: 32
        },
        end: {
          line: 325,
          column: 90
        }
      },
      "52": {
        start: {
          line: 325,
          column: 60
        },
        end: {
          line: 325,
          column: 86
        }
      },
      "53": {
        start: {
          line: 326,
          column: 37
        },
        end: {
          line: 326,
          column: 100
        }
      },
      "54": {
        start: {
          line: 326,
          column: 65
        },
        end: {
          line: 326,
          column: 96
        }
      },
      "55": {
        start: {
          line: 327,
          column: 33
        },
        end: {
          line: 327,
          column: 92
        }
      },
      "56": {
        start: {
          line: 327,
          column: 61
        },
        end: {
          line: 327,
          column: 88
        }
      },
      "57": {
        start: {
          line: 328,
          column: 37
        },
        end: {
          line: 328,
          column: 128
        }
      },
      "58": {
        start: {
          line: 328,
          column: 65
        },
        end: {
          line: 328,
          column: 96
        }
      },
      "59": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 334,
          column: 10
        }
      },
      "60": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 54
        }
      },
      "61": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 353,
          column: 10
        }
      },
      "62": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 352,
          column: 14
        }
      },
      "63": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 377,
          column: 10
        }
      },
      "64": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "65": {
        start: {
          line: 362,
          column: 29
        },
        end: {
          line: 362,
          column: 81
        }
      },
      "66": {
        start: {
          line: 363,
          column: 31
        },
        end: {
          line: 363,
          column: 63
        }
      },
      "67": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 368,
          column: 18
        }
      },
      "68": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 375,
          column: 18
        }
      },
      "69": {
        start: {
          line: 383,
          column: 22
        },
        end: {
          line: 386,
          column: 11
        }
      },
      "70": {
        start: {
          line: 383,
          column: 77
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "71": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 46
        }
      },
      "72": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "73": {
        start: {
          line: 394,
          column: 26
        },
        end: {
          line: 394,
          column: 46
        }
      },
      "74": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "75": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 402,
          column: 17
        }
      },
      "76": {
        start: {
          line: 397,
          column: 33
        },
        end: {
          line: 400,
          column: 12
        }
      },
      "77": {
        start: {
          line: 401,
          column: 20
        },
        end: {
          line: 401,
          column: 181
        }
      },
      "78": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 41
        }
      },
      "79": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 70
        }
      },
      "80": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 125
        }
      },
      "81": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "82": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 69
        }
      },
      "83": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 43
        }
      },
      "84": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 42
        }
      },
      "85": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 41
        }
      },
      "86": {
        start: {
          line: 424,
          column: 21
        },
        end: {
          line: 424,
          column: 90
        }
      },
      "87": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 23
        }
      },
      "88": {
        start: {
          line: 426,
          column: 26
        },
        end: {
          line: 426,
          column: 115
        }
      },
      "89": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 28
        }
      },
      "90": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 57
        }
      },
      "91": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 38
        }
      },
      "92": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 37
        }
      },
      "93": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 36
        }
      },
      "94": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 33
        }
      },
      "95": {
        start: {
          line: 440,
          column: 0
        },
        end: {
          line: 440,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 38
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 211,
            column: 29
          },
          end: {
            line: 211,
            column: 30
          }
        },
        loc: {
          start: {
            line: 211,
            column: 37
          },
          end: {
            line: 220,
            column: 9
          }
        },
        line: 211
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 28
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 225
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 36
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 249
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 25
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 274
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 28
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 280
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 28
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 286
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 64
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 292
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 20
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 323
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 325,
            column: 45
          },
          end: {
            line: 325,
            column: 46
          }
        },
        loc: {
          start: {
            line: 325,
            column: 60
          },
          end: {
            line: 325,
            column: 86
          }
        },
        line: 325
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 326,
            column: 50
          },
          end: {
            line: 326,
            column: 51
          }
        },
        loc: {
          start: {
            line: 326,
            column: 65
          },
          end: {
            line: 326,
            column: 96
          }
        },
        line: 326
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 327,
            column: 46
          },
          end: {
            line: 327,
            column: 47
          }
        },
        loc: {
          start: {
            line: 327,
            column: 61
          },
          end: {
            line: 327,
            column: 88
          }
        },
        line: 327
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 328,
            column: 50
          },
          end: {
            line: 328,
            column: 51
          }
        },
        loc: {
          start: {
            line: 328,
            column: 65
          },
          end: {
            line: 328,
            column: 96
          }
        },
        line: 328
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 339
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 35
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 345
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 346,
            column: 15
          },
          end: {
            line: 346,
            column: 16
          }
        },
        loc: {
          start: {
            line: 346,
            column: 53
          },
          end: {
            line: 353,
            column: 9
          }
        },
        line: 346
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 34
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 358
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 359,
            column: 15
          },
          end: {
            line: 359,
            column: 16
          }
        },
        loc: {
          start: {
            line: 359,
            column: 53
          },
          end: {
            line: 377,
            column: 9
          }
        },
        line: 359
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 18
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 382
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 383,
            column: 68
          },
          end: {
            line: 383,
            column: 69
          }
        },
        loc: {
          start: {
            line: 383,
            column: 77
          },
          end: {
            line: 386,
            column: 9
          }
        },
        line: 383
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 32
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 392
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 415,
            column: 4
          },
          end: {
            line: 415,
            column: 5
          }
        },
        loc: {
          start: {
            line: 415,
            column: 27
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 415
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 433,
            column: 4
          },
          end: {
            line: 433,
            column: 5
          }
        },
        loc: {
          start: {
            line: 433,
            column: 20
          },
          end: {
            line: 438,
            column: 5
          }
        },
        line: 433
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "1": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "2": {
        loc: {
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 22
          },
          end: {
            line: 293,
            column: 60
          }
        }, {
          start: {
            line: 293,
            column: 64
          },
          end: {
            line: 300,
            column: 9
          }
        }],
        line: 293
      },
      "3": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: 305,
            column: 13
          },
          end: {
            line: 307,
            column: 9
          }
        }],
        line: 302
      },
      "4": {
        loc: {
          start: {
            line: 367,
            column: 27
          },
          end: {
            line: 367,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 367,
            column: 56
          },
          end: {
            line: 367,
            column: 62
          }
        }, {
          start: {
            line: 367,
            column: 66
          },
          end: {
            line: 367,
            column: 80
          }
        }],
        line: 367
      },
      "5": {
        loc: {
          start: {
            line: 367,
            column: 66
          },
          end: {
            line: 367,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 367,
            column: 75
          },
          end: {
            line: 367,
            column: 76
          }
        }, {
          start: {
            line: 367,
            column: 79
          },
          end: {
            line: 367,
            column: 80
          }
        }],
        line: 367
      },
      "6": {
        loc: {
          start: {
            line: 374,
            column: 27
          },
          end: {
            line: 374,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 374,
            column: 52
          },
          end: {
            line: 374,
            column: 65
          }
        }, {
          start: {
            line: 374,
            column: 68
          },
          end: {
            line: 374,
            column: 103
          }
        }],
        line: 374
      },
      "7": {
        loc: {
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "8": {
        loc: {
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 396,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 396,
            column: 29
          }
        }, {
          start: {
            line: 396,
            column: 33
          },
          end: {
            line: 396,
            column: 49
          }
        }, {
          start: {
            line: 396,
            column: 53
          },
          end: {
            line: 396,
            column: 68
          }
        }],
        line: 396
      },
      "9": {
        loc: {
          start: {
            line: 401,
            column: 106
          },
          end: {
            line: 401,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 106
          },
          end: {
            line: 401,
            column: 119
          }
        }, {
          start: {
            line: 401,
            column: 123
          },
          end: {
            line: 401,
            column: 125
          }
        }],
        line: 401
      },
      "10": {
        loc: {
          start: {
            line: 401,
            column: 128
          },
          end: {
            line: 401,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 128
          },
          end: {
            line: 401,
            column: 147
          }
        }, {
          start: {
            line: 401,
            column: 151
          },
          end: {
            line: 401,
            column: 153
          }
        }],
        line: 401
      },
      "11": {
        loc: {
          start: {
            line: 409,
            column: 65
          },
          end: {
            line: 409,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 409,
            column: 90
          },
          end: {
            line: 409,
            column: 103
          }
        }, {
          start: {
            line: 409,
            column: 106
          },
          end: {
            line: 409,
            column: 121
          }
        }],
        line: 409
      },
      "12": {
        loc: {
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/assertions/AssertionTypeRegistry.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/assertions/AssertionTypeRegistry.ts"],
      sourcesContent: ["import { db } from '../../database/connection';\nimport { AssertionContext, EnhancedAssertionType, EnhancedAssertionResult } from './AssertionEngine';\n\nexport type AssertionValidator = (\n  output: string,\n  assertion: EnhancedAssertionType,\n  context?: AssertionContext\n) => Promise<EnhancedAssertionResult>;\n\nexport interface AssertionTypeDefinition {\n  name: string;\n  description: string;\n  parameters: {\n    [key: string]: {\n      type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n      required: boolean;\n      description: string;\n      default?: any;\n    };\n  };\n  examples: Array<{\n    assertion: EnhancedAssertionType;\n    description: string;\n    expectedResult: boolean;\n  }>;\n  validator: AssertionValidator;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AssertionExecutionStats {\n  assertionType: string;\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  averageExecutionTime: number;\n  lastExecuted: string;\n}\n\nexport class AssertionTypeRegistry {\n  private customValidators: Map<string, AssertionValidator> = new Map();\n  private typeDefinitions: Map<string, AssertionTypeDefinition> = new Map();\n  private executionStats: Map<string, AssertionExecutionStats> = new Map();\n  private initialized: boolean = false;\n\n  /**\n   * Initialize the assertion type registry\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing AssertionTypeRegistry...');\n      \n      // Create custom assertion types table\n      await this.createAssertionTypesTable();\n      \n      // Load built-in assertion types\n      await this.loadBuiltInTypes();\n      \n      // Load custom assertion types from database\n      await this.loadCustomTypes();\n      \n      this.initialized = true;\n      \n      console.log('\u2705 AssertionTypeRegistry initialized');\n    } catch (error) {\n      console.error('\u274C Failed to initialize AssertionTypeRegistry:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create the assertion types table in database\n   */\n  private async createAssertionTypesTable(): Promise<void> {\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_types (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT NOT NULL,\n        parameters TEXT NOT NULL, -- JSON\n        examples TEXT NOT NULL, -- JSON\n        validator_code TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_execution_stats (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        assertion_type TEXT NOT NULL,\n        total_executions INTEGER DEFAULT 0,\n        successful_executions INTEGER DEFAULT 0,\n        failed_executions INTEGER DEFAULT 0,\n        total_execution_time INTEGER DEFAULT 0,\n        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(assertion_type)\n      )\n    `);\n\n    // Create indexes\n    db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);\n      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);\n    `);\n  }\n\n  /**\n   * Load built-in assertion types\n   */\n  private async loadBuiltInTypes(): Promise<void> {\n    const builtInTypes: Partial<AssertionTypeDefinition>[] = [\n      {\n        name: 'contains',\n        description: 'Check if output contains a specific string',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'The string to search for'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'contains', value: 'hello' },\n            description: 'Check if output contains \"hello\"',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'semantic-similarity',\n        description: 'Check semantic similarity between output and expected text',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'The expected text to compare against'\n          },\n          threshold: {\n            type: 'number',\n            required: false,\n            description: 'Similarity threshold (0-1)',\n            default: 0.8\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'semantic-similarity', value: 'The weather is nice', threshold: 0.8 },\n            description: 'Check if output has similar meaning to \"The weather is nice\"',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'custom',\n        description: 'Execute custom JavaScript code for assertion',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'JavaScript code to execute'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'custom', value: 'return output.length > 10' },\n            description: 'Check if output has more than 10 characters',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'json-schema',\n        description: 'Validate output against JSON schema',\n        parameters: {\n          value: {\n            type: 'object',\n            required: true,\n            description: 'JSON schema to validate against'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'json-schema', value: { type: 'object', properties: { name: { type: 'string' } } } },\n            description: 'Validate JSON output has required structure',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'sentiment',\n        description: 'Check sentiment of the output',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'Expected sentiment: positive, negative, or neutral'\n          },\n          threshold: {\n            type: 'number',\n            required: false,\n            description: 'Confidence threshold (0-1)',\n            default: 0.6\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'sentiment', value: 'positive', threshold: 0.7 },\n            description: 'Check if output has positive sentiment',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'language',\n        description: 'Detect language of the output',\n        parameters: {\n          value: {\n            type: 'string',\n            required: true,\n            description: 'Expected language code (e.g., \"en\", \"es\", \"fr\")'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'language', value: 'en' },\n            description: 'Check if output is in English',\n            expectedResult: true\n          }\n        ]\n      },\n      {\n        name: 'toxicity',\n        description: 'Check toxicity level of the output',\n        parameters: {\n          value: {\n            type: 'number',\n            required: true,\n            description: 'Maximum allowed toxicity score (0-1)'\n          }\n        },\n        examples: [\n          {\n            assertion: { type: 'toxicity', value: 0.3 },\n            description: 'Check if output toxicity is below 0.3',\n            expectedResult: true\n          }\n        ]\n      }\n    ];\n\n    // Register built-in types\n    builtInTypes.forEach(type => {\n      if (type.name) {\n        this.typeDefinitions.set(type.name, {\n          ...type,\n          validator: this.createDummyValidator(type.name),\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        } as AssertionTypeDefinition);\n      }\n    });\n  }\n\n  /**\n   * Load custom assertion types from database\n   */\n  private async loadCustomTypes(): Promise<void> {\n    const stmt = db.prepare('SELECT * FROM assertion_types');\n    const customTypes = stmt.all();\n\n    for (const type of customTypes) {\n      try {\n        const definition: AssertionTypeDefinition = {\n          name: type.name,\n          description: type.description,\n          parameters: JSON.parse(type.parameters),\n          examples: JSON.parse(type.examples),\n          validator: this.createValidatorFromCode(type.validator_code),\n          created_at: type.created_at,\n          updated_at: type.updated_at\n        };\n\n        this.typeDefinitions.set(type.name, definition);\n      } catch (error) {\n        console.error(`Failed to load custom assertion type ${type.name}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Register a new custom assertion type\n   */\n  async register(name: string, validator: AssertionValidator): Promise<void> {\n    if (!this.initialized) {\n      throw new Error('AssertionTypeRegistry not initialized');\n    }\n\n    // Store in memory\n    this.customValidators.set(name, validator);\n\n    // Store in database\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO assertion_types (name, description, parameters, examples, validator_code, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    const definition: Partial<AssertionTypeDefinition> = {\n      name,\n      description: `Custom assertion type: ${name}`,\n      parameters: {},\n      examples: [],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    stmt.run(\n      name,\n      definition.description,\n      JSON.stringify(definition.parameters),\n      JSON.stringify(definition.examples),\n      validator.toString(),\n      new Date().toISOString()\n    );\n\n    console.log(`\u2705 Registered custom assertion type: ${name}`);\n  }\n\n  /**\n   * Get all registered assertion types\n   */\n  getRegisteredTypes(): string[] {\n    return Array.from(this.typeDefinitions.keys());\n  }\n\n  /**\n   * Get assertion type definition\n   */\n  getTypeDefinition(name: string): AssertionTypeDefinition | undefined {\n    return this.typeDefinitions.get(name);\n  }\n\n  /**\n   * Get all type definitions\n   */\n  getAllTypeDefinitions(): AssertionTypeDefinition[] {\n    return Array.from(this.typeDefinitions.values());\n  }\n\n  /**\n   * Update execution statistics\n   */\n  updateExecutionStats(\n    assertionType: string,\n    success: boolean,\n    executionTime: number\n  ): void {\n    const stats = this.executionStats.get(assertionType) || {\n      assertionType,\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      averageExecutionTime: 0,\n      lastExecuted: new Date().toISOString()\n    };\n\n    stats.totalExecutions++;\n    if (success) {\n      stats.successfulExecutions++;\n    } else {\n      stats.failedExecutions++;\n    }\n\n    // Update average execution time\n    stats.averageExecutionTime = (stats.averageExecutionTime * (stats.totalExecutions - 1) + executionTime) / stats.totalExecutions;\n    stats.lastExecuted = new Date().toISOString();\n\n    this.executionStats.set(assertionType, stats);\n\n    // Update database\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO assertion_execution_stats \n      (assertion_type, total_executions, successful_executions, failed_executions, total_execution_time, last_executed)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      assertionType,\n      stats.totalExecutions,\n      stats.successfulExecutions,\n      stats.failedExecutions,\n      Math.round(stats.averageExecutionTime * stats.totalExecutions),\n      stats.lastExecuted\n    );\n  }\n\n  /**\n   * Get execution statistics\n   */\n  getStatistics(): {\n    totalAssertions: number;\n    successfulAssertions: number;\n    failedAssertions: number;\n    averageExecutionTime: number;\n  } {\n    const stats = Array.from(this.executionStats.values());\n    \n    const totalAssertions = stats.reduce((sum, stat) => sum + stat.totalExecutions, 0);\n    const successfulAssertions = stats.reduce((sum, stat) => sum + stat.successfulExecutions, 0);\n    const failedAssertions = stats.reduce((sum, stat) => sum + stat.failedExecutions, 0);\n    const averageExecutionTime = stats.reduce((sum, stat) => sum + stat.averageExecutionTime, 0) / Math.max(1, stats.length);\n\n    return {\n      totalAssertions,\n      successfulAssertions,\n      failedAssertions,\n      averageExecutionTime\n    };\n  }\n\n  /**\n   * Get statistics for a specific assertion type\n   */\n  getTypeStatistics(assertionType: string): AssertionExecutionStats | undefined {\n    return this.executionStats.get(assertionType);\n  }\n\n  /**\n   * Create a dummy validator for built-in types\n   */\n  private createDummyValidator(typeName: string): AssertionValidator {\n    return async (output: string, assertion: EnhancedAssertionType, context?: AssertionContext): Promise<EnhancedAssertionResult> => {\n      // This would be replaced by the actual assertion engine validation\n      return {\n        assertion,\n        passed: false,\n        error: `Validator for ${typeName} should be handled by AssertionEngine`\n      };\n    };\n  }\n\n  /**\n   * Create a validator from stored code\n   */\n  private createValidatorFromCode(code: string): AssertionValidator {\n    return async (output: string, assertion: EnhancedAssertionType, context?: AssertionContext): Promise<EnhancedAssertionResult> => {\n      try {\n        // In a real implementation, this would safely execute the stored code\n        const func = new Function('output', 'assertion', 'context', code);\n        const result = func(output, assertion, context);\n        \n        return {\n          assertion,\n          passed: Boolean(result),\n          score: typeof result === 'number' ? result : (result ? 1 : 0)\n        };\n      } catch (error) {\n        return {\n          assertion,\n          passed: false,\n          error: error instanceof Error ? error.message : 'Custom validator execution failed'\n        };\n      }\n    };\n  }\n\n  /**\n   * Export assertion types to JSON\n   */\n  exportTypes(): string {\n    const types = Array.from(this.typeDefinitions.values()).map(type => ({\n      ...type,\n      validator: undefined // Don't export the validator function\n    }));\n\n    return JSON.stringify(types, null, 2);\n  }\n\n  /**\n   * Import assertion types from JSON\n   */\n  async importTypes(jsonData: string): Promise<void> {\n    try {\n      const types = JSON.parse(jsonData);\n      \n      for (const type of types) {\n        if ((type as any).name && (type as any).description && (type as any).parameters) {\n          const stmt = db.prepare(`\n            INSERT OR REPLACE INTO assertion_types (name, description, parameters, examples, validator_code, updated_at)\n            VALUES (?, ?, ?, ?, ?, ?)\n          `);\n\n          stmt.run(\n            (type as any).name,\n            (type as any).description,\n            JSON.stringify((type as any).parameters),\n            JSON.stringify((type as any).examples || []),\n            (type as any).validator_code || '',\n            new Date().toISOString()\n          );\n        }\n      }\n\n      // Reload types\n      await this.loadCustomTypes();\n      \n      console.log(`\u2705 Imported ${types.length} assertion types`);\n    } catch (error) {\n      throw new Error(`Failed to import assertion types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete a custom assertion type\n   */\n  async deleteType(name: string): Promise<void> {\n    if (!this.initialized) {\n      throw new Error('AssertionTypeRegistry not initialized');\n    }\n\n    // Remove from memory\n    this.customValidators.delete(name);\n    this.typeDefinitions.delete(name);\n    this.executionStats.delete(name);\n\n    // Remove from database\n    const stmt = db.prepare('DELETE FROM assertion_types WHERE name = ?');\n    stmt.run(name);\n\n    const statsStmt = db.prepare('DELETE FROM assertion_execution_stats WHERE assertion_type = ?');\n    statsStmt.run(name);\n\n    console.log(`\u2705 Deleted assertion type: ${name}`);\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.customValidators.clear();\n    this.typeDefinitions.clear();\n    this.executionStats.clear();\n    this.initialized = false;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c72750c6d03ff068345348780df7f66a6eabc6bf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_lpo6rkaqm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_lpo6rkaqm();
cov_lpo6rkaqm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_lpo6rkaqm().s[1]++;
exports.AssertionTypeRegistry = void 0;
const connection_1 =
/* istanbul ignore next */
(cov_lpo6rkaqm().s[2]++, require("../../database/connection"));
class AssertionTypeRegistry {
  constructor() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[0]++;
    cov_lpo6rkaqm().s[3]++;
    this.customValidators = new Map();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[4]++;
    this.typeDefinitions = new Map();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[5]++;
    this.executionStats = new Map();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[6]++;
    this.initialized = false;
  }
  /**
   * Initialize the assertion type registry
   */
  async initialize() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[1]++;
    cov_lpo6rkaqm().s[7]++;
    try {
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[8]++;
      console.log('Initializing AssertionTypeRegistry...');
      // Create custom assertion types table
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[9]++;
      await this.createAssertionTypesTable();
      // Load built-in assertion types
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[10]++;
      await this.loadBuiltInTypes();
      // Load custom assertion types from database
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[11]++;
      await this.loadCustomTypes();
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[12]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[13]++;
      console.log('✅ AssertionTypeRegistry initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[14]++;
      console.error('❌ Failed to initialize AssertionTypeRegistry:', error);
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[15]++;
      throw error;
    }
  }
  /**
   * Create the assertion types table in database
   */
  async createAssertionTypesTable() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[2]++;
    cov_lpo6rkaqm().s[16]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS assertion_types (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        description TEXT NOT NULL,
        parameters TEXT NOT NULL, -- JSON
        examples TEXT NOT NULL, -- JSON
        validator_code TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[17]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS assertion_execution_stats (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        assertion_type TEXT NOT NULL,
        total_executions INTEGER DEFAULT 0,
        successful_executions INTEGER DEFAULT 0,
        failed_executions INTEGER DEFAULT 0,
        total_execution_time INTEGER DEFAULT 0,
        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(assertion_type)
      )
    `);
    // Create indexes
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[18]++;
    connection_1.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);
      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);
    `);
  }
  /**
   * Load built-in assertion types
   */
  async loadBuiltInTypes() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[3]++;
    const builtInTypes =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[19]++, [{
      name: 'contains',
      description: 'Check if output contains a specific string',
      parameters: {
        value: {
          type: 'string',
          required: true,
          description: 'The string to search for'
        }
      },
      examples: [{
        assertion: {
          type: 'contains',
          value: 'hello'
        },
        description: 'Check if output contains "hello"',
        expectedResult: true
      }]
    }, {
      name: 'semantic-similarity',
      description: 'Check semantic similarity between output and expected text',
      parameters: {
        value: {
          type: 'string',
          required: true,
          description: 'The expected text to compare against'
        },
        threshold: {
          type: 'number',
          required: false,
          description: 'Similarity threshold (0-1)',
          default: 0.8
        }
      },
      examples: [{
        assertion: {
          type: 'semantic-similarity',
          value: 'The weather is nice',
          threshold: 0.8
        },
        description: 'Check if output has similar meaning to "The weather is nice"',
        expectedResult: true
      }]
    }, {
      name: 'custom',
      description: 'Execute custom JavaScript code for assertion',
      parameters: {
        value: {
          type: 'string',
          required: true,
          description: 'JavaScript code to execute'
        }
      },
      examples: [{
        assertion: {
          type: 'custom',
          value: 'return output.length > 10'
        },
        description: 'Check if output has more than 10 characters',
        expectedResult: true
      }]
    }, {
      name: 'json-schema',
      description: 'Validate output against JSON schema',
      parameters: {
        value: {
          type: 'object',
          required: true,
          description: 'JSON schema to validate against'
        }
      },
      examples: [{
        assertion: {
          type: 'json-schema',
          value: {
            type: 'object',
            properties: {
              name: {
                type: 'string'
              }
            }
          }
        },
        description: 'Validate JSON output has required structure',
        expectedResult: true
      }]
    }, {
      name: 'sentiment',
      description: 'Check sentiment of the output',
      parameters: {
        value: {
          type: 'string',
          required: true,
          description: 'Expected sentiment: positive, negative, or neutral'
        },
        threshold: {
          type: 'number',
          required: false,
          description: 'Confidence threshold (0-1)',
          default: 0.6
        }
      },
      examples: [{
        assertion: {
          type: 'sentiment',
          value: 'positive',
          threshold: 0.7
        },
        description: 'Check if output has positive sentiment',
        expectedResult: true
      }]
    }, {
      name: 'language',
      description: 'Detect language of the output',
      parameters: {
        value: {
          type: 'string',
          required: true,
          description: 'Expected language code (e.g., "en", "es", "fr")'
        }
      },
      examples: [{
        assertion: {
          type: 'language',
          value: 'en'
        },
        description: 'Check if output is in English',
        expectedResult: true
      }]
    }, {
      name: 'toxicity',
      description: 'Check toxicity level of the output',
      parameters: {
        value: {
          type: 'number',
          required: true,
          description: 'Maximum allowed toxicity score (0-1)'
        }
      },
      examples: [{
        assertion: {
          type: 'toxicity',
          value: 0.3
        },
        description: 'Check if output toxicity is below 0.3',
        expectedResult: true
      }]
    }]);
    // Register built-in types
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[20]++;
    builtInTypes.forEach(type => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[4]++;
      cov_lpo6rkaqm().s[21]++;
      if (type.name) {
        /* istanbul ignore next */
        cov_lpo6rkaqm().b[0][0]++;
        cov_lpo6rkaqm().s[22]++;
        this.typeDefinitions.set(type.name, {
          ...type,
          validator: this.createDummyValidator(type.name),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
      } else
      /* istanbul ignore next */
      {
        cov_lpo6rkaqm().b[0][1]++;
      }
    });
  }
  /**
   * Load custom assertion types from database
   */
  async loadCustomTypes() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[5]++;
    const stmt =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[23]++, connection_1.db.prepare('SELECT * FROM assertion_types'));
    const customTypes =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[24]++, stmt.all());
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[25]++;
    for (const type of customTypes) {
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[26]++;
      try {
        const definition =
        /* istanbul ignore next */
        (cov_lpo6rkaqm().s[27]++, {
          name: type.name,
          description: type.description,
          parameters: JSON.parse(type.parameters),
          examples: JSON.parse(type.examples),
          validator: this.createValidatorFromCode(type.validator_code),
          created_at: type.created_at,
          updated_at: type.updated_at
        });
        /* istanbul ignore next */
        cov_lpo6rkaqm().s[28]++;
        this.typeDefinitions.set(type.name, definition);
      } catch (error) {
        /* istanbul ignore next */
        cov_lpo6rkaqm().s[29]++;
        console.error(`Failed to load custom assertion type ${type.name}:`, error);
      }
    }
  }
  /**
   * Register a new custom assertion type
   */
  async register(name, validator) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[6]++;
    cov_lpo6rkaqm().s[30]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_lpo6rkaqm().b[1][0]++;
      cov_lpo6rkaqm().s[31]++;
      throw new Error('AssertionTypeRegistry not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_lpo6rkaqm().b[1][1]++;
    }
    // Store in memory
    cov_lpo6rkaqm().s[32]++;
    this.customValidators.set(name, validator);
    // Store in database
    const stmt =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[33]++, connection_1.db.prepare(`
      INSERT OR REPLACE INTO assertion_types (name, description, parameters, examples, validator_code, updated_at)
      VALUES (?, ?, ?, ?, ?, ?)
    `));
    const definition =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[34]++, {
      name,
      description: `Custom assertion type: ${name}`,
      parameters: {},
      examples: [],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[35]++;
    stmt.run(name, definition.description, JSON.stringify(definition.parameters), JSON.stringify(definition.examples), validator.toString(), new Date().toISOString());
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[36]++;
    console.log(`✅ Registered custom assertion type: ${name}`);
  }
  /**
   * Get all registered assertion types
   */
  getRegisteredTypes() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[7]++;
    cov_lpo6rkaqm().s[37]++;
    return Array.from(this.typeDefinitions.keys());
  }
  /**
   * Get assertion type definition
   */
  getTypeDefinition(name) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[8]++;
    cov_lpo6rkaqm().s[38]++;
    return this.typeDefinitions.get(name);
  }
  /**
   * Get all type definitions
   */
  getAllTypeDefinitions() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[9]++;
    cov_lpo6rkaqm().s[39]++;
    return Array.from(this.typeDefinitions.values());
  }
  /**
   * Update execution statistics
   */
  updateExecutionStats(assertionType, success, executionTime) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[10]++;
    const stats =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[40]++,
    /* istanbul ignore next */
    (cov_lpo6rkaqm().b[2][0]++, this.executionStats.get(assertionType)) ||
    /* istanbul ignore next */
    (cov_lpo6rkaqm().b[2][1]++, {
      assertionType,
      totalExecutions: 0,
      successfulExecutions: 0,
      failedExecutions: 0,
      averageExecutionTime: 0,
      lastExecuted: new Date().toISOString()
    }));
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[41]++;
    stats.totalExecutions++;
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[42]++;
    if (success) {
      /* istanbul ignore next */
      cov_lpo6rkaqm().b[3][0]++;
      cov_lpo6rkaqm().s[43]++;
      stats.successfulExecutions++;
    } else {
      /* istanbul ignore next */
      cov_lpo6rkaqm().b[3][1]++;
      cov_lpo6rkaqm().s[44]++;
      stats.failedExecutions++;
    }
    // Update average execution time
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[45]++;
    stats.averageExecutionTime = (stats.averageExecutionTime * (stats.totalExecutions - 1) + executionTime) / stats.totalExecutions;
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[46]++;
    stats.lastExecuted = new Date().toISOString();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[47]++;
    this.executionStats.set(assertionType, stats);
    // Update database
    const stmt =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[48]++, connection_1.db.prepare(`
      INSERT OR REPLACE INTO assertion_execution_stats 
      (assertion_type, total_executions, successful_executions, failed_executions, total_execution_time, last_executed)
      VALUES (?, ?, ?, ?, ?, ?)
    `));
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[49]++;
    stmt.run(assertionType, stats.totalExecutions, stats.successfulExecutions, stats.failedExecutions, Math.round(stats.averageExecutionTime * stats.totalExecutions), stats.lastExecuted);
  }
  /**
   * Get execution statistics
   */
  getStatistics() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[11]++;
    const stats =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[50]++, Array.from(this.executionStats.values()));
    const totalAssertions =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[51]++, stats.reduce((sum, stat) => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[12]++;
      cov_lpo6rkaqm().s[52]++;
      return sum + stat.totalExecutions;
    }, 0));
    const successfulAssertions =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[53]++, stats.reduce((sum, stat) => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[13]++;
      cov_lpo6rkaqm().s[54]++;
      return sum + stat.successfulExecutions;
    }, 0));
    const failedAssertions =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[55]++, stats.reduce((sum, stat) => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[14]++;
      cov_lpo6rkaqm().s[56]++;
      return sum + stat.failedExecutions;
    }, 0));
    const averageExecutionTime =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[57]++, stats.reduce((sum, stat) => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[15]++;
      cov_lpo6rkaqm().s[58]++;
      return sum + stat.averageExecutionTime;
    }, 0) / Math.max(1, stats.length));
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[59]++;
    return {
      totalAssertions,
      successfulAssertions,
      failedAssertions,
      averageExecutionTime
    };
  }
  /**
   * Get statistics for a specific assertion type
   */
  getTypeStatistics(assertionType) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[16]++;
    cov_lpo6rkaqm().s[60]++;
    return this.executionStats.get(assertionType);
  }
  /**
   * Create a dummy validator for built-in types
   */
  createDummyValidator(typeName) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[17]++;
    cov_lpo6rkaqm().s[61]++;
    return async (output, assertion, context) => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[18]++;
      cov_lpo6rkaqm().s[62]++;
      // This would be replaced by the actual assertion engine validation
      return {
        assertion,
        passed: false,
        error: `Validator for ${typeName} should be handled by AssertionEngine`
      };
    };
  }
  /**
   * Create a validator from stored code
   */
  createValidatorFromCode(code) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[19]++;
    cov_lpo6rkaqm().s[63]++;
    return async (output, assertion, context) => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[20]++;
      cov_lpo6rkaqm().s[64]++;
      try {
        // In a real implementation, this would safely execute the stored code
        const func =
        /* istanbul ignore next */
        (cov_lpo6rkaqm().s[65]++, new Function('output', 'assertion', 'context', code));
        const result =
        /* istanbul ignore next */
        (cov_lpo6rkaqm().s[66]++, func(output, assertion, context));
        /* istanbul ignore next */
        cov_lpo6rkaqm().s[67]++;
        return {
          assertion,
          passed: Boolean(result),
          score: typeof result === 'number' ?
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[4][0]++, result) :
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[4][1]++, result ?
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[5][0]++, 1) :
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[5][1]++, 0))
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_lpo6rkaqm().s[68]++;
        return {
          assertion,
          passed: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[6][0]++, error.message) :
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[6][1]++, 'Custom validator execution failed')
        };
      }
    };
  }
  /**
   * Export assertion types to JSON
   */
  exportTypes() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[21]++;
    const types =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[69]++, Array.from(this.typeDefinitions.values()).map(type => {
      /* istanbul ignore next */
      cov_lpo6rkaqm().f[22]++;
      cov_lpo6rkaqm().s[70]++;
      return {
        ...type,
        validator: undefined // Don't export the validator function
      };
    }));
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[71]++;
    return JSON.stringify(types, null, 2);
  }
  /**
   * Import assertion types from JSON
   */
  async importTypes(jsonData) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[23]++;
    cov_lpo6rkaqm().s[72]++;
    try {
      const types =
      /* istanbul ignore next */
      (cov_lpo6rkaqm().s[73]++, JSON.parse(jsonData));
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[74]++;
      for (const type of types) {
        /* istanbul ignore next */
        cov_lpo6rkaqm().s[75]++;
        if (
        /* istanbul ignore next */
        (cov_lpo6rkaqm().b[8][0]++, type.name) &&
        /* istanbul ignore next */
        (cov_lpo6rkaqm().b[8][1]++, type.description) &&
        /* istanbul ignore next */
        (cov_lpo6rkaqm().b[8][2]++, type.parameters)) {
          /* istanbul ignore next */
          cov_lpo6rkaqm().b[7][0]++;
          const stmt =
          /* istanbul ignore next */
          (cov_lpo6rkaqm().s[76]++, connection_1.db.prepare(`
            INSERT OR REPLACE INTO assertion_types (name, description, parameters, examples, validator_code, updated_at)
            VALUES (?, ?, ?, ?, ?, ?)
          `));
          /* istanbul ignore next */
          cov_lpo6rkaqm().s[77]++;
          stmt.run(type.name, type.description, JSON.stringify(type.parameters), JSON.stringify(
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[9][0]++, type.examples) ||
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[9][1]++, [])),
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[10][0]++, type.validator_code) ||
          /* istanbul ignore next */
          (cov_lpo6rkaqm().b[10][1]++, ''), new Date().toISOString());
        } else
        /* istanbul ignore next */
        {
          cov_lpo6rkaqm().b[7][1]++;
        }
      }
      // Reload types
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[78]++;
      await this.loadCustomTypes();
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[79]++;
      console.log(`✅ Imported ${types.length} assertion types`);
    } catch (error) {
      /* istanbul ignore next */
      cov_lpo6rkaqm().s[80]++;
      throw new Error(`Failed to import assertion types: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_lpo6rkaqm().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_lpo6rkaqm().b[11][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Delete a custom assertion type
   */
  async deleteType(name) {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[24]++;
    cov_lpo6rkaqm().s[81]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_lpo6rkaqm().b[12][0]++;
      cov_lpo6rkaqm().s[82]++;
      throw new Error('AssertionTypeRegistry not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_lpo6rkaqm().b[12][1]++;
    }
    // Remove from memory
    cov_lpo6rkaqm().s[83]++;
    this.customValidators.delete(name);
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[84]++;
    this.typeDefinitions.delete(name);
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[85]++;
    this.executionStats.delete(name);
    // Remove from database
    const stmt =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[86]++, connection_1.db.prepare('DELETE FROM assertion_types WHERE name = ?'));
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[87]++;
    stmt.run(name);
    const statsStmt =
    /* istanbul ignore next */
    (cov_lpo6rkaqm().s[88]++, connection_1.db.prepare('DELETE FROM assertion_execution_stats WHERE assertion_type = ?'));
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[89]++;
    statsStmt.run(name);
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[90]++;
    console.log(`✅ Deleted assertion type: ${name}`);
  }
  /**
   * Clean up resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_lpo6rkaqm().f[25]++;
    cov_lpo6rkaqm().s[91]++;
    this.customValidators.clear();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[92]++;
    this.typeDefinitions.clear();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[93]++;
    this.executionStats.clear();
    /* istanbul ignore next */
    cov_lpo6rkaqm().s[94]++;
    this.initialized = false;
  }
}
/* istanbul ignore next */
cov_lpo6rkaqm().s[95]++;
exports.AssertionTypeRegistry = AssertionTypeRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,