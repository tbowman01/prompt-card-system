65a9c75ee730bda28a5a770dc3eb6194
"use strict";

/* istanbul ignore next */
function cov_29x6jxts4f() {
  var path = "/workspaces/prompt-card-system/backend/src/services/optimization/OptimizationEngine.ts";
  var hash = "9d5cc184518ac72f05a001c0b5e4189393739ff4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/optimization/OptimizationEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 65
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 45
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 52
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 55
        }
      },
      "5": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 40
        }
      },
      "6": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "7": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 64
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 39
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 67
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "16": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "17": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 56
        }
      },
      "18": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 90
        }
      },
      "19": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "20": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "21": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 113
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 26
        }
      },
      "23": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 42,
          column: 91
        }
      },
      "24": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "25": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 45,
          column: 73
        }
      },
      "26": {
        start: {
          line: 47,
          column: 31
        },
        end: {
          line: 47,
          column: 134
        }
      },
      "27": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 125
        }
      },
      "28": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 117
        }
      },
      "29": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 60
        }
      },
      "30": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 113
        }
      },
      "31": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 31
        }
      },
      "32": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 79
        }
      },
      "33": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 134
        }
      },
      "34": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 89
        }
      },
      "35": {
        start: {
          line: 68,
          column: 27
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "36": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 52
        }
      },
      "37": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "38": {
        start: {
          line: 77,
          column: 39
        },
        end: {
          line: 77,
          column: 100
        }
      },
      "39": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "40": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 131
        }
      },
      "41": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "42": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "43": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 26
        }
      },
      "44": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 56
        }
      },
      "45": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "46": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 60
        }
      },
      "47": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 38
        }
      },
      "48": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 51
        }
      },
      "49": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "50": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 50
        }
      },
      "51": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 116,
          column: 56
        }
      },
      "52": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "53": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 65
        }
      },
      "54": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "55": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 56
        }
      },
      "56": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "57": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 60
        }
      },
      "58": {
        start: {
          line: 142,
          column: 28
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "59": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 147,
          column: 40
        }
      },
      "60": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "61": {
        start: {
          line: 149,
          column: 30
        },
        end: {
          line: 149,
          column: 51
        }
      },
      "62": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "63": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 50
        }
      },
      "64": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 67
        }
      },
      "65": {
        start: {
          line: 156,
          column: 31
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "66": {
        start: {
          line: 157,
          column: 28
        },
        end: {
          line: 157,
          column: 64
        }
      },
      "67": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 158,
          column: 65
        }
      },
      "68": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "69": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 173,
          column: 99
        }
      },
      "70": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 94
        }
      },
      "71": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "72": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "73": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 40
        }
      },
      "74": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 36
        }
      },
      "75": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 22
        }
      },
      "76": {
        start: {
          line: 203,
          column: 25
        },
        end: {
          line: 203,
          column: 90
        }
      },
      "77": {
        start: {
          line: 204,
          column: 29
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "78": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 54
        }
      },
      "79": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 55
        }
      },
      "80": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 48
        }
      },
      "81": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 28
        }
      },
      "82": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 221,
          column: 61
        }
      },
      "83": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "84": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 68
        }
      },
      "85": {
        start: {
          line: 225,
          column: 25
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "86": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 24
        }
      },
      "87": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 238,
          column: 29
        }
      },
      "88": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "89": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 251,
          column: 15
        }
      },
      "90": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "91": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "92": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "93": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 279,
          column: 15
        }
      },
      "94": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 292,
          column: 11
        }
      },
      "95": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 26
        }
      },
      "96": {
        start: {
          line: 299,
          column: 35
        },
        end: {
          line: 314,
          column: 5
        }
      },
      "97": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "98": {
        start: {
          line: 316,
          column: 29
        },
        end: {
          line: 316,
          column: 87
        }
      },
      "99": {
        start: {
          line: 317,
          column: 34
        },
        end: {
          line: 317,
          column: 58
        }
      },
      "100": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "101": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 86
        }
      },
      "102": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 35
        }
      },
      "103": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 74
        }
      },
      "104": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 34
        }
      },
      "105": {
        start: {
          line: 333,
          column: 23
        },
        end: {
          line: 333,
          column: 25
        }
      },
      "106": {
        start: {
          line: 334,
          column: 32
        },
        end: {
          line: 334,
          column: 34
        }
      },
      "107": {
        start: {
          line: 336,
          column: 28
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "108": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 346,
          column: 11
        }
      },
      "109": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 345,
          column: 13
        }
      },
      "110": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 344,
          column: 43
        }
      },
      "111": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "112": {
        start: {
          line: 349,
          column: 35
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "113": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 359,
          column: 15
        }
      },
      "114": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "115": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 47
        }
      },
      "116": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "117": {
        start: {
          line: 363,
          column: 33
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "118": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 372,
          column: 15
        }
      },
      "119": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 371,
          column: 17
        }
      },
      "120": {
        start: {
          line: 370,
          column: 20
        },
        end: {
          line: 370,
          column: 47
        }
      },
      "121": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "122": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 83
        }
      },
      "123": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 80
        }
      },
      "124": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 76
        }
      },
      "125": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 384,
          column: 10
        }
      },
      "126": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "127": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 70
        }
      },
      "128": {
        start: {
          line: 393,
          column: 28
        },
        end: {
          line: 393,
          column: 93
        }
      },
      "129": {
        start: {
          line: 393,
          column: 69
        },
        end: {
          line: 393,
          column: 89
        }
      },
      "130": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "131": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 64
        }
      },
      "132": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "133": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 65
        }
      },
      "134": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "135": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 72
        }
      },
      "136": {
        start: {
          line: 408,
          column: 34
        },
        end: {
          line: 408,
          column: 64
        }
      },
      "137": {
        start: {
          line: 408,
          column: 54
        },
        end: {
          line: 408,
          column: 63
        }
      },
      "138": {
        start: {
          line: 409,
          column: 28
        },
        end: {
          line: 409,
          column: 77
        }
      },
      "139": {
        start: {
          line: 410,
          column: 29
        },
        end: {
          line: 410,
          column: 97
        }
      },
      "140": {
        start: {
          line: 410,
          column: 56
        },
        end: {
          line: 410,
          column: 76
        }
      },
      "141": {
        start: {
          line: 411,
          column: 29
        },
        end: {
          line: 411,
          column: 97
        }
      },
      "142": {
        start: {
          line: 411,
          column: 56
        },
        end: {
          line: 411,
          column: 76
        }
      },
      "143": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 59
        }
      },
      "144": {
        start: {
          line: 419,
          column: 26
        },
        end: {
          line: 419,
          column: 43
        }
      },
      "145": {
        start: {
          line: 420,
          column: 24
        },
        end: {
          line: 420,
          column: 79
        }
      },
      "146": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "147": {
        start: {
          line: 422,
          column: 26
        },
        end: {
          line: 422,
          column: 77
        }
      },
      "148": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "149": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 34
        }
      },
      "150": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 38
        }
      },
      "151": {
        start: {
          line: 429,
          column: 25
        },
        end: {
          line: 429,
          column: 138
        }
      },
      "152": {
        start: {
          line: 429,
          column: 59
        },
        end: {
          line: 429,
          column: 110
        }
      },
      "153": {
        start: {
          line: 430,
          column: 27
        },
        end: {
          line: 430,
          column: 73
        }
      },
      "154": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 440,
          column: 10
        }
      },
      "155": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "156": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 43
        }
      },
      "157": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 51
        }
      },
      "158": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 44
        }
      },
      "159": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 454,
          column: 25
        }
      },
      "160": {
        start: {
          line: 461,
          column: 25
        },
        end: {
          line: 461,
          column: 27
        }
      },
      "161": {
        start: {
          line: 463,
          column: 30
        },
        end: {
          line: 463,
          column: 74
        }
      },
      "162": {
        start: {
          line: 463,
          column: 55
        },
        end: {
          line: 463,
          column: 73
        }
      },
      "163": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "164": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 122
        }
      },
      "165": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 109
        }
      },
      "166": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 100
        }
      },
      "167": {
        start: {
          line: 470,
          column: 31
        },
        end: {
          line: 470,
          column: 97
        }
      },
      "168": {
        start: {
          line: 470,
          column: 56
        },
        end: {
          line: 470,
          column: 96
        }
      },
      "169": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "170": {
        start: {
          line: 472,
          column: 32
        },
        end: {
          line: 472,
          column: 149
        }
      },
      "171": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 94
        }
      },
      "172": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 24
        }
      },
      "173": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "174": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 68
        }
      },
      "175": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "176": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 77
        }
      },
      "177": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 553,
          column: 9
        }
      },
      "178": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 38
        }
      },
      "179": {
        start: {
          line: 494,
          column: 31
        },
        end: {
          line: 494,
          column: 33
        }
      },
      "180": {
        start: {
          line: 495,
          column: 32
        },
        end: {
          line: 495,
          column: 53
        }
      },
      "181": {
        start: {
          line: 496,
          column: 29
        },
        end: {
          line: 496,
          column: 42
        }
      },
      "182": {
        start: {
          line: 497,
          column: 28
        },
        end: {
          line: 497,
          column: 29
        }
      },
      "183": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 520,
          column: 13
        }
      },
      "184": {
        start: {
          line: 498,
          column: 25
        },
        end: {
          line: 498,
          column: 26
        }
      },
      "185": {
        start: {
          line: 500,
          column: 32
        },
        end: {
          line: 500,
          column: 87
        }
      },
      "186": {
        start: {
          line: 502,
          column: 32
        },
        end: {
          line: 502,
          column: 77
        }
      },
      "187": {
        start: {
          line: 504,
          column: 30
        },
        end: {
          line: 504,
          column: 83
        }
      },
      "188": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 509,
          column: 17
        }
      },
      "189": {
        start: {
          line: 507,
          column: 20
        },
        end: {
          line: 507,
          column: 38
        }
      },
      "190": {
        start: {
          line: 508,
          column: 20
        },
        end: {
          line: 508,
          column: 41
        }
      },
      "191": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 517,
          column: 19
        }
      },
      "192": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 40
        }
      },
      "193": {
        start: {
          line: 522,
          column: 33
        },
        end: {
          line: 522,
          column: 74
        }
      },
      "194": {
        start: {
          line: 523,
          column: 34
        },
        end: {
          line: 523,
          column: 137
        }
      },
      "195": {
        start: {
          line: 524,
          column: 37
        },
        end: {
          line: 524,
          column: 88
        }
      },
      "196": {
        start: {
          line: 525,
          column: 27
        },
        end: {
          line: 538,
          column: 13
        }
      },
      "197": {
        start: {
          line: 533,
          column: 59
        },
        end: {
          line: 533,
          column: 90
        }
      },
      "198": {
        start: {
          line: 535,
          column: 67
        },
        end: {
          line: 535,
          column: 93
        }
      },
      "199": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 40
        }
      },
      "200": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 540,
          column: 36
        }
      },
      "201": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 548,
          column: 15
        }
      },
      "202": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 551,
          column: 37
        }
      },
      "203": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 552,
          column: 59
        }
      },
      "204": {
        start: {
          line: 559,
          column: 32
        },
        end: {
          line: 570,
          column: 5
        }
      },
      "205": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 578,
          column: 9
        }
      },
      "206": {
        start: {
          line: 572,
          column: 29
        },
        end: {
          line: 572,
          column: 84
        }
      },
      "207": {
        start: {
          line: 573,
          column: 12
        },
        end: {
          line: 573,
          column: 44
        }
      },
      "208": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 69
        }
      },
      "209": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 577,
          column: 33
        }
      },
      "210": {
        start: {
          line: 585,
          column: 28
        },
        end: {
          line: 589,
          column: 9
        }
      },
      "211": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 590,
          column: 27
        }
      },
      "212": {
        start: {
          line: 596,
          column: 30
        },
        end: {
          line: 596,
          column: 33
        }
      },
      "213": {
        start: {
          line: 597,
          column: 32
        },
        end: {
          line: 597,
          column: 65
        }
      },
      "214": {
        start: {
          line: 598,
          column: 20
        },
        end: {
          line: 598,
          column: 21
        }
      },
      "215": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 610,
          column: 9
        }
      },
      "216": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 602,
          column: 61
        }
      },
      "217": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 603,
          column: 22
        }
      },
      "218": {
        start: {
          line: 605,
          column: 16
        },
        end: {
          line: 605,
          column: 71
        }
      },
      "219": {
        start: {
          line: 606,
          column: 16
        },
        end: {
          line: 606,
          column: 22
        }
      },
      "220": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 62
        }
      },
      "221": {
        start: {
          line: 609,
          column: 16
        },
        end: {
          line: 609,
          column: 22
        }
      },
      "222": {
        start: {
          line: 612,
          column: 8
        },
        end: {
          line: 624,
          column: 11
        }
      },
      "223": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 623,
          column: 13
        }
      },
      "224": {
        start: {
          line: 615,
          column: 20
        },
        end: {
          line: 615,
          column: 67
        }
      },
      "225": {
        start: {
          line: 616,
          column: 20
        },
        end: {
          line: 616,
          column: 26
        }
      },
      "226": {
        start: {
          line: 618,
          column: 20
        },
        end: {
          line: 618,
          column: 77
        }
      },
      "227": {
        start: {
          line: 619,
          column: 20
        },
        end: {
          line: 619,
          column: 26
        }
      },
      "228": {
        start: {
          line: 621,
          column: 20
        },
        end: {
          line: 621,
          column: 68
        }
      },
      "229": {
        start: {
          line: 622,
          column: 20
        },
        end: {
          line: 622,
          column: 26
        }
      },
      "230": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 625,
          column: 21
        }
      },
      "231": {
        start: {
          line: 631,
          column: 24
        },
        end: {
          line: 631,
          column: 91
        }
      },
      "232": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 632,
          column: 77
        }
      },
      "233": {
        start: {
          line: 638,
          column: 25
        },
        end: {
          line: 638,
          column: 85
        }
      },
      "234": {
        start: {
          line: 639,
          column: 23
        },
        end: {
          line: 639,
          column: 55
        }
      },
      "235": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 642,
          column: 9
        }
      },
      "236": {
        start: {
          line: 641,
          column: 12
        },
        end: {
          line: 641,
          column: 26
        }
      },
      "237": {
        start: {
          line: 643,
          column: 25
        },
        end: {
          line: 643,
          column: 99
        }
      },
      "238": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 51
        }
      },
      "239": {
        start: {
          line: 645,
          column: 8
        },
        end: {
          line: 645,
          column: 24
        }
      },
      "240": {
        start: {
          line: 651,
          column: 33
        },
        end: {
          line: 657,
          column: 9
        }
      },
      "241": {
        start: {
          line: 658,
          column: 27
        },
        end: {
          line: 658,
          column: 62
        }
      },
      "242": {
        start: {
          line: 659,
          column: 8
        },
        end: {
          line: 659,
          column: 64
        }
      },
      "243": {
        start: {
          line: 659,
          column: 45
        },
        end: {
          line: 659,
          column: 62
        }
      },
      "244": {
        start: {
          line: 665,
          column: 28
        },
        end: {
          line: 665,
          column: 30
        }
      },
      "245": {
        start: {
          line: 666,
          column: 35
        },
        end: {
          line: 693,
          column: 10
        }
      },
      "246": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 692,
          column: 13
        }
      },
      "247": {
        start: {
          line: 668,
          column: 40
        },
        end: {
          line: 668,
          column: 115
        }
      },
      "248": {
        start: {
          line: 670,
          column: 43
        },
        end: {
          line: 670,
          column: 131
        }
      },
      "249": {
        start: {
          line: 671,
          column: 16
        },
        end: {
          line: 686,
          column: 17
        }
      },
      "250": {
        start: {
          line: 672,
          column: 20
        },
        end: {
          line: 685,
          column: 22
        }
      },
      "251": {
        start: {
          line: 687,
          column: 16
        },
        end: {
          line: 687,
          column: 28
        }
      },
      "252": {
        start: {
          line: 690,
          column: 16
        },
        end: {
          line: 690,
          column: 81
        }
      },
      "253": {
        start: {
          line: 691,
          column: 16
        },
        end: {
          line: 691,
          column: 28
        }
      },
      "254": {
        start: {
          line: 694,
          column: 24
        },
        end: {
          line: 694,
          column: 61
        }
      },
      "255": {
        start: {
          line: 695,
          column: 8
        },
        end: {
          line: 695,
          column: 57
        }
      },
      "256": {
        start: {
          line: 695,
          column: 40
        },
        end: {
          line: 695,
          column: 55
        }
      },
      "257": {
        start: {
          line: 701,
          column: 8
        },
        end: {
          line: 713,
          column: 9
        }
      },
      "258": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 712,
          column: 14
        }
      },
      "259": {
        start: {
          line: 714,
          column: 8
        },
        end: {
          line: 714,
          column: 20
        }
      },
      "260": {
        start: {
          line: 720,
          column: 8
        },
        end: {
          line: 732,
          column: 9
        }
      },
      "261": {
        start: {
          line: 721,
          column: 12
        },
        end: {
          line: 731,
          column: 14
        }
      },
      "262": {
        start: {
          line: 733,
          column: 8
        },
        end: {
          line: 733,
          column: 20
        }
      },
      "263": {
        start: {
          line: 739,
          column: 8
        },
        end: {
          line: 751,
          column: 9
        }
      },
      "264": {
        start: {
          line: 740,
          column: 12
        },
        end: {
          line: 750,
          column: 14
        }
      },
      "265": {
        start: {
          line: 752,
          column: 8
        },
        end: {
          line: 752,
          column: 20
        }
      },
      "266": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 768,
          column: 10
        }
      },
      "267": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 784,
          column: 10
        }
      },
      "268": {
        start: {
          line: 790,
          column: 8
        },
        end: {
          line: 806,
          column: 9
        }
      },
      "269": {
        start: {
          line: 791,
          column: 12
        },
        end: {
          line: 802,
          column: 15
        }
      },
      "270": {
        start: {
          line: 805,
          column: 12
        },
        end: {
          line: 805,
          column: 85
        }
      },
      "271": {
        start: {
          line: 814,
          column: 8
        },
        end: {
          line: 814,
          column: 87
        }
      },
      "272": {
        start: {
          line: 820,
          column: 8
        },
        end: {
          line: 822,
          column: 9
        }
      },
      "273": {
        start: {
          line: 821,
          column: 12
        },
        end: {
          line: 821,
          column: 55
        }
      },
      "274": {
        start: {
          line: 823,
          column: 24
        },
        end: {
          line: 823,
          column: 62
        }
      },
      "275": {
        start: {
          line: 824,
          column: 8
        },
        end: {
          line: 824,
          column: 31
        }
      },
      "276": {
        start: {
          line: 826,
          column: 8
        },
        end: {
          line: 828,
          column: 9
        }
      },
      "277": {
        start: {
          line: 827,
          column: 12
        },
        end: {
          line: 827,
          column: 28
        }
      },
      "278": {
        start: {
          line: 830,
          column: 8
        },
        end: {
          line: 832,
          column: 9
        }
      },
      "279": {
        start: {
          line: 831,
          column: 12
        },
        end: {
          line: 831,
          column: 100
        }
      },
      "280": {
        start: {
          line: 838,
          column: 22
        },
        end: {
          line: 838,
          column: 24
        }
      },
      "281": {
        start: {
          line: 839,
          column: 8
        },
        end: {
          line: 851,
          column: 9
        }
      },
      "282": {
        start: {
          line: 840,
          column: 12
        },
        end: {
          line: 850,
          column: 13
        }
      },
      "283": {
        start: {
          line: 841,
          column: 28
        },
        end: {
          line: 841,
          column: 89
        }
      },
      "284": {
        start: {
          line: 841,
          column: 58
        },
        end: {
          line: 841,
          column: 68
        }
      },
      "285": {
        start: {
          line: 842,
          column: 28
        },
        end: {
          line: 842,
          column: 48
        }
      },
      "286": {
        start: {
          line: 843,
          column: 28
        },
        end: {
          line: 843,
          column: 48
        }
      },
      "287": {
        start: {
          line: 844,
          column: 16
        },
        end: {
          line: 849,
          column: 18
        }
      },
      "288": {
        start: {
          line: 852,
          column: 8
        },
        end: {
          line: 852,
          column: 21
        }
      },
      "289": {
        start: {
          line: 858,
          column: 8
        },
        end: {
          line: 858,
          column: 35
        }
      },
      "290": {
        start: {
          line: 859,
          column: 8
        },
        end: {
          line: 859,
          column: 37
        }
      },
      "291": {
        start: {
          line: 860,
          column: 8
        },
        end: {
          line: 860,
          column: 40
        }
      },
      "292": {
        start: {
          line: 861,
          column: 8
        },
        end: {
          line: 861,
          column: 58
        }
      },
      "293": {
        start: {
          line: 867,
          column: 8
        },
        end: {
          line: 880,
          column: 10
        }
      },
      "294": {
        start: {
          line: 883,
          column: 0
        },
        end: {
          line: 883,
          column: 48
        }
      },
      "295": {
        start: {
          line: 885,
          column: 0
        },
        end: {
          line: 885,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 96
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 30
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 56
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 115
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 39
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 29
          }
        },
        loc: {
          start: {
            line: 148,
            column: 38
          },
          end: {
            line: 154,
            column: 9
          }
        },
        line: 148
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 156,
            column: 55
          },
          end: {
            line: 156,
            column: 56
          }
        },
        loc: {
          start: {
            line: 156,
            column: 66
          },
          end: {
            line: 171,
            column: 9
          }
        },
        line: 156
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 36
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 202
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 38
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 220
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 95
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 237
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 75
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 298
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 56
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 332
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 342,
            column: 28
          },
          end: {
            line: 342,
            column: 29
          }
        },
        loc: {
          start: {
            line: 342,
            column: 37
          },
          end: {
            line: 346,
            column: 9
          }
        },
        line: 342
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 355,
            column: 35
          },
          end: {
            line: 355,
            column: 36
          }
        },
        loc: {
          start: {
            line: 355,
            column: 44
          },
          end: {
            line: 359,
            column: 13
          }
        },
        line: 355
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 368,
            column: 33
          },
          end: {
            line: 368,
            column: 34
          }
        },
        loc: {
          start: {
            line: 368,
            column: 42
          },
          end: {
            line: 372,
            column: 13
          }
        },
        line: 368
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 39
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 389
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 393,
            column: 51
          },
          end: {
            line: 393,
            column: 52
          }
        },
        loc: {
          start: {
            line: 393,
            column: 69
          },
          end: {
            line: 393,
            column: 89
          }
        },
        line: 393
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 37
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 404
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 408,
            column: 49
          },
          end: {
            line: 408,
            column: 50
          }
        },
        loc: {
          start: {
            line: 408,
            column: 54
          },
          end: {
            line: 408,
            column: 63
          }
        },
        line: 408
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 410,
            column: 44
          },
          end: {
            line: 410,
            column: 45
          }
        },
        loc: {
          start: {
            line: 410,
            column: 56
          },
          end: {
            line: 410,
            column: 76
          }
        },
        line: 410
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 411,
            column: 44
          },
          end: {
            line: 411,
            column: 45
          }
        },
        loc: {
          start: {
            line: 411,
            column: 56
          },
          end: {
            line: 411,
            column: 76
          }
        },
        line: 411
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 417,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        loc: {
          start: {
            line: 417,
            column: 57
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 417
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 429,
            column: 47
          },
          end: {
            line: 429,
            column: 48
          }
        },
        loc: {
          start: {
            line: 429,
            column: 59
          },
          end: {
            line: 429,
            column: 110
          }
        },
        line: 429
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 445,
            column: 5
          }
        },
        loc: {
          start: {
            line: 445,
            column: 40
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 445
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 69
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 460
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 463,
            column: 50
          },
          end: {
            line: 463,
            column: 51
          }
        },
        loc: {
          start: {
            line: 463,
            column: 55
          },
          end: {
            line: 463,
            column: 73
          }
        },
        line: 463
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 470,
            column: 51
          },
          end: {
            line: 470,
            column: 52
          }
        },
        loc: {
          start: {
            line: 470,
            column: 56
          },
          end: {
            line: 470,
            column: 96
          }
        },
        line: 470
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 39
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 480
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 491,
            column: 4
          },
          end: {
            line: 491,
            column: 5
          }
        },
        loc: {
          start: {
            line: 491,
            column: 39
          },
          end: {
            line: 554,
            column: 5
          }
        },
        line: 491
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 533,
            column: 51
          },
          end: {
            line: 533,
            column: 52
          }
        },
        loc: {
          start: {
            line: 533,
            column: 59
          },
          end: {
            line: 533,
            column: 90
          }
        },
        line: 533
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 535,
            column: 59
          },
          end: {
            line: 535,
            column: 60
          }
        },
        loc: {
          start: {
            line: 535,
            column: 67
          },
          end: {
            line: 535,
            column: 93
          }
        },
        line: 535
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 558,
            column: 4
          },
          end: {
            line: 558,
            column: 5
          }
        },
        loc: {
          start: {
            line: 558,
            column: 55
          },
          end: {
            line: 579,
            column: 5
          }
        },
        line: 558
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 583,
            column: 4
          },
          end: {
            line: 583,
            column: 5
          }
        },
        loc: {
          start: {
            line: 583,
            column: 44
          },
          end: {
            line: 591,
            column: 5
          }
        },
        line: 583
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 595,
            column: 5
          }
        },
        loc: {
          start: {
            line: 595,
            column: 46
          },
          end: {
            line: 626,
            column: 5
          }
        },
        line: 595
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 612,
            column: 37
          },
          end: {
            line: 612,
            column: 38
          }
        },
        loc: {
          start: {
            line: 612,
            column: 50
          },
          end: {
            line: 624,
            column: 9
          }
        },
        line: 612
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 630,
            column: 4
          },
          end: {
            line: 630,
            column: 5
          }
        },
        loc: {
          start: {
            line: 630,
            column: 51
          },
          end: {
            line: 633,
            column: 5
          }
        },
        line: 630
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 637,
            column: 4
          },
          end: {
            line: 637,
            column: 5
          }
        },
        loc: {
          start: {
            line: 637,
            column: 36
          },
          end: {
            line: 646,
            column: 5
          }
        },
        line: 637
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 650,
            column: 4
          },
          end: {
            line: 650,
            column: 5
          }
        },
        loc: {
          start: {
            line: 650,
            column: 103
          },
          end: {
            line: 660,
            column: 5
          }
        },
        line: 650
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 659,
            column: 33
          },
          end: {
            line: 659,
            column: 34
          }
        },
        loc: {
          start: {
            line: 659,
            column: 45
          },
          end: {
            line: 659,
            column: 62
          }
        },
        line: 659
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 664,
            column: 4
          },
          end: {
            line: 664,
            column: 5
          }
        },
        loc: {
          start: {
            line: 664,
            column: 93
          },
          end: {
            line: 696,
            column: 5
          }
        },
        line: 664
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 666,
            column: 50
          },
          end: {
            line: 666,
            column: 51
          }
        },
        loc: {
          start: {
            line: 666,
            column: 70
          },
          end: {
            line: 693,
            column: 9
          }
        },
        line: 666
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 695,
            column: 30
          },
          end: {
            line: 695,
            column: 31
          }
        },
        loc: {
          start: {
            line: 695,
            column: 40
          },
          end: {
            line: 695,
            column: 55
          }
        },
        line: 695
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 700,
            column: 4
          },
          end: {
            line: 700,
            column: 5
          }
        },
        loc: {
          start: {
            line: 700,
            column: 46
          },
          end: {
            line: 715,
            column: 5
          }
        },
        line: 700
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 719,
            column: 4
          },
          end: {
            line: 719,
            column: 5
          }
        },
        loc: {
          start: {
            line: 719,
            column: 44
          },
          end: {
            line: 734,
            column: 5
          }
        },
        line: 719
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 738,
            column: 4
          },
          end: {
            line: 738,
            column: 5
          }
        },
        loc: {
          start: {
            line: 738,
            column: 48
          },
          end: {
            line: 753,
            column: 5
          }
        },
        line: 738
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 757,
            column: 4
          },
          end: {
            line: 757,
            column: 5
          }
        },
        loc: {
          start: {
            line: 757,
            column: 44
          },
          end: {
            line: 769,
            column: 5
          }
        },
        line: 757
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 773,
            column: 4
          },
          end: {
            line: 773,
            column: 5
          }
        },
        loc: {
          start: {
            line: 773,
            column: 63
          },
          end: {
            line: 785,
            column: 5
          }
        },
        line: 773
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 789,
            column: 4
          },
          end: {
            line: 789,
            column: 5
          }
        },
        loc: {
          start: {
            line: 789,
            column: 110
          },
          end: {
            line: 807,
            column: 5
          }
        },
        line: 789
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 811,
            column: 4
          },
          end: {
            line: 811,
            column: 5
          }
        },
        loc: {
          start: {
            line: 811,
            column: 27
          },
          end: {
            line: 815,
            column: 5
          }
        },
        line: 811
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 819,
            column: 4
          },
          end: {
            line: 819,
            column: 5
          }
        },
        loc: {
          start: {
            line: 819,
            column: 42
          },
          end: {
            line: 833,
            column: 5
          }
        },
        line: 819
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 837,
            column: 4
          },
          end: {
            line: 837,
            column: 5
          }
        },
        loc: {
          start: {
            line: 837,
            column: 26
          },
          end: {
            line: 853,
            column: 5
          }
        },
        line: 837
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 841,
            column: 43
          },
          end: {
            line: 841,
            column: 44
          }
        },
        loc: {
          start: {
            line: 841,
            column: 58
          },
          end: {
            line: 841,
            column: 68
          }
        },
        line: 841
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 857,
            column: 4
          },
          end: {
            line: 857,
            column: 5
          }
        },
        loc: {
          start: {
            line: 857,
            column: 18
          },
          end: {
            line: 862,
            column: 5
          }
        },
        line: 857
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 866,
            column: 4
          },
          end: {
            line: 866,
            column: 5
          }
        },
        loc: {
          start: {
            line: 866,
            column: 20
          },
          end: {
            line: 881,
            column: 5
          }
        },
        line: 866
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 58
          },
          end: {
            line: 33,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 33,
            column: 74
          },
          end: {
            line: 33,
            column: 76
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 78
          },
          end: {
            line: 33,
            column: 94
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 33,
            column: 92
          },
          end: {
            line: 33,
            column: 94
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 74
          },
          end: {
            line: 60,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 99
          },
          end: {
            line: 60,
            column: 112
          }
        }, {
          start: {
            line: 60,
            column: 115
          },
          end: {
            line: 60,
            column: 130
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 117,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 117,
            column: 23
          }
        }, {
          start: {
            line: 117,
            column: 27
          },
          end: {
            line: 117,
            column: 58
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 28
          },
          end: {
            line: 157,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 28
          },
          end: {
            line: 157,
            column: 58
          }
        }, {
          start: {
            line: 157,
            column: 62
          },
          end: {
            line: 157,
            column: 64
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "12": {
        loc: {
          start: {
            line: 227,
            column: 30
          },
          end: {
            line: 227,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 30
          },
          end: {
            line: 227,
            column: 69
          }
        }, {
          start: {
            line: 227,
            column: 73
          },
          end: {
            line: 227,
            column: 74
          }
        }],
        line: 227
      },
      "13": {
        loc: {
          start: {
            line: 229,
            column: 25
          },
          end: {
            line: 229,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 25
          },
          end: {
            line: 229,
            column: 59
          }
        }, {
          start: {
            line: 229,
            column: 63
          },
          end: {
            line: 229,
            column: 67
          }
        }],
        line: 229
      },
      "14": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "15": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "16": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "17": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 309,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 309,
            column: 32
          },
          end: {
            line: 309,
            column: 87
          }
        }, {
          start: {
            line: 309,
            column: 90
          },
          end: {
            line: 309,
            column: 92
          }
        }],
        line: 309
      },
      "18": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 310,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 36
          },
          end: {
            line: 310,
            column: 71
          }
        }, {
          start: {
            line: 310,
            column: 74
          },
          end: {
            line: 310,
            column: 76
          }
        }],
        line: 310
      },
      "19": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 311,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 36
          },
          end: {
            line: 311,
            column: 84
          }
        }, {
          start: {
            line: 311,
            column: 87
          },
          end: {
            line: 311,
            column: 89
          }
        }],
        line: 311
      },
      "20": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "21": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 319,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 319,
            column: 37
          }
        }, {
          start: {
            line: 319,
            column: 41
          },
          end: {
            line: 319,
            column: 87
          }
        }],
        line: 319
      },
      "22": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 345,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 345,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "23": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "24": {
        loc: {
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 348,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 348,
            column: 40
          }
        }, {
          start: {
            line: 348,
            column: 44
          },
          end: {
            line: 348,
            column: 70
          }
        }],
        line: 348
      },
      "25": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "26": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "27": {
        loc: {
          start: {
            line: 369,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "28": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "29": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "30": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "31": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "32": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "33": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "34": {
        loc: {
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 448,
            column: 43
          }
        }, {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 450,
            column: 51
          }
        }, {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 452,
            column: 44
          }
        }, {
          start: {
            line: 453,
            column: 12
          },
          end: {
            line: 454,
            column: 25
          }
        }],
        line: 446
      },
      "35": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 468,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 468,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "36": {
        loc: {
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 474,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 474,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      },
      "37": {
        loc: {
          start: {
            line: 471,
            column: 12
          },
          end: {
            line: 471,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 12
          },
          end: {
            line: 471,
            column: 26
          }
        }, {
          start: {
            line: 471,
            column: 30
          },
          end: {
            line: 471,
            column: 43
          }
        }, {
          start: {
            line: 471,
            column: 47
          },
          end: {
            line: 471,
            column: 85
          }
        }],
        line: 471
      },
      "38": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "39": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 481,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 481,
            column: 33
          }
        }, {
          start: {
            line: 481,
            column: 37
          },
          end: {
            line: 481,
            column: 60
          }
        }],
        line: 481
      },
      "40": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "41": {
        loc: {
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 509,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 509,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "42": {
        loc: {
          start: {
            line: 532,
            column: 31
          },
          end: {
            line: 533,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 31
          },
          end: {
            line: 532,
            column: 53
          }
        }, {
          start: {
            line: 533,
            column: 24
          },
          end: {
            line: 533,
            column: 91
          }
        }],
        line: 532
      },
      "43": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 610,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 603,
            column: 22
          }
        }, {
          start: {
            line: 604,
            column: 12
          },
          end: {
            line: 606,
            column: 22
          }
        }, {
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 609,
            column: 22
          }
        }],
        line: 600
      },
      "44": {
        loc: {
          start: {
            line: 613,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 614,
            column: 16
          },
          end: {
            line: 616,
            column: 26
          }
        }, {
          start: {
            line: 617,
            column: 16
          },
          end: {
            line: 619,
            column: 26
          }
        }, {
          start: {
            line: 620,
            column: 16
          },
          end: {
            line: 622,
            column: 26
          }
        }],
        line: 613
      },
      "45": {
        loc: {
          start: {
            line: 640,
            column: 8
          },
          end: {
            line: 642,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 640,
            column: 8
          },
          end: {
            line: 642,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 640
      },
      "46": {
        loc: {
          start: {
            line: 670,
            column: 94
          },
          end: {
            line: 670,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 670,
            column: 94
          },
          end: {
            line: 670,
            column: 119
          }
        }, {
          start: {
            line: 670,
            column: 123
          },
          end: {
            line: 670,
            column: 130
          }
        }],
        line: 670
      },
      "47": {
        loc: {
          start: {
            line: 671,
            column: 16
          },
          end: {
            line: 686,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 671,
            column: 16
          },
          end: {
            line: 686,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 671
      },
      "48": {
        loc: {
          start: {
            line: 671,
            column: 20
          },
          end: {
            line: 671,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 671,
            column: 20
          },
          end: {
            line: 671,
            column: 45
          }
        }, {
          start: {
            line: 671,
            column: 49
          },
          end: {
            line: 671,
            column: 86
          }
        }],
        line: 671
      },
      "49": {
        loc: {
          start: {
            line: 701,
            column: 8
          },
          end: {
            line: 713,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 701,
            column: 8
          },
          end: {
            line: 713,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 701
      },
      "50": {
        loc: {
          start: {
            line: 720,
            column: 8
          },
          end: {
            line: 732,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 720,
            column: 8
          },
          end: {
            line: 732,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 720
      },
      "51": {
        loc: {
          start: {
            line: 739,
            column: 8
          },
          end: {
            line: 751,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 739,
            column: 8
          },
          end: {
            line: 751,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 739
      },
      "52": {
        loc: {
          start: {
            line: 779,
            column: 29
          },
          end: {
            line: 779,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 779,
            column: 57
          },
          end: {
            line: 779,
            column: 59
          }
        }, {
          start: {
            line: 779,
            column: 62
          },
          end: {
            line: 779,
            column: 63
          }
        }],
        line: 779
      },
      "53": {
        loc: {
          start: {
            line: 780,
            column: 30
          },
          end: {
            line: 780,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 780,
            column: 59
          },
          end: {
            line: 780,
            column: 61
          }
        }, {
          start: {
            line: 780,
            column: 64
          },
          end: {
            line: 780,
            column: 65
          }
        }],
        line: 780
      },
      "54": {
        loc: {
          start: {
            line: 781,
            column: 30
          },
          end: {
            line: 781,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 781,
            column: 59
          },
          end: {
            line: 781,
            column: 61
          }
        }, {
          start: {
            line: 781,
            column: 64
          },
          end: {
            line: 781,
            column: 65
          }
        }],
        line: 781
      },
      "55": {
        loc: {
          start: {
            line: 820,
            column: 8
          },
          end: {
            line: 822,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 820,
            column: 8
          },
          end: {
            line: 822,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 820
      },
      "56": {
        loc: {
          start: {
            line: 826,
            column: 8
          },
          end: {
            line: 828,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 826,
            column: 8
          },
          end: {
            line: 828,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 826
      },
      "57": {
        loc: {
          start: {
            line: 830,
            column: 8
          },
          end: {
            line: 832,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 830,
            column: 8
          },
          end: {
            line: 832,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 830
      },
      "58": {
        loc: {
          start: {
            line: 840,
            column: 12
          },
          end: {
            line: 850,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 840,
            column: 12
          },
          end: {
            line: 850,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 840
      },
      "59": {
        loc: {
          start: {
            line: 871,
            column: 25
          },
          end: {
            line: 872,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 872,
            column: 20
          },
          end: {
            line: 872,
            column: 117
          }
        }, {
          start: {
            line: 872,
            column: 120
          },
          end: {
            line: 872,
            column: 121
          }
        }],
        line: 871
      },
      "60": {
        loc: {
          start: {
            line: 877,
            column: 25
          },
          end: {
            line: 878,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 878,
            column: 20
          },
          end: {
            line: 878,
            column: 123
          }
        }, {
          start: {
            line: 878,
            column: 126
          },
          end: {
            line: 878,
            column: 127
          }
        }],
        line: 877
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0, 0],
      "44": [0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/optimization/OptimizationEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/optimization/OptimizationEngine.ts"],
      sourcesContent: ["import { llmService } from '../llmService';\nimport { promptAnalyzer, PromptAnalysisResult } from './PromptAnalyzer';\nimport { EventStore } from '../analytics/EventStore';\nimport { EnhancedAssertionType } from '../assertions/AssertionEngine';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\nimport { Worker } from 'worker_threads';\nimport { promisify } from 'util';\nimport { createHash } from 'crypto';\n\nexport interface OptimizationSuggestion {\n  id: string;\n  originalPrompt: string;\n  optimizedPrompt: string;\n  changes: {\n    type: 'structure' | 'clarity' | 'specificity' | 'context' | 'security';\n    description: string;\n    reasoning: string;\n  }[];\n  expectedImprovement: {\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  };\n  confidence: number; // 0-1\n  securityValidation: {\n    passed: boolean;\n    issues: string[];\n    recommendations: string[];\n  };\n  timestamp: Date;\n}\n\nexport interface ABTestConfiguration {\n  id: string;\n  name: string;\n  variants: {\n    id: string;\n    name: string;\n    prompt: string;\n    weight: number; // Traffic allocation percentage\n  }[];\n  metrics: {\n    primaryMetric: 'success_rate' | 'response_time' | 'quality_score';\n    secondaryMetrics: string[];\n  };\n  duration: {\n    startDate: Date;\n    endDate: Date;\n    minSamples: number;\n  };\n  status: 'draft' | 'running' | 'completed' | 'paused';\n  results?: ABTestResult;\n}\n\nexport interface ABTestResult {\n  testId: string;\n  winner: string | null;\n  confidence: number;\n  statisticalSignificance: boolean;\n  variants: {\n    id: string;\n    name: string;\n    metrics: {\n      successRate: number;\n      responseTime: number;\n      qualityScore: number;\n      sampleSize: number;\n    };\n    performanceComparison: {\n      vsControl: number; // Percentage improvement/degradation\n      pValue: number;\n    };\n  }[];\n  insights: string[];\n  recommendations: string[];\n  completedAt: Date;\n}\n\nexport interface PromptTuningConfiguration {\n  id: string;\n  originalPrompt: string;\n  objectives: {\n    primary: 'success_rate' | 'response_time' | 'quality_score';\n    secondary: string[];\n  };\n  constraints: {\n    maxLength: number;\n    requiredKeywords: string[];\n    prohibitedKeywords: string[];\n    securityLevel: 'basic' | 'enhanced' | 'strict';\n  };\n  iterations: number;\n  samplingStrategy: 'random' | 'evolutionary' | 'gradient_based';\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  results?: PromptTuningResult;\n}\n\nexport interface PromptTuningResult {\n  tuningId: string;\n  iterations: {\n    iteration: number;\n    prompt: string;\n    metrics: {\n      successRate: number;\n      responseTime: number;\n      qualityScore: number;\n    };\n    improvements: number; // Percentage improvement over baseline\n    timestamp: Date;\n  }[];\n  bestPrompt: string;\n  finalMetrics: {\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  };\n  totalImprovement: number;\n  convergenceAnalysis: {\n    converged: boolean;\n    stagnationPoint: number;\n    optimalIteration: number;\n  };\n  completedAt: Date;\n}\n\nexport class OptimizationEngine {\n  private eventStore: EventStore;\n  private runningTests: Map<string, ABTestConfiguration>;\n  private runningTuning: Map<string, PromptTuningConfiguration>;\n  private analysisCache: LRUCache<string, PromptAnalysisResult>;\n  private suggestionCache: LRUCache<string, OptimizationSuggestion[]>;\n  private performanceMetrics: Map<string, number[]>;\n  private workerPool: Worker[];\n  private maxWorkers: number;\n  \n  constructor() {\n    this.eventStore = EventStore.getInstance();\n    this.runningTests = new Map();\n    this.runningTuning = new Map();\n    \n    // Initialize caching for better performance\n    this.analysisCache = new LRUCache({\n      max: 500,\n      ttl: 1000 * 60 * 30 // 30 minutes\n    });\n    \n    this.suggestionCache = new LRUCache({\n      max: 200,\n      ttl: 1000 * 60 * 15 // 15 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.maxWorkers = Math.min(4, require('os').cpus().length);\n    this.workerPool = [];\n    \n    // Initialize worker pool for parallel processing\n    this.initializeWorkerPool();\n  }\n\n  /**\n   * Generate AI-powered optimization suggestions for a prompt\n   */\n  async generateOptimizationSuggestions(\n    originalPrompt: string,\n    targetMetrics: {\n      successRate?: number;\n      responseTime?: number;\n      qualityScore?: number;\n    } = {},\n    constraints: {\n      maxLength?: number;\n      maintainStyle?: boolean;\n      securityLevel?: 'basic' | 'enhanced' | 'strict';\n    } = {}\n  ): Promise<OptimizationSuggestion[]> {\n    const startTime = performance.now();\n    const cacheKey = this.generateCacheKey(originalPrompt, targetMetrics, constraints);\n    \n    // Check cache first\n    const cached = this.suggestionCache.get(cacheKey);\n    if (cached) {\n      this.trackPerformance('generateOptimizationSuggestions', performance.now() - startTime);\n      return cached;\n    }\n    \n    const suggestionId = `opt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Analyze current prompt with caching\n      const analysis = await this.getCachedAnalysis(originalPrompt);\n      \n      // Generate multiple optimization strategies in parallel\n      const strategies = await this.generateOptimizationStrategiesParallel(\n        originalPrompt, \n        analysis, \n        targetMetrics, \n        constraints\n      );\n      \n      // Process strategies in parallel using worker pool\n      const suggestions = await this.processStrategiesInParallel(\n        originalPrompt,\n        strategies,\n        constraints,\n        suggestionId\n      );\n      \n      // Store suggestions (async, don't wait)\n      this.storeOptimizationSuggestions(suggestionId, originalPrompt, suggestions, targetMetrics, constraints);\n      \n      // Cache results\n      this.suggestionCache.set(cacheKey, suggestions);\n      \n      // Track performance\n      this.trackPerformance('generateOptimizationSuggestions', performance.now() - startTime);\n      \n      return suggestions;\n    } catch (error) {\n      console.error('Error generating optimization suggestions:', error);\n      throw new Error(`Optimization suggestion generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Create and start an A/B test for prompt variants\n   */\n  async createABTest(\n    config: Omit<ABTestConfiguration, 'id' | 'status'>\n  ): Promise<ABTestConfiguration> {\n    const testId = `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const testConfig: ABTestConfiguration = {\n      ...config,\n      id: testId,\n      status: 'draft'\n    };\n    \n    // Validate test configuration\n    await this.validateABTestConfig(testConfig);\n    \n    // Security validation for all variants\n    for (const variant of testConfig.variants) {\n      const securityValidation = await this.validatePromptSecurity(variant.prompt, 'enhanced');\n      if (!securityValidation.passed) {\n        throw new Error(`Security validation failed for variant ${variant.name}: ${securityValidation.issues.join(', ')}`);\n      }\n    }\n    \n    // Store test configuration\n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_created',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: testConfig,\n      timestamp: new Date()\n    });\n    \n    this.runningTests.set(testId, testConfig);\n    \n    return testConfig;\n  }\n\n  /**\n   * Start an A/B test\n   */\n  async startABTest(testId: string): Promise<void> {\n    const testConfig = this.runningTests.get(testId);\n    if (!testConfig) {\n      throw new Error(`A/B test ${testId} not found`);\n    }\n    \n    testConfig.status = 'running';\n    testConfig.duration.startDate = new Date();\n    \n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_started',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: testConfig,\n      timestamp: new Date()\n    });\n    \n    console.log(`A/B test ${testId} started`);\n  }\n\n  /**\n   * Record A/B test execution result\n   */\n  async recordABTestResult(\n    testId: string,\n    variantId: string,\n    result: {\n      responseTime: number;\n      success: boolean;\n      qualityScore: number;\n      metadata?: any;\n    }\n  ): Promise<void> {\n    const testConfig = this.runningTests.get(testId);\n    if (!testConfig || testConfig.status !== 'running') {\n      throw new Error(`A/B test ${testId} is not running`);\n    }\n    \n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_result',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: {\n        testId,\n        variantId,\n        result,\n        timestamp: new Date()\n      },\n      timestamp: new Date()\n    });\n  }\n\n  /**\n   * Analyze A/B test results and determine winner\n   */\n  async analyzeABTestResults(testId: string): Promise<ABTestResult> {\n    const testConfig = this.runningTests.get(testId);\n    if (!testConfig) {\n      throw new Error(`A/B test ${testId} not found`);\n    }\n    \n    // Get all test results\n    const testResults = await this.eventStore.getEvents({\n      event_type: 'ab_test_result',\n      entity_id: testId\n    });\n    \n    // Group results by variant\n    const variantResults = new Map<string, any[]>();\n    testResults.forEach(result => {\n      const variantId = result.data.variantId;\n      if (!variantResults.has(variantId)) {\n        variantResults.set(variantId, []);\n      }\n      variantResults.get(variantId)!.push(result.data.result);\n    });\n    \n    // Calculate metrics for each variant\n    const variantMetrics = testConfig.variants.map(variant => {\n      const results = variantResults.get(variant.id) || [];\n      const metrics = this.calculateVariantMetrics(results);\n      \n      return {\n        id: variant.id,\n        name: variant.name,\n        metrics: {\n          ...metrics,\n          sampleSize: results.length\n        },\n        performanceComparison: {\n          vsControl: 0, // Will be calculated below\n          pValue: 0     // Will be calculated below\n        }\n      };\n    });\n    \n    // Determine winner using statistical significance\n    const winner = this.determineABTestWinner(variantMetrics, testConfig.metrics.primaryMetric);\n    \n    // Generate insights\n    const insights = await this.generateABTestInsights(testConfig, variantMetrics, winner);\n    \n    const result: ABTestResult = {\n      testId,\n      winner: winner.id,\n      confidence: winner.confidence,\n      statisticalSignificance: winner.significanceLevel > 0.95,\n      variants: variantMetrics,\n      insights,\n      recommendations: winner.recommendations,\n      completedAt: new Date()\n    };\n    \n    // Store results\n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_completed',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: result,\n      timestamp: new Date()\n    });\n    \n    // Update test status\n    testConfig.status = 'completed';\n    testConfig.results = result;\n    \n    return result;\n  }\n\n  /**\n   * Start automated prompt tuning\n   */\n  async startPromptTuning(\n    config: Omit<PromptTuningConfiguration, 'id' | 'status'>\n  ): Promise<PromptTuningConfiguration> {\n    const tuningId = `tuning_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const tuningConfig: PromptTuningConfiguration = {\n      ...config,\n      id: tuningId,\n      status: 'pending'\n    };\n    \n    // Validate configuration\n    await this.validateTuningConfig(tuningConfig);\n    \n    // Start tuning process\n    this.runningTuning.set(tuningId, tuningConfig);\n    \n    // Run tuning in background\n    this.executeTuningProcess(tuningConfig);\n    \n    return tuningConfig;\n  }\n\n  /**\n   * Get tuning progress\n   */\n  async getTuningProgress(tuningId: string): Promise<{\n    status: string;\n    currentIteration: number;\n    totalIterations: number;\n    bestMetrics: any;\n    estimatedCompletion: Date;\n  }> {\n    const tuningConfig = this.runningTuning.get(tuningId);\n    if (!tuningConfig) {\n      throw new Error(`Tuning process ${tuningId} not found`);\n    }\n    \n    const progress = {\n      status: tuningConfig.status,\n      currentIteration: tuningConfig.results?.iterations.length || 0,\n      totalIterations: tuningConfig.iterations,\n      bestMetrics: tuningConfig.results?.finalMetrics || null,\n      estimatedCompletion: new Date(Date.now() + 60000) // Placeholder\n    };\n    \n    return progress;\n  }\n\n  /**\n   * Generate optimization strategies\n   */\n  private async generateOptimizationStrategies(\n    originalPrompt: string,\n    analysis: PromptAnalysisResult,\n    targetMetrics: any,\n    constraints: any\n  ): Promise<any[]> {\n    const strategies = [];\n    \n    // Structure optimization\n    if (analysis.effectiveness.score < 70) {\n      strategies.push({\n        type: 'structure' as const,\n        description: 'Improve prompt structure and organization',\n        reasoning: 'Current prompt lacks clear structure and logical flow',\n        expectedImprovement: {\n          successRate: 15,\n          responseTime: 5,\n          qualityScore: 10\n        },\n        confidence: 0.8\n      });\n    }\n    \n    // Clarity optimization\n    if (analysis.patterns.failurePatterns.length > 0) {\n      strategies.push({\n        type: 'clarity' as const,\n        description: 'Enhance prompt clarity and reduce ambiguity',\n        reasoning: 'Failure patterns indicate confusion or misunderstanding',\n        expectedImprovement: {\n          successRate: 20,\n          responseTime: 0,\n          qualityScore: 15\n        },\n        confidence: 0.7\n      });\n    }\n    \n    // Specificity optimization\n    if (analysis.metrics.consistencyScore < 60) {\n      strategies.push({\n        type: 'specificity' as const,\n        description: 'Add more specific instructions and examples',\n        reasoning: 'Low consistency score indicates need for more specific guidance',\n        expectedImprovement: {\n          successRate: 10,\n          responseTime: -5,\n          qualityScore: 20\n        },\n        confidence: 0.9\n      });\n    }\n    \n    // Context optimization\n    strategies.push({\n      type: 'context' as const,\n      description: 'Optimize context and background information',\n      reasoning: 'Enhanced context can improve response quality',\n      expectedImprovement: {\n        successRate: 8,\n        responseTime: 2,\n        qualityScore: 12\n      },\n      confidence: 0.6\n    });\n    \n    return strategies;\n  }\n\n  /**\n   * Apply optimization strategy to prompt\n   */\n  private async applyOptimizationStrategy(\n    originalPrompt: string,\n    strategy: any,\n    constraints: any\n  ): Promise<string> {\n    const optimizationPrompt = `\n      Optimize this prompt based on the following strategy:\n      \n      Original Prompt: \"${originalPrompt}\"\n      \n      Strategy: ${strategy.type}\n      Description: ${strategy.description}\n      Reasoning: ${strategy.reasoning}\n      \n      Constraints:\n      ${constraints.maxLength ? `- Maximum length: ${constraints.maxLength} characters` : ''}\n      ${constraints.maintainStyle ? '- Maintain original writing style' : ''}\n      ${constraints.securityLevel ? `- Security level: ${constraints.securityLevel}` : ''}\n      \n      Return only the optimized prompt without any additional text or explanations.\n    `;\n    \n    try {\n      const response = await llmService.generate(optimizationPrompt);\n      let optimizedPrompt = response.response.trim();\n      \n      // Apply length constraint\n      if (constraints.maxLength && optimizedPrompt.length > constraints.maxLength) {\n        optimizedPrompt = optimizedPrompt.substring(0, constraints.maxLength);\n      }\n      \n      return optimizedPrompt;\n    } catch (error) {\n      console.error('Error applying optimization strategy:', error);\n      return originalPrompt; // Return original if optimization fails\n    }\n  }\n\n  /**\n   * Validate prompt security\n   */\n  private async validatePromptSecurity(\n    prompt: string,\n    securityLevel: 'basic' | 'enhanced' | 'strict'\n  ): Promise<{\n    passed: boolean;\n    issues: string[];\n    recommendations: string[];\n  }> {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    \n    // Basic security checks\n    const basicIssues = [\n      { pattern: /ignore.*instructions/i, message: 'Potential instruction bypass' },\n      { pattern: /system.*prompt/i, message: 'System prompt manipulation' },\n      { pattern: /jailbreak/i, message: 'Jailbreak attempt' },\n      { pattern: /password|api.*key|secret/i, message: 'Sensitive information exposure' }\n    ];\n    \n    basicIssues.forEach(check => {\n      if (check.pattern.test(prompt)) {\n        issues.push(check.message);\n      }\n    });\n    \n    // Enhanced security checks\n    if (securityLevel === 'enhanced' || securityLevel === 'strict') {\n      const enhancedIssues = [\n        { pattern: /role.*play/i, message: 'Role-playing instruction' },\n        { pattern: /pretend/i, message: 'Pretend instruction' },\n        { pattern: /act.*as/i, message: 'Acting instruction' },\n        { pattern: /override/i, message: 'Override instruction' }\n      ];\n      \n      enhancedIssues.forEach(check => {\n        if (check.pattern.test(prompt)) {\n          issues.push(check.message);\n        }\n      });\n    }\n    \n    // Strict security checks\n    if (securityLevel === 'strict') {\n      const strictIssues = [\n        { pattern: /you.*must/i, message: 'Imperative instruction' },\n        { pattern: /required.*to/i, message: 'Requirement instruction' },\n        { pattern: /force|compel/i, message: 'Forceful instruction' }\n      ];\n      \n      strictIssues.forEach(check => {\n        if (check.pattern.test(prompt)) {\n          issues.push(check.message);\n        }\n      });\n    }\n    \n    // Generate recommendations\n    if (issues.length > 0) {\n      recommendations.push('Review and sanitize identified security issues');\n      recommendations.push('Use more neutral and instructional language');\n      recommendations.push('Avoid manipulative or coercive phrasing');\n    }\n    \n    return {\n      passed: issues.length === 0,\n      issues,\n      recommendations\n    };\n  }\n\n  /**\n   * Validate A/B test configuration\n   */\n  private async validateABTestConfig(config: ABTestConfiguration): Promise<void> {\n    if (config.variants.length < 2) {\n      throw new Error('A/B test must have at least 2 variants');\n    }\n    \n    const totalWeight = config.variants.reduce((sum, variant) => sum + variant.weight, 0);\n    if (Math.abs(totalWeight - 100) > 0.1) {\n      throw new Error('Variant weights must sum to 100%');\n    }\n    \n    if (config.duration.endDate <= config.duration.startDate) {\n      throw new Error('End date must be after start date');\n    }\n  }\n\n  /**\n   * Calculate metrics for variant results\n   */\n  private calculateVariantMetrics(results: any[]): {\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  } {\n    if (results.length === 0) {\n      return { successRate: 0, responseTime: 0, qualityScore: 0 };\n    }\n    \n    const successfulResults = results.filter(r => r.success);\n    const successRate = (successfulResults.length / results.length) * 100;\n    const responseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;\n    const qualityScore = results.reduce((sum, r) => sum + r.qualityScore, 0) / results.length;\n    \n    return { successRate, responseTime, qualityScore };\n  }\n\n  /**\n   * Determine A/B test winner\n   */\n  private determineABTestWinner(\n    variantMetrics: any[],\n    primaryMetric: string\n  ): {\n    id: string;\n    confidence: number;\n    significanceLevel: number;\n    recommendations: string[];\n  } {\n    // Simple winner determination based on primary metric\n    let bestVariant = variantMetrics[0];\n    let bestScore = this.getMetricValue(bestVariant.metrics, primaryMetric);\n    \n    for (const variant of variantMetrics) {\n      const score = this.getMetricValue(variant.metrics, primaryMetric);\n      if (score > bestScore) {\n        bestScore = score;\n        bestVariant = variant;\n      }\n    }\n    \n    // Calculate confidence (simplified)\n    const avgScore = variantMetrics.reduce((sum, v) => sum + this.getMetricValue(v.metrics, primaryMetric), 0) / variantMetrics.length;\n    const confidence = Math.min(1, (bestScore - avgScore) / avgScore);\n    \n    return {\n      id: bestVariant.id,\n      confidence,\n      significanceLevel: 0.95, // Simplified\n      recommendations: [\n        `Implement ${bestVariant.name} as the winning variant`,\n        `Monitor performance for ${primaryMetric} improvements`,\n        'Consider running follow-up tests for further optimization'\n      ]\n    };\n  }\n\n  /**\n   * Get metric value by name\n   */\n  private getMetricValue(metrics: any, metricName: string): number {\n    switch (metricName) {\n      case 'success_rate':\n        return metrics.successRate;\n      case 'response_time':\n        return 1000 / metrics.responseTime; // Invert for \"higher is better\"\n      case 'quality_score':\n        return metrics.qualityScore;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Generate A/B test insights\n   */\n  private async generateABTestInsights(\n    testConfig: ABTestConfiguration,\n    variantMetrics: any[],\n    winner: any\n  ): Promise<string[]> {\n    const insights: string[] = [];\n    \n    // Performance insights\n    const winnerMetrics = variantMetrics.find(v => v.id === winner.id);\n    if (winnerMetrics) {\n      insights.push(`${winnerMetrics.name} achieved ${winnerMetrics.metrics.successRate.toFixed(1)}% success rate`);\n      insights.push(`Response time was ${winnerMetrics.metrics.responseTime.toFixed(0)}ms on average`);\n      insights.push(`Quality score reached ${winnerMetrics.metrics.qualityScore.toFixed(1)}`);\n    }\n    \n    // Comparative insights\n    const controlVariant = variantMetrics.find(v => v.name.toLowerCase().includes('control'));\n    if (controlVariant && winnerMetrics && winnerMetrics.id !== controlVariant.id) {\n      const improvement = ((winnerMetrics.metrics.successRate - controlVariant.metrics.successRate) / controlVariant.metrics.successRate) * 100;\n      insights.push(`Winner shows ${improvement.toFixed(1)}% improvement over control`);\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Validate tuning configuration\n   */\n  private async validateTuningConfig(config: PromptTuningConfiguration): Promise<void> {\n    if (config.iterations < 1 || config.iterations > 100) {\n      throw new Error('Iterations must be between 1 and 100');\n    }\n    \n    if (config.constraints.maxLength < 10) {\n      throw new Error('Maximum length must be at least 10 characters');\n    }\n  }\n\n  /**\n   * Execute tuning process\n   */\n  private async executeTuningProcess(config: PromptTuningConfiguration): Promise<void> {\n    try {\n      config.status = 'running';\n      \n      const iterations: PromptTuningResult['iterations'] = [];\n      let currentPrompt = config.originalPrompt;\n      let bestPrompt = currentPrompt;\n      let bestScore = 0;\n      \n      for (let i = 0; i < config.iterations; i++) {\n        // Generate variant\n        const variant = await this.generatePromptVariant(currentPrompt, config);\n        \n        // Test variant\n        const metrics = await this.testPromptVariant(variant, config);\n        \n        // Calculate score\n        const score = this.calculateTuningScore(metrics, config.objectives);\n        \n        // Update best if better\n        if (score > bestScore) {\n          bestScore = score;\n          bestPrompt = variant;\n        }\n        \n        // Record iteration\n        iterations.push({\n          iteration: i + 1,\n          prompt: variant,\n          metrics,\n          improvements: ((score - bestScore) / bestScore) * 100,\n          timestamp: new Date()\n        });\n        \n        // Update current prompt for next iteration\n        currentPrompt = variant;\n      }\n      \n      // Calculate final results\n      const finalMetrics = iterations[iterations.length - 1].metrics;\n      const baselineScore = this.calculateTuningScore(\n        { successRate: 50, responseTime: 1000, qualityScore: 50 },\n        config.objectives\n      );\n      const totalImprovement = ((bestScore - baselineScore) / baselineScore) * 100;\n      \n      const result: PromptTuningResult = {\n        tuningId: config.id,\n        iterations,\n        bestPrompt,\n        finalMetrics,\n        totalImprovement,\n        convergenceAnalysis: {\n          converged: iterations.length >= 5 && \n                    iterations.slice(-5).every(iter => Math.abs(iter.improvements) < 1),\n          stagnationPoint: iterations.length,\n          optimalIteration: iterations.findIndex(iter => iter.prompt === bestPrompt) + 1\n        },\n        completedAt: new Date()\n      };\n      \n      config.status = 'completed';\n      config.results = result;\n      \n      // Store results\n      await this.eventStore.recordEvent({\n        event_type: 'tuning_completed',\n        entity_id: config.id,\n        entity_type: 'tuning',\n        data: result,\n        timestamp: new Date()\n      });\n      \n    } catch (error) {\n      config.status = 'failed';\n      console.error('Tuning process failed:', error);\n    }\n  }\n\n  /**\n   * Generate prompt variant for tuning\n   */\n  private async generatePromptVariant(\n    currentPrompt: string,\n    config: PromptTuningConfiguration\n  ): Promise<string> {\n    const variationPrompt = `\n      Create a variation of this prompt that improves ${config.objectives.primary}:\n      \n      Current Prompt: \"${currentPrompt}\"\n      \n      Constraints:\n      - Maximum length: ${config.constraints.maxLength} characters\n      - Must include: ${config.constraints.requiredKeywords.join(', ')}\n      - Must not include: ${config.constraints.prohibitedKeywords.join(', ')}\n      \n      Return only the improved prompt without explanations.\n    `;\n    \n    try {\n      const response = await llmService.generate(variationPrompt);\n      return response.response.trim();\n    } catch (error) {\n      console.error('Error generating prompt variant:', error);\n      return currentPrompt; // Return original if generation fails\n    }\n  }\n\n  /**\n   * Test prompt variant\n   */\n  private async testPromptVariant(\n    prompt: string,\n    config: PromptTuningConfiguration\n  ): Promise<{\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  }> {\n    // Simplified testing - in real implementation, use actual test cases\n    const mockMetrics = {\n      successRate: 70 + Math.random() * 25,\n      responseTime: 800 + Math.random() * 400,\n      qualityScore: 60 + Math.random() * 30\n    };\n    \n    return mockMetrics;\n  }\n\n  /**\n   * Calculate tuning score\n   */\n  private calculateTuningScore(\n    metrics: { successRate: number; responseTime: number; qualityScore: number },\n    objectives: PromptTuningConfiguration['objectives']\n  ): number {\n    const primaryWeight = 0.6;\n    const secondaryWeight = 0.4 / objectives.secondary.length;\n    \n    let score = 0;\n    \n    // Primary objective\n    switch (objectives.primary) {\n      case 'success_rate':\n        score += metrics.successRate * primaryWeight;\n        break;\n      case 'response_time':\n        score += (1000 / metrics.responseTime) * primaryWeight;\n        break;\n      case 'quality_score':\n        score += metrics.qualityScore * primaryWeight;\n        break;\n    }\n    \n    // Secondary objectives\n    objectives.secondary.forEach(objective => {\n      switch (objective) {\n        case 'success_rate':\n          score += metrics.successRate * secondaryWeight;\n          break;\n        case 'response_time':\n          score += (1000 / metrics.responseTime) * secondaryWeight;\n          break;\n        case 'quality_score':\n          score += metrics.qualityScore * secondaryWeight;\n          break;\n      }\n    });\n    \n    return score;\n  }\n  \n  /**\n   * Generate cache key for optimization suggestions\n   */\n  private generateCacheKey(prompt: string, metrics: any, constraints: any): string {\n    const content = `${prompt}${JSON.stringify(metrics)}${JSON.stringify(constraints)}`;\n    return createHash('md5').update(content).digest('hex');\n  }\n  \n  /**\n   * Get cached prompt analysis\n   */\n  private async getCachedAnalysis(prompt: string): Promise<PromptAnalysisResult> {\n    const cacheKey = createHash('md5').update(prompt).digest('hex');\n    const cached = this.analysisCache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n    \n    const analysis = await promptAnalyzer.analyzePrompt('temp_prompt', prompt);\n    this.analysisCache.set(cacheKey, analysis);\n    \n    return analysis;\n  }\n  \n  /**\n   * Generate optimization strategies in parallel\n   */\n  private async generateOptimizationStrategiesParallel(\n    originalPrompt: string,\n    analysis: PromptAnalysisResult,\n    targetMetrics: any,\n    constraints: any\n  ): Promise<any[]> {\n    const strategyPromises = [\n      this.generateStructureStrategy(analysis),\n      this.generateClarityStrategy(analysis),\n      this.generateSpecificityStrategy(analysis),\n      this.generateContextStrategy(analysis),\n      this.generatePerformanceStrategy(analysis, targetMetrics)\n    ];\n    \n    const strategies = await Promise.all(strategyPromises);\n    return strategies.filter(strategy => strategy !== null);\n  }\n  \n  /**\n   * Process strategies in parallel using worker pool\n   */\n  private async processStrategiesInParallel(\n    originalPrompt: string,\n    strategies: any[],\n    constraints: any,\n    suggestionId: string\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n    const processingPromises = strategies.map(async (strategy) => {\n      try {\n        const optimizedPrompt = await this.applyOptimizationStrategy(\n          originalPrompt, \n          strategy, \n          constraints\n        );\n        \n        // Security validation\n        const securityValidation = await this.validatePromptSecurity(\n          optimizedPrompt, \n          constraints.securityLevel || 'basic'\n        );\n        \n        if (securityValidation.passed || constraints.securityLevel === 'basic') {\n          return {\n            id: `${suggestionId}_${strategy.type}`,\n            originalPrompt,\n            optimizedPrompt,\n            changes: [{\n              type: strategy.type,\n              description: strategy.description,\n              reasoning: strategy.reasoning\n            }],\n            expectedImprovement: strategy.expectedImprovement,\n            confidence: strategy.confidence,\n            securityValidation,\n            timestamp: new Date()\n          };\n        }\n        \n        return null;\n      } catch (error) {\n        console.warn(`Strategy ${strategy.type} failed:`, error.message);\n        return null;\n      }\n    });\n    \n    const results = await Promise.all(processingPromises);\n    return results.filter(result => result !== null);\n  }\n  \n  /**\n   * Generate structure optimization strategy\n   */\n  private async generateStructureStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    if (analysis.effectiveness.score < 70) {\n      return {\n        type: 'structure' as const,\n        description: 'Improve prompt structure and organization',\n        reasoning: 'Current prompt lacks clear structure and logical flow',\n        expectedImprovement: {\n          successRate: 15,\n          responseTime: 5,\n          qualityScore: 10\n        },\n        confidence: 0.8\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Generate clarity optimization strategy\n   */\n  private async generateClarityStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    if (analysis.patterns.failurePatterns.length > 0) {\n      return {\n        type: 'clarity' as const,\n        description: 'Enhance prompt clarity and reduce ambiguity',\n        reasoning: 'Failure patterns indicate confusion or misunderstanding',\n        expectedImprovement: {\n          successRate: 20,\n          responseTime: 0,\n          qualityScore: 15\n        },\n        confidence: 0.7\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Generate specificity optimization strategy\n   */\n  private async generateSpecificityStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    if (analysis.metrics.consistencyScore < 60) {\n      return {\n        type: 'specificity' as const,\n        description: 'Add more specific instructions and examples',\n        reasoning: 'Low consistency score indicates need for more specific guidance',\n        expectedImprovement: {\n          successRate: 10,\n          responseTime: -5,\n          qualityScore: 20\n        },\n        confidence: 0.9\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Generate context optimization strategy\n   */\n  private async generateContextStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    return {\n      type: 'context' as const,\n      description: 'Optimize context and background information',\n      reasoning: 'Enhanced context can improve response quality',\n      expectedImprovement: {\n        successRate: 8,\n        responseTime: 2,\n        qualityScore: 12\n      },\n      confidence: 0.6\n    };\n  }\n  \n  /**\n   * Generate performance optimization strategy\n   */\n  private async generatePerformanceStrategy(analysis: PromptAnalysisResult, targetMetrics: any): Promise<any> {\n    return {\n      type: 'performance' as const,\n      description: 'Optimize for better response time and quality',\n      reasoning: 'Target specific performance improvements',\n      expectedImprovement: {\n        successRate: targetMetrics.successRate ? 10 : 5,\n        responseTime: targetMetrics.responseTime ? 15 : 8,\n        qualityScore: targetMetrics.qualityScore ? 12 : 6\n      },\n      confidence: 0.7\n    };\n  }\n  \n  /**\n   * Store optimization suggestions asynchronously\n   */\n  private async storeOptimizationSuggestions(\n    suggestionId: string,\n    originalPrompt: string,\n    suggestions: OptimizationSuggestion[],\n    targetMetrics: any,\n    constraints: any\n  ): Promise<void> {\n    try {\n      await this.eventStore.recordEvent({\n        event_type: 'optimization_suggestions',\n        entity_id: suggestionId,\n        entity_type: 'prompt',\n        data: {\n          originalPrompt,\n          suggestions,\n          targetMetrics,\n          constraints\n        },\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.warn('Failed to store optimization suggestions:', error.message);\n    }\n  }\n  \n  /**\n   * Initialize worker pool for parallel processing\n   */\n  private initializeWorkerPool(): void {\n    // Worker pool implementation would go here\n    // For now, we'll use Promise.all for parallel processing\n    console.log(`Initialized optimization engine with ${this.maxWorkers} workers`);\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 30000) { // 30 seconds\n      console.warn(`Slow optimization operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg),\n          max: Math.round(max),\n          min: Math.round(min),\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear caches\n   */\n  public clearCaches(): void {\n    this.analysisCache.clear();\n    this.suggestionCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Optimization engine caches cleared');\n  }\n  \n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { analysis: any; suggestions: any } {\n    return {\n      analysis: {\n        size: this.analysisCache.size,\n        max: this.analysisCache.max,\n        hitRate: this.analysisCache.calculatedSize > 0 ? \n          (this.analysisCache.calculatedSize - this.analysisCache.size) / this.analysisCache.calculatedSize : 0\n      },\n      suggestions: {\n        size: this.suggestionCache.size,\n        max: this.suggestionCache.max,\n        hitRate: this.suggestionCache.calculatedSize > 0 ? \n          (this.suggestionCache.calculatedSize - this.suggestionCache.size) / this.suggestionCache.calculatedSize : 0\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const optimizationEngine = new OptimizationEngine();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9d5cc184518ac72f05a001c0b5e4189393739ff4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29x6jxts4f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29x6jxts4f();
cov_29x6jxts4f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_29x6jxts4f().s[1]++;
exports.optimizationEngine = exports.OptimizationEngine = void 0;
const llmService_1 =
/* istanbul ignore next */
(cov_29x6jxts4f().s[2]++, require("../llmService"));
const PromptAnalyzer_1 =
/* istanbul ignore next */
(cov_29x6jxts4f().s[3]++, require("./PromptAnalyzer"));
const EventStore_1 =
/* istanbul ignore next */
(cov_29x6jxts4f().s[4]++, require("../analytics/EventStore"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_29x6jxts4f().s[5]++, require("lru-cache"));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_29x6jxts4f().s[6]++, require("perf_hooks"));
const crypto_1 =
/* istanbul ignore next */
(cov_29x6jxts4f().s[7]++, require("crypto"));
class OptimizationEngine {
  constructor() {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[0]++;
    cov_29x6jxts4f().s[8]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[9]++;
    this.runningTests = new Map();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[10]++;
    this.runningTuning = new Map();
    // Initialize caching for better performance
    /* istanbul ignore next */
    cov_29x6jxts4f().s[11]++;
    this.analysisCache = new lru_cache_1.LRUCache({
      max: 500,
      ttl: 1000 * 60 * 30 // 30 minutes
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[12]++;
    this.suggestionCache = new lru_cache_1.LRUCache({
      max: 200,
      ttl: 1000 * 60 * 15 // 15 minutes
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[13]++;
    this.performanceMetrics = new Map();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[14]++;
    this.maxWorkers = Math.min(4, require('os').cpus().length);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[15]++;
    this.workerPool = [];
    // Initialize worker pool for parallel processing
    /* istanbul ignore next */
    cov_29x6jxts4f().s[16]++;
    this.initializeWorkerPool();
  }
  /**
   * Generate AI-powered optimization suggestions for a prompt
   */
  async generateOptimizationSuggestions(originalPrompt, targetMetrics =
  /* istanbul ignore next */
  (cov_29x6jxts4f().b[0][0]++, {}), constraints =
  /* istanbul ignore next */
  (cov_29x6jxts4f().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[17]++, perf_hooks_1.performance.now());
    const cacheKey =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[18]++, this.generateCacheKey(originalPrompt, targetMetrics, constraints));
    // Check cache first
    const cached =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[19]++, this.suggestionCache.get(cacheKey));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[20]++;
    if (cached) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[2][0]++;
      cov_29x6jxts4f().s[21]++;
      this.trackPerformance('generateOptimizationSuggestions', perf_hooks_1.performance.now() - startTime);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[22]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[2][1]++;
    }
    const suggestionId =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[23]++, `opt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[24]++;
    try {
      // Analyze current prompt with caching
      const analysis =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[25]++, await this.getCachedAnalysis(originalPrompt));
      // Generate multiple optimization strategies in parallel
      const strategies =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[26]++, await this.generateOptimizationStrategiesParallel(originalPrompt, analysis, targetMetrics, constraints));
      // Process strategies in parallel using worker pool
      const suggestions =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[27]++, await this.processStrategiesInParallel(originalPrompt, strategies, constraints, suggestionId));
      // Store suggestions (async, don't wait)
      /* istanbul ignore next */
      cov_29x6jxts4f().s[28]++;
      this.storeOptimizationSuggestions(suggestionId, originalPrompt, suggestions, targetMetrics, constraints);
      // Cache results
      /* istanbul ignore next */
      cov_29x6jxts4f().s[29]++;
      this.suggestionCache.set(cacheKey, suggestions);
      // Track performance
      /* istanbul ignore next */
      cov_29x6jxts4f().s[30]++;
      this.trackPerformance('generateOptimizationSuggestions', perf_hooks_1.performance.now() - startTime);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[31]++;
      return suggestions;
    } catch (error) {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[32]++;
      console.error('Error generating optimization suggestions:', error);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[33]++;
      throw new Error(`Optimization suggestion generation failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[3][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Create and start an A/B test for prompt variants
   */
  async createABTest(config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[2]++;
    const testId =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[34]++, `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const testConfig =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[35]++, {
      ...config,
      id: testId,
      status: 'draft'
    });
    // Validate test configuration
    /* istanbul ignore next */
    cov_29x6jxts4f().s[36]++;
    await this.validateABTestConfig(testConfig);
    // Security validation for all variants
    /* istanbul ignore next */
    cov_29x6jxts4f().s[37]++;
    for (const variant of testConfig.variants) {
      const securityValidation =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[38]++, await this.validatePromptSecurity(variant.prompt, 'enhanced'));
      /* istanbul ignore next */
      cov_29x6jxts4f().s[39]++;
      if (!securityValidation.passed) {
        /* istanbul ignore next */
        cov_29x6jxts4f().b[4][0]++;
        cov_29x6jxts4f().s[40]++;
        throw new Error(`Security validation failed for variant ${variant.name}: ${securityValidation.issues.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_29x6jxts4f().b[4][1]++;
      }
    }
    // Store test configuration
    /* istanbul ignore next */
    cov_29x6jxts4f().s[41]++;
    await this.eventStore.recordEvent({
      event_type: 'ab_test_created',
      entity_id: testId,
      entity_type: 'ab_test',
      data: testConfig,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[42]++;
    this.runningTests.set(testId, testConfig);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[43]++;
    return testConfig;
  }
  /**
   * Start an A/B test
   */
  async startABTest(testId) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[3]++;
    const testConfig =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[44]++, this.runningTests.get(testId));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[45]++;
    if (!testConfig) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[5][0]++;
      cov_29x6jxts4f().s[46]++;
      throw new Error(`A/B test ${testId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[5][1]++;
    }
    cov_29x6jxts4f().s[47]++;
    testConfig.status = 'running';
    /* istanbul ignore next */
    cov_29x6jxts4f().s[48]++;
    testConfig.duration.startDate = new Date();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[49]++;
    await this.eventStore.recordEvent({
      event_type: 'ab_test_started',
      entity_id: testId,
      entity_type: 'ab_test',
      data: testConfig,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[50]++;
    console.log(`A/B test ${testId} started`);
  }
  /**
   * Record A/B test execution result
   */
  async recordABTestResult(testId, variantId, result) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[4]++;
    const testConfig =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[51]++, this.runningTests.get(testId));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[7][0]++, !testConfig) ||
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[7][1]++, testConfig.status !== 'running')) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[6][0]++;
      cov_29x6jxts4f().s[53]++;
      throw new Error(`A/B test ${testId} is not running`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[6][1]++;
    }
    cov_29x6jxts4f().s[54]++;
    await this.eventStore.recordEvent({
      event_type: 'ab_test_result',
      entity_id: testId,
      entity_type: 'ab_test',
      data: {
        testId,
        variantId,
        result,
        timestamp: new Date()
      },
      timestamp: new Date()
    });
  }
  /**
   * Analyze A/B test results and determine winner
   */
  async analyzeABTestResults(testId) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[5]++;
    const testConfig =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[55]++, this.runningTests.get(testId));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[56]++;
    if (!testConfig) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[8][0]++;
      cov_29x6jxts4f().s[57]++;
      throw new Error(`A/B test ${testId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[8][1]++;
    }
    // Get all test results
    const testResults =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[58]++, await this.eventStore.getEvents({
      event_type: 'ab_test_result',
      entity_id: testId
    }));
    // Group results by variant
    const variantResults =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[59]++, new Map());
    /* istanbul ignore next */
    cov_29x6jxts4f().s[60]++;
    testResults.forEach(result => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[6]++;
      const variantId =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[61]++, result.data.variantId);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[62]++;
      if (!variantResults.has(variantId)) {
        /* istanbul ignore next */
        cov_29x6jxts4f().b[9][0]++;
        cov_29x6jxts4f().s[63]++;
        variantResults.set(variantId, []);
      } else
      /* istanbul ignore next */
      {
        cov_29x6jxts4f().b[9][1]++;
      }
      cov_29x6jxts4f().s[64]++;
      variantResults.get(variantId).push(result.data.result);
    });
    // Calculate metrics for each variant
    const variantMetrics =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[65]++, testConfig.variants.map(variant => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[7]++;
      const results =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[66]++,
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[10][0]++, variantResults.get(variant.id)) ||
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[10][1]++, []));
      const metrics =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[67]++, this.calculateVariantMetrics(results));
      /* istanbul ignore next */
      cov_29x6jxts4f().s[68]++;
      return {
        id: variant.id,
        name: variant.name,
        metrics: {
          ...metrics,
          sampleSize: results.length
        },
        performanceComparison: {
          vsControl: 0,
          // Will be calculated below
          pValue: 0 // Will be calculated below
        }
      };
    }));
    // Determine winner using statistical significance
    const winner =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[69]++, this.determineABTestWinner(variantMetrics, testConfig.metrics.primaryMetric));
    // Generate insights
    const insights =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[70]++, await this.generateABTestInsights(testConfig, variantMetrics, winner));
    const result =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[71]++, {
      testId,
      winner: winner.id,
      confidence: winner.confidence,
      statisticalSignificance: winner.significanceLevel > 0.95,
      variants: variantMetrics,
      insights,
      recommendations: winner.recommendations,
      completedAt: new Date()
    });
    // Store results
    /* istanbul ignore next */
    cov_29x6jxts4f().s[72]++;
    await this.eventStore.recordEvent({
      event_type: 'ab_test_completed',
      entity_id: testId,
      entity_type: 'ab_test',
      data: result,
      timestamp: new Date()
    });
    // Update test status
    /* istanbul ignore next */
    cov_29x6jxts4f().s[73]++;
    testConfig.status = 'completed';
    /* istanbul ignore next */
    cov_29x6jxts4f().s[74]++;
    testConfig.results = result;
    /* istanbul ignore next */
    cov_29x6jxts4f().s[75]++;
    return result;
  }
  /**
   * Start automated prompt tuning
   */
  async startPromptTuning(config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[8]++;
    const tuningId =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[76]++, `tuning_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const tuningConfig =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[77]++, {
      ...config,
      id: tuningId,
      status: 'pending'
    });
    // Validate configuration
    /* istanbul ignore next */
    cov_29x6jxts4f().s[78]++;
    await this.validateTuningConfig(tuningConfig);
    // Start tuning process
    /* istanbul ignore next */
    cov_29x6jxts4f().s[79]++;
    this.runningTuning.set(tuningId, tuningConfig);
    // Run tuning in background
    /* istanbul ignore next */
    cov_29x6jxts4f().s[80]++;
    this.executeTuningProcess(tuningConfig);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[81]++;
    return tuningConfig;
  }
  /**
   * Get tuning progress
   */
  async getTuningProgress(tuningId) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[9]++;
    const tuningConfig =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[82]++, this.runningTuning.get(tuningId));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[83]++;
    if (!tuningConfig) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[11][0]++;
      cov_29x6jxts4f().s[84]++;
      throw new Error(`Tuning process ${tuningId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[11][1]++;
    }
    const progress =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[85]++, {
      status: tuningConfig.status,
      currentIteration:
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[12][0]++, tuningConfig.results?.iterations.length) ||
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[12][1]++, 0),
      totalIterations: tuningConfig.iterations,
      bestMetrics:
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[13][0]++, tuningConfig.results?.finalMetrics) ||
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[13][1]++, null),
      estimatedCompletion: new Date(Date.now() + 60000) // Placeholder
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[86]++;
    return progress;
  }
  /**
   * Generate optimization strategies
   */
  async generateOptimizationStrategies(originalPrompt, analysis, targetMetrics, constraints) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[10]++;
    const strategies =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[87]++, []);
    // Structure optimization
    /* istanbul ignore next */
    cov_29x6jxts4f().s[88]++;
    if (analysis.effectiveness.score < 70) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[14][0]++;
      cov_29x6jxts4f().s[89]++;
      strategies.push({
        type: 'structure',
        description: 'Improve prompt structure and organization',
        reasoning: 'Current prompt lacks clear structure and logical flow',
        expectedImprovement: {
          successRate: 15,
          responseTime: 5,
          qualityScore: 10
        },
        confidence: 0.8
      });
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[14][1]++;
    }
    // Clarity optimization
    cov_29x6jxts4f().s[90]++;
    if (analysis.patterns.failurePatterns.length > 0) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[15][0]++;
      cov_29x6jxts4f().s[91]++;
      strategies.push({
        type: 'clarity',
        description: 'Enhance prompt clarity and reduce ambiguity',
        reasoning: 'Failure patterns indicate confusion or misunderstanding',
        expectedImprovement: {
          successRate: 20,
          responseTime: 0,
          qualityScore: 15
        },
        confidence: 0.7
      });
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[15][1]++;
    }
    // Specificity optimization
    cov_29x6jxts4f().s[92]++;
    if (analysis.metrics.consistencyScore < 60) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[16][0]++;
      cov_29x6jxts4f().s[93]++;
      strategies.push({
        type: 'specificity',
        description: 'Add more specific instructions and examples',
        reasoning: 'Low consistency score indicates need for more specific guidance',
        expectedImprovement: {
          successRate: 10,
          responseTime: -5,
          qualityScore: 20
        },
        confidence: 0.9
      });
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[16][1]++;
    }
    // Context optimization
    cov_29x6jxts4f().s[94]++;
    strategies.push({
      type: 'context',
      description: 'Optimize context and background information',
      reasoning: 'Enhanced context can improve response quality',
      expectedImprovement: {
        successRate: 8,
        responseTime: 2,
        qualityScore: 12
      },
      confidence: 0.6
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[95]++;
    return strategies;
  }
  /**
   * Apply optimization strategy to prompt
   */
  async applyOptimizationStrategy(originalPrompt, strategy, constraints) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[11]++;
    const optimizationPrompt =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[96]++, `
      Optimize this prompt based on the following strategy:
      
      Original Prompt: "${originalPrompt}"
      
      Strategy: ${strategy.type}
      Description: ${strategy.description}
      Reasoning: ${strategy.reasoning}
      
      Constraints:
      ${constraints.maxLength ?
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[17][0]++, `- Maximum length: ${constraints.maxLength} characters`) :
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[17][1]++, '')}
      ${constraints.maintainStyle ?
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[18][0]++, '- Maintain original writing style') :
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[18][1]++, '')}
      ${constraints.securityLevel ?
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[19][0]++, `- Security level: ${constraints.securityLevel}`) :
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[19][1]++, '')}
      
      Return only the optimized prompt without any additional text or explanations.
    `);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[97]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[98]++, await llmService_1.llmService.generate(optimizationPrompt));
      let optimizedPrompt =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[99]++, response.response.trim());
      // Apply length constraint
      /* istanbul ignore next */
      cov_29x6jxts4f().s[100]++;
      if (
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[21][0]++, constraints.maxLength) &&
      /* istanbul ignore next */
      (cov_29x6jxts4f().b[21][1]++, optimizedPrompt.length > constraints.maxLength)) {
        /* istanbul ignore next */
        cov_29x6jxts4f().b[20][0]++;
        cov_29x6jxts4f().s[101]++;
        optimizedPrompt = optimizedPrompt.substring(0, constraints.maxLength);
      } else
      /* istanbul ignore next */
      {
        cov_29x6jxts4f().b[20][1]++;
      }
      cov_29x6jxts4f().s[102]++;
      return optimizedPrompt;
    } catch (error) {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[103]++;
      console.error('Error applying optimization strategy:', error);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[104]++;
      return originalPrompt; // Return original if optimization fails
    }
  }
  /**
   * Validate prompt security
   */
  async validatePromptSecurity(prompt, securityLevel) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[12]++;
    const issues =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[105]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[106]++, []);
    // Basic security checks
    const basicIssues =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[107]++, [{
      pattern: /ignore.*instructions/i,
      message: 'Potential instruction bypass'
    }, {
      pattern: /system.*prompt/i,
      message: 'System prompt manipulation'
    }, {
      pattern: /jailbreak/i,
      message: 'Jailbreak attempt'
    }, {
      pattern: /password|api.*key|secret/i,
      message: 'Sensitive information exposure'
    }]);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[108]++;
    basicIssues.forEach(check => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[13]++;
      cov_29x6jxts4f().s[109]++;
      if (check.pattern.test(prompt)) {
        /* istanbul ignore next */
        cov_29x6jxts4f().b[22][0]++;
        cov_29x6jxts4f().s[110]++;
        issues.push(check.message);
      } else
      /* istanbul ignore next */
      {
        cov_29x6jxts4f().b[22][1]++;
      }
    });
    // Enhanced security checks
    /* istanbul ignore next */
    cov_29x6jxts4f().s[111]++;
    if (
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[24][0]++, securityLevel === 'enhanced') ||
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[24][1]++, securityLevel === 'strict')) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[23][0]++;
      const enhancedIssues =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[112]++, [{
        pattern: /role.*play/i,
        message: 'Role-playing instruction'
      }, {
        pattern: /pretend/i,
        message: 'Pretend instruction'
      }, {
        pattern: /act.*as/i,
        message: 'Acting instruction'
      }, {
        pattern: /override/i,
        message: 'Override instruction'
      }]);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[113]++;
      enhancedIssues.forEach(check => {
        /* istanbul ignore next */
        cov_29x6jxts4f().f[14]++;
        cov_29x6jxts4f().s[114]++;
        if (check.pattern.test(prompt)) {
          /* istanbul ignore next */
          cov_29x6jxts4f().b[25][0]++;
          cov_29x6jxts4f().s[115]++;
          issues.push(check.message);
        } else
        /* istanbul ignore next */
        {
          cov_29x6jxts4f().b[25][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[23][1]++;
    }
    // Strict security checks
    cov_29x6jxts4f().s[116]++;
    if (securityLevel === 'strict') {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[26][0]++;
      const strictIssues =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[117]++, [{
        pattern: /you.*must/i,
        message: 'Imperative instruction'
      }, {
        pattern: /required.*to/i,
        message: 'Requirement instruction'
      }, {
        pattern: /force|compel/i,
        message: 'Forceful instruction'
      }]);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[118]++;
      strictIssues.forEach(check => {
        /* istanbul ignore next */
        cov_29x6jxts4f().f[15]++;
        cov_29x6jxts4f().s[119]++;
        if (check.pattern.test(prompt)) {
          /* istanbul ignore next */
          cov_29x6jxts4f().b[27][0]++;
          cov_29x6jxts4f().s[120]++;
          issues.push(check.message);
        } else
        /* istanbul ignore next */
        {
          cov_29x6jxts4f().b[27][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[26][1]++;
    }
    // Generate recommendations
    cov_29x6jxts4f().s[121]++;
    if (issues.length > 0) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[28][0]++;
      cov_29x6jxts4f().s[122]++;
      recommendations.push('Review and sanitize identified security issues');
      /* istanbul ignore next */
      cov_29x6jxts4f().s[123]++;
      recommendations.push('Use more neutral and instructional language');
      /* istanbul ignore next */
      cov_29x6jxts4f().s[124]++;
      recommendations.push('Avoid manipulative or coercive phrasing');
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[28][1]++;
    }
    cov_29x6jxts4f().s[125]++;
    return {
      passed: issues.length === 0,
      issues,
      recommendations
    };
  }
  /**
   * Validate A/B test configuration
   */
  async validateABTestConfig(config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[16]++;
    cov_29x6jxts4f().s[126]++;
    if (config.variants.length < 2) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[29][0]++;
      cov_29x6jxts4f().s[127]++;
      throw new Error('A/B test must have at least 2 variants');
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[29][1]++;
    }
    const totalWeight =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[128]++, config.variants.reduce((sum, variant) => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[17]++;
      cov_29x6jxts4f().s[129]++;
      return sum + variant.weight;
    }, 0));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[130]++;
    if (Math.abs(totalWeight - 100) > 0.1) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[30][0]++;
      cov_29x6jxts4f().s[131]++;
      throw new Error('Variant weights must sum to 100%');
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[30][1]++;
    }
    cov_29x6jxts4f().s[132]++;
    if (config.duration.endDate <= config.duration.startDate) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[31][0]++;
      cov_29x6jxts4f().s[133]++;
      throw new Error('End date must be after start date');
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[31][1]++;
    }
  }
  /**
   * Calculate metrics for variant results
   */
  calculateVariantMetrics(results) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[18]++;
    cov_29x6jxts4f().s[134]++;
    if (results.length === 0) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[32][0]++;
      cov_29x6jxts4f().s[135]++;
      return {
        successRate: 0,
        responseTime: 0,
        qualityScore: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[32][1]++;
    }
    const successfulResults =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[136]++, results.filter(r => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[19]++;
      cov_29x6jxts4f().s[137]++;
      return r.success;
    }));
    const successRate =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[138]++, successfulResults.length / results.length * 100);
    const responseTime =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[139]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[20]++;
      cov_29x6jxts4f().s[140]++;
      return sum + r.responseTime;
    }, 0) / results.length);
    const qualityScore =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[141]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[21]++;
      cov_29x6jxts4f().s[142]++;
      return sum + r.qualityScore;
    }, 0) / results.length);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[143]++;
    return {
      successRate,
      responseTime,
      qualityScore
    };
  }
  /**
   * Determine A/B test winner
   */
  determineABTestWinner(variantMetrics, primaryMetric) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[22]++;
    // Simple winner determination based on primary metric
    let bestVariant =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[144]++, variantMetrics[0]);
    let bestScore =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[145]++, this.getMetricValue(bestVariant.metrics, primaryMetric));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[146]++;
    for (const variant of variantMetrics) {
      const score =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[147]++, this.getMetricValue(variant.metrics, primaryMetric));
      /* istanbul ignore next */
      cov_29x6jxts4f().s[148]++;
      if (score > bestScore) {
        /* istanbul ignore next */
        cov_29x6jxts4f().b[33][0]++;
        cov_29x6jxts4f().s[149]++;
        bestScore = score;
        /* istanbul ignore next */
        cov_29x6jxts4f().s[150]++;
        bestVariant = variant;
      } else
      /* istanbul ignore next */
      {
        cov_29x6jxts4f().b[33][1]++;
      }
    }
    // Calculate confidence (simplified)
    const avgScore =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[151]++, variantMetrics.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[23]++;
      cov_29x6jxts4f().s[152]++;
      return sum + this.getMetricValue(v.metrics, primaryMetric);
    }, 0) / variantMetrics.length);
    const confidence =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[153]++, Math.min(1, (bestScore - avgScore) / avgScore));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[154]++;
    return {
      id: bestVariant.id,
      confidence,
      significanceLevel: 0.95,
      // Simplified
      recommendations: [`Implement ${bestVariant.name} as the winning variant`, `Monitor performance for ${primaryMetric} improvements`, 'Consider running follow-up tests for further optimization']
    };
  }
  /**
   * Get metric value by name
   */
  getMetricValue(metrics, metricName) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[24]++;
    cov_29x6jxts4f().s[155]++;
    switch (metricName) {
      case 'success_rate':
        /* istanbul ignore next */
        cov_29x6jxts4f().b[34][0]++;
        cov_29x6jxts4f().s[156]++;
        return metrics.successRate;
      case 'response_time':
        /* istanbul ignore next */
        cov_29x6jxts4f().b[34][1]++;
        cov_29x6jxts4f().s[157]++;
        return 1000 / metrics.responseTime;
      // Invert for "higher is better"
      case 'quality_score':
        /* istanbul ignore next */
        cov_29x6jxts4f().b[34][2]++;
        cov_29x6jxts4f().s[158]++;
        return metrics.qualityScore;
      default:
        /* istanbul ignore next */
        cov_29x6jxts4f().b[34][3]++;
        cov_29x6jxts4f().s[159]++;
        return 0;
    }
  }
  /**
   * Generate A/B test insights
   */
  async generateABTestInsights(testConfig, variantMetrics, winner) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[25]++;
    const insights =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[160]++, []);
    // Performance insights
    const winnerMetrics =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[161]++, variantMetrics.find(v => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[26]++;
      cov_29x6jxts4f().s[162]++;
      return v.id === winner.id;
    }));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[163]++;
    if (winnerMetrics) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[35][0]++;
      cov_29x6jxts4f().s[164]++;
      insights.push(`${winnerMetrics.name} achieved ${winnerMetrics.metrics.successRate.toFixed(1)}% success rate`);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[165]++;
      insights.push(`Response time was ${winnerMetrics.metrics.responseTime.toFixed(0)}ms on average`);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[166]++;
      insights.push(`Quality score reached ${winnerMetrics.metrics.qualityScore.toFixed(1)}`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[35][1]++;
    }
    // Comparative insights
    const controlVariant =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[167]++, variantMetrics.find(v => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[27]++;
      cov_29x6jxts4f().s[168]++;
      return v.name.toLowerCase().includes('control');
    }));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[169]++;
    if (
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[37][0]++, controlVariant) &&
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[37][1]++, winnerMetrics) &&
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[37][2]++, winnerMetrics.id !== controlVariant.id)) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[36][0]++;
      const improvement =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[170]++, (winnerMetrics.metrics.successRate - controlVariant.metrics.successRate) / controlVariant.metrics.successRate * 100);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[171]++;
      insights.push(`Winner shows ${improvement.toFixed(1)}% improvement over control`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[36][1]++;
    }
    cov_29x6jxts4f().s[172]++;
    return insights;
  }
  /**
   * Validate tuning configuration
   */
  async validateTuningConfig(config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[28]++;
    cov_29x6jxts4f().s[173]++;
    if (
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[39][0]++, config.iterations < 1) ||
    /* istanbul ignore next */
    (cov_29x6jxts4f().b[39][1]++, config.iterations > 100)) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[38][0]++;
      cov_29x6jxts4f().s[174]++;
      throw new Error('Iterations must be between 1 and 100');
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[38][1]++;
    }
    cov_29x6jxts4f().s[175]++;
    if (config.constraints.maxLength < 10) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[40][0]++;
      cov_29x6jxts4f().s[176]++;
      throw new Error('Maximum length must be at least 10 characters');
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[40][1]++;
    }
  }
  /**
   * Execute tuning process
   */
  async executeTuningProcess(config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[29]++;
    cov_29x6jxts4f().s[177]++;
    try {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[178]++;
      config.status = 'running';
      const iterations =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[179]++, []);
      let currentPrompt =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[180]++, config.originalPrompt);
      let bestPrompt =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[181]++, currentPrompt);
      let bestScore =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[182]++, 0);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[183]++;
      for (let i =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[184]++, 0); i < config.iterations; i++) {
        // Generate variant
        const variant =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[185]++, await this.generatePromptVariant(currentPrompt, config));
        // Test variant
        const metrics =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[186]++, await this.testPromptVariant(variant, config));
        // Calculate score
        const score =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[187]++, this.calculateTuningScore(metrics, config.objectives));
        // Update best if better
        /* istanbul ignore next */
        cov_29x6jxts4f().s[188]++;
        if (score > bestScore) {
          /* istanbul ignore next */
          cov_29x6jxts4f().b[41][0]++;
          cov_29x6jxts4f().s[189]++;
          bestScore = score;
          /* istanbul ignore next */
          cov_29x6jxts4f().s[190]++;
          bestPrompt = variant;
        } else
        /* istanbul ignore next */
        {
          cov_29x6jxts4f().b[41][1]++;
        }
        // Record iteration
        cov_29x6jxts4f().s[191]++;
        iterations.push({
          iteration: i + 1,
          prompt: variant,
          metrics,
          improvements: (score - bestScore) / bestScore * 100,
          timestamp: new Date()
        });
        // Update current prompt for next iteration
        /* istanbul ignore next */
        cov_29x6jxts4f().s[192]++;
        currentPrompt = variant;
      }
      // Calculate final results
      const finalMetrics =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[193]++, iterations[iterations.length - 1].metrics);
      const baselineScore =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[194]++, this.calculateTuningScore({
        successRate: 50,
        responseTime: 1000,
        qualityScore: 50
      }, config.objectives));
      const totalImprovement =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[195]++, (bestScore - baselineScore) / baselineScore * 100);
      const result =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[196]++, {
        tuningId: config.id,
        iterations,
        bestPrompt,
        finalMetrics,
        totalImprovement,
        convergenceAnalysis: {
          converged:
          /* istanbul ignore next */
          (cov_29x6jxts4f().b[42][0]++, iterations.length >= 5) &&
          /* istanbul ignore next */
          (cov_29x6jxts4f().b[42][1]++, iterations.slice(-5).every(iter => {
            /* istanbul ignore next */
            cov_29x6jxts4f().f[30]++;
            cov_29x6jxts4f().s[197]++;
            return Math.abs(iter.improvements) < 1;
          })),
          stagnationPoint: iterations.length,
          optimalIteration: iterations.findIndex(iter => {
            /* istanbul ignore next */
            cov_29x6jxts4f().f[31]++;
            cov_29x6jxts4f().s[198]++;
            return iter.prompt === bestPrompt;
          }) + 1
        },
        completedAt: new Date()
      });
      /* istanbul ignore next */
      cov_29x6jxts4f().s[199]++;
      config.status = 'completed';
      /* istanbul ignore next */
      cov_29x6jxts4f().s[200]++;
      config.results = result;
      // Store results
      /* istanbul ignore next */
      cov_29x6jxts4f().s[201]++;
      await this.eventStore.recordEvent({
        event_type: 'tuning_completed',
        entity_id: config.id,
        entity_type: 'tuning',
        data: result,
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[202]++;
      config.status = 'failed';
      /* istanbul ignore next */
      cov_29x6jxts4f().s[203]++;
      console.error('Tuning process failed:', error);
    }
  }
  /**
   * Generate prompt variant for tuning
   */
  async generatePromptVariant(currentPrompt, config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[32]++;
    const variationPrompt =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[204]++, `
      Create a variation of this prompt that improves ${config.objectives.primary}:
      
      Current Prompt: "${currentPrompt}"
      
      Constraints:
      - Maximum length: ${config.constraints.maxLength} characters
      - Must include: ${config.constraints.requiredKeywords.join(', ')}
      - Must not include: ${config.constraints.prohibitedKeywords.join(', ')}
      
      Return only the improved prompt without explanations.
    `);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[205]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_29x6jxts4f().s[206]++, await llmService_1.llmService.generate(variationPrompt));
      /* istanbul ignore next */
      cov_29x6jxts4f().s[207]++;
      return response.response.trim();
    } catch (error) {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[208]++;
      console.error('Error generating prompt variant:', error);
      /* istanbul ignore next */
      cov_29x6jxts4f().s[209]++;
      return currentPrompt; // Return original if generation fails
    }
  }
  /**
   * Test prompt variant
   */
  async testPromptVariant(prompt, config) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[33]++;
    // Simplified testing - in real implementation, use actual test cases
    const mockMetrics =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[210]++, {
      successRate: 70 + Math.random() * 25,
      responseTime: 800 + Math.random() * 400,
      qualityScore: 60 + Math.random() * 30
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[211]++;
    return mockMetrics;
  }
  /**
   * Calculate tuning score
   */
  calculateTuningScore(metrics, objectives) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[34]++;
    const primaryWeight =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[212]++, 0.6);
    const secondaryWeight =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[213]++, 0.4 / objectives.secondary.length);
    let score =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[214]++, 0);
    // Primary objective
    /* istanbul ignore next */
    cov_29x6jxts4f().s[215]++;
    switch (objectives.primary) {
      case 'success_rate':
        /* istanbul ignore next */
        cov_29x6jxts4f().b[43][0]++;
        cov_29x6jxts4f().s[216]++;
        score += metrics.successRate * primaryWeight;
        /* istanbul ignore next */
        cov_29x6jxts4f().s[217]++;
        break;
      case 'response_time':
        /* istanbul ignore next */
        cov_29x6jxts4f().b[43][1]++;
        cov_29x6jxts4f().s[218]++;
        score += 1000 / metrics.responseTime * primaryWeight;
        /* istanbul ignore next */
        cov_29x6jxts4f().s[219]++;
        break;
      case 'quality_score':
        /* istanbul ignore next */
        cov_29x6jxts4f().b[43][2]++;
        cov_29x6jxts4f().s[220]++;
        score += metrics.qualityScore * primaryWeight;
        /* istanbul ignore next */
        cov_29x6jxts4f().s[221]++;
        break;
    }
    // Secondary objectives
    /* istanbul ignore next */
    cov_29x6jxts4f().s[222]++;
    objectives.secondary.forEach(objective => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[35]++;
      cov_29x6jxts4f().s[223]++;
      switch (objective) {
        case 'success_rate':
          /* istanbul ignore next */
          cov_29x6jxts4f().b[44][0]++;
          cov_29x6jxts4f().s[224]++;
          score += metrics.successRate * secondaryWeight;
          /* istanbul ignore next */
          cov_29x6jxts4f().s[225]++;
          break;
        case 'response_time':
          /* istanbul ignore next */
          cov_29x6jxts4f().b[44][1]++;
          cov_29x6jxts4f().s[226]++;
          score += 1000 / metrics.responseTime * secondaryWeight;
          /* istanbul ignore next */
          cov_29x6jxts4f().s[227]++;
          break;
        case 'quality_score':
          /* istanbul ignore next */
          cov_29x6jxts4f().b[44][2]++;
          cov_29x6jxts4f().s[228]++;
          score += metrics.qualityScore * secondaryWeight;
          /* istanbul ignore next */
          cov_29x6jxts4f().s[229]++;
          break;
      }
    });
    /* istanbul ignore next */
    cov_29x6jxts4f().s[230]++;
    return score;
  }
  /**
   * Generate cache key for optimization suggestions
   */
  generateCacheKey(prompt, metrics, constraints) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[36]++;
    const content =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[231]++, `${prompt}${JSON.stringify(metrics)}${JSON.stringify(constraints)}`);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[232]++;
    return (0, crypto_1.createHash)('md5').update(content).digest('hex');
  }
  /**
   * Get cached prompt analysis
   */
  async getCachedAnalysis(prompt) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[37]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[233]++, (0, crypto_1.createHash)('md5').update(prompt).digest('hex'));
    const cached =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[234]++, this.analysisCache.get(cacheKey));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[235]++;
    if (cached) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[45][0]++;
      cov_29x6jxts4f().s[236]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[45][1]++;
    }
    const analysis =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[237]++, await PromptAnalyzer_1.promptAnalyzer.analyzePrompt('temp_prompt', prompt));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[238]++;
    this.analysisCache.set(cacheKey, analysis);
    /* istanbul ignore next */
    cov_29x6jxts4f().s[239]++;
    return analysis;
  }
  /**
   * Generate optimization strategies in parallel
   */
  async generateOptimizationStrategiesParallel(originalPrompt, analysis, targetMetrics, constraints) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[38]++;
    const strategyPromises =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[240]++, [this.generateStructureStrategy(analysis), this.generateClarityStrategy(analysis), this.generateSpecificityStrategy(analysis), this.generateContextStrategy(analysis), this.generatePerformanceStrategy(analysis, targetMetrics)]);
    const strategies =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[241]++, await Promise.all(strategyPromises));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[242]++;
    return strategies.filter(strategy => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[39]++;
      cov_29x6jxts4f().s[243]++;
      return strategy !== null;
    });
  }
  /**
   * Process strategies in parallel using worker pool
   */
  async processStrategiesInParallel(originalPrompt, strategies, constraints, suggestionId) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[40]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[244]++, []);
    const processingPromises =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[245]++, strategies.map(async strategy => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[41]++;
      cov_29x6jxts4f().s[246]++;
      try {
        const optimizedPrompt =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[247]++, await this.applyOptimizationStrategy(originalPrompt, strategy, constraints));
        // Security validation
        const securityValidation =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[248]++, await this.validatePromptSecurity(optimizedPrompt,
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[46][0]++, constraints.securityLevel) ||
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[46][1]++, 'basic')));
        /* istanbul ignore next */
        cov_29x6jxts4f().s[249]++;
        if (
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[48][0]++, securityValidation.passed) ||
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[48][1]++, constraints.securityLevel === 'basic')) {
          /* istanbul ignore next */
          cov_29x6jxts4f().b[47][0]++;
          cov_29x6jxts4f().s[250]++;
          return {
            id: `${suggestionId}_${strategy.type}`,
            originalPrompt,
            optimizedPrompt,
            changes: [{
              type: strategy.type,
              description: strategy.description,
              reasoning: strategy.reasoning
            }],
            expectedImprovement: strategy.expectedImprovement,
            confidence: strategy.confidence,
            securityValidation,
            timestamp: new Date()
          };
        } else
        /* istanbul ignore next */
        {
          cov_29x6jxts4f().b[47][1]++;
        }
        cov_29x6jxts4f().s[251]++;
        return null;
      } catch (error) {
        /* istanbul ignore next */
        cov_29x6jxts4f().s[252]++;
        console.warn(`Strategy ${strategy.type} failed:`, error.message);
        /* istanbul ignore next */
        cov_29x6jxts4f().s[253]++;
        return null;
      }
    }));
    const results =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[254]++, await Promise.all(processingPromises));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[255]++;
    return results.filter(result => {
      /* istanbul ignore next */
      cov_29x6jxts4f().f[42]++;
      cov_29x6jxts4f().s[256]++;
      return result !== null;
    });
  }
  /**
   * Generate structure optimization strategy
   */
  async generateStructureStrategy(analysis) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[43]++;
    cov_29x6jxts4f().s[257]++;
    if (analysis.effectiveness.score < 70) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[49][0]++;
      cov_29x6jxts4f().s[258]++;
      return {
        type: 'structure',
        description: 'Improve prompt structure and organization',
        reasoning: 'Current prompt lacks clear structure and logical flow',
        expectedImprovement: {
          successRate: 15,
          responseTime: 5,
          qualityScore: 10
        },
        confidence: 0.8
      };
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[49][1]++;
    }
    cov_29x6jxts4f().s[259]++;
    return null;
  }
  /**
   * Generate clarity optimization strategy
   */
  async generateClarityStrategy(analysis) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[44]++;
    cov_29x6jxts4f().s[260]++;
    if (analysis.patterns.failurePatterns.length > 0) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[50][0]++;
      cov_29x6jxts4f().s[261]++;
      return {
        type: 'clarity',
        description: 'Enhance prompt clarity and reduce ambiguity',
        reasoning: 'Failure patterns indicate confusion or misunderstanding',
        expectedImprovement: {
          successRate: 20,
          responseTime: 0,
          qualityScore: 15
        },
        confidence: 0.7
      };
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[50][1]++;
    }
    cov_29x6jxts4f().s[262]++;
    return null;
  }
  /**
   * Generate specificity optimization strategy
   */
  async generateSpecificityStrategy(analysis) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[45]++;
    cov_29x6jxts4f().s[263]++;
    if (analysis.metrics.consistencyScore < 60) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[51][0]++;
      cov_29x6jxts4f().s[264]++;
      return {
        type: 'specificity',
        description: 'Add more specific instructions and examples',
        reasoning: 'Low consistency score indicates need for more specific guidance',
        expectedImprovement: {
          successRate: 10,
          responseTime: -5,
          qualityScore: 20
        },
        confidence: 0.9
      };
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[51][1]++;
    }
    cov_29x6jxts4f().s[265]++;
    return null;
  }
  /**
   * Generate context optimization strategy
   */
  async generateContextStrategy(analysis) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[46]++;
    cov_29x6jxts4f().s[266]++;
    return {
      type: 'context',
      description: 'Optimize context and background information',
      reasoning: 'Enhanced context can improve response quality',
      expectedImprovement: {
        successRate: 8,
        responseTime: 2,
        qualityScore: 12
      },
      confidence: 0.6
    };
  }
  /**
   * Generate performance optimization strategy
   */
  async generatePerformanceStrategy(analysis, targetMetrics) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[47]++;
    cov_29x6jxts4f().s[267]++;
    return {
      type: 'performance',
      description: 'Optimize for better response time and quality',
      reasoning: 'Target specific performance improvements',
      expectedImprovement: {
        successRate: targetMetrics.successRate ?
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[52][0]++, 10) :
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[52][1]++, 5),
        responseTime: targetMetrics.responseTime ?
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[53][0]++, 15) :
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[53][1]++, 8),
        qualityScore: targetMetrics.qualityScore ?
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[54][0]++, 12) :
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[54][1]++, 6)
      },
      confidence: 0.7
    };
  }
  /**
   * Store optimization suggestions asynchronously
   */
  async storeOptimizationSuggestions(suggestionId, originalPrompt, suggestions, targetMetrics, constraints) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[48]++;
    cov_29x6jxts4f().s[268]++;
    try {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[269]++;
      await this.eventStore.recordEvent({
        event_type: 'optimization_suggestions',
        entity_id: suggestionId,
        entity_type: 'prompt',
        data: {
          originalPrompt,
          suggestions,
          targetMetrics,
          constraints
        },
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[270]++;
      console.warn('Failed to store optimization suggestions:', error.message);
    }
  }
  /**
   * Initialize worker pool for parallel processing
   */
  initializeWorkerPool() {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[49]++;
    cov_29x6jxts4f().s[271]++;
    // Worker pool implementation would go here
    // For now, we'll use Promise.all for parallel processing
    console.log(`Initialized optimization engine with ${this.maxWorkers} workers`);
  }
  /**
   * Track performance metrics
   */
  trackPerformance(operation, duration) {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[50]++;
    cov_29x6jxts4f().s[272]++;
    if (!this.performanceMetrics.has(operation)) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[55][0]++;
      cov_29x6jxts4f().s[273]++;
      this.performanceMetrics.set(operation, []);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[55][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[274]++, this.performanceMetrics.get(operation));
    /* istanbul ignore next */
    cov_29x6jxts4f().s[275]++;
    metrics.push(duration);
    // Keep only last 100 measurements
    /* istanbul ignore next */
    cov_29x6jxts4f().s[276]++;
    if (metrics.length > 100) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[56][0]++;
      cov_29x6jxts4f().s[277]++;
      metrics.shift();
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[56][1]++;
    }
    // Log slow operations
    cov_29x6jxts4f().s[278]++;
    if (duration > 30000) {
      /* istanbul ignore next */
      cov_29x6jxts4f().b[57][0]++;
      cov_29x6jxts4f().s[279]++;
      // 30 seconds
      console.warn(`Slow optimization operation: ${operation} took ${duration.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_29x6jxts4f().b[57][1]++;
    }
  }
  /**
   * Get performance statistics
   */
  getPerformanceStats() {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[51]++;
    const stats =
    /* istanbul ignore next */
    (cov_29x6jxts4f().s[280]++, {});
    /* istanbul ignore next */
    cov_29x6jxts4f().s[281]++;
    for (const [operation, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_29x6jxts4f().s[282]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_29x6jxts4f().b[58][0]++;
        const avg =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[283]++, metrics.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_29x6jxts4f().f[52]++;
          cov_29x6jxts4f().s[284]++;
          return sum + time;
        }, 0) / metrics.length);
        const max =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[285]++, Math.max(...metrics));
        const min =
        /* istanbul ignore next */
        (cov_29x6jxts4f().s[286]++, Math.min(...metrics));
        /* istanbul ignore next */
        cov_29x6jxts4f().s[287]++;
        stats[operation] = {
          avg: Math.round(avg),
          max: Math.round(max),
          min: Math.round(min),
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_29x6jxts4f().b[58][1]++;
      }
    }
    /* istanbul ignore next */
    cov_29x6jxts4f().s[288]++;
    return stats;
  }
  /**
   * Clear caches
   */
  clearCaches() {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[53]++;
    cov_29x6jxts4f().s[289]++;
    this.analysisCache.clear();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[290]++;
    this.suggestionCache.clear();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[291]++;
    this.performanceMetrics.clear();
    /* istanbul ignore next */
    cov_29x6jxts4f().s[292]++;
    console.log('Optimization engine caches cleared');
  }
  /**
   * Get cache statistics
   */
  getCacheStats() {
    /* istanbul ignore next */
    cov_29x6jxts4f().f[54]++;
    cov_29x6jxts4f().s[293]++;
    return {
      analysis: {
        size: this.analysisCache.size,
        max: this.analysisCache.max,
        hitRate: this.analysisCache.calculatedSize > 0 ?
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[59][0]++, (this.analysisCache.calculatedSize - this.analysisCache.size) / this.analysisCache.calculatedSize) :
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[59][1]++, 0)
      },
      suggestions: {
        size: this.suggestionCache.size,
        max: this.suggestionCache.max,
        hitRate: this.suggestionCache.calculatedSize > 0 ?
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[60][0]++, (this.suggestionCache.calculatedSize - this.suggestionCache.size) / this.suggestionCache.calculatedSize) :
        /* istanbul ignore next */
        (cov_29x6jxts4f().b[60][1]++, 0)
      }
    };
  }
}
/* istanbul ignore next */
cov_29x6jxts4f().s[294]++;
exports.OptimizationEngine = OptimizationEngine;
// Export singleton instance
/* istanbul ignore next */
cov_29x6jxts4f().s[295]++;
exports.optimizationEngine = new OptimizationEngine();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,