{"version":3,"names":["cov_29x6jxts4f","actualCoverage","s","llmService_1","require","PromptAnalyzer_1","EventStore_1","lru_cache_1","perf_hooks_1","crypto_1","OptimizationEngine","constructor","f","eventStore","EventStore","getInstance","runningTests","Map","runningTuning","analysisCache","LRUCache","max","ttl","suggestionCache","performanceMetrics","maxWorkers","Math","min","cpus","length","workerPool","initializeWorkerPool","generateOptimizationSuggestions","originalPrompt","targetMetrics","b","constraints","startTime","performance","now","cacheKey","generateCacheKey","cached","get","trackPerformance","suggestionId","Date","random","toString","substr","analysis","getCachedAnalysis","strategies","generateOptimizationStrategiesParallel","suggestions","processStrategiesInParallel","storeOptimizationSuggestions","set","error","console","Error","message","createABTest","config","testId","testConfig","id","status","validateABTestConfig","variant","variants","securityValidation","validatePromptSecurity","prompt","passed","name","issues","join","recordEvent","event_type","entity_id","entity_type","data","timestamp","startABTest","duration","startDate","log","recordABTestResult","variantId","result","analyzeABTestResults","testResults","getEvents","variantResults","forEach","has","push","variantMetrics","map","results","metrics","calculateVariantMetrics","sampleSize","performanceComparison","vsControl","pValue","winner","determineABTestWinner","primaryMetric","insights","generateABTestInsights","confidence","statisticalSignificance","significanceLevel","recommendations","completedAt","startPromptTuning","tuningId","tuningConfig","validateTuningConfig","executeTuningProcess","getTuningProgress","progress","currentIteration","iterations","totalIterations","bestMetrics","finalMetrics","estimatedCompletion","generateOptimizationStrategies","effectiveness","score","type","description","reasoning","expectedImprovement","successRate","responseTime","qualityScore","patterns","failurePatterns","consistencyScore","applyOptimizationStrategy","strategy","optimizationPrompt","maxLength","maintainStyle","securityLevel","response","llmService","generate","optimizedPrompt","trim","substring","basicIssues","pattern","check","test","enhancedIssues","strictIssues","totalWeight","reduce","sum","weight","abs","endDate","successfulResults","filter","r","success","bestVariant","bestScore","getMetricValue","avgScore","v","metricName","winnerMetrics","find","toFixed","controlVariant","toLowerCase","includes","improvement","currentPrompt","bestPrompt","i","generatePromptVariant","testPromptVariant","calculateTuningScore","objectives","iteration","improvements","baselineScore","totalImprovement","convergenceAnalysis","converged","slice","every","iter","stagnationPoint","optimalIteration","findIndex","variationPrompt","primary","requiredKeywords","prohibitedKeywords","mockMetrics","primaryWeight","secondaryWeight","secondary","objective","content","JSON","stringify","createHash","update","digest","promptAnalyzer","analyzePrompt","strategyPromises","generateStructureStrategy","generateClarityStrategy","generateSpecificityStrategy","generateContextStrategy","generatePerformanceStrategy","Promise","all","processingPromises","changes","warn","operation","shift","getPerformanceStats","stats","avg","time","round","count","clearCaches","clear","getCacheStats","size","hitRate","calculatedSize","exports","optimizationEngine"],"sources":["/workspaces/prompt-card-system/backend/src/services/optimization/OptimizationEngine.ts"],"sourcesContent":["import { llmService } from '../llmService';\nimport { promptAnalyzer, PromptAnalysisResult } from './PromptAnalyzer';\nimport { EventStore } from '../analytics/EventStore';\nimport { EnhancedAssertionType } from '../assertions/AssertionEngine';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\nimport { Worker } from 'worker_threads';\nimport { promisify } from 'util';\nimport { createHash } from 'crypto';\n\nexport interface OptimizationSuggestion {\n  id: string;\n  originalPrompt: string;\n  optimizedPrompt: string;\n  changes: {\n    type: 'structure' | 'clarity' | 'specificity' | 'context' | 'security';\n    description: string;\n    reasoning: string;\n  }[];\n  expectedImprovement: {\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  };\n  confidence: number; // 0-1\n  securityValidation: {\n    passed: boolean;\n    issues: string[];\n    recommendations: string[];\n  };\n  timestamp: Date;\n}\n\nexport interface ABTestConfiguration {\n  id: string;\n  name: string;\n  variants: {\n    id: string;\n    name: string;\n    prompt: string;\n    weight: number; // Traffic allocation percentage\n  }[];\n  metrics: {\n    primaryMetric: 'success_rate' | 'response_time' | 'quality_score';\n    secondaryMetrics: string[];\n  };\n  duration: {\n    startDate: Date;\n    endDate: Date;\n    minSamples: number;\n  };\n  status: 'draft' | 'running' | 'completed' | 'paused';\n  results?: ABTestResult;\n}\n\nexport interface ABTestResult {\n  testId: string;\n  winner: string | null;\n  confidence: number;\n  statisticalSignificance: boolean;\n  variants: {\n    id: string;\n    name: string;\n    metrics: {\n      successRate: number;\n      responseTime: number;\n      qualityScore: number;\n      sampleSize: number;\n    };\n    performanceComparison: {\n      vsControl: number; // Percentage improvement/degradation\n      pValue: number;\n    };\n  }[];\n  insights: string[];\n  recommendations: string[];\n  completedAt: Date;\n}\n\nexport interface PromptTuningConfiguration {\n  id: string;\n  originalPrompt: string;\n  objectives: {\n    primary: 'success_rate' | 'response_time' | 'quality_score';\n    secondary: string[];\n  };\n  constraints: {\n    maxLength: number;\n    requiredKeywords: string[];\n    prohibitedKeywords: string[];\n    securityLevel: 'basic' | 'enhanced' | 'strict';\n  };\n  iterations: number;\n  samplingStrategy: 'random' | 'evolutionary' | 'gradient_based';\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  results?: PromptTuningResult;\n}\n\nexport interface PromptTuningResult {\n  tuningId: string;\n  iterations: {\n    iteration: number;\n    prompt: string;\n    metrics: {\n      successRate: number;\n      responseTime: number;\n      qualityScore: number;\n    };\n    improvements: number; // Percentage improvement over baseline\n    timestamp: Date;\n  }[];\n  bestPrompt: string;\n  finalMetrics: {\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  };\n  totalImprovement: number;\n  convergenceAnalysis: {\n    converged: boolean;\n    stagnationPoint: number;\n    optimalIteration: number;\n  };\n  completedAt: Date;\n}\n\nexport class OptimizationEngine {\n  private eventStore: EventStore;\n  private runningTests: Map<string, ABTestConfiguration>;\n  private runningTuning: Map<string, PromptTuningConfiguration>;\n  private analysisCache: LRUCache<string, PromptAnalysisResult>;\n  private suggestionCache: LRUCache<string, OptimizationSuggestion[]>;\n  private performanceMetrics: Map<string, number[]>;\n  private workerPool: Worker[];\n  private maxWorkers: number;\n  \n  constructor() {\n    this.eventStore = EventStore.getInstance();\n    this.runningTests = new Map();\n    this.runningTuning = new Map();\n    \n    // Initialize caching for better performance\n    this.analysisCache = new LRUCache({\n      max: 500,\n      ttl: 1000 * 60 * 30 // 30 minutes\n    });\n    \n    this.suggestionCache = new LRUCache({\n      max: 200,\n      ttl: 1000 * 60 * 15 // 15 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.maxWorkers = Math.min(4, require('os').cpus().length);\n    this.workerPool = [];\n    \n    // Initialize worker pool for parallel processing\n    this.initializeWorkerPool();\n  }\n\n  /**\n   * Generate AI-powered optimization suggestions for a prompt\n   */\n  async generateOptimizationSuggestions(\n    originalPrompt: string,\n    targetMetrics: {\n      successRate?: number;\n      responseTime?: number;\n      qualityScore?: number;\n    } = {},\n    constraints: {\n      maxLength?: number;\n      maintainStyle?: boolean;\n      securityLevel?: 'basic' | 'enhanced' | 'strict';\n    } = {}\n  ): Promise<OptimizationSuggestion[]> {\n    const startTime = performance.now();\n    const cacheKey = this.generateCacheKey(originalPrompt, targetMetrics, constraints);\n    \n    // Check cache first\n    const cached = this.suggestionCache.get(cacheKey);\n    if (cached) {\n      this.trackPerformance('generateOptimizationSuggestions', performance.now() - startTime);\n      return cached;\n    }\n    \n    const suggestionId = `opt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Analyze current prompt with caching\n      const analysis = await this.getCachedAnalysis(originalPrompt);\n      \n      // Generate multiple optimization strategies in parallel\n      const strategies = await this.generateOptimizationStrategiesParallel(\n        originalPrompt, \n        analysis, \n        targetMetrics, \n        constraints\n      );\n      \n      // Process strategies in parallel using worker pool\n      const suggestions = await this.processStrategiesInParallel(\n        originalPrompt,\n        strategies,\n        constraints,\n        suggestionId\n      );\n      \n      // Store suggestions (async, don't wait)\n      this.storeOptimizationSuggestions(suggestionId, originalPrompt, suggestions, targetMetrics, constraints);\n      \n      // Cache results\n      this.suggestionCache.set(cacheKey, suggestions);\n      \n      // Track performance\n      this.trackPerformance('generateOptimizationSuggestions', performance.now() - startTime);\n      \n      return suggestions;\n    } catch (error) {\n      console.error('Error generating optimization suggestions:', error);\n      throw new Error(`Optimization suggestion generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Create and start an A/B test for prompt variants\n   */\n  async createABTest(\n    config: Omit<ABTestConfiguration, 'id' | 'status'>\n  ): Promise<ABTestConfiguration> {\n    const testId = `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const testConfig: ABTestConfiguration = {\n      ...config,\n      id: testId,\n      status: 'draft'\n    };\n    \n    // Validate test configuration\n    await this.validateABTestConfig(testConfig);\n    \n    // Security validation for all variants\n    for (const variant of testConfig.variants) {\n      const securityValidation = await this.validatePromptSecurity(variant.prompt, 'enhanced');\n      if (!securityValidation.passed) {\n        throw new Error(`Security validation failed for variant ${variant.name}: ${securityValidation.issues.join(', ')}`);\n      }\n    }\n    \n    // Store test configuration\n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_created',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: testConfig,\n      timestamp: new Date()\n    });\n    \n    this.runningTests.set(testId, testConfig);\n    \n    return testConfig;\n  }\n\n  /**\n   * Start an A/B test\n   */\n  async startABTest(testId: string): Promise<void> {\n    const testConfig = this.runningTests.get(testId);\n    if (!testConfig) {\n      throw new Error(`A/B test ${testId} not found`);\n    }\n    \n    testConfig.status = 'running';\n    testConfig.duration.startDate = new Date();\n    \n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_started',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: testConfig,\n      timestamp: new Date()\n    });\n    \n    console.log(`A/B test ${testId} started`);\n  }\n\n  /**\n   * Record A/B test execution result\n   */\n  async recordABTestResult(\n    testId: string,\n    variantId: string,\n    result: {\n      responseTime: number;\n      success: boolean;\n      qualityScore: number;\n      metadata?: any;\n    }\n  ): Promise<void> {\n    const testConfig = this.runningTests.get(testId);\n    if (!testConfig || testConfig.status !== 'running') {\n      throw new Error(`A/B test ${testId} is not running`);\n    }\n    \n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_result',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: {\n        testId,\n        variantId,\n        result,\n        timestamp: new Date()\n      },\n      timestamp: new Date()\n    });\n  }\n\n  /**\n   * Analyze A/B test results and determine winner\n   */\n  async analyzeABTestResults(testId: string): Promise<ABTestResult> {\n    const testConfig = this.runningTests.get(testId);\n    if (!testConfig) {\n      throw new Error(`A/B test ${testId} not found`);\n    }\n    \n    // Get all test results\n    const testResults = await this.eventStore.getEvents({\n      event_type: 'ab_test_result',\n      entity_id: testId\n    });\n    \n    // Group results by variant\n    const variantResults = new Map<string, any[]>();\n    testResults.forEach(result => {\n      const variantId = result.data.variantId;\n      if (!variantResults.has(variantId)) {\n        variantResults.set(variantId, []);\n      }\n      variantResults.get(variantId)!.push(result.data.result);\n    });\n    \n    // Calculate metrics for each variant\n    const variantMetrics = testConfig.variants.map(variant => {\n      const results = variantResults.get(variant.id) || [];\n      const metrics = this.calculateVariantMetrics(results);\n      \n      return {\n        id: variant.id,\n        name: variant.name,\n        metrics: {\n          ...metrics,\n          sampleSize: results.length\n        },\n        performanceComparison: {\n          vsControl: 0, // Will be calculated below\n          pValue: 0     // Will be calculated below\n        }\n      };\n    });\n    \n    // Determine winner using statistical significance\n    const winner = this.determineABTestWinner(variantMetrics, testConfig.metrics.primaryMetric);\n    \n    // Generate insights\n    const insights = await this.generateABTestInsights(testConfig, variantMetrics, winner);\n    \n    const result: ABTestResult = {\n      testId,\n      winner: winner.id,\n      confidence: winner.confidence,\n      statisticalSignificance: winner.significanceLevel > 0.95,\n      variants: variantMetrics,\n      insights,\n      recommendations: winner.recommendations,\n      completedAt: new Date()\n    };\n    \n    // Store results\n    await this.eventStore.recordEvent({\n      event_type: 'ab_test_completed',\n      entity_id: testId,\n      entity_type: 'ab_test',\n      data: result,\n      timestamp: new Date()\n    });\n    \n    // Update test status\n    testConfig.status = 'completed';\n    testConfig.results = result;\n    \n    return result;\n  }\n\n  /**\n   * Start automated prompt tuning\n   */\n  async startPromptTuning(\n    config: Omit<PromptTuningConfiguration, 'id' | 'status'>\n  ): Promise<PromptTuningConfiguration> {\n    const tuningId = `tuning_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const tuningConfig: PromptTuningConfiguration = {\n      ...config,\n      id: tuningId,\n      status: 'pending'\n    };\n    \n    // Validate configuration\n    await this.validateTuningConfig(tuningConfig);\n    \n    // Start tuning process\n    this.runningTuning.set(tuningId, tuningConfig);\n    \n    // Run tuning in background\n    this.executeTuningProcess(tuningConfig);\n    \n    return tuningConfig;\n  }\n\n  /**\n   * Get tuning progress\n   */\n  async getTuningProgress(tuningId: string): Promise<{\n    status: string;\n    currentIteration: number;\n    totalIterations: number;\n    bestMetrics: any;\n    estimatedCompletion: Date;\n  }> {\n    const tuningConfig = this.runningTuning.get(tuningId);\n    if (!tuningConfig) {\n      throw new Error(`Tuning process ${tuningId} not found`);\n    }\n    \n    const progress = {\n      status: tuningConfig.status,\n      currentIteration: tuningConfig.results?.iterations.length || 0,\n      totalIterations: tuningConfig.iterations,\n      bestMetrics: tuningConfig.results?.finalMetrics || null,\n      estimatedCompletion: new Date(Date.now() + 60000) // Placeholder\n    };\n    \n    return progress;\n  }\n\n  /**\n   * Generate optimization strategies\n   */\n  private async generateOptimizationStrategies(\n    originalPrompt: string,\n    analysis: PromptAnalysisResult,\n    targetMetrics: any,\n    constraints: any\n  ): Promise<any[]> {\n    const strategies = [];\n    \n    // Structure optimization\n    if (analysis.effectiveness.score < 70) {\n      strategies.push({\n        type: 'structure' as const,\n        description: 'Improve prompt structure and organization',\n        reasoning: 'Current prompt lacks clear structure and logical flow',\n        expectedImprovement: {\n          successRate: 15,\n          responseTime: 5,\n          qualityScore: 10\n        },\n        confidence: 0.8\n      });\n    }\n    \n    // Clarity optimization\n    if (analysis.patterns.failurePatterns.length > 0) {\n      strategies.push({\n        type: 'clarity' as const,\n        description: 'Enhance prompt clarity and reduce ambiguity',\n        reasoning: 'Failure patterns indicate confusion or misunderstanding',\n        expectedImprovement: {\n          successRate: 20,\n          responseTime: 0,\n          qualityScore: 15\n        },\n        confidence: 0.7\n      });\n    }\n    \n    // Specificity optimization\n    if (analysis.metrics.consistencyScore < 60) {\n      strategies.push({\n        type: 'specificity' as const,\n        description: 'Add more specific instructions and examples',\n        reasoning: 'Low consistency score indicates need for more specific guidance',\n        expectedImprovement: {\n          successRate: 10,\n          responseTime: -5,\n          qualityScore: 20\n        },\n        confidence: 0.9\n      });\n    }\n    \n    // Context optimization\n    strategies.push({\n      type: 'context' as const,\n      description: 'Optimize context and background information',\n      reasoning: 'Enhanced context can improve response quality',\n      expectedImprovement: {\n        successRate: 8,\n        responseTime: 2,\n        qualityScore: 12\n      },\n      confidence: 0.6\n    });\n    \n    return strategies;\n  }\n\n  /**\n   * Apply optimization strategy to prompt\n   */\n  private async applyOptimizationStrategy(\n    originalPrompt: string,\n    strategy: any,\n    constraints: any\n  ): Promise<string> {\n    const optimizationPrompt = `\n      Optimize this prompt based on the following strategy:\n      \n      Original Prompt: \"${originalPrompt}\"\n      \n      Strategy: ${strategy.type}\n      Description: ${strategy.description}\n      Reasoning: ${strategy.reasoning}\n      \n      Constraints:\n      ${constraints.maxLength ? `- Maximum length: ${constraints.maxLength} characters` : ''}\n      ${constraints.maintainStyle ? '- Maintain original writing style' : ''}\n      ${constraints.securityLevel ? `- Security level: ${constraints.securityLevel}` : ''}\n      \n      Return only the optimized prompt without any additional text or explanations.\n    `;\n    \n    try {\n      const response = await llmService.generate(optimizationPrompt);\n      let optimizedPrompt = response.response.trim();\n      \n      // Apply length constraint\n      if (constraints.maxLength && optimizedPrompt.length > constraints.maxLength) {\n        optimizedPrompt = optimizedPrompt.substring(0, constraints.maxLength);\n      }\n      \n      return optimizedPrompt;\n    } catch (error) {\n      console.error('Error applying optimization strategy:', error);\n      return originalPrompt; // Return original if optimization fails\n    }\n  }\n\n  /**\n   * Validate prompt security\n   */\n  private async validatePromptSecurity(\n    prompt: string,\n    securityLevel: 'basic' | 'enhanced' | 'strict'\n  ): Promise<{\n    passed: boolean;\n    issues: string[];\n    recommendations: string[];\n  }> {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    \n    // Basic security checks\n    const basicIssues = [\n      { pattern: /ignore.*instructions/i, message: 'Potential instruction bypass' },\n      { pattern: /system.*prompt/i, message: 'System prompt manipulation' },\n      { pattern: /jailbreak/i, message: 'Jailbreak attempt' },\n      { pattern: /password|api.*key|secret/i, message: 'Sensitive information exposure' }\n    ];\n    \n    basicIssues.forEach(check => {\n      if (check.pattern.test(prompt)) {\n        issues.push(check.message);\n      }\n    });\n    \n    // Enhanced security checks\n    if (securityLevel === 'enhanced' || securityLevel === 'strict') {\n      const enhancedIssues = [\n        { pattern: /role.*play/i, message: 'Role-playing instruction' },\n        { pattern: /pretend/i, message: 'Pretend instruction' },\n        { pattern: /act.*as/i, message: 'Acting instruction' },\n        { pattern: /override/i, message: 'Override instruction' }\n      ];\n      \n      enhancedIssues.forEach(check => {\n        if (check.pattern.test(prompt)) {\n          issues.push(check.message);\n        }\n      });\n    }\n    \n    // Strict security checks\n    if (securityLevel === 'strict') {\n      const strictIssues = [\n        { pattern: /you.*must/i, message: 'Imperative instruction' },\n        { pattern: /required.*to/i, message: 'Requirement instruction' },\n        { pattern: /force|compel/i, message: 'Forceful instruction' }\n      ];\n      \n      strictIssues.forEach(check => {\n        if (check.pattern.test(prompt)) {\n          issues.push(check.message);\n        }\n      });\n    }\n    \n    // Generate recommendations\n    if (issues.length > 0) {\n      recommendations.push('Review and sanitize identified security issues');\n      recommendations.push('Use more neutral and instructional language');\n      recommendations.push('Avoid manipulative or coercive phrasing');\n    }\n    \n    return {\n      passed: issues.length === 0,\n      issues,\n      recommendations\n    };\n  }\n\n  /**\n   * Validate A/B test configuration\n   */\n  private async validateABTestConfig(config: ABTestConfiguration): Promise<void> {\n    if (config.variants.length < 2) {\n      throw new Error('A/B test must have at least 2 variants');\n    }\n    \n    const totalWeight = config.variants.reduce((sum, variant) => sum + variant.weight, 0);\n    if (Math.abs(totalWeight - 100) > 0.1) {\n      throw new Error('Variant weights must sum to 100%');\n    }\n    \n    if (config.duration.endDate <= config.duration.startDate) {\n      throw new Error('End date must be after start date');\n    }\n  }\n\n  /**\n   * Calculate metrics for variant results\n   */\n  private calculateVariantMetrics(results: any[]): {\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  } {\n    if (results.length === 0) {\n      return { successRate: 0, responseTime: 0, qualityScore: 0 };\n    }\n    \n    const successfulResults = results.filter(r => r.success);\n    const successRate = (successfulResults.length / results.length) * 100;\n    const responseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;\n    const qualityScore = results.reduce((sum, r) => sum + r.qualityScore, 0) / results.length;\n    \n    return { successRate, responseTime, qualityScore };\n  }\n\n  /**\n   * Determine A/B test winner\n   */\n  private determineABTestWinner(\n    variantMetrics: any[],\n    primaryMetric: string\n  ): {\n    id: string;\n    confidence: number;\n    significanceLevel: number;\n    recommendations: string[];\n  } {\n    // Simple winner determination based on primary metric\n    let bestVariant = variantMetrics[0];\n    let bestScore = this.getMetricValue(bestVariant.metrics, primaryMetric);\n    \n    for (const variant of variantMetrics) {\n      const score = this.getMetricValue(variant.metrics, primaryMetric);\n      if (score > bestScore) {\n        bestScore = score;\n        bestVariant = variant;\n      }\n    }\n    \n    // Calculate confidence (simplified)\n    const avgScore = variantMetrics.reduce((sum, v) => sum + this.getMetricValue(v.metrics, primaryMetric), 0) / variantMetrics.length;\n    const confidence = Math.min(1, (bestScore - avgScore) / avgScore);\n    \n    return {\n      id: bestVariant.id,\n      confidence,\n      significanceLevel: 0.95, // Simplified\n      recommendations: [\n        `Implement ${bestVariant.name} as the winning variant`,\n        `Monitor performance for ${primaryMetric} improvements`,\n        'Consider running follow-up tests for further optimization'\n      ]\n    };\n  }\n\n  /**\n   * Get metric value by name\n   */\n  private getMetricValue(metrics: any, metricName: string): number {\n    switch (metricName) {\n      case 'success_rate':\n        return metrics.successRate;\n      case 'response_time':\n        return 1000 / metrics.responseTime; // Invert for \"higher is better\"\n      case 'quality_score':\n        return metrics.qualityScore;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Generate A/B test insights\n   */\n  private async generateABTestInsights(\n    testConfig: ABTestConfiguration,\n    variantMetrics: any[],\n    winner: any\n  ): Promise<string[]> {\n    const insights: string[] = [];\n    \n    // Performance insights\n    const winnerMetrics = variantMetrics.find(v => v.id === winner.id);\n    if (winnerMetrics) {\n      insights.push(`${winnerMetrics.name} achieved ${winnerMetrics.metrics.successRate.toFixed(1)}% success rate`);\n      insights.push(`Response time was ${winnerMetrics.metrics.responseTime.toFixed(0)}ms on average`);\n      insights.push(`Quality score reached ${winnerMetrics.metrics.qualityScore.toFixed(1)}`);\n    }\n    \n    // Comparative insights\n    const controlVariant = variantMetrics.find(v => v.name.toLowerCase().includes('control'));\n    if (controlVariant && winnerMetrics && winnerMetrics.id !== controlVariant.id) {\n      const improvement = ((winnerMetrics.metrics.successRate - controlVariant.metrics.successRate) / controlVariant.metrics.successRate) * 100;\n      insights.push(`Winner shows ${improvement.toFixed(1)}% improvement over control`);\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Validate tuning configuration\n   */\n  private async validateTuningConfig(config: PromptTuningConfiguration): Promise<void> {\n    if (config.iterations < 1 || config.iterations > 100) {\n      throw new Error('Iterations must be between 1 and 100');\n    }\n    \n    if (config.constraints.maxLength < 10) {\n      throw new Error('Maximum length must be at least 10 characters');\n    }\n  }\n\n  /**\n   * Execute tuning process\n   */\n  private async executeTuningProcess(config: PromptTuningConfiguration): Promise<void> {\n    try {\n      config.status = 'running';\n      \n      const iterations: PromptTuningResult['iterations'] = [];\n      let currentPrompt = config.originalPrompt;\n      let bestPrompt = currentPrompt;\n      let bestScore = 0;\n      \n      for (let i = 0; i < config.iterations; i++) {\n        // Generate variant\n        const variant = await this.generatePromptVariant(currentPrompt, config);\n        \n        // Test variant\n        const metrics = await this.testPromptVariant(variant, config);\n        \n        // Calculate score\n        const score = this.calculateTuningScore(metrics, config.objectives);\n        \n        // Update best if better\n        if (score > bestScore) {\n          bestScore = score;\n          bestPrompt = variant;\n        }\n        \n        // Record iteration\n        iterations.push({\n          iteration: i + 1,\n          prompt: variant,\n          metrics,\n          improvements: ((score - bestScore) / bestScore) * 100,\n          timestamp: new Date()\n        });\n        \n        // Update current prompt for next iteration\n        currentPrompt = variant;\n      }\n      \n      // Calculate final results\n      const finalMetrics = iterations[iterations.length - 1].metrics;\n      const baselineScore = this.calculateTuningScore(\n        { successRate: 50, responseTime: 1000, qualityScore: 50 },\n        config.objectives\n      );\n      const totalImprovement = ((bestScore - baselineScore) / baselineScore) * 100;\n      \n      const result: PromptTuningResult = {\n        tuningId: config.id,\n        iterations,\n        bestPrompt,\n        finalMetrics,\n        totalImprovement,\n        convergenceAnalysis: {\n          converged: iterations.length >= 5 && \n                    iterations.slice(-5).every(iter => Math.abs(iter.improvements) < 1),\n          stagnationPoint: iterations.length,\n          optimalIteration: iterations.findIndex(iter => iter.prompt === bestPrompt) + 1\n        },\n        completedAt: new Date()\n      };\n      \n      config.status = 'completed';\n      config.results = result;\n      \n      // Store results\n      await this.eventStore.recordEvent({\n        event_type: 'tuning_completed',\n        entity_id: config.id,\n        entity_type: 'tuning',\n        data: result,\n        timestamp: new Date()\n      });\n      \n    } catch (error) {\n      config.status = 'failed';\n      console.error('Tuning process failed:', error);\n    }\n  }\n\n  /**\n   * Generate prompt variant for tuning\n   */\n  private async generatePromptVariant(\n    currentPrompt: string,\n    config: PromptTuningConfiguration\n  ): Promise<string> {\n    const variationPrompt = `\n      Create a variation of this prompt that improves ${config.objectives.primary}:\n      \n      Current Prompt: \"${currentPrompt}\"\n      \n      Constraints:\n      - Maximum length: ${config.constraints.maxLength} characters\n      - Must include: ${config.constraints.requiredKeywords.join(', ')}\n      - Must not include: ${config.constraints.prohibitedKeywords.join(', ')}\n      \n      Return only the improved prompt without explanations.\n    `;\n    \n    try {\n      const response = await llmService.generate(variationPrompt);\n      return response.response.trim();\n    } catch (error) {\n      console.error('Error generating prompt variant:', error);\n      return currentPrompt; // Return original if generation fails\n    }\n  }\n\n  /**\n   * Test prompt variant\n   */\n  private async testPromptVariant(\n    prompt: string,\n    config: PromptTuningConfiguration\n  ): Promise<{\n    successRate: number;\n    responseTime: number;\n    qualityScore: number;\n  }> {\n    // Simplified testing - in real implementation, use actual test cases\n    const mockMetrics = {\n      successRate: 70 + Math.random() * 25,\n      responseTime: 800 + Math.random() * 400,\n      qualityScore: 60 + Math.random() * 30\n    };\n    \n    return mockMetrics;\n  }\n\n  /**\n   * Calculate tuning score\n   */\n  private calculateTuningScore(\n    metrics: { successRate: number; responseTime: number; qualityScore: number },\n    objectives: PromptTuningConfiguration['objectives']\n  ): number {\n    const primaryWeight = 0.6;\n    const secondaryWeight = 0.4 / objectives.secondary.length;\n    \n    let score = 0;\n    \n    // Primary objective\n    switch (objectives.primary) {\n      case 'success_rate':\n        score += metrics.successRate * primaryWeight;\n        break;\n      case 'response_time':\n        score += (1000 / metrics.responseTime) * primaryWeight;\n        break;\n      case 'quality_score':\n        score += metrics.qualityScore * primaryWeight;\n        break;\n    }\n    \n    // Secondary objectives\n    objectives.secondary.forEach(objective => {\n      switch (objective) {\n        case 'success_rate':\n          score += metrics.successRate * secondaryWeight;\n          break;\n        case 'response_time':\n          score += (1000 / metrics.responseTime) * secondaryWeight;\n          break;\n        case 'quality_score':\n          score += metrics.qualityScore * secondaryWeight;\n          break;\n      }\n    });\n    \n    return score;\n  }\n  \n  /**\n   * Generate cache key for optimization suggestions\n   */\n  private generateCacheKey(prompt: string, metrics: any, constraints: any): string {\n    const content = `${prompt}${JSON.stringify(metrics)}${JSON.stringify(constraints)}`;\n    return createHash('md5').update(content).digest('hex');\n  }\n  \n  /**\n   * Get cached prompt analysis\n   */\n  private async getCachedAnalysis(prompt: string): Promise<PromptAnalysisResult> {\n    const cacheKey = createHash('md5').update(prompt).digest('hex');\n    const cached = this.analysisCache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n    \n    const analysis = await promptAnalyzer.analyzePrompt('temp_prompt', prompt);\n    this.analysisCache.set(cacheKey, analysis);\n    \n    return analysis;\n  }\n  \n  /**\n   * Generate optimization strategies in parallel\n   */\n  private async generateOptimizationStrategiesParallel(\n    originalPrompt: string,\n    analysis: PromptAnalysisResult,\n    targetMetrics: any,\n    constraints: any\n  ): Promise<any[]> {\n    const strategyPromises = [\n      this.generateStructureStrategy(analysis),\n      this.generateClarityStrategy(analysis),\n      this.generateSpecificityStrategy(analysis),\n      this.generateContextStrategy(analysis),\n      this.generatePerformanceStrategy(analysis, targetMetrics)\n    ];\n    \n    const strategies = await Promise.all(strategyPromises);\n    return strategies.filter(strategy => strategy !== null);\n  }\n  \n  /**\n   * Process strategies in parallel using worker pool\n   */\n  private async processStrategiesInParallel(\n    originalPrompt: string,\n    strategies: any[],\n    constraints: any,\n    suggestionId: string\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n    const processingPromises = strategies.map(async (strategy) => {\n      try {\n        const optimizedPrompt = await this.applyOptimizationStrategy(\n          originalPrompt, \n          strategy, \n          constraints\n        );\n        \n        // Security validation\n        const securityValidation = await this.validatePromptSecurity(\n          optimizedPrompt, \n          constraints.securityLevel || 'basic'\n        );\n        \n        if (securityValidation.passed || constraints.securityLevel === 'basic') {\n          return {\n            id: `${suggestionId}_${strategy.type}`,\n            originalPrompt,\n            optimizedPrompt,\n            changes: [{\n              type: strategy.type,\n              description: strategy.description,\n              reasoning: strategy.reasoning\n            }],\n            expectedImprovement: strategy.expectedImprovement,\n            confidence: strategy.confidence,\n            securityValidation,\n            timestamp: new Date()\n          };\n        }\n        \n        return null;\n      } catch (error) {\n        console.warn(`Strategy ${strategy.type} failed:`, error.message);\n        return null;\n      }\n    });\n    \n    const results = await Promise.all(processingPromises);\n    return results.filter(result => result !== null);\n  }\n  \n  /**\n   * Generate structure optimization strategy\n   */\n  private async generateStructureStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    if (analysis.effectiveness.score < 70) {\n      return {\n        type: 'structure' as const,\n        description: 'Improve prompt structure and organization',\n        reasoning: 'Current prompt lacks clear structure and logical flow',\n        expectedImprovement: {\n          successRate: 15,\n          responseTime: 5,\n          qualityScore: 10\n        },\n        confidence: 0.8\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Generate clarity optimization strategy\n   */\n  private async generateClarityStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    if (analysis.patterns.failurePatterns.length > 0) {\n      return {\n        type: 'clarity' as const,\n        description: 'Enhance prompt clarity and reduce ambiguity',\n        reasoning: 'Failure patterns indicate confusion or misunderstanding',\n        expectedImprovement: {\n          successRate: 20,\n          responseTime: 0,\n          qualityScore: 15\n        },\n        confidence: 0.7\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Generate specificity optimization strategy\n   */\n  private async generateSpecificityStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    if (analysis.metrics.consistencyScore < 60) {\n      return {\n        type: 'specificity' as const,\n        description: 'Add more specific instructions and examples',\n        reasoning: 'Low consistency score indicates need for more specific guidance',\n        expectedImprovement: {\n          successRate: 10,\n          responseTime: -5,\n          qualityScore: 20\n        },\n        confidence: 0.9\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Generate context optimization strategy\n   */\n  private async generateContextStrategy(analysis: PromptAnalysisResult): Promise<any> {\n    return {\n      type: 'context' as const,\n      description: 'Optimize context and background information',\n      reasoning: 'Enhanced context can improve response quality',\n      expectedImprovement: {\n        successRate: 8,\n        responseTime: 2,\n        qualityScore: 12\n      },\n      confidence: 0.6\n    };\n  }\n  \n  /**\n   * Generate performance optimization strategy\n   */\n  private async generatePerformanceStrategy(analysis: PromptAnalysisResult, targetMetrics: any): Promise<any> {\n    return {\n      type: 'performance' as const,\n      description: 'Optimize for better response time and quality',\n      reasoning: 'Target specific performance improvements',\n      expectedImprovement: {\n        successRate: targetMetrics.successRate ? 10 : 5,\n        responseTime: targetMetrics.responseTime ? 15 : 8,\n        qualityScore: targetMetrics.qualityScore ? 12 : 6\n      },\n      confidence: 0.7\n    };\n  }\n  \n  /**\n   * Store optimization suggestions asynchronously\n   */\n  private async storeOptimizationSuggestions(\n    suggestionId: string,\n    originalPrompt: string,\n    suggestions: OptimizationSuggestion[],\n    targetMetrics: any,\n    constraints: any\n  ): Promise<void> {\n    try {\n      await this.eventStore.recordEvent({\n        event_type: 'optimization_suggestions',\n        entity_id: suggestionId,\n        entity_type: 'prompt',\n        data: {\n          originalPrompt,\n          suggestions,\n          targetMetrics,\n          constraints\n        },\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.warn('Failed to store optimization suggestions:', error.message);\n    }\n  }\n  \n  /**\n   * Initialize worker pool for parallel processing\n   */\n  private initializeWorkerPool(): void {\n    // Worker pool implementation would go here\n    // For now, we'll use Promise.all for parallel processing\n    console.log(`Initialized optimization engine with ${this.maxWorkers} workers`);\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 30000) { // 30 seconds\n      console.warn(`Slow optimization operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg),\n          max: Math.round(max),\n          min: Math.round(min),\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear caches\n   */\n  public clearCaches(): void {\n    this.analysisCache.clear();\n    this.suggestionCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Optimization engine caches cleared');\n  }\n  \n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { analysis: any; suggestions: any } {\n    return {\n      analysis: {\n        size: this.analysisCache.size,\n        max: this.analysisCache.max,\n        hitRate: this.analysisCache.calculatedSize > 0 ? \n          (this.analysisCache.calculatedSize - this.analysisCache.size) / this.analysisCache.calculatedSize : 0\n      },\n      suggestions: {\n        size: this.suggestionCache.size,\n        max: this.suggestionCache.max,\n        hitRate: this.suggestionCache.calculatedSize > 0 ? \n          (this.suggestionCache.calculatedSize - this.suggestionCache.size) / this.suggestionCache.calculatedSize : 0\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const optimizationEngine = new OptimizationEngine();"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AA9IR,MAAAC,YAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,gBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAE,YAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA,MAAAG,WAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAI,YAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAGA,MAAAK,QAAA;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAsHA,MAAaM,kBAAkB;EAU7BC,YAAA;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACE,IAAI,CAACW,UAAU,GAAGP,YAAA,CAAAQ,UAAU,CAACC,WAAW,EAAE;IAAC;IAAAf,cAAA,GAAAE,CAAA;IAC3C,IAAI,CAACc,YAAY,GAAG,IAAIC,GAAG,EAAE;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IAC9B,IAAI,CAACgB,aAAa,GAAG,IAAID,GAAG,EAAE;IAE9B;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACA,IAAI,CAACiB,aAAa,GAAG,IAAIZ,WAAA,CAAAa,QAAQ,CAAC;MAChCC,GAAG,EAAE,GAAG;MACRC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;KACrB,CAAC;IAAC;IAAAtB,cAAA,GAAAE,CAAA;IAEH,IAAI,CAACqB,eAAe,GAAG,IAAIhB,WAAA,CAAAa,QAAQ,CAAC;MAClCC,GAAG,EAAE,GAAG;MACRC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;KACrB,CAAC;IAAC;IAAAtB,cAAA,GAAAE,CAAA;IAEH,IAAI,CAACsB,kBAAkB,GAAG,IAAIP,GAAG,EAAE;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IACpC,IAAI,CAACuB,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEvB,OAAO,CAAC,IAAI,CAAC,CAACwB,IAAI,EAAE,CAACC,MAAM,CAAC;IAAC;IAAA7B,cAAA,GAAAE,CAAA;IAC3D,IAAI,CAAC4B,UAAU,GAAG,EAAE;IAEpB;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC6B,oBAAoB,EAAE;EAC7B;EAEA;;;EAGA,MAAMC,+BAA+BA,CACnCC,cAAsB,EACtBC,aAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAmC,CAAA,UAII,EAAE,GACNC,WAAA;EAAA;EAAA,CAAApC,cAAA,GAAAmC,CAAA,UAII,EAAE;IAAA;IAAAnC,cAAA,GAAAY,CAAA;IAEN,MAAMyB,SAAS;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAGM,YAAA,CAAA8B,WAAW,CAACC,GAAG,EAAE;IACnC,MAAMC,QAAQ;IAAA;IAAA,CAAAxC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACuC,gBAAgB,CAACR,cAAc,EAAEC,aAAa,EAAEE,WAAW,CAAC;IAElF;IACA,MAAMM,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACqB,eAAe,CAACoB,GAAG,CAACH,QAAQ,CAAC;IAAC;IAAAxC,cAAA,GAAAE,CAAA;IAClD,IAAIwC,MAAM,EAAE;MAAA;MAAA1C,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACV,IAAI,CAAC0C,gBAAgB,CAAC,iCAAiC,EAAEpC,YAAA,CAAA8B,WAAW,CAACC,GAAG,EAAE,GAAGF,SAAS,CAAC;MAAC;MAAArC,cAAA,GAAAE,CAAA;MACxF,OAAOwC,MAAM;IACf,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAmC,CAAA;IAAA;IAED,MAAMU,YAAY;IAAA;IAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAG,OAAO4C,IAAI,CAACP,GAAG,EAAE,IAAIb,IAAI,CAACqB,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAAC;IAAAjD,cAAA,GAAAE,CAAA;IAEpF,IAAI;MACF;MACA,MAAMgD,QAAQ;MAAA;MAAA,CAAAlD,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACiD,iBAAiB,CAAClB,cAAc,CAAC;MAE7D;MACA,MAAMmB,UAAU;MAAA;MAAA,CAAApD,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACmD,sCAAsC,CAClEpB,cAAc,EACdiB,QAAQ,EACRhB,aAAa,EACbE,WAAW,CACZ;MAED;MACA,MAAMkB,WAAW;MAAA;MAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACqD,2BAA2B,CACxDtB,cAAc,EACdmB,UAAU,EACVhB,WAAW,EACXS,YAAY,CACb;MAED;MAAA;MAAA7C,cAAA,GAAAE,CAAA;MACA,IAAI,CAACsD,4BAA4B,CAACX,YAAY,EAAEZ,cAAc,EAAEqB,WAAW,EAAEpB,aAAa,EAAEE,WAAW,CAAC;MAExG;MAAA;MAAApC,cAAA,GAAAE,CAAA;MACA,IAAI,CAACqB,eAAe,CAACkC,GAAG,CAACjB,QAAQ,EAAEc,WAAW,CAAC;MAE/C;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACA,IAAI,CAAC0C,gBAAgB,CAAC,iCAAiC,EAAEpC,YAAA,CAAA8B,WAAW,CAACC,GAAG,EAAE,GAAGF,SAAS,CAAC;MAAC;MAAArC,cAAA,GAAAE,CAAA;MAExF,OAAOoD,WAAW;IACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACdyD,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAAC;MAAA1D,cAAA,GAAAE,CAAA;MACnE,MAAM,IAAI0D,KAAK,CAAC,8CAA8CF,KAAK,YAAYE,KAAK;MAAA;MAAA,CAAA5D,cAAA,GAAAmC,CAAA,UAAGuB,KAAK,CAACG,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAmC,CAAA,UAAG,eAAe,GAAE,CAAC;IAC3H;EACF;EAEA;;;EAGA,MAAM2B,YAAYA,CAChBC,MAAkD;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAElD,MAAMoD,MAAM;IAAA;IAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAG,WAAW4C,IAAI,CAACP,GAAG,EAAE,IAAIb,IAAI,CAACqB,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAEjF,MAAMgB,UAAU;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAwB;MACtC,GAAG6D,MAAM;MACTG,EAAE,EAAEF,MAAM;MACVG,MAAM,EAAE;KACT;IAED;IAAA;IAAAnE,cAAA,GAAAE,CAAA;IACA,MAAM,IAAI,CAACkE,oBAAoB,CAACH,UAAU,CAAC;IAE3C;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IACA,KAAK,MAAMmE,OAAO,IAAIJ,UAAU,CAACK,QAAQ,EAAE;MACzC,MAAMC,kBAAkB;MAAA;MAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACsE,sBAAsB,CAACH,OAAO,CAACI,MAAM,EAAE,UAAU,CAAC;MAAC;MAAAzE,cAAA,GAAAE,CAAA;MACzF,IAAI,CAACqE,kBAAkB,CAACG,MAAM,EAAE;QAAA;QAAA1E,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAC9B,MAAM,IAAI0D,KAAK,CAAC,0CAA0CS,OAAO,CAACM,IAAI,KAAKJ,kBAAkB,CAACK,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;MACpH,CAAC;MAAA;MAAA;QAAA7E,cAAA,GAAAmC,CAAA;MAAA;IACH;IAEA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACA,MAAM,IAAI,CAACW,UAAU,CAACiE,WAAW,CAAC;MAChCC,UAAU,EAAE,iBAAiB;MAC7BC,SAAS,EAAEhB,MAAM;MACjBiB,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEjB,UAAU;MAChBkB,SAAS,EAAE,IAAIrC,IAAI;KACpB,CAAC;IAAC;IAAA9C,cAAA,GAAAE,CAAA;IAEH,IAAI,CAACc,YAAY,CAACyC,GAAG,CAACO,MAAM,EAAEC,UAAU,CAAC;IAAC;IAAAjE,cAAA,GAAAE,CAAA;IAE1C,OAAO+D,UAAU;EACnB;EAEA;;;EAGA,MAAMmB,WAAWA,CAACpB,MAAc;IAAA;IAAAhE,cAAA,GAAAY,CAAA;IAC9B,MAAMqD,UAAU;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACc,YAAY,CAAC2B,GAAG,CAACqB,MAAM,CAAC;IAAC;IAAAhE,cAAA,GAAAE,CAAA;IACjD,IAAI,CAAC+D,UAAU,EAAE;MAAA;MAAAjE,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACf,MAAM,IAAI0D,KAAK,CAAC,YAAYI,MAAM,YAAY,CAAC;IACjD,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAED+D,UAAU,CAACE,MAAM,GAAG,SAAS;IAAC;IAAAnE,cAAA,GAAAE,CAAA;IAC9B+D,UAAU,CAACoB,QAAQ,CAACC,SAAS,GAAG,IAAIxC,IAAI,EAAE;IAAC;IAAA9C,cAAA,GAAAE,CAAA;IAE3C,MAAM,IAAI,CAACW,UAAU,CAACiE,WAAW,CAAC;MAChCC,UAAU,EAAE,iBAAiB;MAC7BC,SAAS,EAAEhB,MAAM;MACjBiB,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEjB,UAAU;MAChBkB,SAAS,EAAE,IAAIrC,IAAI;KACpB,CAAC;IAAC;IAAA9C,cAAA,GAAAE,CAAA;IAEHyD,OAAO,CAAC4B,GAAG,CAAC,YAAYvB,MAAM,UAAU,CAAC;EAC3C;EAEA;;;EAGA,MAAMwB,kBAAkBA,CACtBxB,MAAc,EACdyB,SAAiB,EACjBC,MAKC;IAAA;IAAA1F,cAAA,GAAAY,CAAA;IAED,MAAMqD,UAAU;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACc,YAAY,CAAC2B,GAAG,CAACqB,MAAM,CAAC;IAAC;IAAAhE,cAAA,GAAAE,CAAA;IACjD;IAAI;IAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAC8B,UAAU;IAAA;IAAA,CAAAjE,cAAA,GAAAmC,CAAA,UAAI8B,UAAU,CAACE,MAAM,KAAK,SAAS,GAAE;MAAA;MAAAnE,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAClD,MAAM,IAAI0D,KAAK,CAAC,YAAYI,MAAM,iBAAiB,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAED,MAAM,IAAI,CAACW,UAAU,CAACiE,WAAW,CAAC;MAChCC,UAAU,EAAE,gBAAgB;MAC5BC,SAAS,EAAEhB,MAAM;MACjBiB,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAE;QACJlB,MAAM;QACNyB,SAAS;QACTC,MAAM;QACNP,SAAS,EAAE,IAAIrC,IAAI;OACpB;MACDqC,SAAS,EAAE,IAAIrC,IAAI;KACpB,CAAC;EACJ;EAEA;;;EAGA,MAAM6C,oBAAoBA,CAAC3B,MAAc;IAAA;IAAAhE,cAAA,GAAAY,CAAA;IACvC,MAAMqD,UAAU;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACc,YAAY,CAAC2B,GAAG,CAACqB,MAAM,CAAC;IAAC;IAAAhE,cAAA,GAAAE,CAAA;IACjD,IAAI,CAAC+D,UAAU,EAAE;MAAA;MAAAjE,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACf,MAAM,IAAI0D,KAAK,CAAC,YAAYI,MAAM,YAAY,CAAC;IACjD,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAmC,CAAA;IAAA;IAED;IACA,MAAMyD,WAAW;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACW,UAAU,CAACgF,SAAS,CAAC;MAClDd,UAAU,EAAE,gBAAgB;MAC5BC,SAAS,EAAEhB;KACZ,CAAC;IAEF;IACA,MAAM8B,cAAc;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAG,IAAIe,GAAG,EAAiB;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IAChD0F,WAAW,CAACG,OAAO,CAACL,MAAM,IAAG;MAAA;MAAA1F,cAAA,GAAAY,CAAA;MAC3B,MAAM6E,SAAS;MAAA;MAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAGwF,MAAM,CAACR,IAAI,CAACO,SAAS;MAAC;MAAAzF,cAAA,GAAAE,CAAA;MACxC,IAAI,CAAC4F,cAAc,CAACE,GAAG,CAACP,SAAS,CAAC,EAAE;QAAA;QAAAzF,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAClC4F,cAAc,CAACrC,GAAG,CAACgC,SAAS,EAAE,EAAE,CAAC;MACnC,CAAC;MAAA;MAAA;QAAAzF,cAAA,GAAAmC,CAAA;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACD4F,cAAc,CAACnD,GAAG,CAAC8C,SAAS,CAAE,CAACQ,IAAI,CAACP,MAAM,CAACR,IAAI,CAACQ,MAAM,CAAC;IACzD,CAAC,CAAC;IAEF;IACA,MAAMQ,cAAc;IAAA;IAAA,CAAAlG,cAAA,GAAAE,CAAA,QAAG+D,UAAU,CAACK,QAAQ,CAAC6B,GAAG,CAAC9B,OAAO,IAAG;MAAA;MAAArE,cAAA,GAAAY,CAAA;MACvD,MAAMwF,OAAO;MAAA;MAAA,CAAApG,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAA2D,cAAc,CAACnD,GAAG,CAAC0B,OAAO,CAACH,EAAE,CAAC;MAAA;MAAA,CAAAlE,cAAA,GAAAmC,CAAA,WAAI,EAAE;MACpD,MAAMkE,OAAO;MAAA;MAAA,CAAArG,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACoG,uBAAuB,CAACF,OAAO,CAAC;MAAC;MAAApG,cAAA,GAAAE,CAAA;MAEtD,OAAO;QACLgE,EAAE,EAAEG,OAAO,CAACH,EAAE;QACdS,IAAI,EAAEN,OAAO,CAACM,IAAI;QAClB0B,OAAO,EAAE;UACP,GAAGA,OAAO;UACVE,UAAU,EAAEH,OAAO,CAACvE;SACrB;QACD2E,qBAAqB,EAAE;UACrBC,SAAS,EAAE,CAAC;UAAE;UACdC,MAAM,EAAE,CAAC,CAAK;;OAEjB;IACH,CAAC,CAAC;IAEF;IACA,MAAMC,MAAM;IAAA;IAAA,CAAA3G,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC0G,qBAAqB,CAACV,cAAc,EAAEjC,UAAU,CAACoC,OAAO,CAACQ,aAAa,CAAC;IAE3F;IACA,MAAMC,QAAQ;IAAA;IAAA,CAAA9G,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAAC6G,sBAAsB,CAAC9C,UAAU,EAAEiC,cAAc,EAAES,MAAM,CAAC;IAEtF,MAAMjB,MAAM;IAAA;IAAA,CAAA1F,cAAA,GAAAE,CAAA,QAAiB;MAC3B8D,MAAM;MACN2C,MAAM,EAAEA,MAAM,CAACzC,EAAE;MACjB8C,UAAU,EAAEL,MAAM,CAACK,UAAU;MAC7BC,uBAAuB,EAAEN,MAAM,CAACO,iBAAiB,GAAG,IAAI;MACxD5C,QAAQ,EAAE4B,cAAc;MACxBY,QAAQ;MACRK,eAAe,EAAER,MAAM,CAACQ,eAAe;MACvCC,WAAW,EAAE,IAAItE,IAAI;KACtB;IAED;IAAA;IAAA9C,cAAA,GAAAE,CAAA;IACA,MAAM,IAAI,CAACW,UAAU,CAACiE,WAAW,CAAC;MAChCC,UAAU,EAAE,mBAAmB;MAC/BC,SAAS,EAAEhB,MAAM;MACjBiB,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEQ,MAAM;MACZP,SAAS,EAAE,IAAIrC,IAAI;KACpB,CAAC;IAEF;IAAA;IAAA9C,cAAA,GAAAE,CAAA;IACA+D,UAAU,CAACE,MAAM,GAAG,WAAW;IAAC;IAAAnE,cAAA,GAAAE,CAAA;IAChC+D,UAAU,CAACmC,OAAO,GAAGV,MAAM;IAAC;IAAA1F,cAAA,GAAAE,CAAA;IAE5B,OAAOwF,MAAM;EACf;EAEA;;;EAGA,MAAM2B,iBAAiBA,CACrBtD,MAAwD;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAExD,MAAM0G,QAAQ;IAAA;IAAA,CAAAtH,cAAA,GAAAE,CAAA,QAAG,UAAU4C,IAAI,CAACP,GAAG,EAAE,IAAIb,IAAI,CAACqB,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAElF,MAAMsE,YAAY;IAAA;IAAA,CAAAvH,cAAA,GAAAE,CAAA,QAA8B;MAC9C,GAAG6D,MAAM;MACTG,EAAE,EAAEoD,QAAQ;MACZnD,MAAM,EAAE;KACT;IAED;IAAA;IAAAnE,cAAA,GAAAE,CAAA;IACA,MAAM,IAAI,CAACsH,oBAAoB,CAACD,YAAY,CAAC;IAE7C;IAAA;IAAAvH,cAAA,GAAAE,CAAA;IACA,IAAI,CAACgB,aAAa,CAACuC,GAAG,CAAC6D,QAAQ,EAAEC,YAAY,CAAC;IAE9C;IAAA;IAAAvH,cAAA,GAAAE,CAAA;IACA,IAAI,CAACuH,oBAAoB,CAACF,YAAY,CAAC;IAAC;IAAAvH,cAAA,GAAAE,CAAA;IAExC,OAAOqH,YAAY;EACrB;EAEA;;;EAGA,MAAMG,iBAAiBA,CAACJ,QAAgB;IAAA;IAAAtH,cAAA,GAAAY,CAAA;IAOtC,MAAM2G,YAAY;IAAA;IAAA,CAAAvH,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACgB,aAAa,CAACyB,GAAG,CAAC2E,QAAQ,CAAC;IAAC;IAAAtH,cAAA,GAAAE,CAAA;IACtD,IAAI,CAACqH,YAAY,EAAE;MAAA;MAAAvH,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACjB,MAAM,IAAI0D,KAAK,CAAC,kBAAkB0D,QAAQ,YAAY,CAAC;IACzD,CAAC;IAAA;IAAA;MAAAtH,cAAA,GAAAmC,CAAA;IAAA;IAED,MAAMwF,QAAQ;IAAA;IAAA,CAAA3H,cAAA,GAAAE,CAAA,QAAG;MACfiE,MAAM,EAAEoD,YAAY,CAACpD,MAAM;MAC3ByD,gBAAgB;MAAE;MAAA,CAAA5H,cAAA,GAAAmC,CAAA,WAAAoF,YAAY,CAACnB,OAAO,EAAEyB,UAAU,CAAChG,MAAM;MAAA;MAAA,CAAA7B,cAAA,GAAAmC,CAAA,WAAI,CAAC;MAC9D2F,eAAe,EAAEP,YAAY,CAACM,UAAU;MACxCE,WAAW;MAAE;MAAA,CAAA/H,cAAA,GAAAmC,CAAA,WAAAoF,YAAY,CAACnB,OAAO,EAAE4B,YAAY;MAAA;MAAA,CAAAhI,cAAA,GAAAmC,CAAA,WAAI,IAAI;MACvD8F,mBAAmB,EAAE,IAAInF,IAAI,CAACA,IAAI,CAACP,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;KACnD;IAAC;IAAAvC,cAAA,GAAAE,CAAA;IAEF,OAAOyH,QAAQ;EACjB;EAEA;;;EAGQ,MAAMO,8BAA8BA,CAC1CjG,cAAsB,EACtBiB,QAA8B,EAC9BhB,aAAkB,EAClBE,WAAgB;IAAA;IAAApC,cAAA,GAAAY,CAAA;IAEhB,MAAMwC,UAAU;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,QAAG,EAAE;IAErB;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA,IAAIgD,QAAQ,CAACiF,aAAa,CAACC,KAAK,GAAG,EAAE,EAAE;MAAA;MAAApI,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACrCkD,UAAU,CAAC6C,IAAI,CAAC;QACdoC,IAAI,EAAE,WAAoB;QAC1BC,WAAW,EAAE,2CAA2C;QACxDC,SAAS,EAAE,uDAAuD;QAClEC,mBAAmB,EAAE;UACnBC,WAAW,EAAE,EAAE;UACfC,YAAY,EAAE,CAAC;UACfC,YAAY,EAAE;SACf;QACD3B,UAAU,EAAE;OACb,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAmC,CAAA;IAAA;IAED;IAAAnC,cAAA,GAAAE,CAAA;IACA,IAAIgD,QAAQ,CAAC0F,QAAQ,CAACC,eAAe,CAAChH,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA7B,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAChDkD,UAAU,CAAC6C,IAAI,CAAC;QACdoC,IAAI,EAAE,SAAkB;QACxBC,WAAW,EAAE,6CAA6C;QAC1DC,SAAS,EAAE,yDAAyD;QACpEC,mBAAmB,EAAE;UACnBC,WAAW,EAAE,EAAE;UACfC,YAAY,EAAE,CAAC;UACfC,YAAY,EAAE;SACf;QACD3B,UAAU,EAAE;OACb,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAmC,CAAA;IAAA;IAED;IAAAnC,cAAA,GAAAE,CAAA;IACA,IAAIgD,QAAQ,CAACmD,OAAO,CAACyC,gBAAgB,GAAG,EAAE,EAAE;MAAA;MAAA9I,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAC1CkD,UAAU,CAAC6C,IAAI,CAAC;QACdoC,IAAI,EAAE,aAAsB;QAC5BC,WAAW,EAAE,6CAA6C;QAC1DC,SAAS,EAAE,iEAAiE;QAC5EC,mBAAmB,EAAE;UACnBC,WAAW,EAAE,EAAE;UACfC,YAAY,EAAE,CAAC,CAAC;UAChBC,YAAY,EAAE;SACf;QACD3B,UAAU,EAAE;OACb,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAmC,CAAA;IAAA;IAED;IAAAnC,cAAA,GAAAE,CAAA;IACAkD,UAAU,CAAC6C,IAAI,CAAC;MACdoC,IAAI,EAAE,SAAkB;MACxBC,WAAW,EAAE,6CAA6C;MAC1DC,SAAS,EAAE,+CAA+C;MAC1DC,mBAAmB,EAAE;QACnBC,WAAW,EAAE,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,YAAY,EAAE;OACf;MACD3B,UAAU,EAAE;KACb,CAAC;IAAC;IAAAhH,cAAA,GAAAE,CAAA;IAEH,OAAOkD,UAAU;EACnB;EAEA;;;EAGQ,MAAM2F,yBAAyBA,CACrC9G,cAAsB,EACtB+G,QAAa,EACb5G,WAAgB;IAAA;IAAApC,cAAA,GAAAY,CAAA;IAEhB,MAAMqI,kBAAkB;IAAA;IAAA,CAAAjJ,cAAA,GAAAE,CAAA,QAAG;;;0BAGL+B,cAAc;;kBAEtB+G,QAAQ,CAACX,IAAI;qBACVW,QAAQ,CAACV,WAAW;mBACtBU,QAAQ,CAACT,SAAS;;;QAG7BnG,WAAW,CAAC8G,SAAS;IAAA;IAAA,CAAAlJ,cAAA,GAAAmC,CAAA,WAAG,qBAAqBC,WAAW,CAAC8G,SAAS,aAAa;IAAA;IAAA,CAAAlJ,cAAA,GAAAmC,CAAA,WAAG,EAAE;QACpFC,WAAW,CAAC+G,aAAa;IAAA;IAAA,CAAAnJ,cAAA,GAAAmC,CAAA,WAAG,mCAAmC;IAAA;IAAA,CAAAnC,cAAA,GAAAmC,CAAA,WAAG,EAAE;QACpEC,WAAW,CAACgH,aAAa;IAAA;IAAA,CAAApJ,cAAA,GAAAmC,CAAA,WAAG,qBAAqBC,WAAW,CAACgH,aAAa,EAAE;IAAA;IAAA,CAAApJ,cAAA,GAAAmC,CAAA,WAAG,EAAE;;;KAGpF;IAAC;IAAAnC,cAAA,GAAAE,CAAA;IAEF,IAAI;MACF,MAAMmJ,QAAQ;MAAA;MAAA,CAAArJ,cAAA,GAAAE,CAAA,QAAG,MAAMC,YAAA,CAAAmJ,UAAU,CAACC,QAAQ,CAACN,kBAAkB,CAAC;MAC9D,IAAIO,eAAe;MAAA;MAAA,CAAAxJ,cAAA,GAAAE,CAAA,QAAGmJ,QAAQ,CAACA,QAAQ,CAACI,IAAI,EAAE;MAE9C;MAAA;MAAAzJ,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAAC,WAAW,CAAC8G,SAAS;MAAA;MAAA,CAAAlJ,cAAA,GAAAmC,CAAA,WAAIqH,eAAe,CAAC3H,MAAM,GAAGO,WAAW,CAAC8G,SAAS,GAAE;QAAA;QAAAlJ,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAC3EsJ,eAAe,GAAGA,eAAe,CAACE,SAAS,CAAC,CAAC,EAAEtH,WAAW,CAAC8G,SAAS,CAAC;MACvE,CAAC;MAAA;MAAA;QAAAlJ,cAAA,GAAAmC,CAAA;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MAED,OAAOsJ,eAAe;IACxB,CAAC,CAAC,OAAO9F,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACdyD,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAAC;MAAA1D,cAAA,GAAAE,CAAA;MAC9D,OAAO+B,cAAc,CAAC,CAAC;IACzB;EACF;EAEA;;;EAGQ,MAAMuC,sBAAsBA,CAClCC,MAAc,EACd2E,aAA8C;IAAA;IAAApJ,cAAA,GAAAY,CAAA;IAM9C,MAAMgE,MAAM;IAAA;IAAA,CAAA5E,cAAA,GAAAE,CAAA,SAAa,EAAE;IAC3B,MAAMiH,eAAe;IAAA;IAAA,CAAAnH,cAAA,GAAAE,CAAA,SAAa,EAAE;IAEpC;IACA,MAAMyJ,WAAW;IAAA;IAAA,CAAA3J,cAAA,GAAAE,CAAA,SAAG,CAClB;MAAE0J,OAAO,EAAE,uBAAuB;MAAE/F,OAAO,EAAE;IAA8B,CAAE,EAC7E;MAAE+F,OAAO,EAAE,iBAAiB;MAAE/F,OAAO,EAAE;IAA4B,CAAE,EACrE;MAAE+F,OAAO,EAAE,YAAY;MAAE/F,OAAO,EAAE;IAAmB,CAAE,EACvD;MAAE+F,OAAO,EAAE,2BAA2B;MAAE/F,OAAO,EAAE;IAAgC,CAAE,CACpF;IAAC;IAAA7D,cAAA,GAAAE,CAAA;IAEFyJ,WAAW,CAAC5D,OAAO,CAAC8D,KAAK,IAAG;MAAA;MAAA7J,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC1B,IAAI2J,KAAK,CAACD,OAAO,CAACE,IAAI,CAACrF,MAAM,CAAC,EAAE;QAAA;QAAAzE,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAC9B0E,MAAM,CAACqB,IAAI,CAAC4D,KAAK,CAAChG,OAAO,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAA7D,cAAA,GAAAmC,CAAA;MAAA;IACH,CAAC,CAAC;IAEF;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAAiH,aAAa,KAAK,UAAU;IAAA;IAAA,CAAApJ,cAAA,GAAAmC,CAAA,WAAIiH,aAAa,KAAK,QAAQ,GAAE;MAAA;MAAApJ,cAAA,GAAAmC,CAAA;MAC9D,MAAM4H,cAAc;MAAA;MAAA,CAAA/J,cAAA,GAAAE,CAAA,SAAG,CACrB;QAAE0J,OAAO,EAAE,aAAa;QAAE/F,OAAO,EAAE;MAA0B,CAAE,EAC/D;QAAE+F,OAAO,EAAE,UAAU;QAAE/F,OAAO,EAAE;MAAqB,CAAE,EACvD;QAAE+F,OAAO,EAAE,UAAU;QAAE/F,OAAO,EAAE;MAAoB,CAAE,EACtD;QAAE+F,OAAO,EAAE,WAAW;QAAE/F,OAAO,EAAE;MAAsB,CAAE,CAC1D;MAAC;MAAA7D,cAAA,GAAAE,CAAA;MAEF6J,cAAc,CAAChE,OAAO,CAAC8D,KAAK,IAAG;QAAA;QAAA7J,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAC7B,IAAI2J,KAAK,CAACD,OAAO,CAACE,IAAI,CAACrF,MAAM,CAAC,EAAE;UAAA;UAAAzE,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UAC9B0E,MAAM,CAACqB,IAAI,CAAC4D,KAAK,CAAChG,OAAO,CAAC;QAC5B,CAAC;QAAA;QAAA;UAAA7D,cAAA,GAAAmC,CAAA;QAAA;MACH,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAnC,cAAA,GAAAmC,CAAA;IAAA;IAED;IAAAnC,cAAA,GAAAE,CAAA;IACA,IAAIkJ,aAAa,KAAK,QAAQ,EAAE;MAAA;MAAApJ,cAAA,GAAAmC,CAAA;MAC9B,MAAM6H,YAAY;MAAA;MAAA,CAAAhK,cAAA,GAAAE,CAAA,SAAG,CACnB;QAAE0J,OAAO,EAAE,YAAY;QAAE/F,OAAO,EAAE;MAAwB,CAAE,EAC5D;QAAE+F,OAAO,EAAE,eAAe;QAAE/F,OAAO,EAAE;MAAyB,CAAE,EAChE;QAAE+F,OAAO,EAAE,eAAe;QAAE/F,OAAO,EAAE;MAAsB,CAAE,CAC9D;MAAC;MAAA7D,cAAA,GAAAE,CAAA;MAEF8J,YAAY,CAACjE,OAAO,CAAC8D,KAAK,IAAG;QAAA;QAAA7J,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAC3B,IAAI2J,KAAK,CAACD,OAAO,CAACE,IAAI,CAACrF,MAAM,CAAC,EAAE;UAAA;UAAAzE,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UAC9B0E,MAAM,CAACqB,IAAI,CAAC4D,KAAK,CAAChG,OAAO,CAAC;QAC5B,CAAC;QAAA;QAAA;UAAA7D,cAAA,GAAAmC,CAAA;QAAA;MACH,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAnC,cAAA,GAAAmC,CAAA;IAAA;IAED;IAAAnC,cAAA,GAAAE,CAAA;IACA,IAAI0E,MAAM,CAAC/C,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA7B,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACrBiH,eAAe,CAAClB,IAAI,CAAC,gDAAgD,CAAC;MAAC;MAAAjG,cAAA,GAAAE,CAAA;MACvEiH,eAAe,CAAClB,IAAI,CAAC,6CAA6C,CAAC;MAAC;MAAAjG,cAAA,GAAAE,CAAA;MACpEiH,eAAe,CAAClB,IAAI,CAAC,yCAAyC,CAAC;IACjE,CAAC;IAAA;IAAA;MAAAjG,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAED,OAAO;MACLwE,MAAM,EAAEE,MAAM,CAAC/C,MAAM,KAAK,CAAC;MAC3B+C,MAAM;MACNuC;KACD;EACH;EAEA;;;EAGQ,MAAM/C,oBAAoBA,CAACL,MAA2B;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC5D,IAAI6D,MAAM,CAACO,QAAQ,CAACzC,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA7B,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAC9B,MAAM,IAAI0D,KAAK,CAAC,wCAAwC,CAAC;IAC3D,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAmC,CAAA;IAAA;IAED,MAAM8H,WAAW;IAAA;IAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAG6D,MAAM,CAACO,QAAQ,CAAC4F,MAAM,CAAC,CAACC,GAAG,EAAE9F,OAAO,KAAK;MAAA;MAAArE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAAiK,GAAG,GAAG9F,OAAO,CAAC+F,MAAM;IAAN,CAAM,EAAE,CAAC,CAAC;IAAC;IAAApK,cAAA,GAAAE,CAAA;IACtF,IAAIwB,IAAI,CAAC2I,GAAG,CAACJ,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE;MAAA;MAAAjK,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACrC,MAAM,IAAI0D,KAAK,CAAC,kCAAkC,CAAC;IACrD,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAED,IAAI6D,MAAM,CAACsB,QAAQ,CAACiF,OAAO,IAAIvG,MAAM,CAACsB,QAAQ,CAACC,SAAS,EAAE;MAAA;MAAAtF,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACxD,MAAM,IAAI0D,KAAK,CAAC,mCAAmC,CAAC;IACtD,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAmC,CAAA;IAAA;EACH;EAEA;;;EAGQmE,uBAAuBA,CAACF,OAAc;IAAA;IAAApG,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAK5C,IAAIkG,OAAO,CAACvE,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA7B,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACxB,OAAO;QAAEuI,WAAW,EAAE,CAAC;QAAEC,YAAY,EAAE,CAAC;QAAEC,YAAY,EAAE;MAAC,CAAE;IAC7D,CAAC;IAAA;IAAA;MAAA3I,cAAA,GAAAmC,CAAA;IAAA;IAED,MAAMoI,iBAAiB;IAAA;IAAA,CAAAvK,cAAA,GAAAE,CAAA,SAAGkG,OAAO,CAACoE,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAzK,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAAuK,CAAC,CAACC,OAAO;IAAP,CAAO,CAAC;IACxD,MAAMjC,WAAW;IAAA;IAAA,CAAAzI,cAAA,GAAAE,CAAA,SAAIqK,iBAAiB,CAAC1I,MAAM,GAAGuE,OAAO,CAACvE,MAAM,GAAI,GAAG;IACrE,MAAM6G,YAAY;IAAA;IAAA,CAAA1I,cAAA,GAAAE,CAAA,SAAGkG,OAAO,CAAC8D,MAAM,CAAC,CAACC,GAAG,EAAEM,CAAC,KAAK;MAAA;MAAAzK,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAAiK,GAAG,GAAGM,CAAC,CAAC/B,YAAY;IAAZ,CAAY,EAAE,CAAC,CAAC,GAAGtC,OAAO,CAACvE,MAAM;IACzF,MAAM8G,YAAY;IAAA;IAAA,CAAA3I,cAAA,GAAAE,CAAA,SAAGkG,OAAO,CAAC8D,MAAM,CAAC,CAACC,GAAG,EAAEM,CAAC,KAAK;MAAA;MAAAzK,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAAiK,GAAG,GAAGM,CAAC,CAAC9B,YAAY;IAAZ,CAAY,EAAE,CAAC,CAAC,GAAGvC,OAAO,CAACvE,MAAM;IAAC;IAAA7B,cAAA,GAAAE,CAAA;IAE1F,OAAO;MAAEuI,WAAW;MAAEC,YAAY;MAAEC;IAAY,CAAE;EACpD;EAEA;;;EAGQ/B,qBAAqBA,CAC3BV,cAAqB,EACrBW,aAAqB;IAAA;IAAA7G,cAAA,GAAAY,CAAA;IAOrB;IACA,IAAI+J,WAAW;IAAA;IAAA,CAAA3K,cAAA,GAAAE,CAAA,SAAGgG,cAAc,CAAC,CAAC,CAAC;IACnC,IAAI0E,SAAS;IAAA;IAAA,CAAA5K,cAAA,GAAAE,CAAA,SAAG,IAAI,CAAC2K,cAAc,CAACF,WAAW,CAACtE,OAAO,EAAEQ,aAAa,CAAC;IAAC;IAAA7G,cAAA,GAAAE,CAAA;IAExE,KAAK,MAAMmE,OAAO,IAAI6B,cAAc,EAAE;MACpC,MAAMkC,KAAK;MAAA;MAAA,CAAApI,cAAA,GAAAE,CAAA,SAAG,IAAI,CAAC2K,cAAc,CAACxG,OAAO,CAACgC,OAAO,EAAEQ,aAAa,CAAC;MAAC;MAAA7G,cAAA,GAAAE,CAAA;MAClE,IAAIkI,KAAK,GAAGwC,SAAS,EAAE;QAAA;QAAA5K,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QACrB0K,SAAS,GAAGxC,KAAK;QAAC;QAAApI,cAAA,GAAAE,CAAA;QAClByK,WAAW,GAAGtG,OAAO;MACvB,CAAC;MAAA;MAAA;QAAArE,cAAA,GAAAmC,CAAA;MAAA;IACH;IAEA;IACA,MAAM2I,QAAQ;IAAA;IAAA,CAAA9K,cAAA,GAAAE,CAAA,SAAGgG,cAAc,CAACgE,MAAM,CAAC,CAACC,GAAG,EAAEY,CAAC,KAAK;MAAA;MAAA/K,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAAiK,GAAG,GAAG,IAAI,CAACU,cAAc,CAACE,CAAC,CAAC1E,OAAO,EAAEQ,aAAa,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGX,cAAc,CAACrE,MAAM;IAClI,MAAMmF,UAAU;IAAA;IAAA,CAAAhH,cAAA,GAAAE,CAAA,SAAGwB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAACiJ,SAAS,GAAGE,QAAQ,IAAIA,QAAQ,CAAC;IAAC;IAAA9K,cAAA,GAAAE,CAAA;IAElE,OAAO;MACLgE,EAAE,EAAEyG,WAAW,CAACzG,EAAE;MAClB8C,UAAU;MACVE,iBAAiB,EAAE,IAAI;MAAE;MACzBC,eAAe,EAAE,CACf,aAAawD,WAAW,CAAChG,IAAI,yBAAyB,EACtD,2BAA2BkC,aAAa,eAAe,EACvD,2DAA2D;KAE9D;EACH;EAEA;;;EAGQgE,cAAcA,CAACxE,OAAY,EAAE2E,UAAkB;IAAA;IAAAhL,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACrD,QAAQ8K,UAAU;MAChB,KAAK,cAAc;QAAA;QAAAhL,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QACjB,OAAOmG,OAAO,CAACoC,WAAW;MAC5B,KAAK,eAAe;QAAA;QAAAzI,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAClB,OAAO,IAAI,GAAGmG,OAAO,CAACqC,YAAY;MAAE;MACtC,KAAK,eAAe;QAAA;QAAA1I,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAClB,OAAOmG,OAAO,CAACsC,YAAY;MAC7B;QAAA;QAAA3I,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QACE,OAAO,CAAC;IACZ;EACF;EAEA;;;EAGQ,MAAM6G,sBAAsBA,CAClC9C,UAA+B,EAC/BiC,cAAqB,EACrBS,MAAW;IAAA;IAAA3G,cAAA,GAAAY,CAAA;IAEX,MAAMkG,QAAQ;IAAA;IAAA,CAAA9G,cAAA,GAAAE,CAAA,SAAa,EAAE;IAE7B;IACA,MAAM+K,aAAa;IAAA;IAAA,CAAAjL,cAAA,GAAAE,CAAA,SAAGgG,cAAc,CAACgF,IAAI,CAACH,CAAC,IAAI;MAAA;MAAA/K,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAA6K,CAAC,CAAC7G,EAAE,KAAKyC,MAAM,CAACzC,EAAE;IAAF,CAAE,CAAC;IAAC;IAAAlE,cAAA,GAAAE,CAAA;IACnE,IAAI+K,aAAa,EAAE;MAAA;MAAAjL,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACjB4G,QAAQ,CAACb,IAAI,CAAC,GAAGgF,aAAa,CAACtG,IAAI,aAAasG,aAAa,CAAC5E,OAAO,CAACoC,WAAW,CAAC0C,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC;MAAC;MAAAnL,cAAA,GAAAE,CAAA;MAC9G4G,QAAQ,CAACb,IAAI,CAAC,qBAAqBgF,aAAa,CAAC5E,OAAO,CAACqC,YAAY,CAACyC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;MAAC;MAAAnL,cAAA,GAAAE,CAAA;MACjG4G,QAAQ,CAACb,IAAI,CAAC,yBAAyBgF,aAAa,CAAC5E,OAAO,CAACsC,YAAY,CAACwC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IACzF,CAAC;IAAA;IAAA;MAAAnL,cAAA,GAAAmC,CAAA;IAAA;IAED;IACA,MAAMiJ,cAAc;IAAA;IAAA,CAAApL,cAAA,GAAAE,CAAA,SAAGgG,cAAc,CAACgF,IAAI,CAACH,CAAC,IAAI;MAAA;MAAA/K,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAA6K,CAAC,CAACpG,IAAI,CAAC0G,WAAW,EAAE,CAACC,QAAQ,CAAC,SAAS,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAtL,cAAA,GAAAE,CAAA;IAC1F;IAAI;IAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAAiJ,cAAc;IAAA;IAAA,CAAApL,cAAA,GAAAmC,CAAA,WAAI8I,aAAa;IAAA;IAAA,CAAAjL,cAAA,GAAAmC,CAAA,WAAI8I,aAAa,CAAC/G,EAAE,KAAKkH,cAAc,CAAClH,EAAE,GAAE;MAAA;MAAAlE,cAAA,GAAAmC,CAAA;MAC7E,MAAMoJ,WAAW;MAAA;MAAA,CAAAvL,cAAA,GAAAE,CAAA,SAAI,CAAC+K,aAAa,CAAC5E,OAAO,CAACoC,WAAW,GAAG2C,cAAc,CAAC/E,OAAO,CAACoC,WAAW,IAAI2C,cAAc,CAAC/E,OAAO,CAACoC,WAAW,GAAI,GAAG;MAAC;MAAAzI,cAAA,GAAAE,CAAA;MAC1I4G,QAAQ,CAACb,IAAI,CAAC,gBAAgBsF,WAAW,CAACJ,OAAO,CAAC,CAAC,CAAC,4BAA4B,CAAC;IACnF,CAAC;IAAA;IAAA;MAAAnL,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAED,OAAO4G,QAAQ;EACjB;EAEA;;;EAGQ,MAAMU,oBAAoBA,CAACzD,MAAiC;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAClE;IAAI;IAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAA4B,MAAM,CAAC8D,UAAU,GAAG,CAAC;IAAA;IAAA,CAAA7H,cAAA,GAAAmC,CAAA,WAAI4B,MAAM,CAAC8D,UAAU,GAAG,GAAG,GAAE;MAAA;MAAA7H,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACpD,MAAM,IAAI0D,KAAK,CAAC,sCAAsC,CAAC;IACzD,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAED,IAAI6D,MAAM,CAAC3B,WAAW,CAAC8G,SAAS,GAAG,EAAE,EAAE;MAAA;MAAAlJ,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACrC,MAAM,IAAI0D,KAAK,CAAC,+CAA+C,CAAC;IAClE,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAmC,CAAA;IAAA;EACH;EAEA;;;EAGQ,MAAMsF,oBAAoBA,CAAC1D,MAAiC;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAClE,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF6D,MAAM,CAACI,MAAM,GAAG,SAAS;MAEzB,MAAM0D,UAAU;MAAA;MAAA,CAAA7H,cAAA,GAAAE,CAAA,SAAqC,EAAE;MACvD,IAAIsL,aAAa;MAAA;MAAA,CAAAxL,cAAA,GAAAE,CAAA,SAAG6D,MAAM,CAAC9B,cAAc;MACzC,IAAIwJ,UAAU;MAAA;MAAA,CAAAzL,cAAA,GAAAE,CAAA,SAAGsL,aAAa;MAC9B,IAAIZ,SAAS;MAAA;MAAA,CAAA5K,cAAA,GAAAE,CAAA,SAAG,CAAC;MAAC;MAAAF,cAAA,GAAAE,CAAA;MAElB,KAAK,IAAIwL,CAAC;MAAA;MAAA,CAAA1L,cAAA,GAAAE,CAAA,SAAG,CAAC,GAAEwL,CAAC,GAAG3H,MAAM,CAAC8D,UAAU,EAAE6D,CAAC,EAAE,EAAE;QAC1C;QACA,MAAMrH,OAAO;QAAA;QAAA,CAAArE,cAAA,GAAAE,CAAA,SAAG,MAAM,IAAI,CAACyL,qBAAqB,CAACH,aAAa,EAAEzH,MAAM,CAAC;QAEvE;QACA,MAAMsC,OAAO;QAAA;QAAA,CAAArG,cAAA,GAAAE,CAAA,SAAG,MAAM,IAAI,CAAC0L,iBAAiB,CAACvH,OAAO,EAAEN,MAAM,CAAC;QAE7D;QACA,MAAMqE,KAAK;QAAA;QAAA,CAAApI,cAAA,GAAAE,CAAA,SAAG,IAAI,CAAC2L,oBAAoB,CAACxF,OAAO,EAAEtC,MAAM,CAAC+H,UAAU,CAAC;QAEnE;QAAA;QAAA9L,cAAA,GAAAE,CAAA;QACA,IAAIkI,KAAK,GAAGwC,SAAS,EAAE;UAAA;UAAA5K,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UACrB0K,SAAS,GAAGxC,KAAK;UAAC;UAAApI,cAAA,GAAAE,CAAA;UAClBuL,UAAU,GAAGpH,OAAO;QACtB,CAAC;QAAA;QAAA;UAAArE,cAAA,GAAAmC,CAAA;QAAA;QAED;QAAAnC,cAAA,GAAAE,CAAA;QACA2H,UAAU,CAAC5B,IAAI,CAAC;UACd8F,SAAS,EAAEL,CAAC,GAAG,CAAC;UAChBjH,MAAM,EAAEJ,OAAO;UACfgC,OAAO;UACP2F,YAAY,EAAG,CAAC5D,KAAK,GAAGwC,SAAS,IAAIA,SAAS,GAAI,GAAG;UACrDzF,SAAS,EAAE,IAAIrC,IAAI;SACpB,CAAC;QAEF;QAAA;QAAA9C,cAAA,GAAAE,CAAA;QACAsL,aAAa,GAAGnH,OAAO;MACzB;MAEA;MACA,MAAM2D,YAAY;MAAA;MAAA,CAAAhI,cAAA,GAAAE,CAAA,SAAG2H,UAAU,CAACA,UAAU,CAAChG,MAAM,GAAG,CAAC,CAAC,CAACwE,OAAO;MAC9D,MAAM4F,aAAa;MAAA;MAAA,CAAAjM,cAAA,GAAAE,CAAA,SAAG,IAAI,CAAC2L,oBAAoB,CAC7C;QAAEpD,WAAW,EAAE,EAAE;QAAEC,YAAY,EAAE,IAAI;QAAEC,YAAY,EAAE;MAAE,CAAE,EACzD5E,MAAM,CAAC+H,UAAU,CAClB;MACD,MAAMI,gBAAgB;MAAA;MAAA,CAAAlM,cAAA,GAAAE,CAAA,SAAI,CAAC0K,SAAS,GAAGqB,aAAa,IAAIA,aAAa,GAAI,GAAG;MAE5E,MAAMvG,MAAM;MAAA;MAAA,CAAA1F,cAAA,GAAAE,CAAA,SAAuB;QACjCoH,QAAQ,EAAEvD,MAAM,CAACG,EAAE;QACnB2D,UAAU;QACV4D,UAAU;QACVzD,YAAY;QACZkE,gBAAgB;QAChBC,mBAAmB,EAAE;UACnBC,SAAS;UAAE;UAAA,CAAApM,cAAA,GAAAmC,CAAA,WAAA0F,UAAU,CAAChG,MAAM,IAAI,CAAC;UAAA;UAAA,CAAA7B,cAAA,GAAAmC,CAAA,WACvB0F,UAAU,CAACwE,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,IAAI,IAAI;YAAA;YAAAvM,cAAA,GAAAY,CAAA;YAAAZ,cAAA,GAAAE,CAAA;YAAA,OAAAwB,IAAI,CAAC2I,GAAG,CAACkC,IAAI,CAACP,YAAY,CAAC,GAAG,CAAC;UAAD,CAAC,CAAC;UAC7EQ,eAAe,EAAE3E,UAAU,CAAChG,MAAM;UAClC4K,gBAAgB,EAAE5E,UAAU,CAAC6E,SAAS,CAACH,IAAI,IAAI;YAAA;YAAAvM,cAAA,GAAAY,CAAA;YAAAZ,cAAA,GAAAE,CAAA;YAAA,OAAAqM,IAAI,CAAC9H,MAAM,KAAKgH,UAAU;UAAV,CAAU,CAAC,GAAG;SAC9E;QACDrE,WAAW,EAAE,IAAItE,IAAI;OACtB;MAAC;MAAA9C,cAAA,GAAAE,CAAA;MAEF6D,MAAM,CAACI,MAAM,GAAG,WAAW;MAAC;MAAAnE,cAAA,GAAAE,CAAA;MAC5B6D,MAAM,CAACqC,OAAO,GAAGV,MAAM;MAEvB;MAAA;MAAA1F,cAAA,GAAAE,CAAA;MACA,MAAM,IAAI,CAACW,UAAU,CAACiE,WAAW,CAAC;QAChCC,UAAU,EAAE,kBAAkB;QAC9BC,SAAS,EAAEjB,MAAM,CAACG,EAAE;QACpBe,WAAW,EAAE,QAAQ;QACrBC,IAAI,EAAEQ,MAAM;QACZP,SAAS,EAAE,IAAIrC,IAAI;OACpB,CAAC;IAEJ,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACd6D,MAAM,CAACI,MAAM,GAAG,QAAQ;MAAC;MAAAnE,cAAA,GAAAE,CAAA;MACzByD,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF;EAEA;;;EAGQ,MAAMiI,qBAAqBA,CACjCH,aAAqB,EACrBzH,MAAiC;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAEjC,MAAM+L,eAAe;IAAA;IAAA,CAAA3M,cAAA,GAAAE,CAAA,SAAG;wDAC4B6D,MAAM,CAAC+H,UAAU,CAACc,OAAO;;yBAExDpB,aAAa;;;0BAGZzH,MAAM,CAAC3B,WAAW,CAAC8G,SAAS;wBAC9BnF,MAAM,CAAC3B,WAAW,CAACyK,gBAAgB,CAAChI,IAAI,CAAC,IAAI,CAAC;4BAC1Cd,MAAM,CAAC3B,WAAW,CAAC0K,kBAAkB,CAACjI,IAAI,CAAC,IAAI,CAAC;;;KAGvE;IAAC;IAAA7E,cAAA,GAAAE,CAAA;IAEF,IAAI;MACF,MAAMmJ,QAAQ;MAAA;MAAA,CAAArJ,cAAA,GAAAE,CAAA,SAAG,MAAMC,YAAA,CAAAmJ,UAAU,CAACC,QAAQ,CAACoD,eAAe,CAAC;MAAC;MAAA3M,cAAA,GAAAE,CAAA;MAC5D,OAAOmJ,QAAQ,CAACA,QAAQ,CAACI,IAAI,EAAE;IACjC,CAAC,CAAC,OAAO/F,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACdyD,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAAC;MAAA1D,cAAA,GAAAE,CAAA;MACzD,OAAOsL,aAAa,CAAC,CAAC;IACxB;EACF;EAEA;;;EAGQ,MAAMI,iBAAiBA,CAC7BnH,MAAc,EACdV,MAAiC;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IAMjC;IACA,MAAMmM,WAAW;IAAA;IAAA,CAAA/M,cAAA,GAAAE,CAAA,SAAG;MAClBuI,WAAW,EAAE,EAAE,GAAG/G,IAAI,CAACqB,MAAM,EAAE,GAAG,EAAE;MACpC2F,YAAY,EAAE,GAAG,GAAGhH,IAAI,CAACqB,MAAM,EAAE,GAAG,GAAG;MACvC4F,YAAY,EAAE,EAAE,GAAGjH,IAAI,CAACqB,MAAM,EAAE,GAAG;KACpC;IAAC;IAAA/C,cAAA,GAAAE,CAAA;IAEF,OAAO6M,WAAW;EACpB;EAEA;;;EAGQlB,oBAAoBA,CAC1BxF,OAA4E,EAC5EyF,UAAmD;IAAA;IAAA9L,cAAA,GAAAY,CAAA;IAEnD,MAAMoM,aAAa;IAAA;IAAA,CAAAhN,cAAA,GAAAE,CAAA,SAAG,GAAG;IACzB,MAAM+M,eAAe;IAAA;IAAA,CAAAjN,cAAA,GAAAE,CAAA,SAAG,GAAG,GAAG4L,UAAU,CAACoB,SAAS,CAACrL,MAAM;IAEzD,IAAIuG,KAAK;IAAA;IAAA,CAAApI,cAAA,GAAAE,CAAA,SAAG,CAAC;IAEb;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA,QAAQ4L,UAAU,CAACc,OAAO;MACxB,KAAK,cAAc;QAAA;QAAA5M,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QACjBkI,KAAK,IAAI/B,OAAO,CAACoC,WAAW,GAAGuE,aAAa;QAAC;QAAAhN,cAAA,GAAAE,CAAA;QAC7C;MACF,KAAK,eAAe;QAAA;QAAAF,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAClBkI,KAAK,IAAK,IAAI,GAAG/B,OAAO,CAACqC,YAAY,GAAIsE,aAAa;QAAC;QAAAhN,cAAA,GAAAE,CAAA;QACvD;MACF,KAAK,eAAe;QAAA;QAAAF,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAE,CAAA;QAClBkI,KAAK,IAAI/B,OAAO,CAACsC,YAAY,GAAGqE,aAAa;QAAC;QAAAhN,cAAA,GAAAE,CAAA;QAC9C;IACJ;IAEA;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA4L,UAAU,CAACoB,SAAS,CAACnH,OAAO,CAACoH,SAAS,IAAG;MAAA;MAAAnN,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACvC,QAAQiN,SAAS;QACf,KAAK,cAAc;UAAA;UAAAnN,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UACjBkI,KAAK,IAAI/B,OAAO,CAACoC,WAAW,GAAGwE,eAAe;UAAC;UAAAjN,cAAA,GAAAE,CAAA;UAC/C;QACF,KAAK,eAAe;UAAA;UAAAF,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UAClBkI,KAAK,IAAK,IAAI,GAAG/B,OAAO,CAACqC,YAAY,GAAIuE,eAAe;UAAC;UAAAjN,cAAA,GAAAE,CAAA;UACzD;QACF,KAAK,eAAe;UAAA;UAAAF,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UAClBkI,KAAK,IAAI/B,OAAO,CAACsC,YAAY,GAAGsE,eAAe;UAAC;UAAAjN,cAAA,GAAAE,CAAA;UAChD;MACJ;IACF,CAAC,CAAC;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAEH,OAAOkI,KAAK;EACd;EAEA;;;EAGQ3F,gBAAgBA,CAACgC,MAAc,EAAE4B,OAAY,EAAEjE,WAAgB;IAAA;IAAApC,cAAA,GAAAY,CAAA;IACrE,MAAMwM,OAAO;IAAA;IAAA,CAAApN,cAAA,GAAAE,CAAA,SAAG,GAAGuE,MAAM,GAAG4I,IAAI,CAACC,SAAS,CAACjH,OAAO,CAAC,GAAGgH,IAAI,CAACC,SAAS,CAAClL,WAAW,CAAC,EAAE;IAAC;IAAApC,cAAA,GAAAE,CAAA;IACpF,OAAO,IAAAO,QAAA,CAAA8M,UAAU,EAAC,KAAK,CAAC,CAACC,MAAM,CAACJ,OAAO,CAAC,CAACK,MAAM,CAAC,KAAK,CAAC;EACxD;EAEA;;;EAGQ,MAAMtK,iBAAiBA,CAACsB,MAAc;IAAA;IAAAzE,cAAA,GAAAY,CAAA;IAC5C,MAAM4B,QAAQ;IAAA;IAAA,CAAAxC,cAAA,GAAAE,CAAA,SAAG,IAAAO,QAAA,CAAA8M,UAAU,EAAC,KAAK,CAAC,CAACC,MAAM,CAAC/I,MAAM,CAAC,CAACgJ,MAAM,CAAC,KAAK,CAAC;IAC/D,MAAM/K,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,SAAG,IAAI,CAACiB,aAAa,CAACwB,GAAG,CAACH,QAAQ,CAAC;IAAC;IAAAxC,cAAA,GAAAE,CAAA;IAEhD,IAAIwC,MAAM,EAAE;MAAA;MAAA1C,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACV,OAAOwC,MAAM;IACf,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAmC,CAAA;IAAA;IAED,MAAMe,QAAQ;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAG,MAAMG,gBAAA,CAAAqN,cAAc,CAACC,aAAa,CAAC,aAAa,EAAElJ,MAAM,CAAC;IAAC;IAAAzE,cAAA,GAAAE,CAAA;IAC3E,IAAI,CAACiB,aAAa,CAACsC,GAAG,CAACjB,QAAQ,EAAEU,QAAQ,CAAC;IAAC;IAAAlD,cAAA,GAAAE,CAAA;IAE3C,OAAOgD,QAAQ;EACjB;EAEA;;;EAGQ,MAAMG,sCAAsCA,CAClDpB,cAAsB,EACtBiB,QAA8B,EAC9BhB,aAAkB,EAClBE,WAAgB;IAAA;IAAApC,cAAA,GAAAY,CAAA;IAEhB,MAAMgN,gBAAgB;IAAA;IAAA,CAAA5N,cAAA,GAAAE,CAAA,SAAG,CACvB,IAAI,CAAC2N,yBAAyB,CAAC3K,QAAQ,CAAC,EACxC,IAAI,CAAC4K,uBAAuB,CAAC5K,QAAQ,CAAC,EACtC,IAAI,CAAC6K,2BAA2B,CAAC7K,QAAQ,CAAC,EAC1C,IAAI,CAAC8K,uBAAuB,CAAC9K,QAAQ,CAAC,EACtC,IAAI,CAAC+K,2BAA2B,CAAC/K,QAAQ,EAAEhB,aAAa,CAAC,CAC1D;IAED,MAAMkB,UAAU;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,SAAG,MAAMgO,OAAO,CAACC,GAAG,CAACP,gBAAgB,CAAC;IAAC;IAAA5N,cAAA,GAAAE,CAAA;IACvD,OAAOkD,UAAU,CAACoH,MAAM,CAACxB,QAAQ,IAAI;MAAA;MAAAhJ,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAA8I,QAAQ,KAAK,IAAI;IAAJ,CAAI,CAAC;EACzD;EAEA;;;EAGQ,MAAMzF,2BAA2BA,CACvCtB,cAAsB,EACtBmB,UAAiB,EACjBhB,WAAgB,EAChBS,YAAoB;IAAA;IAAA7C,cAAA,GAAAY,CAAA;IAEpB,MAAM0C,WAAW;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,SAA6B,EAAE;IAChD,MAAMkO,kBAAkB;IAAA;IAAA,CAAApO,cAAA,GAAAE,CAAA,SAAGkD,UAAU,CAAC+C,GAAG,CAAC,MAAO6C,QAAQ,IAAI;MAAA;MAAAhJ,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC3D,IAAI;QACF,MAAMsJ,eAAe;QAAA;QAAA,CAAAxJ,cAAA,GAAAE,CAAA,SAAG,MAAM,IAAI,CAAC6I,yBAAyB,CAC1D9G,cAAc,EACd+G,QAAQ,EACR5G,WAAW,CACZ;QAED;QACA,MAAMmC,kBAAkB;QAAA;QAAA,CAAAvE,cAAA,GAAAE,CAAA,SAAG,MAAM,IAAI,CAACsE,sBAAsB,CAC1DgF,eAAe;QACf;QAAA,CAAAxJ,cAAA,GAAAmC,CAAA,WAAAC,WAAW,CAACgH,aAAa;QAAA;QAAA,CAAApJ,cAAA,GAAAmC,CAAA,WAAI,OAAO,EACrC;QAAC;QAAAnC,cAAA,GAAAE,CAAA;QAEF;QAAI;QAAA,CAAAF,cAAA,GAAAmC,CAAA,WAAAoC,kBAAkB,CAACG,MAAM;QAAA;QAAA,CAAA1E,cAAA,GAAAmC,CAAA,WAAIC,WAAW,CAACgH,aAAa,KAAK,OAAO,GAAE;UAAA;UAAApJ,cAAA,GAAAmC,CAAA;UAAAnC,cAAA,GAAAE,CAAA;UACtE,OAAO;YACLgE,EAAE,EAAE,GAAGrB,YAAY,IAAImG,QAAQ,CAACX,IAAI,EAAE;YACtCpG,cAAc;YACduH,eAAe;YACf6E,OAAO,EAAE,CAAC;cACRhG,IAAI,EAAEW,QAAQ,CAACX,IAAI;cACnBC,WAAW,EAAEU,QAAQ,CAACV,WAAW;cACjCC,SAAS,EAAES,QAAQ,CAACT;aACrB,CAAC;YACFC,mBAAmB,EAAEQ,QAAQ,CAACR,mBAAmB;YACjDxB,UAAU,EAAEgC,QAAQ,CAAChC,UAAU;YAC/BzC,kBAAkB;YAClBY,SAAS,EAAE,IAAIrC,IAAI;WACpB;QACH,CAAC;QAAA;QAAA;UAAA9C,cAAA,GAAAmC,CAAA;QAAA;QAAAnC,cAAA,GAAAE,CAAA;QAED,OAAO,IAAI;MACb,CAAC,CAAC,OAAOwD,KAAK,EAAE;QAAA;QAAA1D,cAAA,GAAAE,CAAA;QACdyD,OAAO,CAAC2K,IAAI,CAAC,YAAYtF,QAAQ,CAACX,IAAI,UAAU,EAAE3E,KAAK,CAACG,OAAO,CAAC;QAAC;QAAA7D,cAAA,GAAAE,CAAA;QACjE,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IAEF,MAAMkG,OAAO;IAAA;IAAA,CAAApG,cAAA,GAAAE,CAAA,SAAG,MAAMgO,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAC;IAAC;IAAApO,cAAA,GAAAE,CAAA;IACtD,OAAOkG,OAAO,CAACoE,MAAM,CAAC9E,MAAM,IAAI;MAAA;MAAA1F,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAAwF,MAAM,KAAK,IAAI;IAAJ,CAAI,CAAC;EAClD;EAEA;;;EAGQ,MAAMmI,yBAAyBA,CAAC3K,QAA8B;IAAA;IAAAlD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACpE,IAAIgD,QAAQ,CAACiF,aAAa,CAACC,KAAK,GAAG,EAAE,EAAE;MAAA;MAAApI,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACrC,OAAO;QACLmI,IAAI,EAAE,WAAoB;QAC1BC,WAAW,EAAE,2CAA2C;QACxDC,SAAS,EAAE,uDAAuD;QAClEC,mBAAmB,EAAE;UACnBC,WAAW,EAAE,EAAE;UACfC,YAAY,EAAE,CAAC;UACfC,YAAY,EAAE;SACf;QACD3B,UAAU,EAAE;OACb;IACH,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACD,OAAO,IAAI;EACb;EAEA;;;EAGQ,MAAM4N,uBAAuBA,CAAC5K,QAA8B;IAAA;IAAAlD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAClE,IAAIgD,QAAQ,CAAC0F,QAAQ,CAACC,eAAe,CAAChH,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA7B,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAChD,OAAO;QACLmI,IAAI,EAAE,SAAkB;QACxBC,WAAW,EAAE,6CAA6C;QAC1DC,SAAS,EAAE,yDAAyD;QACpEC,mBAAmB,EAAE;UACnBC,WAAW,EAAE,EAAE;UACfC,YAAY,EAAE,CAAC;UACfC,YAAY,EAAE;SACf;QACD3B,UAAU,EAAE;OACb;IACH,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACD,OAAO,IAAI;EACb;EAEA;;;EAGQ,MAAM6N,2BAA2BA,CAAC7K,QAA8B;IAAA;IAAAlD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACtE,IAAIgD,QAAQ,CAACmD,OAAO,CAACyC,gBAAgB,GAAG,EAAE,EAAE;MAAA;MAAA9I,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAC1C,OAAO;QACLmI,IAAI,EAAE,aAAsB;QAC5BC,WAAW,EAAE,6CAA6C;QAC1DC,SAAS,EAAE,iEAAiE;QAC5EC,mBAAmB,EAAE;UACnBC,WAAW,EAAE,EAAE;UACfC,YAAY,EAAE,CAAC,CAAC;UAChBC,YAAY,EAAE;SACf;QACD3B,UAAU,EAAE;OACb;IACH,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAmC,CAAA;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACD,OAAO,IAAI;EACb;EAEA;;;EAGQ,MAAM8N,uBAAuBA,CAAC9K,QAA8B;IAAA;IAAAlD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAClE,OAAO;MACLmI,IAAI,EAAE,SAAkB;MACxBC,WAAW,EAAE,6CAA6C;MAC1DC,SAAS,EAAE,+CAA+C;MAC1DC,mBAAmB,EAAE;QACnBC,WAAW,EAAE,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,YAAY,EAAE;OACf;MACD3B,UAAU,EAAE;KACb;EACH;EAEA;;;EAGQ,MAAMiH,2BAA2BA,CAAC/K,QAA8B,EAAEhB,aAAkB;IAAA;IAAAlC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC1F,OAAO;MACLmI,IAAI,EAAE,aAAsB;MAC5BC,WAAW,EAAE,+CAA+C;MAC5DC,SAAS,EAAE,0CAA0C;MACrDC,mBAAmB,EAAE;QACnBC,WAAW,EAAEvG,aAAa,CAACuG,WAAW;QAAA;QAAA,CAAAzI,cAAA,GAAAmC,CAAA,WAAG,EAAE;QAAA;QAAA,CAAAnC,cAAA,GAAAmC,CAAA,WAAG,CAAC;QAC/CuG,YAAY,EAAExG,aAAa,CAACwG,YAAY;QAAA;QAAA,CAAA1I,cAAA,GAAAmC,CAAA,WAAG,EAAE;QAAA;QAAA,CAAAnC,cAAA,GAAAmC,CAAA,WAAG,CAAC;QACjDwG,YAAY,EAAEzG,aAAa,CAACyG,YAAY;QAAA;QAAA,CAAA3I,cAAA,GAAAmC,CAAA,WAAG,EAAE;QAAA;QAAA,CAAAnC,cAAA,GAAAmC,CAAA,WAAG,CAAC;OAClD;MACD6E,UAAU,EAAE;KACb;EACH;EAEA;;;EAGQ,MAAMxD,4BAA4BA,CACxCX,YAAoB,EACpBZ,cAAsB,EACtBqB,WAAqC,EACrCpB,aAAkB,EAClBE,WAAgB;IAAA;IAAApC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEhB,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,MAAM,IAAI,CAACW,UAAU,CAACiE,WAAW,CAAC;QAChCC,UAAU,EAAE,0BAA0B;QACtCC,SAAS,EAAEnC,YAAY;QACvBoC,WAAW,EAAE,QAAQ;QACrBC,IAAI,EAAE;UACJjD,cAAc;UACdqB,WAAW;UACXpB,aAAa;UACbE;SACD;QACD+C,SAAS,EAAE,IAAIrC,IAAI;OACpB,CAAC;IACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACdyD,OAAO,CAAC2K,IAAI,CAAC,2CAA2C,EAAE5K,KAAK,CAACG,OAAO,CAAC;IAC1E;EACF;EAEA;;;EAGQ9B,oBAAoBA,CAAA;IAAA;IAAA/B,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC1B;IACA;IACAyD,OAAO,CAAC4B,GAAG,CAAC,wCAAwC,IAAI,CAAC9D,UAAU,UAAU,CAAC;EAChF;EAEA;;;EAGQmB,gBAAgBA,CAAC2L,SAAiB,EAAElJ,QAAgB;IAAA;IAAArF,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAAC,IAAI,CAACsB,kBAAkB,CAACwE,GAAG,CAACuI,SAAS,CAAC,EAAE;MAAA;MAAAvO,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAC3C,IAAI,CAACsB,kBAAkB,CAACiC,GAAG,CAAC8K,SAAS,EAAE,EAAE,CAAC;IAC5C,CAAC;IAAA;IAAA;MAAAvO,cAAA,GAAAmC,CAAA;IAAA;IAED,MAAMkE,OAAO;IAAA;IAAA,CAAArG,cAAA,GAAAE,CAAA,SAAG,IAAI,CAACsB,kBAAkB,CAACmB,GAAG,CAAC4L,SAAS,CAAE;IAAC;IAAAvO,cAAA,GAAAE,CAAA;IACxDmG,OAAO,CAACJ,IAAI,CAACZ,QAAQ,CAAC;IAEtB;IAAA;IAAArF,cAAA,GAAAE,CAAA;IACA,IAAImG,OAAO,CAACxE,MAAM,GAAG,GAAG,EAAE;MAAA;MAAA7B,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MACxBmG,OAAO,CAACmI,KAAK,EAAE;IACjB,CAAC;IAAA;IAAA;MAAAxO,cAAA,GAAAmC,CAAA;IAAA;IAED;IAAAnC,cAAA,GAAAE,CAAA;IACA,IAAImF,QAAQ,GAAG,KAAK,EAAE;MAAA;MAAArF,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAE,CAAA;MAAE;MACtByD,OAAO,CAAC2K,IAAI,CAAC,gCAAgCC,SAAS,SAASlJ,QAAQ,CAAC8F,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACzF,CAAC;IAAA;IAAA;MAAAnL,cAAA,GAAAmC,CAAA;IAAA;EACH;EAEA;;;EAGOsM,mBAAmBA,CAAA;IAAA;IAAAzO,cAAA,GAAAY,CAAA;IACxB,MAAM8N,KAAK;IAAA;IAAA,CAAA1O,cAAA,GAAAE,CAAA,SAA6E,EAAE;IAAC;IAAAF,cAAA,GAAAE,CAAA;IAE3F,KAAK,MAAM,CAACqO,SAAS,EAAElI,OAAO,CAAC,IAAI,IAAI,CAAC7E,kBAAkB,EAAE;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC1D,IAAImG,OAAO,CAACxE,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA7B,cAAA,GAAAmC,CAAA;QACtB,MAAMwM,GAAG;QAAA;QAAA,CAAA3O,cAAA,GAAAE,CAAA,SAAGmG,OAAO,CAAC6D,MAAM,CAAC,CAACC,GAAG,EAAEyE,IAAI,KAAK;UAAA;UAAA5O,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAE,CAAA;UAAA,OAAAiK,GAAG,GAAGyE,IAAI;QAAJ,CAAI,EAAE,CAAC,CAAC,GAAGvI,OAAO,CAACxE,MAAM;QACzE,MAAMR,GAAG;QAAA;QAAA,CAAArB,cAAA,GAAAE,CAAA,SAAGwB,IAAI,CAACL,GAAG,CAAC,GAAGgF,OAAO,CAAC;QAChC,MAAM1E,GAAG;QAAA;QAAA,CAAA3B,cAAA,GAAAE,CAAA,SAAGwB,IAAI,CAACC,GAAG,CAAC,GAAG0E,OAAO,CAAC;QAAC;QAAArG,cAAA,GAAAE,CAAA;QAEjCwO,KAAK,CAACH,SAAS,CAAC,GAAG;UACjBI,GAAG,EAAEjN,IAAI,CAACmN,KAAK,CAACF,GAAG,CAAC;UACpBtN,GAAG,EAAEK,IAAI,CAACmN,KAAK,CAACxN,GAAG,CAAC;UACpBM,GAAG,EAAED,IAAI,CAACmN,KAAK,CAAClN,GAAG,CAAC;UACpBmN,KAAK,EAAEzI,OAAO,CAACxE;SAChB;MACH,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAAmC,CAAA;MAAA;IACH;IAAC;IAAAnC,cAAA,GAAAE,CAAA;IAED,OAAOwO,KAAK;EACd;EAEA;;;EAGOK,WAAWA,CAAA;IAAA;IAAA/O,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAChB,IAAI,CAACiB,aAAa,CAAC6N,KAAK,EAAE;IAAC;IAAAhP,cAAA,GAAAE,CAAA;IAC3B,IAAI,CAACqB,eAAe,CAACyN,KAAK,EAAE;IAAC;IAAAhP,cAAA,GAAAE,CAAA;IAC7B,IAAI,CAACsB,kBAAkB,CAACwN,KAAK,EAAE;IAAC;IAAAhP,cAAA,GAAAE,CAAA;IAChCyD,OAAO,CAAC4B,GAAG,CAAC,oCAAoC,CAAC;EACnD;EAEA;;;EAGO0J,aAAaA,CAAA;IAAA;IAAAjP,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAClB,OAAO;MACLgD,QAAQ,EAAE;QACRgM,IAAI,EAAE,IAAI,CAAC/N,aAAa,CAAC+N,IAAI;QAC7B7N,GAAG,EAAE,IAAI,CAACF,aAAa,CAACE,GAAG;QAC3B8N,OAAO,EAAE,IAAI,CAAChO,aAAa,CAACiO,cAAc,GAAG,CAAC;QAAA;QAAA,CAAApP,cAAA,GAAAmC,CAAA,WAC5C,CAAC,IAAI,CAAChB,aAAa,CAACiO,cAAc,GAAG,IAAI,CAACjO,aAAa,CAAC+N,IAAI,IAAI,IAAI,CAAC/N,aAAa,CAACiO,cAAc;QAAA;QAAA,CAAApP,cAAA,GAAAmC,CAAA,WAAG,CAAC;OACxG;MACDmB,WAAW,EAAE;QACX4L,IAAI,EAAE,IAAI,CAAC3N,eAAe,CAAC2N,IAAI;QAC/B7N,GAAG,EAAE,IAAI,CAACE,eAAe,CAACF,GAAG;QAC7B8N,OAAO,EAAE,IAAI,CAAC5N,eAAe,CAAC6N,cAAc,GAAG,CAAC;QAAA;QAAA,CAAApP,cAAA,GAAAmC,CAAA,WAC9C,CAAC,IAAI,CAACZ,eAAe,CAAC6N,cAAc,GAAG,IAAI,CAAC7N,eAAe,CAAC2N,IAAI,IAAI,IAAI,CAAC3N,eAAe,CAAC6N,cAAc;QAAA;QAAA,CAAApP,cAAA,GAAAmC,CAAA,WAAG,CAAC;;KAEhH;EACH;;AACD;AAAAnC,cAAA,GAAAE,CAAA;AAjmCDmP,OAAA,CAAA3O,kBAAA,GAAAA,kBAAA;AAmmCA;AAAA;AAAAV,cAAA,GAAAE,CAAA;AACamP,OAAA,CAAAC,kBAAkB,GAAG,IAAI5O,kBAAkB,EAAE","ignoreList":[]}