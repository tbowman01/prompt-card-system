07b9dfa881a7d237ffbb2b0198872944
"use strict";

/* istanbul ignore next */
function cov_2kfu1vuh04() {
  var path = "/workspaces/prompt-card-system/backend/src/middleware/structuredLogging.ts";
  var hash = "dabc0587a9cd6066868529dae91248d83d9b2502";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/middleware/structuredLogging.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 138
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 28
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 35
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 65
        }
      },
      "7": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "8": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "9": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 63
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "11": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "12": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "13": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "14": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "15": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 65,
          column: 32
        }
      },
      "16": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "17": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 55
        }
      },
      "18": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 37
        }
      },
      "19": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "20": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 29
        }
      },
      "21": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "22": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "23": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 28
        }
      },
      "24": {
        start: {
          line: 86,
          column: 21
        },
        end: {
          line: 86,
          column: 35
        }
      },
      "25": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 93
        }
      },
      "26": {
        start: {
          line: 87,
          column: 46
        },
        end: {
          line: 87,
          column: 85
        }
      },
      "27": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 88,
          column: 87
        }
      },
      "28": {
        start: {
          line: 88,
          column: 49
        },
        end: {
          line: 88,
          column: 61
        }
      },
      "29": {
        start: {
          line: 88,
          column: 74
        },
        end: {
          line: 88,
          column: 86
        }
      },
      "30": {
        start: {
          line: 89,
          column: 36
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "31": {
        start: {
          line: 90,
          column: 50
        },
        end: {
          line: 90,
          column: 60
        }
      },
      "32": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 10
        }
      },
      "33": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 99,
          column: 58
        }
      },
      "34": {
        start: {
          line: 101,
          column: 36
        },
        end: {
          line: 165,
          column: 1
        }
      },
      "35": {
        start: {
          line: 102,
          column: 22
        },
        end: {
          line: 102,
          column: 32
        }
      },
      "36": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 103,
          column: 105
        }
      },
      "37": {
        start: {
          line: 104,
          column: 22
        },
        end: {
          line: 104,
          column: 97
        }
      },
      "38": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "39": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 44
        }
      },
      "40": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 53
        }
      },
      "41": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 45
        }
      },
      "42": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "43": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 129,
          column: 99
        }
      },
      "44": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 31
        }
      },
      "45": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 163,
          column: 6
        }
      },
      "46": {
        start: {
          line: 133,
          column: 25
        },
        end: {
          line: 133,
          column: 47
        }
      },
      "47": {
        start: {
          line: 134,
          column: 29
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "48": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 26
        }
      },
      "49": {
        start: {
          line: 141,
          column: 22
        },
        end: {
          line: 141,
          column: 101
        }
      },
      "50": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "51": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 28
        }
      },
      "52": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 52
        }
      },
      "53": {
        start: {
          line: 146,
          column: 13
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "54": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 27
        }
      },
      "55": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 52
        }
      },
      "56": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "57": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 59
        }
      },
      "58": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 59
        }
      },
      "59": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 27
        }
      },
      "60": {
        start: {
          line: 156,
          column: 13
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "61": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 59
        }
      },
      "62": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 91
        }
      },
      "63": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 27
        }
      },
      "64": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 67
        }
      },
      "65": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 48
        }
      },
      "66": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "67": {
        start: {
          line: 166,
          column: 0
        },
        end: {
          line: 166,
          column: 66
        }
      },
      "68": {
        start: {
          line: 169,
          column: 23
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "69": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 176,
          column: 81
        }
      },
      "70": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 201,
          column: 1
        }
      },
      "71": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "72": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 82
        }
      },
      "73": {
        start: {
          line: 202,
          column: 0
        },
        end: {
          line: 202,
          column: 44
        }
      },
      "74": {
        start: {
          line: 204,
          column: 37
        },
        end: {
          line: 242,
          column: 1
        }
      },
      "75": {
        start: {
          line: 205,
          column: 22
        },
        end: {
          line: 205,
          column: 45
        }
      },
      "76": {
        start: {
          line: 206,
          column: 24
        },
        end: {
          line: 206,
          column: 45
        }
      },
      "77": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 240,
          column: 7
        }
      },
      "78": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 47
        }
      },
      "79": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 209,
          column: 47
        }
      },
      "80": {
        start: {
          line: 210,
          column: 25
        },
        end: {
          line: 210,
          column: 62
        }
      },
      "81": {
        start: {
          line: 211,
          column: 32
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "82": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "83": {
        start: {
          line: 226,
          column: 28
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "84": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 98
        }
      },
      "85": {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "86": {
        start: {
          line: 243,
          column: 0
        },
        end: {
          line: 243,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 21
          }
        },
        loc: {
          start: {
            line: 11,
            column: 26
          },
          end: {
            line: 11,
            column: 42
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 87,
            column: 39
          },
          end: {
            line: 87,
            column: 40
          }
        },
        loc: {
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 87,
            column: 85
          }
        },
        line: 87
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 42
          },
          end: {
            line: 88,
            column: 43
          }
        },
        loc: {
          start: {
            line: 88,
            column: 49
          },
          end: {
            line: 88,
            column: 61
          }
        },
        line: 88
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 67
          },
          end: {
            line: 88,
            column: 68
          }
        },
        loc: {
          start: {
            line: 88,
            column: 74
          },
          end: {
            line: 88,
            column: 86
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 90,
            column: 35
          },
          end: {
            line: 90,
            column: 36
          }
        },
        loc: {
          start: {
            line: 90,
            column: 50
          },
          end: {
            line: 90,
            column: 60
          }
        },
        line: 90
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 101,
            column: 36
          },
          end: {
            line: 101,
            column: 37
          }
        },
        loc: {
          start: {
            line: 101,
            column: 56
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 101
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 132,
            column: 14
          },
          end: {
            line: 132,
            column: 15
          }
        },
        loc: {
          start: {
            line: 132,
            column: 41
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 132
      },
      "12": {
        name: "generateFingerprint",
        decl: {
          start: {
            line: 168,
            column: 9
          },
          end: {
            line: 168,
            column: 28
          }
        },
        loc: {
          start: {
            line: 168,
            column: 34
          },
          end: {
            line: 177,
            column: 1
          }
        },
        line: 168
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 179,
            column: 25
          },
          end: {
            line: 179,
            column: 26
          }
        },
        loc: {
          start: {
            line: 179,
            column: 59
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 179
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 204,
            column: 37
          },
          end: {
            line: 204,
            column: 38
          }
        },
        loc: {
          start: {
            line: 204,
            column: 57
          },
          end: {
            line: 242,
            column: 1
          }
        },
        line: 204
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 207,
            column: 21
          },
          end: {
            line: 207,
            column: 22
          }
        },
        loc: {
          start: {
            line: 207,
            column: 27
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 207
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 37
          }
        }, {
          start: {
            line: 63,
            column: 41
          },
          end: {
            line: 63,
            column: 50
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 38
          },
          end: {
            line: 64,
            column: 61
          }
        }, {
          start: {
            line: 64,
            column: 64
          },
          end: {
            line: 64,
            column: 66
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 80,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 80,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 87,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 87,
            column: 60
          }
        }, {
          start: {
            line: 87,
            column: 64
          },
          end: {
            line: 87,
            column: 85
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 36
          },
          end: {
            line: 91,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 14
          },
          end: {
            line: 90,
            column: 87
          }
        }, {
          start: {
            line: 91,
            column: 14
          },
          end: {
            line: 91,
            column: 15
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 103,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 103,
            column: 57
          }
        }, {
          start: {
            line: 103,
            column: 61
          },
          end: {
            line: 103,
            column: 105
          }
        }],
        line: 103
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 22
          },
          end: {
            line: 104,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 22
          },
          end: {
            line: 104,
            column: 49
          }
        }, {
          start: {
            line: 104,
            column: 53
          },
          end: {
            line: 104,
            column: 97
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 117,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 117,
            column: 18
          }
        }, {
          start: {
            line: 117,
            column: 22
          },
          end: {
            line: 117,
            column: 50
          }
        }, {
          start: {
            line: 117,
            column: 54
          },
          end: {
            line: 117,
            column: 63
          }
        }],
        line: 117
      },
      "12": {
        loc: {
          start: {
            line: 118,
            column: 19
          },
          end: {
            line: 118,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 19
          },
          end: {
            line: 118,
            column: 44
          }
        }, {
          start: {
            line: 118,
            column: 48
          },
          end: {
            line: 118,
            column: 57
          }
        }],
        line: 118
      },
      "13": {
        loc: {
          start: {
            line: 123,
            column: 24
          },
          end: {
            line: 123,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 52
          },
          end: {
            line: 123,
            column: 60
          }
        }, {
          start: {
            line: 123,
            column: 63
          },
          end: {
            line: 123,
            column: 69
          }
        }],
        line: 123
      },
      "14": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: 146,
            column: 13
          },
          end: {
            line: 149,
            column: 9
          }
        }],
        line: 142
      },
      "15": {
        loc: {
          start: {
            line: 146,
            column: 13
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 13
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "16": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: 156,
            column: 13
          },
          end: {
            line: 160,
            column: 9
          }
        }],
        line: 151
      },
      "17": {
        loc: {
          start: {
            line: 156,
            column: 13
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 13
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "18": {
        loc: {
          start: {
            line: 156,
            column: 17
          },
          end: {
            line: 156,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 17
          },
          end: {
            line: 156,
            column: 39
          }
        }, {
          start: {
            line: 156,
            column: 43
          },
          end: {
            line: 156,
            column: 65
          }
        }],
        line: 156
      },
      "19": {
        loc: {
          start: {
            line: 158,
            column: 37
          },
          end: {
            line: 158,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 62
          },
          end: {
            line: 158,
            column: 76
          }
        }, {
          start: {
            line: 158,
            column: 79
          },
          end: {
            line: 158,
            column: 90
          }
        }],
        line: 158
      },
      "20": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 170,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 170,
            column: 33
          }
        }, {
          start: {
            line: 170,
            column: 37
          },
          end: {
            line: 170,
            column: 39
          }
        }],
        line: 170
      },
      "21": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 171,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 171,
            column: 38
          }
        }, {
          start: {
            line: 171,
            column: 42
          },
          end: {
            line: 171,
            column: 44
          }
        }],
        line: 171
      },
      "22": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 172,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 172,
            column: 38
          }
        }, {
          start: {
            line: 172,
            column: 42
          },
          end: {
            line: 172,
            column: 44
          }
        }],
        line: 172
      },
      "23": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 20
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 14
          }
        }, {
          start: {
            line: 173,
            column: 18
          },
          end: {
            line: 173,
            column: 20
          }
        }],
        line: 173
      },
      "24": {
        loc: {
          start: {
            line: 179,
            column: 42
          },
          end: {
            line: 179,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 179,
            column: 52
          },
          end: {
            line: 179,
            column: 54
          }
        }],
        line: 179
      },
      "25": {
        loc: {
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 181,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 181,
            column: 54
          }
        }, {
          start: {
            line: 181,
            column: 58
          },
          end: {
            line: 181,
            column: 67
          }
        }],
        line: 181
      },
      "26": {
        loc: {
          start: {
            line: 182,
            column: 19
          },
          end: {
            line: 182,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 19
          },
          end: {
            line: 182,
            column: 46
          }
        }, {
          start: {
            line: 182,
            column: 50
          },
          end: {
            line: 182,
            column: 59
          }
        }],
        line: 182
      },
      "27": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 18
          }
        }, {
          start: {
            line: 185,
            column: 22
          },
          end: {
            line: 185,
            column: 31
          }
        }],
        line: 185
      },
      "28": {
        loc: {
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 186,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 186,
            column: 44
          }
        }, {
          start: {
            line: 186,
            column: 48
          },
          end: {
            line: 186,
            column: 57
          }
        }],
        line: 186
      },
      "29": {
        loc: {
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 52
          },
          end: {
            line: 191,
            column: 60
          }
        }, {
          start: {
            line: 191,
            column: 63
          },
          end: {
            line: 191,
            column: 69
          }
        }],
        line: 191
      },
      "30": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "31": {
        loc: {
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 227,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 227,
            column: 60
          }
        }, {
          start: {
            line: 227,
            column: 64
          },
          end: {
            line: 227,
            column: 73
          }
        }],
        line: 227
      },
      "32": {
        loc: {
          start: {
            line: 228,
            column: 27
          },
          end: {
            line: 228,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 27
          },
          end: {
            line: 228,
            column: 52
          }
        }, {
          start: {
            line: 228,
            column: 56
          },
          end: {
            line: 228,
            column: 65
          }
        }],
        line: 228
      },
      "33": {
        loc: {
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 26
          }
        }, {
          start: {
            line: 229,
            column: 30
          },
          end: {
            line: 229,
            column: 39
          }
        }],
        line: 229
      },
      "34": {
        loc: {
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 230,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 230,
            column: 52
          }
        }, {
          start: {
            line: 230,
            column: 56
          },
          end: {
            line: 230,
            column: 65
          }
        }],
        line: 230
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/middleware/structuredLogging.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/middleware/structuredLogging.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { randomBytes } from 'crypto';\n\n// Enhanced structured logging with correlation IDs and security context\nexport interface LogContext {\n  correlationId: string;\n  requestId: string;\n  userId?: string;\n  userRole?: string;\n  ip: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  timestamp: string;\n  duration?: number;\n  statusCode?: number;\n  errorCode?: string;\n  securityContext?: {\n    authMethod?: string;\n    rateLimit?: {\n      hits: number;\n      remaining: number;\n    };\n    suspicious?: boolean;\n    geoLocation?: string;\n    fingerprint?: string;\n  };\n  metadata?: Record<string, any>;\n}\n\nclass StructuredLogger {\n  private static instance: StructuredLogger;\n  private logBuffer: LogContext[] = [];\n  private readonly MAX_BUFFER_SIZE = 100;\n  private readonly FLUSH_INTERVAL = 10000; // 10 seconds\n\n  private constructor() {\n    // Flush logs periodically\n    setInterval(() => this.flushLogs(), this.FLUSH_INTERVAL);\n  }\n\n  public static getInstance(): StructuredLogger {\n    if (!StructuredLogger.instance) {\n      StructuredLogger.instance = new StructuredLogger();\n    }\n    return StructuredLogger.instance;\n  }\n\n  public log(level: 'info' | 'warn' | 'error' | 'debug', context: LogContext, message: string): void {\n    const logEntry = {\n      level,\n      message,\n      ...context,\n      bufferTimestamp: new Date().toISOString()\n    };\n\n    // Enhanced console logging with structured format\n    const structuredLog = {\n      '@timestamp': context.timestamp,\n      '@version': '1',\n      level,\n      message,\n      correlation_id: context.correlationId,\n      request_id: context.requestId,\n      user: {\n        id: context.userId,\n        role: context.userRole\n      },\n      request: {\n        method: context.method,\n        url: context.url,\n        ip: context.ip,\n        user_agent: context.userAgent,\n        duration_ms: context.duration,\n        status_code: context.statusCode\n      },\n      security: context.securityContext,\n      error_code: context.errorCode,\n      metadata: context.metadata\n    };\n\n    // Color-coded console output for development\n    if (process.env.NODE_ENV !== 'production') {\n      const colors = {\n        info: '\\x1b[36m',    // Cyan\n        warn: '\\x1b[33m',    // Yellow\n        error: '\\x1b[31m',   // Red\n        debug: '\\x1b[35m',   // Magenta\n        reset: '\\x1b[0m'\n      };\n\n      console.log(\n        `${colors[level]}[${level.toUpperCase()}]${colors.reset} ` +\n        `${context.timestamp} ` +\n        `[${context.correlationId}] ` +\n        `${context.method} ${context.url} ` +\n        `${context.statusCode || 'PENDING'} ` +\n        `${context.duration ? `${context.duration}ms` : ''} ` +\n        `- ${message}`\n      );\n    }\n\n    // Structured JSON logging for production\n    if (process.env.NODE_ENV === 'production') {\n      console.log(JSON.stringify(structuredLog));\n    }\n\n    // Add to buffer for batch processing\n    this.logBuffer.push(context);\n\n    // Flush if buffer is full\n    if (this.logBuffer.length >= this.MAX_BUFFER_SIZE) {\n      this.flushLogs();\n    }\n  }\n\n  private flushLogs(): void {\n    if (this.logBuffer.length === 0) return;\n\n    // In production, this would send to centralized logging system\n    // For now, we'll just clear the buffer\n    this.logBuffer = [];\n  }\n\n  public getMetrics(): { totalLogs: number; errorCount: number; averageResponseTime: number } {\n    const logs = this.logBuffer;\n    const errorCount = logs.filter(log => log.statusCode && log.statusCode >= 400).length;\n    const responseTimes = logs.filter(log => log.duration).map(log => log.duration!);\n    const averageResponseTime = responseTimes.length > 0 \n      ? responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length \n      : 0;\n\n    return {\n      totalLogs: logs.length,\n      errorCount,\n      averageResponseTime: Math.round(averageResponseTime)\n    };\n  }\n}\n\nexport const structuredLogger = StructuredLogger.getInstance();\n\n// Middleware to add correlation ID and structured logging\nexport const structuredLoggingMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = Date.now();\n  const correlationId = (req.headers['x-correlation-id'] as string) || randomBytes(8).toString('hex');\n  const requestId = (req.headers['x-request-id'] as string) || randomBytes(8).toString('hex');\n\n  // Add correlation ID to request for downstream use\n  req.headers['x-correlation-id'] = correlationId;\n  req.headers['x-request-id'] = requestId;\n\n  // Add correlation ID to response headers\n  res.setHeader('x-correlation-id', correlationId);\n  res.setHeader('x-request-id', requestId);\n\n  // Create base log context\n  const baseContext: Partial<LogContext> = {\n    correlationId,\n    requestId,\n    userId: req.user?.id,\n    userRole: req.user?.role,\n    ip: req.ip || req.connection.remoteAddress || 'unknown',\n    userAgent: req.headers['user-agent'] || 'unknown',\n    method: req.method,\n    url: req.url,\n    timestamp: new Date().toISOString(),\n    securityContext: {\n      authMethod: req.headers.authorization ? 'Bearer' : 'none',\n      suspicious: false,\n      fingerprint: generateFingerprint(req)\n    }\n  };\n\n  // Log request start\n  structuredLogger.log('info', baseContext as LogContext, `Request started: ${req.method} ${req.url}`);\n\n  // Override res.end to capture response details\n  const originalEnd = res.end;\n  res.end = function(chunk?: any, encoding?: any): any {\n    const duration = Date.now() - startTime;\n    const finalContext: LogContext = {\n      ...baseContext as LogContext,\n      duration,\n      statusCode: res.statusCode\n    };\n\n    // Determine log level based on status code\n    let level: 'info' | 'warn' | 'error' = 'info';\n    let message = `Request completed: ${req.method} ${req.url} ${res.statusCode} (${duration}ms)`;\n\n    if (res.statusCode >= 500) {\n      level = 'error';\n      finalContext.errorCode = 'SERVER_ERROR';\n    } else if (res.statusCode >= 400) {\n      level = 'warn';\n      finalContext.errorCode = 'CLIENT_ERROR';\n    }\n\n    // Add security context for suspicious activity\n    if (res.statusCode === 429) {\n      finalContext.securityContext!.suspicious = true;\n      finalContext.errorCode = 'RATE_LIMIT_EXCEEDED';\n      level = 'warn';\n    } else if (res.statusCode === 401 || res.statusCode === 403) {\n      finalContext.securityContext!.suspicious = true;\n      finalContext.errorCode = res.statusCode === 401 ? 'UNAUTHORIZED' : 'FORBIDDEN';\n      level = 'warn';\n    }\n\n    structuredLogger.log(level, finalContext, message);\n    originalEnd.call(this, chunk, encoding);\n  };\n\n  next();\n};\n\n// Generate a simple fingerprint for request tracking\nfunction generateFingerprint(req: Request): string {\n  const components = [\n    req.headers['user-agent'] || '',\n    req.headers['accept-language'] || '',\n    req.headers['accept-encoding'] || '',\n    req.ip || ''\n  ];\n  \n  // Simple hash of combined components\n  return Buffer.from(components.join('|')).toString('base64').substring(0, 12);\n}\n\n// Security event logging\nexport const logSecurityEvent = (\n  eventType: 'auth_success' | 'auth_failure' | 'rate_limit' | 'suspicious_activity' | 'vulnerability_detected',\n  req: Request,\n  details: Record<string, any> = {}\n): void => {\n  const context: LogContext = {\n    correlationId: (req.headers['x-correlation-id'] as string) || 'unknown',\n    requestId: (req.headers['x-request-id'] as string) || 'unknown',\n    userId: req.user?.id,\n    userRole: req.user?.role,\n    ip: req.ip || 'unknown',\n    userAgent: req.headers['user-agent'] || 'unknown',\n    method: req.method,\n    url: req.url,\n    timestamp: new Date().toISOString(),\n    securityContext: {\n      authMethod: req.headers.authorization ? 'Bearer' : 'none',\n      suspicious: true,\n      fingerprint: generateFingerprint(req)\n    },\n    metadata: {\n      eventType,\n      ...details\n    }\n  };\n\n  structuredLogger.log('warn', context, `Security event: ${eventType}`);\n};\n\n// Performance monitoring middleware\nexport const performanceLoggingMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = process.hrtime.bigint();\n  const startMemory = process.memoryUsage();\n\n  res.on('finish', () => {\n    const endTime = process.hrtime.bigint();\n    const endMemory = process.memoryUsage();\n    const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n\n    const performanceData = {\n      correlationId: req.headers['x-correlation-id'],\n      requestId: req.headers['x-request-id'],\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration,\n      memory: {\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        external: endMemory.external - startMemory.external\n      }\n    };\n\n    // Log performance warning for slow requests\n    if (duration > 1000) { // Slower than 1 second\n      const context: LogContext = {\n        correlationId: performanceData.correlationId as string || 'unknown',\n        requestId: performanceData.requestId as string || 'unknown',\n        ip: req.ip || 'unknown',\n        userAgent: req.headers['user-agent'] || 'unknown',\n        method: req.method,\n        url: req.url,\n        timestamp: new Date().toISOString(),\n        duration,\n        statusCode: res.statusCode,\n        metadata: performanceData\n      };\n\n      structuredLogger.log('warn', context, `Slow request detected: ${duration}ms`);\n    }\n  });\n\n  next();\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dabc0587a9cd6066868529dae91248d83d9b2502"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kfu1vuh04 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kfu1vuh04();
cov_2kfu1vuh04().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2kfu1vuh04().s[1]++;
exports.performanceLoggingMiddleware = exports.logSecurityEvent = exports.structuredLoggingMiddleware = exports.structuredLogger = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_2kfu1vuh04().s[2]++, require("crypto"));
class StructuredLogger {
  constructor() {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[0]++;
    cov_2kfu1vuh04().s[3]++;
    this.logBuffer = [];
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[4]++;
    this.MAX_BUFFER_SIZE = 100;
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[5]++;
    this.FLUSH_INTERVAL = 10000; // 10 seconds
    // Flush logs periodically
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[6]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_2kfu1vuh04().f[1]++;
      cov_2kfu1vuh04().s[7]++;
      return this.flushLogs();
    }, this.FLUSH_INTERVAL);
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[2]++;
    cov_2kfu1vuh04().s[8]++;
    if (!StructuredLogger.instance) {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[0][0]++;
      cov_2kfu1vuh04().s[9]++;
      StructuredLogger.instance = new StructuredLogger();
    } else
    /* istanbul ignore next */
    {
      cov_2kfu1vuh04().b[0][1]++;
    }
    cov_2kfu1vuh04().s[10]++;
    return StructuredLogger.instance;
  }
  log(level, context, message) {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[3]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[11]++, {
      level,
      message,
      ...context,
      bufferTimestamp: new Date().toISOString()
    });
    // Enhanced console logging with structured format
    const structuredLog =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[12]++, {
      '@timestamp': context.timestamp,
      '@version': '1',
      level,
      message,
      correlation_id: context.correlationId,
      request_id: context.requestId,
      user: {
        id: context.userId,
        role: context.userRole
      },
      request: {
        method: context.method,
        url: context.url,
        ip: context.ip,
        user_agent: context.userAgent,
        duration_ms: context.duration,
        status_code: context.statusCode
      },
      security: context.securityContext,
      error_code: context.errorCode,
      metadata: context.metadata
    });
    // Color-coded console output for development
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[13]++;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[1][0]++;
      const colors =
      /* istanbul ignore next */
      (cov_2kfu1vuh04().s[14]++, {
        info: '\x1b[36m',
        // Cyan
        warn: '\x1b[33m',
        // Yellow
        error: '\x1b[31m',
        // Red
        debug: '\x1b[35m',
        // Magenta
        reset: '\x1b[0m'
      });
      /* istanbul ignore next */
      cov_2kfu1vuh04().s[15]++;
      console.log(`${colors[level]}[${level.toUpperCase()}]${colors.reset} ` + `${context.timestamp} ` + `[${context.correlationId}] ` + `${context.method} ${context.url} ` + `${
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[2][0]++, context.statusCode) ||
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[2][1]++, 'PENDING')} ` + `${context.duration ?
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[3][0]++, `${context.duration}ms`) :
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[3][1]++, '')} ` + `- ${message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2kfu1vuh04().b[1][1]++;
    }
    // Structured JSON logging for production
    cov_2kfu1vuh04().s[16]++;
    if (process.env.NODE_ENV === 'production') {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[4][0]++;
      cov_2kfu1vuh04().s[17]++;
      console.log(JSON.stringify(structuredLog));
    } else
    /* istanbul ignore next */
    {
      cov_2kfu1vuh04().b[4][1]++;
    }
    // Add to buffer for batch processing
    cov_2kfu1vuh04().s[18]++;
    this.logBuffer.push(context);
    // Flush if buffer is full
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[19]++;
    if (this.logBuffer.length >= this.MAX_BUFFER_SIZE) {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[5][0]++;
      cov_2kfu1vuh04().s[20]++;
      this.flushLogs();
    } else
    /* istanbul ignore next */
    {
      cov_2kfu1vuh04().b[5][1]++;
    }
  }
  flushLogs() {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[4]++;
    cov_2kfu1vuh04().s[21]++;
    if (this.logBuffer.length === 0) {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[6][0]++;
      cov_2kfu1vuh04().s[22]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2kfu1vuh04().b[6][1]++;
    }
    // In production, this would send to centralized logging system
    // For now, we'll just clear the buffer
    cov_2kfu1vuh04().s[23]++;
    this.logBuffer = [];
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[5]++;
    const logs =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[24]++, this.logBuffer);
    const errorCount =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[25]++, logs.filter(log => {
      /* istanbul ignore next */
      cov_2kfu1vuh04().f[6]++;
      cov_2kfu1vuh04().s[26]++;
      return /* istanbul ignore next */(cov_2kfu1vuh04().b[7][0]++, log.statusCode) &&
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[7][1]++, log.statusCode >= 400);
    }).length);
    const responseTimes =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[27]++, logs.filter(log => {
      /* istanbul ignore next */
      cov_2kfu1vuh04().f[7]++;
      cov_2kfu1vuh04().s[28]++;
      return log.duration;
    }).map(log => {
      /* istanbul ignore next */
      cov_2kfu1vuh04().f[8]++;
      cov_2kfu1vuh04().s[29]++;
      return log.duration;
    }));
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[30]++, responseTimes.length > 0 ?
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[8][0]++, responseTimes.reduce((sum, time) => {
      /* istanbul ignore next */
      cov_2kfu1vuh04().f[9]++;
      cov_2kfu1vuh04().s[31]++;
      return sum + time;
    }, 0) / responseTimes.length) :
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[8][1]++, 0));
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[32]++;
    return {
      totalLogs: logs.length,
      errorCount,
      averageResponseTime: Math.round(averageResponseTime)
    };
  }
}
/* istanbul ignore next */
cov_2kfu1vuh04().s[33]++;
exports.structuredLogger = StructuredLogger.getInstance();
// Middleware to add correlation ID and structured logging
/* istanbul ignore next */
cov_2kfu1vuh04().s[34]++;
const structuredLoggingMiddleware = (req, res, next) => {
  /* istanbul ignore next */
  cov_2kfu1vuh04().f[10]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[35]++, Date.now());
  const correlationId =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[36]++,
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[9][0]++, req.headers['x-correlation-id']) ||
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[9][1]++, (0, crypto_1.randomBytes)(8).toString('hex')));
  const requestId =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[37]++,
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[10][0]++, req.headers['x-request-id']) ||
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[10][1]++, (0, crypto_1.randomBytes)(8).toString('hex')));
  // Add correlation ID to request for downstream use
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[38]++;
  req.headers['x-correlation-id'] = correlationId;
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[39]++;
  req.headers['x-request-id'] = requestId;
  // Add correlation ID to response headers
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[40]++;
  res.setHeader('x-correlation-id', correlationId);
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[41]++;
  res.setHeader('x-request-id', requestId);
  // Create base log context
  const baseContext =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[42]++, {
    correlationId,
    requestId,
    userId: req.user?.id,
    userRole: req.user?.role,
    ip:
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[11][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[11][1]++, req.connection.remoteAddress) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[11][2]++, 'unknown'),
    userAgent:
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[12][0]++, req.headers['user-agent']) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[12][1]++, 'unknown'),
    method: req.method,
    url: req.url,
    timestamp: new Date().toISOString(),
    securityContext: {
      authMethod: req.headers.authorization ?
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[13][0]++, 'Bearer') :
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[13][1]++, 'none'),
      suspicious: false,
      fingerprint: generateFingerprint(req)
    }
  });
  // Log request start
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[43]++;
  exports.structuredLogger.log('info', baseContext, `Request started: ${req.method} ${req.url}`);
  // Override res.end to capture response details
  const originalEnd =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[44]++, res.end);
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[45]++;
  res.end = function (chunk, encoding) {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[11]++;
    const duration =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[46]++, Date.now() - startTime);
    const finalContext =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[47]++, {
      ...baseContext,
      duration,
      statusCode: res.statusCode
    });
    // Determine log level based on status code
    let level =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[48]++, 'info');
    let message =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[49]++, `Request completed: ${req.method} ${req.url} ${res.statusCode} (${duration}ms)`);
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[50]++;
    if (res.statusCode >= 500) {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[14][0]++;
      cov_2kfu1vuh04().s[51]++;
      level = 'error';
      /* istanbul ignore next */
      cov_2kfu1vuh04().s[52]++;
      finalContext.errorCode = 'SERVER_ERROR';
    } else {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[14][1]++;
      cov_2kfu1vuh04().s[53]++;
      if (res.statusCode >= 400) {
        /* istanbul ignore next */
        cov_2kfu1vuh04().b[15][0]++;
        cov_2kfu1vuh04().s[54]++;
        level = 'warn';
        /* istanbul ignore next */
        cov_2kfu1vuh04().s[55]++;
        finalContext.errorCode = 'CLIENT_ERROR';
      } else
      /* istanbul ignore next */
      {
        cov_2kfu1vuh04().b[15][1]++;
      }
    }
    // Add security context for suspicious activity
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[56]++;
    if (res.statusCode === 429) {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[16][0]++;
      cov_2kfu1vuh04().s[57]++;
      finalContext.securityContext.suspicious = true;
      /* istanbul ignore next */
      cov_2kfu1vuh04().s[58]++;
      finalContext.errorCode = 'RATE_LIMIT_EXCEEDED';
      /* istanbul ignore next */
      cov_2kfu1vuh04().s[59]++;
      level = 'warn';
    } else {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[16][1]++;
      cov_2kfu1vuh04().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[18][0]++, res.statusCode === 401) ||
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[18][1]++, res.statusCode === 403)) {
        /* istanbul ignore next */
        cov_2kfu1vuh04().b[17][0]++;
        cov_2kfu1vuh04().s[61]++;
        finalContext.securityContext.suspicious = true;
        /* istanbul ignore next */
        cov_2kfu1vuh04().s[62]++;
        finalContext.errorCode = res.statusCode === 401 ?
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[19][0]++, 'UNAUTHORIZED') :
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[19][1]++, 'FORBIDDEN');
        /* istanbul ignore next */
        cov_2kfu1vuh04().s[63]++;
        level = 'warn';
      } else
      /* istanbul ignore next */
      {
        cov_2kfu1vuh04().b[17][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[64]++;
    exports.structuredLogger.log(level, finalContext, message);
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[65]++;
    originalEnd.call(this, chunk, encoding);
  };
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[66]++;
  next();
};
/* istanbul ignore next */
cov_2kfu1vuh04().s[67]++;
exports.structuredLoggingMiddleware = structuredLoggingMiddleware;
// Generate a simple fingerprint for request tracking
function generateFingerprint(req) {
  /* istanbul ignore next */
  cov_2kfu1vuh04().f[12]++;
  const components =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[68]++, [
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[20][0]++, req.headers['user-agent']) ||
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[20][1]++, ''),
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[21][0]++, req.headers['accept-language']) ||
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[21][1]++, ''),
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[22][0]++, req.headers['accept-encoding']) ||
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[22][1]++, ''),
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[23][0]++, req.ip) ||
  /* istanbul ignore next */
  (cov_2kfu1vuh04().b[23][1]++, '')]);
  // Simple hash of combined components
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[69]++;
  return Buffer.from(components.join('|')).toString('base64').substring(0, 12);
}
// Security event logging
/* istanbul ignore next */
cov_2kfu1vuh04().s[70]++;
const logSecurityEvent = (eventType, req, details =
/* istanbul ignore next */
(cov_2kfu1vuh04().b[24][0]++, {})) => {
  /* istanbul ignore next */
  cov_2kfu1vuh04().f[13]++;
  const context =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[71]++, {
    correlationId:
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[25][0]++, req.headers['x-correlation-id']) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[25][1]++, 'unknown'),
    requestId:
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[26][0]++, req.headers['x-request-id']) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[26][1]++, 'unknown'),
    userId: req.user?.id,
    userRole: req.user?.role,
    ip:
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[27][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[27][1]++, 'unknown'),
    userAgent:
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[28][0]++, req.headers['user-agent']) ||
    /* istanbul ignore next */
    (cov_2kfu1vuh04().b[28][1]++, 'unknown'),
    method: req.method,
    url: req.url,
    timestamp: new Date().toISOString(),
    securityContext: {
      authMethod: req.headers.authorization ?
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[29][0]++, 'Bearer') :
      /* istanbul ignore next */
      (cov_2kfu1vuh04().b[29][1]++, 'none'),
      suspicious: true,
      fingerprint: generateFingerprint(req)
    },
    metadata: {
      eventType,
      ...details
    }
  });
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[72]++;
  exports.structuredLogger.log('warn', context, `Security event: ${eventType}`);
};
/* istanbul ignore next */
cov_2kfu1vuh04().s[73]++;
exports.logSecurityEvent = logSecurityEvent;
// Performance monitoring middleware
/* istanbul ignore next */
cov_2kfu1vuh04().s[74]++;
const performanceLoggingMiddleware = (req, res, next) => {
  /* istanbul ignore next */
  cov_2kfu1vuh04().f[14]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[75]++, process.hrtime.bigint());
  const startMemory =
  /* istanbul ignore next */
  (cov_2kfu1vuh04().s[76]++, process.memoryUsage());
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[77]++;
  res.on('finish', () => {
    /* istanbul ignore next */
    cov_2kfu1vuh04().f[15]++;
    const endTime =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[78]++, process.hrtime.bigint());
    const endMemory =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[79]++, process.memoryUsage());
    const duration =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[80]++, Number(endTime - startTime) / 1000000); // Convert to milliseconds
    const performanceData =
    /* istanbul ignore next */
    (cov_2kfu1vuh04().s[81]++, {
      correlationId: req.headers['x-correlation-id'],
      requestId: req.headers['x-request-id'],
      method: req.method,
      url: req.url,
      statusCode: res.statusCode,
      duration,
      memory: {
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        external: endMemory.external - startMemory.external
      }
    });
    // Log performance warning for slow requests
    /* istanbul ignore next */
    cov_2kfu1vuh04().s[82]++;
    if (duration > 1000) {
      /* istanbul ignore next */
      cov_2kfu1vuh04().b[30][0]++;
      // Slower than 1 second
      const context =
      /* istanbul ignore next */
      (cov_2kfu1vuh04().s[83]++, {
        correlationId:
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[31][0]++, performanceData.correlationId) ||
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[31][1]++, 'unknown'),
        requestId:
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[32][0]++, performanceData.requestId) ||
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[32][1]++, 'unknown'),
        ip:
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[33][0]++, req.ip) ||
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[33][1]++, 'unknown'),
        userAgent:
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[34][0]++, req.headers['user-agent']) ||
        /* istanbul ignore next */
        (cov_2kfu1vuh04().b[34][1]++, 'unknown'),
        method: req.method,
        url: req.url,
        timestamp: new Date().toISOString(),
        duration,
        statusCode: res.statusCode,
        metadata: performanceData
      });
      /* istanbul ignore next */
      cov_2kfu1vuh04().s[84]++;
      exports.structuredLogger.log('warn', context, `Slow request detected: ${duration}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_2kfu1vuh04().b[30][1]++;
    }
  });
  /* istanbul ignore next */
  cov_2kfu1vuh04().s[85]++;
  next();
};
/* istanbul ignore next */
cov_2kfu1vuh04().s[86]++;
exports.performanceLoggingMiddleware = performanceLoggingMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,