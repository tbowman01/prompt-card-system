{"version":3,"names":["cov_2kfu1vuh04","actualCoverage","s","crypto_1","require","StructuredLogger","constructor","f","logBuffer","MAX_BUFFER_SIZE","FLUSH_INTERVAL","setInterval","flushLogs","getInstance","instance","b","log","level","context","message","logEntry","bufferTimestamp","Date","toISOString","structuredLog","timestamp","correlation_id","correlationId","request_id","requestId","user","id","userId","role","userRole","request","method","url","ip","user_agent","userAgent","duration_ms","duration","status_code","statusCode","security","securityContext","error_code","errorCode","metadata","process","env","NODE_ENV","colors","info","warn","error","debug","reset","console","toUpperCase","JSON","stringify","push","length","getMetrics","logs","errorCount","filter","responseTimes","map","averageResponseTime","reduce","sum","time","totalLogs","Math","round","exports","structuredLogger","structuredLoggingMiddleware","req","res","next","startTime","now","headers","randomBytes","toString","setHeader","baseContext","connection","remoteAddress","authMethod","authorization","suspicious","fingerprint","generateFingerprint","originalEnd","end","chunk","encoding","finalContext","call","components","Buffer","from","join","substring","logSecurityEvent","eventType","details","performanceLoggingMiddleware","hrtime","bigint","startMemory","memoryUsage","on","endTime","endMemory","Number","performanceData","memory","heapUsed","heapTotal","external"],"sources":["/workspaces/prompt-card-system/backend/src/middleware/structuredLogging.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { randomBytes } from 'crypto';\n\n// Enhanced structured logging with correlation IDs and security context\nexport interface LogContext {\n  correlationId: string;\n  requestId: string;\n  userId?: string;\n  userRole?: string;\n  ip: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  timestamp: string;\n  duration?: number;\n  statusCode?: number;\n  errorCode?: string;\n  securityContext?: {\n    authMethod?: string;\n    rateLimit?: {\n      hits: number;\n      remaining: number;\n    };\n    suspicious?: boolean;\n    geoLocation?: string;\n    fingerprint?: string;\n  };\n  metadata?: Record<string, any>;\n}\n\nclass StructuredLogger {\n  private static instance: StructuredLogger;\n  private logBuffer: LogContext[] = [];\n  private readonly MAX_BUFFER_SIZE = 100;\n  private readonly FLUSH_INTERVAL = 10000; // 10 seconds\n\n  private constructor() {\n    // Flush logs periodically\n    setInterval(() => this.flushLogs(), this.FLUSH_INTERVAL);\n  }\n\n  public static getInstance(): StructuredLogger {\n    if (!StructuredLogger.instance) {\n      StructuredLogger.instance = new StructuredLogger();\n    }\n    return StructuredLogger.instance;\n  }\n\n  public log(level: 'info' | 'warn' | 'error' | 'debug', context: LogContext, message: string): void {\n    const logEntry = {\n      level,\n      message,\n      ...context,\n      bufferTimestamp: new Date().toISOString()\n    };\n\n    // Enhanced console logging with structured format\n    const structuredLog = {\n      '@timestamp': context.timestamp,\n      '@version': '1',\n      level,\n      message,\n      correlation_id: context.correlationId,\n      request_id: context.requestId,\n      user: {\n        id: context.userId,\n        role: context.userRole\n      },\n      request: {\n        method: context.method,\n        url: context.url,\n        ip: context.ip,\n        user_agent: context.userAgent,\n        duration_ms: context.duration,\n        status_code: context.statusCode\n      },\n      security: context.securityContext,\n      error_code: context.errorCode,\n      metadata: context.metadata\n    };\n\n    // Color-coded console output for development\n    if (process.env.NODE_ENV !== 'production') {\n      const colors = {\n        info: '\\x1b[36m',    // Cyan\n        warn: '\\x1b[33m',    // Yellow\n        error: '\\x1b[31m',   // Red\n        debug: '\\x1b[35m',   // Magenta\n        reset: '\\x1b[0m'\n      };\n\n      console.log(\n        `${colors[level]}[${level.toUpperCase()}]${colors.reset} ` +\n        `${context.timestamp} ` +\n        `[${context.correlationId}] ` +\n        `${context.method} ${context.url} ` +\n        `${context.statusCode || 'PENDING'} ` +\n        `${context.duration ? `${context.duration}ms` : ''} ` +\n        `- ${message}`\n      );\n    }\n\n    // Structured JSON logging for production\n    if (process.env.NODE_ENV === 'production') {\n      console.log(JSON.stringify(structuredLog));\n    }\n\n    // Add to buffer for batch processing\n    this.logBuffer.push(context);\n\n    // Flush if buffer is full\n    if (this.logBuffer.length >= this.MAX_BUFFER_SIZE) {\n      this.flushLogs();\n    }\n  }\n\n  private flushLogs(): void {\n    if (this.logBuffer.length === 0) return;\n\n    // In production, this would send to centralized logging system\n    // For now, we'll just clear the buffer\n    this.logBuffer = [];\n  }\n\n  public getMetrics(): { totalLogs: number; errorCount: number; averageResponseTime: number } {\n    const logs = this.logBuffer;\n    const errorCount = logs.filter(log => log.statusCode && log.statusCode >= 400).length;\n    const responseTimes = logs.filter(log => log.duration).map(log => log.duration!);\n    const averageResponseTime = responseTimes.length > 0 \n      ? responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length \n      : 0;\n\n    return {\n      totalLogs: logs.length,\n      errorCount,\n      averageResponseTime: Math.round(averageResponseTime)\n    };\n  }\n}\n\nexport const structuredLogger = StructuredLogger.getInstance();\n\n// Middleware to add correlation ID and structured logging\nexport const structuredLoggingMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = Date.now();\n  const correlationId = (req.headers['x-correlation-id'] as string) || randomBytes(8).toString('hex');\n  const requestId = (req.headers['x-request-id'] as string) || randomBytes(8).toString('hex');\n\n  // Add correlation ID to request for downstream use\n  req.headers['x-correlation-id'] = correlationId;\n  req.headers['x-request-id'] = requestId;\n\n  // Add correlation ID to response headers\n  res.setHeader('x-correlation-id', correlationId);\n  res.setHeader('x-request-id', requestId);\n\n  // Create base log context\n  const baseContext: Partial<LogContext> = {\n    correlationId,\n    requestId,\n    userId: req.user?.id,\n    userRole: req.user?.role,\n    ip: req.ip || req.connection.remoteAddress || 'unknown',\n    userAgent: req.headers['user-agent'] || 'unknown',\n    method: req.method,\n    url: req.url,\n    timestamp: new Date().toISOString(),\n    securityContext: {\n      authMethod: req.headers.authorization ? 'Bearer' : 'none',\n      suspicious: false,\n      fingerprint: generateFingerprint(req)\n    }\n  };\n\n  // Log request start\n  structuredLogger.log('info', baseContext as LogContext, `Request started: ${req.method} ${req.url}`);\n\n  // Override res.end to capture response details\n  const originalEnd = res.end;\n  res.end = function(chunk?: any, encoding?: any): any {\n    const duration = Date.now() - startTime;\n    const finalContext: LogContext = {\n      ...baseContext as LogContext,\n      duration,\n      statusCode: res.statusCode\n    };\n\n    // Determine log level based on status code\n    let level: 'info' | 'warn' | 'error' = 'info';\n    let message = `Request completed: ${req.method} ${req.url} ${res.statusCode} (${duration}ms)`;\n\n    if (res.statusCode >= 500) {\n      level = 'error';\n      finalContext.errorCode = 'SERVER_ERROR';\n    } else if (res.statusCode >= 400) {\n      level = 'warn';\n      finalContext.errorCode = 'CLIENT_ERROR';\n    }\n\n    // Add security context for suspicious activity\n    if (res.statusCode === 429) {\n      finalContext.securityContext!.suspicious = true;\n      finalContext.errorCode = 'RATE_LIMIT_EXCEEDED';\n      level = 'warn';\n    } else if (res.statusCode === 401 || res.statusCode === 403) {\n      finalContext.securityContext!.suspicious = true;\n      finalContext.errorCode = res.statusCode === 401 ? 'UNAUTHORIZED' : 'FORBIDDEN';\n      level = 'warn';\n    }\n\n    structuredLogger.log(level, finalContext, message);\n    originalEnd.call(this, chunk, encoding);\n  };\n\n  next();\n};\n\n// Generate a simple fingerprint for request tracking\nfunction generateFingerprint(req: Request): string {\n  const components = [\n    req.headers['user-agent'] || '',\n    req.headers['accept-language'] || '',\n    req.headers['accept-encoding'] || '',\n    req.ip || ''\n  ];\n  \n  // Simple hash of combined components\n  return Buffer.from(components.join('|')).toString('base64').substring(0, 12);\n}\n\n// Security event logging\nexport const logSecurityEvent = (\n  eventType: 'auth_success' | 'auth_failure' | 'rate_limit' | 'suspicious_activity' | 'vulnerability_detected',\n  req: Request,\n  details: Record<string, any> = {}\n): void => {\n  const context: LogContext = {\n    correlationId: (req.headers['x-correlation-id'] as string) || 'unknown',\n    requestId: (req.headers['x-request-id'] as string) || 'unknown',\n    userId: req.user?.id,\n    userRole: req.user?.role,\n    ip: req.ip || 'unknown',\n    userAgent: req.headers['user-agent'] || 'unknown',\n    method: req.method,\n    url: req.url,\n    timestamp: new Date().toISOString(),\n    securityContext: {\n      authMethod: req.headers.authorization ? 'Bearer' : 'none',\n      suspicious: true,\n      fingerprint: generateFingerprint(req)\n    },\n    metadata: {\n      eventType,\n      ...details\n    }\n  };\n\n  structuredLogger.log('warn', context, `Security event: ${eventType}`);\n};\n\n// Performance monitoring middleware\nexport const performanceLoggingMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = process.hrtime.bigint();\n  const startMemory = process.memoryUsage();\n\n  res.on('finish', () => {\n    const endTime = process.hrtime.bigint();\n    const endMemory = process.memoryUsage();\n    const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n\n    const performanceData = {\n      correlationId: req.headers['x-correlation-id'],\n      requestId: req.headers['x-request-id'],\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration,\n      memory: {\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        external: endMemory.external - startMemory.external\n      }\n    };\n\n    // Log performance warning for slow requests\n    if (duration > 1000) { // Slower than 1 second\n      const context: LogContext = {\n        correlationId: performanceData.correlationId as string || 'unknown',\n        requestId: performanceData.requestId as string || 'unknown',\n        ip: req.ip || 'unknown',\n        userAgent: req.headers['user-agent'] || 'unknown',\n        method: req.method,\n        url: req.url,\n        timestamp: new Date().toISOString(),\n        duration,\n        statusCode: res.statusCode,\n        metadata: performanceData\n      };\n\n      structuredLogger.log('warn', context, `Slow request detected: ${duration}ms`);\n    }\n  });\n\n  next();\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4CK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AA3CL,MAAAC,QAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AA6BA,MAAMC,gBAAgB;EAMpBC,YAAA;IAAA;IAAAN,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAJQ,KAAAM,SAAS,GAAiB,EAAE;IAAC;IAAAR,cAAA,GAAAE,CAAA;IACpB,KAAAO,eAAe,GAAG,GAAG;IAAC;IAAAT,cAAA,GAAAE,CAAA;IACtB,KAAAQ,cAAc,GAAG,KAAK,CAAC,CAAC;IAGvC;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACAS,WAAW,CAAC,MAAM;MAAA;MAAAX,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,WAAI,CAACU,SAAS,EAAE;IAAF,CAAE,EAAE,IAAI,CAACF,cAAc,CAAC;EAC1D;EAEO,OAAOG,WAAWA,CAAA;IAAA;IAAAb,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACvB,IAAI,CAACG,gBAAgB,CAACS,QAAQ,EAAE;MAAA;MAAAd,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC9BG,gBAAgB,CAACS,QAAQ,GAAG,IAAIT,gBAAgB,EAAE;IACpD,CAAC;IAAA;IAAA;MAAAL,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACD,OAAOG,gBAAgB,CAACS,QAAQ;EAClC;EAEOE,GAAGA,CAACC,KAA0C,EAAEC,OAAmB,EAAEC,OAAe;IAAA;IAAAnB,cAAA,GAAAO,CAAA;IACzF,MAAMa,QAAQ;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAG;MACfe,KAAK;MACLE,OAAO;MACP,GAAGD,OAAO;MACVG,eAAe,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;KACxC;IAED;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAG;MACpB,YAAY,EAAEgB,OAAO,CAACO,SAAS;MAC/B,UAAU,EAAE,GAAG;MACfR,KAAK;MACLE,OAAO;MACPO,cAAc,EAAER,OAAO,CAACS,aAAa;MACrCC,UAAU,EAAEV,OAAO,CAACW,SAAS;MAC7BC,IAAI,EAAE;QACJC,EAAE,EAAEb,OAAO,CAACc,MAAM;QAClBC,IAAI,EAAEf,OAAO,CAACgB;OACf;MACDC,OAAO,EAAE;QACPC,MAAM,EAAElB,OAAO,CAACkB,MAAM;QACtBC,GAAG,EAAEnB,OAAO,CAACmB,GAAG;QAChBC,EAAE,EAAEpB,OAAO,CAACoB,EAAE;QACdC,UAAU,EAAErB,OAAO,CAACsB,SAAS;QAC7BC,WAAW,EAAEvB,OAAO,CAACwB,QAAQ;QAC7BC,WAAW,EAAEzB,OAAO,CAAC0B;OACtB;MACDC,QAAQ,EAAE3B,OAAO,CAAC4B,eAAe;MACjCC,UAAU,EAAE7B,OAAO,CAAC8B,SAAS;MAC7BC,QAAQ,EAAE/B,OAAO,CAAC+B;KACnB;IAED;IAAA;IAAAjD,cAAA,GAAAE,CAAA;IACA,IAAIgD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MAAA;MAAApD,cAAA,GAAAe,CAAA;MACzC,MAAMsC,MAAM;MAAA;MAAA,CAAArD,cAAA,GAAAE,CAAA,QAAG;QACboD,IAAI,EAAE,UAAU;QAAK;QACrBC,IAAI,EAAE,UAAU;QAAK;QACrBC,KAAK,EAAE,UAAU;QAAI;QACrBC,KAAK,EAAE,UAAU;QAAI;QACrBC,KAAK,EAAE;OACR;MAAC;MAAA1D,cAAA,GAAAE,CAAA;MAEFyD,OAAO,CAAC3C,GAAG,CACT,GAAGqC,MAAM,CAACpC,KAAK,CAAC,IAAIA,KAAK,CAAC2C,WAAW,EAAE,IAAIP,MAAM,CAACK,KAAK,GAAG,GAC1D,GAAGxC,OAAO,CAACO,SAAS,GAAG,GACvB,IAAIP,OAAO,CAACS,aAAa,IAAI,GAC7B,GAAGT,OAAO,CAACkB,MAAM,IAAIlB,OAAO,CAACmB,GAAG,GAAG,GACnC;MAAG;MAAA,CAAArC,cAAA,GAAAe,CAAA,UAAAG,OAAO,CAAC0B,UAAU;MAAA;MAAA,CAAA5C,cAAA,GAAAe,CAAA,UAAI,SAAS,IAAG,GACrC,GAAGG,OAAO,CAACwB,QAAQ;MAAA;MAAA,CAAA1C,cAAA,GAAAe,CAAA,UAAG,GAAGG,OAAO,CAACwB,QAAQ,IAAI;MAAA;MAAA,CAAA1C,cAAA,GAAAe,CAAA,UAAG,EAAE,IAAG,GACrD,KAAKI,OAAO,EAAE,CACf;IACH,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAAe,CAAA;IAAA;IAED;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAIgD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MAAA;MAAApD,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACzCyD,OAAO,CAAC3C,GAAG,CAAC6C,IAAI,CAACC,SAAS,CAACtC,aAAa,CAAC,CAAC;IAC5C,CAAC;IAAA;IAAA;MAAAxB,cAAA,GAAAe,CAAA;IAAA;IAED;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAI,CAACM,SAAS,CAACuD,IAAI,CAAC7C,OAAO,CAAC;IAE5B;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACA,IAAI,IAAI,CAACM,SAAS,CAACwD,MAAM,IAAI,IAAI,CAACvD,eAAe,EAAE;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACjD,IAAI,CAACU,SAAS,EAAE;IAClB,CAAC;IAAA;IAAA;MAAAZ,cAAA,GAAAe,CAAA;IAAA;EACH;EAEQH,SAASA,CAAA;IAAA;IAAAZ,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACf,IAAI,IAAI,CAACM,SAAS,CAACwD,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAhE,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAExC;IACA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAI,CAACM,SAAS,GAAG,EAAE;EACrB;EAEOyD,UAAUA,CAAA;IAAA;IAAAjE,cAAA,GAAAO,CAAA;IACf,MAAM2D,IAAI;IAAA;IAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACM,SAAS;IAC3B,MAAM2D,UAAU;IAAA;IAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAGgE,IAAI,CAACE,MAAM,CAACpD,GAAG,IAAI;MAAA;MAAAhB,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,kCAAAF,cAAA,GAAAe,CAAA,UAAAC,GAAG,CAAC4B,UAAU;MAAA;MAAA,CAAA5C,cAAA,GAAAe,CAAA,UAAIC,GAAG,CAAC4B,UAAU,IAAI,GAAG;IAAH,CAAG,CAAC,CAACoB,MAAM;IACrF,MAAMK,aAAa;IAAA;IAAA,CAAArE,cAAA,GAAAE,CAAA,QAAGgE,IAAI,CAACE,MAAM,CAACpD,GAAG,IAAI;MAAA;MAAAhB,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,OAAAc,GAAG,CAAC0B,QAAQ;IAAR,CAAQ,CAAC,CAAC4B,GAAG,CAACtD,GAAG,IAAI;MAAA;MAAAhB,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,OAAAc,GAAG,CAAC0B,QAAS;IAAT,CAAS,CAAC;IAChF,MAAM6B,mBAAmB;IAAA;IAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAGmE,aAAa,CAACL,MAAM,GAAG,CAAC;IAAA;IAAA,CAAAhE,cAAA,GAAAe,CAAA,UAChDsD,aAAa,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;MAAA;MAAA1E,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,OAAAuE,GAAG,GAAGC,IAAI;IAAJ,CAAI,EAAE,CAAC,CAAC,GAAGL,aAAa,CAACL,MAAM;IAAA;IAAA,CAAAhE,cAAA,GAAAe,CAAA,UACzE,CAAC;IAAC;IAAAf,cAAA,GAAAE,CAAA;IAEN,OAAO;MACLyE,SAAS,EAAET,IAAI,CAACF,MAAM;MACtBG,UAAU;MACVI,mBAAmB,EAAEK,IAAI,CAACC,KAAK,CAACN,mBAAmB;KACpD;EACH;;AACD;AAAAvE,cAAA,GAAAE,CAAA;AAEY4E,OAAA,CAAAC,gBAAgB,GAAG1E,gBAAgB,CAACQ,WAAW,EAAE;AAE9D;AAAA;AAAAb,cAAA,GAAAE,CAAA;AACO,MAAM8E,2BAA2B,GAAGA,CAACC,GAAY,EAAEC,GAAa,EAAEC,IAAkB,KAAU;EAAA;EAAAnF,cAAA,GAAAO,CAAA;EACnG,MAAM6E,SAAS;EAAA;EAAA,CAAApF,cAAA,GAAAE,CAAA,QAAGoB,IAAI,CAAC+D,GAAG,EAAE;EAC5B,MAAM1D,aAAa;EAAA;EAAA,CAAA3B,cAAA,GAAAE,CAAA;EAAI;EAAA,CAAAF,cAAA,GAAAe,CAAA,UAAAkE,GAAG,CAACK,OAAO,CAAC,kBAAkB,CAAY;EAAA;EAAA,CAAAtF,cAAA,GAAAe,CAAA,UAAI,IAAAZ,QAAA,CAAAoF,WAAW,EAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EACnG,MAAM3D,SAAS;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA;EAAI;EAAA,CAAAF,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,cAAc,CAAY;EAAA;EAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,IAAAZ,QAAA,CAAAoF,WAAW,EAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EAE3F;EAAA;EAAAxF,cAAA,GAAAE,CAAA;EACA+E,GAAG,CAACK,OAAO,CAAC,kBAAkB,CAAC,GAAG3D,aAAa;EAAC;EAAA3B,cAAA,GAAAE,CAAA;EAChD+E,GAAG,CAACK,OAAO,CAAC,cAAc,CAAC,GAAGzD,SAAS;EAEvC;EAAA;EAAA7B,cAAA,GAAAE,CAAA;EACAgF,GAAG,CAACO,SAAS,CAAC,kBAAkB,EAAE9D,aAAa,CAAC;EAAC;EAAA3B,cAAA,GAAAE,CAAA;EACjDgF,GAAG,CAACO,SAAS,CAAC,cAAc,EAAE5D,SAAS,CAAC;EAExC;EACA,MAAM6D,WAAW;EAAA;EAAA,CAAA1F,cAAA,GAAAE,CAAA,QAAwB;IACvCyB,aAAa;IACbE,SAAS;IACTG,MAAM,EAAEiD,GAAG,CAACnD,IAAI,EAAEC,EAAE;IACpBG,QAAQ,EAAE+C,GAAG,CAACnD,IAAI,EAAEG,IAAI;IACxBK,EAAE;IAAE;IAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAAC3C,EAAE;IAAA;IAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAIkE,GAAG,CAACU,UAAU,CAACC,aAAa;IAAA;IAAA,CAAA5F,cAAA,GAAAe,CAAA,WAAI,SAAS;IACvDyB,SAAS;IAAE;IAAA,CAAAxC,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,YAAY,CAAC;IAAA;IAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,SAAS;IACjDqB,MAAM,EAAE6C,GAAG,CAAC7C,MAAM;IAClBC,GAAG,EAAE4C,GAAG,CAAC5C,GAAG;IACZZ,SAAS,EAAE,IAAIH,IAAI,EAAE,CAACC,WAAW,EAAE;IACnCuB,eAAe,EAAE;MACf+C,UAAU,EAAEZ,GAAG,CAACK,OAAO,CAACQ,aAAa;MAAA;MAAA,CAAA9F,cAAA,GAAAe,CAAA,WAAG,QAAQ;MAAA;MAAA,CAAAf,cAAA,GAAAe,CAAA,WAAG,MAAM;MACzDgF,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAEC,mBAAmB,CAAChB,GAAG;;GAEvC;EAED;EAAA;EAAAjF,cAAA,GAAAE,CAAA;EACA4E,OAAA,CAAAC,gBAAgB,CAAC/D,GAAG,CAAC,MAAM,EAAE0E,WAAyB,EAAE,oBAAoBT,GAAG,CAAC7C,MAAM,IAAI6C,GAAG,CAAC5C,GAAG,EAAE,CAAC;EAEpG;EACA,MAAM6D,WAAW;EAAA;EAAA,CAAAlG,cAAA,GAAAE,CAAA,QAAGgF,GAAG,CAACiB,GAAG;EAAC;EAAAnG,cAAA,GAAAE,CAAA;EAC5BgF,GAAG,CAACiB,GAAG,GAAG,UAASC,KAAW,EAAEC,QAAc;IAAA;IAAArG,cAAA,GAAAO,CAAA;IAC5C,MAAMmC,QAAQ;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAGoB,IAAI,CAAC+D,GAAG,EAAE,GAAGD,SAAS;IACvC,MAAMkB,YAAY;IAAA;IAAA,CAAAtG,cAAA,GAAAE,CAAA,QAAe;MAC/B,GAAGwF,WAAyB;MAC5BhD,QAAQ;MACRE,UAAU,EAAEsC,GAAG,CAACtC;KACjB;IAED;IACA,IAAI3B,KAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,QAA8B,MAAM;IAC7C,IAAIiB,OAAO;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAG,sBAAsB+E,GAAG,CAAC7C,MAAM,IAAI6C,GAAG,CAAC5C,GAAG,IAAI6C,GAAG,CAACtC,UAAU,KAAKF,QAAQ,KAAK;IAAC;IAAA1C,cAAA,GAAAE,CAAA;IAE9F,IAAIgF,GAAG,CAACtC,UAAU,IAAI,GAAG,EAAE;MAAA;MAAA5C,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACzBe,KAAK,GAAG,OAAO;MAAC;MAAAjB,cAAA,GAAAE,CAAA;MAChBoG,YAAY,CAACtD,SAAS,GAAG,cAAc;IACzC,CAAC,MAAM;MAAA;MAAAhD,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA,IAAIgF,GAAG,CAACtC,UAAU,IAAI,GAAG,EAAE;QAAA;QAAA5C,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QAChCe,KAAK,GAAG,MAAM;QAAC;QAAAjB,cAAA,GAAAE,CAAA;QACfoG,YAAY,CAACtD,SAAS,GAAG,cAAc;MACzC,CAAC;MAAA;MAAA;QAAAhD,cAAA,GAAAe,CAAA;MAAA;IAAD;IAEA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAIgF,GAAG,CAACtC,UAAU,KAAK,GAAG,EAAE;MAAA;MAAA5C,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC1BoG,YAAY,CAACxD,eAAgB,CAACiD,UAAU,GAAG,IAAI;MAAC;MAAA/F,cAAA,GAAAE,CAAA;MAChDoG,YAAY,CAACtD,SAAS,GAAG,qBAAqB;MAAC;MAAAhD,cAAA,GAAAE,CAAA;MAC/Ce,KAAK,GAAG,MAAM;IAChB,CAAC,MAAM;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;MAAI;MAAA,CAAAF,cAAA,GAAAe,CAAA,WAAAmE,GAAG,CAACtC,UAAU,KAAK,GAAG;MAAA;MAAA,CAAA5C,cAAA,GAAAe,CAAA,WAAImE,GAAG,CAACtC,UAAU,KAAK,GAAG,GAAE;QAAA;QAAA5C,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QAC3DoG,YAAY,CAACxD,eAAgB,CAACiD,UAAU,GAAG,IAAI;QAAC;QAAA/F,cAAA,GAAAE,CAAA;QAChDoG,YAAY,CAACtD,SAAS,GAAGkC,GAAG,CAACtC,UAAU,KAAK,GAAG;QAAA;QAAA,CAAA5C,cAAA,GAAAe,CAAA,WAAG,cAAc;QAAA;QAAA,CAAAf,cAAA,GAAAe,CAAA,WAAG,WAAW;QAAC;QAAAf,cAAA,GAAAE,CAAA;QAC/Ee,KAAK,GAAG,MAAM;MAChB,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAAe,CAAA;MAAA;IAAD;IAAC;IAAAf,cAAA,GAAAE,CAAA;IAED4E,OAAA,CAAAC,gBAAgB,CAAC/D,GAAG,CAACC,KAAK,EAAEqF,YAAY,EAAEnF,OAAO,CAAC;IAAC;IAAAnB,cAAA,GAAAE,CAAA;IACnDgG,WAAW,CAACK,IAAI,CAAC,IAAI,EAAEH,KAAK,EAAEC,QAAQ,CAAC;EACzC,CAAC;EAAC;EAAArG,cAAA,GAAAE,CAAA;EAEFiF,IAAI,EAAE;AACR,CAAC;AAAC;AAAAnF,cAAA,GAAAE,CAAA;AAxEW4E,OAAA,CAAAE,2BAA2B,GAAAA,2BAAA;AA0ExC;AACA,SAASiB,mBAAmBA,CAAChB,GAAY;EAAA;EAAAjF,cAAA,GAAAO,CAAA;EACvC,MAAMiG,UAAU;EAAA;EAAA,CAAAxG,cAAA,GAAAE,CAAA,QAAG;EACjB;EAAA,CAAAF,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,YAAY,CAAC;EAAA;EAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,EAAE;EAC/B;EAAA,CAAAf,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,iBAAiB,CAAC;EAAA;EAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,EAAE;EACpC;EAAA,CAAAf,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,iBAAiB,CAAC;EAAA;EAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,EAAE;EACpC;EAAA,CAAAf,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAAC3C,EAAE;EAAA;EAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAI,EAAE,EACb;EAED;EAAA;EAAAf,cAAA,GAAAE,CAAA;EACA,OAAOuG,MAAM,CAACC,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC,CAACnB,QAAQ,CAAC,QAAQ,CAAC,CAACoB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AAC9E;AAEA;AAAA;AAAA5G,cAAA,GAAAE,CAAA;AACO,MAAM2G,gBAAgB,GAAGA,CAC9BC,SAA4G,EAC5G7B,GAAY,EACZ8B,OAAA;AAAA;AAAA,CAAA/G,cAAA,GAAAe,CAAA,WAA+B,EAAE,MACzB;EAAA;EAAAf,cAAA,GAAAO,CAAA;EACR,MAAMW,OAAO;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAe;IAC1ByB,aAAa;IAAG;IAAA,CAAA3B,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,kBAAkB,CAAY;IAAA;IAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,SAAS;IACvEc,SAAS;IAAG;IAAA,CAAA7B,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,cAAc,CAAY;IAAA;IAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,SAAS;IAC/DiB,MAAM,EAAEiD,GAAG,CAACnD,IAAI,EAAEC,EAAE;IACpBG,QAAQ,EAAE+C,GAAG,CAACnD,IAAI,EAAEG,IAAI;IACxBK,EAAE;IAAE;IAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAAC3C,EAAE;IAAA;IAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAI,SAAS;IACvByB,SAAS;IAAE;IAAA,CAAAxC,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,YAAY,CAAC;IAAA;IAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,SAAS;IACjDqB,MAAM,EAAE6C,GAAG,CAAC7C,MAAM;IAClBC,GAAG,EAAE4C,GAAG,CAAC5C,GAAG;IACZZ,SAAS,EAAE,IAAIH,IAAI,EAAE,CAACC,WAAW,EAAE;IACnCuB,eAAe,EAAE;MACf+C,UAAU,EAAEZ,GAAG,CAACK,OAAO,CAACQ,aAAa;MAAA;MAAA,CAAA9F,cAAA,GAAAe,CAAA,WAAG,QAAQ;MAAA;MAAA,CAAAf,cAAA,GAAAe,CAAA,WAAG,MAAM;MACzDgF,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAEC,mBAAmB,CAAChB,GAAG;KACrC;IACDhC,QAAQ,EAAE;MACR6D,SAAS;MACT,GAAGC;;GAEN;EAAC;EAAA/G,cAAA,GAAAE,CAAA;EAEF4E,OAAA,CAAAC,gBAAgB,CAAC/D,GAAG,CAAC,MAAM,EAAEE,OAAO,EAAE,mBAAmB4F,SAAS,EAAE,CAAC;AACvE,CAAC;AAAC;AAAA9G,cAAA,GAAAE,CAAA;AA3BW4E,OAAA,CAAA+B,gBAAgB,GAAAA,gBAAA;AA6B7B;AAAA;AAAA7G,cAAA,GAAAE,CAAA;AACO,MAAM8G,4BAA4B,GAAGA,CAAC/B,GAAY,EAAEC,GAAa,EAAEC,IAAkB,KAAU;EAAA;EAAAnF,cAAA,GAAAO,CAAA;EACpG,MAAM6E,SAAS;EAAA;EAAA,CAAApF,cAAA,GAAAE,CAAA,QAAGgD,OAAO,CAAC+D,MAAM,CAACC,MAAM,EAAE;EACzC,MAAMC,WAAW;EAAA;EAAA,CAAAnH,cAAA,GAAAE,CAAA,QAAGgD,OAAO,CAACkE,WAAW,EAAE;EAAC;EAAApH,cAAA,GAAAE,CAAA;EAE1CgF,GAAG,CAACmC,EAAE,CAAC,QAAQ,EAAE,MAAK;IAAA;IAAArH,cAAA,GAAAO,CAAA;IACpB,MAAM+G,OAAO;IAAA;IAAA,CAAAtH,cAAA,GAAAE,CAAA,QAAGgD,OAAO,CAAC+D,MAAM,CAACC,MAAM,EAAE;IACvC,MAAMK,SAAS;IAAA;IAAA,CAAAvH,cAAA,GAAAE,CAAA,QAAGgD,OAAO,CAACkE,WAAW,EAAE;IACvC,MAAM1E,QAAQ;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAGsH,MAAM,CAACF,OAAO,GAAGlC,SAAS,CAAC,GAAG,OAAO,EAAC,CAAC;IAExD,MAAMqC,eAAe;IAAA;IAAA,CAAAzH,cAAA,GAAAE,CAAA,QAAG;MACtByB,aAAa,EAAEsD,GAAG,CAACK,OAAO,CAAC,kBAAkB,CAAC;MAC9CzD,SAAS,EAAEoD,GAAG,CAACK,OAAO,CAAC,cAAc,CAAC;MACtClD,MAAM,EAAE6C,GAAG,CAAC7C,MAAM;MAClBC,GAAG,EAAE4C,GAAG,CAAC5C,GAAG;MACZO,UAAU,EAAEsC,GAAG,CAACtC,UAAU;MAC1BF,QAAQ;MACRgF,MAAM,EAAE;QACNC,QAAQ,EAAEJ,SAAS,CAACI,QAAQ,GAAGR,WAAW,CAACQ,QAAQ;QACnDC,SAAS,EAAEL,SAAS,CAACK,SAAS,GAAGT,WAAW,CAACS,SAAS;QACtDC,QAAQ,EAAEN,SAAS,CAACM,QAAQ,GAAGV,WAAW,CAACU;;KAE9C;IAED;IAAA;IAAA7H,cAAA,GAAAE,CAAA;IACA,IAAIwC,QAAQ,GAAG,IAAI,EAAE;MAAA;MAAA1C,cAAA,GAAAe,CAAA;MAAE;MACrB,MAAMG,OAAO;MAAA;MAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAe;QAC1ByB,aAAa;QAAE;QAAA,CAAA3B,cAAA,GAAAe,CAAA,WAAA0G,eAAe,CAAC9F,aAAuB;QAAA;QAAA,CAAA3B,cAAA,GAAAe,CAAA,WAAI,SAAS;QACnEc,SAAS;QAAE;QAAA,CAAA7B,cAAA,GAAAe,CAAA,WAAA0G,eAAe,CAAC5F,SAAmB;QAAA;QAAA,CAAA7B,cAAA,GAAAe,CAAA,WAAI,SAAS;QAC3DuB,EAAE;QAAE;QAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAAC3C,EAAE;QAAA;QAAA,CAAAtC,cAAA,GAAAe,CAAA,WAAI,SAAS;QACvByB,SAAS;QAAE;QAAA,CAAAxC,cAAA,GAAAe,CAAA,WAAAkE,GAAG,CAACK,OAAO,CAAC,YAAY,CAAC;QAAA;QAAA,CAAAtF,cAAA,GAAAe,CAAA,WAAI,SAAS;QACjDqB,MAAM,EAAE6C,GAAG,CAAC7C,MAAM;QAClBC,GAAG,EAAE4C,GAAG,CAAC5C,GAAG;QACZZ,SAAS,EAAE,IAAIH,IAAI,EAAE,CAACC,WAAW,EAAE;QACnCmB,QAAQ;QACRE,UAAU,EAAEsC,GAAG,CAACtC,UAAU;QAC1BK,QAAQ,EAAEwE;OACX;MAAC;MAAAzH,cAAA,GAAAE,CAAA;MAEF4E,OAAA,CAAAC,gBAAgB,CAAC/D,GAAG,CAAC,MAAM,EAAEE,OAAO,EAAE,0BAA0BwB,QAAQ,IAAI,CAAC;IAC/E,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAe,CAAA;IAAA;EACH,CAAC,CAAC;EAAC;EAAAf,cAAA,GAAAE,CAAA;EAEHiF,IAAI,EAAE;AACR,CAAC;AAAC;AAAAnF,cAAA,GAAAE,CAAA;AA3CW4E,OAAA,CAAAkC,4BAA4B,GAAAA,4BAAA","ignoreList":[]}