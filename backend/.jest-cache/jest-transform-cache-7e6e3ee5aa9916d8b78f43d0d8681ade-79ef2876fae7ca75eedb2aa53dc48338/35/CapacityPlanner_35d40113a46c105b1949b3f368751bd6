c7b6a3fbcaae5eed2e27b983148af323
"use strict";

/* istanbul ignore next */
function cov_2lbv6ozqpd() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/CapacityPlanner.ts";
  var hash = "72d0dd4e949ddf2e0d1c35ffeb1dbf7dfc7d6f69";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/CapacityPlanner.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 59
        }
      },
      "2": {
        start: {
          line: 4,
          column: 30
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "6": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 40
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 83
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 79
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 80
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 64
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "15": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "16": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "17": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "19": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "20": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 19
        }
      },
      "21": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 33
        }
      },
      "22": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 82
        }
      },
      "23": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 23
        }
      },
      "24": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "25": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "26": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 72
        }
      },
      "27": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "28": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "29": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "30": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 34
        }
      },
      "31": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "32": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 51
        }
      },
      "33": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 43
        }
      },
      "34": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 51
        }
      },
      "35": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 64,
          column: 35
        }
      },
      "36": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "37": {
        start: {
          line: 66,
          column: 38
        },
        end: {
          line: 66,
          column: 40
        }
      },
      "38": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "39": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 74,
          column: 17
        }
      },
      "40": {
        start: {
          line: 69,
          column: 39
        },
        end: {
          line: 69,
          column: 117
        }
      },
      "41": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 55
        }
      },
      "42": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 112
        }
      },
      "43": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "44": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 59
        }
      },
      "45": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 25
        }
      },
      "46": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 34
        }
      },
      "47": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 87,
          column: 69
        }
      },
      "48": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "49": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "50": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "51": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "52": {
        start: {
          line: 93,
          column: 39
        },
        end: {
          line: 93,
          column: 91
        }
      },
      "53": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "54": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 57
        }
      },
      "55": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "56": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 81
        }
      },
      "57": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 31
        }
      },
      "58": {
        start: {
          line: 109,
          column: 31
        },
        end: {
          line: 109,
          column: 56
        }
      },
      "59": {
        start: {
          line: 110,
          column: 35
        },
        end: {
          line: 110,
          column: 59
        }
      },
      "60": {
        start: {
          line: 112,
          column: 22
        },
        end: {
          line: 112,
          column: 55
        }
      },
      "61": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "62": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 53
        }
      },
      "63": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 121,
          column: 10
        }
      },
      "64": {
        start: {
          line: 123,
          column: 30
        },
        end: {
          line: 123,
          column: 97
        }
      },
      "65": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "66": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "67": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 128,
          column: 124
        }
      },
      "68": {
        start: {
          line: 130,
          column: 28
        },
        end: {
          line: 130,
          column: 100
        }
      },
      "69": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 132,
          column: 99
        }
      },
      "70": {
        start: {
          line: 133,
          column: 31
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "71": {
        start: {
          line: 151,
          column: 50
        },
        end: {
          line: 156,
          column: 17
        }
      },
      "72": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 30
        }
      },
      "73": {
        start: {
          line: 172,
          column: 25
        },
        end: {
          line: 172,
          column: 74
        }
      },
      "74": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 173,
          column: 47
        }
      },
      "75": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 175,
          column: 26
        }
      },
      "76": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 26
        }
      },
      "77": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 177,
          column: 116
        }
      },
      "78": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 179,
          column: 87
        }
      },
      "79": {
        start: {
          line: 181,
          column: 26
        },
        end: {
          line: 181,
          column: 95
        }
      },
      "80": {
        start: {
          line: 183,
          column: 32
        },
        end: {
          line: 183,
          column: 132
        }
      },
      "81": {
        start: {
          line: 184,
          column: 23
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "82": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 41
        }
      },
      "83": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 22
        }
      },
      "84": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "85": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 62
        }
      },
      "86": {
        start: {
          line: 208,
          column: 26
        },
        end: {
          line: 208,
          column: 63
        }
      },
      "87": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "88": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 95
        }
      },
      "89": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 86
        }
      },
      "90": {
        start: {
          line: 214,
          column: 13
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "91": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 110
        }
      },
      "92": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "93": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 96
        }
      },
      "94": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 89
        }
      },
      "95": {
        start: {
          line: 222,
          column: 13
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "96": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 115
        }
      },
      "97": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "98": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 102
        }
      },
      "99": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "100": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 100
        }
      },
      "101": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "102": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 108
        }
      },
      "103": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "104": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 101
        }
      },
      "105": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "106": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 103
        }
      },
      "107": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "108": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 95
        }
      },
      "109": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "110": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 105
        }
      },
      "111": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 31
        }
      },
      "112": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "113": {
        start: {
          line: 256,
          column: 29
        },
        end: {
          line: 256,
          column: 44
        }
      },
      "114": {
        start: {
          line: 258,
          column: 34
        },
        end: {
          line: 258,
          column: 70
        }
      },
      "115": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 73
        }
      },
      "116": {
        start: {
          line: 266,
          column: 72
        },
        end: {
          line: 272,
          column: 10
        }
      },
      "117": {
        start: {
          line: 273,
          column: 32
        },
        end: {
          line: 273,
          column: 84
        }
      },
      "118": {
        start: {
          line: 273,
          column: 51
        },
        end: {
          line: 273,
          column: 76
        }
      },
      "119": {
        start: {
          line: 274,
          column: 35
        },
        end: {
          line: 275,
          column: 48
        }
      },
      "120": {
        start: {
          line: 274,
          column: 54
        },
        end: {
          line: 275,
          column: 40
        }
      },
      "121": {
        start: {
          line: 276,
          column: 42
        },
        end: {
          line: 276,
          column: 116
        }
      },
      "122": {
        start: {
          line: 276,
          column: 70
        },
        end: {
          line: 276,
          column: 108
        }
      },
      "123": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 289,
          column: 10
        }
      },
      "124": {
        start: {
          line: 293,
          column: 26
        },
        end: {
          line: 293,
          column: 65
        }
      },
      "125": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "126": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "127": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 57
        }
      },
      "128": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 100
        }
      },
      "129": {
        start: {
          line: 305,
          column: 35
        },
        end: {
          line: 305,
          column: 81
        }
      },
      "130": {
        start: {
          line: 307,
          column: 28
        },
        end: {
          line: 307,
          column: 73
        }
      },
      "131": {
        start: {
          line: 309,
          column: 28
        },
        end: {
          line: 309,
          column: 71
        }
      },
      "132": {
        start: {
          line: 311,
          column: 27
        },
        end: {
          line: 311,
          column: 63
        }
      },
      "133": {
        start: {
          line: 313,
          column: 26
        },
        end: {
          line: 313,
          column: 72
        }
      },
      "134": {
        start: {
          line: 314,
          column: 22
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "135": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 49
        }
      },
      "136": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "137": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "138": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "139": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 57
        }
      },
      "140": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 49
        }
      },
      "141": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 48
        }
      },
      "142": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 345,
          column: 15
        }
      },
      "143": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 68
        }
      },
      "144": {
        start: {
          line: 352,
          column: 22
        },
        end: {
          line: 352,
          column: 55
        }
      },
      "145": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 354,
          column: 19
        }
      },
      "146": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 19
        }
      },
      "147": {
        start: {
          line: 356,
          column: 34
        },
        end: {
          line: 356,
          column: 75
        }
      },
      "148": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 363,
          column: 11
        }
      },
      "149": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "150": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 77
        }
      },
      "151": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 372,
          column: 10
        }
      },
      "152": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 73
        }
      },
      "153": {
        start: {
          line: 377,
          column: 24
        },
        end: {
          line: 377,
          column: 62
        }
      },
      "154": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "155": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 380,
          column: 25
        }
      },
      "156": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 25
        }
      },
      "157": {
        start: {
          line: 381,
          column: 26
        },
        end: {
          line: 381,
          column: 59
        }
      },
      "158": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 383,
          column: 25
        }
      },
      "159": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 25
        }
      },
      "160": {
        start: {
          line: 384,
          column: 32
        },
        end: {
          line: 384,
          column: 64
        }
      },
      "161": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "162": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 160
        }
      },
      "163": {
        start: {
          line: 389,
          column: 17
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "164": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 158
        }
      },
      "165": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 106
        }
      },
      "166": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 396,
          column: 13
        }
      },
      "167": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 395,
          column: 194
        }
      },
      "168": {
        start: {
          line: 400,
          column: 24
        },
        end: {
          line: 400,
          column: 73
        }
      },
      "169": {
        start: {
          line: 402,
          column: 30
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "170": {
        start: {
          line: 403,
          column: 27
        },
        end: {
          line: 406,
          column: 69
        }
      },
      "171": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 409,
          column: 19
        }
      },
      "172": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 19
        }
      },
      "173": {
        start: {
          line: 410,
          column: 22
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "174": {
        start: {
          line: 423,
          column: 79
        },
        end: {
          line: 423,
          column: 85
        }
      },
      "175": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 40
        }
      },
      "176": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 58
        }
      },
      "177": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 435,
          column: 34
        }
      },
      "178": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 440,
          column: 9
        }
      },
      "179": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 78
        }
      },
      "180": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 63
        }
      },
      "181": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 72
        }
      },
      "182": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "183": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 76
        }
      },
      "184": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 66
        }
      },
      "185": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 63
        }
      },
      "186": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "187": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 89
        }
      },
      "188": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 31
        }
      },
      "189": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 461,
          column: 10
        }
      },
      "190": {
        start: {
          line: 464,
          column: 24
        },
        end: {
          line: 464,
          column: 26
        }
      },
      "191": {
        start: {
          line: 465,
          column: 21
        },
        end: {
          line: 465,
          column: 31
        }
      },
      "192": {
        start: {
          line: 466,
          column: 23
        },
        end: {
          line: 466,
          column: 28
        }
      },
      "193": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 467,
          column: 39
        }
      },
      "194": {
        start: {
          line: 469,
          column: 29
        },
        end: {
          line: 469,
          column: 80
        }
      },
      "195": {
        start: {
          line: 469,
          column: 62
        },
        end: {
          line: 469,
          column: 78
        }
      },
      "196": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "197": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 32
        }
      },
      "198": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 30
        }
      },
      "199": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 42
        }
      },
      "200": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 66
        }
      },
      "201": {
        start: {
          line: 476,
          column: 13
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "202": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 34
        }
      },
      "203": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 32
        }
      },
      "204": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 40
        }
      },
      "205": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 72
        }
      },
      "206": {
        start: {
          line: 482,
          column: 13
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "207": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 32
        }
      },
      "208": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 32
        }
      },
      "209": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 84
        }
      },
      "210": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 56
        }
      },
      "211": {
        start: {
          line: 490,
          column: 29
        },
        end: {
          line: 490,
          column: 80
        }
      },
      "212": {
        start: {
          line: 490,
          column: 62
        },
        end: {
          line: 490,
          column: 78
        }
      },
      "213": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "214": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 494,
          column: 61
        }
      },
      "215": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 497,
          column: 61
        }
      },
      "216": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 27
        }
      },
      "217": {
        start: {
          line: 504,
          column: 25
        },
        end: {
          line: 504,
          column: 91
        }
      },
      "218": {
        start: {
          line: 505,
          column: 19
        },
        end: {
          line: 505,
          column: 20
        }
      },
      "219": {
        start: {
          line: 506,
          column: 22
        },
        end: {
          line: 506,
          column: 24
        }
      },
      "220": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 520,
          column: 9
        }
      },
      "221": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 509,
          column: 38
        }
      },
      "222": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 65
        }
      },
      "223": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 22
        }
      },
      "224": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 513,
          column: 39
        }
      },
      "225": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 514,
          column: 54
        }
      },
      "226": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 22
        }
      },
      "227": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 38
        }
      },
      "228": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 72
        }
      },
      "229": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 22
        }
      },
      "230": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 521,
          column: 33
        }
      },
      "231": {
        start: {
          line: 524,
          column: 24
        },
        end: {
          line: 524,
          column: 26
        }
      },
      "232": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 525,
          column: 25
        }
      },
      "233": {
        start: {
          line: 526,
          column: 27
        },
        end: {
          line: 526,
          column: 74
        }
      },
      "234": {
        start: {
          line: 526,
          column: 60
        },
        end: {
          line: 526,
          column: 72
        }
      },
      "235": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 530,
          column: 9
        }
      },
      "236": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 54
        }
      },
      "237": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 529,
          column: 29
        }
      },
      "238": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 534,
          column: 9
        }
      },
      "239": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 532,
          column: 60
        }
      },
      "240": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 533,
          column: 59
        }
      },
      "241": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 537,
          column: 9
        }
      },
      "242": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 536,
          column: 56
        }
      },
      "243": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 538,
          column: 34
        }
      },
      "244": {
        start: {
          line: 541,
          column: 26
        },
        end: {
          line: 545,
          column: 9
        }
      },
      "245": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 573,
          column: 9
        }
      },
      "246": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 554,
          column: 18
        }
      },
      "247": {
        start: {
          line: 556,
          column: 16
        },
        end: {
          line: 562,
          column: 18
        }
      },
      "248": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 570,
          column: 18
        }
      },
      "249": {
        start: {
          line: 572,
          column: 16
        },
        end: {
          line: 572,
          column: 33
        }
      },
      "250": {
        start: {
          line: 576,
          column: 24
        },
        end: {
          line: 581,
          column: 9
        }
      },
      "251": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 46
        }
      },
      "252": {
        start: {
          line: 585,
          column: 8
        },
        end: {
          line: 591,
          column: 10
        }
      },
      "253": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 600,
          column: 10
        }
      },
      "254": {
        start: {
          line: 603,
          column: 50
        },
        end: {
          line: 603,
          column: 60
        }
      },
      "255": {
        start: {
          line: 604,
          column: 36
        },
        end: {
          line: 604,
          column: 74
        }
      },
      "256": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 606,
          column: 110
        }
      },
      "257": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 609,
          column: 58
        }
      },
      "258": {
        start: {
          line: 611,
          column: 48
        },
        end: {
          line: 611,
          column: 58
        }
      },
      "259": {
        start: {
          line: 612,
          column: 41
        },
        end: {
          line: 612,
          column: 52
        }
      },
      "260": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 54
        }
      },
      "261": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 622,
          column: 10
        }
      },
      "262": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 625,
          column: 99
        }
      },
      "263": {
        start: {
          line: 628,
          column: 28
        },
        end: {
          line: 628,
          column: 52
        }
      },
      "264": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 630,
          column: 26
        }
      },
      "265": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 630,
          column: 26
        }
      },
      "266": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 632,
          column: 26
        }
      },
      "267": {
        start: {
          line: 632,
          column: 12
        },
        end: {
          line: 632,
          column: 26
        }
      },
      "268": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 633,
          column: 22
        }
      },
      "269": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 641,
          column: 10
        }
      },
      "270": {
        start: {
          line: 644,
          column: 0
        },
        end: {
          line: 644,
          column: 42
        }
      },
      "271": {
        start: {
          line: 645,
          column: 0
        },
        end: {
          line: 645,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 46
          },
          end: {
            line: 36,
            column: 47
          }
        },
        loc: {
          start: {
            line: 36,
            column: 58
          },
          end: {
            line: 43,
            column: 9
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 135
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 43
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 52
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 151,
            column: 44
          },
          end: {
            line: 151,
            column: 45
          }
        },
        loc: {
          start: {
            line: 151,
            column: 50
          },
          end: {
            line: 156,
            column: 17
          }
        },
        line: 151
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 65
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 171
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 48
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 198
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 24
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 254
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 256,
            column: 21
          }
        },
        loc: {
          start: {
            line: 256,
            column: 29
          },
          end: {
            line: 256,
            column: 44
          }
        },
        line: 256
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 257,
            column: 19
          }
        },
        loc: {
          start: {
            line: 257,
            column: 28
          },
          end: {
            line: 260,
            column: 9
          }
        },
        line: 257
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 33
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 265
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 273,
            column: 46
          },
          end: {
            line: 273,
            column: 47
          }
        },
        loc: {
          start: {
            line: 273,
            column: 51
          },
          end: {
            line: 273,
            column: 76
          }
        },
        line: 273
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 274,
            column: 49
          },
          end: {
            line: 274,
            column: 50
          }
        },
        loc: {
          start: {
            line: 274,
            column: 54
          },
          end: {
            line: 275,
            column: 40
          }
        },
        line: 274
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 276,
            column: 65
          },
          end: {
            line: 276,
            column: 66
          }
        },
        loc: {
          start: {
            line: 276,
            column: 70
          },
          end: {
            line: 276,
            column: 108
          }
        },
        line: 276
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 37
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 292
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 40
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 303
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 36
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 330
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 40
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 351
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        loc: {
          start: {
            line: 376,
            column: 36
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 376
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 108
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 399
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 403,
            column: 18
          },
          end: {
            line: 403,
            column: 19
          }
        },
        loc: {
          start: {
            line: 403,
            column: 27
          },
          end: {
            line: 406,
            column: 69
          }
        },
        line: 403
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 423,
            column: 74
          },
          end: {
            line: 423,
            column: 75
          }
        },
        loc: {
          start: {
            line: 423,
            column: 79
          },
          end: {
            line: 423,
            column: 85
          }
        },
        line: 423
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 67
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 434
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 38
          },
          end: {
            line: 462,
            column: 5
          }
        },
        line: 453
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 463,
            column: 4
          },
          end: {
            line: 463,
            column: 5
          }
        },
        loc: {
          start: {
            line: 463,
            column: 67
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 463
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 469,
            column: 57
          },
          end: {
            line: 469,
            column: 58
          }
        },
        loc: {
          start: {
            line: 469,
            column: 62
          },
          end: {
            line: 469,
            column: 78
          }
        },
        line: 469
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 79
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 489
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 490,
            column: 57
          },
          end: {
            line: 490,
            column: 58
          }
        },
        loc: {
          start: {
            line: 490,
            column: 62
          },
          end: {
            line: 490,
            column: 78
          }
        },
        line: 490
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 502,
            column: 4
          },
          end: {
            line: 502,
            column: 5
          }
        },
        loc: {
          start: {
            line: 502,
            column: 58
          },
          end: {
            line: 522,
            column: 5
          }
        },
        line: 502
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 523,
            column: 4
          },
          end: {
            line: 523,
            column: 5
          }
        },
        loc: {
          start: {
            line: 523,
            column: 54
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 523
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 526,
            column: 55
          },
          end: {
            line: 526,
            column: 56
          }
        },
        loc: {
          start: {
            line: 526,
            column: 60
          },
          end: {
            line: 526,
            column: 72
          }
        },
        line: 526
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 50
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 540
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 575,
            column: 4
          },
          end: {
            line: 575,
            column: 5
          }
        },
        loc: {
          start: {
            line: 575,
            column: 49
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 575
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 584,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        },
        loc: {
          start: {
            line: 584,
            column: 43
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 584
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 39
          },
          end: {
            line: 601,
            column: 5
          }
        },
        line: 593
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 603,
            column: 5
          }
        },
        loc: {
          start: {
            line: 603,
            column: 48
          },
          end: {
            line: 603,
            column: 62
          }
        },
        line: 603
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 604,
            column: 4
          },
          end: {
            line: 604,
            column: 5
          }
        },
        loc: {
          start: {
            line: 604,
            column: 34
          },
          end: {
            line: 604,
            column: 76
          }
        },
        line: 604
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 605,
            column: 4
          },
          end: {
            line: 605,
            column: 5
          }
        },
        loc: {
          start: {
            line: 605,
            column: 45
          },
          end: {
            line: 607,
            column: 5
          }
        },
        line: 605
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 608,
            column: 4
          },
          end: {
            line: 608,
            column: 5
          }
        },
        loc: {
          start: {
            line: 608,
            column: 36
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 608
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 611,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        },
        loc: {
          start: {
            line: 611,
            column: 46
          },
          end: {
            line: 611,
            column: 60
          }
        },
        line: 611
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 612,
            column: 4
          },
          end: {
            line: 612,
            column: 5
          }
        },
        loc: {
          start: {
            line: 612,
            column: 39
          },
          end: {
            line: 612,
            column: 54
          }
        },
        line: 612
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 613,
            column: 5
          }
        },
        loc: {
          start: {
            line: 613,
            column: 41
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 613
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 616,
            column: 4
          },
          end: {
            line: 616,
            column: 5
          }
        },
        loc: {
          start: {
            line: 616,
            column: 35
          },
          end: {
            line: 616,
            column: 38
          }
        },
        line: 616
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 617,
            column: 4
          },
          end: {
            line: 617,
            column: 5
          }
        },
        loc: {
          start: {
            line: 617,
            column: 45
          },
          end: {
            line: 623,
            column: 5
          }
        },
        line: 617
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 624,
            column: 4
          },
          end: {
            line: 624,
            column: 5
          }
        },
        loc: {
          start: {
            line: 624,
            column: 76
          },
          end: {
            line: 626,
            column: 5
          }
        },
        line: 624
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 627,
            column: 4
          },
          end: {
            line: 627,
            column: 5
          }
        },
        loc: {
          start: {
            line: 627,
            column: 41
          },
          end: {
            line: 634,
            column: 5
          }
        },
        line: 627
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 635,
            column: 4
          },
          end: {
            line: 635,
            column: 5
          }
        },
        loc: {
          start: {
            line: 635,
            column: 30
          },
          end: {
            line: 642,
            column: 5
          }
        },
        line: 635
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 20
          },
          end: {
            line: 29,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 33
          },
          end: {
            line: 29,
            column: 39
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 52,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 52,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 35
          },
          end: {
            line: 63,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 47
          },
          end: {
            line: 63,
            column: 86
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 63,
            column: 88
          },
          end: {
            line: 63,
            column: 133
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 101
          },
          end: {
            line: 63,
            column: 133
          }
        }],
        line: 63
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 91,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 91,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 35
          },
          end: {
            line: 110,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 35
          },
          end: {
            line: 110,
            column: 54
          }
        }, {
          start: {
            line: 110,
            column: 58
          },
          end: {
            line: 110,
            column: 59
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 26
          },
          end: {
            line: 137,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 26
          },
          end: {
            line: 137,
            column: 39
          }
        }, {
          start: {
            line: 137,
            column: 43
          },
          end: {
            line: 137,
            column: 56
          }
        }, {
          start: {
            line: 137,
            column: 60
          },
          end: {
            line: 137,
            column: 63
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 44
          },
          end: {
            line: 171,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 171,
            column: 61
          },
          end: {
            line: 171,
            column: 63
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 175,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 175,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "15": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }],
        line: 210
      },
      "16": {
        loc: {
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "17": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 224,
            column: 9
          }
        }],
        line: 218
      },
      "18": {
        loc: {
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "19": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "20": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "21": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "22": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "23": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "24": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "25": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "26": {
        loc: {
          start: {
            line: 274,
            column: 54
          },
          end: {
            line: 275,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 54
          },
          end: {
            line: 274,
            column: 90
          }
        }, {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 40
          }
        }],
        line: 274
      },
      "27": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 354,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 354,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "28": {
        loc: {
          start: {
            line: 365,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "29": {
        loc: {
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 380,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 380,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "30": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 383,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 383,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "31": {
        loc: {
          start: {
            line: 384,
            column: 32
          },
          end: {
            line: 384,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 32
          },
          end: {
            line: 384,
            column: 59
          }
        }, {
          start: {
            line: 384,
            column: 63
          },
          end: {
            line: 384,
            column: 64
          }
        }],
        line: 384
      },
      "32": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: 389,
            column: 17
          },
          end: {
            line: 391,
            column: 13
          }
        }],
        line: 386
      },
      "33": {
        loc: {
          start: {
            line: 389,
            column: 17
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 17
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "34": {
        loc: {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 396,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 396,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "35": {
        loc: {
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 394,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 394,
            column: 47
          }
        }, {
          start: {
            line: 394,
            column: 51
          },
          end: {
            line: 394,
            column: 78
          }
        }],
        line: 394
      },
      "36": {
        loc: {
          start: {
            line: 403,
            column: 27
          },
          end: {
            line: 406,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 27
          },
          end: {
            line: 403,
            column: 54
          }
        }, {
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 41
          }
        }, {
          start: {
            line: 405,
            column: 12
          },
          end: {
            line: 405,
            column: 27
          }
        }, {
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 406,
            column: 69
          }
        }],
        line: 403
      },
      "37": {
        loc: {
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 409,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 409,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "38": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 440,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 440,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "39": {
        loc: {
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "40": {
        loc: {
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "41": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: 476,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        }],
        line: 470
      },
      "42": {
        loc: {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 470,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 470,
            column: 35
          }
        }, {
          start: {
            line: 470,
            column: 39
          },
          end: {
            line: 470,
            column: 56
          }
        }],
        line: 470
      },
      "43": {
        loc: {
          start: {
            line: 476,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: 482,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        }],
        line: 476
      },
      "44": {
        loc: {
          start: {
            line: 476,
            column: 17
          },
          end: {
            line: 476,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 476,
            column: 17
          },
          end: {
            line: 476,
            column: 40
          }
        }, {
          start: {
            line: 476,
            column: 44
          },
          end: {
            line: 476,
            column: 61
          }
        }],
        line: 476
      },
      "45": {
        loc: {
          start: {
            line: 482,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 13
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "46": {
        loc: {
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 492,
            column: 12
          },
          end: {
            line: 494,
            column: 61
          }
        }, {
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 497,
            column: 61
          }
        }, {
          start: {
            line: 498,
            column: 12
          },
          end: {
            line: 499,
            column: 27
          }
        }],
        line: 491
      },
      "47": {
        loc: {
          start: {
            line: 504,
            column: 25
          },
          end: {
            line: 504,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 504,
            column: 25
          },
          end: {
            line: 504,
            column: 85
          }
        }, {
          start: {
            line: 504,
            column: 89
          },
          end: {
            line: 504,
            column: 91
          }
        }],
        line: 504
      },
      "48": {
        loc: {
          start: {
            line: 507,
            column: 8
          },
          end: {
            line: 520,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 508,
            column: 12
          },
          end: {
            line: 511,
            column: 22
          }
        }, {
          start: {
            line: 512,
            column: 12
          },
          end: {
            line: 515,
            column: 22
          }
        }, {
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 519,
            column: 22
          }
        }],
        line: 507
      },
      "49": {
        loc: {
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 530,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 530,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "50": {
        loc: {
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 534,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 534,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      },
      "51": {
        loc: {
          start: {
            line: 533,
            column: 20
          },
          end: {
            line: 533,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 533,
            column: 41
          },
          end: {
            line: 533,
            column: 47
          }
        }, {
          start: {
            line: 533,
            column: 50
          },
          end: {
            line: 533,
            column: 58
          }
        }],
        line: 533
      },
      "52": {
        loc: {
          start: {
            line: 535,
            column: 8
          },
          end: {
            line: 537,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 535,
            column: 8
          },
          end: {
            line: 537,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 535
      },
      "53": {
        loc: {
          start: {
            line: 546,
            column: 8
          },
          end: {
            line: 573,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 547,
            column: 12
          },
          end: {
            line: 554,
            column: 18
          }
        }, {
          start: {
            line: 555,
            column: 12
          },
          end: {
            line: 562,
            column: 18
          }
        }, {
          start: {
            line: 563,
            column: 12
          },
          end: {
            line: 570,
            column: 18
          }
        }, {
          start: {
            line: 571,
            column: 12
          },
          end: {
            line: 572,
            column: 33
          }
        }],
        line: 546
      },
      "54": {
        loc: {
          start: {
            line: 582,
            column: 15
          },
          end: {
            line: 582,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 582,
            column: 15
          },
          end: {
            line: 582,
            column: 30
          }
        }, {
          start: {
            line: 582,
            column: 34
          },
          end: {
            line: 582,
            column: 45
          }
        }],
        line: 582
      },
      "55": {
        loc: {
          start: {
            line: 628,
            column: 28
          },
          end: {
            line: 628,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 628,
            column: 28
          },
          end: {
            line: 628,
            column: 47
          }
        }, {
          start: {
            line: 628,
            column: 51
          },
          end: {
            line: 628,
            column: 52
          }
        }],
        line: 628
      },
      "56": {
        loc: {
          start: {
            line: 629,
            column: 8
          },
          end: {
            line: 630,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 629,
            column: 8
          },
          end: {
            line: 630,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 629
      },
      "57": {
        loc: {
          start: {
            line: 631,
            column: 8
          },
          end: {
            line: 632,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 631,
            column: 8
          },
          end: {
            line: 632,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 631
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0, 0],
      "47": [0, 0],
      "48": [0, 0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0, 0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/CapacityPlanner.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/CapacityPlanner.ts"],
      sourcesContent: ["import { PredictiveAnalytics, CapacityPrediction } from './PredictiveAnalytics';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\nimport { EventStore } from './EventStore';\nimport { LRUCache } from 'lru-cache';\n\nexport interface CapacityModel {\n  id: string;\n  resource: string;\n  currentCapacity: number;\n  utilizationHistory: Array<{\n    timestamp: Date;\n    utilization: number;\n    peak: number;\n    average: number;\n  }>;\n  growthTrend: {\n    rate: number; // percentage per day\n    confidence: number;\n    seasonality: {\n      daily: number[];\n      weekly: number[];\n      monthly: number[];\n    };\n  };\n  thresholds: {\n    warning: number; // utilization percentage\n    critical: number;\n    maximum: number;\n  };\n  forecasts: Array<{\n    timeframe: string;\n    predictedUtilization: number;\n    confidence: number;\n    willExceedThreshold: boolean;\n    recommendedAction: string;\n  }>;\n}\n\nexport interface ScalingRecommendation {\n  id: string;\n  resource: string;\n  currentState: {\n    capacity: number;\n    utilization: number;\n    performance: string;\n  };\n  recommendation: {\n    action: 'scale_up' | 'scale_down' | 'maintain' | 'optimize';\n    targetCapacity: number;\n    timeframe: string;\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    estimatedCost: number;\n    expectedBenefit: string;\n  };\n  reasoning: {\n    factors: string[];\n    dataPoints: Array<{\n      metric: string;\n      current: number;\n      predicted: number;\n      threshold: number;\n    }>;\n    riskAssessment: {\n      level: 'low' | 'medium' | 'high';\n      factors: string[];\n    };\n  };\n  implementation: {\n    steps: string[];\n    estimatedTime: string;\n    rollbackPlan: string[];\n    monitoringPoints: string[];\n  };\n}\n\nexport interface CapacityAlert {\n  id: string;\n  timestamp: Date;\n  resource: string;\n  alertType: 'threshold_exceeded' | 'prediction_warning' | 'capacity_exhaustion' | 'optimization_opportunity';\n  severity: 'info' | 'warning' | 'critical';\n  current: {\n    utilization: number;\n    capacity: number;\n    performance: any;\n  };\n  prediction: {\n    timeToThreshold: Date | null;\n    peakUtilization: number;\n    confidence: number;\n  };\n  message: string;\n  recommendations: string[];\n  autoResolve: boolean;\n  resolved: boolean;\n}\n\nexport interface ResourceMetrics {\n  cpu: {\n    cores: number;\n    utilization: number;\n    peak24h: number;\n    average24h: number;\n    trend: number;\n  };\n  memory: {\n    total: number;\n    used: number;\n    utilization: number;\n    peak24h: number;\n    average24h: number;\n    trend: number;\n  };\n  storage: {\n    total: number;\n    used: number;\n    utilization: number;\n    iops: number;\n    throughput: number;\n    trend: number;\n  };\n  network: {\n    bandwidth: number;\n    utilization: number;\n    latency: number;\n    packetLoss: number;\n    trend: number;\n  };\n  application: {\n    concurrent_users: number;\n    requests_per_second: number;\n    queue_size: number;\n    response_time: number;\n    error_rate: number;\n  };\n}\n\nexport class CapacityPlanner {\n  private predictiveAnalytics: PredictiveAnalytics;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  private eventStore: EventStore;\n  private cache: LRUCache<string, any>;\n  private capacityModels: Map<string, CapacityModel>;\n  private alerts: Map<string, CapacityAlert>;\n  private recommendations: Map<string, ScalingRecommendation>;\n  private isMonitoring: boolean = false;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.predictiveAnalytics = new PredictiveAnalytics();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n    this.eventStore = EventStore.getInstance();\n    \n    this.cache = new LRUCache({\n      max: 100,\n      ttl: 1000 * 60 * 15 // 15 minutes cache\n    });\n\n    this.capacityModels = new Map();\n    this.alerts = new Map();\n    this.recommendations = new Map();\n\n    this.initializeCapacityModels();\n  }\n\n  /**\n   * Start capacity monitoring and planning\n   */\n  public startMonitoring(intervalMs: number = 300000): void { // 5 minutes default\n    if (this.isMonitoring) {\n      console.log('Capacity monitoring already running');\n      return;\n    }\n\n    this.isMonitoring = true;\n    console.log(`Starting capacity monitoring with ${intervalMs}ms interval`);\n\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.performCapacityAnalysis();\n      } catch (error) {\n        console.error('Error during capacity analysis:', error);\n      }\n    }, intervalMs);\n\n    // Perform initial analysis\n    this.performCapacityAnalysis();\n  }\n\n  /**\n   * Stop capacity monitoring\n   */\n  public stopMonitoring(): void {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    console.log('Capacity monitoring stopped');\n  }\n\n  /**\n   * Generate comprehensive capacity forecast\n   */\n  public async generateCapacityForecast(\n    resources: string[] = ['cpu', 'memory', 'storage', 'network'],\n    timeframes: string[] = ['1h', '6h', '24h', '7d', '30d']\n  ): Promise<Map<string, CapacityPrediction[]>> {\n    const forecasts = new Map<string, CapacityPrediction[]>();\n\n    for (const resource of resources) {\n      const resourceForecasts: CapacityPrediction[] = [];\n\n      for (const timeframe of timeframes) {\n        try {\n          const prediction = await this.predictiveAnalytics.predictCapacity(\n            `${resource}_usage`,\n            timeframe as any\n          );\n          resourceForecasts.push(prediction);\n        } catch (error) {\n          console.warn(`Failed to generate forecast for ${resource} at ${timeframe}:`, error.message);\n        }\n      }\n\n      if (resourceForecasts.length > 0) {\n        forecasts.set(resource, resourceForecasts);\n      }\n    }\n\n    return forecasts;\n  }\n\n  /**\n   * Generate scaling recommendations\n   */\n  public async generateScalingRecommendations(): Promise<ScalingRecommendation[]> {\n    const recommendations: ScalingRecommendation[] = [];\n    const currentMetrics = await this.getCurrentResourceMetrics();\n\n    // Analyze each resource type\n    for (const [resource, metrics] of Object.entries(currentMetrics)) {\n      if (resource === 'application') continue; // Skip application metrics for scaling\n\n      try {\n        const recommendation = await this.analyzeResourceScaling(resource, metrics);\n        if (recommendation) {\n          recommendations.push(recommendation);\n          this.recommendations.set(recommendation.id, recommendation);\n        }\n      } catch (error) {\n        console.error(`Error analyzing scaling for ${resource}:`, error);\n      }\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Analyze resource scaling needs\n   */\n  private async analyzeResourceScaling(\n    resource: string,\n    metrics: any\n  ): Promise<ScalingRecommendation | null> {\n    const utilizationKey = `${resource}_utilization`;\n    const currentUtilization = metrics.utilization || 0;\n    \n    // Get capacity model for this resource\n    const model = this.capacityModels.get(resource);\n    if (!model) {\n      await this.createCapacityModel(resource);\n    }\n\n    // Get predictions for different timeframes\n    const predictions = await Promise.all([\n      this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '6h'),\n      this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '24h'),\n      this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '7d')\n    ]);\n\n    // Determine scaling action\n    const scalingAction = this.determineScalingAction(currentUtilization, predictions, model);\n    \n    if (scalingAction.action === 'maintain') {\n      return null; // No scaling needed\n    }\n\n    // Calculate target capacity\n    const targetCapacity = this.calculateTargetCapacity(\n      resource,\n      currentUtilization,\n      predictions,\n      scalingAction.action\n    );\n\n    // Estimate cost and benefit\n    const costBenefit = this.estimateCostBenefit(resource, scalingAction.action, targetCapacity);\n\n    // Assess risks\n    const riskAssessment = this.assessScalingRisks(resource, scalingAction.action, predictions);\n\n    const recommendation: ScalingRecommendation = {\n      id: `scaling_${resource}_${Date.now()}`,\n      resource,\n      currentState: {\n        capacity: metrics.total || metrics.cores || 100,\n        utilization: currentUtilization,\n        performance: this.assessPerformance(resource, metrics)\n      },\n      recommendation: {\n        action: scalingAction.action,\n        targetCapacity,\n        timeframe: scalingAction.timeframe,\n        priority: scalingAction.priority,\n        estimatedCost: costBenefit.cost,\n        expectedBenefit: costBenefit.benefit\n      },\n      reasoning: {\n        factors: scalingAction.factors,\n        dataPoints: predictions.map(p => ({\n          metric: p.metric,\n          current: p.currentValue,\n          predicted: p.predictedValue,\n          threshold: p.threshold\n        })),\n        riskAssessment\n      },\n      implementation: {\n        steps: this.generateImplementationSteps(resource, scalingAction.action),\n        estimatedTime: this.estimateImplementationTime(resource, scalingAction.action),\n        rollbackPlan: this.generateRollbackPlan(resource, scalingAction.action),\n        monitoringPoints: this.generateMonitoringPoints(resource)\n      }\n    };\n\n    return recommendation;\n  }\n\n  /**\n   * Create growth projections with ML models\n   */\n  public async createGrowthProjections(\n    resource: string,\n    projectionDays: number = 30\n  ): Promise<{\n    current: number;\n    projected: number;\n    growthRate: number;\n    seasonality: {\n      daily: number[];\n      weekly: number[];\n    };\n    scenarios: {\n      optimistic: number;\n      realistic: number;\n      pessimistic: number;\n    };\n    recommendations: string[];\n  }> {\n    const cacheKey = `growth_projection_${resource}_${projectionDays}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached) return cached;\n\n    // Get growth projections from predictive analytics\n    const projections = await this.predictiveAnalytics.getGrowthProjections(\n      `${resource}_usage`,\n      projectionDays\n    );\n\n    // Analyze seasonality patterns\n    const seasonality = await this.analyzeSeasonality(resource, projectionDays * 2);\n\n    // Generate different scenarios\n    const scenarios = this.generateScenarios(projections.projected, projections.growthRate);\n\n    // Generate recommendations based on projections\n    const recommendations = this.generateGrowthRecommendations(\n      resource,\n      projections.current,\n      scenarios,\n      projections.growthRate\n    );\n\n    const result = {\n      current: projections.current,\n      projected: projections.projected,\n      growthRate: projections.growthRate,\n      seasonality,\n      scenarios,\n      recommendations\n    };\n\n    this.cache.set(cacheKey, result);\n    return result;\n  }\n\n  /**\n   * Generate capacity optimization recommendations\n   */\n  public async generateOptimizationRecommendations(): Promise<{\n    cpu: string[];\n    memory: string[];\n    storage: string[];\n    network: string[];\n    application: string[];\n    cost: string[];\n  }> {\n    const recommendations = {\n      cpu: [],\n      memory: [],\n      storage: [],\n      network: [],\n      application: [],\n      cost: []\n    };\n\n    const metrics = await this.getCurrentResourceMetrics();\n    const forecasts = await this.generateCapacityForecast();\n\n    // CPU optimization\n    if (metrics.cpu.utilization < 30) {\n      recommendations.cpu.push('CPU utilization is low - consider downsizing instances');\n      recommendations.cost.push('Potential cost savings from CPU optimization');\n    } else if (metrics.cpu.utilization > 80) {\n      recommendations.cpu.push('CPU utilization is high - consider scaling up or optimizing workloads');\n    }\n\n    // Memory optimization\n    if (metrics.memory.utilization < 40) {\n      recommendations.memory.push('Memory utilization is low - review memory allocation');\n      recommendations.cost.push('Potential cost savings from memory optimization');\n    } else if (metrics.memory.utilization > 85) {\n      recommendations.memory.push('Memory utilization is high - consider adding memory or optimizing usage');\n    }\n\n    // Storage optimization\n    if (metrics.storage.utilization > 80) {\n      recommendations.storage.push('Storage utilization is high - plan for capacity expansion');\n    }\n    if (metrics.storage.iops > 1000) {\n      recommendations.storage.push('High IOPS detected - consider faster storage or caching');\n    }\n\n    // Network optimization\n    if (metrics.network.latency > 100) {\n      recommendations.network.push('High network latency detected - investigate network bottlenecks');\n    }\n    if (metrics.network.utilization > 70) {\n      recommendations.network.push('Network utilization is high - consider bandwidth upgrade');\n    }\n\n    // Application optimization\n    if (metrics.application.response_time > 2000) {\n      recommendations.application.push('High response times - optimize application performance');\n    }\n    if (metrics.application.queue_size > 100) {\n      recommendations.application.push('Large queue size - consider horizontal scaling');\n    }\n    if (metrics.application.error_rate > 1) {\n      recommendations.application.push('High error rate - investigate and fix application issues');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get capacity alerts\n   */\n  public getCapacityAlerts(): CapacityAlert[] {\n    return Array.from(this.alerts.values())\n      .filter(alert => !alert.resolved)\n      .sort((a, b) => {\n        const severityOrder = { critical: 3, warning: 2, info: 1 };\n        return severityOrder[b.severity] - severityOrder[a.severity];\n      });\n  }\n\n  /**\n   * Get capacity dashboard data\n   */\n  public async getCapacityDashboard(): Promise<{\n    overview: {\n      totalResources: number;\n      resourcesAtRisk: number;\n      upcomingThresholds: number;\n      optimizationOpportunities: number;\n    };\n    resources: ResourceMetrics;\n    alerts: CapacityAlert[];\n    recommendations: ScalingRecommendation[];\n    forecasts: any;\n    trends: {\n      cpu: number[];\n      memory: number[];\n      storage: number[];\n      network: number[];\n    };\n  }> {\n    const [resources, alerts, recommendations, forecasts, trends] = await Promise.all([\n      this.getCurrentResourceMetrics(),\n      Promise.resolve(this.getCapacityAlerts()),\n      this.generateScalingRecommendations(),\n      this.generateCapacityForecast(),\n      this.getResourceTrends()\n    ]);\n\n    const resourcesAtRisk = alerts.filter(a => a.severity === 'critical').length;\n    const upcomingThresholds = alerts.filter(a => \n      a.alertType === 'prediction_warning' && \n      a.prediction.timeToThreshold\n    ).length;\n    const optimizationOpportunities = recommendations.filter(r => \n      r.recommendation.action === 'optimize'\n    ).length;\n\n    return {\n      overview: {\n        totalResources: Object.keys(resources).length - 1, // Exclude application\n        resourcesAtRisk,\n        upcomingThresholds,\n        optimizationOpportunities\n      },\n      resources,\n      alerts,\n      recommendations,\n      forecasts: Object.fromEntries(forecasts),\n      trends\n    };\n  }\n\n  // Private helper methods\n\n  private async initializeCapacityModels(): Promise<void> {\n    const resources = ['cpu', 'memory', 'storage', 'network'];\n    \n    for (const resource of resources) {\n      try {\n        await this.createCapacityModel(resource);\n      } catch (error) {\n        console.warn(`Failed to initialize capacity model for ${resource}:`, error.message);\n      }\n    }\n  }\n\n  private async createCapacityModel(resource: string): Promise<CapacityModel> {\n    // Get historical utilization data\n    const utilizationHistory = await this.getUtilizationHistory(resource, 30); // 30 days\n\n    // Calculate growth trend\n    const growthTrend = this.calculateGrowthTrend(utilizationHistory);\n\n    // Analyze seasonality\n    const seasonality = await this.analyzeSeasonality(resource, 30);\n\n    // Set thresholds based on resource type\n    const thresholds = this.getResourceThresholds(resource);\n\n    // Generate forecasts\n    const forecasts = await this.generateResourceForecasts(resource);\n\n    const model: CapacityModel = {\n      id: `capacity_${resource}_${Date.now()}`,\n      resource,\n      currentCapacity: await this.getCurrentCapacity(resource),\n      utilizationHistory,\n      growthTrend: {\n        rate: growthTrend.rate,\n        confidence: growthTrend.confidence,\n        seasonality\n      },\n      thresholds,\n      forecasts\n    };\n\n    this.capacityModels.set(resource, model);\n    return model;\n  }\n\n  private async performCapacityAnalysis(): Promise<void> {\n    try {\n      // Update capacity models\n      for (const resource of this.capacityModels.keys()) {\n        await this.updateCapacityModel(resource);\n      }\n\n      // Check for threshold violations\n      await this.checkCapacityThresholds();\n\n      // Generate alerts if needed\n      await this.generateCapacityAlerts();\n\n      // Update cache\n      this.cache.set('last_analysis', {\n        timestamp: new Date(),\n        models: this.capacityModels.size,\n        alerts: this.alerts.size\n      });\n\n    } catch (error) {\n      console.error('Error during capacity analysis:', error);\n    }\n  }\n\n  private async updateCapacityModel(resource: string): Promise<void> {\n    const model = this.capacityModels.get(resource);\n    if (!model) return;\n\n    // Get latest utilization data\n    const latestUtilization = await this.getLatestUtilization(resource);\n    \n    // Update utilization history\n    model.utilizationHistory.push({\n      timestamp: new Date(),\n      utilization: latestUtilization.current,\n      peak: latestUtilization.peak,\n      average: latestUtilization.average\n    });\n\n    // Keep only last 1000 data points\n    if (model.utilizationHistory.length > 1000) {\n      model.utilizationHistory = model.utilizationHistory.slice(-1000);\n    }\n\n    // Recalculate growth trend\n    model.growthTrend = {\n      ...model.growthTrend,\n      rate: this.calculateGrowthTrend(model.utilizationHistory).rate\n    };\n\n    // Update forecasts\n    model.forecasts = await this.generateResourceForecasts(resource);\n  }\n\n  private async checkCapacityThresholds(): Promise<void> {\n    const metrics = await this.getCurrentResourceMetrics();\n\n    for (const [resource, resourceMetrics] of Object.entries(metrics)) {\n      if (resource === 'application') continue;\n\n      const model = this.capacityModels.get(resource);\n      if (!model) continue;\n\n      const utilization = resourceMetrics.utilization || 0;\n\n      // Check immediate thresholds\n      if (utilization > model.thresholds.critical) {\n        this.createCapacityAlert(\n          resource,\n          'threshold_exceeded',\n          'critical',\n          `${resource} utilization exceeded critical threshold`,\n          utilization,\n          model\n        );\n      } else if (utilization > model.thresholds.warning) {\n        this.createCapacityAlert(\n          resource,\n          'threshold_exceeded',\n          'warning',\n          `${resource} utilization exceeded warning threshold`,\n          utilization,\n          model\n        );\n      }\n\n      // Check predictions\n      const predictions = await this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '24h');\n      \n      if (predictions.willExceedThreshold && predictions.timeToThreshold) {\n        this.createCapacityAlert(\n          resource,\n          'prediction_warning',\n          'warning',\n          `${resource} predicted to exceed threshold within 24 hours`,\n          utilization,\n          model,\n          predictions.timeToThreshold\n        );\n      }\n    }\n  }\n\n  private createCapacityAlert(\n    resource: string,\n    alertType: CapacityAlert['alertType'],\n    severity: CapacityAlert['severity'],\n    message: string,\n    currentUtilization: number,\n    model: CapacityModel,\n    timeToThreshold?: Date\n  ): void {\n    const alertId = `capacity_${resource}_${alertType}_${Date.now()}`;\n    \n    // Check if similar alert already exists\n    const existingAlert = Array.from(this.alerts.values())\n      .find(alert => \n        alert.resource === resource && \n        alert.alertType === alertType &&\n        !alert.resolved &&\n        (Date.now() - alert.timestamp.getTime()) < 30 * 60 * 1000 // 30 minutes\n      );\n\n    if (existingAlert) return; // Don't create duplicate alerts\n\n    const alert: CapacityAlert = {\n      id: alertId,\n      timestamp: new Date(),\n      resource,\n      alertType,\n      severity,\n      current: {\n        utilization: currentUtilization,\n        capacity: model.currentCapacity,\n        performance: {} // Would include performance metrics\n      },\n      prediction: {\n        timeToThreshold,\n        peakUtilization: Math.max(...model.utilizationHistory.map(h => h.peak)),\n        confidence: model.growthTrend.confidence\n      },\n      message,\n      recommendations: this.generateAlertRecommendations(resource, alertType, currentUtilization),\n      autoResolve: severity === 'info',\n      resolved: false\n    };\n\n    this.alerts.set(alertId, alert);\n    console.log(`Capacity alert created: ${message}`);\n  }\n\n  private generateAlertRecommendations(\n    resource: string,\n    alertType: string,\n    utilization: number\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (alertType === 'threshold_exceeded') {\n      recommendations.push(`Immediate action required for ${resource}`);\n      recommendations.push('Consider scaling resources');\n      recommendations.push('Investigate high utilization causes');\n    }\n\n    if (alertType === 'prediction_warning') {\n      recommendations.push(`Plan capacity expansion for ${resource}`);\n      recommendations.push('Monitor growth trends closely');\n      recommendations.push('Prepare scaling procedures');\n    }\n\n    if (utilization > 90) {\n      recommendations.push('Critical utilization - immediate scaling recommended');\n    }\n\n    return recommendations;\n  }\n\n  // Additional helper methods would be implemented here...\n  // (Simplified for space considerations)\n\n  private async getCurrentResourceMetrics(): Promise<ResourceMetrics> {\n    // Implementation to get current resource metrics\n    return {\n      cpu: { cores: 4, utilization: 65, peak24h: 80, average24h: 60, trend: 0.5 },\n      memory: { total: 16000, used: 10000, utilization: 62.5, peak24h: 75, average24h: 58, trend: 0.3 },\n      storage: { total: 1000000, used: 600000, utilization: 60, iops: 500, throughput: 100, trend: 0.8 },\n      network: { bandwidth: 1000, utilization: 40, latency: 50, packetLoss: 0.1, trend: 0.2 },\n      application: { concurrent_users: 150, requests_per_second: 45, queue_size: 12, response_time: 800, error_rate: 0.5 }\n    };\n  }\n\n  private determineScalingAction(\n    currentUtilization: number,\n    predictions: CapacityPrediction[],\n    model?: CapacityModel\n  ): {\n    action: ScalingRecommendation['recommendation']['action'];\n    timeframe: string;\n    priority: ScalingRecommendation['recommendation']['priority'];\n    factors: string[];\n  } {\n    const factors: string[] = [];\n    let action: ScalingRecommendation['recommendation']['action'] = 'maintain';\n    let priority: ScalingRecommendation['recommendation']['priority'] = 'low';\n    let timeframe = 'within 7 days';\n\n    // Determine action based on current utilization and predictions\n    const maxPredicted = Math.max(...predictions.map(p => p.predictedValue));\n    \n    if (currentUtilization > 85 || maxPredicted > 90) {\n      action = 'scale_up';\n      priority = 'high';\n      timeframe = 'within 24 hours';\n      factors.push('High current or predicted utilization');\n    } else if (currentUtilization < 20 && maxPredicted < 30) {\n      action = 'scale_down';\n      priority = 'medium';\n      timeframe = 'within 7 days';\n      factors.push('Low utilization indicates over-provisioning');\n    } else if (currentUtilization > 70) {\n      action = 'optimize';\n      priority = 'medium';\n      factors.push('Moderate utilization - optimization opportunities exist');\n    }\n\n    return { action, timeframe, priority, factors };\n  }\n\n  private calculateTargetCapacity(\n    resource: string,\n    currentUtilization: number,\n    predictions: CapacityPrediction[],\n    action: string\n  ): number {\n    const maxPredicted = Math.max(...predictions.map(p => p.predictedValue));\n    \n    switch (action) {\n      case 'scale_up':\n        // Target 70% utilization of new capacity\n        return Math.ceil((maxPredicted * 1.2) / 0.7);\n      case 'scale_down':\n        // Target 60% utilization of new capacity\n        return Math.ceil((maxPredicted * 1.1) / 0.6);\n      default:\n        return 100; // Maintain current\n    }\n  }\n\n  private estimateCostBenefit(\n    resource: string,\n    action: string,\n    targetCapacity: number\n  ): { cost: number; benefit: string } {\n    // Simplified cost estimation\n    const baseCost = { cpu: 100, memory: 50, storage: 20, network: 30 }[resource] || 50;\n    \n    let cost = 0;\n    let benefit = '';\n\n    switch (action) {\n      case 'scale_up':\n        cost = baseCost * 1.5;\n        benefit = 'Improved performance and reliability';\n        break;\n      case 'scale_down':\n        cost = -baseCost * 0.3; // Cost savings\n        benefit = 'Reduced operational costs';\n        break;\n      case 'optimize':\n        cost = baseCost * 0.1;\n        benefit = 'Better resource utilization without scaling';\n        break;\n    }\n\n    return { cost, benefit };\n  }\n\n  private assessScalingRisks(\n    resource: string,\n    action: string,\n    predictions: CapacityPrediction[]\n  ): { level: 'low' | 'medium' | 'high'; factors: string[] } {\n    const factors: string[] = [];\n    let level: 'low' | 'medium' | 'high' = 'low';\n\n    const confidence = Math.min(...predictions.map(p => p.confidence));\n    \n    if (confidence < 0.7) {\n      factors.push('Low prediction confidence');\n      level = 'medium';\n    }\n\n    if (action === 'scale_down') {\n      factors.push('Risk of performance degradation');\n      level = level === 'medium' ? 'high' : 'medium';\n    }\n\n    if (action === 'scale_up') {\n      factors.push('Increased operational costs');\n    }\n\n    return { level, factors };\n  }\n\n  private generateImplementationSteps(resource: string, action: string): string[] {\n    const baseSteps = [\n      'Create backup of current configuration',\n      'Plan maintenance window',\n      'Notify stakeholders'\n    ];\n\n    switch (action) {\n      case 'scale_up':\n        return [\n          ...baseSteps,\n          `Add additional ${resource} capacity`,\n          'Update load balancer configuration',\n          'Test new capacity',\n          'Monitor performance'\n        ];\n      case 'scale_down':\n        return [\n          ...baseSteps,\n          'Drain traffic from excess capacity',\n          `Remove unnecessary ${resource} resources`,\n          'Update monitoring thresholds',\n          'Verify performance maintained'\n        ];\n      case 'optimize':\n        return [\n          ...baseSteps,\n          `Analyze ${resource} usage patterns`,\n          'Implement optimization recommendations',\n          'Monitor performance improvements',\n          'Document optimizations'\n        ];\n      default:\n        return baseSteps;\n    }\n  }\n\n  private estimateImplementationTime(resource: string, action: string): string {\n    const timeMap = {\n      scale_up: '2-4 hours',\n      scale_down: '1-2 hours',\n      optimize: '4-8 hours',\n      maintain: '0 hours'\n    };\n    return timeMap[action] || '2-4 hours';\n  }\n\n  private generateRollbackPlan(resource: string, action: string): string[] {\n    return [\n      'Monitor key performance indicators',\n      'Identify performance degradation',\n      'Restore previous configuration',\n      'Verify system stability',\n      'Document rollback reasons'\n    ];\n  }\n\n  private generateMonitoringPoints(resource: string): string[] {\n    return [\n      `${resource} utilization`,\n      `${resource} performance metrics`,\n      'Application response times',\n      'Error rates',\n      'User experience metrics'\n    ];\n  }\n\n  // Additional helper methods (simplified implementations)\n  private async getUtilizationHistory(resource: string, days: number): Promise<any[]> { return []; }\n  private calculateGrowthTrend(history: any[]): { rate: number; confidence: number } { return { rate: 0.1, confidence: 0.8 }; }\n  private async analyzeSeasonality(resource: string, days: number): Promise<{ daily: number[]; weekly: number[]; monthly: number[] }> { \n    return { daily: new Array(24).fill(0), weekly: new Array(7).fill(0), monthly: new Array(12).fill(0) }; \n  }\n  private getResourceThresholds(resource: string): { warning: number; critical: number; maximum: number } {\n    return { warning: 70, critical: 85, maximum: 95 };\n  }\n  private async generateResourceForecasts(resource: string): Promise<any[]> { return []; }\n  private async getCurrentCapacity(resource: string): Promise<number> { return 100; }\n  private async getLatestUtilization(resource: string): Promise<{ current: number; peak: number; average: number }> {\n    return { current: 65, peak: 80, average: 60 };\n  }\n  private async generateCapacityAlerts(): Promise<void> {}\n  private generateScenarios(projected: number, growthRate: number): { optimistic: number; realistic: number; pessimistic: number } {\n    return {\n      optimistic: projected * 0.8,\n      realistic: projected,\n      pessimistic: projected * 1.3\n    };\n  }\n  private generateGrowthRecommendations(resource: string, current: number, scenarios: any, growthRate: number): string[] {\n    return ['Monitor growth trends', 'Plan for capacity expansion', 'Optimize resource usage'];\n  }\n  private assessPerformance(resource: string, metrics: any): string {\n    const utilization = metrics.utilization || 0;\n    if (utilization > 85) return 'poor';\n    if (utilization > 70) return 'fair';\n    return 'good';\n  }\n  private async getResourceTrends(): Promise<{ cpu: number[]; memory: number[]; storage: number[]; network: number[] }> {\n    return {\n      cpu: [60, 62, 65, 63, 68, 70, 65],\n      memory: [55, 58, 60, 62, 59, 61, 63],\n      storage: [50, 52, 55, 58, 60, 62, 60],\n      network: [35, 38, 40, 42, 39, 41, 40]\n    };\n  }\n}\n\nexport const capacityPlanner = new CapacityPlanner();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72d0dd4e949ddf2e0d1c35ffeb1dbf7dfc7d6f69"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2lbv6ozqpd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2lbv6ozqpd();
cov_2lbv6ozqpd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2lbv6ozqpd().s[1]++;
exports.capacityPlanner = exports.CapacityPlanner = void 0;
const PredictiveAnalytics_1 =
/* istanbul ignore next */
(cov_2lbv6ozqpd().s[2]++, require("./PredictiveAnalytics"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_2lbv6ozqpd().s[3]++, require("./AnalyticsEngine"));
const PerformanceMonitor_1 =
/* istanbul ignore next */
(cov_2lbv6ozqpd().s[4]++, require("../performance/PerformanceMonitor"));
const EventStore_1 =
/* istanbul ignore next */
(cov_2lbv6ozqpd().s[5]++, require("./EventStore"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_2lbv6ozqpd().s[6]++, require("lru-cache"));
class CapacityPlanner {
  constructor() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[0]++;
    cov_2lbv6ozqpd().s[7]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[8]++;
    this.monitoringInterval = null;
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[9]++;
    this.predictiveAnalytics = new PredictiveAnalytics_1.PredictiveAnalytics();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[10]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[11]++;
    this.performanceMonitor = new PerformanceMonitor_1.PerformanceMonitor();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[12]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[13]++;
    this.cache = new lru_cache_1.LRUCache({
      max: 100,
      ttl: 1000 * 60 * 15 // 15 minutes cache
    });
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[14]++;
    this.capacityModels = new Map();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[15]++;
    this.alerts = new Map();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[16]++;
    this.recommendations = new Map();
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[17]++;
    this.initializeCapacityModels();
  }
  /**
   * Start capacity monitoring and planning
   */
  startMonitoring(intervalMs =
  /* istanbul ignore next */
  (cov_2lbv6ozqpd().b[0][0]++, 300000)) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[1]++;
    cov_2lbv6ozqpd().s[18]++;
    if (this.isMonitoring) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[1][0]++;
      cov_2lbv6ozqpd().s[19]++;
      console.log('Capacity monitoring already running');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[20]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[1][1]++;
    }
    cov_2lbv6ozqpd().s[21]++;
    this.isMonitoring = true;
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[22]++;
    console.log(`Starting capacity monitoring with ${intervalMs}ms interval`);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[23]++;
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[2]++;
      cov_2lbv6ozqpd().s[24]++;
      try {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[25]++;
        await this.performCapacityAnalysis();
      } catch (error) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[26]++;
        console.error('Error during capacity analysis:', error);
      }
    }, intervalMs);
    // Perform initial analysis
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[27]++;
    this.performCapacityAnalysis();
  }
  /**
   * Stop capacity monitoring
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[3]++;
    cov_2lbv6ozqpd().s[28]++;
    if (!this.isMonitoring) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[2][0]++;
      cov_2lbv6ozqpd().s[29]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[2][1]++;
    }
    cov_2lbv6ozqpd().s[30]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[31]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[3][0]++;
      cov_2lbv6ozqpd().s[32]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[33]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[3][1]++;
    }
    cov_2lbv6ozqpd().s[34]++;
    console.log('Capacity monitoring stopped');
  }
  /**
   * Generate comprehensive capacity forecast
   */
  async generateCapacityForecast(resources =
  /* istanbul ignore next */
  (cov_2lbv6ozqpd().b[4][0]++, ['cpu', 'memory', 'storage', 'network']), timeframes =
  /* istanbul ignore next */
  (cov_2lbv6ozqpd().b[5][0]++, ['1h', '6h', '24h', '7d', '30d'])) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[4]++;
    const forecasts =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[35]++, new Map());
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[36]++;
    for (const resource of resources) {
      const resourceForecasts =
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().s[37]++, []);
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[38]++;
      for (const timeframe of timeframes) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[39]++;
        try {
          const prediction =
          /* istanbul ignore next */
          (cov_2lbv6ozqpd().s[40]++, await this.predictiveAnalytics.predictCapacity(`${resource}_usage`, timeframe));
          /* istanbul ignore next */
          cov_2lbv6ozqpd().s[41]++;
          resourceForecasts.push(prediction);
        } catch (error) {
          /* istanbul ignore next */
          cov_2lbv6ozqpd().s[42]++;
          console.warn(`Failed to generate forecast for ${resource} at ${timeframe}:`, error.message);
        }
      }
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[43]++;
      if (resourceForecasts.length > 0) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[6][0]++;
        cov_2lbv6ozqpd().s[44]++;
        forecasts.set(resource, resourceForecasts);
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[6][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[45]++;
    return forecasts;
  }
  /**
   * Generate scaling recommendations
   */
  async generateScalingRecommendations() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[5]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[46]++, []);
    const currentMetrics =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[47]++, await this.getCurrentResourceMetrics());
    // Analyze each resource type
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[48]++;
    for (const [resource, metrics] of Object.entries(currentMetrics)) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[49]++;
      if (resource === 'application') {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[7][0]++;
        cov_2lbv6ozqpd().s[50]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[7][1]++;
      } // Skip application metrics for scaling
      cov_2lbv6ozqpd().s[51]++;
      try {
        const recommendation =
        /* istanbul ignore next */
        (cov_2lbv6ozqpd().s[52]++, await this.analyzeResourceScaling(resource, metrics));
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[53]++;
        if (recommendation) {
          /* istanbul ignore next */
          cov_2lbv6ozqpd().b[8][0]++;
          cov_2lbv6ozqpd().s[54]++;
          recommendations.push(recommendation);
          /* istanbul ignore next */
          cov_2lbv6ozqpd().s[55]++;
          this.recommendations.set(recommendation.id, recommendation);
        } else
        /* istanbul ignore next */
        {
          cov_2lbv6ozqpd().b[8][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[56]++;
        console.error(`Error analyzing scaling for ${resource}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[57]++;
    return recommendations;
  }
  /**
   * Analyze resource scaling needs
   */
  async analyzeResourceScaling(resource, metrics) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[6]++;
    const utilizationKey =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[58]++, `${resource}_utilization`);
    const currentUtilization =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[59]++,
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[9][0]++, metrics.utilization) ||
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[9][1]++, 0));
    // Get capacity model for this resource
    const model =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[60]++, this.capacityModels.get(resource));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[61]++;
    if (!model) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[10][0]++;
      cov_2lbv6ozqpd().s[62]++;
      await this.createCapacityModel(resource);
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[10][1]++;
    }
    // Get predictions for different timeframes
    const predictions =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[63]++, await Promise.all([this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '6h'), this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '24h'), this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '7d')]));
    // Determine scaling action
    const scalingAction =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[64]++, this.determineScalingAction(currentUtilization, predictions, model));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[65]++;
    if (scalingAction.action === 'maintain') {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[11][0]++;
      cov_2lbv6ozqpd().s[66]++;
      return null; // No scaling needed
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[11][1]++;
    }
    // Calculate target capacity
    const targetCapacity =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[67]++, this.calculateTargetCapacity(resource, currentUtilization, predictions, scalingAction.action));
    // Estimate cost and benefit
    const costBenefit =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[68]++, this.estimateCostBenefit(resource, scalingAction.action, targetCapacity));
    // Assess risks
    const riskAssessment =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[69]++, this.assessScalingRisks(resource, scalingAction.action, predictions));
    const recommendation =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[70]++, {
      id: `scaling_${resource}_${Date.now()}`,
      resource,
      currentState: {
        capacity:
        /* istanbul ignore next */
        (cov_2lbv6ozqpd().b[12][0]++, metrics.total) ||
        /* istanbul ignore next */
        (cov_2lbv6ozqpd().b[12][1]++, metrics.cores) ||
        /* istanbul ignore next */
        (cov_2lbv6ozqpd().b[12][2]++, 100),
        utilization: currentUtilization,
        performance: this.assessPerformance(resource, metrics)
      },
      recommendation: {
        action: scalingAction.action,
        targetCapacity,
        timeframe: scalingAction.timeframe,
        priority: scalingAction.priority,
        estimatedCost: costBenefit.cost,
        expectedBenefit: costBenefit.benefit
      },
      reasoning: {
        factors: scalingAction.factors,
        dataPoints: predictions.map(p => {
          /* istanbul ignore next */
          cov_2lbv6ozqpd().f[7]++;
          cov_2lbv6ozqpd().s[71]++;
          return {
            metric: p.metric,
            current: p.currentValue,
            predicted: p.predictedValue,
            threshold: p.threshold
          };
        }),
        riskAssessment
      },
      implementation: {
        steps: this.generateImplementationSteps(resource, scalingAction.action),
        estimatedTime: this.estimateImplementationTime(resource, scalingAction.action),
        rollbackPlan: this.generateRollbackPlan(resource, scalingAction.action),
        monitoringPoints: this.generateMonitoringPoints(resource)
      }
    });
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[72]++;
    return recommendation;
  }
  /**
   * Create growth projections with ML models
   */
  async createGrowthProjections(resource, projectionDays =
  /* istanbul ignore next */
  (cov_2lbv6ozqpd().b[13][0]++, 30)) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[8]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[73]++, `growth_projection_${resource}_${projectionDays}`);
    const cached =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[74]++, this.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[75]++;
    if (cached) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[14][0]++;
      cov_2lbv6ozqpd().s[76]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[14][1]++;
    }
    // Get growth projections from predictive analytics
    const projections =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[77]++, await this.predictiveAnalytics.getGrowthProjections(`${resource}_usage`, projectionDays));
    // Analyze seasonality patterns
    const seasonality =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[78]++, await this.analyzeSeasonality(resource, projectionDays * 2));
    // Generate different scenarios
    const scenarios =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[79]++, this.generateScenarios(projections.projected, projections.growthRate));
    // Generate recommendations based on projections
    const recommendations =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[80]++, this.generateGrowthRecommendations(resource, projections.current, scenarios, projections.growthRate));
    const result =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[81]++, {
      current: projections.current,
      projected: projections.projected,
      growthRate: projections.growthRate,
      seasonality,
      scenarios,
      recommendations
    });
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[82]++;
    this.cache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[83]++;
    return result;
  }
  /**
   * Generate capacity optimization recommendations
   */
  async generateOptimizationRecommendations() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[9]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[84]++, {
      cpu: [],
      memory: [],
      storage: [],
      network: [],
      application: [],
      cost: []
    });
    const metrics =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[85]++, await this.getCurrentResourceMetrics());
    const forecasts =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[86]++, await this.generateCapacityForecast());
    // CPU optimization
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[87]++;
    if (metrics.cpu.utilization < 30) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[15][0]++;
      cov_2lbv6ozqpd().s[88]++;
      recommendations.cpu.push('CPU utilization is low - consider downsizing instances');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[89]++;
      recommendations.cost.push('Potential cost savings from CPU optimization');
    } else {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[15][1]++;
      cov_2lbv6ozqpd().s[90]++;
      if (metrics.cpu.utilization > 80) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[16][0]++;
        cov_2lbv6ozqpd().s[91]++;
        recommendations.cpu.push('CPU utilization is high - consider scaling up or optimizing workloads');
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[16][1]++;
      }
    }
    // Memory optimization
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[92]++;
    if (metrics.memory.utilization < 40) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[17][0]++;
      cov_2lbv6ozqpd().s[93]++;
      recommendations.memory.push('Memory utilization is low - review memory allocation');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[94]++;
      recommendations.cost.push('Potential cost savings from memory optimization');
    } else {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[17][1]++;
      cov_2lbv6ozqpd().s[95]++;
      if (metrics.memory.utilization > 85) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[18][0]++;
        cov_2lbv6ozqpd().s[96]++;
        recommendations.memory.push('Memory utilization is high - consider adding memory or optimizing usage');
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[18][1]++;
      }
    }
    // Storage optimization
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[97]++;
    if (metrics.storage.utilization > 80) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[19][0]++;
      cov_2lbv6ozqpd().s[98]++;
      recommendations.storage.push('Storage utilization is high - plan for capacity expansion');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[19][1]++;
    }
    cov_2lbv6ozqpd().s[99]++;
    if (metrics.storage.iops > 1000) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[20][0]++;
      cov_2lbv6ozqpd().s[100]++;
      recommendations.storage.push('High IOPS detected - consider faster storage or caching');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[20][1]++;
    }
    // Network optimization
    cov_2lbv6ozqpd().s[101]++;
    if (metrics.network.latency > 100) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[21][0]++;
      cov_2lbv6ozqpd().s[102]++;
      recommendations.network.push('High network latency detected - investigate network bottlenecks');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[21][1]++;
    }
    cov_2lbv6ozqpd().s[103]++;
    if (metrics.network.utilization > 70) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[22][0]++;
      cov_2lbv6ozqpd().s[104]++;
      recommendations.network.push('Network utilization is high - consider bandwidth upgrade');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[22][1]++;
    }
    // Application optimization
    cov_2lbv6ozqpd().s[105]++;
    if (metrics.application.response_time > 2000) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[23][0]++;
      cov_2lbv6ozqpd().s[106]++;
      recommendations.application.push('High response times - optimize application performance');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[23][1]++;
    }
    cov_2lbv6ozqpd().s[107]++;
    if (metrics.application.queue_size > 100) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[24][0]++;
      cov_2lbv6ozqpd().s[108]++;
      recommendations.application.push('Large queue size - consider horizontal scaling');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[24][1]++;
    }
    cov_2lbv6ozqpd().s[109]++;
    if (metrics.application.error_rate > 1) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[25][0]++;
      cov_2lbv6ozqpd().s[110]++;
      recommendations.application.push('High error rate - investigate and fix application issues');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[25][1]++;
    }
    cov_2lbv6ozqpd().s[111]++;
    return recommendations;
  }
  /**
   * Get capacity alerts
   */
  getCapacityAlerts() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[10]++;
    cov_2lbv6ozqpd().s[112]++;
    return Array.from(this.alerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[11]++;
      cov_2lbv6ozqpd().s[113]++;
      return !alert.resolved;
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[12]++;
      const severityOrder =
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().s[114]++, {
        critical: 3,
        warning: 2,
        info: 1
      });
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[115]++;
      return severityOrder[b.severity] - severityOrder[a.severity];
    });
  }
  /**
   * Get capacity dashboard data
   */
  async getCapacityDashboard() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[13]++;
    const [resources, alerts, recommendations, forecasts, trends] =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[116]++, await Promise.all([this.getCurrentResourceMetrics(), Promise.resolve(this.getCapacityAlerts()), this.generateScalingRecommendations(), this.generateCapacityForecast(), this.getResourceTrends()]));
    const resourcesAtRisk =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[117]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[14]++;
      cov_2lbv6ozqpd().s[118]++;
      return a.severity === 'critical';
    }).length);
    const upcomingThresholds =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[119]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[15]++;
      cov_2lbv6ozqpd().s[120]++;
      return /* istanbul ignore next */(cov_2lbv6ozqpd().b[26][0]++, a.alertType === 'prediction_warning') &&
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[26][1]++, a.prediction.timeToThreshold);
    }).length);
    const optimizationOpportunities =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[121]++, recommendations.filter(r => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[16]++;
      cov_2lbv6ozqpd().s[122]++;
      return r.recommendation.action === 'optimize';
    }).length);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[123]++;
    return {
      overview: {
        totalResources: Object.keys(resources).length - 1,
        // Exclude application
        resourcesAtRisk,
        upcomingThresholds,
        optimizationOpportunities
      },
      resources,
      alerts,
      recommendations,
      forecasts: Object.fromEntries(forecasts),
      trends
    };
  }
  // Private helper methods
  async initializeCapacityModels() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[17]++;
    const resources =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[124]++, ['cpu', 'memory', 'storage', 'network']);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[125]++;
    for (const resource of resources) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[126]++;
      try {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[127]++;
        await this.createCapacityModel(resource);
      } catch (error) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[128]++;
        console.warn(`Failed to initialize capacity model for ${resource}:`, error.message);
      }
    }
  }
  async createCapacityModel(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[18]++;
    // Get historical utilization data
    const utilizationHistory =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[129]++, await this.getUtilizationHistory(resource, 30)); // 30 days
    // Calculate growth trend
    const growthTrend =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[130]++, this.calculateGrowthTrend(utilizationHistory));
    // Analyze seasonality
    const seasonality =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[131]++, await this.analyzeSeasonality(resource, 30));
    // Set thresholds based on resource type
    const thresholds =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[132]++, this.getResourceThresholds(resource));
    // Generate forecasts
    const forecasts =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[133]++, await this.generateResourceForecasts(resource));
    const model =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[134]++, {
      id: `capacity_${resource}_${Date.now()}`,
      resource,
      currentCapacity: await this.getCurrentCapacity(resource),
      utilizationHistory,
      growthTrend: {
        rate: growthTrend.rate,
        confidence: growthTrend.confidence,
        seasonality
      },
      thresholds,
      forecasts
    });
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[135]++;
    this.capacityModels.set(resource, model);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[136]++;
    return model;
  }
  async performCapacityAnalysis() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[19]++;
    cov_2lbv6ozqpd().s[137]++;
    try {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[138]++;
      // Update capacity models
      for (const resource of this.capacityModels.keys()) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[139]++;
        await this.updateCapacityModel(resource);
      }
      // Check for threshold violations
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[140]++;
      await this.checkCapacityThresholds();
      // Generate alerts if needed
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[141]++;
      await this.generateCapacityAlerts();
      // Update cache
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[142]++;
      this.cache.set('last_analysis', {
        timestamp: new Date(),
        models: this.capacityModels.size,
        alerts: this.alerts.size
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[143]++;
      console.error('Error during capacity analysis:', error);
    }
  }
  async updateCapacityModel(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[20]++;
    const model =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[144]++, this.capacityModels.get(resource));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[145]++;
    if (!model) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[27][0]++;
      cov_2lbv6ozqpd().s[146]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[27][1]++;
    }
    // Get latest utilization data
    const latestUtilization =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[147]++, await this.getLatestUtilization(resource));
    // Update utilization history
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[148]++;
    model.utilizationHistory.push({
      timestamp: new Date(),
      utilization: latestUtilization.current,
      peak: latestUtilization.peak,
      average: latestUtilization.average
    });
    // Keep only last 1000 data points
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[149]++;
    if (model.utilizationHistory.length > 1000) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[28][0]++;
      cov_2lbv6ozqpd().s[150]++;
      model.utilizationHistory = model.utilizationHistory.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[28][1]++;
    }
    // Recalculate growth trend
    cov_2lbv6ozqpd().s[151]++;
    model.growthTrend = {
      ...model.growthTrend,
      rate: this.calculateGrowthTrend(model.utilizationHistory).rate
    };
    // Update forecasts
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[152]++;
    model.forecasts = await this.generateResourceForecasts(resource);
  }
  async checkCapacityThresholds() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[21]++;
    const metrics =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[153]++, await this.getCurrentResourceMetrics());
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[154]++;
    for (const [resource, resourceMetrics] of Object.entries(metrics)) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[155]++;
      if (resource === 'application') {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[29][0]++;
        cov_2lbv6ozqpd().s[156]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[29][1]++;
      }
      const model =
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().s[157]++, this.capacityModels.get(resource));
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[158]++;
      if (!model) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[30][0]++;
        cov_2lbv6ozqpd().s[159]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[30][1]++;
      }
      const utilization =
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().s[160]++,
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[31][0]++, resourceMetrics.utilization) ||
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[31][1]++, 0));
      // Check immediate thresholds
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[161]++;
      if (utilization > model.thresholds.critical) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[32][0]++;
        cov_2lbv6ozqpd().s[162]++;
        this.createCapacityAlert(resource, 'threshold_exceeded', 'critical', `${resource} utilization exceeded critical threshold`, utilization, model);
      } else {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[32][1]++;
        cov_2lbv6ozqpd().s[163]++;
        if (utilization > model.thresholds.warning) {
          /* istanbul ignore next */
          cov_2lbv6ozqpd().b[33][0]++;
          cov_2lbv6ozqpd().s[164]++;
          this.createCapacityAlert(resource, 'threshold_exceeded', 'warning', `${resource} utilization exceeded warning threshold`, utilization, model);
        } else
        /* istanbul ignore next */
        {
          cov_2lbv6ozqpd().b[33][1]++;
        }
      }
      // Check predictions
      const predictions =
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().s[165]++, await this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '24h'));
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[166]++;
      if (
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[35][0]++, predictions.willExceedThreshold) &&
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[35][1]++, predictions.timeToThreshold)) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[34][0]++;
        cov_2lbv6ozqpd().s[167]++;
        this.createCapacityAlert(resource, 'prediction_warning', 'warning', `${resource} predicted to exceed threshold within 24 hours`, utilization, model, predictions.timeToThreshold);
      } else
      /* istanbul ignore next */
      {
        cov_2lbv6ozqpd().b[34][1]++;
      }
    }
  }
  createCapacityAlert(resource, alertType, severity, message, currentUtilization, model, timeToThreshold) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[22]++;
    const alertId =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[168]++, `capacity_${resource}_${alertType}_${Date.now()}`);
    // Check if similar alert already exists
    const existingAlert =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[169]++, Array.from(this.alerts.values()).find(alert => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[23]++;
      cov_2lbv6ozqpd().s[170]++;
      return /* istanbul ignore next */(cov_2lbv6ozqpd().b[36][0]++, alert.resource === resource) &&
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[36][1]++, alert.alertType === alertType) &&
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[36][2]++, !alert.resolved) &&
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[36][3]++, Date.now() - alert.timestamp.getTime() < 30 * 60 * 1000);
    } // 30 minutes
    ));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[171]++;
    if (existingAlert) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[37][0]++;
      cov_2lbv6ozqpd().s[172]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[37][1]++;
    } // Don't create duplicate alerts
    const alert =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[173]++, {
      id: alertId,
      timestamp: new Date(),
      resource,
      alertType,
      severity,
      current: {
        utilization: currentUtilization,
        capacity: model.currentCapacity,
        performance: {} // Would include performance metrics
      },
      prediction: {
        timeToThreshold,
        peakUtilization: Math.max(...model.utilizationHistory.map(h => {
          /* istanbul ignore next */
          cov_2lbv6ozqpd().f[24]++;
          cov_2lbv6ozqpd().s[174]++;
          return h.peak;
        })),
        confidence: model.growthTrend.confidence
      },
      message,
      recommendations: this.generateAlertRecommendations(resource, alertType, currentUtilization),
      autoResolve: severity === 'info',
      resolved: false
    });
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[175]++;
    this.alerts.set(alertId, alert);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[176]++;
    console.log(`Capacity alert created: ${message}`);
  }
  generateAlertRecommendations(resource, alertType, utilization) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[25]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[177]++, []);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[178]++;
    if (alertType === 'threshold_exceeded') {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[38][0]++;
      cov_2lbv6ozqpd().s[179]++;
      recommendations.push(`Immediate action required for ${resource}`);
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[180]++;
      recommendations.push('Consider scaling resources');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[181]++;
      recommendations.push('Investigate high utilization causes');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[38][1]++;
    }
    cov_2lbv6ozqpd().s[182]++;
    if (alertType === 'prediction_warning') {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[39][0]++;
      cov_2lbv6ozqpd().s[183]++;
      recommendations.push(`Plan capacity expansion for ${resource}`);
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[184]++;
      recommendations.push('Monitor growth trends closely');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[185]++;
      recommendations.push('Prepare scaling procedures');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[39][1]++;
    }
    cov_2lbv6ozqpd().s[186]++;
    if (utilization > 90) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[40][0]++;
      cov_2lbv6ozqpd().s[187]++;
      recommendations.push('Critical utilization - immediate scaling recommended');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[40][1]++;
    }
    cov_2lbv6ozqpd().s[188]++;
    return recommendations;
  }
  // Additional helper methods would be implemented here...
  // (Simplified for space considerations)
  async getCurrentResourceMetrics() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[26]++;
    cov_2lbv6ozqpd().s[189]++;
    // Implementation to get current resource metrics
    return {
      cpu: {
        cores: 4,
        utilization: 65,
        peak24h: 80,
        average24h: 60,
        trend: 0.5
      },
      memory: {
        total: 16000,
        used: 10000,
        utilization: 62.5,
        peak24h: 75,
        average24h: 58,
        trend: 0.3
      },
      storage: {
        total: 1000000,
        used: 600000,
        utilization: 60,
        iops: 500,
        throughput: 100,
        trend: 0.8
      },
      network: {
        bandwidth: 1000,
        utilization: 40,
        latency: 50,
        packetLoss: 0.1,
        trend: 0.2
      },
      application: {
        concurrent_users: 150,
        requests_per_second: 45,
        queue_size: 12,
        response_time: 800,
        error_rate: 0.5
      }
    };
  }
  determineScalingAction(currentUtilization, predictions, model) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[27]++;
    const factors =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[190]++, []);
    let action =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[191]++, 'maintain');
    let priority =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[192]++, 'low');
    let timeframe =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[193]++, 'within 7 days');
    // Determine action based on current utilization and predictions
    const maxPredicted =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[194]++, Math.max(...predictions.map(p => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[28]++;
      cov_2lbv6ozqpd().s[195]++;
      return p.predictedValue;
    })));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[196]++;
    if (
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[42][0]++, currentUtilization > 85) ||
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[42][1]++, maxPredicted > 90)) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[41][0]++;
      cov_2lbv6ozqpd().s[197]++;
      action = 'scale_up';
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[198]++;
      priority = 'high';
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[199]++;
      timeframe = 'within 24 hours';
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[200]++;
      factors.push('High current or predicted utilization');
    } else {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[41][1]++;
      cov_2lbv6ozqpd().s[201]++;
      if (
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[44][0]++, currentUtilization < 20) &&
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[44][1]++, maxPredicted < 30)) {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[43][0]++;
        cov_2lbv6ozqpd().s[202]++;
        action = 'scale_down';
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[203]++;
        priority = 'medium';
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[204]++;
        timeframe = 'within 7 days';
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[205]++;
        factors.push('Low utilization indicates over-provisioning');
      } else {
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[43][1]++;
        cov_2lbv6ozqpd().s[206]++;
        if (currentUtilization > 70) {
          /* istanbul ignore next */
          cov_2lbv6ozqpd().b[45][0]++;
          cov_2lbv6ozqpd().s[207]++;
          action = 'optimize';
          /* istanbul ignore next */
          cov_2lbv6ozqpd().s[208]++;
          priority = 'medium';
          /* istanbul ignore next */
          cov_2lbv6ozqpd().s[209]++;
          factors.push('Moderate utilization - optimization opportunities exist');
        } else
        /* istanbul ignore next */
        {
          cov_2lbv6ozqpd().b[45][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[210]++;
    return {
      action,
      timeframe,
      priority,
      factors
    };
  }
  calculateTargetCapacity(resource, currentUtilization, predictions, action) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[29]++;
    const maxPredicted =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[211]++, Math.max(...predictions.map(p => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[30]++;
      cov_2lbv6ozqpd().s[212]++;
      return p.predictedValue;
    })));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[213]++;
    switch (action) {
      case 'scale_up':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[46][0]++;
        cov_2lbv6ozqpd().s[214]++;
        // Target 70% utilization of new capacity
        return Math.ceil(maxPredicted * 1.2 / 0.7);
      case 'scale_down':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[46][1]++;
        cov_2lbv6ozqpd().s[215]++;
        // Target 60% utilization of new capacity
        return Math.ceil(maxPredicted * 1.1 / 0.6);
      default:
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[46][2]++;
        cov_2lbv6ozqpd().s[216]++;
        return 100;
      // Maintain current
    }
  }
  estimateCostBenefit(resource, action, targetCapacity) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[31]++;
    // Simplified cost estimation
    const baseCost =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[217]++,
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[47][0]++, {
      cpu: 100,
      memory: 50,
      storage: 20,
      network: 30
    }[resource]) ||
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[47][1]++, 50));
    let cost =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[218]++, 0);
    let benefit =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[219]++, '');
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[220]++;
    switch (action) {
      case 'scale_up':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[48][0]++;
        cov_2lbv6ozqpd().s[221]++;
        cost = baseCost * 1.5;
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[222]++;
        benefit = 'Improved performance and reliability';
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[223]++;
        break;
      case 'scale_down':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[48][1]++;
        cov_2lbv6ozqpd().s[224]++;
        cost = -baseCost * 0.3; // Cost savings
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[225]++;
        benefit = 'Reduced operational costs';
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[226]++;
        break;
      case 'optimize':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[48][2]++;
        cov_2lbv6ozqpd().s[227]++;
        cost = baseCost * 0.1;
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[228]++;
        benefit = 'Better resource utilization without scaling';
        /* istanbul ignore next */
        cov_2lbv6ozqpd().s[229]++;
        break;
    }
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[230]++;
    return {
      cost,
      benefit
    };
  }
  assessScalingRisks(resource, action, predictions) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[32]++;
    const factors =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[231]++, []);
    let level =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[232]++, 'low');
    const confidence =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[233]++, Math.min(...predictions.map(p => {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().f[33]++;
      cov_2lbv6ozqpd().s[234]++;
      return p.confidence;
    })));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[235]++;
    if (confidence < 0.7) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[49][0]++;
      cov_2lbv6ozqpd().s[236]++;
      factors.push('Low prediction confidence');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[237]++;
      level = 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[49][1]++;
    }
    cov_2lbv6ozqpd().s[238]++;
    if (action === 'scale_down') {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[50][0]++;
      cov_2lbv6ozqpd().s[239]++;
      factors.push('Risk of performance degradation');
      /* istanbul ignore next */
      cov_2lbv6ozqpd().s[240]++;
      level = level === 'medium' ?
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[51][0]++, 'high') :
      /* istanbul ignore next */
      (cov_2lbv6ozqpd().b[51][1]++, 'medium');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[50][1]++;
    }
    cov_2lbv6ozqpd().s[241]++;
    if (action === 'scale_up') {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[52][0]++;
      cov_2lbv6ozqpd().s[242]++;
      factors.push('Increased operational costs');
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[52][1]++;
    }
    cov_2lbv6ozqpd().s[243]++;
    return {
      level,
      factors
    };
  }
  generateImplementationSteps(resource, action) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[34]++;
    const baseSteps =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[244]++, ['Create backup of current configuration', 'Plan maintenance window', 'Notify stakeholders']);
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[245]++;
    switch (action) {
      case 'scale_up':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[53][0]++;
        cov_2lbv6ozqpd().s[246]++;
        return [...baseSteps, `Add additional ${resource} capacity`, 'Update load balancer configuration', 'Test new capacity', 'Monitor performance'];
      case 'scale_down':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[53][1]++;
        cov_2lbv6ozqpd().s[247]++;
        return [...baseSteps, 'Drain traffic from excess capacity', `Remove unnecessary ${resource} resources`, 'Update monitoring thresholds', 'Verify performance maintained'];
      case 'optimize':
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[53][2]++;
        cov_2lbv6ozqpd().s[248]++;
        return [...baseSteps, `Analyze ${resource} usage patterns`, 'Implement optimization recommendations', 'Monitor performance improvements', 'Document optimizations'];
      default:
        /* istanbul ignore next */
        cov_2lbv6ozqpd().b[53][3]++;
        cov_2lbv6ozqpd().s[249]++;
        return baseSteps;
    }
  }
  estimateImplementationTime(resource, action) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[35]++;
    const timeMap =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[250]++, {
      scale_up: '2-4 hours',
      scale_down: '1-2 hours',
      optimize: '4-8 hours',
      maintain: '0 hours'
    });
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[251]++;
    return /* istanbul ignore next */(cov_2lbv6ozqpd().b[54][0]++, timeMap[action]) ||
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[54][1]++, '2-4 hours');
  }
  generateRollbackPlan(resource, action) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[36]++;
    cov_2lbv6ozqpd().s[252]++;
    return ['Monitor key performance indicators', 'Identify performance degradation', 'Restore previous configuration', 'Verify system stability', 'Document rollback reasons'];
  }
  generateMonitoringPoints(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[37]++;
    cov_2lbv6ozqpd().s[253]++;
    return [`${resource} utilization`, `${resource} performance metrics`, 'Application response times', 'Error rates', 'User experience metrics'];
  }
  // Additional helper methods (simplified implementations)
  async getUtilizationHistory(resource, days) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[38]++;
    cov_2lbv6ozqpd().s[254]++;
    return [];
  }
  calculateGrowthTrend(history) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[39]++;
    cov_2lbv6ozqpd().s[255]++;
    return {
      rate: 0.1,
      confidence: 0.8
    };
  }
  async analyzeSeasonality(resource, days) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[40]++;
    cov_2lbv6ozqpd().s[256]++;
    return {
      daily: new Array(24).fill(0),
      weekly: new Array(7).fill(0),
      monthly: new Array(12).fill(0)
    };
  }
  getResourceThresholds(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[41]++;
    cov_2lbv6ozqpd().s[257]++;
    return {
      warning: 70,
      critical: 85,
      maximum: 95
    };
  }
  async generateResourceForecasts(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[42]++;
    cov_2lbv6ozqpd().s[258]++;
    return [];
  }
  async getCurrentCapacity(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[43]++;
    cov_2lbv6ozqpd().s[259]++;
    return 100;
  }
  async getLatestUtilization(resource) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[44]++;
    cov_2lbv6ozqpd().s[260]++;
    return {
      current: 65,
      peak: 80,
      average: 60
    };
  }
  async generateCapacityAlerts() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[45]++;
  }
  generateScenarios(projected, growthRate) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[46]++;
    cov_2lbv6ozqpd().s[261]++;
    return {
      optimistic: projected * 0.8,
      realistic: projected,
      pessimistic: projected * 1.3
    };
  }
  generateGrowthRecommendations(resource, current, scenarios, growthRate) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[47]++;
    cov_2lbv6ozqpd().s[262]++;
    return ['Monitor growth trends', 'Plan for capacity expansion', 'Optimize resource usage'];
  }
  assessPerformance(resource, metrics) {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[48]++;
    const utilization =
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().s[263]++,
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[55][0]++, metrics.utilization) ||
    /* istanbul ignore next */
    (cov_2lbv6ozqpd().b[55][1]++, 0));
    /* istanbul ignore next */
    cov_2lbv6ozqpd().s[264]++;
    if (utilization > 85) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[56][0]++;
      cov_2lbv6ozqpd().s[265]++;
      return 'poor';
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[56][1]++;
    }
    cov_2lbv6ozqpd().s[266]++;
    if (utilization > 70) {
      /* istanbul ignore next */
      cov_2lbv6ozqpd().b[57][0]++;
      cov_2lbv6ozqpd().s[267]++;
      return 'fair';
    } else
    /* istanbul ignore next */
    {
      cov_2lbv6ozqpd().b[57][1]++;
    }
    cov_2lbv6ozqpd().s[268]++;
    return 'good';
  }
  async getResourceTrends() {
    /* istanbul ignore next */
    cov_2lbv6ozqpd().f[49]++;
    cov_2lbv6ozqpd().s[269]++;
    return {
      cpu: [60, 62, 65, 63, 68, 70, 65],
      memory: [55, 58, 60, 62, 59, 61, 63],
      storage: [50, 52, 55, 58, 60, 62, 60],
      network: [35, 38, 40, 42, 39, 41, 40]
    };
  }
}
/* istanbul ignore next */
cov_2lbv6ozqpd().s[270]++;
exports.CapacityPlanner = CapacityPlanner;
/* istanbul ignore next */
cov_2lbv6ozqpd().s[271]++;
exports.capacityPlanner = new CapacityPlanner();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,