{"version":3,"names":["cov_2lbv6ozqpd","actualCoverage","s","PredictiveAnalytics_1","require","AnalyticsEngine_1","PerformanceMonitor_1","EventStore_1","lru_cache_1","CapacityPlanner","constructor","f","isMonitoring","monitoringInterval","predictiveAnalytics","PredictiveAnalytics","analyticsEngine","AnalyticsEngine","getInstance","performanceMonitor","PerformanceMonitor","eventStore","EventStore","cache","LRUCache","max","ttl","capacityModels","Map","alerts","recommendations","initializeCapacityModels","startMonitoring","intervalMs","b","console","log","setInterval","performCapacityAnalysis","error","stopMonitoring","clearInterval","generateCapacityForecast","resources","timeframes","forecasts","resource","resourceForecasts","timeframe","prediction","predictCapacity","push","warn","message","length","set","generateScalingRecommendations","currentMetrics","getCurrentResourceMetrics","metrics","Object","entries","recommendation","analyzeResourceScaling","id","utilizationKey","currentUtilization","utilization","model","get","createCapacityModel","predictions","Promise","all","scalingAction","determineScalingAction","action","targetCapacity","calculateTargetCapacity","costBenefit","estimateCostBenefit","riskAssessment","assessScalingRisks","Date","now","currentState","capacity","total","cores","performance","assessPerformance","priority","estimatedCost","cost","expectedBenefit","benefit","reasoning","factors","dataPoints","map","p","metric","current","currentValue","predicted","predictedValue","threshold","implementation","steps","generateImplementationSteps","estimatedTime","estimateImplementationTime","rollbackPlan","generateRollbackPlan","monitoringPoints","generateMonitoringPoints","createGrowthProjections","projectionDays","cacheKey","cached","projections","getGrowthProjections","seasonality","analyzeSeasonality","scenarios","generateScenarios","projected","growthRate","generateGrowthRecommendations","result","generateOptimizationRecommendations","cpu","memory","storage","network","application","iops","latency","response_time","queue_size","error_rate","getCapacityAlerts","Array","from","values","filter","alert","resolved","sort","a","severityOrder","critical","warning","info","severity","getCapacityDashboard","trends","resolve","getResourceTrends","resourcesAtRisk","upcomingThresholds","alertType","timeToThreshold","optimizationOpportunities","r","overview","totalResources","keys","fromEntries","utilizationHistory","getUtilizationHistory","growthTrend","calculateGrowthTrend","thresholds","getResourceThresholds","generateResourceForecasts","currentCapacity","getCurrentCapacity","rate","confidence","updateCapacityModel","checkCapacityThresholds","generateCapacityAlerts","timestamp","models","size","latestUtilization","getLatestUtilization","peak","average","slice","resourceMetrics","createCapacityAlert","willExceedThreshold","alertId","existingAlert","find","getTime","peakUtilization","Math","h","generateAlertRecommendations","autoResolve","peak24h","average24h","trend","used","throughput","bandwidth","packetLoss","concurrent_users","requests_per_second","maxPredicted","ceil","baseCost","level","min","baseSteps","timeMap","scale_up","scale_down","optimize","maintain","days","history","daily","fill","weekly","monthly","maximum","optimistic","realistic","pessimistic","exports","capacityPlanner"],"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/CapacityPlanner.ts"],"sourcesContent":["import { PredictiveAnalytics, CapacityPrediction } from './PredictiveAnalytics';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\nimport { EventStore } from './EventStore';\nimport { LRUCache } from 'lru-cache';\n\nexport interface CapacityModel {\n  id: string;\n  resource: string;\n  currentCapacity: number;\n  utilizationHistory: Array<{\n    timestamp: Date;\n    utilization: number;\n    peak: number;\n    average: number;\n  }>;\n  growthTrend: {\n    rate: number; // percentage per day\n    confidence: number;\n    seasonality: {\n      daily: number[];\n      weekly: number[];\n      monthly: number[];\n    };\n  };\n  thresholds: {\n    warning: number; // utilization percentage\n    critical: number;\n    maximum: number;\n  };\n  forecasts: Array<{\n    timeframe: string;\n    predictedUtilization: number;\n    confidence: number;\n    willExceedThreshold: boolean;\n    recommendedAction: string;\n  }>;\n}\n\nexport interface ScalingRecommendation {\n  id: string;\n  resource: string;\n  currentState: {\n    capacity: number;\n    utilization: number;\n    performance: string;\n  };\n  recommendation: {\n    action: 'scale_up' | 'scale_down' | 'maintain' | 'optimize';\n    targetCapacity: number;\n    timeframe: string;\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    estimatedCost: number;\n    expectedBenefit: string;\n  };\n  reasoning: {\n    factors: string[];\n    dataPoints: Array<{\n      metric: string;\n      current: number;\n      predicted: number;\n      threshold: number;\n    }>;\n    riskAssessment: {\n      level: 'low' | 'medium' | 'high';\n      factors: string[];\n    };\n  };\n  implementation: {\n    steps: string[];\n    estimatedTime: string;\n    rollbackPlan: string[];\n    monitoringPoints: string[];\n  };\n}\n\nexport interface CapacityAlert {\n  id: string;\n  timestamp: Date;\n  resource: string;\n  alertType: 'threshold_exceeded' | 'prediction_warning' | 'capacity_exhaustion' | 'optimization_opportunity';\n  severity: 'info' | 'warning' | 'critical';\n  current: {\n    utilization: number;\n    capacity: number;\n    performance: any;\n  };\n  prediction: {\n    timeToThreshold: Date | null;\n    peakUtilization: number;\n    confidence: number;\n  };\n  message: string;\n  recommendations: string[];\n  autoResolve: boolean;\n  resolved: boolean;\n}\n\nexport interface ResourceMetrics {\n  cpu: {\n    cores: number;\n    utilization: number;\n    peak24h: number;\n    average24h: number;\n    trend: number;\n  };\n  memory: {\n    total: number;\n    used: number;\n    utilization: number;\n    peak24h: number;\n    average24h: number;\n    trend: number;\n  };\n  storage: {\n    total: number;\n    used: number;\n    utilization: number;\n    iops: number;\n    throughput: number;\n    trend: number;\n  };\n  network: {\n    bandwidth: number;\n    utilization: number;\n    latency: number;\n    packetLoss: number;\n    trend: number;\n  };\n  application: {\n    concurrent_users: number;\n    requests_per_second: number;\n    queue_size: number;\n    response_time: number;\n    error_rate: number;\n  };\n}\n\nexport class CapacityPlanner {\n  private predictiveAnalytics: PredictiveAnalytics;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  private eventStore: EventStore;\n  private cache: LRUCache<string, any>;\n  private capacityModels: Map<string, CapacityModel>;\n  private alerts: Map<string, CapacityAlert>;\n  private recommendations: Map<string, ScalingRecommendation>;\n  private isMonitoring: boolean = false;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.predictiveAnalytics = new PredictiveAnalytics();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n    this.eventStore = EventStore.getInstance();\n    \n    this.cache = new LRUCache({\n      max: 100,\n      ttl: 1000 * 60 * 15 // 15 minutes cache\n    });\n\n    this.capacityModels = new Map();\n    this.alerts = new Map();\n    this.recommendations = new Map();\n\n    this.initializeCapacityModels();\n  }\n\n  /**\n   * Start capacity monitoring and planning\n   */\n  public startMonitoring(intervalMs: number = 300000): void { // 5 minutes default\n    if (this.isMonitoring) {\n      console.log('Capacity monitoring already running');\n      return;\n    }\n\n    this.isMonitoring = true;\n    console.log(`Starting capacity monitoring with ${intervalMs}ms interval`);\n\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.performCapacityAnalysis();\n      } catch (error) {\n        console.error('Error during capacity analysis:', error);\n      }\n    }, intervalMs);\n\n    // Perform initial analysis\n    this.performCapacityAnalysis();\n  }\n\n  /**\n   * Stop capacity monitoring\n   */\n  public stopMonitoring(): void {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    console.log('Capacity monitoring stopped');\n  }\n\n  /**\n   * Generate comprehensive capacity forecast\n   */\n  public async generateCapacityForecast(\n    resources: string[] = ['cpu', 'memory', 'storage', 'network'],\n    timeframes: string[] = ['1h', '6h', '24h', '7d', '30d']\n  ): Promise<Map<string, CapacityPrediction[]>> {\n    const forecasts = new Map<string, CapacityPrediction[]>();\n\n    for (const resource of resources) {\n      const resourceForecasts: CapacityPrediction[] = [];\n\n      for (const timeframe of timeframes) {\n        try {\n          const prediction = await this.predictiveAnalytics.predictCapacity(\n            `${resource}_usage`,\n            timeframe as any\n          );\n          resourceForecasts.push(prediction);\n        } catch (error) {\n          console.warn(`Failed to generate forecast for ${resource} at ${timeframe}:`, error.message);\n        }\n      }\n\n      if (resourceForecasts.length > 0) {\n        forecasts.set(resource, resourceForecasts);\n      }\n    }\n\n    return forecasts;\n  }\n\n  /**\n   * Generate scaling recommendations\n   */\n  public async generateScalingRecommendations(): Promise<ScalingRecommendation[]> {\n    const recommendations: ScalingRecommendation[] = [];\n    const currentMetrics = await this.getCurrentResourceMetrics();\n\n    // Analyze each resource type\n    for (const [resource, metrics] of Object.entries(currentMetrics)) {\n      if (resource === 'application') continue; // Skip application metrics for scaling\n\n      try {\n        const recommendation = await this.analyzeResourceScaling(resource, metrics);\n        if (recommendation) {\n          recommendations.push(recommendation);\n          this.recommendations.set(recommendation.id, recommendation);\n        }\n      } catch (error) {\n        console.error(`Error analyzing scaling for ${resource}:`, error);\n      }\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Analyze resource scaling needs\n   */\n  private async analyzeResourceScaling(\n    resource: string,\n    metrics: any\n  ): Promise<ScalingRecommendation | null> {\n    const utilizationKey = `${resource}_utilization`;\n    const currentUtilization = metrics.utilization || 0;\n    \n    // Get capacity model for this resource\n    const model = this.capacityModels.get(resource);\n    if (!model) {\n      await this.createCapacityModel(resource);\n    }\n\n    // Get predictions for different timeframes\n    const predictions = await Promise.all([\n      this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '6h'),\n      this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '24h'),\n      this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '7d')\n    ]);\n\n    // Determine scaling action\n    const scalingAction = this.determineScalingAction(currentUtilization, predictions, model);\n    \n    if (scalingAction.action === 'maintain') {\n      return null; // No scaling needed\n    }\n\n    // Calculate target capacity\n    const targetCapacity = this.calculateTargetCapacity(\n      resource,\n      currentUtilization,\n      predictions,\n      scalingAction.action\n    );\n\n    // Estimate cost and benefit\n    const costBenefit = this.estimateCostBenefit(resource, scalingAction.action, targetCapacity);\n\n    // Assess risks\n    const riskAssessment = this.assessScalingRisks(resource, scalingAction.action, predictions);\n\n    const recommendation: ScalingRecommendation = {\n      id: `scaling_${resource}_${Date.now()}`,\n      resource,\n      currentState: {\n        capacity: metrics.total || metrics.cores || 100,\n        utilization: currentUtilization,\n        performance: this.assessPerformance(resource, metrics)\n      },\n      recommendation: {\n        action: scalingAction.action,\n        targetCapacity,\n        timeframe: scalingAction.timeframe,\n        priority: scalingAction.priority,\n        estimatedCost: costBenefit.cost,\n        expectedBenefit: costBenefit.benefit\n      },\n      reasoning: {\n        factors: scalingAction.factors,\n        dataPoints: predictions.map(p => ({\n          metric: p.metric,\n          current: p.currentValue,\n          predicted: p.predictedValue,\n          threshold: p.threshold\n        })),\n        riskAssessment\n      },\n      implementation: {\n        steps: this.generateImplementationSteps(resource, scalingAction.action),\n        estimatedTime: this.estimateImplementationTime(resource, scalingAction.action),\n        rollbackPlan: this.generateRollbackPlan(resource, scalingAction.action),\n        monitoringPoints: this.generateMonitoringPoints(resource)\n      }\n    };\n\n    return recommendation;\n  }\n\n  /**\n   * Create growth projections with ML models\n   */\n  public async createGrowthProjections(\n    resource: string,\n    projectionDays: number = 30\n  ): Promise<{\n    current: number;\n    projected: number;\n    growthRate: number;\n    seasonality: {\n      daily: number[];\n      weekly: number[];\n    };\n    scenarios: {\n      optimistic: number;\n      realistic: number;\n      pessimistic: number;\n    };\n    recommendations: string[];\n  }> {\n    const cacheKey = `growth_projection_${resource}_${projectionDays}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached) return cached;\n\n    // Get growth projections from predictive analytics\n    const projections = await this.predictiveAnalytics.getGrowthProjections(\n      `${resource}_usage`,\n      projectionDays\n    );\n\n    // Analyze seasonality patterns\n    const seasonality = await this.analyzeSeasonality(resource, projectionDays * 2);\n\n    // Generate different scenarios\n    const scenarios = this.generateScenarios(projections.projected, projections.growthRate);\n\n    // Generate recommendations based on projections\n    const recommendations = this.generateGrowthRecommendations(\n      resource,\n      projections.current,\n      scenarios,\n      projections.growthRate\n    );\n\n    const result = {\n      current: projections.current,\n      projected: projections.projected,\n      growthRate: projections.growthRate,\n      seasonality,\n      scenarios,\n      recommendations\n    };\n\n    this.cache.set(cacheKey, result);\n    return result;\n  }\n\n  /**\n   * Generate capacity optimization recommendations\n   */\n  public async generateOptimizationRecommendations(): Promise<{\n    cpu: string[];\n    memory: string[];\n    storage: string[];\n    network: string[];\n    application: string[];\n    cost: string[];\n  }> {\n    const recommendations = {\n      cpu: [],\n      memory: [],\n      storage: [],\n      network: [],\n      application: [],\n      cost: []\n    };\n\n    const metrics = await this.getCurrentResourceMetrics();\n    const forecasts = await this.generateCapacityForecast();\n\n    // CPU optimization\n    if (metrics.cpu.utilization < 30) {\n      recommendations.cpu.push('CPU utilization is low - consider downsizing instances');\n      recommendations.cost.push('Potential cost savings from CPU optimization');\n    } else if (metrics.cpu.utilization > 80) {\n      recommendations.cpu.push('CPU utilization is high - consider scaling up or optimizing workloads');\n    }\n\n    // Memory optimization\n    if (metrics.memory.utilization < 40) {\n      recommendations.memory.push('Memory utilization is low - review memory allocation');\n      recommendations.cost.push('Potential cost savings from memory optimization');\n    } else if (metrics.memory.utilization > 85) {\n      recommendations.memory.push('Memory utilization is high - consider adding memory or optimizing usage');\n    }\n\n    // Storage optimization\n    if (metrics.storage.utilization > 80) {\n      recommendations.storage.push('Storage utilization is high - plan for capacity expansion');\n    }\n    if (metrics.storage.iops > 1000) {\n      recommendations.storage.push('High IOPS detected - consider faster storage or caching');\n    }\n\n    // Network optimization\n    if (metrics.network.latency > 100) {\n      recommendations.network.push('High network latency detected - investigate network bottlenecks');\n    }\n    if (metrics.network.utilization > 70) {\n      recommendations.network.push('Network utilization is high - consider bandwidth upgrade');\n    }\n\n    // Application optimization\n    if (metrics.application.response_time > 2000) {\n      recommendations.application.push('High response times - optimize application performance');\n    }\n    if (metrics.application.queue_size > 100) {\n      recommendations.application.push('Large queue size - consider horizontal scaling');\n    }\n    if (metrics.application.error_rate > 1) {\n      recommendations.application.push('High error rate - investigate and fix application issues');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get capacity alerts\n   */\n  public getCapacityAlerts(): CapacityAlert[] {\n    return Array.from(this.alerts.values())\n      .filter(alert => !alert.resolved)\n      .sort((a, b) => {\n        const severityOrder = { critical: 3, warning: 2, info: 1 };\n        return severityOrder[b.severity] - severityOrder[a.severity];\n      });\n  }\n\n  /**\n   * Get capacity dashboard data\n   */\n  public async getCapacityDashboard(): Promise<{\n    overview: {\n      totalResources: number;\n      resourcesAtRisk: number;\n      upcomingThresholds: number;\n      optimizationOpportunities: number;\n    };\n    resources: ResourceMetrics;\n    alerts: CapacityAlert[];\n    recommendations: ScalingRecommendation[];\n    forecasts: any;\n    trends: {\n      cpu: number[];\n      memory: number[];\n      storage: number[];\n      network: number[];\n    };\n  }> {\n    const [resources, alerts, recommendations, forecasts, trends] = await Promise.all([\n      this.getCurrentResourceMetrics(),\n      Promise.resolve(this.getCapacityAlerts()),\n      this.generateScalingRecommendations(),\n      this.generateCapacityForecast(),\n      this.getResourceTrends()\n    ]);\n\n    const resourcesAtRisk = alerts.filter(a => a.severity === 'critical').length;\n    const upcomingThresholds = alerts.filter(a => \n      a.alertType === 'prediction_warning' && \n      a.prediction.timeToThreshold\n    ).length;\n    const optimizationOpportunities = recommendations.filter(r => \n      r.recommendation.action === 'optimize'\n    ).length;\n\n    return {\n      overview: {\n        totalResources: Object.keys(resources).length - 1, // Exclude application\n        resourcesAtRisk,\n        upcomingThresholds,\n        optimizationOpportunities\n      },\n      resources,\n      alerts,\n      recommendations,\n      forecasts: Object.fromEntries(forecasts),\n      trends\n    };\n  }\n\n  // Private helper methods\n\n  private async initializeCapacityModels(): Promise<void> {\n    const resources = ['cpu', 'memory', 'storage', 'network'];\n    \n    for (const resource of resources) {\n      try {\n        await this.createCapacityModel(resource);\n      } catch (error) {\n        console.warn(`Failed to initialize capacity model for ${resource}:`, error.message);\n      }\n    }\n  }\n\n  private async createCapacityModel(resource: string): Promise<CapacityModel> {\n    // Get historical utilization data\n    const utilizationHistory = await this.getUtilizationHistory(resource, 30); // 30 days\n\n    // Calculate growth trend\n    const growthTrend = this.calculateGrowthTrend(utilizationHistory);\n\n    // Analyze seasonality\n    const seasonality = await this.analyzeSeasonality(resource, 30);\n\n    // Set thresholds based on resource type\n    const thresholds = this.getResourceThresholds(resource);\n\n    // Generate forecasts\n    const forecasts = await this.generateResourceForecasts(resource);\n\n    const model: CapacityModel = {\n      id: `capacity_${resource}_${Date.now()}`,\n      resource,\n      currentCapacity: await this.getCurrentCapacity(resource),\n      utilizationHistory,\n      growthTrend: {\n        rate: growthTrend.rate,\n        confidence: growthTrend.confidence,\n        seasonality\n      },\n      thresholds,\n      forecasts\n    };\n\n    this.capacityModels.set(resource, model);\n    return model;\n  }\n\n  private async performCapacityAnalysis(): Promise<void> {\n    try {\n      // Update capacity models\n      for (const resource of this.capacityModels.keys()) {\n        await this.updateCapacityModel(resource);\n      }\n\n      // Check for threshold violations\n      await this.checkCapacityThresholds();\n\n      // Generate alerts if needed\n      await this.generateCapacityAlerts();\n\n      // Update cache\n      this.cache.set('last_analysis', {\n        timestamp: new Date(),\n        models: this.capacityModels.size,\n        alerts: this.alerts.size\n      });\n\n    } catch (error) {\n      console.error('Error during capacity analysis:', error);\n    }\n  }\n\n  private async updateCapacityModel(resource: string): Promise<void> {\n    const model = this.capacityModels.get(resource);\n    if (!model) return;\n\n    // Get latest utilization data\n    const latestUtilization = await this.getLatestUtilization(resource);\n    \n    // Update utilization history\n    model.utilizationHistory.push({\n      timestamp: new Date(),\n      utilization: latestUtilization.current,\n      peak: latestUtilization.peak,\n      average: latestUtilization.average\n    });\n\n    // Keep only last 1000 data points\n    if (model.utilizationHistory.length > 1000) {\n      model.utilizationHistory = model.utilizationHistory.slice(-1000);\n    }\n\n    // Recalculate growth trend\n    model.growthTrend = {\n      ...model.growthTrend,\n      rate: this.calculateGrowthTrend(model.utilizationHistory).rate\n    };\n\n    // Update forecasts\n    model.forecasts = await this.generateResourceForecasts(resource);\n  }\n\n  private async checkCapacityThresholds(): Promise<void> {\n    const metrics = await this.getCurrentResourceMetrics();\n\n    for (const [resource, resourceMetrics] of Object.entries(metrics)) {\n      if (resource === 'application') continue;\n\n      const model = this.capacityModels.get(resource);\n      if (!model) continue;\n\n      const utilization = resourceMetrics.utilization || 0;\n\n      // Check immediate thresholds\n      if (utilization > model.thresholds.critical) {\n        this.createCapacityAlert(\n          resource,\n          'threshold_exceeded',\n          'critical',\n          `${resource} utilization exceeded critical threshold`,\n          utilization,\n          model\n        );\n      } else if (utilization > model.thresholds.warning) {\n        this.createCapacityAlert(\n          resource,\n          'threshold_exceeded',\n          'warning',\n          `${resource} utilization exceeded warning threshold`,\n          utilization,\n          model\n        );\n      }\n\n      // Check predictions\n      const predictions = await this.predictiveAnalytics.predictCapacity(`${resource}_usage`, '24h');\n      \n      if (predictions.willExceedThreshold && predictions.timeToThreshold) {\n        this.createCapacityAlert(\n          resource,\n          'prediction_warning',\n          'warning',\n          `${resource} predicted to exceed threshold within 24 hours`,\n          utilization,\n          model,\n          predictions.timeToThreshold\n        );\n      }\n    }\n  }\n\n  private createCapacityAlert(\n    resource: string,\n    alertType: CapacityAlert['alertType'],\n    severity: CapacityAlert['severity'],\n    message: string,\n    currentUtilization: number,\n    model: CapacityModel,\n    timeToThreshold?: Date\n  ): void {\n    const alertId = `capacity_${resource}_${alertType}_${Date.now()}`;\n    \n    // Check if similar alert already exists\n    const existingAlert = Array.from(this.alerts.values())\n      .find(alert => \n        alert.resource === resource && \n        alert.alertType === alertType &&\n        !alert.resolved &&\n        (Date.now() - alert.timestamp.getTime()) < 30 * 60 * 1000 // 30 minutes\n      );\n\n    if (existingAlert) return; // Don't create duplicate alerts\n\n    const alert: CapacityAlert = {\n      id: alertId,\n      timestamp: new Date(),\n      resource,\n      alertType,\n      severity,\n      current: {\n        utilization: currentUtilization,\n        capacity: model.currentCapacity,\n        performance: {} // Would include performance metrics\n      },\n      prediction: {\n        timeToThreshold,\n        peakUtilization: Math.max(...model.utilizationHistory.map(h => h.peak)),\n        confidence: model.growthTrend.confidence\n      },\n      message,\n      recommendations: this.generateAlertRecommendations(resource, alertType, currentUtilization),\n      autoResolve: severity === 'info',\n      resolved: false\n    };\n\n    this.alerts.set(alertId, alert);\n    console.log(`Capacity alert created: ${message}`);\n  }\n\n  private generateAlertRecommendations(\n    resource: string,\n    alertType: string,\n    utilization: number\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (alertType === 'threshold_exceeded') {\n      recommendations.push(`Immediate action required for ${resource}`);\n      recommendations.push('Consider scaling resources');\n      recommendations.push('Investigate high utilization causes');\n    }\n\n    if (alertType === 'prediction_warning') {\n      recommendations.push(`Plan capacity expansion for ${resource}`);\n      recommendations.push('Monitor growth trends closely');\n      recommendations.push('Prepare scaling procedures');\n    }\n\n    if (utilization > 90) {\n      recommendations.push('Critical utilization - immediate scaling recommended');\n    }\n\n    return recommendations;\n  }\n\n  // Additional helper methods would be implemented here...\n  // (Simplified for space considerations)\n\n  private async getCurrentResourceMetrics(): Promise<ResourceMetrics> {\n    // Implementation to get current resource metrics\n    return {\n      cpu: { cores: 4, utilization: 65, peak24h: 80, average24h: 60, trend: 0.5 },\n      memory: { total: 16000, used: 10000, utilization: 62.5, peak24h: 75, average24h: 58, trend: 0.3 },\n      storage: { total: 1000000, used: 600000, utilization: 60, iops: 500, throughput: 100, trend: 0.8 },\n      network: { bandwidth: 1000, utilization: 40, latency: 50, packetLoss: 0.1, trend: 0.2 },\n      application: { concurrent_users: 150, requests_per_second: 45, queue_size: 12, response_time: 800, error_rate: 0.5 }\n    };\n  }\n\n  private determineScalingAction(\n    currentUtilization: number,\n    predictions: CapacityPrediction[],\n    model?: CapacityModel\n  ): {\n    action: ScalingRecommendation['recommendation']['action'];\n    timeframe: string;\n    priority: ScalingRecommendation['recommendation']['priority'];\n    factors: string[];\n  } {\n    const factors: string[] = [];\n    let action: ScalingRecommendation['recommendation']['action'] = 'maintain';\n    let priority: ScalingRecommendation['recommendation']['priority'] = 'low';\n    let timeframe = 'within 7 days';\n\n    // Determine action based on current utilization and predictions\n    const maxPredicted = Math.max(...predictions.map(p => p.predictedValue));\n    \n    if (currentUtilization > 85 || maxPredicted > 90) {\n      action = 'scale_up';\n      priority = 'high';\n      timeframe = 'within 24 hours';\n      factors.push('High current or predicted utilization');\n    } else if (currentUtilization < 20 && maxPredicted < 30) {\n      action = 'scale_down';\n      priority = 'medium';\n      timeframe = 'within 7 days';\n      factors.push('Low utilization indicates over-provisioning');\n    } else if (currentUtilization > 70) {\n      action = 'optimize';\n      priority = 'medium';\n      factors.push('Moderate utilization - optimization opportunities exist');\n    }\n\n    return { action, timeframe, priority, factors };\n  }\n\n  private calculateTargetCapacity(\n    resource: string,\n    currentUtilization: number,\n    predictions: CapacityPrediction[],\n    action: string\n  ): number {\n    const maxPredicted = Math.max(...predictions.map(p => p.predictedValue));\n    \n    switch (action) {\n      case 'scale_up':\n        // Target 70% utilization of new capacity\n        return Math.ceil((maxPredicted * 1.2) / 0.7);\n      case 'scale_down':\n        // Target 60% utilization of new capacity\n        return Math.ceil((maxPredicted * 1.1) / 0.6);\n      default:\n        return 100; // Maintain current\n    }\n  }\n\n  private estimateCostBenefit(\n    resource: string,\n    action: string,\n    targetCapacity: number\n  ): { cost: number; benefit: string } {\n    // Simplified cost estimation\n    const baseCost = { cpu: 100, memory: 50, storage: 20, network: 30 }[resource] || 50;\n    \n    let cost = 0;\n    let benefit = '';\n\n    switch (action) {\n      case 'scale_up':\n        cost = baseCost * 1.5;\n        benefit = 'Improved performance and reliability';\n        break;\n      case 'scale_down':\n        cost = -baseCost * 0.3; // Cost savings\n        benefit = 'Reduced operational costs';\n        break;\n      case 'optimize':\n        cost = baseCost * 0.1;\n        benefit = 'Better resource utilization without scaling';\n        break;\n    }\n\n    return { cost, benefit };\n  }\n\n  private assessScalingRisks(\n    resource: string,\n    action: string,\n    predictions: CapacityPrediction[]\n  ): { level: 'low' | 'medium' | 'high'; factors: string[] } {\n    const factors: string[] = [];\n    let level: 'low' | 'medium' | 'high' = 'low';\n\n    const confidence = Math.min(...predictions.map(p => p.confidence));\n    \n    if (confidence < 0.7) {\n      factors.push('Low prediction confidence');\n      level = 'medium';\n    }\n\n    if (action === 'scale_down') {\n      factors.push('Risk of performance degradation');\n      level = level === 'medium' ? 'high' : 'medium';\n    }\n\n    if (action === 'scale_up') {\n      factors.push('Increased operational costs');\n    }\n\n    return { level, factors };\n  }\n\n  private generateImplementationSteps(resource: string, action: string): string[] {\n    const baseSteps = [\n      'Create backup of current configuration',\n      'Plan maintenance window',\n      'Notify stakeholders'\n    ];\n\n    switch (action) {\n      case 'scale_up':\n        return [\n          ...baseSteps,\n          `Add additional ${resource} capacity`,\n          'Update load balancer configuration',\n          'Test new capacity',\n          'Monitor performance'\n        ];\n      case 'scale_down':\n        return [\n          ...baseSteps,\n          'Drain traffic from excess capacity',\n          `Remove unnecessary ${resource} resources`,\n          'Update monitoring thresholds',\n          'Verify performance maintained'\n        ];\n      case 'optimize':\n        return [\n          ...baseSteps,\n          `Analyze ${resource} usage patterns`,\n          'Implement optimization recommendations',\n          'Monitor performance improvements',\n          'Document optimizations'\n        ];\n      default:\n        return baseSteps;\n    }\n  }\n\n  private estimateImplementationTime(resource: string, action: string): string {\n    const timeMap = {\n      scale_up: '2-4 hours',\n      scale_down: '1-2 hours',\n      optimize: '4-8 hours',\n      maintain: '0 hours'\n    };\n    return timeMap[action] || '2-4 hours';\n  }\n\n  private generateRollbackPlan(resource: string, action: string): string[] {\n    return [\n      'Monitor key performance indicators',\n      'Identify performance degradation',\n      'Restore previous configuration',\n      'Verify system stability',\n      'Document rollback reasons'\n    ];\n  }\n\n  private generateMonitoringPoints(resource: string): string[] {\n    return [\n      `${resource} utilization`,\n      `${resource} performance metrics`,\n      'Application response times',\n      'Error rates',\n      'User experience metrics'\n    ];\n  }\n\n  // Additional helper methods (simplified implementations)\n  private async getUtilizationHistory(resource: string, days: number): Promise<any[]> { return []; }\n  private calculateGrowthTrend(history: any[]): { rate: number; confidence: number } { return { rate: 0.1, confidence: 0.8 }; }\n  private async analyzeSeasonality(resource: string, days: number): Promise<{ daily: number[]; weekly: number[]; monthly: number[] }> { \n    return { daily: new Array(24).fill(0), weekly: new Array(7).fill(0), monthly: new Array(12).fill(0) }; \n  }\n  private getResourceThresholds(resource: string): { warning: number; critical: number; maximum: number } {\n    return { warning: 70, critical: 85, maximum: 95 };\n  }\n  private async generateResourceForecasts(resource: string): Promise<any[]> { return []; }\n  private async getCurrentCapacity(resource: string): Promise<number> { return 100; }\n  private async getLatestUtilization(resource: string): Promise<{ current: number; peak: number; average: number }> {\n    return { current: 65, peak: 80, average: 60 };\n  }\n  private async generateCapacityAlerts(): Promise<void> {}\n  private generateScenarios(projected: number, growthRate: number): { optimistic: number; realistic: number; pessimistic: number } {\n    return {\n      optimistic: projected * 0.8,\n      realistic: projected,\n      pessimistic: projected * 1.3\n    };\n  }\n  private generateGrowthRecommendations(resource: string, current: number, scenarios: any, growthRate: number): string[] {\n    return ['Monitor growth trends', 'Plan for capacity expansion', 'Optimize resource usage'];\n  }\n  private assessPerformance(resource: string, metrics: any): string {\n    const utilization = metrics.utilization || 0;\n    if (utilization > 85) return 'poor';\n    if (utilization > 70) return 'fair';\n    return 'good';\n  }\n  private async getResourceTrends(): Promise<{ cpu: number[]; memory: number[]; storage: number[]; network: number[] }> {\n    return {\n      cpu: [60, 62, 65, 63, 68, 70, 65],\n      memory: [55, 58, 60, 62, 59, 61, 63],\n      storage: [50, 52, 55, 58, 60, 62, 60],\n      network: [35, 38, 40, 42, 39, 41, 40]\n    };\n  }\n}\n\nexport const capacityPlanner = new CapacityPlanner();"],"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","ignoreList":[]}