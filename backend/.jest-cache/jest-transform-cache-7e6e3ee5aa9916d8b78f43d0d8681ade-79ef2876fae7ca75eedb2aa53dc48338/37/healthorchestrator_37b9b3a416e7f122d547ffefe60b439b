463a9cb75d5c58112daa51d1b0a6b794
"use strict";

/* istanbul ignore next */
function cov_2qthh0jkbk() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/health-orchestrator.ts";
  var hash = "bf67924dcaa7aecef7fd5c9487bc13fc6c6af370";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/health-orchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 77
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "7": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "8": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 11,
          column: 86
        }
      },
      "9": {
        start: {
          line: 12,
          column: 27
        },
        end: {
          line: 13,
          column: 65
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 18,
          column: 11
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 24,
          column: 11
        }
      },
      "12": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "13": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "14": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 42
        }
      },
      "15": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 99
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "17": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "18": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 39,
          column: 59
        }
      },
      "19": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "21": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 92,
          column: 3
        }
      },
      "22": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "23": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 86
        }
      },
      "24": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "25": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 66,
          column: 46
        }
      },
      "26": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "27": {
        start: {
          line: 74,
          column: 29
        },
        end: {
          line: 74,
          column: 51
        }
      },
      "28": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "29": {
        start: {
          line: 81,
          column: 32
        },
        end: {
          line: 81,
          column: 97
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 26
        }
      },
      "31": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "32": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "33": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "34": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 62
        }
      },
      "35": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "36": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "37": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 124,
          column: 3
        }
      },
      "38": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "39": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 61
        }
      },
      "40": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "41": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "42": {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 142,
          column: 3
        }
      },
      "43": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "44": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 128,
          column: 31
        }
      },
      "45": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 69
        }
      },
      "46": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "47": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "48": {
        start: {
          line: 144,
          column: 0
        },
        end: {
          line: 189,
          column: 3
        }
      },
      "49": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "50": {
        start: {
          line: 152,
          column: 22
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "51": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 55
        }
      },
      "52": {
        start: {
          line: 156,
          column: 26
        },
        end: {
          line: 156,
          column: 83
        }
      },
      "53": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 163,
          column: 7
        }
      },
      "54": {
        start: {
          line: 165,
          column: 35
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "55": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 58
        }
      },
      "56": {
        start: {
          line: 168,
          column: 38
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "57": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "58": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "59": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 57
        }
      },
      "60": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 180,
          column: 95
        }
      },
      "61": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 101
        }
      },
      "62": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 182,
          column: 93
        }
      },
      "63": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 188,
          column: 7
        }
      },
      "64": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 100
        }
      },
      "65": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 106
        }
      },
      "66": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 98
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 22
          },
          end: {
            line: 9,
            column: 23
          }
        },
        loc: {
          start: {
            line: 9,
            column: 42
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 36
          },
          end: {
            line: 28,
            column: 37
          }
        },
        loc: {
          start: {
            line: 28,
            column: 56
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 23
          },
          end: {
            line: 53,
            column: 24
          }
        },
        loc: {
          start: {
            line: 53,
            column: 43
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 25
          }
        },
        loc: {
          start: {
            line: 66,
            column: 29
          },
          end: {
            line: 66,
            column: 46
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 22
          }
        },
        loc: {
          start: {
            line: 67,
            column: 27
          },
          end: {
            line: 72,
            column: 13
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 24
          },
          end: {
            line: 74,
            column: 25
          }
        },
        loc: {
          start: {
            line: 74,
            column: 29
          },
          end: {
            line: 74,
            column: 51
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 21
          },
          end: {
            line: 75,
            column: 22
          }
        },
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 80,
            column: 13
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 22
          },
          end: {
            line: 81,
            column: 23
          }
        },
        loc: {
          start: {
            line: 81,
            column: 32
          },
          end: {
            line: 81,
            column: 97
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 94,
            column: 22
          },
          end: {
            line: 94,
            column: 23
          }
        },
        loc: {
          start: {
            line: 94,
            column: 42
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 94
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 110,
            column: 22
          }
        },
        loc: {
          start: {
            line: 110,
            column: 41
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 110
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 126,
            column: 22
          },
          end: {
            line: 126,
            column: 23
          }
        },
        loc: {
          start: {
            line: 126,
            column: 42
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 126
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 23
          }
        },
        loc: {
          start: {
            line: 144,
            column: 36
          },
          end: {
            line: 189,
            column: 1
          }
        },
        line: 144
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 152,
            column: 22
          },
          end: {
            line: 152,
            column: 23
          }
        },
        loc: {
          start: {
            line: 152,
            column: 32
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 152
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 165,
            column: 36
          }
        },
        loc: {
          start: {
            line: 165,
            column: 45
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 165
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 168,
            column: 38
          },
          end: {
            line: 168,
            column: 39
          }
        },
        loc: {
          start: {
            line: 168,
            column: 48
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 168
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 177,
            column: 34
          },
          end: {
            line: 177,
            column: 35
          }
        },
        loc: {
          start: {
            line: 177,
            column: 44
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 177
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 184,
            column: 21
          }
        },
        loc: {
          start: {
            line: 184,
            column: 26
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 184
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 13,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 12,
            column: 70
          },
          end: {
            line: 12,
            column: 73
          }
        }, {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 65
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 56
          },
          end: {
            line: 13,
            column: 59
          }
        }, {
          start: {
            line: 13,
            column: 62
          },
          end: {
            line: 13,
            column: 65
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 46
          },
          end: {
            line: 23,
            column: 59
          }
        }, {
          start: {
            line: 23,
            column: 62
          },
          end: {
            line: 23,
            column: 77
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 27
          },
          end: {
            line: 39,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 64
          },
          end: {
            line: 38,
            column: 67
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 59
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 50
          },
          end: {
            line: 39,
            column: 53
          }
        }, {
          start: {
            line: 39,
            column: 56
          },
          end: {
            line: 39,
            column: 59
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 48,
            column: 21
          },
          end: {
            line: 48,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 46
          },
          end: {
            line: 48,
            column: 59
          }
        }, {
          start: {
            line: 48,
            column: 62
          },
          end: {
            line: 48,
            column: 77
          }
        }],
        line: 48
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 21
          },
          end: {
            line: 89,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 46
          },
          end: {
            line: 89,
            column: 59
          }
        }, {
          start: {
            line: 89,
            column: 62
          },
          end: {
            line: 89,
            column: 77
          }
        }],
        line: 89
      },
      "8": {
        loc: {
          start: {
            line: 105,
            column: 21
          },
          end: {
            line: 105,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 105,
            column: 59
          }
        }, {
          start: {
            line: 105,
            column: 62
          },
          end: {
            line: 105,
            column: 77
          }
        }],
        line: 105
      },
      "9": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 46
          },
          end: {
            line: 121,
            column: 59
          }
        }, {
          start: {
            line: 121,
            column: 62
          },
          end: {
            line: 121,
            column: 77
          }
        }],
        line: 121
      },
      "10": {
        loc: {
          start: {
            line: 139,
            column: 21
          },
          end: {
            line: 139,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 46
          },
          end: {
            line: 139,
            column: 59
          }
        }, {
          start: {
            line: 139,
            column: 62
          },
          end: {
            line: 139,
            column: 77
          }
        }],
        line: 139
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/health-orchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/health-orchestrator.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { healthOrchestrator } from '../services/health/HealthOrchestrator';\n\nconst router = Router();\n\n// Get overall system health\nrouter.get('/system', async (req, res) => {\n  try {\n    const systemHealth = healthOrchestrator.getSystemHealth();\n    \n    const statusCode = systemHealth.overallStatus === 'healthy' ? 200 :\n                      systemHealth.overallStatus === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      ...systemHealth,\n      services: Object.fromEntries(systemHealth.services),\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get system health',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get specific service health\nrouter.get('/service/:serviceName', async (req, res) => {\n  try {\n    const { serviceName } = req.params;\n    const serviceHealth = healthOrchestrator.getServiceHealth(serviceName);\n    \n    if (!serviceHealth) {\n      return res.status(404).json({\n        error: 'Service not found',\n        serviceName\n      });\n    }\n    \n    const statusCode = serviceHealth.status === 'healthy' ? 200 :\n                      serviceHealth.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      ...serviceHealth,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get service health',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get health summary for dashboard\nrouter.get('/summary', async (req, res) => {\n  try {\n    const systemHealth = healthOrchestrator.getSystemHealth();\n    \n    const summary = {\n      overallStatus: systemHealth.overallStatus,\n      totalServices: systemHealth.totalServices,\n      healthyServices: systemHealth.healthyServices,\n      degradedServices: systemHealth.degradedServices,\n      unhealthyServices: systemHealth.unhealthyServices,\n      offlineServices: systemHealth.offlineServices,\n      lastCheck: systemHealth.lastFullCheck,\n      healthPercentage: Math.round((systemHealth.healthyServices / systemHealth.totalServices) * 100),\n      criticalServices: Array.from(systemHealth.services.values())\n        .filter(s => s.criticalService)\n        .map(s => ({\n          name: s.name,\n          status: s.status,\n          lastCheck: s.lastCheck,\n          responseTime: s.responseTime\n        })),\n      recentIssues: Array.from(systemHealth.services.values())\n        .filter(s => s.status !== 'healthy')\n        .map(s => ({\n          service: s.name,\n          status: s.status,\n          message: s.message,\n          lastCheck: s.lastCheck\n        }))\n        .sort((a, b) => new Date(b.lastCheck).getTime() - new Date(a.lastCheck).getTime())\n        .slice(0, 10)\n    };\n    \n    res.json(summary);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get health summary',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Start health monitoring\nrouter.post('/start', async (req, res) => {\n  try {\n    await healthOrchestrator.start();\n    res.json({\n      message: 'Health monitoring started',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to start health monitoring',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Stop health monitoring\nrouter.post('/stop', async (req, res) => {\n  try {\n    await healthOrchestrator.stop();\n    res.json({\n      message: 'Health monitoring stopped',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to stop health monitoring',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Update health monitoring configuration\nrouter.put('/config', async (req, res) => {\n  try {\n    const config = req.body;\n    healthOrchestrator.updateConfig(config);\n    \n    res.json({\n      message: 'Health monitoring configuration updated',\n      config,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update configuration',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Health events stream (for real-time updates)\nrouter.get('/events', (req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    'Connection': 'keep-alive',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Cache-Control'\n  });\n\n  const sendEvent = (data: any) => {\n    res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n  };\n\n  // Send initial system health\n  const initialHealth = healthOrchestrator.getSystemHealth();\n  sendEvent({\n    type: 'initial',\n    data: {\n      ...initialHealth,\n      services: Object.fromEntries(initialHealth.services)\n    }\n  });\n\n  // Set up event listeners\n  const onServiceStatusChanged = (data: any) => {\n    sendEvent({ type: 'serviceStatusChanged', data });\n  };\n\n  const onFullHealthCheckComplete = (data: any) => {\n    sendEvent({ \n      type: 'fullHealthCheckComplete', \n      data: {\n        ...data.systemHealth,\n        services: Object.fromEntries(data.systemHealth.services)\n      }\n    });\n  };\n\n  const onCriticalServiceDown = (data: any) => {\n    sendEvent({ type: 'criticalServiceDown', data });\n  };\n\n  healthOrchestrator.on('serviceStatusChanged', onServiceStatusChanged);\n  healthOrchestrator.on('fullHealthCheckComplete', onFullHealthCheckComplete);\n  healthOrchestrator.on('criticalServiceDown', onCriticalServiceDown);\n\n  // Handle client disconnect\n  req.on('close', () => {\n    healthOrchestrator.off('serviceStatusChanged', onServiceStatusChanged);\n    healthOrchestrator.off('fullHealthCheckComplete', onFullHealthCheckComplete);\n    healthOrchestrator.off('criticalServiceDown', onCriticalServiceDown);\n  });\n});\n\nexport { router as healthOrchestratorRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bf67924dcaa7aecef7fd5c9487bc13fc6c6af370"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qthh0jkbk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qthh0jkbk();
cov_2qthh0jkbk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qthh0jkbk().s[1]++;
exports.healthOrchestratorRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_2qthh0jkbk().s[2]++, require("express"));
const HealthOrchestrator_1 =
/* istanbul ignore next */
(cov_2qthh0jkbk().s[3]++, require("../services/health/HealthOrchestrator"));
const router =
/* istanbul ignore next */
(cov_2qthh0jkbk().s[4]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_2qthh0jkbk().s[5]++;
exports.healthOrchestratorRoutes = router;
// Get overall system health
/* istanbul ignore next */
cov_2qthh0jkbk().s[6]++;
router.get('/system', async (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[0]++;
  cov_2qthh0jkbk().s[7]++;
  try {
    const systemHealth =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[8]++, HealthOrchestrator_1.healthOrchestrator.getSystemHealth());
    const statusCode =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[9]++, systemHealth.overallStatus === 'healthy' ?
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[0][0]++, 200) :
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[0][1]++, systemHealth.overallStatus === 'degraded' ?
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[1][0]++, 200) :
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[1][1]++, 503)));
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[10]++;
    res.status(statusCode).json({
      ...systemHealth,
      services: Object.fromEntries(systemHealth.services),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[11]++;
    res.status(500).json({
      error: 'Failed to get system health',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[2][1]++, 'Unknown error')
    });
  }
});
// Get specific service health
/* istanbul ignore next */
cov_2qthh0jkbk().s[12]++;
router.get('/service/:serviceName', async (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[1]++;
  cov_2qthh0jkbk().s[13]++;
  try {
    const {
      serviceName
    } =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[14]++, req.params);
    const serviceHealth =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[15]++, HealthOrchestrator_1.healthOrchestrator.getServiceHealth(serviceName));
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[16]++;
    if (!serviceHealth) {
      /* istanbul ignore next */
      cov_2qthh0jkbk().b[3][0]++;
      cov_2qthh0jkbk().s[17]++;
      return res.status(404).json({
        error: 'Service not found',
        serviceName
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qthh0jkbk().b[3][1]++;
    }
    const statusCode =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[18]++, serviceHealth.status === 'healthy' ?
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[4][0]++, 200) :
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[4][1]++, serviceHealth.status === 'degraded' ?
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[5][0]++, 200) :
    /* istanbul ignore next */
    (cov_2qthh0jkbk().b[5][1]++, 503)));
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[19]++;
    res.status(statusCode).json({
      ...serviceHealth,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[20]++;
    res.status(500).json({
      error: 'Failed to get service health',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[6][1]++, 'Unknown error')
    });
  }
});
// Get health summary for dashboard
/* istanbul ignore next */
cov_2qthh0jkbk().s[21]++;
router.get('/summary', async (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[2]++;
  cov_2qthh0jkbk().s[22]++;
  try {
    const systemHealth =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[23]++, HealthOrchestrator_1.healthOrchestrator.getSystemHealth());
    const summary =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[24]++, {
      overallStatus: systemHealth.overallStatus,
      totalServices: systemHealth.totalServices,
      healthyServices: systemHealth.healthyServices,
      degradedServices: systemHealth.degradedServices,
      unhealthyServices: systemHealth.unhealthyServices,
      offlineServices: systemHealth.offlineServices,
      lastCheck: systemHealth.lastFullCheck,
      healthPercentage: Math.round(systemHealth.healthyServices / systemHealth.totalServices * 100),
      criticalServices: Array.from(systemHealth.services.values()).filter(s => {
        /* istanbul ignore next */
        cov_2qthh0jkbk().f[3]++;
        cov_2qthh0jkbk().s[25]++;
        return s.criticalService;
      }).map(s => {
        /* istanbul ignore next */
        cov_2qthh0jkbk().f[4]++;
        cov_2qthh0jkbk().s[26]++;
        return {
          name: s.name,
          status: s.status,
          lastCheck: s.lastCheck,
          responseTime: s.responseTime
        };
      }),
      recentIssues: Array.from(systemHealth.services.values()).filter(s => {
        /* istanbul ignore next */
        cov_2qthh0jkbk().f[5]++;
        cov_2qthh0jkbk().s[27]++;
        return s.status !== 'healthy';
      }).map(s => {
        /* istanbul ignore next */
        cov_2qthh0jkbk().f[6]++;
        cov_2qthh0jkbk().s[28]++;
        return {
          service: s.name,
          status: s.status,
          message: s.message,
          lastCheck: s.lastCheck
        };
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_2qthh0jkbk().f[7]++;
        cov_2qthh0jkbk().s[29]++;
        return new Date(b.lastCheck).getTime() - new Date(a.lastCheck).getTime();
      }).slice(0, 10)
    });
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[30]++;
    res.json(summary);
  } catch (error) {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[31]++;
    res.status(500).json({
      error: 'Failed to get health summary',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[7][1]++, 'Unknown error')
    });
  }
});
// Start health monitoring
/* istanbul ignore next */
cov_2qthh0jkbk().s[32]++;
router.post('/start', async (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[8]++;
  cov_2qthh0jkbk().s[33]++;
  try {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[34]++;
    await HealthOrchestrator_1.healthOrchestrator.start();
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[35]++;
    res.json({
      message: 'Health monitoring started',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[36]++;
    res.status(500).json({
      error: 'Failed to start health monitoring',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[8][1]++, 'Unknown error')
    });
  }
});
// Stop health monitoring
/* istanbul ignore next */
cov_2qthh0jkbk().s[37]++;
router.post('/stop', async (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[9]++;
  cov_2qthh0jkbk().s[38]++;
  try {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[39]++;
    await HealthOrchestrator_1.healthOrchestrator.stop();
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[40]++;
    res.json({
      message: 'Health monitoring stopped',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[41]++;
    res.status(500).json({
      error: 'Failed to stop health monitoring',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[9][1]++, 'Unknown error')
    });
  }
});
// Update health monitoring configuration
/* istanbul ignore next */
cov_2qthh0jkbk().s[42]++;
router.put('/config', async (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[10]++;
  cov_2qthh0jkbk().s[43]++;
  try {
    const config =
    /* istanbul ignore next */
    (cov_2qthh0jkbk().s[44]++, req.body);
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[45]++;
    HealthOrchestrator_1.healthOrchestrator.updateConfig(config);
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[46]++;
    res.json({
      message: 'Health monitoring configuration updated',
      config,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[47]++;
    res.status(500).json({
      error: 'Failed to update configuration',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2qthh0jkbk().b[10][1]++, 'Unknown error')
    });
  }
});
// Health events stream (for real-time updates)
/* istanbul ignore next */
cov_2qthh0jkbk().s[48]++;
router.get('/events', (req, res) => {
  /* istanbul ignore next */
  cov_2qthh0jkbk().f[11]++;
  cov_2qthh0jkbk().s[49]++;
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[50]++;
  const sendEvent = data => {
    /* istanbul ignore next */
    cov_2qthh0jkbk().f[12]++;
    cov_2qthh0jkbk().s[51]++;
    res.write(`data: ${JSON.stringify(data)}\n\n`);
  };
  // Send initial system health
  const initialHealth =
  /* istanbul ignore next */
  (cov_2qthh0jkbk().s[52]++, HealthOrchestrator_1.healthOrchestrator.getSystemHealth());
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[53]++;
  sendEvent({
    type: 'initial',
    data: {
      ...initialHealth,
      services: Object.fromEntries(initialHealth.services)
    }
  });
  // Set up event listeners
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[54]++;
  const onServiceStatusChanged = data => {
    /* istanbul ignore next */
    cov_2qthh0jkbk().f[13]++;
    cov_2qthh0jkbk().s[55]++;
    sendEvent({
      type: 'serviceStatusChanged',
      data
    });
  };
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[56]++;
  const onFullHealthCheckComplete = data => {
    /* istanbul ignore next */
    cov_2qthh0jkbk().f[14]++;
    cov_2qthh0jkbk().s[57]++;
    sendEvent({
      type: 'fullHealthCheckComplete',
      data: {
        ...data.systemHealth,
        services: Object.fromEntries(data.systemHealth.services)
      }
    });
  };
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[58]++;
  const onCriticalServiceDown = data => {
    /* istanbul ignore next */
    cov_2qthh0jkbk().f[15]++;
    cov_2qthh0jkbk().s[59]++;
    sendEvent({
      type: 'criticalServiceDown',
      data
    });
  };
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[60]++;
  HealthOrchestrator_1.healthOrchestrator.on('serviceStatusChanged', onServiceStatusChanged);
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[61]++;
  HealthOrchestrator_1.healthOrchestrator.on('fullHealthCheckComplete', onFullHealthCheckComplete);
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[62]++;
  HealthOrchestrator_1.healthOrchestrator.on('criticalServiceDown', onCriticalServiceDown);
  // Handle client disconnect
  /* istanbul ignore next */
  cov_2qthh0jkbk().s[63]++;
  req.on('close', () => {
    /* istanbul ignore next */
    cov_2qthh0jkbk().f[16]++;
    cov_2qthh0jkbk().s[64]++;
    HealthOrchestrator_1.healthOrchestrator.off('serviceStatusChanged', onServiceStatusChanged);
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[65]++;
    HealthOrchestrator_1.healthOrchestrator.off('fullHealthCheckComplete', onFullHealthCheckComplete);
    /* istanbul ignore next */
    cov_2qthh0jkbk().s[66]++;
    HealthOrchestrator_1.healthOrchestrator.off('criticalServiceDown', onCriticalServiceDown);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,