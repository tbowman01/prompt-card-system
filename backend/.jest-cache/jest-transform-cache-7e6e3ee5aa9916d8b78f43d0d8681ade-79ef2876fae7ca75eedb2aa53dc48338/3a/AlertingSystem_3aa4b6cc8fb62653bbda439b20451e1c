b9f2009104ada218d0812971dd96ccad
"use strict";

/* istanbul ignore next */
function cov_188owcs071() {
  var path = "/workspaces/prompt-card-system/backend/src/services/health/AlertingSystem.ts";
  var hash = "6e6811e59db3ace7151a7d67b46d19f4c3968f8c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/health/AlertingSystem.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 101
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 12,
          column: 66
        }
      },
      "6": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 35
        }
      },
      "7": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 43
        }
      },
      "9": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "10": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "11": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "12": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 57
        }
      },
      "13": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 59
        }
      },
      "14": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 67
        }
      },
      "15": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 67
        }
      },
      "16": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 55
        }
      },
      "17": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 59
        }
      },
      "18": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "19": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 16
        }
      },
      "20": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "21": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "22": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "23": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "24": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "25": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "26": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 38
        }
      },
      "27": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "28": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "29": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 58
        }
      },
      "30": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 118
        }
      },
      "31": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 117
        }
      },
      "32": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 117
        }
      },
      "33": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 112
        }
      },
      "34": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 112
        }
      },
      "35": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 35
        }
      },
      "36": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 34
        }
      },
      "37": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "38": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "39": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "40": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "41": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "42": {
        start: {
          line: 121,
          column: 82
        },
        end: {
          line: 121,
          column: 87
        }
      },
      "43": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "44": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "45": {
        start: {
          line: 131,
          column: 13
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "46": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "47": {
        start: {
          line: 139,
          column: 13
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "48": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "49": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "50": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 66
        }
      },
      "51": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "52": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "53": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 157,
          column: 23
        }
      },
      "54": {
        start: {
          line: 163,
          column: 50
        },
        end: {
          line: 163,
          column: 55
        }
      },
      "55": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "56": {
        start: {
          line: 173,
          column: 33
        },
        end: {
          line: 173,
          column: 38
        }
      },
      "57": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "58": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "59": {
        start: {
          line: 189,
          column: 54
        },
        end: {
          line: 189,
          column: 59
        }
      },
      "60": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "61": {
        start: {
          line: 198,
          column: 40
        },
        end: {
          line: 198,
          column: 45
        }
      },
      "62": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "63": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 209,
          column: 19
        }
      },
      "64": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 19
        }
      },
      "65": {
        start: {
          line: 210,
          column: 21
        },
        end: {
          line: 210,
          column: 71
        }
      },
      "66": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 212,
          column: 19
        }
      },
      "67": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 19
        }
      },
      "68": {
        start: {
          line: 214,
          column: 28
        },
        end: {
          line: 214,
          column: 62
        }
      },
      "69": {
        start: {
          line: 215,
          column: 26
        },
        end: {
          line: 215,
          column: 58
        }
      },
      "70": {
        start: {
          line: 216,
          column: 31
        },
        end: {
          line: 216,
          column: 98
        }
      },
      "71": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "72": {
        start: {
          line: 218,
          column: 39
        },
        end: {
          line: 218,
          column: 71
        }
      },
      "73": {
        start: {
          line: 219,
          column: 31
        },
        end: {
          line: 219,
          column: 57
        }
      },
      "74": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "75": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 102
        }
      },
      "76": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 23
        }
      },
      "77": {
        start: {
          line: 226,
          column: 24
        },
        end: {
          line: 226,
          column: 65
        }
      },
      "78": {
        start: {
          line: 227,
          column: 25
        },
        end: {
          line: 227,
          column: 55
        }
      },
      "79": {
        start: {
          line: 228,
          column: 28
        },
        end: {
          line: 228,
          column: 63
        }
      },
      "80": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "81": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 75
        }
      },
      "82": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 19
        }
      },
      "83": {
        start: {
          line: 234,
          column: 22
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "84": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 53
        }
      },
      "85": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 56
        }
      },
      "86": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 44
        }
      },
      "87": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 95
        }
      },
      "88": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "89": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "90": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 250,
          column: 17
        }
      },
      "91": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 32
        }
      },
      "92": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 25
        }
      },
      "93": {
        start: {
          line: 256,
          column: 22
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "94": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 41
        }
      },
      "95": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 41
        }
      },
      "96": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 21
        }
      },
      "97": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "98": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "99": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 80
        }
      },
      "100": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "101": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 76
        }
      },
      "102": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "103": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 76
        }
      },
      "104": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 71
        }
      },
      "105": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "106": {
        start: {
          line: 291,
          column: 28
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "107": {
        start: {
          line: 302,
          column: 29
        },
        end: {
          line: 308,
          column: 14
        }
      },
      "108": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "109": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 93
        }
      },
      "110": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 65
        }
      },
      "111": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "112": {
        start: {
          line: 319,
          column: 26
        },
        end: {
          line: 323,
          column: 29
        }
      },
      "113": {
        start: {
          line: 324,
          column: 28
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "114": {
        start: {
          line: 344,
          column: 29
        },
        end: {
          line: 350,
          column: 14
        }
      },
      "115": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "116": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 104
        }
      },
      "117": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 63
        }
      },
      "118": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 99
        }
      },
      "119": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 43
        }
      },
      "120": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 54
        }
      },
      "121": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 54
        }
      },
      "122": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "123": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 57
        }
      },
      "124": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 23
        }
      },
      "125": {
        start: {
          line: 376,
          column: 21
        },
        end: {
          line: 376,
          column: 48
        }
      },
      "126": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 378,
          column: 25
        }
      },
      "127": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 25
        }
      },
      "128": {
        start: {
          line: 379,
          column: 28
        },
        end: {
          line: 379,
          column: 51
        }
      },
      "129": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 49
        }
      },
      "130": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 53
        }
      },
      "131": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 20
        }
      },
      "132": {
        start: {
          line: 385,
          column: 22
        },
        end: {
          line: 385,
          column: 46
        }
      },
      "133": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 387,
          column: 25
        }
      },
      "134": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 25
        }
      },
      "135": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 34
        }
      },
      "136": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 40
        }
      },
      "137": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 46
        }
      },
      "138": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 391,
          column: 20
        }
      },
      "139": {
        start: {
          line: 394,
          column: 22
        },
        end: {
          line: 394,
          column: 46
        }
      },
      "140": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 396,
          column: 25
        }
      },
      "141": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 25
        }
      },
      "142": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 397,
          column: 38
        }
      },
      "143": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 40
        }
      },
      "144": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 42
        }
      },
      "145": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 400,
          column: 20
        }
      },
      "146": {
        start: {
          line: 403,
          column: 21
        },
        end: {
          line: 403,
          column: 53
        }
      },
      "147": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "148": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 407,
          column: 13
        }
      },
      "149": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 75
        }
      },
      "150": {
        start: {
          line: 406,
          column: 44
        },
        end: {
          line: 406,
          column: 73
        }
      },
      "151": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "152": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 77
        }
      },
      "153": {
        start: {
          line: 409,
          column: 44
        },
        end: {
          line: 409,
          column: 75
        }
      },
      "154": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 413,
          column: 13
        }
      },
      "155": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 85
        }
      },
      "156": {
        start: {
          line: 412,
          column: 44
        },
        end: {
          line: 412,
          column: 83
        }
      },
      "157": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "158": {
        start: {
          line: 415,
          column: 36
        },
        end: {
          line: 415,
          column: 65
        }
      },
      "159": {
        start: {
          line: 415,
          column: 47
        },
        end: {
          line: 415,
          column: 65
        }
      },
      "160": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 81
        }
      },
      "161": {
        start: {
          line: 416,
          column: 44
        },
        end: {
          line: 416,
          column: 79
        }
      },
      "162": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 77
        }
      },
      "163": {
        start: {
          line: 420,
          column: 30
        },
        end: {
          line: 420,
          column: 75
        }
      },
      "164": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "165": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 52
        }
      },
      "166": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 22
        }
      },
      "167": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 52
        }
      },
      "168": {
        start: {
          line: 430,
          column: 23
        },
        end: {
          line: 430,
          column: 55
        }
      },
      "169": {
        start: {
          line: 431,
          column: 22
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "170": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 449,
          column: 9
        }
      },
      "171": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 47
        }
      },
      "172": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 87
        }
      },
      "173": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 446,
          column: 37
        }
      },
      "174": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 37
        }
      },
      "175": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 448,
          column: 33
        }
      },
      "176": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 33
        }
      },
      "177": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 21
        }
      },
      "178": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 456,
          column: 32
        }
      },
      "179": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 36
        }
      },
      "180": {
        start: {
          line: 459,
          column: 27
        },
        end: {
          line: 459,
          column: 37
        }
      },
      "181": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 460,
          column: 77
        }
      },
      "182": {
        start: {
          line: 461,
          column: 27
        },
        end: {
          line: 461,
          column: 28
        }
      },
      "183": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "184": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 466,
          column: 13
        }
      },
      "185": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 39
        }
      },
      "186": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 31
        }
      },
      "187": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "188": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 65
        }
      },
      "189": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 55
        }
      },
      "190": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 61
        }
      },
      "191": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 56
        }
      },
      "192": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 35
        }
      },
      "193": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 34
        }
      },
      "194": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 57
        }
      },
      "195": {
        start: {
          line: 483,
          column: 0
        },
        end: {
          line: 483,
          column: 40
        }
      },
      "196": {
        start: {
          line: 484,
          column: 0
        },
        end: {
          line: 484,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 1
          },
          end: {
            line: 8,
            column: 2
          }
        },
        loc: {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 1
          },
          end: {
            line: 14,
            column: 2
          }
        },
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 23
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 37
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 37
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 162
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 33
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 172
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 38
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 38
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 197
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 32
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 207
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 36
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 245
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 24
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 255
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 41
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 270
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 53
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 289
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 317,
            column: 4
          },
          end: {
            line: 317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 317,
            column: 52
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 317
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 47
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 359
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 23
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 364
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 28
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 368
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 37
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 375
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 30
          },
          end: {
            line: 392,
            column: 5
          }
        },
        line: 384
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 26
          },
          end: {
            line: 401,
            column: 5
          }
        },
        line: 393
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 402,
            column: 4
          },
          end: {
            line: 402,
            column: 5
          }
        },
        loc: {
          start: {
            line: 402,
            column: 23
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 402
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 406,
            column: 39
          },
          end: {
            line: 406,
            column: 40
          }
        },
        loc: {
          start: {
            line: 406,
            column: 44
          },
          end: {
            line: 406,
            column: 73
          }
        },
        line: 406
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 409,
            column: 39
          },
          end: {
            line: 409,
            column: 40
          }
        },
        loc: {
          start: {
            line: 409,
            column: 44
          },
          end: {
            line: 409,
            column: 75
          }
        },
        line: 409
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 412,
            column: 39
          },
          end: {
            line: 412,
            column: 40
          }
        },
        loc: {
          start: {
            line: 412,
            column: 44
          },
          end: {
            line: 412,
            column: 83
          }
        },
        line: 412
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 415,
            column: 36
          },
          end: {
            line: 415,
            column: 37
          }
        },
        loc: {
          start: {
            line: 415,
            column: 47
          },
          end: {
            line: 415,
            column: 65
          }
        },
        line: 415
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 416,
            column: 39
          },
          end: {
            line: 416,
            column: 40
          }
        },
        loc: {
          start: {
            line: 416,
            column: 44
          },
          end: {
            line: 416,
            column: 79
          }
        },
        line: 416
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 420,
            column: 20
          },
          end: {
            line: 420,
            column: 21
          }
        },
        loc: {
          start: {
            line: 420,
            column: 30
          },
          end: {
            line: 420,
            column: 75
          }
        },
        line: 420
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 20
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 426
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 429,
            column: 5
          }
        },
        loc: {
          start: {
            line: 429,
            column: 20
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 429
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 26
          },
          end: {
            line: 457,
            column: 5
          }
        },
        line: 452
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 454,
            column: 20
          },
          end: {
            line: 454,
            column: 21
          }
        },
        loc: {
          start: {
            line: 454,
            column: 26
          },
          end: {
            line: 456,
            column: 9
          }
        },
        line: 454
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 458,
            column: 4
          },
          end: {
            line: 458,
            column: 5
          }
        },
        loc: {
          start: {
            line: 458,
            column: 23
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 458
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 28
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 472
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 21
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 476
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 3
          },
          end: {
            line: 12,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 3
          },
          end: {
            line: 12,
            column: 16
          }
        }, {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 63
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 3
          },
          end: {
            line: 24,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 3
          },
          end: {
            line: 24,
            column: 12
          }
        }, {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 51
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 27
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 44,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 44,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: 131,
            column: 13
          },
          end: {
            line: 146,
            column: 9
          }
        }],
        line: 123
      },
      "5": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 42
          }
        }, {
          start: {
            line: 123,
            column: 46
          },
          end: {
            line: 123,
            column: 71
          }
        }],
        line: 123
      },
      "6": {
        loc: {
          start: {
            line: 131,
            column: 13
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 13
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: 139,
            column: 13
          },
          end: {
            line: 146,
            column: 9
          }
        }],
        line: 131
      },
      "7": {
        loc: {
          start: {
            line: 131,
            column: 17
          },
          end: {
            line: 131,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 17
          },
          end: {
            line: 131,
            column: 47
          }
        }, {
          start: {
            line: 131,
            column: 51
          },
          end: {
            line: 131,
            column: 74
          }
        }],
        line: 131
      },
      "8": {
        loc: {
          start: {
            line: 139,
            column: 13
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 13
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "9": {
        loc: {
          start: {
            line: 139,
            column: 17
          },
          end: {
            line: 139,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 17
          },
          end: {
            line: 139,
            column: 46
          }
        }, {
          start: {
            line: 139,
            column: 50
          },
          end: {
            line: 139,
            column: 74
          }
        }],
        line: 139
      },
      "10": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "11": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 29
          }
        }, {
          start: {
            line: 150,
            column: 33
          },
          end: {
            line: 150,
            column: 73
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "14": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "15": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 209,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 209,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "16": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 212,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 212,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "17": {
        loc: {
          start: {
            line: 216,
            column: 31
          },
          end: {
            line: 216,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 31
          },
          end: {
            line: 216,
            column: 61
          }
        }, {
          start: {
            line: 216,
            column: 65
          },
          end: {
            line: 216,
            column: 98
          }
        }],
        line: 216
      },
      "18": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "19": {
        loc: {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "20": {
        loc: {
          start: {
            line: 228,
            column: 28
          },
          end: {
            line: 228,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 28
          },
          end: {
            line: 228,
            column: 58
          }
        }, {
          start: {
            line: 228,
            column: 62
          },
          end: {
            line: 228,
            column: 63
          }
        }],
        line: 228
      },
      "21": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "22": {
        loc: {
          start: {
            line: 236,
            column: 22
          },
          end: {
            line: 236,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 22
          },
          end: {
            line: 236,
            column: 42
          }
        }, {
          start: {
            line: 236,
            column: 46
          },
          end: {
            line: 236,
            column: 59
          }
        }],
        line: 236
      },
      "23": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 248,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 248,
            column: 45
          }
        }, {
          start: {
            line: 248,
            column: 49
          },
          end: {
            line: 248,
            column: 91
          }
        }],
        line: 248
      },
      "26": {
        loc: {
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "27": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "28": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "29": {
        loc: {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 281,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 281,
            column: 34
          }
        }, {
          start: {
            line: 281,
            column: 38
          },
          end: {
            line: 281,
            column: 67
          }
        }],
        line: 281
      },
      "30": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "31": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "32": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "33": {
        loc: {
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 378,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 378,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "34": {
        loc: {
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 387,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 387,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "35": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 396,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 396,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "36": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "37": {
        loc: {
          start: {
            line: 405,
            column: 12
          },
          end: {
            line: 407,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 12
          },
          end: {
            line: 407,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "38": {
        loc: {
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "39": {
        loc: {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 413,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 413,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "40": {
        loc: {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 417,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 417,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "41": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "42": {
        loc: {
          start: {
            line: 444,
            column: 46
          },
          end: {
            line: 444,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 46
          },
          end: {
            line: 444,
            column: 76
          }
        }, {
          start: {
            line: 444,
            column: 80
          },
          end: {
            line: 444,
            column: 81
          }
        }],
        line: 444
      },
      "43": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 446,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 446,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "44": {
        loc: {
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 448,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 448,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "45": {
        loc: {
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 466,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 466,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      },
      "46": {
        loc: {
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/health/AlertingSystem.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/health/AlertingSystem.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { healthOrchestrator } from './HealthOrchestrator';\nimport { circuitBreakerRegistry } from './CircuitBreaker';\n\nexport enum AlertSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  CRITICAL = 'critical'\n}\n\nexport enum AlertType {\n  SERVICE_DOWN = 'service_down',\n  SERVICE_DEGRADED = 'service_degraded',\n  SERVICE_RECOVERED = 'service_recovered',\n  HIGH_RESPONSE_TIME = 'high_response_time',\n  CIRCUIT_BREAKER_OPENED = 'circuit_breaker_opened',\n  CIRCUIT_BREAKER_CLOSED = 'circuit_breaker_closed',\n  SYSTEM_UNHEALTHY = 'system_unhealthy',\n  DEPENDENCY_FAILURE = 'dependency_failure',\n  PERFORMANCE = 'performance'\n}\n\ninterface Alert {\n  id: string;\n  type: AlertType;\n  severity: AlertSeverity;\n  service: string;\n  message: string;\n  details: any;\n  timestamp: Date;\n  acknowledged: boolean;\n  resolvedAt?: Date;\n}\n\ninterface AlertRule {\n  id: string;\n  name: string;\n  type: AlertType;\n  severity: AlertSeverity;\n  enabled: boolean;\n  conditions: {\n    services?: string[];\n    thresholds?: {\n      responseTime?: number;\n      errorRate?: number;\n      consecutiveFailures?: number;\n    };\n    cooldownPeriod?: number; // minutes\n  };\n  actions: {\n    email?: string[];\n    webhook?: string;\n    slack?: {\n      channel: string;\n      webhook: string;\n    };\n  };\n}\n\ninterface AlertingConfig {\n  enabled: boolean;\n  defaultCooldownPeriod: number; // minutes\n  maxAlertsPerHour: number;\n  retentionDays: number;\n}\n\nexport class AlertingSystem extends EventEmitter {\n  private alerts: Map<string, Alert> = new Map();\n  private alertRules: Map<string, AlertRule> = new Map();\n  private config: AlertingConfig;\n  private alertCounts: Map<string, number> = new Map();\n  private lastAlerts: Map<string, Date> = new Map();\n  private isInitialized = false;\n\n  constructor(config: Partial<AlertingConfig> = {}) {\n    super();\n    \n    this.config = {\n      enabled: true,\n      defaultCooldownPeriod: 15, // 15 minutes\n      maxAlertsPerHour: 10,\n      retentionDays: 30,\n      ...config\n    };\n\n    this.initializeDefaultRules();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    console.log('\uD83D\uDEA8 Initializing Alerting System...');\n\n    // Listen to health orchestrator events\n    healthOrchestrator.on('serviceStatusChanged', this.handleServiceStatusChange.bind(this));\n    healthOrchestrator.on('criticalServiceDown', this.handleCriticalServiceDown.bind(this));\n    healthOrchestrator.on('fullHealthCheckComplete', this.handleFullHealthCheck.bind(this));\n\n    // Listen to circuit breaker events\n    circuitBreakerRegistry.on('breakerOpened', this.handleCircuitBreakerOpened.bind(this));\n    circuitBreakerRegistry.on('breakerClosed', this.handleCircuitBreakerClosed.bind(this));\n\n    // Start cleanup process\n    this.startCleanupProcess();\n\n    this.isInitialized = true;\n    console.log('\u2705 Alerting System initialized');\n  }\n\n  private initializeDefaultRules(): void {\n    // Critical service down rule\n    this.addAlertRule({\n      id: 'critical-service-down',\n      name: 'Critical Service Down',\n      type: AlertType.SERVICE_DOWN,\n      severity: AlertSeverity.CRITICAL,\n      enabled: true,\n      conditions: {\n        services: ['database', 'ollama', 'frontend', 'backend']\n      },\n      actions: {\n        // Configure these based on your notification preferences\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n\n    // High response time rule\n    this.addAlertRule({\n      id: 'high-response-time',\n      name: 'High Response Time',\n      type: AlertType.HIGH_RESPONSE_TIME,\n      severity: AlertSeverity.WARNING,\n      enabled: true,\n      conditions: {\n        thresholds: {\n          responseTime: 10000 // 10 seconds\n        },\n        cooldownPeriod: 5 // 5 minutes\n      },\n      actions: {\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n\n    // Circuit breaker opened rule\n    this.addAlertRule({\n      id: 'circuit-breaker-opened',\n      name: 'Circuit Breaker Opened',\n      type: AlertType.CIRCUIT_BREAKER_OPENED,\n      severity: AlertSeverity.CRITICAL,\n      enabled: true,\n      conditions: {\n        cooldownPeriod: 1 // 1 minute\n      },\n      actions: {\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n\n    // System unhealthy rule\n    this.addAlertRule({\n      id: 'system-unhealthy',\n      name: 'System Unhealthy',\n      type: AlertType.SYSTEM_UNHEALTHY,\n      severity: AlertSeverity.CRITICAL,\n      enabled: true,\n      conditions: {\n        cooldownPeriod: 10 // 10 minutes\n      },\n      actions: {\n        webhook: process.env.ALERT_WEBHOOK_URL\n      }\n    });\n  }\n\n  private handleServiceStatusChange(event: any): void {\n    const { serviceName, previousStatus, newStatus, responseTime, message } = event;\n\n    // Check for service down/recovery\n    if (previousStatus !== 'unhealthy' && newStatus === 'unhealthy') {\n      this.checkAndCreateAlert({\n        type: AlertType.SERVICE_DOWN,\n        service: serviceName,\n        message: `Service ${serviceName} is down: ${message}`,\n        details: { previousStatus, newStatus, responseTime }\n      });\n    } else if (previousStatus === 'unhealthy' && newStatus === 'healthy') {\n      this.checkAndCreateAlert({\n        type: AlertType.SERVICE_RECOVERED,\n        service: serviceName,\n        message: `Service ${serviceName} has recovered`,\n        details: { previousStatus, newStatus, responseTime }\n      });\n    } else if (previousStatus !== 'degraded' && newStatus === 'degraded') {\n      this.checkAndCreateAlert({\n        type: AlertType.SERVICE_DEGRADED,\n        service: serviceName,\n        message: `Service ${serviceName} is degraded: ${message}`,\n        details: { previousStatus, newStatus, responseTime }\n      });\n    }\n\n    // Check for high response time\n    if (responseTime > 0) {\n      const rule = this.alertRules.get('high-response-time');\n      if (rule?.enabled && rule.conditions.thresholds?.responseTime) {\n        if (responseTime > rule.conditions.thresholds.responseTime) {\n          this.checkAndCreateAlert({\n            type: AlertType.HIGH_RESPONSE_TIME,\n            service: serviceName,\n            message: `High response time for ${serviceName}: ${responseTime}ms`,\n            details: { responseTime, threshold: rule.conditions.thresholds.responseTime }\n          });\n        }\n      }\n    }\n  }\n\n  private handleCriticalServiceDown(event: any): void {\n    const { serviceName, message, details } = event;\n    \n    this.checkAndCreateAlert({\n      type: AlertType.SERVICE_DOWN,\n      service: serviceName,\n      message: `Critical service ${serviceName} is down: ${message}`,\n      details,\n      forceSeverity: AlertSeverity.CRITICAL\n    });\n  }\n\n  private handleFullHealthCheck(event: any): void {\n    const { systemHealth } = event;\n    \n    if (systemHealth.overallStatus === 'unhealthy') {\n      this.checkAndCreateAlert({\n        type: AlertType.SYSTEM_UNHEALTHY,\n        service: 'system',\n        message: `System is unhealthy: ${systemHealth.unhealthyServices} unhealthy services`,\n        details: {\n          totalServices: systemHealth.totalServices,\n          healthyServices: systemHealth.healthyServices,\n          unhealthyServices: systemHealth.unhealthyServices,\n          degradedServices: systemHealth.degradedServices\n        }\n      });\n    }\n  }\n\n  private handleCircuitBreakerOpened(event: any): void {\n    const { serviceName, failureCount, reason } = event;\n    \n    this.checkAndCreateAlert({\n      type: AlertType.CIRCUIT_BREAKER_OPENED,\n      service: serviceName,\n      message: `Circuit breaker opened for ${serviceName}: ${reason}`,\n      details: { failureCount, reason }\n    });\n  }\n\n  private handleCircuitBreakerClosed(event: any): void {\n    const { serviceName, reason } = event;\n    \n    this.checkAndCreateAlert({\n      type: AlertType.CIRCUIT_BREAKER_CLOSED,\n      service: serviceName,\n      message: `Circuit breaker closed for ${serviceName}: ${reason}`,\n      details: { reason },\n      forceSeverity: AlertSeverity.INFO\n    });\n  }\n\n  public checkAndCreateAlert(params: {\n    type: AlertType;\n    service: string;\n    message: string;\n    details: any;\n    forceSeverity?: AlertSeverity;\n  }): void {\n    if (!this.config.enabled) return;\n\n    const rule = this.findMatchingRule(params.type, params.service);\n    if (!rule?.enabled) return;\n\n    // Check cooldown period\n    const cooldownKey = `${params.type}-${params.service}`;\n    const lastAlert = this.lastAlerts.get(cooldownKey);\n    const cooldownPeriod = rule.conditions.cooldownPeriod || this.config.defaultCooldownPeriod;\n    \n    if (lastAlert) {\n      const timeSinceLastAlert = Date.now() - lastAlert.getTime();\n      const cooldownMs = cooldownPeriod * 60 * 1000;\n      \n      if (timeSinceLastAlert < cooldownMs) {\n        console.log(`Alert suppressed due to cooldown: ${params.type} for ${params.service}`);\n        return;\n      }\n    }\n\n    // Check rate limiting\n    const hourKey = Math.floor(Date.now() / (60 * 60 * 1000));\n    const countKey = `${hourKey}-${params.service}`;\n    const hourlyCount = this.alertCounts.get(countKey) || 0;\n    \n    if (hourlyCount >= this.config.maxAlertsPerHour) {\n      console.log(`Alert rate limit exceeded for ${params.service}`);\n      return;\n    }\n\n    // Create alert\n    const alert = this.createAlert({\n      ...params,\n      severity: params.forceSeverity || rule.severity\n    });\n\n    // Update tracking\n    this.lastAlerts.set(cooldownKey, new Date());\n    this.alertCounts.set(countKey, hourlyCount + 1);\n\n    // Send notifications\n    this.sendNotifications(alert, rule);\n\n    console.log(`\uD83D\uDEA8 Alert created: ${alert.type} for ${alert.service} - ${alert.message}`);\n  }\n\n  private findMatchingRule(type: AlertType, service: string): AlertRule | undefined {\n    for (const rule of this.alertRules.values()) {\n      if (rule.type === type) {\n        if (!rule.conditions.services || rule.conditions.services.includes(service)) {\n          return rule;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  private createAlert(params: {\n    type: AlertType;\n    service: string;\n    message: string;\n    details: any;\n    severity: AlertSeverity;\n  }): Alert {\n    const alert: Alert = {\n      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: params.type,\n      severity: params.severity,\n      service: params.service,\n      message: params.message,\n      details: params.details,\n      timestamp: new Date(),\n      acknowledged: false\n    };\n\n    this.alerts.set(alert.id, alert);\n    this.emit('alertCreated', alert);\n    \n    return alert;\n  }\n\n  private async sendNotifications(alert: Alert, rule: AlertRule): Promise<void> {\n    try {\n      // Webhook notification\n      if (rule.actions.webhook) {\n        await this.sendWebhookNotification(alert, rule.actions.webhook);\n      }\n\n      // Slack notification (if configured)\n      if (rule.actions.slack) {\n        await this.sendSlackNotification(alert, rule.actions.slack);\n      }\n\n      // Email notification (if configured)\n      if (rule.actions.email && rule.actions.email.length > 0) {\n        await this.sendEmailNotification(alert, rule.actions.email);\n      }\n    } catch (error) {\n      console.error('Failed to send alert notification:', error);\n    }\n  }\n\n  private async sendWebhookNotification(alert: Alert, webhookUrl: string): Promise<void> {\n    try {\n      const payload = {\n        alert: {\n          id: alert.id,\n          type: alert.type,\n          severity: alert.severity,\n          service: alert.service,\n          message: alert.message,\n          timestamp: alert.timestamp.toISOString()\n        },\n        system: 'prompt-card-health-monitor'\n      };\n\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Webhook notification failed:', error);\n    }\n  }\n\n  private async sendSlackNotification(alert: Alert, slackConfig: { channel: string; webhook: string }): Promise<void> {\n    try {\n      const color = {\n        [AlertSeverity.INFO]: '#36a64f',\n        [AlertSeverity.WARNING]: '#ffeb3b',\n        [AlertSeverity.CRITICAL]: '#f44336'\n      }[alert.severity];\n\n      const payload = {\n        channel: slackConfig.channel,\n        attachments: [{\n          color,\n          title: `${alert.severity.toUpperCase()}: ${alert.type.replace('_', ' ').toUpperCase()}`,\n          text: alert.message,\n          fields: [\n            {\n              title: 'Service',\n              value: alert.service,\n              short: true\n            },\n            {\n              title: 'Time',\n              value: alert.timestamp.toISOString(),\n              short: true\n            }\n          ]\n        }]\n      };\n\n      const response = await fetch(slackConfig.webhook, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Slack notification failed: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Slack notification failed:', error);\n    }\n  }\n\n  private async sendEmailNotification(alert: Alert, emails: string[]): Promise<void> {\n    // Email implementation would depend on your email service\n    // This is a placeholder for the email notification logic\n    console.log(`Email notification sent to ${emails.join(', ')} for alert: ${alert.message}`);\n  }\n\n  public addAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule);\n    console.log(`Alert rule added: ${rule.name}`);\n  }\n\n  public removeAlertRule(ruleId: string): boolean {\n    const removed = this.alertRules.delete(ruleId);\n    if (removed) {\n      console.log(`Alert rule removed: ${ruleId}`);\n    }\n    return removed;\n  }\n\n  public updateAlertRule(ruleId: string, updates: Partial<AlertRule>): boolean {\n    const rule = this.alertRules.get(ruleId);\n    if (!rule) return false;\n\n    const updatedRule = { ...rule, ...updates };\n    this.alertRules.set(ruleId, updatedRule);\n    console.log(`Alert rule updated: ${ruleId}`);\n    return true;\n  }\n\n  public acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) return false;\n\n    alert.acknowledged = true;\n    this.alerts.set(alertId, alert);\n    this.emit('alertAcknowledged', alert);\n    return true;\n  }\n\n  public resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.get(alertId);\n    if (!alert) return false;\n\n    alert.resolvedAt = new Date();\n    this.alerts.set(alertId, alert);\n    this.emit('alertResolved', alert);\n    return true;\n  }\n\n  public getAlerts(filters?: {\n    service?: string;\n    severity?: AlertSeverity;\n    acknowledged?: boolean;\n    resolved?: boolean;\n    limit?: number;\n  }): Alert[] {\n    let alerts = Array.from(this.alerts.values());\n\n    if (filters) {\n      if (filters.service) {\n        alerts = alerts.filter(a => a.service === filters.service);\n      }\n      if (filters.severity) {\n        alerts = alerts.filter(a => a.severity === filters.severity);\n      }\n      if (filters.acknowledged !== undefined) {\n        alerts = alerts.filter(a => a.acknowledged === filters.acknowledged);\n      }\n      if (filters.resolved !== undefined) {\n        const hasResolved = (alert: Alert) => !!alert.resolvedAt;\n        alerts = alerts.filter(a => hasResolved(a) === filters.resolved);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    alerts.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    if (filters?.limit) {\n      alerts = alerts.slice(0, filters.limit);\n    }\n\n    return alerts;\n  }\n\n  public getAlertRules(): AlertRule[] {\n    return Array.from(this.alertRules.values());\n  }\n\n  public getAlertStats(): {\n    total: number;\n    bySeverity: Record<AlertSeverity, number>;\n    byService: Record<string, number>;\n    acknowledged: number;\n    resolved: number;\n  } {\n    const alerts = Array.from(this.alerts.values());\n    const stats = {\n      total: alerts.length,\n      bySeverity: {\n        [AlertSeverity.INFO]: 0,\n        [AlertSeverity.WARNING]: 0,\n        [AlertSeverity.CRITICAL]: 0\n      },\n      byService: {} as Record<string, number>,\n      acknowledged: 0,\n      resolved: 0\n    };\n\n    for (const alert of alerts) {\n      stats.bySeverity[alert.severity]++;\n      stats.byService[alert.service] = (stats.byService[alert.service] || 0) + 1;\n      \n      if (alert.acknowledged) stats.acknowledged++;\n      if (alert.resolvedAt) stats.resolved++;\n    }\n\n    return stats;\n  }\n\n  private startCleanupProcess(): void {\n    // Clean up old alerts daily\n    setInterval(() => {\n      this.cleanupOldAlerts();\n    }, 24 * 60 * 60 * 1000); // 24 hours\n  }\n\n  private cleanupOldAlerts(): void {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - this.config.retentionDays);\n\n    let removedCount = 0;\n    for (const [id, alert] of this.alerts) {\n      if (alert.timestamp < cutoffDate) {\n        this.alerts.delete(id);\n        removedCount++;\n      }\n    }\n\n    if (removedCount > 0) {\n      console.log(`Cleaned up ${removedCount} old alerts`);\n    }\n  }\n\n  public updateConfig(newConfig: Partial<AlertingConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('Alerting system configuration updated');\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('Shutting down alerting system...');\n    this.isInitialized = false;\n    this.removeAllListeners();\n    console.log('Alerting system shutdown complete');\n  }\n}\n\nexport const alertingSystem = new AlertingSystem();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6e6811e59db3ace7151a7d67b46d19f4c3968f8c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_188owcs071 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_188owcs071();
cov_188owcs071().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_188owcs071().s[1]++;
exports.alertingSystem = exports.AlertingSystem = exports.AlertType = exports.AlertSeverity = void 0;
const events_1 =
/* istanbul ignore next */
(cov_188owcs071().s[2]++, require("events"));
const HealthOrchestrator_1 =
/* istanbul ignore next */
(cov_188owcs071().s[3]++, require("./HealthOrchestrator"));
const CircuitBreaker_1 =
/* istanbul ignore next */
(cov_188owcs071().s[4]++, require("./CircuitBreaker"));
var AlertSeverity;
/* istanbul ignore next */
cov_188owcs071().s[5]++;
(function (AlertSeverity) {
  /* istanbul ignore next */
  cov_188owcs071().f[0]++;
  cov_188owcs071().s[6]++;
  AlertSeverity["INFO"] = "info";
  /* istanbul ignore next */
  cov_188owcs071().s[7]++;
  AlertSeverity["WARNING"] = "warning";
  /* istanbul ignore next */
  cov_188owcs071().s[8]++;
  AlertSeverity["CRITICAL"] = "critical";
})(
/* istanbul ignore next */
(cov_188owcs071().b[0][0]++, AlertSeverity) ||
/* istanbul ignore next */
(cov_188owcs071().b[0][1]++, exports.AlertSeverity = AlertSeverity = {}));
var AlertType;
/* istanbul ignore next */
cov_188owcs071().s[9]++;
(function (AlertType) {
  /* istanbul ignore next */
  cov_188owcs071().f[1]++;
  cov_188owcs071().s[10]++;
  AlertType["SERVICE_DOWN"] = "service_down";
  /* istanbul ignore next */
  cov_188owcs071().s[11]++;
  AlertType["SERVICE_DEGRADED"] = "service_degraded";
  /* istanbul ignore next */
  cov_188owcs071().s[12]++;
  AlertType["SERVICE_RECOVERED"] = "service_recovered";
  /* istanbul ignore next */
  cov_188owcs071().s[13]++;
  AlertType["HIGH_RESPONSE_TIME"] = "high_response_time";
  /* istanbul ignore next */
  cov_188owcs071().s[14]++;
  AlertType["CIRCUIT_BREAKER_OPENED"] = "circuit_breaker_opened";
  /* istanbul ignore next */
  cov_188owcs071().s[15]++;
  AlertType["CIRCUIT_BREAKER_CLOSED"] = "circuit_breaker_closed";
  /* istanbul ignore next */
  cov_188owcs071().s[16]++;
  AlertType["SYSTEM_UNHEALTHY"] = "system_unhealthy";
  /* istanbul ignore next */
  cov_188owcs071().s[17]++;
  AlertType["DEPENDENCY_FAILURE"] = "dependency_failure";
  /* istanbul ignore next */
  cov_188owcs071().s[18]++;
  AlertType["PERFORMANCE"] = "performance";
})(
/* istanbul ignore next */
(cov_188owcs071().b[1][0]++, AlertType) ||
/* istanbul ignore next */
(cov_188owcs071().b[1][1]++, exports.AlertType = AlertType = {}));
class AlertingSystem extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config =
  /* istanbul ignore next */
  (cov_188owcs071().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_188owcs071().f[2]++;
    cov_188owcs071().s[19]++;
    super();
    /* istanbul ignore next */
    cov_188owcs071().s[20]++;
    this.alerts = new Map();
    /* istanbul ignore next */
    cov_188owcs071().s[21]++;
    this.alertRules = new Map();
    /* istanbul ignore next */
    cov_188owcs071().s[22]++;
    this.alertCounts = new Map();
    /* istanbul ignore next */
    cov_188owcs071().s[23]++;
    this.lastAlerts = new Map();
    /* istanbul ignore next */
    cov_188owcs071().s[24]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_188owcs071().s[25]++;
    this.config = {
      enabled: true,
      defaultCooldownPeriod: 15,
      // 15 minutes
      maxAlertsPerHour: 10,
      retentionDays: 30,
      ...config
    };
    /* istanbul ignore next */
    cov_188owcs071().s[26]++;
    this.initializeDefaultRules();
  }
  async initialize() {
    /* istanbul ignore next */
    cov_188owcs071().f[3]++;
    cov_188owcs071().s[27]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_188owcs071().b[3][0]++;
      cov_188owcs071().s[28]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[3][1]++;
    }
    cov_188owcs071().s[29]++;
    console.log('🚨 Initializing Alerting System...');
    // Listen to health orchestrator events
    /* istanbul ignore next */
    cov_188owcs071().s[30]++;
    HealthOrchestrator_1.healthOrchestrator.on('serviceStatusChanged', this.handleServiceStatusChange.bind(this));
    /* istanbul ignore next */
    cov_188owcs071().s[31]++;
    HealthOrchestrator_1.healthOrchestrator.on('criticalServiceDown', this.handleCriticalServiceDown.bind(this));
    /* istanbul ignore next */
    cov_188owcs071().s[32]++;
    HealthOrchestrator_1.healthOrchestrator.on('fullHealthCheckComplete', this.handleFullHealthCheck.bind(this));
    // Listen to circuit breaker events
    /* istanbul ignore next */
    cov_188owcs071().s[33]++;
    CircuitBreaker_1.circuitBreakerRegistry.on('breakerOpened', this.handleCircuitBreakerOpened.bind(this));
    /* istanbul ignore next */
    cov_188owcs071().s[34]++;
    CircuitBreaker_1.circuitBreakerRegistry.on('breakerClosed', this.handleCircuitBreakerClosed.bind(this));
    // Start cleanup process
    /* istanbul ignore next */
    cov_188owcs071().s[35]++;
    this.startCleanupProcess();
    /* istanbul ignore next */
    cov_188owcs071().s[36]++;
    this.isInitialized = true;
    /* istanbul ignore next */
    cov_188owcs071().s[37]++;
    console.log('✅ Alerting System initialized');
  }
  initializeDefaultRules() {
    /* istanbul ignore next */
    cov_188owcs071().f[4]++;
    cov_188owcs071().s[38]++;
    // Critical service down rule
    this.addAlertRule({
      id: 'critical-service-down',
      name: 'Critical Service Down',
      type: AlertType.SERVICE_DOWN,
      severity: AlertSeverity.CRITICAL,
      enabled: true,
      conditions: {
        services: ['database', 'ollama', 'frontend', 'backend']
      },
      actions: {
        // Configure these based on your notification preferences
        webhook: process.env.ALERT_WEBHOOK_URL
      }
    });
    // High response time rule
    /* istanbul ignore next */
    cov_188owcs071().s[39]++;
    this.addAlertRule({
      id: 'high-response-time',
      name: 'High Response Time',
      type: AlertType.HIGH_RESPONSE_TIME,
      severity: AlertSeverity.WARNING,
      enabled: true,
      conditions: {
        thresholds: {
          responseTime: 10000 // 10 seconds
        },
        cooldownPeriod: 5 // 5 minutes
      },
      actions: {
        webhook: process.env.ALERT_WEBHOOK_URL
      }
    });
    // Circuit breaker opened rule
    /* istanbul ignore next */
    cov_188owcs071().s[40]++;
    this.addAlertRule({
      id: 'circuit-breaker-opened',
      name: 'Circuit Breaker Opened',
      type: AlertType.CIRCUIT_BREAKER_OPENED,
      severity: AlertSeverity.CRITICAL,
      enabled: true,
      conditions: {
        cooldownPeriod: 1 // 1 minute
      },
      actions: {
        webhook: process.env.ALERT_WEBHOOK_URL
      }
    });
    // System unhealthy rule
    /* istanbul ignore next */
    cov_188owcs071().s[41]++;
    this.addAlertRule({
      id: 'system-unhealthy',
      name: 'System Unhealthy',
      type: AlertType.SYSTEM_UNHEALTHY,
      severity: AlertSeverity.CRITICAL,
      enabled: true,
      conditions: {
        cooldownPeriod: 10 // 10 minutes
      },
      actions: {
        webhook: process.env.ALERT_WEBHOOK_URL
      }
    });
  }
  handleServiceStatusChange(event) {
    /* istanbul ignore next */
    cov_188owcs071().f[5]++;
    const {
      serviceName,
      previousStatus,
      newStatus,
      responseTime,
      message
    } =
    /* istanbul ignore next */
    (cov_188owcs071().s[42]++, event);
    // Check for service down/recovery
    /* istanbul ignore next */
    cov_188owcs071().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_188owcs071().b[5][0]++, previousStatus !== 'unhealthy') &&
    /* istanbul ignore next */
    (cov_188owcs071().b[5][1]++, newStatus === 'unhealthy')) {
      /* istanbul ignore next */
      cov_188owcs071().b[4][0]++;
      cov_188owcs071().s[44]++;
      this.checkAndCreateAlert({
        type: AlertType.SERVICE_DOWN,
        service: serviceName,
        message: `Service ${serviceName} is down: ${message}`,
        details: {
          previousStatus,
          newStatus,
          responseTime
        }
      });
    } else {
      /* istanbul ignore next */
      cov_188owcs071().b[4][1]++;
      cov_188owcs071().s[45]++;
      if (
      /* istanbul ignore next */
      (cov_188owcs071().b[7][0]++, previousStatus === 'unhealthy') &&
      /* istanbul ignore next */
      (cov_188owcs071().b[7][1]++, newStatus === 'healthy')) {
        /* istanbul ignore next */
        cov_188owcs071().b[6][0]++;
        cov_188owcs071().s[46]++;
        this.checkAndCreateAlert({
          type: AlertType.SERVICE_RECOVERED,
          service: serviceName,
          message: `Service ${serviceName} has recovered`,
          details: {
            previousStatus,
            newStatus,
            responseTime
          }
        });
      } else {
        /* istanbul ignore next */
        cov_188owcs071().b[6][1]++;
        cov_188owcs071().s[47]++;
        if (
        /* istanbul ignore next */
        (cov_188owcs071().b[9][0]++, previousStatus !== 'degraded') &&
        /* istanbul ignore next */
        (cov_188owcs071().b[9][1]++, newStatus === 'degraded')) {
          /* istanbul ignore next */
          cov_188owcs071().b[8][0]++;
          cov_188owcs071().s[48]++;
          this.checkAndCreateAlert({
            type: AlertType.SERVICE_DEGRADED,
            service: serviceName,
            message: `Service ${serviceName} is degraded: ${message}`,
            details: {
              previousStatus,
              newStatus,
              responseTime
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_188owcs071().b[8][1]++;
        }
      }
    }
    // Check for high response time
    /* istanbul ignore next */
    cov_188owcs071().s[49]++;
    if (responseTime > 0) {
      /* istanbul ignore next */
      cov_188owcs071().b[10][0]++;
      const rule =
      /* istanbul ignore next */
      (cov_188owcs071().s[50]++, this.alertRules.get('high-response-time'));
      /* istanbul ignore next */
      cov_188owcs071().s[51]++;
      if (
      /* istanbul ignore next */
      (cov_188owcs071().b[12][0]++, rule?.enabled) &&
      /* istanbul ignore next */
      (cov_188owcs071().b[12][1]++, rule.conditions.thresholds?.responseTime)) {
        /* istanbul ignore next */
        cov_188owcs071().b[11][0]++;
        cov_188owcs071().s[52]++;
        if (responseTime > rule.conditions.thresholds.responseTime) {
          /* istanbul ignore next */
          cov_188owcs071().b[13][0]++;
          cov_188owcs071().s[53]++;
          this.checkAndCreateAlert({
            type: AlertType.HIGH_RESPONSE_TIME,
            service: serviceName,
            message: `High response time for ${serviceName}: ${responseTime}ms`,
            details: {
              responseTime,
              threshold: rule.conditions.thresholds.responseTime
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_188owcs071().b[13][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[11][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[10][1]++;
    }
  }
  handleCriticalServiceDown(event) {
    /* istanbul ignore next */
    cov_188owcs071().f[6]++;
    const {
      serviceName,
      message,
      details
    } =
    /* istanbul ignore next */
    (cov_188owcs071().s[54]++, event);
    /* istanbul ignore next */
    cov_188owcs071().s[55]++;
    this.checkAndCreateAlert({
      type: AlertType.SERVICE_DOWN,
      service: serviceName,
      message: `Critical service ${serviceName} is down: ${message}`,
      details,
      forceSeverity: AlertSeverity.CRITICAL
    });
  }
  handleFullHealthCheck(event) {
    /* istanbul ignore next */
    cov_188owcs071().f[7]++;
    const {
      systemHealth
    } =
    /* istanbul ignore next */
    (cov_188owcs071().s[56]++, event);
    /* istanbul ignore next */
    cov_188owcs071().s[57]++;
    if (systemHealth.overallStatus === 'unhealthy') {
      /* istanbul ignore next */
      cov_188owcs071().b[14][0]++;
      cov_188owcs071().s[58]++;
      this.checkAndCreateAlert({
        type: AlertType.SYSTEM_UNHEALTHY,
        service: 'system',
        message: `System is unhealthy: ${systemHealth.unhealthyServices} unhealthy services`,
        details: {
          totalServices: systemHealth.totalServices,
          healthyServices: systemHealth.healthyServices,
          unhealthyServices: systemHealth.unhealthyServices,
          degradedServices: systemHealth.degradedServices
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[14][1]++;
    }
  }
  handleCircuitBreakerOpened(event) {
    /* istanbul ignore next */
    cov_188owcs071().f[8]++;
    const {
      serviceName,
      failureCount,
      reason
    } =
    /* istanbul ignore next */
    (cov_188owcs071().s[59]++, event);
    /* istanbul ignore next */
    cov_188owcs071().s[60]++;
    this.checkAndCreateAlert({
      type: AlertType.CIRCUIT_BREAKER_OPENED,
      service: serviceName,
      message: `Circuit breaker opened for ${serviceName}: ${reason}`,
      details: {
        failureCount,
        reason
      }
    });
  }
  handleCircuitBreakerClosed(event) {
    /* istanbul ignore next */
    cov_188owcs071().f[9]++;
    const {
      serviceName,
      reason
    } =
    /* istanbul ignore next */
    (cov_188owcs071().s[61]++, event);
    /* istanbul ignore next */
    cov_188owcs071().s[62]++;
    this.checkAndCreateAlert({
      type: AlertType.CIRCUIT_BREAKER_CLOSED,
      service: serviceName,
      message: `Circuit breaker closed for ${serviceName}: ${reason}`,
      details: {
        reason
      },
      forceSeverity: AlertSeverity.INFO
    });
  }
  checkAndCreateAlert(params) {
    /* istanbul ignore next */
    cov_188owcs071().f[10]++;
    cov_188owcs071().s[63]++;
    if (!this.config.enabled) {
      /* istanbul ignore next */
      cov_188owcs071().b[15][0]++;
      cov_188owcs071().s[64]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[15][1]++;
    }
    const rule =
    /* istanbul ignore next */
    (cov_188owcs071().s[65]++, this.findMatchingRule(params.type, params.service));
    /* istanbul ignore next */
    cov_188owcs071().s[66]++;
    if (!rule?.enabled) {
      /* istanbul ignore next */
      cov_188owcs071().b[16][0]++;
      cov_188owcs071().s[67]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[16][1]++;
    }
    // Check cooldown period
    const cooldownKey =
    /* istanbul ignore next */
    (cov_188owcs071().s[68]++, `${params.type}-${params.service}`);
    const lastAlert =
    /* istanbul ignore next */
    (cov_188owcs071().s[69]++, this.lastAlerts.get(cooldownKey));
    const cooldownPeriod =
    /* istanbul ignore next */
    (cov_188owcs071().s[70]++,
    /* istanbul ignore next */
    (cov_188owcs071().b[17][0]++, rule.conditions.cooldownPeriod) ||
    /* istanbul ignore next */
    (cov_188owcs071().b[17][1]++, this.config.defaultCooldownPeriod));
    /* istanbul ignore next */
    cov_188owcs071().s[71]++;
    if (lastAlert) {
      /* istanbul ignore next */
      cov_188owcs071().b[18][0]++;
      const timeSinceLastAlert =
      /* istanbul ignore next */
      (cov_188owcs071().s[72]++, Date.now() - lastAlert.getTime());
      const cooldownMs =
      /* istanbul ignore next */
      (cov_188owcs071().s[73]++, cooldownPeriod * 60 * 1000);
      /* istanbul ignore next */
      cov_188owcs071().s[74]++;
      if (timeSinceLastAlert < cooldownMs) {
        /* istanbul ignore next */
        cov_188owcs071().b[19][0]++;
        cov_188owcs071().s[75]++;
        console.log(`Alert suppressed due to cooldown: ${params.type} for ${params.service}`);
        /* istanbul ignore next */
        cov_188owcs071().s[76]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[19][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[18][1]++;
    }
    // Check rate limiting
    const hourKey =
    /* istanbul ignore next */
    (cov_188owcs071().s[77]++, Math.floor(Date.now() / (60 * 60 * 1000)));
    const countKey =
    /* istanbul ignore next */
    (cov_188owcs071().s[78]++, `${hourKey}-${params.service}`);
    const hourlyCount =
    /* istanbul ignore next */
    (cov_188owcs071().s[79]++,
    /* istanbul ignore next */
    (cov_188owcs071().b[20][0]++, this.alertCounts.get(countKey)) ||
    /* istanbul ignore next */
    (cov_188owcs071().b[20][1]++, 0));
    /* istanbul ignore next */
    cov_188owcs071().s[80]++;
    if (hourlyCount >= this.config.maxAlertsPerHour) {
      /* istanbul ignore next */
      cov_188owcs071().b[21][0]++;
      cov_188owcs071().s[81]++;
      console.log(`Alert rate limit exceeded for ${params.service}`);
      /* istanbul ignore next */
      cov_188owcs071().s[82]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[21][1]++;
    }
    // Create alert
    const alert =
    /* istanbul ignore next */
    (cov_188owcs071().s[83]++, this.createAlert({
      ...params,
      severity:
      /* istanbul ignore next */
      (cov_188owcs071().b[22][0]++, params.forceSeverity) ||
      /* istanbul ignore next */
      (cov_188owcs071().b[22][1]++, rule.severity)
    }));
    // Update tracking
    /* istanbul ignore next */
    cov_188owcs071().s[84]++;
    this.lastAlerts.set(cooldownKey, new Date());
    /* istanbul ignore next */
    cov_188owcs071().s[85]++;
    this.alertCounts.set(countKey, hourlyCount + 1);
    // Send notifications
    /* istanbul ignore next */
    cov_188owcs071().s[86]++;
    this.sendNotifications(alert, rule);
    /* istanbul ignore next */
    cov_188owcs071().s[87]++;
    console.log(`🚨 Alert created: ${alert.type} for ${alert.service} - ${alert.message}`);
  }
  findMatchingRule(type, service) {
    /* istanbul ignore next */
    cov_188owcs071().f[11]++;
    cov_188owcs071().s[88]++;
    for (const rule of this.alertRules.values()) {
      /* istanbul ignore next */
      cov_188owcs071().s[89]++;
      if (rule.type === type) {
        /* istanbul ignore next */
        cov_188owcs071().b[23][0]++;
        cov_188owcs071().s[90]++;
        if (
        /* istanbul ignore next */
        (cov_188owcs071().b[25][0]++, !rule.conditions.services) ||
        /* istanbul ignore next */
        (cov_188owcs071().b[25][1]++, rule.conditions.services.includes(service))) {
          /* istanbul ignore next */
          cov_188owcs071().b[24][0]++;
          cov_188owcs071().s[91]++;
          return rule;
        } else
        /* istanbul ignore next */
        {
          cov_188owcs071().b[24][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[23][1]++;
      }
    }
    /* istanbul ignore next */
    cov_188owcs071().s[92]++;
    return undefined;
  }
  createAlert(params) {
    /* istanbul ignore next */
    cov_188owcs071().f[12]++;
    const alert =
    /* istanbul ignore next */
    (cov_188owcs071().s[93]++, {
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type: params.type,
      severity: params.severity,
      service: params.service,
      message: params.message,
      details: params.details,
      timestamp: new Date(),
      acknowledged: false
    });
    /* istanbul ignore next */
    cov_188owcs071().s[94]++;
    this.alerts.set(alert.id, alert);
    /* istanbul ignore next */
    cov_188owcs071().s[95]++;
    this.emit('alertCreated', alert);
    /* istanbul ignore next */
    cov_188owcs071().s[96]++;
    return alert;
  }
  async sendNotifications(alert, rule) {
    /* istanbul ignore next */
    cov_188owcs071().f[13]++;
    cov_188owcs071().s[97]++;
    try {
      /* istanbul ignore next */
      cov_188owcs071().s[98]++;
      // Webhook notification
      if (rule.actions.webhook) {
        /* istanbul ignore next */
        cov_188owcs071().b[26][0]++;
        cov_188owcs071().s[99]++;
        await this.sendWebhookNotification(alert, rule.actions.webhook);
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[26][1]++;
      }
      // Slack notification (if configured)
      cov_188owcs071().s[100]++;
      if (rule.actions.slack) {
        /* istanbul ignore next */
        cov_188owcs071().b[27][0]++;
        cov_188owcs071().s[101]++;
        await this.sendSlackNotification(alert, rule.actions.slack);
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[27][1]++;
      }
      // Email notification (if configured)
      cov_188owcs071().s[102]++;
      if (
      /* istanbul ignore next */
      (cov_188owcs071().b[29][0]++, rule.actions.email) &&
      /* istanbul ignore next */
      (cov_188owcs071().b[29][1]++, rule.actions.email.length > 0)) {
        /* istanbul ignore next */
        cov_188owcs071().b[28][0]++;
        cov_188owcs071().s[103]++;
        await this.sendEmailNotification(alert, rule.actions.email);
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[28][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_188owcs071().s[104]++;
      console.error('Failed to send alert notification:', error);
    }
  }
  async sendWebhookNotification(alert, webhookUrl) {
    /* istanbul ignore next */
    cov_188owcs071().f[14]++;
    cov_188owcs071().s[105]++;
    try {
      const payload =
      /* istanbul ignore next */
      (cov_188owcs071().s[106]++, {
        alert: {
          id: alert.id,
          type: alert.type,
          severity: alert.severity,
          service: alert.service,
          message: alert.message,
          timestamp: alert.timestamp.toISOString()
        },
        system: 'prompt-card-health-monitor'
      });
      const response =
      /* istanbul ignore next */
      (cov_188owcs071().s[107]++, await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }));
      /* istanbul ignore next */
      cov_188owcs071().s[108]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_188owcs071().b[30][0]++;
        cov_188owcs071().s[109]++;
        throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[30][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_188owcs071().s[110]++;
      console.error('Webhook notification failed:', error);
    }
  }
  async sendSlackNotification(alert, slackConfig) {
    /* istanbul ignore next */
    cov_188owcs071().f[15]++;
    cov_188owcs071().s[111]++;
    try {
      const color =
      /* istanbul ignore next */
      (cov_188owcs071().s[112]++, {
        [AlertSeverity.INFO]: '#36a64f',
        [AlertSeverity.WARNING]: '#ffeb3b',
        [AlertSeverity.CRITICAL]: '#f44336'
      }[alert.severity]);
      const payload =
      /* istanbul ignore next */
      (cov_188owcs071().s[113]++, {
        channel: slackConfig.channel,
        attachments: [{
          color,
          title: `${alert.severity.toUpperCase()}: ${alert.type.replace('_', ' ').toUpperCase()}`,
          text: alert.message,
          fields: [{
            title: 'Service',
            value: alert.service,
            short: true
          }, {
            title: 'Time',
            value: alert.timestamp.toISOString(),
            short: true
          }]
        }]
      });
      const response =
      /* istanbul ignore next */
      (cov_188owcs071().s[114]++, await fetch(slackConfig.webhook, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }));
      /* istanbul ignore next */
      cov_188owcs071().s[115]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_188owcs071().b[31][0]++;
        cov_188owcs071().s[116]++;
        throw new Error(`Slack notification failed: ${response.status} ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[31][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_188owcs071().s[117]++;
      console.error('Slack notification failed:', error);
    }
  }
  async sendEmailNotification(alert, emails) {
    /* istanbul ignore next */
    cov_188owcs071().f[16]++;
    cov_188owcs071().s[118]++;
    // Email implementation would depend on your email service
    // This is a placeholder for the email notification logic
    console.log(`Email notification sent to ${emails.join(', ')} for alert: ${alert.message}`);
  }
  addAlertRule(rule) {
    /* istanbul ignore next */
    cov_188owcs071().f[17]++;
    cov_188owcs071().s[119]++;
    this.alertRules.set(rule.id, rule);
    /* istanbul ignore next */
    cov_188owcs071().s[120]++;
    console.log(`Alert rule added: ${rule.name}`);
  }
  removeAlertRule(ruleId) {
    /* istanbul ignore next */
    cov_188owcs071().f[18]++;
    const removed =
    /* istanbul ignore next */
    (cov_188owcs071().s[121]++, this.alertRules.delete(ruleId));
    /* istanbul ignore next */
    cov_188owcs071().s[122]++;
    if (removed) {
      /* istanbul ignore next */
      cov_188owcs071().b[32][0]++;
      cov_188owcs071().s[123]++;
      console.log(`Alert rule removed: ${ruleId}`);
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[32][1]++;
    }
    cov_188owcs071().s[124]++;
    return removed;
  }
  updateAlertRule(ruleId, updates) {
    /* istanbul ignore next */
    cov_188owcs071().f[19]++;
    const rule =
    /* istanbul ignore next */
    (cov_188owcs071().s[125]++, this.alertRules.get(ruleId));
    /* istanbul ignore next */
    cov_188owcs071().s[126]++;
    if (!rule) {
      /* istanbul ignore next */
      cov_188owcs071().b[33][0]++;
      cov_188owcs071().s[127]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[33][1]++;
    }
    const updatedRule =
    /* istanbul ignore next */
    (cov_188owcs071().s[128]++, {
      ...rule,
      ...updates
    });
    /* istanbul ignore next */
    cov_188owcs071().s[129]++;
    this.alertRules.set(ruleId, updatedRule);
    /* istanbul ignore next */
    cov_188owcs071().s[130]++;
    console.log(`Alert rule updated: ${ruleId}`);
    /* istanbul ignore next */
    cov_188owcs071().s[131]++;
    return true;
  }
  acknowledgeAlert(alertId) {
    /* istanbul ignore next */
    cov_188owcs071().f[20]++;
    const alert =
    /* istanbul ignore next */
    (cov_188owcs071().s[132]++, this.alerts.get(alertId));
    /* istanbul ignore next */
    cov_188owcs071().s[133]++;
    if (!alert) {
      /* istanbul ignore next */
      cov_188owcs071().b[34][0]++;
      cov_188owcs071().s[134]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[34][1]++;
    }
    cov_188owcs071().s[135]++;
    alert.acknowledged = true;
    /* istanbul ignore next */
    cov_188owcs071().s[136]++;
    this.alerts.set(alertId, alert);
    /* istanbul ignore next */
    cov_188owcs071().s[137]++;
    this.emit('alertAcknowledged', alert);
    /* istanbul ignore next */
    cov_188owcs071().s[138]++;
    return true;
  }
  resolveAlert(alertId) {
    /* istanbul ignore next */
    cov_188owcs071().f[21]++;
    const alert =
    /* istanbul ignore next */
    (cov_188owcs071().s[139]++, this.alerts.get(alertId));
    /* istanbul ignore next */
    cov_188owcs071().s[140]++;
    if (!alert) {
      /* istanbul ignore next */
      cov_188owcs071().b[35][0]++;
      cov_188owcs071().s[141]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[35][1]++;
    }
    cov_188owcs071().s[142]++;
    alert.resolvedAt = new Date();
    /* istanbul ignore next */
    cov_188owcs071().s[143]++;
    this.alerts.set(alertId, alert);
    /* istanbul ignore next */
    cov_188owcs071().s[144]++;
    this.emit('alertResolved', alert);
    /* istanbul ignore next */
    cov_188owcs071().s[145]++;
    return true;
  }
  getAlerts(filters) {
    /* istanbul ignore next */
    cov_188owcs071().f[22]++;
    let alerts =
    /* istanbul ignore next */
    (cov_188owcs071().s[146]++, Array.from(this.alerts.values()));
    /* istanbul ignore next */
    cov_188owcs071().s[147]++;
    if (filters) {
      /* istanbul ignore next */
      cov_188owcs071().b[36][0]++;
      cov_188owcs071().s[148]++;
      if (filters.service) {
        /* istanbul ignore next */
        cov_188owcs071().b[37][0]++;
        cov_188owcs071().s[149]++;
        alerts = alerts.filter(a => {
          /* istanbul ignore next */
          cov_188owcs071().f[23]++;
          cov_188owcs071().s[150]++;
          return a.service === filters.service;
        });
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[37][1]++;
      }
      cov_188owcs071().s[151]++;
      if (filters.severity) {
        /* istanbul ignore next */
        cov_188owcs071().b[38][0]++;
        cov_188owcs071().s[152]++;
        alerts = alerts.filter(a => {
          /* istanbul ignore next */
          cov_188owcs071().f[24]++;
          cov_188owcs071().s[153]++;
          return a.severity === filters.severity;
        });
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[38][1]++;
      }
      cov_188owcs071().s[154]++;
      if (filters.acknowledged !== undefined) {
        /* istanbul ignore next */
        cov_188owcs071().b[39][0]++;
        cov_188owcs071().s[155]++;
        alerts = alerts.filter(a => {
          /* istanbul ignore next */
          cov_188owcs071().f[25]++;
          cov_188owcs071().s[156]++;
          return a.acknowledged === filters.acknowledged;
        });
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[39][1]++;
      }
      cov_188owcs071().s[157]++;
      if (filters.resolved !== undefined) {
        /* istanbul ignore next */
        cov_188owcs071().b[40][0]++;
        cov_188owcs071().s[158]++;
        const hasResolved = alert => {
          /* istanbul ignore next */
          cov_188owcs071().f[26]++;
          cov_188owcs071().s[159]++;
          return !!alert.resolvedAt;
        };
        /* istanbul ignore next */
        cov_188owcs071().s[160]++;
        alerts = alerts.filter(a => {
          /* istanbul ignore next */
          cov_188owcs071().f[27]++;
          cov_188owcs071().s[161]++;
          return hasResolved(a) === filters.resolved;
        });
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[40][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[36][1]++;
    }
    // Sort by timestamp (newest first)
    cov_188owcs071().s[162]++;
    alerts.sort((a, b) => {
      /* istanbul ignore next */
      cov_188owcs071().f[28]++;
      cov_188owcs071().s[163]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
    /* istanbul ignore next */
    cov_188owcs071().s[164]++;
    if (filters?.limit) {
      /* istanbul ignore next */
      cov_188owcs071().b[41][0]++;
      cov_188owcs071().s[165]++;
      alerts = alerts.slice(0, filters.limit);
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[41][1]++;
    }
    cov_188owcs071().s[166]++;
    return alerts;
  }
  getAlertRules() {
    /* istanbul ignore next */
    cov_188owcs071().f[29]++;
    cov_188owcs071().s[167]++;
    return Array.from(this.alertRules.values());
  }
  getAlertStats() {
    /* istanbul ignore next */
    cov_188owcs071().f[30]++;
    const alerts =
    /* istanbul ignore next */
    (cov_188owcs071().s[168]++, Array.from(this.alerts.values()));
    const stats =
    /* istanbul ignore next */
    (cov_188owcs071().s[169]++, {
      total: alerts.length,
      bySeverity: {
        [AlertSeverity.INFO]: 0,
        [AlertSeverity.WARNING]: 0,
        [AlertSeverity.CRITICAL]: 0
      },
      byService: {},
      acknowledged: 0,
      resolved: 0
    });
    /* istanbul ignore next */
    cov_188owcs071().s[170]++;
    for (const alert of alerts) {
      /* istanbul ignore next */
      cov_188owcs071().s[171]++;
      stats.bySeverity[alert.severity]++;
      /* istanbul ignore next */
      cov_188owcs071().s[172]++;
      stats.byService[alert.service] = (
      /* istanbul ignore next */
      (cov_188owcs071().b[42][0]++, stats.byService[alert.service]) ||
      /* istanbul ignore next */
      (cov_188owcs071().b[42][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_188owcs071().s[173]++;
      if (alert.acknowledged) {
        /* istanbul ignore next */
        cov_188owcs071().b[43][0]++;
        cov_188owcs071().s[174]++;
        stats.acknowledged++;
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[43][1]++;
      }
      cov_188owcs071().s[175]++;
      if (alert.resolvedAt) {
        /* istanbul ignore next */
        cov_188owcs071().b[44][0]++;
        cov_188owcs071().s[176]++;
        stats.resolved++;
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[44][1]++;
      }
    }
    /* istanbul ignore next */
    cov_188owcs071().s[177]++;
    return stats;
  }
  startCleanupProcess() {
    /* istanbul ignore next */
    cov_188owcs071().f[31]++;
    cov_188owcs071().s[178]++;
    // Clean up old alerts daily
    setInterval(() => {
      /* istanbul ignore next */
      cov_188owcs071().f[32]++;
      cov_188owcs071().s[179]++;
      this.cleanupOldAlerts();
    }, 24 * 60 * 60 * 1000); // 24 hours
  }
  cleanupOldAlerts() {
    /* istanbul ignore next */
    cov_188owcs071().f[33]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_188owcs071().s[180]++, new Date());
    /* istanbul ignore next */
    cov_188owcs071().s[181]++;
    cutoffDate.setDate(cutoffDate.getDate() - this.config.retentionDays);
    let removedCount =
    /* istanbul ignore next */
    (cov_188owcs071().s[182]++, 0);
    /* istanbul ignore next */
    cov_188owcs071().s[183]++;
    for (const [id, alert] of this.alerts) {
      /* istanbul ignore next */
      cov_188owcs071().s[184]++;
      if (alert.timestamp < cutoffDate) {
        /* istanbul ignore next */
        cov_188owcs071().b[45][0]++;
        cov_188owcs071().s[185]++;
        this.alerts.delete(id);
        /* istanbul ignore next */
        cov_188owcs071().s[186]++;
        removedCount++;
      } else
      /* istanbul ignore next */
      {
        cov_188owcs071().b[45][1]++;
      }
    }
    /* istanbul ignore next */
    cov_188owcs071().s[187]++;
    if (removedCount > 0) {
      /* istanbul ignore next */
      cov_188owcs071().b[46][0]++;
      cov_188owcs071().s[188]++;
      console.log(`Cleaned up ${removedCount} old alerts`);
    } else
    /* istanbul ignore next */
    {
      cov_188owcs071().b[46][1]++;
    }
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_188owcs071().f[34]++;
    cov_188owcs071().s[189]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_188owcs071().s[190]++;
    console.log('Alerting system configuration updated');
  }
  async shutdown() {
    /* istanbul ignore next */
    cov_188owcs071().f[35]++;
    cov_188owcs071().s[191]++;
    console.log('Shutting down alerting system...');
    /* istanbul ignore next */
    cov_188owcs071().s[192]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_188owcs071().s[193]++;
    this.removeAllListeners();
    /* istanbul ignore next */
    cov_188owcs071().s[194]++;
    console.log('Alerting system shutdown complete');
  }
}
/* istanbul ignore next */
cov_188owcs071().s[195]++;
exports.AlertingSystem = AlertingSystem;
/* istanbul ignore next */
cov_188owcs071().s[196]++;
exports.alertingSystem = new AlertingSystem();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,