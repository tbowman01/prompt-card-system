f517a2a8d2fc62b74b528761dcbaaff7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalSetup;
// Global test setup - runs once before all tests
const connection_1 = require("../database/connection");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
async function globalSetup() {
    console.log('üß™ Setting up global test environment...');
    // Set test environment variables
    process.env.NODE_ENV = 'test';
    process.env.DATABASE_PATH = path_1.default.join(__dirname, '../../data/test.sqlite');
    process.env.OLLAMA_BASE_URL = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';
    // Ensure test data directory exists
    const testDataDir = path_1.default.dirname(process.env.DATABASE_PATH);
    if (!fs_1.default.existsSync(testDataDir)) {
        fs_1.default.mkdirSync(testDataDir, { recursive: true });
    }
    // Clean up any existing test database
    if (fs_1.default.existsSync(process.env.DATABASE_PATH)) {
        fs_1.default.unlinkSync(process.env.DATABASE_PATH);
    }
    // Initialize test database
    try {
        (0, connection_1.initializeDatabase)();
        console.log('‚úÖ Test database initialized');
    }
    catch (error) {
        console.error('‚ùå Failed to initialize test database:', error);
    }
    console.log('‚úÖ Global test setup complete');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL3Rlc3RzL2dsb2JhbFNldHVwLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsOEJBNEJDO0FBakNELGlEQUFpRDtBQUNqRCx1REFBNEQ7QUFDNUQsZ0RBQXdCO0FBQ3hCLDRDQUFvQjtBQUVMLEtBQUssVUFBVSxXQUFXO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQztJQUV4RCxpQ0FBaUM7SUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUF3QixDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksd0JBQXdCLENBQUM7SUFFdEYsb0NBQW9DO0lBQ3BDLE1BQU0sV0FBVyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1RCxJQUFJLENBQUMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1FBQ2hDLFlBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELHNDQUFzQztJQUN0QyxJQUFJLFlBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQzdDLFlBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsMkJBQTJCO0lBQzNCLElBQUksQ0FBQztRQUNILElBQUEsK0JBQWtCLEdBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDOUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvd29ya3NwYWNlcy9wcm9tcHQtY2FyZC1zeXN0ZW0vYmFja2VuZC9zcmMvdGVzdHMvZ2xvYmFsU2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2xvYmFsIHRlc3Qgc2V0dXAgLSBydW5zIG9uY2UgYmVmb3JlIGFsbCB0ZXN0c1xuaW1wb3J0IHsgaW5pdGlhbGl6ZURhdGFiYXNlIH0gZnJvbSAnLi4vZGF0YWJhc2UvY29ubmVjdGlvbic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGdsb2JhbFNldHVwKCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zb2xlLmxvZygn8J+nqiBTZXR0aW5nIHVwIGdsb2JhbCB0ZXN0IGVudmlyb25tZW50Li4uJyk7XG4gIFxuICAvLyBTZXQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG4gIHByb2Nlc3MuZW52LkRBVEFCQVNFX1BBVEggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZGF0YS90ZXN0LnNxbGl0ZScpO1xuICBwcm9jZXNzLmVudi5PTExBTUFfQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5PTExBTUFfQkFTRV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MTE0MzQnO1xuICBcbiAgLy8gRW5zdXJlIHRlc3QgZGF0YSBkaXJlY3RvcnkgZXhpc3RzXG4gIGNvbnN0IHRlc3REYXRhRGlyID0gcGF0aC5kaXJuYW1lKHByb2Nlc3MuZW52LkRBVEFCQVNFX1BBVEgpO1xuICBpZiAoIWZzLmV4aXN0c1N5bmModGVzdERhdGFEaXIpKSB7XG4gICAgZnMubWtkaXJTeW5jKHRlc3REYXRhRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgfVxuICBcbiAgLy8gQ2xlYW4gdXAgYW55IGV4aXN0aW5nIHRlc3QgZGF0YWJhc2VcbiAgaWYgKGZzLmV4aXN0c1N5bmMocHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFUSCkpIHtcbiAgICBmcy51bmxpbmtTeW5jKHByb2Nlc3MuZW52LkRBVEFCQVNFX1BBVEgpO1xuICB9XG4gIFxuICAvLyBJbml0aWFsaXplIHRlc3QgZGF0YWJhc2VcbiAgdHJ5IHtcbiAgICBpbml0aWFsaXplRGF0YWJhc2UoKTtcbiAgICBjb25zb2xlLmxvZygn4pyFIFRlc3QgZGF0YWJhc2UgaW5pdGlhbGl6ZWQnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGluaXRpYWxpemUgdGVzdCBkYXRhYmFzZTonLCBlcnJvcik7XG4gIH1cbiAgXG4gIGNvbnNvbGUubG9nKCfinIUgR2xvYmFsIHRlc3Qgc2V0dXAgY29tcGxldGUnKTtcbn0iXSwidmVyc2lvbiI6M30=