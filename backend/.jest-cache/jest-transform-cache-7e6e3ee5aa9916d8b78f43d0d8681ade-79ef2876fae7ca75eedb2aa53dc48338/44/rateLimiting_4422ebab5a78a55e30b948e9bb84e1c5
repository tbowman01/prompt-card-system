5708523153c17687e7059cc3afe6dca5
"use strict";

/* istanbul ignore next */
function cov_esdsqjozq() {
  var path = "/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts";
  var hash = "e42392e58e7292dfa6b2fa99395918a1b0f3389f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 281
        }
      },
      "4": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 7,
          column: 75
        }
      },
      "5": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 73
        }
      },
      "6": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 58
        }
      },
      "7": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "8": {
        start: {
          line: 13,
          column: 31
        },
        end: {
          line: 45,
          column: 1
        }
      },
      "9": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 44,
          column: 6
        }
      },
      "10": {
        start: {
          line: 15,
          column: 25
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "11": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "12": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 104
        }
      },
      "13": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "15": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 54
        }
      },
      "16": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "18": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 61,
          column: 3
        }
      },
      "19": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 75,
          column: 3
        }
      },
      "20": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 87,
          column: 3
        }
      },
      "21": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 99,
          column: 3
        }
      },
      "22": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 110,
          column: 3
        }
      },
      "23": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 33
        }
      },
      "24": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "25": {
        start: {
          line: 124,
          column: 0
        },
        end: {
          line: 135,
          column: 3
        }
      },
      "26": {
        start: {
          line: 137,
          column: 0
        },
        end: {
          line: 175,
          column: 2
        }
      },
      "27": {
        start: {
          line: 177,
          column: 25
        },
        end: {
          line: 200,
          column: 1
        }
      },
      "28": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 178,
          column: 40
        }
      },
      "29": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 179,
          column: 56
        }
      },
      "30": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 198,
          column: 5
        }
      },
      "31": {
        start: {
          line: 182,
          column: 39
        },
        end: {
          line: 182,
          column: 86
        }
      },
      "32": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "33": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "34": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "35": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 19
        }
      },
      "36": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "37": {
        start: {
          line: 201,
          column: 0
        },
        end: {
          line: 201,
          column: 44
        }
      },
      "38": {
        start: {
          line: 203,
          column: 0
        },
        end: {
          line: 210,
          column: 19
        }
      },
      "39": {
        start: {
          line: 204,
          column: 23
        },
        end: {
          line: 204,
          column: 60
        }
      },
      "40": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "41": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "42": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 49
        }
      },
      "43": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 225,
          column: 1
        }
      },
      "44": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 214,
          column: 63
        }
      },
      "45": {
        start: {
          line: 214,
          column: 37
        },
        end: {
          line: 214,
          column: 59
        }
      },
      "46": {
        start: {
          line: 215,
          column: 26
        },
        end: {
          line: 215,
          column: 50
        }
      },
      "47": {
        start: {
          line: 216,
          column: 25
        },
        end: {
          line: 219,
          column: 21
        }
      },
      "48": {
        start: {
          line: 217,
          column: 42
        },
        end: {
          line: 217,
          column: 69
        }
      },
      "49": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 218,
          column: 41
        }
      },
      "50": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 224,
          column: 6
        }
      },
      "51": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 226,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 13,
            column: 32
          }
        },
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 12
          }
        },
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 104,
            column: 14
          }
        },
        loc: {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 104
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 177,
            column: 25
          },
          end: {
            line: 177,
            column: 26
          }
        },
        loc: {
          start: {
            line: 177,
            column: 45
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 177
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        loc: {
          start: {
            line: 203,
            column: 18
          },
          end: {
            line: 210,
            column: 1
          }
        },
        line: 203
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 212,
            column: 26
          },
          end: {
            line: 212,
            column: 27
          }
        },
        loc: {
          start: {
            line: 212,
            column: 32
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 212
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        },
        loc: {
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 59
          }
        },
        line: 214
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 217,
            column: 13
          },
          end: {
            line: 217,
            column: 14
          }
        },
        loc: {
          start: {
            line: 217,
            column: 42
          },
          end: {
            line: 217,
            column: 69
          }
        },
        line: 217
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 218,
            column: 14
          },
          end: {
            line: 218,
            column: 15
          }
        },
        loc: {
          start: {
            line: 218,
            column: 24
          },
          end: {
            line: 218,
            column: 41
          }
        },
        line: 218
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 15,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 15,
            column: 31
          }
        }, {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 44
          }
        }],
        line: 15
      },
      "4": {
        loc: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 60
          }
        }, {
          start: {
            line: 18,
            column: 64
          },
          end: {
            line: 18,
            column: 104
          }
        }],
        line: 18
      },
      "5": {
        loc: {
          start: {
            line: 178,
            column: 21
          },
          end: {
            line: 178,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 21
          },
          end: {
            line: 178,
            column: 27
          }
        }, {
          start: {
            line: 178,
            column: 31
          },
          end: {
            line: 178,
            column: 40
          }
        }],
        line: 178
      },
      "6": {
        loc: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "7": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 18
          }
        }, {
          start: {
            line: 181,
            column: 22
          },
          end: {
            line: 181,
            column: 42
          }
        }],
        line: 181
      },
      "8": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "9": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts"],
      sourcesContent: ["import rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\nimport { Request, Response, NextFunction } from 'express';\nimport { logSecurityEvent } from './structuredLogging';\n\n// Redis store for distributed rate limiting (optional)\n// import RedisStore from 'rate-limit-redis';\n// import Redis from 'ioredis';\n\n// const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');\n\n// Enhanced rate limiting with security monitoring\ninterface RateLimitConfig {\n  windowMs: number;\n  max: number;\n  message: object;\n  standardHeaders: boolean;\n  legacyHeaders: boolean;\n  skipSuccessfulRequests?: boolean;\n  handler: (req: Request, res: Response) => void;\n}\n\n// Rate limit violation tracking\nconst rateLimitViolations = new Map<string, { count: number; lastViolation: Date }>();\n\n// Enhanced rate limit handler with security logging\nconst createRateLimitHandler = (limitType: string, limit: number, windowMs: number) => {\n  return (req: Request, res: Response): void => {\n    const clientId = req.ip || 'unknown';\n    const now = new Date();\n    \n    // Track violations\n    const violations = rateLimitViolations.get(clientId) || { count: 0, lastViolation: new Date(0) };\n    violations.count += 1;\n    violations.lastViolation = now;\n    rateLimitViolations.set(clientId, violations);\n\n    // Log security event\n    logSecurityEvent('rate_limit', req, {\n      limitType,\n      limit,\n      windowMs,\n      violationCount: violations.count,\n      userAgent: req.headers['user-agent'],\n      path: req.path\n    });\n\n    // Enhanced response with security headers\n    res.status(429).json({\n      success: false,\n      error: 'Rate limit exceeded',\n      type: limitType,\n      limit,\n      windowMs,\n      retryAfter: Math.round(windowMs / 1000),\n      ip: req.ip,\n      path: req.path,\n      violationCount: violations.count,\n      timestamp: now.toISOString()\n    });\n  };\n};\n\n// General API rate limit\nexport const generalRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many requests from this IP, please try again later.',\n    retryAfter: 15 * 60 // seconds\n  },\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n  // store: new RedisStore({\n  //   sendCommand: (...args: string[]) => redis.call(...args),\n  // }),\n  handler: createRateLimitHandler('general', 100, 15 * 60 * 1000)\n});\n\n// Strict rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 login attempts per windowMs\n  message: {\n    success: false,\n    error: 'Too many authentication attempts, please try again later.',\n    retryAfter: 15 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true, // Don't count successful requests\n  handler: createRateLimitHandler('authentication', 5, 15 * 60 * 1000)\n});\n\n// API rate limit for high-frequency endpoints\nexport const apiRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 50, // Limit each IP to 50 requests per minute\n  message: {\n    success: false,\n    error: 'API rate limit exceeded',\n    retryAfter: 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Test execution rate limit (more permissive for testing)\nexport const testExecutionRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 20, // Limit each IP to 20 test executions per 5 minutes\n  message: {\n    success: false,\n    error: 'Test execution rate limit exceeded',\n    retryAfter: 5 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Slow down middleware for additional protection\nexport const speedLimiter: any = slowDown({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  delayAfter: 50, // Allow 50 requests per 15 minutes at full speed\n  delayMs: (used: number) => {\n    return (used - 50) * 500; // Add 500ms delay for each request after delayAfter\n  },\n  maxDelayMs: 10000, // Maximum delay of 10 seconds\n  skipFailedRequests: false,\n  skipSuccessfulRequests: false\n});\n\n// Heavy operation rate limit (for resource-intensive operations)\nexport const heavyOperationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 10, // Limit each IP to 10 heavy operations per hour\n  message: {\n    success: false,\n    error: 'Heavy operation rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// File upload rate limit\nexport const uploadRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 20, // Limit each IP to 20 uploads per hour\n  message: {\n    success: false,\n    error: 'Upload rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: createRateLimitHandler('upload', 20, 60 * 60 * 1000)\n});\n\n// Comprehensive endpoint-specific rate limiting\nexport const endpointRateLimits = {\n  // Critical security endpoints\n  '/api/auth/login': rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 3, // Very strict for login\n    handler: createRateLimitHandler('login', 3, 15 * 60 * 1000)\n  }),\n  \n  '/api/auth/register': rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 3, // Only 3 registrations per hour per IP\n    handler: createRateLimitHandler('register', 3, 60 * 60 * 1000)\n  }),\n\n  '/api/auth/refresh': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 10, // 10 token refreshes per 5 minutes\n    handler: createRateLimitHandler('refresh', 10, 5 * 60 * 1000)\n  }),\n\n  // API endpoints\n  '/api/prompt-cards': rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 30,\n    handler: createRateLimitHandler('prompt-cards', 30, 1 * 60 * 1000)\n  }),\n\n  '/api/test-execution': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 15,\n    handler: createRateLimitHandler('test-execution', 15, 5 * 60 * 1000)\n  }),\n\n  '/api/analytics': rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 25,\n    handler: createRateLimitHandler('analytics', 25, 1 * 60 * 1000)\n  }),\n\n  '/api/security': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 10,\n    handler: createRateLimitHandler('security', 10, 5 * 60 * 1000)\n  })\n};\n\n// Dynamic rate limiting based on user behavior\nexport const dynamicRateLimit = (req: Request, res: Response, next: NextFunction): void => {\n  const clientId = req.ip || 'unknown';\n  const violations = rateLimitViolations.get(clientId);\n\n  // If client has multiple violations, apply stricter limits\n  if (violations && violations.count > 5) {\n    const timeSinceLastViolation = Date.now() - violations.lastViolation.getTime();\n    \n    // If recent violations, block temporarily\n    if (timeSinceLastViolation < 60 * 60 * 1000) { // 1 hour\n      logSecurityEvent('suspicious_activity', req, {\n        reason: 'Multiple rate limit violations',\n        violationCount: violations.count,\n        action: 'temporary_block'\n      });\n\n      res.status(429).json({\n        success: false,\n        error: 'Temporary block due to suspicious activity',\n        retryAfter: 3600,\n        violationCount: violations.count\n      });\n      return;\n    }\n  }\n\n  next();\n};\n\n// Cleanup expired violation records\nsetInterval(() => {\n  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n  \n  for (const [clientId, violations] of rateLimitViolations.entries()) {\n    if (violations.lastViolation < oneHourAgo) {\n      rateLimitViolations.delete(clientId);\n    }\n  }\n}, 60 * 60 * 1000); // Clean up every hour\n\n// Rate limiting statistics\nexport const getRateLimitStats = (): {\n  totalViolations: number;\n  uniqueClients: number;\n  topViolators: Array<{ clientId: string; count: number; lastViolation: Date }>;\n} => {\n  const totalViolations = Array.from(rateLimitViolations.values())\n    .reduce((sum, violations) => sum + violations.count, 0);\n  \n  const uniqueClients = rateLimitViolations.size;\n  \n  const topViolators = Array.from(rateLimitViolations.entries())\n    .map(([clientId, violations]) => ({ clientId, ...violations }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n\n  return {\n    totalViolations,\n    uniqueClients,\n    topViolators\n  };\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e42392e58e7292dfa6b2fa99395918a1b0f3389f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_esdsqjozq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_esdsqjozq();
var __importDefault =
/* istanbul ignore next */
(cov_esdsqjozq().s[0]++,
/* istanbul ignore next */
(cov_esdsqjozq().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_esdsqjozq().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_esdsqjozq().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_esdsqjozq().f[0]++;
  cov_esdsqjozq().s[1]++;
  return /* istanbul ignore next */(cov_esdsqjozq().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_esdsqjozq().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_esdsqjozq().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_esdsqjozq().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_esdsqjozq().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_esdsqjozq().s[3]++;
exports.getRateLimitStats = exports.dynamicRateLimit = exports.endpointRateLimits = exports.uploadRateLimit = exports.heavyOperationRateLimit = exports.speedLimiter = exports.testExecutionRateLimit = exports.apiRateLimit = exports.authRateLimit = exports.generalRateLimit = void 0;
const express_rate_limit_1 =
/* istanbul ignore next */
(cov_esdsqjozq().s[4]++, __importDefault(require("express-rate-limit")));
const express_slow_down_1 =
/* istanbul ignore next */
(cov_esdsqjozq().s[5]++, __importDefault(require("express-slow-down")));
const structuredLogging_1 =
/* istanbul ignore next */
(cov_esdsqjozq().s[6]++, require("./structuredLogging"));
// Rate limit violation tracking
const rateLimitViolations =
/* istanbul ignore next */
(cov_esdsqjozq().s[7]++, new Map());
// Enhanced rate limit handler with security logging
/* istanbul ignore next */
cov_esdsqjozq().s[8]++;
const createRateLimitHandler = (limitType, limit, windowMs) => {
  /* istanbul ignore next */
  cov_esdsqjozq().f[1]++;
  cov_esdsqjozq().s[9]++;
  return (req, res) => {
    /* istanbul ignore next */
    cov_esdsqjozq().f[2]++;
    const clientId =
    /* istanbul ignore next */
    (cov_esdsqjozq().s[10]++,
    /* istanbul ignore next */
    (cov_esdsqjozq().b[3][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_esdsqjozq().b[3][1]++, 'unknown'));
    const now =
    /* istanbul ignore next */
    (cov_esdsqjozq().s[11]++, new Date());
    // Track violations
    const violations =
    /* istanbul ignore next */
    (cov_esdsqjozq().s[12]++,
    /* istanbul ignore next */
    (cov_esdsqjozq().b[4][0]++, rateLimitViolations.get(clientId)) ||
    /* istanbul ignore next */
    (cov_esdsqjozq().b[4][1]++, {
      count: 0,
      lastViolation: new Date(0)
    }));
    /* istanbul ignore next */
    cov_esdsqjozq().s[13]++;
    violations.count += 1;
    /* istanbul ignore next */
    cov_esdsqjozq().s[14]++;
    violations.lastViolation = now;
    /* istanbul ignore next */
    cov_esdsqjozq().s[15]++;
    rateLimitViolations.set(clientId, violations);
    // Log security event
    /* istanbul ignore next */
    cov_esdsqjozq().s[16]++;
    (0, structuredLogging_1.logSecurityEvent)('rate_limit', req, {
      limitType,
      limit,
      windowMs,
      violationCount: violations.count,
      userAgent: req.headers['user-agent'],
      path: req.path
    });
    // Enhanced response with security headers
    /* istanbul ignore next */
    cov_esdsqjozq().s[17]++;
    res.status(429).json({
      success: false,
      error: 'Rate limit exceeded',
      type: limitType,
      limit,
      windowMs,
      retryAfter: Math.round(windowMs / 1000),
      ip: req.ip,
      path: req.path,
      violationCount: violations.count,
      timestamp: now.toISOString()
    });
  };
};
// General API rate limit
/* istanbul ignore next */
cov_esdsqjozq().s[18]++;
exports.generalRateLimit = (0, express_rate_limit_1.default)({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  max: 100,
  // Limit each IP to 100 requests per windowMs
  message: {
    success: false,
    error: 'Too many requests from this IP, please try again later.',
    retryAfter: 15 * 60 // seconds
  },
  standardHeaders: true,
  // Return rate limit info in the `RateLimit-*` headers
  legacyHeaders: false,
  // Disable the `X-RateLimit-*` headers
  // store: new RedisStore({
  //   sendCommand: (...args: string[]) => redis.call(...args),
  // }),
  handler: createRateLimitHandler('general', 100, 15 * 60 * 1000)
});
// Strict rate limit for authentication endpoints
/* istanbul ignore next */
cov_esdsqjozq().s[19]++;
exports.authRateLimit = (0, express_rate_limit_1.default)({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  max: 5,
  // Limit each IP to 5 login attempts per windowMs
  message: {
    success: false,
    error: 'Too many authentication attempts, please try again later.',
    retryAfter: 15 * 60
  },
  standardHeaders: true,
  legacyHeaders: false,
  skipSuccessfulRequests: true,
  // Don't count successful requests
  handler: createRateLimitHandler('authentication', 5, 15 * 60 * 1000)
});
// API rate limit for high-frequency endpoints
/* istanbul ignore next */
cov_esdsqjozq().s[20]++;
exports.apiRateLimit = (0, express_rate_limit_1.default)({
  windowMs: 1 * 60 * 1000,
  // 1 minute
  max: 50,
  // Limit each IP to 50 requests per minute
  message: {
    success: false,
    error: 'API rate limit exceeded',
    retryAfter: 60
  },
  standardHeaders: true,
  legacyHeaders: false
});
// Test execution rate limit (more permissive for testing)
/* istanbul ignore next */
cov_esdsqjozq().s[21]++;
exports.testExecutionRateLimit = (0, express_rate_limit_1.default)({
  windowMs: 5 * 60 * 1000,
  // 5 minutes
  max: 20,
  // Limit each IP to 20 test executions per 5 minutes
  message: {
    success: false,
    error: 'Test execution rate limit exceeded',
    retryAfter: 5 * 60
  },
  standardHeaders: true,
  legacyHeaders: false
});
// Slow down middleware for additional protection
/* istanbul ignore next */
cov_esdsqjozq().s[22]++;
exports.speedLimiter = (0, express_slow_down_1.default)({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  delayAfter: 50,
  // Allow 50 requests per 15 minutes at full speed
  delayMs: used => {
    /* istanbul ignore next */
    cov_esdsqjozq().f[3]++;
    cov_esdsqjozq().s[23]++;
    return (used - 50) * 500; // Add 500ms delay for each request after delayAfter
  },
  maxDelayMs: 10000,
  // Maximum delay of 10 seconds
  skipFailedRequests: false,
  skipSuccessfulRequests: false
});
// Heavy operation rate limit (for resource-intensive operations)
/* istanbul ignore next */
cov_esdsqjozq().s[24]++;
exports.heavyOperationRateLimit = (0, express_rate_limit_1.default)({
  windowMs: 60 * 60 * 1000,
  // 1 hour
  max: 10,
  // Limit each IP to 10 heavy operations per hour
  message: {
    success: false,
    error: 'Heavy operation rate limit exceeded',
    retryAfter: 60 * 60
  },
  standardHeaders: true,
  legacyHeaders: false
});
// File upload rate limit
/* istanbul ignore next */
cov_esdsqjozq().s[25]++;
exports.uploadRateLimit = (0, express_rate_limit_1.default)({
  windowMs: 60 * 60 * 1000,
  // 1 hour
  max: 20,
  // Limit each IP to 20 uploads per hour
  message: {
    success: false,
    error: 'Upload rate limit exceeded',
    retryAfter: 60 * 60
  },
  standardHeaders: true,
  legacyHeaders: false,
  handler: createRateLimitHandler('upload', 20, 60 * 60 * 1000)
});
// Comprehensive endpoint-specific rate limiting
/* istanbul ignore next */
cov_esdsqjozq().s[26]++;
exports.endpointRateLimits = {
  // Critical security endpoints
  '/api/auth/login': (0, express_rate_limit_1.default)({
    windowMs: 15 * 60 * 1000,
    max: 3,
    // Very strict for login
    handler: createRateLimitHandler('login', 3, 15 * 60 * 1000)
  }),
  '/api/auth/register': (0, express_rate_limit_1.default)({
    windowMs: 60 * 60 * 1000,
    max: 3,
    // Only 3 registrations per hour per IP
    handler: createRateLimitHandler('register', 3, 60 * 60 * 1000)
  }),
  '/api/auth/refresh': (0, express_rate_limit_1.default)({
    windowMs: 5 * 60 * 1000,
    max: 10,
    // 10 token refreshes per 5 minutes
    handler: createRateLimitHandler('refresh', 10, 5 * 60 * 1000)
  }),
  // API endpoints
  '/api/prompt-cards': (0, express_rate_limit_1.default)({
    windowMs: 1 * 60 * 1000,
    max: 30,
    handler: createRateLimitHandler('prompt-cards', 30, 1 * 60 * 1000)
  }),
  '/api/test-execution': (0, express_rate_limit_1.default)({
    windowMs: 5 * 60 * 1000,
    max: 15,
    handler: createRateLimitHandler('test-execution', 15, 5 * 60 * 1000)
  }),
  '/api/analytics': (0, express_rate_limit_1.default)({
    windowMs: 1 * 60 * 1000,
    max: 25,
    handler: createRateLimitHandler('analytics', 25, 1 * 60 * 1000)
  }),
  '/api/security': (0, express_rate_limit_1.default)({
    windowMs: 5 * 60 * 1000,
    max: 10,
    handler: createRateLimitHandler('security', 10, 5 * 60 * 1000)
  })
};
// Dynamic rate limiting based on user behavior
/* istanbul ignore next */
cov_esdsqjozq().s[27]++;
const dynamicRateLimit = (req, res, next) => {
  /* istanbul ignore next */
  cov_esdsqjozq().f[4]++;
  const clientId =
  /* istanbul ignore next */
  (cov_esdsqjozq().s[28]++,
  /* istanbul ignore next */
  (cov_esdsqjozq().b[5][0]++, req.ip) ||
  /* istanbul ignore next */
  (cov_esdsqjozq().b[5][1]++, 'unknown'));
  const violations =
  /* istanbul ignore next */
  (cov_esdsqjozq().s[29]++, rateLimitViolations.get(clientId));
  // If client has multiple violations, apply stricter limits
  /* istanbul ignore next */
  cov_esdsqjozq().s[30]++;
  if (
  /* istanbul ignore next */
  (cov_esdsqjozq().b[7][0]++, violations) &&
  /* istanbul ignore next */
  (cov_esdsqjozq().b[7][1]++, violations.count > 5)) {
    /* istanbul ignore next */
    cov_esdsqjozq().b[6][0]++;
    const timeSinceLastViolation =
    /* istanbul ignore next */
    (cov_esdsqjozq().s[31]++, Date.now() - violations.lastViolation.getTime());
    // If recent violations, block temporarily
    /* istanbul ignore next */
    cov_esdsqjozq().s[32]++;
    if (timeSinceLastViolation < 60 * 60 * 1000) {
      /* istanbul ignore next */
      cov_esdsqjozq().b[8][0]++;
      cov_esdsqjozq().s[33]++;
      // 1 hour
      (0, structuredLogging_1.logSecurityEvent)('suspicious_activity', req, {
        reason: 'Multiple rate limit violations',
        violationCount: violations.count,
        action: 'temporary_block'
      });
      /* istanbul ignore next */
      cov_esdsqjozq().s[34]++;
      res.status(429).json({
        success: false,
        error: 'Temporary block due to suspicious activity',
        retryAfter: 3600,
        violationCount: violations.count
      });
      /* istanbul ignore next */
      cov_esdsqjozq().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_esdsqjozq().b[8][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_esdsqjozq().b[6][1]++;
  }
  cov_esdsqjozq().s[36]++;
  next();
};
/* istanbul ignore next */
cov_esdsqjozq().s[37]++;
exports.dynamicRateLimit = dynamicRateLimit;
// Cleanup expired violation records
/* istanbul ignore next */
cov_esdsqjozq().s[38]++;
setInterval(() => {
  /* istanbul ignore next */
  cov_esdsqjozq().f[5]++;
  const oneHourAgo =
  /* istanbul ignore next */
  (cov_esdsqjozq().s[39]++, new Date(Date.now() - 60 * 60 * 1000));
  /* istanbul ignore next */
  cov_esdsqjozq().s[40]++;
  for (const [clientId, violations] of rateLimitViolations.entries()) {
    /* istanbul ignore next */
    cov_esdsqjozq().s[41]++;
    if (violations.lastViolation < oneHourAgo) {
      /* istanbul ignore next */
      cov_esdsqjozq().b[9][0]++;
      cov_esdsqjozq().s[42]++;
      rateLimitViolations.delete(clientId);
    } else
    /* istanbul ignore next */
    {
      cov_esdsqjozq().b[9][1]++;
    }
  }
}, 60 * 60 * 1000); // Clean up every hour
// Rate limiting statistics
/* istanbul ignore next */
cov_esdsqjozq().s[43]++;
const getRateLimitStats = () => {
  /* istanbul ignore next */
  cov_esdsqjozq().f[6]++;
  const totalViolations =
  /* istanbul ignore next */
  (cov_esdsqjozq().s[44]++, Array.from(rateLimitViolations.values()).reduce((sum, violations) => {
    /* istanbul ignore next */
    cov_esdsqjozq().f[7]++;
    cov_esdsqjozq().s[45]++;
    return sum + violations.count;
  }, 0));
  const uniqueClients =
  /* istanbul ignore next */
  (cov_esdsqjozq().s[46]++, rateLimitViolations.size);
  const topViolators =
  /* istanbul ignore next */
  (cov_esdsqjozq().s[47]++, Array.from(rateLimitViolations.entries()).map(([clientId, violations]) => {
    /* istanbul ignore next */
    cov_esdsqjozq().f[8]++;
    cov_esdsqjozq().s[48]++;
    return {
      clientId,
      ...violations
    };
  }).sort((a, b) => {
    /* istanbul ignore next */
    cov_esdsqjozq().f[9]++;
    cov_esdsqjozq().s[49]++;
    return b.count - a.count;
  }).slice(0, 10));
  /* istanbul ignore next */
  cov_esdsqjozq().s[50]++;
  return {
    totalViolations,
    uniqueClients,
    topViolators
  };
};
/* istanbul ignore next */
cov_esdsqjozq().s[51]++;
exports.getRateLimitStats = getRateLimitStats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZXNkc3Fqb3pxIiwiYWN0dWFsQ292ZXJhZ2UiLCJleHByZXNzX3JhdGVfbGltaXRfMSIsInMiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiZXhwcmVzc19zbG93X2Rvd25fMSIsInN0cnVjdHVyZWRMb2dnaW5nXzEiLCJyYXRlTGltaXRWaW9sYXRpb25zIiwiTWFwIiwiY3JlYXRlUmF0ZUxpbWl0SGFuZGxlciIsImxpbWl0VHlwZSIsImxpbWl0Iiwid2luZG93TXMiLCJmIiwicmVxIiwicmVzIiwiY2xpZW50SWQiLCJiIiwiaXAiLCJub3ciLCJEYXRlIiwidmlvbGF0aW9ucyIsImdldCIsImNvdW50IiwibGFzdFZpb2xhdGlvbiIsInNldCIsImxvZ1NlY3VyaXR5RXZlbnQiLCJ2aW9sYXRpb25Db3VudCIsInVzZXJBZ2VudCIsImhlYWRlcnMiLCJwYXRoIiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJlcnJvciIsInR5cGUiLCJyZXRyeUFmdGVyIiwiTWF0aCIsInJvdW5kIiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJleHBvcnRzIiwiZ2VuZXJhbFJhdGVMaW1pdCIsImRlZmF1bHQiLCJtYXgiLCJtZXNzYWdlIiwic3RhbmRhcmRIZWFkZXJzIiwibGVnYWN5SGVhZGVycyIsImhhbmRsZXIiLCJhdXRoUmF0ZUxpbWl0Iiwic2tpcFN1Y2Nlc3NmdWxSZXF1ZXN0cyIsImFwaVJhdGVMaW1pdCIsInRlc3RFeGVjdXRpb25SYXRlTGltaXQiLCJzcGVlZExpbWl0ZXIiLCJkZWxheUFmdGVyIiwiZGVsYXlNcyIsInVzZWQiLCJtYXhEZWxheU1zIiwic2tpcEZhaWxlZFJlcXVlc3RzIiwiaGVhdnlPcGVyYXRpb25SYXRlTGltaXQiLCJ1cGxvYWRSYXRlTGltaXQiLCJlbmRwb2ludFJhdGVMaW1pdHMiLCJkeW5hbWljUmF0ZUxpbWl0IiwibmV4dCIsInRpbWVTaW5jZUxhc3RWaW9sYXRpb24iLCJnZXRUaW1lIiwicmVhc29uIiwiYWN0aW9uIiwic2V0SW50ZXJ2YWwiLCJvbmVIb3VyQWdvIiwiZW50cmllcyIsImRlbGV0ZSIsImdldFJhdGVMaW1pdFN0YXRzIiwidG90YWxWaW9sYXRpb25zIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwicmVkdWNlIiwic3VtIiwidW5pcXVlQ2xpZW50cyIsInNpemUiLCJ0b3BWaW9sYXRvcnMiLCJtYXAiLCJzb3J0IiwiYSIsInNsaWNlIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL21pZGRsZXdhcmUvcmF0ZUxpbWl0aW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByYXRlTGltaXQgZnJvbSAnZXhwcmVzcy1yYXRlLWxpbWl0JztcbmltcG9ydCBzbG93RG93biBmcm9tICdleHByZXNzLXNsb3ctZG93bic7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBsb2dTZWN1cml0eUV2ZW50IH0gZnJvbSAnLi9zdHJ1Y3R1cmVkTG9nZ2luZyc7XG5cbi8vIFJlZGlzIHN0b3JlIGZvciBkaXN0cmlidXRlZCByYXRlIGxpbWl0aW5nIChvcHRpb25hbClcbi8vIGltcG9ydCBSZWRpc1N0b3JlIGZyb20gJ3JhdGUtbGltaXQtcmVkaXMnO1xuLy8gaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xuXG4vLyBjb25zdCByZWRpcyA9IG5ldyBSZWRpcyhwcm9jZXNzLmVudi5SRURJU19VUkwgfHwgJ3JlZGlzOi8vbG9jYWxob3N0OjYzNzknKTtcblxuLy8gRW5oYW5jZWQgcmF0ZSBsaW1pdGluZyB3aXRoIHNlY3VyaXR5IG1vbml0b3JpbmdcbmludGVyZmFjZSBSYXRlTGltaXRDb25maWcge1xuICB3aW5kb3dNczogbnVtYmVyO1xuICBtYXg6IG51bWJlcjtcbiAgbWVzc2FnZTogb2JqZWN0O1xuICBzdGFuZGFyZEhlYWRlcnM6IGJvb2xlYW47XG4gIGxlZ2FjeUhlYWRlcnM6IGJvb2xlYW47XG4gIHNraXBTdWNjZXNzZnVsUmVxdWVzdHM/OiBib29sZWFuO1xuICBoYW5kbGVyOiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB2b2lkO1xufVxuXG4vLyBSYXRlIGxpbWl0IHZpb2xhdGlvbiB0cmFja2luZ1xuY29uc3QgcmF0ZUxpbWl0VmlvbGF0aW9ucyA9IG5ldyBNYXA8c3RyaW5nLCB7IGNvdW50OiBudW1iZXI7IGxhc3RWaW9sYXRpb246IERhdGUgfT4oKTtcblxuLy8gRW5oYW5jZWQgcmF0ZSBsaW1pdCBoYW5kbGVyIHdpdGggc2VjdXJpdHkgbG9nZ2luZ1xuY29uc3QgY3JlYXRlUmF0ZUxpbWl0SGFuZGxlciA9IChsaW1pdFR5cGU6IHN0cmluZywgbGltaXQ6IG51bWJlciwgd2luZG93TXM6IG51bWJlcikgPT4ge1xuICByZXR1cm4gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGNsaWVudElkID0gcmVxLmlwIHx8ICd1bmtub3duJztcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIFxuICAgIC8vIFRyYWNrIHZpb2xhdGlvbnNcbiAgICBjb25zdCB2aW9sYXRpb25zID0gcmF0ZUxpbWl0VmlvbGF0aW9ucy5nZXQoY2xpZW50SWQpIHx8IHsgY291bnQ6IDAsIGxhc3RWaW9sYXRpb246IG5ldyBEYXRlKDApIH07XG4gICAgdmlvbGF0aW9ucy5jb3VudCArPSAxO1xuICAgIHZpb2xhdGlvbnMubGFzdFZpb2xhdGlvbiA9IG5vdztcbiAgICByYXRlTGltaXRWaW9sYXRpb25zLnNldChjbGllbnRJZCwgdmlvbGF0aW9ucyk7XG5cbiAgICAvLyBMb2cgc2VjdXJpdHkgZXZlbnRcbiAgICBsb2dTZWN1cml0eUV2ZW50KCdyYXRlX2xpbWl0JywgcmVxLCB7XG4gICAgICBsaW1pdFR5cGUsXG4gICAgICBsaW1pdCxcbiAgICAgIHdpbmRvd01zLFxuICAgICAgdmlvbGF0aW9uQ291bnQ6IHZpb2xhdGlvbnMuY291bnQsXG4gICAgICB1c2VyQWdlbnQ6IHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J10sXG4gICAgICBwYXRoOiByZXEucGF0aFxuICAgIH0pO1xuXG4gICAgLy8gRW5oYW5jZWQgcmVzcG9uc2Ugd2l0aCBzZWN1cml0eSBoZWFkZXJzXG4gICAgcmVzLnN0YXR1cyg0MjkpLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogJ1JhdGUgbGltaXQgZXhjZWVkZWQnLFxuICAgICAgdHlwZTogbGltaXRUeXBlLFxuICAgICAgbGltaXQsXG4gICAgICB3aW5kb3dNcyxcbiAgICAgIHJldHJ5QWZ0ZXI6IE1hdGgucm91bmQod2luZG93TXMgLyAxMDAwKSxcbiAgICAgIGlwOiByZXEuaXAsXG4gICAgICBwYXRoOiByZXEucGF0aCxcbiAgICAgIHZpb2xhdGlvbkNvdW50OiB2aW9sYXRpb25zLmNvdW50LFxuICAgICAgdGltZXN0YW1wOiBub3cudG9JU09TdHJpbmcoKVxuICAgIH0pO1xuICB9O1xufTtcblxuLy8gR2VuZXJhbCBBUEkgcmF0ZSBsaW1pdFxuZXhwb3J0IGNvbnN0IGdlbmVyYWxSYXRlTGltaXQgPSByYXRlTGltaXQoe1xuICB3aW5kb3dNczogMTUgKiA2MCAqIDEwMDAsIC8vIDE1IG1pbnV0ZXNcbiAgbWF4OiAxMDAsIC8vIExpbWl0IGVhY2ggSVAgdG8gMTAwIHJlcXVlc3RzIHBlciB3aW5kb3dNc1xuICBtZXNzYWdlOiB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3I6ICdUb28gbWFueSByZXF1ZXN0cyBmcm9tIHRoaXMgSVAsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgICByZXRyeUFmdGVyOiAxNSAqIDYwIC8vIHNlY29uZHNcbiAgfSxcbiAgc3RhbmRhcmRIZWFkZXJzOiB0cnVlLCAvLyBSZXR1cm4gcmF0ZSBsaW1pdCBpbmZvIGluIHRoZSBgUmF0ZUxpbWl0LSpgIGhlYWRlcnNcbiAgbGVnYWN5SGVhZGVyczogZmFsc2UsIC8vIERpc2FibGUgdGhlIGBYLVJhdGVMaW1pdC0qYCBoZWFkZXJzXG4gIC8vIHN0b3JlOiBuZXcgUmVkaXNTdG9yZSh7XG4gIC8vICAgc2VuZENvbW1hbmQ6ICguLi5hcmdzOiBzdHJpbmdbXSkgPT4gcmVkaXMuY2FsbCguLi5hcmdzKSxcbiAgLy8gfSksXG4gIGhhbmRsZXI6IGNyZWF0ZVJhdGVMaW1pdEhhbmRsZXIoJ2dlbmVyYWwnLCAxMDAsIDE1ICogNjAgKiAxMDAwKVxufSk7XG5cbi8vIFN0cmljdCByYXRlIGxpbWl0IGZvciBhdXRoZW50aWNhdGlvbiBlbmRwb2ludHNcbmV4cG9ydCBjb25zdCBhdXRoUmF0ZUxpbWl0ID0gcmF0ZUxpbWl0KHtcbiAgd2luZG93TXM6IDE1ICogNjAgKiAxMDAwLCAvLyAxNSBtaW51dGVzXG4gIG1heDogNSwgLy8gTGltaXQgZWFjaCBJUCB0byA1IGxvZ2luIGF0dGVtcHRzIHBlciB3aW5kb3dNc1xuICBtZXNzYWdlOiB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3I6ICdUb28gbWFueSBhdXRoZW50aWNhdGlvbiBhdHRlbXB0cywgcGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nLFxuICAgIHJldHJ5QWZ0ZXI6IDE1ICogNjBcbiAgfSxcbiAgc3RhbmRhcmRIZWFkZXJzOiB0cnVlLFxuICBsZWdhY3lIZWFkZXJzOiBmYWxzZSxcbiAgc2tpcFN1Y2Nlc3NmdWxSZXF1ZXN0czogdHJ1ZSwgLy8gRG9uJ3QgY291bnQgc3VjY2Vzc2Z1bCByZXF1ZXN0c1xuICBoYW5kbGVyOiBjcmVhdGVSYXRlTGltaXRIYW5kbGVyKCdhdXRoZW50aWNhdGlvbicsIDUsIDE1ICogNjAgKiAxMDAwKVxufSk7XG5cbi8vIEFQSSByYXRlIGxpbWl0IGZvciBoaWdoLWZyZXF1ZW5jeSBlbmRwb2ludHNcbmV4cG9ydCBjb25zdCBhcGlSYXRlTGltaXQgPSByYXRlTGltaXQoe1xuICB3aW5kb3dNczogMSAqIDYwICogMTAwMCwgLy8gMSBtaW51dGVcbiAgbWF4OiA1MCwgLy8gTGltaXQgZWFjaCBJUCB0byA1MCByZXF1ZXN0cyBwZXIgbWludXRlXG4gIG1lc3NhZ2U6IHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcjogJ0FQSSByYXRlIGxpbWl0IGV4Y2VlZGVkJyxcbiAgICByZXRyeUFmdGVyOiA2MFxuICB9LFxuICBzdGFuZGFyZEhlYWRlcnM6IHRydWUsXG4gIGxlZ2FjeUhlYWRlcnM6IGZhbHNlXG59KTtcblxuLy8gVGVzdCBleGVjdXRpb24gcmF0ZSBsaW1pdCAobW9yZSBwZXJtaXNzaXZlIGZvciB0ZXN0aW5nKVxuZXhwb3J0IGNvbnN0IHRlc3RFeGVjdXRpb25SYXRlTGltaXQgPSByYXRlTGltaXQoe1xuICB3aW5kb3dNczogNSAqIDYwICogMTAwMCwgLy8gNSBtaW51dGVzXG4gIG1heDogMjAsIC8vIExpbWl0IGVhY2ggSVAgdG8gMjAgdGVzdCBleGVjdXRpb25zIHBlciA1IG1pbnV0ZXNcbiAgbWVzc2FnZToge1xuICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgIGVycm9yOiAnVGVzdCBleGVjdXRpb24gcmF0ZSBsaW1pdCBleGNlZWRlZCcsXG4gICAgcmV0cnlBZnRlcjogNSAqIDYwXG4gIH0sXG4gIHN0YW5kYXJkSGVhZGVyczogdHJ1ZSxcbiAgbGVnYWN5SGVhZGVyczogZmFsc2Vcbn0pO1xuXG4vLyBTbG93IGRvd24gbWlkZGxld2FyZSBmb3IgYWRkaXRpb25hbCBwcm90ZWN0aW9uXG5leHBvcnQgY29uc3Qgc3BlZWRMaW1pdGVyOiBhbnkgPSBzbG93RG93bih7XG4gIHdpbmRvd01zOiAxNSAqIDYwICogMTAwMCwgLy8gMTUgbWludXRlc1xuICBkZWxheUFmdGVyOiA1MCwgLy8gQWxsb3cgNTAgcmVxdWVzdHMgcGVyIDE1IG1pbnV0ZXMgYXQgZnVsbCBzcGVlZFxuICBkZWxheU1zOiAodXNlZDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuICh1c2VkIC0gNTApICogNTAwOyAvLyBBZGQgNTAwbXMgZGVsYXkgZm9yIGVhY2ggcmVxdWVzdCBhZnRlciBkZWxheUFmdGVyXG4gIH0sXG4gIG1heERlbGF5TXM6IDEwMDAwLCAvLyBNYXhpbXVtIGRlbGF5IG9mIDEwIHNlY29uZHNcbiAgc2tpcEZhaWxlZFJlcXVlc3RzOiBmYWxzZSxcbiAgc2tpcFN1Y2Nlc3NmdWxSZXF1ZXN0czogZmFsc2Vcbn0pO1xuXG4vLyBIZWF2eSBvcGVyYXRpb24gcmF0ZSBsaW1pdCAoZm9yIHJlc291cmNlLWludGVuc2l2ZSBvcGVyYXRpb25zKVxuZXhwb3J0IGNvbnN0IGhlYXZ5T3BlcmF0aW9uUmF0ZUxpbWl0ID0gcmF0ZUxpbWl0KHtcbiAgd2luZG93TXM6IDYwICogNjAgKiAxMDAwLCAvLyAxIGhvdXJcbiAgbWF4OiAxMCwgLy8gTGltaXQgZWFjaCBJUCB0byAxMCBoZWF2eSBvcGVyYXRpb25zIHBlciBob3VyXG4gIG1lc3NhZ2U6IHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcjogJ0hlYXZ5IG9wZXJhdGlvbiByYXRlIGxpbWl0IGV4Y2VlZGVkJyxcbiAgICByZXRyeUFmdGVyOiA2MCAqIDYwXG4gIH0sXG4gIHN0YW5kYXJkSGVhZGVyczogdHJ1ZSxcbiAgbGVnYWN5SGVhZGVyczogZmFsc2Vcbn0pO1xuXG4vLyBGaWxlIHVwbG9hZCByYXRlIGxpbWl0XG5leHBvcnQgY29uc3QgdXBsb2FkUmF0ZUxpbWl0ID0gcmF0ZUxpbWl0KHtcbiAgd2luZG93TXM6IDYwICogNjAgKiAxMDAwLCAvLyAxIGhvdXJcbiAgbWF4OiAyMCwgLy8gTGltaXQgZWFjaCBJUCB0byAyMCB1cGxvYWRzIHBlciBob3VyXG4gIG1lc3NhZ2U6IHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcjogJ1VwbG9hZCByYXRlIGxpbWl0IGV4Y2VlZGVkJyxcbiAgICByZXRyeUFmdGVyOiA2MCAqIDYwXG4gIH0sXG4gIHN0YW5kYXJkSGVhZGVyczogdHJ1ZSxcbiAgbGVnYWN5SGVhZGVyczogZmFsc2UsXG4gIGhhbmRsZXI6IGNyZWF0ZVJhdGVMaW1pdEhhbmRsZXIoJ3VwbG9hZCcsIDIwLCA2MCAqIDYwICogMTAwMClcbn0pO1xuXG4vLyBDb21wcmVoZW5zaXZlIGVuZHBvaW50LXNwZWNpZmljIHJhdGUgbGltaXRpbmdcbmV4cG9ydCBjb25zdCBlbmRwb2ludFJhdGVMaW1pdHMgPSB7XG4gIC8vIENyaXRpY2FsIHNlY3VyaXR5IGVuZHBvaW50c1xuICAnL2FwaS9hdXRoL2xvZ2luJzogcmF0ZUxpbWl0KHtcbiAgICB3aW5kb3dNczogMTUgKiA2MCAqIDEwMDAsXG4gICAgbWF4OiAzLCAvLyBWZXJ5IHN0cmljdCBmb3IgbG9naW5cbiAgICBoYW5kbGVyOiBjcmVhdGVSYXRlTGltaXRIYW5kbGVyKCdsb2dpbicsIDMsIDE1ICogNjAgKiAxMDAwKVxuICB9KSxcbiAgXG4gICcvYXBpL2F1dGgvcmVnaXN0ZXInOiByYXRlTGltaXQoe1xuICAgIHdpbmRvd01zOiA2MCAqIDYwICogMTAwMCxcbiAgICBtYXg6IDMsIC8vIE9ubHkgMyByZWdpc3RyYXRpb25zIHBlciBob3VyIHBlciBJUFxuICAgIGhhbmRsZXI6IGNyZWF0ZVJhdGVMaW1pdEhhbmRsZXIoJ3JlZ2lzdGVyJywgMywgNjAgKiA2MCAqIDEwMDApXG4gIH0pLFxuXG4gICcvYXBpL2F1dGgvcmVmcmVzaCc6IHJhdGVMaW1pdCh7XG4gICAgd2luZG93TXM6IDUgKiA2MCAqIDEwMDAsXG4gICAgbWF4OiAxMCwgLy8gMTAgdG9rZW4gcmVmcmVzaGVzIHBlciA1IG1pbnV0ZXNcbiAgICBoYW5kbGVyOiBjcmVhdGVSYXRlTGltaXRIYW5kbGVyKCdyZWZyZXNoJywgMTAsIDUgKiA2MCAqIDEwMDApXG4gIH0pLFxuXG4gIC8vIEFQSSBlbmRwb2ludHNcbiAgJy9hcGkvcHJvbXB0LWNhcmRzJzogcmF0ZUxpbWl0KHtcbiAgICB3aW5kb3dNczogMSAqIDYwICogMTAwMCxcbiAgICBtYXg6IDMwLFxuICAgIGhhbmRsZXI6IGNyZWF0ZVJhdGVMaW1pdEhhbmRsZXIoJ3Byb21wdC1jYXJkcycsIDMwLCAxICogNjAgKiAxMDAwKVxuICB9KSxcblxuICAnL2FwaS90ZXN0LWV4ZWN1dGlvbic6IHJhdGVMaW1pdCh7XG4gICAgd2luZG93TXM6IDUgKiA2MCAqIDEwMDAsXG4gICAgbWF4OiAxNSxcbiAgICBoYW5kbGVyOiBjcmVhdGVSYXRlTGltaXRIYW5kbGVyKCd0ZXN0LWV4ZWN1dGlvbicsIDE1LCA1ICogNjAgKiAxMDAwKVxuICB9KSxcblxuICAnL2FwaS9hbmFseXRpY3MnOiByYXRlTGltaXQoe1xuICAgIHdpbmRvd01zOiAxICogNjAgKiAxMDAwLFxuICAgIG1heDogMjUsXG4gICAgaGFuZGxlcjogY3JlYXRlUmF0ZUxpbWl0SGFuZGxlcignYW5hbHl0aWNzJywgMjUsIDEgKiA2MCAqIDEwMDApXG4gIH0pLFxuXG4gICcvYXBpL3NlY3VyaXR5JzogcmF0ZUxpbWl0KHtcbiAgICB3aW5kb3dNczogNSAqIDYwICogMTAwMCxcbiAgICBtYXg6IDEwLFxuICAgIGhhbmRsZXI6IGNyZWF0ZVJhdGVMaW1pdEhhbmRsZXIoJ3NlY3VyaXR5JywgMTAsIDUgKiA2MCAqIDEwMDApXG4gIH0pXG59O1xuXG4vLyBEeW5hbWljIHJhdGUgbGltaXRpbmcgYmFzZWQgb24gdXNlciBiZWhhdmlvclxuZXhwb3J0IGNvbnN0IGR5bmFtaWNSYXRlTGltaXQgPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkID0+IHtcbiAgY29uc3QgY2xpZW50SWQgPSByZXEuaXAgfHwgJ3Vua25vd24nO1xuICBjb25zdCB2aW9sYXRpb25zID0gcmF0ZUxpbWl0VmlvbGF0aW9ucy5nZXQoY2xpZW50SWQpO1xuXG4gIC8vIElmIGNsaWVudCBoYXMgbXVsdGlwbGUgdmlvbGF0aW9ucywgYXBwbHkgc3RyaWN0ZXIgbGltaXRzXG4gIGlmICh2aW9sYXRpb25zICYmIHZpb2xhdGlvbnMuY291bnQgPiA1KSB7XG4gICAgY29uc3QgdGltZVNpbmNlTGFzdFZpb2xhdGlvbiA9IERhdGUubm93KCkgLSB2aW9sYXRpb25zLmxhc3RWaW9sYXRpb24uZ2V0VGltZSgpO1xuICAgIFxuICAgIC8vIElmIHJlY2VudCB2aW9sYXRpb25zLCBibG9jayB0ZW1wb3JhcmlseVxuICAgIGlmICh0aW1lU2luY2VMYXN0VmlvbGF0aW9uIDwgNjAgKiA2MCAqIDEwMDApIHsgLy8gMSBob3VyXG4gICAgICBsb2dTZWN1cml0eUV2ZW50KCdzdXNwaWNpb3VzX2FjdGl2aXR5JywgcmVxLCB7XG4gICAgICAgIHJlYXNvbjogJ011bHRpcGxlIHJhdGUgbGltaXQgdmlvbGF0aW9ucycsXG4gICAgICAgIHZpb2xhdGlvbkNvdW50OiB2aW9sYXRpb25zLmNvdW50LFxuICAgICAgICBhY3Rpb246ICd0ZW1wb3JhcnlfYmxvY2snXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1cyg0MjkpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdUZW1wb3JhcnkgYmxvY2sgZHVlIHRvIHN1c3BpY2lvdXMgYWN0aXZpdHknLFxuICAgICAgICByZXRyeUFmdGVyOiAzNjAwLFxuICAgICAgICB2aW9sYXRpb25Db3VudDogdmlvbGF0aW9ucy5jb3VudFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbmV4dCgpO1xufTtcblxuLy8gQ2xlYW51cCBleHBpcmVkIHZpb2xhdGlvbiByZWNvcmRzXG5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gIGNvbnN0IG9uZUhvdXJBZ28gPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApO1xuICBcbiAgZm9yIChjb25zdCBbY2xpZW50SWQsIHZpb2xhdGlvbnNdIG9mIHJhdGVMaW1pdFZpb2xhdGlvbnMuZW50cmllcygpKSB7XG4gICAgaWYgKHZpb2xhdGlvbnMubGFzdFZpb2xhdGlvbiA8IG9uZUhvdXJBZ28pIHtcbiAgICAgIHJhdGVMaW1pdFZpb2xhdGlvbnMuZGVsZXRlKGNsaWVudElkKTtcbiAgICB9XG4gIH1cbn0sIDYwICogNjAgKiAxMDAwKTsgLy8gQ2xlYW4gdXAgZXZlcnkgaG91clxuXG4vLyBSYXRlIGxpbWl0aW5nIHN0YXRpc3RpY3NcbmV4cG9ydCBjb25zdCBnZXRSYXRlTGltaXRTdGF0cyA9ICgpOiB7XG4gIHRvdGFsVmlvbGF0aW9uczogbnVtYmVyO1xuICB1bmlxdWVDbGllbnRzOiBudW1iZXI7XG4gIHRvcFZpb2xhdG9yczogQXJyYXk8eyBjbGllbnRJZDogc3RyaW5nOyBjb3VudDogbnVtYmVyOyBsYXN0VmlvbGF0aW9uOiBEYXRlIH0+O1xufSA9PiB7XG4gIGNvbnN0IHRvdGFsVmlvbGF0aW9ucyA9IEFycmF5LmZyb20ocmF0ZUxpbWl0VmlvbGF0aW9ucy52YWx1ZXMoKSlcbiAgICAucmVkdWNlKChzdW0sIHZpb2xhdGlvbnMpID0+IHN1bSArIHZpb2xhdGlvbnMuY291bnQsIDApO1xuICBcbiAgY29uc3QgdW5pcXVlQ2xpZW50cyA9IHJhdGVMaW1pdFZpb2xhdGlvbnMuc2l6ZTtcbiAgXG4gIGNvbnN0IHRvcFZpb2xhdG9ycyA9IEFycmF5LmZyb20ocmF0ZUxpbWl0VmlvbGF0aW9ucy5lbnRyaWVzKCkpXG4gICAgLm1hcCgoW2NsaWVudElkLCB2aW9sYXRpb25zXSkgPT4gKHsgY2xpZW50SWQsIC4uLnZpb2xhdGlvbnMgfSkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KVxuICAgIC5zbGljZSgwLCAxMCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3RhbFZpb2xhdGlvbnMsXG4gICAgdW5pcXVlQ2xpZW50cyxcbiAgICB0b3BWaW9sYXRvcnNcbiAgfTtcbn07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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