{"version":3,"names":["cov_esdsqjozq","actualCoverage","express_rate_limit_1","s","__importDefault","require","express_slow_down_1","structuredLogging_1","rateLimitViolations","Map","createRateLimitHandler","limitType","limit","windowMs","f","req","res","clientId","b","ip","now","Date","violations","get","count","lastViolation","set","logSecurityEvent","violationCount","userAgent","headers","path","status","json","success","error","type","retryAfter","Math","round","timestamp","toISOString","exports","generalRateLimit","default","max","message","standardHeaders","legacyHeaders","handler","authRateLimit","skipSuccessfulRequests","apiRateLimit","testExecutionRateLimit","speedLimiter","delayAfter","delayMs","used","maxDelayMs","skipFailedRequests","heavyOperationRateLimit","uploadRateLimit","endpointRateLimits","dynamicRateLimit","next","timeSinceLastViolation","getTime","reason","action","setInterval","oneHourAgo","entries","delete","getRateLimitStats","totalViolations","Array","from","values","reduce","sum","uniqueClients","size","topViolators","map","sort","a","slice"],"sources":["/workspaces/prompt-card-system/backend/src/middleware/rateLimiting.ts"],"sourcesContent":["import rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\nimport { Request, Response, NextFunction } from 'express';\nimport { logSecurityEvent } from './structuredLogging';\n\n// Redis store for distributed rate limiting (optional)\n// import RedisStore from 'rate-limit-redis';\n// import Redis from 'ioredis';\n\n// const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');\n\n// Enhanced rate limiting with security monitoring\ninterface RateLimitConfig {\n  windowMs: number;\n  max: number;\n  message: object;\n  standardHeaders: boolean;\n  legacyHeaders: boolean;\n  skipSuccessfulRequests?: boolean;\n  handler: (req: Request, res: Response) => void;\n}\n\n// Rate limit violation tracking\nconst rateLimitViolations = new Map<string, { count: number; lastViolation: Date }>();\n\n// Enhanced rate limit handler with security logging\nconst createRateLimitHandler = (limitType: string, limit: number, windowMs: number) => {\n  return (req: Request, res: Response): void => {\n    const clientId = req.ip || 'unknown';\n    const now = new Date();\n    \n    // Track violations\n    const violations = rateLimitViolations.get(clientId) || { count: 0, lastViolation: new Date(0) };\n    violations.count += 1;\n    violations.lastViolation = now;\n    rateLimitViolations.set(clientId, violations);\n\n    // Log security event\n    logSecurityEvent('rate_limit', req, {\n      limitType,\n      limit,\n      windowMs,\n      violationCount: violations.count,\n      userAgent: req.headers['user-agent'],\n      path: req.path\n    });\n\n    // Enhanced response with security headers\n    res.status(429).json({\n      success: false,\n      error: 'Rate limit exceeded',\n      type: limitType,\n      limit,\n      windowMs,\n      retryAfter: Math.round(windowMs / 1000),\n      ip: req.ip,\n      path: req.path,\n      violationCount: violations.count,\n      timestamp: now.toISOString()\n    });\n  };\n};\n\n// General API rate limit\nexport const generalRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many requests from this IP, please try again later.',\n    retryAfter: 15 * 60 // seconds\n  },\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n  // store: new RedisStore({\n  //   sendCommand: (...args: string[]) => redis.call(...args),\n  // }),\n  handler: createRateLimitHandler('general', 100, 15 * 60 * 1000)\n});\n\n// Strict rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 login attempts per windowMs\n  message: {\n    success: false,\n    error: 'Too many authentication attempts, please try again later.',\n    retryAfter: 15 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true, // Don't count successful requests\n  handler: createRateLimitHandler('authentication', 5, 15 * 60 * 1000)\n});\n\n// API rate limit for high-frequency endpoints\nexport const apiRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 50, // Limit each IP to 50 requests per minute\n  message: {\n    success: false,\n    error: 'API rate limit exceeded',\n    retryAfter: 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Test execution rate limit (more permissive for testing)\nexport const testExecutionRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 20, // Limit each IP to 20 test executions per 5 minutes\n  message: {\n    success: false,\n    error: 'Test execution rate limit exceeded',\n    retryAfter: 5 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Slow down middleware for additional protection\nexport const speedLimiter: any = slowDown({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  delayAfter: 50, // Allow 50 requests per 15 minutes at full speed\n  delayMs: (used: number) => {\n    return (used - 50) * 500; // Add 500ms delay for each request after delayAfter\n  },\n  maxDelayMs: 10000, // Maximum delay of 10 seconds\n  skipFailedRequests: false,\n  skipSuccessfulRequests: false\n});\n\n// Heavy operation rate limit (for resource-intensive operations)\nexport const heavyOperationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 10, // Limit each IP to 10 heavy operations per hour\n  message: {\n    success: false,\n    error: 'Heavy operation rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// File upload rate limit\nexport const uploadRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 20, // Limit each IP to 20 uploads per hour\n  message: {\n    success: false,\n    error: 'Upload rate limit exceeded',\n    retryAfter: 60 * 60\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: createRateLimitHandler('upload', 20, 60 * 60 * 1000)\n});\n\n// Comprehensive endpoint-specific rate limiting\nexport const endpointRateLimits = {\n  // Critical security endpoints\n  '/api/auth/login': rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 3, // Very strict for login\n    handler: createRateLimitHandler('login', 3, 15 * 60 * 1000)\n  }),\n  \n  '/api/auth/register': rateLimit({\n    windowMs: 60 * 60 * 1000,\n    max: 3, // Only 3 registrations per hour per IP\n    handler: createRateLimitHandler('register', 3, 60 * 60 * 1000)\n  }),\n\n  '/api/auth/refresh': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 10, // 10 token refreshes per 5 minutes\n    handler: createRateLimitHandler('refresh', 10, 5 * 60 * 1000)\n  }),\n\n  // API endpoints\n  '/api/prompt-cards': rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 30,\n    handler: createRateLimitHandler('prompt-cards', 30, 1 * 60 * 1000)\n  }),\n\n  '/api/test-execution': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 15,\n    handler: createRateLimitHandler('test-execution', 15, 5 * 60 * 1000)\n  }),\n\n  '/api/analytics': rateLimit({\n    windowMs: 1 * 60 * 1000,\n    max: 25,\n    handler: createRateLimitHandler('analytics', 25, 1 * 60 * 1000)\n  }),\n\n  '/api/security': rateLimit({\n    windowMs: 5 * 60 * 1000,\n    max: 10,\n    handler: createRateLimitHandler('security', 10, 5 * 60 * 1000)\n  })\n};\n\n// Dynamic rate limiting based on user behavior\nexport const dynamicRateLimit = (req: Request, res: Response, next: NextFunction): void => {\n  const clientId = req.ip || 'unknown';\n  const violations = rateLimitViolations.get(clientId);\n\n  // If client has multiple violations, apply stricter limits\n  if (violations && violations.count > 5) {\n    const timeSinceLastViolation = Date.now() - violations.lastViolation.getTime();\n    \n    // If recent violations, block temporarily\n    if (timeSinceLastViolation < 60 * 60 * 1000) { // 1 hour\n      logSecurityEvent('suspicious_activity', req, {\n        reason: 'Multiple rate limit violations',\n        violationCount: violations.count,\n        action: 'temporary_block'\n      });\n\n      res.status(429).json({\n        success: false,\n        error: 'Temporary block due to suspicious activity',\n        retryAfter: 3600,\n        violationCount: violations.count\n      });\n      return;\n    }\n  }\n\n  next();\n};\n\n// Cleanup expired violation records\nsetInterval(() => {\n  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n  \n  for (const [clientId, violations] of rateLimitViolations.entries()) {\n    if (violations.lastViolation < oneHourAgo) {\n      rateLimitViolations.delete(clientId);\n    }\n  }\n}, 60 * 60 * 1000); // Clean up every hour\n\n// Rate limiting statistics\nexport const getRateLimitStats = (): {\n  totalViolations: number;\n  uniqueClients: number;\n  topViolators: Array<{ clientId: string; count: number; lastViolation: Date }>;\n} => {\n  const totalViolations = Array.from(rateLimitViolations.values())\n    .reduce((sum, violations) => sum + violations.count, 0);\n  \n  const uniqueClients = rateLimitViolations.size;\n  \n  const topViolators = Array.from(rateLimitViolations.entries())\n    .map(([clientId, violations]) => ({ clientId, ...violations }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n\n  return {\n    totalViolations,\n    uniqueClients,\n    topViolators\n  };\n};"],"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","ignoreList":[]}