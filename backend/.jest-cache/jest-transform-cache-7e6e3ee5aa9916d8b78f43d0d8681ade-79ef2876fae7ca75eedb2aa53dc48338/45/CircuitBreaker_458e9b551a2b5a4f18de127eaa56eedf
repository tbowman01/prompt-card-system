d1659b9ad9b5a687f6a094f8c6500da6
"use strict";

/* istanbul ignore next */
function cov_ivsxppgcx() {
  var path = "/workspaces/prompt-card-system/backend/src/services/health/CircuitBreaker.ts";
  var hash = "e2e48879557fd2725ba8effaa29d6b7df7049adc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/health/CircuitBreaker.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 128
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 10,
          column: 84
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "5": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "6": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 16
        }
      },
      "8": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "12": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "13": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 32
        }
      },
      "15": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "16": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 32
        }
      },
      "17": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 36
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "19": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 32,
          column: 10
        }
      },
      "20": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "23": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 59
        }
      },
      "24": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "25": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 93
        }
      },
      "26": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "27": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 48,
          column: 122
        }
      },
      "28": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "29": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 28
        }
      },
      "30": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "31": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 58,
          column: 37
        }
      },
      "32": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 29
        }
      },
      "33": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 26
        }
      },
      "34": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 34
        }
      },
      "35": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 24
        }
      },
      "36": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "37": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 38
        }
      },
      "38": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "39": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 32
        }
      },
      "40": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "41": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 29
        }
      },
      "42": {
        start: {
          line: 76,
          column: 13
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "43": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 34
        }
      },
      "44": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "45": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 29
        }
      },
      "46": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 38
        }
      },
      "47": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 28
        }
      },
      "48": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "49": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "50": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 24
        }
      },
      "51": {
        start: {
          line: 99,
          column: 13
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "52": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "53": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 28
        }
      },
      "54": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 46
        }
      },
      "55": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 75
        }
      },
      "56": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 108
        }
      },
      "57": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "58": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 48
        }
      },
      "59": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 30
        }
      },
      "60": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 30
        }
      },
      "61": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 32
        }
      },
      "62": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 92
        }
      },
      "63": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "64": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 75
        }
      },
      "65": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "66": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 46
        }
      },
      "67": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 75
        }
      },
      "68": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 82
        }
      },
      "69": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "70": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 21
        }
      },
      "71": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 82
        }
      },
      "72": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "73": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 55
        }
      },
      "74": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "75": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 169,
          column: 40
        }
      },
      "76": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 34
        }
      },
      "77": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "78": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "79": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 67
        }
      },
      "80": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 52
        }
      },
      "81": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 77
        }
      },
      "82": {
        start: {
          line: 181,
          column: 43
        },
        end: {
          line: 181,
          column: 75
        }
      },
      "83": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 77
        }
      },
      "84": {
        start: {
          line: 182,
          column: 43
        },
        end: {
          line: 182,
          column: 75
        }
      },
      "85": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 89
        }
      },
      "86": {
        start: {
          line: 183,
          column: 49
        },
        end: {
          line: 183,
          column: 87
        }
      },
      "87": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 79
        }
      },
      "88": {
        start: {
          line: 184,
          column: 44
        },
        end: {
          line: 184,
          column: 77
        }
      },
      "89": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 79
        }
      },
      "90": {
        start: {
          line: 185,
          column: 44
        },
        end: {
          line: 185,
          column: 77
        }
      },
      "91": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 46
        }
      },
      "92": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 38
        }
      },
      "93": {
        start: {
          line: 193,
          column: 22
        },
        end: {
          line: 193,
          column: 24
        }
      },
      "94": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "95": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 52
        }
      },
      "96": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 21
        }
      },
      "97": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 49
        }
      },
      "98": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 30
        }
      },
      "99": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 46
        }
      },
      "100": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 20
        }
      },
      "101": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 54
        }
      },
      "102": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 47
        }
      },
      "103": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 20
        }
      },
      "104": {
        start: {
          line: 217,
          column: 0
        },
        end: {
          line: 217,
          column: 56
        }
      },
      "105": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 218,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 1
          },
          end: {
            line: 6,
            column: 2
          }
        },
        loc: {
          start: {
            line: 6,
            column: 32
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 22
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 21
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 85
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 11
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 105
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 25
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 127
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 15
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 130
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 144
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 17
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 153
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 161
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 18
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 171
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 36
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 176
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 181,
            column: 33
          },
          end: {
            line: 181,
            column: 34
          }
        },
        loc: {
          start: {
            line: 181,
            column: 43
          },
          end: {
            line: 181,
            column: 75
          }
        },
        line: 181
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 182,
            column: 33
          },
          end: {
            line: 182,
            column: 34
          }
        },
        loc: {
          start: {
            line: 182,
            column: 43
          },
          end: {
            line: 182,
            column: 75
          }
        },
        line: 182
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 183,
            column: 39
          },
          end: {
            line: 183,
            column: 40
          }
        },
        loc: {
          start: {
            line: 183,
            column: 49
          },
          end: {
            line: 183,
            column: 87
          }
        },
        line: 183
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 184,
            column: 34
          },
          end: {
            line: 184,
            column: 35
          }
        },
        loc: {
          start: {
            line: 184,
            column: 44
          },
          end: {
            line: 184,
            column: 77
          }
        },
        line: 184
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 185,
            column: 34
          },
          end: {
            line: 185,
            column: 35
          }
        },
        loc: {
          start: {
            line: 185,
            column: 44
          },
          end: {
            line: 185,
            column: 77
          }
        },
        line: 185
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 189
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 15
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 192
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 31
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 199
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 202
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 24
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 205
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 25
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 209
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 25
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 212
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 3
          },
          end: {
            line: 10,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 3
          },
          end: {
            line: 10,
            column: 22
          }
        }, {
          start: {
            line: 10,
            column: 27
          },
          end: {
            line: 10,
            column: 81
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 12,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 38
          },
          end: {
            line: 12,
            column: 40
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: 47,
            column: 17
          },
          end: {
            line: 55,
            column: 13
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 78,
            column: 9
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 44
          },
          end: {
            line: 93,
            column: 57
          }
        }, {
          start: {
            line: 93,
            column: 60
          },
          end: {
            line: 93,
            column: 75
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 103,
            column: 9
          }
        }],
        line: 95
      },
      "9": {
        loc: {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "10": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 15
          },
          end: {
            line: 128,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 15
          },
          end: {
            line: 128,
            column: 40
          }
        }, {
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 74
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/health/CircuitBreaker.ts",
      mappings: ";;;AAAA,mCAAsC;AAEtC,IAAY,mBAIX;AAJD,WAAY,mBAAmB;IAC7B,wCAAiB,CAAA;IACjB,oCAAa,CAAA;IACb,8CAAuB,CAAA,CAAE,mCAAmC;AAC9D,CAAC,EAJW,mBAAmB,mCAAnB,mBAAmB,QAI9B;AAsBD,MAAa,cAAe,SAAQ,qBAAY;IAgB9C,YAAY,WAAmB,EAAE,SAAwC,EAAE;QACzE,KAAK,EAAE,CAAC;QAhBF,UAAK,GAAwB,mBAAmB,CAAC,MAAM,CAAC;QACxD,iBAAY,GAAG,CAAC,CAAC;QACjB,iBAAY,GAAG,CAAC,CAAC;QACjB,gBAAW,GAAgB,IAAI,CAAC;QAIxC,aAAa;QACL,kBAAa,GAAG,CAAC,CAAC;QAClB,kBAAa,GAAG,CAAC,CAAC;QAClB,mBAAc,GAAG,CAAC,CAAC;QACnB,gBAAW,GAAgB,IAAI,CAAC;QAChC,gBAAW,GAAgB,IAAI,CAAC;QAChC,cAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAI7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG;YACZ,gBAAgB,EAAE,CAAC;YACnB,YAAY,EAAE,KAAK,EAAE,WAAW;YAChC,gBAAgB,EAAE,MAAM,EAAE,YAAY;YACtC,gBAAgB,EAAE,CAAC;YACnB,GAAG,MAAM;SACV,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,OAAO,CAAI,EAAoB;QACnC,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,IAAI,EAAE,CAAC;YAC5C,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAAE,CAAC;gBAC9B,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC,SAAS,CAAC;gBAC3C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,CAAC,WAAW,qBAAqB,CAAC,CAAC;gBAC7E,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;oBACxB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,MAAM,EAAE,uBAAuB;iBAChC,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,WAAW,mBAAmB,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC3G,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;oBAC3B,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,MAAM,EAAE,sBAAsB;oBAC9B,WAAW,EAAE,IAAI,CAAC,WAAW;iBAC9B,CAAC,CAAC;gBACH,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;YAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAEO,SAAS;QACf,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,SAAS,EAAE,CAAC;YACjD,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;gBACtD,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC;QACH,CAAC;aAAM,IAAI,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,MAAM,EAAE,CAAC;YACrD,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,iCAAiC;QAC1D,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,YAAY,EAAE,IAAI,CAAC,YAAY;SAChC,CAAC,CAAC;IACL,CAAC;IAEO,SAAS,CAAC,KAAU;QAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAChE,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,SAAS,EAAE,CAAC;YACjD,oDAAoD;YACpD,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;aAAM,IAAI,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,MAAM,EAAE,CAAC;YACrD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;gBACtD,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,CAAC;QACH,CAAC;IACH,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAEnE,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,CAAC,WAAW,mBAAmB,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAEpG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,8BAA8B,IAAI,CAAC,MAAM,CAAC,gBAAgB,YAAY;SAC/E,CAAC,CAAC;IACL,CAAC;IAEO,KAAK;QACX,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,OAAO,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,WAAW,sBAAsB,CAAC,CAAC;QAEpF,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,sBAAsB,IAAI,CAAC,MAAM,CAAC,gBAAgB,uBAAuB;SAClF,CAAC,CAAC;IACL,CAAC;IAEO,kBAAkB;QACxB,OAAO,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;IACrE,CAAC;IAEM,QAAQ;QACb,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC7C,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;IACJ,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAEnE,OAAO,CAAC,GAAG,CAAC,0CAA0C,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAE1E,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,qBAAqB;SAC9B,CAAC,CAAC;IACL,CAAC;IAEM,UAAU;QACf,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,OAAO,CAAC,GAAG,CAAC,0CAA0C,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAE1E,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,qBAAqB;SAC9B,CAAC,CAAC;IACL,CAAC;IAEM,YAAY,CAAC,SAAwC;QAC1D,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC;QAE/C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;IACL,CAAC;CACF;AAtLD,wCAsLC;AAED,MAAa,sBAAsB;IAAnC;QACU,aAAQ,GAAG,IAAI,GAAG,EAA0B,CAAC;QAwCrD,8BAA8B;QACtB,iBAAY,GAAG,IAAI,qBAAY,EAAE,CAAC;IAe5C,CAAC;IAtDC,UAAU,CAAC,WAAmB,EAAE,MAAsC;QACpE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC;YACpC,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YACxD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAExC,iBAAiB;YACjB,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;YACjE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;YACjE,OAAO,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC,CAAC;YAC7E,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;YACnE,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;QACrE,CAAC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAE,CAAC;IACzC,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,QAAQ;QACN,MAAM,KAAK,GAAwC,EAAE,CAAC;QAEtD,KAAK,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnD,KAAK,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC1C,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,aAAa,CAAC,WAAmB;QAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAKD,EAAE,CAAC,KAAa,EAAE,QAAkC;QAClD,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,KAAa,EAAE,GAAG,IAAW;QAChC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,GAAG,CAAC,KAAa,EAAE,QAAkC;QACnD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAzDD,wDAyDC;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/health/CircuitBreaker.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\n\nexport enum CircuitBreakerState {\n  CLOSED = 'CLOSED',       // Normal operation\n  OPEN = 'OPEN',           // Circuit is open, requests fail fast\n  HALF_OPEN = 'HALF_OPEN'  // Testing if service has recovered\n}\n\ninterface CircuitBreakerConfig {\n  failureThreshold: number;    // Number of failures before opening\n  resetTimeout: number;        // Time to wait before trying again (ms)\n  monitoringPeriod: number;    // Time window for failure counting (ms)\n  successThreshold: number;    // Successes needed to close from half-open\n}\n\ninterface CircuitBreakerStats {\n  state: CircuitBreakerState;\n  failureCount: number;\n  successCount: number;\n  nextAttempt: Date | null;\n  totalRequests: number;\n  totalFailures: number;\n  totalSuccesses: number;\n  uptime: number;\n  lastFailure: Date | null;\n  lastSuccess: Date | null;\n}\n\nexport class CircuitBreaker extends EventEmitter {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failureCount = 0;\n  private successCount = 0;\n  private nextAttempt: Date | null = null;\n  private config: CircuitBreakerConfig;\n  private readonly serviceName: string;\n  \n  // Statistics\n  private totalRequests = 0;\n  private totalFailures = 0;\n  private totalSuccesses = 0;\n  private lastFailure: Date | null = null;\n  private lastSuccess: Date | null = null;\n  private startTime = new Date();\n\n  constructor(serviceName: string, config: Partial<CircuitBreakerConfig> = {}) {\n    super();\n    this.serviceName = serviceName;\n    this.config = {\n      failureThreshold: 5,\n      resetTimeout: 60000, // 1 minute\n      monitoringPeriod: 300000, // 5 minutes\n      successThreshold: 3,\n      ...config\n    };\n  }\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    this.totalRequests++;\n\n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.state = CircuitBreakerState.HALF_OPEN;\n        this.successCount = 0;\n        console.log(`\uD83D\uDD04 Circuit breaker for ${this.serviceName} moved to HALF_OPEN`);\n        this.emit('stateChanged', { \n          serviceName: this.serviceName, \n          state: this.state,\n          reason: 'Reset timeout elapsed'\n        });\n      } else {\n        const error = new Error(`Circuit breaker OPEN for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n        this.emit('requestRejected', { \n          serviceName: this.serviceName, \n          reason: 'Circuit breaker open',\n          nextAttempt: this.nextAttempt\n        });\n        throw error;\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.totalSuccesses++;\n    this.lastSuccess = new Date();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.successCount++;\n      if (this.successCount >= this.config.successThreshold) {\n        this.reset();\n      }\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      this.failureCount = 0; // Reset failure count on success\n    }\n\n    this.emit('success', { \n      serviceName: this.serviceName, \n      state: this.state,\n      successCount: this.successCount\n    });\n  }\n\n  private onFailure(error: any): void {\n    this.totalFailures++;\n    this.lastFailure = new Date();\n    this.failureCount++;\n\n    this.emit('failure', { \n      serviceName: this.serviceName, \n      state: this.state,\n      failureCount: this.failureCount,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      // Any failure in half-open state moves back to open\n      this.trip();\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      if (this.failureCount >= this.config.failureThreshold) {\n        this.trip();\n      }\n    }\n  }\n\n  private trip(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n    \n    console.log(`\uD83D\uDEA8 Circuit breaker OPENED for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n    \n    this.emit('opened', { \n      serviceName: this.serviceName, \n      failureCount: this.failureCount,\n      nextAttempt: this.nextAttempt,\n      reason: `Failure threshold reached (${this.config.failureThreshold} failures)`\n    });\n  }\n\n  private reset(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.nextAttempt = null;\n    \n    console.log(`\u2705 Circuit breaker CLOSED for ${this.serviceName} - Service recovered`);\n    \n    this.emit('closed', { \n      serviceName: this.serviceName,\n      reason: `Service recovered (${this.config.successThreshold} successful requests)`\n    });\n  }\n\n  private shouldAttemptReset(): boolean {\n    return this.nextAttempt !== null && new Date() >= this.nextAttempt;\n  }\n\n  public getStats(): CircuitBreakerStats {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      nextAttempt: this.nextAttempt,\n      totalRequests: this.totalRequests,\n      totalFailures: this.totalFailures,\n      totalSuccesses: this.totalSuccesses,\n      uptime: Date.now() - this.startTime.getTime(),\n      lastFailure: this.lastFailure,\n      lastSuccess: this.lastSuccess\n    };\n  }\n\n  public forceOpen(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n    \n    console.log(`\uD83D\uDD27 Circuit breaker MANUALLY OPENED for ${this.serviceName}`);\n    \n    this.emit('forceOpened', { \n      serviceName: this.serviceName,\n      reason: 'Manual intervention'\n    });\n  }\n\n  public forceClose(): void {\n    this.reset();\n    \n    console.log(`\uD83D\uDD27 Circuit breaker MANUALLY CLOSED for ${this.serviceName}`);\n    \n    this.emit('forceClosed', { \n      serviceName: this.serviceName,\n      reason: 'Manual intervention'\n    });\n  }\n\n  public updateConfig(newConfig: Partial<CircuitBreakerConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    this.emit('configUpdated', { \n      serviceName: this.serviceName,\n      config: this.config\n    });\n  }\n}\n\nexport class CircuitBreakerRegistry {\n  private breakers = new Map<string, CircuitBreaker>();\n\n  getBreaker(serviceName: string, config?: Partial<CircuitBreakerConfig>): CircuitBreaker {\n    if (!this.breakers.has(serviceName)) {\n      const breaker = new CircuitBreaker(serviceName, config);\n      this.breakers.set(serviceName, breaker);\n      \n      // Forward events\n      breaker.on('opened', (data) => this.emit('breakerOpened', data));\n      breaker.on('closed', (data) => this.emit('breakerClosed', data));\n      breaker.on('stateChanged', (data) => this.emit('breakerStateChanged', data));\n      breaker.on('failure', (data) => this.emit('breakerFailure', data));\n      breaker.on('success', (data) => this.emit('breakerSuccess', data));\n    }\n    \n    return this.breakers.get(serviceName)!;\n  }\n\n  getAllBreakers(): Map<string, CircuitBreaker> {\n    return new Map(this.breakers);\n  }\n\n  getStats(): Record<string, CircuitBreakerStats> {\n    const stats: Record<string, CircuitBreakerStats> = {};\n    \n    for (const [serviceName, breaker] of this.breakers) {\n      stats[serviceName] = breaker.getStats();\n    }\n    \n    return stats;\n  }\n\n  removeBreaker(serviceName: string): boolean {\n    return this.breakers.delete(serviceName);\n  }\n\n  clear(): void {\n    this.breakers.clear();\n  }\n\n  // Event emitter functionality\n  private eventEmitter = new EventEmitter();\n  \n  on(event: string, listener: (...args: any[]) => void): this {\n    this.eventEmitter.on(event, listener);\n    return this;\n  }\n  \n  emit(event: string, ...args: any[]): boolean {\n    return this.eventEmitter.emit(event, ...args);\n  }\n  \n  off(event: string, listener: (...args: any[]) => void): this {\n    this.eventEmitter.off(event, listener);\n    return this;\n  }\n}\n\nexport const circuitBreakerRegistry = new CircuitBreakerRegistry();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e2e48879557fd2725ba8effaa29d6b7df7049adc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ivsxppgcx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ivsxppgcx();
cov_ivsxppgcx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ivsxppgcx().s[1]++;
exports.circuitBreakerRegistry = exports.CircuitBreakerRegistry = exports.CircuitBreaker = exports.CircuitBreakerState = void 0;
const events_1 =
/* istanbul ignore next */
(cov_ivsxppgcx().s[2]++, require("events"));
var CircuitBreakerState;
/* istanbul ignore next */
cov_ivsxppgcx().s[3]++;
(function (CircuitBreakerState) {
  /* istanbul ignore next */
  cov_ivsxppgcx().f[0]++;
  cov_ivsxppgcx().s[4]++;
  CircuitBreakerState["CLOSED"] = "CLOSED";
  /* istanbul ignore next */
  cov_ivsxppgcx().s[5]++;
  CircuitBreakerState["OPEN"] = "OPEN";
  /* istanbul ignore next */
  cov_ivsxppgcx().s[6]++;
  CircuitBreakerState["HALF_OPEN"] = "HALF_OPEN"; // Testing if service has recovered
})(
/* istanbul ignore next */
(cov_ivsxppgcx().b[0][0]++, CircuitBreakerState) ||
/* istanbul ignore next */
(cov_ivsxppgcx().b[0][1]++, exports.CircuitBreakerState = CircuitBreakerState = {}));
class CircuitBreaker extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(serviceName, config =
  /* istanbul ignore next */
  (cov_ivsxppgcx().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[1]++;
    cov_ivsxppgcx().s[7]++;
    super();
    /* istanbul ignore next */
    cov_ivsxppgcx().s[8]++;
    this.state = CircuitBreakerState.CLOSED;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[9]++;
    this.failureCount = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[10]++;
    this.successCount = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[11]++;
    this.nextAttempt = null;
    // Statistics
    /* istanbul ignore next */
    cov_ivsxppgcx().s[12]++;
    this.totalRequests = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[13]++;
    this.totalFailures = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[14]++;
    this.totalSuccesses = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[15]++;
    this.lastFailure = null;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[16]++;
    this.lastSuccess = null;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[17]++;
    this.startTime = new Date();
    /* istanbul ignore next */
    cov_ivsxppgcx().s[18]++;
    this.serviceName = serviceName;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[19]++;
    this.config = {
      failureThreshold: 5,
      resetTimeout: 60000,
      // 1 minute
      monitoringPeriod: 300000,
      // 5 minutes
      successThreshold: 3,
      ...config
    };
  }
  async execute(fn) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[2]++;
    cov_ivsxppgcx().s[20]++;
    this.totalRequests++;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[21]++;
    if (this.state === CircuitBreakerState.OPEN) {
      /* istanbul ignore next */
      cov_ivsxppgcx().b[2][0]++;
      cov_ivsxppgcx().s[22]++;
      if (this.shouldAttemptReset()) {
        /* istanbul ignore next */
        cov_ivsxppgcx().b[3][0]++;
        cov_ivsxppgcx().s[23]++;
        this.state = CircuitBreakerState.HALF_OPEN;
        /* istanbul ignore next */
        cov_ivsxppgcx().s[24]++;
        this.successCount = 0;
        /* istanbul ignore next */
        cov_ivsxppgcx().s[25]++;
        console.log(`🔄 Circuit breaker for ${this.serviceName} moved to HALF_OPEN`);
        /* istanbul ignore next */
        cov_ivsxppgcx().s[26]++;
        this.emit('stateChanged', {
          serviceName: this.serviceName,
          state: this.state,
          reason: 'Reset timeout elapsed'
        });
      } else {
        /* istanbul ignore next */
        cov_ivsxppgcx().b[3][1]++;
        const error =
        /* istanbul ignore next */
        (cov_ivsxppgcx().s[27]++, new Error(`Circuit breaker OPEN for ${this.serviceName}. Next attempt: ${this.nextAttempt}`));
        /* istanbul ignore next */
        cov_ivsxppgcx().s[28]++;
        this.emit('requestRejected', {
          serviceName: this.serviceName,
          reason: 'Circuit breaker open',
          nextAttempt: this.nextAttempt
        });
        /* istanbul ignore next */
        cov_ivsxppgcx().s[29]++;
        throw error;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ivsxppgcx().b[2][1]++;
    }
    cov_ivsxppgcx().s[30]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_ivsxppgcx().s[31]++, await fn());
      /* istanbul ignore next */
      cov_ivsxppgcx().s[32]++;
      this.onSuccess();
      /* istanbul ignore next */
      cov_ivsxppgcx().s[33]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_ivsxppgcx().s[34]++;
      this.onFailure(error);
      /* istanbul ignore next */
      cov_ivsxppgcx().s[35]++;
      throw error;
    }
  }
  onSuccess() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[3]++;
    cov_ivsxppgcx().s[36]++;
    this.totalSuccesses++;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[37]++;
    this.lastSuccess = new Date();
    /* istanbul ignore next */
    cov_ivsxppgcx().s[38]++;
    if (this.state === CircuitBreakerState.HALF_OPEN) {
      /* istanbul ignore next */
      cov_ivsxppgcx().b[4][0]++;
      cov_ivsxppgcx().s[39]++;
      this.successCount++;
      /* istanbul ignore next */
      cov_ivsxppgcx().s[40]++;
      if (this.successCount >= this.config.successThreshold) {
        /* istanbul ignore next */
        cov_ivsxppgcx().b[5][0]++;
        cov_ivsxppgcx().s[41]++;
        this.reset();
      } else
      /* istanbul ignore next */
      {
        cov_ivsxppgcx().b[5][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_ivsxppgcx().b[4][1]++;
      cov_ivsxppgcx().s[42]++;
      if (this.state === CircuitBreakerState.CLOSED) {
        /* istanbul ignore next */
        cov_ivsxppgcx().b[6][0]++;
        cov_ivsxppgcx().s[43]++;
        this.failureCount = 0; // Reset failure count on success
      } else
      /* istanbul ignore next */
      {
        cov_ivsxppgcx().b[6][1]++;
      }
    }
    /* istanbul ignore next */
    cov_ivsxppgcx().s[44]++;
    this.emit('success', {
      serviceName: this.serviceName,
      state: this.state,
      successCount: this.successCount
    });
  }
  onFailure(error) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[4]++;
    cov_ivsxppgcx().s[45]++;
    this.totalFailures++;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[46]++;
    this.lastFailure = new Date();
    /* istanbul ignore next */
    cov_ivsxppgcx().s[47]++;
    this.failureCount++;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[48]++;
    this.emit('failure', {
      serviceName: this.serviceName,
      state: this.state,
      failureCount: this.failureCount,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_ivsxppgcx().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_ivsxppgcx().b[7][1]++, 'Unknown error')
    });
    /* istanbul ignore next */
    cov_ivsxppgcx().s[49]++;
    if (this.state === CircuitBreakerState.HALF_OPEN) {
      /* istanbul ignore next */
      cov_ivsxppgcx().b[8][0]++;
      cov_ivsxppgcx().s[50]++;
      // Any failure in half-open state moves back to open
      this.trip();
    } else {
      /* istanbul ignore next */
      cov_ivsxppgcx().b[8][1]++;
      cov_ivsxppgcx().s[51]++;
      if (this.state === CircuitBreakerState.CLOSED) {
        /* istanbul ignore next */
        cov_ivsxppgcx().b[9][0]++;
        cov_ivsxppgcx().s[52]++;
        if (this.failureCount >= this.config.failureThreshold) {
          /* istanbul ignore next */
          cov_ivsxppgcx().b[10][0]++;
          cov_ivsxppgcx().s[53]++;
          this.trip();
        } else
        /* istanbul ignore next */
        {
          cov_ivsxppgcx().b[10][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_ivsxppgcx().b[9][1]++;
      }
    }
  }
  trip() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[5]++;
    cov_ivsxppgcx().s[54]++;
    this.state = CircuitBreakerState.OPEN;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[55]++;
    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[56]++;
    console.log(`🚨 Circuit breaker OPENED for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[57]++;
    this.emit('opened', {
      serviceName: this.serviceName,
      failureCount: this.failureCount,
      nextAttempt: this.nextAttempt,
      reason: `Failure threshold reached (${this.config.failureThreshold} failures)`
    });
  }
  reset() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[6]++;
    cov_ivsxppgcx().s[58]++;
    this.state = CircuitBreakerState.CLOSED;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[59]++;
    this.failureCount = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[60]++;
    this.successCount = 0;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[61]++;
    this.nextAttempt = null;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[62]++;
    console.log(`✅ Circuit breaker CLOSED for ${this.serviceName} - Service recovered`);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[63]++;
    this.emit('closed', {
      serviceName: this.serviceName,
      reason: `Service recovered (${this.config.successThreshold} successful requests)`
    });
  }
  shouldAttemptReset() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[7]++;
    cov_ivsxppgcx().s[64]++;
    return /* istanbul ignore next */(cov_ivsxppgcx().b[11][0]++, this.nextAttempt !== null) &&
    /* istanbul ignore next */
    (cov_ivsxppgcx().b[11][1]++, new Date() >= this.nextAttempt);
  }
  getStats() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[8]++;
    cov_ivsxppgcx().s[65]++;
    return {
      state: this.state,
      failureCount: this.failureCount,
      successCount: this.successCount,
      nextAttempt: this.nextAttempt,
      totalRequests: this.totalRequests,
      totalFailures: this.totalFailures,
      totalSuccesses: this.totalSuccesses,
      uptime: Date.now() - this.startTime.getTime(),
      lastFailure: this.lastFailure,
      lastSuccess: this.lastSuccess
    };
  }
  forceOpen() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[9]++;
    cov_ivsxppgcx().s[66]++;
    this.state = CircuitBreakerState.OPEN;
    /* istanbul ignore next */
    cov_ivsxppgcx().s[67]++;
    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[68]++;
    console.log(`🔧 Circuit breaker MANUALLY OPENED for ${this.serviceName}`);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[69]++;
    this.emit('forceOpened', {
      serviceName: this.serviceName,
      reason: 'Manual intervention'
    });
  }
  forceClose() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[10]++;
    cov_ivsxppgcx().s[70]++;
    this.reset();
    /* istanbul ignore next */
    cov_ivsxppgcx().s[71]++;
    console.log(`🔧 Circuit breaker MANUALLY CLOSED for ${this.serviceName}`);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[72]++;
    this.emit('forceClosed', {
      serviceName: this.serviceName,
      reason: 'Manual intervention'
    });
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[11]++;
    cov_ivsxppgcx().s[73]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_ivsxppgcx().s[74]++;
    this.emit('configUpdated', {
      serviceName: this.serviceName,
      config: this.config
    });
  }
}
/* istanbul ignore next */
cov_ivsxppgcx().s[75]++;
exports.CircuitBreaker = CircuitBreaker;
class CircuitBreakerRegistry {
  constructor() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[12]++;
    cov_ivsxppgcx().s[76]++;
    this.breakers = new Map();
    // Event emitter functionality
    /* istanbul ignore next */
    cov_ivsxppgcx().s[77]++;
    this.eventEmitter = new events_1.EventEmitter();
  }
  getBreaker(serviceName, config) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[13]++;
    cov_ivsxppgcx().s[78]++;
    if (!this.breakers.has(serviceName)) {
      /* istanbul ignore next */
      cov_ivsxppgcx().b[12][0]++;
      const breaker =
      /* istanbul ignore next */
      (cov_ivsxppgcx().s[79]++, new CircuitBreaker(serviceName, config));
      /* istanbul ignore next */
      cov_ivsxppgcx().s[80]++;
      this.breakers.set(serviceName, breaker);
      // Forward events
      /* istanbul ignore next */
      cov_ivsxppgcx().s[81]++;
      breaker.on('opened', data => {
        /* istanbul ignore next */
        cov_ivsxppgcx().f[14]++;
        cov_ivsxppgcx().s[82]++;
        return this.emit('breakerOpened', data);
      });
      /* istanbul ignore next */
      cov_ivsxppgcx().s[83]++;
      breaker.on('closed', data => {
        /* istanbul ignore next */
        cov_ivsxppgcx().f[15]++;
        cov_ivsxppgcx().s[84]++;
        return this.emit('breakerClosed', data);
      });
      /* istanbul ignore next */
      cov_ivsxppgcx().s[85]++;
      breaker.on('stateChanged', data => {
        /* istanbul ignore next */
        cov_ivsxppgcx().f[16]++;
        cov_ivsxppgcx().s[86]++;
        return this.emit('breakerStateChanged', data);
      });
      /* istanbul ignore next */
      cov_ivsxppgcx().s[87]++;
      breaker.on('failure', data => {
        /* istanbul ignore next */
        cov_ivsxppgcx().f[17]++;
        cov_ivsxppgcx().s[88]++;
        return this.emit('breakerFailure', data);
      });
      /* istanbul ignore next */
      cov_ivsxppgcx().s[89]++;
      breaker.on('success', data => {
        /* istanbul ignore next */
        cov_ivsxppgcx().f[18]++;
        cov_ivsxppgcx().s[90]++;
        return this.emit('breakerSuccess', data);
      });
    } else
    /* istanbul ignore next */
    {
      cov_ivsxppgcx().b[12][1]++;
    }
    cov_ivsxppgcx().s[91]++;
    return this.breakers.get(serviceName);
  }
  getAllBreakers() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[19]++;
    cov_ivsxppgcx().s[92]++;
    return new Map(this.breakers);
  }
  getStats() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[20]++;
    const stats =
    /* istanbul ignore next */
    (cov_ivsxppgcx().s[93]++, {});
    /* istanbul ignore next */
    cov_ivsxppgcx().s[94]++;
    for (const [serviceName, breaker] of this.breakers) {
      /* istanbul ignore next */
      cov_ivsxppgcx().s[95]++;
      stats[serviceName] = breaker.getStats();
    }
    /* istanbul ignore next */
    cov_ivsxppgcx().s[96]++;
    return stats;
  }
  removeBreaker(serviceName) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[21]++;
    cov_ivsxppgcx().s[97]++;
    return this.breakers.delete(serviceName);
  }
  clear() {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[22]++;
    cov_ivsxppgcx().s[98]++;
    this.breakers.clear();
  }
  on(event, listener) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[23]++;
    cov_ivsxppgcx().s[99]++;
    this.eventEmitter.on(event, listener);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[100]++;
    return this;
  }
  emit(event, ...args) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[24]++;
    cov_ivsxppgcx().s[101]++;
    return this.eventEmitter.emit(event, ...args);
  }
  off(event, listener) {
    /* istanbul ignore next */
    cov_ivsxppgcx().f[25]++;
    cov_ivsxppgcx().s[102]++;
    this.eventEmitter.off(event, listener);
    /* istanbul ignore next */
    cov_ivsxppgcx().s[103]++;
    return this;
  }
}
/* istanbul ignore next */
cov_ivsxppgcx().s[104]++;
exports.CircuitBreakerRegistry = CircuitBreakerRegistry;
/* istanbul ignore next */
cov_ivsxppgcx().s[105]++;
exports.circuitBreakerRegistry = new CircuitBreakerRegistry();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,