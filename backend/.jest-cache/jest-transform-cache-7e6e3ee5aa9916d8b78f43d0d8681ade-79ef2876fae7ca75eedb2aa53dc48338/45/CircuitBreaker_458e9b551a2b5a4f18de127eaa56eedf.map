{"version":3,"names":["cov_ivsxppgcx","actualCoverage","s","events_1","require","CircuitBreakerState","f","b","exports","CircuitBreaker","EventEmitter","constructor","serviceName","config","state","CLOSED","failureCount","successCount","nextAttempt","totalRequests","totalFailures","totalSuccesses","lastFailure","lastSuccess","startTime","Date","failureThreshold","resetTimeout","monitoringPeriod","successThreshold","execute","fn","OPEN","shouldAttemptReset","HALF_OPEN","console","log","emit","reason","error","Error","result","onSuccess","onFailure","reset","message","trip","now","getStats","uptime","getTime","forceOpen","forceClose","updateConfig","newConfig","CircuitBreakerRegistry","breakers","Map","eventEmitter","getBreaker","has","breaker","set","on","data","get","getAllBreakers","stats","removeBreaker","delete","clear","event","listener","args","off","circuitBreakerRegistry"],"sources":["/workspaces/prompt-card-system/backend/src/services/health/CircuitBreaker.ts"],"sourcesContent":["import { EventEmitter } from 'events';\n\nexport enum CircuitBreakerState {\n  CLOSED = 'CLOSED',       // Normal operation\n  OPEN = 'OPEN',           // Circuit is open, requests fail fast\n  HALF_OPEN = 'HALF_OPEN'  // Testing if service has recovered\n}\n\ninterface CircuitBreakerConfig {\n  failureThreshold: number;    // Number of failures before opening\n  resetTimeout: number;        // Time to wait before trying again (ms)\n  monitoringPeriod: number;    // Time window for failure counting (ms)\n  successThreshold: number;    // Successes needed to close from half-open\n}\n\ninterface CircuitBreakerStats {\n  state: CircuitBreakerState;\n  failureCount: number;\n  successCount: number;\n  nextAttempt: Date | null;\n  totalRequests: number;\n  totalFailures: number;\n  totalSuccesses: number;\n  uptime: number;\n  lastFailure: Date | null;\n  lastSuccess: Date | null;\n}\n\nexport class CircuitBreaker extends EventEmitter {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failureCount = 0;\n  private successCount = 0;\n  private nextAttempt: Date | null = null;\n  private config: CircuitBreakerConfig;\n  private readonly serviceName: string;\n  \n  // Statistics\n  private totalRequests = 0;\n  private totalFailures = 0;\n  private totalSuccesses = 0;\n  private lastFailure: Date | null = null;\n  private lastSuccess: Date | null = null;\n  private startTime = new Date();\n\n  constructor(serviceName: string, config: Partial<CircuitBreakerConfig> = {}) {\n    super();\n    this.serviceName = serviceName;\n    this.config = {\n      failureThreshold: 5,\n      resetTimeout: 60000, // 1 minute\n      monitoringPeriod: 300000, // 5 minutes\n      successThreshold: 3,\n      ...config\n    };\n  }\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    this.totalRequests++;\n\n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.state = CircuitBreakerState.HALF_OPEN;\n        this.successCount = 0;\n        console.log(`ðŸ”„ Circuit breaker for ${this.serviceName} moved to HALF_OPEN`);\n        this.emit('stateChanged', { \n          serviceName: this.serviceName, \n          state: this.state,\n          reason: 'Reset timeout elapsed'\n        });\n      } else {\n        const error = new Error(`Circuit breaker OPEN for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n        this.emit('requestRejected', { \n          serviceName: this.serviceName, \n          reason: 'Circuit breaker open',\n          nextAttempt: this.nextAttempt\n        });\n        throw error;\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.totalSuccesses++;\n    this.lastSuccess = new Date();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.successCount++;\n      if (this.successCount >= this.config.successThreshold) {\n        this.reset();\n      }\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      this.failureCount = 0; // Reset failure count on success\n    }\n\n    this.emit('success', { \n      serviceName: this.serviceName, \n      state: this.state,\n      successCount: this.successCount\n    });\n  }\n\n  private onFailure(error: any): void {\n    this.totalFailures++;\n    this.lastFailure = new Date();\n    this.failureCount++;\n\n    this.emit('failure', { \n      serviceName: this.serviceName, \n      state: this.state,\n      failureCount: this.failureCount,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      // Any failure in half-open state moves back to open\n      this.trip();\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      if (this.failureCount >= this.config.failureThreshold) {\n        this.trip();\n      }\n    }\n  }\n\n  private trip(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n    \n    console.log(`ðŸš¨ Circuit breaker OPENED for ${this.serviceName}. Next attempt: ${this.nextAttempt}`);\n    \n    this.emit('opened', { \n      serviceName: this.serviceName, \n      failureCount: this.failureCount,\n      nextAttempt: this.nextAttempt,\n      reason: `Failure threshold reached (${this.config.failureThreshold} failures)`\n    });\n  }\n\n  private reset(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.nextAttempt = null;\n    \n    console.log(`âœ… Circuit breaker CLOSED for ${this.serviceName} - Service recovered`);\n    \n    this.emit('closed', { \n      serviceName: this.serviceName,\n      reason: `Service recovered (${this.config.successThreshold} successful requests)`\n    });\n  }\n\n  private shouldAttemptReset(): boolean {\n    return this.nextAttempt !== null && new Date() >= this.nextAttempt;\n  }\n\n  public getStats(): CircuitBreakerStats {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      nextAttempt: this.nextAttempt,\n      totalRequests: this.totalRequests,\n      totalFailures: this.totalFailures,\n      totalSuccesses: this.totalSuccesses,\n      uptime: Date.now() - this.startTime.getTime(),\n      lastFailure: this.lastFailure,\n      lastSuccess: this.lastSuccess\n    };\n  }\n\n  public forceOpen(): void {\n    this.state = CircuitBreakerState.OPEN;\n    this.nextAttempt = new Date(Date.now() + this.config.resetTimeout);\n    \n    console.log(`ðŸ”§ Circuit breaker MANUALLY OPENED for ${this.serviceName}`);\n    \n    this.emit('forceOpened', { \n      serviceName: this.serviceName,\n      reason: 'Manual intervention'\n    });\n  }\n\n  public forceClose(): void {\n    this.reset();\n    \n    console.log(`ðŸ”§ Circuit breaker MANUALLY CLOSED for ${this.serviceName}`);\n    \n    this.emit('forceClosed', { \n      serviceName: this.serviceName,\n      reason: 'Manual intervention'\n    });\n  }\n\n  public updateConfig(newConfig: Partial<CircuitBreakerConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    this.emit('configUpdated', { \n      serviceName: this.serviceName,\n      config: this.config\n    });\n  }\n}\n\nexport class CircuitBreakerRegistry {\n  private breakers = new Map<string, CircuitBreaker>();\n\n  getBreaker(serviceName: string, config?: Partial<CircuitBreakerConfig>): CircuitBreaker {\n    if (!this.breakers.has(serviceName)) {\n      const breaker = new CircuitBreaker(serviceName, config);\n      this.breakers.set(serviceName, breaker);\n      \n      // Forward events\n      breaker.on('opened', (data) => this.emit('breakerOpened', data));\n      breaker.on('closed', (data) => this.emit('breakerClosed', data));\n      breaker.on('stateChanged', (data) => this.emit('breakerStateChanged', data));\n      breaker.on('failure', (data) => this.emit('breakerFailure', data));\n      breaker.on('success', (data) => this.emit('breakerSuccess', data));\n    }\n    \n    return this.breakers.get(serviceName)!;\n  }\n\n  getAllBreakers(): Map<string, CircuitBreaker> {\n    return new Map(this.breakers);\n  }\n\n  getStats(): Record<string, CircuitBreakerStats> {\n    const stats: Record<string, CircuitBreakerStats> = {};\n    \n    for (const [serviceName, breaker] of this.breakers) {\n      stats[serviceName] = breaker.getStats();\n    }\n    \n    return stats;\n  }\n\n  removeBreaker(serviceName: string): boolean {\n    return this.breakers.delete(serviceName);\n  }\n\n  clear(): void {\n    this.breakers.clear();\n  }\n\n  // Event emitter functionality\n  private eventEmitter = new EventEmitter();\n  \n  on(event: string, listener: (...args: any[]) => void): this {\n    this.eventEmitter.on(event, listener);\n    return this;\n  }\n  \n  emit(event: string, ...args: any[]): boolean {\n    return this.eventEmitter.emit(event, ...args);\n  }\n  \n  off(event: string, listener: (...args: any[]) => void): this {\n    this.eventEmitter.off(event, listener);\n    return this;\n  }\n}\n\nexport const circuitBreakerRegistry = new CircuitBreakerRegistry();"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}