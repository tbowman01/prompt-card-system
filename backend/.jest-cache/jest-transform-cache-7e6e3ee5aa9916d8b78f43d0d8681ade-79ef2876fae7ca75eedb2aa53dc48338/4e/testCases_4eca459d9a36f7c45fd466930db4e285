7f671bf0346a3e143c4d91e4c3f7f985
"use strict";

/* istanbul ignore next */
function cov_wdukarhck() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/testCases.ts";
  var hash = "ba2573a12f2802ae37c8d81bcaeff5da32c16051";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/testCases.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 36
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 14
        },
        end: {
          line: 9,
          column: 45
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "9": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "10": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "11": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "12": {
        start: {
          line: 27,
          column: 33
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "13": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 112
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "15": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "16": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 40,
          column: 24
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "18": {
        start: {
          line: 43,
          column: 41
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "19": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "20": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "21": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "22": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 33
        }
      },
      "23": {
        start: {
          line: 61,
          column: 25
        },
        end: {
          line: 61,
          column: 97
        }
      },
      "24": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "25": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "26": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "28": {
        start: {
          line: 85,
          column: 0
        },
        end: {
          line: 123,
          column: 3
        }
      },
      "29": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 122,
          column: 5
        }
      },
      "30": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 87,
          column: 66
        }
      },
      "31": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "32": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "33": {
        start: {
          line: 94,
          column: 87
        },
        end: {
          line: 94,
          column: 92
        }
      },
      "34": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 114
        }
      },
      "35": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "36": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "37": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 106,
          column: 124
        }
      },
      "38": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 120
        }
      },
      "39": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "40": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "41": {
        start: {
          line: 125,
          column: 0
        },
        end: {
          line: 163,
          column: 3
        }
      },
      "42": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "43": {
        start: {
          line: 127,
          column: 23
        },
        end: {
          line: 127,
          column: 33
        }
      },
      "44": {
        start: {
          line: 128,
          column: 33
        },
        end: {
          line: 128,
          column: 66
        }
      },
      "45": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "46": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "47": {
        start: {
          line: 135,
          column: 87
        },
        end: {
          line: 135,
          column: 92
        }
      },
      "48": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 140,
          column: 128
        }
      },
      "49": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "50": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "51": {
        start: {
          line: 147,
          column: 32
        },
        end: {
          line: 147,
          column: 104
        }
      },
      "52": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "53": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "54": {
        start: {
          line: 165,
          column: 0
        },
        end: {
          line: 186,
          column: 3
        }
      },
      "55": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "56": {
        start: {
          line: 167,
          column: 23
        },
        end: {
          line: 167,
          column: 33
        }
      },
      "57": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 168,
          column: 93
        }
      },
      "58": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "59": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 173,
          column: 15
        }
      },
      "60": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "61": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 53
          },
          end: {
            line: 25,
            column: 54
          }
        },
        loc: {
          start: {
            line: 25,
            column: 67
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 33
          }
        },
        loc: {
          start: {
            line: 43,
            column: 41
          },
          end: {
            line: 47,
            column: 13
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 58,
            column: 19
          },
          end: {
            line: 58,
            column: 20
          }
        },
        loc: {
          start: {
            line: 58,
            column: 33
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 85,
            column: 18
          }
        },
        loc: {
          start: {
            line: 85,
            column: 31
          },
          end: {
            line: 123,
            column: 1
          }
        },
        line: 85
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 125,
            column: 19
          },
          end: {
            line: 125,
            column: 20
          }
        },
        loc: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 125
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 165,
            column: 22
          },
          end: {
            line: 165,
            column: 23
          }
        },
        loc: {
          start: {
            line: 165,
            column: 36
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 165
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 39
          },
          end: {
            line: 46,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 39
          },
          end: {
            line: 46,
            column: 52
          }
        }, {
          start: {
            line: 46,
            column: 56
          },
          end: {
            line: 46,
            column: 60
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 44
          },
          end: {
            line: 53,
            column: 57
          }
        }, {
          start: {
            line: 53,
            column: 60
          },
          end: {
            line: 53,
            column: 88
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 58
          }
        }, {
          start: {
            line: 73,
            column: 62
          },
          end: {
            line: 73,
            column: 66
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 19
          },
          end: {
            line: 80,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 44
          },
          end: {
            line: 80,
            column: 57
          }
        }, {
          start: {
            line: 80,
            column: 60
          },
          end: {
            line: 80,
            column: 87
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "11": {
        loc: {
          start: {
            line: 106,
            column: 66
          },
          end: {
            line: 106,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 66
          },
          end: {
            line: 106,
            column: 81
          }
        }, {
          start: {
            line: 106,
            column: 85
          },
          end: {
            line: 106,
            column: 89
          }
        }],
        line: 106
      },
      "12": {
        loc: {
          start: {
            line: 106,
            column: 106
          },
          end: {
            line: 106,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 106
          },
          end: {
            line: 106,
            column: 116
          }
        }, {
          start: {
            line: 106,
            column: 120
          },
          end: {
            line: 106,
            column: 122
          }
        }],
        line: 106
      },
      "13": {
        loc: {
          start: {
            line: 113,
            column: 39
          },
          end: {
            line: 113,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 39
          },
          end: {
            line: 113,
            column: 61
          }
        }, {
          start: {
            line: 113,
            column: 65
          },
          end: {
            line: 113,
            column: 69
          }
        }],
        line: 113
      },
      "14": {
        loc: {
          start: {
            line: 120,
            column: 19
          },
          end: {
            line: 120,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 44
          },
          end: {
            line: 120,
            column: 57
          }
        }, {
          start: {
            line: 120,
            column: 60
          },
          end: {
            line: 120,
            column: 88
          }
        }],
        line: 120
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 140,
            column: 66
          },
          end: {
            line: 140,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 66
          },
          end: {
            line: 140,
            column: 81
          }
        }, {
          start: {
            line: 140,
            column: 85
          },
          end: {
            line: 140,
            column: 89
          }
        }],
        line: 140
      },
      "17": {
        loc: {
          start: {
            line: 140,
            column: 106
          },
          end: {
            line: 140,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 106
          },
          end: {
            line: 140,
            column: 116
          }
        }, {
          start: {
            line: 140,
            column: 120
          },
          end: {
            line: 140,
            column: 122
          }
        }],
        line: 140
      },
      "18": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "19": {
        loc: {
          start: {
            line: 153,
            column: 39
          },
          end: {
            line: 153,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 39
          },
          end: {
            line: 153,
            column: 65
          }
        }, {
          start: {
            line: 153,
            column: 69
          },
          end: {
            line: 153,
            column: 73
          }
        }],
        line: 153
      },
      "20": {
        loc: {
          start: {
            line: 160,
            column: 19
          },
          end: {
            line: 160,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 44
          },
          end: {
            line: 160,
            column: 57
          }
        }, {
          start: {
            line: 160,
            column: 60
          },
          end: {
            line: 160,
            column: 88
          }
        }],
        line: 160
      },
      "21": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "22": {
        loc: {
          start: {
            line: 183,
            column: 19
          },
          end: {
            line: 183,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 44
          },
          end: {
            line: 183,
            column: 57
          }
        }, {
          start: {
            line: 183,
            column: 60
          },
          end: {
            line: 183,
            column: 88
          }
        }],
        line: 183
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/testCases.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/testCases.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { db } from '../database/connection';\nimport { TestCase, CreateTestCaseRequest } from '../types/testCase';\nimport Joi from 'joi';\n\nconst router = Router();\n\n// Validation schema for test case\nconst testCaseSchema = Joi.object({\n  prompt_card_id: Joi.number().integer().positive().required(),\n  name: Joi.string().min(1).max(255).required(),\n  input_variables: Joi.object().required(),\n  expected_output: Joi.string().allow('').optional(),\n  assertions: Joi.array().items(\n    Joi.object({\n      type: Joi.string().valid('contains', 'not-contains', 'equals', 'not-equals', 'regex', 'length').required(),\n      value: Joi.alternatives().try(Joi.string(), Joi.number()).required(),\n      description: Joi.string().optional()\n    })\n  ).optional()\n});\n\n// Get all test cases for a prompt card\nrouter.get('/prompt-cards/:promptCardId/test-cases', (req: Request, res: Response) => {\n  try {\n    const { promptCardId } = req.params;\n    \n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(promptCardId);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    const testCases = db.prepare(`\n      SELECT * FROM test_cases \n      WHERE prompt_card_id = ? \n      ORDER BY created_at DESC\n    `).all(promptCardId) as TestCase[];\n\n    return res.json({\n      success: true,\n      data: testCases.map((tc: TestCase) => ({\n        ...tc,\n        input_variables: JSON.parse(tc.input_variables),\n        assertions: JSON.parse(tc.assertions || '[]')\n      }))\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test cases'\n    });\n  }\n});\n\n// Get specific test case\nrouter.get('/:id', (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    const testCase = db.prepare('SELECT * FROM test_cases WHERE id = ?').get(id) as TestCase;\n    \n    if (!testCase) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: {\n        ...testCase,\n        input_variables: JSON.parse(testCase.input_variables),\n        assertions: JSON.parse(testCase.assertions || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch test case'\n    });\n  }\n});\n\n// Create new test case\nrouter.post('/', (req: Request, res: Response) => {\n  try {\n    const { error, value } = testCaseSchema.validate(req.body);\n    if (error) {\n      return res.status(400).json({\n        success: false,\n        error: error.details[0].message\n      });\n    }\n\n    const { prompt_card_id, name, input_variables, expected_output, assertions } = value as CreateTestCaseRequest;\n    \n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    const result = db.prepare(`\n      INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(\n      prompt_card_id,\n      name,\n      JSON.stringify(input_variables),\n      expected_output || null,\n      JSON.stringify(assertions || [])\n    );\n\n    const newTestCase = db.prepare('SELECT * FROM test_cases WHERE id = ?').get(result.lastInsertRowid) as TestCase;\n\n    return res.status(201).json({\n      success: true,\n      data: {\n        ...newTestCase,\n        input_variables: JSON.parse(newTestCase.input_variables),\n        assertions: JSON.parse(newTestCase.assertions || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create test case'\n    });\n  }\n});\n\n// Update test case\nrouter.put('/:id', (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { error, value } = testCaseSchema.validate(req.body);\n    \n    if (error) {\n      return res.status(400).json({\n        success: false,\n        error: error.details[0].message\n      });\n    }\n\n    const { prompt_card_id, name, input_variables, expected_output, assertions } = value as CreateTestCaseRequest;\n    \n    const result = db.prepare(`\n      UPDATE test_cases \n      SET prompt_card_id = ?, name = ?, input_variables = ?, expected_output = ?, assertions = ?\n      WHERE id = ?\n    `).run(\n      prompt_card_id,\n      name,\n      JSON.stringify(input_variables),\n      expected_output || null,\n      JSON.stringify(assertions || []),\n      id\n    );\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    const updatedTestCase = db.prepare('SELECT * FROM test_cases WHERE id = ?').get(id) as TestCase;\n\n    return res.json({\n      success: true,\n      data: {\n        ...updatedTestCase,\n        input_variables: JSON.parse(updatedTestCase.input_variables),\n        assertions: JSON.parse(updatedTestCase.assertions || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update test case'\n    });\n  }\n});\n\n// Delete test case\nrouter.delete('/:id', (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    const result = db.prepare('DELETE FROM test_cases WHERE id = ?').run(id);\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Test case deleted successfully'\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete test case'\n    });\n  }\n});\n\nexport { router as testCaseRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ba2573a12f2802ae37c8d81bcaeff5da32c16051"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_wdukarhck = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_wdukarhck();
var __importDefault =
/* istanbul ignore next */
(cov_wdukarhck().s[0]++,
/* istanbul ignore next */
(cov_wdukarhck().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_wdukarhck().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_wdukarhck().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_wdukarhck().f[0]++;
  cov_wdukarhck().s[1]++;
  return /* istanbul ignore next */(cov_wdukarhck().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_wdukarhck().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_wdukarhck().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_wdukarhck().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_wdukarhck().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_wdukarhck().s[3]++;
exports.testCaseRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_wdukarhck().s[4]++, require("express"));
const connection_1 =
/* istanbul ignore next */
(cov_wdukarhck().s[5]++, require("../database/connection"));
const joi_1 =
/* istanbul ignore next */
(cov_wdukarhck().s[6]++, __importDefault(require("joi")));
const router =
/* istanbul ignore next */
(cov_wdukarhck().s[7]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_wdukarhck().s[8]++;
exports.testCaseRoutes = router;
// Validation schema for test case
const testCaseSchema =
/* istanbul ignore next */
(cov_wdukarhck().s[9]++, joi_1.default.object({
  prompt_card_id: joi_1.default.number().integer().positive().required(),
  name: joi_1.default.string().min(1).max(255).required(),
  input_variables: joi_1.default.object().required(),
  expected_output: joi_1.default.string().allow('').optional(),
  assertions: joi_1.default.array().items(joi_1.default.object({
    type: joi_1.default.string().valid('contains', 'not-contains', 'equals', 'not-equals', 'regex', 'length').required(),
    value: joi_1.default.alternatives().try(joi_1.default.string(), joi_1.default.number()).required(),
    description: joi_1.default.string().optional()
  })).optional()
}));
// Get all test cases for a prompt card
/* istanbul ignore next */
cov_wdukarhck().s[10]++;
router.get('/prompt-cards/:promptCardId/test-cases', (req, res) => {
  /* istanbul ignore next */
  cov_wdukarhck().f[1]++;
  cov_wdukarhck().s[11]++;
  try {
    const {
      promptCardId
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[12]++, req.params);
    // Verify prompt card exists
    const promptCard =
    /* istanbul ignore next */
    (cov_wdukarhck().s[13]++, connection_1.db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(promptCardId));
    /* istanbul ignore next */
    cov_wdukarhck().s[14]++;
    if (!promptCard) {
      /* istanbul ignore next */
      cov_wdukarhck().b[3][0]++;
      cov_wdukarhck().s[15]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[3][1]++;
    }
    const testCases =
    /* istanbul ignore next */
    (cov_wdukarhck().s[16]++, connection_1.db.prepare(`
      SELECT * FROM test_cases 
      WHERE prompt_card_id = ? 
      ORDER BY created_at DESC
    `).all(promptCardId));
    /* istanbul ignore next */
    cov_wdukarhck().s[17]++;
    return res.json({
      success: true,
      data: testCases.map(tc => {
        /* istanbul ignore next */
        cov_wdukarhck().f[2]++;
        cov_wdukarhck().s[18]++;
        return {
          ...tc,
          input_variables: JSON.parse(tc.input_variables),
          assertions: JSON.parse(
          /* istanbul ignore next */
          (cov_wdukarhck().b[4][0]++, tc.assertions) ||
          /* istanbul ignore next */
          (cov_wdukarhck().b[4][1]++, '[]'))
        };
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_wdukarhck().s[19]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_wdukarhck().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_wdukarhck().b[5][1]++, 'Failed to fetch test cases')
    });
  }
});
// Get specific test case
/* istanbul ignore next */
cov_wdukarhck().s[20]++;
router.get('/:id', (req, res) => {
  /* istanbul ignore next */
  cov_wdukarhck().f[3]++;
  cov_wdukarhck().s[21]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[22]++, req.params);
    const testCase =
    /* istanbul ignore next */
    (cov_wdukarhck().s[23]++, connection_1.db.prepare('SELECT * FROM test_cases WHERE id = ?').get(id));
    /* istanbul ignore next */
    cov_wdukarhck().s[24]++;
    if (!testCase) {
      /* istanbul ignore next */
      cov_wdukarhck().b[6][0]++;
      cov_wdukarhck().s[25]++;
      return res.status(404).json({
        success: false,
        error: 'Test case not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[6][1]++;
    }
    cov_wdukarhck().s[26]++;
    return res.json({
      success: true,
      data: {
        ...testCase,
        input_variables: JSON.parse(testCase.input_variables),
        assertions: JSON.parse(
        /* istanbul ignore next */
        (cov_wdukarhck().b[7][0]++, testCase.assertions) ||
        /* istanbul ignore next */
        (cov_wdukarhck().b[7][1]++, '[]'))
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_wdukarhck().s[27]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_wdukarhck().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_wdukarhck().b[8][1]++, 'Failed to fetch test case')
    });
  }
});
// Create new test case
/* istanbul ignore next */
cov_wdukarhck().s[28]++;
router.post('/', (req, res) => {
  /* istanbul ignore next */
  cov_wdukarhck().f[4]++;
  cov_wdukarhck().s[29]++;
  try {
    const {
      error,
      value
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[30]++, testCaseSchema.validate(req.body));
    /* istanbul ignore next */
    cov_wdukarhck().s[31]++;
    if (error) {
      /* istanbul ignore next */
      cov_wdukarhck().b[9][0]++;
      cov_wdukarhck().s[32]++;
      return res.status(400).json({
        success: false,
        error: error.details[0].message
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[9][1]++;
    }
    const {
      prompt_card_id,
      name,
      input_variables,
      expected_output,
      assertions
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[33]++, value);
    // Verify prompt card exists
    const promptCard =
    /* istanbul ignore next */
    (cov_wdukarhck().s[34]++, connection_1.db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(prompt_card_id));
    /* istanbul ignore next */
    cov_wdukarhck().s[35]++;
    if (!promptCard) {
      /* istanbul ignore next */
      cov_wdukarhck().b[10][0]++;
      cov_wdukarhck().s[36]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[10][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_wdukarhck().s[37]++, connection_1.db.prepare(`
      INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)
      VALUES (?, ?, ?, ?, ?)
    `).run(prompt_card_id, name, JSON.stringify(input_variables),
    /* istanbul ignore next */
    (cov_wdukarhck().b[11][0]++, expected_output) ||
    /* istanbul ignore next */
    (cov_wdukarhck().b[11][1]++, null), JSON.stringify(
    /* istanbul ignore next */
    (cov_wdukarhck().b[12][0]++, assertions) ||
    /* istanbul ignore next */
    (cov_wdukarhck().b[12][1]++, []))));
    const newTestCase =
    /* istanbul ignore next */
    (cov_wdukarhck().s[38]++, connection_1.db.prepare('SELECT * FROM test_cases WHERE id = ?').get(result.lastInsertRowid));
    /* istanbul ignore next */
    cov_wdukarhck().s[39]++;
    return res.status(201).json({
      success: true,
      data: {
        ...newTestCase,
        input_variables: JSON.parse(newTestCase.input_variables),
        assertions: JSON.parse(
        /* istanbul ignore next */
        (cov_wdukarhck().b[13][0]++, newTestCase.assertions) ||
        /* istanbul ignore next */
        (cov_wdukarhck().b[13][1]++, '[]'))
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_wdukarhck().s[40]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_wdukarhck().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_wdukarhck().b[14][1]++, 'Failed to create test case')
    });
  }
});
// Update test case
/* istanbul ignore next */
cov_wdukarhck().s[41]++;
router.put('/:id', (req, res) => {
  /* istanbul ignore next */
  cov_wdukarhck().f[5]++;
  cov_wdukarhck().s[42]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[43]++, req.params);
    const {
      error,
      value
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[44]++, testCaseSchema.validate(req.body));
    /* istanbul ignore next */
    cov_wdukarhck().s[45]++;
    if (error) {
      /* istanbul ignore next */
      cov_wdukarhck().b[15][0]++;
      cov_wdukarhck().s[46]++;
      return res.status(400).json({
        success: false,
        error: error.details[0].message
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[15][1]++;
    }
    const {
      prompt_card_id,
      name,
      input_variables,
      expected_output,
      assertions
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[47]++, value);
    const result =
    /* istanbul ignore next */
    (cov_wdukarhck().s[48]++, connection_1.db.prepare(`
      UPDATE test_cases 
      SET prompt_card_id = ?, name = ?, input_variables = ?, expected_output = ?, assertions = ?
      WHERE id = ?
    `).run(prompt_card_id, name, JSON.stringify(input_variables),
    /* istanbul ignore next */
    (cov_wdukarhck().b[16][0]++, expected_output) ||
    /* istanbul ignore next */
    (cov_wdukarhck().b[16][1]++, null), JSON.stringify(
    /* istanbul ignore next */
    (cov_wdukarhck().b[17][0]++, assertions) ||
    /* istanbul ignore next */
    (cov_wdukarhck().b[17][1]++, [])), id));
    /* istanbul ignore next */
    cov_wdukarhck().s[49]++;
    if (result.changes === 0) {
      /* istanbul ignore next */
      cov_wdukarhck().b[18][0]++;
      cov_wdukarhck().s[50]++;
      return res.status(404).json({
        success: false,
        error: 'Test case not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[18][1]++;
    }
    const updatedTestCase =
    /* istanbul ignore next */
    (cov_wdukarhck().s[51]++, connection_1.db.prepare('SELECT * FROM test_cases WHERE id = ?').get(id));
    /* istanbul ignore next */
    cov_wdukarhck().s[52]++;
    return res.json({
      success: true,
      data: {
        ...updatedTestCase,
        input_variables: JSON.parse(updatedTestCase.input_variables),
        assertions: JSON.parse(
        /* istanbul ignore next */
        (cov_wdukarhck().b[19][0]++, updatedTestCase.assertions) ||
        /* istanbul ignore next */
        (cov_wdukarhck().b[19][1]++, '[]'))
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_wdukarhck().s[53]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_wdukarhck().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_wdukarhck().b[20][1]++, 'Failed to update test case')
    });
  }
});
// Delete test case
/* istanbul ignore next */
cov_wdukarhck().s[54]++;
router.delete('/:id', (req, res) => {
  /* istanbul ignore next */
  cov_wdukarhck().f[6]++;
  cov_wdukarhck().s[55]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_wdukarhck().s[56]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_wdukarhck().s[57]++, connection_1.db.prepare('DELETE FROM test_cases WHERE id = ?').run(id));
    /* istanbul ignore next */
    cov_wdukarhck().s[58]++;
    if (result.changes === 0) {
      /* istanbul ignore next */
      cov_wdukarhck().b[21][0]++;
      cov_wdukarhck().s[59]++;
      return res.status(404).json({
        success: false,
        error: 'Test case not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wdukarhck().b[21][1]++;
    }
    cov_wdukarhck().s[60]++;
    return res.json({
      success: true,
      message: 'Test case deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_wdukarhck().s[61]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_wdukarhck().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_wdukarhck().b[22][1]++, 'Failed to delete test case')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,