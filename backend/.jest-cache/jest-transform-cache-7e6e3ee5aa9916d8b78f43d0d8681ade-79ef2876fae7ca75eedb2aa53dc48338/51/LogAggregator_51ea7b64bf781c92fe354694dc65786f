a91932f09023f3bd557177295e6c86c6
"use strict";

/* istanbul ignore next */
function cov_e3expu37m() {
  var path = "/workspaces/prompt-card-system/backend/src/services/security/LogAggregator.ts";
  var hash = "9f8ba083e3d4c9d52453dc4d7fec06c95952a297";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/security/LogAggregator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 55
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 47
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 51
        }
      },
      "8": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 16
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 31
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 23
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "13": {
        start: {
          line: 18,
          column: 183
        },
        end: {
          line: 18,
          column: 190
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "16": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 39
        }
      },
      "17": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "18": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "19": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "20": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 41
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 41
        }
      },
      "23": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 39
        }
      },
      "24": {
        start: {
          line: 44,
          column: 25
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "25": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "26": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 40
        }
      },
      "27": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "28": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 39
        }
      },
      "29": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "30": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 43
        }
      },
      "31": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "32": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 63
        }
      },
      "33": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 70
        }
      },
      "34": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 69
        }
      },
      "35": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 69
        }
      },
      "36": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 70
        }
      },
      "37": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 73
        }
      },
      "38": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "39": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 41
        }
      },
      "40": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "41": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "42": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 92
        }
      },
      "43": {
        start: {
          line: 103,
          column: 58
        },
        end: {
          line: 103,
          column: 90
        }
      },
      "44": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "45": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 117
        }
      },
      "46": {
        start: {
          line: 106,
          column: 58
        },
        end: {
          line: 106,
          column: 115
        }
      },
      "47": {
        start: {
          line: 106,
          column: 87
        },
        end: {
          line: 106,
          column: 114
        }
      },
      "48": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "49": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 107
        }
      },
      "50": {
        start: {
          line: 109,
          column: 58
        },
        end: {
          line: 109,
          column: 105
        }
      },
      "51": {
        start: {
          line: 109,
          column: 82
        },
        end: {
          line: 109,
          column: 104
        }
      },
      "52": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "53": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 113,
          column: 59
        }
      },
      "54": {
        start: {
          line: 112,
          column: 58
        },
        end: {
          line: 113,
          column: 57
        }
      },
      "55": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "56": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 60
        }
      },
      "57": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 119,
          column: 76
        }
      },
      "58": {
        start: {
          line: 117,
          column: 58
        },
        end: {
          line: 119,
          column: 74
        }
      },
      "59": {
        start: {
          line: 119,
          column: 41
        },
        end: {
          line: 119,
          column: 73
        }
      },
      "60": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "61": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 65
        }
      },
      "62": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 90
        }
      },
      "63": {
        start: {
          line: 125,
          column: 43
        },
        end: {
          line: 125,
          column: 88
        }
      },
      "64": {
        start: {
          line: 130,
          column: 33
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "65": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "66": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "67": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "68": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 175,
          column: 23
        }
      },
      "69": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 181,
          column: 19
        }
      },
      "70": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 30
        }
      },
      "71": {
        start: {
          line: 187,
          column: 22
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "72": {
        start: {
          line: 191,
          column: 29
        },
        end: {
          line: 193,
          column: 10
        }
      },
      "73": {
        start: {
          line: 194,
          column: 25
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "74": {
        start: {
          line: 200,
          column: 53
        },
        end: {
          line: 200,
          column: 72
        }
      },
      "75": {
        start: {
          line: 201,
          column: 55
        },
        end: {
          line: 201,
          column: 73
        }
      },
      "76": {
        start: {
          line: 202,
          column: 56
        },
        end: {
          line: 202,
          column: 78
        }
      },
      "77": {
        start: {
          line: 203,
          column: 61
        },
        end: {
          line: 203,
          column: 69
        }
      },
      "78": {
        start: {
          line: 212,
          column: 25
        },
        end: {
          line: 212,
          column: 58
        }
      },
      "79": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 37
        }
      },
      "80": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 74
        }
      },
      "81": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 37
        }
      },
      "82": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 48
        }
      },
      "83": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 24
        }
      },
      "84": {
        start: {
          line: 221,
          column: 25
        },
        end: {
          line: 221,
          column: 27
        }
      },
      "85": {
        start: {
          line: 222,
          column: 27
        },
        end: {
          line: 222,
          column: 36
        }
      },
      "86": {
        start: {
          line: 224,
          column: 22
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "87": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "88": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 252,
          column: 81
        }
      },
      "89": {
        start: {
          line: 252,
          column: 52
        },
        end: {
          line: 252,
          column: 80
        }
      },
      "90": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "91": {
        start: {
          line: 254,
          column: 33
        },
        end: {
          line: 254,
          column: 94
        }
      },
      "92": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 263,
          column: 19
        }
      },
      "93": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 24
        }
      },
      "94": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "95": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 271,
          column: 34
        }
      },
      "96": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 34
        }
      },
      "97": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 273,
          column: 30
        }
      },
      "98": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 30
        }
      },
      "99": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 275,
          column: 32
        }
      },
      "100": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 32
        }
      },
      "101": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 25
        }
      },
      "102": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "103": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 280,
          column: 34
        }
      },
      "104": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 34
        }
      },
      "105": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 282,
          column: 30
        }
      },
      "106": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 30
        }
      },
      "107": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 284,
          column: 32
        }
      },
      "108": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 32
        }
      },
      "109": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 25
        }
      },
      "110": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 289,
          column: 26
        }
      },
      "111": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 26
        }
      },
      "112": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 291,
          column: 28
        }
      },
      "113": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 28
        }
      },
      "114": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 21
        }
      },
      "115": {
        start: {
          line: 295,
          column: 32
        },
        end: {
          line: 295,
          column: 34
        }
      },
      "116": {
        start: {
          line: 297,
          column: 33
        },
        end: {
          line: 297,
          column: 85
        }
      },
      "117": {
        start: {
          line: 297,
          column: 63
        },
        end: {
          line: 297,
          column: 84
        }
      },
      "118": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "119": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 89
        }
      },
      "120": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 87
        }
      },
      "121": {
        start: {
          line: 301,
          column: 37
        },
        end: {
          line: 301,
          column: 92
        }
      },
      "122": {
        start: {
          line: 301,
          column: 66
        },
        end: {
          line: 301,
          column: 91
        }
      },
      "123": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "124": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 119
        }
      },
      "125": {
        start: {
          line: 307,
          column: 30
        },
        end: {
          line: 307,
          column: 79
        }
      },
      "126": {
        start: {
          line: 307,
          column: 60
        },
        end: {
          line: 307,
          column: 78
        }
      },
      "127": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "128": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 101
        }
      },
      "129": {
        start: {
          line: 312,
          column: 29
        },
        end: {
          line: 312,
          column: 84
        }
      },
      "130": {
        start: {
          line: 312,
          column: 59
        },
        end: {
          line: 312,
          column: 83
        }
      },
      "131": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "132": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 100
        }
      },
      "133": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "134": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 87
        }
      },
      "135": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "136": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 93
        }
      },
      "137": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 31
        }
      },
      "138": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 367,
          column: 10
        }
      },
      "139": {
        start: {
          line: 331,
          column: 30
        },
        end: {
          line: 331,
          column: 40
        }
      },
      "140": {
        start: {
          line: 332,
          column: 34
        },
        end: {
          line: 332,
          column: 63
        }
      },
      "141": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 46
        }
      },
      "142": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 341,
          column: 36
        }
      },
      "143": {
        start: {
          line: 343,
          column: 33
        },
        end: {
          line: 343,
          column: 41
        }
      },
      "144": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 365,
          column: 14
        }
      },
      "145": {
        start: {
          line: 345,
          column: 37
        },
        end: {
          line: 345,
          column: 59
        }
      },
      "146": {
        start: {
          line: 346,
          column: 30
        },
        end: {
          line: 347,
          column: 59
        }
      },
      "147": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 363,
          column: 19
        }
      },
      "148": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 53
        }
      },
      "149": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 19
        }
      },
      "150": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "151": {
        start: {
          line: 372,
          column: 27
        },
        end: {
          line: 372,
          column: 63
        }
      },
      "152": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "153": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 76
        }
      },
      "154": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 72
        }
      },
      "155": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 383,
          column: 19
        }
      },
      "156": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 19
        }
      },
      "157": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "158": {
        start: {
          line: 385,
          column: 28
        },
        end: {
          line: 393,
          column: 21
        }
      },
      "159": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 71
        }
      },
      "160": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 65
        }
      },
      "161": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 407,
          column: 32
        }
      },
      "162": {
        start: {
          line: 403,
          column: 31
        },
        end: {
          line: 403,
          column: 41
        }
      },
      "163": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 85
        }
      },
      "164": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 77
        }
      },
      "165": {
        start: {
          line: 405,
          column: 48
        },
        end: {
          line: 405,
          column: 75
        }
      },
      "166": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 95
        }
      },
      "167": {
        start: {
          line: 406,
          column: 61
        },
        end: {
          line: 406,
          column: 93
        }
      },
      "168": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 417,
          column: 61
        }
      },
      "169": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 416,
          column: 13
        }
      },
      "170": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 48
        }
      },
      "171": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 145
        }
      },
      "172": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 423,
          column: 29
        }
      },
      "173": {
        start: {
          line: 422,
          column: 28
        },
        end: {
          line: 422,
          column: 73
        }
      },
      "174": {
        start: {
          line: 426,
          column: 22
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "175": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 445,
          column: 11
        }
      },
      "176": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 43
        }
      },
      "177": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 443,
          column: 13
        }
      },
      "178": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 52
        }
      },
      "179": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 46
        }
      },
      "180": {
        start: {
          line: 447,
          column: 20
        },
        end: {
          line: 447,
          column: 30
        }
      },
      "181": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 457,
          column: 9
        }
      },
      "182": {
        start: {
          line: 448,
          column: 21
        },
        end: {
          line: 448,
          column: 23
        }
      },
      "183": {
        start: {
          line: 449,
          column: 25
        },
        end: {
          line: 449,
          column: 69
        }
      },
      "184": {
        start: {
          line: 450,
          column: 30
        },
        end: {
          line: 450,
          column: 108
        }
      },
      "185": {
        start: {
          line: 451,
          column: 28
        },
        end: {
          line: 451,
          column: 74
        }
      },
      "186": {
        start: {
          line: 452,
          column: 26
        },
        end: {
          line: 452,
          column: 111
        }
      },
      "187": {
        start: {
          line: 452,
          column: 50
        },
        end: {
          line: 452,
          column: 103
        }
      },
      "188": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 456,
          column: 15
        }
      },
      "189": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 21
        }
      },
      "190": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "191": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 49
        }
      },
      "192": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "193": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 51
        }
      },
      "194": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 34
        }
      },
      "195": {
        start: {
          line: 471,
          column: 0
        },
        end: {
          line: 471,
          column: 38
        }
      },
      "196": {
        start: {
          line: 472,
          column: 0
        },
        end: {
          line: 479,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 30
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 62
          },
          end: {
            line: 36,
            column: 63
          }
        },
        loc: {
          start: {
            line: 36,
            column: 73
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 47
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 73
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 51
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 76
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 28
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 80
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 99
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 103,
            column: 51
          },
          end: {
            line: 103,
            column: 52
          }
        },
        loc: {
          start: {
            line: 103,
            column: 58
          },
          end: {
            line: 103,
            column: 90
          }
        },
        line: 103
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 106,
            column: 51
          },
          end: {
            line: 106,
            column: 52
          }
        },
        loc: {
          start: {
            line: 106,
            column: 58
          },
          end: {
            line: 106,
            column: 115
          }
        },
        line: 106
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 106,
            column: 77
          },
          end: {
            line: 106,
            column: 78
          }
        },
        loc: {
          start: {
            line: 106,
            column: 87
          },
          end: {
            line: 106,
            column: 114
          }
        },
        line: 106
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 109,
            column: 51
          },
          end: {
            line: 109,
            column: 52
          }
        },
        loc: {
          start: {
            line: 109,
            column: 58
          },
          end: {
            line: 109,
            column: 105
          }
        },
        line: 109
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 109,
            column: 75
          },
          end: {
            line: 109,
            column: 76
          }
        },
        loc: {
          start: {
            line: 109,
            column: 82
          },
          end: {
            line: 109,
            column: 104
          }
        },
        line: 109
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 112,
            column: 51
          },
          end: {
            line: 112,
            column: 52
          }
        },
        loc: {
          start: {
            line: 112,
            column: 58
          },
          end: {
            line: 113,
            column: 57
          }
        },
        line: 112
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 117,
            column: 51
          },
          end: {
            line: 117,
            column: 52
          }
        },
        loc: {
          start: {
            line: 117,
            column: 58
          },
          end: {
            line: 119,
            column: 74
          }
        },
        line: 117
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 119,
            column: 34
          },
          end: {
            line: 119,
            column: 35
          }
        },
        loc: {
          start: {
            line: 119,
            column: 41
          },
          end: {
            line: 119,
            column: 73
          }
        },
        line: 119
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 125,
            column: 34
          }
        },
        loc: {
          start: {
            line: 125,
            column: 43
          },
          end: {
            line: 125,
            column: 88
          }
        },
        line: 125
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 33
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 128
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 185
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 200,
            column: 48
          },
          end: {
            line: 200,
            column: 49
          }
        },
        loc: {
          start: {
            line: 200,
            column: 53
          },
          end: {
            line: 200,
            column: 72
          }
        },
        line: 200
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 201,
            column: 50
          },
          end: {
            line: 201,
            column: 51
          }
        },
        loc: {
          start: {
            line: 201,
            column: 55
          },
          end: {
            line: 201,
            column: 73
          }
        },
        line: 201
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 202,
            column: 51
          },
          end: {
            line: 202,
            column: 52
          }
        },
        loc: {
          start: {
            line: 202,
            column: 56
          },
          end: {
            line: 202,
            column: 78
          }
        },
        line: 202
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 203,
            column: 56
          },
          end: {
            line: 203,
            column: 57
          }
        },
        loc: {
          start: {
            line: 203,
            column: 61
          },
          end: {
            line: 203,
            column: 69
          }
        },
        line: 203
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 25
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 220
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 251,
            column: 22
          },
          end: {
            line: 251,
            column: 23
          }
        },
        loc: {
          start: {
            line: 251,
            column: 30
          },
          end: {
            line: 265,
            column: 9
          }
        },
        line: 251
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 252,
            column: 45
          },
          end: {
            line: 252,
            column: 46
          }
        },
        loc: {
          start: {
            line: 252,
            column: 52
          },
          end: {
            line: 252,
            column: 80
          }
        },
        line: 252
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 48
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 268
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 38
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 294
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 297,
            column: 58
          },
          end: {
            line: 297,
            column: 59
          }
        },
        loc: {
          start: {
            line: 297,
            column: 63
          },
          end: {
            line: 297,
            column: 84
          }
        },
        line: 297
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 301,
            column: 61
          },
          end: {
            line: 301,
            column: 62
          }
        },
        loc: {
          start: {
            line: 301,
            column: 66
          },
          end: {
            line: 301,
            column: 91
          }
        },
        line: 301
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 307,
            column: 55
          },
          end: {
            line: 307,
            column: 56
          }
        },
        loc: {
          start: {
            line: 307,
            column: 60
          },
          end: {
            line: 307,
            column: 78
          }
        },
        line: 307
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 312,
            column: 54
          },
          end: {
            line: 312,
            column: 55
          }
        },
        loc: {
          start: {
            line: 312,
            column: 59
          },
          end: {
            line: 312,
            column: 83
          }
        },
        line: 312
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 30
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 326
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 27
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 329
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 330,
            column: 15
          },
          end: {
            line: 330,
            column: 16
          }
        },
        loc: {
          start: {
            line: 330,
            column: 35
          },
          end: {
            line: 367,
            column: 9
          }
        },
        line: 330
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 344,
            column: 23
          },
          end: {
            line: 344,
            column: 24
          }
        },
        loc: {
          start: {
            line: 344,
            column: 39
          },
          end: {
            line: 365,
            column: 13
          }
        },
        line: 344
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 370,
            column: 5
          }
        },
        loc: {
          start: {
            line: 370,
            column: 31
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 370
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 29
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 381
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 22
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 401
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 402,
            column: 46
          },
          end: {
            line: 402,
            column: 47
          }
        },
        loc: {
          start: {
            line: 402,
            column: 52
          },
          end: {
            line: 407,
            column: 9
          }
        },
        line: 402
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 405,
            column: 41
          },
          end: {
            line: 405,
            column: 42
          }
        },
        loc: {
          start: {
            line: 405,
            column: 48
          },
          end: {
            line: 405,
            column: 75
          }
        },
        line: 405
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 406,
            column: 49
          },
          end: {
            line: 406,
            column: 50
          }
        },
        loc: {
          start: {
            line: 406,
            column: 61
          },
          end: {
            line: 406,
            column: 93
          }
        },
        line: 406
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 28
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 409
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 410,
            column: 44
          },
          end: {
            line: 410,
            column: 45
          }
        },
        loc: {
          start: {
            line: 410,
            column: 56
          },
          end: {
            line: 417,
            column: 9
          }
        },
        line: 410
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 28
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 420
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 422,
            column: 18
          },
          end: {
            line: 422,
            column: 19
          }
        },
        loc: {
          start: {
            line: 422,
            column: 28
          },
          end: {
            line: 422,
            column: 73
          }
        },
        line: 422
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 23
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 425
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 439,
            column: 26
          },
          end: {
            line: 439,
            column: 27
          }
        },
        loc: {
          start: {
            line: 439,
            column: 33
          },
          end: {
            line: 445,
            column: 9
          }
        },
        line: 439
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 452,
            column: 43
          },
          end: {
            line: 452,
            column: 44
          }
        },
        loc: {
          start: {
            line: 452,
            column: 50
          },
          end: {
            line: 452,
            column: 103
          }
        },
        line: 452
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 461,
            column: 4
          },
          end: {
            line: 461,
            column: 5
          }
        },
        loc: {
          start: {
            line: 461,
            column: 14
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 461
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 28
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 31
          }
        }],
        line: 18
      },
      "5": {
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 18,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 52
          },
          end: {
            line: 18,
            column: 54
          }
        }],
        line: 18
      },
      "6": {
        loc: {
          start: {
            line: 18,
            column: 56
          },
          end: {
            line: 18,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 82
          },
          end: {
            line: 18,
            column: 84
          }
        }],
        line: 18
      },
      "7": {
        loc: {
          start: {
            line: 18,
            column: 86
          },
          end: {
            line: 18,
            column: 110
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 106
          },
          end: {
            line: 18,
            column: 110
          }
        }],
        line: 18
      },
      "8": {
        loc: {
          start: {
            line: 18,
            column: 112
          },
          end: {
            line: 18,
            column: 147
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 126
          },
          end: {
            line: 18,
            column: 147
          }
        }],
        line: 18
      },
      "9": {
        loc: {
          start: {
            line: 18,
            column: 149
          },
          end: {
            line: 18,
            column: 178
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 174
          },
          end: {
            line: 18,
            column: 178
          }
        }],
        line: 18
      },
      "10": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "11": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "12": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "13": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 42
          }
        }, {
          start: {
            line: 52,
            column: 46
          },
          end: {
            line: 52,
            column: 58
          }
        }],
        line: 52
      },
      "14": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "15": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 38
          }
        }, {
          start: {
            line: 56,
            column: 42
          },
          end: {
            line: 56,
            column: 65
          }
        }],
        line: 56
      },
      "16": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "17": {
        loc: {
          start: {
            line: 64,
            column: 37
          },
          end: {
            line: 64,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 44
          },
          end: {
            line: 64,
            column: 46
          }
        }],
        line: 64
      },
      "18": {
        loc: {
          start: {
            line: 67,
            column: 36
          },
          end: {
            line: 67,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 67,
            column: 43
          },
          end: {
            line: 67,
            column: 45
          }
        }],
        line: 67
      },
      "19": {
        loc: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 70,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 43
          },
          end: {
            line: 70,
            column: 45
          }
        }],
        line: 70
      },
      "20": {
        loc: {
          start: {
            line: 73,
            column: 37
          },
          end: {
            line: 73,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 44
          },
          end: {
            line: 73,
            column: 46
          }
        }],
        line: 73
      },
      "21": {
        loc: {
          start: {
            line: 76,
            column: 40
          },
          end: {
            line: 76,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 47
          },
          end: {
            line: 76,
            column: 49
          }
        }],
        line: 76
      },
      "22": {
        loc: {
          start: {
            line: 82,
            column: 19
          },
          end: {
            line: 84,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 51
          },
          end: {
            line: 82,
            column: 61
          }
        }, {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 84,
            column: 65
          }
        }],
        line: 82
      },
      "23": {
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 84,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 44
          },
          end: {
            line: 83,
            column: 51
          }
        }, {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 65
          }
        }],
        line: 83
      },
      "24": {
        loc: {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 50
          },
          end: {
            line: 84,
            column: 56
          }
        }, {
          start: {
            line: 84,
            column: 59
          },
          end: {
            line: 84,
            column: 65
          }
        }],
        line: 84
      },
      "25": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "26": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "27": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "28": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "29": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "30": {
        loc: {
          start: {
            line: 112,
            column: 58
          },
          end: {
            line: 113,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 58
          },
          end: {
            line: 112,
            column: 97
          }
        }, {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 57
          }
        }],
        line: 112
      },
      "31": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "32": {
        loc: {
          start: {
            line: 117,
            column: 58
          },
          end: {
            line: 119,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 58
          },
          end: {
            line: 117,
            column: 98
          }
        }, {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 118,
            column: 59
          }
        }, {
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 119,
            column: 74
          }
        }],
        line: 117
      },
      "33": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "34": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "35": {
        loc: {
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "36": {
        loc: {
          start: {
            line: 187,
            column: 22
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 22
          },
          end: {
            line: 187,
            column: 31
          }
        }, {
          start: {
            line: 187,
            column: 35
          },
          end: {
            line: 190,
            column: 9
          }
        }],
        line: 187
      },
      "37": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "38": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "39": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 271,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 271,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "40": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 273,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 273,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "41": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 275,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 275,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "42": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "43": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 280,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 280,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "44": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 282,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 282,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "45": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 284,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 284,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "46": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 289,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 289,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "47": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 291,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 291,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "48": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "49": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "50": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "51": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "52": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "53": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "54": {
        loc: {
          start: {
            line: 346,
            column: 30
          },
          end: {
            line: 347,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 346,
            column: 54
          },
          end: {
            line: 346,
            column: 61
          }
        }, {
          start: {
            line: 347,
            column: 20
          },
          end: {
            line: 347,
            column: 59
          }
        }],
        line: 346
      },
      "55": {
        loc: {
          start: {
            line: 347,
            column: 20
          },
          end: {
            line: 347,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 44
          },
          end: {
            line: 347,
            column: 50
          }
        }, {
          start: {
            line: 347,
            column: 53
          },
          end: {
            line: 347,
            column: 59
          }
        }],
        line: 347
      },
      "56": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "57": {
        loc: {
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 383,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 383,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "58": {
        loc: {
          start: {
            line: 415,
            column: 74
          },
          end: {
            line: 415,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 415,
            column: 99
          },
          end: {
            line: 415,
            column: 112
          }
        }, {
          start: {
            line: 415,
            column: 115
          },
          end: {
            line: 415,
            column: 130
          }
        }],
        line: 415
      },
      "59": {
        loc: {
          start: {
            line: 420,
            column: 16
          },
          end: {
            line: 420,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 420,
            column: 24
          },
          end: {
            line: 420,
            column: 26
          }
        }],
        line: 420
      },
      "60": {
        loc: {
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 443,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 443,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "61": {
        loc: {
          start: {
            line: 452,
            column: 50
          },
          end: {
            line: 452,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 50
          },
          end: {
            line: 452,
            column: 76
          }
        }, {
          start: {
            line: 452,
            column: 80
          },
          end: {
            line: 452,
            column: 103
          }
        }],
        line: 452
      },
      "62": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "63": {
        loc: {
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/security/LogAggregator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/security/LogAggregator.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { securityMonitor, SecurityEvent } from './SecurityMonitor';\n\nexport interface LogEntry {\n  id: string;\n  timestamp: Date;\n  level: 'debug' | 'info' | 'warn' | 'error' | 'critical';\n  source: string;\n  message: string;\n  metadata?: any;\n  tags: string[];\n  correlationId?: string;\n}\n\nexport interface LogAnalysis {\n  id: string;\n  timestamp: Date;\n  timeRange: { start: Date; end: Date };\n  summary: {\n    totalLogs: number;\n    errorCount: number;\n    warningCount: number;\n    criticalCount: number;\n    uniqueSources: number;\n  };\n  patterns: {\n    type: 'security' | 'performance' | 'error' | 'anomaly';\n    pattern: string;\n    occurrences: number;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    firstSeen: Date;\n    lastSeen: Date;\n    samples: LogEntry[];\n  }[];\n  recommendations: string[];\n  securityEvents: SecurityEvent[];\n}\n\nexport interface LogFilter {\n  level?: LogEntry['level'][];\n  source?: string[];\n  tags?: string[];\n  timeRange?: { start: Date; end: Date };\n  searchTerm?: string;\n  limit?: number;\n}\n\nexport class LogAggregator extends EventEmitter {\n  private logs: LogEntry[] = [];\n  private analyses: LogAnalysis[] = [];\n  private analysisInterval?: NodeJS.Timeout;\n  private logCleanupInterval?: NodeJS.Timeout;\n  private logFile?: string;\n\n  constructor(private options: {\n    maxLogs?: number;\n    logRetentionDays?: number;\n    analysisIntervalMinutes?: number;\n    enableFileLogging?: boolean;\n    logFilePath?: string;\n    enableRealTimeAnalysis?: boolean;\n  } = {}) {\n    super();\n    \n    const {\n      maxLogs = 50000,\n      logRetentionDays = 30,\n      analysisIntervalMinutes = 15,\n      enableFileLogging = true,\n      logFilePath = './logs/security.log',\n      enableRealTimeAnalysis = true\n    } = options;\n\n    this.options = {\n      maxLogs,\n      logRetentionDays,\n      analysisIntervalMinutes,\n      enableFileLogging,\n      logFilePath,\n      enableRealTimeAnalysis\n    };\n\n    if (enableFileLogging) {\n      this.logFile = logFilePath;\n      this.ensureLogDirectory();\n    }\n\n    this.setupLogCleanup();\n    \n    if (enableRealTimeAnalysis) {\n      this.startPeriodicAnalysis();\n    }\n\n    // Listen to security events\n    securityMonitor.on('securityEvent', (event: SecurityEvent) => {\n      this.logSecurityEvent(event);\n    });\n\n    // Set up Express middleware integration\n    this.setupExpressIntegration();\n  }\n\n  // Logging methods\n  log(entry: Omit<LogEntry, 'id' | 'timestamp'>): void {\n    const logEntry: LogEntry = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      ...entry\n    };\n\n    this.logs.push(logEntry);\n    this.emit('logEntry', logEntry);\n\n    // Write to file if enabled\n    if (this.options.enableFileLogging && this.logFile) {\n      this.writeToFile(logEntry);\n    }\n\n    // Real-time analysis for critical events\n    if (entry.level === 'critical' || entry.level === 'error') {\n      this.analyzeLogEntry(logEntry);\n    }\n\n    // Maintain log limit\n    if (this.logs.length > this.options.maxLogs!) {\n      this.logs = this.logs.slice(-this.options.maxLogs!);\n    }\n  }\n\n  debug(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'debug', source, message, metadata, tags });\n  }\n\n  info(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'info', source, message, metadata, tags });\n  }\n\n  warn(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'warn', source, message, metadata, tags });\n  }\n\n  error(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'error', source, message, metadata, tags });\n  }\n\n  critical(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'critical', source, message, metadata, tags });\n  }\n\n  // Security-specific logging\n  private logSecurityEvent(event: SecurityEvent): void {\n    this.log({\n      level: event.severity === 'critical' ? 'critical' : \n             event.severity === 'high' ? 'error' :\n             event.severity === 'medium' ? 'warn' : 'info',\n      source: 'security-monitor',\n      message: `Security Event: ${event.message}`,\n      metadata: {\n        eventId: event.id,\n        eventType: event.type,\n        eventSource: event.source,\n        eventDetails: event.details,\n        resolved: event.resolved\n      },\n      tags: ['security', event.type, event.severity],\n      correlationId: event.id\n    });\n  }\n\n  // Log retrieval and filtering\n  getLogs(filter?: LogFilter): LogEntry[] {\n    let filteredLogs = [...this.logs];\n\n    if (filter) {\n      if (filter.level) {\n        filteredLogs = filteredLogs.filter(log => filter.level!.includes(log.level));\n      }\n      if (filter.source) {\n        filteredLogs = filteredLogs.filter(log => \n          filter.source!.some(source => log.source.includes(source))\n        );\n      }\n      if (filter.tags) {\n        filteredLogs = filteredLogs.filter(log => \n          filter.tags!.some(tag => log.tags.includes(tag))\n        );\n      }\n      if (filter.timeRange) {\n        filteredLogs = filteredLogs.filter(log => \n          log.timestamp >= filter.timeRange!.start && \n          log.timestamp <= filter.timeRange!.end\n        );\n      }\n      if (filter.searchTerm) {\n        const term = filter.searchTerm.toLowerCase();\n        filteredLogs = filteredLogs.filter(log => \n          log.message.toLowerCase().includes(term) ||\n          log.source.toLowerCase().includes(term) ||\n          log.tags.some(tag => tag.toLowerCase().includes(term))\n        );\n      }\n      if (filter.limit) {\n        filteredLogs = filteredLogs.slice(-filter.limit);\n      }\n    }\n\n    return filteredLogs.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // Log analysis\n  async analyzeLogEntry(entry: LogEntry): Promise<void> {\n    // Real-time analysis for immediate threats\n    const securityPatterns = [\n      {\n        pattern: /failed.*login|authentication.*failed|invalid.*credentials/i,\n        type: 'security' as const,\n        severity: 'high' as const,\n        description: 'Authentication failure detected'\n      },\n      {\n        pattern: /sql.*injection|xss|cross.*site|csrf/i,\n        type: 'security' as const,\n        severity: 'critical' as const,\n        description: 'Potential security attack detected'\n      },\n      {\n        pattern: /rate.*limit|too.*many.*requests|ddos/i,\n        type: 'security' as const,\n        severity: 'medium' as const,\n        description: 'Potential abuse or DoS attack'\n      },\n      {\n        pattern: /memory.*leak|out.*of.*memory|heap.*overflow/i,\n        type: 'performance' as const,\n        severity: 'high' as const,\n        description: 'Memory-related issue detected'\n      },\n      {\n        pattern: /unauthorized|forbidden|access.*denied/i,\n        type: 'security' as const,\n        severity: 'medium' as const,\n        description: 'Unauthorized access attempt'\n      }\n    ];\n\n    for (const patternDef of securityPatterns) {\n      if (patternDef.pattern.test(entry.message)) {\n        if (patternDef.type === 'security') {\n          securityMonitor.logSecurityEvent({\n            severity: patternDef.severity,\n            type: 'intrusion',\n            source: `log-analyzer:${entry.source}`,\n            message: `${patternDef.description}: ${entry.message}`,\n            details: {\n              logEntry: entry,\n              pattern: patternDef.pattern.source\n            },\n            resolved: false\n          });\n        }\n\n        this.emit('patternDetected', {\n          pattern: patternDef,\n          logEntry: entry,\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  async performLogAnalysis(timeRange?: { start: Date; end: Date }): Promise<LogAnalysis> {\n    const now = new Date();\n    const range = timeRange || {\n      start: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Last 24 hours\n      end: now\n    };\n\n    const relevantLogs = this.getLogs({\n      timeRange: range\n    });\n\n    const analysis: LogAnalysis = {\n      id: crypto.randomUUID(),\n      timestamp: now,\n      timeRange: range,\n      summary: {\n        totalLogs: relevantLogs.length,\n        errorCount: relevantLogs.filter(l => l.level === 'error').length,\n        warningCount: relevantLogs.filter(l => l.level === 'warn').length,\n        criticalCount: relevantLogs.filter(l => l.level === 'critical').length,\n        uniqueSources: new Set(relevantLogs.map(l => l.source)).size\n      },\n      patterns: [],\n      recommendations: [],\n      securityEvents: securityMonitor.getSecurityEvents({\n        since: range.start\n      })\n    };\n\n    // Pattern detection\n    const patterns = this.detectPatterns(relevantLogs);\n    analysis.patterns = patterns;\n\n    // Generate recommendations\n    analysis.recommendations = this.generateRecommendations(analysis);\n\n    this.analyses.push(analysis);\n    this.emit('analysisComplete', analysis);\n\n    return analysis;\n  }\n\n  private detectPatterns(logs: LogEntry[]): LogAnalysis['patterns'] {\n    const patterns: LogAnalysis['patterns'] = [];\n    const patternMap = new Map<string, {\n      count: number;\n      severity: 'low' | 'medium' | 'high' | 'critical';\n      type: 'security' | 'performance' | 'error' | 'anomaly';\n      firstSeen: Date;\n      lastSeen: Date;\n      samples: LogEntry[];\n    }>();\n\n    // Define pattern detection rules\n    const rules = [\n      {\n        name: 'repeated_errors',\n        regex: /(error|exception|fail)/i,\n        type: 'error' as const,\n        minOccurrences: 5\n      },\n      {\n        name: 'security_violations',\n        regex: /(unauthorized|forbidden|access.*denied|authentication.*failed)/i,\n        type: 'security' as const,\n        minOccurrences: 3\n      },\n      {\n        name: 'performance_issues',\n        regex: /(slow|timeout|high.*latency|memory.*usage)/i,\n        type: 'performance' as const,\n        minOccurrences: 3\n      },\n      {\n        name: 'anomalous_activity',\n        regex: /(unusual|suspicious|anomaly|unexpected)/i,\n        type: 'anomaly' as const,\n        minOccurrences: 2\n      }\n    ];\n\n    // Analyze logs for patterns\n    rules.forEach(rule => {\n      const matchingLogs = logs.filter(log => rule.regex.test(log.message));\n      \n      if (matchingLogs.length >= rule.minOccurrences) {\n        const severity = this.calculatePatternSeverity(matchingLogs.length, rule.type);\n        \n        patterns.push({\n          type: rule.type,\n          pattern: rule.name,\n          occurrences: matchingLogs.length,\n          severity,\n          firstSeen: matchingLogs[matchingLogs.length - 1].timestamp,\n          lastSeen: matchingLogs[0].timestamp,\n          samples: matchingLogs.slice(0, 5) // First 5 samples\n        });\n      }\n    });\n\n    return patterns;\n  }\n\n  private calculatePatternSeverity(occurrences: number, type: string): 'low' | 'medium' | 'high' | 'critical' {\n    if (type === 'security') {\n      if (occurrences >= 20) return 'critical';\n      if (occurrences >= 10) return 'high';\n      if (occurrences >= 5) return 'medium';\n      return 'low';\n    }\n    \n    if (type === 'error') {\n      if (occurrences >= 50) return 'critical';\n      if (occurrences >= 25) return 'high';\n      if (occurrences >= 10) return 'medium';\n      return 'low';\n    }\n    \n    // Default severity calculation\n    if (occurrences >= 30) return 'high';\n    if (occurrences >= 15) return 'medium';\n    return 'low';\n  }\n\n  private generateRecommendations(analysis: LogAnalysis): string[] {\n    const recommendations: string[] = [];\n\n    // Security recommendations\n    const securityPatterns = analysis.patterns.filter(p => p.type === 'security');\n    if (securityPatterns.length > 0) {\n      recommendations.push('Review and investigate security-related log patterns');\n      recommendations.push('Consider implementing additional security measures');\n      \n      const criticalSecurity = securityPatterns.filter(p => p.severity === 'critical');\n      if (criticalSecurity.length > 0) {\n        recommendations.push('URGENT: Critical security patterns detected - immediate investigation required');\n      }\n    }\n\n    // Error recommendations\n    const errorPatterns = analysis.patterns.filter(p => p.type === 'error');\n    if (errorPatterns.length > 0) {\n      recommendations.push('Investigate recurring error patterns to improve system stability');\n    }\n\n    // Performance recommendations\n    const perfPatterns = analysis.patterns.filter(p => p.type === 'performance');\n    if (perfPatterns.length > 0) {\n      recommendations.push('Review performance-related issues and optimize system resources');\n    }\n\n    // General recommendations\n    if (analysis.summary.criticalCount > 0) {\n      recommendations.push('Address all critical-level log entries immediately');\n    }\n    \n    if (analysis.summary.errorCount > analysis.summary.totalLogs * 0.1) {\n      recommendations.push('High error rate detected - consider system health review');\n    }\n\n    return recommendations;\n  }\n\n  // Express middleware integration\n  private setupExpressIntegration(): void {\n    // This would be used in the main server setup\n  }\n\n  getExpressMiddleware() {\n    return (req: any, res: any, next: any) => {\n      const startTime = Date.now();\n      const correlationId = crypto.randomUUID();\n      \n      req.correlationId = correlationId;\n      \n      // Log request\n      this.info('express', `${req.method} ${req.path}`, {\n        method: req.method,\n        path: req.path,\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        correlationId\n      }, ['request', 'http']);\n\n      // Intercept response\n      const originalSend = res.send;\n      res.send = function(data: any) {\n        const responseTime = Date.now() - startTime;\n        const level = res.statusCode >= 500 ? 'error' : \n                     res.statusCode >= 400 ? 'warn' : 'info';\n        \n        // Use the log aggregator instance\n        (req.app.get('logAggregator') as LogAggregator).log({\n          level,\n          source: 'express',\n          message: `${req.method} ${req.path} - ${res.statusCode}`,\n          metadata: {\n            method: req.method,\n            path: req.path,\n            statusCode: res.statusCode,\n            responseTime,\n            ip: req.ip,\n            correlationId\n          },\n          tags: ['response', 'http'],\n          correlationId\n        });\n        \n        return originalSend.call(this, data);\n      };\n\n      next();\n    };\n  }\n\n  // File operations\n  private async ensureLogDirectory(): Promise<void> {\n    if (this.logFile) {\n      const logDir = path.dirname(this.logFile);\n      try {\n        await fs.mkdir(logDir, { recursive: true });\n      } catch (error) {\n        console.error('Failed to create log directory:', error);\n      }\n    }\n  }\n\n  private async writeToFile(entry: LogEntry): Promise<void> {\n    if (!this.logFile) return;\n    \n    try {\n      const logLine = JSON.stringify({\n        timestamp: entry.timestamp.toISOString(),\n        level: entry.level,\n        source: entry.source,\n        message: entry.message,\n        metadata: entry.metadata,\n        tags: entry.tags,\n        correlationId: entry.correlationId\n      }) + '\\n';\n      \n      await fs.appendFile(this.logFile, logLine);\n    } catch (error) {\n      console.error('Failed to write to log file:', error);\n    }\n  }\n\n  // Cleanup and maintenance\n  private setupLogCleanup(): void {\n    this.logCleanupInterval = setInterval(() => {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - this.options.logRetentionDays!);\n      \n      this.logs = this.logs.filter(log => log.timestamp >= cutoffDate);\n      this.analyses = this.analyses.filter(analysis => analysis.timestamp >= cutoffDate);\n    }, 24 * 60 * 60 * 1000); // Daily cleanup\n  }\n\n  private startPeriodicAnalysis(): void {\n    this.analysisInterval = setInterval(async () => {\n      try {\n        await this.performLogAnalysis();\n      } catch (error) {\n        this.error('log-aggregator', `Periodic analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`, { error });\n      }\n    }, this.options.analysisIntervalMinutes! * 60 * 1000);\n  }\n\n  // Analytics and reporting\n  getAnalyses(limit = 10): LogAnalysis[] {\n    return this.analyses\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  getLogStatistics(): {\n    totalLogs: number;\n    logsByLevel: Record<LogEntry['level'], number>;\n    logsBySources: Record<string, number>;\n    recentActivity: { hour: string; count: number }[];\n  } {\n    const stats = {\n      totalLogs: this.logs.length,\n      logsByLevel: {\n        debug: 0,\n        info: 0,\n        warn: 0,\n        error: 0,\n        critical: 0\n      } as Record<LogEntry['level'], number>,\n      logsBySources: {} as Record<string, number>,\n      recentActivity: [] as { hour: string; count: number }[]\n    };\n\n    // Count by level\n    this.logs.forEach(log => {\n      stats.logsByLevel[log.level]++;\n      \n      if (!stats.logsBySources[log.source]) {\n        stats.logsBySources[log.source] = 0;\n      }\n      stats.logsBySources[log.source]++;\n    });\n\n    // Recent activity (last 24 hours by hour)\n    const now = new Date();\n    for (let i = 23; i >= 0; i--) {\n      const hour = new Date(now.getTime() - i * 60 * 60 * 1000);\n      const hourStart = new Date(hour.getFullYear(), hour.getMonth(), hour.getDate(), hour.getHours());\n      const hourEnd = new Date(hourStart.getTime() + 60 * 60 * 1000);\n      \n      const count = this.logs.filter(log => \n        log.timestamp >= hourStart && log.timestamp < hourEnd\n      ).length;\n      \n      stats.recentActivity.push({\n        hour: hourStart.toISOString().substring(11, 16), // HH:MM format\n        count\n      });\n    }\n\n    return stats;\n  }\n\n  // Cleanup resources\n  destroy(): void {\n    if (this.analysisInterval) {\n      clearInterval(this.analysisInterval);\n    }\n    if (this.logCleanupInterval) {\n      clearInterval(this.logCleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n\nexport const logAggregator = new LogAggregator({\n  maxLogs: 50000,\n  logRetentionDays: 30,\n  analysisIntervalMinutes: 15,\n  enableFileLogging: true,\n  logFilePath: './logs/security.log',\n  enableRealTimeAnalysis: true\n});"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f8ba083e3d4c9d52453dc4d7fec06c95952a297"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_e3expu37m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_e3expu37m();
var __importDefault =
/* istanbul ignore next */
(cov_e3expu37m().s[0]++,
/* istanbul ignore next */
(cov_e3expu37m().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_e3expu37m().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_e3expu37m().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_e3expu37m().f[0]++;
  cov_e3expu37m().s[1]++;
  return /* istanbul ignore next */(cov_e3expu37m().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_e3expu37m().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_e3expu37m().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_e3expu37m().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_e3expu37m().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_e3expu37m().s[3]++;
exports.logAggregator = exports.LogAggregator = void 0;
const events_1 =
/* istanbul ignore next */
(cov_e3expu37m().s[4]++, require("events"));
const promises_1 =
/* istanbul ignore next */
(cov_e3expu37m().s[5]++, __importDefault(require("fs/promises")));
const path_1 =
/* istanbul ignore next */
(cov_e3expu37m().s[6]++, __importDefault(require("path")));
const crypto_1 =
/* istanbul ignore next */
(cov_e3expu37m().s[7]++, __importDefault(require("crypto")));
const SecurityMonitor_1 =
/* istanbul ignore next */
(cov_e3expu37m().s[8]++, require("./SecurityMonitor"));
class LogAggregator extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(options =
  /* istanbul ignore next */
  (cov_e3expu37m().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_e3expu37m().f[1]++;
    cov_e3expu37m().s[9]++;
    super();
    /* istanbul ignore next */
    cov_e3expu37m().s[10]++;
    this.options = options;
    /* istanbul ignore next */
    cov_e3expu37m().s[11]++;
    this.logs = [];
    /* istanbul ignore next */
    cov_e3expu37m().s[12]++;
    this.analyses = [];
    const {
      maxLogs =
      /* istanbul ignore next */
      (cov_e3expu37m().b[4][0]++, 50000),
      logRetentionDays =
      /* istanbul ignore next */
      (cov_e3expu37m().b[5][0]++, 30),
      analysisIntervalMinutes =
      /* istanbul ignore next */
      (cov_e3expu37m().b[6][0]++, 15),
      enableFileLogging =
      /* istanbul ignore next */
      (cov_e3expu37m().b[7][0]++, true),
      logFilePath =
      /* istanbul ignore next */
      (cov_e3expu37m().b[8][0]++, './logs/security.log'),
      enableRealTimeAnalysis =
      /* istanbul ignore next */
      (cov_e3expu37m().b[9][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_e3expu37m().s[13]++, options);
    /* istanbul ignore next */
    cov_e3expu37m().s[14]++;
    this.options = {
      maxLogs,
      logRetentionDays,
      analysisIntervalMinutes,
      enableFileLogging,
      logFilePath,
      enableRealTimeAnalysis
    };
    /* istanbul ignore next */
    cov_e3expu37m().s[15]++;
    if (enableFileLogging) {
      /* istanbul ignore next */
      cov_e3expu37m().b[10][0]++;
      cov_e3expu37m().s[16]++;
      this.logFile = logFilePath;
      /* istanbul ignore next */
      cov_e3expu37m().s[17]++;
      this.ensureLogDirectory();
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[10][1]++;
    }
    cov_e3expu37m().s[18]++;
    this.setupLogCleanup();
    /* istanbul ignore next */
    cov_e3expu37m().s[19]++;
    if (enableRealTimeAnalysis) {
      /* istanbul ignore next */
      cov_e3expu37m().b[11][0]++;
      cov_e3expu37m().s[20]++;
      this.startPeriodicAnalysis();
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[11][1]++;
    }
    // Listen to security events
    cov_e3expu37m().s[21]++;
    SecurityMonitor_1.securityMonitor.on('securityEvent', event => {
      /* istanbul ignore next */
      cov_e3expu37m().f[2]++;
      cov_e3expu37m().s[22]++;
      this.logSecurityEvent(event);
    });
    // Set up Express middleware integration
    /* istanbul ignore next */
    cov_e3expu37m().s[23]++;
    this.setupExpressIntegration();
  }
  // Logging methods
  log(entry) {
    /* istanbul ignore next */
    cov_e3expu37m().f[3]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_e3expu37m().s[24]++, {
      id: crypto_1.default.randomUUID(),
      timestamp: new Date(),
      ...entry
    });
    /* istanbul ignore next */
    cov_e3expu37m().s[25]++;
    this.logs.push(logEntry);
    /* istanbul ignore next */
    cov_e3expu37m().s[26]++;
    this.emit('logEntry', logEntry);
    // Write to file if enabled
    /* istanbul ignore next */
    cov_e3expu37m().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_e3expu37m().b[13][0]++, this.options.enableFileLogging) &&
    /* istanbul ignore next */
    (cov_e3expu37m().b[13][1]++, this.logFile)) {
      /* istanbul ignore next */
      cov_e3expu37m().b[12][0]++;
      cov_e3expu37m().s[28]++;
      this.writeToFile(logEntry);
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[12][1]++;
    }
    // Real-time analysis for critical events
    cov_e3expu37m().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_e3expu37m().b[15][0]++, entry.level === 'critical') ||
    /* istanbul ignore next */
    (cov_e3expu37m().b[15][1]++, entry.level === 'error')) {
      /* istanbul ignore next */
      cov_e3expu37m().b[14][0]++;
      cov_e3expu37m().s[30]++;
      this.analyzeLogEntry(logEntry);
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[14][1]++;
    }
    // Maintain log limit
    cov_e3expu37m().s[31]++;
    if (this.logs.length > this.options.maxLogs) {
      /* istanbul ignore next */
      cov_e3expu37m().b[16][0]++;
      cov_e3expu37m().s[32]++;
      this.logs = this.logs.slice(-this.options.maxLogs);
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[16][1]++;
    }
  }
  debug(source, message, metadata, tags =
  /* istanbul ignore next */
  (cov_e3expu37m().b[17][0]++, [])) {
    /* istanbul ignore next */
    cov_e3expu37m().f[4]++;
    cov_e3expu37m().s[33]++;
    this.log({
      level: 'debug',
      source,
      message,
      metadata,
      tags
    });
  }
  info(source, message, metadata, tags =
  /* istanbul ignore next */
  (cov_e3expu37m().b[18][0]++, [])) {
    /* istanbul ignore next */
    cov_e3expu37m().f[5]++;
    cov_e3expu37m().s[34]++;
    this.log({
      level: 'info',
      source,
      message,
      metadata,
      tags
    });
  }
  warn(source, message, metadata, tags =
  /* istanbul ignore next */
  (cov_e3expu37m().b[19][0]++, [])) {
    /* istanbul ignore next */
    cov_e3expu37m().f[6]++;
    cov_e3expu37m().s[35]++;
    this.log({
      level: 'warn',
      source,
      message,
      metadata,
      tags
    });
  }
  error(source, message, metadata, tags =
  /* istanbul ignore next */
  (cov_e3expu37m().b[20][0]++, [])) {
    /* istanbul ignore next */
    cov_e3expu37m().f[7]++;
    cov_e3expu37m().s[36]++;
    this.log({
      level: 'error',
      source,
      message,
      metadata,
      tags
    });
  }
  critical(source, message, metadata, tags =
  /* istanbul ignore next */
  (cov_e3expu37m().b[21][0]++, [])) {
    /* istanbul ignore next */
    cov_e3expu37m().f[8]++;
    cov_e3expu37m().s[37]++;
    this.log({
      level: 'critical',
      source,
      message,
      metadata,
      tags
    });
  }
  // Security-specific logging
  logSecurityEvent(event) {
    /* istanbul ignore next */
    cov_e3expu37m().f[9]++;
    cov_e3expu37m().s[38]++;
    this.log({
      level: event.severity === 'critical' ?
      /* istanbul ignore next */
      (cov_e3expu37m().b[22][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_e3expu37m().b[22][1]++, event.severity === 'high' ?
      /* istanbul ignore next */
      (cov_e3expu37m().b[23][0]++, 'error') :
      /* istanbul ignore next */
      (cov_e3expu37m().b[23][1]++, event.severity === 'medium' ?
      /* istanbul ignore next */
      (cov_e3expu37m().b[24][0]++, 'warn') :
      /* istanbul ignore next */
      (cov_e3expu37m().b[24][1]++, 'info'))),
      source: 'security-monitor',
      message: `Security Event: ${event.message}`,
      metadata: {
        eventId: event.id,
        eventType: event.type,
        eventSource: event.source,
        eventDetails: event.details,
        resolved: event.resolved
      },
      tags: ['security', event.type, event.severity],
      correlationId: event.id
    });
  }
  // Log retrieval and filtering
  getLogs(filter) {
    /* istanbul ignore next */
    cov_e3expu37m().f[10]++;
    let filteredLogs =
    /* istanbul ignore next */
    (cov_e3expu37m().s[39]++, [...this.logs]);
    /* istanbul ignore next */
    cov_e3expu37m().s[40]++;
    if (filter) {
      /* istanbul ignore next */
      cov_e3expu37m().b[25][0]++;
      cov_e3expu37m().s[41]++;
      if (filter.level) {
        /* istanbul ignore next */
        cov_e3expu37m().b[26][0]++;
        cov_e3expu37m().s[42]++;
        filteredLogs = filteredLogs.filter(log => {
          /* istanbul ignore next */
          cov_e3expu37m().f[11]++;
          cov_e3expu37m().s[43]++;
          return filter.level.includes(log.level);
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[26][1]++;
      }
      cov_e3expu37m().s[44]++;
      if (filter.source) {
        /* istanbul ignore next */
        cov_e3expu37m().b[27][0]++;
        cov_e3expu37m().s[45]++;
        filteredLogs = filteredLogs.filter(log => {
          /* istanbul ignore next */
          cov_e3expu37m().f[12]++;
          cov_e3expu37m().s[46]++;
          return filter.source.some(source => {
            /* istanbul ignore next */
            cov_e3expu37m().f[13]++;
            cov_e3expu37m().s[47]++;
            return log.source.includes(source);
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[27][1]++;
      }
      cov_e3expu37m().s[48]++;
      if (filter.tags) {
        /* istanbul ignore next */
        cov_e3expu37m().b[28][0]++;
        cov_e3expu37m().s[49]++;
        filteredLogs = filteredLogs.filter(log => {
          /* istanbul ignore next */
          cov_e3expu37m().f[14]++;
          cov_e3expu37m().s[50]++;
          return filter.tags.some(tag => {
            /* istanbul ignore next */
            cov_e3expu37m().f[15]++;
            cov_e3expu37m().s[51]++;
            return log.tags.includes(tag);
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[28][1]++;
      }
      cov_e3expu37m().s[52]++;
      if (filter.timeRange) {
        /* istanbul ignore next */
        cov_e3expu37m().b[29][0]++;
        cov_e3expu37m().s[53]++;
        filteredLogs = filteredLogs.filter(log => {
          /* istanbul ignore next */
          cov_e3expu37m().f[16]++;
          cov_e3expu37m().s[54]++;
          return /* istanbul ignore next */(cov_e3expu37m().b[30][0]++, log.timestamp >= filter.timeRange.start) &&
          /* istanbul ignore next */
          (cov_e3expu37m().b[30][1]++, log.timestamp <= filter.timeRange.end);
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[29][1]++;
      }
      cov_e3expu37m().s[55]++;
      if (filter.searchTerm) {
        /* istanbul ignore next */
        cov_e3expu37m().b[31][0]++;
        const term =
        /* istanbul ignore next */
        (cov_e3expu37m().s[56]++, filter.searchTerm.toLowerCase());
        /* istanbul ignore next */
        cov_e3expu37m().s[57]++;
        filteredLogs = filteredLogs.filter(log => {
          /* istanbul ignore next */
          cov_e3expu37m().f[17]++;
          cov_e3expu37m().s[58]++;
          return /* istanbul ignore next */(cov_e3expu37m().b[32][0]++, log.message.toLowerCase().includes(term)) ||
          /* istanbul ignore next */
          (cov_e3expu37m().b[32][1]++, log.source.toLowerCase().includes(term)) ||
          /* istanbul ignore next */
          (cov_e3expu37m().b[32][2]++, log.tags.some(tag => {
            /* istanbul ignore next */
            cov_e3expu37m().f[18]++;
            cov_e3expu37m().s[59]++;
            return tag.toLowerCase().includes(term);
          }));
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[31][1]++;
      }
      cov_e3expu37m().s[60]++;
      if (filter.limit) {
        /* istanbul ignore next */
        cov_e3expu37m().b[33][0]++;
        cov_e3expu37m().s[61]++;
        filteredLogs = filteredLogs.slice(-filter.limit);
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[33][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[25][1]++;
    }
    cov_e3expu37m().s[62]++;
    return filteredLogs.sort((a, b) => {
      /* istanbul ignore next */
      cov_e3expu37m().f[19]++;
      cov_e3expu37m().s[63]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
  }
  // Log analysis
  async analyzeLogEntry(entry) {
    /* istanbul ignore next */
    cov_e3expu37m().f[20]++;
    // Real-time analysis for immediate threats
    const securityPatterns =
    /* istanbul ignore next */
    (cov_e3expu37m().s[64]++, [{
      pattern: /failed.*login|authentication.*failed|invalid.*credentials/i,
      type: 'security',
      severity: 'high',
      description: 'Authentication failure detected'
    }, {
      pattern: /sql.*injection|xss|cross.*site|csrf/i,
      type: 'security',
      severity: 'critical',
      description: 'Potential security attack detected'
    }, {
      pattern: /rate.*limit|too.*many.*requests|ddos/i,
      type: 'security',
      severity: 'medium',
      description: 'Potential abuse or DoS attack'
    }, {
      pattern: /memory.*leak|out.*of.*memory|heap.*overflow/i,
      type: 'performance',
      severity: 'high',
      description: 'Memory-related issue detected'
    }, {
      pattern: /unauthorized|forbidden|access.*denied/i,
      type: 'security',
      severity: 'medium',
      description: 'Unauthorized access attempt'
    }]);
    /* istanbul ignore next */
    cov_e3expu37m().s[65]++;
    for (const patternDef of securityPatterns) {
      /* istanbul ignore next */
      cov_e3expu37m().s[66]++;
      if (patternDef.pattern.test(entry.message)) {
        /* istanbul ignore next */
        cov_e3expu37m().b[34][0]++;
        cov_e3expu37m().s[67]++;
        if (patternDef.type === 'security') {
          /* istanbul ignore next */
          cov_e3expu37m().b[35][0]++;
          cov_e3expu37m().s[68]++;
          SecurityMonitor_1.securityMonitor.logSecurityEvent({
            severity: patternDef.severity,
            type: 'intrusion',
            source: `log-analyzer:${entry.source}`,
            message: `${patternDef.description}: ${entry.message}`,
            details: {
              logEntry: entry,
              pattern: patternDef.pattern.source
            },
            resolved: false
          });
        } else
        /* istanbul ignore next */
        {
          cov_e3expu37m().b[35][1]++;
        }
        cov_e3expu37m().s[69]++;
        this.emit('patternDetected', {
          pattern: patternDef,
          logEntry: entry,
          timestamp: new Date()
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[34][1]++;
      }
    }
  }
  async performLogAnalysis(timeRange) {
    /* istanbul ignore next */
    cov_e3expu37m().f[21]++;
    const now =
    /* istanbul ignore next */
    (cov_e3expu37m().s[70]++, new Date());
    const range =
    /* istanbul ignore next */
    (cov_e3expu37m().s[71]++,
    /* istanbul ignore next */
    (cov_e3expu37m().b[36][0]++, timeRange) ||
    /* istanbul ignore next */
    (cov_e3expu37m().b[36][1]++, {
      start: new Date(now.getTime() - 24 * 60 * 60 * 1000),
      // Last 24 hours
      end: now
    }));
    const relevantLogs =
    /* istanbul ignore next */
    (cov_e3expu37m().s[72]++, this.getLogs({
      timeRange: range
    }));
    const analysis =
    /* istanbul ignore next */
    (cov_e3expu37m().s[73]++, {
      id: crypto_1.default.randomUUID(),
      timestamp: now,
      timeRange: range,
      summary: {
        totalLogs: relevantLogs.length,
        errorCount: relevantLogs.filter(l => {
          /* istanbul ignore next */
          cov_e3expu37m().f[22]++;
          cov_e3expu37m().s[74]++;
          return l.level === 'error';
        }).length,
        warningCount: relevantLogs.filter(l => {
          /* istanbul ignore next */
          cov_e3expu37m().f[23]++;
          cov_e3expu37m().s[75]++;
          return l.level === 'warn';
        }).length,
        criticalCount: relevantLogs.filter(l => {
          /* istanbul ignore next */
          cov_e3expu37m().f[24]++;
          cov_e3expu37m().s[76]++;
          return l.level === 'critical';
        }).length,
        uniqueSources: new Set(relevantLogs.map(l => {
          /* istanbul ignore next */
          cov_e3expu37m().f[25]++;
          cov_e3expu37m().s[77]++;
          return l.source;
        })).size
      },
      patterns: [],
      recommendations: [],
      securityEvents: SecurityMonitor_1.securityMonitor.getSecurityEvents({
        since: range.start
      })
    });
    // Pattern detection
    const patterns =
    /* istanbul ignore next */
    (cov_e3expu37m().s[78]++, this.detectPatterns(relevantLogs));
    /* istanbul ignore next */
    cov_e3expu37m().s[79]++;
    analysis.patterns = patterns;
    // Generate recommendations
    /* istanbul ignore next */
    cov_e3expu37m().s[80]++;
    analysis.recommendations = this.generateRecommendations(analysis);
    /* istanbul ignore next */
    cov_e3expu37m().s[81]++;
    this.analyses.push(analysis);
    /* istanbul ignore next */
    cov_e3expu37m().s[82]++;
    this.emit('analysisComplete', analysis);
    /* istanbul ignore next */
    cov_e3expu37m().s[83]++;
    return analysis;
  }
  detectPatterns(logs) {
    /* istanbul ignore next */
    cov_e3expu37m().f[26]++;
    const patterns =
    /* istanbul ignore next */
    (cov_e3expu37m().s[84]++, []);
    const patternMap =
    /* istanbul ignore next */
    (cov_e3expu37m().s[85]++, new Map());
    // Define pattern detection rules
    const rules =
    /* istanbul ignore next */
    (cov_e3expu37m().s[86]++, [{
      name: 'repeated_errors',
      regex: /(error|exception|fail)/i,
      type: 'error',
      minOccurrences: 5
    }, {
      name: 'security_violations',
      regex: /(unauthorized|forbidden|access.*denied|authentication.*failed)/i,
      type: 'security',
      minOccurrences: 3
    }, {
      name: 'performance_issues',
      regex: /(slow|timeout|high.*latency|memory.*usage)/i,
      type: 'performance',
      minOccurrences: 3
    }, {
      name: 'anomalous_activity',
      regex: /(unusual|suspicious|anomaly|unexpected)/i,
      type: 'anomaly',
      minOccurrences: 2
    }]);
    // Analyze logs for patterns
    /* istanbul ignore next */
    cov_e3expu37m().s[87]++;
    rules.forEach(rule => {
      /* istanbul ignore next */
      cov_e3expu37m().f[27]++;
      const matchingLogs =
      /* istanbul ignore next */
      (cov_e3expu37m().s[88]++, logs.filter(log => {
        /* istanbul ignore next */
        cov_e3expu37m().f[28]++;
        cov_e3expu37m().s[89]++;
        return rule.regex.test(log.message);
      }));
      /* istanbul ignore next */
      cov_e3expu37m().s[90]++;
      if (matchingLogs.length >= rule.minOccurrences) {
        /* istanbul ignore next */
        cov_e3expu37m().b[37][0]++;
        const severity =
        /* istanbul ignore next */
        (cov_e3expu37m().s[91]++, this.calculatePatternSeverity(matchingLogs.length, rule.type));
        /* istanbul ignore next */
        cov_e3expu37m().s[92]++;
        patterns.push({
          type: rule.type,
          pattern: rule.name,
          occurrences: matchingLogs.length,
          severity,
          firstSeen: matchingLogs[matchingLogs.length - 1].timestamp,
          lastSeen: matchingLogs[0].timestamp,
          samples: matchingLogs.slice(0, 5) // First 5 samples
        });
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[37][1]++;
      }
    });
    /* istanbul ignore next */
    cov_e3expu37m().s[93]++;
    return patterns;
  }
  calculatePatternSeverity(occurrences, type) {
    /* istanbul ignore next */
    cov_e3expu37m().f[29]++;
    cov_e3expu37m().s[94]++;
    if (type === 'security') {
      /* istanbul ignore next */
      cov_e3expu37m().b[38][0]++;
      cov_e3expu37m().s[95]++;
      if (occurrences >= 20) {
        /* istanbul ignore next */
        cov_e3expu37m().b[39][0]++;
        cov_e3expu37m().s[96]++;
        return 'critical';
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[39][1]++;
      }
      cov_e3expu37m().s[97]++;
      if (occurrences >= 10) {
        /* istanbul ignore next */
        cov_e3expu37m().b[40][0]++;
        cov_e3expu37m().s[98]++;
        return 'high';
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[40][1]++;
      }
      cov_e3expu37m().s[99]++;
      if (occurrences >= 5) {
        /* istanbul ignore next */
        cov_e3expu37m().b[41][0]++;
        cov_e3expu37m().s[100]++;
        return 'medium';
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[41][1]++;
      }
      cov_e3expu37m().s[101]++;
      return 'low';
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[38][1]++;
    }
    cov_e3expu37m().s[102]++;
    if (type === 'error') {
      /* istanbul ignore next */
      cov_e3expu37m().b[42][0]++;
      cov_e3expu37m().s[103]++;
      if (occurrences >= 50) {
        /* istanbul ignore next */
        cov_e3expu37m().b[43][0]++;
        cov_e3expu37m().s[104]++;
        return 'critical';
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[43][1]++;
      }
      cov_e3expu37m().s[105]++;
      if (occurrences >= 25) {
        /* istanbul ignore next */
        cov_e3expu37m().b[44][0]++;
        cov_e3expu37m().s[106]++;
        return 'high';
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[44][1]++;
      }
      cov_e3expu37m().s[107]++;
      if (occurrences >= 10) {
        /* istanbul ignore next */
        cov_e3expu37m().b[45][0]++;
        cov_e3expu37m().s[108]++;
        return 'medium';
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[45][1]++;
      }
      cov_e3expu37m().s[109]++;
      return 'low';
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[42][1]++;
    }
    // Default severity calculation
    cov_e3expu37m().s[110]++;
    if (occurrences >= 30) {
      /* istanbul ignore next */
      cov_e3expu37m().b[46][0]++;
      cov_e3expu37m().s[111]++;
      return 'high';
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[46][1]++;
    }
    cov_e3expu37m().s[112]++;
    if (occurrences >= 15) {
      /* istanbul ignore next */
      cov_e3expu37m().b[47][0]++;
      cov_e3expu37m().s[113]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[47][1]++;
    }
    cov_e3expu37m().s[114]++;
    return 'low';
  }
  generateRecommendations(analysis) {
    /* istanbul ignore next */
    cov_e3expu37m().f[30]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_e3expu37m().s[115]++, []);
    // Security recommendations
    const securityPatterns =
    /* istanbul ignore next */
    (cov_e3expu37m().s[116]++, analysis.patterns.filter(p => {
      /* istanbul ignore next */
      cov_e3expu37m().f[31]++;
      cov_e3expu37m().s[117]++;
      return p.type === 'security';
    }));
    /* istanbul ignore next */
    cov_e3expu37m().s[118]++;
    if (securityPatterns.length > 0) {
      /* istanbul ignore next */
      cov_e3expu37m().b[48][0]++;
      cov_e3expu37m().s[119]++;
      recommendations.push('Review and investigate security-related log patterns');
      /* istanbul ignore next */
      cov_e3expu37m().s[120]++;
      recommendations.push('Consider implementing additional security measures');
      const criticalSecurity =
      /* istanbul ignore next */
      (cov_e3expu37m().s[121]++, securityPatterns.filter(p => {
        /* istanbul ignore next */
        cov_e3expu37m().f[32]++;
        cov_e3expu37m().s[122]++;
        return p.severity === 'critical';
      }));
      /* istanbul ignore next */
      cov_e3expu37m().s[123]++;
      if (criticalSecurity.length > 0) {
        /* istanbul ignore next */
        cov_e3expu37m().b[49][0]++;
        cov_e3expu37m().s[124]++;
        recommendations.push('URGENT: Critical security patterns detected - immediate investigation required');
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[49][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[48][1]++;
    }
    // Error recommendations
    const errorPatterns =
    /* istanbul ignore next */
    (cov_e3expu37m().s[125]++, analysis.patterns.filter(p => {
      /* istanbul ignore next */
      cov_e3expu37m().f[33]++;
      cov_e3expu37m().s[126]++;
      return p.type === 'error';
    }));
    /* istanbul ignore next */
    cov_e3expu37m().s[127]++;
    if (errorPatterns.length > 0) {
      /* istanbul ignore next */
      cov_e3expu37m().b[50][0]++;
      cov_e3expu37m().s[128]++;
      recommendations.push('Investigate recurring error patterns to improve system stability');
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[50][1]++;
    }
    // Performance recommendations
    const perfPatterns =
    /* istanbul ignore next */
    (cov_e3expu37m().s[129]++, analysis.patterns.filter(p => {
      /* istanbul ignore next */
      cov_e3expu37m().f[34]++;
      cov_e3expu37m().s[130]++;
      return p.type === 'performance';
    }));
    /* istanbul ignore next */
    cov_e3expu37m().s[131]++;
    if (perfPatterns.length > 0) {
      /* istanbul ignore next */
      cov_e3expu37m().b[51][0]++;
      cov_e3expu37m().s[132]++;
      recommendations.push('Review performance-related issues and optimize system resources');
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[51][1]++;
    }
    // General recommendations
    cov_e3expu37m().s[133]++;
    if (analysis.summary.criticalCount > 0) {
      /* istanbul ignore next */
      cov_e3expu37m().b[52][0]++;
      cov_e3expu37m().s[134]++;
      recommendations.push('Address all critical-level log entries immediately');
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[52][1]++;
    }
    cov_e3expu37m().s[135]++;
    if (analysis.summary.errorCount > analysis.summary.totalLogs * 0.1) {
      /* istanbul ignore next */
      cov_e3expu37m().b[53][0]++;
      cov_e3expu37m().s[136]++;
      recommendations.push('High error rate detected - consider system health review');
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[53][1]++;
    }
    cov_e3expu37m().s[137]++;
    return recommendations;
  }
  // Express middleware integration
  setupExpressIntegration() {
    /* istanbul ignore next */
    cov_e3expu37m().f[35]++;
  } // This would be used in the main server setup
  getExpressMiddleware() {
    /* istanbul ignore next */
    cov_e3expu37m().f[36]++;
    cov_e3expu37m().s[138]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_e3expu37m().f[37]++;
      const startTime =
      /* istanbul ignore next */
      (cov_e3expu37m().s[139]++, Date.now());
      const correlationId =
      /* istanbul ignore next */
      (cov_e3expu37m().s[140]++, crypto_1.default.randomUUID());
      /* istanbul ignore next */
      cov_e3expu37m().s[141]++;
      req.correlationId = correlationId;
      // Log request
      /* istanbul ignore next */
      cov_e3expu37m().s[142]++;
      this.info('express', `${req.method} ${req.path}`, {
        method: req.method,
        path: req.path,
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        correlationId
      }, ['request', 'http']);
      // Intercept response
      const originalSend =
      /* istanbul ignore next */
      (cov_e3expu37m().s[143]++, res.send);
      /* istanbul ignore next */
      cov_e3expu37m().s[144]++;
      res.send = function (data) {
        /* istanbul ignore next */
        cov_e3expu37m().f[38]++;
        const responseTime =
        /* istanbul ignore next */
        (cov_e3expu37m().s[145]++, Date.now() - startTime);
        const level =
        /* istanbul ignore next */
        (cov_e3expu37m().s[146]++, res.statusCode >= 500 ?
        /* istanbul ignore next */
        (cov_e3expu37m().b[54][0]++, 'error') :
        /* istanbul ignore next */
        (cov_e3expu37m().b[54][1]++, res.statusCode >= 400 ?
        /* istanbul ignore next */
        (cov_e3expu37m().b[55][0]++, 'warn') :
        /* istanbul ignore next */
        (cov_e3expu37m().b[55][1]++, 'info')));
        // Use the log aggregator instance
        /* istanbul ignore next */
        cov_e3expu37m().s[147]++;
        req.app.get('logAggregator').log({
          level,
          source: 'express',
          message: `${req.method} ${req.path} - ${res.statusCode}`,
          metadata: {
            method: req.method,
            path: req.path,
            statusCode: res.statusCode,
            responseTime,
            ip: req.ip,
            correlationId
          },
          tags: ['response', 'http'],
          correlationId
        });
        /* istanbul ignore next */
        cov_e3expu37m().s[148]++;
        return originalSend.call(this, data);
      };
      /* istanbul ignore next */
      cov_e3expu37m().s[149]++;
      next();
    };
  }
  // File operations
  async ensureLogDirectory() {
    /* istanbul ignore next */
    cov_e3expu37m().f[39]++;
    cov_e3expu37m().s[150]++;
    if (this.logFile) {
      /* istanbul ignore next */
      cov_e3expu37m().b[56][0]++;
      const logDir =
      /* istanbul ignore next */
      (cov_e3expu37m().s[151]++, path_1.default.dirname(this.logFile));
      /* istanbul ignore next */
      cov_e3expu37m().s[152]++;
      try {
        /* istanbul ignore next */
        cov_e3expu37m().s[153]++;
        await promises_1.default.mkdir(logDir, {
          recursive: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_e3expu37m().s[154]++;
        console.error('Failed to create log directory:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[56][1]++;
    }
  }
  async writeToFile(entry) {
    /* istanbul ignore next */
    cov_e3expu37m().f[40]++;
    cov_e3expu37m().s[155]++;
    if (!this.logFile) {
      /* istanbul ignore next */
      cov_e3expu37m().b[57][0]++;
      cov_e3expu37m().s[156]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[57][1]++;
    }
    cov_e3expu37m().s[157]++;
    try {
      const logLine =
      /* istanbul ignore next */
      (cov_e3expu37m().s[158]++, JSON.stringify({
        timestamp: entry.timestamp.toISOString(),
        level: entry.level,
        source: entry.source,
        message: entry.message,
        metadata: entry.metadata,
        tags: entry.tags,
        correlationId: entry.correlationId
      }) + '\n');
      /* istanbul ignore next */
      cov_e3expu37m().s[159]++;
      await promises_1.default.appendFile(this.logFile, logLine);
    } catch (error) {
      /* istanbul ignore next */
      cov_e3expu37m().s[160]++;
      console.error('Failed to write to log file:', error);
    }
  }
  // Cleanup and maintenance
  setupLogCleanup() {
    /* istanbul ignore next */
    cov_e3expu37m().f[41]++;
    cov_e3expu37m().s[161]++;
    this.logCleanupInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_e3expu37m().f[42]++;
      const cutoffDate =
      /* istanbul ignore next */
      (cov_e3expu37m().s[162]++, new Date());
      /* istanbul ignore next */
      cov_e3expu37m().s[163]++;
      cutoffDate.setDate(cutoffDate.getDate() - this.options.logRetentionDays);
      /* istanbul ignore next */
      cov_e3expu37m().s[164]++;
      this.logs = this.logs.filter(log => {
        /* istanbul ignore next */
        cov_e3expu37m().f[43]++;
        cov_e3expu37m().s[165]++;
        return log.timestamp >= cutoffDate;
      });
      /* istanbul ignore next */
      cov_e3expu37m().s[166]++;
      this.analyses = this.analyses.filter(analysis => {
        /* istanbul ignore next */
        cov_e3expu37m().f[44]++;
        cov_e3expu37m().s[167]++;
        return analysis.timestamp >= cutoffDate;
      });
    }, 24 * 60 * 60 * 1000); // Daily cleanup
  }
  startPeriodicAnalysis() {
    /* istanbul ignore next */
    cov_e3expu37m().f[45]++;
    cov_e3expu37m().s[168]++;
    this.analysisInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_e3expu37m().f[46]++;
      cov_e3expu37m().s[169]++;
      try {
        /* istanbul ignore next */
        cov_e3expu37m().s[170]++;
        await this.performLogAnalysis();
      } catch (error) {
        /* istanbul ignore next */
        cov_e3expu37m().s[171]++;
        this.error('log-aggregator', `Periodic analysis failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_e3expu37m().b[58][0]++, error.message) :
        /* istanbul ignore next */
        (cov_e3expu37m().b[58][1]++, 'Unknown error')}`, {
          error
        });
      }
    }, this.options.analysisIntervalMinutes * 60 * 1000);
  }
  // Analytics and reporting
  getAnalyses(limit =
  /* istanbul ignore next */
  (cov_e3expu37m().b[59][0]++, 10)) {
    /* istanbul ignore next */
    cov_e3expu37m().f[47]++;
    cov_e3expu37m().s[172]++;
    return this.analyses.sort((a, b) => {
      /* istanbul ignore next */
      cov_e3expu37m().f[48]++;
      cov_e3expu37m().s[173]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    }).slice(0, limit);
  }
  getLogStatistics() {
    /* istanbul ignore next */
    cov_e3expu37m().f[49]++;
    const stats =
    /* istanbul ignore next */
    (cov_e3expu37m().s[174]++, {
      totalLogs: this.logs.length,
      logsByLevel: {
        debug: 0,
        info: 0,
        warn: 0,
        error: 0,
        critical: 0
      },
      logsBySources: {},
      recentActivity: []
    });
    // Count by level
    /* istanbul ignore next */
    cov_e3expu37m().s[175]++;
    this.logs.forEach(log => {
      /* istanbul ignore next */
      cov_e3expu37m().f[50]++;
      cov_e3expu37m().s[176]++;
      stats.logsByLevel[log.level]++;
      /* istanbul ignore next */
      cov_e3expu37m().s[177]++;
      if (!stats.logsBySources[log.source]) {
        /* istanbul ignore next */
        cov_e3expu37m().b[60][0]++;
        cov_e3expu37m().s[178]++;
        stats.logsBySources[log.source] = 0;
      } else
      /* istanbul ignore next */
      {
        cov_e3expu37m().b[60][1]++;
      }
      cov_e3expu37m().s[179]++;
      stats.logsBySources[log.source]++;
    });
    // Recent activity (last 24 hours by hour)
    const now =
    /* istanbul ignore next */
    (cov_e3expu37m().s[180]++, new Date());
    /* istanbul ignore next */
    cov_e3expu37m().s[181]++;
    for (let i =
    /* istanbul ignore next */
    (cov_e3expu37m().s[182]++, 23); i >= 0; i--) {
      const hour =
      /* istanbul ignore next */
      (cov_e3expu37m().s[183]++, new Date(now.getTime() - i * 60 * 60 * 1000));
      const hourStart =
      /* istanbul ignore next */
      (cov_e3expu37m().s[184]++, new Date(hour.getFullYear(), hour.getMonth(), hour.getDate(), hour.getHours()));
      const hourEnd =
      /* istanbul ignore next */
      (cov_e3expu37m().s[185]++, new Date(hourStart.getTime() + 60 * 60 * 1000));
      const count =
      /* istanbul ignore next */
      (cov_e3expu37m().s[186]++, this.logs.filter(log => {
        /* istanbul ignore next */
        cov_e3expu37m().f[51]++;
        cov_e3expu37m().s[187]++;
        return /* istanbul ignore next */(cov_e3expu37m().b[61][0]++, log.timestamp >= hourStart) &&
        /* istanbul ignore next */
        (cov_e3expu37m().b[61][1]++, log.timestamp < hourEnd);
      }).length);
      /* istanbul ignore next */
      cov_e3expu37m().s[188]++;
      stats.recentActivity.push({
        hour: hourStart.toISOString().substring(11, 16),
        // HH:MM format
        count
      });
    }
    /* istanbul ignore next */
    cov_e3expu37m().s[189]++;
    return stats;
  }
  // Cleanup resources
  destroy() {
    /* istanbul ignore next */
    cov_e3expu37m().f[52]++;
    cov_e3expu37m().s[190]++;
    if (this.analysisInterval) {
      /* istanbul ignore next */
      cov_e3expu37m().b[62][0]++;
      cov_e3expu37m().s[191]++;
      clearInterval(this.analysisInterval);
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[62][1]++;
    }
    cov_e3expu37m().s[192]++;
    if (this.logCleanupInterval) {
      /* istanbul ignore next */
      cov_e3expu37m().b[63][0]++;
      cov_e3expu37m().s[193]++;
      clearInterval(this.logCleanupInterval);
    } else
    /* istanbul ignore next */
    {
      cov_e3expu37m().b[63][1]++;
    }
    cov_e3expu37m().s[194]++;
    this.removeAllListeners();
  }
}
/* istanbul ignore next */
cov_e3expu37m().s[195]++;
exports.LogAggregator = LogAggregator;
/* istanbul ignore next */
cov_e3expu37m().s[196]++;
exports.logAggregator = new LogAggregator({
  maxLogs: 50000,
  logRetentionDays: 30,
  analysisIntervalMinutes: 15,
  enableFileLogging: true,
  logFilePath: './logs/security.log',
  enableRealTimeAnalysis: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,