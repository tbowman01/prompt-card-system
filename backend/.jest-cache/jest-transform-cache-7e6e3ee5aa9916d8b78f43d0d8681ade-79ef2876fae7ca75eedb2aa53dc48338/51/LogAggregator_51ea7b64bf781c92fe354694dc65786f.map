{"version":3,"names":["cov_e3expu37m","actualCoverage","events_1","s","require","promises_1","__importDefault","path_1","crypto_1","SecurityMonitor_1","LogAggregator","EventEmitter","constructor","options","b","f","logs","analyses","maxLogs","logRetentionDays","analysisIntervalMinutes","enableFileLogging","logFilePath","enableRealTimeAnalysis","logFile","ensureLogDirectory","setupLogCleanup","startPeriodicAnalysis","securityMonitor","on","event","logSecurityEvent","setupExpressIntegration","log","entry","logEntry","id","default","randomUUID","timestamp","Date","push","emit","writeToFile","level","analyzeLogEntry","length","slice","debug","source","message","metadata","tags","info","warn","error","critical","severity","eventId","eventType","type","eventSource","eventDetails","details","resolved","correlationId","getLogs","filter","filteredLogs","includes","some","tag","timeRange","start","end","searchTerm","term","toLowerCase","limit","sort","a","getTime","securityPatterns","pattern","description","patternDef","test","performLogAnalysis","now","range","relevantLogs","analysis","summary","totalLogs","errorCount","l","warningCount","criticalCount","uniqueSources","Set","map","size","patterns","recommendations","securityEvents","getSecurityEvents","since","detectPatterns","generateRecommendations","patternMap","Map","rules","name","regex","minOccurrences","forEach","rule","matchingLogs","calculatePatternSeverity","occurrences","firstSeen","lastSeen","samples","p","criticalSecurity","errorPatterns","perfPatterns","getExpressMiddleware","req","res","next","startTime","method","path","ip","userAgent","get","originalSend","send","data","responseTime","statusCode","app","call","logDir","dirname","mkdir","recursive","console","logLine","JSON","stringify","toISOString","appendFile","logCleanupInterval","setInterval","cutoffDate","setDate","getDate","analysisInterval","Error","getAnalyses","getLogStatistics","stats","logsByLevel","logsBySources","recentActivity","i","hour","hourStart","getFullYear","getMonth","getHours","hourEnd","count","substring","destroy","clearInterval","removeAllListeners","exports","logAggregator"],"sources":["/workspaces/prompt-card-system/backend/src/services/security/LogAggregator.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { securityMonitor, SecurityEvent } from './SecurityMonitor';\n\nexport interface LogEntry {\n  id: string;\n  timestamp: Date;\n  level: 'debug' | 'info' | 'warn' | 'error' | 'critical';\n  source: string;\n  message: string;\n  metadata?: any;\n  tags: string[];\n  correlationId?: string;\n}\n\nexport interface LogAnalysis {\n  id: string;\n  timestamp: Date;\n  timeRange: { start: Date; end: Date };\n  summary: {\n    totalLogs: number;\n    errorCount: number;\n    warningCount: number;\n    criticalCount: number;\n    uniqueSources: number;\n  };\n  patterns: {\n    type: 'security' | 'performance' | 'error' | 'anomaly';\n    pattern: string;\n    occurrences: number;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    firstSeen: Date;\n    lastSeen: Date;\n    samples: LogEntry[];\n  }[];\n  recommendations: string[];\n  securityEvents: SecurityEvent[];\n}\n\nexport interface LogFilter {\n  level?: LogEntry['level'][];\n  source?: string[];\n  tags?: string[];\n  timeRange?: { start: Date; end: Date };\n  searchTerm?: string;\n  limit?: number;\n}\n\nexport class LogAggregator extends EventEmitter {\n  private logs: LogEntry[] = [];\n  private analyses: LogAnalysis[] = [];\n  private analysisInterval?: NodeJS.Timeout;\n  private logCleanupInterval?: NodeJS.Timeout;\n  private logFile?: string;\n\n  constructor(private options: {\n    maxLogs?: number;\n    logRetentionDays?: number;\n    analysisIntervalMinutes?: number;\n    enableFileLogging?: boolean;\n    logFilePath?: string;\n    enableRealTimeAnalysis?: boolean;\n  } = {}) {\n    super();\n    \n    const {\n      maxLogs = 50000,\n      logRetentionDays = 30,\n      analysisIntervalMinutes = 15,\n      enableFileLogging = true,\n      logFilePath = './logs/security.log',\n      enableRealTimeAnalysis = true\n    } = options;\n\n    this.options = {\n      maxLogs,\n      logRetentionDays,\n      analysisIntervalMinutes,\n      enableFileLogging,\n      logFilePath,\n      enableRealTimeAnalysis\n    };\n\n    if (enableFileLogging) {\n      this.logFile = logFilePath;\n      this.ensureLogDirectory();\n    }\n\n    this.setupLogCleanup();\n    \n    if (enableRealTimeAnalysis) {\n      this.startPeriodicAnalysis();\n    }\n\n    // Listen to security events\n    securityMonitor.on('securityEvent', (event: SecurityEvent) => {\n      this.logSecurityEvent(event);\n    });\n\n    // Set up Express middleware integration\n    this.setupExpressIntegration();\n  }\n\n  // Logging methods\n  log(entry: Omit<LogEntry, 'id' | 'timestamp'>): void {\n    const logEntry: LogEntry = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      ...entry\n    };\n\n    this.logs.push(logEntry);\n    this.emit('logEntry', logEntry);\n\n    // Write to file if enabled\n    if (this.options.enableFileLogging && this.logFile) {\n      this.writeToFile(logEntry);\n    }\n\n    // Real-time analysis for critical events\n    if (entry.level === 'critical' || entry.level === 'error') {\n      this.analyzeLogEntry(logEntry);\n    }\n\n    // Maintain log limit\n    if (this.logs.length > this.options.maxLogs!) {\n      this.logs = this.logs.slice(-this.options.maxLogs!);\n    }\n  }\n\n  debug(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'debug', source, message, metadata, tags });\n  }\n\n  info(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'info', source, message, metadata, tags });\n  }\n\n  warn(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'warn', source, message, metadata, tags });\n  }\n\n  error(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'error', source, message, metadata, tags });\n  }\n\n  critical(source: string, message: string, metadata?: any, tags: string[] = []): void {\n    this.log({ level: 'critical', source, message, metadata, tags });\n  }\n\n  // Security-specific logging\n  private logSecurityEvent(event: SecurityEvent): void {\n    this.log({\n      level: event.severity === 'critical' ? 'critical' : \n             event.severity === 'high' ? 'error' :\n             event.severity === 'medium' ? 'warn' : 'info',\n      source: 'security-monitor',\n      message: `Security Event: ${event.message}`,\n      metadata: {\n        eventId: event.id,\n        eventType: event.type,\n        eventSource: event.source,\n        eventDetails: event.details,\n        resolved: event.resolved\n      },\n      tags: ['security', event.type, event.severity],\n      correlationId: event.id\n    });\n  }\n\n  // Log retrieval and filtering\n  getLogs(filter?: LogFilter): LogEntry[] {\n    let filteredLogs = [...this.logs];\n\n    if (filter) {\n      if (filter.level) {\n        filteredLogs = filteredLogs.filter(log => filter.level!.includes(log.level));\n      }\n      if (filter.source) {\n        filteredLogs = filteredLogs.filter(log => \n          filter.source!.some(source => log.source.includes(source))\n        );\n      }\n      if (filter.tags) {\n        filteredLogs = filteredLogs.filter(log => \n          filter.tags!.some(tag => log.tags.includes(tag))\n        );\n      }\n      if (filter.timeRange) {\n        filteredLogs = filteredLogs.filter(log => \n          log.timestamp >= filter.timeRange!.start && \n          log.timestamp <= filter.timeRange!.end\n        );\n      }\n      if (filter.searchTerm) {\n        const term = filter.searchTerm.toLowerCase();\n        filteredLogs = filteredLogs.filter(log => \n          log.message.toLowerCase().includes(term) ||\n          log.source.toLowerCase().includes(term) ||\n          log.tags.some(tag => tag.toLowerCase().includes(term))\n        );\n      }\n      if (filter.limit) {\n        filteredLogs = filteredLogs.slice(-filter.limit);\n      }\n    }\n\n    return filteredLogs.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // Log analysis\n  async analyzeLogEntry(entry: LogEntry): Promise<void> {\n    // Real-time analysis for immediate threats\n    const securityPatterns = [\n      {\n        pattern: /failed.*login|authentication.*failed|invalid.*credentials/i,\n        type: 'security' as const,\n        severity: 'high' as const,\n        description: 'Authentication failure detected'\n      },\n      {\n        pattern: /sql.*injection|xss|cross.*site|csrf/i,\n        type: 'security' as const,\n        severity: 'critical' as const,\n        description: 'Potential security attack detected'\n      },\n      {\n        pattern: /rate.*limit|too.*many.*requests|ddos/i,\n        type: 'security' as const,\n        severity: 'medium' as const,\n        description: 'Potential abuse or DoS attack'\n      },\n      {\n        pattern: /memory.*leak|out.*of.*memory|heap.*overflow/i,\n        type: 'performance' as const,\n        severity: 'high' as const,\n        description: 'Memory-related issue detected'\n      },\n      {\n        pattern: /unauthorized|forbidden|access.*denied/i,\n        type: 'security' as const,\n        severity: 'medium' as const,\n        description: 'Unauthorized access attempt'\n      }\n    ];\n\n    for (const patternDef of securityPatterns) {\n      if (patternDef.pattern.test(entry.message)) {\n        if (patternDef.type === 'security') {\n          securityMonitor.logSecurityEvent({\n            severity: patternDef.severity,\n            type: 'intrusion',\n            source: `log-analyzer:${entry.source}`,\n            message: `${patternDef.description}: ${entry.message}`,\n            details: {\n              logEntry: entry,\n              pattern: patternDef.pattern.source\n            },\n            resolved: false\n          });\n        }\n\n        this.emit('patternDetected', {\n          pattern: patternDef,\n          logEntry: entry,\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  async performLogAnalysis(timeRange?: { start: Date; end: Date }): Promise<LogAnalysis> {\n    const now = new Date();\n    const range = timeRange || {\n      start: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Last 24 hours\n      end: now\n    };\n\n    const relevantLogs = this.getLogs({\n      timeRange: range\n    });\n\n    const analysis: LogAnalysis = {\n      id: crypto.randomUUID(),\n      timestamp: now,\n      timeRange: range,\n      summary: {\n        totalLogs: relevantLogs.length,\n        errorCount: relevantLogs.filter(l => l.level === 'error').length,\n        warningCount: relevantLogs.filter(l => l.level === 'warn').length,\n        criticalCount: relevantLogs.filter(l => l.level === 'critical').length,\n        uniqueSources: new Set(relevantLogs.map(l => l.source)).size\n      },\n      patterns: [],\n      recommendations: [],\n      securityEvents: securityMonitor.getSecurityEvents({\n        since: range.start\n      })\n    };\n\n    // Pattern detection\n    const patterns = this.detectPatterns(relevantLogs);\n    analysis.patterns = patterns;\n\n    // Generate recommendations\n    analysis.recommendations = this.generateRecommendations(analysis);\n\n    this.analyses.push(analysis);\n    this.emit('analysisComplete', analysis);\n\n    return analysis;\n  }\n\n  private detectPatterns(logs: LogEntry[]): LogAnalysis['patterns'] {\n    const patterns: LogAnalysis['patterns'] = [];\n    const patternMap = new Map<string, {\n      count: number;\n      severity: 'low' | 'medium' | 'high' | 'critical';\n      type: 'security' | 'performance' | 'error' | 'anomaly';\n      firstSeen: Date;\n      lastSeen: Date;\n      samples: LogEntry[];\n    }>();\n\n    // Define pattern detection rules\n    const rules = [\n      {\n        name: 'repeated_errors',\n        regex: /(error|exception|fail)/i,\n        type: 'error' as const,\n        minOccurrences: 5\n      },\n      {\n        name: 'security_violations',\n        regex: /(unauthorized|forbidden|access.*denied|authentication.*failed)/i,\n        type: 'security' as const,\n        minOccurrences: 3\n      },\n      {\n        name: 'performance_issues',\n        regex: /(slow|timeout|high.*latency|memory.*usage)/i,\n        type: 'performance' as const,\n        minOccurrences: 3\n      },\n      {\n        name: 'anomalous_activity',\n        regex: /(unusual|suspicious|anomaly|unexpected)/i,\n        type: 'anomaly' as const,\n        minOccurrences: 2\n      }\n    ];\n\n    // Analyze logs for patterns\n    rules.forEach(rule => {\n      const matchingLogs = logs.filter(log => rule.regex.test(log.message));\n      \n      if (matchingLogs.length >= rule.minOccurrences) {\n        const severity = this.calculatePatternSeverity(matchingLogs.length, rule.type);\n        \n        patterns.push({\n          type: rule.type,\n          pattern: rule.name,\n          occurrences: matchingLogs.length,\n          severity,\n          firstSeen: matchingLogs[matchingLogs.length - 1].timestamp,\n          lastSeen: matchingLogs[0].timestamp,\n          samples: matchingLogs.slice(0, 5) // First 5 samples\n        });\n      }\n    });\n\n    return patterns;\n  }\n\n  private calculatePatternSeverity(occurrences: number, type: string): 'low' | 'medium' | 'high' | 'critical' {\n    if (type === 'security') {\n      if (occurrences >= 20) return 'critical';\n      if (occurrences >= 10) return 'high';\n      if (occurrences >= 5) return 'medium';\n      return 'low';\n    }\n    \n    if (type === 'error') {\n      if (occurrences >= 50) return 'critical';\n      if (occurrences >= 25) return 'high';\n      if (occurrences >= 10) return 'medium';\n      return 'low';\n    }\n    \n    // Default severity calculation\n    if (occurrences >= 30) return 'high';\n    if (occurrences >= 15) return 'medium';\n    return 'low';\n  }\n\n  private generateRecommendations(analysis: LogAnalysis): string[] {\n    const recommendations: string[] = [];\n\n    // Security recommendations\n    const securityPatterns = analysis.patterns.filter(p => p.type === 'security');\n    if (securityPatterns.length > 0) {\n      recommendations.push('Review and investigate security-related log patterns');\n      recommendations.push('Consider implementing additional security measures');\n      \n      const criticalSecurity = securityPatterns.filter(p => p.severity === 'critical');\n      if (criticalSecurity.length > 0) {\n        recommendations.push('URGENT: Critical security patterns detected - immediate investigation required');\n      }\n    }\n\n    // Error recommendations\n    const errorPatterns = analysis.patterns.filter(p => p.type === 'error');\n    if (errorPatterns.length > 0) {\n      recommendations.push('Investigate recurring error patterns to improve system stability');\n    }\n\n    // Performance recommendations\n    const perfPatterns = analysis.patterns.filter(p => p.type === 'performance');\n    if (perfPatterns.length > 0) {\n      recommendations.push('Review performance-related issues and optimize system resources');\n    }\n\n    // General recommendations\n    if (analysis.summary.criticalCount > 0) {\n      recommendations.push('Address all critical-level log entries immediately');\n    }\n    \n    if (analysis.summary.errorCount > analysis.summary.totalLogs * 0.1) {\n      recommendations.push('High error rate detected - consider system health review');\n    }\n\n    return recommendations;\n  }\n\n  // Express middleware integration\n  private setupExpressIntegration(): void {\n    // This would be used in the main server setup\n  }\n\n  getExpressMiddleware() {\n    return (req: any, res: any, next: any) => {\n      const startTime = Date.now();\n      const correlationId = crypto.randomUUID();\n      \n      req.correlationId = correlationId;\n      \n      // Log request\n      this.info('express', `${req.method} ${req.path}`, {\n        method: req.method,\n        path: req.path,\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        correlationId\n      }, ['request', 'http']);\n\n      // Intercept response\n      const originalSend = res.send;\n      res.send = function(data: any) {\n        const responseTime = Date.now() - startTime;\n        const level = res.statusCode >= 500 ? 'error' : \n                     res.statusCode >= 400 ? 'warn' : 'info';\n        \n        // Use the log aggregator instance\n        (req.app.get('logAggregator') as LogAggregator).log({\n          level,\n          source: 'express',\n          message: `${req.method} ${req.path} - ${res.statusCode}`,\n          metadata: {\n            method: req.method,\n            path: req.path,\n            statusCode: res.statusCode,\n            responseTime,\n            ip: req.ip,\n            correlationId\n          },\n          tags: ['response', 'http'],\n          correlationId\n        });\n        \n        return originalSend.call(this, data);\n      };\n\n      next();\n    };\n  }\n\n  // File operations\n  private async ensureLogDirectory(): Promise<void> {\n    if (this.logFile) {\n      const logDir = path.dirname(this.logFile);\n      try {\n        await fs.mkdir(logDir, { recursive: true });\n      } catch (error) {\n        console.error('Failed to create log directory:', error);\n      }\n    }\n  }\n\n  private async writeToFile(entry: LogEntry): Promise<void> {\n    if (!this.logFile) return;\n    \n    try {\n      const logLine = JSON.stringify({\n        timestamp: entry.timestamp.toISOString(),\n        level: entry.level,\n        source: entry.source,\n        message: entry.message,\n        metadata: entry.metadata,\n        tags: entry.tags,\n        correlationId: entry.correlationId\n      }) + '\\n';\n      \n      await fs.appendFile(this.logFile, logLine);\n    } catch (error) {\n      console.error('Failed to write to log file:', error);\n    }\n  }\n\n  // Cleanup and maintenance\n  private setupLogCleanup(): void {\n    this.logCleanupInterval = setInterval(() => {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - this.options.logRetentionDays!);\n      \n      this.logs = this.logs.filter(log => log.timestamp >= cutoffDate);\n      this.analyses = this.analyses.filter(analysis => analysis.timestamp >= cutoffDate);\n    }, 24 * 60 * 60 * 1000); // Daily cleanup\n  }\n\n  private startPeriodicAnalysis(): void {\n    this.analysisInterval = setInterval(async () => {\n      try {\n        await this.performLogAnalysis();\n      } catch (error) {\n        this.error('log-aggregator', `Periodic analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`, { error });\n      }\n    }, this.options.analysisIntervalMinutes! * 60 * 1000);\n  }\n\n  // Analytics and reporting\n  getAnalyses(limit = 10): LogAnalysis[] {\n    return this.analyses\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  getLogStatistics(): {\n    totalLogs: number;\n    logsByLevel: Record<LogEntry['level'], number>;\n    logsBySources: Record<string, number>;\n    recentActivity: { hour: string; count: number }[];\n  } {\n    const stats = {\n      totalLogs: this.logs.length,\n      logsByLevel: {\n        debug: 0,\n        info: 0,\n        warn: 0,\n        error: 0,\n        critical: 0\n      } as Record<LogEntry['level'], number>,\n      logsBySources: {} as Record<string, number>,\n      recentActivity: [] as { hour: string; count: number }[]\n    };\n\n    // Count by level\n    this.logs.forEach(log => {\n      stats.logsByLevel[log.level]++;\n      \n      if (!stats.logsBySources[log.source]) {\n        stats.logsBySources[log.source] = 0;\n      }\n      stats.logsBySources[log.source]++;\n    });\n\n    // Recent activity (last 24 hours by hour)\n    const now = new Date();\n    for (let i = 23; i >= 0; i--) {\n      const hour = new Date(now.getTime() - i * 60 * 60 * 1000);\n      const hourStart = new Date(hour.getFullYear(), hour.getMonth(), hour.getDate(), hour.getHours());\n      const hourEnd = new Date(hourStart.getTime() + 60 * 60 * 1000);\n      \n      const count = this.logs.filter(log => \n        log.timestamp >= hourStart && log.timestamp < hourEnd\n      ).length;\n      \n      stats.recentActivity.push({\n        hour: hourStart.toISOString().substring(11, 16), // HH:MM format\n        count\n      });\n    }\n\n    return stats;\n  }\n\n  // Cleanup resources\n  destroy(): void {\n    if (this.analysisInterval) {\n      clearInterval(this.analysisInterval);\n    }\n    if (this.logCleanupInterval) {\n      clearInterval(this.logCleanupInterval);\n    }\n    this.removeAllListeners();\n  }\n}\n\nexport const logAggregator = new LogAggregator({\n  maxLogs: 50000,\n  logRetentionDays: 30,\n  analysisIntervalMinutes: 15,\n  enableFileLogging: true,\n  logFilePath: './logs/security.log',\n  enableRealTimeAnalysis: true\n});"],"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","ignoreList":[]}