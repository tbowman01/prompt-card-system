7b6de481e29451a59b7191930cb4d711
"use strict";

/* istanbul ignore next */
function cov_1uimhmoub6() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/yaml.ts";
  var hash = "7a38375ef97f5411b34bfcc59464584de1627bb0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/yaml.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 36
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 18
        },
        end: {
          line: 9,
          column: 53
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "9": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 71,
          column: 3
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "11": {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "13": {
        start: {
          line: 19,
          column: 25
        },
        end: {
          line: 21,
          column: 16
        }
      },
      "14": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "15": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 26,
          column: 19
        }
      },
      "16": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 30,
          column: 16
        }
      },
      "17": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "18": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 110
        }
      },
      "19": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "20": {
        start: {
          line: 40,
          column: 34
        },
        end: {
          line: 42,
          column: 23
        }
      },
      "21": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 58
        }
      },
      "22": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "23": {
        start: {
          line: 48,
          column: 27
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "24": {
        start: {
          line: 51,
          column: 52
        },
        end: {
          line: 54,
          column: 17
        }
      },
      "25": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 26
        }
      },
      "26": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 60,
          column: 117
        }
      },
      "27": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 60
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 103
        }
      },
      "29": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 37
        }
      },
      "30": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "31": {
        start: {
          line: 73,
          column: 0
        },
        end: {
          line: 164,
          column: 3
        }
      },
      "32": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 163,
          column: 5
        }
      },
      "33": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 75,
          column: 40
        }
      },
      "34": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "35": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "36": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 83,
          column: 58
        }
      },
      "37": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "38": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "39": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 65
        }
      },
      "40": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 32
        }
      },
      "41": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "42": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "43": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "44": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 81
        }
      },
      "45": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 102,
          column: 17
        }
      },
      "46": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 79
        }
      },
      "47": {
        start: {
          line: 104,
          column: 39
        },
        end: {
          line: 104,
          column: 56
        }
      },
      "48": {
        start: {
          line: 105,
          column: 40
        },
        end: {
          line: 105,
          column: 84
        }
      },
      "49": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 106,
          column: 95
        }
      },
      "50": {
        start: {
          line: 106,
          column: 63
        },
        end: {
          line: 106,
          column: 94
        }
      },
      "51": {
        start: {
          line: 108,
          column: 33
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "52": {
        start: {
          line: 114,
          column: 35
        },
        end: {
          line: 117,
          column: 120
        }
      },
      "53": {
        start: {
          line: 118,
          column: 37
        },
        end: {
          line: 118,
          column: 63
        }
      },
      "54": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 132,
          column: 17
        }
      },
      "55": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 120,
          column: 30
        }
      },
      "56": {
        start: {
          line: 121,
          column: 33
        },
        end: {
          line: 121,
          column: 48
        }
      },
      "57": {
        start: {
          line: 122,
          column: 41
        },
        end: {
          line: 127,
          column: 21
        }
      },
      "58": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 131,
          column: 196
        }
      },
      "59": {
        start: {
          line: 134,
          column: 36
        },
        end: {
          line: 136,
          column: 28
        }
      },
      "60": {
        start: {
          line: 137,
          column: 34
        },
        end: {
          line: 139,
          column: 28
        }
      },
      "61": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "62": {
        start: {
          line: 143,
          column: 55
        },
        end: {
          line: 147,
          column: 21
        }
      },
      "63": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 29
        }
      },
      "64": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "65": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "66": {
        start: {
          line: 166,
          column: 0
        },
        end: {
          line: 222,
          column: 3
        }
      },
      "67": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "68": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 168,
          column: 40
        }
      },
      "69": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "70": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 173,
          column: 15
        }
      },
      "71": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 176,
          column: 58
        }
      },
      "72": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "73": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "74": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 184,
          column: 65
        }
      },
      "75": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 35
        }
      },
      "76": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "77": {
        start: {
          line: 186,
          column: 21
        },
        end: {
          line: 186,
          column: 22
        }
      },
      "78": {
        start: {
          line: 187,
          column: 27
        },
        end: {
          line: 187,
          column: 37
        }
      },
      "79": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 188,
          column: 72
        }
      },
      "80": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "81": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 98
        }
      },
      "82": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "83": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 74
        }
      },
      "84": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 200,
          column: 19
        }
      },
      "85": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 199,
          column: 21
        }
      },
      "86": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 105
        }
      },
      "87": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "88": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "89": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "90": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 13,
            column: 28
          }
        },
        loc: {
          start: {
            line: 13,
            column: 41
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 39,
            column: 37
          }
        },
        loc: {
          start: {
            line: 39,
            column: 46
          },
          end: {
            line: 44,
            column: 13
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 49
          },
          end: {
            line: 47,
            column: 50
          }
        },
        loc: {
          start: {
            line: 47,
            column: 57
          },
          end: {
            line: 58,
            column: 9
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 43
          },
          end: {
            line: 51,
            column: 44
          }
        },
        loc: {
          start: {
            line: 51,
            column: 52
          },
          end: {
            line: 54,
            column: 17
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 24
          }
        },
        loc: {
          start: {
            line: 73,
            column: 37
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 73
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 94,
            column: 56
          },
          end: {
            line: 94,
            column: 57
          }
        },
        loc: {
          start: {
            line: 94,
            column: 69
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 94
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 106,
            column: 54
          },
          end: {
            line: 106,
            column: 55
          }
        },
        loc: {
          start: {
            line: 106,
            column: 63
          },
          end: {
            line: 106,
            column: 94
          }
        },
        line: 106
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 143,
            column: 46
          },
          end: {
            line: 143,
            column: 47
          }
        },
        loc: {
          start: {
            line: 143,
            column: 55
          },
          end: {
            line: 147,
            column: 21
          }
        },
        line: 143
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 166,
            column: 25
          },
          end: {
            line: 166,
            column: 26
          }
        },
        loc: {
          start: {
            line: 166,
            column: 39
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 166
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 196,
            column: 37
          },
          end: {
            line: 196,
            column: 38
          }
        },
        loc: {
          start: {
            line: 196,
            column: 58
          },
          end: {
            line: 200,
            column: 17
          }
        },
        line: 196
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: 36,
            column: 13
          },
          end: {
            line: 45,
            column: 9
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 53,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 53,
            column: 52
          }
        }, {
          start: {
            line: 53,
            column: 56
          },
          end: {
            line: 53,
            column: 60
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 55,
            column: 29
          },
          end: {
            line: 55,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 29
          },
          end: {
            line: 55,
            column: 45
          }
        }, {
          start: {
            line: 55,
            column: 49
          },
          end: {
            line: 55,
            column: 59
          }
        }],
        line: 55
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 51
          },
          end: {
            line: 60,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 78
          },
          end: {
            line: 60,
            column: 97
          }
        }, {
          start: {
            line: 60,
            column: 100
          },
          end: {
            line: 60,
            column: 116
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 68,
            column: 19
          },
          end: {
            line: 68,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 44
          },
          end: {
            line: 68,
            column: 57
          }
        }, {
          start: {
            line: 68,
            column: 60
          },
          end: {
            line: 68,
            column: 83
          }
        }],
        line: 68
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 24
          },
          end: {
            line: 91,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 48
          },
          end: {
            line: 91,
            column: 54
          }
        }, {
          start: {
            line: 91,
            column: 57
          },
          end: {
            line: 91,
            column: 65
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "13": {
        loc: {
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 97,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 97,
            column: 35
          }
        }, {
          start: {
            line: 97,
            column: 39
          },
          end: {
            line: 97,
            column: 69
          }
        }, {
          start: {
            line: 97,
            column: 73
          },
          end: {
            line: 97,
            column: 100
          }
        }],
        line: 97
      },
      "14": {
        loc: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 102,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 102,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "15": {
        loc: {
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 33
          }
        }, {
          start: {
            line: 100,
            column: 37
          },
          end: {
            line: 100,
            column: 65
          }
        }],
        line: 100
      },
      "16": {
        loc: {
          start: {
            line: 105,
            column: 40
          },
          end: {
            line: 105,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 40
          },
          end: {
            line: 105,
            column: 78
          }
        }, {
          start: {
            line: 105,
            column: 82
          },
          end: {
            line: 105,
            column: 84
          }
        }],
        line: 105
      },
      "17": {
        loc: {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 109,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 109,
            column: 45
          }
        }, {
          start: {
            line: 109,
            column: 49
          },
          end: {
            line: 109,
            column: 80
          }
        }],
        line: 109
      },
      "18": {
        loc: {
          start: {
            line: 117,
            column: 94
          },
          end: {
            line: 117,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 94
          },
          end: {
            line: 117,
            column: 112
          }
        }, {
          start: {
            line: 117,
            column: 116
          },
          end: {
            line: 117,
            column: 118
          }
        }],
        line: 117
      },
      "19": {
        loc: {
          start: {
            line: 125,
            column: 41
          },
          end: {
            line: 125,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 41
          },
          end: {
            line: 125,
            column: 50
          }
        }, {
          start: {
            line: 125,
            column: 54
          },
          end: {
            line: 125,
            column: 56
          }
        }],
        line: 125
      },
      "20": {
        loc: {
          start: {
            line: 126,
            column: 37
          },
          end: {
            line: 126,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 37
          },
          end: {
            line: 126,
            column: 48
          }
        }, {
          start: {
            line: 126,
            column: 52
          },
          end: {
            line: 126,
            column: 54
          }
        }],
        line: 126
      },
      "21": {
        loc: {
          start: {
            line: 131,
            column: 111
          },
          end: {
            line: 131,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 111
          },
          end: {
            line: 131,
            column: 139
          }
        }, {
          start: {
            line: 131,
            column: 143
          },
          end: {
            line: 131,
            column: 147
          }
        }],
        line: 131
      },
      "22": {
        loc: {
          start: {
            line: 131,
            column: 164
          },
          end: {
            line: 131,
            column: 193
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 164
          },
          end: {
            line: 131,
            column: 187
          }
        }, {
          start: {
            line: 131,
            column: 191
          },
          end: {
            line: 131,
            column: 193
          }
        }],
        line: 131
      },
      "23": {
        loc: {
          start: {
            line: 142,
            column: 42
          },
          end: {
            line: 142,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 42
          },
          end: {
            line: 142,
            column: 63
          }
        }, {
          start: {
            line: 142,
            column: 67
          },
          end: {
            line: 142,
            column: 71
          }
        }],
        line: 142
      },
      "24": {
        loc: {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 60
          }
        }, {
          start: {
            line: 146,
            column: 64
          },
          end: {
            line: 146,
            column: 68
          }
        }],
        line: 146
      },
      "25": {
        loc: {
          start: {
            line: 161,
            column: 19
          },
          end: {
            line: 161,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 44
          },
          end: {
            line: 161,
            column: 57
          }
        }, {
          start: {
            line: 161,
            column: 60
          },
          end: {
            line: 161,
            column: 83
          }
        }],
        line: 161
      },
      "26": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "27": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "28": {
        loc: {
          start: {
            line: 184,
            column: 24
          },
          end: {
            line: 184,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 48
          },
          end: {
            line: 184,
            column: 54
          }
        }, {
          start: {
            line: 184,
            column: 57
          },
          end: {
            line: 184,
            column: 65
          }
        }],
        line: 184
      },
      "29": {
        loc: {
          start: {
            line: 188,
            column: 27
          },
          end: {
            line: 188,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 48
          },
          end: {
            line: 188,
            column: 67
          }
        }, {
          start: {
            line: 188,
            column: 70
          },
          end: {
            line: 188,
            column: 72
          }
        }],
        line: 188
      },
      "30": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "31": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 31
          }
        }, {
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 189,
            column: 65
          }
        }, {
          start: {
            line: 189,
            column: 69
          },
          end: {
            line: 189,
            column: 96
          }
        }],
        line: 189
      },
      "32": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 201,
            column: 13
          }
        }],
        line: 192
      },
      "33": {
        loc: {
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 192,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 192,
            column: 29
          }
        }, {
          start: {
            line: 192,
            column: 33
          },
          end: {
            line: 192,
            column: 61
          }
        }],
        line: 192
      },
      "34": {
        loc: {
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 199,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 199,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "35": {
        loc: {
          start: {
            line: 197,
            column: 24
          },
          end: {
            line: 197,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 24
          },
          end: {
            line: 197,
            column: 34
          }
        }, {
          start: {
            line: 197,
            column: 38
          },
          end: {
            line: 197,
            column: 67
          }
        }],
        line: 197
      },
      "36": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "37": {
        loc: {
          start: {
            line: 219,
            column: 19
          },
          end: {
            line: 219,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 44
          },
          end: {
            line: 219,
            column: 57
          }
        }, {
          start: {
            line: 219,
            column: 60
          },
          end: {
            line: 219,
            column: 85
          }
        }],
        line: 219
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/yaml.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/yaml.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { db } from '../database/connection';\nimport yaml from 'js-yaml';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\nimport { CreateTestCaseRequest, AssertionType } from '../types/testCase';\n\nconst router = Router();\n\ninterface PromptfooConfig {\n  prompts: string[];\n  providers: string[];\n  tests: Array<{\n    vars: Record<string, any>;\n    assert?: Array<{\n      type: string;\n      value: string | number;\n      description?: string;\n    }>;\n  }>;\n  description?: string;\n}\n\n// Export prompt card(s) to YAML\nrouter.get('/export/:id?', (req, res) => {\n  try {\n    const { id } = req.params;\n    let promptCards: any[];\n\n    if (id) {\n      // Export single prompt card\n      const card = db.prepare(`\n        SELECT * FROM prompt_cards WHERE id = ?\n      `).get(id);\n\n      if (!card) {\n        return res.status(404).json({\n          success: false,\n          error: 'Prompt card not found'\n        });\n      }\n\n      const testCases = db.prepare(`\n        SELECT * FROM test_cases WHERE prompt_card_id = ?\n      `).all(id);\n\n      promptCards = [{\n        ...card,\n        test_cases: testCases\n      }];\n    } else {\n      // Export all prompt cards\n      const cards = db.prepare('SELECT * FROM prompt_cards ORDER BY created_at DESC').all() as PromptCard[];\n      promptCards = cards.map((card: PromptCard) => {\n        const testCases = db.prepare(`\n          SELECT * FROM test_cases WHERE prompt_card_id = ?\n        `).all(card.id);\n        return { ...card, test_cases: testCases };\n      });\n    }\n\n    // Convert to Promptfoo format\n    const promptfooConfigs = promptCards.map(card => {\n      const config: PromptfooConfig = {\n        prompts: [card.prompt_template],\n        providers: ['ollama:chat:llama2:7b'], // Default provider\n        tests: card.test_cases.map((tc: any) => ({\n          vars: JSON.parse(tc.input_variables),\n          assert: JSON.parse(tc.assertions || '[]')\n        })),\n        description: card.description || card.title\n      };\n      return config;\n    });\n\n    // If single card, return single config, otherwise return array\n    const yamlContent = yaml.dump(promptCards.length === 1 ? promptfooConfigs[0] : promptfooConfigs);\n\n    res.setHeader('Content-Type', 'application/x-yaml');\n    res.setHeader('Content-Disposition', `attachment; filename=\"prompt-cards-${Date.now()}.yaml\"`);\n    return res.send(yamlContent);\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to export YAML'\n    });\n  }\n});\n\n// Import prompt cards from YAML\nrouter.post('/import', (req, res) => {\n  try {\n    const { yamlContent } = req.body;\n\n    if (!yamlContent) {\n      return res.status(400).json({\n        success: false,\n        error: 'YAML content is required'\n      });\n    }\n\n    // Parse YAML\n    const parsed = yaml.load(yamlContent);\n    if (!parsed) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid YAML content'\n      });\n    }\n\n    // Handle both single config and array of configs\n    const configs = Array.isArray(parsed) ? parsed : [parsed];\n    const importedCards: any[] = [];\n\n    // Begin transaction\n    const transaction = db.transaction((configs: PromptfooConfig[]) => {\n      for (const config of configs) {\n        // Validate config structure\n        if (!config.prompts || !Array.isArray(config.prompts) || config.prompts.length === 0) {\n          throw new Error('Invalid config: prompts array is required');\n        }\n\n        if (!config.tests || !Array.isArray(config.tests)) {\n          throw new Error('Invalid config: tests array is required');\n        }\n\n        // Extract variables from prompt template\n        const promptTemplate = config.prompts[0];\n        const variableMatches = promptTemplate.match(/\\{\\{(\\w+)\\}\\}/g) || [];\n        const variables = variableMatches.map(match => match.replace(/\\{\\{|\\}\\}/g, ''));\n\n        // Create prompt card\n        const cardData: CreatePromptCardRequest = {\n          title: config.description || `Imported Prompt ${Date.now()}`,\n          description: config.description,\n          prompt_template: promptTemplate,\n          variables\n        };\n\n        const cardResult = db.prepare(`\n          INSERT INTO prompt_cards (title, description, prompt_template, variables)\n          VALUES (?, ?, ?, ?)\n        `).run(\n          cardData.title,\n          cardData.description,\n          cardData.prompt_template,\n          JSON.stringify(cardData.variables || [])\n        );\n\n        const promptCardId = cardResult.lastInsertRowid as number;\n\n        // Create test cases\n        for (let i = 0; i < config.tests.length; i++) {\n          const test = config.tests[i];\n          const testCaseData: CreateTestCaseRequest = {\n            prompt_card_id: promptCardId,\n            name: `Test Case ${i + 1}`,\n            input_variables: test.vars || {},\n            assertions: (test.assert || []) as AssertionType[]\n          };\n\n          db.prepare(`\n            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n            VALUES (?, ?, ?, ?, ?)\n          `).run(\n            testCaseData.prompt_card_id,\n            testCaseData.name,\n            JSON.stringify(testCaseData.input_variables),\n            testCaseData.expected_output || null,\n            JSON.stringify(testCaseData.assertions || [])\n          );\n        }\n\n        // Get the created card with test cases\n        const createdCard = db.prepare(`\n          SELECT * FROM prompt_cards WHERE id = ?\n        `).get(promptCardId) as PromptCard;\n\n        const testCases = db.prepare(`\n          SELECT * FROM test_cases WHERE prompt_card_id = ?\n        `).all(promptCardId);\n\n        importedCards.push({\n          ...createdCard,\n          variables: JSON.parse(createdCard.variables || '[]'),\n          test_cases: testCases.map((tc: any) => ({\n            ...tc,\n            input_variables: JSON.parse(tc.input_variables),\n            assertions: JSON.parse(tc.assertions || '[]')\n          }))\n        });\n      }\n    });\n\n    transaction(configs);\n\n    return res.status(201).json({\n      success: true,\n      data: importedCards as any[],\n      message: `Successfully imported ${importedCards.length} prompt card(s)`\n    });\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to import YAML'\n    });\n  }\n});\n\n// Validate YAML format\nrouter.post('/validate', (req, res) => {\n  try {\n    const { yamlContent } = req.body;\n\n    if (!yamlContent) {\n      return res.status(400).json({\n        success: false,\n        error: 'YAML content is required'\n      });\n    }\n\n    // Parse YAML\n    const parsed = yaml.load(yamlContent);\n    if (!parsed) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid YAML syntax'\n      });\n    }\n\n    // Validate structure\n    const configs = Array.isArray(parsed) ? parsed : [parsed];\n    const validationErrors = [];\n\n    for (let i = 0; i < configs.length; i++) {\n      const config = configs[i];\n      const prefix = configs.length > 1 ? `Config ${i + 1}: ` : '';\n\n      if (!config.prompts || !Array.isArray(config.prompts) || config.prompts.length === 0) {\n        validationErrors.push(`${prefix}prompts array is required and must not be empty`);\n      }\n\n      if (!config.tests || !Array.isArray(config.tests)) {\n        validationErrors.push(`${prefix}tests array is required`);\n      } else {\n        config.tests.forEach((test: any, testIndex: number) => {\n          if (!test.vars || typeof test.vars !== 'object') {\n            validationErrors.push(`${prefix}Test ${testIndex + 1}: vars object is required`);\n          }\n        });\n      }\n    }\n\n    if (validationErrors.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation failed',\n        details: validationErrors\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'YAML is valid',\n      configCount: configs.length\n    });\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to validate YAML'\n    });\n  }\n});\n\nexport { router as yamlRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7a38375ef97f5411b34bfcc59464584de1627bb0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1uimhmoub6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1uimhmoub6();
var __importDefault =
/* istanbul ignore next */
(cov_1uimhmoub6().s[0]++,
/* istanbul ignore next */
(cov_1uimhmoub6().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1uimhmoub6().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1uimhmoub6().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1uimhmoub6().f[0]++;
  cov_1uimhmoub6().s[1]++;
  return /* istanbul ignore next */(cov_1uimhmoub6().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1uimhmoub6().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1uimhmoub6().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1uimhmoub6().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1uimhmoub6().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1uimhmoub6().s[3]++;
exports.yamlRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_1uimhmoub6().s[4]++, require("express"));
const connection_1 =
/* istanbul ignore next */
(cov_1uimhmoub6().s[5]++, require("../database/connection"));
const js_yaml_1 =
/* istanbul ignore next */
(cov_1uimhmoub6().s[6]++, __importDefault(require("js-yaml")));
const router =
/* istanbul ignore next */
(cov_1uimhmoub6().s[7]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_1uimhmoub6().s[8]++;
exports.yamlRoutes = router;
// Export prompt card(s) to YAML
/* istanbul ignore next */
cov_1uimhmoub6().s[9]++;
router.get('/export/:id?', (req, res) => {
  /* istanbul ignore next */
  cov_1uimhmoub6().f[1]++;
  cov_1uimhmoub6().s[10]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[11]++, req.params);
    let promptCards;
    /* istanbul ignore next */
    cov_1uimhmoub6().s[12]++;
    if (id) {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[3][0]++;
      // Export single prompt card
      const card =
      /* istanbul ignore next */
      (cov_1uimhmoub6().s[13]++, connection_1.db.prepare(`
        SELECT * FROM prompt_cards WHERE id = ?
      `).get(id));
      /* istanbul ignore next */
      cov_1uimhmoub6().s[14]++;
      if (!card) {
        /* istanbul ignore next */
        cov_1uimhmoub6().b[4][0]++;
        cov_1uimhmoub6().s[15]++;
        return res.status(404).json({
          success: false,
          error: 'Prompt card not found'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1uimhmoub6().b[4][1]++;
      }
      const testCases =
      /* istanbul ignore next */
      (cov_1uimhmoub6().s[16]++, connection_1.db.prepare(`
        SELECT * FROM test_cases WHERE prompt_card_id = ?
      `).all(id));
      /* istanbul ignore next */
      cov_1uimhmoub6().s[17]++;
      promptCards = [{
        ...card,
        test_cases: testCases
      }];
    } else {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[3][1]++;
      // Export all prompt cards
      const cards =
      /* istanbul ignore next */
      (cov_1uimhmoub6().s[18]++, connection_1.db.prepare('SELECT * FROM prompt_cards ORDER BY created_at DESC').all());
      /* istanbul ignore next */
      cov_1uimhmoub6().s[19]++;
      promptCards = cards.map(card => {
        /* istanbul ignore next */
        cov_1uimhmoub6().f[2]++;
        const testCases =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[20]++, connection_1.db.prepare(`
          SELECT * FROM test_cases WHERE prompt_card_id = ?
        `).all(card.id));
        /* istanbul ignore next */
        cov_1uimhmoub6().s[21]++;
        return {
          ...card,
          test_cases: testCases
        };
      });
    }
    // Convert to Promptfoo format
    const promptfooConfigs =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[22]++, promptCards.map(card => {
      /* istanbul ignore next */
      cov_1uimhmoub6().f[3]++;
      const config =
      /* istanbul ignore next */
      (cov_1uimhmoub6().s[23]++, {
        prompts: [card.prompt_template],
        providers: ['ollama:chat:llama2:7b'],
        // Default provider
        tests: card.test_cases.map(tc => {
          /* istanbul ignore next */
          cov_1uimhmoub6().f[4]++;
          cov_1uimhmoub6().s[24]++;
          return {
            vars: JSON.parse(tc.input_variables),
            assert: JSON.parse(
            /* istanbul ignore next */
            (cov_1uimhmoub6().b[5][0]++, tc.assertions) ||
            /* istanbul ignore next */
            (cov_1uimhmoub6().b[5][1]++, '[]'))
          };
        }),
        description:
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[6][0]++, card.description) ||
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[6][1]++, card.title)
      });
      /* istanbul ignore next */
      cov_1uimhmoub6().s[25]++;
      return config;
    }));
    // If single card, return single config, otherwise return array
    const yamlContent =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[26]++, js_yaml_1.default.dump(promptCards.length === 1 ?
    /* istanbul ignore next */
    (cov_1uimhmoub6().b[7][0]++, promptfooConfigs[0]) :
    /* istanbul ignore next */
    (cov_1uimhmoub6().b[7][1]++, promptfooConfigs)));
    /* istanbul ignore next */
    cov_1uimhmoub6().s[27]++;
    res.setHeader('Content-Type', 'application/x-yaml');
    /* istanbul ignore next */
    cov_1uimhmoub6().s[28]++;
    res.setHeader('Content-Disposition', `attachment; filename="prompt-cards-${Date.now()}.yaml"`);
    /* istanbul ignore next */
    cov_1uimhmoub6().s[29]++;
    return res.send(yamlContent);
  } catch (error) {
    /* istanbul ignore next */
    cov_1uimhmoub6().s[30]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[8][1]++, 'Failed to export YAML')
    });
  }
});
// Import prompt cards from YAML
/* istanbul ignore next */
cov_1uimhmoub6().s[31]++;
router.post('/import', (req, res) => {
  /* istanbul ignore next */
  cov_1uimhmoub6().f[5]++;
  cov_1uimhmoub6().s[32]++;
  try {
    const {
      yamlContent
    } =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[33]++, req.body);
    /* istanbul ignore next */
    cov_1uimhmoub6().s[34]++;
    if (!yamlContent) {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[9][0]++;
      cov_1uimhmoub6().s[35]++;
      return res.status(400).json({
        success: false,
        error: 'YAML content is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uimhmoub6().b[9][1]++;
    }
    // Parse YAML
    const parsed =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[36]++, js_yaml_1.default.load(yamlContent));
    /* istanbul ignore next */
    cov_1uimhmoub6().s[37]++;
    if (!parsed) {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[10][0]++;
      cov_1uimhmoub6().s[38]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid YAML content'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uimhmoub6().b[10][1]++;
    }
    // Handle both single config and array of configs
    const configs =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[39]++, Array.isArray(parsed) ?
    /* istanbul ignore next */
    (cov_1uimhmoub6().b[11][0]++, parsed) :
    /* istanbul ignore next */
    (cov_1uimhmoub6().b[11][1]++, [parsed]));
    const importedCards =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[40]++, []);
    // Begin transaction
    const transaction =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[41]++, connection_1.db.transaction(configs => {
      /* istanbul ignore next */
      cov_1uimhmoub6().f[6]++;
      cov_1uimhmoub6().s[42]++;
      for (const config of configs) {
        /* istanbul ignore next */
        cov_1uimhmoub6().s[43]++;
        // Validate config structure
        if (
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[13][0]++, !config.prompts) ||
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[13][1]++, !Array.isArray(config.prompts)) ||
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[13][2]++, config.prompts.length === 0)) {
          /* istanbul ignore next */
          cov_1uimhmoub6().b[12][0]++;
          cov_1uimhmoub6().s[44]++;
          throw new Error('Invalid config: prompts array is required');
        } else
        /* istanbul ignore next */
        {
          cov_1uimhmoub6().b[12][1]++;
        }
        cov_1uimhmoub6().s[45]++;
        if (
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[15][0]++, !config.tests) ||
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[15][1]++, !Array.isArray(config.tests))) {
          /* istanbul ignore next */
          cov_1uimhmoub6().b[14][0]++;
          cov_1uimhmoub6().s[46]++;
          throw new Error('Invalid config: tests array is required');
        } else
        /* istanbul ignore next */
        {
          cov_1uimhmoub6().b[14][1]++;
        }
        // Extract variables from prompt template
        const promptTemplate =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[47]++, config.prompts[0]);
        const variableMatches =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[48]++,
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[16][0]++, promptTemplate.match(/\{\{(\w+)\}\}/g)) ||
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[16][1]++, []));
        const variables =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[49]++, variableMatches.map(match => {
          /* istanbul ignore next */
          cov_1uimhmoub6().f[7]++;
          cov_1uimhmoub6().s[50]++;
          return match.replace(/\{\{|\}\}/g, '');
        }));
        // Create prompt card
        const cardData =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[51]++, {
          title:
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[17][0]++, config.description) ||
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[17][1]++, `Imported Prompt ${Date.now()}`),
          description: config.description,
          prompt_template: promptTemplate,
          variables
        });
        const cardResult =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[52]++, connection_1.db.prepare(`
          INSERT INTO prompt_cards (title, description, prompt_template, variables)
          VALUES (?, ?, ?, ?)
        `).run(cardData.title, cardData.description, cardData.prompt_template, JSON.stringify(
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[18][0]++, cardData.variables) ||
        /* istanbul ignore next */
        (cov_1uimhmoub6().b[18][1]++, []))));
        const promptCardId =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[53]++, cardResult.lastInsertRowid);
        // Create test cases
        /* istanbul ignore next */
        cov_1uimhmoub6().s[54]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[55]++, 0); i < config.tests.length; i++) {
          const test =
          /* istanbul ignore next */
          (cov_1uimhmoub6().s[56]++, config.tests[i]);
          const testCaseData =
          /* istanbul ignore next */
          (cov_1uimhmoub6().s[57]++, {
            prompt_card_id: promptCardId,
            name: `Test Case ${i + 1}`,
            input_variables:
            /* istanbul ignore next */
            (cov_1uimhmoub6().b[19][0]++, test.vars) ||
            /* istanbul ignore next */
            (cov_1uimhmoub6().b[19][1]++, {}),
            assertions:
            /* istanbul ignore next */
            (cov_1uimhmoub6().b[20][0]++, test.assert) ||
            /* istanbul ignore next */
            (cov_1uimhmoub6().b[20][1]++, [])
          });
          /* istanbul ignore next */
          cov_1uimhmoub6().s[58]++;
          connection_1.db.prepare(`
            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)
            VALUES (?, ?, ?, ?, ?)
          `).run(testCaseData.prompt_card_id, testCaseData.name, JSON.stringify(testCaseData.input_variables),
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[21][0]++, testCaseData.expected_output) ||
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[21][1]++, null), JSON.stringify(
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[22][0]++, testCaseData.assertions) ||
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[22][1]++, [])));
        }
        // Get the created card with test cases
        const createdCard =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[59]++, connection_1.db.prepare(`
          SELECT * FROM prompt_cards WHERE id = ?
        `).get(promptCardId));
        const testCases =
        /* istanbul ignore next */
        (cov_1uimhmoub6().s[60]++, connection_1.db.prepare(`
          SELECT * FROM test_cases WHERE prompt_card_id = ?
        `).all(promptCardId));
        /* istanbul ignore next */
        cov_1uimhmoub6().s[61]++;
        importedCards.push({
          ...createdCard,
          variables: JSON.parse(
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[23][0]++, createdCard.variables) ||
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[23][1]++, '[]')),
          test_cases: testCases.map(tc => {
            /* istanbul ignore next */
            cov_1uimhmoub6().f[8]++;
            cov_1uimhmoub6().s[62]++;
            return {
              ...tc,
              input_variables: JSON.parse(tc.input_variables),
              assertions: JSON.parse(
              /* istanbul ignore next */
              (cov_1uimhmoub6().b[24][0]++, tc.assertions) ||
              /* istanbul ignore next */
              (cov_1uimhmoub6().b[24][1]++, '[]'))
            };
          })
        });
      }
    }));
    /* istanbul ignore next */
    cov_1uimhmoub6().s[63]++;
    transaction(configs);
    /* istanbul ignore next */
    cov_1uimhmoub6().s[64]++;
    return res.status(201).json({
      success: true,
      data: importedCards,
      message: `Successfully imported ${importedCards.length} prompt card(s)`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uimhmoub6().s[65]++;
    return res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[25][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[25][1]++, 'Failed to import YAML')
    });
  }
});
// Validate YAML format
/* istanbul ignore next */
cov_1uimhmoub6().s[66]++;
router.post('/validate', (req, res) => {
  /* istanbul ignore next */
  cov_1uimhmoub6().f[9]++;
  cov_1uimhmoub6().s[67]++;
  try {
    const {
      yamlContent
    } =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[68]++, req.body);
    /* istanbul ignore next */
    cov_1uimhmoub6().s[69]++;
    if (!yamlContent) {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[26][0]++;
      cov_1uimhmoub6().s[70]++;
      return res.status(400).json({
        success: false,
        error: 'YAML content is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uimhmoub6().b[26][1]++;
    }
    // Parse YAML
    const parsed =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[71]++, js_yaml_1.default.load(yamlContent));
    /* istanbul ignore next */
    cov_1uimhmoub6().s[72]++;
    if (!parsed) {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[27][0]++;
      cov_1uimhmoub6().s[73]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid YAML syntax'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uimhmoub6().b[27][1]++;
    }
    // Validate structure
    const configs =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[74]++, Array.isArray(parsed) ?
    /* istanbul ignore next */
    (cov_1uimhmoub6().b[28][0]++, parsed) :
    /* istanbul ignore next */
    (cov_1uimhmoub6().b[28][1]++, [parsed]));
    const validationErrors =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[75]++, []);
    /* istanbul ignore next */
    cov_1uimhmoub6().s[76]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1uimhmoub6().s[77]++, 0); i < configs.length; i++) {
      const config =
      /* istanbul ignore next */
      (cov_1uimhmoub6().s[78]++, configs[i]);
      const prefix =
      /* istanbul ignore next */
      (cov_1uimhmoub6().s[79]++, configs.length > 1 ?
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[29][0]++, `Config ${i + 1}: `) :
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[29][1]++, ''));
      /* istanbul ignore next */
      cov_1uimhmoub6().s[80]++;
      if (
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[31][0]++, !config.prompts) ||
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[31][1]++, !Array.isArray(config.prompts)) ||
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[31][2]++, config.prompts.length === 0)) {
        /* istanbul ignore next */
        cov_1uimhmoub6().b[30][0]++;
        cov_1uimhmoub6().s[81]++;
        validationErrors.push(`${prefix}prompts array is required and must not be empty`);
      } else
      /* istanbul ignore next */
      {
        cov_1uimhmoub6().b[30][1]++;
      }
      cov_1uimhmoub6().s[82]++;
      if (
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[33][0]++, !config.tests) ||
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[33][1]++, !Array.isArray(config.tests))) {
        /* istanbul ignore next */
        cov_1uimhmoub6().b[32][0]++;
        cov_1uimhmoub6().s[83]++;
        validationErrors.push(`${prefix}tests array is required`);
      } else {
        /* istanbul ignore next */
        cov_1uimhmoub6().b[32][1]++;
        cov_1uimhmoub6().s[84]++;
        config.tests.forEach((test, testIndex) => {
          /* istanbul ignore next */
          cov_1uimhmoub6().f[10]++;
          cov_1uimhmoub6().s[85]++;
          if (
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[35][0]++, !test.vars) ||
          /* istanbul ignore next */
          (cov_1uimhmoub6().b[35][1]++, typeof test.vars !== 'object')) {
            /* istanbul ignore next */
            cov_1uimhmoub6().b[34][0]++;
            cov_1uimhmoub6().s[86]++;
            validationErrors.push(`${prefix}Test ${testIndex + 1}: vars object is required`);
          } else
          /* istanbul ignore next */
          {
            cov_1uimhmoub6().b[34][1]++;
          }
        });
      }
    }
    /* istanbul ignore next */
    cov_1uimhmoub6().s[87]++;
    if (validationErrors.length > 0) {
      /* istanbul ignore next */
      cov_1uimhmoub6().b[36][0]++;
      cov_1uimhmoub6().s[88]++;
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: validationErrors
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uimhmoub6().b[36][1]++;
    }
    cov_1uimhmoub6().s[89]++;
    return res.json({
      success: true,
      message: 'YAML is valid',
      configCount: configs.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uimhmoub6().s[90]++;
    return res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1uimhmoub6().b[37][1]++, 'Failed to validate YAML')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,