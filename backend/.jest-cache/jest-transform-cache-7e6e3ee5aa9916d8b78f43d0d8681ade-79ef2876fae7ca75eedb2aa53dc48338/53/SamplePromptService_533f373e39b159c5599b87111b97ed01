4639af139395d4c7ad13a4c47bbc96bc
"use strict";

/* istanbul ignore next */
function cov_jrbkc58lf() {
  var path = "/workspaces/prompt-card-system/backend/src/services/SamplePromptService.ts";
  var hash = "796263b132bdbd8ba579926c4766a2d57337d56f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/SamplePromptService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 69
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 277,
          column: 10
        }
      },
      "8": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "9": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 19
        }
      },
      "10": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "11": {
        start: {
          line: 287,
          column: 34
        },
        end: {
          line: 287,
          column: 57
        }
      },
      "12": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "13": {
        start: {
          line: 290,
          column: 33
        },
        end: {
          line: 292,
          column: 28
        }
      },
      "14": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 299,
          column: 17
        }
      },
      "15": {
        start: {
          line: 294,
          column: 35
        },
        end: {
          line: 297,
          column: 108
        }
      },
      "16": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 106
        }
      },
      "17": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 36
        }
      },
      "18": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 67
        }
      },
      "19": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 73
        }
      },
      "20": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "21": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 86
        }
      },
      "22": {
        start: {
          line: 313,
          column: 56
        },
        end: {
          line: 313,
          column: 84
        }
      },
      "23": {
        start: {
          line: 319,
          column: 27
        },
        end: {
          line: 319,
          column: 81
        }
      },
      "24": {
        start: {
          line: 319,
          column: 65
        },
        end: {
          line: 319,
          column: 80
        }
      },
      "25": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 40
        }
      },
      "26": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "27": {
        start: {
          line: 327,
          column: 27
        },
        end: {
          line: 327,
          column: 85
        }
      },
      "28": {
        start: {
          line: 327,
          column: 61
        },
        end: {
          line: 327,
          column: 84
        }
      },
      "29": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 330,
          column: 13
        }
      },
      "30": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 76
        }
      },
      "31": {
        start: {
          line: 332,
          column: 29
        },
        end: {
          line: 334,
          column: 26
        }
      },
      "32": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 340,
          column: 13
        }
      },
      "33": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 339,
          column: 18
        }
      },
      "34": {
        start: {
          line: 342,
          column: 27
        },
        end: {
          line: 345,
          column: 104
        }
      },
      "35": {
        start: {
          line: 346,
          column: 28
        },
        end: {
          line: 348,
          column: 36
        }
      },
      "36": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 352,
          column: 14
        }
      },
      "37": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 73
        }
      },
      "38": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 24
        }
      },
      "39": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 76
        }
      },
      "40": {
        start: {
          line: 363,
          column: 49
        },
        end: {
          line: 363,
          column: 66
        }
      },
      "41": {
        start: {
          line: 369,
          column: 23
        },
        end: {
          line: 369,
          column: 25
        }
      },
      "42": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "43": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 45
        }
      },
      "44": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 376,
          column: 9
        }
      },
      "45": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 55
        }
      },
      "46": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "47": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 51
        }
      },
      "48": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "49": {
        start: {
          line: 382,
          column: 38
        },
        end: {
          line: 382,
          column: 95
        }
      },
      "50": {
        start: {
          line: 383,
          column: 36
        },
        end: {
          line: 383,
          column: 96
        }
      },
      "51": {
        start: {
          line: 383,
          column: 65
        },
        end: {
          line: 383,
          column: 95
        }
      },
      "52": {
        start: {
          line: 384,
          column: 40
        },
        end: {
          line: 384,
          column: 100
        }
      },
      "53": {
        start: {
          line: 384,
          column: 70
        },
        end: {
          line: 384,
          column: 99
        }
      },
      "54": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "55": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 88
        }
      },
      "56": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "57": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 98
        }
      },
      "58": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 395,
          column: 10
        }
      },
      "59": {
        start: {
          line: 401,
          column: 24
        },
        end: {
          line: 401,
          column: 62
        }
      },
      "60": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 83
        }
      },
      "61": {
        start: {
          line: 402,
          column: 48
        },
        end: {
          line: 402,
          column: 79
        }
      },
      "62": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 408,
          column: 47
        }
      },
      "63": {
        start: {
          line: 409,
          column: 27
        },
        end: {
          line: 409,
          column: 47
        }
      },
      "64": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 419,
          column: 10
        }
      },
      "65": {
        start: {
          line: 413,
          column: 56
        },
        end: {
          line: 416,
          column: 13
        }
      },
      "66": {
        start: {
          line: 415,
          column: 43
        },
        end: {
          line: 415,
          column: 61
        }
      },
      "67": {
        start: {
          line: 417,
          column: 68
        },
        end: {
          line: 417,
          column: 92
        }
      },
      "68": {
        start: {
          line: 418,
          column: 55
        },
        end: {
          line: 418,
          column: 79
        }
      },
      "69": {
        start: {
          line: 422,
          column: 0
        },
        end: {
          line: 422,
          column: 50
        }
      },
      "70": {
        start: {
          line: 423,
          column: 0
        },
        end: {
          line: 423,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 25
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 36
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 282
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 41
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 312
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 313,
            column: 46
          },
          end: {
            line: 313,
            column: 47
          }
        },
        loc: {
          start: {
            line: 313,
            column: 56
          },
          end: {
            line: 313,
            column: 84
          }
        },
        line: 313
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 20
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 318
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 319,
            column: 55
          },
          end: {
            line: 319,
            column: 56
          }
        },
        loc: {
          start: {
            line: 319,
            column: 65
          },
          end: {
            line: 319,
            column: 80
          }
        },
        line: 319
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 46
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 325
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 327,
            column: 56
          },
          end: {
            line: 327,
            column: 57
          }
        },
        loc: {
          start: {
            line: 327,
            column: 61
          },
          end: {
            line: 327,
            column: 84
          }
        },
        line: 327
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 34
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 362
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 363,
            column: 44
          },
          end: {
            line: 363,
            column: 45
          }
        },
        loc: {
          start: {
            line: 363,
            column: 49
          },
          end: {
            line: 363,
            column: 66
          }
        },
        line: 363
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 33
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 368
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 383,
            column: 60
          },
          end: {
            line: 383,
            column: 61
          }
        },
        loc: {
          start: {
            line: 383,
            column: 65
          },
          end: {
            line: 383,
            column: 95
          }
        },
        line: 383
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 384,
            column: 65
          },
          end: {
            line: 384,
            column: 66
          }
        },
        loc: {
          start: {
            line: 384,
            column: 70
          },
          end: {
            line: 384,
            column: 99
          }
        },
        line: 384
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 43
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 400
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 402,
            column: 39
          },
          end: {
            line: 402,
            column: 40
          }
        },
        loc: {
          start: {
            line: 402,
            column: 48
          },
          end: {
            line: 402,
            column: 79
          }
        },
        line: 402
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 27
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 407
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 413,
            column: 48
          },
          end: {
            line: 413,
            column: 49
          }
        },
        loc: {
          start: {
            line: 413,
            column: 56
          },
          end: {
            line: 416,
            column: 13
          }
        },
        line: 413
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 415,
            column: 38
          },
          end: {
            line: 415,
            column: 39
          }
        },
        loc: {
          start: {
            line: 415,
            column: 43
          },
          end: {
            line: 415,
            column: 61
          }
        },
        line: 415
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 417,
            column: 56
          },
          end: {
            line: 417,
            column: 57
          }
        },
        loc: {
          start: {
            line: 417,
            column: 68
          },
          end: {
            line: 417,
            column: 92
          }
        },
        line: 417
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 418,
            column: 43
          },
          end: {
            line: 418,
            column: 44
          }
        },
        loc: {
          start: {
            line: 418,
            column: 55
          },
          end: {
            line: 418,
            column: 79
          }
        },
        line: 418
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "2": {
        loc: {
          start: {
            line: 293,
            column: 16
          },
          end: {
            line: 299,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 16
          },
          end: {
            line: 299,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "3": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 330,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 330,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "4": {
        loc: {
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 340,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 340,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "5": {
        loc: {
          start: {
            line: 338,
            column: 42
          },
          end: {
            line: 338,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 42
          },
          end: {
            line: 338,
            column: 60
          }
        }, {
          start: {
            line: 338,
            column: 64
          },
          end: {
            line: 338,
            column: 68
          }
        }],
        line: 338
      },
      "6": {
        loc: {
          start: {
            line: 351,
            column: 38
          },
          end: {
            line: 351,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 38
          },
          end: {
            line: 351,
            column: 55
          }
        }, {
          start: {
            line: 351,
            column: 59
          },
          end: {
            line: 351,
            column: 63
          }
        }],
        line: 351
      },
      "7": {
        loc: {
          start: {
            line: 363,
            column: 15
          },
          end: {
            line: 363,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 15
          },
          end: {
            line: 363,
            column: 67
          }
        }, {
          start: {
            line: 363,
            column: 71
          },
          end: {
            line: 363,
            column: 75
          }
        }],
        line: 363
      },
      "8": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "9": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "10": {
        loc: {
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "11": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "12": {
        loc: {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 381,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 381,
            column: 28
          }
        }, {
          start: {
            line: 381,
            column: 32
          },
          end: {
            line: 381,
            column: 59
          }
        }],
        line: 381
      },
      "13": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "14": {
        loc: {
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "15": {
        loc: {
          start: {
            line: 401,
            column: 24
          },
          end: {
            line: 401,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 24
          },
          end: {
            line: 401,
            column: 56
          }
        }, {
          start: {
            line: 401,
            column: 60
          },
          end: {
            line: 401,
            column: 62
          }
        }],
        line: 401
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/SamplePromptService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/SamplePromptService.ts"],
      sourcesContent: ["import { db } from '../database/connection';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\n\nexport interface SamplePrompt {\n  title: string;\n  description: string;\n  prompt_template: string;\n  variables: string[];\n  category: string;\n  tags: string[];\n}\n\nexport class SamplePromptService {\n  private static instance: SamplePromptService;\n  private initialized = false;\n\n  public static getInstance(): SamplePromptService {\n    if (!SamplePromptService.instance) {\n      SamplePromptService.instance = new SamplePromptService();\n    }\n    return SamplePromptService.instance;\n  }\n\n  /**\n   * Get all predefined sample prompts\n   */\n  public getSamplePrompts(): SamplePrompt[] {\n    return [\n      {\n        title: \"Creative Story Generator\",\n        description: \"Generate engaging creative stories based on specified genre, characters, and setting. Perfect for creative writing, content creation, and storytelling exercises.\",\n        prompt_template: `Write a {{genre}} story that takes place in {{setting}}. The main character is {{character_name}}, who is {{character_description}}. \n\nThe story should:\n- Be approximately {{word_count}} words long\n- Include the theme of {{theme}}\n- Have a clear beginning, middle, and end\n- Be appropriate for {{target_audience}}\n\nStyle: {{writing_style}}\n\nCreate an engaging narrative that captures the reader's attention from the first sentence.`,\n        variables: [\"genre\", \"setting\", \"character_name\", \"character_description\", \"word_count\", \"theme\", \"target_audience\", \"writing_style\"],\n        category: \"creative\",\n        tags: [\"creative writing\", \"storytelling\", \"narrative\", \"fiction\"]\n      },\n      {\n        title: \"Technical Documentation Assistant\",\n        description: \"Create comprehensive technical documentation for software projects, APIs, and systems. Ideal for developers, technical writers, and project managers.\",\n        prompt_template: `Create technical documentation for {{project_name}}.\n\nProject Type: {{project_type}}\nTechnology Stack: {{tech_stack}}\nTarget Audience: {{audience_level}}\n\nPlease include the following sections:\n\n1. **Overview**\n   - Brief description of {{project_name}}\n   - Key features and capabilities\n   - Use cases and benefits\n\n2. **Getting Started**\n   - Prerequisites and requirements\n   - Installation instructions\n   - Basic setup and configuration\n\n3. **{{documentation_focus}}**\n   - Detailed implementation guide\n   - Code examples and best practices\n   - Common patterns and conventions\n\n4. **API Reference** (if applicable)\n   - Endpoint documentation\n   - Request/response examples\n   - Error handling and status codes\n\n5. **Troubleshooting**\n   - Common issues and solutions\n   - Debugging tips\n   - FAQ section\n\nFormat: Use clear markdown formatting with code blocks, tables, and examples where appropriate.\nTone: {{tone}} and suitable for {{audience_level}} developers.`,\n        variables: [\"project_name\", \"project_type\", \"tech_stack\", \"audience_level\", \"documentation_focus\", \"tone\"],\n        category: \"technical\",\n        tags: [\"documentation\", \"technical writing\", \"API\", \"software\", \"development\"]\n      },\n      {\n        title: \"Data Analysis Query Builder\",\n        description: \"Generate comprehensive data analysis queries and insights for business intelligence, research, and decision-making processes.\",\n        prompt_template: `Perform a data analysis on {{dataset_name}} with the following specifications:\n\n**Analysis Objective:** {{analysis_goal}}\n**Data Source:** {{data_source}}\n**Time Period:** {{time_period}}\n**Key Metrics:** {{key_metrics}}\n\nPlease provide:\n\n1. **Data Exploration**\n   - Overview of the dataset structure\n   - Key variables and their distributions\n   - Data quality assessment and missing values\n\n2. **Statistical Analysis**\n   - Descriptive statistics for {{key_metrics}}\n   - Correlation analysis between variables\n   - Trend analysis over {{time_period}}\n\n3. **Insights and Findings**\n   - Key patterns and relationships discovered\n   - Significant trends or anomalies\n   - Business implications of findings\n\n4. **Query Examples**\n   - SQL/Python code for key calculations\n   - Visualization recommendations\n   - Data filtering and aggregation methods\n\n5. **Recommendations**\n   - Actionable insights based on analysis\n   - Further analysis suggestions\n   - Data collection improvements\n\nAnalysis Level: {{complexity_level}}\nOutput Format: {{output_format}}\nInclude visualizations: {{include_charts}}`,\n        variables: [\"dataset_name\", \"analysis_goal\", \"data_source\", \"time_period\", \"key_metrics\", \"complexity_level\", \"output_format\", \"include_charts\"],\n        category: \"analytics\",\n        tags: [\"data analysis\", \"business intelligence\", \"statistics\", \"SQL\", \"insights\"]\n      },\n      {\n        title: \"Problem-Solving Framework\",\n        description: \"Systematic approach to analyzing and solving complex problems using structured thinking methodologies. Great for consulting, project management, and strategic planning.\",\n        prompt_template: `Analyze and provide a solution framework for the following problem:\n\n**Problem Statement:** {{problem_description}}\n**Context:** {{problem_context}}\n**Stakeholders:** {{stakeholders}}\n**Constraints:** {{constraints}}\n**Timeline:** {{timeline}}\n\nUsing the {{methodology}} approach, please provide:\n\n1. **Problem Definition**\n   - Root cause analysis\n   - Problem scope and boundaries\n   - Impact assessment on {{stakeholders}}\n\n2. **Solution Framework**\n   - Multiple solution alternatives\n   - Pros and cons for each approach\n   - Resource requirements and feasibility\n\n3. **Implementation Plan**\n   - Step-by-step action plan\n   - Timeline and milestones\n   - Risk assessment and mitigation strategies\n\n4. **Success Metrics**\n   - Key performance indicators\n   - Measurement methods\n   - Success criteria definition\n\n5. **Recommendations**\n   - Preferred solution with justification\n   - Next steps and immediate actions\n   - Long-term considerations\n\nAnalysis Depth: {{analysis_depth}}\nDecision Framework: {{decision_criteria}}\nPriority Level: {{priority_level}}`,\n        variables: [\"problem_description\", \"problem_context\", \"stakeholders\", \"constraints\", \"timeline\", \"methodology\", \"analysis_depth\", \"decision_criteria\", \"priority_level\"],\n        category: \"problem-solving\",\n        tags: [\"problem solving\", \"analysis\", \"strategy\", \"consulting\", \"framework\"]\n      },\n      {\n        title: \"Code Generation Assistant\",\n        description: \"Generate well-structured, documented code with best practices, error handling, and comprehensive testing. Perfect for rapid prototyping and development.\",\n        prompt_template: `Generate {{language}} code for the following requirements:\n\n**Project:** {{project_name}}\n**Functionality:** {{functionality_description}}\n**Framework/Library:** {{framework}}\n**Code Style:** {{coding_style}}\n\nRequirements:\n{{requirements}}\n\nPlease provide:\n\n1. **Main Implementation**\n   - Clean, well-structured code\n   - Proper error handling and validation\n   - Performance optimizations where applicable\n   - Security best practices\n\n2. **Documentation**\n   - Comprehensive code comments\n   - Function/method documentation\n   - Usage examples\n   - API documentation (if applicable)\n\n3. **Testing**\n   - Unit test cases\n   - Integration test examples\n   - Edge case handling\n   - Mock data and fixtures\n\n4. **Configuration**\n   - Environment setup instructions\n   - Dependencies and requirements\n   - Configuration files (if needed)\n   - Deployment considerations\n\nCode Quality Standards:\n- Follow {{coding_style}} conventions\n- Include type hints/annotations (where applicable)\n- Implement proper logging\n- Handle edge cases and errors gracefully\n- Optimize for {{performance_priority}}\n\nTarget Environment: {{target_environment}}\nComplexity Level: {{complexity_level}}`,\n        variables: [\"language\", \"project_name\", \"functionality_description\", \"framework\", \"coding_style\", \"requirements\", \"performance_priority\", \"target_environment\", \"complexity_level\"],\n        category: \"development\",\n        tags: [\"code generation\", \"programming\", \"development\", \"testing\", \"best practices\"]\n      },\n      {\n        title: \"Business Strategy Consultant\",\n        description: \"Comprehensive business analysis and strategic planning assistant for market research, competitive analysis, and growth strategies.\",\n        prompt_template: `Provide a strategic business analysis for {{company_name}} in the {{industry}} industry.\n\n**Company Profile:**\n- Company: {{company_name}}\n- Industry: {{industry}}\n- Current Stage: {{business_stage}}\n- Market Focus: {{target_market}}\n- Key Challenge: {{primary_challenge}}\n\n**Analysis Framework:**\n\n1. **Market Analysis**\n   - Industry overview and trends\n   - Market size and growth potential\n   - Key market drivers and barriers\n   - Regulatory environment impact\n\n2. **Competitive Landscape**\n   - Direct and indirect competitors\n   - Competitive advantages and gaps\n   - Market positioning analysis\n   - Pricing strategy comparison\n\n3. **SWOT Analysis**\n   - Internal strengths and capabilities\n   - Areas for improvement\n   - Market opportunities identification\n   - Threat assessment and risk factors\n\n4. **Strategic Recommendations**\n   - Growth strategy options\n   - Market entry/expansion strategies\n   - Operational efficiency improvements\n   - Innovation and differentiation opportunities\n\n5. **Implementation Roadmap**\n   - Priority initiatives and timeline\n   - Resource allocation requirements\n   - Key milestones and metrics\n   - Risk mitigation strategies\n\n**Specific Focus Areas:**\n- {{focus_area_1}}\n- {{focus_area_2}}\n- {{focus_area_3}}\n\nAnalysis Depth: {{analysis_depth}}\nTime Horizon: {{time_horizon}}\nBudget Considerations: {{budget_range}}`,\n        variables: [\"company_name\", \"industry\", \"business_stage\", \"target_market\", \"primary_challenge\", \"focus_area_1\", \"focus_area_2\", \"focus_area_3\", \"analysis_depth\", \"time_horizon\", \"budget_range\"],\n        category: \"business\",\n        tags: [\"business strategy\", \"market analysis\", \"consulting\", \"competitive analysis\", \"growth planning\"]\n      }\n    ];\n  }\n\n  /**\n   * Initialize sample prompts in the database\n   */\n  public async initializeSamplePrompts(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    try {\n      const samplePrompts = this.getSamplePrompts();\n      \n      for (const sample of samplePrompts) {\n        // Check if prompt already exists\n        const existing = await db.prepare(`\n          SELECT id FROM prompt_cards WHERE title = ?\n        `).get(sample.title);\n\n        if (!existing) {\n          const result = await db.prepare(`\n            INSERT INTO prompt_cards (title, description, prompt_template, variables)\n            VALUES (?, ?, ?, ?)\n          `).run(\n            sample.title,\n            sample.description,\n            sample.prompt_template,\n            JSON.stringify(sample.variables)\n          );\n\n          console.log(`Created sample prompt: ${sample.title} (ID: ${result.lastInsertRowid})`);\n        }\n      }\n\n      this.initialized = true;\n      console.log(`Sample prompts initialization completed`);\n    } catch (error) {\n      console.error('Failed to initialize sample prompts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get sample prompts by category\n   */\n  public getSamplePromptsByCategory(category: string): SamplePrompt[] {\n    return this.getSamplePrompts().filter(prompt => prompt.category === category);\n  }\n\n  /**\n   * Get all available categories\n   */\n  public getCategories(): string[] {\n    const categories = this.getSamplePrompts().map(prompt => prompt.category);\n    return [...new Set(categories)];\n  }\n\n  /**\n   * Create a database prompt card from a sample prompt\n   */\n  public async createPromptFromSample(sampleTitle: string): Promise<PromptCard | null> {\n    try {\n      const sample = this.getSamplePrompts().find(p => p.title === sampleTitle);\n      if (!sample) {\n        throw new Error(`Sample prompt '${sampleTitle}' not found`);\n      }\n\n      // Check if already exists\n      const existing = await db.prepare(`\n        SELECT * FROM prompt_cards WHERE title = ?\n      `).get(sample.title) as PromptCard;\n\n      if (existing) {\n        return {\n          ...existing,\n          variables: JSON.parse(existing.variables || '[]')\n        };\n      }\n\n      // Create new prompt card\n      const result = await db.prepare(`\n        INSERT INTO prompt_cards (title, description, prompt_template, variables)\n        VALUES (?, ?, ?, ?)\n      `).run(\n        sample.title,\n        sample.description,\n        sample.prompt_template,\n        JSON.stringify(sample.variables)\n      );\n\n      const newCard = await db.prepare(`\n        SELECT * FROM prompt_cards WHERE id = ?\n      `).get(result.lastInsertRowid) as PromptCard;\n\n      return {\n        ...newCard,\n        variables: JSON.parse(newCard.variables || '[]')\n      };\n    } catch (error) {\n      console.error('Failed to create prompt from sample:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get sample prompt preview without creating in database\n   */\n  public getSamplePromptPreview(title: string): SamplePrompt | null {\n    return this.getSamplePrompts().find(p => p.title === title) || null;\n  }\n\n  /**\n   * Validate sample prompt template\n   */\n  public validateSamplePrompt(sample: SamplePrompt): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check required fields\n    if (!sample.title?.trim()) {\n      errors.push('Title is required');\n    }\n\n    if (!sample.prompt_template?.trim()) {\n      errors.push('Prompt template is required');\n    }\n\n    if (!sample.description?.trim()) {\n      errors.push('Description is required');\n    }\n\n    // Check variables are used in template\n    if (sample.variables && sample.variables.length > 0) {\n      const templateVariables = this.extractVariablesFromTemplate(sample.prompt_template);\n      const unusedVariables = sample.variables.filter(v => !templateVariables.includes(v));\n      const undeclaredVariables = templateVariables.filter(v => !sample.variables.includes(v));\n\n      if (unusedVariables.length > 0) {\n        errors.push(`Unused variables declared: ${unusedVariables.join(', ')}`);\n      }\n\n      if (undeclaredVariables.length > 0) {\n        errors.push(`Variables used but not declared: ${undeclaredVariables.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Extract variables from template\n   */\n  private extractVariablesFromTemplate(template: string): string[] {\n    const matches = template.match(/\\{\\{(\\w+)\\}\\}/g) || [];\n    return [...new Set(matches.map(match => match.replace(/\\{\\{|\\}\\}/g, '')))];\n  }\n\n  /**\n   * Get sample prompt statistics\n   */\n  public getSamplePromptStats() {\n    const samples = this.getSamplePrompts();\n    const categories = this.getCategories();\n    \n    return {\n      totalSamples: samples.length,\n      categories: categories.length,\n      categoriesBreakdown: categories.map(cat => ({\n        category: cat,\n        count: samples.filter(s => s.category === cat).length\n      })),\n      averageVariables: Math.round(samples.reduce((sum, s) => sum + s.variables.length, 0) / samples.length),\n      totalVariables: samples.reduce((sum, s) => sum + s.variables.length, 0)\n    };\n  }\n}\n\nexport default SamplePromptService;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "796263b132bdbd8ba579926c4766a2d57337d56f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jrbkc58lf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jrbkc58lf();
cov_jrbkc58lf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jrbkc58lf().s[1]++;
exports.SamplePromptService = void 0;
const connection_1 =
/* istanbul ignore next */
(cov_jrbkc58lf().s[2]++, require("../database/connection"));
class SamplePromptService {
  constructor() {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[0]++;
    cov_jrbkc58lf().s[3]++;
    this.initialized = false;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[1]++;
    cov_jrbkc58lf().s[4]++;
    if (!SamplePromptService.instance) {
      /* istanbul ignore next */
      cov_jrbkc58lf().b[0][0]++;
      cov_jrbkc58lf().s[5]++;
      SamplePromptService.instance = new SamplePromptService();
    } else
    /* istanbul ignore next */
    {
      cov_jrbkc58lf().b[0][1]++;
    }
    cov_jrbkc58lf().s[6]++;
    return SamplePromptService.instance;
  }
  /**
   * Get all predefined sample prompts
   */
  getSamplePrompts() {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[2]++;
    cov_jrbkc58lf().s[7]++;
    return [{
      title: "Creative Story Generator",
      description: "Generate engaging creative stories based on specified genre, characters, and setting. Perfect for creative writing, content creation, and storytelling exercises.",
      prompt_template: `Write a {{genre}} story that takes place in {{setting}}. The main character is {{character_name}}, who is {{character_description}}. 

The story should:
- Be approximately {{word_count}} words long
- Include the theme of {{theme}}
- Have a clear beginning, middle, and end
- Be appropriate for {{target_audience}}

Style: {{writing_style}}

Create an engaging narrative that captures the reader's attention from the first sentence.`,
      variables: ["genre", "setting", "character_name", "character_description", "word_count", "theme", "target_audience", "writing_style"],
      category: "creative",
      tags: ["creative writing", "storytelling", "narrative", "fiction"]
    }, {
      title: "Technical Documentation Assistant",
      description: "Create comprehensive technical documentation for software projects, APIs, and systems. Ideal for developers, technical writers, and project managers.",
      prompt_template: `Create technical documentation for {{project_name}}.

Project Type: {{project_type}}
Technology Stack: {{tech_stack}}
Target Audience: {{audience_level}}

Please include the following sections:

1. **Overview**
   - Brief description of {{project_name}}
   - Key features and capabilities
   - Use cases and benefits

2. **Getting Started**
   - Prerequisites and requirements
   - Installation instructions
   - Basic setup and configuration

3. **{{documentation_focus}}**
   - Detailed implementation guide
   - Code examples and best practices
   - Common patterns and conventions

4. **API Reference** (if applicable)
   - Endpoint documentation
   - Request/response examples
   - Error handling and status codes

5. **Troubleshooting**
   - Common issues and solutions
   - Debugging tips
   - FAQ section

Format: Use clear markdown formatting with code blocks, tables, and examples where appropriate.
Tone: {{tone}} and suitable for {{audience_level}} developers.`,
      variables: ["project_name", "project_type", "tech_stack", "audience_level", "documentation_focus", "tone"],
      category: "technical",
      tags: ["documentation", "technical writing", "API", "software", "development"]
    }, {
      title: "Data Analysis Query Builder",
      description: "Generate comprehensive data analysis queries and insights for business intelligence, research, and decision-making processes.",
      prompt_template: `Perform a data analysis on {{dataset_name}} with the following specifications:

**Analysis Objective:** {{analysis_goal}}
**Data Source:** {{data_source}}
**Time Period:** {{time_period}}
**Key Metrics:** {{key_metrics}}

Please provide:

1. **Data Exploration**
   - Overview of the dataset structure
   - Key variables and their distributions
   - Data quality assessment and missing values

2. **Statistical Analysis**
   - Descriptive statistics for {{key_metrics}}
   - Correlation analysis between variables
   - Trend analysis over {{time_period}}

3. **Insights and Findings**
   - Key patterns and relationships discovered
   - Significant trends or anomalies
   - Business implications of findings

4. **Query Examples**
   - SQL/Python code for key calculations
   - Visualization recommendations
   - Data filtering and aggregation methods

5. **Recommendations**
   - Actionable insights based on analysis
   - Further analysis suggestions
   - Data collection improvements

Analysis Level: {{complexity_level}}
Output Format: {{output_format}}
Include visualizations: {{include_charts}}`,
      variables: ["dataset_name", "analysis_goal", "data_source", "time_period", "key_metrics", "complexity_level", "output_format", "include_charts"],
      category: "analytics",
      tags: ["data analysis", "business intelligence", "statistics", "SQL", "insights"]
    }, {
      title: "Problem-Solving Framework",
      description: "Systematic approach to analyzing and solving complex problems using structured thinking methodologies. Great for consulting, project management, and strategic planning.",
      prompt_template: `Analyze and provide a solution framework for the following problem:

**Problem Statement:** {{problem_description}}
**Context:** {{problem_context}}
**Stakeholders:** {{stakeholders}}
**Constraints:** {{constraints}}
**Timeline:** {{timeline}}

Using the {{methodology}} approach, please provide:

1. **Problem Definition**
   - Root cause analysis
   - Problem scope and boundaries
   - Impact assessment on {{stakeholders}}

2. **Solution Framework**
   - Multiple solution alternatives
   - Pros and cons for each approach
   - Resource requirements and feasibility

3. **Implementation Plan**
   - Step-by-step action plan
   - Timeline and milestones
   - Risk assessment and mitigation strategies

4. **Success Metrics**
   - Key performance indicators
   - Measurement methods
   - Success criteria definition

5. **Recommendations**
   - Preferred solution with justification
   - Next steps and immediate actions
   - Long-term considerations

Analysis Depth: {{analysis_depth}}
Decision Framework: {{decision_criteria}}
Priority Level: {{priority_level}}`,
      variables: ["problem_description", "problem_context", "stakeholders", "constraints", "timeline", "methodology", "analysis_depth", "decision_criteria", "priority_level"],
      category: "problem-solving",
      tags: ["problem solving", "analysis", "strategy", "consulting", "framework"]
    }, {
      title: "Code Generation Assistant",
      description: "Generate well-structured, documented code with best practices, error handling, and comprehensive testing. Perfect for rapid prototyping and development.",
      prompt_template: `Generate {{language}} code for the following requirements:

**Project:** {{project_name}}
**Functionality:** {{functionality_description}}
**Framework/Library:** {{framework}}
**Code Style:** {{coding_style}}

Requirements:
{{requirements}}

Please provide:

1. **Main Implementation**
   - Clean, well-structured code
   - Proper error handling and validation
   - Performance optimizations where applicable
   - Security best practices

2. **Documentation**
   - Comprehensive code comments
   - Function/method documentation
   - Usage examples
   - API documentation (if applicable)

3. **Testing**
   - Unit test cases
   - Integration test examples
   - Edge case handling
   - Mock data and fixtures

4. **Configuration**
   - Environment setup instructions
   - Dependencies and requirements
   - Configuration files (if needed)
   - Deployment considerations

Code Quality Standards:
- Follow {{coding_style}} conventions
- Include type hints/annotations (where applicable)
- Implement proper logging
- Handle edge cases and errors gracefully
- Optimize for {{performance_priority}}

Target Environment: {{target_environment}}
Complexity Level: {{complexity_level}}`,
      variables: ["language", "project_name", "functionality_description", "framework", "coding_style", "requirements", "performance_priority", "target_environment", "complexity_level"],
      category: "development",
      tags: ["code generation", "programming", "development", "testing", "best practices"]
    }, {
      title: "Business Strategy Consultant",
      description: "Comprehensive business analysis and strategic planning assistant for market research, competitive analysis, and growth strategies.",
      prompt_template: `Provide a strategic business analysis for {{company_name}} in the {{industry}} industry.

**Company Profile:**
- Company: {{company_name}}
- Industry: {{industry}}
- Current Stage: {{business_stage}}
- Market Focus: {{target_market}}
- Key Challenge: {{primary_challenge}}

**Analysis Framework:**

1. **Market Analysis**
   - Industry overview and trends
   - Market size and growth potential
   - Key market drivers and barriers
   - Regulatory environment impact

2. **Competitive Landscape**
   - Direct and indirect competitors
   - Competitive advantages and gaps
   - Market positioning analysis
   - Pricing strategy comparison

3. **SWOT Analysis**
   - Internal strengths and capabilities
   - Areas for improvement
   - Market opportunities identification
   - Threat assessment and risk factors

4. **Strategic Recommendations**
   - Growth strategy options
   - Market entry/expansion strategies
   - Operational efficiency improvements
   - Innovation and differentiation opportunities

5. **Implementation Roadmap**
   - Priority initiatives and timeline
   - Resource allocation requirements
   - Key milestones and metrics
   - Risk mitigation strategies

**Specific Focus Areas:**
- {{focus_area_1}}
- {{focus_area_2}}
- {{focus_area_3}}

Analysis Depth: {{analysis_depth}}
Time Horizon: {{time_horizon}}
Budget Considerations: {{budget_range}}`,
      variables: ["company_name", "industry", "business_stage", "target_market", "primary_challenge", "focus_area_1", "focus_area_2", "focus_area_3", "analysis_depth", "time_horizon", "budget_range"],
      category: "business",
      tags: ["business strategy", "market analysis", "consulting", "competitive analysis", "growth planning"]
    }];
  }
  /**
   * Initialize sample prompts in the database
   */
  async initializeSamplePrompts() {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[3]++;
    cov_jrbkc58lf().s[8]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_jrbkc58lf().b[1][0]++;
      cov_jrbkc58lf().s[9]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_jrbkc58lf().b[1][1]++;
    }
    cov_jrbkc58lf().s[10]++;
    try {
      const samplePrompts =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[11]++, this.getSamplePrompts());
      /* istanbul ignore next */
      cov_jrbkc58lf().s[12]++;
      for (const sample of samplePrompts) {
        // Check if prompt already exists
        const existing =
        /* istanbul ignore next */
        (cov_jrbkc58lf().s[13]++, await connection_1.db.prepare(`
          SELECT id FROM prompt_cards WHERE title = ?
        `).get(sample.title));
        /* istanbul ignore next */
        cov_jrbkc58lf().s[14]++;
        if (!existing) {
          /* istanbul ignore next */
          cov_jrbkc58lf().b[2][0]++;
          const result =
          /* istanbul ignore next */
          (cov_jrbkc58lf().s[15]++, await connection_1.db.prepare(`
            INSERT INTO prompt_cards (title, description, prompt_template, variables)
            VALUES (?, ?, ?, ?)
          `).run(sample.title, sample.description, sample.prompt_template, JSON.stringify(sample.variables)));
          /* istanbul ignore next */
          cov_jrbkc58lf().s[16]++;
          console.log(`Created sample prompt: ${sample.title} (ID: ${result.lastInsertRowid})`);
        } else
        /* istanbul ignore next */
        {
          cov_jrbkc58lf().b[2][1]++;
        }
      }
      /* istanbul ignore next */
      cov_jrbkc58lf().s[17]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_jrbkc58lf().s[18]++;
      console.log(`Sample prompts initialization completed`);
    } catch (error) {
      /* istanbul ignore next */
      cov_jrbkc58lf().s[19]++;
      console.error('Failed to initialize sample prompts:', error);
      /* istanbul ignore next */
      cov_jrbkc58lf().s[20]++;
      throw error;
    }
  }
  /**
   * Get sample prompts by category
   */
  getSamplePromptsByCategory(category) {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[4]++;
    cov_jrbkc58lf().s[21]++;
    return this.getSamplePrompts().filter(prompt => {
      /* istanbul ignore next */
      cov_jrbkc58lf().f[5]++;
      cov_jrbkc58lf().s[22]++;
      return prompt.category === category;
    });
  }
  /**
   * Get all available categories
   */
  getCategories() {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[6]++;
    const categories =
    /* istanbul ignore next */
    (cov_jrbkc58lf().s[23]++, this.getSamplePrompts().map(prompt => {
      /* istanbul ignore next */
      cov_jrbkc58lf().f[7]++;
      cov_jrbkc58lf().s[24]++;
      return prompt.category;
    }));
    /* istanbul ignore next */
    cov_jrbkc58lf().s[25]++;
    return [...new Set(categories)];
  }
  /**
   * Create a database prompt card from a sample prompt
   */
  async createPromptFromSample(sampleTitle) {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[8]++;
    cov_jrbkc58lf().s[26]++;
    try {
      const sample =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[27]++, this.getSamplePrompts().find(p => {
        /* istanbul ignore next */
        cov_jrbkc58lf().f[9]++;
        cov_jrbkc58lf().s[28]++;
        return p.title === sampleTitle;
      }));
      /* istanbul ignore next */
      cov_jrbkc58lf().s[29]++;
      if (!sample) {
        /* istanbul ignore next */
        cov_jrbkc58lf().b[3][0]++;
        cov_jrbkc58lf().s[30]++;
        throw new Error(`Sample prompt '${sampleTitle}' not found`);
      } else
      /* istanbul ignore next */
      {
        cov_jrbkc58lf().b[3][1]++;
      }
      // Check if already exists
      const existing =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[31]++, await connection_1.db.prepare(`
        SELECT * FROM prompt_cards WHERE title = ?
      `).get(sample.title));
      /* istanbul ignore next */
      cov_jrbkc58lf().s[32]++;
      if (existing) {
        /* istanbul ignore next */
        cov_jrbkc58lf().b[4][0]++;
        cov_jrbkc58lf().s[33]++;
        return {
          ...existing,
          variables: JSON.parse(
          /* istanbul ignore next */
          (cov_jrbkc58lf().b[5][0]++, existing.variables) ||
          /* istanbul ignore next */
          (cov_jrbkc58lf().b[5][1]++, '[]'))
        };
      } else
      /* istanbul ignore next */
      {
        cov_jrbkc58lf().b[4][1]++;
      }
      // Create new prompt card
      const result =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[34]++, await connection_1.db.prepare(`
        INSERT INTO prompt_cards (title, description, prompt_template, variables)
        VALUES (?, ?, ?, ?)
      `).run(sample.title, sample.description, sample.prompt_template, JSON.stringify(sample.variables)));
      const newCard =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[35]++, await connection_1.db.prepare(`
        SELECT * FROM prompt_cards WHERE id = ?
      `).get(result.lastInsertRowid));
      /* istanbul ignore next */
      cov_jrbkc58lf().s[36]++;
      return {
        ...newCard,
        variables: JSON.parse(
        /* istanbul ignore next */
        (cov_jrbkc58lf().b[6][0]++, newCard.variables) ||
        /* istanbul ignore next */
        (cov_jrbkc58lf().b[6][1]++, '[]'))
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_jrbkc58lf().s[37]++;
      console.error('Failed to create prompt from sample:', error);
      /* istanbul ignore next */
      cov_jrbkc58lf().s[38]++;
      throw error;
    }
  }
  /**
   * Get sample prompt preview without creating in database
   */
  getSamplePromptPreview(title) {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[10]++;
    cov_jrbkc58lf().s[39]++;
    return /* istanbul ignore next */(cov_jrbkc58lf().b[7][0]++, this.getSamplePrompts().find(p => {
      /* istanbul ignore next */
      cov_jrbkc58lf().f[11]++;
      cov_jrbkc58lf().s[40]++;
      return p.title === title;
    })) ||
    /* istanbul ignore next */
    (cov_jrbkc58lf().b[7][1]++, null);
  }
  /**
   * Validate sample prompt template
   */
  validateSamplePrompt(sample) {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[12]++;
    const errors =
    /* istanbul ignore next */
    (cov_jrbkc58lf().s[41]++, []);
    // Check required fields
    /* istanbul ignore next */
    cov_jrbkc58lf().s[42]++;
    if (!sample.title?.trim()) {
      /* istanbul ignore next */
      cov_jrbkc58lf().b[8][0]++;
      cov_jrbkc58lf().s[43]++;
      errors.push('Title is required');
    } else
    /* istanbul ignore next */
    {
      cov_jrbkc58lf().b[8][1]++;
    }
    cov_jrbkc58lf().s[44]++;
    if (!sample.prompt_template?.trim()) {
      /* istanbul ignore next */
      cov_jrbkc58lf().b[9][0]++;
      cov_jrbkc58lf().s[45]++;
      errors.push('Prompt template is required');
    } else
    /* istanbul ignore next */
    {
      cov_jrbkc58lf().b[9][1]++;
    }
    cov_jrbkc58lf().s[46]++;
    if (!sample.description?.trim()) {
      /* istanbul ignore next */
      cov_jrbkc58lf().b[10][0]++;
      cov_jrbkc58lf().s[47]++;
      errors.push('Description is required');
    } else
    /* istanbul ignore next */
    {
      cov_jrbkc58lf().b[10][1]++;
    }
    // Check variables are used in template
    cov_jrbkc58lf().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_jrbkc58lf().b[12][0]++, sample.variables) &&
    /* istanbul ignore next */
    (cov_jrbkc58lf().b[12][1]++, sample.variables.length > 0)) {
      /* istanbul ignore next */
      cov_jrbkc58lf().b[11][0]++;
      const templateVariables =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[49]++, this.extractVariablesFromTemplate(sample.prompt_template));
      const unusedVariables =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[50]++, sample.variables.filter(v => {
        /* istanbul ignore next */
        cov_jrbkc58lf().f[13]++;
        cov_jrbkc58lf().s[51]++;
        return !templateVariables.includes(v);
      }));
      const undeclaredVariables =
      /* istanbul ignore next */
      (cov_jrbkc58lf().s[52]++, templateVariables.filter(v => {
        /* istanbul ignore next */
        cov_jrbkc58lf().f[14]++;
        cov_jrbkc58lf().s[53]++;
        return !sample.variables.includes(v);
      }));
      /* istanbul ignore next */
      cov_jrbkc58lf().s[54]++;
      if (unusedVariables.length > 0) {
        /* istanbul ignore next */
        cov_jrbkc58lf().b[13][0]++;
        cov_jrbkc58lf().s[55]++;
        errors.push(`Unused variables declared: ${unusedVariables.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_jrbkc58lf().b[13][1]++;
      }
      cov_jrbkc58lf().s[56]++;
      if (undeclaredVariables.length > 0) {
        /* istanbul ignore next */
        cov_jrbkc58lf().b[14][0]++;
        cov_jrbkc58lf().s[57]++;
        errors.push(`Variables used but not declared: ${undeclaredVariables.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_jrbkc58lf().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_jrbkc58lf().b[11][1]++;
    }
    cov_jrbkc58lf().s[58]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }
  /**
   * Extract variables from template
   */
  extractVariablesFromTemplate(template) {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[15]++;
    const matches =
    /* istanbul ignore next */
    (cov_jrbkc58lf().s[59]++,
    /* istanbul ignore next */
    (cov_jrbkc58lf().b[15][0]++, template.match(/\{\{(\w+)\}\}/g)) ||
    /* istanbul ignore next */
    (cov_jrbkc58lf().b[15][1]++, []));
    /* istanbul ignore next */
    cov_jrbkc58lf().s[60]++;
    return [...new Set(matches.map(match => {
      /* istanbul ignore next */
      cov_jrbkc58lf().f[16]++;
      cov_jrbkc58lf().s[61]++;
      return match.replace(/\{\{|\}\}/g, '');
    }))];
  }
  /**
   * Get sample prompt statistics
   */
  getSamplePromptStats() {
    /* istanbul ignore next */
    cov_jrbkc58lf().f[17]++;
    const samples =
    /* istanbul ignore next */
    (cov_jrbkc58lf().s[62]++, this.getSamplePrompts());
    const categories =
    /* istanbul ignore next */
    (cov_jrbkc58lf().s[63]++, this.getCategories());
    /* istanbul ignore next */
    cov_jrbkc58lf().s[64]++;
    return {
      totalSamples: samples.length,
      categories: categories.length,
      categoriesBreakdown: categories.map(cat => {
        /* istanbul ignore next */
        cov_jrbkc58lf().f[18]++;
        cov_jrbkc58lf().s[65]++;
        return {
          category: cat,
          count: samples.filter(s => {
            /* istanbul ignore next */
            cov_jrbkc58lf().f[19]++;
            cov_jrbkc58lf().s[66]++;
            return s.category === cat;
          }).length
        };
      }),
      averageVariables: Math.round(samples.reduce((sum, s) => {
        /* istanbul ignore next */
        cov_jrbkc58lf().f[20]++;
        cov_jrbkc58lf().s[67]++;
        return sum + s.variables.length;
      }, 0) / samples.length),
      totalVariables: samples.reduce((sum, s) => {
        /* istanbul ignore next */
        cov_jrbkc58lf().f[21]++;
        cov_jrbkc58lf().s[68]++;
        return sum + s.variables.length;
      }, 0)
    };
  }
}
/* istanbul ignore next */
cov_jrbkc58lf().s[69]++;
exports.SamplePromptService = SamplePromptService;
/* istanbul ignore next */
cov_jrbkc58lf().s[70]++;
exports.default = SamplePromptService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,