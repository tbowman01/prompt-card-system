{"version":3,"names":["connection_1","cov_jrbkc58lf","s","require","SamplePromptService","constructor","f","initialized","getInstance","instance","b","getSamplePrompts","title","description","prompt_template","variables","category","tags","initializeSamplePrompts","samplePrompts","sample","existing","db","prepare","get","result","run","JSON","stringify","console","log","lastInsertRowid","error","getSamplePromptsByCategory","filter","prompt","getCategories","categories","map","Set","createPromptFromSample","sampleTitle","find","p","Error","parse","newCard","getSamplePromptPreview","validateSamplePrompt","errors","trim","push","length","templateVariables","extractVariablesFromTemplate","unusedVariables","v","includes","undeclaredVariables","join","isValid","template","matches","match","replace","getSamplePromptStats","samples","totalSamples","categoriesBreakdown","cat","count","averageVariables","Math","round","reduce","sum","totalVariables","exports","default"],"sources":["/workspaces/prompt-card-system/backend/src/services/SamplePromptService.ts"],"sourcesContent":["import { db } from '../database/connection';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\n\nexport interface SamplePrompt {\n  title: string;\n  description: string;\n  prompt_template: string;\n  variables: string[];\n  category: string;\n  tags: string[];\n}\n\nexport class SamplePromptService {\n  private static instance: SamplePromptService;\n  private initialized = false;\n\n  public static getInstance(): SamplePromptService {\n    if (!SamplePromptService.instance) {\n      SamplePromptService.instance = new SamplePromptService();\n    }\n    return SamplePromptService.instance;\n  }\n\n  /**\n   * Get all predefined sample prompts\n   */\n  public getSamplePrompts(): SamplePrompt[] {\n    return [\n      {\n        title: \"Creative Story Generator\",\n        description: \"Generate engaging creative stories based on specified genre, characters, and setting. Perfect for creative writing, content creation, and storytelling exercises.\",\n        prompt_template: `Write a {{genre}} story that takes place in {{setting}}. The main character is {{character_name}}, who is {{character_description}}. \n\nThe story should:\n- Be approximately {{word_count}} words long\n- Include the theme of {{theme}}\n- Have a clear beginning, middle, and end\n- Be appropriate for {{target_audience}}\n\nStyle: {{writing_style}}\n\nCreate an engaging narrative that captures the reader's attention from the first sentence.`,\n        variables: [\"genre\", \"setting\", \"character_name\", \"character_description\", \"word_count\", \"theme\", \"target_audience\", \"writing_style\"],\n        category: \"creative\",\n        tags: [\"creative writing\", \"storytelling\", \"narrative\", \"fiction\"]\n      },\n      {\n        title: \"Technical Documentation Assistant\",\n        description: \"Create comprehensive technical documentation for software projects, APIs, and systems. Ideal for developers, technical writers, and project managers.\",\n        prompt_template: `Create technical documentation for {{project_name}}.\n\nProject Type: {{project_type}}\nTechnology Stack: {{tech_stack}}\nTarget Audience: {{audience_level}}\n\nPlease include the following sections:\n\n1. **Overview**\n   - Brief description of {{project_name}}\n   - Key features and capabilities\n   - Use cases and benefits\n\n2. **Getting Started**\n   - Prerequisites and requirements\n   - Installation instructions\n   - Basic setup and configuration\n\n3. **{{documentation_focus}}**\n   - Detailed implementation guide\n   - Code examples and best practices\n   - Common patterns and conventions\n\n4. **API Reference** (if applicable)\n   - Endpoint documentation\n   - Request/response examples\n   - Error handling and status codes\n\n5. **Troubleshooting**\n   - Common issues and solutions\n   - Debugging tips\n   - FAQ section\n\nFormat: Use clear markdown formatting with code blocks, tables, and examples where appropriate.\nTone: {{tone}} and suitable for {{audience_level}} developers.`,\n        variables: [\"project_name\", \"project_type\", \"tech_stack\", \"audience_level\", \"documentation_focus\", \"tone\"],\n        category: \"technical\",\n        tags: [\"documentation\", \"technical writing\", \"API\", \"software\", \"development\"]\n      },\n      {\n        title: \"Data Analysis Query Builder\",\n        description: \"Generate comprehensive data analysis queries and insights for business intelligence, research, and decision-making processes.\",\n        prompt_template: `Perform a data analysis on {{dataset_name}} with the following specifications:\n\n**Analysis Objective:** {{analysis_goal}}\n**Data Source:** {{data_source}}\n**Time Period:** {{time_period}}\n**Key Metrics:** {{key_metrics}}\n\nPlease provide:\n\n1. **Data Exploration**\n   - Overview of the dataset structure\n   - Key variables and their distributions\n   - Data quality assessment and missing values\n\n2. **Statistical Analysis**\n   - Descriptive statistics for {{key_metrics}}\n   - Correlation analysis between variables\n   - Trend analysis over {{time_period}}\n\n3. **Insights and Findings**\n   - Key patterns and relationships discovered\n   - Significant trends or anomalies\n   - Business implications of findings\n\n4. **Query Examples**\n   - SQL/Python code for key calculations\n   - Visualization recommendations\n   - Data filtering and aggregation methods\n\n5. **Recommendations**\n   - Actionable insights based on analysis\n   - Further analysis suggestions\n   - Data collection improvements\n\nAnalysis Level: {{complexity_level}}\nOutput Format: {{output_format}}\nInclude visualizations: {{include_charts}}`,\n        variables: [\"dataset_name\", \"analysis_goal\", \"data_source\", \"time_period\", \"key_metrics\", \"complexity_level\", \"output_format\", \"include_charts\"],\n        category: \"analytics\",\n        tags: [\"data analysis\", \"business intelligence\", \"statistics\", \"SQL\", \"insights\"]\n      },\n      {\n        title: \"Problem-Solving Framework\",\n        description: \"Systematic approach to analyzing and solving complex problems using structured thinking methodologies. Great for consulting, project management, and strategic planning.\",\n        prompt_template: `Analyze and provide a solution framework for the following problem:\n\n**Problem Statement:** {{problem_description}}\n**Context:** {{problem_context}}\n**Stakeholders:** {{stakeholders}}\n**Constraints:** {{constraints}}\n**Timeline:** {{timeline}}\n\nUsing the {{methodology}} approach, please provide:\n\n1. **Problem Definition**\n   - Root cause analysis\n   - Problem scope and boundaries\n   - Impact assessment on {{stakeholders}}\n\n2. **Solution Framework**\n   - Multiple solution alternatives\n   - Pros and cons for each approach\n   - Resource requirements and feasibility\n\n3. **Implementation Plan**\n   - Step-by-step action plan\n   - Timeline and milestones\n   - Risk assessment and mitigation strategies\n\n4. **Success Metrics**\n   - Key performance indicators\n   - Measurement methods\n   - Success criteria definition\n\n5. **Recommendations**\n   - Preferred solution with justification\n   - Next steps and immediate actions\n   - Long-term considerations\n\nAnalysis Depth: {{analysis_depth}}\nDecision Framework: {{decision_criteria}}\nPriority Level: {{priority_level}}`,\n        variables: [\"problem_description\", \"problem_context\", \"stakeholders\", \"constraints\", \"timeline\", \"methodology\", \"analysis_depth\", \"decision_criteria\", \"priority_level\"],\n        category: \"problem-solving\",\n        tags: [\"problem solving\", \"analysis\", \"strategy\", \"consulting\", \"framework\"]\n      },\n      {\n        title: \"Code Generation Assistant\",\n        description: \"Generate well-structured, documented code with best practices, error handling, and comprehensive testing. Perfect for rapid prototyping and development.\",\n        prompt_template: `Generate {{language}} code for the following requirements:\n\n**Project:** {{project_name}}\n**Functionality:** {{functionality_description}}\n**Framework/Library:** {{framework}}\n**Code Style:** {{coding_style}}\n\nRequirements:\n{{requirements}}\n\nPlease provide:\n\n1. **Main Implementation**\n   - Clean, well-structured code\n   - Proper error handling and validation\n   - Performance optimizations where applicable\n   - Security best practices\n\n2. **Documentation**\n   - Comprehensive code comments\n   - Function/method documentation\n   - Usage examples\n   - API documentation (if applicable)\n\n3. **Testing**\n   - Unit test cases\n   - Integration test examples\n   - Edge case handling\n   - Mock data and fixtures\n\n4. **Configuration**\n   - Environment setup instructions\n   - Dependencies and requirements\n   - Configuration files (if needed)\n   - Deployment considerations\n\nCode Quality Standards:\n- Follow {{coding_style}} conventions\n- Include type hints/annotations (where applicable)\n- Implement proper logging\n- Handle edge cases and errors gracefully\n- Optimize for {{performance_priority}}\n\nTarget Environment: {{target_environment}}\nComplexity Level: {{complexity_level}}`,\n        variables: [\"language\", \"project_name\", \"functionality_description\", \"framework\", \"coding_style\", \"requirements\", \"performance_priority\", \"target_environment\", \"complexity_level\"],\n        category: \"development\",\n        tags: [\"code generation\", \"programming\", \"development\", \"testing\", \"best practices\"]\n      },\n      {\n        title: \"Business Strategy Consultant\",\n        description: \"Comprehensive business analysis and strategic planning assistant for market research, competitive analysis, and growth strategies.\",\n        prompt_template: `Provide a strategic business analysis for {{company_name}} in the {{industry}} industry.\n\n**Company Profile:**\n- Company: {{company_name}}\n- Industry: {{industry}}\n- Current Stage: {{business_stage}}\n- Market Focus: {{target_market}}\n- Key Challenge: {{primary_challenge}}\n\n**Analysis Framework:**\n\n1. **Market Analysis**\n   - Industry overview and trends\n   - Market size and growth potential\n   - Key market drivers and barriers\n   - Regulatory environment impact\n\n2. **Competitive Landscape**\n   - Direct and indirect competitors\n   - Competitive advantages and gaps\n   - Market positioning analysis\n   - Pricing strategy comparison\n\n3. **SWOT Analysis**\n   - Internal strengths and capabilities\n   - Areas for improvement\n   - Market opportunities identification\n   - Threat assessment and risk factors\n\n4. **Strategic Recommendations**\n   - Growth strategy options\n   - Market entry/expansion strategies\n   - Operational efficiency improvements\n   - Innovation and differentiation opportunities\n\n5. **Implementation Roadmap**\n   - Priority initiatives and timeline\n   - Resource allocation requirements\n   - Key milestones and metrics\n   - Risk mitigation strategies\n\n**Specific Focus Areas:**\n- {{focus_area_1}}\n- {{focus_area_2}}\n- {{focus_area_3}}\n\nAnalysis Depth: {{analysis_depth}}\nTime Horizon: {{time_horizon}}\nBudget Considerations: {{budget_range}}`,\n        variables: [\"company_name\", \"industry\", \"business_stage\", \"target_market\", \"primary_challenge\", \"focus_area_1\", \"focus_area_2\", \"focus_area_3\", \"analysis_depth\", \"time_horizon\", \"budget_range\"],\n        category: \"business\",\n        tags: [\"business strategy\", \"market analysis\", \"consulting\", \"competitive analysis\", \"growth planning\"]\n      }\n    ];\n  }\n\n  /**\n   * Initialize sample prompts in the database\n   */\n  public async initializeSamplePrompts(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    try {\n      const samplePrompts = this.getSamplePrompts();\n      \n      for (const sample of samplePrompts) {\n        // Check if prompt already exists\n        const existing = await db.prepare(`\n          SELECT id FROM prompt_cards WHERE title = ?\n        `).get(sample.title);\n\n        if (!existing) {\n          const result = await db.prepare(`\n            INSERT INTO prompt_cards (title, description, prompt_template, variables)\n            VALUES (?, ?, ?, ?)\n          `).run(\n            sample.title,\n            sample.description,\n            sample.prompt_template,\n            JSON.stringify(sample.variables)\n          );\n\n          console.log(`Created sample prompt: ${sample.title} (ID: ${result.lastInsertRowid})`);\n        }\n      }\n\n      this.initialized = true;\n      console.log(`Sample prompts initialization completed`);\n    } catch (error) {\n      console.error('Failed to initialize sample prompts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get sample prompts by category\n   */\n  public getSamplePromptsByCategory(category: string): SamplePrompt[] {\n    return this.getSamplePrompts().filter(prompt => prompt.category === category);\n  }\n\n  /**\n   * Get all available categories\n   */\n  public getCategories(): string[] {\n    const categories = this.getSamplePrompts().map(prompt => prompt.category);\n    return [...new Set(categories)];\n  }\n\n  /**\n   * Create a database prompt card from a sample prompt\n   */\n  public async createPromptFromSample(sampleTitle: string): Promise<PromptCard | null> {\n    try {\n      const sample = this.getSamplePrompts().find(p => p.title === sampleTitle);\n      if (!sample) {\n        throw new Error(`Sample prompt '${sampleTitle}' not found`);\n      }\n\n      // Check if already exists\n      const existing = await db.prepare(`\n        SELECT * FROM prompt_cards WHERE title = ?\n      `).get(sample.title) as PromptCard;\n\n      if (existing) {\n        return {\n          ...existing,\n          variables: JSON.parse(existing.variables || '[]')\n        };\n      }\n\n      // Create new prompt card\n      const result = await db.prepare(`\n        INSERT INTO prompt_cards (title, description, prompt_template, variables)\n        VALUES (?, ?, ?, ?)\n      `).run(\n        sample.title,\n        sample.description,\n        sample.prompt_template,\n        JSON.stringify(sample.variables)\n      );\n\n      const newCard = await db.prepare(`\n        SELECT * FROM prompt_cards WHERE id = ?\n      `).get(result.lastInsertRowid) as PromptCard;\n\n      return {\n        ...newCard,\n        variables: JSON.parse(newCard.variables || '[]')\n      };\n    } catch (error) {\n      console.error('Failed to create prompt from sample:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get sample prompt preview without creating in database\n   */\n  public getSamplePromptPreview(title: string): SamplePrompt | null {\n    return this.getSamplePrompts().find(p => p.title === title) || null;\n  }\n\n  /**\n   * Validate sample prompt template\n   */\n  public validateSamplePrompt(sample: SamplePrompt): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check required fields\n    if (!sample.title?.trim()) {\n      errors.push('Title is required');\n    }\n\n    if (!sample.prompt_template?.trim()) {\n      errors.push('Prompt template is required');\n    }\n\n    if (!sample.description?.trim()) {\n      errors.push('Description is required');\n    }\n\n    // Check variables are used in template\n    if (sample.variables && sample.variables.length > 0) {\n      const templateVariables = this.extractVariablesFromTemplate(sample.prompt_template);\n      const unusedVariables = sample.variables.filter(v => !templateVariables.includes(v));\n      const undeclaredVariables = templateVariables.filter(v => !sample.variables.includes(v));\n\n      if (unusedVariables.length > 0) {\n        errors.push(`Unused variables declared: ${unusedVariables.join(', ')}`);\n      }\n\n      if (undeclaredVariables.length > 0) {\n        errors.push(`Variables used but not declared: ${undeclaredVariables.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Extract variables from template\n   */\n  private extractVariablesFromTemplate(template: string): string[] {\n    const matches = template.match(/\\{\\{(\\w+)\\}\\}/g) || [];\n    return [...new Set(matches.map(match => match.replace(/\\{\\{|\\}\\}/g, '')))];\n  }\n\n  /**\n   * Get sample prompt statistics\n   */\n  public getSamplePromptStats() {\n    const samples = this.getSamplePrompts();\n    const categories = this.getCategories();\n    \n    return {\n      totalSamples: samples.length,\n      categories: categories.length,\n      categoriesBreakdown: categories.map(cat => ({\n        category: cat,\n        count: samples.filter(s => s.category === cat).length\n      })),\n      averageVariables: Math.round(samples.reduce((sum, s) => sum + s.variables.length, 0) / samples.length),\n      totalVariables: samples.reduce((sum, s) => sum + s.variables.length, 0)\n    };\n  }\n}\n\nexport default SamplePromptService;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}