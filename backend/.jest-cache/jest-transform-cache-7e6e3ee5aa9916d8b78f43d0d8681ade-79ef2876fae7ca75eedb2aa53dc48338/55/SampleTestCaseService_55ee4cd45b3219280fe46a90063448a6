b3b8d809fc1c0f30f39691bc01ab9246
"use strict";

/* istanbul ignore next */
function cov_15w6b75clr() {
  var path = "/workspaces/prompt-card-system/backend/src/services/SampleTestCaseService.ts";
  var hash = "c5698e931fe509ef456d2bccf2bb738ae14c9251";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/SampleTestCaseService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 9,
          column: 9
        }
      },
      "4": {
        start: {
          line: 8,
          column: 12
        },
        end: {
          line: 8,
          column: 73
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 46
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 376,
          column: 10
        }
      },
      "7": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "8": {
        start: {
          line: 383,
          column: 36
        },
        end: {
          line: 383,
          column: 74
        }
      },
      "9": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "10": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 85
        }
      },
      "11": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 26
        }
      },
      "12": {
        start: {
          line: 388,
          column: 37
        },
        end: {
          line: 388,
          column: 39
        }
      },
      "13": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "14": {
        start: {
          line: 391,
          column: 33
        },
        end: {
          line: 393,
          column: 43
        }
      },
      "15": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 408,
          column: 17
        }
      },
      "16": {
        start: {
          line: 395,
          column: 35
        },
        end: {
          line: 398,
          column: 156
        }
      },
      "17": {
        start: {
          line: 399,
          column: 40
        },
        end: {
          line: 401,
          column: 40
        }
      },
      "18": {
        start: {
          line: 402,
          column: 20
        },
        end: {
          line: 406,
          column: 23
        }
      },
      "19": {
        start: {
          line: 407,
          column: 20
        },
        end: {
          line: 407,
          column: 98
        }
      },
      "20": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 36
        }
      },
      "21": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 413,
          column: 76
        }
      },
      "22": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 24
        }
      },
      "23": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 60
        }
      },
      "24": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 54
        }
      },
      "25": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "26": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 438,
          column: 55
        }
      },
      "27": {
        start: {
          line: 437,
          column: 75
        },
        end: {
          line: 437,
          column: 78
        }
      },
      "28": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "29": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 73
        }
      },
      "30": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 101
        }
      },
      "31": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 69
        }
      },
      "32": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 24
        }
      },
      "33": {
        start: {
          line: 453,
          column: 23
        },
        end: {
          line: 453,
          column: 25
        }
      },
      "34": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 456,
          column: 9
        }
      },
      "35": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 54
        }
      },
      "36": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "37": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 56
        }
      },
      "38": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 462,
          column: 9
        }
      },
      "39": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 62
        }
      },
      "40": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "41": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 475,
          column: 15
        }
      },
      "42": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 468,
          column: 17
        }
      },
      "43": {
        start: {
          line: 467,
          column: 20
        },
        end: {
          line: 467,
          column: 76
        }
      },
      "44": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 471,
          column: 17
        }
      },
      "45": {
        start: {
          line: 470,
          column: 20
        },
        end: {
          line: 470,
          column: 86
        }
      },
      "46": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "47": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 83
        }
      },
      "48": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 480,
          column: 10
        }
      },
      "49": {
        start: {
          line: 486,
          column: 26
        },
        end: {
          line: 486,
          column: 51
        }
      },
      "50": {
        start: {
          line: 487,
          column: 29
        },
        end: {
          line: 487,
          column: 51
        }
      },
      "51": {
        start: {
          line: 488,
          column: 31
        },
        end: {
          line: 488,
          column: 100
        }
      },
      "52": {
        start: {
          line: 488,
          column: 67
        },
        end: {
          line: 488,
          column: 96
        }
      },
      "53": {
        start: {
          line: 489,
          column: 42
        },
        end: {
          line: 489,
          column: 90
        }
      },
      "54": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 498,
          column: 10
        }
      },
      "55": {
        start: {
          line: 494,
          column: 57
        },
        end: {
          line: 497,
          column: 13
        }
      },
      "56": {
        start: {
          line: 501,
          column: 0
        },
        end: {
          line: 501,
          column: 54
        }
      },
      "57": {
        start: {
          line: 502,
          column: 0
        },
        end: {
          line: 502,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 62
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 381
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 47
          },
          end: {
            line: 422,
            column: 5
          }
        },
        line: 420
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 30
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 426
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 35
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 432
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 437,
            column: 69
          },
          end: {
            line: 437,
            column: 70
          }
        },
        loc: {
          start: {
            line: 437,
            column: 75
          },
          end: {
            line: 437,
            column: 78
          }
        },
        line: 437
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 31
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 452
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 465,
            column: 40
          },
          end: {
            line: 465,
            column: 41
          }
        },
        loc: {
          start: {
            line: 465,
            column: 62
          },
          end: {
            line: 475,
            column: 13
          }
        },
        line: 465
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 23
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 485
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 488,
            column: 51
          },
          end: {
            line: 488,
            column: 52
          }
        },
        loc: {
          start: {
            line: 488,
            column: 67
          },
          end: {
            line: 488,
            column: 96
          }
        },
        line: 488
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 494,
            column: 47
          },
          end: {
            line: 494,
            column: 48
          }
        },
        loc: {
          start: {
            line: 494,
            column: 57
          },
          end: {
            line: 497,
            column: 13
          }
        },
        line: 494
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 9,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 9,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "2": {
        loc: {
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 384,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 384,
            column: 32
          }
        }, {
          start: {
            line: 384,
            column: 36
          },
          end: {
            line: 384,
            column: 64
          }
        }],
        line: 384
      },
      "3": {
        loc: {
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "4": {
        loc: {
          start: {
            line: 398,
            column: 88
          },
          end: {
            line: 398,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 398,
            column: 88
          },
          end: {
            line: 398,
            column: 112
          }
        }, {
          start: {
            line: 398,
            column: 116
          },
          end: {
            line: 398,
            column: 118
          }
        }],
        line: 398
      },
      "5": {
        loc: {
          start: {
            line: 405,
            column: 47
          },
          end: {
            line: 405,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 47
          },
          end: {
            line: 405,
            column: 69
          }
        }, {
          start: {
            line: 405,
            column: 73
          },
          end: {
            line: 405,
            column: 77
          }
        }],
        line: 405
      },
      "6": {
        loc: {
          start: {
            line: 421,
            column: 15
          },
          end: {
            line: 421,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 421,
            column: 15
          },
          end: {
            line: 421,
            column: 53
          }
        }, {
          start: {
            line: 421,
            column: 57
          },
          end: {
            line: 421,
            column: 59
          }
        }],
        line: 421
      },
      "7": {
        loc: {
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "8": {
        loc: {
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "9": {
        loc: {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 457,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 457,
            column: 37
          }
        }, {
          start: {
            line: 457,
            column: 41
          },
          end: {
            line: 457,
            column: 91
          }
        }],
        line: 457
      },
      "10": {
        loc: {
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 462,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 462,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "11": {
        loc: {
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 460,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 460,
            column: 32
          }
        }, {
          start: {
            line: 460,
            column: 36
          },
          end: {
            line: 460,
            column: 68
          }
        }],
        line: 460
      },
      "12": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "13": {
        loc: {
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 468,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 468,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "14": {
        loc: {
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 471,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 471,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "15": {
        loc: {
          start: {
            line: 469,
            column: 20
          },
          end: {
            line: 469,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 20
          },
          end: {
            line: 469,
            column: 52
          }
        }, {
          start: {
            line: 469,
            column: 56
          },
          end: {
            line: 469,
            column: 83
          }
        }],
        line: 469
      },
      "16": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/SampleTestCaseService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/SampleTestCaseService.ts"],
      sourcesContent: ["import { db } from '../database/connection';\nimport { TestCase } from '../types/testCase';\n\nexport interface SampleTestCase {\n  name: string;\n  input_variables: Record<string, any>;\n  expected_output?: string;\n  assertions: Array<{\n    type: string;\n    expected: any;\n    description: string;\n  }>;\n  description: string;\n}\n\nexport class SampleTestCaseService {\n  private static instance: SampleTestCaseService;\n\n  public static getInstance(): SampleTestCaseService {\n    if (!SampleTestCaseService.instance) {\n      SampleTestCaseService.instance = new SampleTestCaseService();\n    }\n    return SampleTestCaseService.instance;\n  }\n\n  /**\n   * Get sample test cases for each prompt type\n   */\n  public getSampleTestCases(): Record<string, SampleTestCase[]> {\n    return {\n      \"Creative Story Generator\": [\n        {\n          name: \"Science Fiction Adventure\",\n          description: \"Test generation of a science fiction story with space setting\",\n          input_variables: {\n            genre: \"science fiction\",\n            setting: \"a distant space station orbiting Jupiter\",\n            character_name: \"Captain Maya Chen\",\n            character_description: \"a seasoned space explorer with a cybernetic arm\",\n            word_count: \"800\",\n            theme: \"discovery and sacrifice\",\n            target_audience: \"young adults\",\n            writing_style: \"descriptive and suspenseful\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Captain Maya Chen\",\n              description: \"Story should include the specified character name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Jupiter\",\n              description: \"Story should reference the Jupiter setting\"\n            },\n            {\n              type: \"word_count_range\",\n              expected: [700, 900],\n              description: \"Story should be approximately 800 words\"\n            },\n            {\n              type: \"tone_analysis\",\n              expected: \"suspenseful\",\n              description: \"Story should maintain a suspenseful tone\"\n            }\n          ]\n        },\n        {\n          name: \"Fantasy Quest\",\n          description: \"Test generation of a fantasy story with magical elements\",\n          input_variables: {\n            genre: \"fantasy\",\n            setting: \"an enchanted forest filled with ancient magic\",\n            character_name: \"Elara Moonwhisper\",\n            character_description: \"a young elf mage learning to control her powers\",\n            word_count: \"600\",\n            theme: \"courage and friendship\",\n            target_audience: \"children\",\n            writing_style: \"whimsical and magical\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Elara Moonwhisper\",\n              description: \"Story should include the specified character name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"magic\",\n              description: \"Story should include magical elements\"\n            },\n            {\n              type: \"reading_level\",\n              expected: \"children\",\n              description: \"Story should be appropriate for children\"\n            }\n          ]\n        }\n      ],\n      \"Technical Documentation Assistant\": [\n        {\n          name: \"REST API Documentation\",\n          description: \"Test documentation generation for a REST API project\",\n          input_variables: {\n            project_name: \"TaskFlow API\",\n            project_type: \"REST API\",\n            tech_stack: \"Node.js, Express.js, PostgreSQL, Redis\",\n            audience_level: \"intermediate\",\n            documentation_focus: \"API Endpoints and Authentication\",\n            tone: \"professional and clear\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"TaskFlow API\",\n              description: \"Documentation should reference the project name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Prerequisites\",\n              description: \"Should include prerequisites section\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Installation\",\n              description: \"Should include installation instructions\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Overview\", \"Getting Started\", \"API Reference\", \"Troubleshooting\"],\n              description: \"Should include all required sections\"\n            }\n          ]\n        },\n        {\n          name: \"Python Library Documentation\",\n          description: \"Test documentation for a Python library\",\n          input_variables: {\n            project_name: \"DataViz Pro\",\n            project_type: \"Python Library\",\n            tech_stack: \"Python 3.9+, matplotlib, pandas, numpy\",\n            audience_level: \"beginner\",\n            documentation_focus: \"Data Visualization Functions\",\n            tone: \"friendly and educational\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Python\",\n              description: \"Should reference Python technology\"\n            },\n            {\n              type: \"contains\",\n              expected: \"matplotlib\",\n              description: \"Should mention relevant dependencies\"\n            },\n            {\n              type: \"tone_analysis\",\n              expected: \"friendly\",\n              description: \"Should maintain a friendly, educational tone\"\n            }\n          ]\n        }\n      ],\n      \"Data Analysis Query Builder\": [\n        {\n          name: \"Sales Performance Analysis\",\n          description: \"Test generation of sales data analysis queries\",\n          input_variables: {\n            dataset_name: \"Q4 Sales Performance Data\",\n            analysis_goal: \"identify top-performing products and sales trends\",\n            data_source: \"PostgreSQL sales database\",\n            time_period: \"October 2024 - December 2024\",\n            key_metrics: \"revenue, units sold, customer acquisition\",\n            complexity_level: \"intermediate\",\n            output_format: \"executive summary with charts\",\n            include_charts: \"yes\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"SELECT\",\n              description: \"Should include SQL query examples\"\n            },\n            {\n              type: \"contains\",\n              expected: \"revenue\",\n              description: \"Should analyze specified key metrics\"\n            },\n            {\n              type: \"contains\",\n              expected: \"October 2024\",\n              description: \"Should reference the specified time period\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Data Exploration\", \"Statistical Analysis\", \"Insights and Findings\"],\n              description: \"Should include required analysis sections\"\n            }\n          ]\n        },\n        {\n          name: \"Customer Behavior Analysis\",\n          description: \"Test customer behavior pattern analysis\",\n          input_variables: {\n            dataset_name: \"Customer Journey Analytics\",\n            analysis_goal: \"understand customer purchase patterns and lifetime value\",\n            data_source: \"MongoDB customer events collection\",\n            time_period: \"January 2024 - December 2024\",\n            key_metrics: \"conversion rate, average order value, customer lifetime value\",\n            complexity_level: \"advanced\",\n            output_format: \"detailed technical report\",\n            include_charts: \"yes\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"MongoDB\",\n              description: \"Should reference the correct data source\"\n            },\n            {\n              type: \"contains\",\n              expected: \"conversion rate\",\n              description: \"Should analyze conversion metrics\"\n            },\n            {\n              type: \"complexity_check\",\n              expected: \"advanced\",\n              description: \"Should provide advanced-level analysis\"\n            }\n          ]\n        }\n      ],\n      \"Problem-Solving Framework\": [\n        {\n          name: \"Software Performance Issue\",\n          description: \"Test problem-solving approach for technical performance issues\",\n          input_variables: {\n            problem_description: \"Web application response times have increased by 300% over the past month\",\n            problem_context: \"E-commerce platform serving 10,000+ daily users\",\n            stakeholders: \"development team, operations team, business stakeholders\",\n            constraints: \"limited budget, 2-week timeline, cannot take system offline\",\n            timeline: \"2 weeks\",\n            methodology: \"root cause analysis\",\n            analysis_depth: \"comprehensive\",\n            decision_criteria: \"impact, feasibility, cost\",\n            priority_level: \"high\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"root cause analysis\",\n              description: \"Should use specified methodology\"\n            },\n            {\n              type: \"contains\",\n              expected: \"300%\",\n              description: \"Should reference the specific performance issue\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Problem Definition\", \"Solution Framework\", \"Implementation Plan\"],\n              description: \"Should include all framework sections\"\n            },\n            {\n              type: \"timeline_check\",\n              expected: \"2 weeks\",\n              description: \"Should respect timeline constraints\"\n            }\n          ]\n        }\n      ],\n      \"Code Generation Assistant\": [\n        {\n          name: \"Python REST API\",\n          description: \"Test generation of Python REST API code\",\n          input_variables: {\n            language: \"Python\",\n            project_name: \"User Management API\",\n            functionality_description: \"CRUD operations for user accounts with authentication\",\n            framework: \"FastAPI\",\n            coding_style: \"PEP 8\",\n            requirements: \"JWT authentication, password hashing, email validation, PostgreSQL database\",\n            performance_priority: \"security and maintainability\",\n            target_environment: \"Docker container\",\n            complexity_level: \"intermediate\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"FastAPI\",\n              description: \"Should use specified framework\"\n            },\n            {\n              type: \"contains\",\n              expected: \"JWT\",\n              description: \"Should implement JWT authentication\"\n            },\n            {\n              type: \"contains\",\n              expected: \"def\",\n              description: \"Should contain Python function definitions\"\n            },\n            {\n              type: \"security_check\",\n              expected: \"password hashing\",\n              description: \"Should implement secure password handling\"\n            }\n          ]\n        },\n        {\n          name: \"React Component\",\n          description: \"Test generation of React component with TypeScript\",\n          input_variables: {\n            language: \"TypeScript\",\n            project_name: \"Task Dashboard\",\n            functionality_description: \"Interactive task management component with drag-and-drop\",\n            framework: \"React with TypeScript\",\n            coding_style: \"Airbnb style guide\",\n            requirements: \"drag-and-drop functionality, state management, responsive design, accessibility\",\n            performance_priority: \"user experience and accessibility\",\n            target_environment: \"modern browsers\",\n            complexity_level: \"advanced\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"React\",\n              description: \"Should use React framework\"\n            },\n            {\n              type: \"contains\",\n              expected: \"interface\",\n              description: \"Should include TypeScript interfaces\"\n            },\n            {\n              type: \"contains\",\n              expected: \"drag\",\n              description: \"Should implement drag-and-drop functionality\"\n            },\n            {\n              type: \"accessibility_check\",\n              expected: \"aria-\",\n              description: \"Should include accessibility attributes\"\n            }\n          ]\n        }\n      ],\n      \"Business Strategy Consultant\": [\n        {\n          name: \"SaaS Market Entry\",\n          description: \"Test business strategy analysis for SaaS market entry\",\n          input_variables: {\n            company_name: \"TechFlow Solutions\",\n            industry: \"SaaS productivity tools\",\n            business_stage: \"startup\",\n            target_market: \"small to medium businesses\",\n            primary_challenge: \"market differentiation in crowded space\",\n            focus_area_1: \"competitive positioning\",\n            focus_area_2: \"pricing strategy\",\n            focus_area_3: \"customer acquisition\",\n            analysis_depth: \"comprehensive\",\n            time_horizon: \"18 months\",\n            budget_range: \"$500K - $1M\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"TechFlow Solutions\",\n              description: \"Should reference the company name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"SWOT\",\n              description: \"Should include SWOT analysis\"\n            },\n            {\n              type: \"contains\",\n              expected: \"competitive positioning\",\n              description: \"Should address specified focus areas\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Market Analysis\", \"Competitive Landscape\", \"SWOT Analysis\", \"Strategic Recommendations\"],\n              description: \"Should include all required analysis sections\"\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  /**\n   * Create test cases for a prompt card\n   */\n  public async createTestCasesForPrompt(promptCardId: number, promptTitle: string): Promise<TestCase[]> {\n    try {\n      const sampleTestCases = this.getSampleTestCases()[promptTitle];\n      \n      if (!sampleTestCases || sampleTestCases.length === 0) {\n        console.log(`No sample test cases found for prompt: ${promptTitle}`);\n        return [];\n      }\n\n      const createdTestCases: TestCase[] = [];\n\n      for (const testCase of sampleTestCases) {\n        // Check if test case already exists\n        const existing = await db.prepare(`\n          SELECT id FROM test_cases WHERE prompt_card_id = ? AND name = ?\n        `).get(promptCardId, testCase.name);\n\n        if (!existing) {\n          const result = await db.prepare(`\n            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n            VALUES (?, ?, ?, ?, ?)\n          `).run(\n            promptCardId,\n            testCase.name,\n            JSON.stringify(testCase.input_variables),\n            testCase.expected_output || '',\n            JSON.stringify(testCase.assertions)\n          );\n\n          const newTestCase = await db.prepare(`\n            SELECT * FROM test_cases WHERE id = ?\n          `).get(result.lastInsertRowid) as TestCase;\n\n          createdTestCases.push({\n            ...newTestCase,\n            input_variables: JSON.parse(newTestCase.input_variables),\n            assertions: JSON.parse(newTestCase.assertions || '[]')\n          });\n\n          console.log(`Created test case: ${testCase.name} for prompt: ${promptTitle}`);\n        }\n      }\n\n      return createdTestCases;\n    } catch (error) {\n      console.error('Failed to create test cases for prompt:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available test case templates by prompt title\n   */\n  public getTestCaseTemplatesForPrompt(promptTitle: string): SampleTestCase[] {\n    return this.getSampleTestCases()[promptTitle] || [];\n  }\n\n  /**\n   * Get all available prompt titles with test cases\n   */\n  public getPromptsWithTestCases(): string[] {\n    return Object.keys(this.getSampleTestCases());\n  }\n\n  /**\n   * Initialize test cases for all sample prompts in database\n   */\n  public async initializeAllTestCases(): Promise<void> {\n    try {\n      // Get all prompt cards that match sample prompt titles\n      const promptCards = await db.prepare(`\n        SELECT id, title FROM prompt_cards \n        WHERE title IN (${Object.keys(this.getSampleTestCases()).map(() => '?').join(',')})\n      `).all(...Object.keys(this.getSampleTestCases()));\n\n      for (const card of promptCards) {\n        await this.createTestCasesForPrompt(card.id, card.title);\n      }\n\n      console.log(`Test case initialization completed for ${promptCards.length} prompt cards`);\n    } catch (error) {\n      console.error('Failed to initialize test cases:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate test case structure\n   */\n  public validateTestCase(testCase: SampleTestCase): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!testCase.name?.trim()) {\n      errors.push('Test case name is required');\n    }\n\n    if (!testCase.input_variables || Object.keys(testCase.input_variables).length === 0) {\n      errors.push('Input variables are required');\n    }\n\n    if (!testCase.assertions || testCase.assertions.length === 0) {\n      errors.push('At least one assertion is required');\n    }\n\n    // Validate assertions\n    if (testCase.assertions) {\n      testCase.assertions.forEach((assertion, index) => {\n        if (!assertion.type) {\n          errors.push(`Assertion ${index + 1}: type is required`);\n        }\n        if (assertion.expected === undefined || assertion.expected === null) {\n          errors.push(`Assertion ${index + 1}: expected value is required`);\n        }\n        if (!assertion.description?.trim()) {\n          errors.push(`Assertion ${index + 1}: description is required`);\n        }\n      });\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get test case statistics\n   */\n  public getTestCaseStats() {\n    const testCases = this.getSampleTestCases();\n    const promptTitles = Object.keys(testCases);\n    const totalTestCases = promptTitles.reduce((sum, title) => sum + testCases[title].length, 0);\n    const averageTestCasesPerPrompt = Math.round(totalTestCases / promptTitles.length);\n\n    return {\n      totalPrompts: promptTitles.length,\n      totalTestCases,\n      averageTestCasesPerPrompt,\n      promptsBreakdown: promptTitles.map(title => ({\n        prompt: title,\n        testCaseCount: testCases[title].length\n      }))\n    };\n  }\n}\n\nexport default SampleTestCaseService;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c5698e931fe509ef456d2bccf2bb738ae14c9251"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15w6b75clr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15w6b75clr();
cov_15w6b75clr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15w6b75clr().s[1]++;
exports.SampleTestCaseService = void 0;
const connection_1 =
/* istanbul ignore next */
(cov_15w6b75clr().s[2]++, require("../database/connection"));
class SampleTestCaseService {
  static getInstance() {
    /* istanbul ignore next */
    cov_15w6b75clr().f[0]++;
    cov_15w6b75clr().s[3]++;
    if (!SampleTestCaseService.instance) {
      /* istanbul ignore next */
      cov_15w6b75clr().b[0][0]++;
      cov_15w6b75clr().s[4]++;
      SampleTestCaseService.instance = new SampleTestCaseService();
    } else
    /* istanbul ignore next */
    {
      cov_15w6b75clr().b[0][1]++;
    }
    cov_15w6b75clr().s[5]++;
    return SampleTestCaseService.instance;
  }
  /**
   * Get sample test cases for each prompt type
   */
  getSampleTestCases() {
    /* istanbul ignore next */
    cov_15w6b75clr().f[1]++;
    cov_15w6b75clr().s[6]++;
    return {
      "Creative Story Generator": [{
        name: "Science Fiction Adventure",
        description: "Test generation of a science fiction story with space setting",
        input_variables: {
          genre: "science fiction",
          setting: "a distant space station orbiting Jupiter",
          character_name: "Captain Maya Chen",
          character_description: "a seasoned space explorer with a cybernetic arm",
          word_count: "800",
          theme: "discovery and sacrifice",
          target_audience: "young adults",
          writing_style: "descriptive and suspenseful"
        },
        assertions: [{
          type: "contains",
          expected: "Captain Maya Chen",
          description: "Story should include the specified character name"
        }, {
          type: "contains",
          expected: "Jupiter",
          description: "Story should reference the Jupiter setting"
        }, {
          type: "word_count_range",
          expected: [700, 900],
          description: "Story should be approximately 800 words"
        }, {
          type: "tone_analysis",
          expected: "suspenseful",
          description: "Story should maintain a suspenseful tone"
        }]
      }, {
        name: "Fantasy Quest",
        description: "Test generation of a fantasy story with magical elements",
        input_variables: {
          genre: "fantasy",
          setting: "an enchanted forest filled with ancient magic",
          character_name: "Elara Moonwhisper",
          character_description: "a young elf mage learning to control her powers",
          word_count: "600",
          theme: "courage and friendship",
          target_audience: "children",
          writing_style: "whimsical and magical"
        },
        assertions: [{
          type: "contains",
          expected: "Elara Moonwhisper",
          description: "Story should include the specified character name"
        }, {
          type: "contains",
          expected: "magic",
          description: "Story should include magical elements"
        }, {
          type: "reading_level",
          expected: "children",
          description: "Story should be appropriate for children"
        }]
      }],
      "Technical Documentation Assistant": [{
        name: "REST API Documentation",
        description: "Test documentation generation for a REST API project",
        input_variables: {
          project_name: "TaskFlow API",
          project_type: "REST API",
          tech_stack: "Node.js, Express.js, PostgreSQL, Redis",
          audience_level: "intermediate",
          documentation_focus: "API Endpoints and Authentication",
          tone: "professional and clear"
        },
        assertions: [{
          type: "contains",
          expected: "TaskFlow API",
          description: "Documentation should reference the project name"
        }, {
          type: "contains",
          expected: "Prerequisites",
          description: "Should include prerequisites section"
        }, {
          type: "contains",
          expected: "Installation",
          description: "Should include installation instructions"
        }, {
          type: "structure_check",
          expected: ["Overview", "Getting Started", "API Reference", "Troubleshooting"],
          description: "Should include all required sections"
        }]
      }, {
        name: "Python Library Documentation",
        description: "Test documentation for a Python library",
        input_variables: {
          project_name: "DataViz Pro",
          project_type: "Python Library",
          tech_stack: "Python 3.9+, matplotlib, pandas, numpy",
          audience_level: "beginner",
          documentation_focus: "Data Visualization Functions",
          tone: "friendly and educational"
        },
        assertions: [{
          type: "contains",
          expected: "Python",
          description: "Should reference Python technology"
        }, {
          type: "contains",
          expected: "matplotlib",
          description: "Should mention relevant dependencies"
        }, {
          type: "tone_analysis",
          expected: "friendly",
          description: "Should maintain a friendly, educational tone"
        }]
      }],
      "Data Analysis Query Builder": [{
        name: "Sales Performance Analysis",
        description: "Test generation of sales data analysis queries",
        input_variables: {
          dataset_name: "Q4 Sales Performance Data",
          analysis_goal: "identify top-performing products and sales trends",
          data_source: "PostgreSQL sales database",
          time_period: "October 2024 - December 2024",
          key_metrics: "revenue, units sold, customer acquisition",
          complexity_level: "intermediate",
          output_format: "executive summary with charts",
          include_charts: "yes"
        },
        assertions: [{
          type: "contains",
          expected: "SELECT",
          description: "Should include SQL query examples"
        }, {
          type: "contains",
          expected: "revenue",
          description: "Should analyze specified key metrics"
        }, {
          type: "contains",
          expected: "October 2024",
          description: "Should reference the specified time period"
        }, {
          type: "structure_check",
          expected: ["Data Exploration", "Statistical Analysis", "Insights and Findings"],
          description: "Should include required analysis sections"
        }]
      }, {
        name: "Customer Behavior Analysis",
        description: "Test customer behavior pattern analysis",
        input_variables: {
          dataset_name: "Customer Journey Analytics",
          analysis_goal: "understand customer purchase patterns and lifetime value",
          data_source: "MongoDB customer events collection",
          time_period: "January 2024 - December 2024",
          key_metrics: "conversion rate, average order value, customer lifetime value",
          complexity_level: "advanced",
          output_format: "detailed technical report",
          include_charts: "yes"
        },
        assertions: [{
          type: "contains",
          expected: "MongoDB",
          description: "Should reference the correct data source"
        }, {
          type: "contains",
          expected: "conversion rate",
          description: "Should analyze conversion metrics"
        }, {
          type: "complexity_check",
          expected: "advanced",
          description: "Should provide advanced-level analysis"
        }]
      }],
      "Problem-Solving Framework": [{
        name: "Software Performance Issue",
        description: "Test problem-solving approach for technical performance issues",
        input_variables: {
          problem_description: "Web application response times have increased by 300% over the past month",
          problem_context: "E-commerce platform serving 10,000+ daily users",
          stakeholders: "development team, operations team, business stakeholders",
          constraints: "limited budget, 2-week timeline, cannot take system offline",
          timeline: "2 weeks",
          methodology: "root cause analysis",
          analysis_depth: "comprehensive",
          decision_criteria: "impact, feasibility, cost",
          priority_level: "high"
        },
        assertions: [{
          type: "contains",
          expected: "root cause analysis",
          description: "Should use specified methodology"
        }, {
          type: "contains",
          expected: "300%",
          description: "Should reference the specific performance issue"
        }, {
          type: "structure_check",
          expected: ["Problem Definition", "Solution Framework", "Implementation Plan"],
          description: "Should include all framework sections"
        }, {
          type: "timeline_check",
          expected: "2 weeks",
          description: "Should respect timeline constraints"
        }]
      }],
      "Code Generation Assistant": [{
        name: "Python REST API",
        description: "Test generation of Python REST API code",
        input_variables: {
          language: "Python",
          project_name: "User Management API",
          functionality_description: "CRUD operations for user accounts with authentication",
          framework: "FastAPI",
          coding_style: "PEP 8",
          requirements: "JWT authentication, password hashing, email validation, PostgreSQL database",
          performance_priority: "security and maintainability",
          target_environment: "Docker container",
          complexity_level: "intermediate"
        },
        assertions: [{
          type: "contains",
          expected: "FastAPI",
          description: "Should use specified framework"
        }, {
          type: "contains",
          expected: "JWT",
          description: "Should implement JWT authentication"
        }, {
          type: "contains",
          expected: "def",
          description: "Should contain Python function definitions"
        }, {
          type: "security_check",
          expected: "password hashing",
          description: "Should implement secure password handling"
        }]
      }, {
        name: "React Component",
        description: "Test generation of React component with TypeScript",
        input_variables: {
          language: "TypeScript",
          project_name: "Task Dashboard",
          functionality_description: "Interactive task management component with drag-and-drop",
          framework: "React with TypeScript",
          coding_style: "Airbnb style guide",
          requirements: "drag-and-drop functionality, state management, responsive design, accessibility",
          performance_priority: "user experience and accessibility",
          target_environment: "modern browsers",
          complexity_level: "advanced"
        },
        assertions: [{
          type: "contains",
          expected: "React",
          description: "Should use React framework"
        }, {
          type: "contains",
          expected: "interface",
          description: "Should include TypeScript interfaces"
        }, {
          type: "contains",
          expected: "drag",
          description: "Should implement drag-and-drop functionality"
        }, {
          type: "accessibility_check",
          expected: "aria-",
          description: "Should include accessibility attributes"
        }]
      }],
      "Business Strategy Consultant": [{
        name: "SaaS Market Entry",
        description: "Test business strategy analysis for SaaS market entry",
        input_variables: {
          company_name: "TechFlow Solutions",
          industry: "SaaS productivity tools",
          business_stage: "startup",
          target_market: "small to medium businesses",
          primary_challenge: "market differentiation in crowded space",
          focus_area_1: "competitive positioning",
          focus_area_2: "pricing strategy",
          focus_area_3: "customer acquisition",
          analysis_depth: "comprehensive",
          time_horizon: "18 months",
          budget_range: "$500K - $1M"
        },
        assertions: [{
          type: "contains",
          expected: "TechFlow Solutions",
          description: "Should reference the company name"
        }, {
          type: "contains",
          expected: "SWOT",
          description: "Should include SWOT analysis"
        }, {
          type: "contains",
          expected: "competitive positioning",
          description: "Should address specified focus areas"
        }, {
          type: "structure_check",
          expected: ["Market Analysis", "Competitive Landscape", "SWOT Analysis", "Strategic Recommendations"],
          description: "Should include all required analysis sections"
        }]
      }]
    };
  }
  /**
   * Create test cases for a prompt card
   */
  async createTestCasesForPrompt(promptCardId, promptTitle) {
    /* istanbul ignore next */
    cov_15w6b75clr().f[2]++;
    cov_15w6b75clr().s[7]++;
    try {
      const sampleTestCases =
      /* istanbul ignore next */
      (cov_15w6b75clr().s[8]++, this.getSampleTestCases()[promptTitle]);
      /* istanbul ignore next */
      cov_15w6b75clr().s[9]++;
      if (
      /* istanbul ignore next */
      (cov_15w6b75clr().b[2][0]++, !sampleTestCases) ||
      /* istanbul ignore next */
      (cov_15w6b75clr().b[2][1]++, sampleTestCases.length === 0)) {
        /* istanbul ignore next */
        cov_15w6b75clr().b[1][0]++;
        cov_15w6b75clr().s[10]++;
        console.log(`No sample test cases found for prompt: ${promptTitle}`);
        /* istanbul ignore next */
        cov_15w6b75clr().s[11]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_15w6b75clr().b[1][1]++;
      }
      const createdTestCases =
      /* istanbul ignore next */
      (cov_15w6b75clr().s[12]++, []);
      /* istanbul ignore next */
      cov_15w6b75clr().s[13]++;
      for (const testCase of sampleTestCases) {
        // Check if test case already exists
        const existing =
        /* istanbul ignore next */
        (cov_15w6b75clr().s[14]++, await connection_1.db.prepare(`
          SELECT id FROM test_cases WHERE prompt_card_id = ? AND name = ?
        `).get(promptCardId, testCase.name));
        /* istanbul ignore next */
        cov_15w6b75clr().s[15]++;
        if (!existing) {
          /* istanbul ignore next */
          cov_15w6b75clr().b[3][0]++;
          const result =
          /* istanbul ignore next */
          (cov_15w6b75clr().s[16]++, await connection_1.db.prepare(`
            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)
            VALUES (?, ?, ?, ?, ?)
          `).run(promptCardId, testCase.name, JSON.stringify(testCase.input_variables),
          /* istanbul ignore next */
          (cov_15w6b75clr().b[4][0]++, testCase.expected_output) ||
          /* istanbul ignore next */
          (cov_15w6b75clr().b[4][1]++, ''), JSON.stringify(testCase.assertions)));
          const newTestCase =
          /* istanbul ignore next */
          (cov_15w6b75clr().s[17]++, await connection_1.db.prepare(`
            SELECT * FROM test_cases WHERE id = ?
          `).get(result.lastInsertRowid));
          /* istanbul ignore next */
          cov_15w6b75clr().s[18]++;
          createdTestCases.push({
            ...newTestCase,
            input_variables: JSON.parse(newTestCase.input_variables),
            assertions: JSON.parse(
            /* istanbul ignore next */
            (cov_15w6b75clr().b[5][0]++, newTestCase.assertions) ||
            /* istanbul ignore next */
            (cov_15w6b75clr().b[5][1]++, '[]'))
          });
          /* istanbul ignore next */
          cov_15w6b75clr().s[19]++;
          console.log(`Created test case: ${testCase.name} for prompt: ${promptTitle}`);
        } else
        /* istanbul ignore next */
        {
          cov_15w6b75clr().b[3][1]++;
        }
      }
      /* istanbul ignore next */
      cov_15w6b75clr().s[20]++;
      return createdTestCases;
    } catch (error) {
      /* istanbul ignore next */
      cov_15w6b75clr().s[21]++;
      console.error('Failed to create test cases for prompt:', error);
      /* istanbul ignore next */
      cov_15w6b75clr().s[22]++;
      throw error;
    }
  }
  /**
   * Get available test case templates by prompt title
   */
  getTestCaseTemplatesForPrompt(promptTitle) {
    /* istanbul ignore next */
    cov_15w6b75clr().f[3]++;
    cov_15w6b75clr().s[23]++;
    return /* istanbul ignore next */(cov_15w6b75clr().b[6][0]++, this.getSampleTestCases()[promptTitle]) ||
    /* istanbul ignore next */
    (cov_15w6b75clr().b[6][1]++, []);
  }
  /**
   * Get all available prompt titles with test cases
   */
  getPromptsWithTestCases() {
    /* istanbul ignore next */
    cov_15w6b75clr().f[4]++;
    cov_15w6b75clr().s[24]++;
    return Object.keys(this.getSampleTestCases());
  }
  /**
   * Initialize test cases for all sample prompts in database
   */
  async initializeAllTestCases() {
    /* istanbul ignore next */
    cov_15w6b75clr().f[5]++;
    cov_15w6b75clr().s[25]++;
    try {
      // Get all prompt cards that match sample prompt titles
      const promptCards =
      /* istanbul ignore next */
      (cov_15w6b75clr().s[26]++, await connection_1.db.prepare(`
        SELECT id, title FROM prompt_cards 
        WHERE title IN (${Object.keys(this.getSampleTestCases()).map(() => {
        /* istanbul ignore next */
        cov_15w6b75clr().f[6]++;
        cov_15w6b75clr().s[27]++;
        return '?';
      }).join(',')})
      `).all(...Object.keys(this.getSampleTestCases())));
      /* istanbul ignore next */
      cov_15w6b75clr().s[28]++;
      for (const card of promptCards) {
        /* istanbul ignore next */
        cov_15w6b75clr().s[29]++;
        await this.createTestCasesForPrompt(card.id, card.title);
      }
      /* istanbul ignore next */
      cov_15w6b75clr().s[30]++;
      console.log(`Test case initialization completed for ${promptCards.length} prompt cards`);
    } catch (error) {
      /* istanbul ignore next */
      cov_15w6b75clr().s[31]++;
      console.error('Failed to initialize test cases:', error);
      /* istanbul ignore next */
      cov_15w6b75clr().s[32]++;
      throw error;
    }
  }
  /**
   * Validate test case structure
   */
  validateTestCase(testCase) {
    /* istanbul ignore next */
    cov_15w6b75clr().f[7]++;
    const errors =
    /* istanbul ignore next */
    (cov_15w6b75clr().s[33]++, []);
    /* istanbul ignore next */
    cov_15w6b75clr().s[34]++;
    if (!testCase.name?.trim()) {
      /* istanbul ignore next */
      cov_15w6b75clr().b[7][0]++;
      cov_15w6b75clr().s[35]++;
      errors.push('Test case name is required');
    } else
    /* istanbul ignore next */
    {
      cov_15w6b75clr().b[7][1]++;
    }
    cov_15w6b75clr().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_15w6b75clr().b[9][0]++, !testCase.input_variables) ||
    /* istanbul ignore next */
    (cov_15w6b75clr().b[9][1]++, Object.keys(testCase.input_variables).length === 0)) {
      /* istanbul ignore next */
      cov_15w6b75clr().b[8][0]++;
      cov_15w6b75clr().s[37]++;
      errors.push('Input variables are required');
    } else
    /* istanbul ignore next */
    {
      cov_15w6b75clr().b[8][1]++;
    }
    cov_15w6b75clr().s[38]++;
    if (
    /* istanbul ignore next */
    (cov_15w6b75clr().b[11][0]++, !testCase.assertions) ||
    /* istanbul ignore next */
    (cov_15w6b75clr().b[11][1]++, testCase.assertions.length === 0)) {
      /* istanbul ignore next */
      cov_15w6b75clr().b[10][0]++;
      cov_15w6b75clr().s[39]++;
      errors.push('At least one assertion is required');
    } else
    /* istanbul ignore next */
    {
      cov_15w6b75clr().b[10][1]++;
    }
    // Validate assertions
    cov_15w6b75clr().s[40]++;
    if (testCase.assertions) {
      /* istanbul ignore next */
      cov_15w6b75clr().b[12][0]++;
      cov_15w6b75clr().s[41]++;
      testCase.assertions.forEach((assertion, index) => {
        /* istanbul ignore next */
        cov_15w6b75clr().f[8]++;
        cov_15w6b75clr().s[42]++;
        if (!assertion.type) {
          /* istanbul ignore next */
          cov_15w6b75clr().b[13][0]++;
          cov_15w6b75clr().s[43]++;
          errors.push(`Assertion ${index + 1}: type is required`);
        } else
        /* istanbul ignore next */
        {
          cov_15w6b75clr().b[13][1]++;
        }
        cov_15w6b75clr().s[44]++;
        if (
        /* istanbul ignore next */
        (cov_15w6b75clr().b[15][0]++, assertion.expected === undefined) ||
        /* istanbul ignore next */
        (cov_15w6b75clr().b[15][1]++, assertion.expected === null)) {
          /* istanbul ignore next */
          cov_15w6b75clr().b[14][0]++;
          cov_15w6b75clr().s[45]++;
          errors.push(`Assertion ${index + 1}: expected value is required`);
        } else
        /* istanbul ignore next */
        {
          cov_15w6b75clr().b[14][1]++;
        }
        cov_15w6b75clr().s[46]++;
        if (!assertion.description?.trim()) {
          /* istanbul ignore next */
          cov_15w6b75clr().b[16][0]++;
          cov_15w6b75clr().s[47]++;
          errors.push(`Assertion ${index + 1}: description is required`);
        } else
        /* istanbul ignore next */
        {
          cov_15w6b75clr().b[16][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_15w6b75clr().b[12][1]++;
    }
    cov_15w6b75clr().s[48]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }
  /**
   * Get test case statistics
   */
  getTestCaseStats() {
    /* istanbul ignore next */
    cov_15w6b75clr().f[9]++;
    const testCases =
    /* istanbul ignore next */
    (cov_15w6b75clr().s[49]++, this.getSampleTestCases());
    const promptTitles =
    /* istanbul ignore next */
    (cov_15w6b75clr().s[50]++, Object.keys(testCases));
    const totalTestCases =
    /* istanbul ignore next */
    (cov_15w6b75clr().s[51]++, promptTitles.reduce((sum, title) => {
      /* istanbul ignore next */
      cov_15w6b75clr().f[10]++;
      cov_15w6b75clr().s[52]++;
      return sum + testCases[title].length;
    }, 0));
    const averageTestCasesPerPrompt =
    /* istanbul ignore next */
    (cov_15w6b75clr().s[53]++, Math.round(totalTestCases / promptTitles.length));
    /* istanbul ignore next */
    cov_15w6b75clr().s[54]++;
    return {
      totalPrompts: promptTitles.length,
      totalTestCases,
      averageTestCasesPerPrompt,
      promptsBreakdown: promptTitles.map(title => {
        /* istanbul ignore next */
        cov_15w6b75clr().f[11]++;
        cov_15w6b75clr().s[55]++;
        return {
          prompt: title,
          testCaseCount: testCases[title].length
        };
      })
    };
  }
}
/* istanbul ignore next */
cov_15w6b75clr().s[56]++;
exports.SampleTestCaseService = SampleTestCaseService;
/* istanbul ignore next */
cov_15w6b75clr().s[57]++;
exports.default = SampleTestCaseService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,