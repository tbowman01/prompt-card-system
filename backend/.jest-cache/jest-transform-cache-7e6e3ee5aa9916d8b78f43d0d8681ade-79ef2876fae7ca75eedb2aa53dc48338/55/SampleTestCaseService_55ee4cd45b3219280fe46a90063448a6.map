{"version":3,"names":["cov_15w6b75clr","actualCoverage","s","connection_1","require","SampleTestCaseService","getInstance","f","instance","b","getSampleTestCases","name","description","input_variables","genre","setting","character_name","character_description","word_count","theme","target_audience","writing_style","assertions","type","expected","project_name","project_type","tech_stack","audience_level","documentation_focus","tone","dataset_name","analysis_goal","data_source","time_period","key_metrics","complexity_level","output_format","include_charts","problem_description","problem_context","stakeholders","constraints","timeline","methodology","analysis_depth","decision_criteria","priority_level","language","functionality_description","framework","coding_style","requirements","performance_priority","target_environment","company_name","industry","business_stage","target_market","primary_challenge","focus_area_1","focus_area_2","focus_area_3","time_horizon","budget_range","createTestCasesForPrompt","promptCardId","promptTitle","sampleTestCases","length","console","log","createdTestCases","testCase","existing","db","prepare","get","result","run","JSON","stringify","expected_output","newTestCase","lastInsertRowid","push","parse","error","getTestCaseTemplatesForPrompt","getPromptsWithTestCases","Object","keys","initializeAllTestCases","promptCards","map","join","all","card","id","title","validateTestCase","errors","trim","forEach","assertion","index","undefined","isValid","getTestCaseStats","testCases","promptTitles","totalTestCases","reduce","sum","averageTestCasesPerPrompt","Math","round","totalPrompts","promptsBreakdown","prompt","testCaseCount","exports","default"],"sources":["/workspaces/prompt-card-system/backend/src/services/SampleTestCaseService.ts"],"sourcesContent":["import { db } from '../database/connection';\nimport { TestCase } from '../types/testCase';\n\nexport interface SampleTestCase {\n  name: string;\n  input_variables: Record<string, any>;\n  expected_output?: string;\n  assertions: Array<{\n    type: string;\n    expected: any;\n    description: string;\n  }>;\n  description: string;\n}\n\nexport class SampleTestCaseService {\n  private static instance: SampleTestCaseService;\n\n  public static getInstance(): SampleTestCaseService {\n    if (!SampleTestCaseService.instance) {\n      SampleTestCaseService.instance = new SampleTestCaseService();\n    }\n    return SampleTestCaseService.instance;\n  }\n\n  /**\n   * Get sample test cases for each prompt type\n   */\n  public getSampleTestCases(): Record<string, SampleTestCase[]> {\n    return {\n      \"Creative Story Generator\": [\n        {\n          name: \"Science Fiction Adventure\",\n          description: \"Test generation of a science fiction story with space setting\",\n          input_variables: {\n            genre: \"science fiction\",\n            setting: \"a distant space station orbiting Jupiter\",\n            character_name: \"Captain Maya Chen\",\n            character_description: \"a seasoned space explorer with a cybernetic arm\",\n            word_count: \"800\",\n            theme: \"discovery and sacrifice\",\n            target_audience: \"young adults\",\n            writing_style: \"descriptive and suspenseful\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Captain Maya Chen\",\n              description: \"Story should include the specified character name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Jupiter\",\n              description: \"Story should reference the Jupiter setting\"\n            },\n            {\n              type: \"word_count_range\",\n              expected: [700, 900],\n              description: \"Story should be approximately 800 words\"\n            },\n            {\n              type: \"tone_analysis\",\n              expected: \"suspenseful\",\n              description: \"Story should maintain a suspenseful tone\"\n            }\n          ]\n        },\n        {\n          name: \"Fantasy Quest\",\n          description: \"Test generation of a fantasy story with magical elements\",\n          input_variables: {\n            genre: \"fantasy\",\n            setting: \"an enchanted forest filled with ancient magic\",\n            character_name: \"Elara Moonwhisper\",\n            character_description: \"a young elf mage learning to control her powers\",\n            word_count: \"600\",\n            theme: \"courage and friendship\",\n            target_audience: \"children\",\n            writing_style: \"whimsical and magical\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Elara Moonwhisper\",\n              description: \"Story should include the specified character name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"magic\",\n              description: \"Story should include magical elements\"\n            },\n            {\n              type: \"reading_level\",\n              expected: \"children\",\n              description: \"Story should be appropriate for children\"\n            }\n          ]\n        }\n      ],\n      \"Technical Documentation Assistant\": [\n        {\n          name: \"REST API Documentation\",\n          description: \"Test documentation generation for a REST API project\",\n          input_variables: {\n            project_name: \"TaskFlow API\",\n            project_type: \"REST API\",\n            tech_stack: \"Node.js, Express.js, PostgreSQL, Redis\",\n            audience_level: \"intermediate\",\n            documentation_focus: \"API Endpoints and Authentication\",\n            tone: \"professional and clear\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"TaskFlow API\",\n              description: \"Documentation should reference the project name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Prerequisites\",\n              description: \"Should include prerequisites section\"\n            },\n            {\n              type: \"contains\",\n              expected: \"Installation\",\n              description: \"Should include installation instructions\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Overview\", \"Getting Started\", \"API Reference\", \"Troubleshooting\"],\n              description: \"Should include all required sections\"\n            }\n          ]\n        },\n        {\n          name: \"Python Library Documentation\",\n          description: \"Test documentation for a Python library\",\n          input_variables: {\n            project_name: \"DataViz Pro\",\n            project_type: \"Python Library\",\n            tech_stack: \"Python 3.9+, matplotlib, pandas, numpy\",\n            audience_level: \"beginner\",\n            documentation_focus: \"Data Visualization Functions\",\n            tone: \"friendly and educational\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"Python\",\n              description: \"Should reference Python technology\"\n            },\n            {\n              type: \"contains\",\n              expected: \"matplotlib\",\n              description: \"Should mention relevant dependencies\"\n            },\n            {\n              type: \"tone_analysis\",\n              expected: \"friendly\",\n              description: \"Should maintain a friendly, educational tone\"\n            }\n          ]\n        }\n      ],\n      \"Data Analysis Query Builder\": [\n        {\n          name: \"Sales Performance Analysis\",\n          description: \"Test generation of sales data analysis queries\",\n          input_variables: {\n            dataset_name: \"Q4 Sales Performance Data\",\n            analysis_goal: \"identify top-performing products and sales trends\",\n            data_source: \"PostgreSQL sales database\",\n            time_period: \"October 2024 - December 2024\",\n            key_metrics: \"revenue, units sold, customer acquisition\",\n            complexity_level: \"intermediate\",\n            output_format: \"executive summary with charts\",\n            include_charts: \"yes\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"SELECT\",\n              description: \"Should include SQL query examples\"\n            },\n            {\n              type: \"contains\",\n              expected: \"revenue\",\n              description: \"Should analyze specified key metrics\"\n            },\n            {\n              type: \"contains\",\n              expected: \"October 2024\",\n              description: \"Should reference the specified time period\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Data Exploration\", \"Statistical Analysis\", \"Insights and Findings\"],\n              description: \"Should include required analysis sections\"\n            }\n          ]\n        },\n        {\n          name: \"Customer Behavior Analysis\",\n          description: \"Test customer behavior pattern analysis\",\n          input_variables: {\n            dataset_name: \"Customer Journey Analytics\",\n            analysis_goal: \"understand customer purchase patterns and lifetime value\",\n            data_source: \"MongoDB customer events collection\",\n            time_period: \"January 2024 - December 2024\",\n            key_metrics: \"conversion rate, average order value, customer lifetime value\",\n            complexity_level: \"advanced\",\n            output_format: \"detailed technical report\",\n            include_charts: \"yes\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"MongoDB\",\n              description: \"Should reference the correct data source\"\n            },\n            {\n              type: \"contains\",\n              expected: \"conversion rate\",\n              description: \"Should analyze conversion metrics\"\n            },\n            {\n              type: \"complexity_check\",\n              expected: \"advanced\",\n              description: \"Should provide advanced-level analysis\"\n            }\n          ]\n        }\n      ],\n      \"Problem-Solving Framework\": [\n        {\n          name: \"Software Performance Issue\",\n          description: \"Test problem-solving approach for technical performance issues\",\n          input_variables: {\n            problem_description: \"Web application response times have increased by 300% over the past month\",\n            problem_context: \"E-commerce platform serving 10,000+ daily users\",\n            stakeholders: \"development team, operations team, business stakeholders\",\n            constraints: \"limited budget, 2-week timeline, cannot take system offline\",\n            timeline: \"2 weeks\",\n            methodology: \"root cause analysis\",\n            analysis_depth: \"comprehensive\",\n            decision_criteria: \"impact, feasibility, cost\",\n            priority_level: \"high\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"root cause analysis\",\n              description: \"Should use specified methodology\"\n            },\n            {\n              type: \"contains\",\n              expected: \"300%\",\n              description: \"Should reference the specific performance issue\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Problem Definition\", \"Solution Framework\", \"Implementation Plan\"],\n              description: \"Should include all framework sections\"\n            },\n            {\n              type: \"timeline_check\",\n              expected: \"2 weeks\",\n              description: \"Should respect timeline constraints\"\n            }\n          ]\n        }\n      ],\n      \"Code Generation Assistant\": [\n        {\n          name: \"Python REST API\",\n          description: \"Test generation of Python REST API code\",\n          input_variables: {\n            language: \"Python\",\n            project_name: \"User Management API\",\n            functionality_description: \"CRUD operations for user accounts with authentication\",\n            framework: \"FastAPI\",\n            coding_style: \"PEP 8\",\n            requirements: \"JWT authentication, password hashing, email validation, PostgreSQL database\",\n            performance_priority: \"security and maintainability\",\n            target_environment: \"Docker container\",\n            complexity_level: \"intermediate\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"FastAPI\",\n              description: \"Should use specified framework\"\n            },\n            {\n              type: \"contains\",\n              expected: \"JWT\",\n              description: \"Should implement JWT authentication\"\n            },\n            {\n              type: \"contains\",\n              expected: \"def\",\n              description: \"Should contain Python function definitions\"\n            },\n            {\n              type: \"security_check\",\n              expected: \"password hashing\",\n              description: \"Should implement secure password handling\"\n            }\n          ]\n        },\n        {\n          name: \"React Component\",\n          description: \"Test generation of React component with TypeScript\",\n          input_variables: {\n            language: \"TypeScript\",\n            project_name: \"Task Dashboard\",\n            functionality_description: \"Interactive task management component with drag-and-drop\",\n            framework: \"React with TypeScript\",\n            coding_style: \"Airbnb style guide\",\n            requirements: \"drag-and-drop functionality, state management, responsive design, accessibility\",\n            performance_priority: \"user experience and accessibility\",\n            target_environment: \"modern browsers\",\n            complexity_level: \"advanced\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"React\",\n              description: \"Should use React framework\"\n            },\n            {\n              type: \"contains\",\n              expected: \"interface\",\n              description: \"Should include TypeScript interfaces\"\n            },\n            {\n              type: \"contains\",\n              expected: \"drag\",\n              description: \"Should implement drag-and-drop functionality\"\n            },\n            {\n              type: \"accessibility_check\",\n              expected: \"aria-\",\n              description: \"Should include accessibility attributes\"\n            }\n          ]\n        }\n      ],\n      \"Business Strategy Consultant\": [\n        {\n          name: \"SaaS Market Entry\",\n          description: \"Test business strategy analysis for SaaS market entry\",\n          input_variables: {\n            company_name: \"TechFlow Solutions\",\n            industry: \"SaaS productivity tools\",\n            business_stage: \"startup\",\n            target_market: \"small to medium businesses\",\n            primary_challenge: \"market differentiation in crowded space\",\n            focus_area_1: \"competitive positioning\",\n            focus_area_2: \"pricing strategy\",\n            focus_area_3: \"customer acquisition\",\n            analysis_depth: \"comprehensive\",\n            time_horizon: \"18 months\",\n            budget_range: \"$500K - $1M\"\n          },\n          assertions: [\n            {\n              type: \"contains\",\n              expected: \"TechFlow Solutions\",\n              description: \"Should reference the company name\"\n            },\n            {\n              type: \"contains\",\n              expected: \"SWOT\",\n              description: \"Should include SWOT analysis\"\n            },\n            {\n              type: \"contains\",\n              expected: \"competitive positioning\",\n              description: \"Should address specified focus areas\"\n            },\n            {\n              type: \"structure_check\",\n              expected: [\"Market Analysis\", \"Competitive Landscape\", \"SWOT Analysis\", \"Strategic Recommendations\"],\n              description: \"Should include all required analysis sections\"\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  /**\n   * Create test cases for a prompt card\n   */\n  public async createTestCasesForPrompt(promptCardId: number, promptTitle: string): Promise<TestCase[]> {\n    try {\n      const sampleTestCases = this.getSampleTestCases()[promptTitle];\n      \n      if (!sampleTestCases || sampleTestCases.length === 0) {\n        console.log(`No sample test cases found for prompt: ${promptTitle}`);\n        return [];\n      }\n\n      const createdTestCases: TestCase[] = [];\n\n      for (const testCase of sampleTestCases) {\n        // Check if test case already exists\n        const existing = await db.prepare(`\n          SELECT id FROM test_cases WHERE prompt_card_id = ? AND name = ?\n        `).get(promptCardId, testCase.name);\n\n        if (!existing) {\n          const result = await db.prepare(`\n            INSERT INTO test_cases (prompt_card_id, name, input_variables, expected_output, assertions)\n            VALUES (?, ?, ?, ?, ?)\n          `).run(\n            promptCardId,\n            testCase.name,\n            JSON.stringify(testCase.input_variables),\n            testCase.expected_output || '',\n            JSON.stringify(testCase.assertions)\n          );\n\n          const newTestCase = await db.prepare(`\n            SELECT * FROM test_cases WHERE id = ?\n          `).get(result.lastInsertRowid) as TestCase;\n\n          createdTestCases.push({\n            ...newTestCase,\n            input_variables: JSON.parse(newTestCase.input_variables),\n            assertions: JSON.parse(newTestCase.assertions || '[]')\n          });\n\n          console.log(`Created test case: ${testCase.name} for prompt: ${promptTitle}`);\n        }\n      }\n\n      return createdTestCases;\n    } catch (error) {\n      console.error('Failed to create test cases for prompt:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available test case templates by prompt title\n   */\n  public getTestCaseTemplatesForPrompt(promptTitle: string): SampleTestCase[] {\n    return this.getSampleTestCases()[promptTitle] || [];\n  }\n\n  /**\n   * Get all available prompt titles with test cases\n   */\n  public getPromptsWithTestCases(): string[] {\n    return Object.keys(this.getSampleTestCases());\n  }\n\n  /**\n   * Initialize test cases for all sample prompts in database\n   */\n  public async initializeAllTestCases(): Promise<void> {\n    try {\n      // Get all prompt cards that match sample prompt titles\n      const promptCards = await db.prepare(`\n        SELECT id, title FROM prompt_cards \n        WHERE title IN (${Object.keys(this.getSampleTestCases()).map(() => '?').join(',')})\n      `).all(...Object.keys(this.getSampleTestCases()));\n\n      for (const card of promptCards) {\n        await this.createTestCasesForPrompt(card.id, card.title);\n      }\n\n      console.log(`Test case initialization completed for ${promptCards.length} prompt cards`);\n    } catch (error) {\n      console.error('Failed to initialize test cases:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate test case structure\n   */\n  public validateTestCase(testCase: SampleTestCase): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!testCase.name?.trim()) {\n      errors.push('Test case name is required');\n    }\n\n    if (!testCase.input_variables || Object.keys(testCase.input_variables).length === 0) {\n      errors.push('Input variables are required');\n    }\n\n    if (!testCase.assertions || testCase.assertions.length === 0) {\n      errors.push('At least one assertion is required');\n    }\n\n    // Validate assertions\n    if (testCase.assertions) {\n      testCase.assertions.forEach((assertion, index) => {\n        if (!assertion.type) {\n          errors.push(`Assertion ${index + 1}: type is required`);\n        }\n        if (assertion.expected === undefined || assertion.expected === null) {\n          errors.push(`Assertion ${index + 1}: expected value is required`);\n        }\n        if (!assertion.description?.trim()) {\n          errors.push(`Assertion ${index + 1}: description is required`);\n        }\n      });\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get test case statistics\n   */\n  public getTestCaseStats() {\n    const testCases = this.getSampleTestCases();\n    const promptTitles = Object.keys(testCases);\n    const totalTestCases = promptTitles.reduce((sum, title) => sum + testCases[title].length, 0);\n    const averageTestCasesPerPrompt = Math.round(totalTestCases / promptTitles.length);\n\n    return {\n      totalPrompts: promptTitles.length,\n      totalTestCases,\n      averageTestCasesPerPrompt,\n      promptsBreakdown: promptTitles.map(title => ({\n        prompt: title,\n        testCaseCount: testCases[title].length\n      }))\n    };\n  }\n}\n\nexport default SampleTestCaseService;"],"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","ignoreList":[]}