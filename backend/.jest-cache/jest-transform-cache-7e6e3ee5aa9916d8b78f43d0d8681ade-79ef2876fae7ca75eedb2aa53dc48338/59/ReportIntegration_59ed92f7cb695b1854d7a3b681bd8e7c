605a16384986e494f61429a8fec2ef4f
"use strict";

/* istanbul ignore next */
function cov_1q2zek2ni5() {
  var path = "/workspaces/prompt-card-system/backend/src/services/reports/ReportIntegration.ts";
  var hash = "406468926033cb420785cc468b0f972ec4fb949c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/reports/ReportIntegration.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 63
        }
      },
      "2": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 50
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 65
        }
      },
      "4": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 47
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 79
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 59
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 65
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 42
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 27
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 54
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 92
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "18": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 81
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "20": {
        start: {
          line: 48,
          column: 27
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "21": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "22": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 75
        }
      },
      "23": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "25": {
        start: {
          line: 72,
          column: 27
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "26": {
        start: {
          line: 78,
          column: 36
        },
        end: {
          line: 78,
          column: 130
        }
      },
      "27": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "28": {
        start: {
          line: 83,
          column: 71
        },
        end: {
          line: 83,
          column: 97
        }
      },
      "29": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 75
        }
      },
      "30": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 91,
          column: 14
        }
      },
      "31": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "32": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 103,
          column: 14
        }
      },
      "33": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 74
        }
      },
      "34": {
        start: {
          line: 106,
          column: 40
        },
        end: {
          line: 108,
          column: 58
        }
      },
      "35": {
        start: {
          line: 106,
          column: 61
        },
        end: {
          line: 108,
          column: 57
        }
      },
      "36": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 114,
          column: 14
        }
      },
      "37": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 73
        }
      },
      "38": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "39": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "40": {
        start: {
          line: 129,
          column: 75
        },
        end: {
          line: 134,
          column: 14
        }
      },
      "41": {
        start: {
          line: 135,
          column: 37
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "42": {
        start: {
          line: 153,
          column: 51
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "43": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 169,
          column: 14
        }
      },
      "44": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 74
        }
      },
      "45": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 176,
          column: 14
        }
      },
      "46": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "47": {
        start: {
          line: 184,
          column: 28
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "48": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 200,
          column: 17
        }
      },
      "49": {
        start: {
          line: 186,
          column: 35
        },
        end: {
          line: 186,
          column: 101
        }
      },
      "50": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 192,
          column: 22
        }
      },
      "51": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 199,
          column: 22
        }
      },
      "52": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 206,
          column: 14
        }
      },
      "53": {
        start: {
          line: 205,
          column: 56
        },
        end: {
          line: 205,
          column: 77
        }
      },
      "54": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 80
        }
      },
      "55": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "56": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "57": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 63
        }
      },
      "58": {
        start: {
          line: 223,
          column: 27
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "59": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 59
        }
      },
      "60": {
        start: {
          line: 229,
          column: 30
        },
        end: {
          line: 229,
          column: 96
        }
      },
      "61": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 80
        }
      },
      "62": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 232,
          column: 100
        }
      },
      "63": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 84
        }
      },
      "64": {
        start: {
          line: 235,
          column: 37
        },
        end: {
          line: 235,
          column: 85
        }
      },
      "65": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 110
        }
      },
      "66": {
        start: {
          line: 238,
          column: 32
        },
        end: {
          line: 238,
          column: 71
        }
      },
      "67": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 117
        }
      },
      "68": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "69": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 61
        }
      },
      "70": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 262,
          column: 14
        }
      },
      "71": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "72": {
        start: {
          line: 268,
          column: 27
        },
        end: {
          line: 271,
          column: 14
        }
      },
      "73": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 89
        }
      },
      "74": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 67
        }
      },
      "75": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "76": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "77": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 87
        }
      },
      "78": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 72
        }
      },
      "79": {
        start: {
          line: 291,
          column: 25
        },
        end: {
          line: 291,
          column: 27
        }
      },
      "80": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "81": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 299,
          column: 15
        }
      },
      "82": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "83": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "84": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "85": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 315,
          column: 15
        }
      },
      "86": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 24
        }
      },
      "87": {
        start: {
          line: 320,
          column: 32
        },
        end: {
          line: 320,
          column: 34
        }
      },
      "88": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "89": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 328,
          column: 15
        }
      },
      "90": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "91": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "92": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 31
        }
      },
      "93": {
        start: {
          line: 341,
          column: 32
        },
        end: {
          line: 341,
          column: 34
        }
      },
      "94": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "95": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "96": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "97": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 360,
          column: 15
        }
      },
      "98": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "99": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 370,
          column: 15
        }
      },
      "100": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 31
        }
      },
      "101": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "102": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 75
        }
      },
      "103": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 63
        }
      },
      "104": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 381,
          column: 70
        }
      },
      "105": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 62
        }
      },
      "106": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 57
        }
      },
      "107": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "108": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 58
        }
      },
      "109": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 64
        }
      },
      "110": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 58
        }
      },
      "111": {
        start: {
          line: 398,
          column: 0
        },
        end: {
          line: 398,
          column: 46
        }
      },
      "112": {
        start: {
          line: 400,
          column: 0
        },
        end: {
          line: 400,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 20
          },
          end: {
            line: 26,
            column: 21
          }
        },
        loc: {
          start: {
            line: 26,
            column: 26
          },
          end: {
            line: 28,
            column: 9
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 26
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 31
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 36,
            column: 60
          },
          end: {
            line: 36,
            column: 61
          }
        },
        loc: {
          start: {
            line: 36,
            column: 71
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 36
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 39,
            column: 59
          },
          end: {
            line: 39,
            column: 60
          }
        },
        loc: {
          start: {
            line: 39,
            column: 70
          },
          end: {
            line: 41,
            column: 9
          }
        },
        line: 39
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 51
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 46
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 51
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 70
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 83,
            column: 57
          },
          end: {
            line: 83,
            column: 58
          }
        },
        loc: {
          start: {
            line: 83,
            column: 71
          },
          end: {
            line: 83,
            column: 97
          }
        },
        line: 83
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 50
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 97
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 106,
            column: 56
          },
          end: {
            line: 106,
            column: 57
          }
        },
        loc: {
          start: {
            line: 106,
            column: 61
          },
          end: {
            line: 108,
            column: 57
          }
        },
        line: 106
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 51
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 127
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 153,
            column: 39
          },
          end: {
            line: 153,
            column: 40
          }
        },
        loc: {
          start: {
            line: 153,
            column: 51
          },
          end: {
            line: 158,
            column: 17
          }
        },
        line: 153
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 72
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 182
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 184,
            column: 58
          },
          end: {
            line: 184,
            column: 59
          }
        },
        loc: {
          start: {
            line: 184,
            column: 76
          },
          end: {
            line: 201,
            column: 13
          }
        },
        line: 184
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 205,
            column: 42
          },
          end: {
            line: 205,
            column: 43
          }
        },
        loc: {
          start: {
            line: 205,
            column: 56
          },
          end: {
            line: 205,
            column: 77
          }
        },
        line: 205
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 219
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 39
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 266
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 35
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 278
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 41
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 290
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 47
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 319
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 84
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 340
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 36
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 374
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 27
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 388
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 37
          },
          end: {
            line: 46,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 49
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 44
          }
        }, {
          start: {
            line: 50,
            column: 48
          },
          end: {
            line: 50,
            column: 108
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 25
          },
          end: {
            line: 51,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 25
          },
          end: {
            line: 51,
            column: 40
          }
        }, {
          start: {
            line: 51,
            column: 44
          },
          end: {
            line: 51,
            column: 68
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 37
          },
          end: {
            line: 70,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 70,
            column: 49
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 44
          }
        }, {
          start: {
            line: 74,
            column: 48
          },
          end: {
            line: 74,
            column: 109
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 40
          }
        }, {
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 75,
            column: 68
          }
        }],
        line: 75
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 36
          },
          end: {
            line: 97,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 97,
            column: 46
          },
          end: {
            line: 97,
            column: 48
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 101,
            column: 27
          },
          end: {
            line: 101,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 27
          },
          end: {
            line: 101,
            column: 44
          }
        }, {
          start: {
            line: 101,
            column: 48
          },
          end: {
            line: 101,
            column: 108
          }
        }],
        line: 101
      },
      "9": {
        loc: {
          start: {
            line: 102,
            column: 25
          },
          end: {
            line: 102,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 25
          },
          end: {
            line: 102,
            column: 40
          }
        }, {
          start: {
            line: 102,
            column: 44
          },
          end: {
            line: 102,
            column: 68
          }
        }],
        line: 102
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 61
          },
          end: {
            line: 108,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 61
          },
          end: {
            line: 106,
            column: 106
          }
        }, {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 55
          }
        }, {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 57
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 37
          },
          end: {
            line: 127,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 47
          },
          end: {
            line: 127,
            column: 49
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 27
          },
          end: {
            line: 137,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 27
          },
          end: {
            line: 137,
            column: 44
          }
        }, {
          start: {
            line: 137,
            column: 48
          },
          end: {
            line: 137,
            column: 109
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 138,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 138,
            column: 40
          }
        }, {
          start: {
            line: 138,
            column: 44
          },
          end: {
            line: 138,
            column: 68
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 182,
            column: 44
          },
          end: {
            line: 182,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 182,
            column: 54
          },
          end: {
            line: 182,
            column: 70
          }
        }],
        line: 182
      },
      "15": {
        loc: {
          start: {
            line: 205,
            column: 63
          },
          end: {
            line: 205,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 63
          },
          end: {
            line: 205,
            column: 71
          }
        }, {
          start: {
            line: 205,
            column: 75
          },
          end: {
            line: 205,
            column: 76
          }
        }],
        line: 205
      },
      "16": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "17": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "18": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "19": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "20": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "21": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "22": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "23": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "24": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 376,
            column: 12
          },
          end: {
            line: 377,
            column: 75
          }
        }, {
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 379,
            column: 63
          }
        }, {
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 381,
            column: 70
          }
        }, {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 383,
            column: 62
          }
        }, {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 385,
            column: 57
          }
        }],
        line: 375
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/reports/ReportIntegration.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/reports/ReportIntegration.ts"],
      sourcesContent: ["import { reportService } from './ReportService';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { CostTracker } from '../CostTracker';\nimport { ReportFilters } from '../../types/reports';\n\n/**\n * Integration service that connects the reporting system with analytics and cost tracking\n */\nexport class ReportIntegration {\n  private analyticsEngine: AnalyticsEngine;\n  private costTracker: CostTracker;\n  private static instance: ReportIntegration;\n\n  private constructor() {\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.costTracker = new CostTracker();\n    this.initializeIntegration();\n  }\n\n  public static getInstance(): ReportIntegration {\n    if (!ReportIntegration.instance) {\n      ReportIntegration.instance = new ReportIntegration();\n    }\n    return ReportIntegration.instance;\n  }\n\n  private initializeIntegration(): void {\n    // Set up event listeners for automatic report generation\n    this.setupEventListeners();\n    \n    // Schedule periodic cleanup\n    setInterval(() => {\n      this.performCleanup();\n    }, 60 * 60 * 1000); // Every hour\n\n    console.log('Report integration initialized');\n  }\n\n  private setupEventListeners(): void {\n    // Note: AnalyticsEngine doesn't extend EventEmitter, so we'll handle events differently\n    // In a real implementation, you would set up event listeners if these classes extended EventEmitter\n    // For now, we'll handle integration through direct method calls\n\n    // Listen for report service events\n    reportService.on('reportGenerated', (event) => {\n      console.log(`Report generated: ${event.reportId} in ${event.generationTime}ms`);\n    });\n\n    reportService.on('reportExported', (event) => {\n      console.log(`Report exported: ${event.reportId} as ${event.format}`);\n    });\n  }\n\n  /**\n   * Generate comprehensive system health report\n   */\n  public async generateSystemHealthReport(filters: ReportFilters = {}): Promise<any> {\n    try {\n      const report = await reportService.generateReport('executive-summary', {\n        ...filters,\n        startDate: filters.startDate || new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        endDate: filters.endDate || new Date().toISOString()\n      });\n\n      return {\n        success: true,\n        report,\n        insights: await this.generateHealthInsights(report)\n      };\n    } catch (error) {\n      console.error('Error generating system health report:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Generate detailed cost analysis report\n   */\n  public async generateCostAnalysisReport(filters: ReportFilters = {}): Promise<any> {\n    try {\n      const report = await reportService.generateReport('cost-analysis', {\n        ...filters,\n        startDate: filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n        endDate: filters.endDate || new Date().toISOString()\n      });\n\n      // Get additional cost recommendations\n      const recommendations = await this.costTracker.generateOptimizationRecommendations(\n        filters.startDate,\n        filters.endDate\n      );\n\n      return {\n        success: true,\n        report,\n        recommendations,\n        potentialSavings: recommendations.reduce((sum, rec) => sum + rec.estimatedSavings, 0)\n      };\n    } catch (error) {\n      console.error('Error generating cost analysis report:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Generate performance benchmark report\n   */\n  public async generatePerformanceReport(filters: ReportFilters = {}): Promise<any> {\n    try {\n      const report = await reportService.generateReport('performance-analysis', {\n        ...filters,\n        startDate: filters.startDate || new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        endDate: filters.endDate || new Date().toISOString()\n      });\n\n      // Get performance insights\n      const insights = await this.analyticsEngine.generateInsights();\n      const performanceInsights = insights.filter(i => \n        i.title.toLowerCase().includes('performance') || \n        i.title.toLowerCase().includes('speed') ||\n        i.title.toLowerCase().includes('latency')\n      );\n\n      return {\n        success: true,\n        report,\n        performanceInsights,\n        recommendations: this.generatePerformanceRecommendations(report)\n      };\n    } catch (error) {\n      console.error('Error generating performance report:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Generate executive dashboard report\n   */\n  public async generateExecutiveDashboard(filters: ReportFilters = {}): Promise<any> {\n    try {\n      const [\n        dashboardMetrics,\n        costSummary,\n        insights,\n        roiAnalysis\n      ] = await Promise.all([\n        this.analyticsEngine.getDashboardMetrics(),\n        this.costTracker.getCostSummary(filters.startDate, filters.endDate),\n        this.analyticsEngine.generateInsights(),\n        this.costTracker.calculateROI(filters.startDate, filters.endDate)\n      ]);\n\n      const executiveSummary = {\n        timeframe: {\n          start: filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n          end: filters.endDate || new Date().toISOString()\n        },\n        keyMetrics: {\n          totalTests: dashboardMetrics.historical.totalTests,\n          successRate: dashboardMetrics.historical.overallSuccessRate,\n          totalCost: costSummary.totalCost,\n          costPerSuccess: roiAnalysis.averageCostPerSuccess,\n          averageResponseTime: dashboardMetrics.historical.averageExecutionTime,\n          totalExecutions: dashboardMetrics.historical.totalExecutions\n        },\n        trends: {\n          testVolume: dashboardMetrics.trends.testsOverTime,\n          successRate: dashboardMetrics.trends.successRateOverTime,\n          performance: dashboardMetrics.trends.performanceOverTime\n        },\n        insights: insights.map(insight => ({\n          title: insight.title,\n          description: insight.description,\n          severity: insight.severity,\n          impact: this.calculateInsightImpact(insight)\n        })),\n        recommendations: await this.generateExecutiveRecommendations(dashboardMetrics, costSummary, insights)\n      };\n\n      return {\n        success: true,\n        executiveSummary,\n        detailedMetrics: {\n          analytics: dashboardMetrics,\n          cost: costSummary,\n          roi: roiAnalysis\n        }\n      };\n    } catch (error) {\n      console.error('Error generating executive dashboard:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Export report in multiple formats\n   */\n  public async exportReportMultiFormat(reportId: string, formats: string[] = ['pdf', 'excel']): Promise<any> {\n    try {\n      const exports = await Promise.all(\n        formats.map(async (format) => {\n          try {\n            const buffer = await reportService.exportReport(reportId, format as any);\n            return {\n              format,\n              success: true,\n              size: buffer.length,\n              filename: `report_${reportId}_${Date.now()}.${format}`\n            };\n          } catch (error) {\n            return {\n              format,\n              success: false,\n              error: error.message\n            };\n          }\n        })\n      );\n\n      return {\n        success: true,\n        exports,\n        totalSize: exports.reduce((sum, exp) => sum + (exp.size || 0), 0)\n      };\n    } catch (error) {\n      console.error('Error exporting report in multiple formats:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Test report integration\n   */\n  public async testIntegration(): Promise<any> {\n    try {\n      console.log('Starting report integration test...');\n\n      // Test 1: Generate a simple report\n      const report = await reportService.generateReport('executive-summary', {\n        startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        endDate: new Date().toISOString()\n      });\n\n      console.log('\u2713 Report generation test passed');\n\n      // Test 2: Export report as PDF\n      const pdfBuffer = await reportService.exportReport(report.id, 'pdf');\n      console.log(`\u2713 PDF export test passed (${pdfBuffer.length} bytes)`);\n\n      // Test 3: Export report as Excel\n      const excelBuffer = await reportService.exportReport(report.id, 'excel');\n      console.log(`\u2713 Excel export test passed (${excelBuffer.length} bytes)`);\n\n      // Test 4: Test analytics integration\n      const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n      console.log(`\u2713 Analytics integration test passed (${dashboardMetrics.insights.length} insights)`);\n\n      // Test 5: Test cost tracking integration\n      const costSummary = await this.costTracker.getCostSummary();\n      console.log(`\u2713 Cost tracking integration test passed ($${costSummary.totalCost.toFixed(2)} total cost)`);\n\n      return {\n        success: true,\n        message: 'All integration tests passed',\n        testResults: {\n          reportGeneration: true,\n          pdfExport: true,\n          excelExport: true,\n          analyticsIntegration: true,\n          costTrackingIntegration: true\n        },\n        reportId: report.id,\n        exportSizes: {\n          pdf: pdfBuffer.length,\n          excel: excelBuffer.length\n        }\n      };\n    } catch (error) {\n      console.error('Integration test failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Private helper methods\n  private async generateAlertReport(insight: any): Promise<void> {\n    try {\n      const report = await reportService.generateReport('executive-summary', {\n        startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        endDate: new Date().toISOString()\n      });\n\n      console.log(`Alert report generated for critical insight: ${insight.title}`);\n    } catch (error) {\n      console.error('Error generating alert report:', error);\n    }\n  }\n\n  private async generateCostAlert(alert: any): Promise<void> {\n    try {\n      const report = await reportService.generateReport('cost-analysis', {\n        startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        endDate: new Date().toISOString()\n      });\n\n      console.log(`Cost alert report generated for budget alert: ${alert.name}`);\n    } catch (error) {\n      console.error('Error generating cost alert report:', error);\n    }\n  }\n\n  private async generateHealthInsights(report: any): Promise<any[]> {\n    const insights = [];\n\n    // Analyze report metrics for health insights\n    if (report.metadata.successRate < 80) {\n      insights.push({\n        type: 'warning',\n        title: 'Low Success Rate',\n        description: `Success rate is ${report.metadata.successRate.toFixed(1)}%, below recommended 80%`,\n        recommendation: 'Review failing test cases and optimize assertions'\n      });\n    }\n\n    if (report.metadata.averagePerformance > 5000) {\n      insights.push({\n        type: 'warning',\n        title: 'High Response Time',\n        description: `Average response time is ${report.metadata.averagePerformance.toFixed(0)}ms`,\n        recommendation: 'Consider optimizing model configurations or scaling infrastructure'\n      });\n    }\n\n    if (report.metadata.totalCost > 100) {\n      insights.push({\n        type: 'info',\n        title: 'High Cost Usage',\n        description: `Total cost is $${report.metadata.totalCost.toFixed(2)}`,\n        recommendation: 'Review cost optimization recommendations'\n      });\n    }\n\n    return insights;\n  }\n\n  private generatePerformanceRecommendations(report: any): any[] {\n    const recommendations = [];\n\n    // Analyze performance metrics and generate recommendations\n    if (report.metadata.averagePerformance > 3000) {\n      recommendations.push({\n        priority: 'high',\n        title: 'Optimize Response Time',\n        description: 'Consider using faster models or implementing caching',\n        impact: 'Could improve response time by 30-50%'\n      });\n    }\n\n    if (report.metadata.totalExecutions > 10000) {\n      recommendations.push({\n        priority: 'medium',\n        title: 'Implement Batching',\n        description: 'Group similar test cases for batch processing',\n        impact: 'Could reduce execution time by 20-30%'\n      });\n    }\n\n    return recommendations;\n  }\n\n  private async generateExecutiveRecommendations(\n    dashboardMetrics: any,\n    costSummary: any,\n    insights: any[]\n  ): Promise<any[]> {\n    const recommendations = [];\n\n    // Cost optimization recommendations\n    if (costSummary.totalCost > 50) {\n      recommendations.push({\n        category: 'cost',\n        priority: 'high',\n        title: 'Implement Cost Controls',\n        description: 'Current spend is high, consider implementing budget alerts and cost optimization',\n        estimatedSavings: costSummary.totalCost * 0.2\n      });\n    }\n\n    // Performance recommendations\n    if (dashboardMetrics.historical.averageExecutionTime > 2000) {\n      recommendations.push({\n        category: 'performance',\n        priority: 'medium',\n        title: 'Optimize Test Execution',\n        description: 'Average execution time is above optimal range',\n        estimatedImprovement: '30-40% faster execution'\n      });\n    }\n\n    // Quality recommendations\n    if (dashboardMetrics.historical.overallSuccessRate < 0.85) {\n      recommendations.push({\n        category: 'quality',\n        priority: 'high',\n        title: 'Improve Test Quality',\n        description: 'Success rate is below industry standards',\n        estimatedImprovement: 'Increase success rate to 90%+'\n      });\n    }\n\n    return recommendations;\n  }\n\n  private calculateInsightImpact(insight: any): string {\n    switch (insight.severity) {\n      case 'critical':\n        return 'High impact on system performance and reliability';\n      case 'high':\n        return 'Moderate impact on system performance';\n      case 'medium':\n        return 'Low to moderate impact on system performance';\n      case 'low':\n        return 'Minimal impact on system performance';\n      default:\n        return 'Impact assessment not available';\n    }\n  }\n\n  private async performCleanup(): Promise<void> {\n    try {\n      await reportService.cleanup();\n      console.log('Report integration cleanup completed');\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const reportIntegration = ReportIntegration.getInstance();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "406468926033cb420785cc468b0f972ec4fb949c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1q2zek2ni5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1q2zek2ni5();
cov_1q2zek2ni5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1q2zek2ni5().s[1]++;
exports.reportIntegration = exports.ReportIntegration = void 0;
const ReportService_1 =
/* istanbul ignore next */
(cov_1q2zek2ni5().s[2]++, require("./ReportService"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1q2zek2ni5().s[3]++, require("../analytics/AnalyticsEngine"));
const CostTracker_1 =
/* istanbul ignore next */
(cov_1q2zek2ni5().s[4]++, require("../CostTracker"));
/**
 * Integration service that connects the reporting system with analytics and cost tracking
 */
class ReportIntegration {
  constructor() {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[0]++;
    cov_1q2zek2ni5().s[5]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[6]++;
    this.costTracker = new CostTracker_1.CostTracker();
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[7]++;
    this.initializeIntegration();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[1]++;
    cov_1q2zek2ni5().s[8]++;
    if (!ReportIntegration.instance) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[0][0]++;
      cov_1q2zek2ni5().s[9]++;
      ReportIntegration.instance = new ReportIntegration();
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[0][1]++;
    }
    cov_1q2zek2ni5().s[10]++;
    return ReportIntegration.instance;
  }
  initializeIntegration() {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[2]++;
    cov_1q2zek2ni5().s[11]++;
    // Set up event listeners for automatic report generation
    this.setupEventListeners();
    // Schedule periodic cleanup
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[12]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_1q2zek2ni5().f[3]++;
      cov_1q2zek2ni5().s[13]++;
      this.performCleanup();
    }, 60 * 60 * 1000); // Every hour
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[14]++;
    console.log('Report integration initialized');
  }
  setupEventListeners() {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[4]++;
    cov_1q2zek2ni5().s[15]++;
    // Note: AnalyticsEngine doesn't extend EventEmitter, so we'll handle events differently
    // In a real implementation, you would set up event listeners if these classes extended EventEmitter
    // For now, we'll handle integration through direct method calls
    // Listen for report service events
    ReportService_1.reportService.on('reportGenerated', event => {
      /* istanbul ignore next */
      cov_1q2zek2ni5().f[5]++;
      cov_1q2zek2ni5().s[16]++;
      console.log(`Report generated: ${event.reportId} in ${event.generationTime}ms`);
    });
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[17]++;
    ReportService_1.reportService.on('reportExported', event => {
      /* istanbul ignore next */
      cov_1q2zek2ni5().f[6]++;
      cov_1q2zek2ni5().s[18]++;
      console.log(`Report exported: ${event.reportId} as ${event.format}`);
    });
  }
  /**
   * Generate comprehensive system health report
   */
  async generateSystemHealthReport(filters =
  /* istanbul ignore next */
  (cov_1q2zek2ni5().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[7]++;
    cov_1q2zek2ni5().s[19]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[20]++, await ReportService_1.reportService.generateReport('executive-summary', {
        ...filters,
        startDate:
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[2][0]++, filters.startDate) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[2][1]++, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()),
        endDate:
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[3][0]++, filters.endDate) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[3][1]++, new Date().toISOString())
      }));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[21]++;
      return {
        success: true,
        report,
        insights: await this.generateHealthInsights(report)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[22]++;
      console.error('Error generating system health report:', error);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[23]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * Generate detailed cost analysis report
   */
  async generateCostAnalysisReport(filters =
  /* istanbul ignore next */
  (cov_1q2zek2ni5().b[4][0]++, {})) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[8]++;
    cov_1q2zek2ni5().s[24]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[25]++, await ReportService_1.reportService.generateReport('cost-analysis', {
        ...filters,
        startDate:
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[5][0]++, filters.startDate) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[5][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()),
        endDate:
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[6][0]++, filters.endDate) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[6][1]++, new Date().toISOString())
      }));
      // Get additional cost recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[26]++, await this.costTracker.generateOptimizationRecommendations(filters.startDate, filters.endDate));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[27]++;
      return {
        success: true,
        report,
        recommendations,
        potentialSavings: recommendations.reduce((sum, rec) => {
          /* istanbul ignore next */
          cov_1q2zek2ni5().f[9]++;
          cov_1q2zek2ni5().s[28]++;
          return sum + rec.estimatedSavings;
        }, 0)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[29]++;
      console.error('Error generating cost analysis report:', error);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[30]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * Generate performance benchmark report
   */
  async generatePerformanceReport(filters =
  /* istanbul ignore next */
  (cov_1q2zek2ni5().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[10]++;
    cov_1q2zek2ni5().s[31]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[32]++, await ReportService_1.reportService.generateReport('performance-analysis', {
        ...filters,
        startDate:
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[8][0]++, filters.startDate) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[8][1]++, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()),
        endDate:
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[9][0]++, filters.endDate) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[9][1]++, new Date().toISOString())
      }));
      // Get performance insights
      const insights =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[33]++, await this.analyticsEngine.generateInsights());
      const performanceInsights =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[34]++, insights.filter(i => {
        /* istanbul ignore next */
        cov_1q2zek2ni5().f[11]++;
        cov_1q2zek2ni5().s[35]++;
        return /* istanbul ignore next */(cov_1q2zek2ni5().b[10][0]++, i.title.toLowerCase().includes('performance')) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[10][1]++, i.title.toLowerCase().includes('speed')) ||
        /* istanbul ignore next */
        (cov_1q2zek2ni5().b[10][2]++, i.title.toLowerCase().includes('latency'));
      }));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[36]++;
      return {
        success: true,
        report,
        performanceInsights,
        recommendations: this.generatePerformanceRecommendations(report)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[37]++;
      console.error('Error generating performance report:', error);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[38]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * Generate executive dashboard report
   */
  async generateExecutiveDashboard(filters =
  /* istanbul ignore next */
  (cov_1q2zek2ni5().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[12]++;
    cov_1q2zek2ni5().s[39]++;
    try {
      const [dashboardMetrics, costSummary, insights, roiAnalysis] =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[40]++, await Promise.all([this.analyticsEngine.getDashboardMetrics(), this.costTracker.getCostSummary(filters.startDate, filters.endDate), this.analyticsEngine.generateInsights(), this.costTracker.calculateROI(filters.startDate, filters.endDate)]));
      const executiveSummary =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[41]++, {
        timeframe: {
          start:
          /* istanbul ignore next */
          (cov_1q2zek2ni5().b[12][0]++, filters.startDate) ||
          /* istanbul ignore next */
          (cov_1q2zek2ni5().b[12][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()),
          end:
          /* istanbul ignore next */
          (cov_1q2zek2ni5().b[13][0]++, filters.endDate) ||
          /* istanbul ignore next */
          (cov_1q2zek2ni5().b[13][1]++, new Date().toISOString())
        },
        keyMetrics: {
          totalTests: dashboardMetrics.historical.totalTests,
          successRate: dashboardMetrics.historical.overallSuccessRate,
          totalCost: costSummary.totalCost,
          costPerSuccess: roiAnalysis.averageCostPerSuccess,
          averageResponseTime: dashboardMetrics.historical.averageExecutionTime,
          totalExecutions: dashboardMetrics.historical.totalExecutions
        },
        trends: {
          testVolume: dashboardMetrics.trends.testsOverTime,
          successRate: dashboardMetrics.trends.successRateOverTime,
          performance: dashboardMetrics.trends.performanceOverTime
        },
        insights: insights.map(insight => {
          /* istanbul ignore next */
          cov_1q2zek2ni5().f[13]++;
          cov_1q2zek2ni5().s[42]++;
          return {
            title: insight.title,
            description: insight.description,
            severity: insight.severity,
            impact: this.calculateInsightImpact(insight)
          };
        }),
        recommendations: await this.generateExecutiveRecommendations(dashboardMetrics, costSummary, insights)
      });
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[43]++;
      return {
        success: true,
        executiveSummary,
        detailedMetrics: {
          analytics: dashboardMetrics,
          cost: costSummary,
          roi: roiAnalysis
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[44]++;
      console.error('Error generating executive dashboard:', error);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[45]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * Export report in multiple formats
   */
  async exportReportMultiFormat(reportId, formats =
  /* istanbul ignore next */
  (cov_1q2zek2ni5().b[14][0]++, ['pdf', 'excel'])) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[14]++;
    cov_1q2zek2ni5().s[46]++;
    try {
      const exports =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[47]++, await Promise.all(formats.map(async format => {
        /* istanbul ignore next */
        cov_1q2zek2ni5().f[15]++;
        cov_1q2zek2ni5().s[48]++;
        try {
          const buffer =
          /* istanbul ignore next */
          (cov_1q2zek2ni5().s[49]++, await ReportService_1.reportService.exportReport(reportId, format));
          /* istanbul ignore next */
          cov_1q2zek2ni5().s[50]++;
          return {
            format,
            success: true,
            size: buffer.length,
            filename: `report_${reportId}_${Date.now()}.${format}`
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1q2zek2ni5().s[51]++;
          return {
            format,
            success: false,
            error: error.message
          };
        }
      })));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[52]++;
      return {
        success: true,
        exports,
        totalSize: exports.reduce((sum, exp) => {
          /* istanbul ignore next */
          cov_1q2zek2ni5().f[16]++;
          cov_1q2zek2ni5().s[53]++;
          return sum + (
          /* istanbul ignore next */
          (cov_1q2zek2ni5().b[15][0]++, exp.size) ||
          /* istanbul ignore next */
          (cov_1q2zek2ni5().b[15][1]++, 0));
        }, 0)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[54]++;
      console.error('Error exporting report in multiple formats:', error);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[55]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * Test report integration
   */
  async testIntegration() {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[17]++;
    cov_1q2zek2ni5().s[56]++;
    try {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[57]++;
      console.log('Starting report integration test...');
      // Test 1: Generate a simple report
      const report =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[58]++, await ReportService_1.reportService.generateReport('executive-summary', {
        startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        endDate: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[59]++;
      console.log('✓ Report generation test passed');
      // Test 2: Export report as PDF
      const pdfBuffer =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[60]++, await ReportService_1.reportService.exportReport(report.id, 'pdf'));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[61]++;
      console.log(`✓ PDF export test passed (${pdfBuffer.length} bytes)`);
      // Test 3: Export report as Excel
      const excelBuffer =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[62]++, await ReportService_1.reportService.exportReport(report.id, 'excel'));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[63]++;
      console.log(`✓ Excel export test passed (${excelBuffer.length} bytes)`);
      // Test 4: Test analytics integration
      const dashboardMetrics =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[64]++, await this.analyticsEngine.getDashboardMetrics());
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[65]++;
      console.log(`✓ Analytics integration test passed (${dashboardMetrics.insights.length} insights)`);
      // Test 5: Test cost tracking integration
      const costSummary =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[66]++, await this.costTracker.getCostSummary());
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[67]++;
      console.log(`✓ Cost tracking integration test passed ($${costSummary.totalCost.toFixed(2)} total cost)`);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[68]++;
      return {
        success: true,
        message: 'All integration tests passed',
        testResults: {
          reportGeneration: true,
          pdfExport: true,
          excelExport: true,
          analyticsIntegration: true,
          costTrackingIntegration: true
        },
        reportId: report.id,
        exportSizes: {
          pdf: pdfBuffer.length,
          excel: excelBuffer.length
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[69]++;
      console.error('Integration test failed:', error);
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[70]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  // Private helper methods
  async generateAlertReport(insight) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[18]++;
    cov_1q2zek2ni5().s[71]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[72]++, await ReportService_1.reportService.generateReport('executive-summary', {
        startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        endDate: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[73]++;
      console.log(`Alert report generated for critical insight: ${insight.title}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[74]++;
      console.error('Error generating alert report:', error);
    }
  }
  async generateCostAlert(alert) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[19]++;
    cov_1q2zek2ni5().s[75]++;
    try {
      const report =
      /* istanbul ignore next */
      (cov_1q2zek2ni5().s[76]++, await ReportService_1.reportService.generateReport('cost-analysis', {
        startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
        endDate: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[77]++;
      console.log(`Cost alert report generated for budget alert: ${alert.name}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[78]++;
      console.error('Error generating cost alert report:', error);
    }
  }
  async generateHealthInsights(report) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[20]++;
    const insights =
    /* istanbul ignore next */
    (cov_1q2zek2ni5().s[79]++, []);
    // Analyze report metrics for health insights
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[80]++;
    if (report.metadata.successRate < 80) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[16][0]++;
      cov_1q2zek2ni5().s[81]++;
      insights.push({
        type: 'warning',
        title: 'Low Success Rate',
        description: `Success rate is ${report.metadata.successRate.toFixed(1)}%, below recommended 80%`,
        recommendation: 'Review failing test cases and optimize assertions'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[16][1]++;
    }
    cov_1q2zek2ni5().s[82]++;
    if (report.metadata.averagePerformance > 5000) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[17][0]++;
      cov_1q2zek2ni5().s[83]++;
      insights.push({
        type: 'warning',
        title: 'High Response Time',
        description: `Average response time is ${report.metadata.averagePerformance.toFixed(0)}ms`,
        recommendation: 'Consider optimizing model configurations or scaling infrastructure'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[17][1]++;
    }
    cov_1q2zek2ni5().s[84]++;
    if (report.metadata.totalCost > 100) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[18][0]++;
      cov_1q2zek2ni5().s[85]++;
      insights.push({
        type: 'info',
        title: 'High Cost Usage',
        description: `Total cost is $${report.metadata.totalCost.toFixed(2)}`,
        recommendation: 'Review cost optimization recommendations'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[18][1]++;
    }
    cov_1q2zek2ni5().s[86]++;
    return insights;
  }
  generatePerformanceRecommendations(report) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[21]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1q2zek2ni5().s[87]++, []);
    // Analyze performance metrics and generate recommendations
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[88]++;
    if (report.metadata.averagePerformance > 3000) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[19][0]++;
      cov_1q2zek2ni5().s[89]++;
      recommendations.push({
        priority: 'high',
        title: 'Optimize Response Time',
        description: 'Consider using faster models or implementing caching',
        impact: 'Could improve response time by 30-50%'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[19][1]++;
    }
    cov_1q2zek2ni5().s[90]++;
    if (report.metadata.totalExecutions > 10000) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[20][0]++;
      cov_1q2zek2ni5().s[91]++;
      recommendations.push({
        priority: 'medium',
        title: 'Implement Batching',
        description: 'Group similar test cases for batch processing',
        impact: 'Could reduce execution time by 20-30%'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[20][1]++;
    }
    cov_1q2zek2ni5().s[92]++;
    return recommendations;
  }
  async generateExecutiveRecommendations(dashboardMetrics, costSummary, insights) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[22]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1q2zek2ni5().s[93]++, []);
    // Cost optimization recommendations
    /* istanbul ignore next */
    cov_1q2zek2ni5().s[94]++;
    if (costSummary.totalCost > 50) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[21][0]++;
      cov_1q2zek2ni5().s[95]++;
      recommendations.push({
        category: 'cost',
        priority: 'high',
        title: 'Implement Cost Controls',
        description: 'Current spend is high, consider implementing budget alerts and cost optimization',
        estimatedSavings: costSummary.totalCost * 0.2
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[21][1]++;
    }
    // Performance recommendations
    cov_1q2zek2ni5().s[96]++;
    if (dashboardMetrics.historical.averageExecutionTime > 2000) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[22][0]++;
      cov_1q2zek2ni5().s[97]++;
      recommendations.push({
        category: 'performance',
        priority: 'medium',
        title: 'Optimize Test Execution',
        description: 'Average execution time is above optimal range',
        estimatedImprovement: '30-40% faster execution'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[22][1]++;
    }
    // Quality recommendations
    cov_1q2zek2ni5().s[98]++;
    if (dashboardMetrics.historical.overallSuccessRate < 0.85) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().b[23][0]++;
      cov_1q2zek2ni5().s[99]++;
      recommendations.push({
        category: 'quality',
        priority: 'high',
        title: 'Improve Test Quality',
        description: 'Success rate is below industry standards',
        estimatedImprovement: 'Increase success rate to 90%+'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1q2zek2ni5().b[23][1]++;
    }
    cov_1q2zek2ni5().s[100]++;
    return recommendations;
  }
  calculateInsightImpact(insight) {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[23]++;
    cov_1q2zek2ni5().s[101]++;
    switch (insight.severity) {
      case 'critical':
        /* istanbul ignore next */
        cov_1q2zek2ni5().b[24][0]++;
        cov_1q2zek2ni5().s[102]++;
        return 'High impact on system performance and reliability';
      case 'high':
        /* istanbul ignore next */
        cov_1q2zek2ni5().b[24][1]++;
        cov_1q2zek2ni5().s[103]++;
        return 'Moderate impact on system performance';
      case 'medium':
        /* istanbul ignore next */
        cov_1q2zek2ni5().b[24][2]++;
        cov_1q2zek2ni5().s[104]++;
        return 'Low to moderate impact on system performance';
      case 'low':
        /* istanbul ignore next */
        cov_1q2zek2ni5().b[24][3]++;
        cov_1q2zek2ni5().s[105]++;
        return 'Minimal impact on system performance';
      default:
        /* istanbul ignore next */
        cov_1q2zek2ni5().b[24][4]++;
        cov_1q2zek2ni5().s[106]++;
        return 'Impact assessment not available';
    }
  }
  async performCleanup() {
    /* istanbul ignore next */
    cov_1q2zek2ni5().f[24]++;
    cov_1q2zek2ni5().s[107]++;
    try {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[108]++;
      await ReportService_1.reportService.cleanup();
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[109]++;
      console.log('Report integration cleanup completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1q2zek2ni5().s[110]++;
      console.error('Error during cleanup:', error);
    }
  }
}
/* istanbul ignore next */
cov_1q2zek2ni5().s[111]++;
exports.ReportIntegration = ReportIntegration;
// Export singleton instance
/* istanbul ignore next */
cov_1q2zek2ni5().s[112]++;
exports.reportIntegration = ReportIntegration.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,