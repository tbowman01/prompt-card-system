9ebaa43d2f7bf95230da0106c1ed548a
"use strict";

/* istanbul ignore next */
function cov_2ilwn7zkb0() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/health.ts";
  var hash = "5562d3a70330fefb4407d5d7b520d6ce8f88b19e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/health.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 30
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "7": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "8": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 65
        }
      },
      "9": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 14,
          column: 78
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "12": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "13": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "14": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 39,
          column: 107
        }
      },
      "15": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 103
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "17": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 17
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 18
          },
          end: {
            line: 37,
            column: 19
          }
        },
        loc: {
          start: {
            line: 37,
            column: 32
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 37
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 53
          }
        }, {
          start: {
            line: 14,
            column: 57
          },
          end: {
            line: 14,
            column: 78
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 36
          },
          end: {
            line: 19,
            column: 47
          }
        }, {
          start: {
            line: 19,
            column: 50
          },
          end: {
            line: 19,
            column: 64
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 45
          }
        }, {
          start: {
            line: 25,
            column: 49
          },
          end: {
            line: 25,
            column: 62
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 19
          },
          end: {
            line: 31,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 44
          },
          end: {
            line: 31,
            column: 57
          }
        }, {
          start: {
            line: 31,
            column: 60
          },
          end: {
            line: 31,
            column: 75
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 44
          },
          end: {
            line: 53,
            column: 57
          }
        }, {
          start: {
            line: 53,
            column: 60
          },
          end: {
            line: 53,
            column: 88
          }
        }],
        line: 53
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/health.ts",
      mappings: ";;;AAAA,qCAAoD;AACpD,uDAA4C;AAE5C,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAsDL,8BAAY;AApD/B,wBAAwB;AACxB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAC9C,IAAI,CAAC;QACH,4BAA4B;QAC5B,MAAM,OAAO,GAAG,eAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;QAE7C,wCAAwC;QACxC,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,qBAAqB,CAAC;QAEvE,GAAG,CAAC,IAAI,CAAC;YACP,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,QAAQ,EAAE;gBACR,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc;gBAChD,MAAM,EAAE;oBACN,GAAG,EAAE,SAAS;oBACd,MAAM,EAAE,YAAY,CAAC,8BAA8B;iBACpD;aACF;YACD,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa;SACnD,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,WAAW;YACnB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;YAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,2BAA2B;AAC3B,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAChD,IAAI,CAAC;QACH,MAAM,eAAe,GAAG,eAAE,CAAC,OAAO,CAAC,4CAA4C,CAAC,CAAC,GAAG,EAAuB,CAAC;QAC5G,MAAM,aAAa,GAAG,eAAE,CAAC,OAAO,CAAC,0CAA0C,CAAC,CAAC,GAAG,EAAuB,CAAC;QAExG,GAAG,CAAC,IAAI,CAAC;YACP,MAAM,EAAE,WAAW;YACnB,KAAK,EAAE;gBACL,YAAY,EAAE,eAAe,CAAC,KAAK;gBACnC,UAAU,EAAE,aAAa,CAAC,KAAK;aAChC;YACD,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa;SACzC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;SAC7E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/health.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { db } from '../database/connection';\n\nconst router = Router();\n\n// Health check endpoint\nrouter.get('/', (req: Request, res: Response) => {\n  try {\n    // Check database connection\n    const dbCheck = db.prepare('SELECT 1').get();\n    \n    // Check Ollama connection (basic check)\n    const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n    \n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        database: dbCheck ? 'connected' : 'disconnected',\n        ollama: {\n          url: ollamaUrl,\n          status: 'configured' // Will be enhanced in Phase 3\n        }\n      },\n      environment: process.env.NODE_ENV || 'development'\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Database status endpoint\nrouter.get('/db', (req: Request, res: Response) => {\n  try {\n    const promptCardCount = db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number };\n    const testCaseCount = db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number };\n    \n    res.json({\n      status: 'connected',\n      stats: {\n        prompt_cards: promptCardCount.count,\n        test_cases: testCaseCount.count\n      },\n      database_path: process.env.DATABASE_PATH\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'error',\n      error: error instanceof Error ? error.message : 'Database connection failed'\n    });\n  }\n});\n\nexport { router as healthRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5562d3a70330fefb4407d5d7b520d6ce8f88b19e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ilwn7zkb0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ilwn7zkb0();
cov_2ilwn7zkb0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ilwn7zkb0().s[1]++;
exports.healthRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_2ilwn7zkb0().s[2]++, require("express"));
const connection_1 =
/* istanbul ignore next */
(cov_2ilwn7zkb0().s[3]++, require("../database/connection"));
const router =
/* istanbul ignore next */
(cov_2ilwn7zkb0().s[4]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_2ilwn7zkb0().s[5]++;
exports.healthRoutes = router;
// Health check endpoint
/* istanbul ignore next */
cov_2ilwn7zkb0().s[6]++;
router.get('/', (req, res) => {
  /* istanbul ignore next */
  cov_2ilwn7zkb0().f[0]++;
  cov_2ilwn7zkb0().s[7]++;
  try {
    // Check database connection
    const dbCheck =
    /* istanbul ignore next */
    (cov_2ilwn7zkb0().s[8]++, connection_1.db.prepare('SELECT 1').get());
    // Check Ollama connection (basic check)
    const ollamaUrl =
    /* istanbul ignore next */
    (cov_2ilwn7zkb0().s[9]++,
    /* istanbul ignore next */
    (cov_2ilwn7zkb0().b[0][0]++, process.env.OLLAMA_BASE_URL) ||
    /* istanbul ignore next */
    (cov_2ilwn7zkb0().b[0][1]++, 'http://ollama:11434'));
    /* istanbul ignore next */
    cov_2ilwn7zkb0().s[10]++;
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      services: {
        database: dbCheck ?
        /* istanbul ignore next */
        (cov_2ilwn7zkb0().b[1][0]++, 'connected') :
        /* istanbul ignore next */
        (cov_2ilwn7zkb0().b[1][1]++, 'disconnected'),
        ollama: {
          url: ollamaUrl,
          status: 'configured' // Will be enhanced in Phase 3
        }
      },
      environment:
      /* istanbul ignore next */
      (cov_2ilwn7zkb0().b[2][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_2ilwn7zkb0().b[2][1]++, 'development')
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ilwn7zkb0().s[11]++;
    res.status(500).json({
      status: 'unhealthy',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ilwn7zkb0().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ilwn7zkb0().b[3][1]++, 'Unknown error'),
      timestamp: new Date().toISOString()
    });
  }
});
// Database status endpoint
/* istanbul ignore next */
cov_2ilwn7zkb0().s[12]++;
router.get('/db', (req, res) => {
  /* istanbul ignore next */
  cov_2ilwn7zkb0().f[1]++;
  cov_2ilwn7zkb0().s[13]++;
  try {
    const promptCardCount =
    /* istanbul ignore next */
    (cov_2ilwn7zkb0().s[14]++, connection_1.db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get());
    const testCaseCount =
    /* istanbul ignore next */
    (cov_2ilwn7zkb0().s[15]++, connection_1.db.prepare('SELECT COUNT(*) as count FROM test_cases').get());
    /* istanbul ignore next */
    cov_2ilwn7zkb0().s[16]++;
    res.json({
      status: 'connected',
      stats: {
        prompt_cards: promptCardCount.count,
        test_cases: testCaseCount.count
      },
      database_path: process.env.DATABASE_PATH
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ilwn7zkb0().s[17]++;
    res.status(500).json({
      status: 'error',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ilwn7zkb0().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ilwn7zkb0().b[4][1]++, 'Database connection failed')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmlsd243emtiMCIsImFjdHVhbENvdmVyYWdlIiwicyIsImV4cHJlc3NfMSIsInJlcXVpcmUiLCJjb25uZWN0aW9uXzEiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJleHBvcnRzIiwiaGVhbHRoUm91dGVzIiwiZ2V0IiwicmVxIiwicmVzIiwiZiIsImRiQ2hlY2siLCJkYiIsInByZXBhcmUiLCJvbGxhbWFVcmwiLCJiIiwicHJvY2VzcyIsImVudiIsIk9MTEFNQV9CQVNFX1VSTCIsImpzb24iLCJzdGF0dXMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzZXJ2aWNlcyIsImRhdGFiYXNlIiwib2xsYW1hIiwidXJsIiwiZW52aXJvbm1lbnQiLCJOT0RFX0VOViIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwicHJvbXB0Q2FyZENvdW50IiwidGVzdENhc2VDb3VudCIsInN0YXRzIiwicHJvbXB0X2NhcmRzIiwiY291bnQiLCJ0ZXN0X2Nhc2VzIiwiZGF0YWJhc2VfcGF0aCIsIkRBVEFCQVNFX1BBVEgiXSwic291cmNlcyI6WyIvd29ya3NwYWNlcy9wcm9tcHQtY2FyZC1zeXN0ZW0vYmFja2VuZC9zcmMvcm91dGVzL2hlYWx0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIsIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uL2RhdGFiYXNlL2Nvbm5lY3Rpb24nO1xuXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuLy8gSGVhbHRoIGNoZWNrIGVuZHBvaW50XG5yb3V0ZXIuZ2V0KCcvJywgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIC8vIENoZWNrIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgICBjb25zdCBkYkNoZWNrID0gZGIucHJlcGFyZSgnU0VMRUNUIDEnKS5nZXQoKTtcbiAgICBcbiAgICAvLyBDaGVjayBPbGxhbWEgY29ubmVjdGlvbiAoYmFzaWMgY2hlY2spXG4gICAgY29uc3Qgb2xsYW1hVXJsID0gcHJvY2Vzcy5lbnYuT0xMQU1BX0JBU0VfVVJMIHx8ICdodHRwOi8vb2xsYW1hOjExNDM0JztcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdGF0dXM6ICdoZWFsdGh5JyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgZGF0YWJhc2U6IGRiQ2hlY2sgPyAnY29ubmVjdGVkJyA6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICBvbGxhbWE6IHtcbiAgICAgICAgICB1cmw6IG9sbGFtYVVybCxcbiAgICAgICAgICBzdGF0dXM6ICdjb25maWd1cmVkJyAvLyBXaWxsIGJlIGVuaGFuY2VkIGluIFBoYXNlIDNcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3RhdHVzOiAndW5oZWFsdGh5JyxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBEYXRhYmFzZSBzdGF0dXMgZW5kcG9pbnRcbnJvdXRlci5nZXQoJy9kYicsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9tcHRDYXJkQ291bnQgPSBkYi5wcmVwYXJlKCdTRUxFQ1QgQ09VTlQoKikgYXMgY291bnQgRlJPTSBwcm9tcHRfY2FyZHMnKS5nZXQoKSBhcyB7IGNvdW50OiBudW1iZXIgfTtcbiAgICBjb25zdCB0ZXN0Q2FzZUNvdW50ID0gZGIucHJlcGFyZSgnU0VMRUNUIENPVU5UKCopIGFzIGNvdW50IEZST00gdGVzdF9jYXNlcycpLmdldCgpIGFzIHsgY291bnQ6IG51bWJlciB9O1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN0YXR1czogJ2Nvbm5lY3RlZCcsXG4gICAgICBzdGF0czoge1xuICAgICAgICBwcm9tcHRfY2FyZHM6IHByb21wdENhcmRDb3VudC5jb3VudCxcbiAgICAgICAgdGVzdF9jYXNlczogdGVzdENhc2VDb3VudC5jb3VudFxuICAgICAgfSxcbiAgICAgIGRhdGFiYXNlX3BhdGg6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1BBVEhcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgeyByb3V0ZXIgYXMgaGVhbHRoUm91dGVzIH07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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