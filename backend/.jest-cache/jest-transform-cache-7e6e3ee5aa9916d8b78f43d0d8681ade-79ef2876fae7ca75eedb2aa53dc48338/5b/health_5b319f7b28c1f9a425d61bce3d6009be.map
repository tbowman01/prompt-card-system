{"version":3,"names":["cov_2ilwn7zkb0","actualCoverage","s","express_1","require","connection_1","router","Router","exports","healthRoutes","get","req","res","f","dbCheck","db","prepare","ollamaUrl","b","process","env","OLLAMA_BASE_URL","json","status","timestamp","Date","toISOString","services","database","ollama","url","environment","NODE_ENV","error","Error","message","promptCardCount","testCaseCount","stats","prompt_cards","count","test_cases","database_path","DATABASE_PATH"],"sources":["/workspaces/prompt-card-system/backend/src/routes/health.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { db } from '../database/connection';\n\nconst router = Router();\n\n// Health check endpoint\nrouter.get('/', (req: Request, res: Response) => {\n  try {\n    // Check database connection\n    const dbCheck = db.prepare('SELECT 1').get();\n    \n    // Check Ollama connection (basic check)\n    const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n    \n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        database: dbCheck ? 'connected' : 'disconnected',\n        ollama: {\n          url: ollamaUrl,\n          status: 'configured' // Will be enhanced in Phase 3\n        }\n      },\n      environment: process.env.NODE_ENV || 'development'\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Database status endpoint\nrouter.get('/db', (req: Request, res: Response) => {\n  try {\n    const promptCardCount = db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number };\n    const testCaseCount = db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number };\n    \n    res.json({\n      status: 'connected',\n      stats: {\n        prompt_cards: promptCardCount.count,\n        test_cases: testCaseCount.count\n      },\n      database_path: process.env.DATABASE_PATH\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'error',\n      error: error instanceof Error ? error.message : 'Database connection failed'\n    });\n  }\n});\n\nexport { router as healthRoutes };"],"mappings":"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","ignoreList":[]}