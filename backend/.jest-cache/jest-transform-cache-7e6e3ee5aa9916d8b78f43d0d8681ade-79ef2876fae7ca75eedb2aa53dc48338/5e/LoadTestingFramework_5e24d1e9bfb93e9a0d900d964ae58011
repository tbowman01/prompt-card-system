3406ccbcd96213b117bfe9e3c30a2838
"use strict";

/* istanbul ignore next */
function cov_1o1w5v0fu2() {
  var path = "/workspaces/prompt-card-system/backend/src/services/performance/LoadTestingFramework.ts";
  var hash = "4355e6610027bcd35ec8268d80fc6c87e8dcf4c7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/performance/LoadTestingFramework.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 69
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 50
        }
      },
      "7": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "8": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 49
        }
      },
      "9": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 30
        }
      },
      "10": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 57
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 30
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "15": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "16": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "17": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 34
        }
      },
      "18": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "19": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "20": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 30,
          column: 14
        }
      },
      "21": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 38
        }
      },
      "22": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "23": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 26
        }
      },
      "24": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "25": {
        start: {
          line: 37,
          column: 35
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "26": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 45,
          column: 17
        }
      },
      "27": {
        start: {
          line: 39,
          column: 35
        },
        end: {
          line: 39,
          column: 55
        }
      },
      "28": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "29": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 36
        }
      },
      "30": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 59
        }
      },
      "31": {
        start: {
          line: 44,
          column: 37
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "32": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "33": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 33
        }
      },
      "34": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "35": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 74
        }
      },
      "36": {
        start: {
          line: 55,
          column: 53
        },
        end: {
          line: 55,
          column: 71
        }
      },
      "37": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 26
        }
      },
      "38": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 28
        }
      },
      "39": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 26
        }
      },
      "40": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 16
        }
      },
      "41": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 31
        }
      },
      "42": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 32
        }
      },
      "43": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 35
        }
      },
      "44": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 35
        }
      },
      "45": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 46
        }
      },
      "46": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 43
        }
      },
      "47": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 37
        }
      },
      "48": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 41
        }
      },
      "49": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 50
        }
      },
      "50": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 50
        }
      },
      "51": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 51
        }
      },
      "52": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "53": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 60
        }
      },
      "54": {
        start: {
          line: 93,
          column: 25
        },
        end: {
          line: 93,
          column: 55
        }
      },
      "55": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "56": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 65
        }
      },
      "57": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 30
        }
      },
      "58": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 43
        }
      },
      "59": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "60": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "61": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 54
        }
      },
      "62": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 64
        }
      },
      "63": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "64": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 61
        }
      },
      "65": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "66": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 68
        }
      },
      "67": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 44
        }
      },
      "68": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 48
        }
      },
      "69": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 27
        }
      },
      "70": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 35
        }
      },
      "71": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 36
        }
      },
      "72": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 123,
          column: 26
        }
      },
      "73": {
        start: {
          line: 124,
          column: 28
        },
        end: {
          line: 124,
          column: 30
        }
      },
      "74": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "75": {
        start: {
          line: 126,
          column: 27
        },
        end: {
          line: 126,
          column: 88
        }
      },
      "76": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 33
        }
      },
      "77": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 128,
          column: 78
        }
      },
      "78": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "79": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 45
        }
      },
      "80": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 133,
          column: 47
        }
      },
      "81": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 79
        }
      },
      "82": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 48
        }
      },
      "83": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "84": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 40
        }
      },
      "85": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 81
        }
      },
      "86": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 84
        }
      },
      "87": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 71
        }
      },
      "88": {
        start: {
          line: 147,
          column: 39
        },
        end: {
          line: 147,
          column: 75
        }
      },
      "89": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "90": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "91": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 19
        }
      },
      "92": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 34
        }
      },
      "93": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 31
        }
      },
      "94": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 42
        }
      },
      "95": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 33
        }
      },
      "96": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 36
        }
      },
      "97": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 38
        }
      },
      "98": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "99": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 35
        }
      },
      "100": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "101": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 50
        }
      },
      "102": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 33
        }
      },
      "103": {
        start: {
          line: 206,
          column: 29
        },
        end: {
          line: 206,
          column: 31
        }
      },
      "104": {
        start: {
          line: 207,
          column: 29
        },
        end: {
          line: 207,
          column: 31
        }
      },
      "105": {
        start: {
          line: 209,
          column: 33
        },
        end: {
          line: 223,
          column: 16
        }
      },
      "106": {
        start: {
          line: 210,
          column: 24
        },
        end: {
          line: 210,
          column: 34
        }
      },
      "107": {
        start: {
          line: 211,
          column: 34
        },
        end: {
          line: 211,
          column: 86
        }
      },
      "108": {
        start: {
          line: 211,
          column: 61
        },
        end: {
          line: 211,
          column: 85
        }
      },
      "109": {
        start: {
          line: 212,
          column: 34
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "110": {
        start: {
          line: 214,
          column: 54
        },
        end: {
          line: 214,
          column: 79
        }
      },
      "111": {
        start: {
          line: 216,
          column: 66
        },
        end: {
          line: 216,
          column: 86
        }
      },
      "112": {
        start: {
          line: 217,
          column: 54
        },
        end: {
          line: 217,
          column: 64
        }
      },
      "113": {
        start: {
          line: 218,
          column: 81
        },
        end: {
          line: 218,
          column: 95
        }
      },
      "114": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 45
        }
      },
      "115": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 44
        }
      },
      "116": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 55
        }
      },
      "117": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "118": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "119": {
        start: {
          line: 227,
          column: 36
        },
        end: {
          line: 227,
          column: 87
        }
      },
      "120": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 47
        }
      },
      "121": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 35
        }
      },
      "122": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 75
        }
      },
      "123": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 35
        }
      },
      "124": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 51
        }
      },
      "125": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 44
        }
      },
      "126": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "127": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 49
        }
      },
      "128": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 245,
          column: 34
        }
      },
      "129": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 42
        }
      },
      "130": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 84
        }
      },
      "131": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 62
        }
      },
      "132": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 90
        }
      },
      "133": {
        start: {
          line: 249,
          column: 72
        },
        end: {
          line: 249,
          column: 81
        }
      },
      "134": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 87
        }
      },
      "135": {
        start: {
          line: 250,
          column: 68
        },
        end: {
          line: 250,
          column: 78
        }
      },
      "136": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 101
        }
      },
      "137": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 99
        }
      },
      "138": {
        start: {
          line: 252,
          column: 74
        },
        end: {
          line: 252,
          column: 94
        }
      },
      "139": {
        start: {
          line: 254,
          column: 30
        },
        end: {
          line: 254,
          column: 69
        }
      },
      "140": {
        start: {
          line: 254,
          column: 54
        },
        end: {
          line: 254,
          column: 68
        }
      },
      "141": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "142": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "143": {
        start: {
          line: 259,
          column: 54
        },
        end: {
          line: 259,
          column: 61
        }
      },
      "144": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 269,
          column: 10
        }
      },
      "145": {
        start: {
          line: 267,
          column: 52
        },
        end: {
          line: 267,
          column: 71
        }
      },
      "146": {
        start: {
          line: 268,
          column: 51
        },
        end: {
          line: 268,
          column: 70
        }
      },
      "147": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 107
        }
      },
      "148": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 274,
          column: 10
        }
      },
      "149": {
        start: {
          line: 272,
          column: 49
        },
        end: {
          line: 272,
          column: 68
        }
      },
      "150": {
        start: {
          line: 273,
          column: 52
        },
        end: {
          line: 273,
          column: 65
        }
      },
      "151": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 60
        }
      },
      "152": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 75
        }
      },
      "153": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 72
        }
      },
      "154": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 23
        }
      },
      "155": {
        start: {
          line: 287,
          column: 23
        },
        end: {
          line: 287,
          column: 44
        }
      },
      "156": {
        start: {
          line: 288,
          column: 31
        },
        end: {
          line: 288,
          column: 60
        }
      },
      "157": {
        start: {
          line: 289,
          column: 27
        },
        end: {
          line: 289,
          column: 44
        }
      },
      "158": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "159": {
        start: {
          line: 290,
          column: 21
        },
        end: {
          line: 290,
          column: 22
        }
      },
      "160": {
        start: {
          line: 291,
          column: 27
        },
        end: {
          line: 291,
          column: 43
        }
      },
      "161": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 37
        }
      },
      "162": {
        start: {
          line: 294,
          column: 24
        },
        end: {
          line: 294,
          column: 25
        }
      },
      "163": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "164": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 56
        }
      },
      "165": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 26
        }
      },
      "166": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 300,
          column: 77
        }
      },
      "167": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 26
        }
      },
      "168": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 303,
          column: 80
        }
      },
      "169": {
        start: {
          line: 304,
          column: 20
        },
        end: {
          line: 304,
          column: 26
        }
      },
      "170": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "171": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 56
        }
      },
      "172": {
        start: {
          line: 315,
          column: 23
        },
        end: {
          line: 315,
          column: 38
        }
      },
      "173": {
        start: {
          line: 316,
          column: 28
        },
        end: {
          line: 316,
          column: 63
        }
      },
      "174": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "175": {
        start: {
          line: 319,
          column: 29
        },
        end: {
          line: 319,
          column: 66
        }
      },
      "176": {
        start: {
          line: 320,
          column: 28
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "177": {
        start: {
          line: 324,
          column: 47
        },
        end: {
          line: 324,
          column: 66
        }
      },
      "178": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "179": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 60
        }
      },
      "180": {
        start: {
          line: 333,
          column: 27
        },
        end: {
          line: 333,
          column: 58
        }
      },
      "181": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 33
        }
      },
      "182": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "183": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 67
        }
      },
      "184": {
        start: {
          line: 340,
          column: 30
        },
        end: {
          line: 340,
          column: 77
        }
      },
      "185": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "186": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 60
        }
      },
      "187": {
        start: {
          line: 350,
          column: 26
        },
        end: {
          line: 350,
          column: 56
        }
      },
      "188": {
        start: {
          line: 351,
          column: 25
        },
        end: {
          line: 351,
          column: 41
        }
      },
      "189": {
        start: {
          line: 352,
          column: 20
        },
        end: {
          line: 352,
          column: 72
        }
      },
      "190": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "191": {
        start: {
          line: 354,
          column: 29
        },
        end: {
          line: 362,
          column: 14
        }
      },
      "192": {
        start: {
          line: 361,
          column: 38
        },
        end: {
          line: 361,
          column: 42
        }
      },
      "193": {
        start: {
          line: 363,
          column: 33
        },
        end: {
          line: 363,
          column: 75
        }
      },
      "194": {
        start: {
          line: 364,
          column: 33
        },
        end: {
          line: 364,
          column: 69
        }
      },
      "195": {
        start: {
          line: 366,
          column: 26
        },
        end: {
          line: 366,
          column: 30
        }
      },
      "196": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 386,
          column: 13
        }
      },
      "197": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 371,
          column: 17
        }
      },
      "198": {
        start: {
          line: 370,
          column: 20
        },
        end: {
          line: 370,
          column: 36
        }
      },
      "199": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 375,
          column: 17
        }
      },
      "200": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 36
        }
      },
      "201": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 379,
          column: 17
        }
      },
      "202": {
        start: {
          line: 377,
          column: 33
        },
        end: {
          line: 377,
          column: 62
        }
      },
      "203": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 378,
          column: 98
        }
      },
      "204": {
        start: {
          line: 378,
          column: 77
        },
        end: {
          line: 378,
          column: 96
        }
      },
      "205": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 382,
          column: 17
        }
      },
      "206": {
        start: {
          line: 381,
          column: 20
        },
        end: {
          line: 381,
          column: 119
        }
      },
      "207": {
        start: {
          line: 381,
          column: 79
        },
        end: {
          line: 381,
          column: 117
        }
      },
      "208": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 74
        }
      },
      "209": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 396,
          column: 14
        }
      },
      "210": {
        start: {
          line: 395,
          column: 99
        },
        end: {
          line: 395,
          column: 119
        }
      },
      "211": {
        start: {
          line: 399,
          column: 33
        },
        end: {
          line: 399,
          column: 75
        }
      },
      "212": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 410,
          column: 14
        }
      },
      "213": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "214": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 522,
          column: 11
        }
      },
      "215": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 568,
          column: 11
        }
      },
      "216": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 574,
          column: 63
        }
      },
      "217": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 575,
          column: 64
        }
      },
      "218": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 576,
          column: 62
        }
      },
      "219": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 577,
          column: 56
        }
      },
      "220": {
        start: {
          line: 583,
          column: 28
        },
        end: {
          line: 583,
          column: 75
        }
      },
      "221": {
        start: {
          line: 583,
          column: 57
        },
        end: {
          line: 583,
          column: 71
        }
      },
      "222": {
        start: {
          line: 584,
          column: 23
        },
        end: {
          line: 584,
          column: 50
        }
      },
      "223": {
        start: {
          line: 585,
          column: 28
        },
        end: {
          line: 585,
          column: 29
        }
      },
      "224": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "225": {
        start: {
          line: 587,
          column: 12
        },
        end: {
          line: 587,
          column: 45
        }
      },
      "226": {
        start: {
          line: 588,
          column: 12
        },
        end: {
          line: 590,
          column: 13
        }
      },
      "227": {
        start: {
          line: 589,
          column: 16
        },
        end: {
          line: 589,
          column: 32
        }
      },
      "228": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 592,
          column: 47
        }
      },
      "229": {
        start: {
          line: 595,
          column: 43
        },
        end: {
          line: 595,
          column: 49
        }
      },
      "230": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 611,
          column: 9
        }
      },
      "231": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 598,
          column: 57
        }
      },
      "232": {
        start: {
          line: 600,
          column: 27
        },
        end: {
          line: 600,
          column: 40
        }
      },
      "233": {
        start: {
          line: 601,
          column: 27
        },
        end: {
          line: 601,
          column: 40
        }
      },
      "234": {
        start: {
          line: 602,
          column: 27
        },
        end: {
          line: 602,
          column: 84
        }
      },
      "235": {
        start: {
          line: 603,
          column: 29
        },
        end: {
          line: 603,
          column: 44
        }
      },
      "236": {
        start: {
          line: 604,
          column: 31
        },
        end: {
          line: 604,
          column: 46
        }
      },
      "237": {
        start: {
          line: 605,
          column: 16
        },
        end: {
          line: 605,
          column: 72
        }
      },
      "238": {
        start: {
          line: 607,
          column: 31
        },
        end: {
          line: 607,
          column: 52
        }
      },
      "239": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 65
        }
      },
      "240": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 610,
          column: 57
        }
      },
      "241": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 615,
          column: 21
        }
      },
      "242": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 615,
          column: 21
        }
      },
      "243": {
        start: {
          line: 616,
          column: 23
        },
        end: {
          line: 616,
          column: 59
        }
      },
      "244": {
        start: {
          line: 616,
          column: 53
        },
        end: {
          line: 616,
          column: 58
        }
      },
      "245": {
        start: {
          line: 617,
          column: 22
        },
        end: {
          line: 617,
          column: 71
        }
      },
      "246": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 618,
          column: 42
        }
      },
      "247": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 622,
          column: 21
        }
      },
      "248": {
        start: {
          line: 625,
          column: 25
        },
        end: {
          line: 625,
          column: 34
        }
      },
      "249": {
        start: {
          line: 626,
          column: 8
        },
        end: {
          line: 632,
          column: 11
        }
      },
      "250": {
        start: {
          line: 626,
          column: 28
        },
        end: {
          line: 626,
          column: 38
        }
      },
      "251": {
        start: {
          line: 627,
          column: 24
        },
        end: {
          line: 627,
          column: 82
        }
      },
      "252": {
        start: {
          line: 628,
          column: 12
        },
        end: {
          line: 630,
          column: 13
        }
      },
      "253": {
        start: {
          line: 629,
          column: 16
        },
        end: {
          line: 629,
          column: 38
        }
      },
      "254": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 631,
          column: 43
        }
      },
      "255": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 644,
          column: 11
        }
      },
      "256": {
        start: {
          line: 634,
          column: 42
        },
        end: {
          line: 634,
          column: 59
        }
      },
      "257": {
        start: {
          line: 635,
          column: 12
        },
        end: {
          line: 643,
          column: 14
        }
      },
      "258": {
        start: {
          line: 640,
          column: 55
        },
        end: {
          line: 640,
          column: 65
        }
      },
      "259": {
        start: {
          line: 641,
          column: 61
        },
        end: {
          line: 641,
          column: 72
        }
      },
      "260": {
        start: {
          line: 642,
          column: 60
        },
        end: {
          line: 642,
          column: 71
        }
      },
      "261": {
        start: {
          line: 647,
          column: 27
        },
        end: {
          line: 647,
          column: 53
        }
      },
      "262": {
        start: {
          line: 648,
          column: 33
        },
        end: {
          line: 648,
          column: 35
        }
      },
      "263": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 656,
          column: 11
        }
      },
      "264": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 663,
          column: 11
        }
      },
      "265": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 671,
          column: 11
        }
      },
      "266": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 679,
          column: 11
        }
      },
      "267": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 680,
          column: 32
        }
      },
      "268": {
        start: {
          line: 683,
          column: 32
        },
        end: {
          line: 683,
          column: 34
        }
      },
      "269": {
        start: {
          line: 684,
          column: 24
        },
        end: {
          line: 684,
          column: 39
        }
      },
      "270": {
        start: {
          line: 685,
          column: 8
        },
        end: {
          line: 687,
          column: 9
        }
      },
      "271": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 117
        }
      },
      "272": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 690,
          column: 9
        }
      },
      "273": {
        start: {
          line: 689,
          column: 12
        },
        end: {
          line: 689,
          column: 128
        }
      },
      "274": {
        start: {
          line: 691,
          column: 8
        },
        end: {
          line: 693,
          column: 9
        }
      },
      "275": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 692,
          column: 130
        }
      },
      "276": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 696,
          column: 9
        }
      },
      "277": {
        start: {
          line: 694,
          column: 37
        },
        end: {
          line: 694,
          column: 63
        }
      },
      "278": {
        start: {
          line: 695,
          column: 12
        },
        end: {
          line: 695,
          column: 120
        }
      },
      "279": {
        start: {
          line: 697,
          column: 33
        },
        end: {
          line: 697,
          column: 80
        }
      },
      "280": {
        start: {
          line: 697,
          column: 70
        },
        end: {
          line: 697,
          column: 79
        }
      },
      "281": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 700,
          column: 9
        }
      },
      "282": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 699,
          column: 115
        }
      },
      "283": {
        start: {
          line: 699,
          column: 93
        },
        end: {
          line: 699,
          column: 99
        }
      },
      "284": {
        start: {
          line: 701,
          column: 8
        },
        end: {
          line: 703,
          column: 9
        }
      },
      "285": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 702,
          column: 90
        }
      },
      "286": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 704,
          column: 31
        }
      },
      "287": {
        start: {
          line: 708,
          column: 8
        },
        end: {
          line: 708,
          column: 70
        }
      },
      "288": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 733,
          column: 10
        }
      },
      "289": {
        start: {
          line: 736,
          column: 8
        },
        end: {
          line: 736,
          column: 48
        }
      },
      "290": {
        start: {
          line: 738,
          column: 21
        },
        end: {
          line: 742,
          column: 6
        }
      },
      "291": {
        start: {
          line: 743,
          column: 8
        },
        end: {
          line: 743,
          column: 80
        }
      },
      "292": {
        start: {
          line: 746,
          column: 25
        },
        end: {
          line: 746,
          column: 55
        }
      },
      "293": {
        start: {
          line: 747,
          column: 8
        },
        end: {
          line: 750,
          column: 9
        }
      },
      "294": {
        start: {
          line: 748,
          column: 12
        },
        end: {
          line: 748,
          column: 73
        }
      },
      "295": {
        start: {
          line: 749,
          column: 12
        },
        end: {
          line: 749,
          column: 19
        }
      },
      "296": {
        start: {
          line: 751,
          column: 27
        },
        end: {
          line: 760,
          column: 9
        }
      },
      "297": {
        start: {
          line: 761,
          column: 8
        },
        end: {
          line: 761,
          column: 74
        }
      },
      "298": {
        start: {
          line: 762,
          column: 8
        },
        end: {
          line: 762,
          column: 87
        }
      },
      "299": {
        start: {
          line: 765,
          column: 25
        },
        end: {
          line: 765,
          column: 55
        }
      },
      "300": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 768,
          column: 9
        }
      },
      "301": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 767,
          column: 24
        }
      },
      "302": {
        start: {
          line: 769,
          column: 28
        },
        end: {
          line: 769,
          column: 30
        }
      },
      "303": {
        start: {
          line: 771,
          column: 29
        },
        end: {
          line: 771,
          column: 85
        }
      },
      "304": {
        start: {
          line: 772,
          column: 8
        },
        end: {
          line: 780,
          column: 9
        }
      },
      "305": {
        start: {
          line: 773,
          column: 12
        },
        end: {
          line: 779,
          column: 15
        }
      },
      "306": {
        start: {
          line: 782,
          column: 36
        },
        end: {
          line: 782,
          column: 91
        }
      },
      "307": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 791,
          column: 9
        }
      },
      "308": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 790,
          column: 15
        }
      },
      "309": {
        start: {
          line: 793,
          column: 35
        },
        end: {
          line: 793,
          column: 84
        }
      },
      "310": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 802,
          column: 9
        }
      },
      "311": {
        start: {
          line: 795,
          column: 12
        },
        end: {
          line: 801,
          column: 15
        }
      },
      "312": {
        start: {
          line: 803,
          column: 8
        },
        end: {
          line: 811,
          column: 9
        }
      },
      "313": {
        start: {
          line: 804,
          column: 12
        },
        end: {
          line: 810,
          column: 14
        }
      },
      "314": {
        start: {
          line: 808,
          column: 48
        },
        end: {
          line: 808,
          column: 67
        }
      },
      "315": {
        start: {
          line: 809,
          column: 42
        },
        end: {
          line: 809,
          column: 61
        }
      },
      "316": {
        start: {
          line: 812,
          column: 8
        },
        end: {
          line: 812,
          column: 20
        }
      },
      "317": {
        start: {
          line: 815,
          column: 8
        },
        end: {
          line: 827,
          column: 9
        }
      },
      "318": {
        start: {
          line: 816,
          column: 25
        },
        end: {
          line: 822,
          column: 8
        }
      },
      "319": {
        start: {
          line: 823,
          column: 12
        },
        end: {
          line: 823,
          column: 485
        }
      },
      "320": {
        start: {
          line: 826,
          column: 12
        },
        end: {
          line: 826,
          column: 70
        }
      },
      "321": {
        start: {
          line: 833,
          column: 8
        },
        end: {
          line: 833,
          column: 42
        }
      },
      "322": {
        start: {
          line: 834,
          column: 8
        },
        end: {
          line: 834,
          column: 34
        }
      },
      "323": {
        start: {
          line: 837,
          column: 0
        },
        end: {
          line: 837,
          column: 52
        }
      },
      "324": {
        start: {
          line: 839,
          column: 0
        },
        end: {
          line: 852,
          column: 1
        }
      },
      "325": {
        start: {
          line: 841,
          column: 4
        },
        end: {
          line: 851,
          column: 7
        }
      },
      "326": {
        start: {
          line: 842,
          column: 31
        },
        end: {
          line: 842,
          column: 38
        }
      },
      "327": {
        start: {
          line: 843,
          column: 8
        },
        end: {
          line: 850,
          column: 9
        }
      },
      "328": {
        start: {
          line: 846,
          column: 16
        },
        end: {
          line: 846,
          column: 22
        }
      },
      "329": {
        start: {
          line: 849,
          column: 16
        },
        end: {
          line: 849,
          column: 22
        }
      },
      "330": {
        start: {
          line: 854,
          column: 0
        },
        end: {
          line: 854,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 27
          },
          end: {
            line: 36,
            column: 28
          }
        },
        loc: {
          start: {
            line: 36,
            column: 40
          },
          end: {
            line: 48,
            column: 9
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 35
          },
          end: {
            line: 37,
            column: 36
          }
        },
        loc: {
          start: {
            line: 37,
            column: 41
          },
          end: {
            line: 46,
            column: 13
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 44,
            column: 31
          },
          end: {
            line: 44,
            column: 32
          }
        },
        loc: {
          start: {
            line: 44,
            column: 37
          },
          end: {
            line: 44,
            column: 53
          }
        },
        line: 44
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 50
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 22
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 54
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 55,
            column: 43
          },
          end: {
            line: 55,
            column: 44
          }
        },
        loc: {
          start: {
            line: 55,
            column: 53
          },
          end: {
            line: 55,
            column: 71
          }
        },
        line: 55
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 18
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 62
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 31
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 76
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 83
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 43
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 89
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 41
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 122
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 140
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 21
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 161
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 36
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 173
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 209,
            column: 45
          },
          end: {
            line: 209,
            column: 46
          }
        },
        loc: {
          start: {
            line: 209,
            column: 51
          },
          end: {
            line: 223,
            column: 9
          }
        },
        line: 209
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 211,
            column: 56
          },
          end: {
            line: 211,
            column: 57
          }
        },
        loc: {
          start: {
            line: 211,
            column: 61
          },
          end: {
            line: 211,
            column: 85
          }
        },
        line: 211
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 50
          }
        },
        loc: {
          start: {
            line: 214,
            column: 54
          },
          end: {
            line: 214,
            column: 79
          }
        },
        line: 214
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 216,
            column: 54
          },
          end: {
            line: 216,
            column: 55
          }
        },
        loc: {
          start: {
            line: 216,
            column: 66
          },
          end: {
            line: 216,
            column: 86
          }
        },
        line: 216
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 217,
            column: 49
          },
          end: {
            line: 217,
            column: 50
          }
        },
        loc: {
          start: {
            line: 217,
            column: 54
          },
          end: {
            line: 217,
            column: 64
          }
        },
        line: 217
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 218,
            column: 76
          },
          end: {
            line: 218,
            column: 77
          }
        },
        loc: {
          start: {
            line: 218,
            column: 81
          },
          end: {
            line: 218,
            column: 95
          }
        },
        line: 218
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 226,
            column: 45
          },
          end: {
            line: 226,
            column: 46
          }
        },
        loc: {
          start: {
            line: 226,
            column: 63
          },
          end: {
            line: 230,
            column: 13
          }
        },
        line: 226
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 249,
            column: 67
          },
          end: {
            line: 249,
            column: 68
          }
        },
        loc: {
          start: {
            line: 249,
            column: 72
          },
          end: {
            line: 249,
            column: 81
          }
        },
        line: 249
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 250,
            column: 63
          },
          end: {
            line: 250,
            column: 64
          }
        },
        loc: {
          start: {
            line: 250,
            column: 68
          },
          end: {
            line: 250,
            column: 78
          }
        },
        line: 250
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 252,
            column: 62
          },
          end: {
            line: 252,
            column: 63
          }
        },
        loc: {
          start: {
            line: 252,
            column: 74
          },
          end: {
            line: 252,
            column: 94
          }
        },
        line: 252
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 254,
            column: 49
          },
          end: {
            line: 254,
            column: 50
          }
        },
        loc: {
          start: {
            line: 254,
            column: 54
          },
          end: {
            line: 254,
            column: 68
          }
        },
        line: 254
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 259,
            column: 42
          },
          end: {
            line: 259,
            column: 43
          }
        },
        loc: {
          start: {
            line: 259,
            column: 54
          },
          end: {
            line: 259,
            column: 61
          }
        },
        line: 259
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 267,
            column: 47
          },
          end: {
            line: 267,
            column: 48
          }
        },
        loc: {
          start: {
            line: 267,
            column: 52
          },
          end: {
            line: 267,
            column: 71
          }
        },
        line: 267
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 268,
            column: 47
          }
        },
        loc: {
          start: {
            line: 268,
            column: 51
          },
          end: {
            line: 268,
            column: 70
          }
        },
        line: 268
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 272,
            column: 37
          },
          end: {
            line: 272,
            column: 38
          }
        },
        loc: {
          start: {
            line: 272,
            column: 49
          },
          end: {
            line: 272,
            column: 68
          }
        },
        line: 272
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 273,
            column: 47
          },
          end: {
            line: 273,
            column: 48
          }
        },
        loc: {
          start: {
            line: 273,
            column: 52
          },
          end: {
            line: 273,
            column: 65
          }
        },
        line: 273
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 44
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 286
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 50
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 314
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 324,
            column: 42
          },
          end: {
            line: 324,
            column: 43
          }
        },
        loc: {
          start: {
            line: 324,
            column: 47
          },
          end: {
            line: 324,
            column: 66
          }
        },
        line: 324
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 31
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 349
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 361,
            column: 32
          },
          end: {
            line: 361,
            column: 33
          }
        },
        loc: {
          start: {
            line: 361,
            column: 38
          },
          end: {
            line: 361,
            column: 42
          }
        },
        line: 361
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 378,
            column: 69
          },
          end: {
            line: 378,
            column: 70
          }
        },
        loc: {
          start: {
            line: 378,
            column: 77
          },
          end: {
            line: 378,
            column: 96
          }
        },
        line: 378
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 381,
            column: 69
          },
          end: {
            line: 381,
            column: 70
          }
        },
        loc: {
          start: {
            line: 381,
            column: 79
          },
          end: {
            line: 381,
            column: 117
          }
        },
        line: 381
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 395,
            column: 81
          },
          end: {
            line: 395,
            column: 82
          }
        },
        loc: {
          start: {
            line: 395,
            column: 99
          },
          end: {
            line: 395,
            column: 119
          }
        },
        line: 395
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 28
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 416
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 573,
            column: 4
          },
          end: {
            line: 573,
            column: 5
          }
        },
        loc: {
          start: {
            line: 573,
            column: 32
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 573
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 582,
            column: 5
          }
        },
        loc: {
          start: {
            line: 582,
            column: 30
          },
          end: {
            line: 593,
            column: 5
          }
        },
        line: 582
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 583,
            column: 45
          },
          end: {
            line: 583,
            column: 46
          }
        },
        loc: {
          start: {
            line: 583,
            column: 57
          },
          end: {
            line: 583,
            column: 71
          }
        },
        line: 583
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 594,
            column: 4
          },
          end: {
            line: 594,
            column: 5
          }
        },
        loc: {
          start: {
            line: 594,
            column: 31
          },
          end: {
            line: 612,
            column: 5
          }
        },
        line: 594
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 613,
            column: 5
          }
        },
        loc: {
          start: {
            line: 613,
            column: 44
          },
          end: {
            line: 619,
            column: 5
          }
        },
        line: 613
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 616,
            column: 43
          },
          end: {
            line: 616,
            column: 44
          }
        },
        loc: {
          start: {
            line: 616,
            column: 53
          },
          end: {
            line: 616,
            column: 58
          }
        },
        line: 616
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 620,
            column: 4
          },
          end: {
            line: 620,
            column: 5
          }
        },
        loc: {
          start: {
            line: 620,
            column: 30
          },
          end: {
            line: 623,
            column: 5
          }
        },
        line: 620
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 624,
            column: 4
          },
          end: {
            line: 624,
            column: 5
          }
        },
        loc: {
          start: {
            line: 624,
            column: 27
          },
          end: {
            line: 645,
            column: 5
          }
        },
        line: 624
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 626,
            column: 23
          },
          end: {
            line: 626,
            column: 24
          }
        },
        loc: {
          start: {
            line: 626,
            column: 28
          },
          end: {
            line: 626,
            column: 38
          }
        },
        line: 626
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 626,
            column: 48
          },
          end: {
            line: 626,
            column: 49
          }
        },
        loc: {
          start: {
            line: 626,
            column: 58
          },
          end: {
            line: 632,
            column: 9
          }
        },
        line: 626
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 633,
            column: 50
          },
          end: {
            line: 633,
            column: 51
          }
        },
        loc: {
          start: {
            line: 633,
            column: 69
          },
          end: {
            line: 644,
            column: 9
          }
        },
        line: 633
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 640,
            column: 50
          },
          end: {
            line: 640,
            column: 51
          }
        },
        loc: {
          start: {
            line: 640,
            column: 55
          },
          end: {
            line: 640,
            column: 65
          }
        },
        line: 640
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 641,
            column: 56
          },
          end: {
            line: 641,
            column: 57
          }
        },
        loc: {
          start: {
            line: 641,
            column: 61
          },
          end: {
            line: 641,
            column: 72
          }
        },
        line: 641
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 642,
            column: 55
          },
          end: {
            line: 642,
            column: 56
          }
        },
        loc: {
          start: {
            line: 642,
            column: 60
          },
          end: {
            line: 642,
            column: 71
          }
        },
        line: 642
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 646,
            column: 4
          },
          end: {
            line: 646,
            column: 5
          }
        },
        loc: {
          start: {
            line: 646,
            column: 39
          },
          end: {
            line: 681,
            column: 5
          }
        },
        line: 646
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 682,
            column: 4
          },
          end: {
            line: 682,
            column: 5
          }
        },
        loc: {
          start: {
            line: 682,
            column: 37
          },
          end: {
            line: 705,
            column: 5
          }
        },
        line: 682
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 694,
            column: 32
          },
          end: {
            line: 694,
            column: 33
          }
        },
        loc: {
          start: {
            line: 694,
            column: 37
          },
          end: {
            line: 694,
            column: 63
          }
        },
        line: 694
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 697,
            column: 65
          },
          end: {
            line: 697,
            column: 66
          }
        },
        loc: {
          start: {
            line: 697,
            column: 70
          },
          end: {
            line: 697,
            column: 79
          }
        },
        line: 697
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 699,
            column: 88
          },
          end: {
            line: 699,
            column: 89
          }
        },
        loc: {
          start: {
            line: 699,
            column: 93
          },
          end: {
            line: 699,
            column: 99
          }
        },
        line: 699
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 706,
            column: 4
          },
          end: {
            line: 706,
            column: 5
          }
        },
        loc: {
          start: {
            line: 706,
            column: 30
          },
          end: {
            line: 734,
            column: 5
          }
        },
        line: 706
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 735,
            column: 4
          },
          end: {
            line: 735,
            column: 5
          }
        },
        loc: {
          start: {
            line: 735,
            column: 44
          },
          end: {
            line: 744,
            column: 5
          }
        },
        line: 735
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 745,
            column: 4
          },
          end: {
            line: 745,
            column: 5
          }
        },
        loc: {
          start: {
            line: 745,
            column: 51
          },
          end: {
            line: 763,
            column: 5
          }
        },
        line: 745
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 764,
            column: 4
          },
          end: {
            line: 764,
            column: 5
          }
        },
        loc: {
          start: {
            line: 764,
            column: 48
          },
          end: {
            line: 813,
            column: 5
          }
        },
        line: 764
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 808,
            column: 43
          },
          end: {
            line: 808,
            column: 44
          }
        },
        loc: {
          start: {
            line: 808,
            column: 48
          },
          end: {
            line: 808,
            column: 67
          }
        },
        line: 808
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 809,
            column: 37
          },
          end: {
            line: 809,
            column: 38
          }
        },
        loc: {
          start: {
            line: 809,
            column: 42
          },
          end: {
            line: 809,
            column: 61
          }
        },
        line: 809
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 814,
            column: 4
          },
          end: {
            line: 814,
            column: 5
          }
        },
        loc: {
          start: {
            line: 814,
            column: 31
          },
          end: {
            line: 828,
            column: 5
          }
        },
        line: 814
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 832,
            column: 4
          },
          end: {
            line: 832,
            column: 5
          }
        },
        loc: {
          start: {
            line: 832,
            column: 20
          },
          end: {
            line: 835,
            column: 5
          }
        },
        line: 832
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 841,
            column: 47
          },
          end: {
            line: 841,
            column: 48
          }
        },
        loc: {
          start: {
            line: 841,
            column: 66
          },
          end: {
            line: 851,
            column: 5
          }
        },
        line: 841
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 15,
            column: 30
          }
        }],
        line: 15
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        }, {
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 45,
            column: 17
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "13": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 27
          }
        }, {
          start: {
            line: 141,
            column: 31
          },
          end: {
            line: 141,
            column: 48
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "16": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "17": {
        loc: {
          start: {
            line: 216,
            column: 33
          },
          end: {
            line: 216,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 33
          },
          end: {
            line: 216,
            column: 113
          }
        }, {
          start: {
            line: 216,
            column: 117
          },
          end: {
            line: 216,
            column: 118
          }
        }],
        line: 216
      },
      "18": {
        loc: {
          start: {
            line: 217,
            column: 27
          },
          end: {
            line: 217,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 27
          },
          end: {
            line: 217,
            column: 102
          }
        }, {
          start: {
            line: 217,
            column: 106
          },
          end: {
            line: 217,
            column: 107
          }
        }],
        line: 217
      },
      "19": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "20": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "21": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 26
          }
        }, {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 301,
            column: 26
          }
        }, {
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 304,
            column: 26
          }
        }],
        line: 295
      },
      "22": {
        loc: {
          start: {
            line: 303,
            column: 28
          },
          end: {
            line: 303,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 42
          },
          end: {
            line: 303,
            column: 75
          }
        }, {
          start: {
            line: 303,
            column: 78
          },
          end: {
            line: 303,
            column: 79
          }
        }],
        line: 303
      },
      "23": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "24": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 306,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 306,
            column: 25
          }
        }, {
          start: {
            line: 306,
            column: 29
          },
          end: {
            line: 306,
            column: 47
          }
        }],
        line: 306
      },
      "25": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "26": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "27": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "28": {
        loc: {
          start: {
            line: 360,
            column: 25
          },
          end: {
            line: 360,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 25
          },
          end: {
            line: 360,
            column: 41
          }
        }, {
          start: {
            line: 360,
            column: 45
          },
          end: {
            line: 360,
            column: 50
          }
        }],
        line: 360
      },
      "29": {
        loc: {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 386,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 386,
            column: 13
          }
        }, {
          start: {
            line: 384,
            column: 17
          },
          end: {
            line: 386,
            column: 13
          }
        }],
        line: 367
      },
      "30": {
        loc: {
          start: {
            line: 368,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "31": {
        loc: {
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 369,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 368,
            column: 50
          }
        }, {
          start: {
            line: 369,
            column: 20
          },
          end: {
            line: 369,
            column: 77
          }
        }],
        line: 368
      },
      "32": {
        loc: {
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "33": {
        loc: {
          start: {
            line: 372,
            column: 20
          },
          end: {
            line: 373,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 20
          },
          end: {
            line: 372,
            column: 52
          }
        }, {
          start: {
            line: 373,
            column: 20
          },
          end: {
            line: 373,
            column: 67
          }
        }],
        line: 372
      },
      "34": {
        loc: {
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 376
      },
      "35": {
        loc: {
          start: {
            line: 380,
            column: 16
          },
          end: {
            line: 382,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 16
          },
          end: {
            line: 382,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "36": {
        loc: {
          start: {
            line: 385,
            column: 26
          },
          end: {
            line: 385,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 26
          },
          end: {
            line: 385,
            column: 48
          }
        }, {
          start: {
            line: 385,
            column: 52
          },
          end: {
            line: 385,
            column: 73
          }
        }],
        line: 385
      },
      "37": {
        loc: {
          start: {
            line: 423,
            column: 25
          },
          end: {
            line: 423,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 25
          },
          end: {
            line: 423,
            column: 45
          }
        }, {
          start: {
            line: 423,
            column: 49
          },
          end: {
            line: 423,
            column: 72
          }
        }],
        line: 423
      },
      "38": {
        loc: {
          start: {
            line: 481,
            column: 25
          },
          end: {
            line: 481,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 481,
            column: 25
          },
          end: {
            line: 481,
            column: 45
          }
        }, {
          start: {
            line: 481,
            column: 49
          },
          end: {
            line: 481,
            column: 72
          }
        }],
        line: 481
      },
      "39": {
        loc: {
          start: {
            line: 529,
            column: 25
          },
          end: {
            line: 529,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 25
          },
          end: {
            line: 529,
            column: 45
          }
        }, {
          start: {
            line: 529,
            column: 49
          },
          end: {
            line: 529,
            column: 72
          }
        }],
        line: 529
      },
      "40": {
        loc: {
          start: {
            line: 588,
            column: 12
          },
          end: {
            line: 590,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 588,
            column: 12
          },
          end: {
            line: 590,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 588
      },
      "41": {
        loc: {
          start: {
            line: 596,
            column: 8
          },
          end: {
            line: 611,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 598,
            column: 57
          }
        }, {
          start: {
            line: 599,
            column: 12
          },
          end: {
            line: 605,
            column: 72
          }
        }, {
          start: {
            line: 606,
            column: 12
          },
          end: {
            line: 608,
            column: 65
          }
        }, {
          start: {
            line: 609,
            column: 12
          },
          end: {
            line: 610,
            column: 57
          }
        }],
        line: 596
      },
      "42": {
        loc: {
          start: {
            line: 614,
            column: 8
          },
          end: {
            line: 615,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 614,
            column: 8
          },
          end: {
            line: 615,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 614
      },
      "43": {
        loc: {
          start: {
            line: 627,
            column: 48
          },
          end: {
            line: 627,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 627,
            column: 48
          },
          end: {
            line: 627,
            column: 67
          }
        }, {
          start: {
            line: 627,
            column: 71
          },
          end: {
            line: 627,
            column: 80
          }
        }],
        line: 627
      },
      "44": {
        loc: {
          start: {
            line: 628,
            column: 12
          },
          end: {
            line: 630,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 628,
            column: 12
          },
          end: {
            line: 630,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 628
      },
      "45": {
        loc: {
          start: {
            line: 636,
            column: 22
          },
          end: {
            line: 636,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 636,
            column: 43
          },
          end: {
            line: 636,
            column: 58
          }
        }, {
          start: {
            line: 636,
            column: 61
          },
          end: {
            line: 636,
            column: 81
          }
        }],
        line: 636
      },
      "46": {
        loc: {
          start: {
            line: 637,
            column: 25
          },
          end: {
            line: 637,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 637,
            column: 25
          },
          end: {
            line: 637,
            column: 32
          }
        }, {
          start: {
            line: 637,
            column: 36
          },
          end: {
            line: 637,
            column: 51
          }
        }],
        line: 637
      },
      "47": {
        loc: {
          start: {
            line: 655,
            column: 22
          },
          end: {
            line: 655,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 655,
            column: 93
          },
          end: {
            line: 655,
            column: 100
          }
        }, {
          start: {
            line: 655,
            column: 103
          },
          end: {
            line: 655,
            column: 112
          }
        }],
        line: 655
      },
      "48": {
        loc: {
          start: {
            line: 662,
            column: 22
          },
          end: {
            line: 662,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 662,
            column: 93
          },
          end: {
            line: 662,
            column: 100
          }
        }, {
          start: {
            line: 662,
            column: 103
          },
          end: {
            line: 662,
            column: 112
          }
        }],
        line: 662
      },
      "49": {
        loc: {
          start: {
            line: 670,
            column: 22
          },
          end: {
            line: 670,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 670,
            column: 81
          },
          end: {
            line: 670,
            column: 88
          }
        }, {
          start: {
            line: 670,
            column: 91
          },
          end: {
            line: 670,
            column: 100
          }
        }],
        line: 670
      },
      "50": {
        loc: {
          start: {
            line: 678,
            column: 22
          },
          end: {
            line: 678,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 678,
            column: 89
          },
          end: {
            line: 678,
            column: 96
          }
        }, {
          start: {
            line: 678,
            column: 99
          },
          end: {
            line: 678,
            column: 108
          }
        }],
        line: 678
      },
      "51": {
        loc: {
          start: {
            line: 685,
            column: 8
          },
          end: {
            line: 687,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 685,
            column: 8
          },
          end: {
            line: 687,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 685
      },
      "52": {
        loc: {
          start: {
            line: 688,
            column: 8
          },
          end: {
            line: 690,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 688,
            column: 8
          },
          end: {
            line: 690,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 688
      },
      "53": {
        loc: {
          start: {
            line: 691,
            column: 8
          },
          end: {
            line: 693,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 691,
            column: 8
          },
          end: {
            line: 693,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 691
      },
      "54": {
        loc: {
          start: {
            line: 694,
            column: 8
          },
          end: {
            line: 696,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 694,
            column: 8
          },
          end: {
            line: 696,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 694
      },
      "55": {
        loc: {
          start: {
            line: 698,
            column: 8
          },
          end: {
            line: 700,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 698,
            column: 8
          },
          end: {
            line: 700,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 698
      },
      "56": {
        loc: {
          start: {
            line: 701,
            column: 8
          },
          end: {
            line: 703,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 701,
            column: 8
          },
          end: {
            line: 703,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 701
      },
      "57": {
        loc: {
          start: {
            line: 747,
            column: 8
          },
          end: {
            line: 750,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 747,
            column: 8
          },
          end: {
            line: 750,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 747
      },
      "58": {
        loc: {
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 768,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 768,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 766
      },
      "59": {
        loc: {
          start: {
            line: 771,
            column: 29
          },
          end: {
            line: 771,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 771,
            column: 29
          },
          end: {
            line: 771,
            column: 78
          }
        }, {
          start: {
            line: 771,
            column: 82
          },
          end: {
            line: 771,
            column: 85
          }
        }],
        line: 771
      },
      "60": {
        loc: {
          start: {
            line: 772,
            column: 8
          },
          end: {
            line: 780,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 772,
            column: 8
          },
          end: {
            line: 780,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 772
      },
      "61": {
        loc: {
          start: {
            line: 782,
            column: 36
          },
          end: {
            line: 782,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 782,
            column: 36
          },
          end: {
            line: 782,
            column: 83
          }
        }, {
          start: {
            line: 782,
            column: 87
          },
          end: {
            line: 782,
            column: 91
          }
        }],
        line: 782
      },
      "62": {
        loc: {
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 791,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 791,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 783
      },
      "63": {
        loc: {
          start: {
            line: 793,
            column: 35
          },
          end: {
            line: 793,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 793,
            column: 35
          },
          end: {
            line: 793,
            column: 77
          }
        }, {
          start: {
            line: 793,
            column: 81
          },
          end: {
            line: 793,
            column: 84
          }
        }],
        line: 793
      },
      "64": {
        loc: {
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 802,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 802,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 794
      },
      "65": {
        loc: {
          start: {
            line: 803,
            column: 8
          },
          end: {
            line: 811,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 803,
            column: 8
          },
          end: {
            line: 811,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 803
      },
      "66": {
        loc: {
          start: {
            line: 808,
            column: 26
          },
          end: {
            line: 809,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 808,
            column: 71
          },
          end: {
            line: 808,
            column: 81
          }
        }, {
          start: {
            line: 809,
            column: 20
          },
          end: {
            line: 809,
            column: 82
          }
        }],
        line: 808
      },
      "67": {
        loc: {
          start: {
            line: 809,
            column: 20
          },
          end: {
            line: 809,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 809,
            column: 65
          },
          end: {
            line: 809,
            column: 71
          }
        }, {
          start: {
            line: 809,
            column: 74
          },
          end: {
            line: 809,
            column: 82
          }
        }],
        line: 809
      },
      "68": {
        loc: {
          start: {
            line: 839,
            column: 0
          },
          end: {
            line: 852,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 839,
            column: 0
          },
          end: {
            line: 852,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 839
      },
      "69": {
        loc: {
          start: {
            line: 839,
            column: 4
          },
          end: {
            line: 839,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 839,
            column: 4
          },
          end: {
            line: 839,
            column: 34
          }
        }, {
          start: {
            line: 839,
            column: 38
          },
          end: {
            line: 839,
            column: 75
          }
        }],
        line: 839
      },
      "70": {
        loc: {
          start: {
            line: 843,
            column: 8
          },
          end: {
            line: 850,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 844,
            column: 12
          },
          end: {
            line: 846,
            column: 22
          }
        }, {
          start: {
            line: 847,
            column: 12
          },
          end: {
            line: 849,
            column: 22
          }
        }],
        line: 843
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/performance/LoadTestingFramework.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/performance/LoadTestingFramework.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport { Worker, isMainThread, parentPort, workerData } from 'worker_threads';\nimport { setTimeout as setTimeoutPromise } from 'timers/promises';\nimport { promisify } from 'util';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { performanceMonitor } from './PerformanceMonitor';\nimport { db } from '../../database/connection';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport interface LoadTestScenario {\n  id: string;\n  name: string;\n  description: string;\n  config: {\n    baseUrl: string;\n    endpoints: EndpointConfig[];\n    users: UserConfig;\n    duration: DurationConfig;\n    thresholds: ThresholdConfig;\n    environment: EnvironmentConfig;\n  };\n  hooks?: {\n    beforeScenario?: () => Promise<void>;\n    afterScenario?: () => Promise<void>;\n    beforeRequest?: (context: RequestContext) => Promise<void>;\n    afterRequest?: (context: RequestContext, result: RequestResult) => Promise<void>;\n  };\n}\n\nexport interface EndpointConfig {\n  path: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  weight: number; // Relative frequency (0-100)\n  headers?: Record<string, string>;\n  body?: any;\n  timeout?: number;\n  params?: Record<string, any>;\n  validation?: {\n    statusCode?: number[];\n    responseTime?: number;\n    bodyContains?: string[];\n    headerExists?: string[];\n  };\n}\n\nexport interface UserConfig {\n  concurrent: number;\n  rampUp: {\n    duration: number; // seconds\n    strategy: 'linear' | 'exponential' | 'step';\n  };\n  rampDown: {\n    duration: number;\n    strategy: 'linear' | 'exponential' | 'immediate';\n  };\n  thinkTime: {\n    min: number;\n    max: number;\n    distribution: 'uniform' | 'normal' | 'exponential';\n  };\n}\n\nexport interface DurationConfig {\n  total: number; // seconds\n  warmup?: number; // seconds\n  cooldown?: number; // seconds\n}\n\nexport interface ThresholdConfig {\n  responseTime: {\n    p95: number;\n    p99: number;\n    max: number;\n  };\n  errorRate: {\n    max: number; // percentage\n  };\n  throughput: {\n    min: number; // requests per second\n  };\n}\n\nexport interface EnvironmentConfig {\n  variables?: Record<string, string>;\n  dataFiles?: string[];\n  concurrent?: boolean;\n  keepAlive?: boolean;\n  compression?: boolean;\n}\n\nexport interface RequestContext {\n  userId: string;\n  scenario: LoadTestScenario;\n  endpoint: EndpointConfig;\n  iteration: number;\n  startTime: number;\n  environment: Record<string, any>;\n}\n\nexport interface RequestResult {\n  success: boolean;\n  statusCode: number;\n  responseTime: number;\n  responseSize: number;\n  errorMessage?: string;\n  timestamp: number;\n  userId: string;\n  endpoint: string;\n  headers: Record<string, string>;\n}\n\nexport interface LoadTestResults {\n  scenario: LoadTestScenario;\n  summary: {\n    startTime: Date;\n    endTime: Date;\n    duration: number;\n    totalRequests: number;\n    successfulRequests: number;\n    failedRequests: number;\n    requestsPerSecond: number;\n    bytesReceived: number;\n    bytesSent: number;\n  };\n  metrics: {\n    responseTime: {\n      min: number;\n      max: number;\n      avg: number;\n      p50: number;\n      p95: number;\n      p99: number;\n    };\n    throughput: {\n      avg: number;\n      peak: number;\n      min: number;\n    };\n    errorRate: number;\n    concurrency: {\n      avg: number;\n      peak: number;\n    };\n  };\n  timeline: TimelinePoint[];\n  errors: ErrorSummary[];\n  thresholdResults: ThresholdResult[];\n  recommendations: string[];\n}\n\nexport interface TimelinePoint {\n  timestamp: number;\n  activeUsers: number;\n  requestsPerSecond: number;\n  avgResponseTime: number;\n  errorRate: number;\n  p95ResponseTime: number;\n}\n\nexport interface ErrorSummary {\n  type: string;\n  message: string;\n  count: number;\n  percentage: number;\n  endpoints: string[];\n  firstOccurrence: number;\n  lastOccurrence: number;\n}\n\nexport interface ThresholdResult {\n  name: string;\n  value: number;\n  threshold: number;\n  passed: boolean;\n  severity: 'info' | 'warning' | 'error';\n}\n\nclass WorkerPool {\n  private workers: Worker[] = [];\n  private available: Worker[] = [];\n  private busy: Set<Worker> = new Set();\n  private maxWorkers: number;\n\n  constructor(maxWorkers: number = 4) {\n    this.maxWorkers = maxWorkers;\n  }\n\n  async getWorker(): Promise<Worker> {\n    if (this.available.length > 0) {\n      const worker = this.available.pop()!;\n      this.busy.add(worker);\n      return worker;\n    }\n\n    if (this.workers.length < this.maxWorkers) {\n      const worker = new Worker(__filename, {\n        workerData: { isWorker: true }\n      });\n      this.workers.push(worker);\n      this.busy.add(worker);\n      return worker;\n    }\n\n    // Wait for available worker\n    return new Promise((resolve) => {\n      const checkAvailable = () => {\n        if (this.available.length > 0) {\n          const worker = this.available.pop()!;\n          this.busy.add(worker);\n          resolve(worker);\n        } else {\n          setTimeout(() => checkAvailable(), 10);\n        }\n      };\n      checkAvailable();\n    });\n  }\n\n  releaseWorker(worker: Worker): void {\n    this.busy.delete(worker);\n    this.available.push(worker);\n  }\n\n  async terminate(): Promise<void> {\n    await Promise.all(this.workers.map(worker => worker.terminate()));\n    this.workers = [];\n    this.available = [];\n    this.busy.clear();\n  }\n}\n\nexport class LoadTestingFramework extends EventEmitter {\n  private isRunning: boolean = false;\n  private currentTest: LoadTestResults | null = null;\n  private workerPool: WorkerPool;\n  private scenarios: Map<string, LoadTestScenario> = new Map();\n  private baselines: Map<string, LoadTestResults> = new Map();\n  private regressionThresholds: Map<string, number> = new Map();\n\n  constructor() {\n    super();\n    this.workerPool = new WorkerPool();\n    this.setupDefaultScenarios();\n    this.setupRegressionThresholds();\n  }\n\n  /**\n   * Register a load test scenario\n   */\n  registerScenario(scenario: LoadTestScenario): void {\n    this.scenarios.set(scenario.id, scenario);\n    this.emit('scenarioRegistered', scenario);\n  }\n\n  /**\n   * Get all registered scenarios\n   */\n  getScenarios(): LoadTestScenario[] {\n    return Array.from(this.scenarios.values());\n  }\n\n  /**\n   * Run a load test scenario\n   */\n  async runLoadTest(scenarioId: string, options?: {\n    dryRun?: boolean;\n    saveBaseline?: boolean;\n    compareBaseline?: boolean;\n  }): Promise<LoadTestResults> {\n    if (this.isRunning) {\n      throw new Error('Load test is already running');\n    }\n\n    const scenario = this.scenarios.get(scenarioId);\n    if (!scenario) {\n      throw new Error(`Scenario not found: ${scenarioId}`);\n    }\n\n    this.isRunning = true;\n    this.emit('testStarted', scenario);\n\n    try {\n      if (options?.dryRun) {\n        return await this.runDryRun(scenario);\n      }\n\n      const results = await this.executeLoadTest(scenario);\n      \n      if (options?.saveBaseline) {\n        await this.saveBaseline(scenarioId, results);\n      }\n\n      if (options?.compareBaseline) {\n        await this.compareWithBaseline(scenarioId, results);\n      }\n\n      await this.saveResults(results);\n      this.emit('testCompleted', results);\n      \n      return results;\n    } finally {\n      this.isRunning = false;\n      this.currentTest = null;\n    }\n  }\n\n  /**\n   * Run performance regression test\n   */\n  async runRegressionTest(scenarioIds: string[]): Promise<{\n    passed: boolean;\n    results: LoadTestResults[];\n    regressions: RegressionResult[];\n  }> {\n    const results: LoadTestResults[] = [];\n    const regressions: RegressionResult[] = [];\n\n    for (const scenarioId of scenarioIds) {\n      const result = await this.runLoadTest(scenarioId, { compareBaseline: true });\n      results.push(result);\n\n      const regression = await this.detectRegression(scenarioId, result);\n      if (regression) {\n        regressions.push(regression);\n      }\n    }\n\n    const passed = regressions.length === 0;\n    this.emit('regressionTestCompleted', { passed, results, regressions });\n\n    return { passed, results, regressions };\n  }\n\n  /**\n   * Get test status\n   */\n  getStatus(): {\n    isRunning: boolean;\n    currentTest?: {\n      scenario: string;\n      progress: number;\n      elapsedTime: number;\n      estimatedTimeRemaining: number;\n    };\n  } {\n    if (!this.isRunning || !this.currentTest) {\n      return { isRunning: false };\n    }\n\n    const elapsed = Date.now() - this.currentTest.summary.startTime.getTime();\n    const totalDuration = this.currentTest.scenario.config.duration.total * 1000;\n    const progress = Math.min((elapsed / totalDuration) * 100, 100);\n    const estimatedTimeRemaining = Math.max(totalDuration - elapsed, 0);\n\n    return {\n      isRunning: true,\n      currentTest: {\n        scenario: this.currentTest.scenario.name,\n        progress,\n        elapsedTime: elapsed,\n        estimatedTimeRemaining\n      }\n    };\n  }\n\n  /**\n   * Stop current test\n   */\n  async stopTest(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.emit('testStopping');\n    this.isRunning = false;\n    await this.workerPool.terminate();\n    this.emit('testStopped');\n  }\n\n  /**\n   * Execute the actual load test\n   */\n  private async executeLoadTest(scenario: LoadTestScenario): Promise<LoadTestResults> {\n    const startTime = new Date();\n    const config = scenario.config;\n    const results: LoadTestResults = {\n      scenario,\n      summary: {\n        startTime,\n        endTime: new Date(),\n        duration: 0,\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        requestsPerSecond: 0,\n        bytesReceived: 0,\n        bytesSent: 0\n      },\n      metrics: {\n        responseTime: { min: 0, max: 0, avg: 0, p50: 0, p95: 0, p99: 0 },\n        throughput: { avg: 0, peak: 0, min: 0 },\n        errorRate: 0,\n        concurrency: { avg: 0, peak: 0 }\n      },\n      timeline: [],\n      errors: [],\n      thresholdResults: [],\n      recommendations: []\n    };\n\n    this.currentTest = results;\n\n    // Execute hooks\n    if (scenario.hooks?.beforeScenario) {\n      await scenario.hooks.beforeScenario();\n    }\n\n    const requestResults: RequestResult[] = [];\n    const userPromises: Promise<void>[] = [];\n    const timelineData: TimelinePoint[] = [];\n\n    // Start timeline monitoring\n    const timelineInterval = setInterval(() => {\n      const now = Date.now();\n      const recentResults = requestResults.filter(r => now - r.timestamp < 1000);\n      \n      const timelinePoint: TimelinePoint = {\n        timestamp: now,\n        activeUsers: userPromises.filter(p => !this.isPromiseSettled(p)).length,\n        requestsPerSecond: recentResults.length,\n        avgResponseTime: recentResults.reduce((sum, r) => sum + r.responseTime, 0) / recentResults.length || 0,\n        errorRate: (recentResults.filter(r => !r.success).length / recentResults.length) * 100 || 0,\n        p95ResponseTime: this.calculatePercentile(recentResults.map(r => r.responseTime), 95)\n      };\n      \n      timelineData.push(timelinePoint);\n      results.timeline = timelineData;\n      \n      this.emit('timelineUpdate', timelinePoint);\n    }, 1000);\n\n    try {\n      // Ramp up users\n      await this.rampUpUsers(scenario, async (userId: string) => {\n        const userPromise = this.simulateUser(userId, scenario, requestResults);\n        userPromises.push(userPromise);\n        return userPromise;\n      });\n\n      // Wait for test duration\n      await setTimeoutPromise(config.duration.total * 1000);\n\n      // Stop all users\n      this.isRunning = false;\n      await Promise.allSettled(userPromises);\n\n    } finally {\n      clearInterval(timelineInterval);\n    }\n\n    // Execute hooks\n    if (scenario.hooks?.afterScenario) {\n      await scenario.hooks.afterScenario();\n    }\n\n    // Calculate final results\n    const endTime = new Date();\n    results.summary.endTime = endTime;\n    results.summary.duration = (endTime.getTime() - startTime.getTime()) / 1000;\n    results.summary.totalRequests = requestResults.length;\n    results.summary.successfulRequests = requestResults.filter(r => r.success).length;\n    results.summary.failedRequests = requestResults.filter(r => !r.success).length;\n    results.summary.requestsPerSecond = results.summary.totalRequests / results.summary.duration;\n    results.summary.bytesReceived = requestResults.reduce((sum, r) => sum + r.responseSize, 0);\n\n    // Calculate metrics\n    const responseTimes = requestResults.map(r => r.responseTime);\n    if (responseTimes.length > 0) {\n      results.metrics.responseTime = {\n        min: Math.min(...responseTimes),\n        max: Math.max(...responseTimes),\n        avg: responseTimes.reduce((sum, t) => sum + t, 0) / responseTimes.length,\n        p50: this.calculatePercentile(responseTimes, 50),\n        p95: this.calculatePercentile(responseTimes, 95),\n        p99: this.calculatePercentile(responseTimes, 99)\n      };\n    }\n\n    results.metrics.throughput = {\n      avg: results.summary.requestsPerSecond,\n      peak: Math.max(...timelineData.map(t => t.requestsPerSecond)),\n      min: Math.min(...timelineData.map(t => t.requestsPerSecond))\n    };\n\n    results.metrics.errorRate = (results.summary.failedRequests / results.summary.totalRequests) * 100;\n    \n    results.metrics.concurrency = {\n      avg: timelineData.reduce((sum, t) => sum + t.activeUsers, 0) / timelineData.length,\n      peak: Math.max(...timelineData.map(t => t.activeUsers))\n    };\n\n    // Analyze errors\n    results.errors = this.analyzeErrors(requestResults);\n\n    // Check thresholds\n    results.thresholdResults = this.checkThresholds(scenario, results);\n\n    // Generate recommendations\n    results.recommendations = this.generateRecommendations(results);\n\n    return results;\n  }\n\n  /**\n   * Ramp up users according to strategy\n   */\n  private async rampUpUsers(\n    scenario: LoadTestScenario,\n    createUser: (userId: string) => Promise<void>\n  ): Promise<void> {\n    const config = scenario.config.users;\n    const rampUpDuration = config.rampUp.duration * 1000;\n    const totalUsers = config.concurrent;\n    \n    for (let i = 0; i < totalUsers; i++) {\n      const userId = uuidv4();\n      await createUser(userId);\n      \n      // Calculate delay based on strategy\n      let delay = 0;\n      switch (config.rampUp.strategy) {\n        case 'linear':\n          delay = rampUpDuration / totalUsers;\n          break;\n        case 'exponential':\n          delay = (rampUpDuration / totalUsers) * Math.pow(1.1, i);\n          break;\n        case 'step':\n          delay = i % 5 === 0 ? rampUpDuration / (totalUsers / 5) : 0;\n          break;\n      }\n      \n      if (delay > 0 && i < totalUsers - 1) {\n        await setTimeoutPromise(delay);\n      }\n    }\n  }\n\n  /**\n   * Simulate a virtual user\n   */\n  private async simulateUser(\n    userId: string,\n    scenario: LoadTestScenario,\n    results: RequestResult[]\n  ): Promise<void> {\n    const config = scenario.config;\n    const environment = { ...config.environment.variables };\n\n    while (this.isRunning) {\n      // Select endpoint based on weight\n      const endpoint = this.selectEndpoint(config.endpoints);\n      \n      const context: RequestContext = {\n        userId,\n        scenario,\n        endpoint,\n        iteration: results.filter(r => r.userId === userId).length + 1,\n        startTime: Date.now(),\n        environment\n      };\n\n      // Execute hooks\n      if (scenario.hooks?.beforeRequest) {\n        await scenario.hooks.beforeRequest(context);\n      }\n\n      // Make request\n      const result = await this.makeRequest(context);\n      results.push(result);\n\n      // Execute hooks\n      if (scenario.hooks?.afterRequest) {\n        await scenario.hooks.afterRequest(context, result);\n      }\n\n      // Think time\n      const thinkTime = this.calculateThinkTime(config.users.thinkTime);\n      if (thinkTime > 0) {\n        await setTimeoutPromise(thinkTime);\n      }\n    }\n  }\n\n  /**\n   * Make HTTP request\n   */\n  private async makeRequest(context: RequestContext): Promise<RequestResult> {\n    const startTime = performance.now();\n    const endpoint = context.endpoint;\n    const url = `${context.scenario.config.baseUrl}${endpoint.path}`;\n    \n    try {\n      const response = await axios({\n        method: endpoint.method,\n        url,\n        headers: endpoint.headers,\n        data: endpoint.body,\n        params: endpoint.params,\n        timeout: endpoint.timeout || 30000,\n        validateStatus: () => true // Don't throw on status codes\n      });\n\n      const responseTime = performance.now() - startTime;\n      const responseSize = JSON.stringify(response.data).length;\n\n      // Validate response\n      let success = true;\n      if (endpoint.validation) {\n        if (endpoint.validation.statusCode && \n            !endpoint.validation.statusCode.includes(response.status)) {\n          success = false;\n        }\n        if (endpoint.validation.responseTime && \n            responseTime > endpoint.validation.responseTime) {\n          success = false;\n        }\n        if (endpoint.validation.bodyContains) {\n          const body = JSON.stringify(response.data);\n          success = endpoint.validation.bodyContains.every(text => body.includes(text));\n        }\n        if (endpoint.validation.headerExists) {\n          success = endpoint.validation.headerExists.every(header => \n            response.headers[header] !== undefined);\n        }\n      } else {\n        success = response.status >= 200 && response.status < 400;\n      }\n\n      return {\n        success,\n        statusCode: response.status,\n        responseTime,\n        responseSize,\n        timestamp: Date.now(),\n        userId: context.userId,\n        endpoint: endpoint.path,\n        headers: Object.fromEntries(\n          Object.entries(response.headers).map(([key, value]) => [key, String(value)])\n        )\n      };\n\n    } catch (error) {\n      const responseTime = performance.now() - startTime;\n      \n      return {\n        success: false,\n        statusCode: 0,\n        responseTime,\n        responseSize: 0,\n        errorMessage: error.message,\n        timestamp: Date.now(),\n        userId: context.userId,\n        endpoint: endpoint.path,\n        headers: {}\n      };\n    }\n  }\n\n  /**\n   * Setup default load test scenarios\n   */\n  private setupDefaultScenarios(): void {\n    // API Performance Test\n    this.registerScenario({\n      id: 'api-performance',\n      name: 'API Performance Test',\n      description: 'General API performance testing',\n      config: {\n        baseUrl: process.env.BASE_URL || 'http://localhost:3001',\n        endpoints: [\n          {\n            path: '/api/health',\n            method: 'GET',\n            weight: 30,\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/performance/overview',\n            method: 'GET',\n            weight: 25,\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/analytics/metrics',\n            method: 'GET',\n            weight: 20,\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/prompt-cards',\n            method: 'GET',\n            weight: 15,\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/test-cases',\n            method: 'GET',\n            weight: 10,\n            validation: { statusCode: [200] }\n          }\n        ],\n        users: {\n          concurrent: 10,\n          rampUp: { duration: 30, strategy: 'linear' },\n          rampDown: { duration: 10, strategy: 'linear' },\n          thinkTime: { min: 1000, max: 3000, distribution: 'uniform' }\n        },\n        duration: { total: 300, warmup: 30, cooldown: 30 },\n        thresholds: {\n          responseTime: { p95: 1000, p99: 2000, max: 5000 },\n          errorRate: { max: 5 },\n          throughput: { min: 5 }\n        },\n        environment: {\n          concurrent: true,\n          keepAlive: true,\n          compression: true\n        }\n      }\n    });\n\n    // Database Stress Test\n    this.registerScenario({\n      id: 'database-stress',\n      name: 'Database Stress Test',\n      description: 'Database-intensive operations testing',\n      config: {\n        baseUrl: process.env.BASE_URL || 'http://localhost:3001',\n        endpoints: [\n          {\n            path: '/api/analytics/calculate',\n            method: 'POST',\n            weight: 40,\n            body: { period: 'day', limit: 100 },\n            validation: { statusCode: [200], responseTime: 5000 }\n          },\n          {\n            path: '/api/reports/generate',\n            method: 'POST',\n            weight: 30,\n            body: { type: 'performance', format: 'json' },\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/optimization/analyze',\n            method: 'POST',\n            weight: 30,\n            body: { prompt: 'Test prompt for analysis' },\n            validation: { statusCode: [200] }\n          }\n        ],\n        users: {\n          concurrent: 5,\n          rampUp: { duration: 60, strategy: 'exponential' },\n          rampDown: { duration: 30, strategy: 'linear' },\n          thinkTime: { min: 2000, max: 5000, distribution: 'normal' }\n        },\n        duration: { total: 600, warmup: 60, cooldown: 60 },\n        thresholds: {\n          responseTime: { p95: 3000, p99: 8000, max: 15000 },\n          errorRate: { max: 2 },\n          throughput: { min: 2 }\n        },\n        environment: {\n          concurrent: false,\n          keepAlive: true\n        }\n      }\n    });\n\n    // High Concurrency Test\n    this.registerScenario({\n      id: 'high-concurrency',\n      name: 'High Concurrency Test',\n      description: 'Testing system behavior under high concurrent load',\n      config: {\n        baseUrl: process.env.BASE_URL || 'http://localhost:3001',\n        endpoints: [\n          {\n            path: '/api/health',\n            method: 'GET',\n            weight: 50,\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/performance/health',\n            method: 'GET',\n            weight: 30,\n            validation: { statusCode: [200] }\n          },\n          {\n            path: '/api/analytics/realtime',\n            method: 'GET',\n            weight: 20,\n            validation: { statusCode: [200] }\n          }\n        ],\n        users: {\n          concurrent: 50,\n          rampUp: { duration: 120, strategy: 'step' },\n          rampDown: { duration: 60, strategy: 'immediate' },\n          thinkTime: { min: 500, max: 1500, distribution: 'exponential' }\n        },\n        duration: { total: 300, warmup: 60 },\n        thresholds: {\n          responseTime: { p95: 2000, p99: 5000, max: 10000 },\n          errorRate: { max: 10 },\n          throughput: { min: 20 }\n        },\n        environment: {\n          concurrent: true,\n          keepAlive: true,\n          compression: true\n        }\n      }\n    });\n  }\n\n  /**\n   * Setup regression detection thresholds\n   */\n  private setupRegressionThresholds(): void {\n    this.regressionThresholds.set('responseTime.p95', 1.2); // 20% increase\n    this.regressionThresholds.set('responseTime.avg', 1.15); // 15% increase\n    this.regressionThresholds.set('throughput.avg', 0.85); // 15% decrease\n    this.regressionThresholds.set('errorRate', 1.5); // 50% increase\n  }\n\n  /**\n   * Helper methods\n   */\n  private selectEndpoint(endpoints: EndpointConfig[]): EndpointConfig {\n    const totalWeight = endpoints.reduce((sum, e) => sum + e.weight, 0);\n    const random = Math.random() * totalWeight;\n    \n    let currentWeight = 0;\n    for (const endpoint of endpoints) {\n      currentWeight += endpoint.weight;\n      if (random <= currentWeight) {\n        return endpoint;\n      }\n    }\n    \n    return endpoints[endpoints.length - 1];\n  }\n\n  private calculateThinkTime(config: UserConfig['thinkTime']): number {\n    const { min, max, distribution } = config;\n    \n    switch (distribution) {\n      case 'uniform':\n        return min + Math.random() * (max - min);\n      case 'normal':\n        const u1 = Math.random();\n        const u2 = Math.random();\n        const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n        const mean = (min + max) / 2;\n        const stddev = (max - min) / 6;\n        return Math.max(min, Math.min(max, mean + z0 * stddev));\n      case 'exponential':\n        const lambda = 1 / ((min + max) / 2);\n        return min + (-Math.log(Math.random()) / lambda);\n      default:\n        return min + Math.random() * (max - min);\n    }\n  }\n\n  private calculatePercentile(values: number[], percentile: number): number {\n    if (values.length === 0) return 0;\n    \n    const sorted = values.slice().sort((a, b) => a - b);\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\n    return sorted[Math.max(0, index)];\n  }\n\n  private isPromiseSettled(promise: Promise<any>): boolean {\n    // This is a simplified check - in real implementation you'd track promise states\n    return false;\n  }\n\n  private analyzeErrors(results: RequestResult[]): ErrorSummary[] {\n    const errorMap = new Map<string, RequestResult[]>();\n    \n    results.filter(r => !r.success).forEach(result => {\n      const key = `${result.statusCode}_${result.errorMessage || 'Unknown'}`;\n      if (!errorMap.has(key)) {\n        errorMap.set(key, []);\n      }\n      errorMap.get(key)!.push(result);\n    });\n\n    return Array.from(errorMap.entries()).map(([key, errors]) => {\n      const [statusCode, message] = key.split('_', 2);\n      return {\n        type: statusCode === '0' ? 'Network Error' : `HTTP ${statusCode}`,\n        message: message || 'Unknown error',\n        count: errors.length,\n        percentage: (errors.length / results.length) * 100,\n        endpoints: [...new Set(errors.map(e => e.endpoint))],\n        firstOccurrence: Math.min(...errors.map(e => e.timestamp)),\n        lastOccurrence: Math.max(...errors.map(e => e.timestamp))\n      };\n    });\n  }\n\n  private checkThresholds(scenario: LoadTestScenario, results: LoadTestResults): ThresholdResult[] {\n    const thresholds = scenario.config.thresholds;\n    const thresholdResults: ThresholdResult[] = [];\n\n    // Response time thresholds\n    thresholdResults.push({\n      name: 'P95 Response Time',\n      value: results.metrics.responseTime.p95,\n      threshold: thresholds.responseTime.p95,\n      passed: results.metrics.responseTime.p95 <= thresholds.responseTime.p95,\n      severity: results.metrics.responseTime.p95 > thresholds.responseTime.p95 * 1.5 ? 'error' : 'warning'\n    });\n\n    thresholdResults.push({\n      name: 'P99 Response Time',\n      value: results.metrics.responseTime.p99,\n      threshold: thresholds.responseTime.p99,\n      passed: results.metrics.responseTime.p99 <= thresholds.responseTime.p99,\n      severity: results.metrics.responseTime.p99 > thresholds.responseTime.p99 * 1.5 ? 'error' : 'warning'\n    });\n\n    // Error rate threshold\n    thresholdResults.push({\n      name: 'Error Rate',\n      value: results.metrics.errorRate,\n      threshold: thresholds.errorRate.max,\n      passed: results.metrics.errorRate <= thresholds.errorRate.max,\n      severity: results.metrics.errorRate > thresholds.errorRate.max * 2 ? 'error' : 'warning'\n    });\n\n    // Throughput threshold\n    thresholdResults.push({\n      name: 'Throughput',\n      value: results.metrics.throughput.avg,\n      threshold: thresholds.throughput.min,\n      passed: results.metrics.throughput.avg >= thresholds.throughput.min,\n      severity: results.metrics.throughput.avg < thresholds.throughput.min * 0.5 ? 'error' : 'warning'\n    });\n\n    return thresholdResults;\n  }\n\n  private generateRecommendations(results: LoadTestResults): string[] {\n    const recommendations: string[] = [];\n    const metrics = results.metrics;\n\n    if (metrics.errorRate > 5) {\n      recommendations.push('High error rate detected. Review error logs and implement better error handling.');\n    }\n\n    if (metrics.responseTime.p95 > 2000) {\n      recommendations.push('Slow response times detected. Consider implementing caching or optimizing database queries.');\n    }\n\n    if (metrics.throughput.avg < 10) {\n      recommendations.push('Low throughput detected. Consider scaling horizontally or optimizing application performance.');\n    }\n\n    if (results.errors.some(e => e.type.includes('Network'))) {\n      recommendations.push('Network errors detected. Check network connectivity and implement retry mechanisms.');\n    }\n\n    const failedThresholds = results.thresholdResults.filter(t => !t.passed);\n    if (failedThresholds.length > 0) {\n      recommendations.push(`Performance thresholds failed: ${failedThresholds.map(t => t.name).join(', ')}`);\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('All performance metrics are within acceptable ranges.');\n    }\n\n    return recommendations;\n  }\n\n  private async runDryRun(scenario: LoadTestScenario): Promise<LoadTestResults> {\n    // Simulate a quick test run for validation\n    console.log(`Running dry run for scenario: ${scenario.name}`);\n    \n    // Return mock results\n    return {\n      scenario,\n      summary: {\n        startTime: new Date(),\n        endTime: new Date(),\n        duration: 10,\n        totalRequests: 10,\n        successfulRequests: 10,\n        failedRequests: 0,\n        requestsPerSecond: 1,\n        bytesReceived: 1000,\n        bytesSent: 500\n      },\n      metrics: {\n        responseTime: { min: 50, max: 200, avg: 100, p50: 95, p95: 180, p99: 195 },\n        throughput: { avg: 1, peak: 1, min: 1 },\n        errorRate: 0,\n        concurrency: { avg: 1, peak: 1 }\n      },\n      timeline: [],\n      errors: [],\n      thresholdResults: [],\n      recommendations: ['Dry run completed successfully']\n    };\n  }\n\n  private async saveBaseline(scenarioId: string, results: LoadTestResults): Promise<void> {\n    this.baselines.set(scenarioId, results);\n    \n    // Also save to database\n    const stmt = db.prepare(`\n      INSERT OR REPLACE INTO load_test_baselines \n      (scenario_id, results, created_at)\n      VALUES (?, ?, ?)\n    `);\n    \n    stmt.run(scenarioId, JSON.stringify(results), new Date().toISOString());\n  }\n\n  private async compareWithBaseline(scenarioId: string, results: LoadTestResults): Promise<void> {\n    const baseline = this.baselines.get(scenarioId);\n    if (!baseline) {\n      console.log(`No baseline found for scenario: ${scenarioId}`);\n      return;\n    }\n\n    const comparison = {\n      responseTime: {\n        p95: (results.metrics.responseTime.p95 / baseline.metrics.responseTime.p95) - 1,\n        avg: (results.metrics.responseTime.avg / baseline.metrics.responseTime.avg) - 1\n      },\n      throughput: {\n        avg: (results.metrics.throughput.avg / baseline.metrics.throughput.avg) - 1\n      },\n      errorRate: results.metrics.errorRate - baseline.metrics.errorRate\n    };\n\n    console.log(`Baseline comparison for ${scenarioId}:`, comparison);\n    this.emit('baselineComparison', { scenarioId, comparison, results, baseline });\n  }\n\n  private async detectRegression(scenarioId: string, results: LoadTestResults): Promise<RegressionResult | null> {\n    const baseline = this.baselines.get(scenarioId);\n    if (!baseline) {\n      return null;\n    }\n\n    const regressions: RegressionIssue[] = [];\n\n    // Check response time regression\n    const p95Threshold = this.regressionThresholds.get('responseTime.p95') || 1.2;\n    if (results.metrics.responseTime.p95 > baseline.metrics.responseTime.p95 * p95Threshold) {\n      regressions.push({\n        metric: 'responseTime.p95',\n        baseline: baseline.metrics.responseTime.p95,\n        current: results.metrics.responseTime.p95,\n        threshold: p95Threshold,\n        degradation: (results.metrics.responseTime.p95 / baseline.metrics.responseTime.p95) - 1\n      });\n    }\n\n    // Check throughput regression\n    const throughputThreshold = this.regressionThresholds.get('throughput.avg') || 0.85;\n    if (results.metrics.throughput.avg < baseline.metrics.throughput.avg * throughputThreshold) {\n      regressions.push({\n        metric: 'throughput.avg',\n        baseline: baseline.metrics.throughput.avg,\n        current: results.metrics.throughput.avg,\n        threshold: throughputThreshold,\n        degradation: (baseline.metrics.throughput.avg / results.metrics.throughput.avg) - 1\n      });\n    }\n\n    // Check error rate regression\n    const errorRateThreshold = this.regressionThresholds.get('errorRate') || 1.5;\n    if (results.metrics.errorRate > baseline.metrics.errorRate * errorRateThreshold) {\n      regressions.push({\n        metric: 'errorRate',\n        baseline: baseline.metrics.errorRate,\n        current: results.metrics.errorRate,\n        threshold: errorRateThreshold,\n        degradation: (results.metrics.errorRate / baseline.metrics.errorRate) - 1\n      });\n    }\n\n    if (regressions.length > 0) {\n      return {\n        scenarioId,\n        timestamp: new Date(),\n        regressions,\n        severity: regressions.some(r => r.degradation > 0.5) ? 'critical' : \n                 regressions.some(r => r.degradation > 0.2) ? 'high' : 'medium'\n      };\n    }\n\n    return null;\n  }\n\n  private async saveResults(results: LoadTestResults): Promise<void> {\n    try {\n      const stmt = db.prepare(`\n        INSERT INTO load_test_results \n        (scenario_id, scenario_name, start_time, end_time, duration, total_requests, \n         successful_requests, failed_requests, requests_per_second, avg_response_time, \n         p95_response_time, p99_response_time, error_rate, results_json, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n      \n      stmt.run(\n        results.scenario.id,\n        results.scenario.name,\n        results.summary.startTime.toISOString(),\n        results.summary.endTime.toISOString(),\n        results.summary.duration,\n        results.summary.totalRequests,\n        results.summary.successfulRequests,\n        results.summary.failedRequests,\n        results.summary.requestsPerSecond,\n        results.metrics.responseTime.avg,\n        results.metrics.responseTime.p95,\n        results.metrics.responseTime.p99,\n        results.metrics.errorRate,\n        JSON.stringify(results),\n        new Date().toISOString()\n      );\n    } catch (error) {\n      console.error('Failed to save load test results:', error);\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    await this.workerPool.terminate();\n    this.removeAllListeners();\n  }\n}\n\n// Interfaces for regression detection\ninterface RegressionResult {\n  scenarioId: string;\n  timestamp: Date;\n  regressions: RegressionIssue[];\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface RegressionIssue {\n  metric: string;\n  baseline: number;\n  current: number;\n  threshold: number;\n  degradation: number; // Percentage degradation\n}\n\n// Worker thread handler\nif (!isMainThread && workerData?.isWorker) {\n  // Worker thread logic for load testing\n  parentPort?.on('message', async (message) => {\n    const { type, data } = message;\n    \n    switch (type) {\n      case 'makeRequest':\n        // Handle request in worker thread\n        break;\n      case 'simulateUser':\n        // Handle user simulation in worker thread\n        break;\n    }\n  });\n}\n\n// Export singleton instance\nexport const loadTestingFramework = new LoadTestingFramework();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4355e6610027bcd35ec8268d80fc6c87e8dcf4c7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o1w5v0fu2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o1w5v0fu2();
var __importDefault =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[0]++,
/* istanbul ignore next */
(cov_1o1w5v0fu2().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1o1w5v0fu2().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1o1w5v0fu2().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1o1w5v0fu2().f[0]++;
  cov_1o1w5v0fu2().s[1]++;
  return /* istanbul ignore next */(cov_1o1w5v0fu2().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1o1w5v0fu2().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1o1w5v0fu2().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1o1w5v0fu2().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1o1w5v0fu2().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1o1w5v0fu2().s[3]++;
exports.loadTestingFramework = exports.LoadTestingFramework = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[4]++, require("events"));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[5]++, require("perf_hooks"));
const worker_threads_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[6]++, require("worker_threads"));
const promises_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[7]++, require("timers/promises"));
const axios_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[8]++, __importDefault(require("axios")));
const uuid_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[9]++, require("uuid"));
const connection_1 =
/* istanbul ignore next */
(cov_1o1w5v0fu2().s[10]++, require("../../database/connection"));
class WorkerPool {
  constructor(maxWorkers =
  /* istanbul ignore next */
  (cov_1o1w5v0fu2().b[3][0]++, 4)) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[1]++;
    cov_1o1w5v0fu2().s[11]++;
    this.workers = [];
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[12]++;
    this.available = [];
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[13]++;
    this.busy = new Set();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[14]++;
    this.maxWorkers = maxWorkers;
  }
  async getWorker() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[2]++;
    cov_1o1w5v0fu2().s[15]++;
    if (this.available.length > 0) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[4][0]++;
      const worker =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[16]++, this.available.pop());
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[17]++;
      this.busy.add(worker);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[18]++;
      return worker;
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[4][1]++;
    }
    cov_1o1w5v0fu2().s[19]++;
    if (this.workers.length < this.maxWorkers) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[5][0]++;
      const worker =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[20]++, new worker_threads_1.Worker(__filename, {
        workerData: {
          isWorker: true
        }
      }));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[21]++;
      this.workers.push(worker);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[22]++;
      this.busy.add(worker);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[23]++;
      return worker;
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[5][1]++;
    }
    // Wait for available worker
    cov_1o1w5v0fu2().s[24]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[3]++;
      cov_1o1w5v0fu2().s[25]++;
      const checkAvailable = () => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[4]++;
        cov_1o1w5v0fu2().s[26]++;
        if (this.available.length > 0) {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[6][0]++;
          const worker =
          /* istanbul ignore next */
          (cov_1o1w5v0fu2().s[27]++, this.available.pop());
          /* istanbul ignore next */
          cov_1o1w5v0fu2().s[28]++;
          this.busy.add(worker);
          /* istanbul ignore next */
          cov_1o1w5v0fu2().s[29]++;
          resolve(worker);
        } else {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[6][1]++;
          cov_1o1w5v0fu2().s[30]++;
          setTimeout(() => {
            /* istanbul ignore next */
            cov_1o1w5v0fu2().f[5]++;
            cov_1o1w5v0fu2().s[31]++;
            return checkAvailable();
          }, 10);
        }
      };
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[32]++;
      checkAvailable();
    });
  }
  releaseWorker(worker) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[6]++;
    cov_1o1w5v0fu2().s[33]++;
    this.busy.delete(worker);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[34]++;
    this.available.push(worker);
  }
  async terminate() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[7]++;
    cov_1o1w5v0fu2().s[35]++;
    await Promise.all(this.workers.map(worker => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[8]++;
      cov_1o1w5v0fu2().s[36]++;
      return worker.terminate();
    }));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[37]++;
    this.workers = [];
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[38]++;
    this.available = [];
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[39]++;
    this.busy.clear();
  }
}
class LoadTestingFramework extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[9]++;
    cov_1o1w5v0fu2().s[40]++;
    super();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[41]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[42]++;
    this.currentTest = null;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[43]++;
    this.scenarios = new Map();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[44]++;
    this.baselines = new Map();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[45]++;
    this.regressionThresholds = new Map();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[46]++;
    this.workerPool = new WorkerPool();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[47]++;
    this.setupDefaultScenarios();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[48]++;
    this.setupRegressionThresholds();
  }
  /**
   * Register a load test scenario
   */
  registerScenario(scenario) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[10]++;
    cov_1o1w5v0fu2().s[49]++;
    this.scenarios.set(scenario.id, scenario);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[50]++;
    this.emit('scenarioRegistered', scenario);
  }
  /**
   * Get all registered scenarios
   */
  getScenarios() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[11]++;
    cov_1o1w5v0fu2().s[51]++;
    return Array.from(this.scenarios.values());
  }
  /**
   * Run a load test scenario
   */
  async runLoadTest(scenarioId, options) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[12]++;
    cov_1o1w5v0fu2().s[52]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[7][0]++;
      cov_1o1w5v0fu2().s[53]++;
      throw new Error('Load test is already running');
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[7][1]++;
    }
    const scenario =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[54]++, this.scenarios.get(scenarioId));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[55]++;
    if (!scenario) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[8][0]++;
      cov_1o1w5v0fu2().s[56]++;
      throw new Error(`Scenario not found: ${scenarioId}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[8][1]++;
    }
    cov_1o1w5v0fu2().s[57]++;
    this.isRunning = true;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[58]++;
    this.emit('testStarted', scenario);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[59]++;
    try {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[60]++;
      if (options?.dryRun) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[9][0]++;
        cov_1o1w5v0fu2().s[61]++;
        return await this.runDryRun(scenario);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[9][1]++;
      }
      const results =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[62]++, await this.executeLoadTest(scenario));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[63]++;
      if (options?.saveBaseline) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[10][0]++;
        cov_1o1w5v0fu2().s[64]++;
        await this.saveBaseline(scenarioId, results);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[10][1]++;
      }
      cov_1o1w5v0fu2().s[65]++;
      if (options?.compareBaseline) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[11][0]++;
        cov_1o1w5v0fu2().s[66]++;
        await this.compareWithBaseline(scenarioId, results);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[11][1]++;
      }
      cov_1o1w5v0fu2().s[67]++;
      await this.saveResults(results);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[68]++;
      this.emit('testCompleted', results);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[69]++;
      return results;
    } finally {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[70]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[71]++;
      this.currentTest = null;
    }
  }
  /**
   * Run performance regression test
   */
  async runRegressionTest(scenarioIds) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[13]++;
    const results =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[72]++, []);
    const regressions =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[73]++, []);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[74]++;
    for (const scenarioId of scenarioIds) {
      const result =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[75]++, await this.runLoadTest(scenarioId, {
        compareBaseline: true
      }));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[76]++;
      results.push(result);
      const regression =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[77]++, await this.detectRegression(scenarioId, result));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[78]++;
      if (regression) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[12][0]++;
        cov_1o1w5v0fu2().s[79]++;
        regressions.push(regression);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[12][1]++;
      }
    }
    const passed =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[80]++, regressions.length === 0);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[81]++;
    this.emit('regressionTestCompleted', {
      passed,
      results,
      regressions
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[82]++;
    return {
      passed,
      results,
      regressions
    };
  }
  /**
   * Get test status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[14]++;
    cov_1o1w5v0fu2().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[14][0]++, !this.isRunning) ||
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[14][1]++, !this.currentTest)) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[13][0]++;
      cov_1o1w5v0fu2().s[84]++;
      return {
        isRunning: false
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[13][1]++;
    }
    const elapsed =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[85]++, Date.now() - this.currentTest.summary.startTime.getTime());
    const totalDuration =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[86]++, this.currentTest.scenario.config.duration.total * 1000);
    const progress =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[87]++, Math.min(elapsed / totalDuration * 100, 100));
    const estimatedTimeRemaining =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[88]++, Math.max(totalDuration - elapsed, 0));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[89]++;
    return {
      isRunning: true,
      currentTest: {
        scenario: this.currentTest.scenario.name,
        progress,
        elapsedTime: elapsed,
        estimatedTimeRemaining
      }
    };
  }
  /**
   * Stop current test
   */
  async stopTest() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[15]++;
    cov_1o1w5v0fu2().s[90]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[15][0]++;
      cov_1o1w5v0fu2().s[91]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[15][1]++;
    }
    cov_1o1w5v0fu2().s[92]++;
    this.emit('testStopping');
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[93]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[94]++;
    await this.workerPool.terminate();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[95]++;
    this.emit('testStopped');
  }
  /**
   * Execute the actual load test
   */
  async executeLoadTest(scenario) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[16]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[96]++, new Date());
    const config =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[97]++, scenario.config);
    const results =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[98]++, {
      scenario,
      summary: {
        startTime,
        endTime: new Date(),
        duration: 0,
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        requestsPerSecond: 0,
        bytesReceived: 0,
        bytesSent: 0
      },
      metrics: {
        responseTime: {
          min: 0,
          max: 0,
          avg: 0,
          p50: 0,
          p95: 0,
          p99: 0
        },
        throughput: {
          avg: 0,
          peak: 0,
          min: 0
        },
        errorRate: 0,
        concurrency: {
          avg: 0,
          peak: 0
        }
      },
      timeline: [],
      errors: [],
      thresholdResults: [],
      recommendations: []
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[99]++;
    this.currentTest = results;
    // Execute hooks
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[100]++;
    if (scenario.hooks?.beforeScenario) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[16][0]++;
      cov_1o1w5v0fu2().s[101]++;
      await scenario.hooks.beforeScenario();
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[16][1]++;
    }
    const requestResults =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[102]++, []);
    const userPromises =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[103]++, []);
    const timelineData =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[104]++, []);
    // Start timeline monitoring
    const timelineInterval =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[105]++, setInterval(() => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[17]++;
      const now =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[106]++, Date.now());
      const recentResults =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[107]++, requestResults.filter(r => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[18]++;
        cov_1o1w5v0fu2().s[108]++;
        return now - r.timestamp < 1000;
      }));
      const timelinePoint =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[109]++, {
        timestamp: now,
        activeUsers: userPromises.filter(p => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[19]++;
          cov_1o1w5v0fu2().s[110]++;
          return !this.isPromiseSettled(p);
        }).length,
        requestsPerSecond: recentResults.length,
        avgResponseTime:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[17][0]++, recentResults.reduce((sum, r) => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[20]++;
          cov_1o1w5v0fu2().s[111]++;
          return sum + r.responseTime;
        }, 0) / recentResults.length) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[17][1]++, 0),
        errorRate:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[18][0]++, recentResults.filter(r => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[21]++;
          cov_1o1w5v0fu2().s[112]++;
          return !r.success;
        }).length / recentResults.length * 100) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[18][1]++, 0),
        p95ResponseTime: this.calculatePercentile(recentResults.map(r => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[22]++;
          cov_1o1w5v0fu2().s[113]++;
          return r.responseTime;
        }), 95)
      });
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[114]++;
      timelineData.push(timelinePoint);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[115]++;
      results.timeline = timelineData;
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[116]++;
      this.emit('timelineUpdate', timelinePoint);
    }, 1000));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[117]++;
    try {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[118]++;
      // Ramp up users
      await this.rampUpUsers(scenario, async userId => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[23]++;
        const userPromise =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[119]++, this.simulateUser(userId, scenario, requestResults));
        /* istanbul ignore next */
        cov_1o1w5v0fu2().s[120]++;
        userPromises.push(userPromise);
        /* istanbul ignore next */
        cov_1o1w5v0fu2().s[121]++;
        return userPromise;
      });
      // Wait for test duration
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[122]++;
      await (0, promises_1.setTimeout)(config.duration.total * 1000);
      // Stop all users
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[123]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[124]++;
      await Promise.allSettled(userPromises);
    } finally {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[125]++;
      clearInterval(timelineInterval);
    }
    // Execute hooks
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[126]++;
    if (scenario.hooks?.afterScenario) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[19][0]++;
      cov_1o1w5v0fu2().s[127]++;
      await scenario.hooks.afterScenario();
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[19][1]++;
    }
    // Calculate final results
    const endTime =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[128]++, new Date());
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[129]++;
    results.summary.endTime = endTime;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[130]++;
    results.summary.duration = (endTime.getTime() - startTime.getTime()) / 1000;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[131]++;
    results.summary.totalRequests = requestResults.length;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[132]++;
    results.summary.successfulRequests = requestResults.filter(r => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[24]++;
      cov_1o1w5v0fu2().s[133]++;
      return r.success;
    }).length;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[134]++;
    results.summary.failedRequests = requestResults.filter(r => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[25]++;
      cov_1o1w5v0fu2().s[135]++;
      return !r.success;
    }).length;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[136]++;
    results.summary.requestsPerSecond = results.summary.totalRequests / results.summary.duration;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[137]++;
    results.summary.bytesReceived = requestResults.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[26]++;
      cov_1o1w5v0fu2().s[138]++;
      return sum + r.responseSize;
    }, 0);
    // Calculate metrics
    const responseTimes =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[139]++, requestResults.map(r => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[27]++;
      cov_1o1w5v0fu2().s[140]++;
      return r.responseTime;
    }));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[141]++;
    if (responseTimes.length > 0) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[20][0]++;
      cov_1o1w5v0fu2().s[142]++;
      results.metrics.responseTime = {
        min: Math.min(...responseTimes),
        max: Math.max(...responseTimes),
        avg: responseTimes.reduce((sum, t) => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[28]++;
          cov_1o1w5v0fu2().s[143]++;
          return sum + t;
        }, 0) / responseTimes.length,
        p50: this.calculatePercentile(responseTimes, 50),
        p95: this.calculatePercentile(responseTimes, 95),
        p99: this.calculatePercentile(responseTimes, 99)
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[20][1]++;
    }
    cov_1o1w5v0fu2().s[144]++;
    results.metrics.throughput = {
      avg: results.summary.requestsPerSecond,
      peak: Math.max(...timelineData.map(t => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[29]++;
        cov_1o1w5v0fu2().s[145]++;
        return t.requestsPerSecond;
      })),
      min: Math.min(...timelineData.map(t => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[30]++;
        cov_1o1w5v0fu2().s[146]++;
        return t.requestsPerSecond;
      }))
    };
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[147]++;
    results.metrics.errorRate = results.summary.failedRequests / results.summary.totalRequests * 100;
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[148]++;
    results.metrics.concurrency = {
      avg: timelineData.reduce((sum, t) => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[31]++;
        cov_1o1w5v0fu2().s[149]++;
        return sum + t.activeUsers;
      }, 0) / timelineData.length,
      peak: Math.max(...timelineData.map(t => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[32]++;
        cov_1o1w5v0fu2().s[150]++;
        return t.activeUsers;
      }))
    };
    // Analyze errors
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[151]++;
    results.errors = this.analyzeErrors(requestResults);
    // Check thresholds
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[152]++;
    results.thresholdResults = this.checkThresholds(scenario, results);
    // Generate recommendations
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[153]++;
    results.recommendations = this.generateRecommendations(results);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[154]++;
    return results;
  }
  /**
   * Ramp up users according to strategy
   */
  async rampUpUsers(scenario, createUser) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[33]++;
    const config =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[155]++, scenario.config.users);
    const rampUpDuration =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[156]++, config.rampUp.duration * 1000);
    const totalUsers =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[157]++, config.concurrent);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[158]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[159]++, 0); i < totalUsers; i++) {
      const userId =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[160]++, (0, uuid_1.v4)());
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[161]++;
      await createUser(userId);
      // Calculate delay based on strategy
      let delay =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[162]++, 0);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[163]++;
      switch (config.rampUp.strategy) {
        case 'linear':
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[21][0]++;
          cov_1o1w5v0fu2().s[164]++;
          delay = rampUpDuration / totalUsers;
          /* istanbul ignore next */
          cov_1o1w5v0fu2().s[165]++;
          break;
        case 'exponential':
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[21][1]++;
          cov_1o1w5v0fu2().s[166]++;
          delay = rampUpDuration / totalUsers * Math.pow(1.1, i);
          /* istanbul ignore next */
          cov_1o1w5v0fu2().s[167]++;
          break;
        case 'step':
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[21][2]++;
          cov_1o1w5v0fu2().s[168]++;
          delay = i % 5 === 0 ?
          /* istanbul ignore next */
          (cov_1o1w5v0fu2().b[22][0]++, rampUpDuration / (totalUsers / 5)) :
          /* istanbul ignore next */
          (cov_1o1w5v0fu2().b[22][1]++, 0);
          /* istanbul ignore next */
          cov_1o1w5v0fu2().s[169]++;
          break;
      }
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[170]++;
      if (
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[24][0]++, delay > 0) &&
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[24][1]++, i < totalUsers - 1)) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[23][0]++;
        cov_1o1w5v0fu2().s[171]++;
        await (0, promises_1.setTimeout)(delay);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[23][1]++;
      }
    }
  }
  /**
   * Simulate a virtual user
   */
  async simulateUser(userId, scenario, results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[34]++;
    const config =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[172]++, scenario.config);
    const environment =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[173]++, {
      ...config.environment.variables
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[174]++;
    while (this.isRunning) {
      // Select endpoint based on weight
      const endpoint =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[175]++, this.selectEndpoint(config.endpoints));
      const context =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[176]++, {
        userId,
        scenario,
        endpoint,
        iteration: results.filter(r => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[35]++;
          cov_1o1w5v0fu2().s[177]++;
          return r.userId === userId;
        }).length + 1,
        startTime: Date.now(),
        environment
      });
      // Execute hooks
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[178]++;
      if (scenario.hooks?.beforeRequest) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[25][0]++;
        cov_1o1w5v0fu2().s[179]++;
        await scenario.hooks.beforeRequest(context);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[25][1]++;
      }
      // Make request
      const result =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[180]++, await this.makeRequest(context));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[181]++;
      results.push(result);
      // Execute hooks
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[182]++;
      if (scenario.hooks?.afterRequest) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[26][0]++;
        cov_1o1w5v0fu2().s[183]++;
        await scenario.hooks.afterRequest(context, result);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[26][1]++;
      }
      // Think time
      const thinkTime =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[184]++, this.calculateThinkTime(config.users.thinkTime));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[185]++;
      if (thinkTime > 0) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[27][0]++;
        cov_1o1w5v0fu2().s[186]++;
        await (0, promises_1.setTimeout)(thinkTime);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[27][1]++;
      }
    }
  }
  /**
   * Make HTTP request
   */
  async makeRequest(context) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[36]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[187]++, perf_hooks_1.performance.now());
    const endpoint =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[188]++, context.endpoint);
    const url =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[189]++, `${context.scenario.config.baseUrl}${endpoint.path}`);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[190]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[191]++, await (0, axios_1.default)({
        method: endpoint.method,
        url,
        headers: endpoint.headers,
        data: endpoint.body,
        params: endpoint.params,
        timeout:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[28][0]++, endpoint.timeout) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[28][1]++, 30000),
        validateStatus: () => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[37]++;
          cov_1o1w5v0fu2().s[192]++;
          return true;
        } // Don't throw on status codes
      }));
      const responseTime =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[193]++, perf_hooks_1.performance.now() - startTime);
      const responseSize =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[194]++, JSON.stringify(response.data).length);
      // Validate response
      let success =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[195]++, true);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[196]++;
      if (endpoint.validation) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[29][0]++;
        cov_1o1w5v0fu2().s[197]++;
        if (
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[31][0]++, endpoint.validation.statusCode) &&
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[31][1]++, !endpoint.validation.statusCode.includes(response.status))) {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[30][0]++;
          cov_1o1w5v0fu2().s[198]++;
          success = false;
        } else
        /* istanbul ignore next */
        {
          cov_1o1w5v0fu2().b[30][1]++;
        }
        cov_1o1w5v0fu2().s[199]++;
        if (
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[33][0]++, endpoint.validation.responseTime) &&
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[33][1]++, responseTime > endpoint.validation.responseTime)) {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[32][0]++;
          cov_1o1w5v0fu2().s[200]++;
          success = false;
        } else
        /* istanbul ignore next */
        {
          cov_1o1w5v0fu2().b[32][1]++;
        }
        cov_1o1w5v0fu2().s[201]++;
        if (endpoint.validation.bodyContains) {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[34][0]++;
          const body =
          /* istanbul ignore next */
          (cov_1o1w5v0fu2().s[202]++, JSON.stringify(response.data));
          /* istanbul ignore next */
          cov_1o1w5v0fu2().s[203]++;
          success = endpoint.validation.bodyContains.every(text => {
            /* istanbul ignore next */
            cov_1o1w5v0fu2().f[38]++;
            cov_1o1w5v0fu2().s[204]++;
            return body.includes(text);
          });
        } else
        /* istanbul ignore next */
        {
          cov_1o1w5v0fu2().b[34][1]++;
        }
        cov_1o1w5v0fu2().s[205]++;
        if (endpoint.validation.headerExists) {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().b[35][0]++;
          cov_1o1w5v0fu2().s[206]++;
          success = endpoint.validation.headerExists.every(header => {
            /* istanbul ignore next */
            cov_1o1w5v0fu2().f[39]++;
            cov_1o1w5v0fu2().s[207]++;
            return response.headers[header] !== undefined;
          });
        } else
        /* istanbul ignore next */
        {
          cov_1o1w5v0fu2().b[35][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[29][1]++;
        cov_1o1w5v0fu2().s[208]++;
        success =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[36][0]++, response.status >= 200) &&
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[36][1]++, response.status < 400);
      }
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[209]++;
      return {
        success,
        statusCode: response.status,
        responseTime,
        responseSize,
        timestamp: Date.now(),
        userId: context.userId,
        endpoint: endpoint.path,
        headers: Object.fromEntries(Object.entries(response.headers).map(([key, value]) => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[40]++;
          cov_1o1w5v0fu2().s[210]++;
          return [key, String(value)];
        }))
      };
    } catch (error) {
      const responseTime =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[211]++, perf_hooks_1.performance.now() - startTime);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[212]++;
      return {
        success: false,
        statusCode: 0,
        responseTime,
        responseSize: 0,
        errorMessage: error.message,
        timestamp: Date.now(),
        userId: context.userId,
        endpoint: endpoint.path,
        headers: {}
      };
    }
  }
  /**
   * Setup default load test scenarios
   */
  setupDefaultScenarios() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[41]++;
    cov_1o1w5v0fu2().s[213]++;
    // API Performance Test
    this.registerScenario({
      id: 'api-performance',
      name: 'API Performance Test',
      description: 'General API performance testing',
      config: {
        baseUrl:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[37][0]++, process.env.BASE_URL) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[37][1]++, 'http://localhost:3001'),
        endpoints: [{
          path: '/api/health',
          method: 'GET',
          weight: 30,
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/performance/overview',
          method: 'GET',
          weight: 25,
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/analytics/metrics',
          method: 'GET',
          weight: 20,
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/prompt-cards',
          method: 'GET',
          weight: 15,
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/test-cases',
          method: 'GET',
          weight: 10,
          validation: {
            statusCode: [200]
          }
        }],
        users: {
          concurrent: 10,
          rampUp: {
            duration: 30,
            strategy: 'linear'
          },
          rampDown: {
            duration: 10,
            strategy: 'linear'
          },
          thinkTime: {
            min: 1000,
            max: 3000,
            distribution: 'uniform'
          }
        },
        duration: {
          total: 300,
          warmup: 30,
          cooldown: 30
        },
        thresholds: {
          responseTime: {
            p95: 1000,
            p99: 2000,
            max: 5000
          },
          errorRate: {
            max: 5
          },
          throughput: {
            min: 5
          }
        },
        environment: {
          concurrent: true,
          keepAlive: true,
          compression: true
        }
      }
    });
    // Database Stress Test
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[214]++;
    this.registerScenario({
      id: 'database-stress',
      name: 'Database Stress Test',
      description: 'Database-intensive operations testing',
      config: {
        baseUrl:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[38][0]++, process.env.BASE_URL) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[38][1]++, 'http://localhost:3001'),
        endpoints: [{
          path: '/api/analytics/calculate',
          method: 'POST',
          weight: 40,
          body: {
            period: 'day',
            limit: 100
          },
          validation: {
            statusCode: [200],
            responseTime: 5000
          }
        }, {
          path: '/api/reports/generate',
          method: 'POST',
          weight: 30,
          body: {
            type: 'performance',
            format: 'json'
          },
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/optimization/analyze',
          method: 'POST',
          weight: 30,
          body: {
            prompt: 'Test prompt for analysis'
          },
          validation: {
            statusCode: [200]
          }
        }],
        users: {
          concurrent: 5,
          rampUp: {
            duration: 60,
            strategy: 'exponential'
          },
          rampDown: {
            duration: 30,
            strategy: 'linear'
          },
          thinkTime: {
            min: 2000,
            max: 5000,
            distribution: 'normal'
          }
        },
        duration: {
          total: 600,
          warmup: 60,
          cooldown: 60
        },
        thresholds: {
          responseTime: {
            p95: 3000,
            p99: 8000,
            max: 15000
          },
          errorRate: {
            max: 2
          },
          throughput: {
            min: 2
          }
        },
        environment: {
          concurrent: false,
          keepAlive: true
        }
      }
    });
    // High Concurrency Test
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[215]++;
    this.registerScenario({
      id: 'high-concurrency',
      name: 'High Concurrency Test',
      description: 'Testing system behavior under high concurrent load',
      config: {
        baseUrl:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[39][0]++, process.env.BASE_URL) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[39][1]++, 'http://localhost:3001'),
        endpoints: [{
          path: '/api/health',
          method: 'GET',
          weight: 50,
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/performance/health',
          method: 'GET',
          weight: 30,
          validation: {
            statusCode: [200]
          }
        }, {
          path: '/api/analytics/realtime',
          method: 'GET',
          weight: 20,
          validation: {
            statusCode: [200]
          }
        }],
        users: {
          concurrent: 50,
          rampUp: {
            duration: 120,
            strategy: 'step'
          },
          rampDown: {
            duration: 60,
            strategy: 'immediate'
          },
          thinkTime: {
            min: 500,
            max: 1500,
            distribution: 'exponential'
          }
        },
        duration: {
          total: 300,
          warmup: 60
        },
        thresholds: {
          responseTime: {
            p95: 2000,
            p99: 5000,
            max: 10000
          },
          errorRate: {
            max: 10
          },
          throughput: {
            min: 20
          }
        },
        environment: {
          concurrent: true,
          keepAlive: true,
          compression: true
        }
      }
    });
  }
  /**
   * Setup regression detection thresholds
   */
  setupRegressionThresholds() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[42]++;
    cov_1o1w5v0fu2().s[216]++;
    this.regressionThresholds.set('responseTime.p95', 1.2); // 20% increase
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[217]++;
    this.regressionThresholds.set('responseTime.avg', 1.15); // 15% increase
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[218]++;
    this.regressionThresholds.set('throughput.avg', 0.85); // 15% decrease
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[219]++;
    this.regressionThresholds.set('errorRate', 1.5); // 50% increase
  }
  /**
   * Helper methods
   */
  selectEndpoint(endpoints) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[43]++;
    const totalWeight =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[220]++, endpoints.reduce((sum, e) => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[44]++;
      cov_1o1w5v0fu2().s[221]++;
      return sum + e.weight;
    }, 0));
    const random =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[222]++, Math.random() * totalWeight);
    let currentWeight =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[223]++, 0);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[224]++;
    for (const endpoint of endpoints) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[225]++;
      currentWeight += endpoint.weight;
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[226]++;
      if (random <= currentWeight) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[40][0]++;
        cov_1o1w5v0fu2().s[227]++;
        return endpoint;
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[40][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[228]++;
    return endpoints[endpoints.length - 1];
  }
  calculateThinkTime(config) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[45]++;
    const {
      min,
      max,
      distribution
    } =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[229]++, config);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[230]++;
    switch (distribution) {
      case 'uniform':
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[41][0]++;
        cov_1o1w5v0fu2().s[231]++;
        return min + Math.random() * (max - min);
      case 'normal':
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[41][1]++;
        const u1 =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[232]++, Math.random());
        const u2 =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[233]++, Math.random());
        const z0 =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[234]++, Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2));
        const mean =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[235]++, (min + max) / 2);
        const stddev =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[236]++, (max - min) / 6);
        /* istanbul ignore next */
        cov_1o1w5v0fu2().s[237]++;
        return Math.max(min, Math.min(max, mean + z0 * stddev));
      case 'exponential':
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[41][2]++;
        const lambda =
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().s[238]++, 1 / ((min + max) / 2));
        /* istanbul ignore next */
        cov_1o1w5v0fu2().s[239]++;
        return min + -Math.log(Math.random()) / lambda;
      default:
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[41][3]++;
        cov_1o1w5v0fu2().s[240]++;
        return min + Math.random() * (max - min);
    }
  }
  calculatePercentile(values, percentile) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[46]++;
    cov_1o1w5v0fu2().s[241]++;
    if (values.length === 0) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[42][0]++;
      cov_1o1w5v0fu2().s[242]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[42][1]++;
    }
    const sorted =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[243]++, values.slice().sort((a, b) => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[47]++;
      cov_1o1w5v0fu2().s[244]++;
      return a - b;
    }));
    const index =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[245]++, Math.ceil(percentile / 100 * sorted.length) - 1);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[246]++;
    return sorted[Math.max(0, index)];
  }
  isPromiseSettled(promise) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[48]++;
    cov_1o1w5v0fu2().s[247]++;
    // This is a simplified check - in real implementation you'd track promise states
    return false;
  }
  analyzeErrors(results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[49]++;
    const errorMap =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[248]++, new Map());
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[249]++;
    results.filter(r => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[50]++;
      cov_1o1w5v0fu2().s[250]++;
      return !r.success;
    }).forEach(result => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[51]++;
      const key =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[251]++, `${result.statusCode}_${
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[43][0]++, result.errorMessage) ||
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[43][1]++, 'Unknown')}`);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[252]++;
      if (!errorMap.has(key)) {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[44][0]++;
        cov_1o1w5v0fu2().s[253]++;
        errorMap.set(key, []);
      } else
      /* istanbul ignore next */
      {
        cov_1o1w5v0fu2().b[44][1]++;
      }
      cov_1o1w5v0fu2().s[254]++;
      errorMap.get(key).push(result);
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[255]++;
    return Array.from(errorMap.entries()).map(([key, errors]) => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[52]++;
      const [statusCode, message] =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[256]++, key.split('_', 2));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[257]++;
      return {
        type: statusCode === '0' ?
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[45][0]++, 'Network Error') :
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[45][1]++, `HTTP ${statusCode}`),
        message:
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[46][0]++, message) ||
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[46][1]++, 'Unknown error'),
        count: errors.length,
        percentage: errors.length / results.length * 100,
        endpoints: [...new Set(errors.map(e => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[53]++;
          cov_1o1w5v0fu2().s[258]++;
          return e.endpoint;
        }))],
        firstOccurrence: Math.min(...errors.map(e => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[54]++;
          cov_1o1w5v0fu2().s[259]++;
          return e.timestamp;
        })),
        lastOccurrence: Math.max(...errors.map(e => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[55]++;
          cov_1o1w5v0fu2().s[260]++;
          return e.timestamp;
        }))
      };
    });
  }
  checkThresholds(scenario, results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[56]++;
    const thresholds =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[261]++, scenario.config.thresholds);
    const thresholdResults =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[262]++, []);
    // Response time thresholds
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[263]++;
    thresholdResults.push({
      name: 'P95 Response Time',
      value: results.metrics.responseTime.p95,
      threshold: thresholds.responseTime.p95,
      passed: results.metrics.responseTime.p95 <= thresholds.responseTime.p95,
      severity: results.metrics.responseTime.p95 > thresholds.responseTime.p95 * 1.5 ?
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[47][0]++, 'error') :
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[47][1]++, 'warning')
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[264]++;
    thresholdResults.push({
      name: 'P99 Response Time',
      value: results.metrics.responseTime.p99,
      threshold: thresholds.responseTime.p99,
      passed: results.metrics.responseTime.p99 <= thresholds.responseTime.p99,
      severity: results.metrics.responseTime.p99 > thresholds.responseTime.p99 * 1.5 ?
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[48][0]++, 'error') :
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[48][1]++, 'warning')
    });
    // Error rate threshold
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[265]++;
    thresholdResults.push({
      name: 'Error Rate',
      value: results.metrics.errorRate,
      threshold: thresholds.errorRate.max,
      passed: results.metrics.errorRate <= thresholds.errorRate.max,
      severity: results.metrics.errorRate > thresholds.errorRate.max * 2 ?
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[49][0]++, 'error') :
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[49][1]++, 'warning')
    });
    // Throughput threshold
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[266]++;
    thresholdResults.push({
      name: 'Throughput',
      value: results.metrics.throughput.avg,
      threshold: thresholds.throughput.min,
      passed: results.metrics.throughput.avg >= thresholds.throughput.min,
      severity: results.metrics.throughput.avg < thresholds.throughput.min * 0.5 ?
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[50][0]++, 'error') :
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().b[50][1]++, 'warning')
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[267]++;
    return thresholdResults;
  }
  generateRecommendations(results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[57]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[268]++, []);
    const metrics =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[269]++, results.metrics);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[270]++;
    if (metrics.errorRate > 5) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[51][0]++;
      cov_1o1w5v0fu2().s[271]++;
      recommendations.push('High error rate detected. Review error logs and implement better error handling.');
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[51][1]++;
    }
    cov_1o1w5v0fu2().s[272]++;
    if (metrics.responseTime.p95 > 2000) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[52][0]++;
      cov_1o1w5v0fu2().s[273]++;
      recommendations.push('Slow response times detected. Consider implementing caching or optimizing database queries.');
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[52][1]++;
    }
    cov_1o1w5v0fu2().s[274]++;
    if (metrics.throughput.avg < 10) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[53][0]++;
      cov_1o1w5v0fu2().s[275]++;
      recommendations.push('Low throughput detected. Consider scaling horizontally or optimizing application performance.');
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[53][1]++;
    }
    cov_1o1w5v0fu2().s[276]++;
    if (results.errors.some(e => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[58]++;
      cov_1o1w5v0fu2().s[277]++;
      return e.type.includes('Network');
    })) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[54][0]++;
      cov_1o1w5v0fu2().s[278]++;
      recommendations.push('Network errors detected. Check network connectivity and implement retry mechanisms.');
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[54][1]++;
    }
    const failedThresholds =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[279]++, results.thresholdResults.filter(t => {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().f[59]++;
      cov_1o1w5v0fu2().s[280]++;
      return !t.passed;
    }));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[281]++;
    if (failedThresholds.length > 0) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[55][0]++;
      cov_1o1w5v0fu2().s[282]++;
      recommendations.push(`Performance thresholds failed: ${failedThresholds.map(t => {
        /* istanbul ignore next */
        cov_1o1w5v0fu2().f[60]++;
        cov_1o1w5v0fu2().s[283]++;
        return t.name;
      }).join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[55][1]++;
    }
    cov_1o1w5v0fu2().s[284]++;
    if (recommendations.length === 0) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[56][0]++;
      cov_1o1w5v0fu2().s[285]++;
      recommendations.push('All performance metrics are within acceptable ranges.');
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[56][1]++;
    }
    cov_1o1w5v0fu2().s[286]++;
    return recommendations;
  }
  async runDryRun(scenario) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[61]++;
    cov_1o1w5v0fu2().s[287]++;
    // Simulate a quick test run for validation
    console.log(`Running dry run for scenario: ${scenario.name}`);
    // Return mock results
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[288]++;
    return {
      scenario,
      summary: {
        startTime: new Date(),
        endTime: new Date(),
        duration: 10,
        totalRequests: 10,
        successfulRequests: 10,
        failedRequests: 0,
        requestsPerSecond: 1,
        bytesReceived: 1000,
        bytesSent: 500
      },
      metrics: {
        responseTime: {
          min: 50,
          max: 200,
          avg: 100,
          p50: 95,
          p95: 180,
          p99: 195
        },
        throughput: {
          avg: 1,
          peak: 1,
          min: 1
        },
        errorRate: 0,
        concurrency: {
          avg: 1,
          peak: 1
        }
      },
      timeline: [],
      errors: [],
      thresholdResults: [],
      recommendations: ['Dry run completed successfully']
    };
  }
  async saveBaseline(scenarioId, results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[62]++;
    cov_1o1w5v0fu2().s[289]++;
    this.baselines.set(scenarioId, results);
    // Also save to database
    const stmt =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[290]++, connection_1.db.prepare(`
      INSERT OR REPLACE INTO load_test_baselines 
      (scenario_id, results, created_at)
      VALUES (?, ?, ?)
    `));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[291]++;
    stmt.run(scenarioId, JSON.stringify(results), new Date().toISOString());
  }
  async compareWithBaseline(scenarioId, results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[63]++;
    const baseline =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[292]++, this.baselines.get(scenarioId));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[293]++;
    if (!baseline) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[57][0]++;
      cov_1o1w5v0fu2().s[294]++;
      console.log(`No baseline found for scenario: ${scenarioId}`);
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[295]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[57][1]++;
    }
    const comparison =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[296]++, {
      responseTime: {
        p95: results.metrics.responseTime.p95 / baseline.metrics.responseTime.p95 - 1,
        avg: results.metrics.responseTime.avg / baseline.metrics.responseTime.avg - 1
      },
      throughput: {
        avg: results.metrics.throughput.avg / baseline.metrics.throughput.avg - 1
      },
      errorRate: results.metrics.errorRate - baseline.metrics.errorRate
    });
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[297]++;
    console.log(`Baseline comparison for ${scenarioId}:`, comparison);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[298]++;
    this.emit('baselineComparison', {
      scenarioId,
      comparison,
      results,
      baseline
    });
  }
  async detectRegression(scenarioId, results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[64]++;
    const baseline =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[299]++, this.baselines.get(scenarioId));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[300]++;
    if (!baseline) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[58][0]++;
      cov_1o1w5v0fu2().s[301]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[58][1]++;
    }
    const regressions =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[302]++, []);
    // Check response time regression
    const p95Threshold =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[303]++,
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[59][0]++, this.regressionThresholds.get('responseTime.p95')) ||
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[59][1]++, 1.2));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[304]++;
    if (results.metrics.responseTime.p95 > baseline.metrics.responseTime.p95 * p95Threshold) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[60][0]++;
      cov_1o1w5v0fu2().s[305]++;
      regressions.push({
        metric: 'responseTime.p95',
        baseline: baseline.metrics.responseTime.p95,
        current: results.metrics.responseTime.p95,
        threshold: p95Threshold,
        degradation: results.metrics.responseTime.p95 / baseline.metrics.responseTime.p95 - 1
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[60][1]++;
    }
    // Check throughput regression
    const throughputThreshold =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[306]++,
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[61][0]++, this.regressionThresholds.get('throughput.avg')) ||
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[61][1]++, 0.85));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[307]++;
    if (results.metrics.throughput.avg < baseline.metrics.throughput.avg * throughputThreshold) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[62][0]++;
      cov_1o1w5v0fu2().s[308]++;
      regressions.push({
        metric: 'throughput.avg',
        baseline: baseline.metrics.throughput.avg,
        current: results.metrics.throughput.avg,
        threshold: throughputThreshold,
        degradation: baseline.metrics.throughput.avg / results.metrics.throughput.avg - 1
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[62][1]++;
    }
    // Check error rate regression
    const errorRateThreshold =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[309]++,
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[63][0]++, this.regressionThresholds.get('errorRate')) ||
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().b[63][1]++, 1.5));
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[310]++;
    if (results.metrics.errorRate > baseline.metrics.errorRate * errorRateThreshold) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[64][0]++;
      cov_1o1w5v0fu2().s[311]++;
      regressions.push({
        metric: 'errorRate',
        baseline: baseline.metrics.errorRate,
        current: results.metrics.errorRate,
        threshold: errorRateThreshold,
        degradation: results.metrics.errorRate / baseline.metrics.errorRate - 1
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[64][1]++;
    }
    cov_1o1w5v0fu2().s[312]++;
    if (regressions.length > 0) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().b[65][0]++;
      cov_1o1w5v0fu2().s[313]++;
      return {
        scenarioId,
        timestamp: new Date(),
        regressions,
        severity: regressions.some(r => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[65]++;
          cov_1o1w5v0fu2().s[314]++;
          return r.degradation > 0.5;
        }) ?
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[66][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[66][1]++, regressions.some(r => {
          /* istanbul ignore next */
          cov_1o1w5v0fu2().f[66]++;
          cov_1o1w5v0fu2().s[315]++;
          return r.degradation > 0.2;
        }) ?
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[67][0]++, 'high') :
        /* istanbul ignore next */
        (cov_1o1w5v0fu2().b[67][1]++, 'medium'))
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o1w5v0fu2().b[65][1]++;
    }
    cov_1o1w5v0fu2().s[316]++;
    return null;
  }
  async saveResults(results) {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[67]++;
    cov_1o1w5v0fu2().s[317]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_1o1w5v0fu2().s[318]++, connection_1.db.prepare(`
        INSERT INTO load_test_results 
        (scenario_id, scenario_name, start_time, end_time, duration, total_requests, 
         successful_requests, failed_requests, requests_per_second, avg_response_time, 
         p95_response_time, p99_response_time, error_rate, results_json, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `));
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[319]++;
      stmt.run(results.scenario.id, results.scenario.name, results.summary.startTime.toISOString(), results.summary.endTime.toISOString(), results.summary.duration, results.summary.totalRequests, results.summary.successfulRequests, results.summary.failedRequests, results.summary.requestsPerSecond, results.metrics.responseTime.avg, results.metrics.responseTime.p95, results.metrics.responseTime.p99, results.metrics.errorRate, JSON.stringify(results), new Date().toISOString());
    } catch (error) {
      /* istanbul ignore next */
      cov_1o1w5v0fu2().s[320]++;
      console.error('Failed to save load test results:', error);
    }
  }
  /**
   * Clean up resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[68]++;
    cov_1o1w5v0fu2().s[321]++;
    await this.workerPool.terminate();
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[322]++;
    this.removeAllListeners();
  }
}
/* istanbul ignore next */
cov_1o1w5v0fu2().s[323]++;
exports.LoadTestingFramework = LoadTestingFramework;
// Worker thread handler
/* istanbul ignore next */
cov_1o1w5v0fu2().s[324]++;
if (
/* istanbul ignore next */
(cov_1o1w5v0fu2().b[69][0]++, !worker_threads_1.isMainThread) &&
/* istanbul ignore next */
(cov_1o1w5v0fu2().b[69][1]++, worker_threads_1.workerData?.isWorker)) {
  /* istanbul ignore next */
  cov_1o1w5v0fu2().b[68][0]++;
  cov_1o1w5v0fu2().s[325]++;
  // Worker thread logic for load testing
  worker_threads_1.parentPort?.on('message', async message => {
    /* istanbul ignore next */
    cov_1o1w5v0fu2().f[69]++;
    const {
      type,
      data
    } =
    /* istanbul ignore next */
    (cov_1o1w5v0fu2().s[326]++, message);
    /* istanbul ignore next */
    cov_1o1w5v0fu2().s[327]++;
    switch (type) {
      case 'makeRequest':
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[70][0]++;
        cov_1o1w5v0fu2().s[328]++;
        // Handle request in worker thread
        break;
      case 'simulateUser':
        /* istanbul ignore next */
        cov_1o1w5v0fu2().b[70][1]++;
        cov_1o1w5v0fu2().s[329]++;
        // Handle user simulation in worker thread
        break;
    }
  });
} else
/* istanbul ignore next */
{
  cov_1o1w5v0fu2().b[68][1]++;
}
// Export singleton instance
cov_1o1w5v0fu2().s[330]++;
exports.loadTestingFramework = new LoadTestingFramework();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,