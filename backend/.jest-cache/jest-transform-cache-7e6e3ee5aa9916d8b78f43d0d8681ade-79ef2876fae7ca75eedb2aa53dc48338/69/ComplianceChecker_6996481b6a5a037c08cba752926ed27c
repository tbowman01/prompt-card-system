a56559b4a0a61ee89a2c72c2ee764387
"use strict";

/* istanbul ignore next */
function cov_1wmpgwv0vt() {
  var path = "/workspaces/prompt-card-system/backend/src/services/security/ComplianceChecker.ts";
  var hash = "969737c932d982c2730c6913aaba499d6e8c7b60";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/security/ComplianceChecker.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 9,
          column: 50
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 26
        }
      },
      "10": {
        start: {
          line: 15,
          column: 104
        },
        end: {
          line: 15,
          column: 111
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 20,
          column: 10
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "14": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "15": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "17": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 24
        }
      },
      "18": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 66
        }
      },
      "19": {
        start: {
          line: 36,
          column: 49
        },
        end: {
          line: 36,
          column: 65
        }
      },
      "20": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "21": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "22": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 37
        }
      },
      "23": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "24": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 45
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "26": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "27": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 93
        }
      },
      "28": {
        start: {
          line: 46,
          column: 60
        },
        end: {
          line: 46,
          column: 91
        }
      },
      "29": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "30": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 95
        }
      },
      "31": {
        start: {
          line: 49,
          column: 60
        },
        end: {
          line: 49,
          column: 93
        }
      },
      "32": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "33": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 93
        }
      },
      "34": {
        start: {
          line: 52,
          column: 60
        },
        end: {
          line: 52,
          column: 91
        }
      },
      "35": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "36": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 95
        }
      },
      "37": {
        start: {
          line: 55,
          column: 60
        },
        end: {
          line: 55,
          column: 93
        }
      },
      "38": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "39": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "40": {
        start: {
          line: 62,
          column: 44
        },
        end: {
          line: 62,
          column: 60
        }
      },
      "41": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "42": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 58
        }
      },
      "43": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "44": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 54
        }
      },
      "45": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 62
        }
      },
      "46": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 26
        }
      },
      "47": {
        start: {
          line: 77,
          column: 34
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "48": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 92,
          column: 40
        }
      },
      "49": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 33
        }
      },
      "50": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 99,
          column: 23
        }
      },
      "51": {
        start: {
          line: 98,
          column: 36
        },
        end: {
          line: 98,
          column: 61
        }
      },
      "52": {
        start: {
          line: 100,
          column: 24
        },
        end: {
          line: 100,
          column: 99
        }
      },
      "53": {
        start: {
          line: 100,
          column: 74
        },
        end: {
          line: 100,
          column: 97
        }
      },
      "54": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 41
        }
      },
      "55": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 102,
          column: 61
        }
      },
      "56": {
        start: {
          line: 103,
          column: 27
        },
        end: {
          line: 103,
          column: 39
        }
      },
      "57": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 58
        }
      },
      "58": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 42
        }
      },
      "59": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 108,
          column: 59
        }
      },
      "60": {
        start: {
          line: 108,
          column: 43
        },
        end: {
          line: 108,
          column: 51
        }
      },
      "61": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 43
        }
      },
      "62": {
        start: {
          line: 110,
          column: 33
        },
        end: {
          line: 111,
          column: 86
        }
      },
      "63": {
        start: {
          line: 110,
          column: 53
        },
        end: {
          line: 111,
          column: 78
        }
      },
      "64": {
        start: {
          line: 111,
          column: 34
        },
        end: {
          line: 111,
          column: 52
        }
      },
      "65": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 113,
          column: 86
        }
      },
      "66": {
        start: {
          line: 113,
          column: 50
        },
        end: {
          line: 113,
          column: 63
        }
      },
      "67": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "68": {
        start: {
          line: 117,
          column: 35
        },
        end: {
          line: 117,
          column: 44
        }
      },
      "69": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "70": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 87
        }
      },
      "71": {
        start: {
          line: 119,
          column: 58
        },
        end: {
          line: 119,
          column: 85
        }
      },
      "72": {
        start: {
          line: 121,
          column: 23
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "73": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 34
        }
      },
      "74": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 147,
          column: 37
        }
      },
      "75": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "76": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "77": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 22
        }
      },
      "78": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 29
        }
      },
      "79": {
        start: {
          line: 168,
          column: 28
        },
        end: {
          line: 168,
          column: 73
        }
      },
      "80": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 174,
          column: 78
        }
      },
      "81": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 64
        }
      },
      "82": {
        start: {
          line: 174,
          column: 28
        },
        end: {
          line: 174,
          column: 73
        }
      },
      "83": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      },
      "84": {
        start: {
          line: 187,
          column: 39
        },
        end: {
          line: 187,
          column: 65
        }
      },
      "85": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "86": {
        start: {
          line: 197,
          column: 39
        },
        end: {
          line: 197,
          column: 67
        }
      },
      "87": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "88": {
        start: {
          line: 207,
          column: 39
        },
        end: {
          line: 207,
          column: 76
        }
      },
      "89": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 218,
          column: 11
        }
      },
      "90": {
        start: {
          line: 217,
          column: 39
        },
        end: {
          line: 217,
          column: 66
        }
      },
      "91": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "92": {
        start: {
          line: 227,
          column: 39
        },
        end: {
          line: 227,
          column: 64
        }
      },
      "93": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "94": {
        start: {
          line: 237,
          column: 39
        },
        end: {
          line: 237,
          column: 63
        }
      },
      "95": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 248,
          column: 11
        }
      },
      "96": {
        start: {
          line: 247,
          column: 39
        },
        end: {
          line: 247,
          column: 65
        }
      },
      "97": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      },
      "98": {
        start: {
          line: 257,
          column: 39
        },
        end: {
          line: 257,
          column: 75
        }
      },
      "99": {
        start: {
          line: 262,
          column: 25
        },
        end: {
          line: 262,
          column: 27
        }
      },
      "100": {
        start: {
          line: 263,
          column: 32
        },
        end: {
          line: 263,
          column: 34
        }
      },
      "101": {
        start: {
          line: 264,
          column: 25
        },
        end: {
          line: 264,
          column: 27
        }
      },
      "102": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 23
        }
      },
      "103": {
        start: {
          line: 267,
          column: 29
        },
        end: {
          line: 268,
          column: 66
        }
      },
      "104": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "105": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 83
        }
      },
      "106": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 96
        }
      },
      "107": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 24
        }
      },
      "108": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 111
        }
      },
      "109": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 278,
          column: 80
        }
      },
      "110": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "111": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 75
        }
      },
      "112": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 76
        }
      },
      "113": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 24
        }
      },
      "114": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 290,
          column: 10
        }
      },
      "115": {
        start: {
          line: 293,
          column: 25
        },
        end: {
          line: 293,
          column: 27
        }
      },
      "116": {
        start: {
          line: 294,
          column: 32
        },
        end: {
          line: 294,
          column: 34
        }
      },
      "117": {
        start: {
          line: 295,
          column: 25
        },
        end: {
          line: 295,
          column: 27
        }
      },
      "118": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 23
        }
      },
      "119": {
        start: {
          line: 298,
          column: 30
        },
        end: {
          line: 298,
          column: 105
        }
      },
      "120": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "121": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 74
        }
      },
      "122": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 72
        }
      },
      "123": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 22
        }
      },
      "124": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 95
        }
      },
      "125": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 313,
          column: 10
        }
      },
      "126": {
        start: {
          line: 316,
          column: 25
        },
        end: {
          line: 316,
          column: 27
        }
      },
      "127": {
        start: {
          line: 317,
          column: 32
        },
        end: {
          line: 317,
          column: 34
        }
      },
      "128": {
        start: {
          line: 318,
          column: 25
        },
        end: {
          line: 318,
          column: 27
        }
      },
      "129": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 319,
          column: 23
        }
      },
      "130": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "131": {
        start: {
          line: 322,
          column: 36
        },
        end: {
          line: 322,
          column: 90
        }
      },
      "132": {
        start: {
          line: 323,
          column: 34
        },
        end: {
          line: 323,
          column: 73
        }
      },
      "133": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "134": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 97
        }
      },
      "135": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 102
        }
      },
      "136": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 66
        }
      },
      "137": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 333,
          column: 15
        }
      },
      "138": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 66
        }
      },
      "139": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 86
        }
      },
      "140": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 23
        }
      },
      "141": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 346,
          column: 10
        }
      },
      "142": {
        start: {
          line: 349,
          column: 25
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "143": {
        start: {
          line: 350,
          column: 32
        },
        end: {
          line: 350,
          column: 34
        }
      },
      "144": {
        start: {
          line: 351,
          column: 25
        },
        end: {
          line: 351,
          column: 27
        }
      },
      "145": {
        start: {
          line: 352,
          column: 20
        },
        end: {
          line: 352,
          column: 23
        }
      },
      "146": {
        start: {
          line: 354,
          column: 32
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "147": {
        start: {
          line: 363,
          column: 33
        },
        end: {
          line: 363,
          column: 79
        }
      },
      "148": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "149": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 70
        }
      },
      "150": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 95
        }
      },
      "151": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 24
        }
      },
      "152": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 81
        }
      },
      "153": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 378,
          column: 10
        }
      },
      "154": {
        start: {
          line: 381,
          column: 25
        },
        end: {
          line: 381,
          column: 27
        }
      },
      "155": {
        start: {
          line: 382,
          column: 32
        },
        end: {
          line: 382,
          column: 34
        }
      },
      "156": {
        start: {
          line: 383,
          column: 25
        },
        end: {
          line: 383,
          column: 27
        }
      },
      "157": {
        start: {
          line: 384,
          column: 20
        },
        end: {
          line: 384,
          column: 23
        }
      },
      "158": {
        start: {
          line: 386,
          column: 28
        },
        end: {
          line: 386,
          column: 62
        }
      },
      "159": {
        start: {
          line: 387,
          column: 26
        },
        end: {
          line: 387,
          column: 48
        }
      },
      "160": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "161": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 56
        }
      },
      "162": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 86
        }
      },
      "163": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 24
        }
      },
      "164": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "165": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 67
        }
      },
      "166": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 85
        }
      },
      "167": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 24
        }
      },
      "168": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "169": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 79
        }
      },
      "170": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 407,
          column: 10
        }
      },
      "171": {
        start: {
          line: 410,
          column: 25
        },
        end: {
          line: 410,
          column: 27
        }
      },
      "172": {
        start: {
          line: 411,
          column: 32
        },
        end: {
          line: 411,
          column: 34
        }
      },
      "173": {
        start: {
          line: 412,
          column: 25
        },
        end: {
          line: 412,
          column: 27
        }
      },
      "174": {
        start: {
          line: 413,
          column: 20
        },
        end: {
          line: 413,
          column: 23
        }
      },
      "175": {
        start: {
          line: 415,
          column: 29
        },
        end: {
          line: 415,
          column: 72
        }
      },
      "176": {
        start: {
          line: 416,
          column: 25
        },
        end: {
          line: 416,
          column: 46
        }
      },
      "177": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "178": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 55
        }
      },
      "179": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 71
        }
      },
      "180": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 24
        }
      },
      "181": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "182": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 84
        }
      },
      "183": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 90
        }
      },
      "184": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 24
        }
      },
      "185": {
        start: {
          line: 428,
          column: 25
        },
        end: {
          line: 428,
          column: 73
        }
      },
      "186": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "187": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 75
        }
      },
      "188": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 82
        }
      },
      "189": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 24
        }
      },
      "190": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 66
        }
      },
      "191": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 443,
          column: 10
        }
      },
      "192": {
        start: {
          line: 446,
          column: 25
        },
        end: {
          line: 446,
          column: 27
        }
      },
      "193": {
        start: {
          line: 447,
          column: 32
        },
        end: {
          line: 447,
          column: 34
        }
      },
      "194": {
        start: {
          line: 448,
          column: 25
        },
        end: {
          line: 448,
          column: 27
        }
      },
      "195": {
        start: {
          line: 449,
          column: 20
        },
        end: {
          line: 449,
          column: 23
        }
      },
      "196": {
        start: {
          line: 451,
          column: 28
        },
        end: {
          line: 451,
          column: 69
        }
      },
      "197": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 456,
          column: 9
        }
      },
      "198": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 61
        }
      },
      "199": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 71
        }
      },
      "200": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 24
        }
      },
      "201": {
        start: {
          line: 458,
          column: 27
        },
        end: {
          line: 458,
          column: 101
        }
      },
      "202": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "203": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 60
        }
      },
      "204": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 79
        }
      },
      "205": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 24
        }
      },
      "206": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 470,
          column: 10
        }
      },
      "207": {
        start: {
          line: 473,
          column: 25
        },
        end: {
          line: 473,
          column: 27
        }
      },
      "208": {
        start: {
          line: 474,
          column: 32
        },
        end: {
          line: 474,
          column: 34
        }
      },
      "209": {
        start: {
          line: 475,
          column: 25
        },
        end: {
          line: 475,
          column: 27
        }
      },
      "210": {
        start: {
          line: 476,
          column: 20
        },
        end: {
          line: 476,
          column: 23
        }
      },
      "211": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 482,
          column: 9
        }
      },
      "212": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 62
        }
      },
      "213": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 81
        }
      },
      "214": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 24
        }
      },
      "215": {
        start: {
          line: 484,
          column: 28
        },
        end: {
          line: 486,
          column: 46
        }
      },
      "216": {
        start: {
          line: 484,
          column: 67
        },
        end: {
          line: 486,
          column: 45
        }
      },
      "217": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "218": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 75
        }
      },
      "219": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 496,
          column: 10
        }
      },
      "220": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 509,
          column: 61
        }
      },
      "221": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "222": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 54
        }
      },
      "223": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 507,
          column: 44
        }
      },
      "224": {
        start: {
          line: 513,
          column: 29
        },
        end: {
          line: 513,
          column: 51
        }
      },
      "225": {
        start: {
          line: 514,
          column: 30
        },
        end: {
          line: 514,
          column: 118
        }
      },
      "226": {
        start: {
          line: 514,
          column: 55
        },
        end: {
          line: 514,
          column: 117
        }
      },
      "227": {
        start: {
          line: 515,
          column: 23
        },
        end: {
          line: 518,
          column: 11
        }
      },
      "228": {
        start: {
          line: 515,
          column: 47
        },
        end: {
          line: 518,
          column: 9
        }
      },
      "229": {
        start: {
          line: 519,
          column: 32
        },
        end: {
          line: 526,
          column: 10
        }
      },
      "230": {
        start: {
          line: 519,
          column: 66
        },
        end: {
          line: 519,
          column: 77
        }
      },
      "231": {
        start: {
          line: 521,
          column: 42
        },
        end: {
          line: 521,
          column: 73
        }
      },
      "232": {
        start: {
          line: 522,
          column: 12
        },
        end: {
          line: 525,
          column: 14
        }
      },
      "233": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 533,
          column: 10
        }
      },
      "234": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 539,
          column: 9
        }
      },
      "235": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 538,
          column: 45
        }
      },
      "236": {
        start: {
          line: 542,
          column: 0
        },
        end: {
          line: 542,
          column: 46
        }
      },
      "237": {
        start: {
          line: 543,
          column: 0
        },
        end: {
          line: 547,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 36,
            column: 45
          }
        },
        loc: {
          start: {
            line: 36,
            column: 49
          },
          end: {
            line: 36,
            column: 65
          }
        },
        line: 36
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 23
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 42
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 46,
            column: 55
          },
          end: {
            line: 46,
            column: 56
          }
        },
        loc: {
          start: {
            line: 46,
            column: 60
          },
          end: {
            line: 46,
            column: 91
          }
        },
        line: 46
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 49,
            column: 55
          },
          end: {
            line: 49,
            column: 56
          }
        },
        loc: {
          start: {
            line: 49,
            column: 60
          },
          end: {
            line: 49,
            column: 93
          }
        },
        line: 49
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 52,
            column: 55
          },
          end: {
            line: 52,
            column: 56
          }
        },
        loc: {
          start: {
            line: 52,
            column: 60
          },
          end: {
            line: 52,
            column: 91
          }
        },
        line: 52
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 55,
            column: 55
          },
          end: {
            line: 55,
            column: 56
          }
        },
        loc: {
          start: {
            line: 55,
            column: 60
          },
          end: {
            line: 55,
            column: 93
          }
        },
        line: 55
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 28
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 61
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 62,
            column: 39
          },
          end: {
            line: 62,
            column: 40
          }
        },
        loc: {
          start: {
            line: 62,
            column: 44
          },
          end: {
            line: 62,
            column: 60
          }
        },
        line: 62
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 96
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 98,
            column: 31
          },
          end: {
            line: 98,
            column: 32
          }
        },
        loc: {
          start: {
            line: 98,
            column: 36
          },
          end: {
            line: 98,
            column: 61
          }
        },
        line: 98
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 100,
            column: 65
          },
          end: {
            line: 100,
            column: 66
          }
        },
        loc: {
          start: {
            line: 100,
            column: 74
          },
          end: {
            line: 100,
            column: 97
          }
        },
        line: 100
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 102,
            column: 21
          }
        },
        loc: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 102,
            column: 61
          }
        },
        line: 102
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 103,
            column: 17
          },
          end: {
            line: 103,
            column: 18
          }
        },
        loc: {
          start: {
            line: 103,
            column: 27
          },
          end: {
            line: 103,
            column: 39
          }
        },
        line: 103
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 105
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 108,
            column: 38
          },
          end: {
            line: 108,
            column: 39
          }
        },
        loc: {
          start: {
            line: 108,
            column: 43
          },
          end: {
            line: 108,
            column: 51
          }
        },
        line: 108
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 110,
            column: 49
          }
        },
        loc: {
          start: {
            line: 110,
            column: 53
          },
          end: {
            line: 111,
            column: 78
          }
        },
        line: 110
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 111,
            column: 30
          }
        },
        loc: {
          start: {
            line: 111,
            column: 34
          },
          end: {
            line: 111,
            column: 52
          }
        },
        line: 111
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 113,
            column: 38
          },
          end: {
            line: 113,
            column: 39
          }
        },
        loc: {
          start: {
            line: 113,
            column: 50
          },
          end: {
            line: 113,
            column: 63
          }
        },
        line: 113
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 118,
            column: 24
          },
          end: {
            line: 118,
            column: 25
          }
        },
        loc: {
          start: {
            line: 118,
            column: 34
          },
          end: {
            line: 120,
            column: 9
          }
        },
        line: 118
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 119,
            column: 51
          },
          end: {
            line: 119,
            column: 52
          }
        },
        loc: {
          start: {
            line: 119,
            column: 58
          },
          end: {
            line: 119,
            column: 85
          }
        },
        line: 119
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 27
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 166
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 168,
            column: 18
          },
          end: {
            line: 168,
            column: 19
          }
        },
        loc: {
          start: {
            line: 168,
            column: 28
          },
          end: {
            line: 168,
            column: 73
          }
        },
        line: 168
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 31
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 171
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 21
          }
        },
        loc: {
          start: {
            line: 173,
            column: 25
          },
          end: {
            line: 173,
            column: 64
          }
        },
        line: 173
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 174,
            column: 18
          },
          end: {
            line: 174,
            column: 19
          }
        },
        loc: {
          start: {
            line: 174,
            column: 28
          },
          end: {
            line: 174,
            column: 73
          }
        },
        line: 174
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 25
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 177
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 187,
            column: 28
          }
        },
        loc: {
          start: {
            line: 187,
            column: 39
          },
          end: {
            line: 187,
            column: 65
          }
        },
        line: 187
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 197,
            column: 27
          },
          end: {
            line: 197,
            column: 28
          }
        },
        loc: {
          start: {
            line: 197,
            column: 39
          },
          end: {
            line: 197,
            column: 67
          }
        },
        line: 197
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 207,
            column: 27
          },
          end: {
            line: 207,
            column: 28
          }
        },
        loc: {
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 76
          }
        },
        line: 207
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 217,
            column: 27
          },
          end: {
            line: 217,
            column: 28
          }
        },
        loc: {
          start: {
            line: 217,
            column: 39
          },
          end: {
            line: 217,
            column: 66
          }
        },
        line: 217
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 227,
            column: 27
          },
          end: {
            line: 227,
            column: 28
          }
        },
        loc: {
          start: {
            line: 227,
            column: 39
          },
          end: {
            line: 227,
            column: 64
          }
        },
        line: 227
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 28
          }
        },
        loc: {
          start: {
            line: 237,
            column: 39
          },
          end: {
            line: 237,
            column: 63
          }
        },
        line: 237
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 247,
            column: 27
          },
          end: {
            line: 247,
            column: 28
          }
        },
        loc: {
          start: {
            line: 247,
            column: 39
          },
          end: {
            line: 247,
            column: 65
          }
        },
        line: 247
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 257,
            column: 27
          },
          end: {
            line: 257,
            column: 28
          }
        },
        loc: {
          start: {
            line: 257,
            column: 39
          },
          end: {
            line: 257,
            column: 75
          }
        },
        line: 257
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 32
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 261
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 34
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 292
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 43
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 315
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 33
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 348
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 31
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 380
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 30
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 409
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 445,
            column: 5
          }
        },
        loc: {
          start: {
            line: 445,
            column: 32
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 445
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 42
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 472
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 484,
            column: 60
          },
          end: {
            line: 484,
            column: 61
          }
        },
        loc: {
          start: {
            line: 484,
            column: 67
          },
          end: {
            line: 486,
            column: 45
          }
        },
        line: 484
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 5
          }
        },
        loc: {
          start: {
            line: 499,
            column: 30
          },
          end: {
            line: 510,
            column: 5
          }
        },
        line: 499
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 500,
            column: 40
          },
          end: {
            line: 500,
            column: 41
          }
        },
        loc: {
          start: {
            line: 500,
            column: 52
          },
          end: {
            line: 509,
            column: 9
          }
        },
        line: 500
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 27
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 512
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 514,
            column: 50
          },
          end: {
            line: 514,
            column: 51
          }
        },
        loc: {
          start: {
            line: 514,
            column: 55
          },
          end: {
            line: 514,
            column: 117
          }
        },
        line: 514
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 515,
            column: 41
          },
          end: {
            line: 515,
            column: 42
          }
        },
        loc: {
          start: {
            line: 515,
            column: 47
          },
          end: {
            line: 518,
            column: 9
          }
        },
        line: 515
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 519,
            column: 61
          },
          end: {
            line: 519,
            column: 62
          }
        },
        loc: {
          start: {
            line: 519,
            column: 66
          },
          end: {
            line: 519,
            column: 77
          }
        },
        line: 519
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 520,
            column: 17
          },
          end: {
            line: 520,
            column: 18
          }
        },
        loc: {
          start: {
            line: 520,
            column: 30
          },
          end: {
            line: 526,
            column: 9
          }
        },
        line: 520
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 5
          }
        },
        loc: {
          start: {
            line: 536,
            column: 14
          },
          end: {
            line: 540,
            column: 5
          }
        },
        line: 536
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 11,
            column: 16
          },
          end: {
            line: 11,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 26
          },
          end: {
            line: 11,
            column: 28
          }
        }],
        line: 11
      },
      "4": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 43
          },
          end: {
            line: 15,
            column: 47
          }
        }],
        line: 15
      },
      "5": {
        loc: {
          start: {
            line: 15,
            column: 49
          },
          end: {
            line: 15,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 70
          },
          end: {
            line: 15,
            column: 72
          }
        }],
        line: 15
      },
      "6": {
        loc: {
          start: {
            line: 15,
            column: 74
          },
          end: {
            line: 15,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 96
          },
          end: {
            line: 15,
            column: 99
          }
        }],
        line: 15
      },
      "7": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "8": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 38,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 38,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "11": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "12": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "13": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "14": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "15": {
        loc: {
          start: {
            line: 83,
            column: 58
          },
          end: {
            line: 83,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 83
          },
          end: {
            line: 83,
            column: 96
          }
        }, {
          start: {
            line: 83,
            column: 99
          },
          end: {
            line: 83,
            column: 114
          }
        }],
        line: 83
      },
      "16": {
        loc: {
          start: {
            line: 90,
            column: 23
          },
          end: {
            line: 90,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 48
          },
          end: {
            line: 90,
            column: 61
          }
        }, {
          start: {
            line: 90,
            column: 64
          },
          end: {
            line: 90,
            column: 79
          }
        }],
        line: 90
      },
      "17": {
        loc: {
          start: {
            line: 97,
            column: 28
          },
          end: {
            line: 99,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 62
          }
        }, {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 23
          }
        }],
        line: 97
      },
      "18": {
        loc: {
          start: {
            line: 110,
            column: 53
          },
          end: {
            line: 111,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 53
          },
          end: {
            line: 110,
            column: 62
          }
        }, {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 78
          }
        }],
        line: 110
      },
      "19": {
        loc: {
          start: {
            line: 112,
            column: 29
          },
          end: {
            line: 113,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 82
          }
        }, {
          start: {
            line: 113,
            column: 85
          },
          end: {
            line: 113,
            column: 86
          }
        }],
        line: 112
      },
      "20": {
        loc: {
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 115,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 46
          },
          end: {
            line: 114,
            column: 61
          }
        }, {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 115,
            column: 62
          }
        }],
        line: 114
      },
      "21": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 115,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 27
          },
          end: {
            line: 115,
            column: 38
          }
        }, {
          start: {
            line: 115,
            column: 41
          },
          end: {
            line: 115,
            column: 62
          }
        }],
        line: 115
      },
      "22": {
        loc: {
          start: {
            line: 126,
            column: 23
          },
          end: {
            line: 126,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 23
          },
          end: {
            line: 126,
            column: 32
          }
        }, {
          start: {
            line: 126,
            column: 36
          },
          end: {
            line: 126,
            column: 41
          }
        }],
        line: 126
      },
      "23": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "24": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 149,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 149,
            column: 45
          }
        }, {
          start: {
            line: 149,
            column: 49
          },
          end: {
            line: 149,
            column: 69
          }
        }],
        line: 149
      },
      "25": {
        loc: {
          start: {
            line: 166,
            column: 15
          },
          end: {
            line: 166,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 25
          }
        }],
        line: 166
      },
      "26": {
        loc: {
          start: {
            line: 173,
            column: 25
          },
          end: {
            line: 173,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 25
          },
          end: {
            line: 173,
            column: 35
          }
        }, {
          start: {
            line: 173,
            column: 39
          },
          end: {
            line: 173,
            column: 64
          }
        }],
        line: 173
      },
      "27": {
        loc: {
          start: {
            line: 267,
            column: 29
          },
          end: {
            line: 268,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 58
          }
        }, {
          start: {
            line: 268,
            column: 61
          },
          end: {
            line: 268,
            column: 66
          }
        }],
        line: 267
      },
      "28": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: 274,
            column: 13
          },
          end: {
            line: 276,
            column: 9
          }
        }],
        line: 269
      },
      "29": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "30": {
        loc: {
          start: {
            line: 298,
            column: 30
          },
          end: {
            line: 298,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 30
          },
          end: {
            line: 298,
            column: 64
          }
        }, {
          start: {
            line: 298,
            column: 68
          },
          end: {
            line: 298,
            column: 105
          }
        }],
        line: 298
      },
      "31": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        }, {
          start: {
            line: 304,
            column: 13
          },
          end: {
            line: 306,
            column: 9
          }
        }],
        line: 299
      },
      "32": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 26
          }
        }, {
          start: {
            line: 299,
            column: 30
          },
          end: {
            line: 299,
            column: 67
          }
        }],
        line: 299
      },
      "33": {
        loc: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "34": {
        loc: {
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: 369,
            column: 13
          },
          end: {
            line: 371,
            column: 9
          }
        }],
        line: 364
      },
      "35": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "36": {
        loc: {
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 397,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 397,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "37": {
        loc: {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 393,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 393,
            column: 22
          }
        }, {
          start: {
            line: 393,
            column: 26
          },
          end: {
            line: 393,
            column: 47
          }
        }],
        line: 393
      },
      "38": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "39": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "40": {
        loc: {
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "41": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 20
          }
        }, {
          start: {
            line: 422,
            column: 24
          },
          end: {
            line: 422,
            column: 75
          }
        }],
        line: 422
      },
      "42": {
        loc: {
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        }, {
          start: {
            line: 434,
            column: 13
          },
          end: {
            line: 436,
            column: 9
          }
        }],
        line: 429
      },
      "43": {
        loc: {
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 456,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "44": {
        loc: {
          start: {
            line: 458,
            column: 27
          },
          end: {
            line: 458,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 27
          },
          end: {
            line: 458,
            column: 60
          }
        }, {
          start: {
            line: 458,
            column: 64
          },
          end: {
            line: 458,
            column: 101
          }
        }],
        line: 458
      },
      "45": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "46": {
        loc: {
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 459,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 459,
            column: 23
          }
        }, {
          start: {
            line: 459,
            column: 27
          },
          end: {
            line: 459,
            column: 64
          }
        }],
        line: 459
      },
      "47": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 482,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 482,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "48": {
        loc: {
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 478,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 478,
            column: 49
          }
        }, {
          start: {
            line: 478,
            column: 53
          },
          end: {
            line: 478,
            column: 81
          }
        }],
        line: 478
      },
      "49": {
        loc: {
          start: {
            line: 484,
            column: 67
          },
          end: {
            line: 486,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 67
          },
          end: {
            line: 484,
            column: 103
          }
        }, {
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 485,
            column: 50
          }
        }, {
          start: {
            line: 486,
            column: 12
          },
          end: {
            line: 486,
            column: 45
          }
        }],
        line: 484
      },
      "50": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "51": {
        loc: {
          start: {
            line: 506,
            column: 27
          },
          end: {
            line: 506,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 506,
            column: 52
          },
          end: {
            line: 506,
            column: 65
          }
        }, {
          start: {
            line: 506,
            column: 68
          },
          end: {
            line: 506,
            column: 83
          }
        }],
        line: 506
      },
      "52": {
        loc: {
          start: {
            line: 524,
            column: 23
          },
          end: {
            line: 524,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 524,
            column: 23
          },
          end: {
            line: 524,
            column: 58
          }
        }, {
          start: {
            line: 524,
            column: 62
          },
          end: {
            line: 524,
            column: 63
          }
        }],
        line: 524
      },
      "53": {
        loc: {
          start: {
            line: 528,
            column: 26
          },
          end: {
            line: 528,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 528,
            column: 26
          },
          end: {
            line: 528,
            column: 52
          }
        }, {
          start: {
            line: 528,
            column: 56
          },
          end: {
            line: 528,
            column: 57
          }
        }],
        line: 528
      },
      "54": {
        loc: {
          start: {
            line: 529,
            column: 20
          },
          end: {
            line: 529,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 20
          },
          end: {
            line: 529,
            column: 40
          }
        }, {
          start: {
            line: 529,
            column: 44
          },
          end: {
            line: 529,
            column: 53
          }
        }],
        line: 529
      },
      "55": {
        loc: {
          start: {
            line: 532,
            column: 28
          },
          end: {
            line: 532,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 28
          },
          end: {
            line: 532,
            column: 66
          }
        }, {
          start: {
            line: 532,
            column: 70
          },
          end: {
            line: 532,
            column: 71
          }
        }],
        line: 532
      },
      "56": {
        loc: {
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/security/ComplianceChecker.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/security/ComplianceChecker.ts"],
      sourcesContent: ["import crypto from 'crypto';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { securityMonitor } from './SecurityMonitor';\nimport { logAggregator } from './LogAggregator';\n\nexport interface ComplianceCheck {\n  id: string;\n  name: string;\n  description: string;\n  category: 'security' | 'privacy' | 'operational' | 'technical';\n  framework: 'SOC2' | 'GDPR' | 'OWASP' | 'NIST' | 'ISO27001' | 'CUSTOM';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  required: boolean;\n  automated: boolean;\n  checkFunction: () => Promise<ComplianceResult>;\n}\n\nexport interface ComplianceResult {\n  checkId: string;\n  timestamp: Date;\n  passed: boolean;\n  score: number; // 0-100\n  details: {\n    findings: string[];\n    recommendations: string[];\n    evidence: any[];\n    metrics?: any;\n  };\n  remediation?: {\n    actions: string[];\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    estimatedEffort: string;\n    automated: boolean;\n  };\n}\n\nexport interface ComplianceReport {\n  id: string;\n  timestamp: Date;\n  overallScore: number;\n  status: 'compliant' | 'non-compliant' | 'partially-compliant';\n  framework: string;\n  results: ComplianceResult[];\n  summary: {\n    totalChecks: number;\n    passed: number;\n    failed: number;\n    criticalFailures: number;\n    recommendations: string[];\n  };\n  nextAssessment?: Date;\n}\n\nexport class ComplianceChecker {\n  private checks: ComplianceCheck[] = [];\n  private reports: ComplianceReport[] = [];\n  private scanInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    enableContinuousChecking?: boolean;\n    checkIntervalHours?: number;\n    reportRetentionDays?: number;\n  } = {}) {\n    const {\n      enableContinuousChecking = true,\n      checkIntervalHours = 24,\n      reportRetentionDays = 365\n    } = options;\n\n    this.options = {\n      enableContinuousChecking,\n      checkIntervalHours,\n      reportRetentionDays\n    };\n\n    this.setupDefaultChecks();\n    \n    if (enableContinuousChecking) {\n      this.startContinuousChecking();\n    }\n  }\n\n  // Check management\n  addCheck(check: Omit<ComplianceCheck, 'id'>): ComplianceCheck {\n    const newCheck: ComplianceCheck = {\n      id: crypto.randomUUID(),\n      ...check\n    };\n\n    this.checks.push(newCheck);\n    return newCheck;\n  }\n\n  removeCheck(checkId: string): boolean {\n    const index = this.checks.findIndex(c => c.id === checkId);\n    if (index === -1) return false;\n    \n    this.checks.splice(index, 1);\n    return true;\n  }\n\n  getChecks(filters?: {\n    category?: ComplianceCheck['category'];\n    framework?: ComplianceCheck['framework'];\n    severity?: ComplianceCheck['severity'];\n    automated?: boolean;\n  }): ComplianceCheck[] {\n    let filteredChecks = [...this.checks];\n\n    if (filters) {\n      if (filters.category) {\n        filteredChecks = filteredChecks.filter(c => c.category === filters.category);\n      }\n      if (filters.framework) {\n        filteredChecks = filteredChecks.filter(c => c.framework === filters.framework);\n      }\n      if (filters.severity) {\n        filteredChecks = filteredChecks.filter(c => c.severity === filters.severity);\n      }\n      if (filters.automated !== undefined) {\n        filteredChecks = filteredChecks.filter(c => c.automated === filters.automated);\n      }\n    }\n\n    return filteredChecks;\n  }\n\n  // Compliance assessment\n  async runCheck(checkId: string): Promise<ComplianceResult> {\n    const check = this.checks.find(c => c.id === checkId);\n    if (!check) {\n      throw new Error(`Check ${checkId} not found`);\n    }\n\n    try {\n      const result = await check.checkFunction();\n      \n      logAggregator.info('compliance-checker', `Check completed: ${check.name}`, {\n        checkId: check.id,\n        passed: result.passed,\n        score: result.score,\n        framework: check.framework\n      }, ['compliance', check.framework.toLowerCase()]);\n\n      return result;\n    } catch (error) {\n      const failureResult: ComplianceResult = {\n        checkId: check.id,\n        timestamp: new Date(),\n        passed: false,\n        score: 0,\n        details: {\n          findings: [`Check execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`],\n          recommendations: ['Fix check implementation', 'Review system configuration'],\n          evidence: []\n        }\n      };\n\n      logAggregator.error('compliance-checker', `Check failed: ${check.name}`, {\n        checkId: check.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        framework: check.framework\n      }, ['compliance', 'error']);\n\n      return failureResult;\n    }\n  }\n\n  async runAllChecks(framework?: ComplianceCheck['framework']): Promise<ComplianceResult[]> {\n    const checksToRun = framework ? \n      this.checks.filter(c => c.framework === framework) : \n      this.checks;\n\n    const results = await Promise.allSettled(\n      checksToRun.map(check => this.runCheck(check.id))\n    );\n\n    return results\n      .filter((result): result is PromiseFulfilledResult<ComplianceResult> => \n        result.status === 'fulfilled'\n      )\n      .map(result => result.value);\n  }\n\n  async generateComplianceReport(framework?: ComplianceCheck['framework']): Promise<ComplianceReport> {\n    const results = await this.runAllChecks(framework);\n    \n    const totalChecks = results.length;\n    const passed = results.filter(r => r.passed).length;\n    const failed = totalChecks - passed;\n    const criticalFailures = results.filter(r => !r.passed && \n      this.checks.find(c => c.id === r.checkId)?.severity === 'critical'\n    ).length;\n\n    const overallScore = totalChecks > 0 ? \n      Math.round(results.reduce((sum, r) => sum + r.score, 0) / totalChecks) : 0;\n\n    const status: ComplianceReport['status'] = \n      criticalFailures > 0 ? 'non-compliant' :\n      failed === 0 ? 'compliant' : 'partially-compliant';\n\n    // Collect all recommendations\n    const allRecommendations = new Set<string>();\n    results.forEach(result => {\n      result.details.recommendations.forEach(rec => allRecommendations.add(rec));\n    });\n\n    const report: ComplianceReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      overallScore,\n      status,\n      framework: framework || 'ALL',\n      results,\n      summary: {\n        totalChecks,\n        passed,\n        failed,\n        criticalFailures,\n        recommendations: Array.from(allRecommendations).slice(0, 10) // Top 10\n      },\n      nextAssessment: new Date(Date.now() + this.options.checkIntervalHours! * 60 * 60 * 1000)\n    };\n\n    this.reports.push(report);\n\n    // Log compliance status\n    logAggregator.info('compliance-checker', `Compliance report generated`, {\n      reportId: report.id,\n      framework: report.framework,\n      status: report.status,\n      score: report.overallScore,\n      totalChecks,\n      failed,\n      criticalFailures\n    }, ['compliance', 'report']);\n\n    // Alert on compliance failures\n    if (report.status === 'non-compliant' || criticalFailures > 0) {\n      securityMonitor.logSecurityEvent({\n        severity: 'critical',\n        type: 'vulnerability',\n        source: 'compliance-checker',\n        message: `Compliance failure detected: ${criticalFailures} critical failures`,\n        details: {\n          reportId: report.id,\n          framework: report.framework,\n          criticalFailures,\n          overallScore\n        },\n        resolved: false\n      });\n    }\n\n    return report;\n  }\n\n  getReports(limit = 10): ComplianceReport[] {\n    return this.reports\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  getLatestReport(framework?: string): ComplianceReport | undefined {\n    return this.reports\n      .filter(r => !framework || r.framework === framework)\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n  }\n\n  // Default compliance checks\n  private setupDefaultChecks(): void {\n    // Security checks\n    this.addCheck({\n      name: 'Password Policy Enforcement',\n      description: 'Verify strong password policies are enforced',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkPasswordPolicy()\n    });\n\n    this.addCheck({\n      name: 'HTTPS Enforcement',\n      description: 'Verify all communications use HTTPS',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkHTTPSEnforcement()\n    });\n\n    this.addCheck({\n      name: 'Dependency Vulnerability Scan',\n      description: 'Check for known vulnerabilities in dependencies',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkDependencyVulnerabilities()\n    });\n\n    this.addCheck({\n      name: 'Security Headers',\n      description: 'Verify security headers are properly configured',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'medium',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkSecurityHeaders()\n    });\n\n    this.addCheck({\n      name: 'Access Control',\n      description: 'Verify proper access controls are in place',\n      category: 'security',\n      framework: 'SOC2',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkAccessControl()\n    });\n\n    this.addCheck({\n      name: 'Audit Logging',\n      description: 'Verify comprehensive audit logging is enabled',\n      category: 'operational',\n      framework: 'SOC2',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkAuditLogging()\n    });\n\n    this.addCheck({\n      name: 'Data Encryption',\n      description: 'Verify data is encrypted at rest and in transit',\n      category: 'security',\n      framework: 'GDPR',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkDataEncryption()\n    });\n\n    this.addCheck({\n      name: 'Environment Configuration',\n      description: 'Verify secure environment configuration',\n      category: 'technical',\n      framework: 'NIST',\n      severity: 'medium',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkEnvironmentConfiguration()\n    });\n  }\n\n  // Individual check implementations\n  private async checkPasswordPolicy(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if password requirements are configured\n    const hasMinLength = process.env.MIN_PASSWORD_LENGTH ? \n      parseInt(process.env.MIN_PASSWORD_LENGTH) >= 8 : false;\n    \n    if (!hasMinLength) {\n      findings.push('Minimum password length not enforced (should be >= 8)');\n      recommendations.push('Set MIN_PASSWORD_LENGTH environment variable to 8 or higher');\n      score -= 30;\n    } else {\n      evidence.push({ type: 'config', value: `MIN_PASSWORD_LENGTH=${process.env.MIN_PASSWORD_LENGTH}` });\n    }\n\n    // Check for complexity requirements\n    const hasComplexity = process.env.REQUIRE_PASSWORD_COMPLEXITY === 'true';\n    if (!hasComplexity) {\n      findings.push('Password complexity requirements not enforced');\n      recommendations.push('Enable password complexity requirements');\n      score -= 20;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkHTTPSEnforcement(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if HTTPS is enforced\n    const httpsEnforced = process.env.FORCE_HTTPS === 'true' || process.env.NODE_ENV === 'production';\n    \n    if (!httpsEnforced && process.env.NODE_ENV === 'production') {\n      findings.push('HTTPS not enforced in production environment');\n      recommendations.push('Set FORCE_HTTPS=true for production');\n      score = 0; // Critical failure\n    } else {\n      evidence.push({ type: 'config', value: `FORCE_HTTPS=${process.env.FORCE_HTTPS}` });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkDependencyVulnerabilities(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    try {\n      // Get latest vulnerability report from security monitor\n      const securityMetrics = securityMonitor.getSecurityMetrics();\n      const criticalVulns = securityMetrics.criticalVulnerabilities;\n      \n      if (criticalVulns > 0) {\n        findings.push(`${criticalVulns} critical vulnerabilities found in dependencies`);\n        recommendations.push('Update dependencies with critical vulnerabilities immediately');\n        score = Math.max(0, score - (criticalVulns * 20));\n      }\n\n      evidence.push({\n        type: 'scan-result',\n        value: securityMetrics,\n        lastScan: securityMetrics.lastScanTimestamp\n      });\n\n    } catch (error) {\n      findings.push('Unable to perform vulnerability scan');\n      recommendations.push('Ensure dependency scanning is properly configured');\n      score = 50;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkSecurityHeaders(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check for required security headers\n    const requiredHeaders = [\n      'X-Content-Type-Options',\n      'X-Frame-Options',\n      'X-XSS-Protection',\n      'Strict-Transport-Security',\n      'Content-Security-Policy'\n    ];\n\n    // This would typically check actual HTTP responses\n    // For now, check if helmet is configured (if available)\n    const helmetConfigured = process.env.ENABLE_SECURITY_HEADERS === 'true';\n    \n    if (!helmetConfigured) {\n      findings.push('Security headers not properly configured');\n      recommendations.push('Enable security headers using helmet or similar middleware');\n      score -= 40;\n    } else {\n      evidence.push({ type: 'config', value: 'Security headers enabled' });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkAccessControl(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if authentication is properly configured\n    const authEnabled = process.env.ENABLE_AUTH === 'true';\n    const jwtSecret = process.env.JWT_SECRET;\n    \n    if (!authEnabled) {\n      findings.push('Authentication not enabled');\n      recommendations.push('Enable authentication for all protected endpoints');\n      score -= 50;\n    }\n\n    if (!jwtSecret || jwtSecret.length < 32) {\n      findings.push('JWT secret not configured or too weak');\n      recommendations.push('Set a strong JWT_SECRET (at least 32 characters)');\n      score -= 30;\n    }\n\n    if (authEnabled) {\n      evidence.push({ type: 'config', value: 'Authentication enabled' });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkAuditLogging(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if audit logging is enabled\n    const auditEnabled = process.env.ENABLE_AUDIT_LOGGING === 'true';\n    const logLevel = process.env.LOG_LEVEL;\n    \n    if (!auditEnabled) {\n      findings.push('Audit logging not enabled');\n      recommendations.push('Enable comprehensive audit logging');\n      score -= 40;\n    }\n\n    if (logLevel && !['debug', 'info'].includes(logLevel.toLowerCase())) {\n      findings.push('Log level may not capture sufficient audit information');\n      recommendations.push('Set log level to info or debug for better audit trail');\n      score -= 20;\n    }\n\n    // Check if log aggregator is working\n    const logStats = logAggregator.getLogStatistics();\n    if (logStats.totalLogs === 0) {\n      findings.push('No logs detected - logging may not be working');\n      recommendations.push('Verify log aggregation is properly configured');\n      score -= 30;\n    } else {\n      evidence.push({ type: 'log-stats', value: logStats });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkDataEncryption(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check database encryption\n    const dbEncrypted = process.env.DATABASE_ENCRYPTED === 'true';\n    if (!dbEncrypted) {\n      findings.push('Database encryption not enabled');\n      recommendations.push('Enable database encryption at rest');\n      score -= 40;\n    }\n\n    // Check if TLS is configured for external communications\n    const tlsEnabled = process.env.ENABLE_TLS === 'true' || process.env.NODE_ENV === 'production';\n    if (!tlsEnabled && process.env.NODE_ENV === 'production') {\n      findings.push('TLS not enabled for production');\n      recommendations.push('Enable TLS for all external communications');\n      score -= 40;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkEnvironmentConfiguration(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if debug mode is disabled in production\n    if (process.env.NODE_ENV === 'production' && process.env.DEBUG === 'true') {\n      findings.push('Debug mode enabled in production');\n      recommendations.push('Disable debug mode in production environment');\n      score -= 30;\n    }\n\n    // Check if sensitive information is not exposed\n    const exposedVars = Object.keys(process.env).filter(key => \n      key.toLowerCase().includes('secret') || \n      key.toLowerCase().includes('password') ||\n      key.toLowerCase().includes('key')\n    );\n\n    if (exposedVars.length > 0) {\n      evidence.push({ type: 'env-vars', count: exposedVars.length });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  // Continuous checking\n  private startContinuousChecking(): void {\n    this.scanInterval = setInterval(async () => {\n      try {\n        await this.generateComplianceReport();\n      } catch (error) {\n        logAggregator.error('compliance-checker', 'Continuous compliance check failed', {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }, ['compliance', 'error']);\n      }\n    }, this.options.checkIntervalHours! * 60 * 60 * 1000);\n  }\n\n  // Analytics\n  getComplianceMetrics(): {\n    currentScore: number;\n    status: string;\n    trendsLast30Days: { date: string; score: number }[];\n    frameworkScores: { framework: string; score: number }[];\n    criticalIssues: number;\n  } {\n    const latestReport = this.getLatestReport();\n    const reports30Days = this.reports.filter(r => \n      r.timestamp >= new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n    );\n\n    const trends = reports30Days.map(r => ({\n      date: r.timestamp.toISOString().split('T')[0],\n      score: r.overallScore\n    }));\n\n    const frameworkScores = [...new Set(this.reports.map(r => r.framework))]\n      .map(framework => {\n        const latestFrameworkReport = this.getLatestReport(framework);\n        return {\n          framework,\n          score: latestFrameworkReport?.overallScore || 0\n        };\n      });\n\n    return {\n      currentScore: latestReport?.overallScore || 0,\n      status: latestReport?.status || 'unknown',\n      trendsLast30Days: trends,\n      frameworkScores,\n      criticalIssues: latestReport?.summary.criticalFailures || 0\n    };\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.scanInterval) {\n      clearInterval(this.scanInterval);\n    }\n  }\n}\n\nexport const complianceChecker = new ComplianceChecker({\n  enableContinuousChecking: process.env.NODE_ENV === 'production',\n  checkIntervalHours: 24,\n  reportRetentionDays: 365\n});"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "969737c932d982c2730c6913aaba499d6e8c7b60"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wmpgwv0vt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wmpgwv0vt();
var __importDefault =
/* istanbul ignore next */
(cov_1wmpgwv0vt().s[0]++,
/* istanbul ignore next */
(cov_1wmpgwv0vt().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1wmpgwv0vt().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1wmpgwv0vt().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1wmpgwv0vt().f[0]++;
  cov_1wmpgwv0vt().s[1]++;
  return /* istanbul ignore next */(cov_1wmpgwv0vt().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1wmpgwv0vt().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1wmpgwv0vt().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1wmpgwv0vt().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1wmpgwv0vt().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wmpgwv0vt().s[3]++;
exports.complianceChecker = exports.ComplianceChecker = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_1wmpgwv0vt().s[4]++, __importDefault(require("crypto")));
const SecurityMonitor_1 =
/* istanbul ignore next */
(cov_1wmpgwv0vt().s[5]++, require("./SecurityMonitor"));
const LogAggregator_1 =
/* istanbul ignore next */
(cov_1wmpgwv0vt().s[6]++, require("./LogAggregator"));
class ComplianceChecker {
  constructor(options =
  /* istanbul ignore next */
  (cov_1wmpgwv0vt().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[1]++;
    cov_1wmpgwv0vt().s[7]++;
    this.options = options;
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[8]++;
    this.checks = [];
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[9]++;
    this.reports = [];
    const {
      enableContinuousChecking =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[4][0]++, true),
      checkIntervalHours =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[5][0]++, 24),
      reportRetentionDays =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[6][0]++, 365)
    } =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[10]++, options);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[11]++;
    this.options = {
      enableContinuousChecking,
      checkIntervalHours,
      reportRetentionDays
    };
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[12]++;
    this.setupDefaultChecks();
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[13]++;
    if (enableContinuousChecking) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[7][0]++;
      cov_1wmpgwv0vt().s[14]++;
      this.startContinuousChecking();
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[7][1]++;
    }
  }
  // Check management
  addCheck(check) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[2]++;
    const newCheck =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[15]++, {
      id: crypto_1.default.randomUUID(),
      ...check
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[16]++;
    this.checks.push(newCheck);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[17]++;
    return newCheck;
  }
  removeCheck(checkId) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[3]++;
    const index =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[18]++, this.checks.findIndex(c => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[4]++;
      cov_1wmpgwv0vt().s[19]++;
      return c.id === checkId;
    }));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[20]++;
    if (index === -1) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[8][0]++;
      cov_1wmpgwv0vt().s[21]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[8][1]++;
    }
    cov_1wmpgwv0vt().s[22]++;
    this.checks.splice(index, 1);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[23]++;
    return true;
  }
  getChecks(filters) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[5]++;
    let filteredChecks =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[24]++, [...this.checks]);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[25]++;
    if (filters) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[9][0]++;
      cov_1wmpgwv0vt().s[26]++;
      if (filters.category) {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().b[10][0]++;
        cov_1wmpgwv0vt().s[27]++;
        filteredChecks = filteredChecks.filter(c => {
          /* istanbul ignore next */
          cov_1wmpgwv0vt().f[6]++;
          cov_1wmpgwv0vt().s[28]++;
          return c.category === filters.category;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1wmpgwv0vt().b[10][1]++;
      }
      cov_1wmpgwv0vt().s[29]++;
      if (filters.framework) {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().b[11][0]++;
        cov_1wmpgwv0vt().s[30]++;
        filteredChecks = filteredChecks.filter(c => {
          /* istanbul ignore next */
          cov_1wmpgwv0vt().f[7]++;
          cov_1wmpgwv0vt().s[31]++;
          return c.framework === filters.framework;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1wmpgwv0vt().b[11][1]++;
      }
      cov_1wmpgwv0vt().s[32]++;
      if (filters.severity) {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().b[12][0]++;
        cov_1wmpgwv0vt().s[33]++;
        filteredChecks = filteredChecks.filter(c => {
          /* istanbul ignore next */
          cov_1wmpgwv0vt().f[8]++;
          cov_1wmpgwv0vt().s[34]++;
          return c.severity === filters.severity;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1wmpgwv0vt().b[12][1]++;
      }
      cov_1wmpgwv0vt().s[35]++;
      if (filters.automated !== undefined) {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().b[13][0]++;
        cov_1wmpgwv0vt().s[36]++;
        filteredChecks = filteredChecks.filter(c => {
          /* istanbul ignore next */
          cov_1wmpgwv0vt().f[9]++;
          cov_1wmpgwv0vt().s[37]++;
          return c.automated === filters.automated;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1wmpgwv0vt().b[13][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[9][1]++;
    }
    cov_1wmpgwv0vt().s[38]++;
    return filteredChecks;
  }
  // Compliance assessment
  async runCheck(checkId) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[10]++;
    const check =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[39]++, this.checks.find(c => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[11]++;
      cov_1wmpgwv0vt().s[40]++;
      return c.id === checkId;
    }));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[41]++;
    if (!check) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[14][0]++;
      cov_1wmpgwv0vt().s[42]++;
      throw new Error(`Check ${checkId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[14][1]++;
    }
    cov_1wmpgwv0vt().s[43]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().s[44]++, await check.checkFunction());
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[45]++;
      LogAggregator_1.logAggregator.info('compliance-checker', `Check completed: ${check.name}`, {
        checkId: check.id,
        passed: result.passed,
        score: result.score,
        framework: check.framework
      }, ['compliance', check.framework.toLowerCase()]);
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[46]++;
      return result;
    } catch (error) {
      const failureResult =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().s[47]++, {
        checkId: check.id,
        timestamp: new Date(),
        passed: false,
        score: 0,
        details: {
          findings: [`Check execution failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1wmpgwv0vt().b[15][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1wmpgwv0vt().b[15][1]++, 'Unknown error')}`],
          recommendations: ['Fix check implementation', 'Review system configuration'],
          evidence: []
        }
      });
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[48]++;
      LogAggregator_1.logAggregator.error('compliance-checker', `Check failed: ${check.name}`, {
        checkId: check.id,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1wmpgwv0vt().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1wmpgwv0vt().b[16][1]++, 'Unknown error'),
        framework: check.framework
      }, ['compliance', 'error']);
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[49]++;
      return failureResult;
    }
  }
  async runAllChecks(framework) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[12]++;
    const checksToRun =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[50]++, framework ?
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[17][0]++, this.checks.filter(c => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[13]++;
      cov_1wmpgwv0vt().s[51]++;
      return c.framework === framework;
    })) :
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[17][1]++, this.checks));
    const results =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[52]++, await Promise.allSettled(checksToRun.map(check => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[14]++;
      cov_1wmpgwv0vt().s[53]++;
      return this.runCheck(check.id);
    })));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[54]++;
    return results.filter(result => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[15]++;
      cov_1wmpgwv0vt().s[55]++;
      return result.status === 'fulfilled';
    }).map(result => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[16]++;
      cov_1wmpgwv0vt().s[56]++;
      return result.value;
    });
  }
  async generateComplianceReport(framework) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[17]++;
    const results =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[57]++, await this.runAllChecks(framework));
    const totalChecks =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[58]++, results.length);
    const passed =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[59]++, results.filter(r => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[18]++;
      cov_1wmpgwv0vt().s[60]++;
      return r.passed;
    }).length);
    const failed =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[61]++, totalChecks - passed);
    const criticalFailures =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[62]++, results.filter(r => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[19]++;
      cov_1wmpgwv0vt().s[63]++;
      return /* istanbul ignore next */(cov_1wmpgwv0vt().b[18][0]++, !r.passed) &&
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[18][1]++, this.checks.find(c => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[20]++;
        cov_1wmpgwv0vt().s[64]++;
        return c.id === r.checkId;
      })?.severity === 'critical');
    }).length);
    const overallScore =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[65]++, totalChecks > 0 ?
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[19][0]++, Math.round(results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[21]++;
      cov_1wmpgwv0vt().s[66]++;
      return sum + r.score;
    }, 0) / totalChecks)) :
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[19][1]++, 0));
    const status =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[67]++, criticalFailures > 0 ?
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[20][0]++, 'non-compliant') :
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[20][1]++, failed === 0 ?
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[21][0]++, 'compliant') :
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[21][1]++, 'partially-compliant')));
    // Collect all recommendations
    const allRecommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[68]++, new Set());
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[69]++;
    results.forEach(result => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[22]++;
      cov_1wmpgwv0vt().s[70]++;
      result.details.recommendations.forEach(rec => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[23]++;
        cov_1wmpgwv0vt().s[71]++;
        return allRecommendations.add(rec);
      });
    });
    const report =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[72]++, {
      id: crypto_1.default.randomUUID(),
      timestamp: new Date(),
      overallScore,
      status,
      framework:
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[22][0]++, framework) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[22][1]++, 'ALL'),
      results,
      summary: {
        totalChecks,
        passed,
        failed,
        criticalFailures,
        recommendations: Array.from(allRecommendations).slice(0, 10) // Top 10
      },
      nextAssessment: new Date(Date.now() + this.options.checkIntervalHours * 60 * 60 * 1000)
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[73]++;
    this.reports.push(report);
    // Log compliance status
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[74]++;
    LogAggregator_1.logAggregator.info('compliance-checker', `Compliance report generated`, {
      reportId: report.id,
      framework: report.framework,
      status: report.status,
      score: report.overallScore,
      totalChecks,
      failed,
      criticalFailures
    }, ['compliance', 'report']);
    // Alert on compliance failures
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[24][0]++, report.status === 'non-compliant') ||
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[24][1]++, criticalFailures > 0)) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[23][0]++;
      cov_1wmpgwv0vt().s[76]++;
      SecurityMonitor_1.securityMonitor.logSecurityEvent({
        severity: 'critical',
        type: 'vulnerability',
        source: 'compliance-checker',
        message: `Compliance failure detected: ${criticalFailures} critical failures`,
        details: {
          reportId: report.id,
          framework: report.framework,
          criticalFailures,
          overallScore
        },
        resolved: false
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[23][1]++;
    }
    cov_1wmpgwv0vt().s[77]++;
    return report;
  }
  getReports(limit =
  /* istanbul ignore next */
  (cov_1wmpgwv0vt().b[25][0]++, 10)) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[24]++;
    cov_1wmpgwv0vt().s[78]++;
    return this.reports.sort((a, b) => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[25]++;
      cov_1wmpgwv0vt().s[79]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    }).slice(0, limit);
  }
  getLatestReport(framework) {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[26]++;
    cov_1wmpgwv0vt().s[80]++;
    return this.reports.filter(r => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[27]++;
      cov_1wmpgwv0vt().s[81]++;
      return /* istanbul ignore next */(cov_1wmpgwv0vt().b[26][0]++, !framework) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[26][1]++, r.framework === framework);
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[28]++;
      cov_1wmpgwv0vt().s[82]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    })[0];
  }
  // Default compliance checks
  setupDefaultChecks() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[29]++;
    cov_1wmpgwv0vt().s[83]++;
    // Security checks
    this.addCheck({
      name: 'Password Policy Enforcement',
      description: 'Verify strong password policies are enforced',
      category: 'security',
      framework: 'OWASP',
      severity: 'high',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[30]++;
        cov_1wmpgwv0vt().s[84]++;
        return this.checkPasswordPolicy();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[85]++;
    this.addCheck({
      name: 'HTTPS Enforcement',
      description: 'Verify all communications use HTTPS',
      category: 'security',
      framework: 'OWASP',
      severity: 'critical',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[31]++;
        cov_1wmpgwv0vt().s[86]++;
        return this.checkHTTPSEnforcement();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[87]++;
    this.addCheck({
      name: 'Dependency Vulnerability Scan',
      description: 'Check for known vulnerabilities in dependencies',
      category: 'security',
      framework: 'OWASP',
      severity: 'high',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[32]++;
        cov_1wmpgwv0vt().s[88]++;
        return this.checkDependencyVulnerabilities();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[89]++;
    this.addCheck({
      name: 'Security Headers',
      description: 'Verify security headers are properly configured',
      category: 'security',
      framework: 'OWASP',
      severity: 'medium',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[33]++;
        cov_1wmpgwv0vt().s[90]++;
        return this.checkSecurityHeaders();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[91]++;
    this.addCheck({
      name: 'Access Control',
      description: 'Verify proper access controls are in place',
      category: 'security',
      framework: 'SOC2',
      severity: 'critical',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[34]++;
        cov_1wmpgwv0vt().s[92]++;
        return this.checkAccessControl();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[93]++;
    this.addCheck({
      name: 'Audit Logging',
      description: 'Verify comprehensive audit logging is enabled',
      category: 'operational',
      framework: 'SOC2',
      severity: 'high',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[35]++;
        cov_1wmpgwv0vt().s[94]++;
        return this.checkAuditLogging();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[95]++;
    this.addCheck({
      name: 'Data Encryption',
      description: 'Verify data is encrypted at rest and in transit',
      category: 'security',
      framework: 'GDPR',
      severity: 'critical',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[36]++;
        cov_1wmpgwv0vt().s[96]++;
        return this.checkDataEncryption();
      }
    });
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[97]++;
    this.addCheck({
      name: 'Environment Configuration',
      description: 'Verify secure environment configuration',
      category: 'technical',
      framework: 'NIST',
      severity: 'medium',
      required: true,
      automated: true,
      checkFunction: async () => {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().f[37]++;
        cov_1wmpgwv0vt().s[98]++;
        return this.checkEnvironmentConfiguration();
      }
    });
  }
  // Individual check implementations
  async checkPasswordPolicy() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[38]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[99]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[100]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[101]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[102]++, 100);
    // Check if password requirements are configured
    const hasMinLength =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[103]++, process.env.MIN_PASSWORD_LENGTH ?
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[27][0]++, parseInt(process.env.MIN_PASSWORD_LENGTH) >= 8) :
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[27][1]++, false));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[104]++;
    if (!hasMinLength) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[28][0]++;
      cov_1wmpgwv0vt().s[105]++;
      findings.push('Minimum password length not enforced (should be >= 8)');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[106]++;
      recommendations.push('Set MIN_PASSWORD_LENGTH environment variable to 8 or higher');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[107]++;
      score -= 30;
    } else {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[28][1]++;
      cov_1wmpgwv0vt().s[108]++;
      evidence.push({
        type: 'config',
        value: `MIN_PASSWORD_LENGTH=${process.env.MIN_PASSWORD_LENGTH}`
      });
    }
    // Check for complexity requirements
    const hasComplexity =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[109]++, process.env.REQUIRE_PASSWORD_COMPLEXITY === 'true');
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[110]++;
    if (!hasComplexity) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[29][0]++;
      cov_1wmpgwv0vt().s[111]++;
      findings.push('Password complexity requirements not enforced');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[112]++;
      recommendations.push('Enable password complexity requirements');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[113]++;
      score -= 20;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[29][1]++;
    }
    cov_1wmpgwv0vt().s[114]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score: Math.max(0, score),
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkHTTPSEnforcement() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[39]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[115]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[116]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[117]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[118]++, 100);
    // Check if HTTPS is enforced
    const httpsEnforced =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[119]++,
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[30][0]++, process.env.FORCE_HTTPS === 'true') ||
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[30][1]++, process.env.NODE_ENV === 'production'));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[120]++;
    if (
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[32][0]++, !httpsEnforced) &&
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[32][1]++, process.env.NODE_ENV === 'production')) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[31][0]++;
      cov_1wmpgwv0vt().s[121]++;
      findings.push('HTTPS not enforced in production environment');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[122]++;
      recommendations.push('Set FORCE_HTTPS=true for production');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[123]++;
      score = 0; // Critical failure
    } else {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[31][1]++;
      cov_1wmpgwv0vt().s[124]++;
      evidence.push({
        type: 'config',
        value: `FORCE_HTTPS=${process.env.FORCE_HTTPS}`
      });
    }
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[125]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score,
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkDependencyVulnerabilities() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[40]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[126]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[127]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[128]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[129]++, 100);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[130]++;
    try {
      // Get latest vulnerability report from security monitor
      const securityMetrics =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().s[131]++, SecurityMonitor_1.securityMonitor.getSecurityMetrics());
      const criticalVulns =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().s[132]++, securityMetrics.criticalVulnerabilities);
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[133]++;
      if (criticalVulns > 0) {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().b[33][0]++;
        cov_1wmpgwv0vt().s[134]++;
        findings.push(`${criticalVulns} critical vulnerabilities found in dependencies`);
        /* istanbul ignore next */
        cov_1wmpgwv0vt().s[135]++;
        recommendations.push('Update dependencies with critical vulnerabilities immediately');
        /* istanbul ignore next */
        cov_1wmpgwv0vt().s[136]++;
        score = Math.max(0, score - criticalVulns * 20);
      } else
      /* istanbul ignore next */
      {
        cov_1wmpgwv0vt().b[33][1]++;
      }
      cov_1wmpgwv0vt().s[137]++;
      evidence.push({
        type: 'scan-result',
        value: securityMetrics,
        lastScan: securityMetrics.lastScanTimestamp
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[138]++;
      findings.push('Unable to perform vulnerability scan');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[139]++;
      recommendations.push('Ensure dependency scanning is properly configured');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[140]++;
      score = 50;
    }
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[141]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score,
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkSecurityHeaders() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[41]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[142]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[143]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[144]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[145]++, 100);
    // Check for required security headers
    const requiredHeaders =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[146]++, ['X-Content-Type-Options', 'X-Frame-Options', 'X-XSS-Protection', 'Strict-Transport-Security', 'Content-Security-Policy']);
    // This would typically check actual HTTP responses
    // For now, check if helmet is configured (if available)
    const helmetConfigured =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[147]++, process.env.ENABLE_SECURITY_HEADERS === 'true');
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[148]++;
    if (!helmetConfigured) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[34][0]++;
      cov_1wmpgwv0vt().s[149]++;
      findings.push('Security headers not properly configured');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[150]++;
      recommendations.push('Enable security headers using helmet or similar middleware');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[151]++;
      score -= 40;
    } else {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[34][1]++;
      cov_1wmpgwv0vt().s[152]++;
      evidence.push({
        type: 'config',
        value: 'Security headers enabled'
      });
    }
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[153]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score,
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkAccessControl() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[42]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[154]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[155]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[156]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[157]++, 100);
    // Check if authentication is properly configured
    const authEnabled =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[158]++, process.env.ENABLE_AUTH === 'true');
    const jwtSecret =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[159]++, process.env.JWT_SECRET);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[160]++;
    if (!authEnabled) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[35][0]++;
      cov_1wmpgwv0vt().s[161]++;
      findings.push('Authentication not enabled');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[162]++;
      recommendations.push('Enable authentication for all protected endpoints');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[163]++;
      score -= 50;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[35][1]++;
    }
    cov_1wmpgwv0vt().s[164]++;
    if (
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[37][0]++, !jwtSecret) ||
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[37][1]++, jwtSecret.length < 32)) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[36][0]++;
      cov_1wmpgwv0vt().s[165]++;
      findings.push('JWT secret not configured or too weak');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[166]++;
      recommendations.push('Set a strong JWT_SECRET (at least 32 characters)');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[167]++;
      score -= 30;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[36][1]++;
    }
    cov_1wmpgwv0vt().s[168]++;
    if (authEnabled) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[38][0]++;
      cov_1wmpgwv0vt().s[169]++;
      evidence.push({
        type: 'config',
        value: 'Authentication enabled'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[38][1]++;
    }
    cov_1wmpgwv0vt().s[170]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score: Math.max(0, score),
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkAuditLogging() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[43]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[171]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[172]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[173]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[174]++, 100);
    // Check if audit logging is enabled
    const auditEnabled =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[175]++, process.env.ENABLE_AUDIT_LOGGING === 'true');
    const logLevel =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[176]++, process.env.LOG_LEVEL);
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[177]++;
    if (!auditEnabled) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[39][0]++;
      cov_1wmpgwv0vt().s[178]++;
      findings.push('Audit logging not enabled');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[179]++;
      recommendations.push('Enable comprehensive audit logging');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[180]++;
      score -= 40;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[39][1]++;
    }
    cov_1wmpgwv0vt().s[181]++;
    if (
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[41][0]++, logLevel) &&
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[41][1]++, !['debug', 'info'].includes(logLevel.toLowerCase()))) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[40][0]++;
      cov_1wmpgwv0vt().s[182]++;
      findings.push('Log level may not capture sufficient audit information');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[183]++;
      recommendations.push('Set log level to info or debug for better audit trail');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[184]++;
      score -= 20;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[40][1]++;
    }
    // Check if log aggregator is working
    const logStats =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[185]++, LogAggregator_1.logAggregator.getLogStatistics());
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[186]++;
    if (logStats.totalLogs === 0) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[42][0]++;
      cov_1wmpgwv0vt().s[187]++;
      findings.push('No logs detected - logging may not be working');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[188]++;
      recommendations.push('Verify log aggregation is properly configured');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[189]++;
      score -= 30;
    } else {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[42][1]++;
      cov_1wmpgwv0vt().s[190]++;
      evidence.push({
        type: 'log-stats',
        value: logStats
      });
    }
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[191]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score: Math.max(0, score),
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkDataEncryption() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[44]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[192]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[193]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[194]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[195]++, 100);
    // Check database encryption
    const dbEncrypted =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[196]++, process.env.DATABASE_ENCRYPTED === 'true');
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[197]++;
    if (!dbEncrypted) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[43][0]++;
      cov_1wmpgwv0vt().s[198]++;
      findings.push('Database encryption not enabled');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[199]++;
      recommendations.push('Enable database encryption at rest');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[200]++;
      score -= 40;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[43][1]++;
    }
    // Check if TLS is configured for external communications
    const tlsEnabled =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[201]++,
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[44][0]++, process.env.ENABLE_TLS === 'true') ||
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[44][1]++, process.env.NODE_ENV === 'production'));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[202]++;
    if (
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[46][0]++, !tlsEnabled) &&
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[46][1]++, process.env.NODE_ENV === 'production')) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[45][0]++;
      cov_1wmpgwv0vt().s[203]++;
      findings.push('TLS not enabled for production');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[204]++;
      recommendations.push('Enable TLS for all external communications');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[205]++;
      score -= 40;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[45][1]++;
    }
    cov_1wmpgwv0vt().s[206]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score: Math.max(0, score),
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  async checkEnvironmentConfiguration() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[45]++;
    const findings =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[207]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[208]++, []);
    const evidence =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[209]++, []);
    let score =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[210]++, 100);
    // Check if debug mode is disabled in production
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[211]++;
    if (
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[48][0]++, process.env.NODE_ENV === 'production') &&
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().b[48][1]++, process.env.DEBUG === 'true')) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[47][0]++;
      cov_1wmpgwv0vt().s[212]++;
      findings.push('Debug mode enabled in production');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[213]++;
      recommendations.push('Disable debug mode in production environment');
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[214]++;
      score -= 30;
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[47][1]++;
    }
    // Check if sensitive information is not exposed
    const exposedVars =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[215]++, Object.keys(process.env).filter(key => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[46]++;
      cov_1wmpgwv0vt().s[216]++;
      return /* istanbul ignore next */(cov_1wmpgwv0vt().b[49][0]++, key.toLowerCase().includes('secret')) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[49][1]++, key.toLowerCase().includes('password')) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[49][2]++, key.toLowerCase().includes('key'));
    }));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[217]++;
    if (exposedVars.length > 0) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[50][0]++;
      cov_1wmpgwv0vt().s[218]++;
      evidence.push({
        type: 'env-vars',
        count: exposedVars.length
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[50][1]++;
    }
    cov_1wmpgwv0vt().s[219]++;
    return {
      checkId: '',
      timestamp: new Date(),
      passed: findings.length === 0,
      score,
      details: {
        findings,
        recommendations,
        evidence
      }
    };
  }
  // Continuous checking
  startContinuousChecking() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[47]++;
    cov_1wmpgwv0vt().s[220]++;
    this.scanInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[48]++;
      cov_1wmpgwv0vt().s[221]++;
      try {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().s[222]++;
        await this.generateComplianceReport();
      } catch (error) {
        /* istanbul ignore next */
        cov_1wmpgwv0vt().s[223]++;
        LogAggregator_1.logAggregator.error('compliance-checker', 'Continuous compliance check failed', {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1wmpgwv0vt().b[51][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1wmpgwv0vt().b[51][1]++, 'Unknown error')
        }, ['compliance', 'error']);
      }
    }, this.options.checkIntervalHours * 60 * 60 * 1000);
  }
  // Analytics
  getComplianceMetrics() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[49]++;
    const latestReport =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[224]++, this.getLatestReport());
    const reports30Days =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[225]++, this.reports.filter(r => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[50]++;
      cov_1wmpgwv0vt().s[226]++;
      return r.timestamp >= new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    }));
    const trends =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[227]++, reports30Days.map(r => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[51]++;
      cov_1wmpgwv0vt().s[228]++;
      return {
        date: r.timestamp.toISOString().split('T')[0],
        score: r.overallScore
      };
    }));
    const frameworkScores =
    /* istanbul ignore next */
    (cov_1wmpgwv0vt().s[229]++, [...new Set(this.reports.map(r => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[52]++;
      cov_1wmpgwv0vt().s[230]++;
      return r.framework;
    }))].map(framework => {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().f[53]++;
      const latestFrameworkReport =
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().s[231]++, this.getLatestReport(framework));
      /* istanbul ignore next */
      cov_1wmpgwv0vt().s[232]++;
      return {
        framework,
        score:
        /* istanbul ignore next */
        (cov_1wmpgwv0vt().b[52][0]++, latestFrameworkReport?.overallScore) ||
        /* istanbul ignore next */
        (cov_1wmpgwv0vt().b[52][1]++, 0)
      };
    }));
    /* istanbul ignore next */
    cov_1wmpgwv0vt().s[233]++;
    return {
      currentScore:
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[53][0]++, latestReport?.overallScore) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[53][1]++, 0),
      status:
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[54][0]++, latestReport?.status) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[54][1]++, 'unknown'),
      trendsLast30Days: trends,
      frameworkScores,
      criticalIssues:
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[55][0]++, latestReport?.summary.criticalFailures) ||
      /* istanbul ignore next */
      (cov_1wmpgwv0vt().b[55][1]++, 0)
    };
  }
  // Cleanup
  destroy() {
    /* istanbul ignore next */
    cov_1wmpgwv0vt().f[54]++;
    cov_1wmpgwv0vt().s[234]++;
    if (this.scanInterval) {
      /* istanbul ignore next */
      cov_1wmpgwv0vt().b[56][0]++;
      cov_1wmpgwv0vt().s[235]++;
      clearInterval(this.scanInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1wmpgwv0vt().b[56][1]++;
    }
  }
}
/* istanbul ignore next */
cov_1wmpgwv0vt().s[236]++;
exports.ComplianceChecker = ComplianceChecker;
/* istanbul ignore next */
cov_1wmpgwv0vt().s[237]++;
exports.complianceChecker = new ComplianceChecker({
  enableContinuousChecking: process.env.NODE_ENV === 'production',
  checkIntervalHours: 24,
  reportRetentionDays: 365
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,