{"version":3,"names":["cov_1wmpgwv0vt","actualCoverage","crypto_1","s","__importDefault","require","SecurityMonitor_1","LogAggregator_1","ComplianceChecker","constructor","options","b","f","checks","reports","enableContinuousChecking","checkIntervalHours","reportRetentionDays","setupDefaultChecks","startContinuousChecking","addCheck","check","newCheck","id","default","randomUUID","push","removeCheck","checkId","index","findIndex","c","splice","getChecks","filters","filteredChecks","category","filter","framework","severity","automated","undefined","runCheck","find","Error","result","checkFunction","logAggregator","info","name","passed","score","toLowerCase","error","failureResult","timestamp","Date","details","findings","message","recommendations","evidence","runAllChecks","checksToRun","results","Promise","allSettled","map","status","value","generateComplianceReport","totalChecks","length","r","failed","criticalFailures","overallScore","Math","round","reduce","sum","allRecommendations","Set","forEach","rec","add","report","summary","Array","from","slice","nextAssessment","now","reportId","securityMonitor","logSecurityEvent","type","source","resolved","getReports","limit","sort","a","getTime","getLatestReport","description","required","checkPasswordPolicy","checkHTTPSEnforcement","checkDependencyVulnerabilities","checkSecurityHeaders","checkAccessControl","checkAuditLogging","checkDataEncryption","checkEnvironmentConfiguration","hasMinLength","process","env","MIN_PASSWORD_LENGTH","parseInt","hasComplexity","REQUIRE_PASSWORD_COMPLEXITY","max","httpsEnforced","FORCE_HTTPS","NODE_ENV","securityMetrics","getSecurityMetrics","criticalVulns","criticalVulnerabilities","lastScan","lastScanTimestamp","requiredHeaders","helmetConfigured","ENABLE_SECURITY_HEADERS","authEnabled","ENABLE_AUTH","jwtSecret","JWT_SECRET","auditEnabled","ENABLE_AUDIT_LOGGING","logLevel","LOG_LEVEL","includes","logStats","getLogStatistics","totalLogs","dbEncrypted","DATABASE_ENCRYPTED","tlsEnabled","ENABLE_TLS","DEBUG","exposedVars","Object","keys","key","count","scanInterval","setInterval","getComplianceMetrics","latestReport","reports30Days","trends","date","toISOString","split","frameworkScores","latestFrameworkReport","currentScore","trendsLast30Days","criticalIssues","destroy","clearInterval","exports","complianceChecker"],"sources":["/workspaces/prompt-card-system/backend/src/services/security/ComplianceChecker.ts"],"sourcesContent":["import crypto from 'crypto';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { securityMonitor } from './SecurityMonitor';\nimport { logAggregator } from './LogAggregator';\n\nexport interface ComplianceCheck {\n  id: string;\n  name: string;\n  description: string;\n  category: 'security' | 'privacy' | 'operational' | 'technical';\n  framework: 'SOC2' | 'GDPR' | 'OWASP' | 'NIST' | 'ISO27001' | 'CUSTOM';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  required: boolean;\n  automated: boolean;\n  checkFunction: () => Promise<ComplianceResult>;\n}\n\nexport interface ComplianceResult {\n  checkId: string;\n  timestamp: Date;\n  passed: boolean;\n  score: number; // 0-100\n  details: {\n    findings: string[];\n    recommendations: string[];\n    evidence: any[];\n    metrics?: any;\n  };\n  remediation?: {\n    actions: string[];\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    estimatedEffort: string;\n    automated: boolean;\n  };\n}\n\nexport interface ComplianceReport {\n  id: string;\n  timestamp: Date;\n  overallScore: number;\n  status: 'compliant' | 'non-compliant' | 'partially-compliant';\n  framework: string;\n  results: ComplianceResult[];\n  summary: {\n    totalChecks: number;\n    passed: number;\n    failed: number;\n    criticalFailures: number;\n    recommendations: string[];\n  };\n  nextAssessment?: Date;\n}\n\nexport class ComplianceChecker {\n  private checks: ComplianceCheck[] = [];\n  private reports: ComplianceReport[] = [];\n  private scanInterval?: NodeJS.Timeout;\n\n  constructor(private options: {\n    enableContinuousChecking?: boolean;\n    checkIntervalHours?: number;\n    reportRetentionDays?: number;\n  } = {}) {\n    const {\n      enableContinuousChecking = true,\n      checkIntervalHours = 24,\n      reportRetentionDays = 365\n    } = options;\n\n    this.options = {\n      enableContinuousChecking,\n      checkIntervalHours,\n      reportRetentionDays\n    };\n\n    this.setupDefaultChecks();\n    \n    if (enableContinuousChecking) {\n      this.startContinuousChecking();\n    }\n  }\n\n  // Check management\n  addCheck(check: Omit<ComplianceCheck, 'id'>): ComplianceCheck {\n    const newCheck: ComplianceCheck = {\n      id: crypto.randomUUID(),\n      ...check\n    };\n\n    this.checks.push(newCheck);\n    return newCheck;\n  }\n\n  removeCheck(checkId: string): boolean {\n    const index = this.checks.findIndex(c => c.id === checkId);\n    if (index === -1) return false;\n    \n    this.checks.splice(index, 1);\n    return true;\n  }\n\n  getChecks(filters?: {\n    category?: ComplianceCheck['category'];\n    framework?: ComplianceCheck['framework'];\n    severity?: ComplianceCheck['severity'];\n    automated?: boolean;\n  }): ComplianceCheck[] {\n    let filteredChecks = [...this.checks];\n\n    if (filters) {\n      if (filters.category) {\n        filteredChecks = filteredChecks.filter(c => c.category === filters.category);\n      }\n      if (filters.framework) {\n        filteredChecks = filteredChecks.filter(c => c.framework === filters.framework);\n      }\n      if (filters.severity) {\n        filteredChecks = filteredChecks.filter(c => c.severity === filters.severity);\n      }\n      if (filters.automated !== undefined) {\n        filteredChecks = filteredChecks.filter(c => c.automated === filters.automated);\n      }\n    }\n\n    return filteredChecks;\n  }\n\n  // Compliance assessment\n  async runCheck(checkId: string): Promise<ComplianceResult> {\n    const check = this.checks.find(c => c.id === checkId);\n    if (!check) {\n      throw new Error(`Check ${checkId} not found`);\n    }\n\n    try {\n      const result = await check.checkFunction();\n      \n      logAggregator.info('compliance-checker', `Check completed: ${check.name}`, {\n        checkId: check.id,\n        passed: result.passed,\n        score: result.score,\n        framework: check.framework\n      }, ['compliance', check.framework.toLowerCase()]);\n\n      return result;\n    } catch (error) {\n      const failureResult: ComplianceResult = {\n        checkId: check.id,\n        timestamp: new Date(),\n        passed: false,\n        score: 0,\n        details: {\n          findings: [`Check execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`],\n          recommendations: ['Fix check implementation', 'Review system configuration'],\n          evidence: []\n        }\n      };\n\n      logAggregator.error('compliance-checker', `Check failed: ${check.name}`, {\n        checkId: check.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        framework: check.framework\n      }, ['compliance', 'error']);\n\n      return failureResult;\n    }\n  }\n\n  async runAllChecks(framework?: ComplianceCheck['framework']): Promise<ComplianceResult[]> {\n    const checksToRun = framework ? \n      this.checks.filter(c => c.framework === framework) : \n      this.checks;\n\n    const results = await Promise.allSettled(\n      checksToRun.map(check => this.runCheck(check.id))\n    );\n\n    return results\n      .filter((result): result is PromiseFulfilledResult<ComplianceResult> => \n        result.status === 'fulfilled'\n      )\n      .map(result => result.value);\n  }\n\n  async generateComplianceReport(framework?: ComplianceCheck['framework']): Promise<ComplianceReport> {\n    const results = await this.runAllChecks(framework);\n    \n    const totalChecks = results.length;\n    const passed = results.filter(r => r.passed).length;\n    const failed = totalChecks - passed;\n    const criticalFailures = results.filter(r => !r.passed && \n      this.checks.find(c => c.id === r.checkId)?.severity === 'critical'\n    ).length;\n\n    const overallScore = totalChecks > 0 ? \n      Math.round(results.reduce((sum, r) => sum + r.score, 0) / totalChecks) : 0;\n\n    const status: ComplianceReport['status'] = \n      criticalFailures > 0 ? 'non-compliant' :\n      failed === 0 ? 'compliant' : 'partially-compliant';\n\n    // Collect all recommendations\n    const allRecommendations = new Set<string>();\n    results.forEach(result => {\n      result.details.recommendations.forEach(rec => allRecommendations.add(rec));\n    });\n\n    const report: ComplianceReport = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      overallScore,\n      status,\n      framework: framework || 'ALL',\n      results,\n      summary: {\n        totalChecks,\n        passed,\n        failed,\n        criticalFailures,\n        recommendations: Array.from(allRecommendations).slice(0, 10) // Top 10\n      },\n      nextAssessment: new Date(Date.now() + this.options.checkIntervalHours! * 60 * 60 * 1000)\n    };\n\n    this.reports.push(report);\n\n    // Log compliance status\n    logAggregator.info('compliance-checker', `Compliance report generated`, {\n      reportId: report.id,\n      framework: report.framework,\n      status: report.status,\n      score: report.overallScore,\n      totalChecks,\n      failed,\n      criticalFailures\n    }, ['compliance', 'report']);\n\n    // Alert on compliance failures\n    if (report.status === 'non-compliant' || criticalFailures > 0) {\n      securityMonitor.logSecurityEvent({\n        severity: 'critical',\n        type: 'vulnerability',\n        source: 'compliance-checker',\n        message: `Compliance failure detected: ${criticalFailures} critical failures`,\n        details: {\n          reportId: report.id,\n          framework: report.framework,\n          criticalFailures,\n          overallScore\n        },\n        resolved: false\n      });\n    }\n\n    return report;\n  }\n\n  getReports(limit = 10): ComplianceReport[] {\n    return this.reports\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  getLatestReport(framework?: string): ComplianceReport | undefined {\n    return this.reports\n      .filter(r => !framework || r.framework === framework)\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n  }\n\n  // Default compliance checks\n  private setupDefaultChecks(): void {\n    // Security checks\n    this.addCheck({\n      name: 'Password Policy Enforcement',\n      description: 'Verify strong password policies are enforced',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkPasswordPolicy()\n    });\n\n    this.addCheck({\n      name: 'HTTPS Enforcement',\n      description: 'Verify all communications use HTTPS',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkHTTPSEnforcement()\n    });\n\n    this.addCheck({\n      name: 'Dependency Vulnerability Scan',\n      description: 'Check for known vulnerabilities in dependencies',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkDependencyVulnerabilities()\n    });\n\n    this.addCheck({\n      name: 'Security Headers',\n      description: 'Verify security headers are properly configured',\n      category: 'security',\n      framework: 'OWASP',\n      severity: 'medium',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkSecurityHeaders()\n    });\n\n    this.addCheck({\n      name: 'Access Control',\n      description: 'Verify proper access controls are in place',\n      category: 'security',\n      framework: 'SOC2',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkAccessControl()\n    });\n\n    this.addCheck({\n      name: 'Audit Logging',\n      description: 'Verify comprehensive audit logging is enabled',\n      category: 'operational',\n      framework: 'SOC2',\n      severity: 'high',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkAuditLogging()\n    });\n\n    this.addCheck({\n      name: 'Data Encryption',\n      description: 'Verify data is encrypted at rest and in transit',\n      category: 'security',\n      framework: 'GDPR',\n      severity: 'critical',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkDataEncryption()\n    });\n\n    this.addCheck({\n      name: 'Environment Configuration',\n      description: 'Verify secure environment configuration',\n      category: 'technical',\n      framework: 'NIST',\n      severity: 'medium',\n      required: true,\n      automated: true,\n      checkFunction: async () => this.checkEnvironmentConfiguration()\n    });\n  }\n\n  // Individual check implementations\n  private async checkPasswordPolicy(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if password requirements are configured\n    const hasMinLength = process.env.MIN_PASSWORD_LENGTH ? \n      parseInt(process.env.MIN_PASSWORD_LENGTH) >= 8 : false;\n    \n    if (!hasMinLength) {\n      findings.push('Minimum password length not enforced (should be >= 8)');\n      recommendations.push('Set MIN_PASSWORD_LENGTH environment variable to 8 or higher');\n      score -= 30;\n    } else {\n      evidence.push({ type: 'config', value: `MIN_PASSWORD_LENGTH=${process.env.MIN_PASSWORD_LENGTH}` });\n    }\n\n    // Check for complexity requirements\n    const hasComplexity = process.env.REQUIRE_PASSWORD_COMPLEXITY === 'true';\n    if (!hasComplexity) {\n      findings.push('Password complexity requirements not enforced');\n      recommendations.push('Enable password complexity requirements');\n      score -= 20;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkHTTPSEnforcement(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if HTTPS is enforced\n    const httpsEnforced = process.env.FORCE_HTTPS === 'true' || process.env.NODE_ENV === 'production';\n    \n    if (!httpsEnforced && process.env.NODE_ENV === 'production') {\n      findings.push('HTTPS not enforced in production environment');\n      recommendations.push('Set FORCE_HTTPS=true for production');\n      score = 0; // Critical failure\n    } else {\n      evidence.push({ type: 'config', value: `FORCE_HTTPS=${process.env.FORCE_HTTPS}` });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkDependencyVulnerabilities(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    try {\n      // Get latest vulnerability report from security monitor\n      const securityMetrics = securityMonitor.getSecurityMetrics();\n      const criticalVulns = securityMetrics.criticalVulnerabilities;\n      \n      if (criticalVulns > 0) {\n        findings.push(`${criticalVulns} critical vulnerabilities found in dependencies`);\n        recommendations.push('Update dependencies with critical vulnerabilities immediately');\n        score = Math.max(0, score - (criticalVulns * 20));\n      }\n\n      evidence.push({\n        type: 'scan-result',\n        value: securityMetrics,\n        lastScan: securityMetrics.lastScanTimestamp\n      });\n\n    } catch (error) {\n      findings.push('Unable to perform vulnerability scan');\n      recommendations.push('Ensure dependency scanning is properly configured');\n      score = 50;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkSecurityHeaders(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check for required security headers\n    const requiredHeaders = [\n      'X-Content-Type-Options',\n      'X-Frame-Options',\n      'X-XSS-Protection',\n      'Strict-Transport-Security',\n      'Content-Security-Policy'\n    ];\n\n    // This would typically check actual HTTP responses\n    // For now, check if helmet is configured (if available)\n    const helmetConfigured = process.env.ENABLE_SECURITY_HEADERS === 'true';\n    \n    if (!helmetConfigured) {\n      findings.push('Security headers not properly configured');\n      recommendations.push('Enable security headers using helmet or similar middleware');\n      score -= 40;\n    } else {\n      evidence.push({ type: 'config', value: 'Security headers enabled' });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkAccessControl(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if authentication is properly configured\n    const authEnabled = process.env.ENABLE_AUTH === 'true';\n    const jwtSecret = process.env.JWT_SECRET;\n    \n    if (!authEnabled) {\n      findings.push('Authentication not enabled');\n      recommendations.push('Enable authentication for all protected endpoints');\n      score -= 50;\n    }\n\n    if (!jwtSecret || jwtSecret.length < 32) {\n      findings.push('JWT secret not configured or too weak');\n      recommendations.push('Set a strong JWT_SECRET (at least 32 characters)');\n      score -= 30;\n    }\n\n    if (authEnabled) {\n      evidence.push({ type: 'config', value: 'Authentication enabled' });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkAuditLogging(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if audit logging is enabled\n    const auditEnabled = process.env.ENABLE_AUDIT_LOGGING === 'true';\n    const logLevel = process.env.LOG_LEVEL;\n    \n    if (!auditEnabled) {\n      findings.push('Audit logging not enabled');\n      recommendations.push('Enable comprehensive audit logging');\n      score -= 40;\n    }\n\n    if (logLevel && !['debug', 'info'].includes(logLevel.toLowerCase())) {\n      findings.push('Log level may not capture sufficient audit information');\n      recommendations.push('Set log level to info or debug for better audit trail');\n      score -= 20;\n    }\n\n    // Check if log aggregator is working\n    const logStats = logAggregator.getLogStatistics();\n    if (logStats.totalLogs === 0) {\n      findings.push('No logs detected - logging may not be working');\n      recommendations.push('Verify log aggregation is properly configured');\n      score -= 30;\n    } else {\n      evidence.push({ type: 'log-stats', value: logStats });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkDataEncryption(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check database encryption\n    const dbEncrypted = process.env.DATABASE_ENCRYPTED === 'true';\n    if (!dbEncrypted) {\n      findings.push('Database encryption not enabled');\n      recommendations.push('Enable database encryption at rest');\n      score -= 40;\n    }\n\n    // Check if TLS is configured for external communications\n    const tlsEnabled = process.env.ENABLE_TLS === 'true' || process.env.NODE_ENV === 'production';\n    if (!tlsEnabled && process.env.NODE_ENV === 'production') {\n      findings.push('TLS not enabled for production');\n      recommendations.push('Enable TLS for all external communications');\n      score -= 40;\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score: Math.max(0, score),\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  private async checkEnvironmentConfiguration(): Promise<ComplianceResult> {\n    const findings: string[] = [];\n    const recommendations: string[] = [];\n    const evidence: any[] = [];\n    let score = 100;\n\n    // Check if debug mode is disabled in production\n    if (process.env.NODE_ENV === 'production' && process.env.DEBUG === 'true') {\n      findings.push('Debug mode enabled in production');\n      recommendations.push('Disable debug mode in production environment');\n      score -= 30;\n    }\n\n    // Check if sensitive information is not exposed\n    const exposedVars = Object.keys(process.env).filter(key => \n      key.toLowerCase().includes('secret') || \n      key.toLowerCase().includes('password') ||\n      key.toLowerCase().includes('key')\n    );\n\n    if (exposedVars.length > 0) {\n      evidence.push({ type: 'env-vars', count: exposedVars.length });\n    }\n\n    return {\n      checkId: '',\n      timestamp: new Date(),\n      passed: findings.length === 0,\n      score,\n      details: { findings, recommendations, evidence }\n    };\n  }\n\n  // Continuous checking\n  private startContinuousChecking(): void {\n    this.scanInterval = setInterval(async () => {\n      try {\n        await this.generateComplianceReport();\n      } catch (error) {\n        logAggregator.error('compliance-checker', 'Continuous compliance check failed', {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }, ['compliance', 'error']);\n      }\n    }, this.options.checkIntervalHours! * 60 * 60 * 1000);\n  }\n\n  // Analytics\n  getComplianceMetrics(): {\n    currentScore: number;\n    status: string;\n    trendsLast30Days: { date: string; score: number }[];\n    frameworkScores: { framework: string; score: number }[];\n    criticalIssues: number;\n  } {\n    const latestReport = this.getLatestReport();\n    const reports30Days = this.reports.filter(r => \n      r.timestamp >= new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n    );\n\n    const trends = reports30Days.map(r => ({\n      date: r.timestamp.toISOString().split('T')[0],\n      score: r.overallScore\n    }));\n\n    const frameworkScores = [...new Set(this.reports.map(r => r.framework))]\n      .map(framework => {\n        const latestFrameworkReport = this.getLatestReport(framework);\n        return {\n          framework,\n          score: latestFrameworkReport?.overallScore || 0\n        };\n      });\n\n    return {\n      currentScore: latestReport?.overallScore || 0,\n      status: latestReport?.status || 'unknown',\n      trendsLast30Days: trends,\n      frameworkScores,\n      criticalIssues: latestReport?.summary.criticalFailures || 0\n    };\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.scanInterval) {\n      clearInterval(this.scanInterval);\n    }\n  }\n}\n\nexport const complianceChecker = new ComplianceChecker({\n  enableContinuousChecking: process.env.NODE_ENV === 'production',\n  checkIntervalHours: 24,\n  reportRetentionDays: 365\n});"],"mappingssEQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtER,MAAAE,QAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AAGA,MAAAC,iBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAAE,OAAA;AACA,MAAAE,eAAA;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAAE,OAAA;AAkDA,MAAaG,iBAAiB;EAK5BC,YAAoBC,OAAA;EAAA;EAAA,CAAAV,cAAA,GAAAW,CAAA,UAIhB,EAAE;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAJc,KAAAO,OAAO,GAAPA,OAAO;IAIrB;IAAAV,cAAA,GAAAG,CAAA;IARE,KAAAU,MAAM,GAAsB,EAAE;IAAC;IAAAb,cAAA,GAAAG,CAAA;IAC/B,KAAAW,OAAO,GAAuB,EAAE;IAQtC,MAAM;MACJC,wBAAwB;MAAA;MAAA,CAAAf,cAAA,GAAAW,CAAA,UAAG,IAAI;MAC/BK,kBAAkB;MAAA;MAAA,CAAAhB,cAAA,GAAAW,CAAA,UAAG,EAAE;MACvBM,mBAAmB;MAAA;MAAA,CAAAjB,cAAA,GAAAW,CAAA,UAAG,GAAG;IAAA,CAC1B;IAAA;IAAA,CAAAX,cAAA,GAAAG,CAAA,QAAGO,OAAO;IAAC;IAAAV,cAAA,GAAAG,CAAA;IAEZ,IAAI,CAACO,OAAO,GAAG;MACbK,wBAAwB;MACxBC,kBAAkB;MAClBC;KACD;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACe,kBAAkB,EAAE;IAAC;IAAAlB,cAAA,GAAAG,CAAA;IAE1B,IAAIY,wBAAwB,EAAE;MAAA;MAAAf,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAC5B,IAAI,CAACgB,uBAAuB,EAAE;IAChC,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAAW,CAAA;IAAA;EACH;EAEA;EACAS,QAAQA,CAACC,KAAkC;IAAA;IAAArB,cAAA,GAAAY,CAAA;IACzC,MAAMU,QAAQ;IAAA;IAAA,CAAAtB,cAAA,GAAAG,CAAA,QAAoB;MAChCoB,EAAE,EAAErB,QAAA,CAAAsB,OAAM,CAACC,UAAU,EAAE;MACvB,GAAGJ;KACJ;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACU,MAAM,CAACa,IAAI,CAACJ,QAAQ,CAAC;IAAC;IAAAtB,cAAA,GAAAG,CAAA;IAC3B,OAAOmB,QAAQ;EACjB;EAEAK,WAAWA,CAACC,OAAe;IAAA;IAAA5B,cAAA,GAAAY,CAAA;IACzB,MAAMiB,KAAK;IAAA;IAAA,CAAA7B,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACU,MAAM,CAACiB,SAAS,CAACC,CAAC,IAAI;MAAA;MAAA/B,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAA4B,CAAC,CAACR,EAAE,KAAKK,OAAO;IAAP,CAAO,CAAC;IAAC;IAAA5B,cAAA,GAAAG,CAAA;IAC3D,IAAI0B,KAAK,KAAK,CAAC,CAAC,EAAE;MAAA;MAAA7B,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAE/B,IAAI,CAACU,MAAM,CAACmB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAAC;IAAA7B,cAAA,GAAAG,CAAA;IAC7B,OAAO,IAAI;EACb;EAEA8B,SAASA,CAACC,OAKT;IAAA;IAAAlC,cAAA,GAAAY,CAAA;IACC,IAAIuB,cAAc;IAAA;IAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAG,CAAC,GAAG,IAAI,CAACU,MAAM,CAAC;IAAC;IAAAb,cAAA,GAAAG,CAAA;IAEtC,IAAI+B,OAAO,EAAE;MAAA;MAAAlC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACX,IAAI+B,OAAO,CAACE,QAAQ,EAAE;QAAA;QAAApC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpBgC,cAAc,GAAGA,cAAc,CAACE,MAAM,CAACN,CAAC,IAAI;UAAA;UAAA/B,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4B,CAAC,CAACK,QAAQ,KAAKF,OAAO,CAACE,QAAQ;QAAR,CAAQ,CAAC;MAC9E,CAAC;MAAA;MAAA;QAAApC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAI+B,OAAO,CAACI,SAAS,EAAE;QAAA;QAAAtC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACrBgC,cAAc,GAAGA,cAAc,CAACE,MAAM,CAACN,CAAC,IAAI;UAAA;UAAA/B,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4B,CAAC,CAACO,SAAS,KAAKJ,OAAO,CAACI,SAAS;QAAT,CAAS,CAAC;MAChF,CAAC;MAAA;MAAA;QAAAtC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAI+B,OAAO,CAACK,QAAQ,EAAE;QAAA;QAAAvC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACpBgC,cAAc,GAAGA,cAAc,CAACE,MAAM,CAACN,CAAC,IAAI;UAAA;UAAA/B,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4B,CAAC,CAACQ,QAAQ,KAAKL,OAAO,CAACK,QAAQ;QAAR,CAAQ,CAAC;MAC9E,CAAC;MAAA;MAAA;QAAAvC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,IAAI+B,OAAO,CAACM,SAAS,KAAKC,SAAS,EAAE;QAAA;QAAAzC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACnCgC,cAAc,GAAGA,cAAc,CAACE,MAAM,CAACN,CAAC,IAAI;UAAA;UAAA/B,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4B,CAAC,CAACS,SAAS,KAAKN,OAAO,CAACM,SAAS;QAAT,CAAS,CAAC;MAChF,CAAC;MAAA;MAAA;QAAAxC,cAAA,GAAAW,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,OAAOgC,cAAc;EACvB;EAEA;EACA,MAAMO,QAAQA,CAACd,OAAe;IAAA;IAAA5B,cAAA,GAAAY,CAAA;IAC5B,MAAMS,KAAK;IAAA;IAAA,CAAArB,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACU,MAAM,CAAC8B,IAAI,CAACZ,CAAC,IAAI;MAAA;MAAA/B,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAA4B,CAAC,CAACR,EAAE,KAAKK,OAAO;IAAP,CAAO,CAAC;IAAC;IAAA5B,cAAA,GAAAG,CAAA;IACtD,IAAI,CAACkB,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACV,MAAM,IAAIyC,KAAK,CAAC,SAAShB,OAAO,YAAY,CAAC;IAC/C,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAM0C,MAAM;MAAA;MAAA,CAAA7C,cAAA,GAAAG,CAAA,QAAG,MAAMkB,KAAK,CAACyB,aAAa,EAAE;MAAC;MAAA9C,cAAA,GAAAG,CAAA;MAE3CI,eAAA,CAAAwC,aAAa,CAACC,IAAI,CAAC,oBAAoB,EAAE,oBAAoB3B,KAAK,CAAC4B,IAAI,EAAE,EAAE;QACzErB,OAAO,EAAEP,KAAK,CAACE,EAAE;QACjB2B,MAAM,EAAEL,MAAM,CAACK,MAAM;QACrBC,KAAK,EAAEN,MAAM,CAACM,KAAK;QACnBb,SAAS,EAAEjB,KAAK,CAACiB;OAClB,EAAE,CAAC,YAAY,EAAEjB,KAAK,CAACiB,SAAS,CAACc,WAAW,EAAE,CAAC,CAAC;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAElD,OAAO0C,MAAM;IACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMC,aAAa;MAAA;MAAA,CAAAtD,cAAA,GAAAG,CAAA,QAAqB;QACtCyB,OAAO,EAAEP,KAAK,CAACE,EAAE;QACjBgC,SAAS,EAAE,IAAIC,IAAI,EAAE;QACrBN,MAAM,EAAE,KAAK;QACbC,KAAK,EAAE,CAAC;QACRM,OAAO,EAAE;UACPC,QAAQ,EAAE,CAAC,2BAA2BL,KAAK,YAAYT,KAAK;UAAA;UAAA,CAAA5C,cAAA,GAAAW,CAAA,WAAG0C,KAAK,CAACM,OAAO;UAAA;UAAA,CAAA3D,cAAA,GAAAW,CAAA,WAAG,eAAe,GAAE,CAAC;UACjGiD,eAAe,EAAE,CAAC,0BAA0B,EAAE,6BAA6B,CAAC;UAC5EC,QAAQ,EAAE;;OAEb;MAAC;MAAA7D,cAAA,GAAAG,CAAA;MAEFI,eAAA,CAAAwC,aAAa,CAACM,KAAK,CAAC,oBAAoB,EAAE,iBAAiBhC,KAAK,CAAC4B,IAAI,EAAE,EAAE;QACvErB,OAAO,EAAEP,KAAK,CAACE,EAAE;QACjB8B,KAAK,EAAEA,KAAK,YAAYT,KAAK;QAAA;QAAA,CAAA5C,cAAA,GAAAW,CAAA,WAAG0C,KAAK,CAACM,OAAO;QAAA;QAAA,CAAA3D,cAAA,GAAAW,CAAA,WAAG,eAAe;QAC/D2B,SAAS,EAAEjB,KAAK,CAACiB;OAClB,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MAE5B,OAAOmD,aAAa;IACtB;EACF;EAEA,MAAMQ,YAAYA,CAACxB,SAAwC;IAAA;IAAAtC,cAAA,GAAAY,CAAA;IACzD,MAAMmD,WAAW;IAAA;IAAA,CAAA/D,cAAA,GAAAG,CAAA,QAAGmC,SAAS;IAAA;IAAA,CAAAtC,cAAA,GAAAW,CAAA,WAC3B,IAAI,CAACE,MAAM,CAACwB,MAAM,CAACN,CAAC,IAAI;MAAA;MAAA/B,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAA4B,CAAC,CAACO,SAAS,KAAKA,SAAS;IAAT,CAAS,CAAC;IAAA;IAAA,CAAAtC,cAAA,GAAAW,CAAA,WAClD,IAAI,CAACE,MAAM;IAEb,MAAMmD,OAAO;IAAA;IAAA,CAAAhE,cAAA,GAAAG,CAAA,QAAG,MAAM8D,OAAO,CAACC,UAAU,CACtCH,WAAW,CAACI,GAAG,CAAC9C,KAAK,IAAI;MAAA;MAAArB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,WAAI,CAACuC,QAAQ,CAACrB,KAAK,CAACE,EAAE,CAAC;IAAD,CAAC,CAAC,CAClD;IAAC;IAAAvB,cAAA,GAAAG,CAAA;IAEF,OAAO6D,OAAO,CACX3B,MAAM,CAAEQ,MAAM,IACb;MAAA;MAAA7C,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAA0C,MAAM,CAACuB,MAAM,KAAK,WAAW;IAAX,CAAW,CAC9B,CACAD,GAAG,CAACtB,MAAM,IAAI;MAAA;MAAA7C,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAA0C,MAAM,CAACwB,KAAK;IAAL,CAAK,CAAC;EAChC;EAEA,MAAMC,wBAAwBA,CAAChC,SAAwC;IAAA;IAAAtC,cAAA,GAAAY,CAAA;IACrE,MAAMoD,OAAO;IAAA;IAAA,CAAAhE,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC2D,YAAY,CAACxB,SAAS,CAAC;IAElD,MAAMiC,WAAW;IAAA;IAAA,CAAAvE,cAAA,GAAAG,CAAA,QAAG6D,OAAO,CAACQ,MAAM;IAClC,MAAMtB,MAAM;IAAA;IAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAG6D,OAAO,CAAC3B,MAAM,CAACoC,CAAC,IAAI;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAAsE,CAAC,CAACvB,MAAM;IAAN,CAAM,CAAC,CAACsB,MAAM;IACnD,MAAME,MAAM;IAAA;IAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAGoE,WAAW,GAAGrB,MAAM;IACnC,MAAMyB,gBAAgB;IAAA;IAAA,CAAA3E,cAAA,GAAAG,CAAA,QAAG6D,OAAO,CAAC3B,MAAM,CAACoC,CAAC,IAAI;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAW,CAAA,YAAC8D,CAAC,CAACvB,MAAM;MAAA;MAAA,CAAAlD,cAAA,GAAAW,CAAA,WACpD,IAAI,CAACE,MAAM,CAAC8B,IAAI,CAACZ,CAAC,IAAI;QAAA;QAAA/B,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4B,CAAC,CAACR,EAAE,KAAKkD,CAAC,CAAC7C,OAAO;MAAP,CAAO,CAAC,EAAEW,QAAQ,KAAK,UAAU;IAAV,CAAU,CACnE,CAACiC,MAAM;IAER,MAAMI,YAAY;IAAA;IAAA,CAAA5E,cAAA,GAAAG,CAAA,QAAGoE,WAAW,GAAG,CAAC;IAAA;IAAA,CAAAvE,cAAA,GAAAW,CAAA,WAClCkE,IAAI,CAACC,KAAK,CAACd,OAAO,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEP,CAAC,KAAK;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAA6E,GAAG,GAAGP,CAAC,CAACtB,KAAK;IAAL,CAAK,EAAE,CAAC,CAAC,GAAGoB,WAAW,CAAC;IAAA;IAAA,CAAAvE,cAAA,GAAAW,CAAA,WAAG,CAAC;IAE5E,MAAMyD,MAAM;IAAA;IAAA,CAAApE,cAAA,GAAAG,CAAA,QACVwE,gBAAgB,GAAG,CAAC;IAAA;IAAA,CAAA3E,cAAA,GAAAW,CAAA,WAAG,eAAe;IAAA;IAAA,CAAAX,cAAA,GAAAW,CAAA,WACtC+D,MAAM,KAAK,CAAC;IAAA;IAAA,CAAA1E,cAAA,GAAAW,CAAA,WAAG,WAAW;IAAA;IAAA,CAAAX,cAAA,GAAAW,CAAA,WAAG,qBAAqB;IAEpD;IACA,MAAMsE,kBAAkB;IAAA;IAAA,CAAAjF,cAAA,GAAAG,CAAA,QAAG,IAAI+E,GAAG,EAAU;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IAC7C6D,OAAO,CAACmB,OAAO,CAACtC,MAAM,IAAG;MAAA;MAAA7C,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACvB0C,MAAM,CAACY,OAAO,CAACG,eAAe,CAACuB,OAAO,CAACC,GAAG,IAAI;QAAA;QAAApF,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA8E,kBAAkB,CAACI,GAAG,CAACD,GAAG,CAAC;MAAD,CAAC,CAAC;IAC5E,CAAC,CAAC;IAEF,MAAME,MAAM;IAAA;IAAA,CAAAtF,cAAA,GAAAG,CAAA,QAAqB;MAC/BoB,EAAE,EAAErB,QAAA,CAAAsB,OAAM,CAACC,UAAU,EAAE;MACvB8B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBoB,YAAY;MACZR,MAAM;MACN9B,SAAS;MAAE;MAAA,CAAAtC,cAAA,GAAAW,CAAA,WAAA2B,SAAS;MAAA;MAAA,CAAAtC,cAAA,GAAAW,CAAA,WAAI,KAAK;MAC7BqD,OAAO;MACPuB,OAAO,EAAE;QACPhB,WAAW;QACXrB,MAAM;QACNwB,MAAM;QACNC,gBAAgB;QAChBf,eAAe,EAAE4B,KAAK,CAACC,IAAI,CAACR,kBAAkB,CAAC,CAACS,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;OAC9D;MACDC,cAAc,EAAE,IAAInC,IAAI,CAACA,IAAI,CAACoC,GAAG,EAAE,GAAG,IAAI,CAAClF,OAAO,CAACM,kBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;KACxF;IAAC;IAAAhB,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACW,OAAO,CAACY,IAAI,CAAC4D,MAAM,CAAC;IAEzB;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACAI,eAAA,CAAAwC,aAAa,CAACC,IAAI,CAAC,oBAAoB,EAAE,6BAA6B,EAAE;MACtE6C,QAAQ,EAAEP,MAAM,CAAC/D,EAAE;MACnBe,SAAS,EAAEgD,MAAM,CAAChD,SAAS;MAC3B8B,MAAM,EAAEkB,MAAM,CAAClB,MAAM;MACrBjB,KAAK,EAAEmC,MAAM,CAACV,YAAY;MAC1BL,WAAW;MACXG,MAAM;MACNC;KACD,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAE5B;IAAA;IAAA3E,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAW,CAAA,WAAA2E,MAAM,CAAClB,MAAM,KAAK,eAAe;IAAA;IAAA,CAAApE,cAAA,GAAAW,CAAA,WAAIgE,gBAAgB,GAAG,CAAC,GAAE;MAAA;MAAA3E,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAC7DG,iBAAA,CAAAwF,eAAe,CAACC,gBAAgB,CAAC;QAC/BxD,QAAQ,EAAE,UAAU;QACpByD,IAAI,EAAE,eAAe;QACrBC,MAAM,EAAE,oBAAoB;QAC5BtC,OAAO,EAAE,gCAAgCgB,gBAAgB,oBAAoB;QAC7ElB,OAAO,EAAE;UACPoC,QAAQ,EAAEP,MAAM,CAAC/D,EAAE;UACnBe,SAAS,EAAEgD,MAAM,CAAChD,SAAS;UAC3BqC,gBAAgB;UAChBC;SACD;QACDsB,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlG,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,OAAOmF,MAAM;EACf;EAEAa,UAAUA,CAACC,KAAK;EAAA;EAAA,CAAApG,cAAA,GAAAW,CAAA,WAAG,EAAE;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACnB,OAAO,IAAI,CAACW,OAAO,CAChBuF,IAAI,CAAC,CAACC,CAAC,EAAE3F,CAAC,KAAK;MAAA;MAAAX,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAAQ,CAAC,CAAC4C,SAAS,CAACgD,OAAO,EAAE,GAAGD,CAAC,CAAC/C,SAAS,CAACgD,OAAO,EAAE;IAAF,CAAE,CAAC,CAC7Db,KAAK,CAAC,CAAC,EAAEU,KAAK,CAAC;EACpB;EAEAI,eAAeA,CAAClE,SAAkB;IAAA;IAAAtC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAChC,OAAO,IAAI,CAACW,OAAO,CAChBuB,MAAM,CAACoC,CAAC,IAAI;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAW,CAAA,YAAC2B,SAAS;MAAA;MAAA,CAAAtC,cAAA,GAAAW,CAAA,WAAI8D,CAAC,CAACnC,SAAS,KAAKA,SAAS;IAAT,CAAS,CAAC,CACpD+D,IAAI,CAAC,CAACC,CAAC,EAAE3F,CAAC,KAAK;MAAA;MAAAX,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAAQ,CAAC,CAAC4C,SAAS,CAACgD,OAAO,EAAE,GAAGD,CAAC,CAAC/C,SAAS,CAACgD,OAAO,EAAE;IAAF,CAAE,CAAC,CAAC,CAAC,CAAC;EACrE;EAEA;EACQrF,kBAAkBA,CAAA;IAAA;IAAAlB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACxB;IACA,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,6BAA6B;MACnCwD,WAAW,EAAE,8CAA8C;MAC3DrE,QAAQ,EAAE,UAAU;MACpBE,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAE,MAAM;MAChBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAACwG,mBAAmB,EAAE;MAAF;KACpD,CAAC;IAAC;IAAA3G,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,mBAAmB;MACzBwD,WAAW,EAAE,qCAAqC;MAClDrE,QAAQ,EAAE,UAAU;MACpBE,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAE,UAAU;MACpBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAACyG,qBAAqB,EAAE;MAAF;KACtD,CAAC;IAAC;IAAA5G,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,+BAA+B;MACrCwD,WAAW,EAAE,iDAAiD;MAC9DrE,QAAQ,EAAE,UAAU;MACpBE,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAE,MAAM;MAChBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAAC0G,8BAA8B,EAAE;MAAF;KAC/D,CAAC;IAAC;IAAA7G,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,kBAAkB;MACxBwD,WAAW,EAAE,iDAAiD;MAC9DrE,QAAQ,EAAE,UAAU;MACpBE,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAE,QAAQ;MAClBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAAC2G,oBAAoB,EAAE;MAAF;KACrD,CAAC;IAAC;IAAA9G,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,gBAAgB;MACtBwD,WAAW,EAAE,4CAA4C;MACzDrE,QAAQ,EAAE,UAAU;MACpBE,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,UAAU;MACpBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAAC4G,kBAAkB,EAAE;MAAF;KACnD,CAAC;IAAC;IAAA/G,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,eAAe;MACrBwD,WAAW,EAAE,+CAA+C;MAC5DrE,QAAQ,EAAE,aAAa;MACvBE,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,MAAM;MAChBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAAC6G,iBAAiB,EAAE;MAAF;KAClD,CAAC;IAAC;IAAAhH,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,iBAAiB;MACvBwD,WAAW,EAAE,iDAAiD;MAC9DrE,QAAQ,EAAE,UAAU;MACpBE,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,UAAU;MACpBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAAC8G,mBAAmB,EAAE;MAAF;KACpD,CAAC;IAAC;IAAAjH,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACiB,QAAQ,CAAC;MACZ6B,IAAI,EAAE,2BAA2B;MACjCwD,WAAW,EAAE,yCAAyC;MACtDrE,QAAQ,EAAE,WAAW;MACrBE,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,QAAQ;MAClBmE,QAAQ,EAAE,IAAI;MACdlE,SAAS,EAAE,IAAI;MACfM,aAAa,EAAE,MAAAA,CAAA,KAAY;QAAA;QAAA9C,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,WAAI,CAAC+G,6BAA6B,EAAE;MAAF;KAC9D,CAAC;EACJ;EAEA;EACQ,MAAMP,mBAAmBA,CAAA;IAAA;IAAA3G,cAAA,GAAAY,CAAA;IAC/B,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,QAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IACA,MAAMgH,YAAY;IAAA;IAAA,CAAAnH,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACC,mBAAmB;IAAA;IAAA,CAAAtH,cAAA,GAAAW,CAAA,WAClD4G,QAAQ,CAACH,OAAO,CAACC,GAAG,CAACC,mBAAmB,CAAC,IAAI,CAAC;IAAA;IAAA,CAAAtH,cAAA,GAAAW,CAAA,WAAG,KAAK;IAAC;IAAAX,cAAA,GAAAG,CAAA;IAEzD,IAAI,CAACgH,YAAY,EAAE;MAAA;MAAAnH,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACjBuD,QAAQ,CAAChC,IAAI,CAAC,uDAAuD,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACvEyD,eAAe,CAAClC,IAAI,CAAC,6DAA6D,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACpFgD,KAAK,IAAI,EAAE;IACb,CAAC,MAAM;MAAA;MAAAnD,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACL0D,QAAQ,CAACnC,IAAI,CAAC;QAAEsE,IAAI,EAAE,QAAQ;QAAE3B,KAAK,EAAE,uBAAuB+C,OAAO,CAACC,GAAG,CAACC,mBAAmB;MAAE,CAAE,CAAC;IACpG;IAEA;IACA,MAAME,aAAa;IAAA;IAAA,CAAAxH,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACI,2BAA2B,KAAK,MAAM;IAAC;IAAAzH,cAAA,GAAAG,CAAA;IACzE,IAAI,CAACqH,aAAa,EAAE;MAAA;MAAAxH,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAClBuD,QAAQ,CAAChC,IAAI,CAAC,+CAA+C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC/DyD,eAAe,CAAClC,IAAI,CAAC,yCAAyC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAChEgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK,EAAE0B,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAEvE,KAAK,CAAC;MACzBM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAM+C,qBAAqBA,CAAA;IAAA;IAAA5G,cAAA,GAAAY,CAAA;IACjC,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IACA,MAAMwH,aAAa;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAW,CAAA,WAAAyG,OAAO,CAACC,GAAG,CAACO,WAAW,KAAK,MAAM;IAAA;IAAA,CAAA5H,cAAA,GAAAW,CAAA,WAAIyG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY;IAAC;IAAA7H,cAAA,GAAAG,CAAA;IAElG;IAAI;IAAA,CAAAH,cAAA,GAAAW,CAAA,YAACgH,aAAa;IAAA;IAAA,CAAA3H,cAAA,GAAAW,CAAA,WAAIyG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY,GAAE;MAAA;MAAA7H,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAC3DuD,QAAQ,CAAChC,IAAI,CAAC,8CAA8C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC9DyD,eAAe,CAAClC,IAAI,CAAC,qCAAqC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC5DgD,KAAK,GAAG,CAAC,CAAC,CAAC;IACb,CAAC,MAAM;MAAA;MAAAnD,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACL0D,QAAQ,CAACnC,IAAI,CAAC;QAAEsE,IAAI,EAAE,QAAQ;QAAE3B,KAAK,EAAE,eAAe+C,OAAO,CAACC,GAAG,CAACO,WAAW;MAAE,CAAE,CAAC;IACpF;IAAC;IAAA5H,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK;MACLM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAMgD,8BAA8BA,CAAA;IAAA;IAAA7G,cAAA,GAAAY,CAAA;IAC1C,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEhB,IAAI;MACF;MACA,MAAM2H,eAAe;MAAA;MAAA,CAAA9H,cAAA,GAAAG,CAAA,SAAGG,iBAAA,CAAAwF,eAAe,CAACiC,kBAAkB,EAAE;MAC5D,MAAMC,aAAa;MAAA;MAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAG2H,eAAe,CAACG,uBAAuB;MAAC;MAAAjI,cAAA,GAAAG,CAAA;MAE9D,IAAI6H,aAAa,GAAG,CAAC,EAAE;QAAA;QAAAhI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACrBuD,QAAQ,CAAChC,IAAI,CAAC,GAAGsG,aAAa,iDAAiD,CAAC;QAAC;QAAAhI,cAAA,GAAAG,CAAA;QACjFyD,eAAe,CAAClC,IAAI,CAAC,+DAA+D,CAAC;QAAC;QAAA1B,cAAA,GAAAG,CAAA;QACtFgD,KAAK,GAAG0B,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAEvE,KAAK,GAAI6E,aAAa,GAAG,EAAG,CAAC;MACnD,CAAC;MAAA;MAAA;QAAAhI,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MAED0D,QAAQ,CAACnC,IAAI,CAAC;QACZsE,IAAI,EAAE,aAAa;QACnB3B,KAAK,EAAEyD,eAAe;QACtBI,QAAQ,EAAEJ,eAAe,CAACK;OAC3B,CAAC;IAEJ,CAAC,CAAC,OAAO9E,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACduD,QAAQ,CAAChC,IAAI,CAAC,sCAAsC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACtDyD,eAAe,CAAClC,IAAI,CAAC,mDAAmD,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC1EgD,KAAK,GAAG,EAAE;IACZ;IAAC;IAAAnD,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK;MACLM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAMiD,oBAAoBA,CAAA;IAAA;IAAA9G,cAAA,GAAAY,CAAA;IAChC,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IACA,MAAMiI,eAAe;IAAA;IAAA,CAAApI,cAAA,GAAAG,CAAA,SAAG,CACtB,wBAAwB,EACxB,iBAAiB,EACjB,kBAAkB,EAClB,2BAA2B,EAC3B,yBAAyB,CAC1B;IAED;IACA;IACA,MAAMkI,gBAAgB;IAAA;IAAA,CAAArI,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACiB,uBAAuB,KAAK,MAAM;IAAC;IAAAtI,cAAA,GAAAG,CAAA;IAExE,IAAI,CAACkI,gBAAgB,EAAE;MAAA;MAAArI,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACrBuD,QAAQ,CAAChC,IAAI,CAAC,0CAA0C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC1DyD,eAAe,CAAClC,IAAI,CAAC,4DAA4D,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACnFgD,KAAK,IAAI,EAAE;IACb,CAAC,MAAM;MAAA;MAAAnD,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACL0D,QAAQ,CAACnC,IAAI,CAAC;QAAEsE,IAAI,EAAE,QAAQ;QAAE3B,KAAK,EAAE;MAA0B,CAAE,CAAC;IACtE;IAAC;IAAArE,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK;MACLM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAMkD,kBAAkBA,CAAA;IAAA;IAAA/G,cAAA,GAAAY,CAAA;IAC9B,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IACA,MAAMoI,WAAW;IAAA;IAAA,CAAAvI,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACmB,WAAW,KAAK,MAAM;IACtD,MAAMC,SAAS;IAAA;IAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACqB,UAAU;IAAC;IAAA1I,cAAA,GAAAG,CAAA;IAEzC,IAAI,CAACoI,WAAW,EAAE;MAAA;MAAAvI,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAChBuD,QAAQ,CAAChC,IAAI,CAAC,4BAA4B,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC5CyD,eAAe,CAAClC,IAAI,CAAC,mDAAmD,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC1EgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAW,CAAA,YAAC8H,SAAS;IAAA;IAAA,CAAAzI,cAAA,GAAAW,CAAA,WAAI8H,SAAS,CAACjE,MAAM,GAAG,EAAE,GAAE;MAAA;MAAAxE,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACvCuD,QAAQ,CAAChC,IAAI,CAAC,uCAAuC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACvDyD,eAAe,CAAClC,IAAI,CAAC,kDAAkD,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACzEgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,IAAIoI,WAAW,EAAE;MAAA;MAAAvI,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACf0D,QAAQ,CAACnC,IAAI,CAAC;QAAEsE,IAAI,EAAE,QAAQ;QAAE3B,KAAK,EAAE;MAAwB,CAAE,CAAC;IACpE,CAAC;IAAA;IAAA;MAAArE,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK,EAAE0B,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAEvE,KAAK,CAAC;MACzBM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAMmD,iBAAiBA,CAAA;IAAA;IAAAhH,cAAA,GAAAY,CAAA;IAC7B,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IACA,MAAMwI,YAAY;IAAA;IAAA,CAAA3I,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACuB,oBAAoB,KAAK,MAAM;IAChE,MAAMC,QAAQ;IAAA;IAAA,CAAA7I,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAACyB,SAAS;IAAC;IAAA9I,cAAA,GAAAG,CAAA;IAEvC,IAAI,CAACwI,YAAY,EAAE;MAAA;MAAA3I,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACjBuD,QAAQ,CAAChC,IAAI,CAAC,2BAA2B,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC3CyD,eAAe,CAAClC,IAAI,CAAC,oCAAoC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC3DgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAW,CAAA,WAAAkI,QAAQ;IAAA;IAAA,CAAA7I,cAAA,GAAAW,CAAA,WAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAACoI,QAAQ,CAACF,QAAQ,CAACzF,WAAW,EAAE,CAAC,GAAE;MAAA;MAAApD,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACnEuD,QAAQ,CAAChC,IAAI,CAAC,wDAAwD,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACxEyD,eAAe,CAAClC,IAAI,CAAC,uDAAuD,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC9EgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAED;IACA,MAAMqI,QAAQ;IAAA;IAAA,CAAAhJ,cAAA,GAAAG,CAAA,SAAGI,eAAA,CAAAwC,aAAa,CAACkG,gBAAgB,EAAE;IAAC;IAAAjJ,cAAA,GAAAG,CAAA;IAClD,IAAI6I,QAAQ,CAACE,SAAS,KAAK,CAAC,EAAE;MAAA;MAAAlJ,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAC5BuD,QAAQ,CAAChC,IAAI,CAAC,+CAA+C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC/DyD,eAAe,CAAClC,IAAI,CAAC,+CAA+C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACtEgD,KAAK,IAAI,EAAE;IACb,CAAC,MAAM;MAAA;MAAAnD,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACL0D,QAAQ,CAACnC,IAAI,CAAC;QAAEsE,IAAI,EAAE,WAAW;QAAE3B,KAAK,EAAE2E;MAAQ,CAAE,CAAC;IACvD;IAAC;IAAAhJ,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK,EAAE0B,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAEvE,KAAK,CAAC;MACzBM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAMoD,mBAAmBA,CAAA;IAAA;IAAAjH,cAAA,GAAAY,CAAA;IAC/B,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IACA,MAAMgJ,WAAW;IAAA;IAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAGiH,OAAO,CAACC,GAAG,CAAC+B,kBAAkB,KAAK,MAAM;IAAC;IAAApJ,cAAA,GAAAG,CAAA;IAC9D,IAAI,CAACgJ,WAAW,EAAE;MAAA;MAAAnJ,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAChBuD,QAAQ,CAAChC,IAAI,CAAC,iCAAiC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACjDyD,eAAe,CAAClC,IAAI,CAAC,oCAAoC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC3DgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAED;IACA,MAAM0I,UAAU;IAAA;IAAA,CAAArJ,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAW,CAAA,WAAAyG,OAAO,CAACC,GAAG,CAACiC,UAAU,KAAK,MAAM;IAAA;IAAA,CAAAtJ,cAAA,GAAAW,CAAA,WAAIyG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY;IAAC;IAAA7H,cAAA,GAAAG,CAAA;IAC9F;IAAI;IAAA,CAAAH,cAAA,GAAAW,CAAA,YAAC0I,UAAU;IAAA;IAAA,CAAArJ,cAAA,GAAAW,CAAA,WAAIyG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY,GAAE;MAAA;MAAA7H,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACxDuD,QAAQ,CAAChC,IAAI,CAAC,gCAAgC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAChDyD,eAAe,CAAClC,IAAI,CAAC,4CAA4C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACnEgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK,EAAE0B,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAEvE,KAAK,CAAC;MACzBM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEQ,MAAMqD,6BAA6BA,CAAA;IAAA;IAAAlH,cAAA,GAAAY,CAAA;IACzC,MAAM8C,QAAQ;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAa,EAAE;IAC7B,MAAMyD,eAAe;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAa,EAAE;IACpC,MAAM0D,QAAQ;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAU,EAAE;IAC1B,IAAIgD,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG,GAAG;IAEf;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAW,CAAA,WAAAyG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY;IAAA;IAAA,CAAA7H,cAAA,GAAAW,CAAA,WAAIyG,OAAO,CAACC,GAAG,CAACkC,KAAK,KAAK,MAAM,GAAE;MAAA;MAAAvJ,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACzEuD,QAAQ,CAAChC,IAAI,CAAC,kCAAkC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAClDyD,eAAe,CAAClC,IAAI,CAAC,8CAA8C,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACrEgD,KAAK,IAAI,EAAE;IACb,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAAW,CAAA;IAAA;IAED;IACA,MAAM6I,WAAW;IAAA;IAAA,CAAAxJ,cAAA,GAAAG,CAAA,SAAGsJ,MAAM,CAACC,IAAI,CAACtC,OAAO,CAACC,GAAG,CAAC,CAAChF,MAAM,CAACsH,GAAG,IACrD;MAAA;MAAA3J,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAW,CAAA,WAAAgJ,GAAG,CAACvG,WAAW,EAAE,CAAC2F,QAAQ,CAAC,QAAQ,CAAC;MAAA;MAAA,CAAA/I,cAAA,GAAAW,CAAA,WACpCgJ,GAAG,CAACvG,WAAW,EAAE,CAAC2F,QAAQ,CAAC,UAAU,CAAC;MAAA;MAAA,CAAA/I,cAAA,GAAAW,CAAA,WACtCgJ,GAAG,CAACvG,WAAW,EAAE,CAAC2F,QAAQ,CAAC,KAAK,CAAC;IAAD,CAAC,CAClC;IAAC;IAAA/I,cAAA,GAAAG,CAAA;IAEF,IAAIqJ,WAAW,CAAChF,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAxE,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAC1B0D,QAAQ,CAACnC,IAAI,CAAC;QAAEsE,IAAI,EAAE,UAAU;QAAE4D,KAAK,EAAEJ,WAAW,CAAChF;MAAM,CAAE,CAAC;IAChE,CAAC;IAAA;IAAA;MAAAxE,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAG,CAAA;IAED,OAAO;MACLyB,OAAO,EAAE,EAAE;MACX2B,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBN,MAAM,EAAEQ,QAAQ,CAACc,MAAM,KAAK,CAAC;MAC7BrB,KAAK;MACLM,OAAO,EAAE;QAAEC,QAAQ;QAAEE,eAAe;QAAEC;MAAQ;KAC/C;EACH;EAEA;EACQ1C,uBAAuBA,CAAA;IAAA;IAAAnB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC0J,YAAY,GAAGC,WAAW,CAAC,YAAW;MAAA;MAAA9J,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACzC,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACF,MAAM,IAAI,CAACmE,wBAAwB,EAAE;MACvC,CAAC,CAAC,OAAOjB,KAAK,EAAE;QAAA;QAAArD,cAAA,GAAAG,CAAA;QACdI,eAAA,CAAAwC,aAAa,CAACM,KAAK,CAAC,oBAAoB,EAAE,oCAAoC,EAAE;UAC9EA,KAAK,EAAEA,KAAK,YAAYT,KAAK;UAAA;UAAA,CAAA5C,cAAA,GAAAW,CAAA,WAAG0C,KAAK,CAACM,OAAO;UAAA;UAAA,CAAA3D,cAAA,GAAAW,CAAA,WAAG,eAAe;SAChE,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;MAC7B;IACF,CAAC,EAAE,IAAI,CAACD,OAAO,CAACM,kBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;EACvD;EAEA;EACA+I,oBAAoBA,CAAA;IAAA;IAAA/J,cAAA,GAAAY,CAAA;IAOlB,MAAMoJ,YAAY;IAAA;IAAA,CAAAhK,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACqG,eAAe,EAAE;IAC3C,MAAMyD,aAAa;IAAA;IAAA,CAAAjK,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACW,OAAO,CAACuB,MAAM,CAACoC,CAAC,IACzC;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAAsE,CAAC,CAAClB,SAAS,IAAI,IAAIC,IAAI,CAACA,IAAI,CAACoC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAAD,CAAC,CAC/D;IAED,MAAMsE,MAAM;IAAA;IAAA,CAAAlK,cAAA,GAAAG,CAAA,SAAG8J,aAAa,CAAC9F,GAAG,CAACM,CAAC,IAAK;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA;QACrCgK,IAAI,EAAE1F,CAAC,CAAClB,SAAS,CAAC6G,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7ClH,KAAK,EAAEsB,CAAC,CAACG;OACV;KAAC,CAAC;IAEH,MAAM0F,eAAe;IAAA;IAAA,CAAAtK,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAG,IAAI+E,GAAG,CAAC,IAAI,CAACpE,OAAO,CAACqD,GAAG,CAACM,CAAC,IAAI;MAAA;MAAAzE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAAA,OAAAsE,CAAC,CAACnC,SAAS;IAAT,CAAS,CAAC,CAAC,CAAC,CACrE6B,GAAG,CAAC7B,SAAS,IAAG;MAAA;MAAAtC,cAAA,GAAAY,CAAA;MACf,MAAM2J,qBAAqB;MAAA;MAAA,CAAAvK,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACqG,eAAe,CAAClE,SAAS,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MAC9D,OAAO;QACLmC,SAAS;QACTa,KAAK;QAAE;QAAA,CAAAnD,cAAA,GAAAW,CAAA,WAAA4J,qBAAqB,EAAE3F,YAAY;QAAA;QAAA,CAAA5E,cAAA,GAAAW,CAAA,WAAI,CAAC;OAChD;IACH,CAAC,CAAC;IAAC;IAAAX,cAAA,GAAAG,CAAA;IAEL,OAAO;MACLqK,YAAY;MAAE;MAAA,CAAAxK,cAAA,GAAAW,CAAA,WAAAqJ,YAAY,EAAEpF,YAAY;MAAA;MAAA,CAAA5E,cAAA,GAAAW,CAAA,WAAI,CAAC;MAC7CyD,MAAM;MAAE;MAAA,CAAApE,cAAA,GAAAW,CAAA,WAAAqJ,YAAY,EAAE5F,MAAM;MAAA;MAAA,CAAApE,cAAA,GAAAW,CAAA,WAAI,SAAS;MACzC8J,gBAAgB,EAAEP,MAAM;MACxBI,eAAe;MACfI,cAAc;MAAE;MAAA,CAAA1K,cAAA,GAAAW,CAAA,WAAAqJ,YAAY,EAAEzE,OAAO,CAACZ,gBAAgB;MAAA;MAAA,CAAA3E,cAAA,GAAAW,CAAA,WAAI,CAAC;KAC5D;EACH;EAEA;EACAgK,OAAOA,CAAA;IAAA;IAAA3K,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACL,IAAI,IAAI,CAAC0J,YAAY,EAAE;MAAA;MAAA7J,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MACrByK,aAAa,CAAC,IAAI,CAACf,YAAY,CAAC;IAClC,CAAC;IAAA;IAAA;MAAA7J,cAAA,GAAAW,CAAA;IAAA;EACH;;AACD;AAAAX,cAAA,GAAAG,CAAA;AA/nBD0K,OAAA,CAAArK,iBAAA,GAAAA,iBAAA;AA+nBC;AAAAR,cAAA,GAAAG,CAAA;AAEY0K,OAAA,CAAAC,iBAAiB,GAAG,IAAItK,iBAAiB,CAAC;EACrDO,wBAAwB,EAAEqG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY;EAC/D7G,kBAAkB,EAAE,EAAE;EACtBC,mBAAmB,EAAE;CACtB,CAAC","ignoreList":[]}