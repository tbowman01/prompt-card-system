459e0eeda4656a3bfd8efb1cc2500a32
"use strict";

/* istanbul ignore next */
function cov_1hdarq07p1() {
  var path = "/workspaces/prompt-card-system/backend/src/services/llmService.ts";
  var hash = "843bca87c034a493967583b80dccf92f3ed45cac";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/llmService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "4": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 49
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 79
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "9": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "10": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 33,
          column: 14
        }
      },
      "11": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 33
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "13": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 102
        }
      },
      "14": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 110
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "16": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "17": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 43
        }
      },
      "18": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "19": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "20": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "21": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 74
        }
      },
      "22": {
        start: {
          line: 65,
          column: 56
        },
        end: {
          line: 65,
          column: 66
        }
      },
      "23": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 115
        }
      },
      "24": {
        start: {
          line: 75,
          column: 21
        },
        end: {
          line: 75,
          column: 29
        }
      },
      "25": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "26": {
        start: {
          line: 78,
          column: 26
        },
        end: {
          line: 78,
          column: 71
        }
      },
      "27": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 58
        }
      },
      "28": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 22
        }
      },
      "29": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "30": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 86
        }
      },
      "31": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 60
        }
      },
      "32": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "33": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 72
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "35": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "36": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "37": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 111
        }
      },
      "38": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 65
        }
      },
      "39": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 68
        }
      },
      "40": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "41": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "42": {
        start: {
          line: 122,
          column: 29
        },
        end: {
          line: 122,
          column: 34
        }
      },
      "43": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 170,
          column: 17
        }
      },
      "44": {
        start: {
          line: 125,
          column: 24
        },
        end: {
          line: 125,
          column: 102
        }
      },
      "45": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 30
        }
      },
      "46": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 103
        }
      },
      "47": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 129,
          column: 30
        }
      },
      "48": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 82
        }
      },
      "49": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 30
        }
      },
      "50": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 82
        }
      },
      "51": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 30
        }
      },
      "52": {
        start: {
          line: 137,
          column: 38
        },
        end: {
          line: 137,
          column: 73
        }
      },
      "53": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 52
        }
      },
      "54": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 139,
          column: 30
        }
      },
      "55": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 162,
          column: 25
        }
      },
      "56": {
        start: {
          line: 142,
          column: 28
        },
        end: {
          line: 142,
          column: 71
        }
      },
      "57": {
        start: {
          line: 146,
          column: 45
        },
        end: {
          line: 146,
          column: 68
        }
      },
      "58": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 161,
          column: 29
        }
      },
      "59": {
        start: {
          line: 148,
          column: 51
        },
        end: {
          line: 148,
          column: 99
        }
      },
      "60": {
        start: {
          line: 148,
          column: 80
        },
        end: {
          line: 148,
          column: 98
        }
      },
      "61": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 86
        }
      },
      "62": {
        start: {
          line: 151,
          column: 33
        },
        end: {
          line: 161,
          column: 29
        }
      },
      "63": {
        start: {
          line: 152,
          column: 44
        },
        end: {
          line: 152,
          column: 75
        }
      },
      "64": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 61
        }
      },
      "65": {
        start: {
          line: 155,
          column: 33
        },
        end: {
          line: 161,
          column: 29
        }
      },
      "66": {
        start: {
          line: 156,
          column: 44
        },
        end: {
          line: 156,
          column: 75
        }
      },
      "67": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 157,
          column: 61
        }
      },
      "68": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 160,
          column: 78
        }
      },
      "69": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 30
        }
      },
      "70": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 169,
          column: 26
        }
      },
      "71": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 174,
          column: 18
        }
      },
      "72": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 181,
          column: 18
        }
      },
      "73": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 65
        }
      },
      "74": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 60
        }
      },
      "75": {
        start: {
          line: 198,
          column: 0
        },
        end: {
          line: 198,
          column: 38
        }
      },
      "76": {
        start: {
          line: 199,
          column: 0
        },
        end: {
          line: 199,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 43
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 22
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 60
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 45
          },
          end: {
            line: 65,
            column: 46
          }
        },
        loc: {
          start: {
            line: 65,
            column: 56
          },
          end: {
            line: 65,
            column: 66
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 45
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 74
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 77,
            column: 42
          },
          end: {
            line: 77,
            column: 43
          }
        },
        loc: {
          start: {
            line: 77,
            column: 60
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 77
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 23
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 86
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 58
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 100
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 54
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 119
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 120,
            column: 30
          },
          end: {
            line: 120,
            column: 31
          }
        },
        loc: {
          start: {
            line: 120,
            column: 43
          },
          end: {
            line: 183,
            column: 9
          }
        },
        line: 120
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 148,
            column: 75
          },
          end: {
            line: 148,
            column: 76
          }
        },
        loc: {
          start: {
            line: 148,
            column: 80
          },
          end: {
            line: 148,
            column: 98
          }
        },
        line: 148
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 33
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 29
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 194
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 50
          }
        }, {
          start: {
            line: 11,
            column: 54
          },
          end: {
            line: 11,
            column: 78
          }
        }],
        line: 11
      },
      "4": {
        loc: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 60
          }
        }, {
          start: {
            line: 12,
            column: 64
          },
          end: {
            line: 12,
            column: 72
          }
        }],
        line: 12
      },
      "5": {
        loc: {
          start: {
            line: 20,
            column: 23
          },
          end: {
            line: 20,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 23
          },
          end: {
            line: 20,
            column: 28
          }
        }, {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 20,
            column: 49
          }
        }],
        line: 20
      },
      "6": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "7": {
        loc: {
          start: {
            line: 38,
            column: 54
          },
          end: {
            line: 38,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 54
          },
          end: {
            line: 38,
            column: 81
          }
        }, {
          start: {
            line: 38,
            column: 85
          },
          end: {
            line: 38,
            column: 98
          }
        }],
        line: 38
      },
      "8": {
        loc: {
          start: {
            line: 40,
            column: 50
          },
          end: {
            line: 40,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 75
          },
          end: {
            line: 40,
            column: 88
          }
        }, {
          start: {
            line: 40,
            column: 91
          },
          end: {
            line: 40,
            column: 106
          }
        }],
        line: 40
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 67
          }
        }, {
          start: {
            line: 65,
            column: 71
          },
          end: {
            line: 65,
            column: 73
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 80
          },
          end: {
            line: 68,
            column: 93
          }
        }, {
          start: {
            line: 68,
            column: 96
          },
          end: {
            line: 68,
            column: 111
          }
        }],
        line: 68
      },
      "11": {
        loc: {
          start: {
            line: 103,
            column: 24
          },
          end: {
            line: 103,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 24
          },
          end: {
            line: 103,
            column: 39
          }
        }, {
          start: {
            line: 103,
            column: 43
          },
          end: {
            line: 103,
            column: 45
          }
        }],
        line: 103
      },
      "12": {
        loc: {
          start: {
            line: 104,
            column: 27
          },
          end: {
            line: 104,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 27
          },
          end: {
            line: 104,
            column: 45
          }
        }, {
          start: {
            line: 104,
            column: 49
          },
          end: {
            line: 104,
            column: 51
          }
        }],
        line: 104
      },
      "13": {
        loc: {
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 105,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 105,
            column: 37
          }
        }, {
          start: {
            line: 105,
            column: 41
          },
          end: {
            line: 105,
            column: 58
          }
        }],
        line: 105
      },
      "14": {
        loc: {
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 106,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 106,
            column: 53
          }
        }, {
          start: {
            line: 106,
            column: 57
          },
          end: {
            line: 106,
            column: 58
          }
        }],
        line: 106
      },
      "15": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 170,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 126,
            column: 30
          }
        }, {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 129,
            column: 30
          }
        }, {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 132,
            column: 30
          }
        }, {
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 135,
            column: 30
          }
        }, {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 139,
            column: 30
          }
        }, {
          start: {
            line: 140,
            column: 20
          },
          end: {
            line: 163,
            column: 30
          }
        }, {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 169,
            column: 26
          }
        }],
        line: 123
      },
      "16": {
        loc: {
          start: {
            line: 141,
            column: 24
          },
          end: {
            line: 162,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 24
          },
          end: {
            line: 162,
            column: 25
          }
        }, {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 162,
            column: 25
          }
        }],
        line: 141
      },
      "17": {
        loc: {
          start: {
            line: 147,
            column: 28
          },
          end: {
            line: 161,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 28
          },
          end: {
            line: 161,
            column: 29
          }
        }, {
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        }],
        line: 147
      },
      "18": {
        loc: {
          start: {
            line: 149,
            column: 41
          },
          end: {
            line: 149,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 41
          },
          end: {
            line: 149,
            column: 61
          }
        }, {
          start: {
            line: 149,
            column: 65
          },
          end: {
            line: 149,
            column: 85
          }
        }],
        line: 149
      },
      "19": {
        loc: {
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        }, {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        }],
        line: 151
      },
      "20": {
        loc: {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        }, {
          start: {
            line: 159,
            column: 33
          },
          end: {
            line: 161,
            column: 29
          }
        }],
        line: 155
      },
      "21": {
        loc: {
          start: {
            line: 180,
            column: 27
          },
          end: {
            line: 180,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 52
          },
          end: {
            line: 180,
            column: 65
          }
        }, {
          start: {
            line: 180,
            column: 68
          },
          end: {
            line: 180,
            column: 103
          }
        }],
        line: 180
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/llmService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/llmService.ts"],
      sourcesContent: ["import axios from 'axios';\nimport { assertionEngine, AssertionContext, EnhancedAssertionType, EnhancedAssertionResult } from './assertions';\n\nexport interface LLMResponse {\n  model: string;\n  created_at: string;\n  response: string;\n  done: boolean;\n  context?: number[];\n  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_count?: number;\n  prompt_eval_duration?: number;\n  eval_count?: number;\n  eval_duration?: number;\n}\n\nexport interface LLMRequest {\n  model: string;\n  prompt: string;\n  stream?: boolean;\n  format?: string;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n  };\n}\n\nclass LLMService {\n  private baseUrl: string;\n  public defaultModel: string;\n\n  constructor() {\n    this.baseUrl = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';\n    this.defaultModel = process.env.OLLAMA_DEFAULT_MODEL || 'llama3';\n  }\n\n  /**\n   * Generate text using Ollama LLM\n   */\n  async generate(prompt: string, model?: string, options?: LLMRequest['options']): Promise<LLMResponse> {\n    try {\n      const request: LLMRequest = {\n        model: model || this.defaultModel,\n        prompt,\n        stream: false,\n        options: {\n          temperature: 0.7,\n          ...options\n        }\n      };\n\n      const response = await axios.post(`${this.baseUrl}/api/generate`, request, {\n        timeout: 60000, // 60 second timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      return response.data as LLMResponse;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(`LLM Service Error: ${error.response?.data?.error || error.message}`);\n      }\n      throw new Error(`LLM Service Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if Ollama service is available\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/api/tags`, {\n        timeout: 5000\n      });\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get available models\n   */\n  async getModels(): Promise<string[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/api/tags`, {\n        timeout: 10000\n      });\n      return response.data.models?.map((model: any) => model.name) || [];\n    } catch (error) {\n      throw new Error(`Failed to fetch models: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Substitute variables in prompt template\n   */\n  substituteVariables(template: string, variables: Record<string, any>): string {\n    let result = template;\n    \n    // Replace variables in format {{variable_name}}\n    Object.entries(variables).forEach(([key, value]) => {\n      const regex = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(regex, String(value));\n    });\n\n    return result;\n  }\n\n  /**\n   * Initialize the LLM service with enhanced assertion engine\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing LLM Service with Enhanced Assertion Engine...');\n      await assertionEngine.initialize();\n      console.log('\u2705 LLM Service initialized successfully');\n    } catch (error) {\n      console.error('\u274C Failed to initialize LLM Service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate assertions against LLM output using enhanced assertion engine\n   */\n  async validateAssertions(\n    output: string, \n    assertions: EnhancedAssertionType[],\n    context?: {\n      prompt?: string;\n      variables?: Record<string, any>;\n      model?: string;\n      executionTime?: number;\n    }\n  ): Promise<EnhancedAssertionResult[]> {\n    try {\n      const assertionContext: AssertionContext = {\n        prompt: context?.prompt || '',\n        variables: context?.variables || {},\n        model: context?.model || this.defaultModel,\n        executionTime: context?.executionTime || 0\n      };\n\n      return await assertionEngine.validateAssertions(output, assertions, assertionContext);\n    } catch (error) {\n      console.error('Error validating assertions:', error);\n      // Fallback to basic validation for compatibility\n      return this.validateAssertionsBasic(output, assertions);\n    }\n  }\n\n  /**\n   * Fallback basic assertion validation for compatibility\n   */\n  private async validateAssertionsBasic(\n    output: string, \n    assertions: EnhancedAssertionType[]\n  ): Promise<EnhancedAssertionResult[]> {\n    return assertions.map(assertion => {\n      try {\n        let passed = false;\n\n        switch (assertion.type) {\n          case 'contains':\n            passed = output.toLowerCase().includes(String(assertion.value).toLowerCase());\n            break;\n          \n          case 'not-contains':\n            passed = !output.toLowerCase().includes(String(assertion.value).toLowerCase());\n            break;\n          \n          case 'equals':\n            passed = output.trim() === String(assertion.value).trim();\n            break;\n          \n          case 'not-equals':\n            passed = output.trim() !== String(assertion.value).trim();\n            break;\n          \n          case 'regex':\n            const regex = new RegExp(String(assertion.value));\n            passed = regex.test(output);\n            break;\n          \n          case 'length':\n            if (typeof assertion.value === 'number') {\n              passed = output.length === assertion.value;\n            } else {\n              // Support range: \"10-20\" or \">10\" or \"<100\"\n              const valueStr = String(assertion.value);\n              if (valueStr.includes('-')) {\n                const [min, max] = valueStr.split('-').map(v => parseInt(v.trim()));\n                passed = output.length >= min && output.length <= max;\n              } else if (valueStr.startsWith('>')) {\n                const min = parseInt(valueStr.substring(1));\n                passed = output.length > min;\n              } else if (valueStr.startsWith('<')) {\n                const max = parseInt(valueStr.substring(1));\n                passed = output.length < max;\n              } else {\n                passed = output.length === parseInt(valueStr);\n              }\n            }\n            break;\n          \n          default:\n            return {\n              assertion,\n              passed: false,\n              error: `Unsupported assertion type in basic validation: ${assertion.type}`\n            };\n        }\n\n        return {\n          assertion,\n          passed\n        };\n      } catch (error) {\n        return {\n          assertion,\n          passed: false,\n          error: error instanceof Error ? error.message : 'Basic assertion validation failed'\n        };\n      }\n    });\n  }\n\n  /**\n   * Get available assertion types from the engine\n   */\n  getAvailableAssertionTypes(): string[] {\n    return assertionEngine.getRegisteredTypes();\n  }\n\n  /**\n   * Get assertion execution statistics\n   */\n  getAssertionStatistics(): {\n    totalAssertions: number;\n    successfulAssertions: number;\n    failedAssertions: number;\n    averageExecutionTime: number;\n  } {\n    return assertionEngine.getStatistics();\n  }\n}\n\nexport const llmService = new LLMService();\nexport default llmService;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "843bca87c034a493967583b80dccf92f3ed45cac"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hdarq07p1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hdarq07p1();
var __importDefault =
/* istanbul ignore next */
(cov_1hdarq07p1().s[0]++,
/* istanbul ignore next */
(cov_1hdarq07p1().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1hdarq07p1().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1hdarq07p1().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1hdarq07p1().f[0]++;
  cov_1hdarq07p1().s[1]++;
  return /* istanbul ignore next */(cov_1hdarq07p1().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1hdarq07p1().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1hdarq07p1().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1hdarq07p1().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1hdarq07p1().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1hdarq07p1().s[3]++;
exports.llmService = void 0;
const axios_1 =
/* istanbul ignore next */
(cov_1hdarq07p1().s[4]++, __importDefault(require("axios")));
const assertions_1 =
/* istanbul ignore next */
(cov_1hdarq07p1().s[5]++, require("./assertions"));
class LLMService {
  constructor() {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[1]++;
    cov_1hdarq07p1().s[6]++;
    this.baseUrl =
    /* istanbul ignore next */
    (cov_1hdarq07p1().b[3][0]++, process.env.OLLAMA_BASE_URL) ||
    /* istanbul ignore next */
    (cov_1hdarq07p1().b[3][1]++, 'http://localhost:11434');
    /* istanbul ignore next */
    cov_1hdarq07p1().s[7]++;
    this.defaultModel =
    /* istanbul ignore next */
    (cov_1hdarq07p1().b[4][0]++, process.env.OLLAMA_DEFAULT_MODEL) ||
    /* istanbul ignore next */
    (cov_1hdarq07p1().b[4][1]++, 'llama3');
  }
  /**
   * Generate text using Ollama LLM
   */
  async generate(prompt, model, options) {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[2]++;
    cov_1hdarq07p1().s[8]++;
    try {
      const request =
      /* istanbul ignore next */
      (cov_1hdarq07p1().s[9]++, {
        model:
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[5][0]++, model) ||
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[5][1]++, this.defaultModel),
        prompt,
        stream: false,
        options: {
          temperature: 0.7,
          ...options
        }
      });
      const response =
      /* istanbul ignore next */
      (cov_1hdarq07p1().s[10]++, await axios_1.default.post(`${this.baseUrl}/api/generate`, request, {
        timeout: 60000,
        // 60 second timeout
        headers: {
          'Content-Type': 'application/json'
        }
      }));
      /* istanbul ignore next */
      cov_1hdarq07p1().s[11]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_1hdarq07p1().s[12]++;
      if (axios_1.default.isAxiosError(error)) {
        /* istanbul ignore next */
        cov_1hdarq07p1().b[6][0]++;
        cov_1hdarq07p1().s[13]++;
        throw new Error(`LLM Service Error: ${
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[7][0]++, error.response?.data?.error) ||
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[7][1]++, error.message)}`);
      } else
      /* istanbul ignore next */
      {
        cov_1hdarq07p1().b[6][1]++;
      }
      cov_1hdarq07p1().s[14]++;
      throw new Error(`LLM Service Error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1hdarq07p1().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1hdarq07p1().b[8][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Check if Ollama service is available
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[3]++;
    cov_1hdarq07p1().s[15]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hdarq07p1().s[16]++, await axios_1.default.get(`${this.baseUrl}/api/tags`, {
        timeout: 5000
      }));
      /* istanbul ignore next */
      cov_1hdarq07p1().s[17]++;
      return response.status === 200;
    } catch (error) {
      /* istanbul ignore next */
      cov_1hdarq07p1().s[18]++;
      return false;
    }
  }
  /**
   * Get available models
   */
  async getModels() {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[4]++;
    cov_1hdarq07p1().s[19]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hdarq07p1().s[20]++, await axios_1.default.get(`${this.baseUrl}/api/tags`, {
        timeout: 10000
      }));
      /* istanbul ignore next */
      cov_1hdarq07p1().s[21]++;
      return /* istanbul ignore next */(cov_1hdarq07p1().b[9][0]++, response.data.models?.map(model => {
        /* istanbul ignore next */
        cov_1hdarq07p1().f[5]++;
        cov_1hdarq07p1().s[22]++;
        return model.name;
      })) ||
      /* istanbul ignore next */
      (cov_1hdarq07p1().b[9][1]++, []);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hdarq07p1().s[23]++;
      throw new Error(`Failed to fetch models: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1hdarq07p1().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1hdarq07p1().b[10][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Substitute variables in prompt template
   */
  substituteVariables(template, variables) {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[6]++;
    let result =
    /* istanbul ignore next */
    (cov_1hdarq07p1().s[24]++, template);
    // Replace variables in format {{variable_name}}
    /* istanbul ignore next */
    cov_1hdarq07p1().s[25]++;
    Object.entries(variables).forEach(([key, value]) => {
      /* istanbul ignore next */
      cov_1hdarq07p1().f[7]++;
      const regex =
      /* istanbul ignore next */
      (cov_1hdarq07p1().s[26]++, new RegExp(`\\{\\{\\s*${key}\\s*\\}\\}`, 'g'));
      /* istanbul ignore next */
      cov_1hdarq07p1().s[27]++;
      result = result.replace(regex, String(value));
    });
    /* istanbul ignore next */
    cov_1hdarq07p1().s[28]++;
    return result;
  }
  /**
   * Initialize the LLM service with enhanced assertion engine
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[8]++;
    cov_1hdarq07p1().s[29]++;
    try {
      /* istanbul ignore next */
      cov_1hdarq07p1().s[30]++;
      console.log('Initializing LLM Service with Enhanced Assertion Engine...');
      /* istanbul ignore next */
      cov_1hdarq07p1().s[31]++;
      await assertions_1.assertionEngine.initialize();
      /* istanbul ignore next */
      cov_1hdarq07p1().s[32]++;
      console.log('✅ LLM Service initialized successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1hdarq07p1().s[33]++;
      console.error('❌ Failed to initialize LLM Service:', error);
      /* istanbul ignore next */
      cov_1hdarq07p1().s[34]++;
      throw error;
    }
  }
  /**
   * Validate assertions against LLM output using enhanced assertion engine
   */
  async validateAssertions(output, assertions, context) {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[9]++;
    cov_1hdarq07p1().s[35]++;
    try {
      const assertionContext =
      /* istanbul ignore next */
      (cov_1hdarq07p1().s[36]++, {
        prompt:
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[11][0]++, context?.prompt) ||
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[11][1]++, ''),
        variables:
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[12][0]++, context?.variables) ||
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[12][1]++, {}),
        model:
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[13][0]++, context?.model) ||
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[13][1]++, this.defaultModel),
        executionTime:
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[14][0]++, context?.executionTime) ||
        /* istanbul ignore next */
        (cov_1hdarq07p1().b[14][1]++, 0)
      });
      /* istanbul ignore next */
      cov_1hdarq07p1().s[37]++;
      return await assertions_1.assertionEngine.validateAssertions(output, assertions, assertionContext);
    } catch (error) {
      /* istanbul ignore next */
      cov_1hdarq07p1().s[38]++;
      console.error('Error validating assertions:', error);
      // Fallback to basic validation for compatibility
      /* istanbul ignore next */
      cov_1hdarq07p1().s[39]++;
      return this.validateAssertionsBasic(output, assertions);
    }
  }
  /**
   * Fallback basic assertion validation for compatibility
   */
  async validateAssertionsBasic(output, assertions) {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[10]++;
    cov_1hdarq07p1().s[40]++;
    return assertions.map(assertion => {
      /* istanbul ignore next */
      cov_1hdarq07p1().f[11]++;
      cov_1hdarq07p1().s[41]++;
      try {
        let passed =
        /* istanbul ignore next */
        (cov_1hdarq07p1().s[42]++, false);
        /* istanbul ignore next */
        cov_1hdarq07p1().s[43]++;
        switch (assertion.type) {
          case 'contains':
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][0]++;
            cov_1hdarq07p1().s[44]++;
            passed = output.toLowerCase().includes(String(assertion.value).toLowerCase());
            /* istanbul ignore next */
            cov_1hdarq07p1().s[45]++;
            break;
          case 'not-contains':
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][1]++;
            cov_1hdarq07p1().s[46]++;
            passed = !output.toLowerCase().includes(String(assertion.value).toLowerCase());
            /* istanbul ignore next */
            cov_1hdarq07p1().s[47]++;
            break;
          case 'equals':
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][2]++;
            cov_1hdarq07p1().s[48]++;
            passed = output.trim() === String(assertion.value).trim();
            /* istanbul ignore next */
            cov_1hdarq07p1().s[49]++;
            break;
          case 'not-equals':
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][3]++;
            cov_1hdarq07p1().s[50]++;
            passed = output.trim() !== String(assertion.value).trim();
            /* istanbul ignore next */
            cov_1hdarq07p1().s[51]++;
            break;
          case 'regex':
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][4]++;
            const regex =
            /* istanbul ignore next */
            (cov_1hdarq07p1().s[52]++, new RegExp(String(assertion.value)));
            /* istanbul ignore next */
            cov_1hdarq07p1().s[53]++;
            passed = regex.test(output);
            /* istanbul ignore next */
            cov_1hdarq07p1().s[54]++;
            break;
          case 'length':
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][5]++;
            cov_1hdarq07p1().s[55]++;
            if (typeof assertion.value === 'number') {
              /* istanbul ignore next */
              cov_1hdarq07p1().b[16][0]++;
              cov_1hdarq07p1().s[56]++;
              passed = output.length === assertion.value;
            } else {
              /* istanbul ignore next */
              cov_1hdarq07p1().b[16][1]++;
              // Support range: "10-20" or ">10" or "<100"
              const valueStr =
              /* istanbul ignore next */
              (cov_1hdarq07p1().s[57]++, String(assertion.value));
              /* istanbul ignore next */
              cov_1hdarq07p1().s[58]++;
              if (valueStr.includes('-')) {
                /* istanbul ignore next */
                cov_1hdarq07p1().b[17][0]++;
                const [min, max] =
                /* istanbul ignore next */
                (cov_1hdarq07p1().s[59]++, valueStr.split('-').map(v => {
                  /* istanbul ignore next */
                  cov_1hdarq07p1().f[12]++;
                  cov_1hdarq07p1().s[60]++;
                  return parseInt(v.trim());
                }));
                /* istanbul ignore next */
                cov_1hdarq07p1().s[61]++;
                passed =
                /* istanbul ignore next */
                (cov_1hdarq07p1().b[18][0]++, output.length >= min) &&
                /* istanbul ignore next */
                (cov_1hdarq07p1().b[18][1]++, output.length <= max);
              } else {
                /* istanbul ignore next */
                cov_1hdarq07p1().b[17][1]++;
                cov_1hdarq07p1().s[62]++;
                if (valueStr.startsWith('>')) {
                  /* istanbul ignore next */
                  cov_1hdarq07p1().b[19][0]++;
                  const min =
                  /* istanbul ignore next */
                  (cov_1hdarq07p1().s[63]++, parseInt(valueStr.substring(1)));
                  /* istanbul ignore next */
                  cov_1hdarq07p1().s[64]++;
                  passed = output.length > min;
                } else {
                  /* istanbul ignore next */
                  cov_1hdarq07p1().b[19][1]++;
                  cov_1hdarq07p1().s[65]++;
                  if (valueStr.startsWith('<')) {
                    /* istanbul ignore next */
                    cov_1hdarq07p1().b[20][0]++;
                    const max =
                    /* istanbul ignore next */
                    (cov_1hdarq07p1().s[66]++, parseInt(valueStr.substring(1)));
                    /* istanbul ignore next */
                    cov_1hdarq07p1().s[67]++;
                    passed = output.length < max;
                  } else {
                    /* istanbul ignore next */
                    cov_1hdarq07p1().b[20][1]++;
                    cov_1hdarq07p1().s[68]++;
                    passed = output.length === parseInt(valueStr);
                  }
                }
              }
            }
            /* istanbul ignore next */
            cov_1hdarq07p1().s[69]++;
            break;
          default:
            /* istanbul ignore next */
            cov_1hdarq07p1().b[15][6]++;
            cov_1hdarq07p1().s[70]++;
            return {
              assertion,
              passed: false,
              error: `Unsupported assertion type in basic validation: ${assertion.type}`
            };
        }
        /* istanbul ignore next */
        cov_1hdarq07p1().s[71]++;
        return {
          assertion,
          passed
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1hdarq07p1().s[72]++;
        return {
          assertion,
          passed: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1hdarq07p1().b[21][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1hdarq07p1().b[21][1]++, 'Basic assertion validation failed')
        };
      }
    });
  }
  /**
   * Get available assertion types from the engine
   */
  getAvailableAssertionTypes() {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[13]++;
    cov_1hdarq07p1().s[73]++;
    return assertions_1.assertionEngine.getRegisteredTypes();
  }
  /**
   * Get assertion execution statistics
   */
  getAssertionStatistics() {
    /* istanbul ignore next */
    cov_1hdarq07p1().f[14]++;
    cov_1hdarq07p1().s[74]++;
    return assertions_1.assertionEngine.getStatistics();
  }
}
/* istanbul ignore next */
cov_1hdarq07p1().s[75]++;
exports.llmService = new LLMService();
/* istanbul ignore next */
cov_1hdarq07p1().s[76]++;
exports.default = exports.llmService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,