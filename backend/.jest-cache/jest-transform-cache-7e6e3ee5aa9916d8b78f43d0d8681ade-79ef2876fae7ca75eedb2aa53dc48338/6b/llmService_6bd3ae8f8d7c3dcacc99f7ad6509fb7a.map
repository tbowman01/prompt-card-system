{"version":3,"names":["cov_1hdarq07p1","actualCoverage","axios_1","s","__importDefault","require","assertions_1","LLMService","constructor","f","baseUrl","b","process","env","OLLAMA_BASE_URL","defaultModel","OLLAMA_DEFAULT_MODEL","generate","prompt","model","options","request","stream","temperature","response","default","post","timeout","headers","data","error","isAxiosError","Error","message","healthCheck","get","status","getModels","models","map","name","substituteVariables","template","variables","result","Object","entries","forEach","key","value","regex","RegExp","replace","String","initialize","console","log","assertionEngine","validateAssertions","output","assertions","context","assertionContext","executionTime","validateAssertionsBasic","assertion","passed","type","toLowerCase","includes","trim","test","length","valueStr","min","max","split","v","parseInt","startsWith","substring","getAvailableAssertionTypes","getRegisteredTypes","getAssertionStatistics","getStatistics","exports","llmService"],"sources":["/workspaces/prompt-card-system/backend/src/services/llmService.ts"],"sourcesContent":["import axios from 'axios';\nimport { assertionEngine, AssertionContext, EnhancedAssertionType, EnhancedAssertionResult } from './assertions';\n\nexport interface LLMResponse {\n  model: string;\n  created_at: string;\n  response: string;\n  done: boolean;\n  context?: number[];\n  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_count?: number;\n  prompt_eval_duration?: number;\n  eval_count?: number;\n  eval_duration?: number;\n}\n\nexport interface LLMRequest {\n  model: string;\n  prompt: string;\n  stream?: boolean;\n  format?: string;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_predict?: number;\n  };\n}\n\nclass LLMService {\n  private baseUrl: string;\n  public defaultModel: string;\n\n  constructor() {\n    this.baseUrl = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';\n    this.defaultModel = process.env.OLLAMA_DEFAULT_MODEL || 'llama3';\n  }\n\n  /**\n   * Generate text using Ollama LLM\n   */\n  async generate(prompt: string, model?: string, options?: LLMRequest['options']): Promise<LLMResponse> {\n    try {\n      const request: LLMRequest = {\n        model: model || this.defaultModel,\n        prompt,\n        stream: false,\n        options: {\n          temperature: 0.7,\n          ...options\n        }\n      };\n\n      const response = await axios.post(`${this.baseUrl}/api/generate`, request, {\n        timeout: 60000, // 60 second timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      return response.data as LLMResponse;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(`LLM Service Error: ${error.response?.data?.error || error.message}`);\n      }\n      throw new Error(`LLM Service Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if Ollama service is available\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/api/tags`, {\n        timeout: 5000\n      });\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get available models\n   */\n  async getModels(): Promise<string[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/api/tags`, {\n        timeout: 10000\n      });\n      return response.data.models?.map((model: any) => model.name) || [];\n    } catch (error) {\n      throw new Error(`Failed to fetch models: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Substitute variables in prompt template\n   */\n  substituteVariables(template: string, variables: Record<string, any>): string {\n    let result = template;\n    \n    // Replace variables in format {{variable_name}}\n    Object.entries(variables).forEach(([key, value]) => {\n      const regex = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, 'g');\n      result = result.replace(regex, String(value));\n    });\n\n    return result;\n  }\n\n  /**\n   * Initialize the LLM service with enhanced assertion engine\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing LLM Service with Enhanced Assertion Engine...');\n      await assertionEngine.initialize();\n      console.log('✅ LLM Service initialized successfully');\n    } catch (error) {\n      console.error('❌ Failed to initialize LLM Service:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate assertions against LLM output using enhanced assertion engine\n   */\n  async validateAssertions(\n    output: string, \n    assertions: EnhancedAssertionType[],\n    context?: {\n      prompt?: string;\n      variables?: Record<string, any>;\n      model?: string;\n      executionTime?: number;\n    }\n  ): Promise<EnhancedAssertionResult[]> {\n    try {\n      const assertionContext: AssertionContext = {\n        prompt: context?.prompt || '',\n        variables: context?.variables || {},\n        model: context?.model || this.defaultModel,\n        executionTime: context?.executionTime || 0\n      };\n\n      return await assertionEngine.validateAssertions(output, assertions, assertionContext);\n    } catch (error) {\n      console.error('Error validating assertions:', error);\n      // Fallback to basic validation for compatibility\n      return this.validateAssertionsBasic(output, assertions);\n    }\n  }\n\n  /**\n   * Fallback basic assertion validation for compatibility\n   */\n  private async validateAssertionsBasic(\n    output: string, \n    assertions: EnhancedAssertionType[]\n  ): Promise<EnhancedAssertionResult[]> {\n    return assertions.map(assertion => {\n      try {\n        let passed = false;\n\n        switch (assertion.type) {\n          case 'contains':\n            passed = output.toLowerCase().includes(String(assertion.value).toLowerCase());\n            break;\n          \n          case 'not-contains':\n            passed = !output.toLowerCase().includes(String(assertion.value).toLowerCase());\n            break;\n          \n          case 'equals':\n            passed = output.trim() === String(assertion.value).trim();\n            break;\n          \n          case 'not-equals':\n            passed = output.trim() !== String(assertion.value).trim();\n            break;\n          \n          case 'regex':\n            const regex = new RegExp(String(assertion.value));\n            passed = regex.test(output);\n            break;\n          \n          case 'length':\n            if (typeof assertion.value === 'number') {\n              passed = output.length === assertion.value;\n            } else {\n              // Support range: \"10-20\" or \">10\" or \"<100\"\n              const valueStr = String(assertion.value);\n              if (valueStr.includes('-')) {\n                const [min, max] = valueStr.split('-').map(v => parseInt(v.trim()));\n                passed = output.length >= min && output.length <= max;\n              } else if (valueStr.startsWith('>')) {\n                const min = parseInt(valueStr.substring(1));\n                passed = output.length > min;\n              } else if (valueStr.startsWith('<')) {\n                const max = parseInt(valueStr.substring(1));\n                passed = output.length < max;\n              } else {\n                passed = output.length === parseInt(valueStr);\n              }\n            }\n            break;\n          \n          default:\n            return {\n              assertion,\n              passed: false,\n              error: `Unsupported assertion type in basic validation: ${assertion.type}`\n            };\n        }\n\n        return {\n          assertion,\n          passed\n        };\n      } catch (error) {\n        return {\n          assertion,\n          passed: false,\n          error: error instanceof Error ? error.message : 'Basic assertion validation failed'\n        };\n      }\n    });\n  }\n\n  /**\n   * Get available assertion types from the engine\n   */\n  getAvailableAssertionTypes(): string[] {\n    return assertionEngine.getRegisteredTypes();\n  }\n\n  /**\n   * Get assertion execution statistics\n   */\n  getAssertionStatistics(): {\n    totalAssertions: number;\n    successfulAssertions: number;\n    failedAssertions: number;\n    averageExecutionTime: number;\n  } {\n    return assertionEngine.getStatistics();\n  }\n}\n\nexport const llmService = new LLMService();\nexport default llmService;"],"mappingsyCK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCL,MAAAE,OAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,YAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAAE,OAAA;AA6BA,MAAME,UAAU;EAIdC,YAAA;IAAA;IAAAR,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACE,IAAI,CAACO,OAAO;IAAG;IAAA,CAAAV,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACC,eAAe;IAAA;IAAA,CAAAd,cAAA,GAAAW,CAAA,UAAI,wBAAwB;IAAC;IAAAX,cAAA,GAAAG,CAAA;IACvE,IAAI,CAACY,YAAY;IAAG;IAAA,CAAAf,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACG,oBAAoB;IAAA;IAAA,CAAAhB,cAAA,GAAAW,CAAA,UAAI,QAAQ;EAClE;EAEA;;;EAGA,MAAMM,QAAQA,CAACC,MAAc,EAAEC,KAAc,EAAEC,OAA+B;IAAA;IAAApB,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IAC5E,IAAI;MACF,MAAMkB,OAAO;MAAA;MAAA,CAAArB,cAAA,GAAAG,CAAA,OAAe;QAC1BgB,KAAK;QAAE;QAAA,CAAAnB,cAAA,GAAAW,CAAA,UAAAQ,KAAK;QAAA;QAAA,CAAAnB,cAAA,GAAAW,CAAA,UAAI,IAAI,CAACI,YAAY;QACjCG,MAAM;QACNI,MAAM,EAAE,KAAK;QACbF,OAAO,EAAE;UACPG,WAAW,EAAE,GAAG;UAChB,GAAGH;;OAEN;MAED,MAAMI,QAAQ;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,MAAMD,OAAA,CAAAuB,OAAK,CAACC,IAAI,CAAC,GAAG,IAAI,CAAChB,OAAO,eAAe,EAAEW,OAAO,EAAE;QACzEM,OAAO,EAAE,KAAK;QAAE;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE;;OAEnB,CAAC;MAAC;MAAA5B,cAAA,GAAAG,CAAA;MAEH,OAAOqB,QAAQ,CAACK,IAAmB;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MACd,IAAID,OAAA,CAAAuB,OAAK,CAACM,YAAY,CAACD,KAAK,CAAC,EAAE;QAAA;QAAA9B,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAC7B,MAAM,IAAI6B,KAAK,CAAC;QAAsB;QAAA,CAAAhC,cAAA,GAAAW,CAAA,UAAAmB,KAAK,CAACN,QAAQ,EAAEK,IAAI,EAAEC,KAAK;QAAA;QAAA,CAAA9B,cAAA,GAAAW,CAAA,UAAImB,KAAK,CAACG,OAAO,GAAE,CAAC;MACvF,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACD,MAAM,IAAI6B,KAAK,CAAC,sBAAsBF,KAAK,YAAYE,KAAK;MAAA;MAAA,CAAAhC,cAAA,GAAAW,CAAA,UAAGmB,KAAK,CAACG,OAAO;MAAA;MAAA,CAAAjC,cAAA,GAAAW,CAAA,UAAG,eAAe,GAAE,CAAC;IACnG;EACF;EAEA;;;EAGA,MAAMuB,WAAWA,CAAA;IAAA;IAAAlC,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACf,IAAI;MACF,MAAMqB,QAAQ;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,MAAMD,OAAA,CAAAuB,OAAK,CAACU,GAAG,CAAC,GAAG,IAAI,CAACzB,OAAO,WAAW,EAAE;QAC3DiB,OAAO,EAAE;OACV,CAAC;MAAC;MAAA3B,cAAA,GAAAG,CAAA;MACH,OAAOqB,QAAQ,CAACY,MAAM,KAAK,GAAG;IAChC,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MACd,OAAO,KAAK;IACd;EACF;EAEA;;;EAGA,MAAMkC,SAASA,CAAA;IAAA;IAAArC,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACb,IAAI;MACF,MAAMqB,QAAQ;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,MAAMD,OAAA,CAAAuB,OAAK,CAACU,GAAG,CAAC,GAAG,IAAI,CAACzB,OAAO,WAAW,EAAE;QAC3DiB,OAAO,EAAE;OACV,CAAC;MAAC;MAAA3B,cAAA,GAAAG,CAAA;MACH,OAAO,2BAAAH,cAAA,GAAAW,CAAA,UAAAa,QAAQ,CAACK,IAAI,CAACS,MAAM,EAAEC,GAAG,CAAEpB,KAAU,IAAK;QAAA;QAAAnB,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QAAA,OAAAgB,KAAK,CAACqB,IAAI;MAAJ,CAAI,CAAC;MAAA;MAAA,CAAAxC,cAAA,GAAAW,CAAA,UAAI,EAAE;IACpE,CAAC,CAAC,OAAOmB,KAAK,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MACd,MAAM,IAAI6B,KAAK,CAAC,2BAA2BF,KAAK,YAAYE,KAAK;MAAA;MAAA,CAAAhC,cAAA,GAAAW,CAAA,WAAGmB,KAAK,CAACG,OAAO;MAAA;MAAA,CAAAjC,cAAA,GAAAW,CAAA,WAAG,eAAe,GAAE,CAAC;IACxG;EACF;EAEA;;;EAGA8B,mBAAmBA,CAACC,QAAgB,EAAEC,SAA8B;IAAA;IAAA3C,cAAA,GAAAS,CAAA;IAClE,IAAImC,MAAM;IAAA;IAAA,CAAA5C,cAAA,GAAAG,CAAA,QAAGuC,QAAQ;IAErB;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACA0C,MAAM,CAACC,OAAO,CAACH,SAAS,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAI;MAAA;MAAAjD,cAAA,GAAAS,CAAA;MACjD,MAAMyC,KAAK;MAAA;MAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAG,IAAIgD,MAAM,CAAC,aAAaH,GAAG,YAAY,EAAE,GAAG,CAAC;MAAC;MAAAhD,cAAA,GAAAG,CAAA;MAC5DyC,MAAM,GAAGA,MAAM,CAACQ,OAAO,CAACF,KAAK,EAAEG,MAAM,CAACJ,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;IAAC;IAAAjD,cAAA,GAAAG,CAAA;IAEH,OAAOyC,MAAM;EACf;EAEA;;;EAGA,MAAMU,UAAUA,CAAA;IAAA;IAAAtD,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACd,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFoD,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;MAAC;MAAAxD,cAAA,GAAAG,CAAA;MAC1E,MAAMG,YAAA,CAAAmD,eAAe,CAACH,UAAU,EAAE;MAAC;MAAAtD,cAAA,GAAAG,CAAA;MACnCoD,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACvD,CAAC,CAAC,OAAO1B,KAAK,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MACdoD,OAAO,CAACzB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAA9B,cAAA,GAAAG,CAAA;MAC5D,MAAM2B,KAAK;IACb;EACF;EAEA;;;EAGA,MAAM4B,kBAAkBA,CACtBC,MAAc,EACdC,UAAmC,EACnCC,OAKC;IAAA;IAAA7D,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAM2D,gBAAgB;MAAA;MAAA,CAAA9D,cAAA,GAAAG,CAAA,QAAqB;QACzCe,MAAM;QAAE;QAAA,CAAAlB,cAAA,GAAAW,CAAA,WAAAkD,OAAO,EAAE3C,MAAM;QAAA;QAAA,CAAAlB,cAAA,GAAAW,CAAA,WAAI,EAAE;QAC7BgC,SAAS;QAAE;QAAA,CAAA3C,cAAA,GAAAW,CAAA,WAAAkD,OAAO,EAAElB,SAAS;QAAA;QAAA,CAAA3C,cAAA,GAAAW,CAAA,WAAI,EAAE;QACnCQ,KAAK;QAAE;QAAA,CAAAnB,cAAA,GAAAW,CAAA,WAAAkD,OAAO,EAAE1C,KAAK;QAAA;QAAA,CAAAnB,cAAA,GAAAW,CAAA,WAAI,IAAI,CAACI,YAAY;QAC1CgD,aAAa;QAAE;QAAA,CAAA/D,cAAA,GAAAW,CAAA,WAAAkD,OAAO,EAAEE,aAAa;QAAA;QAAA,CAAA/D,cAAA,GAAAW,CAAA,WAAI,CAAC;OAC3C;MAAC;MAAAX,cAAA,GAAAG,CAAA;MAEF,OAAO,MAAMG,YAAA,CAAAmD,eAAe,CAACC,kBAAkB,CAACC,MAAM,EAAEC,UAAU,EAAEE,gBAAgB,CAAC;IACvF,CAAC,CAAC,OAAOhC,KAAK,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MACdoD,OAAO,CAACzB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MACA,OAAO,IAAI,CAAC6D,uBAAuB,CAACL,MAAM,EAAEC,UAAU,CAAC;IACzD;EACF;EAEA;;;EAGQ,MAAMI,uBAAuBA,CACnCL,MAAc,EACdC,UAAmC;IAAA;IAAA5D,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IAEnC,OAAOyD,UAAU,CAACrB,GAAG,CAAC0B,SAAS,IAAG;MAAA;MAAAjE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAChC,IAAI;QACF,IAAI+D,MAAM;QAAA;QAAA,CAAAlE,cAAA,GAAAG,CAAA,QAAG,KAAK;QAAC;QAAAH,cAAA,GAAAG,CAAA;QAEnB,QAAQ8D,SAAS,CAACE,IAAI;UACpB,KAAK,UAAU;YAAA;YAAAnE,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YACb+D,MAAM,GAAGP,MAAM,CAACS,WAAW,EAAE,CAACC,QAAQ,CAAChB,MAAM,CAACY,SAAS,CAAChB,KAAK,CAAC,CAACmB,WAAW,EAAE,CAAC;YAAC;YAAApE,cAAA,GAAAG,CAAA;YAC9E;UAEF,KAAK,cAAc;YAAA;YAAAH,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YACjB+D,MAAM,GAAG,CAACP,MAAM,CAACS,WAAW,EAAE,CAACC,QAAQ,CAAChB,MAAM,CAACY,SAAS,CAAChB,KAAK,CAAC,CAACmB,WAAW,EAAE,CAAC;YAAC;YAAApE,cAAA,GAAAG,CAAA;YAC/E;UAEF,KAAK,QAAQ;YAAA;YAAAH,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YACX+D,MAAM,GAAGP,MAAM,CAACW,IAAI,EAAE,KAAKjB,MAAM,CAACY,SAAS,CAAChB,KAAK,CAAC,CAACqB,IAAI,EAAE;YAAC;YAAAtE,cAAA,GAAAG,CAAA;YAC1D;UAEF,KAAK,YAAY;YAAA;YAAAH,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YACf+D,MAAM,GAAGP,MAAM,CAACW,IAAI,EAAE,KAAKjB,MAAM,CAACY,SAAS,CAAChB,KAAK,CAAC,CAACqB,IAAI,EAAE;YAAC;YAAAtE,cAAA,GAAAG,CAAA;YAC1D;UAEF,KAAK,OAAO;YAAA;YAAAH,cAAA,GAAAW,CAAA;YACV,MAAMuC,KAAK;YAAA;YAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAG,IAAIgD,MAAM,CAACE,MAAM,CAACY,SAAS,CAAChB,KAAK,CAAC,CAAC;YAAC;YAAAjD,cAAA,GAAAG,CAAA;YAClD+D,MAAM,GAAGhB,KAAK,CAACqB,IAAI,CAACZ,MAAM,CAAC;YAAC;YAAA3D,cAAA,GAAAG,CAAA;YAC5B;UAEF,KAAK,QAAQ;YAAA;YAAAH,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YACX,IAAI,OAAO8D,SAAS,CAAChB,KAAK,KAAK,QAAQ,EAAE;cAAA;cAAAjD,cAAA,GAAAW,CAAA;cAAAX,cAAA,GAAAG,CAAA;cACvC+D,MAAM,GAAGP,MAAM,CAACa,MAAM,KAAKP,SAAS,CAAChB,KAAK;YAC5C,CAAC,MAAM;cAAA;cAAAjD,cAAA,GAAAW,CAAA;cACL;cACA,MAAM8D,QAAQ;cAAA;cAAA,CAAAzE,cAAA,GAAAG,CAAA,QAAGkD,MAAM,CAACY,SAAS,CAAChB,KAAK,CAAC;cAAC;cAAAjD,cAAA,GAAAG,CAAA;cACzC,IAAIsE,QAAQ,CAACJ,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAAA;gBAAArE,cAAA,GAAAW,CAAA;gBAC1B,MAAM,CAAC+D,GAAG,EAAEC,GAAG,CAAC;gBAAA;gBAAA,CAAA3E,cAAA,GAAAG,CAAA,QAAGsE,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAACrC,GAAG,CAACsC,CAAC,IAAI;kBAAA;kBAAA7E,cAAA,GAAAS,CAAA;kBAAAT,cAAA,GAAAG,CAAA;kBAAA,OAAA2E,QAAQ,CAACD,CAAC,CAACP,IAAI,EAAE,CAAC;gBAAD,CAAC,CAAC;gBAAC;gBAAAtE,cAAA,GAAAG,CAAA;gBACpE+D,MAAM;gBAAG;gBAAA,CAAAlE,cAAA,GAAAW,CAAA,WAAAgD,MAAM,CAACa,MAAM,IAAIE,GAAG;gBAAA;gBAAA,CAAA1E,cAAA,GAAAW,CAAA,WAAIgD,MAAM,CAACa,MAAM,IAAIG,GAAG;cACvD,CAAC,MAAM;gBAAA;gBAAA3E,cAAA,GAAAW,CAAA;gBAAAX,cAAA,GAAAG,CAAA;gBAAA,IAAIsE,QAAQ,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;kBAAA;kBAAA/E,cAAA,GAAAW,CAAA;kBACnC,MAAM+D,GAAG;kBAAA;kBAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAG2E,QAAQ,CAACL,QAAQ,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC;kBAAC;kBAAAhF,cAAA,GAAAG,CAAA;kBAC5C+D,MAAM,GAAGP,MAAM,CAACa,MAAM,GAAGE,GAAG;gBAC9B,CAAC,MAAM;kBAAA;kBAAA1E,cAAA,GAAAW,CAAA;kBAAAX,cAAA,GAAAG,CAAA;kBAAA,IAAIsE,QAAQ,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;oBAAA;oBAAA/E,cAAA,GAAAW,CAAA;oBACnC,MAAMgE,GAAG;oBAAA;oBAAA,CAAA3E,cAAA,GAAAG,CAAA,QAAG2E,QAAQ,CAACL,QAAQ,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC;oBAAC;oBAAAhF,cAAA,GAAAG,CAAA;oBAC5C+D,MAAM,GAAGP,MAAM,CAACa,MAAM,GAAGG,GAAG;kBAC9B,CAAC,MAAM;oBAAA;oBAAA3E,cAAA,GAAAW,CAAA;oBAAAX,cAAA,GAAAG,CAAA;oBACL+D,MAAM,GAAGP,MAAM,CAACa,MAAM,KAAKM,QAAQ,CAACL,QAAQ,CAAC;kBAC/C;gBAAA;cAAA;YACF;YAAC;YAAAzE,cAAA,GAAAG,CAAA;YACD;UAEF;YAAA;YAAAH,cAAA,GAAAW,CAAA;YAAAX,cAAA,GAAAG,CAAA;YACE,OAAO;cACL8D,SAAS;cACTC,MAAM,EAAE,KAAK;cACbpC,KAAK,EAAE,mDAAmDmC,SAAS,CAACE,IAAI;aACzE;QACL;QAAC;QAAAnE,cAAA,GAAAG,CAAA;QAED,OAAO;UACL8D,SAAS;UACTC;SACD;MACH,CAAC,CAAC,OAAOpC,KAAK,EAAE;QAAA;QAAA9B,cAAA,GAAAG,CAAA;QACd,OAAO;UACL8D,SAAS;UACTC,MAAM,EAAE,KAAK;UACbpC,KAAK,EAAEA,KAAK,YAAYE,KAAK;UAAA;UAAA,CAAAhC,cAAA,GAAAW,CAAA,WAAGmB,KAAK,CAACG,OAAO;UAAA;UAAA,CAAAjC,cAAA,GAAAW,CAAA,WAAG,mCAAmC;SACpF;MACH;IACF,CAAC,CAAC;EACJ;EAEA;;;EAGAsE,0BAA0BA,CAAA;IAAA;IAAAjF,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACxB,OAAOG,YAAA,CAAAmD,eAAe,CAACyB,kBAAkB,EAAE;EAC7C;EAEA;;;EAGAC,sBAAsBA,CAAA;IAAA;IAAAnF,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IAMpB,OAAOG,YAAA,CAAAmD,eAAe,CAAC2B,aAAa,EAAE;EACxC;;AACD;AAAApF,cAAA,GAAAG,CAAA;AAEYkF,OAAA,CAAAC,UAAU,GAAG,IAAI/E,UAAU,EAAE;AAAC;AAAAP,cAAA,GAAAG,CAAA;AAC3CkF,OAAA,CAAA5D,OAAA,GAAe4D,OAAA,CAAAC,UAAU","ignoreList":[]}