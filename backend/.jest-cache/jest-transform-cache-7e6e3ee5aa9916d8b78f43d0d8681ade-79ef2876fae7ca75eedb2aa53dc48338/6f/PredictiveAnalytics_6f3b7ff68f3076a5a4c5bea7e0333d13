fa2d8e3b7c6d689f34f05345aaadae37
"use strict";

/* istanbul ignore next */
function cov_1w6wp2kh3a() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/PredictiveAnalytics.ts";
  var hash = "2c9b0788c40cf8a5e22ac8c9d134f5e6ea478c6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/PredictiveAnalytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "37": {
        start: {
          line: 37,
          column: 11
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "38": {
        start: {
          line: 38,
          column: 21
        },
        end: {
          line: 38,
          column: 44
        }
      },
      "39": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 39,
          column: 54
        }
      },
      "40": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 40,
          column: 73
        }
      },
      "41": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 40
        }
      },
      "42": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "43": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 32
        }
      },
      "44": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 37
        }
      },
      "45": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 32
        }
      },
      "46": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "47": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 64
        }
      },
      "48": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 79
        }
      },
      "49": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 80
        }
      },
      "50": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 43
        }
      },
      "51": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 36
        }
      },
      "52": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 34
        }
      },
      "53": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "54": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 29
        }
      },
      "55": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 79
        }
      },
      "56": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "57": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "58": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 60
        }
      },
      "59": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 31
        }
      },
      "60": {
        start: {
          line: 81,
          column: 26
        },
        end: {
          line: 81,
          column: 56
        }
      },
      "61": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "62": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 79
        }
      },
      "63": {
        start: {
          line: 85,
          column: 33
        },
        end: {
          line: 85,
          column: 86
        }
      },
      "64": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "65": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 103
        }
      },
      "66": {
        start: {
          line: 90,
          column: 65
        },
        end: {
          line: 90,
          column: 103
        }
      },
      "67": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 83
        }
      },
      "68": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 98
        }
      },
      "69": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 86
        }
      },
      "70": {
        start: {
          line: 98,
          column: 36
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "71": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 65
        }
      },
      "72": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 50
        }
      },
      "73": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 47
        }
      },
      "74": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 152
        }
      },
      "75": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 35
        }
      },
      "76": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 36
        }
      },
      "77": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "78": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 60
        }
      },
      "79": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 31
        }
      },
      "80": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "81": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "82": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 98
        }
      },
      "83": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 98
        }
      },
      "84": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "85": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 103
        }
      },
      "86": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 64
        }
      },
      "87": {
        start: {
          line: 143,
          column: 26
        },
        end: {
          line: 143,
          column: 82
        }
      },
      "88": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 62
        }
      },
      "89": {
        start: {
          line: 146,
          column: 44
        },
        end: {
          line: 146,
          column: 72
        }
      },
      "90": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "91": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 157,
          column: 25
        }
      },
      "92": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 156,
          column: 134
        }
      },
      "93": {
        start: {
          line: 162,
          column: 41
        },
        end: {
          line: 162,
          column: 101
        }
      },
      "94": {
        start: {
          line: 163,
          column: 30
        },
        end: {
          line: 163,
          column: 82
        }
      },
      "95": {
        start: {
          line: 164,
          column: 36
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "96": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 65
        }
      },
      "97": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 50
        }
      },
      "98": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 47
        }
      },
      "99": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 113
        }
      },
      "100": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 35
        }
      },
      "101": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 36
        }
      },
      "102": {
        start: {
          line: 192,
          column: 25
        },
        end: {
          line: 192,
          column: 69
        }
      },
      "103": {
        start: {
          line: 193,
          column: 23
        },
        end: {
          line: 193,
          column: 47
        }
      },
      "104": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "105": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 26
        }
      },
      "106": {
        start: {
          line: 197,
          column: 22
        },
        end: {
          line: 197,
          column: 60
        }
      },
      "107": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "108": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 81
        }
      },
      "109": {
        start: {
          line: 202,
          column: 27
        },
        end: {
          line: 202,
          column: 76
        }
      },
      "110": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "111": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 78
        }
      },
      "112": {
        start: {
          line: 207,
          column: 25
        },
        end: {
          line: 207,
          column: 57
        }
      },
      "113": {
        start: {
          line: 208,
          column: 28
        },
        end: {
          line: 208,
          column: 51
        }
      },
      "114": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 59
        }
      },
      "115": {
        start: {
          line: 211,
          column: 31
        },
        end: {
          line: 211,
          column: 59
        }
      },
      "116": {
        start: {
          line: 213,
          column: 29
        },
        end: {
          line: 213,
          column: 68
        }
      },
      "117": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 80
        }
      },
      "118": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 217,
          column: 63
        }
      },
      "119": {
        start: {
          line: 219,
          column: 36
        },
        end: {
          line: 219,
          column: 62
        }
      },
      "120": {
        start: {
          line: 221,
          column: 32
        },
        end: {
          line: 223,
          column: 23
        }
      },
      "121": {
        start: {
          line: 225,
          column: 32
        },
        end: {
          line: 225,
          column: 138
        }
      },
      "122": {
        start: {
          line: 226,
          column: 23
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "123": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 86
        }
      },
      "124": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 30
        }
      },
      "125": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 29
        }
      },
      "126": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 22
        }
      },
      "127": {
        start: {
          line: 248,
          column: 25
        },
        end: {
          line: 248,
          column: 65
        }
      },
      "128": {
        start: {
          line: 249,
          column: 23
        },
        end: {
          line: 249,
          column: 47
        }
      },
      "129": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "130": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 26
        }
      },
      "131": {
        start: {
          line: 253,
          column: 22
        },
        end: {
          line: 253,
          column: 70
        }
      },
      "132": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "133": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 93
        }
      },
      "134": {
        start: {
          line: 257,
          column: 26
        },
        end: {
          line: 257,
          column: 28
        }
      },
      "135": {
        start: {
          line: 259,
          column: 30
        },
        end: {
          line: 259,
          column: 39
        }
      },
      "136": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "137": {
        start: {
          line: 261,
          column: 25
        },
        end: {
          line: 261,
          column: 73
        }
      },
      "138": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 44
        }
      },
      "139": {
        start: {
          line: 265,
          column: 28
        },
        end: {
          line: 265,
          column: 68
        }
      },
      "140": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "141": {
        start: {
          line: 268,
          column: 29
        },
        end: {
          line: 268,
          column: 73
        }
      },
      "142": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 270,
          column: 25
        }
      },
      "143": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 25
        }
      },
      "144": {
        start: {
          line: 272,
          column: 32
        },
        end: {
          line: 272,
          column: 55
        }
      },
      "145": {
        start: {
          line: 273,
          column: 35
        },
        end: {
          line: 273,
          column: 67
        }
      },
      "146": {
        start: {
          line: 274,
          column: 40
        },
        end: {
          line: 274,
          column: 67
        }
      },
      "147": {
        start: {
          line: 276,
          column: 40
        },
        end: {
          line: 276,
          column: 116
        }
      },
      "148": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 278,
          column: 93
        }
      },
      "149": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "150": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 305,
          column: 17
        }
      },
      "151": {
        start: {
          line: 281,
          column: 29
        },
        end: {
          line: 281,
          column: 30
        }
      },
      "152": {
        start: {
          line: 282,
          column: 35
        },
        end: {
          line: 282,
          column: 45
        }
      },
      "153": {
        start: {
          line: 283,
          column: 41
        },
        end: {
          line: 283,
          column: 52
        }
      },
      "154": {
        start: {
          line: 284,
          column: 42
        },
        end: {
          line: 284,
          column: 64
        }
      },
      "155": {
        start: {
          line: 285,
          column: 38
        },
        end: {
          line: 285,
          column: 76
        }
      },
      "156": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 304,
          column: 21
        }
      },
      "157": {
        start: {
          line: 287,
          column: 40
        },
        end: {
          line: 302,
          column: 25
        }
      },
      "158": {
        start: {
          line: 299,
          column: 87
        },
        end: {
          line: 299,
          column: 105
        }
      },
      "159": {
        start: {
          line: 303,
          column: 24
        },
        end: {
          line: 303,
          column: 48
        }
      },
      "160": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 34
        }
      },
      "161": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 37
        }
      },
      "162": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 68
        }
      },
      "163": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 25
        }
      },
      "164": {
        start: {
          line: 319,
          column: 25
        },
        end: {
          line: 319,
          column: 27
        }
      },
      "165": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "166": {
        start: {
          line: 322,
          column: 40
        },
        end: {
          line: 322,
          column: 72
        }
      },
      "167": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 50
        }
      },
      "168": {
        start: {
          line: 325,
          column: 36
        },
        end: {
          line: 325,
          column: 66
        }
      },
      "169": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 46
        }
      },
      "170": {
        start: {
          line: 328,
          column: 34
        },
        end: {
          line: 328,
          column: 61
        }
      },
      "171": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 44
        }
      },
      "172": {
        start: {
          line: 331,
          column: 39
        },
        end: {
          line: 331,
          column: 70
        }
      },
      "173": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 49
        }
      },
      "174": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 66
        }
      },
      "175": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 24
        }
      },
      "176": {
        start: {
          line: 343,
          column: 22
        },
        end: {
          line: 343,
          column: 60
        }
      },
      "177": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "178": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 81
        }
      },
      "179": {
        start: {
          line: 348,
          column: 31
        },
        end: {
          line: 348,
          column: 96
        }
      },
      "180": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "181": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 82
        }
      },
      "182": {
        start: {
          line: 353,
          column: 27
        },
        end: {
          line: 353,
          column: 67
        }
      },
      "183": {
        start: {
          line: 355,
          column: 32
        },
        end: {
          line: 355,
          column: 34
        }
      },
      "184": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 356,
          column: 34
        }
      },
      "185": {
        start: {
          line: 357,
          column: 29
        },
        end: {
          line: 357,
          column: 76
        }
      },
      "186": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "187": {
        start: {
          line: 358,
          column: 21
        },
        end: {
          line: 358,
          column: 22
        }
      },
      "188": {
        start: {
          line: 359,
          column: 25
        },
        end: {
          line: 359,
          column: 35
        }
      },
      "189": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 45
        }
      },
      "190": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 39
        }
      },
      "191": {
        start: {
          line: 363,
          column: 29
        },
        end: {
          line: 363,
          column: 72
        }
      },
      "192": {
        start: {
          line: 364,
          column: 32
        },
        end: {
          line: 364,
          column: 55
        }
      },
      "193": {
        start: {
          line: 365,
          column: 31
        },
        end: {
          line: 365,
          column: 63
        }
      },
      "194": {
        start: {
          line: 366,
          column: 35
        },
        end: {
          line: 366,
          column: 63
        }
      },
      "195": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 49
        }
      },
      "196": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 34
        }
      },
      "197": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 33
        }
      },
      "198": {
        start: {
          line: 372,
          column: 31
        },
        end: {
          line: 372,
          column: 74
        }
      },
      "199": {
        start: {
          line: 373,
          column: 27
        },
        end: {
          line: 373,
          column: 84
        }
      },
      "200": {
        start: {
          line: 375,
          column: 32
        },
        end: {
          line: 375,
          column: 132
        }
      },
      "201": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 384,
          column: 10
        }
      },
      "202": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "203": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 79
        }
      },
      "204": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 19
        }
      },
      "205": {
        start: {
          line: 394,
          column: 20
        },
        end: {
          line: 394,
          column: 30
        }
      },
      "206": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 396,
          column: 89
        }
      },
      "207": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "208": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 19
        }
      },
      "209": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 400,
          column: 61
        }
      },
      "210": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "211": {
        start: {
          line: 403,
          column: 31
        },
        end: {
          line: 403,
          column: 99
        }
      },
      "212": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 412,
          column: 13
        }
      },
      "213": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 411,
          column: 17
        }
      },
      "214": {
        start: {
          line: 406,
          column: 20
        },
        end: {
          line: 406,
          column: 62
        }
      },
      "215": {
        start: {
          line: 407,
          column: 20
        },
        end: {
          line: 407,
          column: 87
        }
      },
      "216": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 410,
          column: 100
        }
      },
      "217": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 420,
          column: 13
        }
      },
      "218": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 61
        }
      },
      "219": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 78
        }
      },
      "220": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 419,
          column: 91
        }
      },
      "221": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 63
        }
      },
      "222": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 53
        }
      },
      "223": {
        start: {
          line: 432,
          column: 24
        },
        end: {
          line: 432,
          column: 34
        }
      },
      "224": {
        start: {
          line: 433,
          column: 26
        },
        end: {
          line: 433,
          column: 93
        }
      },
      "225": {
        start: {
          line: 434,
          column: 23
        },
        end: {
          line: 438,
          column: 10
        }
      },
      "226": {
        start: {
          line: 440,
          column: 25
        },
        end: {
          line: 440,
          column: 27
        }
      },
      "227": {
        start: {
          line: 441,
          column: 23
        },
        end: {
          line: 441,
          column: 25
        }
      },
      "228": {
        start: {
          line: 442,
          column: 27
        },
        end: {
          line: 442,
          column: 29
        }
      },
      "229": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 453,
          column: 9
        }
      },
      "230": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 452,
          column: 13
        }
      },
      "231": {
        start: {
          line: 446,
          column: 38
        },
        end: {
          line: 446,
          column: 67
        }
      },
      "232": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 451,
          column: 17
        }
      },
      "233": {
        start: {
          line: 448,
          column: 20
        },
        end: {
          line: 448,
          column: 49
        }
      },
      "234": {
        start: {
          line: 449,
          column: 20
        },
        end: {
          line: 449,
          column: 52
        }
      },
      "235": {
        start: {
          line: 450,
          column: 20
        },
        end: {
          line: 450,
          column: 63
        }
      },
      "236": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 459,
          column: 10
        }
      },
      "237": {
        start: {
          line: 462,
          column: 24
        },
        end: {
          line: 462,
          column: 34
        }
      },
      "238": {
        start: {
          line: 463,
          column: 26
        },
        end: {
          line: 463,
          column: 93
        }
      },
      "239": {
        start: {
          line: 464,
          column: 25
        },
        end: {
          line: 464,
          column: 27
        }
      },
      "240": {
        start: {
          line: 465,
          column: 23
        },
        end: {
          line: 465,
          column: 25
        }
      },
      "241": {
        start: {
          line: 466,
          column: 27
        },
        end: {
          line: 466,
          column: 29
        }
      },
      "242": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "243": {
        start: {
          line: 469,
          column: 25
        },
        end: {
          line: 469,
          column: 90
        }
      },
      "244": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 477,
          column: 13
        }
      },
      "245": {
        start: {
          line: 471,
          column: 38
        },
        end: {
          line: 471,
          column: 172
        }
      },
      "246": {
        start: {
          line: 471,
          column: 55
        },
        end: {
          line: 471,
          column: 129
        }
      },
      "247": {
        start: {
          line: 471,
          column: 143
        },
        end: {
          line: 471,
          column: 171
        }
      },
      "248": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 476,
          column: 17
        }
      },
      "249": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 49
        }
      },
      "250": {
        start: {
          line: 474,
          column: 20
        },
        end: {
          line: 474,
          column: 35
        }
      },
      "251": {
        start: {
          line: 475,
          column: 20
        },
        end: {
          line: 475,
          column: 53
        }
      },
      "252": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 484,
          column: 10
        }
      },
      "253": {
        start: {
          line: 488,
          column: 35
        },
        end: {
          line: 488,
          column: 80
        }
      },
      "254": {
        start: {
          line: 489,
          column: 33
        },
        end: {
          line: 489,
          column: 74
        }
      },
      "255": {
        start: {
          line: 491,
          column: 27
        },
        end: {
          line: 491,
          column: 70
        }
      },
      "256": {
        start: {
          line: 492,
          column: 23
        },
        end: {
          line: 492,
          column: 75
        }
      },
      "257": {
        start: {
          line: 493,
          column: 23
        },
        end: {
          line: 493,
          column: 90
        }
      },
      "258": {
        start: {
          line: 494,
          column: 28
        },
        end: {
          line: 494,
          column: 77
        }
      },
      "259": {
        start: {
          line: 495,
          column: 28
        },
        end: {
          line: 495,
          column: 118
        }
      },
      "260": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 60
        }
      },
      "261": {
        start: {
          line: 499,
          column: 22
        },
        end: {
          line: 523,
          column: 10
        }
      },
      "262": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 528,
          column: 11
        }
      },
      "263": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 21
        }
      },
      "264": {
        start: {
          line: 533,
          column: 22
        },
        end: {
          line: 563,
          column: 10
        }
      },
      "265": {
        start: {
          line: 564,
          column: 8
        },
        end: {
          line: 567,
          column: 11
        }
      },
      "266": {
        start: {
          line: 568,
          column: 8
        },
        end: {
          line: 568,
          column: 21
        }
      },
      "267": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 583,
          column: 11
        }
      },
      "268": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 580,
          column: 21
        }
      },
      "269": {
        start: {
          line: 579,
          column: 24
        },
        end: {
          line: 579,
          column: 130
        }
      },
      "270": {
        start: {
          line: 586,
          column: 27
        },
        end: {
          line: 586,
          column: 67
        }
      },
      "271": {
        start: {
          line: 587,
          column: 21
        },
        end: {
          line: 587,
          column: 47
        }
      },
      "272": {
        start: {
          line: 588,
          column: 8
        },
        end: {
          line: 588,
          column: 27
        }
      },
      "273": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 598,
          column: 9
        }
      },
      "274": {
        start: {
          line: 592,
          column: 30
        },
        end: {
          line: 592,
          column: 69
        }
      },
      "275": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 56
        }
      },
      "276": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 55
        }
      },
      "277": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 597,
          column: 58
        }
      },
      "278": {
        start: {
          line: 601,
          column: 27
        },
        end: {
          line: 605,
          column: 70
        }
      },
      "279": {
        start: {
          line: 602,
          column: 29
        },
        end: {
          line: 604,
          column: 57
        }
      },
      "280": {
        start: {
          line: 605,
          column: 28
        },
        end: {
          line: 605,
          column: 69
        }
      },
      "281": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 606,
          column: 37
        }
      },
      "282": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 618,
          column: 10
        }
      },
      "283": {
        start: {
          line: 621,
          column: 8
        },
        end: {
          line: 622,
          column: 22
        }
      },
      "284": {
        start: {
          line: 622,
          column: 12
        },
        end: {
          line: 622,
          column: 22
        }
      },
      "285": {
        start: {
          line: 623,
          column: 23
        },
        end: {
          line: 623,
          column: 44
        }
      },
      "286": {
        start: {
          line: 624,
          column: 26
        },
        end: {
          line: 624,
          column: 73
        }
      },
      "287": {
        start: {
          line: 626,
          column: 26
        },
        end: {
          line: 626,
          column: 51
        }
      },
      "288": {
        start: {
          line: 627,
          column: 26
        },
        end: {
          line: 627,
          column: 48
        }
      },
      "289": {
        start: {
          line: 628,
          column: 28
        },
        end: {
          line: 628,
          column: 53
        }
      },
      "290": {
        start: {
          line: 629,
          column: 26
        },
        end: {
          line: 629,
          column: 88
        }
      },
      "291": {
        start: {
          line: 631,
          column: 23
        },
        end: {
          line: 631,
          column: 90
        }
      },
      "292": {
        start: {
          line: 631,
          column: 37
        },
        end: {
          line: 631,
          column: 66
        }
      },
      "293": {
        start: {
          line: 631,
          column: 80
        },
        end: {
          line: 631,
          column: 89
        }
      },
      "294": {
        start: {
          line: 632,
          column: 26
        },
        end: {
          line: 632,
          column: 103
        }
      },
      "295": {
        start: {
          line: 632,
          column: 72
        },
        end: {
          line: 632,
          column: 79
        }
      },
      "296": {
        start: {
          line: 634,
          column: 28
        },
        end: {
          line: 634,
          column: 55
        }
      },
      "297": {
        start: {
          line: 636,
          column: 33
        },
        end: {
          line: 636,
          column: 65
        }
      },
      "298": {
        start: {
          line: 638,
          column: 34
        },
        end: {
          line: 638,
          column: 83
        }
      },
      "299": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 648,
          column: 10
        }
      },
      "300": {
        start: {
          line: 651,
          column: 8
        },
        end: {
          line: 652,
          column: 22
        }
      },
      "301": {
        start: {
          line: 652,
          column: 12
        },
        end: {
          line: 652,
          column: 22
        }
      },
      "302": {
        start: {
          line: 653,
          column: 28
        },
        end: {
          line: 653,
          column: 46
        }
      },
      "303": {
        start: {
          line: 654,
          column: 27
        },
        end: {
          line: 654,
          column: 29
        }
      },
      "304": {
        start: {
          line: 656,
          column: 21
        },
        end: {
          line: 656,
          column: 58
        }
      },
      "305": {
        start: {
          line: 657,
          column: 21
        },
        end: {
          line: 657,
          column: 59
        }
      },
      "306": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 663,
          column: 11
        }
      },
      "307": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 662,
          column: 15
        }
      },
      "308": {
        start: {
          line: 660,
          column: 16
        },
        end: {
          line: 660,
          column: 55
        }
      },
      "309": {
        start: {
          line: 661,
          column: 16
        },
        end: {
          line: 661,
          column: 55
        }
      },
      "310": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 671,
          column: 11
        }
      },
      "311": {
        start: {
          line: 666,
          column: 37
        },
        end: {
          line: 669,
          column: 14
        }
      },
      "312": {
        start: {
          line: 667,
          column: 30
        },
        end: {
          line: 667,
          column: 51
        }
      },
      "313": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 69
        }
      },
      "314": {
        start: {
          line: 670,
          column: 12
        },
        end: {
          line: 670,
          column: 46
        }
      },
      "315": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 672,
          column: 26
        }
      },
      "316": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 676,
          column: 22
        }
      },
      "317": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 676,
          column: 22
        }
      },
      "318": {
        start: {
          line: 677,
          column: 20
        },
        end: {
          line: 677,
          column: 39
        }
      },
      "319": {
        start: {
          line: 678,
          column: 20
        },
        end: {
          line: 678,
          column: 39
        }
      },
      "320": {
        start: {
          line: 679,
          column: 22
        },
        end: {
          line: 679,
          column: 31
        }
      },
      "321": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 681,
          column: 39
        }
      },
      "322": {
        start: {
          line: 681,
          column: 12
        },
        end: {
          line: 681,
          column: 39
        }
      },
      "323": {
        start: {
          line: 681,
          column: 36
        },
        end: {
          line: 681,
          column: 37
        }
      },
      "324": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 682,
          column: 58
        }
      },
      "325": {
        start: {
          line: 682,
          column: 35
        },
        end: {
          line: 682,
          column: 56
        }
      },
      "326": {
        start: {
          line: 685,
          column: 8
        },
        end: {
          line: 686,
          column: 21
        }
      },
      "327": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 21
        }
      },
      "328": {
        start: {
          line: 687,
          column: 18
        },
        end: {
          line: 687,
          column: 31
        }
      },
      "329": {
        start: {
          line: 688,
          column: 21
        },
        end: {
          line: 688,
          column: 38
        }
      },
      "330": {
        start: {
          line: 689,
          column: 21
        },
        end: {
          line: 689,
          column: 58
        }
      },
      "331": {
        start: {
          line: 689,
          column: 47
        },
        end: {
          line: 689,
          column: 54
        }
      },
      "332": {
        start: {
          line: 690,
          column: 22
        },
        end: {
          line: 690,
          column: 68
        }
      },
      "333": {
        start: {
          line: 690,
          column: 51
        },
        end: {
          line: 690,
          column: 64
        }
      },
      "334": {
        start: {
          line: 691,
          column: 22
        },
        end: {
          line: 691,
          column: 53
        }
      },
      "335": {
        start: {
          line: 692,
          column: 22
        },
        end: {
          line: 692,
          column: 75
        }
      },
      "336": {
        start: {
          line: 693,
          column: 8
        },
        end: {
          line: 693,
          column: 40
        }
      },
      "337": {
        start: {
          line: 696,
          column: 8
        },
        end: {
          line: 697,
          column: 21
        }
      },
      "338": {
        start: {
          line: 697,
          column: 12
        },
        end: {
          line: 697,
          column: 21
        }
      },
      "339": {
        start: {
          line: 698,
          column: 21
        },
        end: {
          line: 698,
          column: 74
        }
      },
      "340": {
        start: {
          line: 698,
          column: 47
        },
        end: {
          line: 698,
          column: 54
        }
      },
      "341": {
        start: {
          line: 699,
          column: 25
        },
        end: {
          line: 699,
          column: 98
        }
      },
      "342": {
        start: {
          line: 699,
          column: 51
        },
        end: {
          line: 699,
          column: 78
        }
      },
      "343": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 700,
          column: 35
        }
      },
      "344": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 706,
          column: 18
        }
      },
      "345": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 710,
          column: 19
        }
      },
      "346": {
        start: {
          line: 714,
          column: 8
        },
        end: {
          line: 714,
          column: 45
        }
      },
      "347": {
        start: {
          line: 717,
          column: 32
        },
        end: {
          line: 717,
          column: 34
        }
      },
      "348": {
        start: {
          line: 718,
          column: 8
        },
        end: {
          line: 726,
          column: 9
        }
      },
      "349": {
        start: {
          line: 719,
          column: 12
        },
        end: {
          line: 719,
          column: 95
        }
      },
      "350": {
        start: {
          line: 720,
          column: 12
        },
        end: {
          line: 720,
          column: 80
        }
      },
      "351": {
        start: {
          line: 721,
          column: 12
        },
        end: {
          line: 721,
          column: 72
        }
      },
      "352": {
        start: {
          line: 724,
          column: 12
        },
        end: {
          line: 724,
          column: 74
        }
      },
      "353": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 725,
          column: 74
        }
      },
      "354": {
        start: {
          line: 727,
          column: 8
        },
        end: {
          line: 727,
          column: 31
        }
      },
      "355": {
        start: {
          line: 730,
          column: 23
        },
        end: {
          line: 736,
          column: 9
        }
      },
      "356": {
        start: {
          line: 737,
          column: 8
        },
        end: {
          line: 737,
          column: 51
        }
      },
      "357": {
        start: {
          line: 741,
          column: 20
        },
        end: {
          line: 741,
          column: 30
        }
      },
      "358": {
        start: {
          line: 742,
          column: 22
        },
        end: {
          line: 742,
          column: 74
        }
      },
      "359": {
        start: {
          line: 743,
          column: 8
        },
        end: {
          line: 743,
          column: 66
        }
      },
      "360": {
        start: {
          line: 747,
          column: 27
        },
        end: {
          line: 747,
          column: 67
        }
      },
      "361": {
        start: {
          line: 748,
          column: 8
        },
        end: {
          line: 751,
          column: 10
        }
      },
      "362": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 758,
          column: 18
        }
      },
      "363": {
        start: {
          line: 762,
          column: 23
        },
        end: {
          line: 762,
          column: 51
        }
      },
      "364": {
        start: {
          line: 762,
          column: 45
        },
        end: {
          line: 762,
          column: 50
        }
      },
      "365": {
        start: {
          line: 763,
          column: 8
        },
        end: {
          line: 763,
          column: 56
        }
      },
      "366": {
        start: {
          line: 767,
          column: 8
        },
        end: {
          line: 767,
          column: 18
        }
      },
      "367": {
        start: {
          line: 771,
          column: 8
        },
        end: {
          line: 771,
          column: 18
        }
      },
      "368": {
        start: {
          line: 774,
          column: 29
        },
        end: {
          line: 774,
          column: 30
        }
      },
      "369": {
        start: {
          line: 775,
          column: 8
        },
        end: {
          line: 777,
          column: 9
        }
      },
      "370": {
        start: {
          line: 775,
          column: 21
        },
        end: {
          line: 775,
          column: 22
        }
      },
      "371": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 776,
          column: 74
        }
      },
      "372": {
        start: {
          line: 778,
          column: 8
        },
        end: {
          line: 778,
          column: 59
        }
      },
      "373": {
        start: {
          line: 781,
          column: 27
        },
        end: {
          line: 785,
          column: 9
        }
      },
      "374": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 786,
          column: 39
        }
      },
      "375": {
        start: {
          line: 789,
          column: 22
        },
        end: {
          line: 789,
          column: 43
        }
      },
      "376": {
        start: {
          line: 790,
          column: 8
        },
        end: {
          line: 791,
          column: 30
        }
      },
      "377": {
        start: {
          line: 791,
          column: 12
        },
        end: {
          line: 791,
          column: 30
        }
      },
      "378": {
        start: {
          line: 792,
          column: 8
        },
        end: {
          line: 793,
          column: 26
        }
      },
      "379": {
        start: {
          line: 793,
          column: 12
        },
        end: {
          line: 793,
          column: 26
        }
      },
      "380": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 795,
          column: 28
        }
      },
      "381": {
        start: {
          line: 795,
          column: 12
        },
        end: {
          line: 795,
          column: 28
        }
      },
      "382": {
        start: {
          line: 796,
          column: 8
        },
        end: {
          line: 796,
          column: 21
        }
      },
      "383": {
        start: {
          line: 799,
          column: 8
        },
        end: {
          line: 803,
          column: 10
        }
      },
      "384": {
        start: {
          line: 807,
          column: 8
        },
        end: {
          line: 807,
          column: 18
        }
      },
      "385": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 811,
          column: 18
        }
      },
      "386": {
        start: {
          line: 815,
          column: 8
        },
        end: {
          line: 815,
          column: 18
        }
      },
      "387": {
        start: {
          line: 819,
          column: 8
        },
        end: {
          line: 819,
          column: 18
        }
      },
      "388": {
        start: {
          line: 822,
          column: 8
        },
        end: {
          line: 823,
          column: 21
        }
      },
      "389": {
        start: {
          line: 823,
          column: 12
        },
        end: {
          line: 823,
          column: 21
        }
      },
      "390": {
        start: {
          line: 824,
          column: 22
        },
        end: {
          line: 824,
          column: 35
        }
      },
      "391": {
        start: {
          line: 825,
          column: 21
        },
        end: {
          line: 825,
          column: 48
        }
      },
      "392": {
        start: {
          line: 826,
          column: 25
        },
        end: {
          line: 827,
          column: 74
        }
      },
      "393": {
        start: {
          line: 828,
          column: 8
        },
        end: {
          line: 828,
          column: 56
        }
      },
      "394": {
        start: {
          line: 832,
          column: 23
        },
        end: {
          line: 832,
          column: 64
        }
      },
      "395": {
        start: {
          line: 833,
          column: 27
        },
        end: {
          line: 833,
          column: 53
        }
      },
      "396": {
        start: {
          line: 834,
          column: 8
        },
        end: {
          line: 834,
          column: 61
        }
      },
      "397": {
        start: {
          line: 835,
          column: 8
        },
        end: {
          line: 835,
          column: 76
        }
      },
      "398": {
        start: {
          line: 838,
          column: 32
        },
        end: {
          line: 838,
          column: 34
        }
      },
      "399": {
        start: {
          line: 839,
          column: 30
        },
        end: {
          line: 839,
          column: 69
        }
      },
      "400": {
        start: {
          line: 840,
          column: 8
        },
        end: {
          line: 852,
          column: 9
        }
      },
      "401": {
        start: {
          line: 841,
          column: 12
        },
        end: {
          line: 841,
          column: 119
        }
      },
      "402": {
        start: {
          line: 842,
          column: 12
        },
        end: {
          line: 842,
          column: 76
        }
      },
      "403": {
        start: {
          line: 843,
          column: 12
        },
        end: {
          line: 843,
          column: 68
        }
      },
      "404": {
        start: {
          line: 845,
          column: 13
        },
        end: {
          line: 852,
          column: 9
        }
      },
      "405": {
        start: {
          line: 846,
          column: 12
        },
        end: {
          line: 846,
          column: 123
        }
      },
      "406": {
        start: {
          line: 847,
          column: 12
        },
        end: {
          line: 847,
          column: 73
        }
      },
      "407": {
        start: {
          line: 850,
          column: 12
        },
        end: {
          line: 850,
          column: 73
        }
      },
      "408": {
        start: {
          line: 851,
          column: 12
        },
        end: {
          line: 851,
          column: 74
        }
      },
      "409": {
        start: {
          line: 853,
          column: 8
        },
        end: {
          line: 853,
          column: 31
        }
      },
      "410": {
        start: {
          line: 857,
          column: 8
        },
        end: {
          line: 857,
          column: 25
        }
      },
      "411": {
        start: {
          line: 860,
          column: 0
        },
        end: {
          line: 860,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 18
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 44
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 33
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 64
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 57
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 76
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 57
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 127
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 154,
            column: 32
          },
          end: {
            line: 154,
            column: 33
          }
        },
        loc: {
          start: {
            line: 154,
            column: 49
          },
          end: {
            line: 158,
            column: 21
          }
        },
        line: 154
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 53
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 191
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 88
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 247
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 299,
            column: 75
          },
          end: {
            line: 299,
            column: 76
          }
        },
        loc: {
          start: {
            line: 299,
            column: 87
          },
          end: {
            line: 299,
            column: 105
          }
        },
        line: 299
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 31
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 318
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 60
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 342
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 389
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 31
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 427
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 431,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 431,
            column: 53
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 431
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 461,
            column: 4
          },
          end: {
            line: 461,
            column: 5
          }
        },
        loc: {
          start: {
            line: 461,
            column: 65
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 461
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 471,
            column: 50
          },
          end: {
            line: 471,
            column: 51
          }
        },
        loc: {
          start: {
            line: 471,
            column: 55
          },
          end: {
            line: 471,
            column: 129
          }
        },
        line: 471
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 471,
            column: 138
          },
          end: {
            line: 471,
            column: 139
          }
        },
        loc: {
          start: {
            line: 471,
            column: 143
          },
          end: {
            line: 471,
            column: 171
          }
        },
        line: 471
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 38
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 486
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 36
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 498
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 531,
            column: 4
          },
          end: {
            line: 531,
            column: 5
          }
        },
        loc: {
          start: {
            line: 531,
            column: 35
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 531
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 570,
            column: 4
          },
          end: {
            line: 570,
            column: 5
          }
        },
        loc: {
          start: {
            line: 570,
            column: 70
          },
          end: {
            line: 584,
            column: 5
          }
        },
        line: 570
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 577,
            column: 28
          },
          end: {
            line: 577,
            column: 29
          }
        },
        loc: {
          start: {
            line: 577,
            column: 45
          },
          end: {
            line: 581,
            column: 17
          }
        },
        line: 577
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 585,
            column: 4
          },
          end: {
            line: 585,
            column: 5
          }
        },
        loc: {
          start: {
            line: 585,
            column: 57
          },
          end: {
            line: 589,
            column: 5
          }
        },
        line: 585
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 37
          },
          end: {
            line: 599,
            column: 5
          }
        },
        line: 590
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 600,
            column: 4
          },
          end: {
            line: 600,
            column: 5
          }
        },
        loc: {
          start: {
            line: 600,
            column: 32
          },
          end: {
            line: 607,
            column: 5
          }
        },
        line: 600
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 602,
            column: 20
          },
          end: {
            line: 602,
            column: 21
          }
        },
        loc: {
          start: {
            line: 602,
            column: 29
          },
          end: {
            line: 604,
            column: 57
          }
        },
        line: 602
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 605,
            column: 18
          },
          end: {
            line: 605,
            column: 19
          }
        },
        loc: {
          start: {
            line: 605,
            column: 28
          },
          end: {
            line: 605,
            column: 69
          }
        },
        line: 605
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 608,
            column: 4
          },
          end: {
            line: 608,
            column: 5
          }
        },
        loc: {
          start: {
            line: 608,
            column: 22
          },
          end: {
            line: 619,
            column: 5
          }
        },
        line: 608
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 620,
            column: 4
          },
          end: {
            line: 620,
            column: 5
          }
        },
        loc: {
          start: {
            line: 620,
            column: 26
          },
          end: {
            line: 649,
            column: 5
          }
        },
        line: 620
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 631,
            column: 32
          },
          end: {
            line: 631,
            column: 33
          }
        },
        loc: {
          start: {
            line: 631,
            column: 37
          },
          end: {
            line: 631,
            column: 66
          }
        },
        line: 631
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 631,
            column: 75
          },
          end: {
            line: 631,
            column: 76
          }
        },
        loc: {
          start: {
            line: 631,
            column: 80
          },
          end: {
            line: 631,
            column: 89
          }
        },
        line: 631
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 632,
            column: 60
          },
          end: {
            line: 632,
            column: 61
          }
        },
        loc: {
          start: {
            line: 632,
            column: 72
          },
          end: {
            line: 632,
            column: 79
          }
        },
        line: 632
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 650,
            column: 4
          },
          end: {
            line: 650,
            column: 5
          }
        },
        loc: {
          start: {
            line: 650,
            column: 32
          },
          end: {
            line: 673,
            column: 5
          }
        },
        line: 650
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 658,
            column: 25
          },
          end: {
            line: 658,
            column: 26
          }
        },
        loc: {
          start: {
            line: 658,
            column: 35
          },
          end: {
            line: 663,
            column: 9
          }
        },
        line: 658
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 659,
            column: 27
          },
          end: {
            line: 659,
            column: 28
          }
        },
        loc: {
          start: {
            line: 659,
            column: 43
          },
          end: {
            line: 662,
            column: 13
          }
        },
        line: 659
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 665,
            column: 25
          },
          end: {
            line: 665,
            column: 26
          }
        },
        loc: {
          start: {
            line: 665,
            column: 35
          },
          end: {
            line: 671,
            column: 9
          }
        },
        line: 665
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 666,
            column: 48
          },
          end: {
            line: 666,
            column: 49
          }
        },
        loc: {
          start: {
            line: 666,
            column: 64
          },
          end: {
            line: 669,
            column: 13
          }
        },
        line: 666
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 674,
            column: 4
          },
          end: {
            line: 674,
            column: 5
          }
        },
        loc: {
          start: {
            line: 674,
            column: 28
          },
          end: {
            line: 683,
            column: 5
          }
        },
        line: 674
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 681,
            column: 30
          },
          end: {
            line: 681,
            column: 31
          }
        },
        loc: {
          start: {
            line: 681,
            column: 36
          },
          end: {
            line: 681,
            column: 37
          }
        },
        line: 681
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 682,
            column: 26
          },
          end: {
            line: 682,
            column: 27
          }
        },
        loc: {
          start: {
            line: 682,
            column: 35
          },
          end: {
            line: 682,
            column: 56
          }
        },
        line: 682
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 684,
            column: 4
          },
          end: {
            line: 684,
            column: 5
          }
        },
        loc: {
          start: {
            line: 684,
            column: 27
          },
          end: {
            line: 694,
            column: 5
          }
        },
        line: 684
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 689,
            column: 35
          },
          end: {
            line: 689,
            column: 36
          }
        },
        loc: {
          start: {
            line: 689,
            column: 47
          },
          end: {
            line: 689,
            column: 54
          }
        },
        line: 689
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 690,
            column: 36
          },
          end: {
            line: 690,
            column: 37
          }
        },
        loc: {
          start: {
            line: 690,
            column: 51
          },
          end: {
            line: 690,
            column: 64
          }
        },
        line: 690
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 695,
            column: 4
          },
          end: {
            line: 695,
            column: 5
          }
        },
        loc: {
          start: {
            line: 695,
            column: 32
          },
          end: {
            line: 701,
            column: 5
          }
        },
        line: 695
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 698,
            column: 35
          },
          end: {
            line: 698,
            column: 36
          }
        },
        loc: {
          start: {
            line: 698,
            column: 47
          },
          end: {
            line: 698,
            column: 54
          }
        },
        line: 698
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 699,
            column: 39
          },
          end: {
            line: 699,
            column: 40
          }
        },
        loc: {
          start: {
            line: 699,
            column: 51
          },
          end: {
            line: 699,
            column: 78
          }
        },
        line: 699
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 704,
            column: 4
          },
          end: {
            line: 704,
            column: 5
          }
        },
        loc: {
          start: {
            line: 704,
            column: 52
          },
          end: {
            line: 707,
            column: 5
          }
        },
        line: 704
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 708,
            column: 4
          },
          end: {
            line: 708,
            column: 5
          }
        },
        loc: {
          start: {
            line: 708,
            column: 37
          },
          end: {
            line: 711,
            column: 5
          }
        },
        line: 708
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 712,
            column: 4
          },
          end: {
            line: 712,
            column: 5
          }
        },
        loc: {
          start: {
            line: 712,
            column: 47
          },
          end: {
            line: 715,
            column: 5
          }
        },
        line: 712
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 716,
            column: 4
          },
          end: {
            line: 716,
            column: 5
          }
        },
        loc: {
          start: {
            line: 716,
            column: 87
          },
          end: {
            line: 728,
            column: 5
          }
        },
        line: 716
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 729,
            column: 4
          },
          end: {
            line: 729,
            column: 5
          }
        },
        loc: {
          start: {
            line: 729,
            column: 34
          },
          end: {
            line: 738,
            column: 5
          }
        },
        line: 729
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 739,
            column: 4
          },
          end: {
            line: 739,
            column: 5
          }
        },
        loc: {
          start: {
            line: 739,
            column: 56
          },
          end: {
            line: 744,
            column: 5
          }
        },
        line: 739
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 746,
            column: 4
          },
          end: {
            line: 746,
            column: 5
          }
        },
        loc: {
          start: {
            line: 746,
            column: 34
          },
          end: {
            line: 752,
            column: 5
          }
        },
        line: 746
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 753,
            column: 4
          },
          end: {
            line: 753,
            column: 5
          }
        },
        loc: {
          start: {
            line: 753,
            column: 51
          },
          end: {
            line: 755,
            column: 5
          }
        },
        line: 753
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 756,
            column: 4
          },
          end: {
            line: 756,
            column: 5
          }
        },
        loc: {
          start: {
            line: 756,
            column: 53
          },
          end: {
            line: 759,
            column: 5
          }
        },
        line: 756
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 760,
            column: 4
          },
          end: {
            line: 760,
            column: 5
          }
        },
        loc: {
          start: {
            line: 760,
            column: 38
          },
          end: {
            line: 764,
            column: 5
          }
        },
        line: 760
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 762,
            column: 35
          },
          end: {
            line: 762,
            column: 36
          }
        },
        loc: {
          start: {
            line: 762,
            column: 45
          },
          end: {
            line: 762,
            column: 50
          }
        },
        line: 762
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 765,
            column: 4
          },
          end: {
            line: 765,
            column: 5
          }
        },
        loc: {
          start: {
            line: 765,
            column: 46
          },
          end: {
            line: 768,
            column: 5
          }
        },
        line: 765
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 769,
            column: 4
          },
          end: {
            line: 769,
            column: 5
          }
        },
        loc: {
          start: {
            line: 769,
            column: 44
          },
          end: {
            line: 772,
            column: 5
          }
        },
        line: 769
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 773,
            column: 4
          },
          end: {
            line: 773,
            column: 5
          }
        },
        loc: {
          start: {
            line: 773,
            column: 58
          },
          end: {
            line: 779,
            column: 5
          }
        },
        line: 773
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 780,
            column: 4
          },
          end: {
            line: 780,
            column: 5
          }
        },
        loc: {
          start: {
            line: 780,
            column: 38
          },
          end: {
            line: 787,
            column: 5
          }
        },
        line: 780
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 788,
            column: 4
          },
          end: {
            line: 788,
            column: 5
          }
        },
        loc: {
          start: {
            line: 788,
            column: 44
          },
          end: {
            line: 797,
            column: 5
          }
        },
        line: 788
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 798,
            column: 4
          },
          end: {
            line: 798,
            column: 5
          }
        },
        loc: {
          start: {
            line: 798,
            column: 54
          },
          end: {
            line: 804,
            column: 5
          }
        },
        line: 798
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 805,
            column: 4
          },
          end: {
            line: 805,
            column: 5
          }
        },
        loc: {
          start: {
            line: 805,
            column: 32
          },
          end: {
            line: 808,
            column: 5
          }
        },
        line: 805
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 809,
            column: 4
          },
          end: {
            line: 809,
            column: 5
          }
        },
        loc: {
          start: {
            line: 809,
            column: 30
          },
          end: {
            line: 812,
            column: 5
          }
        },
        line: 809
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 813,
            column: 4
          },
          end: {
            line: 813,
            column: 5
          }
        },
        loc: {
          start: {
            line: 813,
            column: 27
          },
          end: {
            line: 816,
            column: 5
          }
        },
        line: 813
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 817,
            column: 4
          },
          end: {
            line: 817,
            column: 5
          }
        },
        loc: {
          start: {
            line: 817,
            column: 31
          },
          end: {
            line: 820,
            column: 5
          }
        },
        line: 817
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 821,
            column: 4
          },
          end: {
            line: 821,
            column: 5
          }
        },
        loc: {
          start: {
            line: 821,
            column: 30
          },
          end: {
            line: 829,
            column: 5
          }
        },
        line: 821
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 830,
            column: 4
          },
          end: {
            line: 830,
            column: 5
          }
        },
        loc: {
          start: {
            line: 830,
            column: 51
          },
          end: {
            line: 836,
            column: 5
          }
        },
        line: 830
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 837,
            column: 4
          },
          end: {
            line: 837,
            column: 5
          }
        },
        loc: {
          start: {
            line: 837,
            column: 80
          },
          end: {
            line: 854,
            column: 5
          }
        },
        line: 837
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 855,
            column: 4
          },
          end: {
            line: 855,
            column: 5
          }
        },
        loc: {
          start: {
            line: 855,
            column: 44
          },
          end: {
            line: 858,
            column: 5
          }
        },
        line: 855
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 76,
            column: 37
          },
          end: {
            line: 76,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 53
          },
          end: {
            line: 76,
            column: 55
          }
        }],
        line: 76
      },
      "18": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "19": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "20": {
        loc: {
          start: {
            line: 127,
            column: 37
          },
          end: {
            line: 127,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 53
          },
          end: {
            line: 127,
            column: 55
          }
        }],
        line: 127
      },
      "21": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "22": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "23": {
        loc: {
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 157,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 157,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "24": {
        loc: {
          start: {
            line: 191,
            column: 34
          },
          end: {
            line: 191,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 191,
            column: 46
          },
          end: {
            line: 191,
            column: 51
          }
        }],
        line: 191
      },
      "25": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "26": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "27": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "28": {
        loc: {
          start: {
            line: 221,
            column: 32
          },
          end: {
            line: 223,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 14
          },
          end: {
            line: 222,
            column: 76
          }
        }, {
          start: {
            line: 223,
            column: 14
          },
          end: {
            line: 223,
            column: 23
          }
        }],
        line: 221
      },
      "29": {
        loc: {
          start: {
            line: 247,
            column: 26
          },
          end: {
            line: 247,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 247,
            column: 36
          },
          end: {
            line: 247,
            column: 86
          }
        }],
        line: 247
      },
      "30": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "31": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "32": {
        loc: {
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 270,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 270,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "33": {
        loc: {
          start: {
            line: 278,
            column: 30
          },
          end: {
            line: 278,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 30
          },
          end: {
            line: 278,
            column: 86
          }
        }, {
          start: {
            line: 278,
            column: 90
          },
          end: {
            line: 278,
            column: 93
          }
        }],
        line: 278
      },
      "34": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "35": {
        loc: {
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 304,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 304,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "36": {
        loc: {
          start: {
            line: 342,
            column: 39
          },
          end: {
            line: 342,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 342,
            column: 56
          },
          end: {
            line: 342,
            column: 58
          }
        }],
        line: 342
      },
      "37": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "38": {
        loc: {
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "39": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "40": {
        loc: {
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 396,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 395,
            column: 52
          }
        }, {
          start: {
            line: 396,
            column: 12
          },
          end: {
            line: 396,
            column: 89
          }
        }],
        line: 395
      },
      "41": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "42": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 452,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 452,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "43": {
        loc: {
          start: {
            line: 447,
            column: 16
          },
          end: {
            line: 451,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 16
          },
          end: {
            line: 451,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "44": {
        loc: {
          start: {
            line: 471,
            column: 55
          },
          end: {
            line: 471,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 70
          },
          end: {
            line: 471,
            column: 81
          }
        }, {
          start: {
            line: 471,
            column: 84
          },
          end: {
            line: 471,
            column: 129
          }
        }],
        line: 471
      },
      "45": {
        loc: {
          start: {
            line: 471,
            column: 143
          },
          end: {
            line: 471,
            column: 171
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 143
          },
          end: {
            line: 471,
            column: 158
          }
        }, {
          start: {
            line: 471,
            column: 162
          },
          end: {
            line: 471,
            column: 171
          }
        }],
        line: 471
      },
      "46": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "47": {
        loc: {
          start: {
            line: 578,
            column: 20
          },
          end: {
            line: 580,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 20
          },
          end: {
            line: 580,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 578
      },
      "48": {
        loc: {
          start: {
            line: 602,
            column: 29
          },
          end: {
            line: 604,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 602,
            column: 29
          },
          end: {
            line: 602,
            column: 48
          }
        }, {
          start: {
            line: 603,
            column: 13
          },
          end: {
            line: 603,
            column: 53
          }
        }, {
          start: {
            line: 604,
            column: 16
          },
          end: {
            line: 604,
            column: 56
          }
        }],
        line: 602
      },
      "49": {
        loc: {
          start: {
            line: 606,
            column: 15
          },
          end: {
            line: 606,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 606,
            column: 15
          },
          end: {
            line: 606,
            column: 28
          }
        }, {
          start: {
            line: 606,
            column: 32
          },
          end: {
            line: 606,
            column: 36
          }
        }],
        line: 606
      },
      "50": {
        loc: {
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 622,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 622,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 621
      },
      "51": {
        loc: {
          start: {
            line: 624,
            column: 35
          },
          end: {
            line: 624,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 624,
            column: 35
          },
          end: {
            line: 624,
            column: 51
          }
        }, {
          start: {
            line: 624,
            column: 55
          },
          end: {
            line: 624,
            column: 72
          }
        }],
        line: 624
      },
      "52": {
        loc: {
          start: {
            line: 629,
            column: 26
          },
          end: {
            line: 629,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 629,
            column: 83
          },
          end: {
            line: 629,
            column: 84
          }
        }, {
          start: {
            line: 629,
            column: 87
          },
          end: {
            line: 629,
            column: 88
          }
        }],
        line: 629
      },
      "53": {
        loc: {
          start: {
            line: 629,
            column: 27
          },
          end: {
            line: 629,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 629,
            column: 27
          },
          end: {
            line: 629,
            column: 51
          }
        }, {
          start: {
            line: 629,
            column: 55
          },
          end: {
            line: 629,
            column: 79
          }
        }],
        line: 629
      },
      "54": {
        loc: {
          start: {
            line: 631,
            column: 37
          },
          end: {
            line: 631,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 631,
            column: 37
          },
          end: {
            line: 631,
            column: 44
          }
        }, {
          start: {
            line: 631,
            column: 48
          },
          end: {
            line: 631,
            column: 61
          }
        }, {
          start: {
            line: 631,
            column: 65
          },
          end: {
            line: 631,
            column: 66
          }
        }],
        line: 631
      },
      "55": {
        loc: {
          start: {
            line: 632,
            column: 26
          },
          end: {
            line: 632,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 632,
            column: 46
          },
          end: {
            line: 632,
            column: 99
          }
        }, {
          start: {
            line: 632,
            column: 102
          },
          end: {
            line: 632,
            column: 103
          }
        }],
        line: 632
      },
      "56": {
        loc: {
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 652,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 652,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 651
      },
      "57": {
        loc: {
          start: {
            line: 668,
            column: 23
          },
          end: {
            line: 668,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 668,
            column: 37
          },
          end: {
            line: 668,
            column: 38
          }
        }, {
          start: {
            line: 668,
            column: 41
          },
          end: {
            line: 668,
            column: 68
          }
        }],
        line: 668
      },
      "58": {
        loc: {
          start: {
            line: 675,
            column: 8
          },
          end: {
            line: 676,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 675,
            column: 8
          },
          end: {
            line: 676,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 675
      },
      "59": {
        loc: {
          start: {
            line: 680,
            column: 8
          },
          end: {
            line: 681,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 680,
            column: 8
          },
          end: {
            line: 681,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 680
      },
      "60": {
        loc: {
          start: {
            line: 685,
            column: 8
          },
          end: {
            line: 686,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 685,
            column: 8
          },
          end: {
            line: 686,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 685
      },
      "61": {
        loc: {
          start: {
            line: 693,
            column: 15
          },
          end: {
            line: 693,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 693,
            column: 30
          },
          end: {
            line: 693,
            column: 31
          }
        }, {
          start: {
            line: 693,
            column: 34
          },
          end: {
            line: 693,
            column: 39
          }
        }],
        line: 693
      },
      "62": {
        loc: {
          start: {
            line: 696,
            column: 8
          },
          end: {
            line: 697,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 696,
            column: 8
          },
          end: {
            line: 697,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 696
      },
      "63": {
        loc: {
          start: {
            line: 718,
            column: 8
          },
          end: {
            line: 726,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 718,
            column: 8
          },
          end: {
            line: 726,
            column: 9
          }
        }, {
          start: {
            line: 723,
            column: 13
          },
          end: {
            line: 726,
            column: 9
          }
        }],
        line: 718
      },
      "64": {
        loc: {
          start: {
            line: 737,
            column: 15
          },
          end: {
            line: 737,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 737,
            column: 15
          },
          end: {
            line: 737,
            column: 32
          }
        }, {
          start: {
            line: 737,
            column: 36
          },
          end: {
            line: 737,
            column: 50
          }
        }],
        line: 737
      },
      "65": {
        loc: {
          start: {
            line: 742,
            column: 22
          },
          end: {
            line: 742,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 742,
            column: 43
          },
          end: {
            line: 742,
            column: 44
          }
        }, {
          start: {
            line: 742,
            column: 47
          },
          end: {
            line: 742,
            column: 74
          }
        }],
        line: 742
      },
      "66": {
        loc: {
          start: {
            line: 742,
            column: 47
          },
          end: {
            line: 742,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 742,
            column: 68
          },
          end: {
            line: 742,
            column: 69
          }
        }, {
          start: {
            line: 742,
            column: 72
          },
          end: {
            line: 742,
            column: 74
          }
        }],
        line: 742
      },
      "67": {
        loc: {
          start: {
            line: 786,
            column: 15
          },
          end: {
            line: 786,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 786,
            column: 15
          },
          end: {
            line: 786,
            column: 33
          }
        }, {
          start: {
            line: 786,
            column: 37
          },
          end: {
            line: 786,
            column: 38
          }
        }],
        line: 786
      },
      "68": {
        loc: {
          start: {
            line: 790,
            column: 8
          },
          end: {
            line: 791,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 790,
            column: 8
          },
          end: {
            line: 791,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 790
      },
      "69": {
        loc: {
          start: {
            line: 792,
            column: 8
          },
          end: {
            line: 793,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 792,
            column: 8
          },
          end: {
            line: 793,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 792
      },
      "70": {
        loc: {
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 795,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 795,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 794
      },
      "71": {
        loc: {
          start: {
            line: 822,
            column: 8
          },
          end: {
            line: 823,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 822,
            column: 8
          },
          end: {
            line: 823,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 822
      },
      "72": {
        loc: {
          start: {
            line: 840,
            column: 8
          },
          end: {
            line: 852,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 840,
            column: 8
          },
          end: {
            line: 852,
            column: 9
          }
        }, {
          start: {
            line: 845,
            column: 13
          },
          end: {
            line: 852,
            column: 9
          }
        }],
        line: 840
      },
      "73": {
        loc: {
          start: {
            line: 845,
            column: 13
          },
          end: {
            line: 852,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 845,
            column: 13
          },
          end: {
            line: 852,
            column: 9
          }
        }, {
          start: {
            line: 849,
            column: 13
          },
          end: {
            line: 852,
            column: 9
          }
        }],
        line: 845
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/PredictiveAnalytics.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/PredictiveAnalytics.ts"],
      sourcesContent: ["import * as tf from '@tensorflow/tfjs-node';\nimport { EventStore, AnalyticsEvent } from './EventStore';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\n\nexport interface PredictionModel {\n  id: string;\n  name: string;\n  type: 'capacity' | 'anomaly' | 'performance' | 'cost';\n  model: tf.LayersModel;\n  metadata: {\n    trainedAt: Date;\n    accuracy: number;\n    features: string[];\n    targetVariable: string;\n    sampleSize: number;\n    version: string;\n  };\n}\n\nexport interface CapacityPrediction {\n  metric: string;\n  timeframe: '1h' | '6h' | '24h' | '7d' | '30d';\n  currentValue: number;\n  predictedValue: number;\n  confidence: number;\n  threshold: number;\n  willExceedThreshold: boolean;\n  timeToThreshold?: Date;\n  recommendations: string[];\n}\n\nexport interface AnomalyDetection {\n  id: string;\n  metric: string;\n  value: number;\n  expectedValue: number;\n  deviation: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  probability: number;\n  timestamp: Date;\n  context: Record<string, any>;\n  recommendations: string[];\n}\n\nexport interface MLInsight {\n  id: string;\n  type: 'trend' | 'correlation' | 'pattern' | 'forecast';\n  title: string;\n  description: string;\n  confidence: number;\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  data: any;\n  timestamp: Date;\n  recommendations: string[];\n  relatedMetrics: string[];\n}\n\nexport interface TrainingData {\n  features: number[][];\n  labels: number[];\n  timestamps: Date[];\n  metadata: Record<string, any>;\n}\n\nexport class PredictiveAnalytics {\n  private models: Map<string, PredictionModel>;\n  private cache: LRUCache<string, any>;\n  private eventStore: EventStore;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  private isTraining: boolean = false;\n  private lastTrainingTime: Date | null = null;\n  private anomalyThresholds: Map<string, { mean: number; stdDev: number; threshold: number }>;\n\n  constructor() {\n    this.models = new Map();\n    this.cache = new LRUCache({\n      max: 500,\n      ttl: 1000 * 60 * 10 // 10 minutes cache for predictions\n    });\n    this.eventStore = EventStore.getInstance();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n    this.anomalyThresholds = new Map();\n    \n    // Initialize TensorFlow.js\n    this.initializeTensorFlow();\n    \n    // Load pre-trained models if available\n    this.loadExistingModels();\n  }\n\n  /**\n   * Initialize TensorFlow.js backend\n   */\n  private async initializeTensorFlow(): Promise<void> {\n    try {\n      await tf.ready();\n      console.log('TensorFlow.js backend initialized:', tf.getBackend());\n    } catch (error) {\n      console.error('Failed to initialize TensorFlow.js:', error);\n    }\n  }\n\n  /**\n   * Train capacity planning model\n   */\n  public async trainCapacityModel(\n    metric: string,\n    timeframeDays: number = 30\n  ): Promise<PredictionModel> {\n    if (this.isTraining) {\n      throw new Error('Training already in progress');\n    }\n\n    this.isTraining = true;\n    const startTime = performance.now();\n\n    try {\n      console.log(`Training capacity prediction model for ${metric}...`);\n\n      // Collect training data\n      const trainingData = await this.collectTrainingData(metric, timeframeDays);\n      \n      if (trainingData.features.length < 50) {\n        throw new Error(`Insufficient training data: ${trainingData.features.length} samples`);\n      }\n\n      // Prepare data tensors\n      const { xTrain, yTrain, xValidation, yValidation } = this.prepareTrainingData(trainingData);\n\n      // Create and configure model\n      const model = this.createCapacityModel(trainingData.features[0].length);\n\n      // Train model\n      const history = await this.trainModel(model, xTrain, yTrain, xValidation, yValidation);\n\n      // Evaluate model\n      const accuracy = await this.evaluateModel(model, xValidation, yValidation);\n\n      // Create prediction model object\n      const predictionModel: PredictionModel = {\n        id: `capacity_${metric}_${Date.now()}`,\n        name: `Capacity Prediction for ${metric}`,\n        type: 'capacity',\n        model,\n        metadata: {\n          trainedAt: new Date(),\n          accuracy,\n          features: this.getFeatureNames(),\n          targetVariable: metric,\n          sampleSize: trainingData.features.length,\n          version: '1.0.0'\n        }\n      };\n\n      // Store model\n      this.models.set(predictionModel.id, predictionModel);\n\n      // Save model to disk\n      await this.saveModel(predictionModel);\n\n      this.lastTrainingTime = new Date();\n      console.log(`Capacity model trained in ${(performance.now() - startTime).toFixed(2)}ms with accuracy: ${accuracy.toFixed(4)}`);\n\n      return predictionModel;\n\n    } finally {\n      this.isTraining = false;\n    }\n  }\n\n  /**\n   * Train anomaly detection model\n   */\n  public async trainAnomalyModel(\n    metrics: string[],\n    timeframeDays: number = 30\n  ): Promise<PredictionModel> {\n    if (this.isTraining) {\n      throw new Error('Training already in progress');\n    }\n\n    this.isTraining = true;\n    const startTime = performance.now();\n\n    try {\n      console.log(`Training anomaly detection model for metrics: ${metrics.join(', ')}...`);\n\n      // Collect multi-metric training data\n      const trainingData = await this.collectMultiMetricTrainingData(metrics, timeframeDays);\n      \n      if (trainingData.features.length < 100) {\n        throw new Error(`Insufficient training data: ${trainingData.features.length} samples`);\n      }\n\n      // Calculate statistical thresholds for each metric\n      await this.calculateAnomalyThresholds(trainingData);\n\n      // Create autoencoder for anomaly detection\n      const model = this.createAnomalyModel(trainingData.features[0].length);\n\n      // Prepare training data (anomaly detection is unsupervised)\n      const xTensor = tf.tensor2d(trainingData.features);\n      const { xTrain, xValidation } = this.splitData(xTensor, 0.8);\n\n      // Train autoencoder\n      const history = await model.fit(xTrain, xTrain, {\n        epochs: 100,\n        batchSize: 32,\n        validationData: [xValidation, xValidation],\n        shuffle: true,\n        callbacks: {\n          onEpochEnd: (epoch, logs) => {\n            if (epoch % 10 === 0) {\n              console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}, val_loss = ${logs?.val_loss?.toFixed(4)}`);\n            }\n          }\n        }\n      });\n\n      // Calculate reconstruction threshold\n      const reconstructionErrors = await this.calculateReconstructionErrors(model, xValidation);\n      const threshold = this.calculateAnomalyThreshold(reconstructionErrors);\n\n      const predictionModel: PredictionModel = {\n        id: `anomaly_${metrics.join('_')}_${Date.now()}`,\n        name: `Anomaly Detection for ${metrics.join(', ')}`,\n        type: 'anomaly',\n        model,\n        metadata: {\n          trainedAt: new Date(),\n          accuracy: threshold,\n          features: metrics,\n          targetVariable: 'anomaly_score',\n          sampleSize: trainingData.features.length,\n          version: '1.0.0'\n        }\n      };\n\n      this.models.set(predictionModel.id, predictionModel);\n      await this.saveModel(predictionModel);\n\n      this.lastTrainingTime = new Date();\n      console.log(`Anomaly model trained in ${(performance.now() - startTime).toFixed(2)}ms`);\n\n      return predictionModel;\n\n    } finally {\n      this.isTraining = false;\n    }\n  }\n\n  /**\n   * Generate capacity predictions\n   */\n  public async predictCapacity(\n    metric: string,\n    timeframe: CapacityPrediction['timeframe'] = '24h'\n  ): Promise<CapacityPrediction> {\n    const cacheKey = `capacity_prediction_${metric}_${timeframe}`;\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const model = this.findBestModel('capacity', metric);\n    if (!model) {\n      throw new Error(`No capacity model available for metric: ${metric}`);\n    }\n\n    // Get recent data for prediction\n    const recentData = await this.getRecentDataForPrediction(metric, 24); // Last 24 hours\n    \n    if (recentData.length === 0) {\n      throw new Error(`No recent data available for metric: ${metric}`);\n    }\n\n    // Prepare input features\n    const features = this.extractFeatures(recentData);\n    const inputTensor = tf.tensor2d([features]);\n\n    // Make prediction\n    const prediction = model.model.predict(inputTensor) as tf.Tensor;\n    const predictedValue = (await prediction.data())[0];\n\n    // Get current value\n    const currentValue = recentData[recentData.length - 1].value;\n\n    // Calculate confidence based on model accuracy and data variance\n    const confidence = this.calculatePredictionConfidence(model, recentData);\n\n    // Get threshold for this metric\n    const threshold = await this.getMetricThreshold(metric);\n\n    // Determine if threshold will be exceeded\n    const willExceedThreshold = predictedValue > threshold;\n\n    // Estimate time to threshold if applicable\n    const timeToThreshold = willExceedThreshold \n      ? this.estimateTimeToThreshold(recentData, threshold, timeframe)\n      : undefined;\n\n    // Generate recommendations\n    const recommendations = this.generateCapacityRecommendations(\n      metric,\n      currentValue,\n      predictedValue,\n      threshold,\n      willExceedThreshold\n    );\n\n    const result: CapacityPrediction = {\n      metric,\n      timeframe,\n      currentValue,\n      predictedValue,\n      confidence,\n      threshold,\n      willExceedThreshold,\n      timeToThreshold,\n      recommendations\n    };\n\n    // Cache result\n    this.cache.set(cacheKey, result, { ttl: this.getTTLForTimeframe(timeframe) });\n\n    // Cleanup tensors\n    inputTensor.dispose();\n    prediction.dispose();\n\n    return result;\n  }\n\n  /**\n   * Detect anomalies in real-time data\n   */\n  public async detectAnomalies(\n    metrics: string[] = ['cpu_usage', 'memory_usage', 'app_response_time']\n  ): Promise<AnomalyDetection[]> {\n    const cacheKey = `anomaly_detection_${metrics.join('_')}`;\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const model = this.findBestModel('anomaly', metrics.join('_'));\n    if (!model) {\n      throw new Error(`No anomaly model available for metrics: ${metrics.join(', ')}`);\n    }\n\n    const anomalies: AnomalyDetection[] = [];\n\n    // Get recent data for all metrics\n    const recentDataMap = new Map<string, any[]>();\n    for (const metric of metrics) {\n      const data = await this.getRecentDataForPrediction(metric, 1); // Last hour\n      recentDataMap.set(metric, data);\n    }\n\n    // Process each time window\n    const timeWindows = this.createTimeWindows(recentDataMap, 5); // 5-minute windows\n\n    for (const window of timeWindows) {\n      // Extract features for this time window\n      const features = this.extractAnomalyFeatures(window, metrics);\n      \n      if (features.length === 0) continue;\n\n      // Get expected values using model\n      const inputTensor = tf.tensor2d([features]);\n      const reconstruction = model.model.predict(inputTensor) as tf.Tensor;\n      const reconstructedValues = await reconstruction.data();\n\n      // Calculate reconstruction error\n      const reconstructionError = this.calculateReconstructionError(features, Array.from(reconstructedValues));\n\n      // Check against threshold\n      const threshold = this.anomalyThresholds.get(metrics.join('_'))?.threshold || 0.1;\n      \n      if (reconstructionError > threshold) {\n        // Determine which metrics are anomalous\n        for (let i = 0; i < metrics.length; i++) {\n          const metric = metrics[i];\n          const currentValue = features[i];\n          const expectedValue = reconstructedValues[i];\n          const deviation = Math.abs(currentValue - expectedValue);\n\n          if (deviation > this.getMetricAnomalyThreshold(metric)) {\n            const anomaly: AnomalyDetection = {\n              id: `anomaly_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n              metric,\n              value: currentValue,\n              expectedValue,\n              deviation,\n              severity: this.determineSeverity(deviation, this.getMetricAnomalyThreshold(metric)),\n              probability: Math.min(reconstructionError / threshold, 1.0),\n              timestamp: window.timestamp,\n              context: {\n                reconstructionError,\n                threshold,\n                allMetrics: Object.fromEntries(\n                  metrics.map((m, idx) => [m, features[idx]])\n                )\n              },\n              recommendations: this.generateAnomalyRecommendations(metric, deviation)\n            };\n\n            anomalies.push(anomaly);\n          }\n        }\n      }\n\n      // Cleanup tensors\n      inputTensor.dispose();\n      reconstruction.dispose();\n    }\n\n    // Cache results for a short time\n    this.cache.set(cacheKey, anomalies, { ttl: 1000 * 60 * 2 }); // 2 minutes\n\n    return anomalies;\n  }\n\n  /**\n   * Generate ML-powered insights\n   */\n  public async generateMLInsights(): Promise<MLInsight[]> {\n    const insights: MLInsight[] = [];\n\n    try {\n      // Correlation analysis\n      const correlationInsights = await this.analyzeCorrelations();\n      insights.push(...correlationInsights);\n\n      // Pattern recognition\n      const patternInsights = await this.recognizePatterns();\n      insights.push(...patternInsights);\n\n      // Trend forecasting\n      const trendInsights = await this.forecastTrends();\n      insights.push(...trendInsights);\n\n      // Performance bottleneck analysis\n      const bottleneckInsights = await this.analyzeBottlenecks();\n      insights.push(...bottleneckInsights);\n\n    } catch (error) {\n      console.error('Error generating ML insights:', error);\n    }\n\n    return insights;\n  }\n\n  /**\n   * Get growth projections for capacity planning\n   */\n  public async getGrowthProjections(\n    metric: string,\n    projectionDays: number = 30\n  ): Promise<{\n    current: number;\n    projected: number;\n    growthRate: number;\n    projectionDates: Date[];\n    projectedValues: number[];\n    confidence: number;\n    recommendations: string[];\n  }> {\n    const model = this.findBestModel('capacity', metric);\n    if (!model) {\n      throw new Error(`No capacity model available for metric: ${metric}`);\n    }\n\n    // Get historical data for trend analysis\n    const historicalData = await this.getRecentDataForPrediction(metric, projectionDays * 3);\n    \n    if (historicalData.length === 0) {\n      throw new Error(`No historical data available for metric: ${metric}`);\n    }\n\n    // Calculate growth rate\n    const growthRate = this.calculateGrowthRate(historicalData);\n\n    // Generate projections\n    const projectionDates: Date[] = [];\n    const projectedValues: number[] = [];\n    const currentValue = historicalData[historicalData.length - 1].value;\n\n    for (let i = 1; i <= projectionDays; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() + i);\n      projectionDates.push(date);\n\n      // Use model to predict future value\n      const features = this.extrapolateFeatures(historicalData, i);\n      const inputTensor = tf.tensor2d([features]);\n      const prediction = model.model.predict(inputTensor) as tf.Tensor;\n      const predictedValue = (await prediction.data())[0];\n      \n      projectedValues.push(predictedValue);\n\n      // Cleanup\n      inputTensor.dispose();\n      prediction.dispose();\n    }\n\n    const projectedValue = projectedValues[projectedValues.length - 1];\n    const confidence = this.calculatePredictionConfidence(model, historicalData);\n\n    // Generate recommendations based on projections\n    const recommendations = this.generateGrowthRecommendations(\n      metric,\n      currentValue,\n      projectedValue,\n      growthRate,\n      projectionDays\n    );\n\n    return {\n      current: currentValue,\n      projected: projectedValue,\n      growthRate,\n      projectionDates,\n      projectedValues,\n      confidence,\n      recommendations\n    };\n  }\n\n  /**\n   * Auto-retrain models based on data drift\n   */\n  public async autoRetrainModels(): Promise<void> {\n    if (this.isTraining) {\n      console.log('Training already in progress, skipping auto-retrain');\n      return;\n    }\n\n    const now = new Date();\n    const shouldRetrain = !this.lastTrainingTime || \n      (now.getTime() - this.lastTrainingTime.getTime()) > (7 * 24 * 60 * 60 * 1000); // 7 days\n\n    if (!shouldRetrain) {\n      return;\n    }\n\n    console.log('Starting auto-retrain of ML models...');\n\n    try {\n      // Retrain capacity models for key metrics\n      const keyMetrics = ['cpu_usage', 'memory_usage', 'app_response_time', 'app_queue_size'];\n      \n      for (const metric of keyMetrics) {\n        try {\n          await this.trainCapacityModel(metric, 30);\n          console.log(`Successfully retrained capacity model for ${metric}`);\n        } catch (error) {\n          console.error(`Failed to retrain capacity model for ${metric}:`, error.message);\n        }\n      }\n\n      // Retrain anomaly detection model\n      try {\n        await this.trainAnomalyModel(keyMetrics, 30);\n        console.log('Successfully retrained anomaly detection model');\n      } catch (error) {\n        console.error('Failed to retrain anomaly detection model:', error.message);\n      }\n\n    } catch (error) {\n      console.error('Error during auto-retrain:', error);\n    }\n  }\n\n  // Private helper methods...\n\n  private async loadExistingModels(): Promise<void> {\n    // Implementation to load saved models from disk\n    console.log('Loading existing ML models...');\n  }\n\n  private async collectTrainingData(metric: string, timeframeDays: number): Promise<TrainingData> {\n    const endTime = new Date();\n    const startTime = new Date(endTime.getTime() - (timeframeDays * 24 * 60 * 60 * 1000));\n\n    const events = await this.eventStore.getEvents({\n      start_time: startTime,\n      end_time: endTime,\n      limit: 10000\n    });\n\n    // Extract relevant data points and features\n    const features: number[][] = [];\n    const labels: number[] = [];\n    const timestamps: Date[] = [];\n\n    // Process events to create training data\n    for (const event of events) {\n      if (event.data[metric] !== undefined) {\n        const featureVector = this.extractFeatures([event]);\n        if (featureVector.length > 0) {\n          features.push(featureVector);\n          labels.push(event.data[metric]);\n          timestamps.push(new Date(event.timestamp));\n        }\n      }\n    }\n\n    return {\n      features,\n      labels,\n      timestamps,\n      metadata: { metric, timeframeDays, eventCount: events.length }\n    };\n  }\n\n  private async collectMultiMetricTrainingData(metrics: string[], timeframeDays: number): Promise<TrainingData> {\n    const endTime = new Date();\n    const startTime = new Date(endTime.getTime() - (timeframeDays * 24 * 60 * 60 * 1000));\n\n    const features: number[][] = [];\n    const labels: number[] = [];\n    const timestamps: Date[] = [];\n\n    // Get data for each metric\n    for (const metric of metrics) {\n      const data = await this.getRecentDataForPrediction(metric, timeframeDays * 24);\n      \n      for (const point of data) {\n        const featureVector = metrics.map(m => \n          m === metric ? point.value : this.getMetricValueAtTime(m, point.timestamp)\n        ).filter(v => v !== undefined && !isNaN(v));\n\n        if (featureVector.length === metrics.length) {\n          features.push(featureVector);\n          labels.push(0); // For unsupervised learning\n          timestamps.push(point.timestamp);\n        }\n      }\n    }\n\n    return {\n      features,\n      labels,\n      timestamps,\n      metadata: { metrics, timeframeDays }\n    };\n  }\n\n  private prepareTrainingData(trainingData: TrainingData): {\n    xTrain: tf.Tensor2D;\n    yTrain: tf.Tensor2D;\n    xValidation: tf.Tensor2D;\n    yValidation: tf.Tensor2D;\n  } {\n    // Normalize features\n    const normalizedFeatures = this.normalizeFeatures(trainingData.features);\n    const normalizedLabels = this.normalizeLabels(trainingData.labels);\n\n    // Split data\n    const splitIndex = Math.floor(normalizedFeatures.length * 0.8);\n    \n    const xTrain = tf.tensor2d(normalizedFeatures.slice(0, splitIndex));\n    const yTrain = tf.tensor2d(normalizedLabels.slice(0, splitIndex), [splitIndex, 1]);\n    const xValidation = tf.tensor2d(normalizedFeatures.slice(splitIndex));\n    const yValidation = tf.tensor2d(normalizedLabels.slice(splitIndex), [normalizedLabels.length - splitIndex, 1]);\n\n    return { xTrain, yTrain, xValidation, yValidation };\n  }\n\n  private createCapacityModel(inputShape: number): tf.LayersModel {\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({\n          inputShape: [inputShape],\n          units: 64,\n          activation: 'relu',\n          kernelRegularizer: tf.regularizers.l2({ l2: 0.01 })\n        }),\n        tf.layers.dropout({ rate: 0.2 }),\n        tf.layers.dense({\n          units: 32,\n          activation: 'relu',\n          kernelRegularizer: tf.regularizers.l2({ l2: 0.01 })\n        }),\n        tf.layers.dropout({ rate: 0.2 }),\n        tf.layers.dense({\n          units: 16,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 1,\n          activation: 'linear'\n        })\n      ]\n    });\n\n    model.compile({\n      optimizer: tf.train.adam(0.001),\n      loss: 'meanSquaredError',\n      metrics: ['mae']\n    });\n\n    return model;\n  }\n\n  private createAnomalyModel(inputShape: number): tf.LayersModel {\n    // Autoencoder for anomaly detection\n    const model = tf.sequential({\n      layers: [\n        // Encoder\n        tf.layers.dense({\n          inputShape: [inputShape],\n          units: 32,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 16,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 8,\n          activation: 'relu'\n        }),\n        // Decoder\n        tf.layers.dense({\n          units: 16,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 32,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: inputShape,\n          activation: 'linear'\n        })\n      ]\n    });\n\n    model.compile({\n      optimizer: tf.train.adam(0.001),\n      loss: 'meanSquaredError'\n    });\n\n    return model;\n  }\n\n  private async trainModel(\n    model: tf.LayersModel,\n    xTrain: tf.Tensor2D,\n    yTrain: tf.Tensor2D,\n    xValidation: tf.Tensor2D,\n    yValidation: tf.Tensor2D\n  ): Promise<tf.History> {\n    return await model.fit(xTrain, yTrain, {\n      epochs: 100,\n      batchSize: 32,\n      validationData: [xValidation, yValidation],\n      shuffle: true,\n      callbacks: {\n        onEpochEnd: (epoch, logs) => {\n          if (epoch % 10 === 0) {\n            console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}, val_loss = ${logs?.val_loss?.toFixed(4)}`);\n          }\n        }\n      }\n    });\n  }\n\n  private async evaluateModel(\n    model: tf.LayersModel,\n    xValidation: tf.Tensor2D,\n    yValidation: tf.Tensor2D\n  ): Promise<number> {\n    const evaluation = model.evaluate(xValidation, yValidation) as tf.Tensor[];\n    const loss = await evaluation[0].data();\n    return 1 - loss[0]; // Convert loss to accuracy-like metric\n  }\n\n  private async saveModel(predictionModel: PredictionModel): Promise<void> {\n    try {\n      const modelPath = `file://./models/${predictionModel.id}`;\n      await predictionModel.model.save(modelPath);\n      console.log(`Model saved to ${modelPath}`);\n    } catch (error) {\n      console.error('Failed to save model:', error);\n    }\n  }\n\n  private findBestModel(type: PredictionModel['type'], target: string): PredictionModel | null {\n    const candidates = Array.from(this.models.values())\n      .filter(model => model.type === type && \n        (model.metadata.targetVariable === target || \n         model.metadata.features.includes(target)))\n      .sort((a, b) => b.metadata.accuracy - a.metadata.accuracy);\n\n    return candidates[0] || null;\n  }\n\n  private getFeatureNames(): string[] {\n    return [\n      'hour_of_day',\n      'day_of_week',\n      'month_of_year',\n      'is_weekend',\n      'recent_avg',\n      'recent_trend',\n      'recent_volatility',\n      'seasonal_component'\n    ];\n  }\n\n  private extractFeatures(data: any[]): number[] {\n    if (data.length === 0) return [];\n\n    const latest = data[data.length - 1];\n    const timestamp = new Date(latest.timestamp || latest.created_at);\n\n    // Time-based features\n    const hourOfDay = timestamp.getHours() / 23; // Normalize to [0, 1]\n    const dayOfWeek = timestamp.getDay() / 6;\n    const monthOfYear = timestamp.getMonth() / 11;\n    const isWeekend = (timestamp.getDay() === 0 || timestamp.getDay() === 6) ? 1 : 0;\n\n    // Statistical features from recent data\n    const values = data.map(d => d.value || d.data?.value || 0).filter(v => !isNaN(v));\n    const recentAvg = values.length > 0 ? values.reduce((sum, v) => sum + v, 0) / values.length : 0;\n    \n    // Calculate trend (simple linear regression slope)\n    const recentTrend = this.calculateTrend(values);\n    \n    // Calculate volatility (standard deviation)\n    const recentVolatility = this.calculateVolatility(values);\n    \n    // Seasonal component (simplified)\n    const seasonalComponent = Math.sin(2 * Math.PI * timestamp.getHours() / 24);\n\n    return [\n      hourOfDay,\n      dayOfWeek,\n      monthOfYear,\n      isWeekend,\n      recentAvg,\n      recentTrend,\n      recentVolatility,\n      seasonalComponent\n    ];\n  }\n\n  private normalizeFeatures(features: number[][]): number[][] {\n    if (features.length === 0) return [];\n\n    const numFeatures = features[0].length;\n    const normalized: number[][] = [];\n\n    // Calculate min/max for each feature\n    const mins = new Array(numFeatures).fill(Infinity);\n    const maxs = new Array(numFeatures).fill(-Infinity);\n\n    features.forEach(sample => {\n      sample.forEach((value, idx) => {\n        mins[idx] = Math.min(mins[idx], value);\n        maxs[idx] = Math.max(maxs[idx], value);\n      });\n    });\n\n    // Normalize each sample\n    features.forEach(sample => {\n      const normalizedSample = sample.map((value, idx) => {\n        const range = maxs[idx] - mins[idx];\n        return range === 0 ? 0 : (value - mins[idx]) / range;\n      });\n      normalized.push(normalizedSample);\n    });\n\n    return normalized;\n  }\n\n  private normalizeLabels(labels: number[]): number[] {\n    if (labels.length === 0) return [];\n\n    const min = Math.min(...labels);\n    const max = Math.max(...labels);\n    const range = max - min;\n\n    if (range === 0) return labels.map(() => 0);\n\n    return labels.map(label => (label - min) / range);\n  }\n\n  private calculateTrend(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    const n = values.length;\n    const sumX = (n * (n - 1)) / 2;\n    const sumY = values.reduce((sum, v) => sum + v, 0);\n    const sumXY = values.reduce((sum, v, i) => sum + (i * v), 0);\n    const sumX2 = (n * (n - 1) * (2 * n - 1)) / 6;\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    return isNaN(slope) ? 0 : slope;\n  }\n\n  private calculateVolatility(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  // Additional helper methods would continue here...\n  // (Implementation of remaining methods for space considerations)\n\n  private async getRecentDataForPrediction(metric: string, hours: number): Promise<any[]> {\n    // Implementation to fetch recent data\n    return [];\n  }\n\n  private async getMetricThreshold(metric: string): Promise<number> {\n    // Implementation to get metric thresholds\n    return 100;\n  }\n\n  private calculatePredictionConfidence(model: PredictionModel, data: any[]): number {\n    // Implementation to calculate confidence based on model accuracy and data quality\n    return model.metadata.accuracy * 0.8; // Simplified\n  }\n\n  private generateCapacityRecommendations(\n    metric: string,\n    current: number,\n    predicted: number,\n    threshold: number,\n    willExceed: boolean\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    if (willExceed) {\n      recommendations.push(`${metric} is predicted to exceed threshold of ${threshold}`);\n      recommendations.push('Consider scaling infrastructure proactively');\n      recommendations.push('Review resource allocation policies');\n    } else {\n      recommendations.push(`${metric} is within normal parameters`);\n      recommendations.push('Continue monitoring for trend changes');\n    }\n\n    return recommendations;\n  }\n\n  private getTTLForTimeframe(timeframe: string): number {\n    const ttlMap = {\n      '1h': 1000 * 60 * 5,    // 5 minutes\n      '6h': 1000 * 60 * 15,   // 15 minutes\n      '24h': 1000 * 60 * 30,  // 30 minutes\n      '7d': 1000 * 60 * 60,   // 1 hour\n      '30d': 1000 * 60 * 120  // 2 hours\n    };\n    return ttlMap[timeframe] || 1000 * 60 * 10;\n  }\n\n  private estimateTimeToThreshold(data: any[], threshold: number, timeframe: string): Date | undefined {\n    // Implementation to estimate when threshold will be reached\n    const now = new Date();\n    const hours = timeframe === '1h' ? 1 : timeframe === '6h' ? 6 : 24;\n    return new Date(now.getTime() + (hours * 60 * 60 * 1000));\n  }\n\n  // Implement remaining methods...\n  private splitData(tensor: tf.Tensor2D, splitRatio: number): { xTrain: tf.Tensor2D; xValidation: tf.Tensor2D } {\n    const splitIndex = Math.floor(tensor.shape[0] * splitRatio);\n    return {\n      xTrain: tensor.slice([0, 0], [splitIndex, -1]) as tf.Tensor2D,\n      xValidation: tensor.slice([splitIndex, 0], [-1, -1]) as tf.Tensor2D\n    };\n  }\n\n  private async calculateAnomalyThresholds(trainingData: TrainingData): Promise<void> {\n    // Implementation for calculating statistical thresholds\n  }\n\n  private async calculateReconstructionErrors(model: tf.LayersModel, data: tf.Tensor2D): Promise<number[]> {\n    // Implementation for calculating reconstruction errors\n    return [];\n  }\n\n  private calculateAnomalyThreshold(errors: number[]): number {\n    // Use 95th percentile as threshold\n    const sorted = errors.sort((a, b) => a - b);\n    return sorted[Math.floor(sorted.length * 0.95)];\n  }\n\n  private createTimeWindows(dataMap: Map<string, any[]>, windowMinutes: number): any[] {\n    // Implementation for creating time windows\n    return [];\n  }\n\n  private extractAnomalyFeatures(window: any, metrics: string[]): number[] {\n    // Implementation for extracting features from time window\n    return [];\n  }\n\n  private calculateReconstructionError(original: number[], reconstructed: number[]): number {\n    let sumSquaredDiff = 0;\n    for (let i = 0; i < original.length; i++) {\n      sumSquaredDiff += Math.pow(original[i] - reconstructed[i], 2);\n    }\n    return Math.sqrt(sumSquaredDiff / original.length);\n  }\n\n  private getMetricAnomalyThreshold(metric: string): number {\n    const thresholds = {\n      'cpu_usage': 10,\n      'memory_usage': 15,\n      'app_response_time': 500\n    };\n    return thresholds[metric] || 5;\n  }\n\n  private determineSeverity(deviation: number, threshold: number): AnomalyDetection['severity'] {\n    const ratio = deviation / threshold;\n    if (ratio > 3) return 'critical';\n    if (ratio > 2) return 'high';\n    if (ratio > 1.5) return 'medium';\n    return 'low';\n  }\n\n  private generateAnomalyRecommendations(metric: string, deviation: number): string[] {\n    return [\n      `Investigate ${metric} anomaly`,\n      'Check system logs for related events',\n      'Consider scaling if pattern persists'\n    ];\n  }\n\n  private async analyzeCorrelations(): Promise<MLInsight[]> {\n    // Implementation for correlation analysis\n    return [];\n  }\n\n  private async recognizePatterns(): Promise<MLInsight[]> {\n    // Implementation for pattern recognition\n    return [];\n  }\n\n  private async forecastTrends(): Promise<MLInsight[]> {\n    // Implementation for trend forecasting\n    return [];\n  }\n\n  private async analyzeBottlenecks(): Promise<MLInsight[]> {\n    // Implementation for bottleneck analysis\n    return [];\n  }\n\n  private calculateGrowthRate(data: any[]): number {\n    if (data.length < 2) return 0;\n    \n    const first = data[0].value;\n    const last = data[data.length - 1].value;\n    const timeDiff = (new Date(data[data.length - 1].timestamp).getTime() - \n                     new Date(data[0].timestamp).getTime()) / (1000 * 60 * 60 * 24); // days\n    \n    return Math.pow(last / first, 1 / timeDiff) - 1; // Daily growth rate\n  }\n\n  private extrapolateFeatures(historicalData: any[], daysAhead: number): number[] {\n    // Implementation for feature extrapolation\n    const latest = historicalData[historicalData.length - 1];\n    const futureDate = new Date(latest.timestamp);\n    futureDate.setDate(futureDate.getDate() + daysAhead);\n    \n    return this.extractFeatures([{ ...latest, timestamp: futureDate }]);\n  }\n\n  private generateGrowthRecommendations(\n    metric: string,\n    current: number,\n    projected: number,\n    growthRate: number,\n    days: number\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    const growthPercent = ((projected - current) / current) * 100;\n    \n    if (growthPercent > 50) {\n      recommendations.push(`High growth expected for ${metric}: ${growthPercent.toFixed(1)}% over ${days} days`);\n      recommendations.push('Plan for significant capacity increases');\n      recommendations.push('Consider auto-scaling solutions');\n    } else if (growthPercent > 20) {\n      recommendations.push(`Moderate growth expected for ${metric}: ${growthPercent.toFixed(1)}% over ${days} days`);\n      recommendations.push('Monitor capacity utilization closely');\n    } else {\n      recommendations.push(`Stable growth expected for ${metric}`);\n      recommendations.push('Current capacity should be sufficient');\n    }\n    \n    return recommendations;\n  }\n\n  private getMetricValueAtTime(metric: string, timestamp: Date): number | undefined {\n    // Implementation to get metric value at specific time\n    return undefined;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2c9b0788c40cf8a5e22ac8c9d134f5e6ea478c6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w6wp2kh3a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w6wp2kh3a();
var __createBinding =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[0]++,
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1w6wp2kh3a().f[0]++;
  cov_1w6wp2kh3a().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().b[2][0]++;
    cov_1w6wp2kh3a().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1w6wp2kh3a().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1w6wp2kh3a().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[5][1]++,
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().b[3][0]++;
    cov_1w6wp2kh3a().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().f[1]++;
        cov_1w6wp2kh3a().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1w6wp2kh3a().b[3][1]++;
  }
  cov_1w6wp2kh3a().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1w6wp2kh3a().f[2]++;
  cov_1w6wp2kh3a().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().b[7][0]++;
    cov_1w6wp2kh3a().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1w6wp2kh3a().b[7][1]++;
  }
  cov_1w6wp2kh3a().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[11]++,
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1w6wp2kh3a().f[3]++;
  cov_1w6wp2kh3a().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1w6wp2kh3a().f[4]++;
  cov_1w6wp2kh3a().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[14]++,
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1w6wp2kh3a().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1w6wp2kh3a().f[5]++;
  cov_1w6wp2kh3a().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[6]++;
    cov_1w6wp2kh3a().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[17]++, []);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().b[12][0]++;
          cov_1w6wp2kh3a().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1w6wp2kh3a().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1w6wp2kh3a().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[8]++;
    cov_1w6wp2kh3a().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[13][0]++;
      cov_1w6wp2kh3a().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[26]++, {});
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[15][0]++;
      cov_1w6wp2kh3a().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().b[16][0]++;
          cov_1w6wp2kh3a().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1w6wp2kh3a().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[15][1]++;
    }
    cov_1w6wp2kh3a().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1w6wp2kh3a().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1w6wp2kh3a().s[36]++;
exports.PredictiveAnalytics = void 0;
const tf =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[37]++, __importStar(require("@tensorflow/tfjs-node")));
const EventStore_1 =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[38]++, require("./EventStore"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[39]++, require("./AnalyticsEngine"));
const PerformanceMonitor_1 =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[40]++, require("../performance/PerformanceMonitor"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[41]++, require("lru-cache"));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_1w6wp2kh3a().s[42]++, require("perf_hooks"));
class PredictiveAnalytics {
  constructor() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[9]++;
    cov_1w6wp2kh3a().s[43]++;
    this.isTraining = false;
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[44]++;
    this.lastTrainingTime = null;
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[45]++;
    this.models = new Map();
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[46]++;
    this.cache = new lru_cache_1.LRUCache({
      max: 500,
      ttl: 1000 * 60 * 10 // 10 minutes cache for predictions
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[47]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[48]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[49]++;
    this.performanceMonitor = new PerformanceMonitor_1.PerformanceMonitor();
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[50]++;
    this.anomalyThresholds = new Map();
    // Initialize TensorFlow.js
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[51]++;
    this.initializeTensorFlow();
    // Load pre-trained models if available
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[52]++;
    this.loadExistingModels();
  }
  /**
   * Initialize TensorFlow.js backend
   */
  async initializeTensorFlow() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[10]++;
    cov_1w6wp2kh3a().s[53]++;
    try {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[54]++;
      await tf.ready();
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[55]++;
      console.log('TensorFlow.js backend initialized:', tf.getBackend());
    } catch (error) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[56]++;
      console.error('Failed to initialize TensorFlow.js:', error);
    }
  }
  /**
   * Train capacity planning model
   */
  async trainCapacityModel(metric, timeframeDays =
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[17][0]++, 30)) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[11]++;
    cov_1w6wp2kh3a().s[57]++;
    if (this.isTraining) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[18][0]++;
      cov_1w6wp2kh3a().s[58]++;
      throw new Error('Training already in progress');
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[18][1]++;
    }
    cov_1w6wp2kh3a().s[59]++;
    this.isTraining = true;
    const startTime =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[60]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[61]++;
    try {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[62]++;
      console.log(`Training capacity prediction model for ${metric}...`);
      // Collect training data
      const trainingData =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[63]++, await this.collectTrainingData(metric, timeframeDays));
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[64]++;
      if (trainingData.features.length < 50) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[19][0]++;
        cov_1w6wp2kh3a().s[65]++;
        throw new Error(`Insufficient training data: ${trainingData.features.length} samples`);
      } else
      /* istanbul ignore next */
      {
        cov_1w6wp2kh3a().b[19][1]++;
      }
      // Prepare data tensors
      const {
        xTrain,
        yTrain,
        xValidation,
        yValidation
      } =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[66]++, this.prepareTrainingData(trainingData));
      // Create and configure model
      const model =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[67]++, this.createCapacityModel(trainingData.features[0].length));
      // Train model
      const history =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[68]++, await this.trainModel(model, xTrain, yTrain, xValidation, yValidation));
      // Evaluate model
      const accuracy =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[69]++, await this.evaluateModel(model, xValidation, yValidation));
      // Create prediction model object
      const predictionModel =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[70]++, {
        id: `capacity_${metric}_${Date.now()}`,
        name: `Capacity Prediction for ${metric}`,
        type: 'capacity',
        model,
        metadata: {
          trainedAt: new Date(),
          accuracy,
          features: this.getFeatureNames(),
          targetVariable: metric,
          sampleSize: trainingData.features.length,
          version: '1.0.0'
        }
      });
      // Store model
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[71]++;
      this.models.set(predictionModel.id, predictionModel);
      // Save model to disk
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[72]++;
      await this.saveModel(predictionModel);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[73]++;
      this.lastTrainingTime = new Date();
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[74]++;
      console.log(`Capacity model trained in ${(perf_hooks_1.performance.now() - startTime).toFixed(2)}ms with accuracy: ${accuracy.toFixed(4)}`);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[75]++;
      return predictionModel;
    } finally {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[76]++;
      this.isTraining = false;
    }
  }
  /**
   * Train anomaly detection model
   */
  async trainAnomalyModel(metrics, timeframeDays =
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[20][0]++, 30)) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[12]++;
    cov_1w6wp2kh3a().s[77]++;
    if (this.isTraining) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[21][0]++;
      cov_1w6wp2kh3a().s[78]++;
      throw new Error('Training already in progress');
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[21][1]++;
    }
    cov_1w6wp2kh3a().s[79]++;
    this.isTraining = true;
    const startTime =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[80]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[81]++;
    try {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[82]++;
      console.log(`Training anomaly detection model for metrics: ${metrics.join(', ')}...`);
      // Collect multi-metric training data
      const trainingData =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[83]++, await this.collectMultiMetricTrainingData(metrics, timeframeDays));
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[84]++;
      if (trainingData.features.length < 100) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[22][0]++;
        cov_1w6wp2kh3a().s[85]++;
        throw new Error(`Insufficient training data: ${trainingData.features.length} samples`);
      } else
      /* istanbul ignore next */
      {
        cov_1w6wp2kh3a().b[22][1]++;
      }
      // Calculate statistical thresholds for each metric
      cov_1w6wp2kh3a().s[86]++;
      await this.calculateAnomalyThresholds(trainingData);
      // Create autoencoder for anomaly detection
      const model =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[87]++, this.createAnomalyModel(trainingData.features[0].length));
      // Prepare training data (anomaly detection is unsupervised)
      const xTensor =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[88]++, tf.tensor2d(trainingData.features));
      const {
        xTrain,
        xValidation
      } =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[89]++, this.splitData(xTensor, 0.8));
      // Train autoencoder
      const history =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[90]++, await model.fit(xTrain, xTrain, {
        epochs: 100,
        batchSize: 32,
        validationData: [xValidation, xValidation],
        shuffle: true,
        callbacks: {
          onEpochEnd: (epoch, logs) => {
            /* istanbul ignore next */
            cov_1w6wp2kh3a().f[13]++;
            cov_1w6wp2kh3a().s[91]++;
            if (epoch % 10 === 0) {
              /* istanbul ignore next */
              cov_1w6wp2kh3a().b[23][0]++;
              cov_1w6wp2kh3a().s[92]++;
              console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}, val_loss = ${logs?.val_loss?.toFixed(4)}`);
            } else
            /* istanbul ignore next */
            {
              cov_1w6wp2kh3a().b[23][1]++;
            }
          }
        }
      }));
      // Calculate reconstruction threshold
      const reconstructionErrors =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[93]++, await this.calculateReconstructionErrors(model, xValidation));
      const threshold =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[94]++, this.calculateAnomalyThreshold(reconstructionErrors));
      const predictionModel =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[95]++, {
        id: `anomaly_${metrics.join('_')}_${Date.now()}`,
        name: `Anomaly Detection for ${metrics.join(', ')}`,
        type: 'anomaly',
        model,
        metadata: {
          trainedAt: new Date(),
          accuracy: threshold,
          features: metrics,
          targetVariable: 'anomaly_score',
          sampleSize: trainingData.features.length,
          version: '1.0.0'
        }
      });
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[96]++;
      this.models.set(predictionModel.id, predictionModel);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[97]++;
      await this.saveModel(predictionModel);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[98]++;
      this.lastTrainingTime = new Date();
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[99]++;
      console.log(`Anomaly model trained in ${(perf_hooks_1.performance.now() - startTime).toFixed(2)}ms`);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[100]++;
      return predictionModel;
    } finally {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[101]++;
      this.isTraining = false;
    }
  }
  /**
   * Generate capacity predictions
   */
  async predictCapacity(metric, timeframe =
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[24][0]++, '24h')) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[14]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[102]++, `capacity_prediction_${metric}_${timeframe}`);
    const cached =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[103]++, this.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[104]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[25][0]++;
      cov_1w6wp2kh3a().s[105]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[25][1]++;
    }
    const model =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[106]++, this.findBestModel('capacity', metric));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[107]++;
    if (!model) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[26][0]++;
      cov_1w6wp2kh3a().s[108]++;
      throw new Error(`No capacity model available for metric: ${metric}`);
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[26][1]++;
    }
    // Get recent data for prediction
    const recentData =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[109]++, await this.getRecentDataForPrediction(metric, 24)); // Last 24 hours
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[110]++;
    if (recentData.length === 0) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[27][0]++;
      cov_1w6wp2kh3a().s[111]++;
      throw new Error(`No recent data available for metric: ${metric}`);
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[27][1]++;
    }
    // Prepare input features
    const features =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[112]++, this.extractFeatures(recentData));
    const inputTensor =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[113]++, tf.tensor2d([features]));
    // Make prediction
    const prediction =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[114]++, model.model.predict(inputTensor));
    const predictedValue =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[115]++, (await prediction.data())[0]);
    // Get current value
    const currentValue =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[116]++, recentData[recentData.length - 1].value);
    // Calculate confidence based on model accuracy and data variance
    const confidence =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[117]++, this.calculatePredictionConfidence(model, recentData));
    // Get threshold for this metric
    const threshold =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[118]++, await this.getMetricThreshold(metric));
    // Determine if threshold will be exceeded
    const willExceedThreshold =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[119]++, predictedValue > threshold);
    // Estimate time to threshold if applicable
    const timeToThreshold =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[120]++, willExceedThreshold ?
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[28][0]++, this.estimateTimeToThreshold(recentData, threshold, timeframe)) :
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[28][1]++, undefined));
    // Generate recommendations
    const recommendations =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[121]++, this.generateCapacityRecommendations(metric, currentValue, predictedValue, threshold, willExceedThreshold));
    const result =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[122]++, {
      metric,
      timeframe,
      currentValue,
      predictedValue,
      confidence,
      threshold,
      willExceedThreshold,
      timeToThreshold,
      recommendations
    });
    // Cache result
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[123]++;
    this.cache.set(cacheKey, result, {
      ttl: this.getTTLForTimeframe(timeframe)
    });
    // Cleanup tensors
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[124]++;
    inputTensor.dispose();
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[125]++;
    prediction.dispose();
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[126]++;
    return result;
  }
  /**
   * Detect anomalies in real-time data
   */
  async detectAnomalies(metrics =
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[29][0]++, ['cpu_usage', 'memory_usage', 'app_response_time'])) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[15]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[127]++, `anomaly_detection_${metrics.join('_')}`);
    const cached =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[128]++, this.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[129]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[30][0]++;
      cov_1w6wp2kh3a().s[130]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[30][1]++;
    }
    const model =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[131]++, this.findBestModel('anomaly', metrics.join('_')));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[132]++;
    if (!model) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[31][0]++;
      cov_1w6wp2kh3a().s[133]++;
      throw new Error(`No anomaly model available for metrics: ${metrics.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[31][1]++;
    }
    const anomalies =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[134]++, []);
    // Get recent data for all metrics
    const recentDataMap =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[135]++, new Map());
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[136]++;
    for (const metric of metrics) {
      const data =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[137]++, await this.getRecentDataForPrediction(metric, 1)); // Last hour
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[138]++;
      recentDataMap.set(metric, data);
    }
    // Process each time window
    const timeWindows =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[139]++, this.createTimeWindows(recentDataMap, 5)); // 5-minute windows
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[140]++;
    for (const window of timeWindows) {
      // Extract features for this time window
      const features =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[141]++, this.extractAnomalyFeatures(window, metrics));
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[142]++;
      if (features.length === 0) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[32][0]++;
        cov_1w6wp2kh3a().s[143]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1w6wp2kh3a().b[32][1]++;
      }
      // Get expected values using model
      const inputTensor =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[144]++, tf.tensor2d([features]));
      const reconstruction =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[145]++, model.model.predict(inputTensor));
      const reconstructedValues =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[146]++, await reconstruction.data());
      // Calculate reconstruction error
      const reconstructionError =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[147]++, this.calculateReconstructionError(features, Array.from(reconstructedValues)));
      // Check against threshold
      const threshold =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[148]++,
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().b[33][0]++, this.anomalyThresholds.get(metrics.join('_'))?.threshold) ||
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().b[33][1]++, 0.1));
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[149]++;
      if (reconstructionError > threshold) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[34][0]++;
        cov_1w6wp2kh3a().s[150]++;
        // Determine which metrics are anomalous
        for (let i =
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().s[151]++, 0); i < metrics.length; i++) {
          const metric =
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().s[152]++, metrics[i]);
          const currentValue =
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().s[153]++, features[i]);
          const expectedValue =
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().s[154]++, reconstructedValues[i]);
          const deviation =
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().s[155]++, Math.abs(currentValue - expectedValue));
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[156]++;
          if (deviation > this.getMetricAnomalyThreshold(metric)) {
            /* istanbul ignore next */
            cov_1w6wp2kh3a().b[35][0]++;
            const anomaly =
            /* istanbul ignore next */
            (cov_1w6wp2kh3a().s[157]++, {
              id: `anomaly_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              metric,
              value: currentValue,
              expectedValue,
              deviation,
              severity: this.determineSeverity(deviation, this.getMetricAnomalyThreshold(metric)),
              probability: Math.min(reconstructionError / threshold, 1.0),
              timestamp: window.timestamp,
              context: {
                reconstructionError,
                threshold,
                allMetrics: Object.fromEntries(metrics.map((m, idx) => {
                  /* istanbul ignore next */
                  cov_1w6wp2kh3a().f[16]++;
                  cov_1w6wp2kh3a().s[158]++;
                  return [m, features[idx]];
                }))
              },
              recommendations: this.generateAnomalyRecommendations(metric, deviation)
            });
            /* istanbul ignore next */
            cov_1w6wp2kh3a().s[159]++;
            anomalies.push(anomaly);
          } else
          /* istanbul ignore next */
          {
            cov_1w6wp2kh3a().b[35][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1w6wp2kh3a().b[34][1]++;
      }
      // Cleanup tensors
      cov_1w6wp2kh3a().s[160]++;
      inputTensor.dispose();
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[161]++;
      reconstruction.dispose();
    }
    // Cache results for a short time
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[162]++;
    this.cache.set(cacheKey, anomalies, {
      ttl: 1000 * 60 * 2
    }); // 2 minutes
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[163]++;
    return anomalies;
  }
  /**
   * Generate ML-powered insights
   */
  async generateMLInsights() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[17]++;
    const insights =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[164]++, []);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[165]++;
    try {
      // Correlation analysis
      const correlationInsights =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[166]++, await this.analyzeCorrelations());
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[167]++;
      insights.push(...correlationInsights);
      // Pattern recognition
      const patternInsights =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[168]++, await this.recognizePatterns());
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[169]++;
      insights.push(...patternInsights);
      // Trend forecasting
      const trendInsights =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[170]++, await this.forecastTrends());
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[171]++;
      insights.push(...trendInsights);
      // Performance bottleneck analysis
      const bottleneckInsights =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[172]++, await this.analyzeBottlenecks());
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[173]++;
      insights.push(...bottleneckInsights);
    } catch (error) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[174]++;
      console.error('Error generating ML insights:', error);
    }
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[175]++;
    return insights;
  }
  /**
   * Get growth projections for capacity planning
   */
  async getGrowthProjections(metric, projectionDays =
  /* istanbul ignore next */
  (cov_1w6wp2kh3a().b[36][0]++, 30)) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[18]++;
    const model =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[176]++, this.findBestModel('capacity', metric));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[177]++;
    if (!model) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[37][0]++;
      cov_1w6wp2kh3a().s[178]++;
      throw new Error(`No capacity model available for metric: ${metric}`);
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[37][1]++;
    }
    // Get historical data for trend analysis
    const historicalData =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[179]++, await this.getRecentDataForPrediction(metric, projectionDays * 3));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[180]++;
    if (historicalData.length === 0) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[38][0]++;
      cov_1w6wp2kh3a().s[181]++;
      throw new Error(`No historical data available for metric: ${metric}`);
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[38][1]++;
    }
    // Calculate growth rate
    const growthRate =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[182]++, this.calculateGrowthRate(historicalData));
    // Generate projections
    const projectionDates =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[183]++, []);
    const projectedValues =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[184]++, []);
    const currentValue =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[185]++, historicalData[historicalData.length - 1].value);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[186]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[187]++, 1); i <= projectionDays; i++) {
      const date =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[188]++, new Date());
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[189]++;
      date.setDate(date.getDate() + i);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[190]++;
      projectionDates.push(date);
      // Use model to predict future value
      const features =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[191]++, this.extrapolateFeatures(historicalData, i));
      const inputTensor =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[192]++, tf.tensor2d([features]));
      const prediction =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[193]++, model.model.predict(inputTensor));
      const predictedValue =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[194]++, (await prediction.data())[0]);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[195]++;
      projectedValues.push(predictedValue);
      // Cleanup
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[196]++;
      inputTensor.dispose();
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[197]++;
      prediction.dispose();
    }
    const projectedValue =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[198]++, projectedValues[projectedValues.length - 1]);
    const confidence =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[199]++, this.calculatePredictionConfidence(model, historicalData));
    // Generate recommendations based on projections
    const recommendations =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[200]++, this.generateGrowthRecommendations(metric, currentValue, projectedValue, growthRate, projectionDays));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[201]++;
    return {
      current: currentValue,
      projected: projectedValue,
      growthRate,
      projectionDates,
      projectedValues,
      confidence,
      recommendations
    };
  }
  /**
   * Auto-retrain models based on data drift
   */
  async autoRetrainModels() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[19]++;
    cov_1w6wp2kh3a().s[202]++;
    if (this.isTraining) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[39][0]++;
      cov_1w6wp2kh3a().s[203]++;
      console.log('Training already in progress, skipping auto-retrain');
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[204]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[39][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[205]++, new Date());
    const shouldRetrain =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[206]++,
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[40][0]++, !this.lastTrainingTime) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[40][1]++, now.getTime() - this.lastTrainingTime.getTime() > 7 * 24 * 60 * 60 * 1000)); // 7 days
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[207]++;
    if (!shouldRetrain) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[41][0]++;
      cov_1w6wp2kh3a().s[208]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[41][1]++;
    }
    cov_1w6wp2kh3a().s[209]++;
    console.log('Starting auto-retrain of ML models...');
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[210]++;
    try {
      // Retrain capacity models for key metrics
      const keyMetrics =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[211]++, ['cpu_usage', 'memory_usage', 'app_response_time', 'app_queue_size']);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[212]++;
      for (const metric of keyMetrics) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[213]++;
        try {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[214]++;
          await this.trainCapacityModel(metric, 30);
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[215]++;
          console.log(`Successfully retrained capacity model for ${metric}`);
        } catch (error) {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[216]++;
          console.error(`Failed to retrain capacity model for ${metric}:`, error.message);
        }
      }
      // Retrain anomaly detection model
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[217]++;
      try {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[218]++;
        await this.trainAnomalyModel(keyMetrics, 30);
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[219]++;
        console.log('Successfully retrained anomaly detection model');
      } catch (error) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[220]++;
        console.error('Failed to retrain anomaly detection model:', error.message);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[221]++;
      console.error('Error during auto-retrain:', error);
    }
  }
  // Private helper methods...
  async loadExistingModels() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[20]++;
    cov_1w6wp2kh3a().s[222]++;
    // Implementation to load saved models from disk
    console.log('Loading existing ML models...');
  }
  async collectTrainingData(metric, timeframeDays) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[21]++;
    const endTime =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[223]++, new Date());
    const startTime =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[224]++, new Date(endTime.getTime() - timeframeDays * 24 * 60 * 60 * 1000));
    const events =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[225]++, await this.eventStore.getEvents({
      start_time: startTime,
      end_time: endTime,
      limit: 10000
    }));
    // Extract relevant data points and features
    const features =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[226]++, []);
    const labels =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[227]++, []);
    const timestamps =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[228]++, []);
    // Process events to create training data
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[229]++;
    for (const event of events) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[230]++;
      if (event.data[metric] !== undefined) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[42][0]++;
        const featureVector =
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().s[231]++, this.extractFeatures([event]));
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[232]++;
        if (featureVector.length > 0) {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().b[43][0]++;
          cov_1w6wp2kh3a().s[233]++;
          features.push(featureVector);
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[234]++;
          labels.push(event.data[metric]);
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[235]++;
          timestamps.push(new Date(event.timestamp));
        } else
        /* istanbul ignore next */
        {
          cov_1w6wp2kh3a().b[43][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1w6wp2kh3a().b[42][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[236]++;
    return {
      features,
      labels,
      timestamps,
      metadata: {
        metric,
        timeframeDays,
        eventCount: events.length
      }
    };
  }
  async collectMultiMetricTrainingData(metrics, timeframeDays) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[22]++;
    const endTime =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[237]++, new Date());
    const startTime =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[238]++, new Date(endTime.getTime() - timeframeDays * 24 * 60 * 60 * 1000));
    const features =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[239]++, []);
    const labels =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[240]++, []);
    const timestamps =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[241]++, []);
    // Get data for each metric
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[242]++;
    for (const metric of metrics) {
      const data =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[243]++, await this.getRecentDataForPrediction(metric, timeframeDays * 24));
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[244]++;
      for (const point of data) {
        const featureVector =
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().s[245]++, metrics.map(m => {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().f[23]++;
          cov_1w6wp2kh3a().s[246]++;
          return m === metric ?
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().b[44][0]++, point.value) :
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().b[44][1]++, this.getMetricValueAtTime(m, point.timestamp));
        }).filter(v => {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().f[24]++;
          cov_1w6wp2kh3a().s[247]++;
          return /* istanbul ignore next */(cov_1w6wp2kh3a().b[45][0]++, v !== undefined) &&
          /* istanbul ignore next */
          (cov_1w6wp2kh3a().b[45][1]++, !isNaN(v));
        }));
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[248]++;
        if (featureVector.length === metrics.length) {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().b[46][0]++;
          cov_1w6wp2kh3a().s[249]++;
          features.push(featureVector);
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[250]++;
          labels.push(0); // For unsupervised learning
          /* istanbul ignore next */
          cov_1w6wp2kh3a().s[251]++;
          timestamps.push(point.timestamp);
        } else
        /* istanbul ignore next */
        {
          cov_1w6wp2kh3a().b[46][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[252]++;
    return {
      features,
      labels,
      timestamps,
      metadata: {
        metrics,
        timeframeDays
      }
    };
  }
  prepareTrainingData(trainingData) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[25]++;
    // Normalize features
    const normalizedFeatures =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[253]++, this.normalizeFeatures(trainingData.features));
    const normalizedLabels =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[254]++, this.normalizeLabels(trainingData.labels));
    // Split data
    const splitIndex =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[255]++, Math.floor(normalizedFeatures.length * 0.8));
    const xTrain =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[256]++, tf.tensor2d(normalizedFeatures.slice(0, splitIndex)));
    const yTrain =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[257]++, tf.tensor2d(normalizedLabels.slice(0, splitIndex), [splitIndex, 1]));
    const xValidation =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[258]++, tf.tensor2d(normalizedFeatures.slice(splitIndex)));
    const yValidation =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[259]++, tf.tensor2d(normalizedLabels.slice(splitIndex), [normalizedLabels.length - splitIndex, 1]));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[260]++;
    return {
      xTrain,
      yTrain,
      xValidation,
      yValidation
    };
  }
  createCapacityModel(inputShape) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[26]++;
    const model =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[261]++, tf.sequential({
      layers: [tf.layers.dense({
        inputShape: [inputShape],
        units: 64,
        activation: 'relu',
        kernelRegularizer: tf.regularizers.l2({
          l2: 0.01
        })
      }), tf.layers.dropout({
        rate: 0.2
      }), tf.layers.dense({
        units: 32,
        activation: 'relu',
        kernelRegularizer: tf.regularizers.l2({
          l2: 0.01
        })
      }), tf.layers.dropout({
        rate: 0.2
      }), tf.layers.dense({
        units: 16,
        activation: 'relu'
      }), tf.layers.dense({
        units: 1,
        activation: 'linear'
      })]
    }));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[262]++;
    model.compile({
      optimizer: tf.train.adam(0.001),
      loss: 'meanSquaredError',
      metrics: ['mae']
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[263]++;
    return model;
  }
  createAnomalyModel(inputShape) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[27]++;
    // Autoencoder for anomaly detection
    const model =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[264]++, tf.sequential({
      layers: [
      // Encoder
      tf.layers.dense({
        inputShape: [inputShape],
        units: 32,
        activation: 'relu'
      }), tf.layers.dense({
        units: 16,
        activation: 'relu'
      }), tf.layers.dense({
        units: 8,
        activation: 'relu'
      }),
      // Decoder
      tf.layers.dense({
        units: 16,
        activation: 'relu'
      }), tf.layers.dense({
        units: 32,
        activation: 'relu'
      }), tf.layers.dense({
        units: inputShape,
        activation: 'linear'
      })]
    }));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[265]++;
    model.compile({
      optimizer: tf.train.adam(0.001),
      loss: 'meanSquaredError'
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[266]++;
    return model;
  }
  async trainModel(model, xTrain, yTrain, xValidation, yValidation) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[28]++;
    cov_1w6wp2kh3a().s[267]++;
    return await model.fit(xTrain, yTrain, {
      epochs: 100,
      batchSize: 32,
      validationData: [xValidation, yValidation],
      shuffle: true,
      callbacks: {
        onEpochEnd: (epoch, logs) => {
          /* istanbul ignore next */
          cov_1w6wp2kh3a().f[29]++;
          cov_1w6wp2kh3a().s[268]++;
          if (epoch % 10 === 0) {
            /* istanbul ignore next */
            cov_1w6wp2kh3a().b[47][0]++;
            cov_1w6wp2kh3a().s[269]++;
            console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}, val_loss = ${logs?.val_loss?.toFixed(4)}`);
          } else
          /* istanbul ignore next */
          {
            cov_1w6wp2kh3a().b[47][1]++;
          }
        }
      }
    });
  }
  async evaluateModel(model, xValidation, yValidation) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[30]++;
    const evaluation =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[270]++, model.evaluate(xValidation, yValidation));
    const loss =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[271]++, await evaluation[0].data());
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[272]++;
    return 1 - loss[0]; // Convert loss to accuracy-like metric
  }
  async saveModel(predictionModel) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[31]++;
    cov_1w6wp2kh3a().s[273]++;
    try {
      const modelPath =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[274]++, `file://./models/${predictionModel.id}`);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[275]++;
      await predictionModel.model.save(modelPath);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[276]++;
      console.log(`Model saved to ${modelPath}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[277]++;
      console.error('Failed to save model:', error);
    }
  }
  findBestModel(type, target) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[32]++;
    const candidates =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[278]++, Array.from(this.models.values()).filter(model => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[33]++;
      cov_1w6wp2kh3a().s[279]++;
      return /* istanbul ignore next */(cov_1w6wp2kh3a().b[48][0]++, model.type === type) && (
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().b[48][1]++, model.metadata.targetVariable === target) ||
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().b[48][2]++, model.metadata.features.includes(target)));
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[34]++;
      cov_1w6wp2kh3a().s[280]++;
      return b.metadata.accuracy - a.metadata.accuracy;
    }));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[281]++;
    return /* istanbul ignore next */(cov_1w6wp2kh3a().b[49][0]++, candidates[0]) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[49][1]++, null);
  }
  getFeatureNames() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[35]++;
    cov_1w6wp2kh3a().s[282]++;
    return ['hour_of_day', 'day_of_week', 'month_of_year', 'is_weekend', 'recent_avg', 'recent_trend', 'recent_volatility', 'seasonal_component'];
  }
  extractFeatures(data) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[36]++;
    cov_1w6wp2kh3a().s[283]++;
    if (data.length === 0) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[50][0]++;
      cov_1w6wp2kh3a().s[284]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[50][1]++;
    }
    const latest =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[285]++, data[data.length - 1]);
    const timestamp =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[286]++, new Date(
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[51][0]++, latest.timestamp) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[51][1]++, latest.created_at)));
    // Time-based features
    const hourOfDay =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[287]++, timestamp.getHours() / 23); // Normalize to [0, 1]
    const dayOfWeek =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[288]++, timestamp.getDay() / 6);
    const monthOfYear =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[289]++, timestamp.getMonth() / 11);
    const isWeekend =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[290]++,
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[53][0]++, timestamp.getDay() === 0) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[53][1]++, timestamp.getDay() === 6) ?
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[52][0]++, 1) :
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[52][1]++, 0));
    // Statistical features from recent data
    const values =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[291]++, data.map(d => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[37]++;
      cov_1w6wp2kh3a().s[292]++;
      return /* istanbul ignore next */(cov_1w6wp2kh3a().b[54][0]++, d.value) ||
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().b[54][1]++, d.data?.value) ||
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().b[54][2]++, 0);
    }).filter(v => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[38]++;
      cov_1w6wp2kh3a().s[293]++;
      return !isNaN(v);
    }));
    const recentAvg =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[294]++, values.length > 0 ?
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[55][0]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[39]++;
      cov_1w6wp2kh3a().s[295]++;
      return sum + v;
    }, 0) / values.length) :
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[55][1]++, 0));
    // Calculate trend (simple linear regression slope)
    const recentTrend =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[296]++, this.calculateTrend(values));
    // Calculate volatility (standard deviation)
    const recentVolatility =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[297]++, this.calculateVolatility(values));
    // Seasonal component (simplified)
    const seasonalComponent =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[298]++, Math.sin(2 * Math.PI * timestamp.getHours() / 24));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[299]++;
    return [hourOfDay, dayOfWeek, monthOfYear, isWeekend, recentAvg, recentTrend, recentVolatility, seasonalComponent];
  }
  normalizeFeatures(features) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[40]++;
    cov_1w6wp2kh3a().s[300]++;
    if (features.length === 0) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[56][0]++;
      cov_1w6wp2kh3a().s[301]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[56][1]++;
    }
    const numFeatures =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[302]++, features[0].length);
    const normalized =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[303]++, []);
    // Calculate min/max for each feature
    const mins =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[304]++, new Array(numFeatures).fill(Infinity));
    const maxs =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[305]++, new Array(numFeatures).fill(-Infinity));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[306]++;
    features.forEach(sample => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[41]++;
      cov_1w6wp2kh3a().s[307]++;
      sample.forEach((value, idx) => {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().f[42]++;
        cov_1w6wp2kh3a().s[308]++;
        mins[idx] = Math.min(mins[idx], value);
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[309]++;
        maxs[idx] = Math.max(maxs[idx], value);
      });
    });
    // Normalize each sample
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[310]++;
    features.forEach(sample => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[43]++;
      const normalizedSample =
      /* istanbul ignore next */
      (cov_1w6wp2kh3a().s[311]++, sample.map((value, idx) => {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().f[44]++;
        const range =
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().s[312]++, maxs[idx] - mins[idx]);
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[313]++;
        return range === 0 ?
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().b[57][0]++, 0) :
        /* istanbul ignore next */
        (cov_1w6wp2kh3a().b[57][1]++, (value - mins[idx]) / range);
      }));
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[314]++;
      normalized.push(normalizedSample);
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[315]++;
    return normalized;
  }
  normalizeLabels(labels) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[45]++;
    cov_1w6wp2kh3a().s[316]++;
    if (labels.length === 0) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[58][0]++;
      cov_1w6wp2kh3a().s[317]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[58][1]++;
    }
    const min =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[318]++, Math.min(...labels));
    const max =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[319]++, Math.max(...labels));
    const range =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[320]++, max - min);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[321]++;
    if (range === 0) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[59][0]++;
      cov_1w6wp2kh3a().s[322]++;
      return labels.map(() => {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().f[46]++;
        cov_1w6wp2kh3a().s[323]++;
        return 0;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[59][1]++;
    }
    cov_1w6wp2kh3a().s[324]++;
    return labels.map(label => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[47]++;
      cov_1w6wp2kh3a().s[325]++;
      return (label - min) / range;
    });
  }
  calculateTrend(values) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[48]++;
    cov_1w6wp2kh3a().s[326]++;
    if (values.length < 2) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[60][0]++;
      cov_1w6wp2kh3a().s[327]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[60][1]++;
    }
    const n =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[328]++, values.length);
    const sumX =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[329]++, n * (n - 1) / 2);
    const sumY =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[330]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[49]++;
      cov_1w6wp2kh3a().s[331]++;
      return sum + v;
    }, 0));
    const sumXY =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[332]++, values.reduce((sum, v, i) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[50]++;
      cov_1w6wp2kh3a().s[333]++;
      return sum + i * v;
    }, 0));
    const sumX2 =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[334]++, n * (n - 1) * (2 * n - 1) / 6);
    const slope =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[335]++, (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[336]++;
    return isNaN(slope) ?
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[61][0]++, 0) :
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[61][1]++, slope);
  }
  calculateVolatility(values) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[51]++;
    cov_1w6wp2kh3a().s[337]++;
    if (values.length < 2) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[62][0]++;
      cov_1w6wp2kh3a().s[338]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[62][1]++;
    }
    const mean =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[339]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[52]++;
      cov_1w6wp2kh3a().s[340]++;
      return sum + v;
    }, 0) / values.length);
    const variance =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[341]++, values.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[53]++;
      cov_1w6wp2kh3a().s[342]++;
      return sum + Math.pow(v - mean, 2);
    }, 0) / values.length);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[343]++;
    return Math.sqrt(variance);
  }
  // Additional helper methods would continue here...
  // (Implementation of remaining methods for space considerations)
  async getRecentDataForPrediction(metric, hours) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[54]++;
    cov_1w6wp2kh3a().s[344]++;
    // Implementation to fetch recent data
    return [];
  }
  async getMetricThreshold(metric) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[55]++;
    cov_1w6wp2kh3a().s[345]++;
    // Implementation to get metric thresholds
    return 100;
  }
  calculatePredictionConfidence(model, data) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[56]++;
    cov_1w6wp2kh3a().s[346]++;
    // Implementation to calculate confidence based on model accuracy and data quality
    return model.metadata.accuracy * 0.8; // Simplified
  }
  generateCapacityRecommendations(metric, current, predicted, threshold, willExceed) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[57]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[347]++, []);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[348]++;
    if (willExceed) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[63][0]++;
      cov_1w6wp2kh3a().s[349]++;
      recommendations.push(`${metric} is predicted to exceed threshold of ${threshold}`);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[350]++;
      recommendations.push('Consider scaling infrastructure proactively');
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[351]++;
      recommendations.push('Review resource allocation policies');
    } else {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[63][1]++;
      cov_1w6wp2kh3a().s[352]++;
      recommendations.push(`${metric} is within normal parameters`);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[353]++;
      recommendations.push('Continue monitoring for trend changes');
    }
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[354]++;
    return recommendations;
  }
  getTTLForTimeframe(timeframe) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[58]++;
    const ttlMap =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[355]++, {
      '1h': 1000 * 60 * 5,
      // 5 minutes
      '6h': 1000 * 60 * 15,
      // 15 minutes
      '24h': 1000 * 60 * 30,
      // 30 minutes
      '7d': 1000 * 60 * 60,
      // 1 hour
      '30d': 1000 * 60 * 120 // 2 hours
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[356]++;
    return /* istanbul ignore next */(cov_1w6wp2kh3a().b[64][0]++, ttlMap[timeframe]) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[64][1]++, 1000 * 60 * 10);
  }
  estimateTimeToThreshold(data, threshold, timeframe) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[59]++;
    // Implementation to estimate when threshold will be reached
    const now =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[357]++, new Date());
    const hours =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[358]++, timeframe === '1h' ?
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[65][0]++, 1) :
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[65][1]++, timeframe === '6h' ?
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[66][0]++, 6) :
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[66][1]++, 24)));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[359]++;
    return new Date(now.getTime() + hours * 60 * 60 * 1000);
  }
  // Implement remaining methods...
  splitData(tensor, splitRatio) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[60]++;
    const splitIndex =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[360]++, Math.floor(tensor.shape[0] * splitRatio));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[361]++;
    return {
      xTrain: tensor.slice([0, 0], [splitIndex, -1]),
      xValidation: tensor.slice([splitIndex, 0], [-1, -1])
    };
  }
  async calculateAnomalyThresholds(trainingData) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[61]++;
  } // Implementation for calculating statistical thresholds
  async calculateReconstructionErrors(model, data) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[62]++;
    cov_1w6wp2kh3a().s[362]++;
    // Implementation for calculating reconstruction errors
    return [];
  }
  calculateAnomalyThreshold(errors) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[63]++;
    // Use 95th percentile as threshold
    const sorted =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[363]++, errors.sort((a, b) => {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().f[64]++;
      cov_1w6wp2kh3a().s[364]++;
      return a - b;
    }));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[365]++;
    return sorted[Math.floor(sorted.length * 0.95)];
  }
  createTimeWindows(dataMap, windowMinutes) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[65]++;
    cov_1w6wp2kh3a().s[366]++;
    // Implementation for creating time windows
    return [];
  }
  extractAnomalyFeatures(window, metrics) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[66]++;
    cov_1w6wp2kh3a().s[367]++;
    // Implementation for extracting features from time window
    return [];
  }
  calculateReconstructionError(original, reconstructed) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[67]++;
    let sumSquaredDiff =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[368]++, 0);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[369]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[370]++, 0); i < original.length; i++) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[371]++;
      sumSquaredDiff += Math.pow(original[i] - reconstructed[i], 2);
    }
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[372]++;
    return Math.sqrt(sumSquaredDiff / original.length);
  }
  getMetricAnomalyThreshold(metric) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[68]++;
    const thresholds =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[373]++, {
      'cpu_usage': 10,
      'memory_usage': 15,
      'app_response_time': 500
    });
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[374]++;
    return /* istanbul ignore next */(cov_1w6wp2kh3a().b[67][0]++, thresholds[metric]) ||
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().b[67][1]++, 5);
  }
  determineSeverity(deviation, threshold) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[69]++;
    const ratio =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[375]++, deviation / threshold);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[376]++;
    if (ratio > 3) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[68][0]++;
      cov_1w6wp2kh3a().s[377]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[68][1]++;
    }
    cov_1w6wp2kh3a().s[378]++;
    if (ratio > 2) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[69][0]++;
      cov_1w6wp2kh3a().s[379]++;
      return 'high';
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[69][1]++;
    }
    cov_1w6wp2kh3a().s[380]++;
    if (ratio > 1.5) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[70][0]++;
      cov_1w6wp2kh3a().s[381]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[70][1]++;
    }
    cov_1w6wp2kh3a().s[382]++;
    return 'low';
  }
  generateAnomalyRecommendations(metric, deviation) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[70]++;
    cov_1w6wp2kh3a().s[383]++;
    return [`Investigate ${metric} anomaly`, 'Check system logs for related events', 'Consider scaling if pattern persists'];
  }
  async analyzeCorrelations() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[71]++;
    cov_1w6wp2kh3a().s[384]++;
    // Implementation for correlation analysis
    return [];
  }
  async recognizePatterns() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[72]++;
    cov_1w6wp2kh3a().s[385]++;
    // Implementation for pattern recognition
    return [];
  }
  async forecastTrends() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[73]++;
    cov_1w6wp2kh3a().s[386]++;
    // Implementation for trend forecasting
    return [];
  }
  async analyzeBottlenecks() {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[74]++;
    cov_1w6wp2kh3a().s[387]++;
    // Implementation for bottleneck analysis
    return [];
  }
  calculateGrowthRate(data) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[75]++;
    cov_1w6wp2kh3a().s[388]++;
    if (data.length < 2) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[71][0]++;
      cov_1w6wp2kh3a().s[389]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1w6wp2kh3a().b[71][1]++;
    }
    const first =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[390]++, data[0].value);
    const last =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[391]++, data[data.length - 1].value);
    const timeDiff =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[392]++, (new Date(data[data.length - 1].timestamp).getTime() - new Date(data[0].timestamp).getTime()) / (1000 * 60 * 60 * 24)); // days
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[393]++;
    return Math.pow(last / first, 1 / timeDiff) - 1; // Daily growth rate
  }
  extrapolateFeatures(historicalData, daysAhead) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[76]++;
    // Implementation for feature extrapolation
    const latest =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[394]++, historicalData[historicalData.length - 1]);
    const futureDate =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[395]++, new Date(latest.timestamp));
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[396]++;
    futureDate.setDate(futureDate.getDate() + daysAhead);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[397]++;
    return this.extractFeatures([{
      ...latest,
      timestamp: futureDate
    }]);
  }
  generateGrowthRecommendations(metric, current, projected, growthRate, days) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[77]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[398]++, []);
    const growthPercent =
    /* istanbul ignore next */
    (cov_1w6wp2kh3a().s[399]++, (projected - current) / current * 100);
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[400]++;
    if (growthPercent > 50) {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[72][0]++;
      cov_1w6wp2kh3a().s[401]++;
      recommendations.push(`High growth expected for ${metric}: ${growthPercent.toFixed(1)}% over ${days} days`);
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[402]++;
      recommendations.push('Plan for significant capacity increases');
      /* istanbul ignore next */
      cov_1w6wp2kh3a().s[403]++;
      recommendations.push('Consider auto-scaling solutions');
    } else {
      /* istanbul ignore next */
      cov_1w6wp2kh3a().b[72][1]++;
      cov_1w6wp2kh3a().s[404]++;
      if (growthPercent > 20) {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[73][0]++;
        cov_1w6wp2kh3a().s[405]++;
        recommendations.push(`Moderate growth expected for ${metric}: ${growthPercent.toFixed(1)}% over ${days} days`);
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[406]++;
        recommendations.push('Monitor capacity utilization closely');
      } else {
        /* istanbul ignore next */
        cov_1w6wp2kh3a().b[73][1]++;
        cov_1w6wp2kh3a().s[407]++;
        recommendations.push(`Stable growth expected for ${metric}`);
        /* istanbul ignore next */
        cov_1w6wp2kh3a().s[408]++;
        recommendations.push('Current capacity should be sufficient');
      }
    }
    /* istanbul ignore next */
    cov_1w6wp2kh3a().s[409]++;
    return recommendations;
  }
  getMetricValueAtTime(metric, timestamp) {
    /* istanbul ignore next */
    cov_1w6wp2kh3a().f[78]++;
    cov_1w6wp2kh3a().s[410]++;
    // Implementation to get metric value at specific time
    return undefined;
  }
}
/* istanbul ignore next */
cov_1w6wp2kh3a().s[411]++;
exports.PredictiveAnalytics = PredictiveAnalytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,