{"version":3,"names":["tf","cov_1w6wp2kh3a","s","__importStar","require","EventStore_1","AnalyticsEngine_1","PerformanceMonitor_1","lru_cache_1","perf_hooks_1","PredictiveAnalytics","constructor","f","isTraining","lastTrainingTime","models","Map","cache","LRUCache","max","ttl","eventStore","EventStore","getInstance","analyticsEngine","AnalyticsEngine","performanceMonitor","PerformanceMonitor","anomalyThresholds","initializeTensorFlow","loadExistingModels","ready","console","log","getBackend","error","trainCapacityModel","metric","timeframeDays","b","Error","startTime","performance","now","trainingData","collectTrainingData","features","length","xTrain","yTrain","xValidation","yValidation","prepareTrainingData","model","createCapacityModel","history","trainModel","accuracy","evaluateModel","predictionModel","id","Date","name","type","metadata","trainedAt","getFeatureNames","targetVariable","sampleSize","version","set","saveModel","toFixed","trainAnomalyModel","metrics","join","collectMultiMetricTrainingData","calculateAnomalyThresholds","createAnomalyModel","xTensor","tensor2d","splitData","fit","epochs","batchSize","validationData","shuffle","callbacks","onEpochEnd","epoch","logs","loss","val_loss","reconstructionErrors","calculateReconstructionErrors","threshold","calculateAnomalyThreshold","predictCapacity","timeframe","cacheKey","cached","get","findBestModel","recentData","getRecentDataForPrediction","extractFeatures","inputTensor","prediction","predict","predictedValue","data","currentValue","value","confidence","calculatePredictionConfidence","getMetricThreshold","willExceedThreshold","timeToThreshold","estimateTimeToThreshold","undefined","recommendations","generateCapacityRecommendations","result","getTTLForTimeframe","dispose","detectAnomalies","anomalies","recentDataMap","timeWindows","createTimeWindows","window","extractAnomalyFeatures","reconstruction","reconstructedValues","reconstructionError","calculateReconstructionError","Array","from","i","expectedValue","deviation","Math","abs","getMetricAnomalyThreshold","anomaly","random","toString","substr","severity","determineSeverity","probability","min","timestamp","context","allMetrics","Object","fromEntries","map","m","idx","generateAnomalyRecommendations","push","generateMLInsights","insights","correlationInsights","analyzeCorrelations","patternInsights","recognizePatterns","trendInsights","forecastTrends","bottleneckInsights","analyzeBottlenecks","getGrowthProjections","projectionDays","historicalData","growthRate","calculateGrowthRate","projectionDates","projectedValues","date","setDate","getDate","extrapolateFeatures","projectedValue","generateGrowthRecommendations","current","projected","autoRetrainModels","shouldRetrain","getTime","keyMetrics","message","endTime","events","getEvents","start_time","end_time","limit","labels","timestamps","event","featureVector","eventCount","point","getMetricValueAtTime","filter","v","isNaN","normalizedFeatures","normalizeFeatures","normalizedLabels","normalizeLabels","splitIndex","floor","slice","inputShape","sequential","layers","dense","units","activation","kernelRegularizer","regularizers","l2","dropout","rate","compile","optimizer","train","adam","evaluation","evaluate","modelPath","save","target","candidates","values","includes","sort","a","latest","created_at","hourOfDay","getHours","dayOfWeek","getDay","monthOfYear","getMonth","isWeekend","d","recentAvg","reduce","sum","recentTrend","calculateTrend","recentVolatility","calculateVolatility","seasonalComponent","sin","PI","numFeatures","normalized","mins","fill","Infinity","maxs","forEach","sample","normalizedSample","range","label","n","sumX","sumY","sumXY","sumX2","slope","mean","variance","pow","sqrt","hours","predicted","willExceed","ttlMap","tensor","splitRatio","shape","errors","sorted","dataMap","windowMinutes","original","reconstructed","sumSquaredDiff","thresholds","ratio","first","last","timeDiff","daysAhead","futureDate","days","growthPercent","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/PredictiveAnalytics.ts"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-node';\nimport { EventStore, AnalyticsEvent } from './EventStore';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\n\nexport interface PredictionModel {\n  id: string;\n  name: string;\n  type: 'capacity' | 'anomaly' | 'performance' | 'cost';\n  model: tf.LayersModel;\n  metadata: {\n    trainedAt: Date;\n    accuracy: number;\n    features: string[];\n    targetVariable: string;\n    sampleSize: number;\n    version: string;\n  };\n}\n\nexport interface CapacityPrediction {\n  metric: string;\n  timeframe: '1h' | '6h' | '24h' | '7d' | '30d';\n  currentValue: number;\n  predictedValue: number;\n  confidence: number;\n  threshold: number;\n  willExceedThreshold: boolean;\n  timeToThreshold?: Date;\n  recommendations: string[];\n}\n\nexport interface AnomalyDetection {\n  id: string;\n  metric: string;\n  value: number;\n  expectedValue: number;\n  deviation: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  probability: number;\n  timestamp: Date;\n  context: Record<string, any>;\n  recommendations: string[];\n}\n\nexport interface MLInsight {\n  id: string;\n  type: 'trend' | 'correlation' | 'pattern' | 'forecast';\n  title: string;\n  description: string;\n  confidence: number;\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  data: any;\n  timestamp: Date;\n  recommendations: string[];\n  relatedMetrics: string[];\n}\n\nexport interface TrainingData {\n  features: number[][];\n  labels: number[];\n  timestamps: Date[];\n  metadata: Record<string, any>;\n}\n\nexport class PredictiveAnalytics {\n  private models: Map<string, PredictionModel>;\n  private cache: LRUCache<string, any>;\n  private eventStore: EventStore;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  private isTraining: boolean = false;\n  private lastTrainingTime: Date | null = null;\n  private anomalyThresholds: Map<string, { mean: number; stdDev: number; threshold: number }>;\n\n  constructor() {\n    this.models = new Map();\n    this.cache = new LRUCache({\n      max: 500,\n      ttl: 1000 * 60 * 10 // 10 minutes cache for predictions\n    });\n    this.eventStore = EventStore.getInstance();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n    this.anomalyThresholds = new Map();\n    \n    // Initialize TensorFlow.js\n    this.initializeTensorFlow();\n    \n    // Load pre-trained models if available\n    this.loadExistingModels();\n  }\n\n  /**\n   * Initialize TensorFlow.js backend\n   */\n  private async initializeTensorFlow(): Promise<void> {\n    try {\n      await tf.ready();\n      console.log('TensorFlow.js backend initialized:', tf.getBackend());\n    } catch (error) {\n      console.error('Failed to initialize TensorFlow.js:', error);\n    }\n  }\n\n  /**\n   * Train capacity planning model\n   */\n  public async trainCapacityModel(\n    metric: string,\n    timeframeDays: number = 30\n  ): Promise<PredictionModel> {\n    if (this.isTraining) {\n      throw new Error('Training already in progress');\n    }\n\n    this.isTraining = true;\n    const startTime = performance.now();\n\n    try {\n      console.log(`Training capacity prediction model for ${metric}...`);\n\n      // Collect training data\n      const trainingData = await this.collectTrainingData(metric, timeframeDays);\n      \n      if (trainingData.features.length < 50) {\n        throw new Error(`Insufficient training data: ${trainingData.features.length} samples`);\n      }\n\n      // Prepare data tensors\n      const { xTrain, yTrain, xValidation, yValidation } = this.prepareTrainingData(trainingData);\n\n      // Create and configure model\n      const model = this.createCapacityModel(trainingData.features[0].length);\n\n      // Train model\n      const history = await this.trainModel(model, xTrain, yTrain, xValidation, yValidation);\n\n      // Evaluate model\n      const accuracy = await this.evaluateModel(model, xValidation, yValidation);\n\n      // Create prediction model object\n      const predictionModel: PredictionModel = {\n        id: `capacity_${metric}_${Date.now()}`,\n        name: `Capacity Prediction for ${metric}`,\n        type: 'capacity',\n        model,\n        metadata: {\n          trainedAt: new Date(),\n          accuracy,\n          features: this.getFeatureNames(),\n          targetVariable: metric,\n          sampleSize: trainingData.features.length,\n          version: '1.0.0'\n        }\n      };\n\n      // Store model\n      this.models.set(predictionModel.id, predictionModel);\n\n      // Save model to disk\n      await this.saveModel(predictionModel);\n\n      this.lastTrainingTime = new Date();\n      console.log(`Capacity model trained in ${(performance.now() - startTime).toFixed(2)}ms with accuracy: ${accuracy.toFixed(4)}`);\n\n      return predictionModel;\n\n    } finally {\n      this.isTraining = false;\n    }\n  }\n\n  /**\n   * Train anomaly detection model\n   */\n  public async trainAnomalyModel(\n    metrics: string[],\n    timeframeDays: number = 30\n  ): Promise<PredictionModel> {\n    if (this.isTraining) {\n      throw new Error('Training already in progress');\n    }\n\n    this.isTraining = true;\n    const startTime = performance.now();\n\n    try {\n      console.log(`Training anomaly detection model for metrics: ${metrics.join(', ')}...`);\n\n      // Collect multi-metric training data\n      const trainingData = await this.collectMultiMetricTrainingData(metrics, timeframeDays);\n      \n      if (trainingData.features.length < 100) {\n        throw new Error(`Insufficient training data: ${trainingData.features.length} samples`);\n      }\n\n      // Calculate statistical thresholds for each metric\n      await this.calculateAnomalyThresholds(trainingData);\n\n      // Create autoencoder for anomaly detection\n      const model = this.createAnomalyModel(trainingData.features[0].length);\n\n      // Prepare training data (anomaly detection is unsupervised)\n      const xTensor = tf.tensor2d(trainingData.features);\n      const { xTrain, xValidation } = this.splitData(xTensor, 0.8);\n\n      // Train autoencoder\n      const history = await model.fit(xTrain, xTrain, {\n        epochs: 100,\n        batchSize: 32,\n        validationData: [xValidation, xValidation],\n        shuffle: true,\n        callbacks: {\n          onEpochEnd: (epoch, logs) => {\n            if (epoch % 10 === 0) {\n              console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}, val_loss = ${logs?.val_loss?.toFixed(4)}`);\n            }\n          }\n        }\n      });\n\n      // Calculate reconstruction threshold\n      const reconstructionErrors = await this.calculateReconstructionErrors(model, xValidation);\n      const threshold = this.calculateAnomalyThreshold(reconstructionErrors);\n\n      const predictionModel: PredictionModel = {\n        id: `anomaly_${metrics.join('_')}_${Date.now()}`,\n        name: `Anomaly Detection for ${metrics.join(', ')}`,\n        type: 'anomaly',\n        model,\n        metadata: {\n          trainedAt: new Date(),\n          accuracy: threshold,\n          features: metrics,\n          targetVariable: 'anomaly_score',\n          sampleSize: trainingData.features.length,\n          version: '1.0.0'\n        }\n      };\n\n      this.models.set(predictionModel.id, predictionModel);\n      await this.saveModel(predictionModel);\n\n      this.lastTrainingTime = new Date();\n      console.log(`Anomaly model trained in ${(performance.now() - startTime).toFixed(2)}ms`);\n\n      return predictionModel;\n\n    } finally {\n      this.isTraining = false;\n    }\n  }\n\n  /**\n   * Generate capacity predictions\n   */\n  public async predictCapacity(\n    metric: string,\n    timeframe: CapacityPrediction['timeframe'] = '24h'\n  ): Promise<CapacityPrediction> {\n    const cacheKey = `capacity_prediction_${metric}_${timeframe}`;\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const model = this.findBestModel('capacity', metric);\n    if (!model) {\n      throw new Error(`No capacity model available for metric: ${metric}`);\n    }\n\n    // Get recent data for prediction\n    const recentData = await this.getRecentDataForPrediction(metric, 24); // Last 24 hours\n    \n    if (recentData.length === 0) {\n      throw new Error(`No recent data available for metric: ${metric}`);\n    }\n\n    // Prepare input features\n    const features = this.extractFeatures(recentData);\n    const inputTensor = tf.tensor2d([features]);\n\n    // Make prediction\n    const prediction = model.model.predict(inputTensor) as tf.Tensor;\n    const predictedValue = (await prediction.data())[0];\n\n    // Get current value\n    const currentValue = recentData[recentData.length - 1].value;\n\n    // Calculate confidence based on model accuracy and data variance\n    const confidence = this.calculatePredictionConfidence(model, recentData);\n\n    // Get threshold for this metric\n    const threshold = await this.getMetricThreshold(metric);\n\n    // Determine if threshold will be exceeded\n    const willExceedThreshold = predictedValue > threshold;\n\n    // Estimate time to threshold if applicable\n    const timeToThreshold = willExceedThreshold \n      ? this.estimateTimeToThreshold(recentData, threshold, timeframe)\n      : undefined;\n\n    // Generate recommendations\n    const recommendations = this.generateCapacityRecommendations(\n      metric,\n      currentValue,\n      predictedValue,\n      threshold,\n      willExceedThreshold\n    );\n\n    const result: CapacityPrediction = {\n      metric,\n      timeframe,\n      currentValue,\n      predictedValue,\n      confidence,\n      threshold,\n      willExceedThreshold,\n      timeToThreshold,\n      recommendations\n    };\n\n    // Cache result\n    this.cache.set(cacheKey, result, { ttl: this.getTTLForTimeframe(timeframe) });\n\n    // Cleanup tensors\n    inputTensor.dispose();\n    prediction.dispose();\n\n    return result;\n  }\n\n  /**\n   * Detect anomalies in real-time data\n   */\n  public async detectAnomalies(\n    metrics: string[] = ['cpu_usage', 'memory_usage', 'app_response_time']\n  ): Promise<AnomalyDetection[]> {\n    const cacheKey = `anomaly_detection_${metrics.join('_')}`;\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const model = this.findBestModel('anomaly', metrics.join('_'));\n    if (!model) {\n      throw new Error(`No anomaly model available for metrics: ${metrics.join(', ')}`);\n    }\n\n    const anomalies: AnomalyDetection[] = [];\n\n    // Get recent data for all metrics\n    const recentDataMap = new Map<string, any[]>();\n    for (const metric of metrics) {\n      const data = await this.getRecentDataForPrediction(metric, 1); // Last hour\n      recentDataMap.set(metric, data);\n    }\n\n    // Process each time window\n    const timeWindows = this.createTimeWindows(recentDataMap, 5); // 5-minute windows\n\n    for (const window of timeWindows) {\n      // Extract features for this time window\n      const features = this.extractAnomalyFeatures(window, metrics);\n      \n      if (features.length === 0) continue;\n\n      // Get expected values using model\n      const inputTensor = tf.tensor2d([features]);\n      const reconstruction = model.model.predict(inputTensor) as tf.Tensor;\n      const reconstructedValues = await reconstruction.data();\n\n      // Calculate reconstruction error\n      const reconstructionError = this.calculateReconstructionError(features, Array.from(reconstructedValues));\n\n      // Check against threshold\n      const threshold = this.anomalyThresholds.get(metrics.join('_'))?.threshold || 0.1;\n      \n      if (reconstructionError > threshold) {\n        // Determine which metrics are anomalous\n        for (let i = 0; i < metrics.length; i++) {\n          const metric = metrics[i];\n          const currentValue = features[i];\n          const expectedValue = reconstructedValues[i];\n          const deviation = Math.abs(currentValue - expectedValue);\n\n          if (deviation > this.getMetricAnomalyThreshold(metric)) {\n            const anomaly: AnomalyDetection = {\n              id: `anomaly_${metric}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n              metric,\n              value: currentValue,\n              expectedValue,\n              deviation,\n              severity: this.determineSeverity(deviation, this.getMetricAnomalyThreshold(metric)),\n              probability: Math.min(reconstructionError / threshold, 1.0),\n              timestamp: window.timestamp,\n              context: {\n                reconstructionError,\n                threshold,\n                allMetrics: Object.fromEntries(\n                  metrics.map((m, idx) => [m, features[idx]])\n                )\n              },\n              recommendations: this.generateAnomalyRecommendations(metric, deviation)\n            };\n\n            anomalies.push(anomaly);\n          }\n        }\n      }\n\n      // Cleanup tensors\n      inputTensor.dispose();\n      reconstruction.dispose();\n    }\n\n    // Cache results for a short time\n    this.cache.set(cacheKey, anomalies, { ttl: 1000 * 60 * 2 }); // 2 minutes\n\n    return anomalies;\n  }\n\n  /**\n   * Generate ML-powered insights\n   */\n  public async generateMLInsights(): Promise<MLInsight[]> {\n    const insights: MLInsight[] = [];\n\n    try {\n      // Correlation analysis\n      const correlationInsights = await this.analyzeCorrelations();\n      insights.push(...correlationInsights);\n\n      // Pattern recognition\n      const patternInsights = await this.recognizePatterns();\n      insights.push(...patternInsights);\n\n      // Trend forecasting\n      const trendInsights = await this.forecastTrends();\n      insights.push(...trendInsights);\n\n      // Performance bottleneck analysis\n      const bottleneckInsights = await this.analyzeBottlenecks();\n      insights.push(...bottleneckInsights);\n\n    } catch (error) {\n      console.error('Error generating ML insights:', error);\n    }\n\n    return insights;\n  }\n\n  /**\n   * Get growth projections for capacity planning\n   */\n  public async getGrowthProjections(\n    metric: string,\n    projectionDays: number = 30\n  ): Promise<{\n    current: number;\n    projected: number;\n    growthRate: number;\n    projectionDates: Date[];\n    projectedValues: number[];\n    confidence: number;\n    recommendations: string[];\n  }> {\n    const model = this.findBestModel('capacity', metric);\n    if (!model) {\n      throw new Error(`No capacity model available for metric: ${metric}`);\n    }\n\n    // Get historical data for trend analysis\n    const historicalData = await this.getRecentDataForPrediction(metric, projectionDays * 3);\n    \n    if (historicalData.length === 0) {\n      throw new Error(`No historical data available for metric: ${metric}`);\n    }\n\n    // Calculate growth rate\n    const growthRate = this.calculateGrowthRate(historicalData);\n\n    // Generate projections\n    const projectionDates: Date[] = [];\n    const projectedValues: number[] = [];\n    const currentValue = historicalData[historicalData.length - 1].value;\n\n    for (let i = 1; i <= projectionDays; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() + i);\n      projectionDates.push(date);\n\n      // Use model to predict future value\n      const features = this.extrapolateFeatures(historicalData, i);\n      const inputTensor = tf.tensor2d([features]);\n      const prediction = model.model.predict(inputTensor) as tf.Tensor;\n      const predictedValue = (await prediction.data())[0];\n      \n      projectedValues.push(predictedValue);\n\n      // Cleanup\n      inputTensor.dispose();\n      prediction.dispose();\n    }\n\n    const projectedValue = projectedValues[projectedValues.length - 1];\n    const confidence = this.calculatePredictionConfidence(model, historicalData);\n\n    // Generate recommendations based on projections\n    const recommendations = this.generateGrowthRecommendations(\n      metric,\n      currentValue,\n      projectedValue,\n      growthRate,\n      projectionDays\n    );\n\n    return {\n      current: currentValue,\n      projected: projectedValue,\n      growthRate,\n      projectionDates,\n      projectedValues,\n      confidence,\n      recommendations\n    };\n  }\n\n  /**\n   * Auto-retrain models based on data drift\n   */\n  public async autoRetrainModels(): Promise<void> {\n    if (this.isTraining) {\n      console.log('Training already in progress, skipping auto-retrain');\n      return;\n    }\n\n    const now = new Date();\n    const shouldRetrain = !this.lastTrainingTime || \n      (now.getTime() - this.lastTrainingTime.getTime()) > (7 * 24 * 60 * 60 * 1000); // 7 days\n\n    if (!shouldRetrain) {\n      return;\n    }\n\n    console.log('Starting auto-retrain of ML models...');\n\n    try {\n      // Retrain capacity models for key metrics\n      const keyMetrics = ['cpu_usage', 'memory_usage', 'app_response_time', 'app_queue_size'];\n      \n      for (const metric of keyMetrics) {\n        try {\n          await this.trainCapacityModel(metric, 30);\n          console.log(`Successfully retrained capacity model for ${metric}`);\n        } catch (error) {\n          console.error(`Failed to retrain capacity model for ${metric}:`, error.message);\n        }\n      }\n\n      // Retrain anomaly detection model\n      try {\n        await this.trainAnomalyModel(keyMetrics, 30);\n        console.log('Successfully retrained anomaly detection model');\n      } catch (error) {\n        console.error('Failed to retrain anomaly detection model:', error.message);\n      }\n\n    } catch (error) {\n      console.error('Error during auto-retrain:', error);\n    }\n  }\n\n  // Private helper methods...\n\n  private async loadExistingModels(): Promise<void> {\n    // Implementation to load saved models from disk\n    console.log('Loading existing ML models...');\n  }\n\n  private async collectTrainingData(metric: string, timeframeDays: number): Promise<TrainingData> {\n    const endTime = new Date();\n    const startTime = new Date(endTime.getTime() - (timeframeDays * 24 * 60 * 60 * 1000));\n\n    const events = await this.eventStore.getEvents({\n      start_time: startTime,\n      end_time: endTime,\n      limit: 10000\n    });\n\n    // Extract relevant data points and features\n    const features: number[][] = [];\n    const labels: number[] = [];\n    const timestamps: Date[] = [];\n\n    // Process events to create training data\n    for (const event of events) {\n      if (event.data[metric] !== undefined) {\n        const featureVector = this.extractFeatures([event]);\n        if (featureVector.length > 0) {\n          features.push(featureVector);\n          labels.push(event.data[metric]);\n          timestamps.push(new Date(event.timestamp));\n        }\n      }\n    }\n\n    return {\n      features,\n      labels,\n      timestamps,\n      metadata: { metric, timeframeDays, eventCount: events.length }\n    };\n  }\n\n  private async collectMultiMetricTrainingData(metrics: string[], timeframeDays: number): Promise<TrainingData> {\n    const endTime = new Date();\n    const startTime = new Date(endTime.getTime() - (timeframeDays * 24 * 60 * 60 * 1000));\n\n    const features: number[][] = [];\n    const labels: number[] = [];\n    const timestamps: Date[] = [];\n\n    // Get data for each metric\n    for (const metric of metrics) {\n      const data = await this.getRecentDataForPrediction(metric, timeframeDays * 24);\n      \n      for (const point of data) {\n        const featureVector = metrics.map(m => \n          m === metric ? point.value : this.getMetricValueAtTime(m, point.timestamp)\n        ).filter(v => v !== undefined && !isNaN(v));\n\n        if (featureVector.length === metrics.length) {\n          features.push(featureVector);\n          labels.push(0); // For unsupervised learning\n          timestamps.push(point.timestamp);\n        }\n      }\n    }\n\n    return {\n      features,\n      labels,\n      timestamps,\n      metadata: { metrics, timeframeDays }\n    };\n  }\n\n  private prepareTrainingData(trainingData: TrainingData): {\n    xTrain: tf.Tensor2D;\n    yTrain: tf.Tensor2D;\n    xValidation: tf.Tensor2D;\n    yValidation: tf.Tensor2D;\n  } {\n    // Normalize features\n    const normalizedFeatures = this.normalizeFeatures(trainingData.features);\n    const normalizedLabels = this.normalizeLabels(trainingData.labels);\n\n    // Split data\n    const splitIndex = Math.floor(normalizedFeatures.length * 0.8);\n    \n    const xTrain = tf.tensor2d(normalizedFeatures.slice(0, splitIndex));\n    const yTrain = tf.tensor2d(normalizedLabels.slice(0, splitIndex), [splitIndex, 1]);\n    const xValidation = tf.tensor2d(normalizedFeatures.slice(splitIndex));\n    const yValidation = tf.tensor2d(normalizedLabels.slice(splitIndex), [normalizedLabels.length - splitIndex, 1]);\n\n    return { xTrain, yTrain, xValidation, yValidation };\n  }\n\n  private createCapacityModel(inputShape: number): tf.LayersModel {\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({\n          inputShape: [inputShape],\n          units: 64,\n          activation: 'relu',\n          kernelRegularizer: tf.regularizers.l2({ l2: 0.01 })\n        }),\n        tf.layers.dropout({ rate: 0.2 }),\n        tf.layers.dense({\n          units: 32,\n          activation: 'relu',\n          kernelRegularizer: tf.regularizers.l2({ l2: 0.01 })\n        }),\n        tf.layers.dropout({ rate: 0.2 }),\n        tf.layers.dense({\n          units: 16,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 1,\n          activation: 'linear'\n        })\n      ]\n    });\n\n    model.compile({\n      optimizer: tf.train.adam(0.001),\n      loss: 'meanSquaredError',\n      metrics: ['mae']\n    });\n\n    return model;\n  }\n\n  private createAnomalyModel(inputShape: number): tf.LayersModel {\n    // Autoencoder for anomaly detection\n    const model = tf.sequential({\n      layers: [\n        // Encoder\n        tf.layers.dense({\n          inputShape: [inputShape],\n          units: 32,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 16,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 8,\n          activation: 'relu'\n        }),\n        // Decoder\n        tf.layers.dense({\n          units: 16,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: 32,\n          activation: 'relu'\n        }),\n        tf.layers.dense({\n          units: inputShape,\n          activation: 'linear'\n        })\n      ]\n    });\n\n    model.compile({\n      optimizer: tf.train.adam(0.001),\n      loss: 'meanSquaredError'\n    });\n\n    return model;\n  }\n\n  private async trainModel(\n    model: tf.LayersModel,\n    xTrain: tf.Tensor2D,\n    yTrain: tf.Tensor2D,\n    xValidation: tf.Tensor2D,\n    yValidation: tf.Tensor2D\n  ): Promise<tf.History> {\n    return await model.fit(xTrain, yTrain, {\n      epochs: 100,\n      batchSize: 32,\n      validationData: [xValidation, yValidation],\n      shuffle: true,\n      callbacks: {\n        onEpochEnd: (epoch, logs) => {\n          if (epoch % 10 === 0) {\n            console.log(`Epoch ${epoch}: loss = ${logs?.loss?.toFixed(4)}, val_loss = ${logs?.val_loss?.toFixed(4)}`);\n          }\n        }\n      }\n    });\n  }\n\n  private async evaluateModel(\n    model: tf.LayersModel,\n    xValidation: tf.Tensor2D,\n    yValidation: tf.Tensor2D\n  ): Promise<number> {\n    const evaluation = model.evaluate(xValidation, yValidation) as tf.Tensor[];\n    const loss = await evaluation[0].data();\n    return 1 - loss[0]; // Convert loss to accuracy-like metric\n  }\n\n  private async saveModel(predictionModel: PredictionModel): Promise<void> {\n    try {\n      const modelPath = `file://./models/${predictionModel.id}`;\n      await predictionModel.model.save(modelPath);\n      console.log(`Model saved to ${modelPath}`);\n    } catch (error) {\n      console.error('Failed to save model:', error);\n    }\n  }\n\n  private findBestModel(type: PredictionModel['type'], target: string): PredictionModel | null {\n    const candidates = Array.from(this.models.values())\n      .filter(model => model.type === type && \n        (model.metadata.targetVariable === target || \n         model.metadata.features.includes(target)))\n      .sort((a, b) => b.metadata.accuracy - a.metadata.accuracy);\n\n    return candidates[0] || null;\n  }\n\n  private getFeatureNames(): string[] {\n    return [\n      'hour_of_day',\n      'day_of_week',\n      'month_of_year',\n      'is_weekend',\n      'recent_avg',\n      'recent_trend',\n      'recent_volatility',\n      'seasonal_component'\n    ];\n  }\n\n  private extractFeatures(data: any[]): number[] {\n    if (data.length === 0) return [];\n\n    const latest = data[data.length - 1];\n    const timestamp = new Date(latest.timestamp || latest.created_at);\n\n    // Time-based features\n    const hourOfDay = timestamp.getHours() / 23; // Normalize to [0, 1]\n    const dayOfWeek = timestamp.getDay() / 6;\n    const monthOfYear = timestamp.getMonth() / 11;\n    const isWeekend = (timestamp.getDay() === 0 || timestamp.getDay() === 6) ? 1 : 0;\n\n    // Statistical features from recent data\n    const values = data.map(d => d.value || d.data?.value || 0).filter(v => !isNaN(v));\n    const recentAvg = values.length > 0 ? values.reduce((sum, v) => sum + v, 0) / values.length : 0;\n    \n    // Calculate trend (simple linear regression slope)\n    const recentTrend = this.calculateTrend(values);\n    \n    // Calculate volatility (standard deviation)\n    const recentVolatility = this.calculateVolatility(values);\n    \n    // Seasonal component (simplified)\n    const seasonalComponent = Math.sin(2 * Math.PI * timestamp.getHours() / 24);\n\n    return [\n      hourOfDay,\n      dayOfWeek,\n      monthOfYear,\n      isWeekend,\n      recentAvg,\n      recentTrend,\n      recentVolatility,\n      seasonalComponent\n    ];\n  }\n\n  private normalizeFeatures(features: number[][]): number[][] {\n    if (features.length === 0) return [];\n\n    const numFeatures = features[0].length;\n    const normalized: number[][] = [];\n\n    // Calculate min/max for each feature\n    const mins = new Array(numFeatures).fill(Infinity);\n    const maxs = new Array(numFeatures).fill(-Infinity);\n\n    features.forEach(sample => {\n      sample.forEach((value, idx) => {\n        mins[idx] = Math.min(mins[idx], value);\n        maxs[idx] = Math.max(maxs[idx], value);\n      });\n    });\n\n    // Normalize each sample\n    features.forEach(sample => {\n      const normalizedSample = sample.map((value, idx) => {\n        const range = maxs[idx] - mins[idx];\n        return range === 0 ? 0 : (value - mins[idx]) / range;\n      });\n      normalized.push(normalizedSample);\n    });\n\n    return normalized;\n  }\n\n  private normalizeLabels(labels: number[]): number[] {\n    if (labels.length === 0) return [];\n\n    const min = Math.min(...labels);\n    const max = Math.max(...labels);\n    const range = max - min;\n\n    if (range === 0) return labels.map(() => 0);\n\n    return labels.map(label => (label - min) / range);\n  }\n\n  private calculateTrend(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    const n = values.length;\n    const sumX = (n * (n - 1)) / 2;\n    const sumY = values.reduce((sum, v) => sum + v, 0);\n    const sumXY = values.reduce((sum, v, i) => sum + (i * v), 0);\n    const sumX2 = (n * (n - 1) * (2 * n - 1)) / 6;\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    return isNaN(slope) ? 0 : slope;\n  }\n\n  private calculateVolatility(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  // Additional helper methods would continue here...\n  // (Implementation of remaining methods for space considerations)\n\n  private async getRecentDataForPrediction(metric: string, hours: number): Promise<any[]> {\n    // Implementation to fetch recent data\n    return [];\n  }\n\n  private async getMetricThreshold(metric: string): Promise<number> {\n    // Implementation to get metric thresholds\n    return 100;\n  }\n\n  private calculatePredictionConfidence(model: PredictionModel, data: any[]): number {\n    // Implementation to calculate confidence based on model accuracy and data quality\n    return model.metadata.accuracy * 0.8; // Simplified\n  }\n\n  private generateCapacityRecommendations(\n    metric: string,\n    current: number,\n    predicted: number,\n    threshold: number,\n    willExceed: boolean\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    if (willExceed) {\n      recommendations.push(`${metric} is predicted to exceed threshold of ${threshold}`);\n      recommendations.push('Consider scaling infrastructure proactively');\n      recommendations.push('Review resource allocation policies');\n    } else {\n      recommendations.push(`${metric} is within normal parameters`);\n      recommendations.push('Continue monitoring for trend changes');\n    }\n\n    return recommendations;\n  }\n\n  private getTTLForTimeframe(timeframe: string): number {\n    const ttlMap = {\n      '1h': 1000 * 60 * 5,    // 5 minutes\n      '6h': 1000 * 60 * 15,   // 15 minutes\n      '24h': 1000 * 60 * 30,  // 30 minutes\n      '7d': 1000 * 60 * 60,   // 1 hour\n      '30d': 1000 * 60 * 120  // 2 hours\n    };\n    return ttlMap[timeframe] || 1000 * 60 * 10;\n  }\n\n  private estimateTimeToThreshold(data: any[], threshold: number, timeframe: string): Date | undefined {\n    // Implementation to estimate when threshold will be reached\n    const now = new Date();\n    const hours = timeframe === '1h' ? 1 : timeframe === '6h' ? 6 : 24;\n    return new Date(now.getTime() + (hours * 60 * 60 * 1000));\n  }\n\n  // Implement remaining methods...\n  private splitData(tensor: tf.Tensor2D, splitRatio: number): { xTrain: tf.Tensor2D; xValidation: tf.Tensor2D } {\n    const splitIndex = Math.floor(tensor.shape[0] * splitRatio);\n    return {\n      xTrain: tensor.slice([0, 0], [splitIndex, -1]) as tf.Tensor2D,\n      xValidation: tensor.slice([splitIndex, 0], [-1, -1]) as tf.Tensor2D\n    };\n  }\n\n  private async calculateAnomalyThresholds(trainingData: TrainingData): Promise<void> {\n    // Implementation for calculating statistical thresholds\n  }\n\n  private async calculateReconstructionErrors(model: tf.LayersModel, data: tf.Tensor2D): Promise<number[]> {\n    // Implementation for calculating reconstruction errors\n    return [];\n  }\n\n  private calculateAnomalyThreshold(errors: number[]): number {\n    // Use 95th percentile as threshold\n    const sorted = errors.sort((a, b) => a - b);\n    return sorted[Math.floor(sorted.length * 0.95)];\n  }\n\n  private createTimeWindows(dataMap: Map<string, any[]>, windowMinutes: number): any[] {\n    // Implementation for creating time windows\n    return [];\n  }\n\n  private extractAnomalyFeatures(window: any, metrics: string[]): number[] {\n    // Implementation for extracting features from time window\n    return [];\n  }\n\n  private calculateReconstructionError(original: number[], reconstructed: number[]): number {\n    let sumSquaredDiff = 0;\n    for (let i = 0; i < original.length; i++) {\n      sumSquaredDiff += Math.pow(original[i] - reconstructed[i], 2);\n    }\n    return Math.sqrt(sumSquaredDiff / original.length);\n  }\n\n  private getMetricAnomalyThreshold(metric: string): number {\n    const thresholds = {\n      'cpu_usage': 10,\n      'memory_usage': 15,\n      'app_response_time': 500\n    };\n    return thresholds[metric] || 5;\n  }\n\n  private determineSeverity(deviation: number, threshold: number): AnomalyDetection['severity'] {\n    const ratio = deviation / threshold;\n    if (ratio > 3) return 'critical';\n    if (ratio > 2) return 'high';\n    if (ratio > 1.5) return 'medium';\n    return 'low';\n  }\n\n  private generateAnomalyRecommendations(metric: string, deviation: number): string[] {\n    return [\n      `Investigate ${metric} anomaly`,\n      'Check system logs for related events',\n      'Consider scaling if pattern persists'\n    ];\n  }\n\n  private async analyzeCorrelations(): Promise<MLInsight[]> {\n    // Implementation for correlation analysis\n    return [];\n  }\n\n  private async recognizePatterns(): Promise<MLInsight[]> {\n    // Implementation for pattern recognition\n    return [];\n  }\n\n  private async forecastTrends(): Promise<MLInsight[]> {\n    // Implementation for trend forecasting\n    return [];\n  }\n\n  private async analyzeBottlenecks(): Promise<MLInsight[]> {\n    // Implementation for bottleneck analysis\n    return [];\n  }\n\n  private calculateGrowthRate(data: any[]): number {\n    if (data.length < 2) return 0;\n    \n    const first = data[0].value;\n    const last = data[data.length - 1].value;\n    const timeDiff = (new Date(data[data.length - 1].timestamp).getTime() - \n                     new Date(data[0].timestamp).getTime()) / (1000 * 60 * 60 * 24); // days\n    \n    return Math.pow(last / first, 1 / timeDiff) - 1; // Daily growth rate\n  }\n\n  private extrapolateFeatures(historicalData: any[], daysAhead: number): number[] {\n    // Implementation for feature extrapolation\n    const latest = historicalData[historicalData.length - 1];\n    const futureDate = new Date(latest.timestamp);\n    futureDate.setDate(futureDate.getDate() + daysAhead);\n    \n    return this.extractFeatures([{ ...latest, timestamp: futureDate }]);\n  }\n\n  private generateGrowthRecommendations(\n    metric: string,\n    current: number,\n    projected: number,\n    growthRate: number,\n    days: number\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    const growthPercent = ((projected - current) / current) * 100;\n    \n    if (growthPercent > 50) {\n      recommendations.push(`High growth expected for ${metric}: ${growthPercent.toFixed(1)}% over ${days} days`);\n      recommendations.push('Plan for significant capacity increases');\n      recommendations.push('Consider auto-scaling solutions');\n    } else if (growthPercent > 20) {\n      recommendations.push(`Moderate growth expected for ${metric}: ${growthPercent.toFixed(1)}% over ${days} days`);\n      recommendations.push('Monitor capacity utilization closely');\n    } else {\n      recommendations.push(`Stable growth expected for ${metric}`);\n      recommendations.push('Current capacity should be sufficient');\n    }\n    \n    return recommendations;\n  }\n\n  private getMetricValueAtTime(metric: string, timestamp: Date): number | undefined {\n    // Implementation to get metric value at specific time\n    return undefined;\n  }\n}"],"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","ignoreList":[]}