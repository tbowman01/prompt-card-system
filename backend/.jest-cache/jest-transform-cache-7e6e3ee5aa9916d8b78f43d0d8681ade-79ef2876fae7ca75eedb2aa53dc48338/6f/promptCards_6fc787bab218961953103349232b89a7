1d37d30e9877cc65e6159bbbf735b2a7
"use strict";

/* istanbul ignore next */
function cov_1800kgfexc() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/promptCards.ts";
  var hash = "182daae04bc5df2ca03d48e7fa6db398a071efde";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/promptCards.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 56
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 38
        }
      },
      "6": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 68,
          column: 3
        }
      },
      "8": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "9": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 50
        }
      },
      "10": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 53
        }
      },
      "11": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "12": {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "13": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "14": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "15": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "16": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 75
        }
      },
      "17": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 52
        }
      },
      "18": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "19": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 78
        }
      },
      "20": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "21": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "22": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 86
        }
      },
      "23": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "24": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "25": {
        start: {
          line: 47,
          column: 37
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "27": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "28": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "29": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 33
        }
      },
      "30": {
        start: {
          line: 74,
          column: 21
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "31": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "32": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "33": {
        start: {
          line: 84,
          column: 26
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "35": {
        start: {
          line: 92,
          column: 51
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "37": {
        start: {
          line: 108,
          column: 0
        },
        end: {
          line: 132,
          column: 3
        }
      },
      "38": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "39": {
        start: {
          line: 110,
          column: 67
        },
        end: {
          line: 110,
          column: 75
        }
      },
      "40": {
        start: {
          line: 111,
          column: 23
        },
        end: {
          line: 114,
          column: 80
        }
      },
      "41": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 117,
          column: 34
        }
      },
      "42": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "43": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "44": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "45": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "46": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 33
        }
      },
      "47": {
        start: {
          line: 137,
          column: 67
        },
        end: {
          line: 137,
          column: 75
        }
      },
      "48": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 142,
          column: 84
        }
      },
      "49": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "50": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "51": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 151,
          column: 14
        }
      },
      "52": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "53": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "54": {
        start: {
          line: 168,
          column: 0
        },
        end: {
          line: 191,
          column: 3
        }
      },
      "55": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 190,
          column: 5
        }
      },
      "56": {
        start: {
          line: 170,
          column: 23
        },
        end: {
          line: 170,
          column: 33
        }
      },
      "57": {
        start: {
          line: 171,
          column: 23
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "58": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "59": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "60": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "61": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 17
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 28
          },
          end: {
            line: 47,
            column: 29
          }
        },
        loc: {
          start: {
            line: 47,
            column: 37
          },
          end: {
            line: 51,
            column: 13
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 70,
            column: 20
          }
        },
        loc: {
          start: {
            line: 70,
            column: 33
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 42
          },
          end: {
            line: 92,
            column: 43
          }
        },
        loc: {
          start: {
            line: 92,
            column: 51
          },
          end: {
            line: 96,
            column: 17
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 108,
            column: 50
          },
          end: {
            line: 108,
            column: 51
          }
        },
        loc: {
          start: {
            line: 108,
            column: 64
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 108
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 134,
            column: 52
          },
          end: {
            line: 134,
            column: 53
          }
        },
        loc: {
          start: {
            line: 134,
            column: 66
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 134
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 168,
            column: 22
          },
          end: {
            line: 168,
            column: 23
          }
        },
        loc: {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 191,
            column: 1
          }
        },
        line: 168
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 45
          }
        }, {
          start: {
            line: 12,
            column: 49
          },
          end: {
            line: 12,
            column: 50
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 47
          }
        }, {
          start: {
            line: 13,
            column: 51
          },
          end: {
            line: 13,
            column: 53
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 52
          }
        }, {
          start: {
            line: 49,
            column: 56
          },
          end: {
            line: 49,
            column: 60
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 57
          }
        }, {
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 65,
            column: 90
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 91,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 91,
            column: 52
          }
        }, {
          start: {
            line: 91,
            column: 56
          },
          end: {
            line: 91,
            column: 60
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 95,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 95,
            column: 56
          }
        }, {
          start: {
            line: 95,
            column: 60
          },
          end: {
            line: 95,
            column: 64
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 103,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 44
          },
          end: {
            line: 103,
            column: 57
          }
        }, {
          start: {
            line: 103,
            column: 60
          },
          end: {
            line: 103,
            column: 89
          }
        }],
        line: 103
      },
      "9": {
        loc: {
          start: {
            line: 114,
            column: 63
          },
          end: {
            line: 114,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 63
          },
          end: {
            line: 114,
            column: 72
          }
        }, {
          start: {
            line: 114,
            column: 76
          },
          end: {
            line: 114,
            column: 78
          }
        }],
        line: 114
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 38
          },
          end: {
            line: 122,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 38
          },
          end: {
            line: 122,
            column: 55
          }
        }, {
          start: {
            line: 122,
            column: 59
          },
          end: {
            line: 122,
            column: 63
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 44
          },
          end: {
            line: 129,
            column: 57
          }
        }, {
          start: {
            line: 129,
            column: 60
          },
          end: {
            line: 129,
            column: 90
          }
        }],
        line: 129
      },
      "12": {
        loc: {
          start: {
            line: 142,
            column: 63
          },
          end: {
            line: 142,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 63
          },
          end: {
            line: 142,
            column: 72
          }
        }, {
          start: {
            line: 142,
            column: 76
          },
          end: {
            line: 142,
            column: 78
          }
        }],
        line: 142
      },
      "13": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "14": {
        loc: {
          start: {
            line: 156,
            column: 38
          },
          end: {
            line: 156,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 38
          },
          end: {
            line: 156,
            column: 59
          }
        }, {
          start: {
            line: 156,
            column: 63
          },
          end: {
            line: 156,
            column: 67
          }
        }],
        line: 156
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 19
          },
          end: {
            line: 163,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 44
          },
          end: {
            line: 163,
            column: 57
          }
        }, {
          start: {
            line: 163,
            column: 60
          },
          end: {
            line: 163,
            column: 90
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "17": {
        loc: {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 188,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 44
          },
          end: {
            line: 188,
            column: 57
          }
        }, {
          start: {
            line: 188,
            column: 60
          },
          end: {
            line: 188,
            column: 90
          }
        }],
        line: 188
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/promptCards.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/promptCards.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { db } from '../database/connection';\nimport { validatePromptCard } from '../middleware/validation';\nimport { PromptCard, CreatePromptCardRequest } from '../types/promptCard';\nimport { TestCase } from '../types/testCase';\n\nconst router = Router();\n\n// Get all prompt cards with pagination\nrouter.get('/', (req: Request, res: Response) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const offset = (page - 1) * limit;\n    const search = req.query.search as string;\n\n    // Build base query\n    let whereClause = '';\n    let params: any[] = [];\n\n    if (search) {\n      whereClause = 'WHERE pc.title LIKE ? OR pc.description LIKE ?';\n      params = [`%${search}%`, `%${search}%`];\n    }\n\n    // Get total count\n    const totalQuery = `\n      SELECT COUNT(*) as total \n      FROM prompt_cards pc \n      ${whereClause}\n    `;\n    const totalResult = db.prepare(totalQuery).get(...params) as { total: number };\n    const total = totalResult.total;\n\n    // Get paginated results\n    const dataQuery = `\n      SELECT \n        pc.*,\n        COUNT(tc.id) as test_case_count\n      FROM prompt_cards pc\n      LEFT JOIN test_cases tc ON pc.id = tc.prompt_card_id\n      ${whereClause}\n      GROUP BY pc.id\n      ORDER BY pc.updated_at DESC\n      LIMIT ? OFFSET ?\n    `;\n    const cards = db.prepare(dataQuery).all(...params, limit, offset) as PromptCard[];\n\n    const totalPages = Math.ceil(total / limit);\n\n    return res.json({\n      success: true,\n      data: cards.map(card => ({\n        ...card,\n        variables: JSON.parse(card.variables || '[]'),\n        test_case_count: Number(card.test_case_count)\n      })),\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch prompt cards'\n    });\n  }\n});\n\n// Get specific prompt card with test cases\nrouter.get('/:id', (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    // Get prompt card\n    const card = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(id) as PromptCard;\n\n    if (!card) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Get test cases\n    const testCases = db.prepare(`\n      SELECT * FROM test_cases WHERE prompt_card_id = ? ORDER BY created_at DESC\n    `).all(id) as TestCase[];\n\n    return res.json({\n      success: true,\n      data: {\n        ...card,\n        variables: JSON.parse(card.variables || '[]'),\n        test_cases: testCases.map((tc: TestCase) => ({\n          ...tc,\n          input_variables: JSON.parse(tc.input_variables),\n          assertions: JSON.parse(tc.assertions || '[]')\n        }))\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch prompt card'\n    });\n  }\n});\n\n// Create new prompt card\nrouter.post('/', validatePromptCard, (req: Request, res: Response) => {\n  try {\n    const { title, description, prompt_template, variables } = req.body as CreatePromptCardRequest;\n    \n    const result = db.prepare(`\n      INSERT INTO prompt_cards (title, description, prompt_template, variables)\n      VALUES (?, ?, ?, ?)\n    `).run(title, description, prompt_template, JSON.stringify(variables || []));\n\n    const newCard = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(result.lastInsertRowid) as PromptCard;\n\n    return res.status(201).json({\n      success: true,\n      data: {\n        ...newCard,\n        variables: JSON.parse(newCard.variables || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create prompt card'\n    });\n  }\n});\n\n// Update prompt card\nrouter.put('/:id', validatePromptCard, (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { title, description, prompt_template, variables } = req.body as CreatePromptCardRequest;\n    \n    const result = db.prepare(`\n      UPDATE prompt_cards \n      SET title = ?, description = ?, prompt_template = ?, variables = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `).run(title, description, prompt_template, JSON.stringify(variables || []), id);\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    const updatedCard = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(id) as PromptCard;\n\n    return res.json({\n      success: true,\n      data: {\n        ...updatedCard,\n        variables: JSON.parse(updatedCard.variables || '[]')\n      }\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update prompt card'\n    });\n  }\n});\n\n// Delete prompt card\nrouter.delete('/:id', (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    const result = db.prepare(`\n      DELETE FROM prompt_cards WHERE id = ?\n    `).run(id);\n\n    if (result.changes === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Prompt card deleted successfully'\n    });\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete prompt card'\n    });\n  }\n});\n\nexport { router as promptCardRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "182daae04bc5df2ca03d48e7fa6db398a071efde"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1800kgfexc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1800kgfexc();
cov_1800kgfexc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1800kgfexc().s[1]++;
exports.promptCardRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_1800kgfexc().s[2]++, require("express"));
const connection_1 =
/* istanbul ignore next */
(cov_1800kgfexc().s[3]++, require("../database/connection"));
const validation_1 =
/* istanbul ignore next */
(cov_1800kgfexc().s[4]++, require("../middleware/validation"));
const router =
/* istanbul ignore next */
(cov_1800kgfexc().s[5]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_1800kgfexc().s[6]++;
exports.promptCardRoutes = router;
// Get all prompt cards with pagination
/* istanbul ignore next */
cov_1800kgfexc().s[7]++;
router.get('/', (req, res) => {
  /* istanbul ignore next */
  cov_1800kgfexc().f[0]++;
  cov_1800kgfexc().s[8]++;
  try {
    const page =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[9]++,
    /* istanbul ignore next */
    (cov_1800kgfexc().b[0][0]++, parseInt(req.query.page)) ||
    /* istanbul ignore next */
    (cov_1800kgfexc().b[0][1]++, 1));
    const limit =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[10]++,
    /* istanbul ignore next */
    (cov_1800kgfexc().b[1][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_1800kgfexc().b[1][1]++, 10));
    const offset =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[11]++, (page - 1) * limit);
    const search =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[12]++, req.query.search);
    // Build base query
    let whereClause =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[13]++, '');
    let params =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[14]++, []);
    /* istanbul ignore next */
    cov_1800kgfexc().s[15]++;
    if (search) {
      /* istanbul ignore next */
      cov_1800kgfexc().b[2][0]++;
      cov_1800kgfexc().s[16]++;
      whereClause = 'WHERE pc.title LIKE ? OR pc.description LIKE ?';
      /* istanbul ignore next */
      cov_1800kgfexc().s[17]++;
      params = [`%${search}%`, `%${search}%`];
    } else
    /* istanbul ignore next */
    {
      cov_1800kgfexc().b[2][1]++;
    }
    // Get total count
    const totalQuery =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[18]++, `
      SELECT COUNT(*) as total 
      FROM prompt_cards pc 
      ${whereClause}
    `);
    const totalResult =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[19]++, connection_1.db.prepare(totalQuery).get(...params));
    const total =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[20]++, totalResult.total);
    // Get paginated results
    const dataQuery =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[21]++, `
      SELECT 
        pc.*,
        COUNT(tc.id) as test_case_count
      FROM prompt_cards pc
      LEFT JOIN test_cases tc ON pc.id = tc.prompt_card_id
      ${whereClause}
      GROUP BY pc.id
      ORDER BY pc.updated_at DESC
      LIMIT ? OFFSET ?
    `);
    const cards =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[22]++, connection_1.db.prepare(dataQuery).all(...params, limit, offset));
    const totalPages =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[23]++, Math.ceil(total / limit));
    /* istanbul ignore next */
    cov_1800kgfexc().s[24]++;
    return res.json({
      success: true,
      data: cards.map(card => {
        /* istanbul ignore next */
        cov_1800kgfexc().f[1]++;
        cov_1800kgfexc().s[25]++;
        return {
          ...card,
          variables: JSON.parse(
          /* istanbul ignore next */
          (cov_1800kgfexc().b[3][0]++, card.variables) ||
          /* istanbul ignore next */
          (cov_1800kgfexc().b[3][1]++, '[]')),
          test_case_count: Number(card.test_case_count)
        };
      }),
      pagination: {
        page,
        limit,
        total,
        totalPages,
        hasNext: page < totalPages,
        hasPrev: page > 1
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1800kgfexc().s[26]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1800kgfexc().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1800kgfexc().b[4][1]++, 'Failed to fetch prompt cards')
    });
  }
});
// Get specific prompt card with test cases
/* istanbul ignore next */
cov_1800kgfexc().s[27]++;
router.get('/:id', (req, res) => {
  /* istanbul ignore next */
  cov_1800kgfexc().f[2]++;
  cov_1800kgfexc().s[28]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[29]++, req.params);
    // Get prompt card
    const card =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[30]++, connection_1.db.prepare(`
      SELECT * FROM prompt_cards WHERE id = ?
    `).get(id));
    /* istanbul ignore next */
    cov_1800kgfexc().s[31]++;
    if (!card) {
      /* istanbul ignore next */
      cov_1800kgfexc().b[5][0]++;
      cov_1800kgfexc().s[32]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1800kgfexc().b[5][1]++;
    }
    // Get test cases
    const testCases =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[33]++, connection_1.db.prepare(`
      SELECT * FROM test_cases WHERE prompt_card_id = ? ORDER BY created_at DESC
    `).all(id));
    /* istanbul ignore next */
    cov_1800kgfexc().s[34]++;
    return res.json({
      success: true,
      data: {
        ...card,
        variables: JSON.parse(
        /* istanbul ignore next */
        (cov_1800kgfexc().b[6][0]++, card.variables) ||
        /* istanbul ignore next */
        (cov_1800kgfexc().b[6][1]++, '[]')),
        test_cases: testCases.map(tc => {
          /* istanbul ignore next */
          cov_1800kgfexc().f[3]++;
          cov_1800kgfexc().s[35]++;
          return {
            ...tc,
            input_variables: JSON.parse(tc.input_variables),
            assertions: JSON.parse(
            /* istanbul ignore next */
            (cov_1800kgfexc().b[7][0]++, tc.assertions) ||
            /* istanbul ignore next */
            (cov_1800kgfexc().b[7][1]++, '[]'))
          };
        })
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1800kgfexc().s[36]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1800kgfexc().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1800kgfexc().b[8][1]++, 'Failed to fetch prompt card')
    });
  }
});
// Create new prompt card
/* istanbul ignore next */
cov_1800kgfexc().s[37]++;
router.post('/', validation_1.validatePromptCard, (req, res) => {
  /* istanbul ignore next */
  cov_1800kgfexc().f[4]++;
  cov_1800kgfexc().s[38]++;
  try {
    const {
      title,
      description,
      prompt_template,
      variables
    } =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[39]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[40]++, connection_1.db.prepare(`
      INSERT INTO prompt_cards (title, description, prompt_template, variables)
      VALUES (?, ?, ?, ?)
    `).run(title, description, prompt_template, JSON.stringify(
    /* istanbul ignore next */
    (cov_1800kgfexc().b[9][0]++, variables) ||
    /* istanbul ignore next */
    (cov_1800kgfexc().b[9][1]++, []))));
    const newCard =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[41]++, connection_1.db.prepare(`
      SELECT * FROM prompt_cards WHERE id = ?
    `).get(result.lastInsertRowid));
    /* istanbul ignore next */
    cov_1800kgfexc().s[42]++;
    return res.status(201).json({
      success: true,
      data: {
        ...newCard,
        variables: JSON.parse(
        /* istanbul ignore next */
        (cov_1800kgfexc().b[10][0]++, newCard.variables) ||
        /* istanbul ignore next */
        (cov_1800kgfexc().b[10][1]++, '[]'))
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1800kgfexc().s[43]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1800kgfexc().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1800kgfexc().b[11][1]++, 'Failed to create prompt card')
    });
  }
});
// Update prompt card
/* istanbul ignore next */
cov_1800kgfexc().s[44]++;
router.put('/:id', validation_1.validatePromptCard, (req, res) => {
  /* istanbul ignore next */
  cov_1800kgfexc().f[5]++;
  cov_1800kgfexc().s[45]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[46]++, req.params);
    const {
      title,
      description,
      prompt_template,
      variables
    } =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[47]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[48]++, connection_1.db.prepare(`
      UPDATE prompt_cards 
      SET title = ?, description = ?, prompt_template = ?, variables = ?, updated_at = CURRENT_TIMESTAMP
      WHERE id = ?
    `).run(title, description, prompt_template, JSON.stringify(
    /* istanbul ignore next */
    (cov_1800kgfexc().b[12][0]++, variables) ||
    /* istanbul ignore next */
    (cov_1800kgfexc().b[12][1]++, [])), id));
    /* istanbul ignore next */
    cov_1800kgfexc().s[49]++;
    if (result.changes === 0) {
      /* istanbul ignore next */
      cov_1800kgfexc().b[13][0]++;
      cov_1800kgfexc().s[50]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1800kgfexc().b[13][1]++;
    }
    const updatedCard =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[51]++, connection_1.db.prepare(`
      SELECT * FROM prompt_cards WHERE id = ?
    `).get(id));
    /* istanbul ignore next */
    cov_1800kgfexc().s[52]++;
    return res.json({
      success: true,
      data: {
        ...updatedCard,
        variables: JSON.parse(
        /* istanbul ignore next */
        (cov_1800kgfexc().b[14][0]++, updatedCard.variables) ||
        /* istanbul ignore next */
        (cov_1800kgfexc().b[14][1]++, '[]'))
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1800kgfexc().s[53]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1800kgfexc().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1800kgfexc().b[15][1]++, 'Failed to update prompt card')
    });
  }
});
// Delete prompt card
/* istanbul ignore next */
cov_1800kgfexc().s[54]++;
router.delete('/:id', (req, res) => {
  /* istanbul ignore next */
  cov_1800kgfexc().f[6]++;
  cov_1800kgfexc().s[55]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[56]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_1800kgfexc().s[57]++, connection_1.db.prepare(`
      DELETE FROM prompt_cards WHERE id = ?
    `).run(id));
    /* istanbul ignore next */
    cov_1800kgfexc().s[58]++;
    if (result.changes === 0) {
      /* istanbul ignore next */
      cov_1800kgfexc().b[16][0]++;
      cov_1800kgfexc().s[59]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1800kgfexc().b[16][1]++;
    }
    cov_1800kgfexc().s[60]++;
    return res.json({
      success: true,
      message: 'Prompt card deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1800kgfexc().s[61]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1800kgfexc().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1800kgfexc().b[17][1]++, 'Failed to delete prompt card')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,