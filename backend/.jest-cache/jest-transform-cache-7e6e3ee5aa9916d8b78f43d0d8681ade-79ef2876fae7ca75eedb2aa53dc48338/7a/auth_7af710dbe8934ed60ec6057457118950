b518e52e03ddf4d24163b268a1bdb68d
"use strict";

/* istanbul ignore next */
function cov_29zt2ef71b() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/auth.ts";
  var hash = "bf1db1620fd401f9931d67994fe26e6c731a8836";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/auth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 44
        }
      },
      "4": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 60
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "6": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 56
        }
      },
      "7": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 52
        }
      },
      "8": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "9": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "10": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "11": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 65
        }
      },
      "12": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "13": {
        start: {
          line: 18,
          column: 14
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "14": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 41,
          column: 1
        }
      },
      "15": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 97
        }
      },
      "16": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 95
        }
      },
      "17": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 44,
          column: 1
        }
      },
      "18": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "19": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 43,
          column: 61
        }
      },
      "20": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 56,
          column: 1
        }
      },
      "21": {
        start: {
          line: 57,
          column: 27
        },
        end: {
          line: 75,
          column: 1
        }
      },
      "22": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "23": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 77
        }
      },
      "24": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 20
        }
      },
      "25": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 127,
          column: 3
        }
      },
      "26": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "27": {
        start: {
          line: 79,
          column: 36
        },
        end: {
          line: 79,
          column: 44
        }
      },
      "28": {
        start: {
          line: 80,
          column: 21
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "29": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 19
        }
      },
      "32": {
        start: {
          line: 89,
          column: 32
        },
        end: {
          line: 89,
          column: 89
        }
      },
      "33": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "34": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "35": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 19
        }
      },
      "36": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 36
        }
      },
      "37": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "38": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "39": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 45
        }
      },
      "40": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "41": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 180,
          column: 3
        }
      },
      "42": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "43": {
        start: {
          line: 131,
          column: 36
        },
        end: {
          line: 131,
          column: 44
        }
      },
      "44": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 132,
          column: 51
        }
      },
      "45": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "46": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "47": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "48": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 141,
          column: 71
        }
      },
      "49": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "50": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 28
        }
      },
      "51": {
        start: {
          line: 152,
          column: 23
        },
        end: {
          line: 157,
          column: 10
        }
      },
      "52": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "53": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 52
        }
      },
      "54": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "55": {
        start: {
          line: 182,
          column: 0
        },
        end: {
          line: 182,
          column: 45
        }
      },
      "56": {
        start: {
          line: 184,
          column: 0
        },
        end: {
          line: 184,
          column: 38
        }
      },
      "57": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 209,
          column: 3
        }
      },
      "58": {
        start: {
          line: 187,
          column: 17
        },
        end: {
          line: 187,
          column: 42
        }
      },
      "59": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "60": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "61": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "62": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 208,
          column: 7
        }
      },
      "63": {
        start: {
          line: 211,
          column: 0
        },
        end: {
          line: 226,
          column: 3
        }
      },
      "64": {
        start: {
          line: 212,
          column: 21
        },
        end: {
          line: 221,
          column: 7
        }
      },
      "65": {
        start: {
          line: 213,
          column: 24
        },
        end: {
          line: 213,
          column: 37
        }
      },
      "66": {
        start: {
          line: 214,
          column: 22
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "67": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 225,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 39,
            column: 25
          }
        },
        loc: {
          start: {
            line: 39,
            column: 35
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 40,
            column: 22
          },
          end: {
            line: 40,
            column: 23
          }
        },
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 40,
            column: 95
          }
        },
        line: 40
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 42,
            column: 22
          }
        },
        loc: {
          start: {
            line: 42,
            column: 29
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 22
          },
          end: {
            line: 43,
            column: 23
          }
        },
        loc: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 61
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 68,
            column: 17
          }
        },
        loc: {
          start: {
            line: 68,
            column: 36
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 68
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 39
          },
          end: {
            line: 77,
            column: 40
          }
        },
        loc: {
          start: {
            line: 77,
            column: 59
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 45
          },
          end: {
            line: 129,
            column: 46
          }
        },
        loc: {
          start: {
            line: 129,
            column: 65
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 186,
            column: 38
          },
          end: {
            line: 186,
            column: 39
          }
        },
        loc: {
          start: {
            line: 186,
            column: 52
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 186
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 211,
            column: 77
          },
          end: {
            line: 211,
            column: 78
          }
        },
        loc: {
          start: {
            line: 211,
            column: 91
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 211
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        loc: {
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 213,
            column: 37
          }
        },
        line: 213
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 214,
            column: 14
          }
        },
        loc: {
          start: {
            line: 214,
            column: 22
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 214
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 40,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 40,
            column: 78
          }
        }, {
          start: {
            line: 40,
            column: 82
          },
          end: {
            line: 40,
            column: 95
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 44
          }
        }, {
          start: {
            line: 43,
            column: 48
          },
          end: {
            line: 43,
            column: 61
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/auth.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/auth.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { \n  generateTokens, \n  hashPassword, \n  verifyPassword, \n  refreshToken,\n  logout,\n  verifyToken,\n  requireRole\n} from '../middleware/auth';\nimport { authRateLimit } from '../middleware/rateLimiting';\nimport { sanitizeRequestBody, handleValidationErrors } from '../middleware/validation';\nimport { body } from 'express-validator';\nimport { csrfProtection } from '../middleware/security';\n\nconst router = Router();\n\n// Apply rate limiting to all auth routes\nrouter.use(authRateLimit);\n\n// Apply CSRF protection to state-changing operations\nrouter.use(['POST', 'PUT', 'DELETE'], csrfProtection);\n\n// Apply input sanitization\nrouter.use(sanitizeRequestBody);\n\n// Mock user database (replace with real database in production)\ninterface User {\n  id: string;\n  email: string;\n  password: string;\n  role: string;\n  permissions: string[];\n  createdAt: Date;\n  lastLogin?: Date;\n  isActive: boolean;\n}\n\nconst users: User[] = [\n  {\n    id: '1',\n    email: 'admin@example.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n    role: 'admin',\n    permissions: ['read', 'write', 'delete', 'admin'],\n    createdAt: new Date(),\n    isActive: true\n  },\n  {\n    id: '2',\n    email: 'user@example.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n    role: 'user',\n    permissions: ['read', 'write'],\n    createdAt: new Date(),\n    isActive: true\n  }\n];\n\n// Helper functions\nconst findUserByEmail = (email: string): User | undefined => {\n  return users.find(user => user.email.toLowerCase() === email.toLowerCase() && user.isActive);\n};\n\nconst findUserById = (id: string): User | undefined => {\n  return users.find(user => user.id === id && user.isActive);\n};\n\n// Validation schemas\nconst loginValidation = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .isLength({ max: 255 })\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6, max: 128 })\n    .withMessage('Password must be between 6 and 128 characters'),\n  handleValidationErrors\n];\n\nconst registerValidation = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .isLength({ max: 255 })\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 8, max: 128 })\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must contain at least 8 characters with uppercase, lowercase, number, and special character'),\n  body('confirmPassword')\n    .custom((value, { req }) => {\n      if (value !== req.body.password) {\n        throw new Error('Password confirmation does not match password');\n      }\n      return true;\n    }),\n  handleValidationErrors\n];\n\n// POST /auth/login\nrouter.post('/login', loginValidation, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { email, password } = req.body;\n    \n    const user = findUserByEmail(email);\n    if (!user) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n      return;\n    }\n    \n    const isValidPassword = await verifyPassword(password, user.password);\n    if (!isValidPassword) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n      return;\n    }\n    \n    user.lastLogin = new Date();\n    \n    const tokens = generateTokens({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        user: {\n          id: user.id,\n          email: user.email,\n          role: user.role,\n          permissions: user.permissions,\n          lastLogin: user.lastLogin\n        },\n        tokens\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Login failed',\n      code: 'LOGIN_ERROR'\n    });\n  }\n});\n\n// POST /auth/register\nrouter.post('/register', registerValidation, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { email, password } = req.body;\n    \n    const existingUser = findUserByEmail(email);\n    if (existingUser) {\n      res.status(409).json({\n        success: false,\n        error: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n      return;\n    }\n    \n    const hashedPassword = await hashPassword(password);\n    \n    const newUser: User = {\n      id: String(users.length + 1),\n      email,\n      password: hashedPassword,\n      role: 'user',\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      isActive: true\n    };\n    \n    users.push(newUser);\n    \n    const tokens = generateTokens({\n      id: newUser.id,\n      email: newUser.email,\n      role: newUser.role,\n      permissions: newUser.permissions\n    });\n    \n    res.status(201).json({\n      success: true,\n      data: {\n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          role: newUser.role,\n          permissions: newUser.permissions,\n          createdAt: newUser.createdAt\n        },\n        tokens\n      }\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Registration failed',\n      code: 'REGISTRATION_ERROR'\n    });\n  }\n});\n\n// POST /auth/refresh\nrouter.post('/refresh', refreshToken);\n\n// POST /auth/logout\nrouter.post('/logout', logout);\n\n// GET /auth/me\nrouter.get('/me', verifyToken, (req: Request, res: Response): void => {\n  const user = findUserById(req.user!.id);\n  \n  if (!user) {\n    res.status(404).json({\n      success: false,\n      error: 'User not found',\n      code: 'USER_NOT_FOUND'\n    });\n    return;\n  }\n  \n  res.json({\n    success: true,\n    data: {\n      user: {\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        permissions: user.permissions,\n        createdAt: user.createdAt,\n        lastLogin: user.lastLogin\n      }\n    }\n  });\n});\n\n// GET /auth/users - Admin only\nrouter.get('/users', verifyToken, requireRole(['admin']), (req: Request, res: Response): void => {\n  const userList = users\n    .filter(user => user.isActive)\n    .map(user => ({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions,\n      createdAt: user.createdAt,\n      lastLogin: user.lastLogin\n    }));\n  \n  res.json({\n    success: true,\n    data: { users: userList }\n  });\n});\n\nexport { router as authRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bf1db1620fd401f9931d67994fe26e6c731a8836"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29zt2ef71b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29zt2ef71b();
cov_29zt2ef71b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_29zt2ef71b().s[1]++;
exports.authRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_29zt2ef71b().s[2]++, require("express"));
const auth_1 =
/* istanbul ignore next */
(cov_29zt2ef71b().s[3]++, require("../middleware/auth"));
const rateLimiting_1 =
/* istanbul ignore next */
(cov_29zt2ef71b().s[4]++, require("../middleware/rateLimiting"));
const validation_1 =
/* istanbul ignore next */
(cov_29zt2ef71b().s[5]++, require("../middleware/validation"));
const express_validator_1 =
/* istanbul ignore next */
(cov_29zt2ef71b().s[6]++, require("express-validator"));
const security_1 =
/* istanbul ignore next */
(cov_29zt2ef71b().s[7]++, require("../middleware/security"));
const router =
/* istanbul ignore next */
(cov_29zt2ef71b().s[8]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_29zt2ef71b().s[9]++;
exports.authRoutes = router;
// Apply rate limiting to all auth routes
/* istanbul ignore next */
cov_29zt2ef71b().s[10]++;
router.use(rateLimiting_1.authRateLimit);
// Apply CSRF protection to state-changing operations
/* istanbul ignore next */
cov_29zt2ef71b().s[11]++;
router.use(['POST', 'PUT', 'DELETE'], security_1.csrfProtection);
// Apply input sanitization
/* istanbul ignore next */
cov_29zt2ef71b().s[12]++;
router.use(validation_1.sanitizeRequestBody);
const users =
/* istanbul ignore next */
(cov_29zt2ef71b().s[13]++, [{
  id: '1',
  email: 'admin@example.com',
  password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',
  role: 'admin',
  permissions: ['read', 'write', 'delete', 'admin'],
  createdAt: new Date(),
  isActive: true
}, {
  id: '2',
  email: 'user@example.com',
  password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',
  role: 'user',
  permissions: ['read', 'write'],
  createdAt: new Date(),
  isActive: true
}]);
// Helper functions
/* istanbul ignore next */
cov_29zt2ef71b().s[14]++;
const findUserByEmail = email => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[0]++;
  cov_29zt2ef71b().s[15]++;
  return users.find(user => {
    /* istanbul ignore next */
    cov_29zt2ef71b().f[1]++;
    cov_29zt2ef71b().s[16]++;
    return /* istanbul ignore next */(cov_29zt2ef71b().b[0][0]++, user.email.toLowerCase() === email.toLowerCase()) &&
    /* istanbul ignore next */
    (cov_29zt2ef71b().b[0][1]++, user.isActive);
  });
};
/* istanbul ignore next */
cov_29zt2ef71b().s[17]++;
const findUserById = id => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[2]++;
  cov_29zt2ef71b().s[18]++;
  return users.find(user => {
    /* istanbul ignore next */
    cov_29zt2ef71b().f[3]++;
    cov_29zt2ef71b().s[19]++;
    return /* istanbul ignore next */(cov_29zt2ef71b().b[1][0]++, user.id === id) &&
    /* istanbul ignore next */
    (cov_29zt2ef71b().b[1][1]++, user.isActive);
  });
};
// Validation schemas
const loginValidation =
/* istanbul ignore next */
(cov_29zt2ef71b().s[20]++, [(0, express_validator_1.body)('email').isEmail().normalizeEmail().isLength({
  max: 255
}).withMessage('Valid email is required'), (0, express_validator_1.body)('password').isLength({
  min: 6,
  max: 128
}).withMessage('Password must be between 6 and 128 characters'), validation_1.handleValidationErrors]);
const registerValidation =
/* istanbul ignore next */
(cov_29zt2ef71b().s[21]++, [(0, express_validator_1.body)('email').isEmail().normalizeEmail().isLength({
  max: 255
}).withMessage('Valid email is required'), (0, express_validator_1.body)('password').isLength({
  min: 8,
  max: 128
}).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/).withMessage('Password must contain at least 8 characters with uppercase, lowercase, number, and special character'), (0, express_validator_1.body)('confirmPassword').custom((value, {
  req
}) => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[4]++;
  cov_29zt2ef71b().s[22]++;
  if (value !== req.body.password) {
    /* istanbul ignore next */
    cov_29zt2ef71b().b[2][0]++;
    cov_29zt2ef71b().s[23]++;
    throw new Error('Password confirmation does not match password');
  } else
  /* istanbul ignore next */
  {
    cov_29zt2ef71b().b[2][1]++;
  }
  cov_29zt2ef71b().s[24]++;
  return true;
}), validation_1.handleValidationErrors]);
// POST /auth/login
/* istanbul ignore next */
cov_29zt2ef71b().s[25]++;
router.post('/login', loginValidation, async (req, res) => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[5]++;
  cov_29zt2ef71b().s[26]++;
  try {
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[27]++, req.body);
    const user =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[28]++, findUserByEmail(email));
    /* istanbul ignore next */
    cov_29zt2ef71b().s[29]++;
    if (!user) {
      /* istanbul ignore next */
      cov_29zt2ef71b().b[3][0]++;
      cov_29zt2ef71b().s[30]++;
      res.status(401).json({
        success: false,
        error: 'Invalid credentials',
        code: 'INVALID_CREDENTIALS'
      });
      /* istanbul ignore next */
      cov_29zt2ef71b().s[31]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_29zt2ef71b().b[3][1]++;
    }
    const isValidPassword =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[32]++, await (0, auth_1.verifyPassword)(password, user.password));
    /* istanbul ignore next */
    cov_29zt2ef71b().s[33]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_29zt2ef71b().b[4][0]++;
      cov_29zt2ef71b().s[34]++;
      res.status(401).json({
        success: false,
        error: 'Invalid credentials',
        code: 'INVALID_CREDENTIALS'
      });
      /* istanbul ignore next */
      cov_29zt2ef71b().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_29zt2ef71b().b[4][1]++;
    }
    cov_29zt2ef71b().s[36]++;
    user.lastLogin = new Date();
    const tokens =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[37]++, (0, auth_1.generateTokens)({
      id: user.id,
      email: user.email,
      role: user.role,
      permissions: user.permissions
    }));
    /* istanbul ignore next */
    cov_29zt2ef71b().s[38]++;
    res.json({
      success: true,
      data: {
        user: {
          id: user.id,
          email: user.email,
          role: user.role,
          permissions: user.permissions,
          lastLogin: user.lastLogin
        },
        tokens
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29zt2ef71b().s[39]++;
    console.error('Login error:', error);
    /* istanbul ignore next */
    cov_29zt2ef71b().s[40]++;
    res.status(500).json({
      success: false,
      error: 'Login failed',
      code: 'LOGIN_ERROR'
    });
  }
});
// POST /auth/register
/* istanbul ignore next */
cov_29zt2ef71b().s[41]++;
router.post('/register', registerValidation, async (req, res) => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[6]++;
  cov_29zt2ef71b().s[42]++;
  try {
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[43]++, req.body);
    const existingUser =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[44]++, findUserByEmail(email));
    /* istanbul ignore next */
    cov_29zt2ef71b().s[45]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_29zt2ef71b().b[5][0]++;
      cov_29zt2ef71b().s[46]++;
      res.status(409).json({
        success: false,
        error: 'User already exists',
        code: 'USER_EXISTS'
      });
      /* istanbul ignore next */
      cov_29zt2ef71b().s[47]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_29zt2ef71b().b[5][1]++;
    }
    const hashedPassword =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[48]++, await (0, auth_1.hashPassword)(password));
    const newUser =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[49]++, {
      id: String(users.length + 1),
      email,
      password: hashedPassword,
      role: 'user',
      permissions: ['read', 'write'],
      createdAt: new Date(),
      isActive: true
    });
    /* istanbul ignore next */
    cov_29zt2ef71b().s[50]++;
    users.push(newUser);
    const tokens =
    /* istanbul ignore next */
    (cov_29zt2ef71b().s[51]++, (0, auth_1.generateTokens)({
      id: newUser.id,
      email: newUser.email,
      role: newUser.role,
      permissions: newUser.permissions
    }));
    /* istanbul ignore next */
    cov_29zt2ef71b().s[52]++;
    res.status(201).json({
      success: true,
      data: {
        user: {
          id: newUser.id,
          email: newUser.email,
          role: newUser.role,
          permissions: newUser.permissions,
          createdAt: newUser.createdAt
        },
        tokens
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29zt2ef71b().s[53]++;
    console.error('Registration error:', error);
    /* istanbul ignore next */
    cov_29zt2ef71b().s[54]++;
    res.status(500).json({
      success: false,
      error: 'Registration failed',
      code: 'REGISTRATION_ERROR'
    });
  }
});
// POST /auth/refresh
/* istanbul ignore next */
cov_29zt2ef71b().s[55]++;
router.post('/refresh', auth_1.refreshToken);
// POST /auth/logout
/* istanbul ignore next */
cov_29zt2ef71b().s[56]++;
router.post('/logout', auth_1.logout);
// GET /auth/me
/* istanbul ignore next */
cov_29zt2ef71b().s[57]++;
router.get('/me', auth_1.verifyToken, (req, res) => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[7]++;
  const user =
  /* istanbul ignore next */
  (cov_29zt2ef71b().s[58]++, findUserById(req.user.id));
  /* istanbul ignore next */
  cov_29zt2ef71b().s[59]++;
  if (!user) {
    /* istanbul ignore next */
    cov_29zt2ef71b().b[6][0]++;
    cov_29zt2ef71b().s[60]++;
    res.status(404).json({
      success: false,
      error: 'User not found',
      code: 'USER_NOT_FOUND'
    });
    /* istanbul ignore next */
    cov_29zt2ef71b().s[61]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_29zt2ef71b().b[6][1]++;
  }
  cov_29zt2ef71b().s[62]++;
  res.json({
    success: true,
    data: {
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        permissions: user.permissions,
        createdAt: user.createdAt,
        lastLogin: user.lastLogin
      }
    }
  });
});
// GET /auth/users - Admin only
/* istanbul ignore next */
cov_29zt2ef71b().s[63]++;
router.get('/users', auth_1.verifyToken, (0, auth_1.requireRole)(['admin']), (req, res) => {
  /* istanbul ignore next */
  cov_29zt2ef71b().f[8]++;
  const userList =
  /* istanbul ignore next */
  (cov_29zt2ef71b().s[64]++, users.filter(user => {
    /* istanbul ignore next */
    cov_29zt2ef71b().f[9]++;
    cov_29zt2ef71b().s[65]++;
    return user.isActive;
  }).map(user => {
    /* istanbul ignore next */
    cov_29zt2ef71b().f[10]++;
    cov_29zt2ef71b().s[66]++;
    return {
      id: user.id,
      email: user.email,
      role: user.role,
      permissions: user.permissions,
      createdAt: user.createdAt,
      lastLogin: user.lastLogin
    };
  }));
  /* istanbul ignore next */
  cov_29zt2ef71b().s[67]++;
  res.json({
    success: true,
    data: {
      users: userList
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,