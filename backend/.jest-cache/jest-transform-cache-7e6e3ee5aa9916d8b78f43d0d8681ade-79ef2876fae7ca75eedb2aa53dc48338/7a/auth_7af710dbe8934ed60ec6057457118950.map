{"version":3,"names":["cov_29zt2ef71b","actualCoverage","s","express_1","require","auth_1","rateLimiting_1","validation_1","express_validator_1","security_1","router","Router","exports","authRoutes","use","authRateLimit","csrfProtection","sanitizeRequestBody","users","id","email","password","role","permissions","createdAt","Date","isActive","findUserByEmail","f","find","user","b","toLowerCase","findUserById","loginValidation","body","isEmail","normalizeEmail","isLength","max","withMessage","min","handleValidationErrors","registerValidation","matches","custom","value","req","Error","post","res","status","json","success","error","code","isValidPassword","verifyPassword","lastLogin","tokens","generateTokens","data","console","existingUser","hashedPassword","hashPassword","newUser","String","length","push","refreshToken","logout","get","verifyToken","requireRole","userList","filter","map"],"sources":["/workspaces/prompt-card-system/backend/src/routes/auth.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { \n  generateTokens, \n  hashPassword, \n  verifyPassword, \n  refreshToken,\n  logout,\n  verifyToken,\n  requireRole\n} from '../middleware/auth';\nimport { authRateLimit } from '../middleware/rateLimiting';\nimport { sanitizeRequestBody, handleValidationErrors } from '../middleware/validation';\nimport { body } from 'express-validator';\nimport { csrfProtection } from '../middleware/security';\n\nconst router = Router();\n\n// Apply rate limiting to all auth routes\nrouter.use(authRateLimit);\n\n// Apply CSRF protection to state-changing operations\nrouter.use(['POST', 'PUT', 'DELETE'], csrfProtection);\n\n// Apply input sanitization\nrouter.use(sanitizeRequestBody);\n\n// Mock user database (replace with real database in production)\ninterface User {\n  id: string;\n  email: string;\n  password: string;\n  role: string;\n  permissions: string[];\n  createdAt: Date;\n  lastLogin?: Date;\n  isActive: boolean;\n}\n\nconst users: User[] = [\n  {\n    id: '1',\n    email: 'admin@example.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n    role: 'admin',\n    permissions: ['read', 'write', 'delete', 'admin'],\n    createdAt: new Date(),\n    isActive: true\n  },\n  {\n    id: '2',\n    email: 'user@example.com',\n    password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/UnFhqA5qLiDVN7Z6a',\n    role: 'user',\n    permissions: ['read', 'write'],\n    createdAt: new Date(),\n    isActive: true\n  }\n];\n\n// Helper functions\nconst findUserByEmail = (email: string): User | undefined => {\n  return users.find(user => user.email.toLowerCase() === email.toLowerCase() && user.isActive);\n};\n\nconst findUserById = (id: string): User | undefined => {\n  return users.find(user => user.id === id && user.isActive);\n};\n\n// Validation schemas\nconst loginValidation = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .isLength({ max: 255 })\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6, max: 128 })\n    .withMessage('Password must be between 6 and 128 characters'),\n  handleValidationErrors\n];\n\nconst registerValidation = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .isLength({ max: 255 })\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 8, max: 128 })\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must contain at least 8 characters with uppercase, lowercase, number, and special character'),\n  body('confirmPassword')\n    .custom((value, { req }) => {\n      if (value !== req.body.password) {\n        throw new Error('Password confirmation does not match password');\n      }\n      return true;\n    }),\n  handleValidationErrors\n];\n\n// POST /auth/login\nrouter.post('/login', loginValidation, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { email, password } = req.body;\n    \n    const user = findUserByEmail(email);\n    if (!user) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n      return;\n    }\n    \n    const isValidPassword = await verifyPassword(password, user.password);\n    if (!isValidPassword) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n      return;\n    }\n    \n    user.lastLogin = new Date();\n    \n    const tokens = generateTokens({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        user: {\n          id: user.id,\n          email: user.email,\n          role: user.role,\n          permissions: user.permissions,\n          lastLogin: user.lastLogin\n        },\n        tokens\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Login failed',\n      code: 'LOGIN_ERROR'\n    });\n  }\n});\n\n// POST /auth/register\nrouter.post('/register', registerValidation, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { email, password } = req.body;\n    \n    const existingUser = findUserByEmail(email);\n    if (existingUser) {\n      res.status(409).json({\n        success: false,\n        error: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n      return;\n    }\n    \n    const hashedPassword = await hashPassword(password);\n    \n    const newUser: User = {\n      id: String(users.length + 1),\n      email,\n      password: hashedPassword,\n      role: 'user',\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      isActive: true\n    };\n    \n    users.push(newUser);\n    \n    const tokens = generateTokens({\n      id: newUser.id,\n      email: newUser.email,\n      role: newUser.role,\n      permissions: newUser.permissions\n    });\n    \n    res.status(201).json({\n      success: true,\n      data: {\n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          role: newUser.role,\n          permissions: newUser.permissions,\n          createdAt: newUser.createdAt\n        },\n        tokens\n      }\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Registration failed',\n      code: 'REGISTRATION_ERROR'\n    });\n  }\n});\n\n// POST /auth/refresh\nrouter.post('/refresh', refreshToken);\n\n// POST /auth/logout\nrouter.post('/logout', logout);\n\n// GET /auth/me\nrouter.get('/me', verifyToken, (req: Request, res: Response): void => {\n  const user = findUserById(req.user!.id);\n  \n  if (!user) {\n    res.status(404).json({\n      success: false,\n      error: 'User not found',\n      code: 'USER_NOT_FOUND'\n    });\n    return;\n  }\n  \n  res.json({\n    success: true,\n    data: {\n      user: {\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        permissions: user.permissions,\n        createdAt: user.createdAt,\n        lastLogin: user.lastLogin\n      }\n    }\n  });\n});\n\n// GET /auth/users - Admin only\nrouter.get('/users', verifyToken, requireRole(['admin']), (req: Request, res: Response): void => {\n  const userList = users\n    .filter(user => user.isActive)\n    .map(user => ({\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions,\n      createdAt: user.createdAt,\n      lastLogin: user.lastLogin\n    }));\n  \n  res.json({\n    success: true,\n    data: { users: userList }\n  });\n});\n\nexport { router as authRoutes };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}