0110ae6a703c6c6edaa09c73350313ee
"use strict";

/* istanbul ignore next */
function cov_1hx4gzairn() {
  var path = "/workspaces/prompt-card-system/backend/src/services/health/HealthOrchestrator.ts";
  var hash = "8aaa14a84c38e005c01183daca09dead0cf46112";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/health/HealthOrchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "6": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 49
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 57
        }
      },
      "8": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 11,
          column: 68
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 16
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 34
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "15": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "16": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 44
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "20": {
        start: {
          line: 43,
          column: 31
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "21": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "22": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "23": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 59
        }
      },
      "24": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 118,
          column: 12
        }
      },
      "25": {
        start: {
          line: 110,
          column: 59
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "26": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 128,
          column: 12
        }
      },
      "27": {
        start: {
          line: 120,
          column: 58
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "28": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 138,
          column: 12
        }
      },
      "29": {
        start: {
          line: 130,
          column: 65
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "30": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 61
        }
      },
      "31": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "32": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "33": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 61
        }
      },
      "34": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 153,
          column: 78
        }
      },
      "35": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 78
        }
      },
      "36": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "37": {
        start: {
          line: 156,
          column: 41
        },
        end: {
          line: 156,
          column: 83
        }
      },
      "38": {
        start: {
          line: 157,
          column: 33
        },
        end: {
          line: 157,
          column: 38
        }
      },
      "39": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "40": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 75
        }
      },
      "41": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 39
        }
      },
      "42": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 37
        }
      },
      "43": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "44": {
        start: {
          line: 168,
          column: 27
        },
        end: {
          line: 168,
          column: 44
        }
      },
      "45": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 33
        }
      },
      "46": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 26
        }
      },
      "47": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 31
        }
      },
      "48": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 45
        }
      },
      "49": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 181,
          column: 13
        }
      },
      "50": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 38
        }
      },
      "51": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 94
        }
      },
      "52": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 24
        }
      },
      "53": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "54": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "55": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "56": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 58
        }
      },
      "57": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 30
        }
      },
      "58": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "59": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "60": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 49
        }
      },
      "61": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 63
        }
      },
      "62": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 81
        }
      },
      "63": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "64": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 53
        }
      },
      "65": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 44
        }
      },
      "66": {
        start: {
          line: 219,
          column: 34
        },
        end: {
          line: 221,
          column: 41
        }
      },
      "67": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 42
        }
      },
      "68": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 69
        }
      },
      "69": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 66
        }
      },
      "70": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 68
        }
      },
      "71": {
        start: {
          line: 227,
          column: 25
        },
        end: {
          line: 229,
          column: 37
        }
      },
      "72": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 55
        }
      },
      "73": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 55
        }
      },
      "74": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 54
        }
      },
      "75": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "76": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "77": {
        start: {
          line: 236,
          column: 26
        },
        end: {
          line: 236,
          column: 36
        }
      },
      "78": {
        start: {
          line: 237,
          column: 24
        },
        end: {
          line: 237,
          column: 33
        }
      },
      "79": {
        start: {
          line: 238,
          column: 22
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "80": {
        start: {
          line: 239,
          column: 22
        },
        end: {
          line: 239,
          column: 24
        }
      },
      "81": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "82": {
        start: {
          line: 242,
          column: 38
        },
        end: {
          line: 242,
          column: 79
        }
      },
      "83": {
        start: {
          line: 243,
          column: 40
        },
        end: {
          line: 243,
          column: 83
        }
      },
      "84": {
        start: {
          line: 243,
          column: 71
        },
        end: {
          line: 243,
          column: 82
        }
      },
      "85": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "86": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "87": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 51
        }
      },
      "88": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 61
        }
      },
      "89": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 270,
          column: 17
        }
      },
      "90": {
        start: {
          line: 252,
          column: 41
        },
        end: {
          line: 252,
          column: 135
        }
      },
      "91": {
        start: {
          line: 252,
          column: 97
        },
        end: {
          line: 252,
          column: 134
        }
      },
      "92": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 253,
          column: 52
        }
      },
      "93": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 57
        }
      },
      "94": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 70
        }
      },
      "95": {
        start: {
          line: 259,
          column: 37
        },
        end: {
          line: 259,
          column: 77
        }
      },
      "96": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 269,
          column: 21
        }
      },
      "97": {
        start: {
          line: 261,
          column: 24
        },
        end: {
          line: 261,
          column: 98
        }
      },
      "98": {
        start: {
          line: 262,
          column: 47
        },
        end: {
          line: 262,
          column: 63
        }
      },
      "99": {
        start: {
          line: 263,
          column: 24
        },
        end: {
          line: 263,
          column: 58
        }
      },
      "100": {
        start: {
          line: 264,
          column: 24
        },
        end: {
          line: 264,
          column: 63
        }
      },
      "101": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 126
        }
      },
      "102": {
        start: {
          line: 268,
          column: 24
        },
        end: {
          line: 268,
          column: 50
        }
      },
      "103": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 36
        }
      },
      "104": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 85
        }
      },
      "105": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 36
        }
      },
      "106": {
        start: {
          line: 278,
          column: 29
        },
        end: {
          line: 278,
          column: 51
        }
      },
      "107": {
        start: {
          line: 280,
          column: 31
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "108": {
        start: {
          line: 288,
          column: 31
        },
        end: {
          line: 288,
          column: 45
        }
      },
      "109": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 55
        }
      },
      "110": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "111": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "112": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "113": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 306,
          column: 19
        }
      },
      "114": {
        start: {
          line: 311,
          column: 29
        },
        end: {
          line: 311,
          column: 72
        }
      },
      "115": {
        start: {
          line: 312,
          column: 24
        },
        end: {
          line: 312,
          column: 26
        }
      },
      "116": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "117": {
        start: {
          line: 314,
          column: 31
        },
        end: {
          line: 314,
          column: 57
        }
      },
      "118": {
        start: {
          line: 315,
          column: 28
        },
        end: {
          line: 315,
          column: 100
        }
      },
      "119": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 53
        }
      },
      "120": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 23
        }
      },
      "121": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "122": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 323,
          column: 44
        }
      },
      "123": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 41
        }
      },
      "124": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 42
        }
      },
      "125": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 44
        }
      },
      "126": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 43
        }
      },
      "127": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 45
        }
      },
      "128": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 335,
          column: 47
        }
      },
      "129": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 46
        }
      },
      "130": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 43
        }
      },
      "131": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 45
        }
      },
      "132": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 346,
          column: 18
        }
      },
      "133": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "134": {
        start: {
          line: 351,
          column: 27
        },
        end: {
          line: 351,
          column: 76
        }
      },
      "135": {
        start: {
          line: 352,
          column: 26
        },
        end: {
          line: 355,
          column: 13
        }
      },
      "136": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 360,
          column: 14
        }
      },
      "137": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 366,
          column: 14
        }
      },
      "138": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 370,
          column: 70
        }
      },
      "139": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "140": {
        start: {
          line: 372,
          column: 27
        },
        end: {
          line: 372,
          column: 71
        }
      },
      "141": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 35
        }
      },
      "142": {
        start: {
          line: 374,
          column: 27
        },
        end: {
          line: 374,
          column: 46
        }
      },
      "143": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 38
        }
      },
      "144": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 380,
          column: 14
        }
      },
      "145": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 387,
          column: 14
        }
      },
      "146": {
        start: {
          line: 391,
          column: 26
        },
        end: {
          line: 391,
          column: 78
        }
      },
      "147": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "148": {
        start: {
          line: 393,
          column: 29
        },
        end: {
          line: 393,
          column: 116
        }
      },
      "149": {
        start: {
          line: 394,
          column: 35
        },
        end: {
          line: 394,
          column: 119
        }
      },
      "150": {
        start: {
          line: 395,
          column: 27
        },
        end: {
          line: 395,
          column: 59
        }
      },
      "151": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 405,
          column: 14
        }
      },
      "152": {
        start: {
          line: 403,
          column: 46
        },
        end: {
          line: 403,
          column: 52
        }
      },
      "153": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 412,
          column: 14
        }
      },
      "154": {
        start: {
          line: 416,
          column: 28
        },
        end: {
          line: 416,
          column: 79
        }
      },
      "155": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "156": {
        start: {
          line: 418,
          column: 29
        },
        end: {
          line: 418,
          column: 117
        }
      },
      "157": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 427,
          column: 14
        }
      },
      "158": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 434,
          column: 14
        }
      },
      "159": {
        start: {
          line: 438,
          column: 27
        },
        end: {
          line: 438,
          column: 77
        }
      },
      "160": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "161": {
        start: {
          line: 440,
          column: 29
        },
        end: {
          line: 440,
          column: 119
        }
      },
      "162": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 450,
          column: 14
        }
      },
      "163": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 457,
          column: 14
        }
      },
      "164": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 467,
          column: 10
        }
      },
      "165": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "166": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 474,
          column: 14
        }
      },
      "167": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "168": {
        start: {
          line: 477,
          column: 34
        },
        end: {
          line: 477,
          column: 63
        }
      },
      "169": {
        start: {
          line: 478,
          column: 34
        },
        end: {
          line: 478,
          column: 70
        }
      },
      "170": {
        start: {
          line: 479,
          column: 36
        },
        end: {
          line: 479,
          column: 74
        }
      },
      "171": {
        start: {
          line: 480,
          column: 25
        },
        end: {
          line: 480,
          column: 34
        }
      },
      "172": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 483,
          column: 13
        }
      },
      "173": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 36
        }
      },
      "174": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 486,
          column: 13
        }
      },
      "175": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 485,
          column: 37
        }
      },
      "176": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 495,
          column: 14
        }
      },
      "177": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 501,
          column: 14
        }
      },
      "178": {
        start: {
          line: 505,
          column: 30
        },
        end: {
          line: 505,
          column: 83
        }
      },
      "179": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 520,
          column: 9
        }
      },
      "180": {
        start: {
          line: 507,
          column: 29
        },
        end: {
          line: 507,
          column: 118
        }
      },
      "181": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 512,
          column: 14
        }
      },
      "182": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 519,
          column: 14
        }
      },
      "183": {
        start: {
          line: 523,
          column: 27
        },
        end: {
          line: 523,
          column: 77
        }
      },
      "184": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 538,
          column: 9
        }
      },
      "185": {
        start: {
          line: 525,
          column: 29
        },
        end: {
          line: 525,
          column: 116
        }
      },
      "186": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 530,
          column: 14
        }
      },
      "187": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 537,
          column: 14
        }
      },
      "188": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 557,
          column: 9
        }
      },
      "189": {
        start: {
          line: 544,
          column: 35
        },
        end: {
          line: 544,
          column: 128
        }
      },
      "190": {
        start: {
          line: 545,
          column: 27
        },
        end: {
          line: 545,
          column: 59
        }
      },
      "191": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 550,
          column: 14
        }
      },
      "192": {
        start: {
          line: 549,
          column: 80
        },
        end: {
          line: 549,
          column: 86
        }
      },
      "193": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 556,
          column: 14
        }
      },
      "194": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 560,
          column: 65
        }
      },
      "195": {
        start: {
          line: 562,
          column: 30
        },
        end: {
          line: 562,
          column: 119
        }
      },
      "196": {
        start: {
          line: 562,
          column: 82
        },
        end: {
          line: 562,
          column: 118
        }
      },
      "197": {
        start: {
          line: 563,
          column: 8
        },
        end: {
          line: 563,
          column: 48
        }
      },
      "198": {
        start: {
          line: 564,
          column: 8
        },
        end: {
          line: 564,
          column: 40
        }
      },
      "199": {
        start: {
          line: 565,
          column: 29
        },
        end: {
          line: 565,
          column: 51
        }
      },
      "200": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 569,
          column: 11
        }
      },
      "201": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 132
        }
      },
      "202": {
        start: {
          line: 573,
          column: 25
        },
        end: {
          line: 573,
          column: 47
        }
      },
      "203": {
        start: {
          line: 574,
          column: 30
        },
        end: {
          line: 574,
          column: 43
        }
      },
      "204": {
        start: {
          line: 575,
          column: 30
        },
        end: {
          line: 575,
          column: 31
        }
      },
      "205": {
        start: {
          line: 576,
          column: 31
        },
        end: {
          line: 576,
          column: 32
        }
      },
      "206": {
        start: {
          line: 577,
          column: 32
        },
        end: {
          line: 577,
          column: 33
        }
      },
      "207": {
        start: {
          line: 578,
          column: 30
        },
        end: {
          line: 578,
          column: 31
        }
      },
      "208": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 594,
          column: 9
        }
      },
      "209": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 593,
          column: 13
        }
      },
      "210": {
        start: {
          line: 582,
          column: 20
        },
        end: {
          line: 582,
          column: 38
        }
      },
      "211": {
        start: {
          line: 583,
          column: 20
        },
        end: {
          line: 583,
          column: 26
        }
      },
      "212": {
        start: {
          line: 585,
          column: 20
        },
        end: {
          line: 585,
          column: 39
        }
      },
      "213": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 586,
          column: 26
        }
      },
      "214": {
        start: {
          line: 588,
          column: 20
        },
        end: {
          line: 588,
          column: 40
        }
      },
      "215": {
        start: {
          line: 589,
          column: 20
        },
        end: {
          line: 589,
          column: 26
        }
      },
      "216": {
        start: {
          line: 591,
          column: 20
        },
        end: {
          line: 591,
          column: 38
        }
      },
      "217": {
        start: {
          line: 592,
          column: 20
        },
        end: {
          line: 592,
          column: 26
        }
      },
      "218": {
        start: {
          line: 596,
          column: 28
        },
        end: {
          line: 596,
          column: 37
        }
      },
      "219": {
        start: {
          line: 598,
          column: 33
        },
        end: {
          line: 598,
          column: 93
        }
      },
      "220": {
        start: {
          line: 598,
          column: 75
        },
        end: {
          line: 598,
          column: 92
        }
      },
      "221": {
        start: {
          line: 599,
          column: 34
        },
        end: {
          line: 599,
          column: 114
        }
      },
      "222": {
        start: {
          line: 599,
          column: 63
        },
        end: {
          line: 599,
          column: 113
        }
      },
      "223": {
        start: {
          line: 600,
          column: 33
        },
        end: {
          line: 600,
          column: 86
        }
      },
      "224": {
        start: {
          line: 600,
          column: 62
        },
        end: {
          line: 600,
          column: 85
        }
      },
      "225": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 606,
          column: 9
        }
      },
      "226": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 602,
          column: 40
        }
      },
      "227": {
        start: {
          line: 604,
          column: 13
        },
        end: {
          line: 606,
          column: 9
        }
      },
      "228": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 605,
          column: 39
        }
      },
      "229": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 616,
          column: 10
        }
      },
      "230": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 46
        }
      },
      "231": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 623,
          column: 19
        }
      },
      "232": {
        start: {
          line: 623,
          column: 12
        },
        end: {
          line: 623,
          column: 19
        }
      },
      "233": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 624,
          column: 58
        }
      },
      "234": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 625,
          column: 31
        }
      },
      "235": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 629,
          column: 9
        }
      },
      "236": {
        start: {
          line: 628,
          column: 12
        },
        end: {
          line: 628,
          column: 36
        }
      },
      "237": {
        start: {
          line: 630,
          column: 8
        },
        end: {
          line: 630,
          column: 36
        }
      },
      "238": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 634,
          column: 9
        }
      },
      "239": {
        start: {
          line: 633,
          column: 12
        },
        end: {
          line: 633,
          column: 47
        }
      },
      "240": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 635,
          column: 53
        }
      },
      "241": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 636,
          column: 29
        }
      },
      "242": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 639,
          column: 55
        }
      },
      "243": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 640,
          column: 68
        }
      },
      "244": {
        start: {
          line: 643,
          column: 8
        },
        end: {
          line: 643,
          column: 45
        }
      },
      "245": {
        start: {
          line: 646,
          column: 23
        },
        end: {
          line: 646,
          column: 25
        }
      },
      "246": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 649,
          column: 9
        }
      },
      "247": {
        start: {
          line: 648,
          column: 12
        },
        end: {
          line: 648,
          column: 39
        }
      },
      "248": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 650,
          column: 22
        }
      },
      "249": {
        start: {
          line: 653,
          column: 8
        },
        end: {
          line: 653,
          column: 47
        }
      },
      "250": {
        start: {
          line: 656,
          column: 25
        },
        end: {
          line: 656,
          column: 65
        }
      },
      "251": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 659,
          column: 9
        }
      },
      "252": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 658,
          column: 83
        }
      },
      "253": {
        start: {
          line: 660,
          column: 8
        },
        end: {
          line: 660,
          column: 32
        }
      },
      "254": {
        start: {
          line: 663,
          column: 0
        },
        end: {
          line: 663,
          column: 48
        }
      },
      "255": {
        start: {
          line: 664,
          column: 0
        },
        end: {
          line: 664,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 35
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 108
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 46
          },
          end: {
            line: 110,
            column: 47
          }
        },
        loc: {
          start: {
            line: 110,
            column: 59
          },
          end: {
            line: 118,
            column: 9
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 45
          },
          end: {
            line: 120,
            column: 46
          }
        },
        loc: {
          start: {
            line: 120,
            column: 58
          },
          end: {
            line: 128,
            column: 9
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 130,
            column: 52
          },
          end: {
            line: 130,
            column: 53
          }
        },
        loc: {
          start: {
            line: 130,
            column: 65
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 130
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 32
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 140
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 60
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 150
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 18
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 185
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 219,
            column: 46
          },
          end: {
            line: 219,
            column: 47
          }
        },
        loc: {
          start: {
            line: 219,
            column: 52
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 219
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 40
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 226
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 227,
            column: 37
          },
          end: {
            line: 227,
            column: 38
          }
        },
        loc: {
          start: {
            line: 227,
            column: 49
          },
          end: {
            line: 229,
            column: 9
          }
        },
        line: 227
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 42
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 232
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 243,
            column: 64
          },
          end: {
            line: 243,
            column: 65
          }
        },
        loc: {
          start: {
            line: 243,
            column: 71
          },
          end: {
            line: 243,
            column: 82
          }
        },
        line: 243
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 252,
            column: 91
          },
          end: {
            line: 252,
            column: 92
          }
        },
        loc: {
          start: {
            line: 252,
            column: 97
          },
          end: {
            line: 252,
            column: 134
          }
        },
        line: 252
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 41
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 310
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 43
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 320
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 26
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 349
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 23
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 369
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 24
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 390
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 403,
            column: 39
          },
          end: {
            line: 403,
            column: 40
          }
        },
        loc: {
          start: {
            line: 403,
            column: 46
          },
          end: {
            line: 403,
            column: 52
          }
        },
        line: 403
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 415,
            column: 4
          },
          end: {
            line: 415,
            column: 5
          }
        },
        loc: {
          start: {
            line: 415,
            column: 26
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 415
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 25
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 437
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 27
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 460
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 29
          },
          end: {
            line: 503,
            column: 5
          }
        },
        line: 469
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 504,
            column: 5
          }
        },
        loc: {
          start: {
            line: 504,
            column: 28
          },
          end: {
            line: 521,
            column: 5
          }
        },
        line: 504
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 25
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 522
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 27
          },
          end: {
            line: 558,
            column: 5
          }
        },
        line: 540
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 549,
            column: 73
          },
          end: {
            line: 549,
            column: 74
          }
        },
        loc: {
          start: {
            line: 549,
            column: 80
          },
          end: {
            line: 549,
            column: 86
          }
        },
        line: 549
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 5
          }
        },
        loc: {
          start: {
            line: 559,
            column: 35
          },
          end: {
            line: 571,
            column: 5
          }
        },
        line: 559
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 562,
            column: 67
          },
          end: {
            line: 562,
            column: 68
          }
        },
        loc: {
          start: {
            line: 562,
            column: 82
          },
          end: {
            line: 562,
            column: 118
          }
        },
        line: 562
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 572,
            column: 5
          }
        },
        loc: {
          start: {
            line: 572,
            column: 22
          },
          end: {
            line: 617,
            column: 5
          }
        },
        line: 572
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 598,
            column: 70
          },
          end: {
            line: 598,
            column: 71
          }
        },
        loc: {
          start: {
            line: 598,
            column: 75
          },
          end: {
            line: 598,
            column: 92
          }
        },
        line: 598
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 599,
            column: 58
          },
          end: {
            line: 599,
            column: 59
          }
        },
        loc: {
          start: {
            line: 599,
            column: 63
          },
          end: {
            line: 599,
            column: 113
          }
        },
        line: 599
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 600,
            column: 57
          },
          end: {
            line: 600,
            column: 58
          }
        },
        loc: {
          start: {
            line: 600,
            column: 62
          },
          end: {
            line: 600,
            column: 85
          }
        },
        line: 600
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 618,
            column: 5
          }
        },
        loc: {
          start: {
            line: 618,
            column: 34
          },
          end: {
            line: 620,
            column: 5
          }
        },
        line: 618
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 621,
            column: 4
          },
          end: {
            line: 621,
            column: 5
          }
        },
        loc: {
          start: {
            line: 621,
            column: 17
          },
          end: {
            line: 637,
            column: 5
          }
        },
        line: 621
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 638,
            column: 4
          },
          end: {
            line: 638,
            column: 5
          }
        },
        loc: {
          start: {
            line: 638,
            column: 28
          },
          end: {
            line: 641,
            column: 5
          }
        },
        line: 638
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 642,
            column: 4
          },
          end: {
            line: 642,
            column: 5
          }
        },
        loc: {
          start: {
            line: 642,
            column: 30
          },
          end: {
            line: 644,
            column: 5
          }
        },
        line: 642
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 645,
            column: 4
          },
          end: {
            line: 645,
            column: 5
          }
        },
        loc: {
          start: {
            line: 645,
            column: 24
          },
          end: {
            line: 651,
            column: 5
          }
        },
        line: 645
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 652,
            column: 4
          },
          end: {
            line: 652,
            column: 5
          }
        },
        loc: {
          start: {
            line: 652,
            column: 30
          },
          end: {
            line: 654,
            column: 5
          }
        },
        line: 652
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 655,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        },
        loc: {
          start: {
            line: 655,
            column: 45
          },
          end: {
            line: 661,
            column: 5
          }
        },
        line: 655
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 27
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 153,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 153,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "5": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "6": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: 161,
            column: 17
          },
          end: {
            line: 165,
            column: 13
          }
        }],
        line: 158
      },
      "7": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "8": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "9": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 235,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 235,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "10": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        }, {
          start: {
            line: 249,
            column: 17
          },
          end: {
            line: 271,
            column: 13
          }
        }],
        line: 244
      },
      "11": {
        loc: {
          start: {
            line: 254,
            column: 30
          },
          end: {
            line: 254,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 30
          },
          end: {
            line: 254,
            column: 50
          }
        }, {
          start: {
            line: 254,
            column: 54
          },
          end: {
            line: 254,
            column: 56
          }
        }],
        line: 254
      },
      "12": {
        loc: {
          start: {
            line: 260,
            column: 20
          },
          end: {
            line: 269,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 20
          },
          end: {
            line: 269,
            column: 21
          }
        }, {
          start: {
            line: 267,
            column: 25
          },
          end: {
            line: 269,
            column: 21
          }
        }],
        line: 260
      },
      "13": {
        loc: {
          start: {
            line: 264,
            column: 34
          },
          end: {
            line: 264,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 34
          },
          end: {
            line: 264,
            column: 56
          }
        }, {
          start: {
            line: 264,
            column: 60
          },
          end: {
            line: 264,
            column: 62
          }
        }],
        line: 264
      },
      "14": {
        loc: {
          start: {
            line: 275,
            column: 22
          },
          end: {
            line: 275,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 275,
            column: 47
          },
          end: {
            line: 275,
            column: 60
          }
        }, {
          start: {
            line: 275,
            column: 63
          },
          end: {
            line: 275,
            column: 84
          }
        }],
        line: 275
      },
      "15": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "16": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "17": {
        loc: {
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 300,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 300,
            column: 39
          }
        }, {
          start: {
            line: 300,
            column: 43
          },
          end: {
            line: 300,
            column: 68
          }
        }],
        line: 300
      },
      "18": {
        loc: {
          start: {
            line: 311,
            column: 29
          },
          end: {
            line: 311,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 29
          },
          end: {
            line: 311,
            column: 66
          }
        }, {
          start: {
            line: 311,
            column: 70
          },
          end: {
            line: 311,
            column: 72
          }
        }],
        line: 311
      },
      "19": {
        loc: {
          start: {
            line: 315,
            column: 28
          },
          end: {
            line: 315,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 41
          },
          end: {
            line: 315,
            column: 92
          }
        }, {
          start: {
            line: 315,
            column: 95
          },
          end: {
            line: 315,
            column: 100
          }
        }],
        line: 315
      },
      "20": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 323,
            column: 44
          }
        }, {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 325,
            column: 41
          }
        }, {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 327,
            column: 42
          }
        }, {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 329,
            column: 44
          }
        }, {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 331,
            column: 43
          }
        }, {
          start: {
            line: 332,
            column: 12
          },
          end: {
            line: 333,
            column: 45
          }
        }, {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 335,
            column: 47
          }
        }, {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 337,
            column: 46
          }
        }, {
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 339,
            column: 43
          }
        }, {
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 341,
            column: 45
          }
        }, {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 346,
            column: 18
          }
        }],
        line: 321
      },
      "21": {
        loc: {
          start: {
            line: 357,
            column: 24
          },
          end: {
            line: 357,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 45
          },
          end: {
            line: 357,
            column: 54
          }
        }, {
          start: {
            line: 357,
            column: 57
          },
          end: {
            line: 357,
            column: 68
          }
        }],
        line: 357
      },
      "22": {
        loc: {
          start: {
            line: 365,
            column: 51
          },
          end: {
            line: 365,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 365,
            column: 76
          },
          end: {
            line: 365,
            column: 89
          }
        }, {
          start: {
            line: 365,
            column: 92
          },
          end: {
            line: 365,
            column: 107
          }
        }],
        line: 365
      },
      "23": {
        loc: {
          start: {
            line: 370,
            column: 25
          },
          end: {
            line: 370,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 25
          },
          end: {
            line: 370,
            column: 46
          }
        }, {
          start: {
            line: 370,
            column: 50
          },
          end: {
            line: 370,
            column: 70
          }
        }],
        line: 370
      },
      "24": {
        loc: {
          start: {
            line: 377,
            column: 24
          },
          end: {
            line: 377,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 377,
            column: 44
          },
          end: {
            line: 377,
            column: 53
          }
        }, {
          start: {
            line: 377,
            column: 56
          },
          end: {
            line: 377,
            column: 67
          }
        }],
        line: 377
      },
      "25": {
        loc: {
          start: {
            line: 385,
            column: 48
          },
          end: {
            line: 385,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 385,
            column: 73
          },
          end: {
            line: 385,
            column: 86
          }
        }, {
          start: {
            line: 385,
            column: 89
          },
          end: {
            line: 385,
            column: 104
          }
        }],
        line: 385
      },
      "26": {
        loc: {
          start: {
            line: 391,
            column: 26
          },
          end: {
            line: 391,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 26
          },
          end: {
            line: 391,
            column: 53
          }
        }, {
          start: {
            line: 391,
            column: 57
          },
          end: {
            line: 391,
            column: 78
          }
        }],
        line: 391
      },
      "27": {
        loc: {
          start: {
            line: 395,
            column: 27
          },
          end: {
            line: 395,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 27
          },
          end: {
            line: 395,
            column: 53
          }
        }, {
          start: {
            line: 395,
            column: 57
          },
          end: {
            line: 395,
            column: 59
          }
        }],
        line: 395
      },
      "28": {
        loc: {
          start: {
            line: 397,
            column: 24
          },
          end: {
            line: 397,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 44
          },
          end: {
            line: 397,
            column: 53
          }
        }, {
          start: {
            line: 397,
            column: 56
          },
          end: {
            line: 397,
            column: 66
          }
        }],
        line: 397
      },
      "29": {
        loc: {
          start: {
            line: 398,
            column: 25
          },
          end: {
            line: 398,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 398,
            column: 45
          },
          end: {
            line: 398,
            column: 77
          }
        }, {
          start: {
            line: 398,
            column: 80
          },
          end: {
            line: 398,
            column: 114
          }
        }],
        line: 398
      },
      "30": {
        loc: {
          start: {
            line: 410,
            column: 49
          },
          end: {
            line: 410,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 74
          },
          end: {
            line: 410,
            column: 87
          }
        }, {
          start: {
            line: 410,
            column: 90
          },
          end: {
            line: 410,
            column: 105
          }
        }],
        line: 410
      },
      "31": {
        loc: {
          start: {
            line: 416,
            column: 28
          },
          end: {
            line: 416,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 416,
            column: 28
          },
          end: {
            line: 416,
            column: 52
          }
        }, {
          start: {
            line: 416,
            column: 56
          },
          end: {
            line: 416,
            column: 79
          }
        }],
        line: 416
      },
      "32": {
        loc: {
          start: {
            line: 420,
            column: 24
          },
          end: {
            line: 420,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 50
          },
          end: {
            line: 420,
            column: 59
          }
        }, {
          start: {
            line: 420,
            column: 62
          },
          end: {
            line: 420,
            column: 72
          }
        }],
        line: 420
      },
      "33": {
        loc: {
          start: {
            line: 432,
            column: 51
          },
          end: {
            line: 432,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 432,
            column: 76
          },
          end: {
            line: 432,
            column: 89
          }
        }, {
          start: {
            line: 432,
            column: 92
          },
          end: {
            line: 432,
            column: 107
          }
        }],
        line: 432
      },
      "34": {
        loc: {
          start: {
            line: 438,
            column: 27
          },
          end: {
            line: 438,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 27
          },
          end: {
            line: 438,
            column: 50
          }
        }, {
          start: {
            line: 438,
            column: 54
          },
          end: {
            line: 438,
            column: 77
          }
        }],
        line: 438
      },
      "35": {
        loc: {
          start: {
            line: 442,
            column: 24
          },
          end: {
            line: 442,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 442,
            column: 62
          },
          end: {
            line: 442,
            column: 71
          }
        }, {
          start: {
            line: 442,
            column: 74
          },
          end: {
            line: 442,
            column: 84
          }
        }],
        line: 442
      },
      "36": {
        loc: {
          start: {
            line: 455,
            column: 50
          },
          end: {
            line: 455,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 75
          },
          end: {
            line: 455,
            column: 88
          }
        }, {
          start: {
            line: 455,
            column: 91
          },
          end: {
            line: 455,
            column: 106
          }
        }],
        line: 455
      },
      "37": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "38": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "39": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "40": {
        loc: {
          start: {
            line: 484,
            column: 16
          },
          end: {
            line: 484,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 16
          },
          end: {
            line: 484,
            column: 42
          }
        }, {
          start: {
            line: 484,
            column: 46
          },
          end: {
            line: 484,
            column: 72
          }
        }],
        line: 484
      },
      "41": {
        loc: {
          start: {
            line: 500,
            column: 55
          },
          end: {
            line: 500,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 500,
            column: 80
          },
          end: {
            line: 500,
            column: 93
          }
        }, {
          start: {
            line: 500,
            column: 96
          },
          end: {
            line: 500,
            column: 111
          }
        }],
        line: 500
      },
      "42": {
        loc: {
          start: {
            line: 505,
            column: 30
          },
          end: {
            line: 505,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 505,
            column: 30
          },
          end: {
            line: 505,
            column: 56
          }
        }, {
          start: {
            line: 505,
            column: 60
          },
          end: {
            line: 505,
            column: 83
          }
        }],
        line: 505
      },
      "43": {
        loc: {
          start: {
            line: 509,
            column: 24
          },
          end: {
            line: 509,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 509,
            column: 50
          },
          end: {
            line: 509,
            column: 59
          }
        }, {
          start: {
            line: 509,
            column: 62
          },
          end: {
            line: 509,
            column: 72
          }
        }],
        line: 509
      },
      "44": {
        loc: {
          start: {
            line: 517,
            column: 53
          },
          end: {
            line: 517,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 517,
            column: 78
          },
          end: {
            line: 517,
            column: 91
          }
        }, {
          start: {
            line: 517,
            column: 94
          },
          end: {
            line: 517,
            column: 115
          }
        }],
        line: 517
      },
      "45": {
        loc: {
          start: {
            line: 523,
            column: 27
          },
          end: {
            line: 523,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 523,
            column: 27
          },
          end: {
            line: 523,
            column: 50
          }
        }, {
          start: {
            line: 523,
            column: 54
          },
          end: {
            line: 523,
            column: 77
          }
        }],
        line: 523
      },
      "46": {
        loc: {
          start: {
            line: 527,
            column: 24
          },
          end: {
            line: 527,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 527,
            column: 50
          },
          end: {
            line: 527,
            column: 59
          }
        }, {
          start: {
            line: 527,
            column: 62
          },
          end: {
            line: 527,
            column: 72
          }
        }],
        line: 527
      },
      "47": {
        loc: {
          start: {
            line: 535,
            column: 50
          },
          end: {
            line: 535,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 535,
            column: 75
          },
          end: {
            line: 535,
            column: 88
          }
        }, {
          start: {
            line: 535,
            column: 91
          },
          end: {
            line: 535,
            column: 112
          }
        }],
        line: 535
      },
      "48": {
        loc: {
          start: {
            line: 544,
            column: 64
          },
          end: {
            line: 544,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 544,
            column: 64
          },
          end: {
            line: 544,
            column: 91
          }
        }, {
          start: {
            line: 544,
            column: 95
          },
          end: {
            line: 544,
            column: 116
          }
        }],
        line: 544
      },
      "49": {
        loc: {
          start: {
            line: 545,
            column: 27
          },
          end: {
            line: 545,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 27
          },
          end: {
            line: 545,
            column: 53
          }
        }, {
          start: {
            line: 545,
            column: 57
          },
          end: {
            line: 545,
            column: 59
          }
        }],
        line: 545
      },
      "50": {
        loc: {
          start: {
            line: 547,
            column: 24
          },
          end: {
            line: 547,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 547,
            column: 44
          },
          end: {
            line: 547,
            column: 53
          }
        }, {
          start: {
            line: 547,
            column: 56
          },
          end: {
            line: 547,
            column: 66
          }
        }],
        line: 547
      },
      "51": {
        loc: {
          start: {
            line: 548,
            column: 25
          },
          end: {
            line: 548,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 548,
            column: 45
          },
          end: {
            line: 548,
            column: 78
          }
        }, {
          start: {
            line: 548,
            column: 81
          },
          end: {
            line: 548,
            column: 98
          }
        }],
        line: 548
      },
      "52": {
        loc: {
          start: {
            line: 555,
            column: 53
          },
          end: {
            line: 555,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 555,
            column: 78
          },
          end: {
            line: 555,
            column: 91
          }
        }, {
          start: {
            line: 555,
            column: 94
          },
          end: {
            line: 555,
            column: 109
          }
        }],
        line: 555
      },
      "53": {
        loc: {
          start: {
            line: 580,
            column: 12
          },
          end: {
            line: 593,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 581,
            column: 16
          },
          end: {
            line: 583,
            column: 26
          }
        }, {
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 586,
            column: 26
          }
        }, {
          start: {
            line: 587,
            column: 16
          },
          end: {
            line: 589,
            column: 26
          }
        }, {
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 592,
            column: 26
          }
        }],
        line: 580
      },
      "54": {
        loc: {
          start: {
            line: 599,
            column: 63
          },
          end: {
            line: 599,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 599,
            column: 63
          },
          end: {
            line: 599,
            column: 87
          }
        }, {
          start: {
            line: 599,
            column: 91
          },
          end: {
            line: 599,
            column: 113
          }
        }],
        line: 599
      },
      "55": {
        loc: {
          start: {
            line: 601,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 601,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        }, {
          start: {
            line: 604,
            column: 13
          },
          end: {
            line: 606,
            column: 9
          }
        }],
        line: 601
      },
      "56": {
        loc: {
          start: {
            line: 604,
            column: 13
          },
          end: {
            line: 606,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 604,
            column: 13
          },
          end: {
            line: 606,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 604
      },
      "57": {
        loc: {
          start: {
            line: 604,
            column: 17
          },
          end: {
            line: 604,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 604,
            column: 17
          },
          end: {
            line: 604,
            column: 44
          }
        }, {
          start: {
            line: 604,
            column: 48
          },
          end: {
            line: 604,
            column: 69
          }
        }],
        line: 604
      },
      "58": {
        loc: {
          start: {
            line: 622,
            column: 8
          },
          end: {
            line: 623,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 622,
            column: 8
          },
          end: {
            line: 623,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 622
      },
      "59": {
        loc: {
          start: {
            line: 632,
            column: 8
          },
          end: {
            line: 634,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 632,
            column: 8
          },
          end: {
            line: 634,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 632
      },
      "60": {
        loc: {
          start: {
            line: 657,
            column: 8
          },
          end: {
            line: 659,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 657,
            column: 8
          },
          end: {
            line: 659,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 657
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0, 0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/health/HealthOrchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/health/HealthOrchestrator.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { createClient } from 'redis';\nimport axios from 'axios';\nimport { db } from '../../database/connection';\nimport { llmService } from '../llmService';\nimport { ModelHealthMonitor } from '../models/ModelHealthMonitor';\n\ninterface ServiceHealth {\n  name: string;\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  lastCheck: Date;\n  responseTime: number;\n  message?: string;\n  details?: any;\n  dependencies?: string[];\n  criticalService: boolean;\n}\n\ninterface SystemHealth {\n  overallStatus: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  services: Map<string, ServiceHealth>;\n  lastFullCheck: Date;\n  totalServices: number;\n  healthyServices: number;\n  degradedServices: number;\n  unhealthyServices: number;\n  offlineServices: number;\n}\n\ninterface HealthCheckConfig {\n  checkInterval: number;\n  timeout: number;\n  retries: number;\n  retryDelay: number;\n  criticalServices: string[];\n  dependencies: Record<string, string[]>;\n}\n\nexport class HealthOrchestrator extends EventEmitter {\n  private services: Map<string, ServiceHealth> = new Map();\n  private checkIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private config: HealthCheckConfig;\n  private isRunning = false;\n  private modelMonitor?: ModelHealthMonitor;\n  private lastFullCheck = new Date(0);\n  private fallbackMechanisms: Map<string, () => Promise<any>> = new Map();\n  private circuitBreakers: Map<string, { isOpen: boolean; failures: number; lastFailure: Date }> = new Map();\n\n  constructor(config: Partial<HealthCheckConfig> = {}) {\n    super();\n    \n    this.config = {\n      checkInterval: 30000, // 30 seconds\n      timeout: 5000, // 5 seconds\n      retries: 3,\n      retryDelay: 1000, // 1 second\n      criticalServices: ['database', 'ollama', 'frontend', 'backend'],\n      dependencies: {\n        'backend': ['database', 'ollama', 'redis'],\n        'frontend': ['backend'],\n        'model-health': ['ollama'],\n        'websocket': ['backend', 'redis'],\n        'prometheus': ['backend'],\n        'grafana': ['prometheus']\n      },\n      ...config\n    };\n\n    this.initializeServices();\n    this.initializeFallbackMechanisms();\n    this.initializeCircuitBreakers();\n  }\n\n  private initializeServices() {\n    // Define all services to monitor\n    const servicesConfig = [\n      {\n        name: 'database',\n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'redis', \n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'ollama',\n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'frontend',\n        criticalService: true,\n        dependencies: ['backend']\n      },\n      {\n        name: 'backend',\n        criticalService: true,\n        dependencies: ['database', 'ollama', 'redis']\n      },\n      {\n        name: 'websocket',\n        criticalService: false,\n        dependencies: ['backend', 'redis']\n      },\n      {\n        name: 'model-health',\n        criticalService: false,\n        dependencies: ['ollama']\n      },\n      {\n        name: 'prometheus',\n        criticalService: false,\n        dependencies: ['backend']\n      },\n      {\n        name: 'grafana',\n        criticalService: false,\n        dependencies: ['prometheus']\n      },\n      {\n        name: 'model-init',\n        criticalService: false,\n        dependencies: ['ollama']\n      }\n    ];\n\n    // Initialize service health status\n    for (const serviceConfig of servicesConfig) {\n      const service: ServiceHealth = {\n        name: serviceConfig.name,\n        status: 'offline',\n        lastCheck: new Date(0),\n        responseTime: 0,\n        dependencies: serviceConfig.dependencies,\n        criticalService: serviceConfig.criticalService\n      };\n      \n      this.services.set(serviceConfig.name, service);\n    }\n  }\n\n  private initializeFallbackMechanisms(): void {\n    // Fallback for LLM/Ollama service - use mock responses\n    this.fallbackMechanisms.set('ollama', async () => ({\n      status: 'degraded',\n      message: 'Using fallback mode - Ollama unavailable',\n      details: {\n        fallbackMode: true,\n        capabilities: ['text-completion-mock', 'chat-mock'],\n        note: 'AI features will use mock responses'\n      }\n    }));\n\n    // Fallback for Redis - use in-memory cache\n    this.fallbackMechanisms.set('redis', async () => ({\n      status: 'degraded', \n      message: 'Using in-memory cache - Redis unavailable',\n      details: {\n        fallbackMode: true,\n        cacheType: 'memory',\n        note: 'Session data will not persist across restarts'\n      }\n    }));\n\n    // Fallback for model health - disable AI features gracefully\n    this.fallbackMechanisms.set('model-health', async () => ({\n      status: 'degraded',\n      message: 'AI features disabled - Model health monitoring unavailable',\n      details: {\n        fallbackMode: true,\n        aiFeatures: 'disabled',\n        note: 'Manual testing mode available'\n      }\n    }));\n  }\n\n  private initializeCircuitBreakers(): void {\n    const serviceNames = Array.from(this.services.keys());\n    for (const serviceName of serviceNames) {\n      this.circuitBreakers.set(serviceName, {\n        isOpen: false,\n        failures: 0,\n        lastFailure: new Date(0)\n      });\n    }\n  }\n\n  private async executeWithCircuitBreaker<T>(\n    serviceName: string, \n    operation: () => Promise<T>\n  ): Promise<T> {\n    const breaker = this.circuitBreakers.get(serviceName);\n    if (!breaker) throw new Error(`No circuit breaker for service: ${serviceName}`);\n\n    // Check if circuit breaker is open\n    if (breaker.isOpen) {\n      const timeSinceLastFailure = Date.now() - breaker.lastFailure.getTime();\n      const resetTimeout = 60000; // 1 minute\n\n      if (timeSinceLastFailure < resetTimeout) {\n        throw new Error(`Circuit breaker open for ${serviceName}`);\n      } else {\n        // Try to reset circuit breaker\n        breaker.isOpen = false;\n        breaker.failures = 0;\n      }\n    }\n\n    try {\n      const result = await operation();\n      // Success - reset failure count\n      breaker.failures = 0;\n      return result;\n    } catch (error) {\n      // Failure - increment counter\n      breaker.failures++;\n      breaker.lastFailure = new Date();\n\n      // Open circuit breaker after 3 failures\n      if (breaker.failures >= 3) {\n        breaker.isOpen = true;\n        console.warn(`\uD83D\uDD13 Circuit breaker opened for ${serviceName} after 3 failures`);\n      }\n\n      throw error;\n    }\n  }\n\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.log('\uD83C\uDFE5 Health Orchestrator already running');\n      return;\n    }\n\n    console.log('\uD83C\uDFE5 Starting Health Orchestrator...');\n    this.isRunning = true;\n\n    // Initialize model monitor\n    try {\n      this.modelMonitor = new ModelHealthMonitor({\n        healthCheckInterval: 60000, // 1 minute\n        benchmarkInterval: 300000, // 5 minutes\n        maxResponseTime: 30000, // 30 seconds\n        maxErrorRate: 10, // 10%\n        minHealthScore: 70,\n        alertThresholds: {\n          responseTime: 15000, // 15 seconds\n          errorRate: 10, // 10%\n          memoryUsage: 85 // 85% memory usage threshold\n        }\n      });\n      \n      await this.modelMonitor.initialize();\n      console.log('\uD83E\uDD16 Model Health Monitor initialized');\n    } catch (error) {\n      console.error('\u274C Failed to initialize Model Health Monitor:', error);\n    }\n\n    // Start monitoring all services\n    for (const serviceName of this.services.keys()) {\n      this.startServiceMonitoring(serviceName);\n    }\n\n    // Perform initial full health check\n    await this.performFullHealthCheck();\n\n    // Start periodic full system health checks\n    const fullCheckInterval = setInterval(() => {\n      this.performFullHealthCheck();\n    }, this.config.checkInterval * 2); // Less frequent full checks\n\n    this.checkIntervals.set('__full_check__', fullCheckInterval);\n\n    console.log('\u2705 Health Orchestrator started successfully');\n    this.emit('started', { servicesCount: this.services.size });\n  }\n\n  private startServiceMonitoring(serviceName: string): void {\n    const interval = setInterval(async () => {\n      await this.checkServiceHealth(serviceName);\n    }, this.config.checkInterval);\n\n    this.checkIntervals.set(serviceName, interval);\n  }\n\n  private async checkServiceHealth(serviceName: string): Promise<void> {\n    const service = this.services.get(serviceName);\n    if (!service) return;\n\n    const startTime = Date.now();\n    let newStatus: ServiceHealth['status'] = 'offline';\n    let message = '';\n    let details: any = {};\n\n    try {\n      // Check dependencies first\n      const dependencyResults = await this.checkDependencies(serviceName);\n      const dependenciesHealthy = dependencyResults.every(dep => dep.healthy);\n\n      if (!dependenciesHealthy) {\n        newStatus = 'degraded';\n        message = 'Dependencies unhealthy';\n        details.dependencyStatus = dependencyResults;\n      } else {\n        // Perform service-specific health check with circuit breaker and fallback\n        try {\n          const healthResult = await this.executeWithCircuitBreaker(serviceName, () => \n            this.performServiceCheck(serviceName)\n          );\n          newStatus = healthResult.status;\n          message = healthResult.message || '';\n          details = { ...details, ...healthResult.details };\n        } catch (circuitBreakerError) {\n          // Try fallback mechanism\n          const fallback = this.fallbackMechanisms.get(serviceName);\n          if (fallback) {\n            console.log(`\uD83D\uDD04 Using fallback for ${serviceName}:`, circuitBreakerError);\n            const fallbackResult = await fallback();\n            newStatus = fallbackResult.status;\n            message = fallbackResult.message || '';\n            details = { ...details, ...fallbackResult.details, circuitBreakerError: circuitBreakerError.message };\n          } else {\n            throw circuitBreakerError;\n          }\n        }\n      }\n    } catch (error) {\n      newStatus = 'unhealthy';\n      message = error instanceof Error ? error.message : 'Health check failed';\n      details.error = message;\n    }\n\n    const responseTime = Date.now() - startTime;\n    \n    // Update service status\n    const updatedService: ServiceHealth = {\n      ...service,\n      status: newStatus,\n      lastCheck: new Date(),\n      responseTime,\n      message,\n      details\n    };\n\n    const previousStatus = service.status;\n    this.services.set(serviceName, updatedService);\n\n    // Emit events for status changes\n    if (previousStatus !== newStatus) {\n      this.emit('serviceStatusChanged', {\n        serviceName,\n        previousStatus,\n        newStatus,\n        responseTime,\n        message\n      });\n\n      // Emit critical alerts\n      if (service.criticalService && newStatus === 'unhealthy') {\n        this.emit('criticalServiceDown', {\n          serviceName,\n          message,\n          details,\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  private async checkDependencies(serviceName: string): Promise<Array<{ name: string; healthy: boolean }>> {\n    const dependencies = this.config.dependencies[serviceName] || [];\n    const results = [];\n\n    for (const depName of dependencies) {\n      const depService = this.services.get(depName);\n      const healthy = depService ? ['healthy', 'degraded'].includes(depService.status) : false;\n      results.push({ name: depName, healthy });\n    }\n\n    return results;\n  }\n\n  private async performServiceCheck(serviceName: string): Promise<{\n    status: ServiceHealth['status'];\n    message?: string;\n    details?: any;\n  }> {\n    switch (serviceName) {\n      case 'database':\n        return this.checkDatabase();\n      case 'redis':\n        return this.checkRedis();\n      case 'ollama':\n        return this.checkOllama();\n      case 'frontend':\n        return this.checkFrontend();\n      case 'backend':\n        return this.checkBackend();\n      case 'websocket':\n        return this.checkWebSocket();\n      case 'model-health':\n        return this.checkModelHealth();\n      case 'prometheus':\n        return this.checkPrometheus();\n      case 'grafana':\n        return this.checkGrafana();\n      case 'model-init':\n        return this.checkModelInit();\n      default:\n        return {\n          status: 'unhealthy',\n          message: `Unknown service: ${serviceName}`\n        };\n    }\n  }\n\n  private async checkDatabase(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    try {\n      const result = db.prepare('SELECT 1 as test').get() as { test: number };\n      const stats = {\n        promptCards: db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number },\n        testCases: db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number }\n      };\n\n      return {\n        status: result?.test === 1 ? 'healthy' : 'unhealthy',\n        message: 'Database connection successful',\n        details: { stats, path: process.env.DATABASE_PATH }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Database check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async checkRedis(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const redisUrl = process.env.REDIS_URL || 'redis://redis:6379';\n    \n    try {\n      const client = createClient({ url: redisUrl });\n      await client.connect();\n      const result = await client.ping();\n      await client.disconnect();\n\n      return {\n        status: result === 'PONG' ? 'healthy' : 'unhealthy',\n        message: 'Redis connection successful',\n        details: { url: redisUrl, ping: result }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Redis check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: redisUrl }\n      };\n    }\n  }\n\n  private async checkOllama(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n    \n    try {\n      const response = await axios.get(`${ollamaUrl}/api/version`, { timeout: this.config.timeout });\n      const modelsResponse = await axios.get(`${ollamaUrl}/api/tags`, { timeout: this.config.timeout });\n      const models = modelsResponse.data.models || [];\n\n      return {\n        status: models.length > 0 ? 'healthy' : 'degraded',\n        message: models.length > 0 ? 'Ollama operational with models' : 'Ollama operational but no models',\n        details: {\n          url: ollamaUrl,\n          version: response.data.version,\n          modelCount: models.length,\n          models: models.map((m: any) => m.name)\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Ollama check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: ollamaUrl }\n      };\n    }\n  }\n\n  private async checkFrontend(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';\n    \n    try {\n      const response = await axios.get(`${frontendUrl}/api/health`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Frontend health check successful',\n        details: {\n          url: frontendUrl,\n          statusCode: response.status,\n          frontendStatus: response.data?.status\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Frontend check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: frontendUrl }\n      };\n    }\n  }\n\n  private async checkBackend(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const backendUrl = process.env.BACKEND_URL || 'http://localhost:3001';\n    \n    try {\n      const response = await axios.get(`${backendUrl}/api/health/v2`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.data?.status === 'healthy' ? 'healthy' : 'degraded',\n        message: 'Backend health check successful',\n        details: {\n          url: backendUrl,\n          statusCode: response.status,\n          backendStatus: response.data?.status,\n          services: response.data?.services\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Backend check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: backendUrl }\n      };\n    }\n  }\n\n  private async checkWebSocket(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    // WebSocket health is checked via backend health endpoint\n    // This is a simplified check - in production you might want to test actual WebSocket connection\n    return {\n      status: 'healthy',\n      message: 'WebSocket service assumed healthy (checked via backend)',\n      details: { note: 'Indirect check via backend service' }\n    };\n  }\n\n  private async checkModelHealth(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    if (!this.modelMonitor) {\n      return {\n        status: 'offline',\n        message: 'Model health monitor not initialized'\n      };\n    }\n\n    try {\n      const monitorStatus = this.modelMonitor.getStatus();\n      const healthyModels = this.modelMonitor.getHealthyModels();\n      const unhealthyModels = this.modelMonitor.getUnhealthyModels();\n\n      let status: ServiceHealth['status'] = 'healthy';\n      if (unhealthyModels.length > healthyModels.length) {\n        status = 'degraded';\n      }\n      if (healthyModels.length === 0 && unhealthyModels.length > 0) {\n        status = 'unhealthy';\n      }\n\n      return {\n        status,\n        message: `${healthyModels.length} healthy models, ${unhealthyModels.length} unhealthy`,\n        details: {\n          ...monitorStatus,\n          healthyModels,\n          unhealthyModels\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Model health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async checkPrometheus(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const prometheusUrl = process.env.PROMETHEUS_URL || 'http://localhost:9090';\n    \n    try {\n      const response = await axios.get(`${prometheusUrl}/-/healthy`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Prometheus health check successful',\n        details: { url: prometheusUrl, statusCode: response.status }\n      };\n    } catch (error) {\n      return {\n        status: 'offline',\n        message: `Prometheus check failed: ${error instanceof Error ? error.message : 'Service not running'}`,\n        details: { url: prometheusUrl }\n      };\n    }\n  }\n\n  private async checkGrafana(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const grafanaUrl = process.env.GRAFANA_URL || 'http://localhost:3002';\n    \n    try {\n      const response = await axios.get(`${grafanaUrl}/api/health`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Grafana health check successful',\n        details: { url: grafanaUrl, statusCode: response.status }\n      };\n    } catch (error) {\n      return {\n        status: 'offline',\n        message: `Grafana check failed: ${error instanceof Error ? error.message : 'Service not running'}`,\n        details: { url: grafanaUrl }\n      };\n    }\n  }\n\n  private async checkModelInit(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    // Model init is a one-time service that downloads models\n    // Check if models exist to infer if init was successful\n    try {\n      const modelsResponse = await axios.get(`${process.env.OLLAMA_BASE_URL || 'http://ollama:11434'}/api/tags`);\n      const models = modelsResponse.data.models || [];\n      \n      return {\n        status: models.length > 0 ? 'healthy' : 'degraded',\n        message: models.length > 0 ? 'Models initialized successfully' : 'No models found',\n        details: { modelCount: models.length, models: models.map((m: any) => m.name) }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Model init check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async performFullHealthCheck(): Promise<void> {\n    console.log('\uD83D\uDD0D Performing full system health check...');\n    \n    // Check all services in parallel\n    const checkPromises = Array.from(this.services.keys()).map(serviceName => \n      this.checkServiceHealth(serviceName)\n    );\n    \n    await Promise.allSettled(checkPromises);\n    this.lastFullCheck = new Date();\n    \n    const systemHealth = this.getSystemHealth();\n    \n    this.emit('fullHealthCheckComplete', {\n      systemHealth,\n      timestamp: this.lastFullCheck\n    });\n    \n    console.log(`\u2705 Full health check complete: ${systemHealth.healthyServices}/${systemHealth.totalServices} services healthy`);\n  }\n\n  public getSystemHealth(): SystemHealth {\n    const services = new Map(this.services);\n    const totalServices = services.size;\n    let healthyServices = 0;\n    let degradedServices = 0;\n    let unhealthyServices = 0;\n    let offlineServices = 0;\n\n    for (const service of services.values()) {\n      switch (service.status) {\n        case 'healthy':\n          healthyServices++;\n          break;\n        case 'degraded':\n          degradedServices++;\n          break;\n        case 'unhealthy':\n          unhealthyServices++;\n          break;\n        case 'offline':\n          offlineServices++;\n          break;\n      }\n    }\n\n    // Determine overall status\n    let overallStatus: SystemHealth['overallStatus'] = 'healthy';\n    \n    // Check critical services\n    const criticalServices = Array.from(services.values()).filter(s => s.criticalService);\n    const criticalUnhealthy = criticalServices.filter(s => s.status === 'unhealthy' || s.status === 'offline');\n    const criticalDegraded = criticalServices.filter(s => s.status === 'degraded');\n    \n    if (criticalUnhealthy.length > 0) {\n      overallStatus = 'unhealthy';\n    } else if (criticalDegraded.length > 0 || unhealthyServices > 0) {\n      overallStatus = 'degraded';\n    }\n\n    return {\n      overallStatus,\n      services,\n      lastFullCheck: this.lastFullCheck,\n      totalServices,\n      healthyServices,\n      degradedServices,\n      unhealthyServices,\n      offlineServices\n    };\n  }\n\n  public getServiceHealth(serviceName: string): ServiceHealth | undefined {\n    return this.services.get(serviceName);\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) return;\n\n    console.log('\uD83D\uDD04 Stopping Health Orchestrator...');\n    this.isRunning = false;\n\n    // Clear all intervals\n    for (const interval of this.checkIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.checkIntervals.clear();\n\n    // Shutdown model monitor\n    if (this.modelMonitor) {\n      await this.modelMonitor.shutdown();\n    }\n\n    console.log('\u2705 Health Orchestrator stopped');\n    this.emit('stopped');\n  }\n\n  public updateConfig(newConfig: Partial<HealthCheckConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('\u2699\uFE0F Health Orchestrator configuration updated');\n  }\n\n  public getCircuitBreakerStatus(): Map<string, { isOpen: boolean; failures: number; lastFailure: Date }> {\n    return new Map(this.circuitBreakers);\n  }\n\n  public getFallbackStatus(): Record<string, boolean> {\n    const status: Record<string, boolean> = {};\n    for (const [serviceName] of this.fallbackMechanisms) {\n      status[serviceName] = true;\n    }\n    return status;\n  }\n\n  public getServiceDependencyMap(): Record<string, string[]> {\n    return { ...this.config.dependencies };\n  }\n\n  public async testFallbackMechanism(serviceName: string): Promise<any> {\n    const fallback = this.fallbackMechanisms.get(serviceName);\n    if (!fallback) {\n      throw new Error(`No fallback mechanism configured for ${serviceName}`);\n    }\n    return await fallback();\n  }\n}\n\nexport const healthOrchestrator = new HealthOrchestrator();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8aaa14a84c38e005c01183daca09dead0cf46112"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hx4gzairn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hx4gzairn();
var __importDefault =
/* istanbul ignore next */
(cov_1hx4gzairn().s[0]++,
/* istanbul ignore next */
(cov_1hx4gzairn().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1hx4gzairn().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1hx4gzairn().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1hx4gzairn().f[0]++;
  cov_1hx4gzairn().s[1]++;
  return /* istanbul ignore next */(cov_1hx4gzairn().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1hx4gzairn().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1hx4gzairn().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1hx4gzairn().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1hx4gzairn().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1hx4gzairn().s[3]++;
exports.healthOrchestrator = exports.HealthOrchestrator = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1hx4gzairn().s[4]++, require("events"));
const redis_1 =
/* istanbul ignore next */
(cov_1hx4gzairn().s[5]++, require("redis"));
const axios_1 =
/* istanbul ignore next */
(cov_1hx4gzairn().s[6]++, __importDefault(require("axios")));
const connection_1 =
/* istanbul ignore next */
(cov_1hx4gzairn().s[7]++, require("../../database/connection"));
const ModelHealthMonitor_1 =
/* istanbul ignore next */
(cov_1hx4gzairn().s[8]++, require("../models/ModelHealthMonitor"));
class HealthOrchestrator extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config =
  /* istanbul ignore next */
  (cov_1hx4gzairn().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[1]++;
    cov_1hx4gzairn().s[9]++;
    super();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[10]++;
    this.services = new Map();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[11]++;
    this.checkIntervals = new Map();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[12]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1hx4gzairn().s[13]++;
    this.lastFullCheck = new Date(0);
    /* istanbul ignore next */
    cov_1hx4gzairn().s[14]++;
    this.fallbackMechanisms = new Map();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[15]++;
    this.circuitBreakers = new Map();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[16]++;
    this.config = {
      checkInterval: 30000,
      // 30 seconds
      timeout: 5000,
      // 5 seconds
      retries: 3,
      retryDelay: 1000,
      // 1 second
      criticalServices: ['database', 'ollama', 'frontend', 'backend'],
      dependencies: {
        'backend': ['database', 'ollama', 'redis'],
        'frontend': ['backend'],
        'model-health': ['ollama'],
        'websocket': ['backend', 'redis'],
        'prometheus': ['backend'],
        'grafana': ['prometheus']
      },
      ...config
    };
    /* istanbul ignore next */
    cov_1hx4gzairn().s[17]++;
    this.initializeServices();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[18]++;
    this.initializeFallbackMechanisms();
    /* istanbul ignore next */
    cov_1hx4gzairn().s[19]++;
    this.initializeCircuitBreakers();
  }
  initializeServices() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[2]++;
    // Define all services to monitor
    const servicesConfig =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[20]++, [{
      name: 'database',
      criticalService: true,
      dependencies: []
    }, {
      name: 'redis',
      criticalService: true,
      dependencies: []
    }, {
      name: 'ollama',
      criticalService: true,
      dependencies: []
    }, {
      name: 'frontend',
      criticalService: true,
      dependencies: ['backend']
    }, {
      name: 'backend',
      criticalService: true,
      dependencies: ['database', 'ollama', 'redis']
    }, {
      name: 'websocket',
      criticalService: false,
      dependencies: ['backend', 'redis']
    }, {
      name: 'model-health',
      criticalService: false,
      dependencies: ['ollama']
    }, {
      name: 'prometheus',
      criticalService: false,
      dependencies: ['backend']
    }, {
      name: 'grafana',
      criticalService: false,
      dependencies: ['prometheus']
    }, {
      name: 'model-init',
      criticalService: false,
      dependencies: ['ollama']
    }]);
    // Initialize service health status
    /* istanbul ignore next */
    cov_1hx4gzairn().s[21]++;
    for (const serviceConfig of servicesConfig) {
      const service =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[22]++, {
        name: serviceConfig.name,
        status: 'offline',
        lastCheck: new Date(0),
        responseTime: 0,
        dependencies: serviceConfig.dependencies,
        criticalService: serviceConfig.criticalService
      });
      /* istanbul ignore next */
      cov_1hx4gzairn().s[23]++;
      this.services.set(serviceConfig.name, service);
    }
  }
  initializeFallbackMechanisms() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[3]++;
    cov_1hx4gzairn().s[24]++;
    // Fallback for LLM/Ollama service - use mock responses
    this.fallbackMechanisms.set('ollama', async () => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[4]++;
      cov_1hx4gzairn().s[25]++;
      return {
        status: 'degraded',
        message: 'Using fallback mode - Ollama unavailable',
        details: {
          fallbackMode: true,
          capabilities: ['text-completion-mock', 'chat-mock'],
          note: 'AI features will use mock responses'
        }
      };
    });
    // Fallback for Redis - use in-memory cache
    /* istanbul ignore next */
    cov_1hx4gzairn().s[26]++;
    this.fallbackMechanisms.set('redis', async () => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[5]++;
      cov_1hx4gzairn().s[27]++;
      return {
        status: 'degraded',
        message: 'Using in-memory cache - Redis unavailable',
        details: {
          fallbackMode: true,
          cacheType: 'memory',
          note: 'Session data will not persist across restarts'
        }
      };
    });
    // Fallback for model health - disable AI features gracefully
    /* istanbul ignore next */
    cov_1hx4gzairn().s[28]++;
    this.fallbackMechanisms.set('model-health', async () => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[6]++;
      cov_1hx4gzairn().s[29]++;
      return {
        status: 'degraded',
        message: 'AI features disabled - Model health monitoring unavailable',
        details: {
          fallbackMode: true,
          aiFeatures: 'disabled',
          note: 'Manual testing mode available'
        }
      };
    });
  }
  initializeCircuitBreakers() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[7]++;
    const serviceNames =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[30]++, Array.from(this.services.keys()));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[31]++;
    for (const serviceName of serviceNames) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[32]++;
      this.circuitBreakers.set(serviceName, {
        isOpen: false,
        failures: 0,
        lastFailure: new Date(0)
      });
    }
  }
  async executeWithCircuitBreaker(serviceName, operation) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[8]++;
    const breaker =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[33]++, this.circuitBreakers.get(serviceName));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[34]++;
    if (!breaker) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[4][0]++;
      cov_1hx4gzairn().s[35]++;
      throw new Error(`No circuit breaker for service: ${serviceName}`);
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[4][1]++;
    }
    // Check if circuit breaker is open
    cov_1hx4gzairn().s[36]++;
    if (breaker.isOpen) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[5][0]++;
      const timeSinceLastFailure =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[37]++, Date.now() - breaker.lastFailure.getTime());
      const resetTimeout =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[38]++, 60000); // 1 minute
      /* istanbul ignore next */
      cov_1hx4gzairn().s[39]++;
      if (timeSinceLastFailure < resetTimeout) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[6][0]++;
        cov_1hx4gzairn().s[40]++;
        throw new Error(`Circuit breaker open for ${serviceName}`);
      } else {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[6][1]++;
        cov_1hx4gzairn().s[41]++;
        // Try to reset circuit breaker
        breaker.isOpen = false;
        /* istanbul ignore next */
        cov_1hx4gzairn().s[42]++;
        breaker.failures = 0;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[5][1]++;
    }
    cov_1hx4gzairn().s[43]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[44]++, await operation());
      // Success - reset failure count
      /* istanbul ignore next */
      cov_1hx4gzairn().s[45]++;
      breaker.failures = 0;
      /* istanbul ignore next */
      cov_1hx4gzairn().s[46]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[47]++;
      // Failure - increment counter
      breaker.failures++;
      /* istanbul ignore next */
      cov_1hx4gzairn().s[48]++;
      breaker.lastFailure = new Date();
      // Open circuit breaker after 3 failures
      /* istanbul ignore next */
      cov_1hx4gzairn().s[49]++;
      if (breaker.failures >= 3) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[7][0]++;
        cov_1hx4gzairn().s[50]++;
        breaker.isOpen = true;
        /* istanbul ignore next */
        cov_1hx4gzairn().s[51]++;
        console.warn(`🔓 Circuit breaker opened for ${serviceName} after 3 failures`);
      } else
      /* istanbul ignore next */
      {
        cov_1hx4gzairn().b[7][1]++;
      }
      cov_1hx4gzairn().s[52]++;
      throw error;
    }
  }
  async start() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[9]++;
    cov_1hx4gzairn().s[53]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[8][0]++;
      cov_1hx4gzairn().s[54]++;
      console.log('🏥 Health Orchestrator already running');
      /* istanbul ignore next */
      cov_1hx4gzairn().s[55]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[8][1]++;
    }
    cov_1hx4gzairn().s[56]++;
    console.log('🏥 Starting Health Orchestrator...');
    /* istanbul ignore next */
    cov_1hx4gzairn().s[57]++;
    this.isRunning = true;
    // Initialize model monitor
    /* istanbul ignore next */
    cov_1hx4gzairn().s[58]++;
    try {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[59]++;
      this.modelMonitor = new ModelHealthMonitor_1.ModelHealthMonitor({
        healthCheckInterval: 60000,
        // 1 minute
        benchmarkInterval: 300000,
        // 5 minutes
        maxResponseTime: 30000,
        // 30 seconds
        maxErrorRate: 10,
        // 10%
        minHealthScore: 70,
        alertThresholds: {
          responseTime: 15000,
          // 15 seconds
          errorRate: 10,
          // 10%
          memoryUsage: 85 // 85% memory usage threshold
        }
      });
      /* istanbul ignore next */
      cov_1hx4gzairn().s[60]++;
      await this.modelMonitor.initialize();
      /* istanbul ignore next */
      cov_1hx4gzairn().s[61]++;
      console.log('🤖 Model Health Monitor initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[62]++;
      console.error('❌ Failed to initialize Model Health Monitor:', error);
    }
    // Start monitoring all services
    /* istanbul ignore next */
    cov_1hx4gzairn().s[63]++;
    for (const serviceName of this.services.keys()) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[64]++;
      this.startServiceMonitoring(serviceName);
    }
    // Perform initial full health check
    /* istanbul ignore next */
    cov_1hx4gzairn().s[65]++;
    await this.performFullHealthCheck();
    // Start periodic full system health checks
    const fullCheckInterval =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[66]++, setInterval(() => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[10]++;
      cov_1hx4gzairn().s[67]++;
      this.performFullHealthCheck();
    }, this.config.checkInterval * 2)); // Less frequent full checks
    /* istanbul ignore next */
    cov_1hx4gzairn().s[68]++;
    this.checkIntervals.set('__full_check__', fullCheckInterval);
    /* istanbul ignore next */
    cov_1hx4gzairn().s[69]++;
    console.log('✅ Health Orchestrator started successfully');
    /* istanbul ignore next */
    cov_1hx4gzairn().s[70]++;
    this.emit('started', {
      servicesCount: this.services.size
    });
  }
  startServiceMonitoring(serviceName) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[11]++;
    const interval =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[71]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[12]++;
      cov_1hx4gzairn().s[72]++;
      await this.checkServiceHealth(serviceName);
    }, this.config.checkInterval));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[73]++;
    this.checkIntervals.set(serviceName, interval);
  }
  async checkServiceHealth(serviceName) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[13]++;
    const service =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[74]++, this.services.get(serviceName));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[75]++;
    if (!service) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[9][0]++;
      cov_1hx4gzairn().s[76]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[9][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[77]++, Date.now());
    let newStatus =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[78]++, 'offline');
    let message =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[79]++, '');
    let details =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[80]++, {});
    /* istanbul ignore next */
    cov_1hx4gzairn().s[81]++;
    try {
      // Check dependencies first
      const dependencyResults =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[82]++, await this.checkDependencies(serviceName));
      const dependenciesHealthy =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[83]++, dependencyResults.every(dep => {
        /* istanbul ignore next */
        cov_1hx4gzairn().f[14]++;
        cov_1hx4gzairn().s[84]++;
        return dep.healthy;
      }));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[85]++;
      if (!dependenciesHealthy) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[10][0]++;
        cov_1hx4gzairn().s[86]++;
        newStatus = 'degraded';
        /* istanbul ignore next */
        cov_1hx4gzairn().s[87]++;
        message = 'Dependencies unhealthy';
        /* istanbul ignore next */
        cov_1hx4gzairn().s[88]++;
        details.dependencyStatus = dependencyResults;
      } else {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[10][1]++;
        cov_1hx4gzairn().s[89]++;
        // Perform service-specific health check with circuit breaker and fallback
        try {
          const healthResult =
          /* istanbul ignore next */
          (cov_1hx4gzairn().s[90]++, await this.executeWithCircuitBreaker(serviceName, () => {
            /* istanbul ignore next */
            cov_1hx4gzairn().f[15]++;
            cov_1hx4gzairn().s[91]++;
            return this.performServiceCheck(serviceName);
          }));
          /* istanbul ignore next */
          cov_1hx4gzairn().s[92]++;
          newStatus = healthResult.status;
          /* istanbul ignore next */
          cov_1hx4gzairn().s[93]++;
          message =
          /* istanbul ignore next */
          (cov_1hx4gzairn().b[11][0]++, healthResult.message) ||
          /* istanbul ignore next */
          (cov_1hx4gzairn().b[11][1]++, '');
          /* istanbul ignore next */
          cov_1hx4gzairn().s[94]++;
          details = {
            ...details,
            ...healthResult.details
          };
        } catch (circuitBreakerError) {
          // Try fallback mechanism
          const fallback =
          /* istanbul ignore next */
          (cov_1hx4gzairn().s[95]++, this.fallbackMechanisms.get(serviceName));
          /* istanbul ignore next */
          cov_1hx4gzairn().s[96]++;
          if (fallback) {
            /* istanbul ignore next */
            cov_1hx4gzairn().b[12][0]++;
            cov_1hx4gzairn().s[97]++;
            console.log(`🔄 Using fallback for ${serviceName}:`, circuitBreakerError);
            const fallbackResult =
            /* istanbul ignore next */
            (cov_1hx4gzairn().s[98]++, await fallback());
            /* istanbul ignore next */
            cov_1hx4gzairn().s[99]++;
            newStatus = fallbackResult.status;
            /* istanbul ignore next */
            cov_1hx4gzairn().s[100]++;
            message =
            /* istanbul ignore next */
            (cov_1hx4gzairn().b[13][0]++, fallbackResult.message) ||
            /* istanbul ignore next */
            (cov_1hx4gzairn().b[13][1]++, '');
            /* istanbul ignore next */
            cov_1hx4gzairn().s[101]++;
            details = {
              ...details,
              ...fallbackResult.details,
              circuitBreakerError: circuitBreakerError.message
            };
          } else {
            /* istanbul ignore next */
            cov_1hx4gzairn().b[12][1]++;
            cov_1hx4gzairn().s[102]++;
            throw circuitBreakerError;
          }
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[103]++;
      newStatus = 'unhealthy';
      /* istanbul ignore next */
      cov_1hx4gzairn().s[104]++;
      message = error instanceof Error ?
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[14][1]++, 'Health check failed');
      /* istanbul ignore next */
      cov_1hx4gzairn().s[105]++;
      details.error = message;
    }
    const responseTime =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[106]++, Date.now() - startTime);
    // Update service status
    const updatedService =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[107]++, {
      ...service,
      status: newStatus,
      lastCheck: new Date(),
      responseTime,
      message,
      details
    });
    const previousStatus =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[108]++, service.status);
    /* istanbul ignore next */
    cov_1hx4gzairn().s[109]++;
    this.services.set(serviceName, updatedService);
    // Emit events for status changes
    /* istanbul ignore next */
    cov_1hx4gzairn().s[110]++;
    if (previousStatus !== newStatus) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[15][0]++;
      cov_1hx4gzairn().s[111]++;
      this.emit('serviceStatusChanged', {
        serviceName,
        previousStatus,
        newStatus,
        responseTime,
        message
      });
      // Emit critical alerts
      /* istanbul ignore next */
      cov_1hx4gzairn().s[112]++;
      if (
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[17][0]++, service.criticalService) &&
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[17][1]++, newStatus === 'unhealthy')) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[16][0]++;
        cov_1hx4gzairn().s[113]++;
        this.emit('criticalServiceDown', {
          serviceName,
          message,
          details,
          timestamp: new Date()
        });
      } else
      /* istanbul ignore next */
      {
        cov_1hx4gzairn().b[16][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[15][1]++;
    }
  }
  async checkDependencies(serviceName) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[16]++;
    const dependencies =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[114]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[18][0]++, this.config.dependencies[serviceName]) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[18][1]++, []));
    const results =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[115]++, []);
    /* istanbul ignore next */
    cov_1hx4gzairn().s[116]++;
    for (const depName of dependencies) {
      const depService =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[117]++, this.services.get(depName));
      const healthy =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[118]++, depService ?
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[19][0]++, ['healthy', 'degraded'].includes(depService.status)) :
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[19][1]++, false));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[119]++;
      results.push({
        name: depName,
        healthy
      });
    }
    /* istanbul ignore next */
    cov_1hx4gzairn().s[120]++;
    return results;
  }
  async performServiceCheck(serviceName) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[17]++;
    cov_1hx4gzairn().s[121]++;
    switch (serviceName) {
      case 'database':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][0]++;
        cov_1hx4gzairn().s[122]++;
        return this.checkDatabase();
      case 'redis':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][1]++;
        cov_1hx4gzairn().s[123]++;
        return this.checkRedis();
      case 'ollama':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][2]++;
        cov_1hx4gzairn().s[124]++;
        return this.checkOllama();
      case 'frontend':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][3]++;
        cov_1hx4gzairn().s[125]++;
        return this.checkFrontend();
      case 'backend':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][4]++;
        cov_1hx4gzairn().s[126]++;
        return this.checkBackend();
      case 'websocket':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][5]++;
        cov_1hx4gzairn().s[127]++;
        return this.checkWebSocket();
      case 'model-health':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][6]++;
        cov_1hx4gzairn().s[128]++;
        return this.checkModelHealth();
      case 'prometheus':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][7]++;
        cov_1hx4gzairn().s[129]++;
        return this.checkPrometheus();
      case 'grafana':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][8]++;
        cov_1hx4gzairn().s[130]++;
        return this.checkGrafana();
      case 'model-init':
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][9]++;
        cov_1hx4gzairn().s[131]++;
        return this.checkModelInit();
      default:
        /* istanbul ignore next */
        cov_1hx4gzairn().b[20][10]++;
        cov_1hx4gzairn().s[132]++;
        return {
          status: 'unhealthy',
          message: `Unknown service: ${serviceName}`
        };
    }
  }
  async checkDatabase() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[18]++;
    cov_1hx4gzairn().s[133]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[134]++, connection_1.db.prepare('SELECT 1 as test').get());
      const stats =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[135]++, {
        promptCards: connection_1.db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get(),
        testCases: connection_1.db.prepare('SELECT COUNT(*) as count FROM test_cases').get()
      });
      /* istanbul ignore next */
      cov_1hx4gzairn().s[136]++;
      return {
        status: result?.test === 1 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[21][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[21][1]++, 'unhealthy'),
        message: 'Database connection successful',
        details: {
          stats,
          path: process.env.DATABASE_PATH
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[137]++;
      return {
        status: 'unhealthy',
        message: `Database check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[22][1]++, 'Unknown error')}`
      };
    }
  }
  async checkRedis() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[19]++;
    const redisUrl =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[138]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[23][0]++, process.env.REDIS_URL) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[23][1]++, 'redis://redis:6379'));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[139]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[140]++, (0, redis_1.createClient)({
        url: redisUrl
      }));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[141]++;
      await client.connect();
      const result =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[142]++, await client.ping());
      /* istanbul ignore next */
      cov_1hx4gzairn().s[143]++;
      await client.disconnect();
      /* istanbul ignore next */
      cov_1hx4gzairn().s[144]++;
      return {
        status: result === 'PONG' ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[24][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[24][1]++, 'unhealthy'),
        message: 'Redis connection successful',
        details: {
          url: redisUrl,
          ping: result
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[145]++;
      return {
        status: 'unhealthy',
        message: `Redis check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[25][1]++, 'Unknown error')}`,
        details: {
          url: redisUrl
        }
      };
    }
  }
  async checkOllama() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[20]++;
    const ollamaUrl =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[146]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[26][0]++, process.env.OLLAMA_BASE_URL) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[26][1]++, 'http://ollama:11434'));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[147]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[148]++, await axios_1.default.get(`${ollamaUrl}/api/version`, {
        timeout: this.config.timeout
      }));
      const modelsResponse =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[149]++, await axios_1.default.get(`${ollamaUrl}/api/tags`, {
        timeout: this.config.timeout
      }));
      const models =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[150]++,
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[27][0]++, modelsResponse.data.models) ||
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[27][1]++, []));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[151]++;
      return {
        status: models.length > 0 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[28][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[28][1]++, 'degraded'),
        message: models.length > 0 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[29][0]++, 'Ollama operational with models') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[29][1]++, 'Ollama operational but no models'),
        details: {
          url: ollamaUrl,
          version: response.data.version,
          modelCount: models.length,
          models: models.map(m => {
            /* istanbul ignore next */
            cov_1hx4gzairn().f[21]++;
            cov_1hx4gzairn().s[152]++;
            return m.name;
          })
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[153]++;
      return {
        status: 'unhealthy',
        message: `Ollama check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[30][1]++, 'Unknown error')}`,
        details: {
          url: ollamaUrl
        }
      };
    }
  }
  async checkFrontend() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[22]++;
    const frontendUrl =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[154]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[31][0]++, process.env.FRONTEND_URL) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[31][1]++, 'http://localhost:3000'));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[155]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[156]++, await axios_1.default.get(`${frontendUrl}/api/health`, {
        timeout: this.config.timeout
      }));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[157]++;
      return {
        status: response.status === 200 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[32][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[32][1]++, 'degraded'),
        message: 'Frontend health check successful',
        details: {
          url: frontendUrl,
          statusCode: response.status,
          frontendStatus: response.data?.status
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[158]++;
      return {
        status: 'unhealthy',
        message: `Frontend check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[33][1]++, 'Unknown error')}`,
        details: {
          url: frontendUrl
        }
      };
    }
  }
  async checkBackend() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[23]++;
    const backendUrl =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[159]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[34][0]++, process.env.BACKEND_URL) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[34][1]++, 'http://localhost:3001'));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[160]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[161]++, await axios_1.default.get(`${backendUrl}/api/health/v2`, {
        timeout: this.config.timeout
      }));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[162]++;
      return {
        status: response.data?.status === 'healthy' ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[35][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[35][1]++, 'degraded'),
        message: 'Backend health check successful',
        details: {
          url: backendUrl,
          statusCode: response.status,
          backendStatus: response.data?.status,
          services: response.data?.services
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[163]++;
      return {
        status: 'unhealthy',
        message: `Backend check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[36][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[36][1]++, 'Unknown error')}`,
        details: {
          url: backendUrl
        }
      };
    }
  }
  async checkWebSocket() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[24]++;
    cov_1hx4gzairn().s[164]++;
    // WebSocket health is checked via backend health endpoint
    // This is a simplified check - in production you might want to test actual WebSocket connection
    return {
      status: 'healthy',
      message: 'WebSocket service assumed healthy (checked via backend)',
      details: {
        note: 'Indirect check via backend service'
      }
    };
  }
  async checkModelHealth() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[25]++;
    cov_1hx4gzairn().s[165]++;
    if (!this.modelMonitor) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[37][0]++;
      cov_1hx4gzairn().s[166]++;
      return {
        status: 'offline',
        message: 'Model health monitor not initialized'
      };
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[37][1]++;
    }
    cov_1hx4gzairn().s[167]++;
    try {
      const monitorStatus =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[168]++, this.modelMonitor.getStatus());
      const healthyModels =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[169]++, this.modelMonitor.getHealthyModels());
      const unhealthyModels =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[170]++, this.modelMonitor.getUnhealthyModels());
      let status =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[171]++, 'healthy');
      /* istanbul ignore next */
      cov_1hx4gzairn().s[172]++;
      if (unhealthyModels.length > healthyModels.length) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[38][0]++;
        cov_1hx4gzairn().s[173]++;
        status = 'degraded';
      } else
      /* istanbul ignore next */
      {
        cov_1hx4gzairn().b[38][1]++;
      }
      cov_1hx4gzairn().s[174]++;
      if (
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[40][0]++, healthyModels.length === 0) &&
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[40][1]++, unhealthyModels.length > 0)) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[39][0]++;
        cov_1hx4gzairn().s[175]++;
        status = 'unhealthy';
      } else
      /* istanbul ignore next */
      {
        cov_1hx4gzairn().b[39][1]++;
      }
      cov_1hx4gzairn().s[176]++;
      return {
        status,
        message: `${healthyModels.length} healthy models, ${unhealthyModels.length} unhealthy`,
        details: {
          ...monitorStatus,
          healthyModels,
          unhealthyModels
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[177]++;
      return {
        status: 'unhealthy',
        message: `Model health check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[41][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[41][1]++, 'Unknown error')}`
      };
    }
  }
  async checkPrometheus() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[26]++;
    const prometheusUrl =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[178]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[42][0]++, process.env.PROMETHEUS_URL) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[42][1]++, 'http://localhost:9090'));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[179]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[180]++, await axios_1.default.get(`${prometheusUrl}/-/healthy`, {
        timeout: this.config.timeout
      }));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[181]++;
      return {
        status: response.status === 200 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[43][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[43][1]++, 'degraded'),
        message: 'Prometheus health check successful',
        details: {
          url: prometheusUrl,
          statusCode: response.status
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[182]++;
      return {
        status: 'offline',
        message: `Prometheus check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[44][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[44][1]++, 'Service not running')}`,
        details: {
          url: prometheusUrl
        }
      };
    }
  }
  async checkGrafana() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[27]++;
    const grafanaUrl =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[183]++,
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[45][0]++, process.env.GRAFANA_URL) ||
    /* istanbul ignore next */
    (cov_1hx4gzairn().b[45][1]++, 'http://localhost:3002'));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[184]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[185]++, await axios_1.default.get(`${grafanaUrl}/api/health`, {
        timeout: this.config.timeout
      }));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[186]++;
      return {
        status: response.status === 200 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[46][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[46][1]++, 'degraded'),
        message: 'Grafana health check successful',
        details: {
          url: grafanaUrl,
          statusCode: response.status
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[187]++;
      return {
        status: 'offline',
        message: `Grafana check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[47][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[47][1]++, 'Service not running')}`,
        details: {
          url: grafanaUrl
        }
      };
    }
  }
  async checkModelInit() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[28]++;
    cov_1hx4gzairn().s[188]++;
    // Model init is a one-time service that downloads models
    // Check if models exist to infer if init was successful
    try {
      const modelsResponse =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[189]++, await axios_1.default.get(`${
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[48][0]++, process.env.OLLAMA_BASE_URL) ||
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[48][1]++, 'http://ollama:11434')}/api/tags`));
      const models =
      /* istanbul ignore next */
      (cov_1hx4gzairn().s[190]++,
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[49][0]++, modelsResponse.data.models) ||
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[49][1]++, []));
      /* istanbul ignore next */
      cov_1hx4gzairn().s[191]++;
      return {
        status: models.length > 0 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[50][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[50][1]++, 'degraded'),
        message: models.length > 0 ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[51][0]++, 'Models initialized successfully') :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[51][1]++, 'No models found'),
        details: {
          modelCount: models.length,
          models: models.map(m => {
            /* istanbul ignore next */
            cov_1hx4gzairn().f[29]++;
            cov_1hx4gzairn().s[192]++;
            return m.name;
          })
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[193]++;
      return {
        status: 'unhealthy',
        message: `Model init check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[52][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hx4gzairn().b[52][1]++, 'Unknown error')}`
      };
    }
  }
  async performFullHealthCheck() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[30]++;
    cov_1hx4gzairn().s[194]++;
    console.log('🔍 Performing full system health check...');
    // Check all services in parallel
    const checkPromises =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[195]++, Array.from(this.services.keys()).map(serviceName => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[31]++;
      cov_1hx4gzairn().s[196]++;
      return this.checkServiceHealth(serviceName);
    }));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[197]++;
    await Promise.allSettled(checkPromises);
    /* istanbul ignore next */
    cov_1hx4gzairn().s[198]++;
    this.lastFullCheck = new Date();
    const systemHealth =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[199]++, this.getSystemHealth());
    /* istanbul ignore next */
    cov_1hx4gzairn().s[200]++;
    this.emit('fullHealthCheckComplete', {
      systemHealth,
      timestamp: this.lastFullCheck
    });
    /* istanbul ignore next */
    cov_1hx4gzairn().s[201]++;
    console.log(`✅ Full health check complete: ${systemHealth.healthyServices}/${systemHealth.totalServices} services healthy`);
  }
  getSystemHealth() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[32]++;
    const services =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[202]++, new Map(this.services));
    const totalServices =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[203]++, services.size);
    let healthyServices =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[204]++, 0);
    let degradedServices =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[205]++, 0);
    let unhealthyServices =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[206]++, 0);
    let offlineServices =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[207]++, 0);
    /* istanbul ignore next */
    cov_1hx4gzairn().s[208]++;
    for (const service of services.values()) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[209]++;
      switch (service.status) {
        case 'healthy':
          /* istanbul ignore next */
          cov_1hx4gzairn().b[53][0]++;
          cov_1hx4gzairn().s[210]++;
          healthyServices++;
          /* istanbul ignore next */
          cov_1hx4gzairn().s[211]++;
          break;
        case 'degraded':
          /* istanbul ignore next */
          cov_1hx4gzairn().b[53][1]++;
          cov_1hx4gzairn().s[212]++;
          degradedServices++;
          /* istanbul ignore next */
          cov_1hx4gzairn().s[213]++;
          break;
        case 'unhealthy':
          /* istanbul ignore next */
          cov_1hx4gzairn().b[53][2]++;
          cov_1hx4gzairn().s[214]++;
          unhealthyServices++;
          /* istanbul ignore next */
          cov_1hx4gzairn().s[215]++;
          break;
        case 'offline':
          /* istanbul ignore next */
          cov_1hx4gzairn().b[53][3]++;
          cov_1hx4gzairn().s[216]++;
          offlineServices++;
          /* istanbul ignore next */
          cov_1hx4gzairn().s[217]++;
          break;
      }
    }
    // Determine overall status
    let overallStatus =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[218]++, 'healthy');
    // Check critical services
    const criticalServices =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[219]++, Array.from(services.values()).filter(s => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[33]++;
      cov_1hx4gzairn().s[220]++;
      return s.criticalService;
    }));
    const criticalUnhealthy =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[221]++, criticalServices.filter(s => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[34]++;
      cov_1hx4gzairn().s[222]++;
      return /* istanbul ignore next */(cov_1hx4gzairn().b[54][0]++, s.status === 'unhealthy') ||
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[54][1]++, s.status === 'offline');
    }));
    const criticalDegraded =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[223]++, criticalServices.filter(s => {
      /* istanbul ignore next */
      cov_1hx4gzairn().f[35]++;
      cov_1hx4gzairn().s[224]++;
      return s.status === 'degraded';
    }));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[225]++;
    if (criticalUnhealthy.length > 0) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[55][0]++;
      cov_1hx4gzairn().s[226]++;
      overallStatus = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[55][1]++;
      cov_1hx4gzairn().s[227]++;
      if (
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[57][0]++, criticalDegraded.length > 0) ||
      /* istanbul ignore next */
      (cov_1hx4gzairn().b[57][1]++, unhealthyServices > 0)) {
        /* istanbul ignore next */
        cov_1hx4gzairn().b[56][0]++;
        cov_1hx4gzairn().s[228]++;
        overallStatus = 'degraded';
      } else
      /* istanbul ignore next */
      {
        cov_1hx4gzairn().b[56][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1hx4gzairn().s[229]++;
    return {
      overallStatus,
      services,
      lastFullCheck: this.lastFullCheck,
      totalServices,
      healthyServices,
      degradedServices,
      unhealthyServices,
      offlineServices
    };
  }
  getServiceHealth(serviceName) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[36]++;
    cov_1hx4gzairn().s[230]++;
    return this.services.get(serviceName);
  }
  async stop() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[37]++;
    cov_1hx4gzairn().s[231]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[58][0]++;
      cov_1hx4gzairn().s[232]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[58][1]++;
    }
    cov_1hx4gzairn().s[233]++;
    console.log('🔄 Stopping Health Orchestrator...');
    /* istanbul ignore next */
    cov_1hx4gzairn().s[234]++;
    this.isRunning = false;
    // Clear all intervals
    /* istanbul ignore next */
    cov_1hx4gzairn().s[235]++;
    for (const interval of this.checkIntervals.values()) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[236]++;
      clearInterval(interval);
    }
    /* istanbul ignore next */
    cov_1hx4gzairn().s[237]++;
    this.checkIntervals.clear();
    // Shutdown model monitor
    /* istanbul ignore next */
    cov_1hx4gzairn().s[238]++;
    if (this.modelMonitor) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[59][0]++;
      cov_1hx4gzairn().s[239]++;
      await this.modelMonitor.shutdown();
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[59][1]++;
    }
    cov_1hx4gzairn().s[240]++;
    console.log('✅ Health Orchestrator stopped');
    /* istanbul ignore next */
    cov_1hx4gzairn().s[241]++;
    this.emit('stopped');
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[38]++;
    cov_1hx4gzairn().s[242]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_1hx4gzairn().s[243]++;
    console.log('⚙️ Health Orchestrator configuration updated');
  }
  getCircuitBreakerStatus() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[39]++;
    cov_1hx4gzairn().s[244]++;
    return new Map(this.circuitBreakers);
  }
  getFallbackStatus() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[40]++;
    const status =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[245]++, {});
    /* istanbul ignore next */
    cov_1hx4gzairn().s[246]++;
    for (const [serviceName] of this.fallbackMechanisms) {
      /* istanbul ignore next */
      cov_1hx4gzairn().s[247]++;
      status[serviceName] = true;
    }
    /* istanbul ignore next */
    cov_1hx4gzairn().s[248]++;
    return status;
  }
  getServiceDependencyMap() {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[41]++;
    cov_1hx4gzairn().s[249]++;
    return {
      ...this.config.dependencies
    };
  }
  async testFallbackMechanism(serviceName) {
    /* istanbul ignore next */
    cov_1hx4gzairn().f[42]++;
    const fallback =
    /* istanbul ignore next */
    (cov_1hx4gzairn().s[250]++, this.fallbackMechanisms.get(serviceName));
    /* istanbul ignore next */
    cov_1hx4gzairn().s[251]++;
    if (!fallback) {
      /* istanbul ignore next */
      cov_1hx4gzairn().b[60][0]++;
      cov_1hx4gzairn().s[252]++;
      throw new Error(`No fallback mechanism configured for ${serviceName}`);
    } else
    /* istanbul ignore next */
    {
      cov_1hx4gzairn().b[60][1]++;
    }
    cov_1hx4gzairn().s[253]++;
    return await fallback();
  }
}
/* istanbul ignore next */
cov_1hx4gzairn().s[254]++;
exports.HealthOrchestrator = HealthOrchestrator;
/* istanbul ignore next */
cov_1hx4gzairn().s[255]++;
exports.healthOrchestrator = new HealthOrchestrator();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,