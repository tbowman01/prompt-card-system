{"version":3,"names":["cov_1hx4gzairn","actualCoverage","events_1","s","require","redis_1","axios_1","__importDefault","connection_1","ModelHealthMonitor_1","HealthOrchestrator","EventEmitter","constructor","config","b","f","services","Map","checkIntervals","isRunning","lastFullCheck","Date","fallbackMechanisms","circuitBreakers","checkInterval","timeout","retries","retryDelay","criticalServices","dependencies","initializeServices","initializeFallbackMechanisms","initializeCircuitBreakers","servicesConfig","name","criticalService","serviceConfig","service","status","lastCheck","responseTime","set","message","details","fallbackMode","capabilities","note","cacheType","aiFeatures","serviceNames","Array","from","keys","serviceName","isOpen","failures","lastFailure","executeWithCircuitBreaker","operation","breaker","get","Error","timeSinceLastFailure","now","getTime","resetTimeout","result","error","console","warn","start","log","modelMonitor","ModelHealthMonitor","healthCheckInterval","benchmarkInterval","maxResponseTime","maxErrorRate","minHealthScore","alertThresholds","errorRate","memoryUsage","initialize","startServiceMonitoring","performFullHealthCheck","fullCheckInterval","setInterval","emit","servicesCount","size","interval","checkServiceHealth","startTime","newStatus","dependencyResults","checkDependencies","dependenciesHealthy","every","dep","healthy","dependencyStatus","healthResult","performServiceCheck","circuitBreakerError","fallback","fallbackResult","updatedService","previousStatus","timestamp","results","depName","depService","includes","push","checkDatabase","checkRedis","checkOllama","checkFrontend","checkBackend","checkWebSocket","checkModelHealth","checkPrometheus","checkGrafana","checkModelInit","db","prepare","stats","promptCards","testCases","test","path","process","env","DATABASE_PATH","redisUrl","REDIS_URL","client","createClient","url","connect","ping","disconnect","ollamaUrl","OLLAMA_BASE_URL","response","default","modelsResponse","models","data","length","version","modelCount","map","m","frontendUrl","FRONTEND_URL","statusCode","frontendStatus","backendUrl","BACKEND_URL","backendStatus","monitorStatus","getStatus","healthyModels","getHealthyModels","unhealthyModels","getUnhealthyModels","prometheusUrl","PROMETHEUS_URL","grafanaUrl","GRAFANA_URL","checkPromises","Promise","allSettled","systemHealth","getSystemHealth","healthyServices","totalServices","degradedServices","unhealthyServices","offlineServices","values","overallStatus","filter","criticalUnhealthy","criticalDegraded","getServiceHealth","stop","clearInterval","clear","shutdown","updateConfig","newConfig","getCircuitBreakerStatus","getFallbackStatus","getServiceDependencyMap","testFallbackMechanism","exports","healthOrchestrator"],"sources":["/workspaces/prompt-card-system/backend/src/services/health/HealthOrchestrator.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { createClient } from 'redis';\nimport axios from 'axios';\nimport { db } from '../../database/connection';\nimport { llmService } from '../llmService';\nimport { ModelHealthMonitor } from '../models/ModelHealthMonitor';\n\ninterface ServiceHealth {\n  name: string;\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  lastCheck: Date;\n  responseTime: number;\n  message?: string;\n  details?: any;\n  dependencies?: string[];\n  criticalService: boolean;\n}\n\ninterface SystemHealth {\n  overallStatus: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  services: Map<string, ServiceHealth>;\n  lastFullCheck: Date;\n  totalServices: number;\n  healthyServices: number;\n  degradedServices: number;\n  unhealthyServices: number;\n  offlineServices: number;\n}\n\ninterface HealthCheckConfig {\n  checkInterval: number;\n  timeout: number;\n  retries: number;\n  retryDelay: number;\n  criticalServices: string[];\n  dependencies: Record<string, string[]>;\n}\n\nexport class HealthOrchestrator extends EventEmitter {\n  private services: Map<string, ServiceHealth> = new Map();\n  private checkIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private config: HealthCheckConfig;\n  private isRunning = false;\n  private modelMonitor?: ModelHealthMonitor;\n  private lastFullCheck = new Date(0);\n  private fallbackMechanisms: Map<string, () => Promise<any>> = new Map();\n  private circuitBreakers: Map<string, { isOpen: boolean; failures: number; lastFailure: Date }> = new Map();\n\n  constructor(config: Partial<HealthCheckConfig> = {}) {\n    super();\n    \n    this.config = {\n      checkInterval: 30000, // 30 seconds\n      timeout: 5000, // 5 seconds\n      retries: 3,\n      retryDelay: 1000, // 1 second\n      criticalServices: ['database', 'ollama', 'frontend', 'backend'],\n      dependencies: {\n        'backend': ['database', 'ollama', 'redis'],\n        'frontend': ['backend'],\n        'model-health': ['ollama'],\n        'websocket': ['backend', 'redis'],\n        'prometheus': ['backend'],\n        'grafana': ['prometheus']\n      },\n      ...config\n    };\n\n    this.initializeServices();\n    this.initializeFallbackMechanisms();\n    this.initializeCircuitBreakers();\n  }\n\n  private initializeServices() {\n    // Define all services to monitor\n    const servicesConfig = [\n      {\n        name: 'database',\n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'redis', \n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'ollama',\n        criticalService: true,\n        dependencies: []\n      },\n      {\n        name: 'frontend',\n        criticalService: true,\n        dependencies: ['backend']\n      },\n      {\n        name: 'backend',\n        criticalService: true,\n        dependencies: ['database', 'ollama', 'redis']\n      },\n      {\n        name: 'websocket',\n        criticalService: false,\n        dependencies: ['backend', 'redis']\n      },\n      {\n        name: 'model-health',\n        criticalService: false,\n        dependencies: ['ollama']\n      },\n      {\n        name: 'prometheus',\n        criticalService: false,\n        dependencies: ['backend']\n      },\n      {\n        name: 'grafana',\n        criticalService: false,\n        dependencies: ['prometheus']\n      },\n      {\n        name: 'model-init',\n        criticalService: false,\n        dependencies: ['ollama']\n      }\n    ];\n\n    // Initialize service health status\n    for (const serviceConfig of servicesConfig) {\n      const service: ServiceHealth = {\n        name: serviceConfig.name,\n        status: 'offline',\n        lastCheck: new Date(0),\n        responseTime: 0,\n        dependencies: serviceConfig.dependencies,\n        criticalService: serviceConfig.criticalService\n      };\n      \n      this.services.set(serviceConfig.name, service);\n    }\n  }\n\n  private initializeFallbackMechanisms(): void {\n    // Fallback for LLM/Ollama service - use mock responses\n    this.fallbackMechanisms.set('ollama', async () => ({\n      status: 'degraded',\n      message: 'Using fallback mode - Ollama unavailable',\n      details: {\n        fallbackMode: true,\n        capabilities: ['text-completion-mock', 'chat-mock'],\n        note: 'AI features will use mock responses'\n      }\n    }));\n\n    // Fallback for Redis - use in-memory cache\n    this.fallbackMechanisms.set('redis', async () => ({\n      status: 'degraded', \n      message: 'Using in-memory cache - Redis unavailable',\n      details: {\n        fallbackMode: true,\n        cacheType: 'memory',\n        note: 'Session data will not persist across restarts'\n      }\n    }));\n\n    // Fallback for model health - disable AI features gracefully\n    this.fallbackMechanisms.set('model-health', async () => ({\n      status: 'degraded',\n      message: 'AI features disabled - Model health monitoring unavailable',\n      details: {\n        fallbackMode: true,\n        aiFeatures: 'disabled',\n        note: 'Manual testing mode available'\n      }\n    }));\n  }\n\n  private initializeCircuitBreakers(): void {\n    const serviceNames = Array.from(this.services.keys());\n    for (const serviceName of serviceNames) {\n      this.circuitBreakers.set(serviceName, {\n        isOpen: false,\n        failures: 0,\n        lastFailure: new Date(0)\n      });\n    }\n  }\n\n  private async executeWithCircuitBreaker<T>(\n    serviceName: string, \n    operation: () => Promise<T>\n  ): Promise<T> {\n    const breaker = this.circuitBreakers.get(serviceName);\n    if (!breaker) throw new Error(`No circuit breaker for service: ${serviceName}`);\n\n    // Check if circuit breaker is open\n    if (breaker.isOpen) {\n      const timeSinceLastFailure = Date.now() - breaker.lastFailure.getTime();\n      const resetTimeout = 60000; // 1 minute\n\n      if (timeSinceLastFailure < resetTimeout) {\n        throw new Error(`Circuit breaker open for ${serviceName}`);\n      } else {\n        // Try to reset circuit breaker\n        breaker.isOpen = false;\n        breaker.failures = 0;\n      }\n    }\n\n    try {\n      const result = await operation();\n      // Success - reset failure count\n      breaker.failures = 0;\n      return result;\n    } catch (error) {\n      // Failure - increment counter\n      breaker.failures++;\n      breaker.lastFailure = new Date();\n\n      // Open circuit breaker after 3 failures\n      if (breaker.failures >= 3) {\n        breaker.isOpen = true;\n        console.warn(`üîì Circuit breaker opened for ${serviceName} after 3 failures`);\n      }\n\n      throw error;\n    }\n  }\n\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.log('üè• Health Orchestrator already running');\n      return;\n    }\n\n    console.log('üè• Starting Health Orchestrator...');\n    this.isRunning = true;\n\n    // Initialize model monitor\n    try {\n      this.modelMonitor = new ModelHealthMonitor({\n        healthCheckInterval: 60000, // 1 minute\n        benchmarkInterval: 300000, // 5 minutes\n        maxResponseTime: 30000, // 30 seconds\n        maxErrorRate: 10, // 10%\n        minHealthScore: 70,\n        alertThresholds: {\n          responseTime: 15000, // 15 seconds\n          errorRate: 10, // 10%\n          memoryUsage: 85 // 85% memory usage threshold\n        }\n      });\n      \n      await this.modelMonitor.initialize();\n      console.log('ü§ñ Model Health Monitor initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Model Health Monitor:', error);\n    }\n\n    // Start monitoring all services\n    for (const serviceName of this.services.keys()) {\n      this.startServiceMonitoring(serviceName);\n    }\n\n    // Perform initial full health check\n    await this.performFullHealthCheck();\n\n    // Start periodic full system health checks\n    const fullCheckInterval = setInterval(() => {\n      this.performFullHealthCheck();\n    }, this.config.checkInterval * 2); // Less frequent full checks\n\n    this.checkIntervals.set('__full_check__', fullCheckInterval);\n\n    console.log('‚úÖ Health Orchestrator started successfully');\n    this.emit('started', { servicesCount: this.services.size });\n  }\n\n  private startServiceMonitoring(serviceName: string): void {\n    const interval = setInterval(async () => {\n      await this.checkServiceHealth(serviceName);\n    }, this.config.checkInterval);\n\n    this.checkIntervals.set(serviceName, interval);\n  }\n\n  private async checkServiceHealth(serviceName: string): Promise<void> {\n    const service = this.services.get(serviceName);\n    if (!service) return;\n\n    const startTime = Date.now();\n    let newStatus: ServiceHealth['status'] = 'offline';\n    let message = '';\n    let details: any = {};\n\n    try {\n      // Check dependencies first\n      const dependencyResults = await this.checkDependencies(serviceName);\n      const dependenciesHealthy = dependencyResults.every(dep => dep.healthy);\n\n      if (!dependenciesHealthy) {\n        newStatus = 'degraded';\n        message = 'Dependencies unhealthy';\n        details.dependencyStatus = dependencyResults;\n      } else {\n        // Perform service-specific health check with circuit breaker and fallback\n        try {\n          const healthResult = await this.executeWithCircuitBreaker(serviceName, () => \n            this.performServiceCheck(serviceName)\n          );\n          newStatus = healthResult.status;\n          message = healthResult.message || '';\n          details = { ...details, ...healthResult.details };\n        } catch (circuitBreakerError) {\n          // Try fallback mechanism\n          const fallback = this.fallbackMechanisms.get(serviceName);\n          if (fallback) {\n            console.log(`üîÑ Using fallback for ${serviceName}:`, circuitBreakerError);\n            const fallbackResult = await fallback();\n            newStatus = fallbackResult.status;\n            message = fallbackResult.message || '';\n            details = { ...details, ...fallbackResult.details, circuitBreakerError: circuitBreakerError.message };\n          } else {\n            throw circuitBreakerError;\n          }\n        }\n      }\n    } catch (error) {\n      newStatus = 'unhealthy';\n      message = error instanceof Error ? error.message : 'Health check failed';\n      details.error = message;\n    }\n\n    const responseTime = Date.now() - startTime;\n    \n    // Update service status\n    const updatedService: ServiceHealth = {\n      ...service,\n      status: newStatus,\n      lastCheck: new Date(),\n      responseTime,\n      message,\n      details\n    };\n\n    const previousStatus = service.status;\n    this.services.set(serviceName, updatedService);\n\n    // Emit events for status changes\n    if (previousStatus !== newStatus) {\n      this.emit('serviceStatusChanged', {\n        serviceName,\n        previousStatus,\n        newStatus,\n        responseTime,\n        message\n      });\n\n      // Emit critical alerts\n      if (service.criticalService && newStatus === 'unhealthy') {\n        this.emit('criticalServiceDown', {\n          serviceName,\n          message,\n          details,\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  private async checkDependencies(serviceName: string): Promise<Array<{ name: string; healthy: boolean }>> {\n    const dependencies = this.config.dependencies[serviceName] || [];\n    const results = [];\n\n    for (const depName of dependencies) {\n      const depService = this.services.get(depName);\n      const healthy = depService ? ['healthy', 'degraded'].includes(depService.status) : false;\n      results.push({ name: depName, healthy });\n    }\n\n    return results;\n  }\n\n  private async performServiceCheck(serviceName: string): Promise<{\n    status: ServiceHealth['status'];\n    message?: string;\n    details?: any;\n  }> {\n    switch (serviceName) {\n      case 'database':\n        return this.checkDatabase();\n      case 'redis':\n        return this.checkRedis();\n      case 'ollama':\n        return this.checkOllama();\n      case 'frontend':\n        return this.checkFrontend();\n      case 'backend':\n        return this.checkBackend();\n      case 'websocket':\n        return this.checkWebSocket();\n      case 'model-health':\n        return this.checkModelHealth();\n      case 'prometheus':\n        return this.checkPrometheus();\n      case 'grafana':\n        return this.checkGrafana();\n      case 'model-init':\n        return this.checkModelInit();\n      default:\n        return {\n          status: 'unhealthy',\n          message: `Unknown service: ${serviceName}`\n        };\n    }\n  }\n\n  private async checkDatabase(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    try {\n      const result = db.prepare('SELECT 1 as test').get() as { test: number };\n      const stats = {\n        promptCards: db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number },\n        testCases: db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number }\n      };\n\n      return {\n        status: result?.test === 1 ? 'healthy' : 'unhealthy',\n        message: 'Database connection successful',\n        details: { stats, path: process.env.DATABASE_PATH }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Database check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async checkRedis(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const redisUrl = process.env.REDIS_URL || 'redis://redis:6379';\n    \n    try {\n      const client = createClient({ url: redisUrl });\n      await client.connect();\n      const result = await client.ping();\n      await client.disconnect();\n\n      return {\n        status: result === 'PONG' ? 'healthy' : 'unhealthy',\n        message: 'Redis connection successful',\n        details: { url: redisUrl, ping: result }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Redis check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: redisUrl }\n      };\n    }\n  }\n\n  private async checkOllama(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n    \n    try {\n      const response = await axios.get(`${ollamaUrl}/api/version`, { timeout: this.config.timeout });\n      const modelsResponse = await axios.get(`${ollamaUrl}/api/tags`, { timeout: this.config.timeout });\n      const models = modelsResponse.data.models || [];\n\n      return {\n        status: models.length > 0 ? 'healthy' : 'degraded',\n        message: models.length > 0 ? 'Ollama operational with models' : 'Ollama operational but no models',\n        details: {\n          url: ollamaUrl,\n          version: response.data.version,\n          modelCount: models.length,\n          models: models.map((m: any) => m.name)\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Ollama check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: ollamaUrl }\n      };\n    }\n  }\n\n  private async checkFrontend(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';\n    \n    try {\n      const response = await axios.get(`${frontendUrl}/api/health`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Frontend health check successful',\n        details: {\n          url: frontendUrl,\n          statusCode: response.status,\n          frontendStatus: response.data?.status\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Frontend check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: frontendUrl }\n      };\n    }\n  }\n\n  private async checkBackend(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const backendUrl = process.env.BACKEND_URL || 'http://localhost:3001';\n    \n    try {\n      const response = await axios.get(`${backendUrl}/api/health/v2`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.data?.status === 'healthy' ? 'healthy' : 'degraded',\n        message: 'Backend health check successful',\n        details: {\n          url: backendUrl,\n          statusCode: response.status,\n          backendStatus: response.data?.status,\n          services: response.data?.services\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Backend check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { url: backendUrl }\n      };\n    }\n  }\n\n  private async checkWebSocket(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    // WebSocket health is checked via backend health endpoint\n    // This is a simplified check - in production you might want to test actual WebSocket connection\n    return {\n      status: 'healthy',\n      message: 'WebSocket service assumed healthy (checked via backend)',\n      details: { note: 'Indirect check via backend service' }\n    };\n  }\n\n  private async checkModelHealth(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    if (!this.modelMonitor) {\n      return {\n        status: 'offline',\n        message: 'Model health monitor not initialized'\n      };\n    }\n\n    try {\n      const monitorStatus = this.modelMonitor.getStatus();\n      const healthyModels = this.modelMonitor.getHealthyModels();\n      const unhealthyModels = this.modelMonitor.getUnhealthyModels();\n\n      let status: ServiceHealth['status'] = 'healthy';\n      if (unhealthyModels.length > healthyModels.length) {\n        status = 'degraded';\n      }\n      if (healthyModels.length === 0 && unhealthyModels.length > 0) {\n        status = 'unhealthy';\n      }\n\n      return {\n        status,\n        message: `${healthyModels.length} healthy models, ${unhealthyModels.length} unhealthy`,\n        details: {\n          ...monitorStatus,\n          healthyModels,\n          unhealthyModels\n        }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Model health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async checkPrometheus(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const prometheusUrl = process.env.PROMETHEUS_URL || 'http://localhost:9090';\n    \n    try {\n      const response = await axios.get(`${prometheusUrl}/-/healthy`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Prometheus health check successful',\n        details: { url: prometheusUrl, statusCode: response.status }\n      };\n    } catch (error) {\n      return {\n        status: 'offline',\n        message: `Prometheus check failed: ${error instanceof Error ? error.message : 'Service not running'}`,\n        details: { url: prometheusUrl }\n      };\n    }\n  }\n\n  private async checkGrafana(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    const grafanaUrl = process.env.GRAFANA_URL || 'http://localhost:3002';\n    \n    try {\n      const response = await axios.get(`${grafanaUrl}/api/health`, { timeout: this.config.timeout });\n      \n      return {\n        status: response.status === 200 ? 'healthy' : 'degraded',\n        message: 'Grafana health check successful',\n        details: { url: grafanaUrl, statusCode: response.status }\n      };\n    } catch (error) {\n      return {\n        status: 'offline',\n        message: `Grafana check failed: ${error instanceof Error ? error.message : 'Service not running'}`,\n        details: { url: grafanaUrl }\n      };\n    }\n  }\n\n  private async checkModelInit(): Promise<{ status: ServiceHealth['status']; message?: string; details?: any }> {\n    // Model init is a one-time service that downloads models\n    // Check if models exist to infer if init was successful\n    try {\n      const modelsResponse = await axios.get(`${process.env.OLLAMA_BASE_URL || 'http://ollama:11434'}/api/tags`);\n      const models = modelsResponse.data.models || [];\n      \n      return {\n        status: models.length > 0 ? 'healthy' : 'degraded',\n        message: models.length > 0 ? 'Models initialized successfully' : 'No models found',\n        details: { modelCount: models.length, models: models.map((m: any) => m.name) }\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        message: `Model init check failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  private async performFullHealthCheck(): Promise<void> {\n    console.log('üîç Performing full system health check...');\n    \n    // Check all services in parallel\n    const checkPromises = Array.from(this.services.keys()).map(serviceName => \n      this.checkServiceHealth(serviceName)\n    );\n    \n    await Promise.allSettled(checkPromises);\n    this.lastFullCheck = new Date();\n    \n    const systemHealth = this.getSystemHealth();\n    \n    this.emit('fullHealthCheckComplete', {\n      systemHealth,\n      timestamp: this.lastFullCheck\n    });\n    \n    console.log(`‚úÖ Full health check complete: ${systemHealth.healthyServices}/${systemHealth.totalServices} services healthy`);\n  }\n\n  public getSystemHealth(): SystemHealth {\n    const services = new Map(this.services);\n    const totalServices = services.size;\n    let healthyServices = 0;\n    let degradedServices = 0;\n    let unhealthyServices = 0;\n    let offlineServices = 0;\n\n    for (const service of services.values()) {\n      switch (service.status) {\n        case 'healthy':\n          healthyServices++;\n          break;\n        case 'degraded':\n          degradedServices++;\n          break;\n        case 'unhealthy':\n          unhealthyServices++;\n          break;\n        case 'offline':\n          offlineServices++;\n          break;\n      }\n    }\n\n    // Determine overall status\n    let overallStatus: SystemHealth['overallStatus'] = 'healthy';\n    \n    // Check critical services\n    const criticalServices = Array.from(services.values()).filter(s => s.criticalService);\n    const criticalUnhealthy = criticalServices.filter(s => s.status === 'unhealthy' || s.status === 'offline');\n    const criticalDegraded = criticalServices.filter(s => s.status === 'degraded');\n    \n    if (criticalUnhealthy.length > 0) {\n      overallStatus = 'unhealthy';\n    } else if (criticalDegraded.length > 0 || unhealthyServices > 0) {\n      overallStatus = 'degraded';\n    }\n\n    return {\n      overallStatus,\n      services,\n      lastFullCheck: this.lastFullCheck,\n      totalServices,\n      healthyServices,\n      degradedServices,\n      unhealthyServices,\n      offlineServices\n    };\n  }\n\n  public getServiceHealth(serviceName: string): ServiceHealth | undefined {\n    return this.services.get(serviceName);\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.isRunning) return;\n\n    console.log('üîÑ Stopping Health Orchestrator...');\n    this.isRunning = false;\n\n    // Clear all intervals\n    for (const interval of this.checkIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.checkIntervals.clear();\n\n    // Shutdown model monitor\n    if (this.modelMonitor) {\n      await this.modelMonitor.shutdown();\n    }\n\n    console.log('‚úÖ Health Orchestrator stopped');\n    this.emit('stopped');\n  }\n\n  public updateConfig(newConfig: Partial<HealthCheckConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('‚öôÔ∏è Health Orchestrator configuration updated');\n  }\n\n  public getCircuitBreakerStatus(): Map<string, { isOpen: boolean; failures: number; lastFailure: Date }> {\n    return new Map(this.circuitBreakers);\n  }\n\n  public getFallbackStatus(): Record<string, boolean> {\n    const status: Record<string, boolean> = {};\n    for (const [serviceName] of this.fallbackMechanisms) {\n      status[serviceName] = true;\n    }\n    return status;\n  }\n\n  public getServiceDependencyMap(): Record<string, string[]> {\n    return { ...this.config.dependencies };\n  }\n\n  public async testFallbackMechanism(serviceName: string): Promise<any> {\n    const fallback = this.fallbackMechanisms.get(serviceName);\n    if (!fallback) {\n      throw new Error(`No fallback mechanism configured for ${serviceName}`);\n    }\n    return await fallback();\n  }\n}\n\nexport const healthOrchestrator = new HealthOrchestrator();"],"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","ignoreList":[]}