925a50bc3fd5b9a6de866da6fc1446a3
"use strict";

/* istanbul ignore next */
function cov_1j9tyt0n6l() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/security.ts";
  var hash = "d1b4256f22c6f78da839b8fa480608767f82dc3d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/security.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "7": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "8": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "9": {
        start: {
          line: 12,
          column: 27
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "10": {
        start: {
          line: 13,
          column: 34
        },
        end: {
          line: 13,
          column: 85
        }
      },
      "11": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "12": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "13": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "15": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 74
        }
      },
      "16": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "18": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "19": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "20": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 25
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "23": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "24": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "25": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 76
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 25
        }
      },
      "27": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "28": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 80,
          column: 3
        }
      },
      "29": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "30": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 68,
          column: 83
        }
      },
      "31": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "32": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "33": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "34": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "35": {
        start: {
          line: 84,
          column: 65
        },
        end: {
          line: 84,
          column: 74
        }
      },
      "36": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 26
        }
      },
      "37": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 87,
          column: 40
        }
      },
      "38": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 40
        }
      },
      "39": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 89,
          column: 32
        }
      },
      "40": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 32
        }
      },
      "41": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 91,
          column: 36
        }
      },
      "42": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 36
        }
      },
      "43": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 93,
          column: 44
        }
      },
      "44": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 44
        }
      },
      "45": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "46": {
        start: {
          line: 95,
          column: 23
        },
        end: {
          line: 95,
          column: 76
        }
      },
      "47": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "48": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "49": {
        start: {
          line: 108,
          column: 0
        },
        end: {
          line: 132,
          column: 3
        }
      },
      "50": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "51": {
        start: {
          line: 110,
          column: 61
        },
        end: {
          line: 110,
          column: 69
        }
      },
      "52": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "53": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "54": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "55": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 70
        }
      },
      "56": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "57": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 165,
          column: 3
        }
      },
      "58": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "59": {
        start: {
          line: 136,
          column: 81
        },
        end: {
          line: 136,
          column: 90
        }
      },
      "60": {
        start: {
          line: 137,
          column: 23
        },
        end: {
          line: 137,
          column: 25
        }
      },
      "61": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 139,
          column: 44
        }
      },
      "62": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 44
        }
      },
      "63": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 141,
          column: 46
        }
      },
      "64": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 46
        }
      },
      "65": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 143,
          column: 42
        }
      },
      "66": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 42
        }
      },
      "67": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 145,
          column: 43
        }
      },
      "68": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 43
        }
      },
      "69": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "70": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 150,
          column: 14
        }
      },
      "71": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 39
        }
      },
      "72": {
        start: {
          line: 153,
          column: 21
        },
        end: {
          line: 153,
          column: 61
        }
      },
      "73": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "74": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "75": {
        start: {
          line: 166,
          column: 0
        },
        end: {
          line: 182,
          column: 3
        }
      },
      "76": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "77": {
        start: {
          line: 168,
          column: 33
        },
        end: {
          line: 168,
          column: 42
        }
      },
      "78": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 172,
          column: 21
        }
      },
      "79": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 85
        }
      },
      "80": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 27
        }
      },
      "81": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "82": {
        start: {
          line: 183,
          column: 0
        },
        end: {
          line: 194,
          column: 3
        }
      },
      "83": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 193,
          column: 5
        }
      },
      "84": {
        start: {
          line: 185,
          column: 22
        },
        end: {
          line: 185,
          column: 65
        }
      },
      "85": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 24
        }
      },
      "86": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "87": {
        start: {
          line: 196,
          column: 0
        },
        end: {
          line: 223,
          column: 3
        }
      },
      "88": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 222,
          column: 5
        }
      },
      "89": {
        start: {
          line: 198,
          column: 80
        },
        end: {
          line: 198,
          column: 89
        }
      },
      "90": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 199,
          column: 26
        }
      },
      "91": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 201,
          column: 51
        }
      },
      "92": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 51
        }
      },
      "93": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 203,
          column: 43
        }
      },
      "94": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 43
        }
      },
      "95": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 205,
          column: 59
        }
      },
      "96": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 59
        }
      },
      "97": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 207,
          column: 51
        }
      },
      "98": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 51
        }
      },
      "99": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 209,
          column: 44
        }
      },
      "100": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 44
        }
      },
      "101": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 40
        }
      },
      "102": {
        start: {
          line: 211,
          column: 23
        },
        end: {
          line: 211,
          column: 67
        }
      },
      "103": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "104": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      },
      "105": {
        start: {
          line: 224,
          column: 0
        },
        end: {
          line: 247,
          column: 3
        }
      },
      "106": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 246,
          column: 5
        }
      },
      "107": {
        start: {
          line: 226,
          column: 28
        },
        end: {
          line: 226,
          column: 38
        }
      },
      "108": {
        start: {
          line: 227,
          column: 35
        },
        end: {
          line: 227,
          column: 43
        }
      },
      "109": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "110": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "111": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 91
        }
      },
      "112": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "113": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 68
        }
      },
      "114": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 87
        }
      },
      "115": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "116": {
        start: {
          line: 248,
          column: 0
        },
        end: {
          line: 271,
          column: 3
        }
      },
      "117": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 270,
          column: 5
        }
      },
      "118": {
        start: {
          line: 250,
          column: 28
        },
        end: {
          line: 250,
          column: 38
        }
      },
      "119": {
        start: {
          line: 251,
          column: 31
        },
        end: {
          line: 251,
          column: 39
        }
      },
      "120": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "121": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 15
        }
      },
      "122": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 257,
          column: 83
        }
      },
      "123": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "124": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 64
        }
      },
      "125": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 83
        }
      },
      "126": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 269,
          column: 11
        }
      },
      "127": {
        start: {
          line: 273,
          column: 0
        },
        end: {
          line: 284,
          column: 3
        }
      },
      "128": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 283,
          column: 5
        }
      },
      "129": {
        start: {
          line: 275,
          column: 22
        },
        end: {
          line: 275,
          column: 58
        }
      },
      "130": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 28
        }
      },
      "131": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "132": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 296,
          column: 3
        }
      },
      "133": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 295,
          column: 5
        }
      },
      "134": {
        start: {
          line: 287,
          column: 21
        },
        end: {
          line: 287,
          column: 64
        }
      },
      "135": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 35
        }
      },
      "136": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      },
      "137": {
        start: {
          line: 297,
          column: 0
        },
        end: {
          line: 314,
          column: 3
        }
      },
      "138": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "139": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 37
        }
      },
      "140": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 78
        }
      },
      "141": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "142": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 62
        }
      },
      "143": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 62
        }
      },
      "144": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "145": {
        start: {
          line: 315,
          column: 0
        },
        end: {
          line: 332,
          column: 3
        }
      },
      "146": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 331,
          column: 5
        }
      },
      "147": {
        start: {
          line: 317,
          column: 27
        },
        end: {
          line: 317,
          column: 37
        }
      },
      "148": {
        start: {
          line: 318,
          column: 24
        },
        end: {
          line: 318,
          column: 68
        }
      },
      "149": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "150": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 62
        }
      },
      "151": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 62
        }
      },
      "152": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 330,
          column: 11
        }
      },
      "153": {
        start: {
          line: 334,
          column: 0
        },
        end: {
          line: 345,
          column: 3
        }
      },
      "154": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 344,
          column: 5
        }
      },
      "155": {
        start: {
          line: 336,
          column: 25
        },
        end: {
          line: 336,
          column: 64
        }
      },
      "156": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 31
        }
      },
      "157": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 343,
          column: 11
        }
      },
      "158": {
        start: {
          line: 346,
          column: 0
        },
        end: {
          line: 357,
          column: 3
        }
      },
      "159": {
        start: {
          line: 347,
          column: 4
        },
        end: {
          line: 356,
          column: 5
        }
      },
      "160": {
        start: {
          line: 348,
          column: 24
        },
        end: {
          line: 348,
          column: 70
        }
      },
      "161": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 38
        }
      },
      "162": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 355,
          column: 11
        }
      },
      "163": {
        start: {
          line: 358,
          column: 0
        },
        end: {
          line: 375,
          column: 3
        }
      },
      "164": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 374,
          column: 5
        }
      },
      "165": {
        start: {
          line: 360,
          column: 30
        },
        end: {
          line: 360,
          column: 40
        }
      },
      "166": {
        start: {
          line: 361,
          column: 24
        },
        end: {
          line: 361,
          column: 84
        }
      },
      "167": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "168": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 65
        }
      },
      "169": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 65
        }
      },
      "170": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 373,
          column: 11
        }
      },
      "171": {
        start: {
          line: 376,
          column: 0
        },
        end: {
          line: 393,
          column: 3
        }
      },
      "172": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 392,
          column: 5
        }
      },
      "173": {
        start: {
          line: 378,
          column: 30
        },
        end: {
          line: 378,
          column: 40
        }
      },
      "174": {
        start: {
          line: 379,
          column: 24
        },
        end: {
          line: 379,
          column: 74
        }
      },
      "175": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "176": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 65
        }
      },
      "177": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 65
        }
      },
      "178": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 391,
          column: 11
        }
      },
      "179": {
        start: {
          line: 395,
          column: 0
        },
        end: {
          line: 410,
          column: 3
        }
      },
      "180": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 409,
          column: 5
        }
      },
      "181": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 75
        }
      },
      "182": {
        start: {
          line: 398,
          column: 29
        },
        end: {
          line: 398,
          column: 75
        }
      },
      "183": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 402,
          column: 11
        }
      },
      "184": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 408,
          column: 11
        }
      },
      "185": {
        start: {
          line: 411,
          column: 0
        },
        end: {
          line: 423,
          column: 3
        }
      },
      "186": {
        start: {
          line: 412,
          column: 4
        },
        end: {
          line: 422,
          column: 5
        }
      },
      "187": {
        start: {
          line: 413,
          column: 30
        },
        end: {
          line: 413,
          column: 38
        }
      },
      "188": {
        start: {
          line: 414,
          column: 23
        },
        end: {
          line: 414,
          column: 93
        }
      },
      "189": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 25
        }
      },
      "190": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 421,
          column: 11
        }
      },
      "191": {
        start: {
          line: 424,
          column: 0
        },
        end: {
          line: 436,
          column: 3
        }
      },
      "192": {
        start: {
          line: 425,
          column: 4
        },
        end: {
          line: 435,
          column: 5
        }
      },
      "193": {
        start: {
          line: 426,
          column: 33
        },
        end: {
          line: 426,
          column: 42
        }
      },
      "194": {
        start: {
          line: 427,
          column: 24
        },
        end: {
          line: 427,
          column: 80
        }
      },
      "195": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 30
        }
      },
      "196": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 434,
          column: 11
        }
      },
      "197": {
        start: {
          line: 437,
          column: 0
        },
        end: {
          line: 458,
          column: 3
        }
      },
      "198": {
        start: {
          line: 438,
          column: 4
        },
        end: {
          line: 457,
          column: 5
        }
      },
      "199": {
        start: {
          line: 439,
          column: 61
        },
        end: {
          line: 439,
          column: 70
        }
      },
      "200": {
        start: {
          line: 440,
          column: 24
        },
        end: {
          line: 440,
          column: 26
        }
      },
      "201": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 442,
          column: 40
        }
      },
      "202": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 40
        }
      },
      "203": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 444,
          column: 42
        }
      },
      "204": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 42
        }
      },
      "205": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 446,
          column: 40
        }
      },
      "206": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 40
        }
      },
      "207": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 448,
          column: 53
        }
      },
      "208": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 53
        }
      },
      "209": {
        start: {
          line: 449,
          column: 23
        },
        end: {
          line: 449,
          column: 70
        }
      },
      "210": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 29
        }
      },
      "211": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 456,
          column: 11
        }
      },
      "212": {
        start: {
          line: 459,
          column: 0
        },
        end: {
          line: 471,
          column: 3
        }
      },
      "213": {
        start: {
          line: 460,
          column: 4
        },
        end: {
          line: 470,
          column: 5
        }
      },
      "214": {
        start: {
          line: 461,
          column: 28
        },
        end: {
          line: 461,
          column: 38
        }
      },
      "215": {
        start: {
          line: 462,
          column: 23
        },
        end: {
          line: 462,
          column: 75
        }
      },
      "216": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 25
        }
      },
      "217": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 469,
          column: 11
        }
      },
      "218": {
        start: {
          line: 473,
          column: 0
        },
        end: {
          line: 505,
          column: 3
        }
      },
      "219": {
        start: {
          line: 474,
          column: 4
        },
        end: {
          line: 504,
          column: 5
        }
      },
      "220": {
        start: {
          line: 475,
          column: 75
        },
        end: {
          line: 480,
          column: 10
        }
      },
      "221": {
        start: {
          line: 481,
          column: 29
        },
        end: {
          line: 481,
          column: 79
        }
      },
      "222": {
        start: {
          line: 482,
          column: 29
        },
        end: {
          line: 482,
          column: 88
        }
      },
      "223": {
        start: {
          line: 483,
          column: 31
        },
        end: {
          line: 483,
          column: 73
        }
      },
      "224": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 497,
          column: 11
        }
      },
      "225": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 503,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 22
          },
          end: {
            line: 9,
            column: 23
          }
        },
        loc: {
          start: {
            line: 9,
            column: 42
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 34
          },
          end: {
            line: 30,
            column: 35
          }
        },
        loc: {
          start: {
            line: 30,
            column: 54
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 27
          }
        },
        loc: {
          start: {
            line: 42,
            column: 46
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 37
          }
        },
        loc: {
          start: {
            line: 54,
            column: 56
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 35
          },
          end: {
            line: 66,
            column: 36
          }
        },
        loc: {
          start: {
            line: 66,
            column: 55
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 23
          }
        },
        loc: {
          start: {
            line: 82,
            column: 36
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 23
          },
          end: {
            line: 108,
            column: 24
          }
        },
        loc: {
          start: {
            line: 108,
            column: 37
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 21
          }
        },
        loc: {
          start: {
            line: 134,
            column: 34
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 134
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 166,
            column: 29
          },
          end: {
            line: 166,
            column: 30
          }
        },
        loc: {
          start: {
            line: 166,
            column: 49
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 166
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 31
          },
          end: {
            line: 183,
            column: 32
          }
        },
        loc: {
          start: {
            line: 183,
            column: 45
          },
          end: {
            line: 194,
            column: 1
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 196,
            column: 22
          },
          end: {
            line: 196,
            column: 23
          }
        },
        loc: {
          start: {
            line: 196,
            column: 36
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 196
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 224,
            column: 45
          },
          end: {
            line: 224,
            column: 46
          }
        },
        loc: {
          start: {
            line: 224,
            column: 59
          },
          end: {
            line: 247,
            column: 1
          }
        },
        line: 224
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 248,
            column: 41
          },
          end: {
            line: 248,
            column: 42
          }
        },
        loc: {
          start: {
            line: 248,
            column: 55
          },
          end: {
            line: 271,
            column: 1
          }
        },
        line: 248
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 273,
            column: 27
          },
          end: {
            line: 273,
            column: 28
          }
        },
        loc: {
          start: {
            line: 273,
            column: 41
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 273
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 285,
            column: 28
          },
          end: {
            line: 285,
            column: 29
          }
        },
        loc: {
          start: {
            line: 285,
            column: 42
          },
          end: {
            line: 296,
            column: 1
          }
        },
        line: 285
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 297,
            column: 35
          },
          end: {
            line: 297,
            column: 36
          }
        },
        loc: {
          start: {
            line: 297,
            column: 49
          },
          end: {
            line: 314,
            column: 1
          }
        },
        line: 297
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 315,
            column: 39
          }
        },
        loc: {
          start: {
            line: 315,
            column: 52
          },
          end: {
            line: 332,
            column: 1
          }
        },
        line: 315
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 334,
            column: 37
          },
          end: {
            line: 334,
            column: 38
          }
        },
        loc: {
          start: {
            line: 334,
            column: 51
          },
          end: {
            line: 345,
            column: 1
          }
        },
        line: 334
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 346,
            column: 38
          },
          end: {
            line: 346,
            column: 39
          }
        },
        loc: {
          start: {
            line: 346,
            column: 52
          },
          end: {
            line: 357,
            column: 1
          }
        },
        line: 346
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 358,
            column: 48
          },
          end: {
            line: 358,
            column: 49
          }
        },
        loc: {
          start: {
            line: 358,
            column: 62
          },
          end: {
            line: 375,
            column: 1
          }
        },
        line: 358
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 376,
            column: 51
          },
          end: {
            line: 376,
            column: 52
          }
        },
        loc: {
          start: {
            line: 376,
            column: 65
          },
          end: {
            line: 393,
            column: 1
          }
        },
        line: 376
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 395,
            column: 33
          },
          end: {
            line: 395,
            column: 34
          }
        },
        loc: {
          start: {
            line: 395,
            column: 47
          },
          end: {
            line: 410,
            column: 1
          }
        },
        line: 395
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 411,
            column: 32
          },
          end: {
            line: 411,
            column: 33
          }
        },
        loc: {
          start: {
            line: 411,
            column: 52
          },
          end: {
            line: 423,
            column: 1
          }
        },
        line: 411
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 424,
            column: 34
          },
          end: {
            line: 424,
            column: 35
          }
        },
        loc: {
          start: {
            line: 424,
            column: 48
          },
          end: {
            line: 436,
            column: 1
          }
        },
        line: 424
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 437,
            column: 33
          },
          end: {
            line: 437,
            column: 34
          }
        },
        loc: {
          start: {
            line: 437,
            column: 47
          },
          end: {
            line: 458,
            column: 1
          }
        },
        line: 437
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 459,
            column: 47
          },
          end: {
            line: 459,
            column: 48
          }
        },
        loc: {
          start: {
            line: 459,
            column: 67
          },
          end: {
            line: 471,
            column: 1
          }
        },
        line: 459
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 473,
            column: 25
          },
          end: {
            line: 473,
            column: 26
          }
        },
        loc: {
          start: {
            line: 473,
            column: 45
          },
          end: {
            line: 505,
            column: 1
          }
        },
        line: 473
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 46
          },
          end: {
            line: 25,
            column: 59
          }
        }, {
          start: {
            line: 25,
            column: 62
          },
          end: {
            line: 25,
            column: 77
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 21
          },
          end: {
            line: 38,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 46
          },
          end: {
            line: 38,
            column: 59
          }
        }, {
          start: {
            line: 38,
            column: 62
          },
          end: {
            line: 38,
            column: 77
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 50,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 50,
            column: 59
          }
        }, {
          start: {
            line: 50,
            column: 62
          },
          end: {
            line: 50,
            column: 77
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 21
          },
          end: {
            line: 62,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 46
          },
          end: {
            line: 62,
            column: 59
          }
        }, {
          start: {
            line: 62,
            column: 62
          },
          end: {
            line: 62,
            column: 77
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 46
          },
          end: {
            line: 77,
            column: 59
          }
        }, {
          start: {
            line: 77,
            column: 62
          },
          end: {
            line: 77,
            column: 77
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 47
          },
          end: {
            line: 84,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 84,
            column: 55
          },
          end: {
            line: 84,
            column: 60
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 87,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 87,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 89,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 89,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 91,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 91,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 93,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 93,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 21
          },
          end: {
            line: 104,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 104,
            column: 59
          }
        }, {
          start: {
            line: 104,
            column: 62
          },
          end: {
            line: 104,
            column: 77
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 21
          }
        }, {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 111,
            column: 30
          }
        }, {
          start: {
            line: 111,
            column: 34
          },
          end: {
            line: 111,
            column: 41
          }
        }, {
          start: {
            line: 111,
            column: 45
          },
          end: {
            line: 111,
            column: 53
          }
        }],
        line: 111
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 28
          }
        }, {
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 121,
            column: 34
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 129,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 46
          },
          end: {
            line: 129,
            column: 59
          }
        }, {
          start: {
            line: 129,
            column: 62
          },
          end: {
            line: 129,
            column: 77
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 136,
            column: 63
          },
          end: {
            line: 136,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 71
          },
          end: {
            line: 136,
            column: 76
          }
        }],
        line: 136
      },
      "16": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 139,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 139,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "17": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 141,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 141,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "18": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 143,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 143,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "19": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 145,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 145,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "20": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "21": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: 146,
            column: 21
          },
          end: {
            line: 146,
            column: 26
          }
        }],
        line: 146
      },
      "22": {
        loc: {
          start: {
            line: 148,
            column: 23
          },
          end: {
            line: 148,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 31
          },
          end: {
            line: 148,
            column: 46
          }
        }, {
          start: {
            line: 148,
            column: 49
          },
          end: {
            line: 148,
            column: 60
          }
        }],
        line: 148
      },
      "23": {
        loc: {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 149,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 29
          },
          end: {
            line: 149,
            column: 44
          }
        }, {
          start: {
            line: 149,
            column: 47
          },
          end: {
            line: 149,
            column: 57
          }
        }],
        line: 149
      },
      "24": {
        loc: {
          start: {
            line: 162,
            column: 21
          },
          end: {
            line: 162,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 46
          },
          end: {
            line: 162,
            column: 59
          }
        }, {
          start: {
            line: 162,
            column: 62
          },
          end: {
            line: 162,
            column: 77
          }
        }],
        line: 162
      },
      "25": {
        loc: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 172,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 45
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 172,
            column: 21
          }
        }],
        line: 169
      },
      "26": {
        loc: {
          start: {
            line: 169,
            column: 27
          },
          end: {
            line: 169,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 27
          },
          end: {
            line: 169,
            column: 32
          }
        }, {
          start: {
            line: 169,
            column: 36
          },
          end: {
            line: 169,
            column: 41
          }
        }],
        line: 169
      },
      "27": {
        loc: {
          start: {
            line: 170,
            column: 19
          },
          end: {
            line: 170,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 27
          },
          end: {
            line: 170,
            column: 42
          }
        }, {
          start: {
            line: 170,
            column: 45
          },
          end: {
            line: 170,
            column: 87
          }
        }],
        line: 170
      },
      "28": {
        loc: {
          start: {
            line: 171,
            column: 17
          },
          end: {
            line: 171,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 25
          },
          end: {
            line: 171,
            column: 40
          }
        }, {
          start: {
            line: 171,
            column: 43
          },
          end: {
            line: 171,
            column: 53
          }
        }],
        line: 171
      },
      "29": {
        loc: {
          start: {
            line: 179,
            column: 21
          },
          end: {
            line: 179,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 46
          },
          end: {
            line: 179,
            column: 59
          }
        }, {
          start: {
            line: 179,
            column: 62
          },
          end: {
            line: 179,
            column: 77
          }
        }],
        line: 179
      },
      "30": {
        loc: {
          start: {
            line: 191,
            column: 21
          },
          end: {
            line: 191,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 46
          },
          end: {
            line: 191,
            column: 59
          }
        }, {
          start: {
            line: 191,
            column: 62
          },
          end: {
            line: 191,
            column: 77
          }
        }],
        line: 191
      },
      "31": {
        loc: {
          start: {
            line: 198,
            column: 63
          },
          end: {
            line: 198,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 198,
            column: 71
          },
          end: {
            line: 198,
            column: 75
          }
        }],
        line: 198
      },
      "32": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "33": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 203,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 203,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "34": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 205,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 205,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "35": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 207,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 207,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "36": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 209,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 209,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "37": {
        loc: {
          start: {
            line: 220,
            column: 21
          },
          end: {
            line: 220,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 46
          },
          end: {
            line: 220,
            column: 59
          }
        }, {
          start: {
            line: 220,
            column: 62
          },
          end: {
            line: 220,
            column: 77
          }
        }],
        line: 220
      },
      "38": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "39": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: 237,
            column: 13
          },
          end: {
            line: 239,
            column: 9
          }
        }],
        line: 234
      },
      "40": {
        loc: {
          start: {
            line: 244,
            column: 21
          },
          end: {
            line: 244,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 46
          },
          end: {
            line: 244,
            column: 59
          }
        }, {
          start: {
            line: 244,
            column: 62
          },
          end: {
            line: 244,
            column: 77
          }
        }],
        line: 244
      },
      "41": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "42": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: 261,
            column: 13
          },
          end: {
            line: 263,
            column: 9
          }
        }],
        line: 258
      },
      "43": {
        loc: {
          start: {
            line: 268,
            column: 21
          },
          end: {
            line: 268,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 268,
            column: 59
          }
        }, {
          start: {
            line: 268,
            column: 62
          },
          end: {
            line: 268,
            column: 77
          }
        }],
        line: 268
      },
      "44": {
        loc: {
          start: {
            line: 281,
            column: 21
          },
          end: {
            line: 281,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 46
          },
          end: {
            line: 281,
            column: 59
          }
        }, {
          start: {
            line: 281,
            column: 62
          },
          end: {
            line: 281,
            column: 77
          }
        }],
        line: 281
      },
      "45": {
        loc: {
          start: {
            line: 293,
            column: 21
          },
          end: {
            line: 293,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 46
          },
          end: {
            line: 293,
            column: 59
          }
        }, {
          start: {
            line: 293,
            column: 62
          },
          end: {
            line: 293,
            column: 77
          }
        }],
        line: 293
      },
      "46": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        }, {
          start: {
            line: 304,
            column: 13
          },
          end: {
            line: 306,
            column: 9
          }
        }],
        line: 301
      },
      "47": {
        loc: {
          start: {
            line: 311,
            column: 21
          },
          end: {
            line: 311,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 46
          },
          end: {
            line: 311,
            column: 59
          }
        }, {
          start: {
            line: 311,
            column: 62
          },
          end: {
            line: 311,
            column: 77
          }
        }],
        line: 311
      },
      "48": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: 322,
            column: 13
          },
          end: {
            line: 324,
            column: 9
          }
        }],
        line: 319
      },
      "49": {
        loc: {
          start: {
            line: 329,
            column: 21
          },
          end: {
            line: 329,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 329,
            column: 46
          },
          end: {
            line: 329,
            column: 59
          }
        }, {
          start: {
            line: 329,
            column: 62
          },
          end: {
            line: 329,
            column: 77
          }
        }],
        line: 329
      },
      "50": {
        loc: {
          start: {
            line: 342,
            column: 21
          },
          end: {
            line: 342,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 342,
            column: 46
          },
          end: {
            line: 342,
            column: 59
          }
        }, {
          start: {
            line: 342,
            column: 62
          },
          end: {
            line: 342,
            column: 77
          }
        }],
        line: 342
      },
      "51": {
        loc: {
          start: {
            line: 354,
            column: 21
          },
          end: {
            line: 354,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 354,
            column: 46
          },
          end: {
            line: 354,
            column: 59
          }
        }, {
          start: {
            line: 354,
            column: 62
          },
          end: {
            line: 354,
            column: 77
          }
        }],
        line: 354
      },
      "52": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        }, {
          start: {
            line: 365,
            column: 13
          },
          end: {
            line: 367,
            column: 9
          }
        }],
        line: 362
      },
      "53": {
        loc: {
          start: {
            line: 372,
            column: 21
          },
          end: {
            line: 372,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 372,
            column: 46
          },
          end: {
            line: 372,
            column: 59
          }
        }, {
          start: {
            line: 372,
            column: 62
          },
          end: {
            line: 372,
            column: 77
          }
        }],
        line: 372
      },
      "54": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: 383,
            column: 13
          },
          end: {
            line: 385,
            column: 9
          }
        }],
        line: 380
      },
      "55": {
        loc: {
          start: {
            line: 390,
            column: 21
          },
          end: {
            line: 390,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 46
          },
          end: {
            line: 390,
            column: 59
          }
        }, {
          start: {
            line: 390,
            column: 62
          },
          end: {
            line: 390,
            column: 77
          }
        }],
        line: 390
      },
      "56": {
        loc: {
          start: {
            line: 407,
            column: 21
          },
          end: {
            line: 407,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 407,
            column: 46
          },
          end: {
            line: 407,
            column: 59
          }
        }, {
          start: {
            line: 407,
            column: 62
          },
          end: {
            line: 407,
            column: 77
          }
        }],
        line: 407
      },
      "57": {
        loc: {
          start: {
            line: 420,
            column: 21
          },
          end: {
            line: 420,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 46
          },
          end: {
            line: 420,
            column: 59
          }
        }, {
          start: {
            line: 420,
            column: 62
          },
          end: {
            line: 420,
            column: 77
          }
        }],
        line: 420
      },
      "58": {
        loc: {
          start: {
            line: 426,
            column: 16
          },
          end: {
            line: 426,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 426,
            column: 24
          },
          end: {
            line: 426,
            column: 28
          }
        }],
        line: 426
      },
      "59": {
        loc: {
          start: {
            line: 433,
            column: 21
          },
          end: {
            line: 433,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 433,
            column: 46
          },
          end: {
            line: 433,
            column: 59
          }
        }, {
          start: {
            line: 433,
            column: 62
          },
          end: {
            line: 433,
            column: 77
          }
        }],
        line: 433
      },
      "60": {
        loc: {
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 442,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 442,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "61": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 444,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 444,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "62": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 446,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 446,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "63": {
        loc: {
          start: {
            line: 447,
            column: 8
          },
          end: {
            line: 448,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 8
          },
          end: {
            line: 448,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "64": {
        loc: {
          start: {
            line: 455,
            column: 21
          },
          end: {
            line: 455,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 46
          },
          end: {
            line: 455,
            column: 59
          }
        }, {
          start: {
            line: 455,
            column: 62
          },
          end: {
            line: 455,
            column: 77
          }
        }],
        line: 455
      },
      "65": {
        loc: {
          start: {
            line: 468,
            column: 21
          },
          end: {
            line: 468,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 468,
            column: 46
          },
          end: {
            line: 468,
            column: 59
          }
        }, {
          start: {
            line: 468,
            column: 62
          },
          end: {
            line: 468,
            column: 77
          }
        }],
        line: 468
      },
      "66": {
        loc: {
          start: {
            line: 502,
            column: 21
          },
          end: {
            line: 502,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 502,
            column: 46
          },
          end: {
            line: 502,
            column: 59
          }
        }, {
          start: {
            line: 502,
            column: 62
          },
          end: {
            line: 502,
            column: 77
          }
        }],
        line: 502
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/security.ts",
      mappings: ";;;AAAA,qCAAoD;AACpD,mDAW8B;AAE9B,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AA6gBL,gCAAc;AA3gBjC,gCAAgC;AAChC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC1D,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,0BAAe,CAAC,kBAAkB,EAAE,CAAC;QACrD,MAAM,UAAU,GAAG,yBAAc,CAAC,kBAAkB,EAAE,CAAC;QACvD,MAAM,iBAAiB,GAAG,4BAAiB,CAAC,oBAAoB,EAAE,CAAC;QAEnE,GAAG,CAAC,IAAI,CAAC;YACP,MAAM,EAAE,QAAQ;YAChB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,QAAQ,EAAE,OAAO;YACjB,MAAM,EAAE,UAAU;YAClB,UAAU,EAAE,iBAAiB;SAC9B,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,+BAA+B;YACtC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,mCAAmC;AACnC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACtE,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,0BAAe,CAAC,gBAAgB,EAAE,CAAC;QACxD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,wBAAwB;YAC/B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3C,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,0BAAe,CAAC,QAAQ,EAAE,CAAC;QAChD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,kBAAkB;YACzB,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACrD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,0BAAe,CAAC,kBAAkB,EAAE,CAAC;QAC1D,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,4BAA4B;YACnC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,0BAAe,CAAC,wBAAwB,EAAE,CAAC;QACjE,GAAG,CAAC,IAAI,CAAC;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,OAAO;SACR,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,2BAA2B;YAClC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,4BAA4B;AAC5B,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACjC,IAAI,CAAC;QACH,MAAM,EACJ,QAAQ,EACR,IAAI,EACJ,MAAM,EACN,KAAK,EACL,KAAK,GAAG,KAAK,EACd,GAAG,GAAG,CAAC,KAAK,CAAC;QAEd,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,IAAI,QAAQ;YAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1C,IAAI,IAAI;YAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QAC9B,IAAI,MAAM;YAAE,OAAO,CAAC,MAAM,GAAG,MAAgB,CAAC;QAC9C,IAAI,KAAK;YAAE,OAAO,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC;QACrD,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAe,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAG,0BAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC1D,GAAG,CAAC,IAAI,CAAC;YACP,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,+BAA+B;YACtC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAClC,IAAI,CAAC;QACH,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE9D,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAC9C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,0DAA0D;aAClE,CAAC,CAAC;QACL,CAAC;QAED,0BAAe,CAAC,gBAAgB,CAAC;YAC/B,QAAQ;YACR,IAAI;YACJ,MAAM;YACN,OAAO;YACP,OAAO,EAAE,OAAO,IAAI,EAAE;YACtB,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,2BAA2B,EAAE,CAAC,CAAC;IAChE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,8BAA8B;YACrC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,4BAA4B;AAC5B,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC/B,IAAI,CAAC;QACH,MAAM,EACJ,KAAK,EACL,MAAM,EACN,IAAI,EACJ,UAAU,EACV,KAAK,EACL,KAAK,EACL,KAAK,GAAG,KAAK,EACd,GAAG,GAAG,CAAC,KAAK,CAAC;QAEd,MAAM,MAAM,GAAc,EAAE,CAAC;QAC7B,IAAI,KAAK;YAAE,MAAM,CAAC,KAAK,GAAI,KAAgB,CAAC,KAAK,CAAC,GAAG,CAAQ,CAAC;QAC9D,IAAI,MAAM;YAAE,MAAM,CAAC,MAAM,GAAI,MAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,IAAI;YAAE,MAAM,CAAC,IAAI,GAAI,IAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,UAAU;YAAE,MAAM,CAAC,UAAU,GAAG,UAAoB,CAAC;QACzD,IAAI,KAAK,IAAI,KAAK,EAAE,CAAC;YACnB,MAAM,CAAC,SAAS,GAAG;gBACjB,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtD,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;aACpD,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAe,CAAC,CAAC;QAEzC,MAAM,IAAI,GAAG,wBAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC;YACP,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,oBAAoB;YAC3B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9C,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAEnC,MAAM,SAAS,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YACrF,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;SACpD,CAAC,CAAC,CAAC,SAAS,CAAC;QAEd,MAAM,QAAQ,GAAG,MAAM,wBAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QACnE,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,gCAAgC;YACvC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,wBAAa,CAAC,gBAAgB,EAAE,CAAC;QAC/C,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,8BAA8B;YACrC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,qBAAqB;AACrB,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACjC,IAAI,CAAC;QACH,MAAM,EACJ,QAAQ,EACR,IAAI,EACJ,YAAY,EACZ,QAAQ,EACR,KAAK,EACL,KAAK,GAAG,IAAI,EACb,GAAG,GAAG,CAAC,KAAK,CAAC;QAEd,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,IAAI,QAAQ;YAAE,OAAO,CAAC,QAAQ,GAAI,QAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjE,IAAI,IAAI;YAAE,OAAO,CAAC,IAAI,GAAI,IAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrD,IAAI,YAAY,KAAK,SAAS;YAAE,OAAO,CAAC,YAAY,GAAG,YAAY,KAAK,MAAM,CAAC;QAC/E,IAAI,QAAQ,KAAK,SAAS;YAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,KAAK,MAAM,CAAC;QACnE,IAAI,KAAK;YAAE,OAAO,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAe,CAAC,CAAC;QACrD,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAe,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAG,yBAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACjD,GAAG,CAAC,IAAI,CAAC;YACP,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,sBAAsB;YAC7B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACxD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,EAAE,cAAc,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEpC,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,kCAAkC;aAC1C,CAAC,CAAC;QACL,CAAC;QAED,MAAM,OAAO,GAAG,yBAAc,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAEzE,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iCAAiC,EAAE,CAAC,CAAC;QAC1D,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,yCAAyC,EAAE,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,6BAA6B;YACpC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEhC,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,8BAA8B;aACtC,CAAC,CAAC;QACL,CAAC;QAED,MAAM,OAAO,GAAG,yBAAc,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAEjE,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,6BAA6B,EAAE,CAAC,CAAC;QACtD,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qCAAqC,EAAE,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,yBAAyB;YAChC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,yBAAyB;AACzB,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACtC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,yBAAc,CAAC,QAAQ,EAAE,CAAC;QACxC,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACtB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,2BAA2B;YAClC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACvC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,yBAAc,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,6BAA6B;YACpC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,sBAAsB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9C,IAAI,CAAC;QACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC9B,MAAM,OAAO,GAAG,yBAAc,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAE5D,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,2BAA2B,EAAE,CAAC,CAAC;QACpD,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,6BAA6B;YACpC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACjD,IAAI,CAAC;QACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC9B,MAAM,OAAO,GAAG,yBAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAElD,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,2BAA2B,EAAE,CAAC,CAAC;QACpD,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,6BAA6B;YACpC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,mCAAmC;AACnC,MAAM,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAChD,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,yBAAc,CAAC,WAAW,EAAE,CAAC;QAC9C,GAAG,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACzB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,qCAAqC;YAC5C,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACjD,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,yBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,uCAAuC;YAC9C,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,mCAAmC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3D,IAAI,CAAC;QACH,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,MAAM,OAAO,GAAG,yBAAc,CAAC,aAAa,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAElE,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,8BAA8B,EAAE,CAAC,CAAC;QACvD,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,uCAAuC;YAC9C,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,mCAAmC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9D,IAAI,CAAC;QACH,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,MAAM,OAAO,GAAG,yBAAc,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAExD,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,8BAA8B,EAAE,CAAC,CAAC;QACvD,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,uCAAuC;YAC9C,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,uBAAuB;AACvB,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC5C,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,4BAAiB,CAAC,oBAAoB,EAAE,CAAC;QACzD,MAAM,YAAY,GAAG,4BAAiB,CAAC,eAAe,EAAE,CAAC;QAEzD,GAAG,CAAC,IAAI,CAAC;YACP,OAAO;YACP,YAAY;SACb,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,iCAAiC;YACxC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACjD,IAAI,CAAC;QACH,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAC/B,MAAM,MAAM,GAAG,MAAM,4BAAiB,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,wBAAwB;YAC/B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC7C,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QACnC,MAAM,OAAO,GAAG,4BAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAe,CAAC,CAAC,CAAC;QACxE,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,kCAAkC;YACzC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC5C,IAAI,CAAC;QACH,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAE/D,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,IAAI,QAAQ;YAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1C,IAAI,SAAS;YAAE,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;QAC7C,IAAI,QAAQ;YAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1C,IAAI,SAAS,KAAK,SAAS;YAAE,OAAO,CAAC,SAAS,GAAG,SAAS,KAAK,MAAM,CAAC;QAEtE,MAAM,MAAM,GAAG,4BAAiB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACpD,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,iCAAiC;YACxC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAChE,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,MAAM,GAAG,MAAM,4BAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,gCAAgC;YACvC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,8BAA8B;AAC9B,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,IAAI,CAAC;QACH,MAAM,CAAC,eAAe,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACnF,OAAO,CAAC,OAAO,CAAC,0BAAe,CAAC,kBAAkB,EAAE,CAAC;YACrD,OAAO,CAAC,OAAO,CAAC,yBAAc,CAAC,kBAAkB,EAAE,CAAC;YACpD,OAAO,CAAC,OAAO,CAAC,4BAAiB,CAAC,oBAAoB,EAAE,CAAC;YACzD,OAAO,CAAC,OAAO,CAAC,wBAAa,CAAC,gBAAgB,EAAE,CAAC;SAClD,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,yBAAc,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,0BAAe,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QACtE,MAAM,cAAc,GAAG,wBAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvD,GAAG,CAAC,IAAI,CAAC;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,OAAO,EAAE;gBACP,QAAQ,EAAE,eAAe;gBACzB,MAAM,EAAE,UAAU;gBAClB,UAAU,EAAE,iBAAiB;gBAC7B,IAAI,EAAE,QAAQ;aACf;YACD,MAAM,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,MAAM,EAAE,YAAY;gBACpB,QAAQ,EAAE,cAAc;aACzB;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,uCAAuC;YAC9C,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAClE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/security.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport {\n  securityMonitor,\n  logAggregator,\n  alertingSystem,\n  complianceChecker,\n  SecurityEvent,\n  LogFilter,\n  Alert,\n  AlertRule,\n  NotificationChannel,\n  ComplianceCheck\n} from '../services/security';\n\nconst router = Router();\n\n// Security monitoring endpoints\nrouter.get('/status', async (req: Request, res: Response) => {\n  try {\n    const metrics = securityMonitor.getSecurityMetrics();\n    const alertStats = alertingSystem.getAlertStatistics();\n    const complianceMetrics = complianceChecker.getComplianceMetrics();\n    \n    res.json({\n      status: 'active',\n      timestamp: new Date().toISOString(),\n      security: metrics,\n      alerts: alertStats,\n      compliance: complianceMetrics\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get security status',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Vulnerability scanning endpoints\nrouter.post('/scan/dependencies', async (req: Request, res: Response) => {\n  try {\n    const report = await securityMonitor.scanDependencies();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Dependency scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/scan/code', async (req, res) => {\n  try {\n    const report = await securityMonitor.scanCode();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Code scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/scan/infrastructure', async (req, res) => {\n  try {\n    const report = await securityMonitor.scanInfrastructure();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Infrastructure scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/scan/comprehensive', async (req, res) => {\n  try {\n    const reports = await securityMonitor.performComprehensiveScan();\n    res.json({\n      timestamp: new Date().toISOString(),\n      reports\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Comprehensive scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Security events endpoints\nrouter.get('/events', (req, res) => {\n  try {\n    const {\n      severity,\n      type,\n      source,\n      since,\n      limit = '100'\n    } = req.query;\n    \n    const filters: any = {};\n    if (severity) filters.severity = severity;\n    if (type) filters.type = type;\n    if (source) filters.source = source as string;\n    if (since) filters.since = new Date(since as string);\n    filters.limit = parseInt(limit as string);\n    \n    const events = securityMonitor.getSecurityEvents(filters);\n    res.json({\n      total: events.length,\n      events\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get security events',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/events', (req, res) => {\n  try {\n    const { severity, type, source, message, details } = req.body;\n    \n    if (!severity || !type || !source || !message) {\n      return res.status(400).json({\n        error: 'Missing required fields: severity, type, source, message'\n      });\n    }\n    \n    securityMonitor.logSecurityEvent({\n      severity,\n      type,\n      source,\n      message,\n      details: details || {},\n      resolved: false\n    });\n    \n    res.status(201).json({ status: 'Event logged successfully' });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to log security event',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Log aggregation endpoints\nrouter.get('/logs', (req, res) => {\n  try {\n    const {\n      level,\n      source,\n      tags,\n      searchTerm,\n      since,\n      until,\n      limit = '100'\n    } = req.query;\n    \n    const filter: LogFilter = {};\n    if (level) filter.level = (level as string).split(',') as any;\n    if (source) filter.source = (source as string).split(',');\n    if (tags) filter.tags = (tags as string).split(',');\n    if (searchTerm) filter.searchTerm = searchTerm as string;\n    if (since || until) {\n      filter.timeRange = {\n        start: since ? new Date(since as string) : new Date(0),\n        end: until ? new Date(until as string) : new Date()\n      };\n    }\n    filter.limit = parseInt(limit as string);\n    \n    const logs = logAggregator.getLogs(filter);\n    res.json({\n      total: logs.length,\n      logs\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get logs',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/logs/analysis', async (req, res) => {\n  try {\n    const { since, until } = req.query;\n    \n    const timeRange = (since || until) ? {\n      start: since ? new Date(since as string) : new Date(Date.now() - 24 * 60 * 60 * 1000),\n      end: until ? new Date(until as string) : new Date()\n    } : undefined;\n    \n    const analysis = await logAggregator.performLogAnalysis(timeRange);\n    res.json(analysis);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to perform log analysis',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/logs/statistics', (req, res) => {\n  try {\n    const stats = logAggregator.getLogStatistics();\n    res.json(stats);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get log statistics',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Alerting endpoints\nrouter.get('/alerts', (req, res) => {\n  try {\n    const {\n      severity,\n      type,\n      acknowledged,\n      resolved,\n      since,\n      limit = '50'\n    } = req.query;\n    \n    const filters: any = {};\n    if (severity) filters.severity = (severity as string).split(',');\n    if (type) filters.type = (type as string).split(',');\n    if (acknowledged !== undefined) filters.acknowledged = acknowledged === 'true';\n    if (resolved !== undefined) filters.resolved = resolved === 'true';\n    if (since) filters.since = new Date(since as string);\n    filters.limit = parseInt(limit as string);\n    \n    const alerts = alertingSystem.getAlerts(filters);\n    res.json({\n      total: alerts.length,\n      alerts\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alerts',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.patch('/alerts/:alertId/acknowledge', (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { acknowledgedBy } = req.body;\n    \n    if (!acknowledgedBy) {\n      return res.status(400).json({\n        error: 'acknowledgedBy field is required'\n      });\n    }\n    \n    const success = alertingSystem.acknowledgeAlert(alertId, acknowledgedBy);\n    \n    if (success) {\n      res.json({ status: 'Alert acknowledged successfully' });\n    } else {\n      res.status(404).json({ error: 'Alert not found or already acknowledged' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to acknowledge alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.patch('/alerts/:alertId/resolve', (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { resolvedBy } = req.body;\n    \n    if (!resolvedBy) {\n      return res.status(400).json({\n        error: 'resolvedBy field is required'\n      });\n    }\n    \n    const success = alertingSystem.resolveAlert(alertId, resolvedBy);\n    \n    if (success) {\n      res.json({ status: 'Alert resolved successfully' });\n    } else {\n      res.status(404).json({ error: 'Alert not found or already resolved' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to resolve alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Alert rules management\nrouter.get('/alert-rules', (req, res) => {\n  try {\n    const rules = alertingSystem.getRules();\n    res.json({ rules });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert rules',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/alert-rules', (req, res) => {\n  try {\n    const rule = alertingSystem.addRule(req.body);\n    res.status(201).json(rule);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to create alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.put('/alert-rules/:ruleId', (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const success = alertingSystem.updateRule(ruleId, req.body);\n    \n    if (success) {\n      res.json({ status: 'Rule updated successfully' });\n    } else {\n      res.status(404).json({ error: 'Rule not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.delete('/alert-rules/:ruleId', (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const success = alertingSystem.removeRule(ruleId);\n    \n    if (success) {\n      res.json({ status: 'Rule deleted successfully' });\n    } else {\n      res.status(404).json({ error: 'Rule not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Notification channels management\nrouter.get('/notification-channels', (req, res) => {\n  try {\n    const channels = alertingSystem.getChannels();\n    res.json({ channels });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get notification channels',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/notification-channels', (req, res) => {\n  try {\n    const channel = alertingSystem.addChannel(req.body);\n    res.status(201).json(channel);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to create notification channel',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.put('/notification-channels/:channelId', (req, res) => {\n  try {\n    const { channelId } = req.params;\n    const success = alertingSystem.updateChannel(channelId, req.body);\n    \n    if (success) {\n      res.json({ status: 'Channel updated successfully' });\n    } else {\n      res.status(404).json({ error: 'Channel not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update notification channel',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.delete('/notification-channels/:channelId', (req, res) => {\n  try {\n    const { channelId } = req.params;\n    const success = alertingSystem.removeChannel(channelId);\n    \n    if (success) {\n      res.json({ status: 'Channel deleted successfully' });\n    } else {\n      res.status(404).json({ error: 'Channel not found' });\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete notification channel',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Compliance endpoints\nrouter.get('/compliance/status', (req, res) => {\n  try {\n    const metrics = complianceChecker.getComplianceMetrics();\n    const latestReport = complianceChecker.getLatestReport();\n    \n    res.json({\n      metrics,\n      latestReport\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get compliance status',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/compliance/scan', async (req, res) => {\n  try {\n    const { framework } = req.body;\n    const report = await complianceChecker.generateComplianceReport(framework);\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Compliance scan failed',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/compliance/reports', (req, res) => {\n  try {\n    const { limit = '10' } = req.query;\n    const reports = complianceChecker.getReports(parseInt(limit as string));\n    res.json({ reports });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get compliance reports',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.get('/compliance/checks', (req, res) => {\n  try {\n    const { category, framework, severity, automated } = req.query;\n    \n    const filters: any = {};\n    if (category) filters.category = category;\n    if (framework) filters.framework = framework;\n    if (severity) filters.severity = severity;\n    if (automated !== undefined) filters.automated = automated === 'true';\n    \n    const checks = complianceChecker.getChecks(filters);\n    res.json({ checks });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get compliance checks',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nrouter.post('/compliance/checks/:checkId/run', async (req, res) => {\n  try {\n    const { checkId } = req.params;\n    const result = await complianceChecker.runCheck(checkId);\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to run compliance check',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Security dashboard endpoint\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const [securityMetrics, alertStats, complianceMetrics, logStats] = await Promise.all([\n      Promise.resolve(securityMonitor.getSecurityMetrics()),\n      Promise.resolve(alertingSystem.getAlertStatistics()),\n      Promise.resolve(complianceChecker.getComplianceMetrics()),\n      Promise.resolve(logAggregator.getLogStatistics())\n    ]);\n    \n    const recentAlerts = alertingSystem.getAlerts({ limit: 10 });\n    const recentEvents = securityMonitor.getSecurityEvents({ limit: 10 });\n    const latestAnalysis = logAggregator.getAnalyses(1)[0];\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      metrics: {\n        security: securityMetrics,\n        alerts: alertStats,\n        compliance: complianceMetrics,\n        logs: logStats\n      },\n      recent: {\n        alerts: recentAlerts,\n        events: recentEvents,\n        analysis: latestAnalysis\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get security dashboard data',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\nexport { router as securityRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d1b4256f22c6f78da839b8fa480608767f82dc3d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1j9tyt0n6l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1j9tyt0n6l();
cov_1j9tyt0n6l().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[1]++;
exports.securityRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_1j9tyt0n6l().s[2]++, require("express"));
const security_1 =
/* istanbul ignore next */
(cov_1j9tyt0n6l().s[3]++, require("../services/security"));
const router =
/* istanbul ignore next */
(cov_1j9tyt0n6l().s[4]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_1j9tyt0n6l().s[5]++;
exports.securityRoutes = router;
// Security monitoring endpoints
/* istanbul ignore next */
cov_1j9tyt0n6l().s[6]++;
router.get('/status', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[0]++;
  cov_1j9tyt0n6l().s[7]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[8]++, security_1.securityMonitor.getSecurityMetrics());
    const alertStats =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[9]++, security_1.alertingSystem.getAlertStatistics());
    const complianceMetrics =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[10]++, security_1.complianceChecker.getComplianceMetrics());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[11]++;
    res.json({
      status: 'active',
      timestamp: new Date().toISOString(),
      security: metrics,
      alerts: alertStats,
      compliance: complianceMetrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[12]++;
    res.status(500).json({
      error: 'Failed to get security status',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[0][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[0][1]++, 'Unknown error')
    });
  }
});
// Vulnerability scanning endpoints
/* istanbul ignore next */
cov_1j9tyt0n6l().s[13]++;
router.post('/scan/dependencies', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[1]++;
  cov_1j9tyt0n6l().s[14]++;
  try {
    const report =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[15]++, await security_1.securityMonitor.scanDependencies());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[16]++;
    res.json(report);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[17]++;
    res.status(500).json({
      error: 'Dependency scan failed',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[1][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[1][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[18]++;
router.post('/scan/code', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[2]++;
  cov_1j9tyt0n6l().s[19]++;
  try {
    const report =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[20]++, await security_1.securityMonitor.scanCode());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[21]++;
    res.json(report);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[22]++;
    res.status(500).json({
      error: 'Code scan failed',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[2][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[23]++;
router.post('/scan/infrastructure', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[3]++;
  cov_1j9tyt0n6l().s[24]++;
  try {
    const report =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[25]++, await security_1.securityMonitor.scanInfrastructure());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[26]++;
    res.json(report);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[27]++;
    res.status(500).json({
      error: 'Infrastructure scan failed',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[3][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[28]++;
router.post('/scan/comprehensive', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[4]++;
  cov_1j9tyt0n6l().s[29]++;
  try {
    const reports =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[30]++, await security_1.securityMonitor.performComprehensiveScan());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[31]++;
    res.json({
      timestamp: new Date().toISOString(),
      reports
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[32]++;
    res.status(500).json({
      error: 'Comprehensive scan failed',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[4][1]++, 'Unknown error')
    });
  }
});
// Security events endpoints
/* istanbul ignore next */
cov_1j9tyt0n6l().s[33]++;
router.get('/events', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[5]++;
  cov_1j9tyt0n6l().s[34]++;
  try {
    const {
      severity,
      type,
      source,
      since,
      limit =
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[5][0]++, '100')
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[35]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[36]++, {});
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[37]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[6][0]++;
      cov_1j9tyt0n6l().s[38]++;
      filters.severity = severity;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[6][1]++;
    }
    cov_1j9tyt0n6l().s[39]++;
    if (type) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[7][0]++;
      cov_1j9tyt0n6l().s[40]++;
      filters.type = type;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[7][1]++;
    }
    cov_1j9tyt0n6l().s[41]++;
    if (source) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[8][0]++;
      cov_1j9tyt0n6l().s[42]++;
      filters.source = source;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[8][1]++;
    }
    cov_1j9tyt0n6l().s[43]++;
    if (since) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[9][0]++;
      cov_1j9tyt0n6l().s[44]++;
      filters.since = new Date(since);
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[9][1]++;
    }
    cov_1j9tyt0n6l().s[45]++;
    filters.limit = parseInt(limit);
    const events =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[46]++, security_1.securityMonitor.getSecurityEvents(filters));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[47]++;
    res.json({
      total: events.length,
      events
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[48]++;
    res.status(500).json({
      error: 'Failed to get security events',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[10][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[49]++;
router.post('/events', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[6]++;
  cov_1j9tyt0n6l().s[50]++;
  try {
    const {
      severity,
      type,
      source,
      message,
      details
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[51]++, req.body);
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[12][0]++, !severity) ||
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[12][1]++, !type) ||
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[12][2]++, !source) ||
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[12][3]++, !message)) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[11][0]++;
      cov_1j9tyt0n6l().s[53]++;
      return res.status(400).json({
        error: 'Missing required fields: severity, type, source, message'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[11][1]++;
    }
    cov_1j9tyt0n6l().s[54]++;
    security_1.securityMonitor.logSecurityEvent({
      severity,
      type,
      source,
      message,
      details:
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[13][0]++, details) ||
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[13][1]++, {}),
      resolved: false
    });
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[55]++;
    res.status(201).json({
      status: 'Event logged successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[56]++;
    res.status(500).json({
      error: 'Failed to log security event',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[14][1]++, 'Unknown error')
    });
  }
});
// Log aggregation endpoints
/* istanbul ignore next */
cov_1j9tyt0n6l().s[57]++;
router.get('/logs', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[7]++;
  cov_1j9tyt0n6l().s[58]++;
  try {
    const {
      level,
      source,
      tags,
      searchTerm,
      since,
      until,
      limit =
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[15][0]++, '100')
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[59]++, req.query);
    const filter =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[60]++, {});
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[61]++;
    if (level) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[16][0]++;
      cov_1j9tyt0n6l().s[62]++;
      filter.level = level.split(',');
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[16][1]++;
    }
    cov_1j9tyt0n6l().s[63]++;
    if (source) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[17][0]++;
      cov_1j9tyt0n6l().s[64]++;
      filter.source = source.split(',');
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[17][1]++;
    }
    cov_1j9tyt0n6l().s[65]++;
    if (tags) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[18][0]++;
      cov_1j9tyt0n6l().s[66]++;
      filter.tags = tags.split(',');
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[18][1]++;
    }
    cov_1j9tyt0n6l().s[67]++;
    if (searchTerm) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[19][0]++;
      cov_1j9tyt0n6l().s[68]++;
      filter.searchTerm = searchTerm;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[19][1]++;
    }
    cov_1j9tyt0n6l().s[69]++;
    if (
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[21][0]++, since) ||
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[21][1]++, until)) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[20][0]++;
      cov_1j9tyt0n6l().s[70]++;
      filter.timeRange = {
        start: since ?
        /* istanbul ignore next */
        (cov_1j9tyt0n6l().b[22][0]++, new Date(since)) :
        /* istanbul ignore next */
        (cov_1j9tyt0n6l().b[22][1]++, new Date(0)),
        end: until ?
        /* istanbul ignore next */
        (cov_1j9tyt0n6l().b[23][0]++, new Date(until)) :
        /* istanbul ignore next */
        (cov_1j9tyt0n6l().b[23][1]++, new Date())
      };
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[20][1]++;
    }
    cov_1j9tyt0n6l().s[71]++;
    filter.limit = parseInt(limit);
    const logs =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[72]++, security_1.logAggregator.getLogs(filter));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[73]++;
    res.json({
      total: logs.length,
      logs
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[74]++;
    res.status(500).json({
      error: 'Failed to get logs',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[24][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[24][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[75]++;
router.get('/logs/analysis', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[8]++;
  cov_1j9tyt0n6l().s[76]++;
  try {
    const {
      since,
      until
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[77]++, req.query);
    const timeRange =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[78]++,
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[26][0]++, since) ||
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[26][1]++, until) ?
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[25][0]++, {
      start: since ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[27][0]++, new Date(since)) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[27][1]++, new Date(Date.now() - 24 * 60 * 60 * 1000)),
      end: until ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[28][0]++, new Date(until)) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[28][1]++, new Date())
    }) :
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().b[25][1]++, undefined));
    const analysis =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[79]++, await security_1.logAggregator.performLogAnalysis(timeRange));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[80]++;
    res.json(analysis);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[81]++;
    res.status(500).json({
      error: 'Failed to perform log analysis',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[29][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[29][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[82]++;
router.get('/logs/statistics', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[9]++;
  cov_1j9tyt0n6l().s[83]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[84]++, security_1.logAggregator.getLogStatistics());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[85]++;
    res.json(stats);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[86]++;
    res.status(500).json({
      error: 'Failed to get log statistics',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[30][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[30][1]++, 'Unknown error')
    });
  }
});
// Alerting endpoints
/* istanbul ignore next */
cov_1j9tyt0n6l().s[87]++;
router.get('/alerts', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[10]++;
  cov_1j9tyt0n6l().s[88]++;
  try {
    const {
      severity,
      type,
      acknowledged,
      resolved,
      since,
      limit =
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[31][0]++, '50')
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[89]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[90]++, {});
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[91]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[32][0]++;
      cov_1j9tyt0n6l().s[92]++;
      filters.severity = severity.split(',');
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[32][1]++;
    }
    cov_1j9tyt0n6l().s[93]++;
    if (type) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[33][0]++;
      cov_1j9tyt0n6l().s[94]++;
      filters.type = type.split(',');
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[33][1]++;
    }
    cov_1j9tyt0n6l().s[95]++;
    if (acknowledged !== undefined) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[34][0]++;
      cov_1j9tyt0n6l().s[96]++;
      filters.acknowledged = acknowledged === 'true';
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[34][1]++;
    }
    cov_1j9tyt0n6l().s[97]++;
    if (resolved !== undefined) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[35][0]++;
      cov_1j9tyt0n6l().s[98]++;
      filters.resolved = resolved === 'true';
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[35][1]++;
    }
    cov_1j9tyt0n6l().s[99]++;
    if (since) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[36][0]++;
      cov_1j9tyt0n6l().s[100]++;
      filters.since = new Date(since);
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[36][1]++;
    }
    cov_1j9tyt0n6l().s[101]++;
    filters.limit = parseInt(limit);
    const alerts =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[102]++, security_1.alertingSystem.getAlerts(filters));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[103]++;
    res.json({
      total: alerts.length,
      alerts
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[104]++;
    res.status(500).json({
      error: 'Failed to get alerts',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[37][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[105]++;
router.patch('/alerts/:alertId/acknowledge', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[11]++;
  cov_1j9tyt0n6l().s[106]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[107]++, req.params);
    const {
      acknowledgedBy
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[108]++, req.body);
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[109]++;
    if (!acknowledgedBy) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[38][0]++;
      cov_1j9tyt0n6l().s[110]++;
      return res.status(400).json({
        error: 'acknowledgedBy field is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[38][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[111]++, security_1.alertingSystem.acknowledgeAlert(alertId, acknowledgedBy));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[112]++;
    if (success) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[39][0]++;
      cov_1j9tyt0n6l().s[113]++;
      res.json({
        status: 'Alert acknowledged successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[39][1]++;
      cov_1j9tyt0n6l().s[114]++;
      res.status(404).json({
        error: 'Alert not found or already acknowledged'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[115]++;
    res.status(500).json({
      error: 'Failed to acknowledge alert',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[40][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[40][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[116]++;
router.patch('/alerts/:alertId/resolve', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[12]++;
  cov_1j9tyt0n6l().s[117]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[118]++, req.params);
    const {
      resolvedBy
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[119]++, req.body);
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[120]++;
    if (!resolvedBy) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[41][0]++;
      cov_1j9tyt0n6l().s[121]++;
      return res.status(400).json({
        error: 'resolvedBy field is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[41][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[122]++, security_1.alertingSystem.resolveAlert(alertId, resolvedBy));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[123]++;
    if (success) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[42][0]++;
      cov_1j9tyt0n6l().s[124]++;
      res.json({
        status: 'Alert resolved successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[42][1]++;
      cov_1j9tyt0n6l().s[125]++;
      res.status(404).json({
        error: 'Alert not found or already resolved'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[126]++;
    res.status(500).json({
      error: 'Failed to resolve alert',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[43][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[43][1]++, 'Unknown error')
    });
  }
});
// Alert rules management
/* istanbul ignore next */
cov_1j9tyt0n6l().s[127]++;
router.get('/alert-rules', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[13]++;
  cov_1j9tyt0n6l().s[128]++;
  try {
    const rules =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[129]++, security_1.alertingSystem.getRules());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[130]++;
    res.json({
      rules
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[131]++;
    res.status(500).json({
      error: 'Failed to get alert rules',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[44][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[44][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[132]++;
router.post('/alert-rules', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[14]++;
  cov_1j9tyt0n6l().s[133]++;
  try {
    const rule =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[134]++, security_1.alertingSystem.addRule(req.body));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[135]++;
    res.status(201).json(rule);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[136]++;
    res.status(500).json({
      error: 'Failed to create alert rule',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[45][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[45][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[137]++;
router.put('/alert-rules/:ruleId', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[15]++;
  cov_1j9tyt0n6l().s[138]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[139]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[140]++, security_1.alertingSystem.updateRule(ruleId, req.body));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[141]++;
    if (success) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[46][0]++;
      cov_1j9tyt0n6l().s[142]++;
      res.json({
        status: 'Rule updated successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[46][1]++;
      cov_1j9tyt0n6l().s[143]++;
      res.status(404).json({
        error: 'Rule not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[144]++;
    res.status(500).json({
      error: 'Failed to update alert rule',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[47][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[47][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[145]++;
router.delete('/alert-rules/:ruleId', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[16]++;
  cov_1j9tyt0n6l().s[146]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[147]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[148]++, security_1.alertingSystem.removeRule(ruleId));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[149]++;
    if (success) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[48][0]++;
      cov_1j9tyt0n6l().s[150]++;
      res.json({
        status: 'Rule deleted successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[48][1]++;
      cov_1j9tyt0n6l().s[151]++;
      res.status(404).json({
        error: 'Rule not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[152]++;
    res.status(500).json({
      error: 'Failed to delete alert rule',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[49][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[49][1]++, 'Unknown error')
    });
  }
});
// Notification channels management
/* istanbul ignore next */
cov_1j9tyt0n6l().s[153]++;
router.get('/notification-channels', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[17]++;
  cov_1j9tyt0n6l().s[154]++;
  try {
    const channels =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[155]++, security_1.alertingSystem.getChannels());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[156]++;
    res.json({
      channels
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[157]++;
    res.status(500).json({
      error: 'Failed to get notification channels',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[50][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[50][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[158]++;
router.post('/notification-channels', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[18]++;
  cov_1j9tyt0n6l().s[159]++;
  try {
    const channel =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[160]++, security_1.alertingSystem.addChannel(req.body));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[161]++;
    res.status(201).json(channel);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[162]++;
    res.status(500).json({
      error: 'Failed to create notification channel',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[51][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[51][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[163]++;
router.put('/notification-channels/:channelId', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[19]++;
  cov_1j9tyt0n6l().s[164]++;
  try {
    const {
      channelId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[165]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[166]++, security_1.alertingSystem.updateChannel(channelId, req.body));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[167]++;
    if (success) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[52][0]++;
      cov_1j9tyt0n6l().s[168]++;
      res.json({
        status: 'Channel updated successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[52][1]++;
      cov_1j9tyt0n6l().s[169]++;
      res.status(404).json({
        error: 'Channel not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[170]++;
    res.status(500).json({
      error: 'Failed to update notification channel',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[53][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[53][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[171]++;
router.delete('/notification-channels/:channelId', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[20]++;
  cov_1j9tyt0n6l().s[172]++;
  try {
    const {
      channelId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[173]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[174]++, security_1.alertingSystem.removeChannel(channelId));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[175]++;
    if (success) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[54][0]++;
      cov_1j9tyt0n6l().s[176]++;
      res.json({
        status: 'Channel deleted successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[54][1]++;
      cov_1j9tyt0n6l().s[177]++;
      res.status(404).json({
        error: 'Channel not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[178]++;
    res.status(500).json({
      error: 'Failed to delete notification channel',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[55][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[55][1]++, 'Unknown error')
    });
  }
});
// Compliance endpoints
/* istanbul ignore next */
cov_1j9tyt0n6l().s[179]++;
router.get('/compliance/status', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[21]++;
  cov_1j9tyt0n6l().s[180]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[181]++, security_1.complianceChecker.getComplianceMetrics());
    const latestReport =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[182]++, security_1.complianceChecker.getLatestReport());
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[183]++;
    res.json({
      metrics,
      latestReport
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[184]++;
    res.status(500).json({
      error: 'Failed to get compliance status',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[56][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[56][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[185]++;
router.post('/compliance/scan', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[22]++;
  cov_1j9tyt0n6l().s[186]++;
  try {
    const {
      framework
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[187]++, req.body);
    const report =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[188]++, await security_1.complianceChecker.generateComplianceReport(framework));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[189]++;
    res.json(report);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[190]++;
    res.status(500).json({
      error: 'Compliance scan failed',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[57][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[57][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[191]++;
router.get('/compliance/reports', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[23]++;
  cov_1j9tyt0n6l().s[192]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[58][0]++, '10')
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[193]++, req.query);
    const reports =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[194]++, security_1.complianceChecker.getReports(parseInt(limit)));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[195]++;
    res.json({
      reports
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[196]++;
    res.status(500).json({
      error: 'Failed to get compliance reports',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[59][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[59][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[197]++;
router.get('/compliance/checks', (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[24]++;
  cov_1j9tyt0n6l().s[198]++;
  try {
    const {
      category,
      framework,
      severity,
      automated
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[199]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[200]++, {});
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[201]++;
    if (category) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[60][0]++;
      cov_1j9tyt0n6l().s[202]++;
      filters.category = category;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[60][1]++;
    }
    cov_1j9tyt0n6l().s[203]++;
    if (framework) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[61][0]++;
      cov_1j9tyt0n6l().s[204]++;
      filters.framework = framework;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[61][1]++;
    }
    cov_1j9tyt0n6l().s[205]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[62][0]++;
      cov_1j9tyt0n6l().s[206]++;
      filters.severity = severity;
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[62][1]++;
    }
    cov_1j9tyt0n6l().s[207]++;
    if (automated !== undefined) {
      /* istanbul ignore next */
      cov_1j9tyt0n6l().b[63][0]++;
      cov_1j9tyt0n6l().s[208]++;
      filters.automated = automated === 'true';
    } else
    /* istanbul ignore next */
    {
      cov_1j9tyt0n6l().b[63][1]++;
    }
    const checks =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[209]++, security_1.complianceChecker.getChecks(filters));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[210]++;
    res.json({
      checks
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[211]++;
    res.status(500).json({
      error: 'Failed to get compliance checks',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[64][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[64][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1j9tyt0n6l().s[212]++;
router.post('/compliance/checks/:checkId/run', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[25]++;
  cov_1j9tyt0n6l().s[213]++;
  try {
    const {
      checkId
    } =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[214]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[215]++, await security_1.complianceChecker.runCheck(checkId));
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[216]++;
    res.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[217]++;
    res.status(500).json({
      error: 'Failed to run compliance check',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[65][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[65][1]++, 'Unknown error')
    });
  }
});
// Security dashboard endpoint
/* istanbul ignore next */
cov_1j9tyt0n6l().s[218]++;
router.get('/dashboard', async (req, res) => {
  /* istanbul ignore next */
  cov_1j9tyt0n6l().f[26]++;
  cov_1j9tyt0n6l().s[219]++;
  try {
    const [securityMetrics, alertStats, complianceMetrics, logStats] =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[220]++, await Promise.all([Promise.resolve(security_1.securityMonitor.getSecurityMetrics()), Promise.resolve(security_1.alertingSystem.getAlertStatistics()), Promise.resolve(security_1.complianceChecker.getComplianceMetrics()), Promise.resolve(security_1.logAggregator.getLogStatistics())]));
    const recentAlerts =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[221]++, security_1.alertingSystem.getAlerts({
      limit: 10
    }));
    const recentEvents =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[222]++, security_1.securityMonitor.getSecurityEvents({
      limit: 10
    }));
    const latestAnalysis =
    /* istanbul ignore next */
    (cov_1j9tyt0n6l().s[223]++, security_1.logAggregator.getAnalyses(1)[0]);
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[224]++;
    res.json({
      timestamp: new Date().toISOString(),
      metrics: {
        security: securityMetrics,
        alerts: alertStats,
        compliance: complianceMetrics,
        logs: logStats
      },
      recent: {
        alerts: recentAlerts,
        events: recentEvents,
        analysis: latestAnalysis
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1j9tyt0n6l().s[225]++;
    res.status(500).json({
      error: 'Failed to get security dashboard data',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[66][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1j9tyt0n6l().b[66][1]++, 'Unknown error')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,