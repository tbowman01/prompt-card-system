a44c2627973c86da5edf820f68c2637b
"use strict";

/* istanbul ignore next */
function cov_11tmfecun7() {
  var path = "/workspaces/prompt-card-system/backend/src/services/testing/ResourceManager.ts";
  var hash = "88f5612f3e20ca7c1d015bfb40d87b5299004b34";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/testing/ResourceManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 33
        }
      },
      "37": {
        start: {
          line: 37,
          column: 11
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "38": {
        start: {
          line: 38,
          column: 17
        },
        end: {
          line: 38,
          column: 34
        }
      },
      "39": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 16
        }
      },
      "40": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "41": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "42": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "43": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 31
        }
      },
      "44": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 40
        }
      },
      "45": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 68,
          column: 84
        }
      },
      "46": {
        start: {
          line: 69,
          column: 32
        },
        end: {
          line: 69,
          column: 83
        }
      },
      "47": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 70,
          column: 92
        }
      },
      "48": {
        start: {
          line: 72,
          column: 22
        },
        end: {
          line: 72,
          column: 65
        }
      },
      "49": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 69
        }
      },
      "50": {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 74
        }
      },
      "51": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "52": {
        start: {
          line: 78,
          column: 35
        },
        end: {
          line: 78,
          column: 86
        }
      },
      "53": {
        start: {
          line: 79,
          column: 38
        },
        end: {
          line: 79,
          column: 95
        }
      },
      "54": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "55": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 44
        }
      },
      "56": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 88,
          column: 77
        }
      },
      "57": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "58": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "59": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 56
        }
      },
      "60": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 64
        }
      },
      "61": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 99,
          column: 62
        }
      },
      "62": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "63": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "64": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 68
        }
      },
      "65": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 40
        }
      },
      "66": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 34
        }
      },
      "67": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 55
        }
      },
      "68": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "69": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 40
        }
      },
      "70": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "71": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 23
        }
      },
      "72": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 50
        }
      },
      "73": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 24
        }
      },
      "74": {
        start: {
          line: 143,
          column: 26
        },
        end: {
          line: 143,
          column: 27
        }
      },
      "75": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 144,
          column: 26
        }
      },
      "76": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "77": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 48
        }
      },
      "78": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 49
        }
      },
      "79": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 55
        }
      },
      "80": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 155,
          column: 10
        }
      },
      "81": {
        start: {
          line: 161,
          column: 26
        },
        end: {
          line: 161,
          column: 93
        }
      },
      "82": {
        start: {
          line: 162,
          column: 29
        },
        end: {
          line: 162,
          column: 92
        }
      },
      "83": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 163,
          column: 85
        }
      },
      "84": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 55
        }
      },
      "85": {
        start: {
          line: 170,
          column: 36
        },
        end: {
          line: 170,
          column: 127
        }
      },
      "86": {
        start: {
          line: 171,
          column: 39
        },
        end: {
          line: 171,
          column: 127
        }
      },
      "87": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 103
        }
      },
      "88": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "89": {
        start: {
          line: 180,
          column: 29
        },
        end: {
          line: 180,
          column: 50
        }
      },
      "90": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 181,
          column: 40
        }
      },
      "91": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 45
        }
      },
      "92": {
        start: {
          line: 184,
          column: 33
        },
        end: {
          line: 184,
          column: 77
        }
      },
      "93": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 193,
          column: 14
        }
      },
      "94": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 22
        }
      },
      "95": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 215,
          column: 17
        }
      },
      "96": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 44
        }
      },
      "97": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "98": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 61
        }
      },
      "99": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "100": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 91
        }
      },
      "101": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "102": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 94
        }
      },
      "103": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 61
        }
      },
      "104": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "105": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 51
        }
      },
      "106": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 34
        }
      },
      "107": {
        start: {
          line: 227,
          column: 0
        },
        end: {
          line: 227,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 40
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 49
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 65
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 48
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 87
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 35
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 98
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 108
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 114
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 120
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 127
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 134
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 34
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 141
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 26
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 160
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 28
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 169
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 31
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 177
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 178,
            column: 27
          },
          end: {
            line: 178,
            column: 28
          }
        },
        loc: {
          start: {
            line: 178,
            column: 40
          },
          end: {
            line: 195,
            column: 9
          }
        },
        line: 178
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 22
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 200
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 201,
            column: 46
          },
          end: {
            line: 201,
            column: 47
          }
        },
        loc: {
          start: {
            line: 201,
            column: 58
          },
          end: {
            line: 215,
            column: 9
          }
        },
        line: 201
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 14
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 220
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "18": {
        loc: {
          start: {
            line: 80,
            column: 19
          },
          end: {
            line: 80,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 19
          },
          end: {
            line: 80,
            column: 33
          }
        }, {
          start: {
            line: 80,
            column: 37
          },
          end: {
            line: 80,
            column: 54
          }
        }],
        line: 80
      },
      "19": {
        loc: {
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 20
          }
        }, {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 82,
            column: 32
          }
        }, {
          start: {
            line: 82,
            column: 36
          },
          end: {
            line: 82,
            column: 43
          }
        }],
        line: 82
      },
      "20": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "21": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "22": {
        loc: {
          start: {
            line: 164,
            column: 15
          },
          end: {
            line: 164,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 15
          },
          end: {
            line: 164,
            column: 24
          }
        }, {
          start: {
            line: 164,
            column: 28
          },
          end: {
            line: 164,
            column: 40
          }
        }, {
          start: {
            line: 164,
            column: 44
          },
          end: {
            line: 164,
            column: 54
          }
        }],
        line: 164
      },
      "23": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "24": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "25": {
        loc: {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "26": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/testing/ResourceManager.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/testing/ResourceManager.ts"],
      sourcesContent: ["import * as os from 'os';\nimport { EventEmitter } from 'events';\n\nexport interface ResourceRequirement {\n  cpu_percent: number;\n  memory_mb: number;\n  concurrent_tests: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface ResourceUsage {\n  cpu_percent: number;\n  memory_mb: number;\n  memory_total_mb: number;\n  active_tests: number;\n  queue_length: number;\n  load_average: number[];\n  timestamp: Date;\n}\n\nexport interface ResourceLimits {\n  max_cpu_percent: number;\n  max_memory_mb: number;\n  max_concurrent_tests: number;\n  emergency_threshold_cpu: number;\n  emergency_threshold_memory: number;\n}\n\nexport class ResourceManager extends EventEmitter {\n  private reservedResources: Map<string, ResourceRequirement> = new Map();\n  private currentUsage: ResourceUsage;\n  private limits: ResourceLimits;\n  private monitoringInterval?: NodeJS.Timeout;\n\n  constructor(limits?: Partial<ResourceLimits>) {\n    super();\n    \n    this.limits = {\n      max_cpu_percent: 80,\n      max_memory_mb: Math.floor(os.totalmem() / 1024 / 1024 * 0.8), // 80% of system memory\n      max_concurrent_tests: 10,\n      emergency_threshold_cpu: 90,\n      emergency_threshold_memory: Math.floor(os.totalmem() / 1024 / 1024 * 0.9), // 90% of system memory\n      ...limits\n    };\n\n    this.currentUsage = {\n      cpu_percent: 0,\n      memory_mb: 0,\n      memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n      active_tests: 0,\n      queue_length: 0,\n      load_average: os.loadavg(),\n      timestamp: new Date()\n    };\n\n    this.startMonitoring();\n  }\n\n  /**\n   * Check if resources are available for the given requirement\n   */\n  async checkResourceAvailability(requirement: ResourceRequirement): Promise<boolean> {\n    await this.updateCurrentUsage();\n    \n    // Calculate projected usage\n    const projectedCpu = this.currentUsage.cpu_percent + requirement.cpu_percent;\n    const projectedMemory = this.currentUsage.memory_mb + requirement.memory_mb;\n    const projectedTests = this.currentUsage.active_tests + requirement.concurrent_tests;\n\n    // Check against limits\n    const cpuOk = projectedCpu <= this.limits.max_cpu_percent;\n    const memoryOk = projectedMemory <= this.limits.max_memory_mb;\n    const testsOk = projectedTests <= this.limits.max_concurrent_tests;\n\n    // Priority-based overrides\n    if (requirement.priority === 'critical') {\n      // Critical tasks can use emergency thresholds\n      const emergencyCpuOk = projectedCpu <= this.limits.emergency_threshold_cpu;\n      const emergencyMemoryOk = projectedMemory <= this.limits.emergency_threshold_memory;\n      return emergencyCpuOk && emergencyMemoryOk;\n    }\n\n    return cpuOk && memoryOk && testsOk;\n  }\n\n  /**\n   * Reserve resources for a specific task\n   */\n  async reserveResources(taskId: string, requirement: ResourceRequirement): Promise<void> {\n    const isAvailable = await this.checkResourceAvailability(requirement);\n    \n    if (!isAvailable) {\n      throw new Error(`Insufficient resources for task ${taskId}`);\n    }\n\n    this.reservedResources.set(taskId, requirement);\n    this.emit('resourcesReserved', { taskId, requirement });\n  }\n\n  /**\n   * Release resources for a specific task\n   */\n  async releaseResources(taskId: string): Promise<void> {\n    const requirement = this.reservedResources.get(taskId);\n    if (requirement) {\n      this.reservedResources.delete(taskId);\n      this.emit('resourcesReleased', { taskId, requirement });\n    }\n  }\n\n  /**\n   * Get current resource usage\n   */\n  getCurrentUsage(): ResourceUsage {\n    return { ...this.currentUsage };\n  }\n\n  /**\n   * Get resource limits\n   */\n  getLimits(): ResourceLimits {\n    return { ...this.limits };\n  }\n\n  /**\n   * Set resource limits\n   */\n  setLimits(newLimits: Partial<ResourceLimits>): void {\n    this.limits = { ...this.limits, ...newLimits };\n    this.emit('limitsUpdated', this.limits);\n  }\n\n  /**\n   * Initialize the resource manager\n   */\n  async initialize(): Promise<void> {\n    await this.updateCurrentUsage();\n    console.log('ResourceManager initialized');\n  }\n\n  /**\n   * Cleanup and shutdown the resource manager\n   */\n  async cleanup(): Promise<void> {\n    this.destroy();\n    console.log('ResourceManager cleaned up');\n  }\n\n  /**\n   * Get reserved resources summary\n   */\n  getReservedResourcesSummary(): {\n    total_reserved_cpu: number;\n    total_reserved_memory: number;\n    total_reserved_tests: number;\n    active_reservations: number;\n  } {\n    let totalCpu = 0;\n    let totalMemory = 0;\n    let totalTests = 0;\n\n    for (const requirement of this.reservedResources.values()) {\n      totalCpu += requirement.cpu_percent;\n      totalMemory += requirement.memory_mb;\n      totalTests += requirement.concurrent_tests;\n    }\n\n    return {\n      total_reserved_cpu: totalCpu,\n      total_reserved_memory: totalMemory,\n      total_reserved_tests: totalTests,\n      active_reservations: this.reservedResources.size\n    };\n  }\n\n  /**\n   * Check if system is under stress\n   */\n  isSystemUnderStress(): boolean {\n    const cpuStress = this.currentUsage.cpu_percent > (this.limits.max_cpu_percent * 0.8);\n    const memoryStress = this.currentUsage.memory_mb > (this.limits.max_memory_mb * 0.8);\n    const loadStress = this.currentUsage.load_average[0] > os.cpus().length * 0.8;\n\n    return cpuStress || memoryStress || loadStress;\n  }\n\n  /**\n   * Get optimal concurrency level based on current resources\n   */\n  getOptimalConcurrency(): number {\n    const cpuBasedConcurrency = Math.max(1, Math.floor(\n      (this.limits.max_cpu_percent - this.currentUsage.cpu_percent) / 15\n    ));\n    \n    const memoryBasedConcurrency = Math.max(1, Math.floor(\n      (this.limits.max_memory_mb - this.currentUsage.memory_mb) / 100\n    ));\n\n    return Math.min(\n      cpuBasedConcurrency,\n      memoryBasedConcurrency,\n      this.limits.max_concurrent_tests\n    );\n  }\n\n  /**\n   * Update current resource usage\n   */\n  private async updateCurrentUsage(): Promise<void> {\n    return new Promise((resolve) => {\n      // Use a simple CPU usage calculation\n      const memUsage = process.memoryUsage();\n      const loadAvg = os.loadavg();\n      \n      // Estimate CPU usage from load average\n      const cpuCount = os.cpus().length;\n      const estimatedCpu = Math.min(100, (loadAvg[0] / cpuCount) * 100);\n\n      this.currentUsage = {\n        cpu_percent: estimatedCpu,\n        memory_mb: Math.floor(memUsage.rss / 1024 / 1024),\n        memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n        active_tests: this.reservedResources.size,\n        queue_length: 0, // Will be updated by queue manager\n        load_average: loadAvg,\n        timestamp: new Date()\n      };\n\n      resolve();\n    });\n  }\n\n  /**\n   * Start monitoring system resources\n   */\n  private startMonitoring(): void {\n    this.monitoringInterval = setInterval(async () => {\n      await this.updateCurrentUsage();\n      \n      // Emit events for significant changes\n      if (this.isSystemUnderStress()) {\n        this.emit('systemStress', this.currentUsage);\n      }\n\n      // Check for resource violations\n      if (this.currentUsage.cpu_percent > this.limits.emergency_threshold_cpu) {\n        this.emit('emergencyThreshold', { type: 'cpu', usage: this.currentUsage });\n      }\n\n      if (this.currentUsage.memory_mb > this.limits.emergency_threshold_memory) {\n        this.emit('emergencyThreshold', { type: 'memory', usage: this.currentUsage });\n      }\n\n      this.emit('resourcesUpdated', this.currentUsage);\n    }, 5000); // Update every 5 seconds\n  }\n\n  /**\n   * Stop monitoring and cleanup\n   */\n  destroy(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n    this.removeAllListeners();\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "88f5612f3e20ca7c1d015bfb40d87b5299004b34"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11tmfecun7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11tmfecun7();
var __createBinding =
/* istanbul ignore next */
(cov_11tmfecun7().s[0]++,
/* istanbul ignore next */
(cov_11tmfecun7().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_11tmfecun7().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_11tmfecun7().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_11tmfecun7().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_11tmfecun7().f[0]++;
  cov_11tmfecun7().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_11tmfecun7().b[2][0]++;
    cov_11tmfecun7().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_11tmfecun7().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_11tmfecun7().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_11tmfecun7().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_11tmfecun7().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_11tmfecun7().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_11tmfecun7().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_11tmfecun7().b[5][1]++,
  /* istanbul ignore next */
  (cov_11tmfecun7().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_11tmfecun7().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_11tmfecun7().b[3][0]++;
    cov_11tmfecun7().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_11tmfecun7().f[1]++;
        cov_11tmfecun7().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_11tmfecun7().b[3][1]++;
  }
  cov_11tmfecun7().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_11tmfecun7().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_11tmfecun7().f[2]++;
  cov_11tmfecun7().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_11tmfecun7().b[7][0]++;
    cov_11tmfecun7().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_11tmfecun7().b[7][1]++;
  }
  cov_11tmfecun7().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_11tmfecun7().s[11]++,
/* istanbul ignore next */
(cov_11tmfecun7().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_11tmfecun7().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_11tmfecun7().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_11tmfecun7().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_11tmfecun7().f[3]++;
  cov_11tmfecun7().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_11tmfecun7().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_11tmfecun7().f[4]++;
  cov_11tmfecun7().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_11tmfecun7().s[14]++,
/* istanbul ignore next */
(cov_11tmfecun7().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_11tmfecun7().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_11tmfecun7().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_11tmfecun7().f[5]++;
  cov_11tmfecun7().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[6]++;
    cov_11tmfecun7().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_11tmfecun7().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_11tmfecun7().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_11tmfecun7().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[17]++, []);
      /* istanbul ignore next */
      cov_11tmfecun7().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_11tmfecun7().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_11tmfecun7().b[12][0]++;
          cov_11tmfecun7().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_11tmfecun7().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_11tmfecun7().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_11tmfecun7().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_11tmfecun7().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[8]++;
    cov_11tmfecun7().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_11tmfecun7().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_11tmfecun7().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_11tmfecun7().b[13][0]++;
      cov_11tmfecun7().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_11tmfecun7().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[26]++, {});
    /* istanbul ignore next */
    cov_11tmfecun7().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_11tmfecun7().b[15][0]++;
      cov_11tmfecun7().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_11tmfecun7().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_11tmfecun7().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_11tmfecun7().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_11tmfecun7().b[16][0]++;
          cov_11tmfecun7().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_11tmfecun7().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_11tmfecun7().b[15][1]++;
    }
    cov_11tmfecun7().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_11tmfecun7().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_11tmfecun7().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_11tmfecun7().s[36]++;
exports.ResourceManager = void 0;
const os =
/* istanbul ignore next */
(cov_11tmfecun7().s[37]++, __importStar(require("os")));
const events_1 =
/* istanbul ignore next */
(cov_11tmfecun7().s[38]++, require("events"));
class ResourceManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(limits) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[9]++;
    cov_11tmfecun7().s[39]++;
    super();
    /* istanbul ignore next */
    cov_11tmfecun7().s[40]++;
    this.reservedResources = new Map();
    /* istanbul ignore next */
    cov_11tmfecun7().s[41]++;
    this.limits = {
      max_cpu_percent: 80,
      max_memory_mb: Math.floor(os.totalmem() / 1024 / 1024 * 0.8),
      // 80% of system memory
      max_concurrent_tests: 10,
      emergency_threshold_cpu: 90,
      emergency_threshold_memory: Math.floor(os.totalmem() / 1024 / 1024 * 0.9),
      // 90% of system memory
      ...limits
    };
    /* istanbul ignore next */
    cov_11tmfecun7().s[42]++;
    this.currentUsage = {
      cpu_percent: 0,
      memory_mb: 0,
      memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),
      active_tests: 0,
      queue_length: 0,
      load_average: os.loadavg(),
      timestamp: new Date()
    };
    /* istanbul ignore next */
    cov_11tmfecun7().s[43]++;
    this.startMonitoring();
  }
  /**
   * Check if resources are available for the given requirement
   */
  async checkResourceAvailability(requirement) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[10]++;
    cov_11tmfecun7().s[44]++;
    await this.updateCurrentUsage();
    // Calculate projected usage
    const projectedCpu =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[45]++, this.currentUsage.cpu_percent + requirement.cpu_percent);
    const projectedMemory =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[46]++, this.currentUsage.memory_mb + requirement.memory_mb);
    const projectedTests =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[47]++, this.currentUsage.active_tests + requirement.concurrent_tests);
    // Check against limits
    const cpuOk =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[48]++, projectedCpu <= this.limits.max_cpu_percent);
    const memoryOk =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[49]++, projectedMemory <= this.limits.max_memory_mb);
    const testsOk =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[50]++, projectedTests <= this.limits.max_concurrent_tests);
    // Priority-based overrides
    /* istanbul ignore next */
    cov_11tmfecun7().s[51]++;
    if (requirement.priority === 'critical') {
      /* istanbul ignore next */
      cov_11tmfecun7().b[17][0]++;
      // Critical tasks can use emergency thresholds
      const emergencyCpuOk =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[52]++, projectedCpu <= this.limits.emergency_threshold_cpu);
      const emergencyMemoryOk =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[53]++, projectedMemory <= this.limits.emergency_threshold_memory);
      /* istanbul ignore next */
      cov_11tmfecun7().s[54]++;
      return /* istanbul ignore next */(cov_11tmfecun7().b[18][0]++, emergencyCpuOk) &&
      /* istanbul ignore next */
      (cov_11tmfecun7().b[18][1]++, emergencyMemoryOk);
    } else
    /* istanbul ignore next */
    {
      cov_11tmfecun7().b[17][1]++;
    }
    cov_11tmfecun7().s[55]++;
    return /* istanbul ignore next */(cov_11tmfecun7().b[19][0]++, cpuOk) &&
    /* istanbul ignore next */
    (cov_11tmfecun7().b[19][1]++, memoryOk) &&
    /* istanbul ignore next */
    (cov_11tmfecun7().b[19][2]++, testsOk);
  }
  /**
   * Reserve resources for a specific task
   */
  async reserveResources(taskId, requirement) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[11]++;
    const isAvailable =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[56]++, await this.checkResourceAvailability(requirement));
    /* istanbul ignore next */
    cov_11tmfecun7().s[57]++;
    if (!isAvailable) {
      /* istanbul ignore next */
      cov_11tmfecun7().b[20][0]++;
      cov_11tmfecun7().s[58]++;
      throw new Error(`Insufficient resources for task ${taskId}`);
    } else
    /* istanbul ignore next */
    {
      cov_11tmfecun7().b[20][1]++;
    }
    cov_11tmfecun7().s[59]++;
    this.reservedResources.set(taskId, requirement);
    /* istanbul ignore next */
    cov_11tmfecun7().s[60]++;
    this.emit('resourcesReserved', {
      taskId,
      requirement
    });
  }
  /**
   * Release resources for a specific task
   */
  async releaseResources(taskId) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[12]++;
    const requirement =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[61]++, this.reservedResources.get(taskId));
    /* istanbul ignore next */
    cov_11tmfecun7().s[62]++;
    if (requirement) {
      /* istanbul ignore next */
      cov_11tmfecun7().b[21][0]++;
      cov_11tmfecun7().s[63]++;
      this.reservedResources.delete(taskId);
      /* istanbul ignore next */
      cov_11tmfecun7().s[64]++;
      this.emit('resourcesReleased', {
        taskId,
        requirement
      });
    } else
    /* istanbul ignore next */
    {
      cov_11tmfecun7().b[21][1]++;
    }
  }
  /**
   * Get current resource usage
   */
  getCurrentUsage() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[13]++;
    cov_11tmfecun7().s[65]++;
    return {
      ...this.currentUsage
    };
  }
  /**
   * Get resource limits
   */
  getLimits() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[14]++;
    cov_11tmfecun7().s[66]++;
    return {
      ...this.limits
    };
  }
  /**
   * Set resource limits
   */
  setLimits(newLimits) {
    /* istanbul ignore next */
    cov_11tmfecun7().f[15]++;
    cov_11tmfecun7().s[67]++;
    this.limits = {
      ...this.limits,
      ...newLimits
    };
    /* istanbul ignore next */
    cov_11tmfecun7().s[68]++;
    this.emit('limitsUpdated', this.limits);
  }
  /**
   * Initialize the resource manager
   */
  async initialize() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[16]++;
    cov_11tmfecun7().s[69]++;
    await this.updateCurrentUsage();
    /* istanbul ignore next */
    cov_11tmfecun7().s[70]++;
    console.log('ResourceManager initialized');
  }
  /**
   * Cleanup and shutdown the resource manager
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[17]++;
    cov_11tmfecun7().s[71]++;
    this.destroy();
    /* istanbul ignore next */
    cov_11tmfecun7().s[72]++;
    console.log('ResourceManager cleaned up');
  }
  /**
   * Get reserved resources summary
   */
  getReservedResourcesSummary() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[18]++;
    let totalCpu =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[73]++, 0);
    let totalMemory =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[74]++, 0);
    let totalTests =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[75]++, 0);
    /* istanbul ignore next */
    cov_11tmfecun7().s[76]++;
    for (const requirement of this.reservedResources.values()) {
      /* istanbul ignore next */
      cov_11tmfecun7().s[77]++;
      totalCpu += requirement.cpu_percent;
      /* istanbul ignore next */
      cov_11tmfecun7().s[78]++;
      totalMemory += requirement.memory_mb;
      /* istanbul ignore next */
      cov_11tmfecun7().s[79]++;
      totalTests += requirement.concurrent_tests;
    }
    /* istanbul ignore next */
    cov_11tmfecun7().s[80]++;
    return {
      total_reserved_cpu: totalCpu,
      total_reserved_memory: totalMemory,
      total_reserved_tests: totalTests,
      active_reservations: this.reservedResources.size
    };
  }
  /**
   * Check if system is under stress
   */
  isSystemUnderStress() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[19]++;
    const cpuStress =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[81]++, this.currentUsage.cpu_percent > this.limits.max_cpu_percent * 0.8);
    const memoryStress =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[82]++, this.currentUsage.memory_mb > this.limits.max_memory_mb * 0.8);
    const loadStress =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[83]++, this.currentUsage.load_average[0] > os.cpus().length * 0.8);
    /* istanbul ignore next */
    cov_11tmfecun7().s[84]++;
    return /* istanbul ignore next */(cov_11tmfecun7().b[22][0]++, cpuStress) ||
    /* istanbul ignore next */
    (cov_11tmfecun7().b[22][1]++, memoryStress) ||
    /* istanbul ignore next */
    (cov_11tmfecun7().b[22][2]++, loadStress);
  }
  /**
   * Get optimal concurrency level based on current resources
   */
  getOptimalConcurrency() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[20]++;
    const cpuBasedConcurrency =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[85]++, Math.max(1, Math.floor((this.limits.max_cpu_percent - this.currentUsage.cpu_percent) / 15)));
    const memoryBasedConcurrency =
    /* istanbul ignore next */
    (cov_11tmfecun7().s[86]++, Math.max(1, Math.floor((this.limits.max_memory_mb - this.currentUsage.memory_mb) / 100)));
    /* istanbul ignore next */
    cov_11tmfecun7().s[87]++;
    return Math.min(cpuBasedConcurrency, memoryBasedConcurrency, this.limits.max_concurrent_tests);
  }
  /**
   * Update current resource usage
   */
  async updateCurrentUsage() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[21]++;
    cov_11tmfecun7().s[88]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_11tmfecun7().f[22]++;
      // Use a simple CPU usage calculation
      const memUsage =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[89]++, process.memoryUsage());
      const loadAvg =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[90]++, os.loadavg());
      // Estimate CPU usage from load average
      const cpuCount =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[91]++, os.cpus().length);
      const estimatedCpu =
      /* istanbul ignore next */
      (cov_11tmfecun7().s[92]++, Math.min(100, loadAvg[0] / cpuCount * 100));
      /* istanbul ignore next */
      cov_11tmfecun7().s[93]++;
      this.currentUsage = {
        cpu_percent: estimatedCpu,
        memory_mb: Math.floor(memUsage.rss / 1024 / 1024),
        memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),
        active_tests: this.reservedResources.size,
        queue_length: 0,
        // Will be updated by queue manager
        load_average: loadAvg,
        timestamp: new Date()
      };
      /* istanbul ignore next */
      cov_11tmfecun7().s[94]++;
      resolve();
    });
  }
  /**
   * Start monitoring system resources
   */
  startMonitoring() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[23]++;
    cov_11tmfecun7().s[95]++;
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_11tmfecun7().f[24]++;
      cov_11tmfecun7().s[96]++;
      await this.updateCurrentUsage();
      // Emit events for significant changes
      /* istanbul ignore next */
      cov_11tmfecun7().s[97]++;
      if (this.isSystemUnderStress()) {
        /* istanbul ignore next */
        cov_11tmfecun7().b[23][0]++;
        cov_11tmfecun7().s[98]++;
        this.emit('systemStress', this.currentUsage);
      } else
      /* istanbul ignore next */
      {
        cov_11tmfecun7().b[23][1]++;
      }
      // Check for resource violations
      cov_11tmfecun7().s[99]++;
      if (this.currentUsage.cpu_percent > this.limits.emergency_threshold_cpu) {
        /* istanbul ignore next */
        cov_11tmfecun7().b[24][0]++;
        cov_11tmfecun7().s[100]++;
        this.emit('emergencyThreshold', {
          type: 'cpu',
          usage: this.currentUsage
        });
      } else
      /* istanbul ignore next */
      {
        cov_11tmfecun7().b[24][1]++;
      }
      cov_11tmfecun7().s[101]++;
      if (this.currentUsage.memory_mb > this.limits.emergency_threshold_memory) {
        /* istanbul ignore next */
        cov_11tmfecun7().b[25][0]++;
        cov_11tmfecun7().s[102]++;
        this.emit('emergencyThreshold', {
          type: 'memory',
          usage: this.currentUsage
        });
      } else
      /* istanbul ignore next */
      {
        cov_11tmfecun7().b[25][1]++;
      }
      cov_11tmfecun7().s[103]++;
      this.emit('resourcesUpdated', this.currentUsage);
    }, 5000); // Update every 5 seconds
  }
  /**
   * Stop monitoring and cleanup
   */
  destroy() {
    /* istanbul ignore next */
    cov_11tmfecun7().f[25]++;
    cov_11tmfecun7().s[104]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_11tmfecun7().b[26][0]++;
      cov_11tmfecun7().s[105]++;
      clearInterval(this.monitoringInterval);
    } else
    /* istanbul ignore next */
    {
      cov_11tmfecun7().b[26][1]++;
    }
    cov_11tmfecun7().s[106]++;
    this.removeAllListeners();
  }
}
/* istanbul ignore next */
cov_11tmfecun7().s[107]++;
exports.ResourceManager = ResourceManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,