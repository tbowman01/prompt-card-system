{"version":3,"names":["os","cov_11tmfecun7","s","__importStar","require","events_1","ResourceManager","EventEmitter","constructor","limits","f","reservedResources","Map","max_cpu_percent","max_memory_mb","Math","floor","totalmem","max_concurrent_tests","emergency_threshold_cpu","emergency_threshold_memory","currentUsage","cpu_percent","memory_mb","memory_total_mb","active_tests","queue_length","load_average","loadavg","timestamp","Date","startMonitoring","checkResourceAvailability","requirement","updateCurrentUsage","projectedCpu","projectedMemory","projectedTests","concurrent_tests","cpuOk","memoryOk","testsOk","priority","b","emergencyCpuOk","emergencyMemoryOk","reserveResources","taskId","isAvailable","Error","set","emit","releaseResources","get","delete","getCurrentUsage","getLimits","setLimits","newLimits","initialize","console","log","cleanup","destroy","getReservedResourcesSummary","totalCpu","totalMemory","totalTests","values","total_reserved_cpu","total_reserved_memory","total_reserved_tests","active_reservations","size","isSystemUnderStress","cpuStress","memoryStress","loadStress","cpus","length","getOptimalConcurrency","cpuBasedConcurrency","max","memoryBasedConcurrency","min","Promise","resolve","memUsage","process","memoryUsage","loadAvg","cpuCount","estimatedCpu","rss","monitoringInterval","setInterval","type","usage","clearInterval","removeAllListeners","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/testing/ResourceManager.ts"],"sourcesContent":["import * as os from 'os';\nimport { EventEmitter } from 'events';\n\nexport interface ResourceRequirement {\n  cpu_percent: number;\n  memory_mb: number;\n  concurrent_tests: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface ResourceUsage {\n  cpu_percent: number;\n  memory_mb: number;\n  memory_total_mb: number;\n  active_tests: number;\n  queue_length: number;\n  load_average: number[];\n  timestamp: Date;\n}\n\nexport interface ResourceLimits {\n  max_cpu_percent: number;\n  max_memory_mb: number;\n  max_concurrent_tests: number;\n  emergency_threshold_cpu: number;\n  emergency_threshold_memory: number;\n}\n\nexport class ResourceManager extends EventEmitter {\n  private reservedResources: Map<string, ResourceRequirement> = new Map();\n  private currentUsage: ResourceUsage;\n  private limits: ResourceLimits;\n  private monitoringInterval?: NodeJS.Timeout;\n\n  constructor(limits?: Partial<ResourceLimits>) {\n    super();\n    \n    this.limits = {\n      max_cpu_percent: 80,\n      max_memory_mb: Math.floor(os.totalmem() / 1024 / 1024 * 0.8), // 80% of system memory\n      max_concurrent_tests: 10,\n      emergency_threshold_cpu: 90,\n      emergency_threshold_memory: Math.floor(os.totalmem() / 1024 / 1024 * 0.9), // 90% of system memory\n      ...limits\n    };\n\n    this.currentUsage = {\n      cpu_percent: 0,\n      memory_mb: 0,\n      memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n      active_tests: 0,\n      queue_length: 0,\n      load_average: os.loadavg(),\n      timestamp: new Date()\n    };\n\n    this.startMonitoring();\n  }\n\n  /**\n   * Check if resources are available for the given requirement\n   */\n  async checkResourceAvailability(requirement: ResourceRequirement): Promise<boolean> {\n    await this.updateCurrentUsage();\n    \n    // Calculate projected usage\n    const projectedCpu = this.currentUsage.cpu_percent + requirement.cpu_percent;\n    const projectedMemory = this.currentUsage.memory_mb + requirement.memory_mb;\n    const projectedTests = this.currentUsage.active_tests + requirement.concurrent_tests;\n\n    // Check against limits\n    const cpuOk = projectedCpu <= this.limits.max_cpu_percent;\n    const memoryOk = projectedMemory <= this.limits.max_memory_mb;\n    const testsOk = projectedTests <= this.limits.max_concurrent_tests;\n\n    // Priority-based overrides\n    if (requirement.priority === 'critical') {\n      // Critical tasks can use emergency thresholds\n      const emergencyCpuOk = projectedCpu <= this.limits.emergency_threshold_cpu;\n      const emergencyMemoryOk = projectedMemory <= this.limits.emergency_threshold_memory;\n      return emergencyCpuOk && emergencyMemoryOk;\n    }\n\n    return cpuOk && memoryOk && testsOk;\n  }\n\n  /**\n   * Reserve resources for a specific task\n   */\n  async reserveResources(taskId: string, requirement: ResourceRequirement): Promise<void> {\n    const isAvailable = await this.checkResourceAvailability(requirement);\n    \n    if (!isAvailable) {\n      throw new Error(`Insufficient resources for task ${taskId}`);\n    }\n\n    this.reservedResources.set(taskId, requirement);\n    this.emit('resourcesReserved', { taskId, requirement });\n  }\n\n  /**\n   * Release resources for a specific task\n   */\n  async releaseResources(taskId: string): Promise<void> {\n    const requirement = this.reservedResources.get(taskId);\n    if (requirement) {\n      this.reservedResources.delete(taskId);\n      this.emit('resourcesReleased', { taskId, requirement });\n    }\n  }\n\n  /**\n   * Get current resource usage\n   */\n  getCurrentUsage(): ResourceUsage {\n    return { ...this.currentUsage };\n  }\n\n  /**\n   * Get resource limits\n   */\n  getLimits(): ResourceLimits {\n    return { ...this.limits };\n  }\n\n  /**\n   * Set resource limits\n   */\n  setLimits(newLimits: Partial<ResourceLimits>): void {\n    this.limits = { ...this.limits, ...newLimits };\n    this.emit('limitsUpdated', this.limits);\n  }\n\n  /**\n   * Initialize the resource manager\n   */\n  async initialize(): Promise<void> {\n    await this.updateCurrentUsage();\n    console.log('ResourceManager initialized');\n  }\n\n  /**\n   * Cleanup and shutdown the resource manager\n   */\n  async cleanup(): Promise<void> {\n    this.destroy();\n    console.log('ResourceManager cleaned up');\n  }\n\n  /**\n   * Get reserved resources summary\n   */\n  getReservedResourcesSummary(): {\n    total_reserved_cpu: number;\n    total_reserved_memory: number;\n    total_reserved_tests: number;\n    active_reservations: number;\n  } {\n    let totalCpu = 0;\n    let totalMemory = 0;\n    let totalTests = 0;\n\n    for (const requirement of this.reservedResources.values()) {\n      totalCpu += requirement.cpu_percent;\n      totalMemory += requirement.memory_mb;\n      totalTests += requirement.concurrent_tests;\n    }\n\n    return {\n      total_reserved_cpu: totalCpu,\n      total_reserved_memory: totalMemory,\n      total_reserved_tests: totalTests,\n      active_reservations: this.reservedResources.size\n    };\n  }\n\n  /**\n   * Check if system is under stress\n   */\n  isSystemUnderStress(): boolean {\n    const cpuStress = this.currentUsage.cpu_percent > (this.limits.max_cpu_percent * 0.8);\n    const memoryStress = this.currentUsage.memory_mb > (this.limits.max_memory_mb * 0.8);\n    const loadStress = this.currentUsage.load_average[0] > os.cpus().length * 0.8;\n\n    return cpuStress || memoryStress || loadStress;\n  }\n\n  /**\n   * Get optimal concurrency level based on current resources\n   */\n  getOptimalConcurrency(): number {\n    const cpuBasedConcurrency = Math.max(1, Math.floor(\n      (this.limits.max_cpu_percent - this.currentUsage.cpu_percent) / 15\n    ));\n    \n    const memoryBasedConcurrency = Math.max(1, Math.floor(\n      (this.limits.max_memory_mb - this.currentUsage.memory_mb) / 100\n    ));\n\n    return Math.min(\n      cpuBasedConcurrency,\n      memoryBasedConcurrency,\n      this.limits.max_concurrent_tests\n    );\n  }\n\n  /**\n   * Update current resource usage\n   */\n  private async updateCurrentUsage(): Promise<void> {\n    return new Promise((resolve) => {\n      // Use a simple CPU usage calculation\n      const memUsage = process.memoryUsage();\n      const loadAvg = os.loadavg();\n      \n      // Estimate CPU usage from load average\n      const cpuCount = os.cpus().length;\n      const estimatedCpu = Math.min(100, (loadAvg[0] / cpuCount) * 100);\n\n      this.currentUsage = {\n        cpu_percent: estimatedCpu,\n        memory_mb: Math.floor(memUsage.rss / 1024 / 1024),\n        memory_total_mb: Math.floor(os.totalmem() / 1024 / 1024),\n        active_tests: this.reservedResources.size,\n        queue_length: 0, // Will be updated by queue manager\n        load_average: loadAvg,\n        timestamp: new Date()\n      };\n\n      resolve();\n    });\n  }\n\n  /**\n   * Start monitoring system resources\n   */\n  private startMonitoring(): void {\n    this.monitoringInterval = setInterval(async () => {\n      await this.updateCurrentUsage();\n      \n      // Emit events for significant changes\n      if (this.isSystemUnderStress()) {\n        this.emit('systemStress', this.currentUsage);\n      }\n\n      // Check for resource violations\n      if (this.currentUsage.cpu_percent > this.limits.emergency_threshold_cpu) {\n        this.emit('emergencyThreshold', { type: 'cpu', usage: this.currentUsage });\n      }\n\n      if (this.currentUsage.memory_mb > this.limits.emergency_threshold_memory) {\n        this.emit('emergencyThreshold', { type: 'memory', usage: this.currentUsage });\n      }\n\n      this.emit('resourcesUpdated', this.currentUsage);\n    }, 5000); // Update every 5 seconds\n  }\n\n  /**\n   * Stop monitoring and cleanup\n   */\n  destroy(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n    this.removeAllListeners();\n  }\n}"],"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","ignoreList":[]}