a03fa4edd83ce871173bfcd953ab57d5
"use strict";

/* istanbul ignore next */
function cov_f48clsnev() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/loadTesting.ts";
  var hash = "4a5bfc97ddf7d3454657e9f67288e98168a735e0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/loadTesting.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 31
        },
        end: {
          line: 7,
          column: 86
        }
      },
      "5": {
        start: {
          line: 8,
          column: 40
        },
        end: {
          line: 8,
          column: 104
        }
      },
      "6": {
        start: {
          line: 9,
          column: 31
        },
        end: {
          line: 9,
          column: 86
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 56
        }
      },
      "8": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 11,
          column: 45
        }
      },
      "9": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "10": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 77,
          column: 2
        }
      },
      "11": {
        start: {
          line: 78,
          column: 22
        },
        end: {
          line: 85,
          column: 2
        }
      },
      "12": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 88,
          column: 2
        }
      },
      "13": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 94,
          column: 2
        }
      },
      "14": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 102,
          column: 2
        }
      },
      "15": {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 124,
          column: 3
        }
      },
      "16": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "17": {
        start: {
          line: 109,
          column: 26
        },
        end: {
          line: 109,
          column: 84
        }
      },
      "18": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "19": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "20": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 147,
          column: 3
        }
      },
      "21": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "22": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "23": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "24": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "25": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "26": {
        start: {
          line: 152,
          column: 0
        },
        end: {
          line: 188,
          column: 3
        }
      },
      "27": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "28": {
        start: {
          line: 154,
          column: 40
        },
        end: {
          line: 154,
          column: 48
        }
      },
      "29": {
        start: {
          line: 156,
          column: 23
        },
        end: {
          line: 156,
          column: 78
        }
      },
      "30": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "31": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "32": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 165,
          column: 104
        }
      },
      "33": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "34": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "35": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 75
        }
      },
      "36": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 81
        }
      },
      "37": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "38": {
        start: {
          line: 193,
          column: 0
        },
        end: {
          line: 207,
          column: 3
        }
      },
      "39": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "40": {
        start: {
          line: 195,
          column: 23
        },
        end: {
          line: 195,
          column: 78
        }
      },
      "41": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "42": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "43": {
        start: {
          line: 212,
          column: 0
        },
        end: {
          line: 228,
          column: 3
        }
      },
      "44": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 227,
          column: 5
        }
      },
      "45": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 69
        }
      },
      "46": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "47": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "48": {
        start: {
          line: 233,
          column: 0
        },
        end: {
          line: 259,
          column: 3
        }
      },
      "49": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 258,
          column: 5
        }
      },
      "50": {
        start: {
          line: 235,
          column: 32
        },
        end: {
          line: 235,
          column: 40
        }
      },
      "51": {
        start: {
          line: 237,
          column: 34
        },
        end: {
          line: 237,
          column: 108
        }
      },
      "52": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "53": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "54": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 63
        }
      },
      "55": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 60
        }
      },
      "56": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "57": {
        start: {
          line: 264,
          column: 0
        },
        end: {
          line: 323,
          column: 3
        }
      },
      "58": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 322,
          column: 5
        }
      },
      "59": {
        start: {
          line: 266,
          column: 31
        },
        end: {
          line: 266,
          column: 41
        }
      },
      "60": {
        start: {
          line: 267,
          column: 22
        },
        end: {
          line: 267,
          column: 53
        }
      },
      "61": {
        start: {
          line: 268,
          column: 23
        },
        end: {
          line: 268,
          column: 54
        }
      },
      "62": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "63": {
        start: {
          line: 274,
          column: 21
        },
        end: {
          line: 274,
          column: 36
        }
      },
      "64": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "65": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 281,
          column: 8
        }
      },
      "66": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 49
        }
      },
      "67": {
        start: {
          line: 284,
          column: 21
        },
        end: {
          line: 284,
          column: 146
        }
      },
      "68": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 285,
          column: 43
        }
      },
      "69": {
        start: {
          line: 286,
          column: 33
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "70": {
        start: {
          line: 286,
          column: 55
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "71": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "72": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "73": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 367,
          column: 3
        }
      },
      "74": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 366,
          column: 5
        }
      },
      "75": {
        start: {
          line: 330,
          column: 65
        },
        end: {
          line: 330,
          column: 73
        }
      },
      "76": {
        start: {
          line: 332,
          column: 21
        },
        end: {
          line: 337,
          column: 6
        }
      },
      "77": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 338,
          column: 40
        }
      },
      "78": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "79": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 343,
          column: 15
        }
      },
      "80": {
        start: {
          line: 345,
          column: 24
        },
        end: {
          line: 345,
          column: 52
        }
      },
      "81": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 350,
          column: 11
        }
      },
      "82": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 359,
          column: 11
        }
      },
      "83": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 365,
          column: 11
        }
      },
      "84": {
        start: {
          line: 372,
          column: 0
        },
        end: {
          line: 389,
          column: 3
        }
      },
      "85": {
        start: {
          line: 373,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "86": {
        start: {
          line: 374,
          column: 26
        },
        end: {
          line: 374,
          column: 102
        }
      },
      "87": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 381,
          column: 11
        }
      },
      "88": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 387,
          column: 11
        }
      },
      "89": {
        start: {
          line: 394,
          column: 0
        },
        end: {
          line: 433,
          column: 3
        }
      },
      "90": {
        start: {
          line: 395,
          column: 4
        },
        end: {
          line: 432,
          column: 5
        }
      },
      "91": {
        start: {
          line: 396,
          column: 53
        },
        end: {
          line: 396,
          column: 62
        }
      },
      "92": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "93": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 402,
          column: 14
        }
      },
      "94": {
        start: {
          line: 404,
          column: 21
        },
        end: {
          line: 404,
          column: 116
        }
      },
      "95": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "96": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 73
        }
      },
      "97": {
        start: {
          line: 407,
          column: 44
        },
        end: {
          line: 407,
          column: 71
        }
      },
      "98": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "99": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 77
        }
      },
      "100": {
        start: {
          line: 411,
          column: 44
        },
        end: {
          line: 411,
          column: 75
        }
      },
      "101": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 425,
          column: 11
        }
      },
      "102": {
        start: {
          line: 419,
          column: 49
        },
        end: {
          line: 419,
          column: 74
        }
      },
      "103": {
        start: {
          line: 420,
          column: 45
        },
        end: {
          line: 420,
          column: 66
        }
      },
      "104": {
        start: {
          line: 421,
          column: 47
        },
        end: {
          line: 421,
          column: 70
        }
      },
      "105": {
        start: {
          line: 422,
          column: 44
        },
        end: {
          line: 422,
          column: 64
        }
      },
      "106": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 431,
          column: 11
        }
      },
      "107": {
        start: {
          line: 438,
          column: 0
        },
        end: {
          line: 456,
          column: 3
        }
      },
      "108": {
        start: {
          line: 439,
          column: 4
        },
        end: {
          line: 455,
          column: 5
        }
      },
      "109": {
        start: {
          line: 440,
          column: 26
        },
        end: {
          line: 440,
          column: 34
        }
      },
      "110": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 441,
          column: 112
        }
      },
      "111": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 448,
          column: 11
        }
      },
      "112": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 454,
          column: 11
        }
      },
      "113": {
        start: {
          line: 461,
          column: 0
        },
        end: {
          line: 487,
          column: 3
        }
      },
      "114": {
        start: {
          line: 462,
          column: 4
        },
        end: {
          line: 486,
          column: 5
        }
      },
      "115": {
        start: {
          line: 463,
          column: 31
        },
        end: {
          line: 463,
          column: 41
        }
      },
      "116": {
        start: {
          line: 464,
          column: 31
        },
        end: {
          line: 464,
          column: 40
        }
      },
      "117": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "118": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 469,
          column: 15
        }
      },
      "119": {
        start: {
          line: 471,
          column: 23
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "120": {
        start: {
          line: 475,
          column: 23
        },
        end: {
          line: 475,
          column: 135
        }
      },
      "121": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 479,
          column: 11
        }
      },
      "122": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 485,
          column: 11
        }
      },
      "123": {
        start: {
          line: 492,
          column: 0
        },
        end: {
          line: 510,
          column: 3
        }
      },
      "124": {
        start: {
          line: 493,
          column: 4
        },
        end: {
          line: 509,
          column: 5
        }
      },
      "125": {
        start: {
          line: 494,
          column: 25
        },
        end: {
          line: 494,
          column: 65
        }
      },
      "126": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 96
        }
      },
      "127": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 502,
          column: 11
        }
      },
      "128": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 508,
          column: 11
        }
      },
      "129": {
        start: {
          line: 515,
          column: 0
        },
        end: {
          line: 531,
          column: 3
        }
      },
      "130": {
        start: {
          line: 516,
          column: 4
        },
        end: {
          line: 530,
          column: 5
        }
      },
      "131": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 517,
          column: 87
        }
      },
      "132": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 523,
          column: 11
        }
      },
      "133": {
        start: {
          line: 526,
          column: 8
        },
        end: {
          line: 529,
          column: 11
        }
      },
      "134": {
        start: {
          line: 536,
          column: 0
        },
        end: {
          line: 561,
          column: 3
        }
      },
      "135": {
        start: {
          line: 537,
          column: 4
        },
        end: {
          line: 560,
          column: 5
        }
      },
      "136": {
        start: {
          line: 538,
          column: 23
        },
        end: {
          line: 538,
          column: 78
        }
      },
      "137": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 553,
          column: 11
        }
      },
      "138": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 559,
          column: 11
        }
      },
      "139": {
        start: {
          line: 566,
          column: 0
        },
        end: {
          line: 602,
          column: 3
        }
      },
      "140": {
        start: {
          line: 567,
          column: 4
        },
        end: {
          line: 601,
          column: 5
        }
      },
      "141": {
        start: {
          line: 568,
          column: 26
        },
        end: {
          line: 568,
          column: 77
        }
      },
      "142": {
        start: {
          line: 570,
          column: 23
        },
        end: {
          line: 570,
          column: 78
        }
      },
      "143": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 578,
          column: 9
        }
      },
      "144": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 577,
          column: 15
        }
      },
      "145": {
        start: {
          line: 580,
          column: 33
        },
        end: {
          line: 580,
          column: 105
        }
      },
      "146": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 588,
          column: 11
        }
      },
      "147": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 594,
          column: 11
        }
      },
      "148": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 591,
          column: 68
        }
      },
      "149": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 60
        }
      },
      "150": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 600,
          column: 11
        }
      },
      "151": {
        start: {
          line: 607,
          column: 0
        },
        end: {
          line: 621,
          column: 3
        }
      },
      "152": {
        start: {
          line: 608,
          column: 4
        },
        end: {
          line: 620,
          column: 5
        }
      },
      "153": {
        start: {
          line: 609,
          column: 23
        },
        end: {
          line: 609,
          column: 78
        }
      },
      "154": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 613,
          column: 11
        }
      },
      "155": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 619,
          column: 11
        }
      },
      "156": {
        start: {
          line: 626,
          column: 0
        },
        end: {
          line: 642,
          column: 3
        }
      },
      "157": {
        start: {
          line: 627,
          column: 4
        },
        end: {
          line: 641,
          column: 5
        }
      },
      "158": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 628,
          column: 95
        }
      },
      "159": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 634,
          column: 11
        }
      },
      "160": {
        start: {
          line: 637,
          column: 8
        },
        end: {
          line: 640,
          column: 11
        }
      },
      "161": {
        start: {
          line: 647,
          column: 0
        },
        end: {
          line: 679,
          column: 3
        }
      },
      "162": {
        start: {
          line: 648,
          column: 4
        },
        end: {
          line: 678,
          column: 5
        }
      },
      "163": {
        start: {
          line: 649,
          column: 31
        },
        end: {
          line: 649,
          column: 86
        }
      },
      "164": {
        start: {
          line: 650,
          column: 32
        },
        end: {
          line: 650,
          column: 87
        }
      },
      "165": {
        start: {
          line: 651,
          column: 23
        },
        end: {
          line: 667,
          column: 9
        }
      },
      "166": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 671,
          column: 11
        }
      },
      "167": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 677,
          column: 11
        }
      },
      "168": {
        start: {
          line: 680,
          column: 0
        },
        end: {
          line: 680,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 107,
            column: 25
          },
          end: {
            line: 107,
            column: 26
          }
        },
        loc: {
          start: {
            line: 107,
            column: 39
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 107
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 129,
            column: 77
          },
          end: {
            line: 129,
            column: 78
          }
        },
        loc: {
          start: {
            line: 129,
            column: 91
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 129
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 152,
            column: 70
          },
          end: {
            line: 152,
            column: 71
          }
        },
        loc: {
          start: {
            line: 152,
            column: 90
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 152
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 176,
            column: 25
          },
          end: {
            line: 176,
            column: 26
          }
        },
        loc: {
          start: {
            line: 176,
            column: 36
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 176
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 178,
            column: 17
          },
          end: {
            line: 178,
            column: 18
          }
        },
        loc: {
          start: {
            line: 178,
            column: 26
          },
          end: {
            line: 180,
            column: 9
          }
        },
        line: 178
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 23
          }
        },
        loc: {
          start: {
            line: 193,
            column: 36
          },
          end: {
            line: 207,
            column: 1
          }
        },
        line: 193
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 212,
            column: 21
          },
          end: {
            line: 212,
            column: 22
          }
        },
        loc: {
          start: {
            line: 212,
            column: 41
          },
          end: {
            line: 228,
            column: 1
          }
        },
        line: 212
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 233,
            column: 89
          },
          end: {
            line: 233,
            column: 90
          }
        },
        loc: {
          start: {
            line: 233,
            column: 109
          },
          end: {
            line: 259,
            column: 1
          }
        },
        line: 233
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 247,
            column: 31
          },
          end: {
            line: 247,
            column: 32
          }
        },
        loc: {
          start: {
            line: 247,
            column: 42
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 247
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 249,
            column: 17
          },
          end: {
            line: 249,
            column: 18
          }
        },
        loc: {
          start: {
            line: 249,
            column: 26
          },
          end: {
            line: 251,
            column: 9
          }
        },
        line: 249
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 264,
            column: 36
          },
          end: {
            line: 264,
            column: 37
          }
        },
        loc: {
          start: {
            line: 264,
            column: 56
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 264
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 286,
            column: 45
          },
          end: {
            line: 286,
            column: 46
          }
        },
        loc: {
          start: {
            line: 286,
            column: 55
          },
          end: {
            line: 304,
            column: 9
          }
        },
        line: 286
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 328,
            column: 77
          },
          end: {
            line: 328,
            column: 78
          }
        },
        loc: {
          start: {
            line: 328,
            column: 97
          },
          end: {
            line: 367,
            column: 1
          }
        },
        line: 328
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 372,
            column: 25
          },
          end: {
            line: 372,
            column: 26
          }
        },
        loc: {
          start: {
            line: 372,
            column: 39
          },
          end: {
            line: 389,
            column: 1
          }
        },
        line: 372
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 394,
            column: 33
          },
          end: {
            line: 394,
            column: 34
          }
        },
        loc: {
          start: {
            line: 394,
            column: 53
          },
          end: {
            line: 433,
            column: 1
          }
        },
        line: 394
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 407,
            column: 35
          },
          end: {
            line: 407,
            column: 36
          }
        },
        loc: {
          start: {
            line: 407,
            column: 44
          },
          end: {
            line: 407,
            column: 71
          }
        },
        line: 407
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 411,
            column: 35
          },
          end: {
            line: 411,
            column: 36
          }
        },
        loc: {
          start: {
            line: 411,
            column: 44
          },
          end: {
            line: 411,
            column: 75
          }
        },
        line: 411
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 419,
            column: 44
          },
          end: {
            line: 419,
            column: 45
          }
        },
        loc: {
          start: {
            line: 419,
            column: 49
          },
          end: {
            line: 419,
            column: 74
          }
        },
        line: 419
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 420,
            column: 40
          },
          end: {
            line: 420,
            column: 41
          }
        },
        loc: {
          start: {
            line: 420,
            column: 45
          },
          end: {
            line: 420,
            column: 66
          }
        },
        line: 420
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 421,
            column: 42
          },
          end: {
            line: 421,
            column: 43
          }
        },
        loc: {
          start: {
            line: 421,
            column: 47
          },
          end: {
            line: 421,
            column: 70
          }
        },
        line: 421
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 422,
            column: 39
          },
          end: {
            line: 422,
            column: 40
          }
        },
        loc: {
          start: {
            line: 422,
            column: 44
          },
          end: {
            line: 422,
            column: 64
          }
        },
        line: 422
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 438,
            column: 90
          },
          end: {
            line: 438,
            column: 91
          }
        },
        loc: {
          start: {
            line: 438,
            column: 104
          },
          end: {
            line: 456,
            column: 1
          }
        },
        line: 438
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 461,
            column: 45
          },
          end: {
            line: 461,
            column: 46
          }
        },
        loc: {
          start: {
            line: 461,
            column: 65
          },
          end: {
            line: 487,
            column: 1
          }
        },
        line: 461
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 492,
            column: 44
          },
          end: {
            line: 492,
            column: 45
          }
        },
        loc: {
          start: {
            line: 492,
            column: 58
          },
          end: {
            line: 510,
            column: 1
          }
        },
        line: 492
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 515,
            column: 43
          },
          end: {
            line: 515,
            column: 44
          }
        },
        loc: {
          start: {
            line: 515,
            column: 57
          },
          end: {
            line: 531,
            column: 1
          }
        },
        line: 515
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 536,
            column: 26
          },
          end: {
            line: 536,
            column: 27
          }
        },
        loc: {
          start: {
            line: 536,
            column: 40
          },
          end: {
            line: 561,
            column: 1
          }
        },
        line: 536
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 566,
            column: 31
          },
          end: {
            line: 566,
            column: 32
          }
        },
        loc: {
          start: {
            line: 566,
            column: 51
          },
          end: {
            line: 602,
            column: 1
          }
        },
        line: 566
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 590,
            column: 30
          },
          end: {
            line: 590,
            column: 31
          }
        },
        loc: {
          start: {
            line: 590,
            column: 41
          },
          end: {
            line: 592,
            column: 9
          }
        },
        line: 590
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 592,
            column: 17
          },
          end: {
            line: 592,
            column: 18
          }
        },
        loc: {
          start: {
            line: 592,
            column: 26
          },
          end: {
            line: 594,
            column: 9
          }
        },
        line: 592
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 607,
            column: 33
          },
          end: {
            line: 607,
            column: 34
          }
        },
        loc: {
          start: {
            line: 607,
            column: 47
          },
          end: {
            line: 621,
            column: 1
          }
        },
        line: 607
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 626,
            column: 32
          },
          end: {
            line: 626,
            column: 33
          }
        },
        loc: {
          start: {
            line: 626,
            column: 52
          },
          end: {
            line: 642,
            column: 1
          }
        },
        line: 626
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 647,
            column: 22
          },
          end: {
            line: 647,
            column: 23
          }
        },
        loc: {
          start: {
            line: 647,
            column: 36
          },
          end: {
            line: 679,
            column: 1
          }
        },
        line: 647
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "4": {
        loc: {
          start: {
            line: 267,
            column: 22
          },
          end: {
            line: 267,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 22
          },
          end: {
            line: 267,
            column: 47
          }
        }, {
          start: {
            line: 267,
            column: 51
          },
          end: {
            line: 267,
            column: 53
          }
        }],
        line: 267
      },
      "5": {
        loc: {
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 49
          }
        }, {
          start: {
            line: 268,
            column: 53
          },
          end: {
            line: 268,
            column: 54
          }
        }],
        line: 268
      },
      "6": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "7": {
        loc: {
          start: {
            line: 284,
            column: 21
          },
          end: {
            line: 284,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 21
          },
          end: {
            line: 284,
            column: 88
          }
        }, {
          start: {
            line: 284,
            column: 92
          },
          end: {
            line: 284,
            column: 146
          }
        }],
        line: 284
      },
      "8": {
        loc: {
          start: {
            line: 303,
            column: 16
          },
          end: {
            line: 303,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 16
          },
          end: {
            line: 303,
            column: 45
          }
        }, {
          start: {
            line: 303,
            column: 49
          },
          end: {
            line: 303,
            column: 102
          }
        }],
        line: 303
      },
      "9": {
        loc: {
          start: {
            line: 303,
            column: 75
          },
          end: {
            line: 303,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 75
          },
          end: {
            line: 303,
            column: 91
          }
        }, {
          start: {
            line: 303,
            column: 95
          },
          end: {
            line: 303,
            column: 99
          }
        }],
        line: 303
      },
      "10": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "11": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 403,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 403,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "12": {
        loc: {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 398,
            column: 24
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: 398,
            column: 21
          },
          end: {
            line: 398,
            column: 24
          }
        }],
        line: 398
      },
      "13": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "14": {
        loc: {
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "15": {
        loc: {
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "16": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 465,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 465,
            column: 18
          }
        }, {
          start: {
            line: 465,
            column: 22
          },
          end: {
            line: 465,
            column: 26
          }
        }],
        line: 465
      },
      "17": {
        loc: {
          start: {
            line: 494,
            column: 25
          },
          end: {
            line: 494,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 494,
            column: 25
          },
          end: {
            line: 494,
            column: 59
          }
        }, {
          start: {
            line: 494,
            column: 63
          },
          end: {
            line: 494,
            column: 65
          }
        }],
        line: 494
      },
      "18": {
        loc: {
          start: {
            line: 568,
            column: 26
          },
          end: {
            line: 568,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 568,
            column: 26
          },
          end: {
            line: 568,
            column: 44
          }
        }, {
          start: {
            line: 568,
            column: 48
          },
          end: {
            line: 568,
            column: 77
          }
        }],
        line: 568
      },
      "19": {
        loc: {
          start: {
            line: 571,
            column: 8
          },
          end: {
            line: 578,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 571,
            column: 8
          },
          end: {
            line: 578,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 571
      },
      "20": {
        loc: {
          start: {
            line: 664,
            column: 28
          },
          end: {
            line: 664,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 664,
            column: 28
          },
          end: {
            line: 664,
            column: 105
          }
        }, {
          start: {
            line: 664,
            column: 109
          },
          end: {
            line: 664,
            column: 114
          }
        }],
        line: 664
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/loadTesting.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/loadTesting.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { loadTestingFramework, LoadTestScenario } from '../services/performance/LoadTestingFramework';\nimport { performanceRegressionDetector } from '../services/performance/PerformanceRegressionDetector';\nimport { performanceBenchmark } from '../services/performance/PerformanceBenchmark';\nimport { validateRequest } from '../middleware/validation';\nimport Joi from 'joi';\n\nconst router = Router();\n\n// Validation schemas\nconst scenarioSchema = Joi.object({\n  id: Joi.string().required(),\n  name: Joi.string().required(),\n  description: Joi.string().required(),\n  config: Joi.object({\n    baseUrl: Joi.string().uri().required(),\n    endpoints: Joi.array().items(\n      Joi.object({\n        path: Joi.string().required(),\n        method: Joi.string().valid('GET', 'POST', 'PUT', 'DELETE', 'PATCH').required(),\n        weight: Joi.number().min(0).max(100).required(),\n        headers: Joi.object().optional(),\n        body: Joi.any().optional(),\n        timeout: Joi.number().min(1000).optional(),\n        params: Joi.object().optional(),\n        validation: Joi.object({\n          statusCode: Joi.array().items(Joi.number()).optional(),\n          responseTime: Joi.number().optional(),\n          bodyContains: Joi.array().items(Joi.string()).optional(),\n          headerExists: Joi.array().items(Joi.string()).optional()\n        }).optional()\n      })\n    ).min(1).required(),\n    users: Joi.object({\n      concurrent: Joi.number().min(1).max(1000).required(),\n      rampUp: Joi.object({\n        duration: Joi.number().min(1).required(),\n        strategy: Joi.string().valid('linear', 'exponential', 'step').required()\n      }).required(),\n      rampDown: Joi.object({\n        duration: Joi.number().min(1).required(),\n        strategy: Joi.string().valid('linear', 'exponential', 'immediate').required()\n      }).required(),\n      thinkTime: Joi.object({\n        min: Joi.number().min(0).required(),\n        max: Joi.number().min(0).required(),\n        distribution: Joi.string().valid('uniform', 'normal', 'exponential').required()\n      }).required()\n    }).required(),\n    duration: Joi.object({\n      total: Joi.number().min(10).max(3600).required(),\n      warmup: Joi.number().min(0).optional(),\n      cooldown: Joi.number().min(0).optional()\n    }).required(),\n    thresholds: Joi.object({\n      responseTime: Joi.object({\n        p95: Joi.number().min(1).required(),\n        p99: Joi.number().min(1).required(),\n        max: Joi.number().min(1).required()\n      }).required(),\n      errorRate: Joi.object({\n        max: Joi.number().min(0).max(100).required()\n      }).required(),\n      throughput: Joi.object({\n        min: Joi.number().min(0).required()\n      }).required()\n    }).required(),\n    environment: Joi.object({\n      variables: Joi.object().optional(),\n      dataFiles: Joi.array().items(Joi.string()).optional(),\n      concurrent: Joi.boolean().optional(),\n      keepAlive: Joi.boolean().optional(),\n      compression: Joi.boolean().optional()\n    }).optional()\n  }).required()\n});\n\nconst runTestSchema = Joi.object({\n  scenarioId: Joi.string().required(),\n  options: Joi.object({\n    dryRun: Joi.boolean().optional(),\n    saveBaseline: Joi.boolean().optional(),\n    compareBaseline: Joi.boolean().optional()\n  }).optional()\n});\n\nconst regressionTestSchema = Joi.object({\n  scenarioIds: Joi.array().items(Joi.string()).min(1).required()\n});\n\nconst baselineSchema = Joi.object({\n  scenarioId: Joi.string().required(),\n  version: Joi.string().optional(),\n  environment: Joi.string().optional(),\n  confidence: Joi.number().min(0).max(1).optional()\n});\n\nconst thresholdSchema = Joi.object({\n  metric: Joi.string().required(),\n  warning: Joi.number().min(0).required(),\n  critical: Joi.number().min(0).required(),\n  method: Joi.string().valid('absolute', 'statistical', 'adaptive').required(),\n  confidence: Joi.number().min(0).max(1).required(),\n  minSampleSize: Joi.number().min(1).required()\n});\n\n/**\n * GET /load-testing/scenarios\n * Get all registered load test scenarios\n */\nrouter.get('/scenarios', (req, res) => {\n  try {\n    const scenarios = loadTestingFramework.getScenarios();\n    \n    res.json({\n      success: true,\n      data: {\n        scenarios,\n        count: scenarios.length\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/scenarios\n * Register a new load test scenario\n */\nrouter.post('/scenarios', validateRequest(scenarioSchema), (req, res) => {\n  try {\n    const scenario: LoadTestScenario = req.body;\n    \n    loadTestingFramework.registerScenario(scenario);\n    \n    res.status(201).json({\n      success: true,\n      data: {\n        message: 'Scenario registered successfully',\n        scenarioId: scenario.id\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/run\n * Run a load test scenario\n */\nrouter.post('/run', validateRequest(runTestSchema), async (req, res) => {\n  try {\n    const { scenarioId, options } = req.body;\n    \n    // Check if test is already running\n    const status = loadTestingFramework.getStatus();\n    if (status.isRunning) {\n      return res.status(409).json({\n        success: false,\n        error: 'Load test is already running',\n        currentTest: status.currentTest\n      });\n    }\n    \n    // Start test asynchronously\n    const testPromise = loadTestingFramework.runLoadTest(scenarioId, options);\n    \n    // Return immediately with test started status\n    res.status(202).json({\n      success: true,\n      data: {\n        message: 'Load test started',\n        scenarioId,\n        status: 'running'\n      }\n    });\n    \n    // Handle test completion\n    testPromise.then(results => {\n      console.log(`Load test completed for scenario: ${scenarioId}`);\n    }).catch(error => {\n      console.error(`Load test failed for scenario: ${scenarioId}`, error);\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/status\n * Get current load test status\n */\nrouter.get('/status', (req, res) => {\n  try {\n    const status = loadTestingFramework.getStatus();\n    \n    res.json({\n      success: true,\n      data: status\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/stop\n * Stop current load test\n */\nrouter.post('/stop', async (req, res) => {\n  try {\n    await loadTestingFramework.stopTest();\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Load test stopped successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/regression-test\n * Run regression test on multiple scenarios\n */\nrouter.post('/regression-test', validateRequest(regressionTestSchema), async (req, res) => {\n  try {\n    const { scenarioIds } = req.body;\n    \n    // Start regression test asynchronously\n    const regressionPromise = loadTestingFramework.runRegressionTest(scenarioIds);\n    \n    res.status(202).json({\n      success: true,\n      data: {\n        message: 'Regression test started',\n        scenarioIds,\n        status: 'running'\n      }\n    });\n    \n    // Handle completion\n    regressionPromise.then(results => {\n      console.log('Regression test completed:', results);\n    }).catch(error => {\n      console.error('Regression test failed:', error);\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/results/:scenarioId?\n * Get load test results\n */\nrouter.get('/results/:scenarioId?', async (req, res) => {\n  try {\n    const { scenarioId } = req.params;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const offset = parseInt(req.query.offset as string) || 0;\n    \n    let query = `\n      SELECT * FROM load_test_results \n      ORDER BY created_at DESC \n      LIMIT ? OFFSET ?\n    `;\n    let params: any[] = [limit, offset];\n    \n    if (scenarioId) {\n      query = `\n        SELECT * FROM load_test_results \n        WHERE scenario_id = ? \n        ORDER BY created_at DESC \n        LIMIT ? OFFSET ?\n      `;\n      params = [scenarioId, limit, offset];\n    }\n    \n    const stmt = loadTestingFramework['db']?.prepare?.(query) || require('../../database/connection').db.prepare(query);\n    const results = stmt.all(...params);\n    \n    const formattedResults = results.map((row: any) => ({\n      id: row.id,\n      scenarioId: row.scenario_id,\n      scenarioName: row.scenario_name,\n      startTime: row.start_time,\n      endTime: row.end_time,\n      duration: row.duration,\n      totalRequests: row.total_requests,\n      successfulRequests: row.successful_requests,\n      failedRequests: row.failed_requests,\n      requestsPerSecond: row.requests_per_second,\n      avgResponseTime: row.avg_response_time,\n      p95ResponseTime: row.p95_response_time,\n      p99ResponseTime: row.p99_response_time,\n      errorRate: row.error_rate,\n      createdAt: row.created_at,\n      // Include full results if requested\n      ...(req.query.detailed === 'true' && { fullResults: JSON.parse(row.results_json || '{}') })\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        results: formattedResults,\n        pagination: {\n          limit,\n          offset,\n          count: formattedResults.length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/baselines\n * Set performance baseline for a scenario\n */\nrouter.post('/baselines', validateRequest(baselineSchema), async (req, res) => {\n  try {\n    const { scenarioId, version, environment, confidence } = req.body;\n    \n    // Get the latest test results for the scenario\n    const stmt = require('../../database/connection').db.prepare(`\n      SELECT results_json FROM load_test_results \n      WHERE scenario_id = ? \n      ORDER BY created_at DESC \n      LIMIT 1\n    `);\n    \n    const row = stmt.get(scenarioId);\n    if (!row) {\n      return res.status(404).json({\n        success: false,\n        error: 'No test results found for scenario'\n      });\n    }\n    \n    const results = JSON.parse(row.results_json);\n    await performanceRegressionDetector.setBaseline(scenarioId, results, {\n      version,\n      environment,\n      confidence\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Baseline set successfully',\n        scenarioId,\n        version,\n        environment\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/baselines\n * Get all performance baselines\n */\nrouter.get('/baselines', (req, res) => {\n  try {\n    const baselines = performanceRegressionDetector.getBaselines();\n    \n    res.json({\n      success: true,\n      data: {\n        baselines,\n        count: baselines.length\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/regression-alerts\n * Get regression alerts\n */\nrouter.get('/regression-alerts', async (req, res) => {\n  try {\n    const { start, end, severity, scenarioId } = req.query;\n    \n    let period;\n    if (start && end) {\n      period = {\n        start: new Date(start as string),\n        end: new Date(end as string)\n      };\n    }\n    \n    let alerts = await performanceRegressionDetector.getRegressionAlerts(period);\n    \n    // Filter by severity if provided\n    if (severity) {\n      alerts = alerts.filter(alert => alert.severity === severity);\n    }\n    \n    // Filter by scenario if provided\n    if (scenarioId) {\n      alerts = alerts.filter(alert => alert.scenarioId === scenarioId);\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        alerts,\n        count: alerts.length,\n        severityBreakdown: {\n          critical: alerts.filter(a => a.severity === 'critical').length,\n          high: alerts.filter(a => a.severity === 'high').length,\n          medium: alerts.filter(a => a.severity === 'medium').length,\n          low: alerts.filter(a => a.severity === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/regression-thresholds\n * Set regression detection thresholds\n */\nrouter.post('/regression-thresholds', validateRequest(thresholdSchema), (req, res) => {\n  try {\n    const threshold = req.body;\n    \n    performanceRegressionDetector.setThreshold(threshold.metric, threshold);\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Threshold updated successfully',\n        metric: threshold.metric\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/regression-report/:scenarioId\n * Generate regression report for a scenario\n */\nrouter.get('/regression-report/:scenarioId', async (req, res) => {\n  try {\n    const { scenarioId } = req.params;\n    const { start, end } = req.query;\n    \n    if (!start || !end) {\n      return res.status(400).json({\n        success: false,\n        error: 'Start and end dates are required'\n      });\n    }\n    \n    const period = {\n      start: new Date(start as string),\n      end: new Date(end as string)\n    };\n    \n    const report = await performanceRegressionDetector.generateRegressionReport(scenarioId, period);\n    \n    res.json({\n      success: true,\n      data: report\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/regression-monitoring/start\n * Start automated regression monitoring\n */\nrouter.post('/regression-monitoring/start', (req, res) => {\n  try {\n    const interval = parseInt(req.body.intervalMinutes) || 15;\n    \n    performanceRegressionDetector.startMonitoring(interval);\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Regression monitoring started',\n        intervalMinutes: interval\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/regression-monitoring/stop\n * Stop automated regression monitoring\n */\nrouter.post('/regression-monitoring/stop', (req, res) => {\n  try {\n    performanceRegressionDetector.stopMonitoring();\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Regression monitoring stopped'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/benchmarks\n * Get available performance benchmarks\n */\nrouter.get('/benchmarks', (req, res) => {\n  try {\n    const status = performanceBenchmark.getStatus();\n    \n    res.json({\n      success: true,\n      data: {\n        status,\n        availableBenchmarks: [\n          'Analytics Engine',\n          'Report Generation',\n          'Optimization Engine',\n          'Database Queries',\n          'Cache Performance',\n          'Memory Usage',\n          'Concurrent Operations'\n        ]\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/benchmarks/run\n * Run performance benchmark suite\n */\nrouter.post('/benchmarks/run', async (req, res) => {\n  try {\n    const suiteName = req.body.suiteName || 'Performance Benchmark Suite';\n    \n    // Check if already running\n    const status = performanceBenchmark.getStatus();\n    if (status.isRunning) {\n      return res.status(409).json({\n        success: false,\n        error: 'Benchmark suite is already running',\n        currentSuite: status.currentSuite,\n        progress: status.progress\n      });\n    }\n    \n    // Start benchmark asynchronously\n    const benchmarkPromise = performanceBenchmark.runBenchmarkSuite(suiteName);\n    \n    res.status(202).json({\n      success: true,\n      data: {\n        message: 'Benchmark suite started',\n        suiteName,\n        status: 'running'\n      }\n    });\n    \n    // Handle completion\n    benchmarkPromise.then(results => {\n      console.log('Benchmark suite completed:', results.name);\n    }).catch(error => {\n      console.error('Benchmark suite failed:', error);\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/benchmarks/status\n * Get benchmark execution status\n */\nrouter.get('/benchmarks/status', (req, res) => {\n  try {\n    const status = performanceBenchmark.getStatus();\n    \n    res.json({\n      success: true,\n      data: status\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /load-testing/neural-training\n * Train neural model for anomaly detection\n */\nrouter.post('/neural-training', async (req, res) => {\n  try {\n    await performanceRegressionDetector.trainNeuralModel();\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Neural model training completed'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /load-testing/health\n * Health check for load testing services\n */\nrouter.get('/health', (req, res) => {\n  try {\n    const loadTestStatus = loadTestingFramework.getStatus();\n    const benchmarkStatus = performanceBenchmark.getStatus();\n    \n    const health = {\n      loadTesting: {\n        available: true,\n        running: loadTestStatus.isRunning,\n        currentTest: loadTestStatus.currentTest\n      },\n      benchmarks: {\n        available: true,\n        running: benchmarkStatus.isRunning,\n        currentSuite: benchmarkStatus.currentSuite\n      },\n      regressionDetection: {\n        available: true,\n        monitoring: performanceRegressionDetector['isMonitoring'] || false\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    res.json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4a5bfc97ddf7d3454657e9f67288e98168a735e0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f48clsnev = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f48clsnev();
var __importDefault =
/* istanbul ignore next */
(cov_f48clsnev().s[0]++,
/* istanbul ignore next */
(cov_f48clsnev().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_f48clsnev().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_f48clsnev().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_f48clsnev().f[0]++;
  cov_f48clsnev().s[1]++;
  return /* istanbul ignore next */(cov_f48clsnev().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_f48clsnev().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_f48clsnev().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_f48clsnev().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_f48clsnev().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_f48clsnev().s[3]++, require("express"));
const LoadTestingFramework_1 =
/* istanbul ignore next */
(cov_f48clsnev().s[4]++, require("../services/performance/LoadTestingFramework"));
const PerformanceRegressionDetector_1 =
/* istanbul ignore next */
(cov_f48clsnev().s[5]++, require("../services/performance/PerformanceRegressionDetector"));
const PerformanceBenchmark_1 =
/* istanbul ignore next */
(cov_f48clsnev().s[6]++, require("../services/performance/PerformanceBenchmark"));
const validation_1 =
/* istanbul ignore next */
(cov_f48clsnev().s[7]++, require("../middleware/validation"));
const joi_1 =
/* istanbul ignore next */
(cov_f48clsnev().s[8]++, __importDefault(require("joi")));
const router =
/* istanbul ignore next */
(cov_f48clsnev().s[9]++, (0, express_1.Router)());
// Validation schemas
const scenarioSchema =
/* istanbul ignore next */
(cov_f48clsnev().s[10]++, joi_1.default.object({
  id: joi_1.default.string().required(),
  name: joi_1.default.string().required(),
  description: joi_1.default.string().required(),
  config: joi_1.default.object({
    baseUrl: joi_1.default.string().uri().required(),
    endpoints: joi_1.default.array().items(joi_1.default.object({
      path: joi_1.default.string().required(),
      method: joi_1.default.string().valid('GET', 'POST', 'PUT', 'DELETE', 'PATCH').required(),
      weight: joi_1.default.number().min(0).max(100).required(),
      headers: joi_1.default.object().optional(),
      body: joi_1.default.any().optional(),
      timeout: joi_1.default.number().min(1000).optional(),
      params: joi_1.default.object().optional(),
      validation: joi_1.default.object({
        statusCode: joi_1.default.array().items(joi_1.default.number()).optional(),
        responseTime: joi_1.default.number().optional(),
        bodyContains: joi_1.default.array().items(joi_1.default.string()).optional(),
        headerExists: joi_1.default.array().items(joi_1.default.string()).optional()
      }).optional()
    })).min(1).required(),
    users: joi_1.default.object({
      concurrent: joi_1.default.number().min(1).max(1000).required(),
      rampUp: joi_1.default.object({
        duration: joi_1.default.number().min(1).required(),
        strategy: joi_1.default.string().valid('linear', 'exponential', 'step').required()
      }).required(),
      rampDown: joi_1.default.object({
        duration: joi_1.default.number().min(1).required(),
        strategy: joi_1.default.string().valid('linear', 'exponential', 'immediate').required()
      }).required(),
      thinkTime: joi_1.default.object({
        min: joi_1.default.number().min(0).required(),
        max: joi_1.default.number().min(0).required(),
        distribution: joi_1.default.string().valid('uniform', 'normal', 'exponential').required()
      }).required()
    }).required(),
    duration: joi_1.default.object({
      total: joi_1.default.number().min(10).max(3600).required(),
      warmup: joi_1.default.number().min(0).optional(),
      cooldown: joi_1.default.number().min(0).optional()
    }).required(),
    thresholds: joi_1.default.object({
      responseTime: joi_1.default.object({
        p95: joi_1.default.number().min(1).required(),
        p99: joi_1.default.number().min(1).required(),
        max: joi_1.default.number().min(1).required()
      }).required(),
      errorRate: joi_1.default.object({
        max: joi_1.default.number().min(0).max(100).required()
      }).required(),
      throughput: joi_1.default.object({
        min: joi_1.default.number().min(0).required()
      }).required()
    }).required(),
    environment: joi_1.default.object({
      variables: joi_1.default.object().optional(),
      dataFiles: joi_1.default.array().items(joi_1.default.string()).optional(),
      concurrent: joi_1.default.boolean().optional(),
      keepAlive: joi_1.default.boolean().optional(),
      compression: joi_1.default.boolean().optional()
    }).optional()
  }).required()
}));
const runTestSchema =
/* istanbul ignore next */
(cov_f48clsnev().s[11]++, joi_1.default.object({
  scenarioId: joi_1.default.string().required(),
  options: joi_1.default.object({
    dryRun: joi_1.default.boolean().optional(),
    saveBaseline: joi_1.default.boolean().optional(),
    compareBaseline: joi_1.default.boolean().optional()
  }).optional()
}));
const regressionTestSchema =
/* istanbul ignore next */
(cov_f48clsnev().s[12]++, joi_1.default.object({
  scenarioIds: joi_1.default.array().items(joi_1.default.string()).min(1).required()
}));
const baselineSchema =
/* istanbul ignore next */
(cov_f48clsnev().s[13]++, joi_1.default.object({
  scenarioId: joi_1.default.string().required(),
  version: joi_1.default.string().optional(),
  environment: joi_1.default.string().optional(),
  confidence: joi_1.default.number().min(0).max(1).optional()
}));
const thresholdSchema =
/* istanbul ignore next */
(cov_f48clsnev().s[14]++, joi_1.default.object({
  metric: joi_1.default.string().required(),
  warning: joi_1.default.number().min(0).required(),
  critical: joi_1.default.number().min(0).required(),
  method: joi_1.default.string().valid('absolute', 'statistical', 'adaptive').required(),
  confidence: joi_1.default.number().min(0).max(1).required(),
  minSampleSize: joi_1.default.number().min(1).required()
}));
/**
 * GET /load-testing/scenarios
 * Get all registered load test scenarios
 */
/* istanbul ignore next */
cov_f48clsnev().s[15]++;
router.get('/scenarios', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[1]++;
  cov_f48clsnev().s[16]++;
  try {
    const scenarios =
    /* istanbul ignore next */
    (cov_f48clsnev().s[17]++, LoadTestingFramework_1.loadTestingFramework.getScenarios());
    /* istanbul ignore next */
    cov_f48clsnev().s[18]++;
    res.json({
      success: true,
      data: {
        scenarios,
        count: scenarios.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[19]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/scenarios
 * Register a new load test scenario
 */
/* istanbul ignore next */
cov_f48clsnev().s[20]++;
router.post('/scenarios', (0, validation_1.validateRequest)(scenarioSchema), (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[2]++;
  cov_f48clsnev().s[21]++;
  try {
    const scenario =
    /* istanbul ignore next */
    (cov_f48clsnev().s[22]++, req.body);
    /* istanbul ignore next */
    cov_f48clsnev().s[23]++;
    LoadTestingFramework_1.loadTestingFramework.registerScenario(scenario);
    /* istanbul ignore next */
    cov_f48clsnev().s[24]++;
    res.status(201).json({
      success: true,
      data: {
        message: 'Scenario registered successfully',
        scenarioId: scenario.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[25]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/run
 * Run a load test scenario
 */
/* istanbul ignore next */
cov_f48clsnev().s[26]++;
router.post('/run', (0, validation_1.validateRequest)(runTestSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[3]++;
  cov_f48clsnev().s[27]++;
  try {
    const {
      scenarioId,
      options
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[28]++, req.body);
    // Check if test is already running
    const status =
    /* istanbul ignore next */
    (cov_f48clsnev().s[29]++, LoadTestingFramework_1.loadTestingFramework.getStatus());
    /* istanbul ignore next */
    cov_f48clsnev().s[30]++;
    if (status.isRunning) {
      /* istanbul ignore next */
      cov_f48clsnev().b[3][0]++;
      cov_f48clsnev().s[31]++;
      return res.status(409).json({
        success: false,
        error: 'Load test is already running',
        currentTest: status.currentTest
      });
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[3][1]++;
    }
    // Start test asynchronously
    const testPromise =
    /* istanbul ignore next */
    (cov_f48clsnev().s[32]++, LoadTestingFramework_1.loadTestingFramework.runLoadTest(scenarioId, options));
    // Return immediately with test started status
    /* istanbul ignore next */
    cov_f48clsnev().s[33]++;
    res.status(202).json({
      success: true,
      data: {
        message: 'Load test started',
        scenarioId,
        status: 'running'
      }
    });
    // Handle test completion
    /* istanbul ignore next */
    cov_f48clsnev().s[34]++;
    testPromise.then(results => {
      /* istanbul ignore next */
      cov_f48clsnev().f[4]++;
      cov_f48clsnev().s[35]++;
      console.log(`Load test completed for scenario: ${scenarioId}`);
    }).catch(error => {
      /* istanbul ignore next */
      cov_f48clsnev().f[5]++;
      cov_f48clsnev().s[36]++;
      console.error(`Load test failed for scenario: ${scenarioId}`, error);
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[37]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/status
 * Get current load test status
 */
/* istanbul ignore next */
cov_f48clsnev().s[38]++;
router.get('/status', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[6]++;
  cov_f48clsnev().s[39]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_f48clsnev().s[40]++, LoadTestingFramework_1.loadTestingFramework.getStatus());
    /* istanbul ignore next */
    cov_f48clsnev().s[41]++;
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[42]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/stop
 * Stop current load test
 */
/* istanbul ignore next */
cov_f48clsnev().s[43]++;
router.post('/stop', async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[7]++;
  cov_f48clsnev().s[44]++;
  try {
    /* istanbul ignore next */
    cov_f48clsnev().s[45]++;
    await LoadTestingFramework_1.loadTestingFramework.stopTest();
    /* istanbul ignore next */
    cov_f48clsnev().s[46]++;
    res.json({
      success: true,
      data: {
        message: 'Load test stopped successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[47]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/regression-test
 * Run regression test on multiple scenarios
 */
/* istanbul ignore next */
cov_f48clsnev().s[48]++;
router.post('/regression-test', (0, validation_1.validateRequest)(regressionTestSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[8]++;
  cov_f48clsnev().s[49]++;
  try {
    const {
      scenarioIds
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[50]++, req.body);
    // Start regression test asynchronously
    const regressionPromise =
    /* istanbul ignore next */
    (cov_f48clsnev().s[51]++, LoadTestingFramework_1.loadTestingFramework.runRegressionTest(scenarioIds));
    /* istanbul ignore next */
    cov_f48clsnev().s[52]++;
    res.status(202).json({
      success: true,
      data: {
        message: 'Regression test started',
        scenarioIds,
        status: 'running'
      }
    });
    // Handle completion
    /* istanbul ignore next */
    cov_f48clsnev().s[53]++;
    regressionPromise.then(results => {
      /* istanbul ignore next */
      cov_f48clsnev().f[9]++;
      cov_f48clsnev().s[54]++;
      console.log('Regression test completed:', results);
    }).catch(error => {
      /* istanbul ignore next */
      cov_f48clsnev().f[10]++;
      cov_f48clsnev().s[55]++;
      console.error('Regression test failed:', error);
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[56]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/results/:scenarioId?
 * Get load test results
 */
/* istanbul ignore next */
cov_f48clsnev().s[57]++;
router.get('/results/:scenarioId?', async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[11]++;
  cov_f48clsnev().s[58]++;
  try {
    const {
      scenarioId
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[59]++, req.params);
    const limit =
    /* istanbul ignore next */
    (cov_f48clsnev().s[60]++,
    /* istanbul ignore next */
    (cov_f48clsnev().b[4][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_f48clsnev().b[4][1]++, 10));
    const offset =
    /* istanbul ignore next */
    (cov_f48clsnev().s[61]++,
    /* istanbul ignore next */
    (cov_f48clsnev().b[5][0]++, parseInt(req.query.offset)) ||
    /* istanbul ignore next */
    (cov_f48clsnev().b[5][1]++, 0));
    let query =
    /* istanbul ignore next */
    (cov_f48clsnev().s[62]++, `
      SELECT * FROM load_test_results 
      ORDER BY created_at DESC 
      LIMIT ? OFFSET ?
    `);
    let params =
    /* istanbul ignore next */
    (cov_f48clsnev().s[63]++, [limit, offset]);
    /* istanbul ignore next */
    cov_f48clsnev().s[64]++;
    if (scenarioId) {
      /* istanbul ignore next */
      cov_f48clsnev().b[6][0]++;
      cov_f48clsnev().s[65]++;
      query = `
        SELECT * FROM load_test_results 
        WHERE scenario_id = ? 
        ORDER BY created_at DESC 
        LIMIT ? OFFSET ?
      `;
      /* istanbul ignore next */
      cov_f48clsnev().s[66]++;
      params = [scenarioId, limit, offset];
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[6][1]++;
    }
    const stmt =
    /* istanbul ignore next */
    (cov_f48clsnev().s[67]++,
    /* istanbul ignore next */
    (cov_f48clsnev().b[7][0]++, LoadTestingFramework_1.loadTestingFramework['db']?.prepare?.(query)) ||
    /* istanbul ignore next */
    (cov_f48clsnev().b[7][1]++, require('../../database/connection').db.prepare(query)));
    const results =
    /* istanbul ignore next */
    (cov_f48clsnev().s[68]++, stmt.all(...params));
    const formattedResults =
    /* istanbul ignore next */
    (cov_f48clsnev().s[69]++, results.map(row => {
      /* istanbul ignore next */
      cov_f48clsnev().f[12]++;
      cov_f48clsnev().s[70]++;
      return {
        id: row.id,
        scenarioId: row.scenario_id,
        scenarioName: row.scenario_name,
        startTime: row.start_time,
        endTime: row.end_time,
        duration: row.duration,
        totalRequests: row.total_requests,
        successfulRequests: row.successful_requests,
        failedRequests: row.failed_requests,
        requestsPerSecond: row.requests_per_second,
        avgResponseTime: row.avg_response_time,
        p95ResponseTime: row.p95_response_time,
        p99ResponseTime: row.p99_response_time,
        errorRate: row.error_rate,
        createdAt: row.created_at,
        // Include full results if requested
        ...(
        /* istanbul ignore next */
        (cov_f48clsnev().b[8][0]++, req.query.detailed === 'true') &&
        /* istanbul ignore next */
        (cov_f48clsnev().b[8][1]++, {
          fullResults: JSON.parse(
          /* istanbul ignore next */
          (cov_f48clsnev().b[9][0]++, row.results_json) ||
          /* istanbul ignore next */
          (cov_f48clsnev().b[9][1]++, '{}'))
        }))
      };
    }));
    /* istanbul ignore next */
    cov_f48clsnev().s[71]++;
    res.json({
      success: true,
      data: {
        results: formattedResults,
        pagination: {
          limit,
          offset,
          count: formattedResults.length
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[72]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/baselines
 * Set performance baseline for a scenario
 */
/* istanbul ignore next */
cov_f48clsnev().s[73]++;
router.post('/baselines', (0, validation_1.validateRequest)(baselineSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[13]++;
  cov_f48clsnev().s[74]++;
  try {
    const {
      scenarioId,
      version,
      environment,
      confidence
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[75]++, req.body);
    // Get the latest test results for the scenario
    const stmt =
    /* istanbul ignore next */
    (cov_f48clsnev().s[76]++, require('../../database/connection').db.prepare(`
      SELECT results_json FROM load_test_results 
      WHERE scenario_id = ? 
      ORDER BY created_at DESC 
      LIMIT 1
    `));
    const row =
    /* istanbul ignore next */
    (cov_f48clsnev().s[77]++, stmt.get(scenarioId));
    /* istanbul ignore next */
    cov_f48clsnev().s[78]++;
    if (!row) {
      /* istanbul ignore next */
      cov_f48clsnev().b[10][0]++;
      cov_f48clsnev().s[79]++;
      return res.status(404).json({
        success: false,
        error: 'No test results found for scenario'
      });
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[10][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_f48clsnev().s[80]++, JSON.parse(row.results_json));
    /* istanbul ignore next */
    cov_f48clsnev().s[81]++;
    await PerformanceRegressionDetector_1.performanceRegressionDetector.setBaseline(scenarioId, results, {
      version,
      environment,
      confidence
    });
    /* istanbul ignore next */
    cov_f48clsnev().s[82]++;
    res.json({
      success: true,
      data: {
        message: 'Baseline set successfully',
        scenarioId,
        version,
        environment
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[83]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/baselines
 * Get all performance baselines
 */
/* istanbul ignore next */
cov_f48clsnev().s[84]++;
router.get('/baselines', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[14]++;
  cov_f48clsnev().s[85]++;
  try {
    const baselines =
    /* istanbul ignore next */
    (cov_f48clsnev().s[86]++, PerformanceRegressionDetector_1.performanceRegressionDetector.getBaselines());
    /* istanbul ignore next */
    cov_f48clsnev().s[87]++;
    res.json({
      success: true,
      data: {
        baselines,
        count: baselines.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[88]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/regression-alerts
 * Get regression alerts
 */
/* istanbul ignore next */
cov_f48clsnev().s[89]++;
router.get('/regression-alerts', async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[15]++;
  cov_f48clsnev().s[90]++;
  try {
    const {
      start,
      end,
      severity,
      scenarioId
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[91]++, req.query);
    let period;
    /* istanbul ignore next */
    cov_f48clsnev().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_f48clsnev().b[12][0]++, start) &&
    /* istanbul ignore next */
    (cov_f48clsnev().b[12][1]++, end)) {
      /* istanbul ignore next */
      cov_f48clsnev().b[11][0]++;
      cov_f48clsnev().s[93]++;
      period = {
        start: new Date(start),
        end: new Date(end)
      };
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[11][1]++;
    }
    let alerts =
    /* istanbul ignore next */
    (cov_f48clsnev().s[94]++, await PerformanceRegressionDetector_1.performanceRegressionDetector.getRegressionAlerts(period));
    // Filter by severity if provided
    /* istanbul ignore next */
    cov_f48clsnev().s[95]++;
    if (severity) {
      /* istanbul ignore next */
      cov_f48clsnev().b[13][0]++;
      cov_f48clsnev().s[96]++;
      alerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_f48clsnev().f[16]++;
        cov_f48clsnev().s[97]++;
        return alert.severity === severity;
      });
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[13][1]++;
    }
    // Filter by scenario if provided
    cov_f48clsnev().s[98]++;
    if (scenarioId) {
      /* istanbul ignore next */
      cov_f48clsnev().b[14][0]++;
      cov_f48clsnev().s[99]++;
      alerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_f48clsnev().f[17]++;
        cov_f48clsnev().s[100]++;
        return alert.scenarioId === scenarioId;
      });
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[14][1]++;
    }
    cov_f48clsnev().s[101]++;
    res.json({
      success: true,
      data: {
        alerts,
        count: alerts.length,
        severityBreakdown: {
          critical: alerts.filter(a => {
            /* istanbul ignore next */
            cov_f48clsnev().f[18]++;
            cov_f48clsnev().s[102]++;
            return a.severity === 'critical';
          }).length,
          high: alerts.filter(a => {
            /* istanbul ignore next */
            cov_f48clsnev().f[19]++;
            cov_f48clsnev().s[103]++;
            return a.severity === 'high';
          }).length,
          medium: alerts.filter(a => {
            /* istanbul ignore next */
            cov_f48clsnev().f[20]++;
            cov_f48clsnev().s[104]++;
            return a.severity === 'medium';
          }).length,
          low: alerts.filter(a => {
            /* istanbul ignore next */
            cov_f48clsnev().f[21]++;
            cov_f48clsnev().s[105]++;
            return a.severity === 'low';
          }).length
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[106]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/regression-thresholds
 * Set regression detection thresholds
 */
/* istanbul ignore next */
cov_f48clsnev().s[107]++;
router.post('/regression-thresholds', (0, validation_1.validateRequest)(thresholdSchema), (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[22]++;
  cov_f48clsnev().s[108]++;
  try {
    const threshold =
    /* istanbul ignore next */
    (cov_f48clsnev().s[109]++, req.body);
    /* istanbul ignore next */
    cov_f48clsnev().s[110]++;
    PerformanceRegressionDetector_1.performanceRegressionDetector.setThreshold(threshold.metric, threshold);
    /* istanbul ignore next */
    cov_f48clsnev().s[111]++;
    res.json({
      success: true,
      data: {
        message: 'Threshold updated successfully',
        metric: threshold.metric
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[112]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/regression-report/:scenarioId
 * Generate regression report for a scenario
 */
/* istanbul ignore next */
cov_f48clsnev().s[113]++;
router.get('/regression-report/:scenarioId', async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[23]++;
  cov_f48clsnev().s[114]++;
  try {
    const {
      scenarioId
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[115]++, req.params);
    const {
      start,
      end
    } =
    /* istanbul ignore next */
    (cov_f48clsnev().s[116]++, req.query);
    /* istanbul ignore next */
    cov_f48clsnev().s[117]++;
    if (
    /* istanbul ignore next */
    (cov_f48clsnev().b[16][0]++, !start) ||
    /* istanbul ignore next */
    (cov_f48clsnev().b[16][1]++, !end)) {
      /* istanbul ignore next */
      cov_f48clsnev().b[15][0]++;
      cov_f48clsnev().s[118]++;
      return res.status(400).json({
        success: false,
        error: 'Start and end dates are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[15][1]++;
    }
    const period =
    /* istanbul ignore next */
    (cov_f48clsnev().s[119]++, {
      start: new Date(start),
      end: new Date(end)
    });
    const report =
    /* istanbul ignore next */
    (cov_f48clsnev().s[120]++, await PerformanceRegressionDetector_1.performanceRegressionDetector.generateRegressionReport(scenarioId, period));
    /* istanbul ignore next */
    cov_f48clsnev().s[121]++;
    res.json({
      success: true,
      data: report
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[122]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/regression-monitoring/start
 * Start automated regression monitoring
 */
/* istanbul ignore next */
cov_f48clsnev().s[123]++;
router.post('/regression-monitoring/start', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[24]++;
  cov_f48clsnev().s[124]++;
  try {
    const interval =
    /* istanbul ignore next */
    (cov_f48clsnev().s[125]++,
    /* istanbul ignore next */
    (cov_f48clsnev().b[17][0]++, parseInt(req.body.intervalMinutes)) ||
    /* istanbul ignore next */
    (cov_f48clsnev().b[17][1]++, 15));
    /* istanbul ignore next */
    cov_f48clsnev().s[126]++;
    PerformanceRegressionDetector_1.performanceRegressionDetector.startMonitoring(interval);
    /* istanbul ignore next */
    cov_f48clsnev().s[127]++;
    res.json({
      success: true,
      data: {
        message: 'Regression monitoring started',
        intervalMinutes: interval
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[128]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/regression-monitoring/stop
 * Stop automated regression monitoring
 */
/* istanbul ignore next */
cov_f48clsnev().s[129]++;
router.post('/regression-monitoring/stop', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[25]++;
  cov_f48clsnev().s[130]++;
  try {
    /* istanbul ignore next */
    cov_f48clsnev().s[131]++;
    PerformanceRegressionDetector_1.performanceRegressionDetector.stopMonitoring();
    /* istanbul ignore next */
    cov_f48clsnev().s[132]++;
    res.json({
      success: true,
      data: {
        message: 'Regression monitoring stopped'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[133]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/benchmarks
 * Get available performance benchmarks
 */
/* istanbul ignore next */
cov_f48clsnev().s[134]++;
router.get('/benchmarks', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[26]++;
  cov_f48clsnev().s[135]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_f48clsnev().s[136]++, PerformanceBenchmark_1.performanceBenchmark.getStatus());
    /* istanbul ignore next */
    cov_f48clsnev().s[137]++;
    res.json({
      success: true,
      data: {
        status,
        availableBenchmarks: ['Analytics Engine', 'Report Generation', 'Optimization Engine', 'Database Queries', 'Cache Performance', 'Memory Usage', 'Concurrent Operations']
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[138]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/benchmarks/run
 * Run performance benchmark suite
 */
/* istanbul ignore next */
cov_f48clsnev().s[139]++;
router.post('/benchmarks/run', async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[27]++;
  cov_f48clsnev().s[140]++;
  try {
    const suiteName =
    /* istanbul ignore next */
    (cov_f48clsnev().s[141]++,
    /* istanbul ignore next */
    (cov_f48clsnev().b[18][0]++, req.body.suiteName) ||
    /* istanbul ignore next */
    (cov_f48clsnev().b[18][1]++, 'Performance Benchmark Suite'));
    // Check if already running
    const status =
    /* istanbul ignore next */
    (cov_f48clsnev().s[142]++, PerformanceBenchmark_1.performanceBenchmark.getStatus());
    /* istanbul ignore next */
    cov_f48clsnev().s[143]++;
    if (status.isRunning) {
      /* istanbul ignore next */
      cov_f48clsnev().b[19][0]++;
      cov_f48clsnev().s[144]++;
      return res.status(409).json({
        success: false,
        error: 'Benchmark suite is already running',
        currentSuite: status.currentSuite,
        progress: status.progress
      });
    } else
    /* istanbul ignore next */
    {
      cov_f48clsnev().b[19][1]++;
    }
    // Start benchmark asynchronously
    const benchmarkPromise =
    /* istanbul ignore next */
    (cov_f48clsnev().s[145]++, PerformanceBenchmark_1.performanceBenchmark.runBenchmarkSuite(suiteName));
    /* istanbul ignore next */
    cov_f48clsnev().s[146]++;
    res.status(202).json({
      success: true,
      data: {
        message: 'Benchmark suite started',
        suiteName,
        status: 'running'
      }
    });
    // Handle completion
    /* istanbul ignore next */
    cov_f48clsnev().s[147]++;
    benchmarkPromise.then(results => {
      /* istanbul ignore next */
      cov_f48clsnev().f[28]++;
      cov_f48clsnev().s[148]++;
      console.log('Benchmark suite completed:', results.name);
    }).catch(error => {
      /* istanbul ignore next */
      cov_f48clsnev().f[29]++;
      cov_f48clsnev().s[149]++;
      console.error('Benchmark suite failed:', error);
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[150]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/benchmarks/status
 * Get benchmark execution status
 */
/* istanbul ignore next */
cov_f48clsnev().s[151]++;
router.get('/benchmarks/status', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[30]++;
  cov_f48clsnev().s[152]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_f48clsnev().s[153]++, PerformanceBenchmark_1.performanceBenchmark.getStatus());
    /* istanbul ignore next */
    cov_f48clsnev().s[154]++;
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[155]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /load-testing/neural-training
 * Train neural model for anomaly detection
 */
/* istanbul ignore next */
cov_f48clsnev().s[156]++;
router.post('/neural-training', async (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[31]++;
  cov_f48clsnev().s[157]++;
  try {
    /* istanbul ignore next */
    cov_f48clsnev().s[158]++;
    await PerformanceRegressionDetector_1.performanceRegressionDetector.trainNeuralModel();
    /* istanbul ignore next */
    cov_f48clsnev().s[159]++;
    res.json({
      success: true,
      data: {
        message: 'Neural model training completed'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[160]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /load-testing/health
 * Health check for load testing services
 */
/* istanbul ignore next */
cov_f48clsnev().s[161]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_f48clsnev().f[32]++;
  cov_f48clsnev().s[162]++;
  try {
    const loadTestStatus =
    /* istanbul ignore next */
    (cov_f48clsnev().s[163]++, LoadTestingFramework_1.loadTestingFramework.getStatus());
    const benchmarkStatus =
    /* istanbul ignore next */
    (cov_f48clsnev().s[164]++, PerformanceBenchmark_1.performanceBenchmark.getStatus());
    const health =
    /* istanbul ignore next */
    (cov_f48clsnev().s[165]++, {
      loadTesting: {
        available: true,
        running: loadTestStatus.isRunning,
        currentTest: loadTestStatus.currentTest
      },
      benchmarks: {
        available: true,
        running: benchmarkStatus.isRunning,
        currentSuite: benchmarkStatus.currentSuite
      },
      regressionDetection: {
        available: true,
        monitoring:
        /* istanbul ignore next */
        (cov_f48clsnev().b[20][0]++, PerformanceRegressionDetector_1.performanceRegressionDetector['isMonitoring']) ||
        /* istanbul ignore next */
        (cov_f48clsnev().b[20][1]++, false)
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_f48clsnev().s[166]++;
    res.json({
      success: true,
      data: health
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f48clsnev().s[167]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/* istanbul ignore next */
cov_f48clsnev().s[168]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,