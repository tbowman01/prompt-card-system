490f3006e628d7c0d08bf0ad5a1913b8
"use strict";

/* istanbul ignore next */
function cov_9wcw63qgg() {
  var path = "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceBenchmark.ts";
  var hash = "6986d3a39b24ca92f376453f180c9e35c0747f5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceBenchmark.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 42
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 34
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "5": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 74
        }
      },
      "6": {
        start: {
          line: 8,
          column: 29
        },
        end: {
          line: 8,
          column: 74
        }
      },
      "7": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 45
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 16
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 33
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 79
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 71
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 80
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "15": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "16": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "17": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "18": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "19": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "20": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 38
        }
      },
      "21": {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "22": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 53
        }
      },
      "23": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 54
        }
      },
      "24": {
        start: {
          line: 45,
          column: 22
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "25": {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "26": {
        start: {
          line: 47,
          column: 22
        },
        end: {
          line: 47,
          column: 54
        }
      },
      "27": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 49
        }
      },
      "28": {
        start: {
          line: 49,
          column: 22
        },
        end: {
          line: 49,
          column: 58
        }
      },
      "29": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "30": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 60,
          column: 17
        }
      },
      "31": {
        start: {
          line: 53,
          column: 35
        },
        end: {
          line: 53,
          column: 52
        }
      },
      "32": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 47
        }
      },
      "33": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 60
        }
      },
      "34": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "35": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 56
        }
      },
      "36": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 65
        }
      },
      "37": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "38": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 25
        }
      },
      "39": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "40": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 37
        }
      },
      "41": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 76,
          column: 56
        }
      },
      "42": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 49
        }
      },
      "43": {
        start: {
          line: 78,
          column: 25
        },
        end: {
          line: 78,
          column: 43
        }
      },
      "44": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 79,
          column: 30
        }
      },
      "45": {
        start: {
          line: 80,
          column: 21
        },
        end: {
          line: 80,
          column: 22
        }
      },
      "46": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 56
        }
      },
      "47": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "48": {
        start: {
          line: 82,
          column: 21
        },
        end: {
          line: 82,
          column: 22
        }
      },
      "49": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "50": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "51": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "52": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 94,
          column: 67
        }
      },
      "53": {
        start: {
          line: 95,
          column: 26
        },
        end: {
          line: 95,
          column: 47
        }
      },
      "54": {
        start: {
          line: 96,
          column: 23
        },
        end: {
          line: 96,
          column: 49
        }
      },
      "55": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "56": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 56
        }
      },
      "57": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 49
        }
      },
      "58": {
        start: {
          line: 124,
          column: 25
        },
        end: {
          line: 124,
          column: 43
        }
      },
      "59": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 29
        }
      },
      "60": {
        start: {
          line: 126,
          column: 21
        },
        end: {
          line: 126,
          column: 22
        }
      },
      "61": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 57
        }
      },
      "62": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "63": {
        start: {
          line: 128,
          column: 21
        },
        end: {
          line: 128,
          column: 22
        }
      },
      "64": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "65": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 133,
          column: 19
        }
      },
      "66": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 25
        }
      },
      "67": {
        start: {
          line: 139,
          column: 25
        },
        end: {
          line: 139,
          column: 67
        }
      },
      "68": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 47
        }
      },
      "69": {
        start: {
          line: 141,
          column: 23
        },
        end: {
          line: 141,
          column: 49
        }
      },
      "70": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "71": {
        start: {
          line: 167,
          column: 26
        },
        end: {
          line: 167,
          column: 56
        }
      },
      "72": {
        start: {
          line: 168,
          column: 28
        },
        end: {
          line: 168,
          column: 49
        }
      },
      "73": {
        start: {
          line: 169,
          column: 25
        },
        end: {
          line: 169,
          column: 43
        }
      },
      "74": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 29
        }
      },
      "75": {
        start: {
          line: 171,
          column: 21
        },
        end: {
          line: 171,
          column: 22
        }
      },
      "76": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 59
        }
      },
      "77": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 128
        }
      },
      "78": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "79": {
        start: {
          line: 174,
          column: 21
        },
        end: {
          line: 174,
          column: 22
        }
      },
      "80": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "81": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 180,
          column: 19
        }
      },
      "82": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 25
        }
      },
      "83": {
        start: {
          line: 186,
          column: 25
        },
        end: {
          line: 186,
          column: 67
        }
      },
      "84": {
        start: {
          line: 187,
          column: 26
        },
        end: {
          line: 187,
          column: 47
        }
      },
      "85": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 49
        }
      },
      "86": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "87": {
        start: {
          line: 214,
          column: 26
        },
        end: {
          line: 214,
          column: 56
        }
      },
      "88": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 215,
          column: 49
        }
      },
      "89": {
        start: {
          line: 216,
          column: 25
        },
        end: {
          line: 216,
          column: 43
        }
      },
      "90": {
        start: {
          line: 217,
          column: 27
        },
        end: {
          line: 217,
          column: 30
        }
      },
      "91": {
        start: {
          line: 218,
          column: 21
        },
        end: {
          line: 218,
          column: 22
        }
      },
      "92": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 56
        }
      },
      "93": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "94": {
        start: {
          line: 220,
          column: 21
        },
        end: {
          line: 220,
          column: 22
        }
      },
      "95": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "96": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "97": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 25
        }
      },
      "98": {
        start: {
          line: 232,
          column: 25
        },
        end: {
          line: 232,
          column: 67
        }
      },
      "99": {
        start: {
          line: 233,
          column: 26
        },
        end: {
          line: 233,
          column: 47
        }
      },
      "100": {
        start: {
          line: 234,
          column: 23
        },
        end: {
          line: 234,
          column: 49
        }
      },
      "101": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 254,
          column: 10
        }
      },
      "102": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 56
        }
      },
      "103": {
        start: {
          line: 261,
          column: 28
        },
        end: {
          line: 261,
          column: 49
        }
      },
      "104": {
        start: {
          line: 262,
          column: 25
        },
        end: {
          line: 262,
          column: 43
        }
      },
      "105": {
        start: {
          line: 263,
          column: 27
        },
        end: {
          line: 263,
          column: 31
        }
      },
      "106": {
        start: {
          line: 264,
          column: 21
        },
        end: {
          line: 264,
          column: 22
        }
      },
      "107": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 57
        }
      },
      "108": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 62
        }
      },
      "109": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 64
        }
      },
      "110": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "111": {
        start: {
          line: 269,
          column: 21
        },
        end: {
          line: 269,
          column: 22
        }
      },
      "112": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "113": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 70
        }
      },
      "114": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 25
        }
      },
      "115": {
        start: {
          line: 278,
          column: 25
        },
        end: {
          line: 278,
          column: 67
        }
      },
      "116": {
        start: {
          line: 279,
          column: 26
        },
        end: {
          line: 279,
          column: 47
        }
      },
      "117": {
        start: {
          line: 280,
          column: 23
        },
        end: {
          line: 280,
          column: 49
        }
      },
      "118": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 299,
          column: 10
        }
      },
      "119": {
        start: {
          line: 305,
          column: 26
        },
        end: {
          line: 305,
          column: 56
        }
      },
      "120": {
        start: {
          line: 306,
          column: 28
        },
        end: {
          line: 306,
          column: 49
        }
      },
      "121": {
        start: {
          line: 307,
          column: 25
        },
        end: {
          line: 307,
          column: 43
        }
      },
      "122": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 30
        }
      },
      "123": {
        start: {
          line: 309,
          column: 21
        },
        end: {
          line: 309,
          column: 22
        }
      },
      "124": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 52
        }
      },
      "125": {
        start: {
          line: 311,
          column: 32
        },
        end: {
          line: 311,
          column: 34
        }
      },
      "126": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "127": {
        start: {
          line: 312,
          column: 21
        },
        end: {
          line: 312,
          column: 22
        }
      },
      "128": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "129": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 318,
          column: 19
        }
      },
      "130": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 60
        }
      },
      "131": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "132": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 32
        }
      },
      "133": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 25
        }
      },
      "134": {
        start: {
          line: 330,
          column: 25
        },
        end: {
          line: 330,
          column: 67
        }
      },
      "135": {
        start: {
          line: 331,
          column: 26
        },
        end: {
          line: 331,
          column: 47
        }
      },
      "136": {
        start: {
          line: 332,
          column: 23
        },
        end: {
          line: 332,
          column: 49
        }
      },
      "137": {
        start: {
          line: 334,
          column: 29
        },
        end: {
          line: 335,
          column: 98
        }
      },
      "138": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 356,
          column: 10
        }
      },
      "139": {
        start: {
          line: 362,
          column: 26
        },
        end: {
          line: 362,
          column: 56
        }
      },
      "140": {
        start: {
          line: 363,
          column: 28
        },
        end: {
          line: 363,
          column: 49
        }
      },
      "141": {
        start: {
          line: 364,
          column: 25
        },
        end: {
          line: 364,
          column: 43
        }
      },
      "142": {
        start: {
          line: 365,
          column: 27
        },
        end: {
          line: 365,
          column: 29
        }
      },
      "143": {
        start: {
          line: 366,
          column: 28
        },
        end: {
          line: 366,
          column: 30
        }
      },
      "144": {
        start: {
          line: 367,
          column: 21
        },
        end: {
          line: 367,
          column: 22
        }
      },
      "145": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 61
        }
      },
      "146": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "147": {
        start: {
          line: 369,
          column: 21
        },
        end: {
          line: 369,
          column: 22
        }
      },
      "148": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "149": {
        start: {
          line: 372,
          column: 35
        },
        end: {
          line: 375,
          column: 19
        }
      },
      "150": {
        start: {
          line: 372,
          column: 77
        },
        end: {
          line: 375,
          column: 18
        }
      },
      "151": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 46
        }
      },
      "152": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 25
        }
      },
      "153": {
        start: {
          line: 382,
          column: 25
        },
        end: {
          line: 382,
          column: 67
        }
      },
      "154": {
        start: {
          line: 383,
          column: 26
        },
        end: {
          line: 383,
          column: 47
        }
      },
      "155": {
        start: {
          line: 384,
          column: 23
        },
        end: {
          line: 384,
          column: 49
        }
      },
      "156": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 404,
          column: 10
        }
      },
      "157": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 60
        }
      },
      "158": {
        start: {
          line: 411,
          column: 24
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "159": {
        start: {
          line: 427,
          column: 26
        },
        end: {
          line: 427,
          column: 36
        }
      },
      "160": {
        start: {
          line: 428,
          column: 30
        },
        end: {
          line: 428,
          column: 32
        }
      },
      "161": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "162": {
        start: {
          line: 430,
          column: 31
        },
        end: {
          line: 430,
          column: 32
        }
      },
      "163": {
        start: {
          line: 431,
          column: 31
        },
        end: {
          line: 456,
          column: 14
        }
      },
      "164": {
        start: {
          line: 432,
          column: 39
        },
        end: {
          line: 432,
          column: 69
        }
      },
      "165": {
        start: {
          line: 433,
          column: 30
        },
        end: {
          line: 433,
          column: 34
        }
      },
      "166": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 440,
          column: 17
        }
      },
      "167": {
        start: {
          line: 436,
          column: 20
        },
        end: {
          line: 436,
          column: 80
        }
      },
      "168": {
        start: {
          line: 439,
          column: 20
        },
        end: {
          line: 439,
          column: 36
        }
      },
      "169": {
        start: {
          line: 441,
          column: 37
        },
        end: {
          line: 441,
          column: 84
        }
      },
      "170": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 49
        }
      },
      "171": {
        start: {
          line: 443,
          column: 16
        },
        end: {
          line: 448,
          column: 19
        }
      },
      "172": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 454,
          column: 17
        }
      },
      "173": {
        start: {
          line: 450,
          column: 20
        },
        end: {
          line: 450,
          column: 57
        }
      },
      "174": {
        start: {
          line: 453,
          column: 20
        },
        end: {
          line: 453,
          column: 53
        }
      },
      "175": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 48
        }
      },
      "176": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 42
        }
      },
      "177": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 81
        }
      },
      "178": {
        start: {
          line: 462,
          column: 26
        },
        end: {
          line: 462,
          column: 57
        }
      },
      "179": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 110
        }
      },
      "180": {
        start: {
          line: 463,
          column: 77
        },
        end: {
          line: 463,
          column: 82
        }
      },
      "181": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 464,
          column: 79
        }
      },
      "182": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 107
        }
      },
      "183": {
        start: {
          line: 467,
          column: 28
        },
        end: {
          line: 467,
          column: 63
        }
      },
      "184": {
        start: {
          line: 467,
          column: 57
        },
        end: {
          line: 467,
          column: 62
        }
      },
      "185": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 93
        }
      },
      "186": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 93
        }
      },
      "187": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 470,
          column: 69
        }
      },
      "188": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 69
        }
      },
      "189": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 472,
          column: 23
        }
      },
      "190": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 491,
          column: 9
        }
      },
      "191": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 480,
          column: 70
        }
      },
      "192": {
        start: {
          line: 481,
          column: 16
        },
        end: {
          line: 481,
          column: 22
        }
      },
      "193": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 483,
          column: 75
        }
      },
      "194": {
        start: {
          line: 484,
          column: 16
        },
        end: {
          line: 484,
          column: 22
        }
      },
      "195": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 486,
          column: 176
        }
      },
      "196": {
        start: {
          line: 487,
          column: 16
        },
        end: {
          line: 487,
          column: 22
        }
      },
      "197": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 490,
          column: 70
        }
      },
      "198": {
        start: {
          line: 497,
          column: 30
        },
        end: {
          line: 497,
          column: 77
        }
      },
      "199": {
        start: {
          line: 497,
          column: 57
        },
        end: {
          line: 497,
          column: 73
        }
      },
      "200": {
        start: {
          line: 498,
          column: 34
        },
        end: {
          line: 498,
          column: 100
        }
      },
      "201": {
        start: {
          line: 498,
          column: 61
        },
        end: {
          line: 498,
          column: 79
        }
      },
      "202": {
        start: {
          line: 499,
          column: 33
        },
        end: {
          line: 499,
          column: 98
        }
      },
      "203": {
        start: {
          line: 499,
          column: 60
        },
        end: {
          line: 499,
          column: 77
        }
      },
      "204": {
        start: {
          line: 500,
          column: 32
        },
        end: {
          line: 500,
          column: 85
        }
      },
      "205": {
        start: {
          line: 500,
          column: 61
        },
        end: {
          line: 500,
          column: 83
        }
      },
      "206": {
        start: {
          line: 501,
          column: 32
        },
        end: {
          line: 501,
          column: 34
        }
      },
      "207": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 505,
          column: 9
        }
      },
      "208": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 106
        }
      },
      "209": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "210": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 116
        }
      },
      "211": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "212": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 136
        }
      },
      "213": {
        start: {
          line: 512,
          column: 28
        },
        end: {
          line: 512,
          column: 67
        }
      },
      "214": {
        start: {
          line: 512,
          column: 48
        },
        end: {
          line: 512,
          column: 66
        }
      },
      "215": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "216": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 129
        }
      },
      "217": {
        start: {
          line: 514,
          column: 83
        },
        end: {
          line: 514,
          column: 89
        }
      },
      "218": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 522,
          column: 10
        }
      },
      "219": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 532,
          column: 10
        }
      },
      "220": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 538,
          column: 46
        }
      },
      "221": {
        start: {
          line: 541,
          column: 0
        },
        end: {
          line: 541,
          column: 52
        }
      },
      "222": {
        start: {
          line: 543,
          column: 0
        },
        end: {
          line: 543,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 65
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 17
          }
        },
        loc: {
          start: {
            line: 43,
            column: 22
          },
          end: {
            line: 43,
            column: 53
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 17
          }
        },
        loc: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 54
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        },
        loc: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 56
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 17
          }
        },
        loc: {
          start: {
            line: 46,
            column: 22
          },
          end: {
            line: 46,
            column: 53
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        },
        loc: {
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 47,
            column: 54
          }
        },
        line: 47
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        },
        loc: {
          start: {
            line: 48,
            column: 22
          },
          end: {
            line: 48,
            column: 49
          }
        },
        line: 48
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        },
        loc: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 58
          }
        },
        line: 49
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 37
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 75
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 38
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 121
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 40
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 166
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 37
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 213
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 38
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 259
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 33
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 304
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 42
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 361
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 372,
            column: 71
          },
          end: {
            line: 372,
            column: 72
          }
        },
        loc: {
          start: {
            line: 372,
            column: 77
          },
          end: {
            line: 375,
            column: 18
          }
        },
        line: 372
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 30
          },
          end: {
            line: 473,
            column: 5
          }
        },
        line: 409
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 431,
            column: 67
          },
          end: {
            line: 431,
            column: 68
          }
        },
        loc: {
          start: {
            line: 431,
            column: 79
          },
          end: {
            line: 456,
            column: 13
          }
        },
        line: 431
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 463,
            column: 67
          },
          end: {
            line: 463,
            column: 68
          }
        },
        loc: {
          start: {
            line: 463,
            column: 77
          },
          end: {
            line: 463,
            column: 82
          }
        },
        line: 463
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 467,
            column: 47
          },
          end: {
            line: 467,
            column: 48
          }
        },
        loc: {
          start: {
            line: 467,
            column: 57
          },
          end: {
            line: 467,
            column: 62
          }
        },
        line: 467
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 45
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 477
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 496,
            column: 4
          },
          end: {
            line: 496,
            column: 5
          }
        },
        loc: {
          start: {
            line: 496,
            column: 30
          },
          end: {
            line: 523,
            column: 5
          }
        },
        line: 496
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 497,
            column: 45
          },
          end: {
            line: 497,
            column: 46
          }
        },
        loc: {
          start: {
            line: 497,
            column: 57
          },
          end: {
            line: 497,
            column: 73
          }
        },
        line: 497
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 498,
            column: 49
          },
          end: {
            line: 498,
            column: 50
          }
        },
        loc: {
          start: {
            line: 498,
            column: 61
          },
          end: {
            line: 498,
            column: 79
          }
        },
        line: 498
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 499,
            column: 48
          },
          end: {
            line: 499,
            column: 49
          }
        },
        loc: {
          start: {
            line: 499,
            column: 60
          },
          end: {
            line: 499,
            column: 77
          }
        },
        line: 499
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 500,
            column: 56
          },
          end: {
            line: 500,
            column: 57
          }
        },
        loc: {
          start: {
            line: 500,
            column: 61
          },
          end: {
            line: 500,
            column: 83
          }
        },
        line: 500
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 512,
            column: 43
          },
          end: {
            line: 512,
            column: 44
          }
        },
        loc: {
          start: {
            line: 512,
            column: 48
          },
          end: {
            line: 512,
            column: 66
          }
        },
        line: 512
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 514,
            column: 78
          },
          end: {
            line: 514,
            column: 79
          }
        },
        loc: {
          start: {
            line: 514,
            column: 83
          },
          end: {
            line: 514,
            column: 89
          }
        },
        line: 514
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 5
          }
        },
        loc: {
          start: {
            line: 527,
            column: 16
          },
          end: {
            line: 533,
            column: 5
          }
        },
        line: 527
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 537,
            column: 4
          },
          end: {
            line: 537,
            column: 5
          }
        },
        loc: {
          start: {
            line: 537,
            column: 25
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 537
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 22,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 40
          },
          end: {
            line: 22,
            column: 63
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 114,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 114,
            column: 77
          }
        }, {
          start: {
            line: 114,
            column: 81
          },
          end: {
            line: 114,
            column: 82
          }
        }],
        line: 114
      },
      "3": {
        loc: {
          start: {
            line: 159,
            column: 33
          },
          end: {
            line: 159,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 33
          },
          end: {
            line: 159,
            column: 77
          }
        }, {
          start: {
            line: 159,
            column: 81
          },
          end: {
            line: 159,
            column: 83
          }
        }],
        line: 159
      },
      "4": {
        loc: {
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 205,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 205,
            column: 69
          }
        }, {
          start: {
            line: 205,
            column: 73
          },
          end: {
            line: 205,
            column: 75
          }
        }],
        line: 205
      },
      "5": {
        loc: {
          start: {
            line: 252,
            column: 28
          },
          end: {
            line: 252,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 28
          },
          end: {
            line: 252,
            column: 77
          }
        }, {
          start: {
            line: 252,
            column: 81
          },
          end: {
            line: 252,
            column: 83
          }
        }],
        line: 252
      },
      "6": {
        loc: {
          start: {
            line: 297,
            column: 28
          },
          end: {
            line: 297,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 28
          },
          end: {
            line: 297,
            column: 66
          }
        }, {
          start: {
            line: 297,
            column: 70
          },
          end: {
            line: 297,
            column: 72
          }
        }],
        line: 297
      },
      "7": {
        loc: {
          start: {
            line: 322,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "8": {
        loc: {
          start: {
            line: 334,
            column: 29
          },
          end: {
            line: 335,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 335,
            column: 94
          }
        }, {
          start: {
            line: 335,
            column: 97
          },
          end: {
            line: 335,
            column: 98
          }
        }],
        line: 334
      },
      "9": {
        loc: {
          start: {
            line: 449,
            column: 16
          },
          end: {
            line: 454,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 16
          },
          end: {
            line: 454,
            column: 17
          }
        }, {
          start: {
            line: 452,
            column: 21
          },
          end: {
            line: 454,
            column: 17
          }
        }],
        line: 449
      },
      "10": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 491,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 481,
            column: 22
          }
        }, {
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 484,
            column: 22
          }
        }, {
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 487,
            column: 22
          }
        }, {
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 490,
            column: 70
          }
        }],
        line: 478
      },
      "11": {
        loc: {
          start: {
            line: 503,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "12": {
        loc: {
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "13": {
        loc: {
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "14": {
        loc: {
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "15": {
        loc: {
          start: {
            line: 531,
            column: 22
          },
          end: {
            line: 531,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 531,
            column: 42
          },
          end: {
            line: 531,
            column: 86
          }
        }, {
          start: {
            line: 531,
            column: 89
          },
          end: {
            line: 531,
            column: 90
          }
        }],
        line: 531
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceBenchmark.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceBenchmark.ts"],
      sourcesContent: ["import { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { ReportGenerator } from '../reports/generators/ReportGenerator';\nimport { OptimizationEngine } from '../optimization/OptimizationEngine';\nimport { TestQueueManager } from '../testing/TestQueueManager';\nimport { performanceMonitor } from './PerformanceMonitor';\nimport { promisify } from 'util';\nimport { setTimeout } from 'timers/promises';\n\nexport interface BenchmarkResult {\n  name: string;\n  duration: number;\n  throughput: number;\n  errorRate: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  cpuUsage: NodeJS.CpuUsage;\n  iterations: number;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface BenchmarkSuite {\n  name: string;\n  results: BenchmarkResult[];\n  summary: {\n    totalDuration: number;\n    averageThroughput: number;\n    averageErrorRate: number;\n    peakMemoryUsage: number;\n    recommendations: string[];\n  };\n}\n\nexport interface LoadTestConfig {\n  concurrency: number;\n  duration: number;\n  rampUp: number;\n  rampDown: number;\n  target: string;\n  payload?: any;\n}\n\nexport interface LoadTestResult {\n  config: LoadTestConfig;\n  results: {\n    totalRequests: number;\n    successfulRequests: number;\n    failedRequests: number;\n    averageResponseTime: number;\n    p95ResponseTime: number;\n    p99ResponseTime: number;\n    throughput: number;\n    errorRate: number;\n    maxResponseTime: number;\n    minResponseTime: number;\n  };\n  timeline: Array<{\n    timestamp: number;\n    responseTime: number;\n    success: boolean;\n    concurrency: number;\n  }>;\n}\n\nexport class PerformanceBenchmark extends EventEmitter {\n  private analyticsEngine: AnalyticsEngine;\n  private reportGenerator: ReportGenerator;\n  private optimizationEngine: OptimizationEngine;\n  private isRunning: boolean = false;\n  private currentSuite: BenchmarkSuite | null = null;\n\n  constructor() {\n    super();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.reportGenerator = new ReportGenerator();\n    this.optimizationEngine = new OptimizationEngine();\n  }\n\n  /**\n   * Run a comprehensive performance benchmark suite\n   */\n  async runBenchmarkSuite(suiteName: string = 'Performance Benchmark'): Promise<BenchmarkSuite> {\n    if (this.isRunning) {\n      throw new Error('Benchmark suite is already running');\n    }\n\n    this.isRunning = true;\n    this.emit('suiteStarted', suiteName);\n\n    try {\n      const suite: BenchmarkSuite = {\n        name: suiteName,\n        results: [],\n        summary: {\n          totalDuration: 0,\n          averageThroughput: 0,\n          averageErrorRate: 0,\n          peakMemoryUsage: 0,\n          recommendations: []\n        }\n      };\n\n      this.currentSuite = suite;\n\n      // Run individual benchmarks\n      const benchmarks = [\n        () => this.benchmarkAnalyticsEngine(),\n        () => this.benchmarkReportGeneration(),\n        () => this.benchmarkOptimizationEngine(),\n        () => this.benchmarkDatabaseQueries(),\n        () => this.benchmarkCachePerformance(),\n        () => this.benchmarkMemoryUsage(),\n        () => this.benchmarkConcurrentOperations()\n      ];\n\n      for (const benchmark of benchmarks) {\n        try {\n          const result = await benchmark();\n          suite.results.push(result);\n          this.emit('benchmarkCompleted', result);\n        } catch (error) {\n          console.error(`Benchmark failed: ${error.message}`);\n          this.emit('benchmarkFailed', error);\n        }\n      }\n\n      // Calculate summary\n      suite.summary = this.calculateSummary(suite.results);\n      this.emit('suiteCompleted', suite);\n\n      return suite;\n    } finally {\n      this.isRunning = false;\n      this.currentSuite = null;\n    }\n  }\n\n  /**\n   * Benchmark analytics engine performance\n   */\n  async benchmarkAnalyticsEngine(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 100;\n    let errors = 0;\n\n    console.log('Benchmarking Analytics Engine...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await Promise.all([\n          this.analyticsEngine.calculateRealtimeMetrics(),\n          this.analyticsEngine.calculateHistoricalMetrics(),\n          this.analyticsEngine.calculateTrends('day', 30)\n        ]);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Analytics Engine',\n      duration,\n      throughput: (iterations * 3) / (duration / 1000), // operations per second\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        operationsPerIteration: 3,\n        cacheHitRate: this.analyticsEngine.getCacheStats?.()?.hitRate || 0\n      }\n    };\n  }\n\n  /**\n   * Benchmark report generation performance\n   */\n  async benchmarkReportGeneration(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 20;\n    let errors = 0;\n\n    console.log('Benchmarking Report Generation...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await this.reportGenerator.generateReport('test-report', {\n          startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date().toISOString()\n        });\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Report Generation',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        averageReportSize: 'calculated_dynamically',\n        cacheEfficiency: this.reportGenerator.getPerformanceStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark optimization engine performance\n   */\n  async benchmarkOptimizationEngine(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 10;\n    let errors = 0;\n\n    console.log('Benchmarking Optimization Engine...');\n\n    const testPrompt = 'Generate a comprehensive report about system performance with detailed metrics and recommendations.';\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await this.optimizationEngine.generateOptimizationSuggestions(testPrompt, {\n          successRate: 90,\n          responseTime: 1000,\n          qualityScore: 85\n        });\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Optimization Engine',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        cacheStats: this.optimizationEngine.getCacheStats?.() || {},\n        avgSuggestionsPerPrompt: 3.5\n      }\n    };\n  }\n\n  /**\n   * Benchmark database query performance\n   */\n  async benchmarkDatabaseQueries(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 500;\n    let errors = 0;\n\n    console.log('Benchmarking Database Queries...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Simulate various database operations\n        await Promise.all([\n          this.analyticsEngine.calculateRealtimeMetrics(),\n          this.analyticsEngine.calculateHistoricalMetrics()\n        ]);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Database Queries',\n      duration,\n      throughput: (iterations * 2) / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        queriesPerIteration: 2,\n        queryStats: this.analyticsEngine.getQueryPerformanceStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark cache performance\n   */\n  async benchmarkCachePerformance(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 1000;\n    let errors = 0;\n\n    console.log('Benchmarking Cache Performance...');\n\n    // Warm up cache\n    await this.analyticsEngine.calculateRealtimeMetrics();\n    await this.analyticsEngine.calculateHistoricalMetrics();\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Test cache hit performance\n        await this.analyticsEngine.calculateRealtimeMetrics();\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Cache Performance',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        cacheStats: this.analyticsEngine.getCacheStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark memory usage patterns\n   */\n  async benchmarkMemoryUsage(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 100;\n    let errors = 0;\n\n    console.log('Benchmarking Memory Usage...');\n\n    const memorySnapshots = [];\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Perform memory-intensive operations\n        await Promise.all([\n          this.analyticsEngine.calculateTrends('day', 100),\n          this.reportGenerator.generateReport('memory-test', {})\n        ]);\n        \n        // Take memory snapshot\n        memorySnapshots.push(process.memoryUsage());\n        \n        // Force garbage collection if available\n        if (global.gc) {\n          global.gc();\n        }\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    // Calculate memory growth\n    const memoryGrowth = memorySnapshots.length > 1 ? \n      memorySnapshots[memorySnapshots.length - 1].heapUsed - memorySnapshots[0].heapUsed : 0;\n\n    return {\n      name: 'Memory Usage',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        memoryGrowth,\n        memoryLeakDetected: memoryGrowth > 50 * 1024 * 1024, // 50MB threshold\n        gcAvailable: typeof global.gc !== 'undefined'\n      }\n    };\n  }\n\n  /**\n   * Benchmark concurrent operations\n   */\n  async benchmarkConcurrentOperations(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 50;\n    const concurrency = 10;\n    let errors = 0;\n\n    console.log('Benchmarking Concurrent Operations...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Create concurrent operations\n        const operations = Array.from({ length: concurrency }, () => \n          Promise.all([\n            this.analyticsEngine.calculateRealtimeMetrics(),\n            this.analyticsEngine.calculateHistoricalMetrics()\n          ])\n        );\n        \n        await Promise.all(operations);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Concurrent Operations',\n      duration,\n      throughput: (iterations * concurrency * 2) / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        concurrencyLevel: concurrency,\n        operationsPerIteration: concurrency * 2\n      }\n    };\n  }\n\n  /**\n   * Run load test simulation\n   */\n  async runLoadTest(config: LoadTestConfig): Promise<LoadTestResult> {\n    console.log(`Starting load test: ${config.target}`);\n    \n    const results: LoadTestResult = {\n      config,\n      results: {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        averageResponseTime: 0,\n        p95ResponseTime: 0,\n        p99ResponseTime: 0,\n        throughput: 0,\n        errorRate: 0,\n        maxResponseTime: 0,\n        minResponseTime: Infinity\n      },\n      timeline: []\n    };\n\n    const startTime = Date.now();\n    const responseTimes: number[] = [];\n    \n    // Simulate ramp-up\n    for (let concurrency = 1; concurrency <= config.concurrency; concurrency++) {\n      const operations = Array.from({ length: concurrency }, async () => {\n        const operationStart = performance.now();\n        let success = true;\n        \n        try {\n          // Simulate operation based on target\n          await this.simulateOperation(config.target, config.payload);\n        } catch (error) {\n          success = false;\n        }\n        \n        const responseTime = performance.now() - operationStart;\n        responseTimes.push(responseTime);\n        \n        results.timeline.push({\n          timestamp: Date.now(),\n          responseTime,\n          success,\n          concurrency\n        });\n        \n        if (success) {\n          results.results.successfulRequests++;\n        } else {\n          results.results.failedRequests++;\n        }\n        \n        results.results.totalRequests++;\n      });\n      \n      await Promise.all(operations);\n      \n      // Wait for ramp-up interval\n      await setTimeout(config.rampUp / config.concurrency);\n    }\n    \n    // Calculate results\n    const totalTime = (Date.now() - startTime) / 1000;\n    results.results.averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\n    results.results.throughput = results.results.totalRequests / totalTime;\n    results.results.errorRate = (results.results.failedRequests / results.results.totalRequests) * 100;\n    \n    // Calculate percentiles\n    const sortedTimes = responseTimes.sort((a, b) => a - b);\n    results.results.p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];\n    results.results.p99ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.99)];\n    results.results.maxResponseTime = Math.max(...responseTimes);\n    results.results.minResponseTime = Math.min(...responseTimes);\n    \n    return results;\n  }\n\n  /**\n   * Simulate operation for load testing\n   */\n  private async simulateOperation(target: string, payload?: any): Promise<void> {\n    switch (target) {\n      case 'analytics':\n        await this.analyticsEngine.calculateRealtimeMetrics();\n        break;\n      case 'reports':\n        await this.reportGenerator.generateReport('load-test', {});\n        break;\n      case 'optimization':\n        await this.optimizationEngine.generateOptimizationSuggestions(\n          'Test prompt for load testing performance optimization',\n          { successRate: 85, responseTime: 1000 }\n        );\n        break;\n      default:\n        // Default operation\n        await setTimeout(Math.random() * 100);\n    }\n  }\n\n  /**\n   * Calculate benchmark suite summary\n   */\n  private calculateSummary(results: BenchmarkResult[]): BenchmarkSuite['summary'] {\n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    const averageThroughput = results.reduce((sum, r) => sum + r.throughput, 0) / results.length;\n    const averageErrorRate = results.reduce((sum, r) => sum + r.errorRate, 0) / results.length;\n    const peakMemoryUsage = Math.max(...results.map(r => r.memoryUsage.heapUsed));\n    \n    const recommendations = [];\n    \n    // Generate recommendations based on results\n    if (averageErrorRate > 5) {\n      recommendations.push('High error rate detected. Review error handling and system stability.');\n    }\n    \n    if (averageThroughput < 10) {\n      recommendations.push('Low throughput detected. Consider optimizing critical paths and adding caching.');\n    }\n    \n    if (peakMemoryUsage > 100 * 1024 * 1024) { // 100MB\n      recommendations.push('High memory usage detected. Review memory allocation and implement garbage collection optimization.');\n    }\n    \n    const slowResults = results.filter(r => r.duration > 10000); // 10 seconds\n    if (slowResults.length > 0) {\n      recommendations.push(`Slow operations detected: ${slowResults.map(r => r.name).join(', ')}. Consider optimization.`);\n    }\n    \n    return {\n      totalDuration,\n      averageThroughput,\n      averageErrorRate,\n      peakMemoryUsage,\n      recommendations\n    };\n  }\n\n  /**\n   * Get current benchmark status\n   */\n  public getStatus(): {\n    isRunning: boolean;\n    currentSuite?: string;\n    progress?: number;\n  } {\n    return {\n      isRunning: this.isRunning,\n      currentSuite: this.currentSuite?.name,\n      progress: this.currentSuite ? (this.currentSuite.results.length / 7) * 100 : 0\n    };\n  }\n\n  /**\n   * Export benchmark results\n   */\n  public exportResults(suite: BenchmarkSuite): string {\n    return JSON.stringify(suite, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const performanceBenchmark = new PerformanceBenchmark();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6986d3a39b24ca92f376453f180c9e35c0747f5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9wcw63qgg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9wcw63qgg();
cov_9wcw63qgg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9wcw63qgg().s[1]++;
exports.performanceBenchmark = exports.PerformanceBenchmark = void 0;
const perf_hooks_1 =
/* istanbul ignore next */
(cov_9wcw63qgg().s[2]++, require("perf_hooks"));
const events_1 =
/* istanbul ignore next */
(cov_9wcw63qgg().s[3]++, require("events"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_9wcw63qgg().s[4]++, require("../analytics/AnalyticsEngine"));
const ReportGenerator_1 =
/* istanbul ignore next */
(cov_9wcw63qgg().s[5]++, require("../reports/generators/ReportGenerator"));
const OptimizationEngine_1 =
/* istanbul ignore next */
(cov_9wcw63qgg().s[6]++, require("../optimization/OptimizationEngine"));
const promises_1 =
/* istanbul ignore next */
(cov_9wcw63qgg().s[7]++, require("timers/promises"));
class PerformanceBenchmark extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[0]++;
    cov_9wcw63qgg().s[8]++;
    super();
    /* istanbul ignore next */
    cov_9wcw63qgg().s[9]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_9wcw63qgg().s[10]++;
    this.currentSuite = null;
    /* istanbul ignore next */
    cov_9wcw63qgg().s[11]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_9wcw63qgg().s[12]++;
    this.reportGenerator = new ReportGenerator_1.ReportGenerator();
    /* istanbul ignore next */
    cov_9wcw63qgg().s[13]++;
    this.optimizationEngine = new OptimizationEngine_1.OptimizationEngine();
  }
  /**
   * Run a comprehensive performance benchmark suite
   */
  async runBenchmarkSuite(suiteName =
  /* istanbul ignore next */
  (cov_9wcw63qgg().b[0][0]++, 'Performance Benchmark')) {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[1]++;
    cov_9wcw63qgg().s[14]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_9wcw63qgg().b[1][0]++;
      cov_9wcw63qgg().s[15]++;
      throw new Error('Benchmark suite is already running');
    } else
    /* istanbul ignore next */
    {
      cov_9wcw63qgg().b[1][1]++;
    }
    cov_9wcw63qgg().s[16]++;
    this.isRunning = true;
    /* istanbul ignore next */
    cov_9wcw63qgg().s[17]++;
    this.emit('suiteStarted', suiteName);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[18]++;
    try {
      const suite =
      /* istanbul ignore next */
      (cov_9wcw63qgg().s[19]++, {
        name: suiteName,
        results: [],
        summary: {
          totalDuration: 0,
          averageThroughput: 0,
          averageErrorRate: 0,
          peakMemoryUsage: 0,
          recommendations: []
        }
      });
      /* istanbul ignore next */
      cov_9wcw63qgg().s[20]++;
      this.currentSuite = suite;
      // Run individual benchmarks
      const benchmarks =
      /* istanbul ignore next */
      (cov_9wcw63qgg().s[21]++, [() => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[2]++;
        cov_9wcw63qgg().s[22]++;
        return this.benchmarkAnalyticsEngine();
      }, () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[3]++;
        cov_9wcw63qgg().s[23]++;
        return this.benchmarkReportGeneration();
      }, () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[4]++;
        cov_9wcw63qgg().s[24]++;
        return this.benchmarkOptimizationEngine();
      }, () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[5]++;
        cov_9wcw63qgg().s[25]++;
        return this.benchmarkDatabaseQueries();
      }, () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[6]++;
        cov_9wcw63qgg().s[26]++;
        return this.benchmarkCachePerformance();
      }, () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[7]++;
        cov_9wcw63qgg().s[27]++;
        return this.benchmarkMemoryUsage();
      }, () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[8]++;
        cov_9wcw63qgg().s[28]++;
        return this.benchmarkConcurrentOperations();
      }]);
      /* istanbul ignore next */
      cov_9wcw63qgg().s[29]++;
      for (const benchmark of benchmarks) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[30]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_9wcw63qgg().s[31]++, await benchmark());
          /* istanbul ignore next */
          cov_9wcw63qgg().s[32]++;
          suite.results.push(result);
          /* istanbul ignore next */
          cov_9wcw63qgg().s[33]++;
          this.emit('benchmarkCompleted', result);
        } catch (error) {
          /* istanbul ignore next */
          cov_9wcw63qgg().s[34]++;
          console.error(`Benchmark failed: ${error.message}`);
          /* istanbul ignore next */
          cov_9wcw63qgg().s[35]++;
          this.emit('benchmarkFailed', error);
        }
      }
      // Calculate summary
      /* istanbul ignore next */
      cov_9wcw63qgg().s[36]++;
      suite.summary = this.calculateSummary(suite.results);
      /* istanbul ignore next */
      cov_9wcw63qgg().s[37]++;
      this.emit('suiteCompleted', suite);
      /* istanbul ignore next */
      cov_9wcw63qgg().s[38]++;
      return suite;
    } finally {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[39]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_9wcw63qgg().s[40]++;
      this.currentSuite = null;
    }
  }
  /**
   * Benchmark analytics engine performance
   */
  async benchmarkAnalyticsEngine() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[9]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[41]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[42]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[43]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[44]++, 100);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[45]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[46]++;
    console.log('Benchmarking Analytics Engine...');
    /* istanbul ignore next */
    cov_9wcw63qgg().s[47]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[48]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[49]++;
      try {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[50]++;
        await Promise.all([this.analyticsEngine.calculateRealtimeMetrics(), this.analyticsEngine.calculateHistoricalMetrics(), this.analyticsEngine.calculateTrends('day', 30)]);
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[51]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[52]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[53]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[54]++, process.cpuUsage(startCpu));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[55]++;
    return {
      name: 'Analytics Engine',
      duration,
      throughput: iterations * 3 / (duration / 1000),
      // operations per second
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        operationsPerIteration: 3,
        cacheHitRate:
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[2][0]++, this.analyticsEngine.getCacheStats?.()?.hitRate) ||
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[2][1]++, 0)
      }
    };
  }
  /**
   * Benchmark report generation performance
   */
  async benchmarkReportGeneration() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[10]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[56]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[57]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[58]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[59]++, 20);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[60]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[61]++;
    console.log('Benchmarking Report Generation...');
    /* istanbul ignore next */
    cov_9wcw63qgg().s[62]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[63]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[64]++;
      try {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[65]++;
        await this.reportGenerator.generateReport('test-report', {
          startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
          endDate: new Date().toISOString()
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[66]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[67]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[68]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[69]++, process.cpuUsage(startCpu));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[70]++;
    return {
      name: 'Report Generation',
      duration,
      throughput: iterations / (duration / 1000),
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        averageReportSize: 'calculated_dynamically',
        cacheEfficiency:
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[3][0]++, this.reportGenerator.getPerformanceStats?.()) ||
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[3][1]++, {})
      }
    };
  }
  /**
   * Benchmark optimization engine performance
   */
  async benchmarkOptimizationEngine() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[11]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[71]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[72]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[73]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[74]++, 10);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[75]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[76]++;
    console.log('Benchmarking Optimization Engine...');
    const testPrompt =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[77]++, 'Generate a comprehensive report about system performance with detailed metrics and recommendations.');
    /* istanbul ignore next */
    cov_9wcw63qgg().s[78]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[79]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[80]++;
      try {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[81]++;
        await this.optimizationEngine.generateOptimizationSuggestions(testPrompt, {
          successRate: 90,
          responseTime: 1000,
          qualityScore: 85
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[82]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[83]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[84]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[85]++, process.cpuUsage(startCpu));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[86]++;
    return {
      name: 'Optimization Engine',
      duration,
      throughput: iterations / (duration / 1000),
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        cacheStats:
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[4][0]++, this.optimizationEngine.getCacheStats?.()) ||
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[4][1]++, {}),
        avgSuggestionsPerPrompt: 3.5
      }
    };
  }
  /**
   * Benchmark database query performance
   */
  async benchmarkDatabaseQueries() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[12]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[87]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[88]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[89]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[90]++, 500);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[91]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[92]++;
    console.log('Benchmarking Database Queries...');
    /* istanbul ignore next */
    cov_9wcw63qgg().s[93]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[94]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[95]++;
      try {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[96]++;
        // Simulate various database operations
        await Promise.all([this.analyticsEngine.calculateRealtimeMetrics(), this.analyticsEngine.calculateHistoricalMetrics()]);
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[97]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[98]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[99]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[100]++, process.cpuUsage(startCpu));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[101]++;
    return {
      name: 'Database Queries',
      duration,
      throughput: iterations * 2 / (duration / 1000),
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        queriesPerIteration: 2,
        queryStats:
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[5][0]++, this.analyticsEngine.getQueryPerformanceStats?.()) ||
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[5][1]++, {})
      }
    };
  }
  /**
   * Benchmark cache performance
   */
  async benchmarkCachePerformance() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[13]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[102]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[103]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[104]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[105]++, 1000);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[106]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[107]++;
    console.log('Benchmarking Cache Performance...');
    // Warm up cache
    /* istanbul ignore next */
    cov_9wcw63qgg().s[108]++;
    await this.analyticsEngine.calculateRealtimeMetrics();
    /* istanbul ignore next */
    cov_9wcw63qgg().s[109]++;
    await this.analyticsEngine.calculateHistoricalMetrics();
    /* istanbul ignore next */
    cov_9wcw63qgg().s[110]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[111]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[112]++;
      try {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[113]++;
        // Test cache hit performance
        await this.analyticsEngine.calculateRealtimeMetrics();
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[114]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[115]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[116]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[117]++, process.cpuUsage(startCpu));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[118]++;
    return {
      name: 'Cache Performance',
      duration,
      throughput: iterations / (duration / 1000),
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        cacheStats:
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[6][0]++, this.analyticsEngine.getCacheStats?.()) ||
        /* istanbul ignore next */
        (cov_9wcw63qgg().b[6][1]++, {})
      }
    };
  }
  /**
   * Benchmark memory usage patterns
   */
  async benchmarkMemoryUsage() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[14]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[119]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[120]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[121]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[122]++, 100);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[123]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[124]++;
    console.log('Benchmarking Memory Usage...');
    const memorySnapshots =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[125]++, []);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[126]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[127]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[128]++;
      try {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[129]++;
        // Perform memory-intensive operations
        await Promise.all([this.analyticsEngine.calculateTrends('day', 100), this.reportGenerator.generateReport('memory-test', {})]);
        // Take memory snapshot
        /* istanbul ignore next */
        cov_9wcw63qgg().s[130]++;
        memorySnapshots.push(process.memoryUsage());
        // Force garbage collection if available
        /* istanbul ignore next */
        cov_9wcw63qgg().s[131]++;
        if (global.gc) {
          /* istanbul ignore next */
          cov_9wcw63qgg().b[7][0]++;
          cov_9wcw63qgg().s[132]++;
          global.gc();
        } else
        /* istanbul ignore next */
        {
          cov_9wcw63qgg().b[7][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[133]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[134]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[135]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[136]++, process.cpuUsage(startCpu));
    // Calculate memory growth
    const memoryGrowth =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[137]++, memorySnapshots.length > 1 ?
    /* istanbul ignore next */
    (cov_9wcw63qgg().b[8][0]++, memorySnapshots[memorySnapshots.length - 1].heapUsed - memorySnapshots[0].heapUsed) :
    /* istanbul ignore next */
    (cov_9wcw63qgg().b[8][1]++, 0));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[138]++;
    return {
      name: 'Memory Usage',
      duration,
      throughput: iterations / (duration / 1000),
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        memoryGrowth,
        memoryLeakDetected: memoryGrowth > 50 * 1024 * 1024,
        // 50MB threshold
        gcAvailable: typeof global.gc !== 'undefined'
      }
    };
  }
  /**
   * Benchmark concurrent operations
   */
  async benchmarkConcurrentOperations() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[15]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[139]++, perf_hooks_1.performance.now());
    const startMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[140]++, process.memoryUsage());
    const startCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[141]++, process.cpuUsage());
    const iterations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[142]++, 50);
    const concurrency =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[143]++, 10);
    let errors =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[144]++, 0);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[145]++;
    console.log('Benchmarking Concurrent Operations...');
    /* istanbul ignore next */
    cov_9wcw63qgg().s[146]++;
    for (let i =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[147]++, 0); i < iterations; i++) {
      /* istanbul ignore next */
      cov_9wcw63qgg().s[148]++;
      try {
        // Create concurrent operations
        const operations =
        /* istanbul ignore next */
        (cov_9wcw63qgg().s[149]++, Array.from({
          length: concurrency
        }, () => {
          /* istanbul ignore next */
          cov_9wcw63qgg().f[16]++;
          cov_9wcw63qgg().s[150]++;
          return Promise.all([this.analyticsEngine.calculateRealtimeMetrics(), this.analyticsEngine.calculateHistoricalMetrics()]);
        }));
        /* istanbul ignore next */
        cov_9wcw63qgg().s[151]++;
        await Promise.all(operations);
      } catch (error) {
        /* istanbul ignore next */
        cov_9wcw63qgg().s[152]++;
        errors++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[153]++, perf_hooks_1.performance.now() - startTime);
    const endMemory =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[154]++, process.memoryUsage());
    const endCpu =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[155]++, process.cpuUsage(startCpu));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[156]++;
    return {
      name: 'Concurrent Operations',
      duration,
      throughput: iterations * concurrency * 2 / (duration / 1000),
      errorRate: errors / iterations * 100,
      memoryUsage: {
        rss: endMemory.rss - startMemory.rss,
        heapTotal: endMemory.heapTotal - startMemory.heapTotal,
        heapUsed: endMemory.heapUsed - startMemory.heapUsed,
        external: endMemory.external - startMemory.external,
        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers
      },
      cpuUsage: endCpu,
      iterations,
      timestamp: new Date(),
      metadata: {
        concurrencyLevel: concurrency,
        operationsPerIteration: concurrency * 2
      }
    };
  }
  /**
   * Run load test simulation
   */
  async runLoadTest(config) {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[17]++;
    cov_9wcw63qgg().s[157]++;
    console.log(`Starting load test: ${config.target}`);
    const results =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[158]++, {
      config,
      results: {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        averageResponseTime: 0,
        p95ResponseTime: 0,
        p99ResponseTime: 0,
        throughput: 0,
        errorRate: 0,
        maxResponseTime: 0,
        minResponseTime: Infinity
      },
      timeline: []
    });
    const startTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[159]++, Date.now());
    const responseTimes =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[160]++, []);
    // Simulate ramp-up
    /* istanbul ignore next */
    cov_9wcw63qgg().s[161]++;
    for (let concurrency =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[162]++, 1); concurrency <= config.concurrency; concurrency++) {
      const operations =
      /* istanbul ignore next */
      (cov_9wcw63qgg().s[163]++, Array.from({
        length: concurrency
      }, async () => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[18]++;
        const operationStart =
        /* istanbul ignore next */
        (cov_9wcw63qgg().s[164]++, perf_hooks_1.performance.now());
        let success =
        /* istanbul ignore next */
        (cov_9wcw63qgg().s[165]++, true);
        /* istanbul ignore next */
        cov_9wcw63qgg().s[166]++;
        try {
          /* istanbul ignore next */
          cov_9wcw63qgg().s[167]++;
          // Simulate operation based on target
          await this.simulateOperation(config.target, config.payload);
        } catch (error) {
          /* istanbul ignore next */
          cov_9wcw63qgg().s[168]++;
          success = false;
        }
        const responseTime =
        /* istanbul ignore next */
        (cov_9wcw63qgg().s[169]++, perf_hooks_1.performance.now() - operationStart);
        /* istanbul ignore next */
        cov_9wcw63qgg().s[170]++;
        responseTimes.push(responseTime);
        /* istanbul ignore next */
        cov_9wcw63qgg().s[171]++;
        results.timeline.push({
          timestamp: Date.now(),
          responseTime,
          success,
          concurrency
        });
        /* istanbul ignore next */
        cov_9wcw63qgg().s[172]++;
        if (success) {
          /* istanbul ignore next */
          cov_9wcw63qgg().b[9][0]++;
          cov_9wcw63qgg().s[173]++;
          results.results.successfulRequests++;
        } else {
          /* istanbul ignore next */
          cov_9wcw63qgg().b[9][1]++;
          cov_9wcw63qgg().s[174]++;
          results.results.failedRequests++;
        }
        /* istanbul ignore next */
        cov_9wcw63qgg().s[175]++;
        results.results.totalRequests++;
      }));
      /* istanbul ignore next */
      cov_9wcw63qgg().s[176]++;
      await Promise.all(operations);
      // Wait for ramp-up interval
      /* istanbul ignore next */
      cov_9wcw63qgg().s[177]++;
      await (0, promises_1.setTimeout)(config.rampUp / config.concurrency);
    }
    // Calculate results
    const totalTime =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[178]++, (Date.now() - startTime) / 1000);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[179]++;
    results.results.averageResponseTime = responseTimes.reduce((a, b) => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[19]++;
      cov_9wcw63qgg().s[180]++;
      return a + b;
    }, 0) / responseTimes.length;
    /* istanbul ignore next */
    cov_9wcw63qgg().s[181]++;
    results.results.throughput = results.results.totalRequests / totalTime;
    /* istanbul ignore next */
    cov_9wcw63qgg().s[182]++;
    results.results.errorRate = results.results.failedRequests / results.results.totalRequests * 100;
    // Calculate percentiles
    const sortedTimes =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[183]++, responseTimes.sort((a, b) => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[20]++;
      cov_9wcw63qgg().s[184]++;
      return a - b;
    }));
    /* istanbul ignore next */
    cov_9wcw63qgg().s[185]++;
    results.results.p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];
    /* istanbul ignore next */
    cov_9wcw63qgg().s[186]++;
    results.results.p99ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.99)];
    /* istanbul ignore next */
    cov_9wcw63qgg().s[187]++;
    results.results.maxResponseTime = Math.max(...responseTimes);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[188]++;
    results.results.minResponseTime = Math.min(...responseTimes);
    /* istanbul ignore next */
    cov_9wcw63qgg().s[189]++;
    return results;
  }
  /**
   * Simulate operation for load testing
   */
  async simulateOperation(target, payload) {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[21]++;
    cov_9wcw63qgg().s[190]++;
    switch (target) {
      case 'analytics':
        /* istanbul ignore next */
        cov_9wcw63qgg().b[10][0]++;
        cov_9wcw63qgg().s[191]++;
        await this.analyticsEngine.calculateRealtimeMetrics();
        /* istanbul ignore next */
        cov_9wcw63qgg().s[192]++;
        break;
      case 'reports':
        /* istanbul ignore next */
        cov_9wcw63qgg().b[10][1]++;
        cov_9wcw63qgg().s[193]++;
        await this.reportGenerator.generateReport('load-test', {});
        /* istanbul ignore next */
        cov_9wcw63qgg().s[194]++;
        break;
      case 'optimization':
        /* istanbul ignore next */
        cov_9wcw63qgg().b[10][2]++;
        cov_9wcw63qgg().s[195]++;
        await this.optimizationEngine.generateOptimizationSuggestions('Test prompt for load testing performance optimization', {
          successRate: 85,
          responseTime: 1000
        });
        /* istanbul ignore next */
        cov_9wcw63qgg().s[196]++;
        break;
      default:
        /* istanbul ignore next */
        cov_9wcw63qgg().b[10][3]++;
        cov_9wcw63qgg().s[197]++;
        // Default operation
        await (0, promises_1.setTimeout)(Math.random() * 100);
    }
  }
  /**
   * Calculate benchmark suite summary
   */
  calculateSummary(results) {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[22]++;
    const totalDuration =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[198]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[23]++;
      cov_9wcw63qgg().s[199]++;
      return sum + r.duration;
    }, 0));
    const averageThroughput =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[200]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[24]++;
      cov_9wcw63qgg().s[201]++;
      return sum + r.throughput;
    }, 0) / results.length);
    const averageErrorRate =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[202]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[25]++;
      cov_9wcw63qgg().s[203]++;
      return sum + r.errorRate;
    }, 0) / results.length);
    const peakMemoryUsage =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[204]++, Math.max(...results.map(r => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[26]++;
      cov_9wcw63qgg().s[205]++;
      return r.memoryUsage.heapUsed;
    })));
    const recommendations =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[206]++, []);
    // Generate recommendations based on results
    /* istanbul ignore next */
    cov_9wcw63qgg().s[207]++;
    if (averageErrorRate > 5) {
      /* istanbul ignore next */
      cov_9wcw63qgg().b[11][0]++;
      cov_9wcw63qgg().s[208]++;
      recommendations.push('High error rate detected. Review error handling and system stability.');
    } else
    /* istanbul ignore next */
    {
      cov_9wcw63qgg().b[11][1]++;
    }
    cov_9wcw63qgg().s[209]++;
    if (averageThroughput < 10) {
      /* istanbul ignore next */
      cov_9wcw63qgg().b[12][0]++;
      cov_9wcw63qgg().s[210]++;
      recommendations.push('Low throughput detected. Consider optimizing critical paths and adding caching.');
    } else
    /* istanbul ignore next */
    {
      cov_9wcw63qgg().b[12][1]++;
    }
    cov_9wcw63qgg().s[211]++;
    if (peakMemoryUsage > 100 * 1024 * 1024) {
      /* istanbul ignore next */
      cov_9wcw63qgg().b[13][0]++;
      cov_9wcw63qgg().s[212]++;
      // 100MB
      recommendations.push('High memory usage detected. Review memory allocation and implement garbage collection optimization.');
    } else
    /* istanbul ignore next */
    {
      cov_9wcw63qgg().b[13][1]++;
    }
    const slowResults =
    /* istanbul ignore next */
    (cov_9wcw63qgg().s[213]++, results.filter(r => {
      /* istanbul ignore next */
      cov_9wcw63qgg().f[27]++;
      cov_9wcw63qgg().s[214]++;
      return r.duration > 10000;
    })); // 10 seconds
    /* istanbul ignore next */
    cov_9wcw63qgg().s[215]++;
    if (slowResults.length > 0) {
      /* istanbul ignore next */
      cov_9wcw63qgg().b[14][0]++;
      cov_9wcw63qgg().s[216]++;
      recommendations.push(`Slow operations detected: ${slowResults.map(r => {
        /* istanbul ignore next */
        cov_9wcw63qgg().f[28]++;
        cov_9wcw63qgg().s[217]++;
        return r.name;
      }).join(', ')}. Consider optimization.`);
    } else
    /* istanbul ignore next */
    {
      cov_9wcw63qgg().b[14][1]++;
    }
    cov_9wcw63qgg().s[218]++;
    return {
      totalDuration,
      averageThroughput,
      averageErrorRate,
      peakMemoryUsage,
      recommendations
    };
  }
  /**
   * Get current benchmark status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[29]++;
    cov_9wcw63qgg().s[219]++;
    return {
      isRunning: this.isRunning,
      currentSuite: this.currentSuite?.name,
      progress: this.currentSuite ?
      /* istanbul ignore next */
      (cov_9wcw63qgg().b[15][0]++, this.currentSuite.results.length / 7 * 100) :
      /* istanbul ignore next */
      (cov_9wcw63qgg().b[15][1]++, 0)
    };
  }
  /**
   * Export benchmark results
   */
  exportResults(suite) {
    /* istanbul ignore next */
    cov_9wcw63qgg().f[30]++;
    cov_9wcw63qgg().s[220]++;
    return JSON.stringify(suite, null, 2);
  }
}
/* istanbul ignore next */
cov_9wcw63qgg().s[221]++;
exports.PerformanceBenchmark = PerformanceBenchmark;
// Export singleton instance
/* istanbul ignore next */
cov_9wcw63qgg().s[222]++;
exports.performanceBenchmark = new PerformanceBenchmark();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,