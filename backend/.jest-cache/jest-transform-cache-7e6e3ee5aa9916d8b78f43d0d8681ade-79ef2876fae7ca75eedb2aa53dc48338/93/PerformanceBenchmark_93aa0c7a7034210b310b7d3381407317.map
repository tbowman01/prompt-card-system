{"version":3,"names":["cov_9wcw63qgg","actualCoverage","s","perf_hooks_1","require","events_1","AnalyticsEngine_1","ReportGenerator_1","OptimizationEngine_1","promises_1","PerformanceBenchmark","EventEmitter","constructor","f","isRunning","currentSuite","analyticsEngine","AnalyticsEngine","getInstance","reportGenerator","ReportGenerator","optimizationEngine","OptimizationEngine","runBenchmarkSuite","suiteName","b","Error","emit","suite","name","results","summary","totalDuration","averageThroughput","averageErrorRate","peakMemoryUsage","recommendations","benchmarks","benchmarkAnalyticsEngine","benchmarkReportGeneration","benchmarkOptimizationEngine","benchmarkDatabaseQueries","benchmarkCachePerformance","benchmarkMemoryUsage","benchmarkConcurrentOperations","benchmark","result","push","error","console","message","calculateSummary","startTime","performance","now","startMemory","process","memoryUsage","startCpu","cpuUsage","iterations","errors","log","i","Promise","all","calculateRealtimeMetrics","calculateHistoricalMetrics","calculateTrends","duration","endMemory","endCpu","throughput","errorRate","rss","heapTotal","heapUsed","external","arrayBuffers","timestamp","Date","metadata","operationsPerIteration","cacheHitRate","getCacheStats","hitRate","generateReport","startDate","toISOString","endDate","averageReportSize","cacheEfficiency","getPerformanceStats","testPrompt","generateOptimizationSuggestions","successRate","responseTime","qualityScore","cacheStats","avgSuggestionsPerPrompt","queriesPerIteration","queryStats","getQueryPerformanceStats","memorySnapshots","global","gc","memoryGrowth","length","memoryLeakDetected","gcAvailable","concurrency","operations","Array","from","concurrencyLevel","runLoadTest","config","target","totalRequests","successfulRequests","failedRequests","averageResponseTime","p95ResponseTime","p99ResponseTime","maxResponseTime","minResponseTime","Infinity","timeline","responseTimes","operationStart","success","simulateOperation","payload","setTimeout","rampUp","totalTime","reduce","a","sortedTimes","sort","Math","floor","max","min","random","sum","r","map","slowResults","filter","join","getStatus","progress","exportResults","JSON","stringify","exports","performanceBenchmark"],"sources":["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceBenchmark.ts"],"sourcesContent":["import { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { ReportGenerator } from '../reports/generators/ReportGenerator';\nimport { OptimizationEngine } from '../optimization/OptimizationEngine';\nimport { TestQueueManager } from '../testing/TestQueueManager';\nimport { performanceMonitor } from './PerformanceMonitor';\nimport { promisify } from 'util';\nimport { setTimeout } from 'timers/promises';\n\nexport interface BenchmarkResult {\n  name: string;\n  duration: number;\n  throughput: number;\n  errorRate: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  cpuUsage: NodeJS.CpuUsage;\n  iterations: number;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface BenchmarkSuite {\n  name: string;\n  results: BenchmarkResult[];\n  summary: {\n    totalDuration: number;\n    averageThroughput: number;\n    averageErrorRate: number;\n    peakMemoryUsage: number;\n    recommendations: string[];\n  };\n}\n\nexport interface LoadTestConfig {\n  concurrency: number;\n  duration: number;\n  rampUp: number;\n  rampDown: number;\n  target: string;\n  payload?: any;\n}\n\nexport interface LoadTestResult {\n  config: LoadTestConfig;\n  results: {\n    totalRequests: number;\n    successfulRequests: number;\n    failedRequests: number;\n    averageResponseTime: number;\n    p95ResponseTime: number;\n    p99ResponseTime: number;\n    throughput: number;\n    errorRate: number;\n    maxResponseTime: number;\n    minResponseTime: number;\n  };\n  timeline: Array<{\n    timestamp: number;\n    responseTime: number;\n    success: boolean;\n    concurrency: number;\n  }>;\n}\n\nexport class PerformanceBenchmark extends EventEmitter {\n  private analyticsEngine: AnalyticsEngine;\n  private reportGenerator: ReportGenerator;\n  private optimizationEngine: OptimizationEngine;\n  private isRunning: boolean = false;\n  private currentSuite: BenchmarkSuite | null = null;\n\n  constructor() {\n    super();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.reportGenerator = new ReportGenerator();\n    this.optimizationEngine = new OptimizationEngine();\n  }\n\n  /**\n   * Run a comprehensive performance benchmark suite\n   */\n  async runBenchmarkSuite(suiteName: string = 'Performance Benchmark'): Promise<BenchmarkSuite> {\n    if (this.isRunning) {\n      throw new Error('Benchmark suite is already running');\n    }\n\n    this.isRunning = true;\n    this.emit('suiteStarted', suiteName);\n\n    try {\n      const suite: BenchmarkSuite = {\n        name: suiteName,\n        results: [],\n        summary: {\n          totalDuration: 0,\n          averageThroughput: 0,\n          averageErrorRate: 0,\n          peakMemoryUsage: 0,\n          recommendations: []\n        }\n      };\n\n      this.currentSuite = suite;\n\n      // Run individual benchmarks\n      const benchmarks = [\n        () => this.benchmarkAnalyticsEngine(),\n        () => this.benchmarkReportGeneration(),\n        () => this.benchmarkOptimizationEngine(),\n        () => this.benchmarkDatabaseQueries(),\n        () => this.benchmarkCachePerformance(),\n        () => this.benchmarkMemoryUsage(),\n        () => this.benchmarkConcurrentOperations()\n      ];\n\n      for (const benchmark of benchmarks) {\n        try {\n          const result = await benchmark();\n          suite.results.push(result);\n          this.emit('benchmarkCompleted', result);\n        } catch (error) {\n          console.error(`Benchmark failed: ${error.message}`);\n          this.emit('benchmarkFailed', error);\n        }\n      }\n\n      // Calculate summary\n      suite.summary = this.calculateSummary(suite.results);\n      this.emit('suiteCompleted', suite);\n\n      return suite;\n    } finally {\n      this.isRunning = false;\n      this.currentSuite = null;\n    }\n  }\n\n  /**\n   * Benchmark analytics engine performance\n   */\n  async benchmarkAnalyticsEngine(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 100;\n    let errors = 0;\n\n    console.log('Benchmarking Analytics Engine...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await Promise.all([\n          this.analyticsEngine.calculateRealtimeMetrics(),\n          this.analyticsEngine.calculateHistoricalMetrics(),\n          this.analyticsEngine.calculateTrends('day', 30)\n        ]);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Analytics Engine',\n      duration,\n      throughput: (iterations * 3) / (duration / 1000), // operations per second\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        operationsPerIteration: 3,\n        cacheHitRate: this.analyticsEngine.getCacheStats?.()?.hitRate || 0\n      }\n    };\n  }\n\n  /**\n   * Benchmark report generation performance\n   */\n  async benchmarkReportGeneration(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 20;\n    let errors = 0;\n\n    console.log('Benchmarking Report Generation...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await this.reportGenerator.generateReport('test-report', {\n          startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date().toISOString()\n        });\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Report Generation',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        averageReportSize: 'calculated_dynamically',\n        cacheEfficiency: this.reportGenerator.getPerformanceStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark optimization engine performance\n   */\n  async benchmarkOptimizationEngine(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 10;\n    let errors = 0;\n\n    console.log('Benchmarking Optimization Engine...');\n\n    const testPrompt = 'Generate a comprehensive report about system performance with detailed metrics and recommendations.';\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        await this.optimizationEngine.generateOptimizationSuggestions(testPrompt, {\n          successRate: 90,\n          responseTime: 1000,\n          qualityScore: 85\n        });\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Optimization Engine',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        cacheStats: this.optimizationEngine.getCacheStats?.() || {},\n        avgSuggestionsPerPrompt: 3.5\n      }\n    };\n  }\n\n  /**\n   * Benchmark database query performance\n   */\n  async benchmarkDatabaseQueries(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 500;\n    let errors = 0;\n\n    console.log('Benchmarking Database Queries...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Simulate various database operations\n        await Promise.all([\n          this.analyticsEngine.calculateRealtimeMetrics(),\n          this.analyticsEngine.calculateHistoricalMetrics()\n        ]);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Database Queries',\n      duration,\n      throughput: (iterations * 2) / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        queriesPerIteration: 2,\n        queryStats: this.analyticsEngine.getQueryPerformanceStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark cache performance\n   */\n  async benchmarkCachePerformance(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 1000;\n    let errors = 0;\n\n    console.log('Benchmarking Cache Performance...');\n\n    // Warm up cache\n    await this.analyticsEngine.calculateRealtimeMetrics();\n    await this.analyticsEngine.calculateHistoricalMetrics();\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Test cache hit performance\n        await this.analyticsEngine.calculateRealtimeMetrics();\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Cache Performance',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        cacheStats: this.analyticsEngine.getCacheStats?.() || {}\n      }\n    };\n  }\n\n  /**\n   * Benchmark memory usage patterns\n   */\n  async benchmarkMemoryUsage(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 100;\n    let errors = 0;\n\n    console.log('Benchmarking Memory Usage...');\n\n    const memorySnapshots = [];\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Perform memory-intensive operations\n        await Promise.all([\n          this.analyticsEngine.calculateTrends('day', 100),\n          this.reportGenerator.generateReport('memory-test', {})\n        ]);\n        \n        // Take memory snapshot\n        memorySnapshots.push(process.memoryUsage());\n        \n        // Force garbage collection if available\n        if (global.gc) {\n          global.gc();\n        }\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    // Calculate memory growth\n    const memoryGrowth = memorySnapshots.length > 1 ? \n      memorySnapshots[memorySnapshots.length - 1].heapUsed - memorySnapshots[0].heapUsed : 0;\n\n    return {\n      name: 'Memory Usage',\n      duration,\n      throughput: iterations / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        memoryGrowth,\n        memoryLeakDetected: memoryGrowth > 50 * 1024 * 1024, // 50MB threshold\n        gcAvailable: typeof global.gc !== 'undefined'\n      }\n    };\n  }\n\n  /**\n   * Benchmark concurrent operations\n   */\n  async benchmarkConcurrentOperations(): Promise<BenchmarkResult> {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n    const startCpu = process.cpuUsage();\n    const iterations = 50;\n    const concurrency = 10;\n    let errors = 0;\n\n    console.log('Benchmarking Concurrent Operations...');\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        // Create concurrent operations\n        const operations = Array.from({ length: concurrency }, () => \n          Promise.all([\n            this.analyticsEngine.calculateRealtimeMetrics(),\n            this.analyticsEngine.calculateHistoricalMetrics()\n          ])\n        );\n        \n        await Promise.all(operations);\n      } catch (error) {\n        errors++;\n      }\n    }\n\n    const duration = performance.now() - startTime;\n    const endMemory = process.memoryUsage();\n    const endCpu = process.cpuUsage(startCpu);\n\n    return {\n      name: 'Concurrent Operations',\n      duration,\n      throughput: (iterations * concurrency * 2) / (duration / 1000),\n      errorRate: (errors / iterations) * 100,\n      memoryUsage: {\n        rss: endMemory.rss - startMemory.rss,\n        heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n        heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n        external: endMemory.external - startMemory.external,\n        arrayBuffers: endMemory.arrayBuffers - startMemory.arrayBuffers\n      },\n      cpuUsage: endCpu,\n      iterations,\n      timestamp: new Date(),\n      metadata: {\n        concurrencyLevel: concurrency,\n        operationsPerIteration: concurrency * 2\n      }\n    };\n  }\n\n  /**\n   * Run load test simulation\n   */\n  async runLoadTest(config: LoadTestConfig): Promise<LoadTestResult> {\n    console.log(`Starting load test: ${config.target}`);\n    \n    const results: LoadTestResult = {\n      config,\n      results: {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        averageResponseTime: 0,\n        p95ResponseTime: 0,\n        p99ResponseTime: 0,\n        throughput: 0,\n        errorRate: 0,\n        maxResponseTime: 0,\n        minResponseTime: Infinity\n      },\n      timeline: []\n    };\n\n    const startTime = Date.now();\n    const responseTimes: number[] = [];\n    \n    // Simulate ramp-up\n    for (let concurrency = 1; concurrency <= config.concurrency; concurrency++) {\n      const operations = Array.from({ length: concurrency }, async () => {\n        const operationStart = performance.now();\n        let success = true;\n        \n        try {\n          // Simulate operation based on target\n          await this.simulateOperation(config.target, config.payload);\n        } catch (error) {\n          success = false;\n        }\n        \n        const responseTime = performance.now() - operationStart;\n        responseTimes.push(responseTime);\n        \n        results.timeline.push({\n          timestamp: Date.now(),\n          responseTime,\n          success,\n          concurrency\n        });\n        \n        if (success) {\n          results.results.successfulRequests++;\n        } else {\n          results.results.failedRequests++;\n        }\n        \n        results.results.totalRequests++;\n      });\n      \n      await Promise.all(operations);\n      \n      // Wait for ramp-up interval\n      await setTimeout(config.rampUp / config.concurrency);\n    }\n    \n    // Calculate results\n    const totalTime = (Date.now() - startTime) / 1000;\n    results.results.averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\n    results.results.throughput = results.results.totalRequests / totalTime;\n    results.results.errorRate = (results.results.failedRequests / results.results.totalRequests) * 100;\n    \n    // Calculate percentiles\n    const sortedTimes = responseTimes.sort((a, b) => a - b);\n    results.results.p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];\n    results.results.p99ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.99)];\n    results.results.maxResponseTime = Math.max(...responseTimes);\n    results.results.minResponseTime = Math.min(...responseTimes);\n    \n    return results;\n  }\n\n  /**\n   * Simulate operation for load testing\n   */\n  private async simulateOperation(target: string, payload?: any): Promise<void> {\n    switch (target) {\n      case 'analytics':\n        await this.analyticsEngine.calculateRealtimeMetrics();\n        break;\n      case 'reports':\n        await this.reportGenerator.generateReport('load-test', {});\n        break;\n      case 'optimization':\n        await this.optimizationEngine.generateOptimizationSuggestions(\n          'Test prompt for load testing performance optimization',\n          { successRate: 85, responseTime: 1000 }\n        );\n        break;\n      default:\n        // Default operation\n        await setTimeout(Math.random() * 100);\n    }\n  }\n\n  /**\n   * Calculate benchmark suite summary\n   */\n  private calculateSummary(results: BenchmarkResult[]): BenchmarkSuite['summary'] {\n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    const averageThroughput = results.reduce((sum, r) => sum + r.throughput, 0) / results.length;\n    const averageErrorRate = results.reduce((sum, r) => sum + r.errorRate, 0) / results.length;\n    const peakMemoryUsage = Math.max(...results.map(r => r.memoryUsage.heapUsed));\n    \n    const recommendations = [];\n    \n    // Generate recommendations based on results\n    if (averageErrorRate > 5) {\n      recommendations.push('High error rate detected. Review error handling and system stability.');\n    }\n    \n    if (averageThroughput < 10) {\n      recommendations.push('Low throughput detected. Consider optimizing critical paths and adding caching.');\n    }\n    \n    if (peakMemoryUsage > 100 * 1024 * 1024) { // 100MB\n      recommendations.push('High memory usage detected. Review memory allocation and implement garbage collection optimization.');\n    }\n    \n    const slowResults = results.filter(r => r.duration > 10000); // 10 seconds\n    if (slowResults.length > 0) {\n      recommendations.push(`Slow operations detected: ${slowResults.map(r => r.name).join(', ')}. Consider optimization.`);\n    }\n    \n    return {\n      totalDuration,\n      averageThroughput,\n      averageErrorRate,\n      peakMemoryUsage,\n      recommendations\n    };\n  }\n\n  /**\n   * Get current benchmark status\n   */\n  public getStatus(): {\n    isRunning: boolean;\n    currentSuite?: string;\n    progress?: number;\n  } {\n    return {\n      isRunning: this.isRunning,\n      currentSuite: this.currentSuite?.name,\n      progress: this.currentSuite ? (this.currentSuite.results.length / 7) * 100 : 0\n    };\n  }\n\n  /**\n   * Export benchmark results\n   */\n  public exportResults(suite: BenchmarkSuite): string {\n    return JSON.stringify(suite, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const performanceBenchmark = new PerformanceBenchmark();"],"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","ignoreList":[]}