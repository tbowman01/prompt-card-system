67feb7752904735c5f2f69ab15c2c674
"use strict";

/* istanbul ignore next */
function cov_1vn08jjejh() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/MLAnalyticsCoordinator.ts";
  var hash = "39d3001a91948dfd797a6dc02e6005a0a83733c1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/MLAnalyticsCoordinator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 73
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 54
        }
      },
      "6": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "7": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 9,
          column: 73
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 16
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "14": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "15": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 34
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "17": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "18": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "19": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "20": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 68
        }
      },
      "21": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 96
        }
      },
      "22": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "23": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "24": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "25": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 56
        }
      },
      "26": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "27": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 59
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "29": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 41
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 41
        }
      },
      "31": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 38
        }
      },
      "32": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "33": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 77
        }
      },
      "34": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 37
        }
      },
      "35": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 83
        }
      },
      "36": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 38
        }
      },
      "37": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "38": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "39": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 36
        }
      },
      "40": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "41": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 68
        }
      },
      "42": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 19
        }
      },
      "43": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "44": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 73
        }
      },
      "45": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "46": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 101
        }
      },
      "47": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "48": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 102
        }
      },
      "49": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 96
        }
      },
      "50": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 34
        }
      },
      "51": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 69
        }
      },
      "52": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 33
        }
      },
      "53": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 78
        }
      },
      "54": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 38
        }
      },
      "55": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 24
        }
      },
      "56": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "57": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 19
        }
      },
      "58": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "59": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 73
        }
      },
      "60": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "61": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 57
        }
      },
      "62": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 49
        }
      },
      "63": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "64": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 56
        }
      },
      "65": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "66": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 49
        }
      },
      "67": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 50
        }
      },
      "68": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 53
        }
      },
      "69": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 35
        }
      },
      "70": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 69
        }
      },
      "71": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 33
        }
      },
      "72": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 77
        }
      },
      "73": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 38
        }
      },
      "74": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "75": {
        start: {
          line: 167,
          column: 37
        },
        end: {
          line: 167,
          column: 84
        }
      },
      "76": {
        start: {
          line: 168,
          column: 37
        },
        end: {
          line: 168,
          column: 85
        }
      },
      "77": {
        start: {
          line: 170,
          column: 35
        },
        end: {
          line: 170,
          column: 75
        }
      },
      "78": {
        start: {
          line: 171,
          column: 34
        },
        end: {
          line: 171,
          column: 77
        }
      },
      "79": {
        start: {
          line: 173,
          column: 33
        },
        end: {
          line: 173,
          column: 73
        }
      },
      "80": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 174,
          column: 73
        }
      },
      "81": {
        start: {
          line: 176,
          column: 36
        },
        end: {
          line: 176,
          column: 73
        }
      },
      "82": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 181,
          column: 39
        }
      },
      "83": {
        start: {
          line: 183,
          column: 27
        },
        end: {
          line: 183,
          column: 53
        }
      },
      "84": {
        start: {
          line: 185,
          column: 30
        },
        end: {
          line: 185,
          column: 92
        }
      },
      "85": {
        start: {
          line: 187,
          column: 36
        },
        end: {
          line: 187,
          column: 133
        }
      },
      "86": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "87": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 75
        }
      },
      "88": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "89": {
        start: {
          line: 216,
          column: 29
        },
        end: {
          line: 216,
          column: 62
        }
      },
      "90": {
        start: {
          line: 217,
          column: 29
        },
        end: {
          line: 217,
          column: 69
        }
      },
      "91": {
        start: {
          line: 218,
          column: 31
        },
        end: {
          line: 218,
          column: 71
        }
      },
      "92": {
        start: {
          line: 219,
          column: 33
        },
        end: {
          line: 219,
          column: 80
        }
      },
      "93": {
        start: {
          line: 221,
          column: 25
        },
        end: {
          line: 221,
          column: 54
        }
      },
      "94": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "95": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 55
        }
      },
      "96": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 70
        }
      },
      "97": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 49
        }
      },
      "98": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 34
        }
      },
      "99": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 267,
          column: 10
        }
      },
      "100": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 67
        }
      },
      "101": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "102": {
        start: {
          line: 275,
          column: 106
        },
        end: {
          line: 281,
          column: 14
        }
      },
      "103": {
        start: {
          line: 283,
          column: 31
        },
        end: {
          line: 283,
          column: 126
        }
      },
      "104": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 291,
          column: 14
        }
      },
      "105": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 70
        }
      },
      "106": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 24
        }
      },
      "107": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 83
        }
      },
      "108": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 65
        }
      },
      "109": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 65
        }
      },
      "110": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 79
        }
      },
      "111": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 80
        }
      },
      "112": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 35
        }
      },
      "113": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "114": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 48
        }
      },
      "115": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "116": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 44
        }
      },
      "117": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "118": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 47
        }
      },
      "119": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 57
        }
      },
      "120": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "121": {
        start: {
          line: 329,
          column: 31
        },
        end: {
          line: 329,
          column: 99
        }
      },
      "122": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 76
        }
      },
      "123": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "124": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 338,
          column: 17
        }
      },
      "125": {
        start: {
          line: 334,
          column: 20
        },
        end: {
          line: 334,
          column: 86
        }
      },
      "126": {
        start: {
          line: 337,
          column: 20
        },
        end: {
          line: 337,
          column: 94
        }
      },
      "127": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 57
        }
      },
      "128": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 89
        }
      },
      "129": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 57
        }
      },
      "130": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "131": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 57
        }
      },
      "132": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 83
        }
      },
      "133": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 60
        }
      },
      "134": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "135": {
        start: {
          line: 360,
          column: 31
        },
        end: {
          line: 360,
          column: 81
        }
      },
      "136": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "137": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 367,
          column: 17
        }
      },
      "138": {
        start: {
          line: 363,
          column: 20
        },
        end: {
          line: 363,
          column: 82
        }
      },
      "139": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 366,
          column: 97
        }
      },
      "140": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 60
        }
      },
      "141": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 92
        }
      },
      "142": {
        start: {
          line: 376,
          column: 27
        },
        end: {
          line: 376,
          column: 77
        }
      },
      "143": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 386,
          column: 23
        }
      },
      "144": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "145": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 63
        }
      },
      "146": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 67
        }
      },
      "147": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 381,
          column: 61
        }
      },
      "148": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 68
        }
      },
      "149": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 96
        }
      },
      "150": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 403,
          column: 18
        }
      },
      "151": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 402,
          column: 13
        }
      },
      "152": {
        start: {
          line: 392,
          column: 36
        },
        end: {
          line: 392,
          column: 69
        }
      },
      "153": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 56
        }
      },
      "154": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "155": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 397,
          column: 68
        }
      },
      "156": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 67
        }
      },
      "157": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 407,
          column: 22
        }
      },
      "158": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 22
        }
      },
      "159": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 409,
          column: 22
        }
      },
      "160": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 22
        }
      },
      "161": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 411,
          column: 22
        }
      },
      "162": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 22
        }
      },
      "163": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 18
        }
      },
      "164": {
        start: {
          line: 415,
          column: 31
        },
        end: {
          line: 415,
          column: 83
        }
      },
      "165": {
        start: {
          line: 415,
          column: 50
        },
        end: {
          line: 415,
          column: 75
        }
      },
      "166": {
        start: {
          line: 416,
          column: 30
        },
        end: {
          line: 416,
          column: 81
        }
      },
      "167": {
        start: {
          line: 416,
          column: 49
        },
        end: {
          line: 416,
          column: 73
        }
      },
      "168": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 418,
          column: 22
        }
      },
      "169": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 22
        }
      },
      "170": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 420,
          column: 22
        }
      },
      "171": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 22
        }
      },
      "172": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 422,
          column: 22
        }
      },
      "173": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 22
        }
      },
      "174": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 18
        }
      },
      "175": {
        start: {
          line: 426,
          column: 71
        },
        end: {
          line: 426,
          column: 76
        }
      },
      "176": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 427,
          column: 22
        }
      },
      "177": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 49
        }
      },
      "178": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 42
        }
      },
      "179": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 40
        }
      },
      "180": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 46
        }
      },
      "181": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 18
        }
      },
      "182": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 68
        }
      },
      "183": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "184": {
        start: {
          line: 445,
          column: 53
        },
        end: {
          line: 445,
          column: 78
        }
      },
      "185": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 30
        }
      },
      "186": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "187": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 26
        }
      },
      "188": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 453,
          column: 9
        }
      },
      "189": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 28
        }
      },
      "190": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 21
        }
      },
      "191": {
        start: {
          line: 457,
          column: 32
        },
        end: {
          line: 457,
          column: 34
        }
      },
      "192": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "193": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 86
        }
      },
      "194": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "195": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 91
        }
      },
      "196": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "197": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 74
        }
      },
      "198": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 469,
          column: 9
        }
      },
      "199": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 468,
          column: 85
        }
      },
      "200": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 472,
          column: 9
        }
      },
      "201": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 80
        }
      },
      "202": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 31
        }
      },
      "203": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 480,
          column: 10
        }
      },
      "204": {
        start: {
          line: 483,
          column: 24
        },
        end: {
          line: 483,
          column: 26
        }
      },
      "205": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "206": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 74
        }
      },
      "207": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "208": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 77
        }
      },
      "209": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "210": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 76
        }
      },
      "211": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 493,
          column: 65
        }
      },
      "212": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 23
        }
      },
      "213": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 64
        }
      },
      "214": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 38
        }
      },
      "215": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 57
        }
      },
      "216": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 502,
          column: 43
        }
      },
      "217": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 59
        }
      },
      "218": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 46
        }
      },
      "219": {
        start: {
          line: 509,
          column: 29
        },
        end: {
          line: 509,
          column: 39
        }
      },
      "220": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 54
        }
      },
      "221": {
        start: {
          line: 514,
          column: 26
        },
        end: {
          line: 514,
          column: 79
        }
      },
      "222": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 515,
          column: 53
        }
      },
      "223": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 518,
          column: 102
        }
      },
      "224": {
        start: {
          line: 521,
          column: 0
        },
        end: {
          line: 521,
          column: 56
        }
      },
      "225": {
        start: {
          line: 523,
          column: 0
        },
        end: {
          line: 523,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 24
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 23
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 18
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 97
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 130
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 33
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 164
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 32
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 215
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 28
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 242
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 16
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 250
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 256
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 34
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 272
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 25
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 299
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 26
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 308
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 310,
            column: 52
          },
          end: {
            line: 310,
            column: 53
          }
        },
        loc: {
          start: {
            line: 310,
            column: 65
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 310
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 313,
            column: 50
          },
          end: {
            line: 313,
            column: 51
          }
        },
        loc: {
          start: {
            line: 313,
            column: 61
          },
          end: {
            line: 315,
            column: 9
          }
        },
        line: 313
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 317,
            column: 44
          },
          end: {
            line: 317,
            column: 45
          }
        },
        loc: {
          start: {
            line: 317,
            column: 55
          },
          end: {
            line: 319,
            column: 9
          }
        },
        line: 317
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 39
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 325
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 39
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 346
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 42
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 356
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 24
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 375
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 377,
            column: 48
          },
          end: {
            line: 377,
            column: 49
          }
        },
        loc: {
          start: {
            line: 377,
            column: 60
          },
          end: {
            line: 386,
            column: 9
          }
        },
        line: 377
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 28
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 389
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 390,
            column: 47
          },
          end: {
            line: 390,
            column: 48
          }
        },
        loc: {
          start: {
            line: 390,
            column: 59
          },
          end: {
            line: 403,
            column: 9
          }
        },
        line: 390
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 405,
            column: 4
          },
          end: {
            line: 405,
            column: 5
          }
        },
        loc: {
          start: {
            line: 405,
            column: 37
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 405
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 35
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 414
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 415,
            column: 45
          },
          end: {
            line: 415,
            column: 46
          }
        },
        loc: {
          start: {
            line: 415,
            column: 50
          },
          end: {
            line: 415,
            column: 75
          }
        },
        line: 415
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 416,
            column: 44
          },
          end: {
            line: 416,
            column: 45
          }
        },
        loc: {
          start: {
            line: 416,
            column: 49
          },
          end: {
            line: 416,
            column: 73
          }
        },
        line: 416
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 33
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 425
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 37
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 436
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 440,
            column: 4
          },
          end: {
            line: 440,
            column: 5
          }
        },
        loc: {
          start: {
            line: 440,
            column: 26
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 440
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 444,
            column: 62
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 444
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 445,
            column: 48
          },
          end: {
            line: 445,
            column: 49
          }
        },
        loc: {
          start: {
            line: 445,
            column: 53
          },
          end: {
            line: 445,
            column: 78
          }
        },
        line: 445
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 97
          },
          end: {
            line: 474,
            column: 5
          }
        },
        line: 456
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 475,
            column: 4
          },
          end: {
            line: 475,
            column: 5
          }
        },
        loc: {
          start: {
            line: 475,
            column: 29
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 475
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 81
          },
          end: {
            line: 495,
            column: 5
          }
        },
        line: 482
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 496,
            column: 4
          },
          end: {
            line: 496,
            column: 5
          }
        },
        loc: {
          start: {
            line: 496,
            column: 35
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 496
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 31
          },
          end: {
            line: 503,
            column: 5
          }
        },
        line: 500
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 504,
            column: 5
          }
        },
        loc: {
          start: {
            line: 504,
            column: 34
          },
          end: {
            line: 507,
            column: 5
          }
        },
        line: 504
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 27
          },
          end: {
            line: 509,
            column: 41
          }
        },
        line: 509
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 510,
            column: 5
          }
        },
        loc: {
          start: {
            line: 510,
            column: 25
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 510
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 513,
            column: 4
          },
          end: {
            line: 513,
            column: 5
          }
        },
        loc: {
          start: {
            line: 513,
            column: 33
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 513
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 43
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 517
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "1": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "11": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "12": {
        loc: {
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 68
          }
        }, {
          start: {
            line: 263,
            column: 72
          },
          end: {
            line: 263,
            column: 105
          }
        }],
        line: 263
      },
      "13": {
        loc: {
          start: {
            line: 264,
            column: 34
          },
          end: {
            line: 264,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 34
          },
          end: {
            line: 264,
            column: 68
          }
        }, {
          start: {
            line: 264,
            column: 72
          },
          end: {
            line: 264,
            column: 108
          }
        }],
        line: 264
      },
      "14": {
        loc: {
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "15": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 407,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 407,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "16": {
        loc: {
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 409,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 409,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "17": {
        loc: {
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 411,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 411,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "18": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 418,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 418,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "19": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 420,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 420,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "20": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 422,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 422,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "21": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "22": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 445,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 445,
            column: 24
          }
        }, {
          start: {
            line: 445,
            column: 28
          },
          end: {
            line: 445,
            column: 79
          }
        }],
        line: 445
      },
      "23": {
        loc: {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "24": {
        loc: {
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 448,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 448,
            column: 24
          }
        }, {
          start: {
            line: 448,
            column: 28
          },
          end: {
            line: 448,
            column: 57
          }
        }],
        line: 448
      },
      "25": {
        loc: {
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 453,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 453,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "26": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 451,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 451,
            column: 24
          }
        }, {
          start: {
            line: 451,
            column: 28
          },
          end: {
            line: 451,
            column: 57
          }
        }],
        line: 451
      },
      "27": {
        loc: {
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "28": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "29": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "30": {
        loc: {
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 469,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 469,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "31": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "32": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "33": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "34": {
        loc: {
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/MLAnalyticsCoordinator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/MLAnalyticsCoordinator.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { PredictiveAnalytics } from './PredictiveAnalytics';\nimport { AnomalyDetector, anomalyDetector } from './AnomalyDetector';\nimport { CapacityPlanner, capacityPlanner } from './CapacityPlanner';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { PerformanceMonitor } from '../performance/PerformanceMonitor';\n\nexport interface MLAnalyticsConfig {\n  enablePredictiveAnalytics: boolean;\n  enableAnomalyDetection: boolean;\n  enableCapacityPlanning: boolean;\n  autoTraining: {\n    enabled: boolean;\n    interval: number; // hours\n    trainingData: {\n      timeframeDays: number;\n      minSamples: number;\n    };\n  };\n  monitoring: {\n    anomalyDetectionInterval: number; // milliseconds\n    capacityPlanningInterval: number; // milliseconds\n    performanceInterval: number; // milliseconds\n  };\n  alerting: {\n    enableSlackIntegration: boolean;\n    enableEmailAlerts: boolean;\n    severityThresholds: {\n      critical: number;\n      high: number;\n      medium: number;\n    };\n  };\n  models: {\n    retentionDays: number;\n    maxModelsPerType: number;\n    autoCleanup: boolean;\n  };\n}\n\nexport interface SystemHealthScore {\n  overall: number; // 0-100\n  components: {\n    performance: number;\n    capacity: number;\n    anomalies: number;\n    predictions: number;\n  };\n  trends: {\n    improving: boolean;\n    stable: boolean;\n    degrading: boolean;\n  };\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  recommendations: string[];\n}\n\nexport interface MLAnalyticsSummary {\n  timestamp: Date;\n  systemHealth: SystemHealthScore;\n  activePredictions: number;\n  activeAnomalies: number;\n  capacityAlerts: number;\n  modelsTraining: number;\n  uptime: number;\n  performanceMetrics: {\n    avgResponseTime: number;\n    errorRate: number;\n    throughput: number;\n    resourceUtilization: number;\n  };\n  insights: {\n    topRisks: string[];\n    optimizationOpportunities: string[];\n    trendingMetrics: string[];\n  };\n}\n\nexport class MLAnalyticsCoordinator extends EventEmitter {\n  private predictiveAnalytics: PredictiveAnalytics;\n  private anomalyDetector: AnomalyDetector;\n  private capacityPlanner: CapacityPlanner;\n  private analyticsEngine: AnalyticsEngine;\n  private performanceMonitor: PerformanceMonitor;\n  \n  private config: MLAnalyticsConfig;\n  private isInitialized: boolean = false;\n  private isRunning: boolean = false;\n  private autoTrainingInterval: NodeJS.Timeout | null = null;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private startTime: Date;\n  \n  constructor(config?: Partial<MLAnalyticsConfig>) {\n    super();\n    \n    this.startTime = new Date();\n    \n    this.config = {\n      enablePredictiveAnalytics: true,\n      enableAnomalyDetection: true,\n      enableCapacityPlanning: true,\n      autoTraining: {\n        enabled: true,\n        interval: 24, // 24 hours\n        trainingData: {\n          timeframeDays: 30,\n          minSamples: 100\n        }\n      },\n      monitoring: {\n        anomalyDetectionInterval: 30000, // 30 seconds\n        capacityPlanningInterval: 300000, // 5 minutes\n        performanceInterval: 5000 // 5 seconds\n      },\n      alerting: {\n        enableSlackIntegration: false,\n        enableEmailAlerts: false,\n        severityThresholds: {\n          critical: 0.9,\n          high: 0.7,\n          medium: 0.5\n        }\n      },\n      models: {\n        retentionDays: 30,\n        maxModelsPerType: 5,\n        autoCleanup: true\n      },\n      ...config\n    };\n\n    this.initializeServices();\n  }\n\n  /**\n   * Initialize all ML analytics services\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      console.log('ML Analytics Coordinator already initialized');\n      return;\n    }\n\n    try {\n      console.log('Initializing ML Analytics Coordinator...');\n\n      // Initialize performance monitoring first\n      this.performanceMonitor.startMonitoring(this.config.monitoring.performanceInterval);\n\n      // Initialize anomaly detection if enabled\n      if (this.config.enableAnomalyDetection) {\n        await this.initializeAnomalyDetection();\n      }\n\n      // Initialize capacity planning if enabled\n      if (this.config.enableCapacityPlanning) {\n        await this.initializeCapacityPlanning();\n      }\n\n      // Initialize predictive analytics if enabled\n      if (this.config.enablePredictiveAnalytics) {\n        await this.initializePredictiveAnalytics();\n      }\n\n      // Start auto-training if enabled\n      if (this.config.autoTraining.enabled) {\n        this.startAutoTraining();\n      }\n\n      // Start health monitoring\n      this.startHealthMonitoring();\n\n      this.isInitialized = true;\n      this.isRunning = true;\n\n      console.log('ML Analytics Coordinator initialized successfully');\n      this.emit('initialized');\n\n    } catch (error) {\n      console.error('Failed to initialize ML Analytics Coordinator:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start all ML analytics services\n   */\n  public async start(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (this.isRunning) {\n      console.log('ML Analytics Coordinator already running');\n      return;\n    }\n\n    try {\n      console.log('Starting ML Analytics Coordinator services...');\n\n      // Start anomaly detection\n      if (this.config.enableAnomalyDetection) {\n        this.anomalyDetector.startDetection(this.config.monitoring.anomalyDetectionInterval);\n      }\n\n      // Start capacity monitoring\n      if (this.config.enableCapacityPlanning) {\n        this.capacityPlanner.startMonitoring(this.config.monitoring.capacityPlanningInterval);\n      }\n\n      // Start performance monitoring\n      this.performanceMonitor.startMonitoring(this.config.monitoring.performanceInterval);\n\n      this.isRunning = true;\n      \n      console.log('ML Analytics Coordinator services started');\n      this.emit('started');\n\n    } catch (error) {\n      console.error('Failed to start ML Analytics Coordinator:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop all ML analytics services\n   */\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n\n    try {\n      console.log('Stopping ML Analytics Coordinator services...');\n\n      // Stop auto-training\n      if (this.autoTrainingInterval) {\n        clearInterval(this.autoTrainingInterval);\n        this.autoTrainingInterval = null;\n      }\n\n      // Stop health monitoring\n      if (this.healthCheckInterval) {\n        clearInterval(this.healthCheckInterval);\n        this.healthCheckInterval = null;\n      }\n\n      // Stop anomaly detection\n      this.anomalyDetector.stopDetection();\n\n      // Stop capacity monitoring\n      this.capacityPlanner.stopMonitoring();\n\n      // Stop performance monitoring\n      this.performanceMonitor.stopMonitoring();\n\n      this.isRunning = false;\n      \n      console.log('ML Analytics Coordinator services stopped');\n      this.emit('stopped');\n\n    } catch (error) {\n      console.error('Failed to stop ML Analytics Coordinator:', error);\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Get comprehensive system health score\n   */\n  public async getSystemHealthScore(): Promise<SystemHealthScore> {\n    try {\n      // Get performance metrics\n      const performanceStats = this.performanceMonitor.getPerformanceSummary();\n      const performanceScore = this.calculatePerformanceScore(performanceStats);\n\n      // Get capacity health\n      const capacityAlerts = this.capacityPlanner.getCapacityAlerts();\n      const capacityScore = this.calculateCapacityScore(capacityAlerts);\n\n      // Get anomaly status\n      const anomalyStats = this.anomalyDetector.getDetectionStats();\n      const anomalyScore = this.calculateAnomalyScore(anomalyStats);\n\n      // Get prediction confidence\n      const predictionScore = await this.calculatePredictionScore();\n\n      // Calculate overall score\n      const overall = Math.round(\n        (performanceScore * 0.3 + \n         capacityScore * 0.3 + \n         anomalyScore * 0.2 + \n         predictionScore * 0.2)\n      );\n\n      // Determine trends\n      const trends = await this.analyzeTrends();\n\n      // Determine risk level\n      const riskLevel = this.determineRiskLevel(overall, anomalyStats, capacityAlerts);\n\n      // Generate recommendations\n      const recommendations = await this.generateHealthRecommendations(\n        overall,\n        performanceStats,\n        capacityAlerts,\n        anomalyStats\n      );\n\n      return {\n        overall,\n        components: {\n          performance: performanceScore,\n          capacity: capacityScore,\n          anomalies: anomalyScore,\n          predictions: predictionScore\n        },\n        trends,\n        riskLevel,\n        recommendations\n      };\n\n    } catch (error) {\n      console.error('Error calculating system health score:', error);\n      return {\n        overall: 50,\n        components: { performance: 50, capacity: 50, anomalies: 50, predictions: 50 },\n        trends: { improving: false, stable: true, degrading: false },\n        riskLevel: 'medium',\n        recommendations: ['Unable to calculate system health - check ML analytics services']\n      };\n    }\n  }\n\n  /**\n   * Get ML analytics summary\n   */\n  public async getAnalyticsSummary(): Promise<MLAnalyticsSummary> {\n    const systemHealth = await this.getSystemHealthScore();\n    const anomalyStats = this.anomalyDetector.getDetectionStats();\n    const capacityAlerts = this.capacityPlanner.getCapacityAlerts();\n    const performanceStats = this.performanceMonitor.getPerformanceSummary();\n\n    // Get insights\n    const insights = await this.generateInsights();\n\n    return {\n      timestamp: new Date(),\n      systemHealth,\n      activePredictions: 0, // Would track active predictions\n      activeAnomalies: anomalyStats.activeAlerts,\n      capacityAlerts: capacityAlerts.length,\n      modelsTraining: 0, // Would track training status\n      uptime: Date.now() - this.startTime.getTime(),\n      performanceMetrics: {\n        avgResponseTime: 0, // Would get from performance monitor\n        errorRate: 0,\n        throughput: 0,\n        resourceUtilization: 0\n      },\n      insights\n    };\n  }\n\n  /**\n   * Update coordinator configuration\n   */\n  public updateConfig(newConfig: Partial<MLAnalyticsConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('ML Analytics Coordinator configuration updated');\n    this.emit('config_updated', this.config);\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): MLAnalyticsConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Get service status\n   */\n  public getStatus(): {\n    isInitialized: boolean;\n    isRunning: boolean;\n    uptime: number;\n    services: {\n      predictiveAnalytics: boolean;\n      anomalyDetection: boolean;\n      capacityPlanning: boolean;\n      performanceMonitoring: boolean;\n    };\n  } {\n    return {\n      isInitialized: this.isInitialized,\n      isRunning: this.isRunning,\n      uptime: Date.now() - this.startTime.getTime(),\n      services: {\n        predictiveAnalytics: this.config.enablePredictiveAnalytics,\n        anomalyDetection: this.config.enableAnomalyDetection && this.anomalyDetector['isRunning'],\n        capacityPlanning: this.config.enableCapacityPlanning && this.capacityPlanner['isMonitoring'],\n        performanceMonitoring: this.performanceMonitor['isMonitoring']\n      }\n    };\n  }\n\n  /**\n   * Perform comprehensive system analysis\n   */\n  public async performSystemAnalysis(): Promise<{\n    healthScore: SystemHealthScore;\n    predictions: any[];\n    anomalies: any[];\n    capacityForecasts: any[];\n    optimizationRecommendations: any[];\n    actionPlan: string[];\n  }> {\n    console.log('Performing comprehensive system analysis...');\n\n    try {\n      const [\n        healthScore,\n        predictions,\n        anomalies,\n        capacityForecasts,\n        optimizationRecommendations\n      ] = await Promise.all([\n        this.getSystemHealthScore(),\n        this.getPredictions(),\n        this.getAnomalies(),\n        this.getCapacityForecasts(),\n        this.getOptimizationRecommendations()\n      ]);\n\n      // Generate action plan\n      const actionPlan = this.generateActionPlan(\n        healthScore,\n        anomalies,\n        capacityForecasts,\n        optimizationRecommendations\n      );\n\n      return {\n        healthScore,\n        predictions,\n        anomalies,\n        capacityForecasts,\n        optimizationRecommendations,\n        actionPlan\n      };\n\n    } catch (error) {\n      console.error('Error performing system analysis:', error);\n      throw error;\n    }\n  }\n\n  // Private methods\n\n  private initializeServices(): void {\n    this.predictiveAnalytics = new PredictiveAnalytics();\n    this.anomalyDetector = anomalyDetector;\n    this.capacityPlanner = capacityPlanner;\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.performanceMonitor = new PerformanceMonitor();\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // Anomaly detection events\n    this.anomalyDetector.on('anomaly_detected', (anomaly) => {\n      this.handleAnomalyDetected(anomaly);\n    });\n\n    this.anomalyDetector.on('alert_resolved', (alert) => {\n      this.handleAlertResolved(alert);\n    });\n\n    // Performance monitoring events\n    this.performanceMonitor.on('alert', (alert) => {\n      this.handlePerformanceAlert(alert);\n    });\n\n    // Capacity planning events (would need to be implemented in CapacityPlanner)\n    // this.capacityPlanner.on('capacity_alert', (alert) => {\n    //   this.handleCapacityAlert(alert);\n    // });\n  }\n\n  private async initializeAnomalyDetection(): Promise<void> {\n    console.log('Initializing anomaly detection...');\n    \n    try {\n      // Train initial models if needed\n      const keyMetrics = ['cpu_usage', 'memory_usage', 'app_response_time', 'app_error_rate'];\n      await this.anomalyDetector.trainAutoencoderModel(keyMetrics, 7);\n      \n      // Update statistical thresholds\n      for (const metric of keyMetrics) {\n        try {\n          await this.anomalyDetector.updateStatisticalThresholds(metric, 7);\n        } catch (error) {\n          console.warn(`Failed to update thresholds for ${metric}:`, error.message);\n        }\n      }\n      \n      console.log('Anomaly detection initialized');\n    } catch (error) {\n      console.warn('Failed to fully initialize anomaly detection:', error.message);\n    }\n  }\n\n  private async initializeCapacityPlanning(): Promise<void> {\n    console.log('Initializing capacity planning...');\n    \n    try {\n      // Capacity planner initializes itself\n      console.log('Capacity planning initialized');\n    } catch (error) {\n      console.warn('Failed to initialize capacity planning:', error.message);\n    }\n  }\n\n  private async initializePredictiveAnalytics(): Promise<void> {\n    console.log('Initializing predictive analytics...');\n    \n    try {\n      // Train initial models if needed\n      const keyMetrics = ['cpu_usage', 'memory_usage', 'app_response_time'];\n      \n      for (const metric of keyMetrics) {\n        try {\n          await this.predictiveAnalytics.trainCapacityModel(metric, 30);\n        } catch (error) {\n          console.warn(`Failed to train capacity model for ${metric}:`, error.message);\n        }\n      }\n      \n      console.log('Predictive analytics initialized');\n    } catch (error) {\n      console.warn('Failed to fully initialize predictive analytics:', error.message);\n    }\n  }\n\n  private startAutoTraining(): void {\n    const intervalMs = this.config.autoTraining.interval * 60 * 60 * 1000; // Convert hours to ms\n    \n    this.autoTrainingInterval = setInterval(async () => {\n      try {\n        console.log('Starting auto-training cycle...');\n        await this.predictiveAnalytics.autoRetrainModels();\n        console.log('Auto-training cycle completed');\n      } catch (error) {\n        console.error('Error during auto-training:', error);\n      }\n    }, intervalMs);\n\n    console.log(`Auto-training scheduled every ${this.config.autoTraining.interval} hours`);\n  }\n\n  private startHealthMonitoring(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        const healthScore = await this.getSystemHealthScore();\n        \n        // Emit health update\n        this.emit('health_update', healthScore);\n        \n        // Check for critical issues\n        if (healthScore.riskLevel === 'critical') {\n          this.emit('critical_health_alert', healthScore);\n        }\n      } catch (error) {\n        console.error('Error during health check:', error);\n      }\n    }, 60000); // Every minute\n  }\n\n  private calculatePerformanceScore(stats: any): number {\n    if (stats.systemHealth === 'good') return 90;\n    if (stats.systemHealth === 'warning') return 60;\n    if (stats.systemHealth === 'critical') return 20;\n    return 50;\n  }\n\n  private calculateCapacityScore(alerts: any[]): number {\n    const criticalAlerts = alerts.filter(a => a.severity === 'critical').length;\n    const warningAlerts = alerts.filter(a => a.severity === 'warning').length;\n    \n    if (criticalAlerts > 0) return 20;\n    if (warningAlerts > 2) return 50;\n    if (warningAlerts > 0) return 70;\n    return 90;\n  }\n\n  private calculateAnomalyScore(stats: any): number {\n    const { activeAlerts, detectionAccuracy, falsePositiveRate } = stats;\n    \n    let score = 90;\n    \n    // Penalize active alerts\n    score -= Math.min(activeAlerts * 10, 50);\n    \n    // Adjust for accuracy\n    score = score * detectionAccuracy;\n    \n    // Penalize false positives\n    score -= falsePositiveRate * 20;\n    \n    return Math.max(Math.round(score), 0);\n  }\n\n  private async calculatePredictionScore(): Promise<number> {\n    // Simplified prediction score - would calculate based on model confidence\n    return 75;\n  }\n\n  private async analyzeTrends(): Promise<{ improving: boolean; stable: boolean; degrading: boolean }> {\n    // Simplified trend analysis - would analyze historical health scores\n    return { improving: false, stable: true, degrading: false };\n  }\n\n  private determineRiskLevel(\n    overall: number,\n    anomalyStats: any,\n    capacityAlerts: any[]\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    if (overall < 30 || capacityAlerts.some(a => a.severity === 'critical')) {\n      return 'critical';\n    }\n    if (overall < 50 || anomalyStats.activeAlerts > 3) {\n      return 'high';\n    }\n    if (overall < 70 || anomalyStats.activeAlerts > 1) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private async generateHealthRecommendations(\n    overall: number,\n    performanceStats: any,\n    capacityAlerts: any[],\n    anomalyStats: any\n  ): Promise<string[]> {\n    const recommendations: string[] = [];\n    \n    if (overall < 50) {\n      recommendations.push('System health is poor - immediate action required');\n    }\n    \n    if (capacityAlerts.length > 0) {\n      recommendations.push('Address capacity alerts to prevent resource exhaustion');\n    }\n    \n    if (anomalyStats.activeAlerts > 2) {\n      recommendations.push('Investigate multiple active anomalies');\n    }\n    \n    if (performanceStats.systemHealth === 'critical') {\n      recommendations.push('Performance is critical - check system resources');\n    }\n    \n    if (recommendations.length === 0) {\n      recommendations.push('System health is good - continue monitoring');\n    }\n    \n    return recommendations;\n  }\n\n  private async generateInsights(): Promise<{\n    topRisks: string[];\n    optimizationOpportunities: string[];\n    trendingMetrics: string[];\n  }> {\n    return {\n      topRisks: ['High memory utilization', 'Increasing response times'],\n      optimizationOpportunities: ['CPU optimization possible', 'Cache hit rate improvements'],\n      trendingMetrics: ['cpu_usage', 'memory_usage', 'response_time']\n    };\n  }\n\n  private generateActionPlan(\n    healthScore: any,\n    anomalies: any[],\n    capacityForecasts: any[],\n    optimizations: any[]\n  ): string[] {\n    const actions: string[] = [];\n    \n    if (healthScore.riskLevel === 'critical') {\n      actions.push('URGENT: Address critical system health issues');\n    }\n    \n    if (anomalies.length > 0) {\n      actions.push(`Investigate ${anomalies.length} active anomalies`);\n    }\n    \n    if (optimizations.length > 0) {\n      actions.push('Implement identified optimization opportunities');\n    }\n    \n    actions.push('Continue monitoring system health trends');\n    \n    return actions;\n  }\n\n  private handleAnomalyDetected(anomaly: any): void {\n    console.log(`Anomaly detected: ${anomaly.description}`);\n    this.emit('anomaly', anomaly);\n  }\n\n  private handleAlertResolved(alert: any): void {\n    console.log(`Alert resolved: ${alert.alert.id}`);\n    this.emit('alert_resolved', alert);\n  }\n\n  private handlePerformanceAlert(alert: any): void {\n    console.log(`Performance alert: ${alert.message}`);\n    this.emit('performance_alert', alert);\n  }\n\n  // Simplified data getters (would be more comprehensive in real implementation)\n  private async getPredictions(): Promise<any[]> { return []; }\n  private async getAnomalies(): Promise<any[]> { \n    return this.anomalyDetector.getActiveAlerts(); \n  }\n  private async getCapacityForecasts(): Promise<any[]> { \n    const forecasts = await this.capacityPlanner.generateCapacityForecast();\n    return Array.from(forecasts.values()).flat();\n  }\n  private async getOptimizationRecommendations(): Promise<any[]> { \n    return Object.values(await this.capacityPlanner.generateOptimizationRecommendations()).flat();\n  }\n}\n\n// Export singleton instance\nexport const mlAnalyticsCoordinator = new MLAnalyticsCoordinator();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "39d3001a91948dfd797a6dc02e6005a0a83733c1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vn08jjejh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vn08jjejh();
cov_1vn08jjejh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1vn08jjejh().s[1]++;
exports.mlAnalyticsCoordinator = exports.MLAnalyticsCoordinator = void 0;
const events_1 =
/* istanbul ignore next */
(cov_1vn08jjejh().s[2]++, require("events"));
const PredictiveAnalytics_1 =
/* istanbul ignore next */
(cov_1vn08jjejh().s[3]++, require("./PredictiveAnalytics"));
const AnomalyDetector_1 =
/* istanbul ignore next */
(cov_1vn08jjejh().s[4]++, require("./AnomalyDetector"));
const CapacityPlanner_1 =
/* istanbul ignore next */
(cov_1vn08jjejh().s[5]++, require("./CapacityPlanner"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1vn08jjejh().s[6]++, require("./AnalyticsEngine"));
const PerformanceMonitor_1 =
/* istanbul ignore next */
(cov_1vn08jjejh().s[7]++, require("../performance/PerformanceMonitor"));
class MLAnalyticsCoordinator extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[0]++;
    cov_1vn08jjejh().s[8]++;
    super();
    /* istanbul ignore next */
    cov_1vn08jjejh().s[9]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[10]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[11]++;
    this.autoTrainingInterval = null;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[12]++;
    this.healthCheckInterval = null;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[13]++;
    this.startTime = new Date();
    /* istanbul ignore next */
    cov_1vn08jjejh().s[14]++;
    this.config = {
      enablePredictiveAnalytics: true,
      enableAnomalyDetection: true,
      enableCapacityPlanning: true,
      autoTraining: {
        enabled: true,
        interval: 24,
        // 24 hours
        trainingData: {
          timeframeDays: 30,
          minSamples: 100
        }
      },
      monitoring: {
        anomalyDetectionInterval: 30000,
        // 30 seconds
        capacityPlanningInterval: 300000,
        // 5 minutes
        performanceInterval: 5000 // 5 seconds
      },
      alerting: {
        enableSlackIntegration: false,
        enableEmailAlerts: false,
        severityThresholds: {
          critical: 0.9,
          high: 0.7,
          medium: 0.5
        }
      },
      models: {
        retentionDays: 30,
        maxModelsPerType: 5,
        autoCleanup: true
      },
      ...config
    };
    /* istanbul ignore next */
    cov_1vn08jjejh().s[15]++;
    this.initializeServices();
  }
  /**
   * Initialize all ML analytics services
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[1]++;
    cov_1vn08jjejh().s[16]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[0][0]++;
      cov_1vn08jjejh().s[17]++;
      console.log('ML Analytics Coordinator already initialized');
      /* istanbul ignore next */
      cov_1vn08jjejh().s[18]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[0][1]++;
    }
    cov_1vn08jjejh().s[19]++;
    try {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[20]++;
      console.log('Initializing ML Analytics Coordinator...');
      // Initialize performance monitoring first
      /* istanbul ignore next */
      cov_1vn08jjejh().s[21]++;
      this.performanceMonitor.startMonitoring(this.config.monitoring.performanceInterval);
      // Initialize anomaly detection if enabled
      /* istanbul ignore next */
      cov_1vn08jjejh().s[22]++;
      if (this.config.enableAnomalyDetection) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[1][0]++;
        cov_1vn08jjejh().s[23]++;
        await this.initializeAnomalyDetection();
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[1][1]++;
      }
      // Initialize capacity planning if enabled
      cov_1vn08jjejh().s[24]++;
      if (this.config.enableCapacityPlanning) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[2][0]++;
        cov_1vn08jjejh().s[25]++;
        await this.initializeCapacityPlanning();
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[2][1]++;
      }
      // Initialize predictive analytics if enabled
      cov_1vn08jjejh().s[26]++;
      if (this.config.enablePredictiveAnalytics) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[3][0]++;
        cov_1vn08jjejh().s[27]++;
        await this.initializePredictiveAnalytics();
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[3][1]++;
      }
      // Start auto-training if enabled
      cov_1vn08jjejh().s[28]++;
      if (this.config.autoTraining.enabled) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[4][0]++;
        cov_1vn08jjejh().s[29]++;
        this.startAutoTraining();
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[4][1]++;
      }
      // Start health monitoring
      cov_1vn08jjejh().s[30]++;
      this.startHealthMonitoring();
      /* istanbul ignore next */
      cov_1vn08jjejh().s[31]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_1vn08jjejh().s[32]++;
      this.isRunning = true;
      /* istanbul ignore next */
      cov_1vn08jjejh().s[33]++;
      console.log('ML Analytics Coordinator initialized successfully');
      /* istanbul ignore next */
      cov_1vn08jjejh().s[34]++;
      this.emit('initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[35]++;
      console.error('Failed to initialize ML Analytics Coordinator:', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[36]++;
      this.emit('error', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[37]++;
      throw error;
    }
  }
  /**
   * Start all ML analytics services
   */
  async start() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[2]++;
    cov_1vn08jjejh().s[38]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[5][0]++;
      cov_1vn08jjejh().s[39]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[5][1]++;
    }
    cov_1vn08jjejh().s[40]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[6][0]++;
      cov_1vn08jjejh().s[41]++;
      console.log('ML Analytics Coordinator already running');
      /* istanbul ignore next */
      cov_1vn08jjejh().s[42]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[6][1]++;
    }
    cov_1vn08jjejh().s[43]++;
    try {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[44]++;
      console.log('Starting ML Analytics Coordinator services...');
      // Start anomaly detection
      /* istanbul ignore next */
      cov_1vn08jjejh().s[45]++;
      if (this.config.enableAnomalyDetection) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[7][0]++;
        cov_1vn08jjejh().s[46]++;
        this.anomalyDetector.startDetection(this.config.monitoring.anomalyDetectionInterval);
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[7][1]++;
      }
      // Start capacity monitoring
      cov_1vn08jjejh().s[47]++;
      if (this.config.enableCapacityPlanning) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[8][0]++;
        cov_1vn08jjejh().s[48]++;
        this.capacityPlanner.startMonitoring(this.config.monitoring.capacityPlanningInterval);
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[8][1]++;
      }
      // Start performance monitoring
      cov_1vn08jjejh().s[49]++;
      this.performanceMonitor.startMonitoring(this.config.monitoring.performanceInterval);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[50]++;
      this.isRunning = true;
      /* istanbul ignore next */
      cov_1vn08jjejh().s[51]++;
      console.log('ML Analytics Coordinator services started');
      /* istanbul ignore next */
      cov_1vn08jjejh().s[52]++;
      this.emit('started');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[53]++;
      console.error('Failed to start ML Analytics Coordinator:', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[54]++;
      this.emit('error', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[55]++;
      throw error;
    }
  }
  /**
   * Stop all ML analytics services
   */
  async stop() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[3]++;
    cov_1vn08jjejh().s[56]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[9][0]++;
      cov_1vn08jjejh().s[57]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[9][1]++;
    }
    cov_1vn08jjejh().s[58]++;
    try {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[59]++;
      console.log('Stopping ML Analytics Coordinator services...');
      // Stop auto-training
      /* istanbul ignore next */
      cov_1vn08jjejh().s[60]++;
      if (this.autoTrainingInterval) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[10][0]++;
        cov_1vn08jjejh().s[61]++;
        clearInterval(this.autoTrainingInterval);
        /* istanbul ignore next */
        cov_1vn08jjejh().s[62]++;
        this.autoTrainingInterval = null;
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[10][1]++;
      }
      // Stop health monitoring
      cov_1vn08jjejh().s[63]++;
      if (this.healthCheckInterval) {
        /* istanbul ignore next */
        cov_1vn08jjejh().b[11][0]++;
        cov_1vn08jjejh().s[64]++;
        clearInterval(this.healthCheckInterval);
        /* istanbul ignore next */
        cov_1vn08jjejh().s[65]++;
        this.healthCheckInterval = null;
      } else
      /* istanbul ignore next */
      {
        cov_1vn08jjejh().b[11][1]++;
      }
      // Stop anomaly detection
      cov_1vn08jjejh().s[66]++;
      this.anomalyDetector.stopDetection();
      // Stop capacity monitoring
      /* istanbul ignore next */
      cov_1vn08jjejh().s[67]++;
      this.capacityPlanner.stopMonitoring();
      // Stop performance monitoring
      /* istanbul ignore next */
      cov_1vn08jjejh().s[68]++;
      this.performanceMonitor.stopMonitoring();
      /* istanbul ignore next */
      cov_1vn08jjejh().s[69]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_1vn08jjejh().s[70]++;
      console.log('ML Analytics Coordinator services stopped');
      /* istanbul ignore next */
      cov_1vn08jjejh().s[71]++;
      this.emit('stopped');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[72]++;
      console.error('Failed to stop ML Analytics Coordinator:', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[73]++;
      this.emit('error', error);
    }
  }
  /**
   * Get comprehensive system health score
   */
  async getSystemHealthScore() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[4]++;
    cov_1vn08jjejh().s[74]++;
    try {
      // Get performance metrics
      const performanceStats =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[75]++, this.performanceMonitor.getPerformanceSummary());
      const performanceScore =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[76]++, this.calculatePerformanceScore(performanceStats));
      // Get capacity health
      const capacityAlerts =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[77]++, this.capacityPlanner.getCapacityAlerts());
      const capacityScore =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[78]++, this.calculateCapacityScore(capacityAlerts));
      // Get anomaly status
      const anomalyStats =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[79]++, this.anomalyDetector.getDetectionStats());
      const anomalyScore =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[80]++, this.calculateAnomalyScore(anomalyStats));
      // Get prediction confidence
      const predictionScore =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[81]++, await this.calculatePredictionScore());
      // Calculate overall score
      const overall =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[82]++, Math.round(performanceScore * 0.3 + capacityScore * 0.3 + anomalyScore * 0.2 + predictionScore * 0.2));
      // Determine trends
      const trends =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[83]++, await this.analyzeTrends());
      // Determine risk level
      const riskLevel =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[84]++, this.determineRiskLevel(overall, anomalyStats, capacityAlerts));
      // Generate recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[85]++, await this.generateHealthRecommendations(overall, performanceStats, capacityAlerts, anomalyStats));
      /* istanbul ignore next */
      cov_1vn08jjejh().s[86]++;
      return {
        overall,
        components: {
          performance: performanceScore,
          capacity: capacityScore,
          anomalies: anomalyScore,
          predictions: predictionScore
        },
        trends,
        riskLevel,
        recommendations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[87]++;
      console.error('Error calculating system health score:', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[88]++;
      return {
        overall: 50,
        components: {
          performance: 50,
          capacity: 50,
          anomalies: 50,
          predictions: 50
        },
        trends: {
          improving: false,
          stable: true,
          degrading: false
        },
        riskLevel: 'medium',
        recommendations: ['Unable to calculate system health - check ML analytics services']
      };
    }
  }
  /**
   * Get ML analytics summary
   */
  async getAnalyticsSummary() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[5]++;
    const systemHealth =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[89]++, await this.getSystemHealthScore());
    const anomalyStats =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[90]++, this.anomalyDetector.getDetectionStats());
    const capacityAlerts =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[91]++, this.capacityPlanner.getCapacityAlerts());
    const performanceStats =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[92]++, this.performanceMonitor.getPerformanceSummary());
    // Get insights
    const insights =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[93]++, await this.generateInsights());
    /* istanbul ignore next */
    cov_1vn08jjejh().s[94]++;
    return {
      timestamp: new Date(),
      systemHealth,
      activePredictions: 0,
      // Would track active predictions
      activeAnomalies: anomalyStats.activeAlerts,
      capacityAlerts: capacityAlerts.length,
      modelsTraining: 0,
      // Would track training status
      uptime: Date.now() - this.startTime.getTime(),
      performanceMetrics: {
        avgResponseTime: 0,
        // Would get from performance monitor
        errorRate: 0,
        throughput: 0,
        resourceUtilization: 0
      },
      insights
    };
  }
  /**
   * Update coordinator configuration
   */
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[6]++;
    cov_1vn08jjejh().s[95]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_1vn08jjejh().s[96]++;
    console.log('ML Analytics Coordinator configuration updated');
    /* istanbul ignore next */
    cov_1vn08jjejh().s[97]++;
    this.emit('config_updated', this.config);
  }
  /**
   * Get current configuration
   */
  getConfig() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[7]++;
    cov_1vn08jjejh().s[98]++;
    return {
      ...this.config
    };
  }
  /**
   * Get service status
   */
  getStatus() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[8]++;
    cov_1vn08jjejh().s[99]++;
    return {
      isInitialized: this.isInitialized,
      isRunning: this.isRunning,
      uptime: Date.now() - this.startTime.getTime(),
      services: {
        predictiveAnalytics: this.config.enablePredictiveAnalytics,
        anomalyDetection:
        /* istanbul ignore next */
        (cov_1vn08jjejh().b[12][0]++, this.config.enableAnomalyDetection) &&
        /* istanbul ignore next */
        (cov_1vn08jjejh().b[12][1]++, this.anomalyDetector['isRunning']),
        capacityPlanning:
        /* istanbul ignore next */
        (cov_1vn08jjejh().b[13][0]++, this.config.enableCapacityPlanning) &&
        /* istanbul ignore next */
        (cov_1vn08jjejh().b[13][1]++, this.capacityPlanner['isMonitoring']),
        performanceMonitoring: this.performanceMonitor['isMonitoring']
      }
    };
  }
  /**
   * Perform comprehensive system analysis
   */
  async performSystemAnalysis() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[9]++;
    cov_1vn08jjejh().s[100]++;
    console.log('Performing comprehensive system analysis...');
    /* istanbul ignore next */
    cov_1vn08jjejh().s[101]++;
    try {
      const [healthScore, predictions, anomalies, capacityForecasts, optimizationRecommendations] =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[102]++, await Promise.all([this.getSystemHealthScore(), this.getPredictions(), this.getAnomalies(), this.getCapacityForecasts(), this.getOptimizationRecommendations()]));
      // Generate action plan
      const actionPlan =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[103]++, this.generateActionPlan(healthScore, anomalies, capacityForecasts, optimizationRecommendations));
      /* istanbul ignore next */
      cov_1vn08jjejh().s[104]++;
      return {
        healthScore,
        predictions,
        anomalies,
        capacityForecasts,
        optimizationRecommendations,
        actionPlan
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[105]++;
      console.error('Error performing system analysis:', error);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[106]++;
      throw error;
    }
  }
  // Private methods
  initializeServices() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[10]++;
    cov_1vn08jjejh().s[107]++;
    this.predictiveAnalytics = new PredictiveAnalytics_1.PredictiveAnalytics();
    /* istanbul ignore next */
    cov_1vn08jjejh().s[108]++;
    this.anomalyDetector = AnomalyDetector_1.anomalyDetector;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[109]++;
    this.capacityPlanner = CapacityPlanner_1.capacityPlanner;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[110]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_1vn08jjejh().s[111]++;
    this.performanceMonitor = new PerformanceMonitor_1.PerformanceMonitor();
    // Set up event listeners
    /* istanbul ignore next */
    cov_1vn08jjejh().s[112]++;
    this.setupEventListeners();
  }
  setupEventListeners() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[11]++;
    cov_1vn08jjejh().s[113]++;
    // Anomaly detection events
    this.anomalyDetector.on('anomaly_detected', anomaly => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[12]++;
      cov_1vn08jjejh().s[114]++;
      this.handleAnomalyDetected(anomaly);
    });
    /* istanbul ignore next */
    cov_1vn08jjejh().s[115]++;
    this.anomalyDetector.on('alert_resolved', alert => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[13]++;
      cov_1vn08jjejh().s[116]++;
      this.handleAlertResolved(alert);
    });
    // Performance monitoring events
    /* istanbul ignore next */
    cov_1vn08jjejh().s[117]++;
    this.performanceMonitor.on('alert', alert => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[14]++;
      cov_1vn08jjejh().s[118]++;
      this.handlePerformanceAlert(alert);
    });
    // Capacity planning events (would need to be implemented in CapacityPlanner)
    // this.capacityPlanner.on('capacity_alert', (alert) => {
    //   this.handleCapacityAlert(alert);
    // });
  }
  async initializeAnomalyDetection() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[15]++;
    cov_1vn08jjejh().s[119]++;
    console.log('Initializing anomaly detection...');
    /* istanbul ignore next */
    cov_1vn08jjejh().s[120]++;
    try {
      // Train initial models if needed
      const keyMetrics =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[121]++, ['cpu_usage', 'memory_usage', 'app_response_time', 'app_error_rate']);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[122]++;
      await this.anomalyDetector.trainAutoencoderModel(keyMetrics, 7);
      // Update statistical thresholds
      /* istanbul ignore next */
      cov_1vn08jjejh().s[123]++;
      for (const metric of keyMetrics) {
        /* istanbul ignore next */
        cov_1vn08jjejh().s[124]++;
        try {
          /* istanbul ignore next */
          cov_1vn08jjejh().s[125]++;
          await this.anomalyDetector.updateStatisticalThresholds(metric, 7);
        } catch (error) {
          /* istanbul ignore next */
          cov_1vn08jjejh().s[126]++;
          console.warn(`Failed to update thresholds for ${metric}:`, error.message);
        }
      }
      /* istanbul ignore next */
      cov_1vn08jjejh().s[127]++;
      console.log('Anomaly detection initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[128]++;
      console.warn('Failed to fully initialize anomaly detection:', error.message);
    }
  }
  async initializeCapacityPlanning() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[16]++;
    cov_1vn08jjejh().s[129]++;
    console.log('Initializing capacity planning...');
    /* istanbul ignore next */
    cov_1vn08jjejh().s[130]++;
    try {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[131]++;
      // Capacity planner initializes itself
      console.log('Capacity planning initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[132]++;
      console.warn('Failed to initialize capacity planning:', error.message);
    }
  }
  async initializePredictiveAnalytics() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[17]++;
    cov_1vn08jjejh().s[133]++;
    console.log('Initializing predictive analytics...');
    /* istanbul ignore next */
    cov_1vn08jjejh().s[134]++;
    try {
      // Train initial models if needed
      const keyMetrics =
      /* istanbul ignore next */
      (cov_1vn08jjejh().s[135]++, ['cpu_usage', 'memory_usage', 'app_response_time']);
      /* istanbul ignore next */
      cov_1vn08jjejh().s[136]++;
      for (const metric of keyMetrics) {
        /* istanbul ignore next */
        cov_1vn08jjejh().s[137]++;
        try {
          /* istanbul ignore next */
          cov_1vn08jjejh().s[138]++;
          await this.predictiveAnalytics.trainCapacityModel(metric, 30);
        } catch (error) {
          /* istanbul ignore next */
          cov_1vn08jjejh().s[139]++;
          console.warn(`Failed to train capacity model for ${metric}:`, error.message);
        }
      }
      /* istanbul ignore next */
      cov_1vn08jjejh().s[140]++;
      console.log('Predictive analytics initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1vn08jjejh().s[141]++;
      console.warn('Failed to fully initialize predictive analytics:', error.message);
    }
  }
  startAutoTraining() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[18]++;
    const intervalMs =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[142]++, this.config.autoTraining.interval * 60 * 60 * 1000); // Convert hours to ms
    /* istanbul ignore next */
    cov_1vn08jjejh().s[143]++;
    this.autoTrainingInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[19]++;
      cov_1vn08jjejh().s[144]++;
      try {
        /* istanbul ignore next */
        cov_1vn08jjejh().s[145]++;
        console.log('Starting auto-training cycle...');
        /* istanbul ignore next */
        cov_1vn08jjejh().s[146]++;
        await this.predictiveAnalytics.autoRetrainModels();
        /* istanbul ignore next */
        cov_1vn08jjejh().s[147]++;
        console.log('Auto-training cycle completed');
      } catch (error) {
        /* istanbul ignore next */
        cov_1vn08jjejh().s[148]++;
        console.error('Error during auto-training:', error);
      }
    }, intervalMs);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[149]++;
    console.log(`Auto-training scheduled every ${this.config.autoTraining.interval} hours`);
  }
  startHealthMonitoring() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[20]++;
    cov_1vn08jjejh().s[150]++;
    this.healthCheckInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[21]++;
      cov_1vn08jjejh().s[151]++;
      try {
        const healthScore =
        /* istanbul ignore next */
        (cov_1vn08jjejh().s[152]++, await this.getSystemHealthScore());
        // Emit health update
        /* istanbul ignore next */
        cov_1vn08jjejh().s[153]++;
        this.emit('health_update', healthScore);
        // Check for critical issues
        /* istanbul ignore next */
        cov_1vn08jjejh().s[154]++;
        if (healthScore.riskLevel === 'critical') {
          /* istanbul ignore next */
          cov_1vn08jjejh().b[14][0]++;
          cov_1vn08jjejh().s[155]++;
          this.emit('critical_health_alert', healthScore);
        } else
        /* istanbul ignore next */
        {
          cov_1vn08jjejh().b[14][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1vn08jjejh().s[156]++;
        console.error('Error during health check:', error);
      }
    }, 60000); // Every minute
  }
  calculatePerformanceScore(stats) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[22]++;
    cov_1vn08jjejh().s[157]++;
    if (stats.systemHealth === 'good') {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[15][0]++;
      cov_1vn08jjejh().s[158]++;
      return 90;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[15][1]++;
    }
    cov_1vn08jjejh().s[159]++;
    if (stats.systemHealth === 'warning') {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[16][0]++;
      cov_1vn08jjejh().s[160]++;
      return 60;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[16][1]++;
    }
    cov_1vn08jjejh().s[161]++;
    if (stats.systemHealth === 'critical') {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[17][0]++;
      cov_1vn08jjejh().s[162]++;
      return 20;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[17][1]++;
    }
    cov_1vn08jjejh().s[163]++;
    return 50;
  }
  calculateCapacityScore(alerts) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[23]++;
    const criticalAlerts =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[164]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[24]++;
      cov_1vn08jjejh().s[165]++;
      return a.severity === 'critical';
    }).length);
    const warningAlerts =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[166]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[25]++;
      cov_1vn08jjejh().s[167]++;
      return a.severity === 'warning';
    }).length);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[168]++;
    if (criticalAlerts > 0) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[18][0]++;
      cov_1vn08jjejh().s[169]++;
      return 20;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[18][1]++;
    }
    cov_1vn08jjejh().s[170]++;
    if (warningAlerts > 2) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[19][0]++;
      cov_1vn08jjejh().s[171]++;
      return 50;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[19][1]++;
    }
    cov_1vn08jjejh().s[172]++;
    if (warningAlerts > 0) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[20][0]++;
      cov_1vn08jjejh().s[173]++;
      return 70;
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[20][1]++;
    }
    cov_1vn08jjejh().s[174]++;
    return 90;
  }
  calculateAnomalyScore(stats) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[26]++;
    const {
      activeAlerts,
      detectionAccuracy,
      falsePositiveRate
    } =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[175]++, stats);
    let score =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[176]++, 90);
    // Penalize active alerts
    /* istanbul ignore next */
    cov_1vn08jjejh().s[177]++;
    score -= Math.min(activeAlerts * 10, 50);
    // Adjust for accuracy
    /* istanbul ignore next */
    cov_1vn08jjejh().s[178]++;
    score = score * detectionAccuracy;
    // Penalize false positives
    /* istanbul ignore next */
    cov_1vn08jjejh().s[179]++;
    score -= falsePositiveRate * 20;
    /* istanbul ignore next */
    cov_1vn08jjejh().s[180]++;
    return Math.max(Math.round(score), 0);
  }
  async calculatePredictionScore() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[27]++;
    cov_1vn08jjejh().s[181]++;
    // Simplified prediction score - would calculate based on model confidence
    return 75;
  }
  async analyzeTrends() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[28]++;
    cov_1vn08jjejh().s[182]++;
    // Simplified trend analysis - would analyze historical health scores
    return {
      improving: false,
      stable: true,
      degrading: false
    };
  }
  determineRiskLevel(overall, anomalyStats, capacityAlerts) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[29]++;
    cov_1vn08jjejh().s[183]++;
    if (
    /* istanbul ignore next */
    (cov_1vn08jjejh().b[22][0]++, overall < 30) ||
    /* istanbul ignore next */
    (cov_1vn08jjejh().b[22][1]++, capacityAlerts.some(a => {
      /* istanbul ignore next */
      cov_1vn08jjejh().f[30]++;
      cov_1vn08jjejh().s[184]++;
      return a.severity === 'critical';
    }))) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[21][0]++;
      cov_1vn08jjejh().s[185]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[21][1]++;
    }
    cov_1vn08jjejh().s[186]++;
    if (
    /* istanbul ignore next */
    (cov_1vn08jjejh().b[24][0]++, overall < 50) ||
    /* istanbul ignore next */
    (cov_1vn08jjejh().b[24][1]++, anomalyStats.activeAlerts > 3)) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[23][0]++;
      cov_1vn08jjejh().s[187]++;
      return 'high';
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[23][1]++;
    }
    cov_1vn08jjejh().s[188]++;
    if (
    /* istanbul ignore next */
    (cov_1vn08jjejh().b[26][0]++, overall < 70) ||
    /* istanbul ignore next */
    (cov_1vn08jjejh().b[26][1]++, anomalyStats.activeAlerts > 1)) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[25][0]++;
      cov_1vn08jjejh().s[189]++;
      return 'medium';
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[25][1]++;
    }
    cov_1vn08jjejh().s[190]++;
    return 'low';
  }
  async generateHealthRecommendations(overall, performanceStats, capacityAlerts, anomalyStats) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[31]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[191]++, []);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[192]++;
    if (overall < 50) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[27][0]++;
      cov_1vn08jjejh().s[193]++;
      recommendations.push('System health is poor - immediate action required');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[27][1]++;
    }
    cov_1vn08jjejh().s[194]++;
    if (capacityAlerts.length > 0) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[28][0]++;
      cov_1vn08jjejh().s[195]++;
      recommendations.push('Address capacity alerts to prevent resource exhaustion');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[28][1]++;
    }
    cov_1vn08jjejh().s[196]++;
    if (anomalyStats.activeAlerts > 2) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[29][0]++;
      cov_1vn08jjejh().s[197]++;
      recommendations.push('Investigate multiple active anomalies');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[29][1]++;
    }
    cov_1vn08jjejh().s[198]++;
    if (performanceStats.systemHealth === 'critical') {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[30][0]++;
      cov_1vn08jjejh().s[199]++;
      recommendations.push('Performance is critical - check system resources');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[30][1]++;
    }
    cov_1vn08jjejh().s[200]++;
    if (recommendations.length === 0) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[31][0]++;
      cov_1vn08jjejh().s[201]++;
      recommendations.push('System health is good - continue monitoring');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[31][1]++;
    }
    cov_1vn08jjejh().s[202]++;
    return recommendations;
  }
  async generateInsights() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[32]++;
    cov_1vn08jjejh().s[203]++;
    return {
      topRisks: ['High memory utilization', 'Increasing response times'],
      optimizationOpportunities: ['CPU optimization possible', 'Cache hit rate improvements'],
      trendingMetrics: ['cpu_usage', 'memory_usage', 'response_time']
    };
  }
  generateActionPlan(healthScore, anomalies, capacityForecasts, optimizations) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[33]++;
    const actions =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[204]++, []);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[205]++;
    if (healthScore.riskLevel === 'critical') {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[32][0]++;
      cov_1vn08jjejh().s[206]++;
      actions.push('URGENT: Address critical system health issues');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[32][1]++;
    }
    cov_1vn08jjejh().s[207]++;
    if (anomalies.length > 0) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[33][0]++;
      cov_1vn08jjejh().s[208]++;
      actions.push(`Investigate ${anomalies.length} active anomalies`);
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[33][1]++;
    }
    cov_1vn08jjejh().s[209]++;
    if (optimizations.length > 0) {
      /* istanbul ignore next */
      cov_1vn08jjejh().b[34][0]++;
      cov_1vn08jjejh().s[210]++;
      actions.push('Implement identified optimization opportunities');
    } else
    /* istanbul ignore next */
    {
      cov_1vn08jjejh().b[34][1]++;
    }
    cov_1vn08jjejh().s[211]++;
    actions.push('Continue monitoring system health trends');
    /* istanbul ignore next */
    cov_1vn08jjejh().s[212]++;
    return actions;
  }
  handleAnomalyDetected(anomaly) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[34]++;
    cov_1vn08jjejh().s[213]++;
    console.log(`Anomaly detected: ${anomaly.description}`);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[214]++;
    this.emit('anomaly', anomaly);
  }
  handleAlertResolved(alert) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[35]++;
    cov_1vn08jjejh().s[215]++;
    console.log(`Alert resolved: ${alert.alert.id}`);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[216]++;
    this.emit('alert_resolved', alert);
  }
  handlePerformanceAlert(alert) {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[36]++;
    cov_1vn08jjejh().s[217]++;
    console.log(`Performance alert: ${alert.message}`);
    /* istanbul ignore next */
    cov_1vn08jjejh().s[218]++;
    this.emit('performance_alert', alert);
  }
  // Simplified data getters (would be more comprehensive in real implementation)
  async getPredictions() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[37]++;
    cov_1vn08jjejh().s[219]++;
    return [];
  }
  async getAnomalies() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[38]++;
    cov_1vn08jjejh().s[220]++;
    return this.anomalyDetector.getActiveAlerts();
  }
  async getCapacityForecasts() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[39]++;
    const forecasts =
    /* istanbul ignore next */
    (cov_1vn08jjejh().s[221]++, await this.capacityPlanner.generateCapacityForecast());
    /* istanbul ignore next */
    cov_1vn08jjejh().s[222]++;
    return Array.from(forecasts.values()).flat();
  }
  async getOptimizationRecommendations() {
    /* istanbul ignore next */
    cov_1vn08jjejh().f[40]++;
    cov_1vn08jjejh().s[223]++;
    return Object.values(await this.capacityPlanner.generateOptimizationRecommendations()).flat();
  }
}
/* istanbul ignore next */
cov_1vn08jjejh().s[224]++;
exports.MLAnalyticsCoordinator = MLAnalyticsCoordinator;
// Export singleton instance
/* istanbul ignore next */
cov_1vn08jjejh().s[225]++;
exports.mlAnalyticsCoordinator = new MLAnalyticsCoordinator();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,