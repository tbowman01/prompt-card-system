a2a849adb5758554cd5dcc193e950f08
"use strict";

/* istanbul ignore next */
function cov_2n02p6kykf() {
  var path = "/workspaces/prompt-card-system/backend/src/services/testing/Semaphore.ts";
  var hash = "f5c9073fb557ebaf9922f8a0694549d21a7d77ec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/testing/Semaphore.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 55
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 31
        }
      },
      "3": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 30
        }
      },
      "4": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "6": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "7": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "8": {
        start: {
          line: 20,
          column: 32
        },
        end: {
          line: 20,
          column: 60
        }
      },
      "9": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 33
        }
      },
      "10": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "11": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 44
        }
      },
      "12": {
        start: {
          line: 27,
          column: 40
        },
        end: {
          line: 27,
          column: 68
        }
      },
      "13": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 41
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 32
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 48
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 20
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "19": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "20": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 49
        }
      },
      "21": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "22": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "24": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "25": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 28
        }
      },
      "26": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 32
        }
      },
      "27": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "28": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "29": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 33
        }
      },
      "30": {
        start: {
          line: 78,
          column: 0
        },
        end: {
          line: 78,
          column: 30
        }
      },
      "31": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 24
        }
      },
      "32": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 47
        }
      },
      "33": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 43
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 39
        }
      },
      "35": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 91,
          column: 57
        }
      },
      "36": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 61
        }
      },
      "38": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 31
        }
      },
      "39": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 104,
          column: 31
        }
      },
      "40": {
        start: {
          line: 99,
          column: 33
        },
        end: {
          line: 99,
          column: 61
        }
      },
      "41": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "42": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 87
        }
      },
      "43": {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 107,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 27
          },
          end: {
            line: 17,
            column: 28
          }
        },
        loc: {
          start: {
            line: 17,
            column: 48
          },
          end: {
            line: 33,
            column: 9
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 29
          },
          end: {
            line: 25,
            column: 30
          }
        },
        loc: {
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 29,
            column: 21
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 17
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 38
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 22
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 22
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 54
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 24
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 63
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 65,
            column: 15
          },
          end: {
            line: 65,
            column: 16
          }
        },
        loc: {
          start: {
            line: 65,
            column: 21
          },
          end: {
            line: 75,
            column: 9
          }
        },
        line: 65
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 65
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 83
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 89
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 30
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 97
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        },
        loc: {
          start: {
            line: 98,
            column: 32
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 98
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 32,
            column: 13
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 83,
            column: 43
          },
          end: {
            line: 83,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 83,
            column: 59
          },
          end: {
            line: 83,
            column: 63
          }
        }],
        line: 83
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 29
          }
        }, {
          start: {
            line: 100,
            column: 33
          },
          end: {
            line: 100,
            column: 59
          }
        }],
        line: 100
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/testing/Semaphore.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/testing/Semaphore.ts"],
      sourcesContent: ["/**\n * Semaphore implementation for controlling concurrency\n */\nexport class Semaphore {\n  private currentCount: number;\n  private maxCount: number;\n  private waitingQueue: Array<{\n    resolve: () => void;\n    reject: (error: Error) => void;\n  }> = [];\n\n  constructor(maxCount: number) {\n    this.currentCount = 0;\n    this.maxCount = maxCount;\n  }\n\n  /**\n   * Acquire a permit, resolving when one becomes available\n   */\n  async acquire(): Promise<() => void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentCount < this.maxCount) {\n        this.currentCount++;\n        const release = this.createReleaseFunction();\n        resolve(release);\n      } else {\n        this.waitingQueue.push({\n          resolve: () => {\n            this.currentCount++;\n            const release = this.createReleaseFunction();\n            resolve(release);\n          },\n          reject\n        });\n      }\n    });\n  }\n\n  /**\n   * Try to acquire a permit without waiting\n   */\n  tryAcquire(): (() => void) | null {\n    if (this.currentCount < this.maxCount) {\n      this.currentCount++;\n      return this.createReleaseFunction();\n    }\n    return null;\n  }\n\n  /**\n   * Get current number of acquired permits\n   */\n  getCurrentCount(): number {\n    return this.currentCount;\n  }\n\n  /**\n   * Get number of waiting requests\n   */\n  getWaitingCount(): number {\n    return this.waitingQueue.length;\n  }\n\n  /**\n   * Get available permits\n   */\n  getAvailableCount(): number {\n    return this.maxCount - this.currentCount;\n  }\n\n  private createReleaseFunction(): () => void {\n    let released = false;\n    \n    return () => {\n      if (released) {\n        throw new Error('Semaphore permit already released');\n      }\n      \n      released = true;\n      this.currentCount--;\n      \n      if (this.waitingQueue.length > 0) {\n        const waiter = this.waitingQueue.shift()!;\n        waiter.resolve();\n      }\n    };\n  }\n}\n\n/**\n * Resource-aware semaphore that considers system resources\n */\nexport class ResourceSemaphore extends Semaphore {\n  private resourceChecker: () => Promise<boolean>;\n  private checkInterval: number;\n\n  constructor(\n    maxCount: number,\n    resourceChecker: () => Promise<boolean>,\n    checkInterval: number = 1000\n  ) {\n    super(maxCount);\n    this.resourceChecker = resourceChecker;\n    this.checkInterval = checkInterval;\n    this.startResourceMonitoring();\n  }\n\n  async acquire(): Promise<() => void> {\n    // Check resources before acquiring\n    const hasResources = await this.resourceChecker();\n    if (!hasResources) {\n      throw new Error('Insufficient system resources');\n    }\n    \n    return super.acquire();\n  }\n\n  private startResourceMonitoring(): void {\n    setInterval(async () => {\n      const hasResources = await this.resourceChecker();\n      if (!hasResources && this.getCurrentCount() > 0) {\n        // Log resource constraint but don't interrupt running tasks\n        console.warn('System resources constrained, new tasks will be queued');\n      }\n    }, this.checkInterval);\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f5c9073fb557ebaf9922f8a0694549d21a7d77ec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2n02p6kykf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2n02p6kykf();
cov_2n02p6kykf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2n02p6kykf().s[1]++;
exports.ResourceSemaphore = exports.Semaphore = void 0;
/**
 * Semaphore implementation for controlling concurrency
 */
class Semaphore {
  constructor(maxCount) {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[0]++;
    cov_2n02p6kykf().s[2]++;
    this.waitingQueue = [];
    /* istanbul ignore next */
    cov_2n02p6kykf().s[3]++;
    this.currentCount = 0;
    /* istanbul ignore next */
    cov_2n02p6kykf().s[4]++;
    this.maxCount = maxCount;
  }
  /**
   * Acquire a permit, resolving when one becomes available
   */
  async acquire() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[1]++;
    cov_2n02p6kykf().s[5]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2n02p6kykf().f[2]++;
      cov_2n02p6kykf().s[6]++;
      if (this.currentCount < this.maxCount) {
        /* istanbul ignore next */
        cov_2n02p6kykf().b[0][0]++;
        cov_2n02p6kykf().s[7]++;
        this.currentCount++;
        const release =
        /* istanbul ignore next */
        (cov_2n02p6kykf().s[8]++, this.createReleaseFunction());
        /* istanbul ignore next */
        cov_2n02p6kykf().s[9]++;
        resolve(release);
      } else {
        /* istanbul ignore next */
        cov_2n02p6kykf().b[0][1]++;
        cov_2n02p6kykf().s[10]++;
        this.waitingQueue.push({
          resolve: () => {
            /* istanbul ignore next */
            cov_2n02p6kykf().f[3]++;
            cov_2n02p6kykf().s[11]++;
            this.currentCount++;
            const release =
            /* istanbul ignore next */
            (cov_2n02p6kykf().s[12]++, this.createReleaseFunction());
            /* istanbul ignore next */
            cov_2n02p6kykf().s[13]++;
            resolve(release);
          },
          reject
        });
      }
    });
  }
  /**
   * Try to acquire a permit without waiting
   */
  tryAcquire() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[4]++;
    cov_2n02p6kykf().s[14]++;
    if (this.currentCount < this.maxCount) {
      /* istanbul ignore next */
      cov_2n02p6kykf().b[1][0]++;
      cov_2n02p6kykf().s[15]++;
      this.currentCount++;
      /* istanbul ignore next */
      cov_2n02p6kykf().s[16]++;
      return this.createReleaseFunction();
    } else
    /* istanbul ignore next */
    {
      cov_2n02p6kykf().b[1][1]++;
    }
    cov_2n02p6kykf().s[17]++;
    return null;
  }
  /**
   * Get current number of acquired permits
   */
  getCurrentCount() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[5]++;
    cov_2n02p6kykf().s[18]++;
    return this.currentCount;
  }
  /**
   * Get number of waiting requests
   */
  getWaitingCount() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[6]++;
    cov_2n02p6kykf().s[19]++;
    return this.waitingQueue.length;
  }
  /**
   * Get available permits
   */
  getAvailableCount() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[7]++;
    cov_2n02p6kykf().s[20]++;
    return this.maxCount - this.currentCount;
  }
  createReleaseFunction() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[8]++;
    let released =
    /* istanbul ignore next */
    (cov_2n02p6kykf().s[21]++, false);
    /* istanbul ignore next */
    cov_2n02p6kykf().s[22]++;
    return () => {
      /* istanbul ignore next */
      cov_2n02p6kykf().f[9]++;
      cov_2n02p6kykf().s[23]++;
      if (released) {
        /* istanbul ignore next */
        cov_2n02p6kykf().b[2][0]++;
        cov_2n02p6kykf().s[24]++;
        throw new Error('Semaphore permit already released');
      } else
      /* istanbul ignore next */
      {
        cov_2n02p6kykf().b[2][1]++;
      }
      cov_2n02p6kykf().s[25]++;
      released = true;
      /* istanbul ignore next */
      cov_2n02p6kykf().s[26]++;
      this.currentCount--;
      /* istanbul ignore next */
      cov_2n02p6kykf().s[27]++;
      if (this.waitingQueue.length > 0) {
        /* istanbul ignore next */
        cov_2n02p6kykf().b[3][0]++;
        const waiter =
        /* istanbul ignore next */
        (cov_2n02p6kykf().s[28]++, this.waitingQueue.shift());
        /* istanbul ignore next */
        cov_2n02p6kykf().s[29]++;
        waiter.resolve();
      } else
      /* istanbul ignore next */
      {
        cov_2n02p6kykf().b[3][1]++;
      }
    };
  }
}
/* istanbul ignore next */
cov_2n02p6kykf().s[30]++;
exports.Semaphore = Semaphore;
/**
 * Resource-aware semaphore that considers system resources
 */
class ResourceSemaphore extends Semaphore {
  constructor(maxCount, resourceChecker, checkInterval =
  /* istanbul ignore next */
  (cov_2n02p6kykf().b[4][0]++, 1000)) {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[10]++;
    cov_2n02p6kykf().s[31]++;
    super(maxCount);
    /* istanbul ignore next */
    cov_2n02p6kykf().s[32]++;
    this.resourceChecker = resourceChecker;
    /* istanbul ignore next */
    cov_2n02p6kykf().s[33]++;
    this.checkInterval = checkInterval;
    /* istanbul ignore next */
    cov_2n02p6kykf().s[34]++;
    this.startResourceMonitoring();
  }
  async acquire() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[11]++;
    // Check resources before acquiring
    const hasResources =
    /* istanbul ignore next */
    (cov_2n02p6kykf().s[35]++, await this.resourceChecker());
    /* istanbul ignore next */
    cov_2n02p6kykf().s[36]++;
    if (!hasResources) {
      /* istanbul ignore next */
      cov_2n02p6kykf().b[5][0]++;
      cov_2n02p6kykf().s[37]++;
      throw new Error('Insufficient system resources');
    } else
    /* istanbul ignore next */
    {
      cov_2n02p6kykf().b[5][1]++;
    }
    cov_2n02p6kykf().s[38]++;
    return super.acquire();
  }
  startResourceMonitoring() {
    /* istanbul ignore next */
    cov_2n02p6kykf().f[12]++;
    cov_2n02p6kykf().s[39]++;
    setInterval(async () => {
      /* istanbul ignore next */
      cov_2n02p6kykf().f[13]++;
      const hasResources =
      /* istanbul ignore next */
      (cov_2n02p6kykf().s[40]++, await this.resourceChecker());
      /* istanbul ignore next */
      cov_2n02p6kykf().s[41]++;
      if (
      /* istanbul ignore next */
      (cov_2n02p6kykf().b[7][0]++, !hasResources) &&
      /* istanbul ignore next */
      (cov_2n02p6kykf().b[7][1]++, this.getCurrentCount() > 0)) {
        /* istanbul ignore next */
        cov_2n02p6kykf().b[6][0]++;
        cov_2n02p6kykf().s[42]++;
        // Log resource constraint but don't interrupt running tasks
        console.warn('System resources constrained, new tasks will be queued');
      } else
      /* istanbul ignore next */
      {
        cov_2n02p6kykf().b[6][1]++;
      }
    }, this.checkInterval);
  }
}
/* istanbul ignore next */
cov_2n02p6kykf().s[43]++;
exports.ResourceSemaphore = ResourceSemaphore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,