{"version":3,"names":["cov_2n02p6kykf","actualCoverage","s","Semaphore","constructor","maxCount","f","waitingQueue","currentCount","acquire","Promise","resolve","reject","b","release","createReleaseFunction","push","tryAcquire","getCurrentCount","getWaitingCount","length","getAvailableCount","released","Error","waiter","shift","exports","ResourceSemaphore","resourceChecker","checkInterval","startResourceMonitoring","hasResources","setInterval","console","warn"],"sources":["/workspaces/prompt-card-system/backend/src/services/testing/Semaphore.ts"],"sourcesContent":["/**\n * Semaphore implementation for controlling concurrency\n */\nexport class Semaphore {\n  private currentCount: number;\n  private maxCount: number;\n  private waitingQueue: Array<{\n    resolve: () => void;\n    reject: (error: Error) => void;\n  }> = [];\n\n  constructor(maxCount: number) {\n    this.currentCount = 0;\n    this.maxCount = maxCount;\n  }\n\n  /**\n   * Acquire a permit, resolving when one becomes available\n   */\n  async acquire(): Promise<() => void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentCount < this.maxCount) {\n        this.currentCount++;\n        const release = this.createReleaseFunction();\n        resolve(release);\n      } else {\n        this.waitingQueue.push({\n          resolve: () => {\n            this.currentCount++;\n            const release = this.createReleaseFunction();\n            resolve(release);\n          },\n          reject\n        });\n      }\n    });\n  }\n\n  /**\n   * Try to acquire a permit without waiting\n   */\n  tryAcquire(): (() => void) | null {\n    if (this.currentCount < this.maxCount) {\n      this.currentCount++;\n      return this.createReleaseFunction();\n    }\n    return null;\n  }\n\n  /**\n   * Get current number of acquired permits\n   */\n  getCurrentCount(): number {\n    return this.currentCount;\n  }\n\n  /**\n   * Get number of waiting requests\n   */\n  getWaitingCount(): number {\n    return this.waitingQueue.length;\n  }\n\n  /**\n   * Get available permits\n   */\n  getAvailableCount(): number {\n    return this.maxCount - this.currentCount;\n  }\n\n  private createReleaseFunction(): () => void {\n    let released = false;\n    \n    return () => {\n      if (released) {\n        throw new Error('Semaphore permit already released');\n      }\n      \n      released = true;\n      this.currentCount--;\n      \n      if (this.waitingQueue.length > 0) {\n        const waiter = this.waitingQueue.shift()!;\n        waiter.resolve();\n      }\n    };\n  }\n}\n\n/**\n * Resource-aware semaphore that considers system resources\n */\nexport class ResourceSemaphore extends Semaphore {\n  private resourceChecker: () => Promise<boolean>;\n  private checkInterval: number;\n\n  constructor(\n    maxCount: number,\n    resourceChecker: () => Promise<boolean>,\n    checkInterval: number = 1000\n  ) {\n    super(maxCount);\n    this.resourceChecker = resourceChecker;\n    this.checkInterval = checkInterval;\n    this.startResourceMonitoring();\n  }\n\n  async acquire(): Promise<() => void> {\n    // Check resources before acquiring\n    const hasResources = await this.resourceChecker();\n    if (!hasResources) {\n      throw new Error('Insufficient system resources');\n    }\n    \n    return super.acquire();\n  }\n\n  private startResourceMonitoring(): void {\n    setInterval(async () => {\n      const hasResources = await this.resourceChecker();\n      if (!hasResources && this.getCurrentCount() > 0) {\n        // Log resource constraint but don't interrupt running tasks\n        console.warn('System resources constrained, new tasks will be queued');\n      }\n    }, this.checkInterval);\n  }\n}"],"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","ignoreList":[]}