ae0f5dd386b879293eb8d65760a38d01
"use strict";

/* istanbul ignore next */
function cov_23f4s7g20b() {
  var path = "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceMonitor.ts";
  var hash = "0f266e5dcf8bff40da22c8d8db434762632e724a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 65
        }
      },
      "37": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "38": {
        start: {
          line: 38,
          column: 17
        },
        end: {
          line: 38,
          column: 34
        }
      },
      "39": {
        start: {
          line: 39,
          column: 11
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "40": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 40
        }
      },
      "41": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 16
        }
      },
      "42": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 29
        }
      },
      "43": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "44": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 34
        }
      },
      "45": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 38
        }
      },
      "46": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 33
        }
      },
      "47": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 32
        }
      },
      "48": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 36
        }
      },
      "49": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 36
        }
      },
      "50": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "51": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 38
        }
      },
      "52": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 45
        }
      },
      "53": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "54": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 19
        }
      },
      "55": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 33
        }
      },
      "56": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 75,
          column: 23
        }
      },
      "57": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 40
        }
      },
      "58": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 45
        }
      },
      "59": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 31
        }
      },
      "60": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "61": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 83
        }
      },
      "62": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 84
        }
      },
      "63": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "64": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 19
        }
      },
      "65": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 34
        }
      },
      "66": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "67": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 43
        }
      },
      "68": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 35
        }
      },
      "69": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "70": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 39
        }
      },
      "71": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 54
        }
      },
      "72": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "73": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "74": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 39
        }
      },
      "75": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 113,
          column: 50
        }
      },
      "76": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "77": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "78": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 32
        }
      },
      "79": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 47
        }
      },
      "80": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 36
        }
      },
      "81": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 52
        }
      },
      "82": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 37
        }
      },
      "83": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 47
        }
      },
      "84": {
        start: {
          line: 141,
          column: 25
        },
        end: {
          line: 141,
          column: 41
        }
      },
      "85": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 47
        }
      },
      "86": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "87": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 26
        }
      },
      "88": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "89": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "90": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 23
        }
      },
      "91": {
        start: {
          line: 154,
          column: 25
        },
        end: {
          line: 154,
          column: 38
        }
      },
      "92": {
        start: {
          line: 155,
          column: 23
        },
        end: {
          line: 155,
          column: 47
        }
      },
      "93": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "94": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 26
        }
      },
      "95": {
        start: {
          line: 159,
          column: 24
        },
        end: {
          line: 159,
          column: 56
        }
      },
      "96": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 61
        }
      },
      "97": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 23
        }
      },
      "98": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 81
        }
      },
      "99": {
        start: {
          line: 167,
          column: 64
        },
        end: {
          line: 167,
          column: 79
        }
      },
      "100": {
        start: {
          line: 173,
          column: 29
        },
        end: {
          line: 173,
          column: 51
        }
      },
      "101": {
        start: {
          line: 174,
          column: 29
        },
        end: {
          line: 174,
          column: 69
        }
      },
      "102": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 50
        }
      },
      "103": {
        start: {
          line: 177,
          column: 27
        },
        end: {
          line: 177,
          column: 48
        }
      },
      "104": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 184,
          column: 10
        }
      },
      "105": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 63
        }
      },
      "106": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 29
        }
      },
      "107": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 28
        }
      },
      "108": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 27
        }
      },
      "109": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 51
        }
      },
      "110": {
        start: {
          line: 205,
          column: 22
        },
        end: {
          line: 205,
          column: 24
        }
      },
      "111": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "112": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "113": {
        start: {
          line: 208,
          column: 31
        },
        end: {
          line: 208,
          column: 56
        }
      },
      "114": {
        start: {
          line: 208,
          column: 48
        },
        end: {
          line: 208,
          column: 55
        }
      },
      "115": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 209,
          column: 85
        }
      },
      "116": {
        start: {
          line: 209,
          column: 56
        },
        end: {
          line: 209,
          column: 65
        }
      },
      "117": {
        start: {
          line: 210,
          column: 28
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "118": {
        start: {
          line: 211,
          column: 28
        },
        end: {
          line: 211,
          column: 47
        }
      },
      "119": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 217,
          column: 18
        }
      },
      "120": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 21
        }
      },
      "121": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "122": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "123": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "124": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 135
        }
      },
      "125": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 86
        }
      },
      "126": {
        start: {
          line: 241,
          column: 25
        },
        end: {
          line: 241,
          column: 59
        }
      },
      "127": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 242,
          column: 41
        }
      },
      "128": {
        start: {
          line: 243,
          column: 27
        },
        end: {
          line: 243,
          column: 39
        }
      },
      "129": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 51
        }
      },
      "130": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "131": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 63
        }
      },
      "132": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 75
        }
      },
      "133": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 71
        }
      },
      "134": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 71
        }
      },
      "135": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 41
        }
      },
      "136": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 23
        }
      },
      "137": {
        start: {
          line: 283,
          column: 28
        },
        end: {
          line: 283,
          column: 49
        }
      },
      "138": {
        start: {
          line: 284,
          column: 23
        },
        end: {
          line: 284,
          column: 39
        }
      },
      "139": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "140": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 87
        }
      },
      "141": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 82
        }
      },
      "142": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 68
        }
      },
      "143": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 94
        }
      },
      "144": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 72
        }
      },
      "145": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 75
        }
      },
      "146": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 77
        }
      },
      "147": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 79
        }
      },
      "148": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 76
        }
      },
      "149": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 62
        }
      },
      "150": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 23
        }
      },
      "151": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 72
        }
      },
      "152": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 75
        }
      },
      "153": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 84
        }
      },
      "154": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 76
        }
      },
      "155": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 79
        }
      },
      "156": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 81
        }
      },
      "157": {
        start: {
          line: 323,
          column: 26
        },
        end: {
          line: 323,
          column: 57
        }
      },
      "158": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 325,
          column: 19
        }
      },
      "159": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 19
        }
      },
      "160": {
        start: {
          line: 326,
          column: 24
        },
        end: {
          line: 326,
          column: 49
        }
      },
      "161": {
        start: {
          line: 327,
          column: 30
        },
        end: {
          line: 327,
          column: 54
        }
      },
      "162": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "163": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "164": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 93
        }
      },
      "165": {
        start: {
          line: 333,
          column: 13
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "166": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "167": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 335,
          column: 88
        }
      },
      "168": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "169": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 46
        }
      },
      "170": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 59
        }
      },
      "171": {
        start: {
          line: 350,
          column: 22
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "172": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 35
        }
      },
      "173": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 34
        }
      },
      "174": {
        start: {
          line: 374,
          column: 31
        },
        end: {
          line: 374,
          column: 77
        }
      },
      "175": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 376,
          column: 21
        }
      },
      "176": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 21
        }
      },
      "177": {
        start: {
          line: 377,
          column: 23
        },
        end: {
          line: 377,
          column: 48
        }
      },
      "178": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 75
        }
      },
      "179": {
        start: {
          line: 378,
          column: 41
        },
        end: {
          line: 378,
          column: 54
        }
      },
      "180": {
        start: {
          line: 384,
          column: 32
        },
        end: {
          line: 384,
          column: 72
        }
      },
      "181": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 386,
          column: 21
        }
      },
      "182": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 21
        }
      },
      "183": {
        start: {
          line: 387,
          column: 23
        },
        end: {
          line: 387,
          column: 49
        }
      },
      "184": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 75
        }
      },
      "185": {
        start: {
          line: 388,
          column: 41
        },
        end: {
          line: 388,
          column: 54
        }
      },
      "186": {
        start: {
          line: 394,
          column: 29
        },
        end: {
          line: 394,
          column: 66
        }
      },
      "187": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 396,
          column: 21
        }
      },
      "188": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 21
        }
      },
      "189": {
        start: {
          line: 397,
          column: 23
        },
        end: {
          line: 397,
          column: 46
        }
      },
      "190": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 75
        }
      },
      "191": {
        start: {
          line: 398,
          column: 41
        },
        end: {
          line: 398,
          column: 54
        }
      },
      "192": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 17
        }
      },
      "193": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 17
        }
      },
      "194": {
        start: {
          line: 418,
          column: 24
        },
        end: {
          line: 419,
          column: 95
        }
      },
      "195": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 47
        }
      },
      "196": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 17
        }
      },
      "197": {
        start: {
          line: 433,
          column: 30
        },
        end: {
          line: 433,
          column: 69
        }
      },
      "198": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 435,
          column: 25
        }
      },
      "199": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 25
        }
      },
      "200": {
        start: {
          line: 437,
          column: 23
        },
        end: {
          line: 437,
          column: 47
        }
      },
      "201": {
        start: {
          line: 438,
          column: 22
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "202": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 440,
          column: 27
        }
      },
      "203": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 27
        }
      },
      "204": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 66
        }
      },
      "205": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 58
        }
      },
      "206": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "207": {
        start: {
          line: 449,
          column: 33
        },
        end: {
          line: 449,
          column: 62
        }
      },
      "208": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 30
        }
      },
      "209": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 454,
          column: 9
        }
      },
      "210": {
        start: {
          line: 452,
          column: 33
        },
        end: {
          line: 452,
          column: 89
        }
      },
      "211": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 29
        }
      },
      "212": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 22
        }
      },
      "213": {
        start: {
          line: 461,
          column: 27
        },
        end: {
          line: 461,
          column: 29
        }
      },
      "214": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "215": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 470,
          column: 13
        }
      },
      "216": {
        start: {
          line: 464,
          column: 31
        },
        end: {
          line: 464,
          column: 58
        }
      },
      "217": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 469,
          column: 19
        }
      },
      "218": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 475,
          column: 29
        }
      },
      "219": {
        start: {
          line: 474,
          column: 28
        },
        end: {
          line: 474,
          column: 45
        }
      },
      "220": {
        start: {
          line: 481,
          column: 27
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "221": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 51
        }
      },
      "222": {
        start: {
          line: 492,
          column: 0
        },
        end: {
          line: 492,
          column: 48
        }
      },
      "223": {
        start: {
          line: 494,
          column: 0
        },
        end: {
          line: 494,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 18
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 42
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 39
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 65
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 71,
            column: 38
          },
          end: {
            line: 71,
            column: 39
          }
        },
        loc: {
          start: {
            line: 71,
            column: 44
          },
          end: {
            line: 75,
            column: 9
          }
        },
        line: 71
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 21
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 85
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 47
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 102
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 127
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 21
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 134
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 29
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 140
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 28
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 153
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 22
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 166
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 167,
            column: 55
          },
          end: {
            line: 167,
            column: 56
          }
        },
        loc: {
          start: {
            line: 167,
            column: 64
          },
          end: {
            line: 167,
            column: 79
          }
        },
        line: 167
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 28
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 172
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 189
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 195
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 204
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 208,
            column: 43
          },
          end: {
            line: 208,
            column: 44
          }
        },
        loc: {
          start: {
            line: 208,
            column: 48
          },
          end: {
            line: 208,
            column: 55
          }
        },
        line: 208
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 209,
            column: 42
          },
          end: {
            line: 209,
            column: 43
          }
        },
        loc: {
          start: {
            line: 209,
            column: 56
          },
          end: {
            line: 209,
            column: 65
          }
        },
        line: 209
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 36
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 225
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 227,
            column: 65
          },
          end: {
            line: 227,
            column: 66
          }
        },
        loc: {
          start: {
            line: 227,
            column: 75
          },
          end: {
            line: 231,
            column: 13
          }
        },
        line: 227
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 33
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 240
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 32
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 282
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 29
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 311
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 44
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 322
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 63
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 349
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 18
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 366
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 33
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 373
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 378,
            column: 29
          },
          end: {
            line: 378,
            column: 30
          }
        },
        loc: {
          start: {
            line: 378,
            column: 41
          },
          end: {
            line: 378,
            column: 54
          }
        },
        line: 378
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 383,
            column: 5
          }
        },
        loc: {
          start: {
            line: 383,
            column: 35
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 383
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 388,
            column: 29
          },
          end: {
            line: 388,
            column: 30
          }
        },
        loc: {
          start: {
            line: 388,
            column: 41
          },
          end: {
            line: 388,
            column: 54
          }
        },
        line: 388
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 25
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 393
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 398,
            column: 29
          },
          end: {
            line: 398,
            column: 30
          }
        },
        loc: {
          start: {
            line: 398,
            column: 41
          },
          end: {
            line: 398,
            column: 54
          }
        },
        line: 398
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 27
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 403
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 410,
            column: 5
          }
        },
        loc: {
          start: {
            line: 410,
            column: 19
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 410
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 417,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        loc: {
          start: {
            line: 417,
            column: 28
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 417
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 25
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 425
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 24
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 432
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 438,
            column: 36
          },
          end: {
            line: 438,
            column: 37
          }
        },
        loc: {
          start: {
            line: 438,
            column: 60
          },
          end: {
            line: 442,
            column: 9
          }
        },
        line: 438
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 34
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 448
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 449,
            column: 24
          },
          end: {
            line: 449,
            column: 25
          }
        },
        loc: {
          start: {
            line: 449,
            column: 33
          },
          end: {
            line: 449,
            column: 62
          }
        },
        line: 449
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 452,
            column: 24
          },
          end: {
            line: 452,
            column: 25
          }
        },
        loc: {
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 452,
            column: 89
          }
        },
        line: 452
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 25
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 460
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 474,
            column: 18
          },
          end: {
            line: 474,
            column: 19
          }
        },
        loc: {
          start: {
            line: 474,
            column: 28
          },
          end: {
            line: 474,
            column: 45
          }
        },
        line: 474
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 20
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 480
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 65,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 65,
            column: 37
          }
        }],
        line: 65
      },
      "18": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "19": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "20": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "21": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "22": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "23": {
        loc: {
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 102,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 102,
            column: 37
          },
          end: {
            line: 102,
            column: 39
          }
        }],
        line: 102
      },
      "24": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "25": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "26": {
        loc: {
          start: {
            line: 127,
            column: 21
          },
          end: {
            line: 127,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 29
          },
          end: {
            line: 127,
            column: 32
          }
        }],
        line: 127
      },
      "27": {
        loc: {
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 46
          }
        }, {
          start: {
            line: 128,
            column: 50
          },
          end: {
            line: 128,
            column: 52
          }
        }],
        line: 128
      },
      "28": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "29": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "30": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "31": {
        loc: {
          start: {
            line: 229,
            column: 81
          },
          end: {
            line: 229,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 81
          },
          end: {
            line: 229,
            column: 95
          }
        }, {
          start: {
            line: 229,
            column: 99
          },
          end: {
            line: 229,
            column: 100
          }
        }],
        line: 229
      },
      "32": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 325,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 325,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "33": {
        loc: {
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: 333,
            column: 13
          },
          end: {
            line: 344,
            column: 9
          }
        }],
        line: 328
      },
      "34": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "35": {
        loc: {
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 329,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 329,
            column: 30
          }
        }, {
          start: {
            line: 329,
            column: 34
          },
          end: {
            line: 329,
            column: 71
          }
        }],
        line: 329
      },
      "36": {
        loc: {
          start: {
            line: 333,
            column: 13
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 13
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: 338,
            column: 13
          },
          end: {
            line: 344,
            column: 9
          }
        }],
        line: 333
      },
      "37": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "38": {
        loc: {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 30
          }
        }, {
          start: {
            line: 334,
            column: 34
          },
          end: {
            line: 334,
            column: 67
          }
        }],
        line: 334
      },
      "39": {
        loc: {
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "40": {
        loc: {
          start: {
            line: 340,
            column: 16
          },
          end: {
            line: 340,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 16
          },
          end: {
            line: 340,
            column: 29
          }
        }, {
          start: {
            line: 340,
            column: 33
          },
          end: {
            line: 340,
            column: 56
          }
        }],
        line: 340
      },
      "41": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 376,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 376,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "42": {
        loc: {
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 386,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 386,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "43": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 396,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 396,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "44": {
        loc: {
          start: {
            line: 418,
            column: 24
          },
          end: {
            line: 419,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 419,
            column: 91
          }
        }, {
          start: {
            line: 419,
            column: 94
          },
          end: {
            line: 419,
            column: 95
          }
        }],
        line: 418
      },
      "45": {
        loc: {
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 435,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 435,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      },
      "46": {
        loc: {
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 440,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 440,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "47": {
        loc: {
          start: {
            line: 443,
            column: 15
          },
          end: {
            line: 443,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 15
          },
          end: {
            line: 443,
            column: 24
          }
        }, {
          start: {
            line: 443,
            column: 28
          },
          end: {
            line: 443,
            column: 57
          }
        }],
        line: 443
      },
      "48": {
        loc: {
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "49": {
        loc: {
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 454,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 454,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "50": {
        loc: {
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 452,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 452,
            column: 58
          }
        }, {
          start: {
            line: 452,
            column: 62
          },
          end: {
            line: 452,
            column: 89
          }
        }],
        line: 452
      },
      "51": {
        loc: {
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceMonitor.ts",
      mappings: ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA8D;AAC9D,mCAAsC;AAEtC,uCAAyB;AACzB,yCAAqC;AA2DrC,MAAa,kBAAmB,SAAQ,qBAAY;IAWlD;QACE,KAAK,EAAE,CAAC;QAPF,aAAQ,GAA+B,IAAI,CAAC;QAC5C,eAAU,GAA0B,IAAI,CAAC;QACzC,iBAAY,GAAY,KAAK,CAAC;QAE9B,sBAAiB,GAAyB,IAAI,CAAC;QAIrD,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE5B,gDAAgD;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAQ,CAAC;YACxB,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC,YAAY;SAChC,CAAC,CAAC;QAEH,yBAAyB;QACzB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE9B,kCAAkC;QAClC,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,eAAe,CAAC,aAAqB,IAAI;QAC9C,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,iDAAiD;QACjD,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACjC,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,EAAE,UAAU,CAAC,CAAC;QAEf,uCAAuC;QACvC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,uCAAuC,UAAU,aAAa,CAAC,CAAC;IAC9E,CAAC;IAED;;OAEG;IACI,cAAc;QACnB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,IAAY,EAAE,KAAa,EAAE,OAAe,EAAE,EAAE,IAA6B;QAC/F,MAAM,MAAM,GAAsB;YAChC,IAAI;YACJ,KAAK;YACL,IAAI;YACJ,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,IAAI;SACL,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC7B,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QAC5C,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEzB,uCAAuC;QACvC,IAAI,WAAW,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;YAC9B,WAAW,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;QAED,yCAAyC;QACzC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEvC,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,IAAY,EAAE,QAAgB,GAAG;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAC7C,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,cAAc;QACnB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,gBAAgB;QAC3B,MAAM,QAAQ,GAAG,gBAAgB,CAAC;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAExC,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB;QAE1E,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,qBAAqB;QAC1B,MAAM,QAAQ,GAAG,aAAa,CAAC;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAExC,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB;QAExE,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACI,qBAAqB;QAO1B,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAE3C,2CAA2C;QAC3C,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAEzC,OAAO;YACL,YAAY;YACZ,MAAM;YACN,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YAC/B,YAAY,EAAE,YAAY,CAAC,MAAM;YACjC,UAAU;SACX,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,UAAkB,EAAE,OAAe,EAAE,QAAgB;QACvE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACI,aAAa;QAClB,MAAM,KAAK,GAA6E,EAAE,CAAC;QAE3F,KAAK,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3C,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACvB,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACzC,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;gBACtE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAChC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAEhC,KAAK,CAAC,IAAI,CAAC,GAAG;oBACZ,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;oBAChC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;oBAChC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;oBAChC,KAAK,EAAE,OAAO,CAAC,MAAM;iBACtB,CAAC;YACJ,CAAC;QACH,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACK,6BAA6B;QACnC,IAAI,CAAC;YACH,IAAI,CAAC,QAAQ,GAAG,IAAI,gCAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC/C,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;oBACtC,IAAI,CAAC,YAAY,CACf,UAAU,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,EAAE,EACzC,KAAK,CAAC,QAAQ,IAAI,CAAC,EACnB,IAAI,EACJ,EAAE,IAAI,EAAE,KAAK,CAAC,SAAS,EAAE,CAC1B,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB;QAChC,MAAM,QAAQ,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;QACpD,MAAM,WAAW,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QAClC,MAAM,UAAU,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;QAChC,MAAM,UAAU,GAAG,WAAW,GAAG,UAAU,CAAC;QAE5C,MAAM,OAAO,GAAkB;YAC7B,GAAG,EAAE;gBACH,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACjC,WAAW,EAAE,EAAE,CAAC,OAAO,EAAE;gBACzB,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM;aACxB;YACD,MAAM,EAAE;gBACN,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,CAAC,EAAE,kCAAkC;gBAC7C,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC;aAC1D;YACD,IAAI,EAAE;gBACJ,KAAK,EAAE,CAAC,EAAE,iDAAiD;gBAC3D,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,CAAC;gBACP,WAAW,EAAE,CAAC;aACf;YACD,OAAO,EAAE;gBACP,OAAO,EAAE,CAAC,EAAE,oDAAoD;gBAChE,QAAQ,EAAE,CAAC;gBACX,SAAS,EAAE,CAAC;gBACZ,UAAU,EAAE,CAAC;aACd;SACF,CAAC;QAEF,4BAA4B;QAC5B,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACnE,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE/D,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;QACjC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,yBAAyB;QAC/B,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAEhC,MAAM,OAAO,GAAuB;YAClC,iBAAiB,EAAE,IAAI,CAAC,0BAA0B,EAAE;YACpD,mBAAmB,EAAE,IAAI,CAAC,4BAA4B,EAAE;YACxD,SAAS,EAAE,IAAI,CAAC,kBAAkB,EAAE;YACpC,iBAAiB,EAAE,IAAI,CAAC,oBAAoB,EAAE;YAC9C,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE;YAC9B,YAAY,EAAE,IAAI,CAAC,qBAAqB,EAAE;YAC1C,eAAe,EAAE,IAAI,CAAC,kBAAkB,EAAE;YAC1C,WAAW,EAAE,IAAI,CAAC,iBAAiB,EAAE;SACtC,CAAC;QAEF,4BAA4B;QAC5B,IAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE,OAAO,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAC1E,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAC5D,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE,OAAO,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QACtF,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QACnE,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACrE,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;QAEtD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,sBAAsB;QAC5B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW;IACvF,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,UAAkB,EAAE,KAAa;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,SAAS;YAAE,OAAO;QAEvB,MAAM,OAAO,GAAG,GAAG,UAAU,YAAY,CAAC;QAC1C,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE/C,IAAI,KAAK,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YAChC,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC;gBAC5D,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC/E,CAAC;QACH,CAAC;aAAM,IAAI,KAAK,IAAI,SAAS,CAAC,OAAO,EAAE,CAAC;YACtC,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;gBACxD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;aAAM,CAAC;YACN,wDAAwD;YACxD,IAAI,aAAa,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC7C,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,EAAU,EAAE,QAAsC,EAAE,MAAc,EAAE,SAAiB,EAAE,YAAoB;QAC7H,MAAM,KAAK,GAAqB;YAC9B,EAAE;YACF,QAAQ;YACR,MAAM;YACN,SAAS;YACT,YAAY;YACZ,OAAO,EAAE,GAAG,MAAM,aAAa,QAAQ,eAAe,YAAY,OAAO,SAAS,EAAE;YACpF,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,QAAQ,EAAE,KAAK;SAChB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACK,WAAW;QACjB,kEAAkE;QAClE,0DAA0D;IAC5D,CAAC;IAED;;OAEG;IACK,0BAA0B;QAChC,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;QACtE,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAuB;QACjE,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;IACrE,CAAC;IAED;;OAEG;IACK,4BAA4B;QAClC,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QACjE,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAE3C,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;IACrE,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAC3D,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAExC,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACvC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;IACrE,CAAC;IAED;;OAEG;IACK,oBAAoB;QAC1B,gEAAgE;QAChE,OAAO,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,uDAAuD;QACvD,OAAO,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;YAC7C,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtF,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACzC,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,mEAAmE;QACnE,OAAO,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACK,iBAAiB;QACvB,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QAC9D,IAAI,aAAa,CAAC,MAAM,GAAG,EAAE;YAAE,OAAO,KAAK,CAAC;QAE5C,iFAAiF;QACjF,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACxC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE;YACjD,IAAI,KAAK,KAAK,CAAC;gBAAE,OAAO,GAAG,CAAC;YAC5B,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,OAAO,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,qBAAqB;IAC1E,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,MAA0B;QACtD,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,EAAE,CAAC;YACxD,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,KAAK,MAAM,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,EAAE,CAAC;YACnF,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,KAAa;QACjC,MAAM,UAAU,GAAoD,EAAE,CAAC;QAEvE,KAAK,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3C,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACvB,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC3C,UAAU,CAAC,IAAI,CAAC;oBACd,IAAI;oBACJ,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,IAAI,EAAE,MAAM,CAAC,IAAI;iBAClB,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED,4CAA4C;QAC5C,OAAO,UAAU;aACd,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;aACjC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,aAAa;QAClB,MAAM,UAAU,GAAG;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS;YACnC,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;YACzC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACxC,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;YAC/C,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE;SACtC,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7C,CAAC;CACF;AAphBD,gDAohBC;AAED,4BAA4B;AACf,QAAA,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceMonitor.ts"],
      sourcesContent: ["import { performance, PerformanceObserver } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { promisify } from 'util';\nimport * as os from 'os';\nimport { LRUCache } from 'lru-cache';\n\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  timestamp: Date;\n  tags?: Record<string, string>;\n}\n\nexport interface SystemMetrics {\n  cpu: {\n    usage: number;\n    loadAverage: number[];\n    cores: number;\n  };\n  memory: {\n    total: number;\n    used: number;\n    free: number;\n    cached: number;\n    utilization: number;\n  };\n  disk: {\n    total: number;\n    used: number;\n    free: number;\n    utilization: number;\n  };\n  network: {\n    bytesIn: number;\n    bytesOut: number;\n    packetsIn: number;\n    packetsOut: number;\n  };\n}\n\nexport interface ApplicationMetrics {\n  requestsPerSecond: number;\n  averageResponseTime: number;\n  errorRate: number;\n  activeConnections: number;\n  queueSize: number;\n  cacheHitRate: number;\n  databaseQueries: number;\n  memoryLeaks: boolean;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  metric: string;\n  threshold: number;\n  currentValue: number;\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n}\n\nexport class PerformanceMonitor extends EventEmitter {\n  private metrics: Map<string, PerformanceMetric[]>;\n  private alerts: Map<string, PerformanceAlert>;\n  private thresholds: Map<string, { warning: number; critical: number }>;\n  private cache: LRUCache<string, any>;\n  private observer: PerformanceObserver | null = null;\n  private intervalId: NodeJS.Timeout | null = null;\n  private isMonitoring: boolean = false;\n  private startTime: number;\n  private lastSystemMetrics: SystemMetrics | null = null;\n\n  constructor() {\n    super();\n    this.metrics = new Map();\n    this.alerts = new Map();\n    this.thresholds = new Map();\n    this.startTime = Date.now();\n    \n    // Initialize cache for storing computed metrics\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n    \n    // Set default thresholds\n    this.setupDefaultThresholds();\n    \n    // Initialize performance observer\n    this.initializePerformanceObserver();\n  }\n\n  /**\n   * Start monitoring system and application performance\n   */\n  public startMonitoring(intervalMs: number = 5000): void {\n    if (this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = true;\n    \n    // Start collecting metrics at specified interval\n    this.intervalId = setInterval(() => {\n      this.collectSystemMetrics();\n      this.collectApplicationMetrics();\n      this.checkAlerts();\n    }, intervalMs);\n\n    // Start Node.js performance monitoring\n    if (this.observer) {\n      this.observer.observe({ entryTypes: ['measure', 'mark', 'resource'] });\n    }\n\n    console.log(`Performance monitoring started with ${intervalMs}ms interval`);\n  }\n\n  /**\n   * Stop monitoring\n   */\n  public stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = false;\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    console.log('Performance monitoring stopped');\n  }\n\n  /**\n   * Record a custom metric\n   */\n  public recordMetric(name: string, value: number, unit: string = '', tags?: Record<string, string>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date(),\n      tags\n    };\n\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n\n    const metricArray = this.metrics.get(name)!;\n    metricArray.push(metric);\n\n    // Keep only last 1000 metrics per name\n    if (metricArray.length > 1000) {\n      metricArray.shift();\n    }\n\n    // Check if this metric triggers an alert\n    this.checkMetricThreshold(name, value);\n    \n    // Emit metric event\n    this.emit('metric', metric);\n  }\n\n  /**\n   * Get metrics for a specific name\n   */\n  public getMetrics(name: string, limit: number = 100): PerformanceMetric[] {\n    const metrics = this.metrics.get(name) || [];\n    return metrics.slice(-limit);\n  }\n\n  /**\n   * Get all metric names\n   */\n  public getMetricNames(): string[] {\n    return Array.from(this.metrics.keys());\n  }\n\n  /**\n   * Get current system metrics\n   */\n  public async getSystemMetrics(): Promise<SystemMetrics> {\n    const cacheKey = 'system_metrics';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const metrics = await this.collectSystemMetrics();\n    this.cache.set(cacheKey, metrics, { ttl: 1000 * 10 }); // 10 seconds cache\n    \n    return metrics;\n  }\n\n  /**\n   * Get current application metrics\n   */\n  public getApplicationMetrics(): ApplicationMetrics {\n    const cacheKey = 'app_metrics';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const metrics = this.collectApplicationMetrics();\n    this.cache.set(cacheKey, metrics, { ttl: 1000 * 5 }); // 5 seconds cache\n    \n    return metrics;\n  }\n\n  /**\n   * Get active alerts\n   */\n  public getActiveAlerts(): PerformanceAlert[] {\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\n  }\n\n  /**\n   * Get performance summary\n   */\n  public getPerformanceSummary(): {\n    systemHealth: 'good' | 'warning' | 'critical';\n    uptime: number;\n    totalMetrics: number;\n    activeAlerts: number;\n    topMetrics: { name: string; value: number; unit: string }[];\n  } {\n    const activeAlerts = this.getActiveAlerts();\n    const systemHealth = this.determineSystemHealth(activeAlerts);\n    const uptime = Date.now() - this.startTime;\n    \n    // Calculate top metrics by recent activity\n    const topMetrics = this.getTopMetrics(5);\n    \n    return {\n      systemHealth,\n      uptime,\n      totalMetrics: this.metrics.size,\n      activeAlerts: activeAlerts.length,\n      topMetrics\n    };\n  }\n\n  /**\n   * Set custom threshold for a metric\n   */\n  public setThreshold(metricName: string, warning: number, critical: number): void {\n    this.thresholds.set(metricName, { warning, critical });\n  }\n\n  /**\n   * Clear all metrics and alerts\n   */\n  public clear(): void {\n    this.metrics.clear();\n    this.alerts.clear();\n    this.cache.clear();\n    console.log('Performance metrics cleared');\n  }\n\n  /**\n   * Get performance statistics\n   */\n  public getStatistics(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [name, metrics] of this.metrics) {\n      if (metrics.length > 0) {\n        const values = metrics.map(m => m.value);\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const max = Math.max(...values);\n        const min = Math.min(...values);\n        \n        stats[name] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Initialize performance observer\n   */\n  private initializePerformanceObserver(): void {\n    try {\n      this.observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          this.recordMetric(\n            `nodejs_${entry.entryType}_${entry.name}`,\n            entry.duration || 0,\n            'ms',\n            { type: entry.entryType }\n          );\n        }\n      });\n    } catch (error) {\n      console.warn('Failed to initialize performance observer:', error.message);\n    }\n  }\n\n  /**\n   * Collect system metrics\n   */\n  private async collectSystemMetrics(): Promise<SystemMetrics> {\n    const cpuUsage = os.loadavg()[0] / os.cpus().length;\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    \n    const metrics: SystemMetrics = {\n      cpu: {\n        usage: Math.round(cpuUsage * 100),\n        loadAverage: os.loadavg(),\n        cores: os.cpus().length\n      },\n      memory: {\n        total: totalMemory,\n        used: usedMemory,\n        free: freeMemory,\n        cached: 0, // Not easily available in Node.js\n        utilization: Math.round((usedMemory / totalMemory) * 100)\n      },\n      disk: {\n        total: 0, // Would need additional library for disk metrics\n        used: 0,\n        free: 0,\n        utilization: 0\n      },\n      network: {\n        bytesIn: 0, // Would need additional library for network metrics\n        bytesOut: 0,\n        packetsIn: 0,\n        packetsOut: 0\n      }\n    };\n\n    // Record individual metrics\n    this.recordMetric('cpu_usage', metrics.cpu.usage, '%');\n    this.recordMetric('memory_usage', metrics.memory.utilization, '%');\n    this.recordMetric('memory_used', metrics.memory.used, 'bytes');\n    this.recordMetric('memory_free', metrics.memory.free, 'bytes');\n    \n    this.lastSystemMetrics = metrics;\n    return metrics;\n  }\n\n  /**\n   * Collect application-specific metrics\n   */\n  private collectApplicationMetrics(): ApplicationMetrics {\n    const memoryUsage = process.memoryUsage();\n    const uptime = process.uptime();\n    \n    const metrics: ApplicationMetrics = {\n      requestsPerSecond: this.calculateRequestsPerSecond(),\n      averageResponseTime: this.calculateAverageResponseTime(),\n      errorRate: this.calculateErrorRate(),\n      activeConnections: this.getActiveConnections(),\n      queueSize: this.getQueueSize(),\n      cacheHitRate: this.calculateCacheHitRate(),\n      databaseQueries: this.getDatabaseQueries(),\n      memoryLeaks: this.detectMemoryLeaks()\n    };\n\n    // Record individual metrics\n    this.recordMetric('app_requests_per_second', metrics.requestsPerSecond, 'rps');\n    this.recordMetric('app_response_time', metrics.averageResponseTime, 'ms');\n    this.recordMetric('app_error_rate', metrics.errorRate, '%');\n    this.recordMetric('app_active_connections', metrics.activeConnections, 'connections');\n    this.recordMetric('app_queue_size', metrics.queueSize, 'items');\n    this.recordMetric('app_cache_hit_rate', metrics.cacheHitRate, '%');\n    this.recordMetric('nodejs_heap_used', memoryUsage.heapUsed, 'bytes');\n    this.recordMetric('nodejs_heap_total', memoryUsage.heapTotal, 'bytes');\n    this.recordMetric('nodejs_external', memoryUsage.external, 'bytes');\n    this.recordMetric('nodejs_uptime', uptime, 'seconds');\n\n    return metrics;\n  }\n\n  /**\n   * Setup default performance thresholds\n   */\n  private setupDefaultThresholds(): void {\n    this.thresholds.set('cpu_usage', { warning: 70, critical: 90 });\n    this.thresholds.set('memory_usage', { warning: 80, critical: 95 });\n    this.thresholds.set('app_response_time', { warning: 1000, critical: 5000 });\n    this.thresholds.set('app_error_rate', { warning: 5, critical: 10 });\n    this.thresholds.set('app_queue_size', { warning: 100, critical: 500 });\n    this.thresholds.set('nodejs_heap_used', { warning: 1e9, critical: 2e9 }); // 1GB, 2GB\n  }\n\n  /**\n   * Check if a metric exceeds thresholds\n   */\n  private checkMetricThreshold(metricName: string, value: number): void {\n    const threshold = this.thresholds.get(metricName);\n    if (!threshold) return;\n\n    const alertId = `${metricName}_threshold`;\n    const existingAlert = this.alerts.get(alertId);\n\n    if (value >= threshold.critical) {\n      if (!existingAlert || existingAlert.severity !== 'critical') {\n        this.createAlert(alertId, 'critical', metricName, threshold.critical, value);\n      }\n    } else if (value >= threshold.warning) {\n      if (!existingAlert || existingAlert.severity !== 'high') {\n        this.createAlert(alertId, 'high', metricName, threshold.warning, value);\n      }\n    } else {\n      // Value is below thresholds, resolve alert if it exists\n      if (existingAlert && !existingAlert.resolved) {\n        existingAlert.resolved = true;\n        this.emit('alert_resolved', existingAlert);\n      }\n    }\n  }\n\n  /**\n   * Create a performance alert\n   */\n  private createAlert(id: string, severity: PerformanceAlert['severity'], metric: string, threshold: number, currentValue: number): void {\n    const alert: PerformanceAlert = {\n      id,\n      severity,\n      metric,\n      threshold,\n      currentValue,\n      message: `${metric} exceeded ${severity} threshold: ${currentValue} >= ${threshold}`,\n      timestamp: new Date(),\n      resolved: false\n    };\n\n    this.alerts.set(id, alert);\n    this.emit('alert', alert);\n  }\n\n  /**\n   * Check all active alerts\n   */\n  private checkAlerts(): void {\n    // This method can be extended to perform more complex alert logic\n    // For now, individual metric checks handle alert creation\n  }\n\n  /**\n   * Calculate requests per second\n   */\n  private calculateRequestsPerSecond(): number {\n    const requestMetrics = this.getMetrics('app_requests_per_second', 60);\n    if (requestMetrics.length === 0) return 0;\n    \n    const recent = requestMetrics.slice(-10); // Last 10 measurements\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Calculate average response time\n   */\n  private calculateAverageResponseTime(): number {\n    const responseMetrics = this.getMetrics('app_response_time', 60);\n    if (responseMetrics.length === 0) return 0;\n    \n    const recent = responseMetrics.slice(-10);\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Calculate error rate\n   */\n  private calculateErrorRate(): number {\n    const errorMetrics = this.getMetrics('app_error_rate', 60);\n    if (errorMetrics.length === 0) return 0;\n    \n    const recent = errorMetrics.slice(-10);\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Get active connections (placeholder)\n   */\n  private getActiveConnections(): number {\n    // This would be implemented based on your WebSocket/HTTP server\n    return 0;\n  }\n\n  /**\n   * Get queue size (placeholder)\n   */\n  private getQueueSize(): number {\n    // This would be implemented based on your queue system\n    return 0;\n  }\n\n  /**\n   * Calculate cache hit rate\n   */\n  private calculateCacheHitRate(): number {\n    const hitRate = this.cache.calculatedSize > 0 ? \n      (this.cache.calculatedSize - this.cache.size) / this.cache.calculatedSize * 100 : 0;\n    return Math.round(hitRate * 100) / 100;\n  }\n\n  /**\n   * Get database queries count (placeholder)\n   */\n  private getDatabaseQueries(): number {\n    // This would be implemented based on your database connection pool\n    return 0;\n  }\n\n  /**\n   * Detect memory leaks\n   */\n  private detectMemoryLeaks(): boolean {\n    const memoryMetrics = this.getMetrics('nodejs_heap_used', 30);\n    if (memoryMetrics.length < 10) return false;\n    \n    // Simple memory leak detection: check if memory usage is consistently increasing\n    const recent = memoryMetrics.slice(-10);\n    const trend = recent.reduce((sum, metric, index) => {\n      if (index === 0) return sum;\n      return sum + (metric.value - recent[index - 1].value);\n    }, 0);\n    \n    return trend > 0 && trend > recent[0].value * 0.1; // 10% increase trend\n  }\n\n  /**\n   * Determine overall system health\n   */\n  private determineSystemHealth(alerts: PerformanceAlert[]): 'good' | 'warning' | 'critical' {\n    if (alerts.some(alert => alert.severity === 'critical')) {\n      return 'critical';\n    }\n    if (alerts.some(alert => alert.severity === 'high' || alert.severity === 'medium')) {\n      return 'warning';\n    }\n    return 'good';\n  }\n\n  /**\n   * Get top metrics by recent activity\n   */\n  private getTopMetrics(limit: number): { name: string; value: number; unit: string }[] {\n    const topMetrics: { name: string; value: number; unit: string }[] = [];\n    \n    for (const [name, metrics] of this.metrics) {\n      if (metrics.length > 0) {\n        const latest = metrics[metrics.length - 1];\n        topMetrics.push({\n          name,\n          value: latest.value,\n          unit: latest.unit\n        });\n      }\n    }\n    \n    // Sort by value (descending) and take top N\n    return topMetrics\n      .sort((a, b) => b.value - a.value)\n      .slice(0, limit);\n  }\n\n  /**\n   * Export metrics to JSON\n   */\n  public exportMetrics(): string {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      uptime: Date.now() - this.startTime,\n      metrics: Object.fromEntries(this.metrics),\n      alerts: Array.from(this.alerts.values()),\n      thresholds: Object.fromEntries(this.thresholds),\n      summary: this.getPerformanceSummary()\n    };\n    \n    return JSON.stringify(exportData, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0f266e5dcf8bff40da22c8d8db434762632e724a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23f4s7g20b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23f4s7g20b();
var __createBinding =
/* istanbul ignore next */
(cov_23f4s7g20b().s[0]++,
/* istanbul ignore next */
(cov_23f4s7g20b().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_23f4s7g20b().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_23f4s7g20b().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_23f4s7g20b().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_23f4s7g20b().f[0]++;
  cov_23f4s7g20b().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_23f4s7g20b().b[2][0]++;
    cov_23f4s7g20b().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_23f4s7g20b().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_23f4s7g20b().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_23f4s7g20b().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[5][1]++,
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_23f4s7g20b().b[3][0]++;
    cov_23f4s7g20b().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_23f4s7g20b().f[1]++;
        cov_23f4s7g20b().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_23f4s7g20b().b[3][1]++;
  }
  cov_23f4s7g20b().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_23f4s7g20b().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_23f4s7g20b().f[2]++;
  cov_23f4s7g20b().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_23f4s7g20b().b[7][0]++;
    cov_23f4s7g20b().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_23f4s7g20b().b[7][1]++;
  }
  cov_23f4s7g20b().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_23f4s7g20b().s[11]++,
/* istanbul ignore next */
(cov_23f4s7g20b().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_23f4s7g20b().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_23f4s7g20b().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_23f4s7g20b().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_23f4s7g20b().f[3]++;
  cov_23f4s7g20b().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_23f4s7g20b().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_23f4s7g20b().f[4]++;
  cov_23f4s7g20b().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_23f4s7g20b().s[14]++,
/* istanbul ignore next */
(cov_23f4s7g20b().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_23f4s7g20b().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_23f4s7g20b().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_23f4s7g20b().f[5]++;
  cov_23f4s7g20b().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[6]++;
    cov_23f4s7g20b().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_23f4s7g20b().s[17]++, []);
      /* istanbul ignore next */
      cov_23f4s7g20b().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_23f4s7g20b().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_23f4s7g20b().b[12][0]++;
          cov_23f4s7g20b().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_23f4s7g20b().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_23f4s7g20b().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_23f4s7g20b().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[8]++;
    cov_23f4s7g20b().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[13][0]++;
      cov_23f4s7g20b().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[26]++, {});
    /* istanbul ignore next */
    cov_23f4s7g20b().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[15][0]++;
      cov_23f4s7g20b().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_23f4s7g20b().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_23f4s7g20b().b[16][0]++;
          cov_23f4s7g20b().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_23f4s7g20b().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[15][1]++;
    }
    cov_23f4s7g20b().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_23f4s7g20b().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_23f4s7g20b().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_23f4s7g20b().s[36]++;
exports.performanceMonitor = exports.PerformanceMonitor = void 0;
const perf_hooks_1 =
/* istanbul ignore next */
(cov_23f4s7g20b().s[37]++, require("perf_hooks"));
const events_1 =
/* istanbul ignore next */
(cov_23f4s7g20b().s[38]++, require("events"));
const os =
/* istanbul ignore next */
(cov_23f4s7g20b().s[39]++, __importStar(require("os")));
const lru_cache_1 =
/* istanbul ignore next */
(cov_23f4s7g20b().s[40]++, require("lru-cache"));
class PerformanceMonitor extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[9]++;
    cov_23f4s7g20b().s[41]++;
    super();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[42]++;
    this.observer = null;
    /* istanbul ignore next */
    cov_23f4s7g20b().s[43]++;
    this.intervalId = null;
    /* istanbul ignore next */
    cov_23f4s7g20b().s[44]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_23f4s7g20b().s[45]++;
    this.lastSystemMetrics = null;
    /* istanbul ignore next */
    cov_23f4s7g20b().s[46]++;
    this.metrics = new Map();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[47]++;
    this.alerts = new Map();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[48]++;
    this.thresholds = new Map();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[49]++;
    this.startTime = Date.now();
    // Initialize cache for storing computed metrics
    /* istanbul ignore next */
    cov_23f4s7g20b().s[50]++;
    this.cache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 5 // 5 minutes
    });
    // Set default thresholds
    /* istanbul ignore next */
    cov_23f4s7g20b().s[51]++;
    this.setupDefaultThresholds();
    // Initialize performance observer
    /* istanbul ignore next */
    cov_23f4s7g20b().s[52]++;
    this.initializePerformanceObserver();
  }
  /**
   * Start monitoring system and application performance
   */
  startMonitoring(intervalMs =
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[17][0]++, 5000)) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[10]++;
    cov_23f4s7g20b().s[53]++;
    if (this.isMonitoring) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[18][0]++;
      cov_23f4s7g20b().s[54]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[18][1]++;
    }
    cov_23f4s7g20b().s[55]++;
    this.isMonitoring = true;
    // Start collecting metrics at specified interval
    /* istanbul ignore next */
    cov_23f4s7g20b().s[56]++;
    this.intervalId = setInterval(() => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[11]++;
      cov_23f4s7g20b().s[57]++;
      this.collectSystemMetrics();
      /* istanbul ignore next */
      cov_23f4s7g20b().s[58]++;
      this.collectApplicationMetrics();
      /* istanbul ignore next */
      cov_23f4s7g20b().s[59]++;
      this.checkAlerts();
    }, intervalMs);
    // Start Node.js performance monitoring
    /* istanbul ignore next */
    cov_23f4s7g20b().s[60]++;
    if (this.observer) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[19][0]++;
      cov_23f4s7g20b().s[61]++;
      this.observer.observe({
        entryTypes: ['measure', 'mark', 'resource']
      });
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[19][1]++;
    }
    cov_23f4s7g20b().s[62]++;
    console.log(`Performance monitoring started with ${intervalMs}ms interval`);
  }
  /**
   * Stop monitoring
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[12]++;
    cov_23f4s7g20b().s[63]++;
    if (!this.isMonitoring) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[20][0]++;
      cov_23f4s7g20b().s[64]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[20][1]++;
    }
    cov_23f4s7g20b().s[65]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_23f4s7g20b().s[66]++;
    if (this.intervalId) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[21][0]++;
      cov_23f4s7g20b().s[67]++;
      clearInterval(this.intervalId);
      /* istanbul ignore next */
      cov_23f4s7g20b().s[68]++;
      this.intervalId = null;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[21][1]++;
    }
    cov_23f4s7g20b().s[69]++;
    if (this.observer) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[22][0]++;
      cov_23f4s7g20b().s[70]++;
      this.observer.disconnect();
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[22][1]++;
    }
    cov_23f4s7g20b().s[71]++;
    console.log('Performance monitoring stopped');
  }
  /**
   * Record a custom metric
   */
  recordMetric(name, value, unit =
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[23][0]++, ''), tags) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[13]++;
    const metric =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[72]++, {
      name,
      value,
      unit,
      timestamp: new Date(),
      tags
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[73]++;
    if (!this.metrics.has(name)) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[24][0]++;
      cov_23f4s7g20b().s[74]++;
      this.metrics.set(name, []);
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[24][1]++;
    }
    const metricArray =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[75]++, this.metrics.get(name));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[76]++;
    metricArray.push(metric);
    // Keep only last 1000 metrics per name
    /* istanbul ignore next */
    cov_23f4s7g20b().s[77]++;
    if (metricArray.length > 1000) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[25][0]++;
      cov_23f4s7g20b().s[78]++;
      metricArray.shift();
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[25][1]++;
    }
    // Check if this metric triggers an alert
    cov_23f4s7g20b().s[79]++;
    this.checkMetricThreshold(name, value);
    // Emit metric event
    /* istanbul ignore next */
    cov_23f4s7g20b().s[80]++;
    this.emit('metric', metric);
  }
  /**
   * Get metrics for a specific name
   */
  getMetrics(name, limit =
  /* istanbul ignore next */
  (cov_23f4s7g20b().b[26][0]++, 100)) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[14]++;
    const metrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[81]++,
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[27][0]++, this.metrics.get(name)) ||
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[27][1]++, []));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[82]++;
    return metrics.slice(-limit);
  }
  /**
   * Get all metric names
   */
  getMetricNames() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[15]++;
    cov_23f4s7g20b().s[83]++;
    return Array.from(this.metrics.keys());
  }
  /**
   * Get current system metrics
   */
  async getSystemMetrics() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[16]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[84]++, 'system_metrics');
    const cached =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[85]++, this.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[86]++;
    if (cached) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[28][0]++;
      cov_23f4s7g20b().s[87]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[28][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[88]++, await this.collectSystemMetrics());
    /* istanbul ignore next */
    cov_23f4s7g20b().s[89]++;
    this.cache.set(cacheKey, metrics, {
      ttl: 1000 * 10
    }); // 10 seconds cache
    /* istanbul ignore next */
    cov_23f4s7g20b().s[90]++;
    return metrics;
  }
  /**
   * Get current application metrics
   */
  getApplicationMetrics() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[17]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[91]++, 'app_metrics');
    const cached =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[92]++, this.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[93]++;
    if (cached) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[29][0]++;
      cov_23f4s7g20b().s[94]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[29][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[95]++, this.collectApplicationMetrics());
    /* istanbul ignore next */
    cov_23f4s7g20b().s[96]++;
    this.cache.set(cacheKey, metrics, {
      ttl: 1000 * 5
    }); // 5 seconds cache
    /* istanbul ignore next */
    cov_23f4s7g20b().s[97]++;
    return metrics;
  }
  /**
   * Get active alerts
   */
  getActiveAlerts() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[18]++;
    cov_23f4s7g20b().s[98]++;
    return Array.from(this.alerts.values()).filter(alert => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[19]++;
      cov_23f4s7g20b().s[99]++;
      return !alert.resolved;
    });
  }
  /**
   * Get performance summary
   */
  getPerformanceSummary() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[20]++;
    const activeAlerts =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[100]++, this.getActiveAlerts());
    const systemHealth =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[101]++, this.determineSystemHealth(activeAlerts));
    const uptime =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[102]++, Date.now() - this.startTime);
    // Calculate top metrics by recent activity
    const topMetrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[103]++, this.getTopMetrics(5));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[104]++;
    return {
      systemHealth,
      uptime,
      totalMetrics: this.metrics.size,
      activeAlerts: activeAlerts.length,
      topMetrics
    };
  }
  /**
   * Set custom threshold for a metric
   */
  setThreshold(metricName, warning, critical) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[21]++;
    cov_23f4s7g20b().s[105]++;
    this.thresholds.set(metricName, {
      warning,
      critical
    });
  }
  /**
   * Clear all metrics and alerts
   */
  clear() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[22]++;
    cov_23f4s7g20b().s[106]++;
    this.metrics.clear();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[107]++;
    this.alerts.clear();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[108]++;
    this.cache.clear();
    /* istanbul ignore next */
    cov_23f4s7g20b().s[109]++;
    console.log('Performance metrics cleared');
  }
  /**
   * Get performance statistics
   */
  getStatistics() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[23]++;
    const stats =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[110]++, {});
    /* istanbul ignore next */
    cov_23f4s7g20b().s[111]++;
    for (const [name, metrics] of this.metrics) {
      /* istanbul ignore next */
      cov_23f4s7g20b().s[112]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_23f4s7g20b().b[30][0]++;
        const values =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[113]++, metrics.map(m => {
          /* istanbul ignore next */
          cov_23f4s7g20b().f[24]++;
          cov_23f4s7g20b().s[114]++;
          return m.value;
        }));
        const avg =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[115]++, values.reduce((sum, val) => {
          /* istanbul ignore next */
          cov_23f4s7g20b().f[25]++;
          cov_23f4s7g20b().s[116]++;
          return sum + val;
        }, 0) / values.length);
        const max =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[117]++, Math.max(...values));
        const min =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[118]++, Math.min(...values));
        /* istanbul ignore next */
        cov_23f4s7g20b().s[119]++;
        stats[name] = {
          avg: Math.round(avg * 100) / 100,
          max: Math.round(max * 100) / 100,
          min: Math.round(min * 100) / 100,
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_23f4s7g20b().b[30][1]++;
      }
    }
    /* istanbul ignore next */
    cov_23f4s7g20b().s[120]++;
    return stats;
  }
  /**
   * Initialize performance observer
   */
  initializePerformanceObserver() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[26]++;
    cov_23f4s7g20b().s[121]++;
    try {
      /* istanbul ignore next */
      cov_23f4s7g20b().s[122]++;
      this.observer = new perf_hooks_1.PerformanceObserver(list => {
        /* istanbul ignore next */
        cov_23f4s7g20b().f[27]++;
        cov_23f4s7g20b().s[123]++;
        for (const entry of list.getEntries()) {
          /* istanbul ignore next */
          cov_23f4s7g20b().s[124]++;
          this.recordMetric(`nodejs_${entry.entryType}_${entry.name}`,
          /* istanbul ignore next */
          (cov_23f4s7g20b().b[31][0]++, entry.duration) ||
          /* istanbul ignore next */
          (cov_23f4s7g20b().b[31][1]++, 0), 'ms', {
            type: entry.entryType
          });
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_23f4s7g20b().s[125]++;
      console.warn('Failed to initialize performance observer:', error.message);
    }
  }
  /**
   * Collect system metrics
   */
  async collectSystemMetrics() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[28]++;
    const cpuUsage =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[126]++, os.loadavg()[0] / os.cpus().length);
    const totalMemory =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[127]++, os.totalmem());
    const freeMemory =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[128]++, os.freemem());
    const usedMemory =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[129]++, totalMemory - freeMemory);
    const metrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[130]++, {
      cpu: {
        usage: Math.round(cpuUsage * 100),
        loadAverage: os.loadavg(),
        cores: os.cpus().length
      },
      memory: {
        total: totalMemory,
        used: usedMemory,
        free: freeMemory,
        cached: 0,
        // Not easily available in Node.js
        utilization: Math.round(usedMemory / totalMemory * 100)
      },
      disk: {
        total: 0,
        // Would need additional library for disk metrics
        used: 0,
        free: 0,
        utilization: 0
      },
      network: {
        bytesIn: 0,
        // Would need additional library for network metrics
        bytesOut: 0,
        packetsIn: 0,
        packetsOut: 0
      }
    });
    // Record individual metrics
    /* istanbul ignore next */
    cov_23f4s7g20b().s[131]++;
    this.recordMetric('cpu_usage', metrics.cpu.usage, '%');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[132]++;
    this.recordMetric('memory_usage', metrics.memory.utilization, '%');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[133]++;
    this.recordMetric('memory_used', metrics.memory.used, 'bytes');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[134]++;
    this.recordMetric('memory_free', metrics.memory.free, 'bytes');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[135]++;
    this.lastSystemMetrics = metrics;
    /* istanbul ignore next */
    cov_23f4s7g20b().s[136]++;
    return metrics;
  }
  /**
   * Collect application-specific metrics
   */
  collectApplicationMetrics() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[29]++;
    const memoryUsage =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[137]++, process.memoryUsage());
    const uptime =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[138]++, process.uptime());
    const metrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[139]++, {
      requestsPerSecond: this.calculateRequestsPerSecond(),
      averageResponseTime: this.calculateAverageResponseTime(),
      errorRate: this.calculateErrorRate(),
      activeConnections: this.getActiveConnections(),
      queueSize: this.getQueueSize(),
      cacheHitRate: this.calculateCacheHitRate(),
      databaseQueries: this.getDatabaseQueries(),
      memoryLeaks: this.detectMemoryLeaks()
    });
    // Record individual metrics
    /* istanbul ignore next */
    cov_23f4s7g20b().s[140]++;
    this.recordMetric('app_requests_per_second', metrics.requestsPerSecond, 'rps');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[141]++;
    this.recordMetric('app_response_time', metrics.averageResponseTime, 'ms');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[142]++;
    this.recordMetric('app_error_rate', metrics.errorRate, '%');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[143]++;
    this.recordMetric('app_active_connections', metrics.activeConnections, 'connections');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[144]++;
    this.recordMetric('app_queue_size', metrics.queueSize, 'items');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[145]++;
    this.recordMetric('app_cache_hit_rate', metrics.cacheHitRate, '%');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[146]++;
    this.recordMetric('nodejs_heap_used', memoryUsage.heapUsed, 'bytes');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[147]++;
    this.recordMetric('nodejs_heap_total', memoryUsage.heapTotal, 'bytes');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[148]++;
    this.recordMetric('nodejs_external', memoryUsage.external, 'bytes');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[149]++;
    this.recordMetric('nodejs_uptime', uptime, 'seconds');
    /* istanbul ignore next */
    cov_23f4s7g20b().s[150]++;
    return metrics;
  }
  /**
   * Setup default performance thresholds
   */
  setupDefaultThresholds() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[30]++;
    cov_23f4s7g20b().s[151]++;
    this.thresholds.set('cpu_usage', {
      warning: 70,
      critical: 90
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[152]++;
    this.thresholds.set('memory_usage', {
      warning: 80,
      critical: 95
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[153]++;
    this.thresholds.set('app_response_time', {
      warning: 1000,
      critical: 5000
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[154]++;
    this.thresholds.set('app_error_rate', {
      warning: 5,
      critical: 10
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[155]++;
    this.thresholds.set('app_queue_size', {
      warning: 100,
      critical: 500
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[156]++;
    this.thresholds.set('nodejs_heap_used', {
      warning: 1e9,
      critical: 2e9
    }); // 1GB, 2GB
  }
  /**
   * Check if a metric exceeds thresholds
   */
  checkMetricThreshold(metricName, value) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[31]++;
    const threshold =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[157]++, this.thresholds.get(metricName));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[158]++;
    if (!threshold) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[32][0]++;
      cov_23f4s7g20b().s[159]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[32][1]++;
    }
    const alertId =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[160]++, `${metricName}_threshold`);
    const existingAlert =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[161]++, this.alerts.get(alertId));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[162]++;
    if (value >= threshold.critical) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[33][0]++;
      cov_23f4s7g20b().s[163]++;
      if (
      /* istanbul ignore next */
      (cov_23f4s7g20b().b[35][0]++, !existingAlert) ||
      /* istanbul ignore next */
      (cov_23f4s7g20b().b[35][1]++, existingAlert.severity !== 'critical')) {
        /* istanbul ignore next */
        cov_23f4s7g20b().b[34][0]++;
        cov_23f4s7g20b().s[164]++;
        this.createAlert(alertId, 'critical', metricName, threshold.critical, value);
      } else
      /* istanbul ignore next */
      {
        cov_23f4s7g20b().b[34][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[33][1]++;
      cov_23f4s7g20b().s[165]++;
      if (value >= threshold.warning) {
        /* istanbul ignore next */
        cov_23f4s7g20b().b[36][0]++;
        cov_23f4s7g20b().s[166]++;
        if (
        /* istanbul ignore next */
        (cov_23f4s7g20b().b[38][0]++, !existingAlert) ||
        /* istanbul ignore next */
        (cov_23f4s7g20b().b[38][1]++, existingAlert.severity !== 'high')) {
          /* istanbul ignore next */
          cov_23f4s7g20b().b[37][0]++;
          cov_23f4s7g20b().s[167]++;
          this.createAlert(alertId, 'high', metricName, threshold.warning, value);
        } else
        /* istanbul ignore next */
        {
          cov_23f4s7g20b().b[37][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_23f4s7g20b().b[36][1]++;
        cov_23f4s7g20b().s[168]++;
        // Value is below thresholds, resolve alert if it exists
        if (
        /* istanbul ignore next */
        (cov_23f4s7g20b().b[40][0]++, existingAlert) &&
        /* istanbul ignore next */
        (cov_23f4s7g20b().b[40][1]++, !existingAlert.resolved)) {
          /* istanbul ignore next */
          cov_23f4s7g20b().b[39][0]++;
          cov_23f4s7g20b().s[169]++;
          existingAlert.resolved = true;
          /* istanbul ignore next */
          cov_23f4s7g20b().s[170]++;
          this.emit('alert_resolved', existingAlert);
        } else
        /* istanbul ignore next */
        {
          cov_23f4s7g20b().b[39][1]++;
        }
      }
    }
  }
  /**
   * Create a performance alert
   */
  createAlert(id, severity, metric, threshold, currentValue) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[32]++;
    const alert =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[171]++, {
      id,
      severity,
      metric,
      threshold,
      currentValue,
      message: `${metric} exceeded ${severity} threshold: ${currentValue} >= ${threshold}`,
      timestamp: new Date(),
      resolved: false
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[172]++;
    this.alerts.set(id, alert);
    /* istanbul ignore next */
    cov_23f4s7g20b().s[173]++;
    this.emit('alert', alert);
  }
  /**
   * Check all active alerts
   */
  checkAlerts() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[33]++;
  } // This method can be extended to perform more complex alert logic
  // For now, individual metric checks handle alert creation
  /**
   * Calculate requests per second
   */
  calculateRequestsPerSecond() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[34]++;
    const requestMetrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[174]++, this.getMetrics('app_requests_per_second', 60));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[175]++;
    if (requestMetrics.length === 0) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[41][0]++;
      cov_23f4s7g20b().s[176]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[41][1]++;
    }
    const recent =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[177]++, requestMetrics.slice(-10)); // Last 10 measurements
    /* istanbul ignore next */
    cov_23f4s7g20b().s[178]++;
    return recent.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[35]++;
      cov_23f4s7g20b().s[179]++;
      return sum + m.value;
    }, 0) / recent.length;
  }
  /**
   * Calculate average response time
   */
  calculateAverageResponseTime() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[36]++;
    const responseMetrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[180]++, this.getMetrics('app_response_time', 60));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[181]++;
    if (responseMetrics.length === 0) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[42][0]++;
      cov_23f4s7g20b().s[182]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[42][1]++;
    }
    const recent =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[183]++, responseMetrics.slice(-10));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[184]++;
    return recent.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[37]++;
      cov_23f4s7g20b().s[185]++;
      return sum + m.value;
    }, 0) / recent.length;
  }
  /**
   * Calculate error rate
   */
  calculateErrorRate() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[38]++;
    const errorMetrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[186]++, this.getMetrics('app_error_rate', 60));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[187]++;
    if (errorMetrics.length === 0) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[43][0]++;
      cov_23f4s7g20b().s[188]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[43][1]++;
    }
    const recent =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[189]++, errorMetrics.slice(-10));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[190]++;
    return recent.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[39]++;
      cov_23f4s7g20b().s[191]++;
      return sum + m.value;
    }, 0) / recent.length;
  }
  /**
   * Get active connections (placeholder)
   */
  getActiveConnections() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[40]++;
    cov_23f4s7g20b().s[192]++;
    // This would be implemented based on your WebSocket/HTTP server
    return 0;
  }
  /**
   * Get queue size (placeholder)
   */
  getQueueSize() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[41]++;
    cov_23f4s7g20b().s[193]++;
    // This would be implemented based on your queue system
    return 0;
  }
  /**
   * Calculate cache hit rate
   */
  calculateCacheHitRate() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[42]++;
    const hitRate =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[194]++, this.cache.calculatedSize > 0 ?
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[44][0]++, (this.cache.calculatedSize - this.cache.size) / this.cache.calculatedSize * 100) :
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[44][1]++, 0));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[195]++;
    return Math.round(hitRate * 100) / 100;
  }
  /**
   * Get database queries count (placeholder)
   */
  getDatabaseQueries() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[43]++;
    cov_23f4s7g20b().s[196]++;
    // This would be implemented based on your database connection pool
    return 0;
  }
  /**
   * Detect memory leaks
   */
  detectMemoryLeaks() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[44]++;
    const memoryMetrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[197]++, this.getMetrics('nodejs_heap_used', 30));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[198]++;
    if (memoryMetrics.length < 10) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[45][0]++;
      cov_23f4s7g20b().s[199]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[45][1]++;
    }
    // Simple memory leak detection: check if memory usage is consistently increasing
    const recent =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[200]++, memoryMetrics.slice(-10));
    const trend =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[201]++, recent.reduce((sum, metric, index) => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[45]++;
      cov_23f4s7g20b().s[202]++;
      if (index === 0) {
        /* istanbul ignore next */
        cov_23f4s7g20b().b[46][0]++;
        cov_23f4s7g20b().s[203]++;
        return sum;
      } else
      /* istanbul ignore next */
      {
        cov_23f4s7g20b().b[46][1]++;
      }
      cov_23f4s7g20b().s[204]++;
      return sum + (metric.value - recent[index - 1].value);
    }, 0));
    /* istanbul ignore next */
    cov_23f4s7g20b().s[205]++;
    return /* istanbul ignore next */(cov_23f4s7g20b().b[47][0]++, trend > 0) &&
    /* istanbul ignore next */
    (cov_23f4s7g20b().b[47][1]++, trend > recent[0].value * 0.1); // 10% increase trend
  }
  /**
   * Determine overall system health
   */
  determineSystemHealth(alerts) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[46]++;
    cov_23f4s7g20b().s[206]++;
    if (alerts.some(alert => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[47]++;
      cov_23f4s7g20b().s[207]++;
      return alert.severity === 'critical';
    })) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[48][0]++;
      cov_23f4s7g20b().s[208]++;
      return 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[48][1]++;
    }
    cov_23f4s7g20b().s[209]++;
    if (alerts.some(alert => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[48]++;
      cov_23f4s7g20b().s[210]++;
      return /* istanbul ignore next */(cov_23f4s7g20b().b[50][0]++, alert.severity === 'high') ||
      /* istanbul ignore next */
      (cov_23f4s7g20b().b[50][1]++, alert.severity === 'medium');
    })) {
      /* istanbul ignore next */
      cov_23f4s7g20b().b[49][0]++;
      cov_23f4s7g20b().s[211]++;
      return 'warning';
    } else
    /* istanbul ignore next */
    {
      cov_23f4s7g20b().b[49][1]++;
    }
    cov_23f4s7g20b().s[212]++;
    return 'good';
  }
  /**
   * Get top metrics by recent activity
   */
  getTopMetrics(limit) {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[49]++;
    const topMetrics =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[213]++, []);
    /* istanbul ignore next */
    cov_23f4s7g20b().s[214]++;
    for (const [name, metrics] of this.metrics) {
      /* istanbul ignore next */
      cov_23f4s7g20b().s[215]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_23f4s7g20b().b[51][0]++;
        const latest =
        /* istanbul ignore next */
        (cov_23f4s7g20b().s[216]++, metrics[metrics.length - 1]);
        /* istanbul ignore next */
        cov_23f4s7g20b().s[217]++;
        topMetrics.push({
          name,
          value: latest.value,
          unit: latest.unit
        });
      } else
      /* istanbul ignore next */
      {
        cov_23f4s7g20b().b[51][1]++;
      }
    }
    // Sort by value (descending) and take top N
    /* istanbul ignore next */
    cov_23f4s7g20b().s[218]++;
    return topMetrics.sort((a, b) => {
      /* istanbul ignore next */
      cov_23f4s7g20b().f[50]++;
      cov_23f4s7g20b().s[219]++;
      return b.value - a.value;
    }).slice(0, limit);
  }
  /**
   * Export metrics to JSON
   */
  exportMetrics() {
    /* istanbul ignore next */
    cov_23f4s7g20b().f[51]++;
    const exportData =
    /* istanbul ignore next */
    (cov_23f4s7g20b().s[220]++, {
      timestamp: new Date().toISOString(),
      uptime: Date.now() - this.startTime,
      metrics: Object.fromEntries(this.metrics),
      alerts: Array.from(this.alerts.values()),
      thresholds: Object.fromEntries(this.thresholds),
      summary: this.getPerformanceSummary()
    });
    /* istanbul ignore next */
    cov_23f4s7g20b().s[221]++;
    return JSON.stringify(exportData, null, 2);
  }
}
/* istanbul ignore next */
cov_23f4s7g20b().s[222]++;
exports.PerformanceMonitor = PerformanceMonitor;
// Export singleton instance
/* istanbul ignore next */
cov_23f4s7g20b().s[223]++;
exports.performanceMonitor = new PerformanceMonitor();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,