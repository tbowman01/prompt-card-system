{"version":3,"names":["perf_hooks_1","cov_23f4s7g20b","s","require","events_1","os","__importStar","lru_cache_1","PerformanceMonitor","EventEmitter","constructor","f","observer","intervalId","isMonitoring","lastSystemMetrics","metrics","Map","alerts","thresholds","startTime","Date","now","cache","LRUCache","max","ttl","setupDefaultThresholds","initializePerformanceObserver","startMonitoring","intervalMs","b","setInterval","collectSystemMetrics","collectApplicationMetrics","checkAlerts","observe","entryTypes","console","log","stopMonitoring","clearInterval","disconnect","recordMetric","name","value","unit","tags","metric","timestamp","has","set","metricArray","get","push","length","shift","checkMetricThreshold","emit","getMetrics","limit","slice","getMetricNames","Array","from","keys","getSystemMetrics","cacheKey","cached","getApplicationMetrics","getActiveAlerts","values","filter","alert","resolved","getPerformanceSummary","activeAlerts","systemHealth","determineSystemHealth","uptime","topMetrics","getTopMetrics","totalMetrics","size","setThreshold","metricName","warning","critical","clear","getStatistics","stats","map","m","avg","reduce","sum","val","Math","min","round","count","PerformanceObserver","list","entry","getEntries","entryType","duration","type","error","warn","message","cpuUsage","loadavg","cpus","totalMemory","totalmem","freeMemory","freemem","usedMemory","cpu","usage","loadAverage","cores","memory","total","used","free","utilization","disk","network","bytesIn","bytesOut","packetsIn","packetsOut","memoryUsage","process","requestsPerSecond","calculateRequestsPerSecond","averageResponseTime","calculateAverageResponseTime","errorRate","calculateErrorRate","activeConnections","getActiveConnections","queueSize","getQueueSize","cacheHitRate","calculateCacheHitRate","databaseQueries","getDatabaseQueries","memoryLeaks","detectMemoryLeaks","heapUsed","heapTotal","external","threshold","alertId","existingAlert","severity","createAlert","id","currentValue","requestMetrics","recent","responseMetrics","errorMetrics","hitRate","calculatedSize","memoryMetrics","trend","index","some","latest","sort","a","exportMetrics","exportData","toISOString","Object","fromEntries","summary","JSON","stringify","exports","performanceMonitor"],"sources":["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceMonitor.ts"],"sourcesContent":["import { performance, PerformanceObserver } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { promisify } from 'util';\nimport * as os from 'os';\nimport { LRUCache } from 'lru-cache';\n\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  timestamp: Date;\n  tags?: Record<string, string>;\n}\n\nexport interface SystemMetrics {\n  cpu: {\n    usage: number;\n    loadAverage: number[];\n    cores: number;\n  };\n  memory: {\n    total: number;\n    used: number;\n    free: number;\n    cached: number;\n    utilization: number;\n  };\n  disk: {\n    total: number;\n    used: number;\n    free: number;\n    utilization: number;\n  };\n  network: {\n    bytesIn: number;\n    bytesOut: number;\n    packetsIn: number;\n    packetsOut: number;\n  };\n}\n\nexport interface ApplicationMetrics {\n  requestsPerSecond: number;\n  averageResponseTime: number;\n  errorRate: number;\n  activeConnections: number;\n  queueSize: number;\n  cacheHitRate: number;\n  databaseQueries: number;\n  memoryLeaks: boolean;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  metric: string;\n  threshold: number;\n  currentValue: number;\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n}\n\nexport class PerformanceMonitor extends EventEmitter {\n  private metrics: Map<string, PerformanceMetric[]>;\n  private alerts: Map<string, PerformanceAlert>;\n  private thresholds: Map<string, { warning: number; critical: number }>;\n  private cache: LRUCache<string, any>;\n  private observer: PerformanceObserver | null = null;\n  private intervalId: NodeJS.Timeout | null = null;\n  private isMonitoring: boolean = false;\n  private startTime: number;\n  private lastSystemMetrics: SystemMetrics | null = null;\n\n  constructor() {\n    super();\n    this.metrics = new Map();\n    this.alerts = new Map();\n    this.thresholds = new Map();\n    this.startTime = Date.now();\n    \n    // Initialize cache for storing computed metrics\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n    \n    // Set default thresholds\n    this.setupDefaultThresholds();\n    \n    // Initialize performance observer\n    this.initializePerformanceObserver();\n  }\n\n  /**\n   * Start monitoring system and application performance\n   */\n  public startMonitoring(intervalMs: number = 5000): void {\n    if (this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = true;\n    \n    // Start collecting metrics at specified interval\n    this.intervalId = setInterval(() => {\n      this.collectSystemMetrics();\n      this.collectApplicationMetrics();\n      this.checkAlerts();\n    }, intervalMs);\n\n    // Start Node.js performance monitoring\n    if (this.observer) {\n      this.observer.observe({ entryTypes: ['measure', 'mark', 'resource'] });\n    }\n\n    console.log(`Performance monitoring started with ${intervalMs}ms interval`);\n  }\n\n  /**\n   * Stop monitoring\n   */\n  public stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.isMonitoring = false;\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    console.log('Performance monitoring stopped');\n  }\n\n  /**\n   * Record a custom metric\n   */\n  public recordMetric(name: string, value: number, unit: string = '', tags?: Record<string, string>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date(),\n      tags\n    };\n\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n\n    const metricArray = this.metrics.get(name)!;\n    metricArray.push(metric);\n\n    // Keep only last 1000 metrics per name\n    if (metricArray.length > 1000) {\n      metricArray.shift();\n    }\n\n    // Check if this metric triggers an alert\n    this.checkMetricThreshold(name, value);\n    \n    // Emit metric event\n    this.emit('metric', metric);\n  }\n\n  /**\n   * Get metrics for a specific name\n   */\n  public getMetrics(name: string, limit: number = 100): PerformanceMetric[] {\n    const metrics = this.metrics.get(name) || [];\n    return metrics.slice(-limit);\n  }\n\n  /**\n   * Get all metric names\n   */\n  public getMetricNames(): string[] {\n    return Array.from(this.metrics.keys());\n  }\n\n  /**\n   * Get current system metrics\n   */\n  public async getSystemMetrics(): Promise<SystemMetrics> {\n    const cacheKey = 'system_metrics';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const metrics = await this.collectSystemMetrics();\n    this.cache.set(cacheKey, metrics, { ttl: 1000 * 10 }); // 10 seconds cache\n    \n    return metrics;\n  }\n\n  /**\n   * Get current application metrics\n   */\n  public getApplicationMetrics(): ApplicationMetrics {\n    const cacheKey = 'app_metrics';\n    const cached = this.cache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    const metrics = this.collectApplicationMetrics();\n    this.cache.set(cacheKey, metrics, { ttl: 1000 * 5 }); // 5 seconds cache\n    \n    return metrics;\n  }\n\n  /**\n   * Get active alerts\n   */\n  public getActiveAlerts(): PerformanceAlert[] {\n    return Array.from(this.alerts.values()).filter(alert => !alert.resolved);\n  }\n\n  /**\n   * Get performance summary\n   */\n  public getPerformanceSummary(): {\n    systemHealth: 'good' | 'warning' | 'critical';\n    uptime: number;\n    totalMetrics: number;\n    activeAlerts: number;\n    topMetrics: { name: string; value: number; unit: string }[];\n  } {\n    const activeAlerts = this.getActiveAlerts();\n    const systemHealth = this.determineSystemHealth(activeAlerts);\n    const uptime = Date.now() - this.startTime;\n    \n    // Calculate top metrics by recent activity\n    const topMetrics = this.getTopMetrics(5);\n    \n    return {\n      systemHealth,\n      uptime,\n      totalMetrics: this.metrics.size,\n      activeAlerts: activeAlerts.length,\n      topMetrics\n    };\n  }\n\n  /**\n   * Set custom threshold for a metric\n   */\n  public setThreshold(metricName: string, warning: number, critical: number): void {\n    this.thresholds.set(metricName, { warning, critical });\n  }\n\n  /**\n   * Clear all metrics and alerts\n   */\n  public clear(): void {\n    this.metrics.clear();\n    this.alerts.clear();\n    this.cache.clear();\n    console.log('Performance metrics cleared');\n  }\n\n  /**\n   * Get performance statistics\n   */\n  public getStatistics(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [name, metrics] of this.metrics) {\n      if (metrics.length > 0) {\n        const values = metrics.map(m => m.value);\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const max = Math.max(...values);\n        const min = Math.min(...values);\n        \n        stats[name] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Initialize performance observer\n   */\n  private initializePerformanceObserver(): void {\n    try {\n      this.observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          this.recordMetric(\n            `nodejs_${entry.entryType}_${entry.name}`,\n            entry.duration || 0,\n            'ms',\n            { type: entry.entryType }\n          );\n        }\n      });\n    } catch (error) {\n      console.warn('Failed to initialize performance observer:', error.message);\n    }\n  }\n\n  /**\n   * Collect system metrics\n   */\n  private async collectSystemMetrics(): Promise<SystemMetrics> {\n    const cpuUsage = os.loadavg()[0] / os.cpus().length;\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    \n    const metrics: SystemMetrics = {\n      cpu: {\n        usage: Math.round(cpuUsage * 100),\n        loadAverage: os.loadavg(),\n        cores: os.cpus().length\n      },\n      memory: {\n        total: totalMemory,\n        used: usedMemory,\n        free: freeMemory,\n        cached: 0, // Not easily available in Node.js\n        utilization: Math.round((usedMemory / totalMemory) * 100)\n      },\n      disk: {\n        total: 0, // Would need additional library for disk metrics\n        used: 0,\n        free: 0,\n        utilization: 0\n      },\n      network: {\n        bytesIn: 0, // Would need additional library for network metrics\n        bytesOut: 0,\n        packetsIn: 0,\n        packetsOut: 0\n      }\n    };\n\n    // Record individual metrics\n    this.recordMetric('cpu_usage', metrics.cpu.usage, '%');\n    this.recordMetric('memory_usage', metrics.memory.utilization, '%');\n    this.recordMetric('memory_used', metrics.memory.used, 'bytes');\n    this.recordMetric('memory_free', metrics.memory.free, 'bytes');\n    \n    this.lastSystemMetrics = metrics;\n    return metrics;\n  }\n\n  /**\n   * Collect application-specific metrics\n   */\n  private collectApplicationMetrics(): ApplicationMetrics {\n    const memoryUsage = process.memoryUsage();\n    const uptime = process.uptime();\n    \n    const metrics: ApplicationMetrics = {\n      requestsPerSecond: this.calculateRequestsPerSecond(),\n      averageResponseTime: this.calculateAverageResponseTime(),\n      errorRate: this.calculateErrorRate(),\n      activeConnections: this.getActiveConnections(),\n      queueSize: this.getQueueSize(),\n      cacheHitRate: this.calculateCacheHitRate(),\n      databaseQueries: this.getDatabaseQueries(),\n      memoryLeaks: this.detectMemoryLeaks()\n    };\n\n    // Record individual metrics\n    this.recordMetric('app_requests_per_second', metrics.requestsPerSecond, 'rps');\n    this.recordMetric('app_response_time', metrics.averageResponseTime, 'ms');\n    this.recordMetric('app_error_rate', metrics.errorRate, '%');\n    this.recordMetric('app_active_connections', metrics.activeConnections, 'connections');\n    this.recordMetric('app_queue_size', metrics.queueSize, 'items');\n    this.recordMetric('app_cache_hit_rate', metrics.cacheHitRate, '%');\n    this.recordMetric('nodejs_heap_used', memoryUsage.heapUsed, 'bytes');\n    this.recordMetric('nodejs_heap_total', memoryUsage.heapTotal, 'bytes');\n    this.recordMetric('nodejs_external', memoryUsage.external, 'bytes');\n    this.recordMetric('nodejs_uptime', uptime, 'seconds');\n\n    return metrics;\n  }\n\n  /**\n   * Setup default performance thresholds\n   */\n  private setupDefaultThresholds(): void {\n    this.thresholds.set('cpu_usage', { warning: 70, critical: 90 });\n    this.thresholds.set('memory_usage', { warning: 80, critical: 95 });\n    this.thresholds.set('app_response_time', { warning: 1000, critical: 5000 });\n    this.thresholds.set('app_error_rate', { warning: 5, critical: 10 });\n    this.thresholds.set('app_queue_size', { warning: 100, critical: 500 });\n    this.thresholds.set('nodejs_heap_used', { warning: 1e9, critical: 2e9 }); // 1GB, 2GB\n  }\n\n  /**\n   * Check if a metric exceeds thresholds\n   */\n  private checkMetricThreshold(metricName: string, value: number): void {\n    const threshold = this.thresholds.get(metricName);\n    if (!threshold) return;\n\n    const alertId = `${metricName}_threshold`;\n    const existingAlert = this.alerts.get(alertId);\n\n    if (value >= threshold.critical) {\n      if (!existingAlert || existingAlert.severity !== 'critical') {\n        this.createAlert(alertId, 'critical', metricName, threshold.critical, value);\n      }\n    } else if (value >= threshold.warning) {\n      if (!existingAlert || existingAlert.severity !== 'high') {\n        this.createAlert(alertId, 'high', metricName, threshold.warning, value);\n      }\n    } else {\n      // Value is below thresholds, resolve alert if it exists\n      if (existingAlert && !existingAlert.resolved) {\n        existingAlert.resolved = true;\n        this.emit('alert_resolved', existingAlert);\n      }\n    }\n  }\n\n  /**\n   * Create a performance alert\n   */\n  private createAlert(id: string, severity: PerformanceAlert['severity'], metric: string, threshold: number, currentValue: number): void {\n    const alert: PerformanceAlert = {\n      id,\n      severity,\n      metric,\n      threshold,\n      currentValue,\n      message: `${metric} exceeded ${severity} threshold: ${currentValue} >= ${threshold}`,\n      timestamp: new Date(),\n      resolved: false\n    };\n\n    this.alerts.set(id, alert);\n    this.emit('alert', alert);\n  }\n\n  /**\n   * Check all active alerts\n   */\n  private checkAlerts(): void {\n    // This method can be extended to perform more complex alert logic\n    // For now, individual metric checks handle alert creation\n  }\n\n  /**\n   * Calculate requests per second\n   */\n  private calculateRequestsPerSecond(): number {\n    const requestMetrics = this.getMetrics('app_requests_per_second', 60);\n    if (requestMetrics.length === 0) return 0;\n    \n    const recent = requestMetrics.slice(-10); // Last 10 measurements\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Calculate average response time\n   */\n  private calculateAverageResponseTime(): number {\n    const responseMetrics = this.getMetrics('app_response_time', 60);\n    if (responseMetrics.length === 0) return 0;\n    \n    const recent = responseMetrics.slice(-10);\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Calculate error rate\n   */\n  private calculateErrorRate(): number {\n    const errorMetrics = this.getMetrics('app_error_rate', 60);\n    if (errorMetrics.length === 0) return 0;\n    \n    const recent = errorMetrics.slice(-10);\n    return recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n  }\n\n  /**\n   * Get active connections (placeholder)\n   */\n  private getActiveConnections(): number {\n    // This would be implemented based on your WebSocket/HTTP server\n    return 0;\n  }\n\n  /**\n   * Get queue size (placeholder)\n   */\n  private getQueueSize(): number {\n    // This would be implemented based on your queue system\n    return 0;\n  }\n\n  /**\n   * Calculate cache hit rate\n   */\n  private calculateCacheHitRate(): number {\n    const hitRate = this.cache.calculatedSize > 0 ? \n      (this.cache.calculatedSize - this.cache.size) / this.cache.calculatedSize * 100 : 0;\n    return Math.round(hitRate * 100) / 100;\n  }\n\n  /**\n   * Get database queries count (placeholder)\n   */\n  private getDatabaseQueries(): number {\n    // This would be implemented based on your database connection pool\n    return 0;\n  }\n\n  /**\n   * Detect memory leaks\n   */\n  private detectMemoryLeaks(): boolean {\n    const memoryMetrics = this.getMetrics('nodejs_heap_used', 30);\n    if (memoryMetrics.length < 10) return false;\n    \n    // Simple memory leak detection: check if memory usage is consistently increasing\n    const recent = memoryMetrics.slice(-10);\n    const trend = recent.reduce((sum, metric, index) => {\n      if (index === 0) return sum;\n      return sum + (metric.value - recent[index - 1].value);\n    }, 0);\n    \n    return trend > 0 && trend > recent[0].value * 0.1; // 10% increase trend\n  }\n\n  /**\n   * Determine overall system health\n   */\n  private determineSystemHealth(alerts: PerformanceAlert[]): 'good' | 'warning' | 'critical' {\n    if (alerts.some(alert => alert.severity === 'critical')) {\n      return 'critical';\n    }\n    if (alerts.some(alert => alert.severity === 'high' || alert.severity === 'medium')) {\n      return 'warning';\n    }\n    return 'good';\n  }\n\n  /**\n   * Get top metrics by recent activity\n   */\n  private getTopMetrics(limit: number): { name: string; value: number; unit: string }[] {\n    const topMetrics: { name: string; value: number; unit: string }[] = [];\n    \n    for (const [name, metrics] of this.metrics) {\n      if (metrics.length > 0) {\n        const latest = metrics[metrics.length - 1];\n        topMetrics.push({\n          name,\n          value: latest.value,\n          unit: latest.unit\n        });\n      }\n    }\n    \n    // Sort by value (descending) and take top N\n    return topMetrics\n      .sort((a, b) => b.value - a.value)\n      .slice(0, limit);\n  }\n\n  /**\n   * Export metrics to JSON\n   */\n  public exportMetrics(): string {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      uptime: Date.now() - this.startTime,\n      metrics: Object.fromEntries(this.metrics),\n      alerts: Array.from(this.alerts.values()),\n      thresholds: Object.fromEntries(this.thresholds),\n      summary: this.getPerformanceSummary()\n    };\n    \n    return JSON.stringify(exportData, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();"],"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","ignoreList":[]}