41762136736c30229bb6b5cae6b9f311
"use strict";

/* istanbul ignore next */
function cov_dgzyh8f2g() {
  var path = "/workspaces/prompt-card-system/backend/src/services/training/ModelTrainingEngine.ts";
  var hash = "e438455e7acf5166c53c63f2f2af266ed2c95280";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/training/ModelTrainingEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 67
        }
      },
      "37": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "38": {
        start: {
          line: 38,
          column: 21
        },
        end: {
          line: 38,
          column: 45
        }
      },
      "39": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 68
        }
      },
      "40": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 40,
          column: 74
        }
      },
      "41": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 55
        }
      },
      "42": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 40
        }
      },
      "43": {
        start: {
          line: 43,
          column: 11
        },
        end: {
          line: 43,
          column: 57
        }
      },
      "44": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 16
        }
      },
      "45": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 35
        }
      },
      "46": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 64
        }
      },
      "47": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 36
        }
      },
      "48": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 39
        }
      },
      "49": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "50": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 80
        }
      },
      "51": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "52": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 44
        }
      },
      "53": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "54": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "55": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "56": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 68
        }
      },
      "57": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 46
        }
      },
      "58": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "59": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 47
        }
      },
      "60": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 38
        }
      },
      "61": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 76
        }
      },
      "62": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 64
        }
      },
      "63": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 82
        }
      },
      "64": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 24
        }
      },
      "65": {
        start: {
          line: 96,
          column: 22
        },
        end: {
          line: 96,
          column: 86
        }
      },
      "66": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "67": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 54
        }
      },
      "68": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "69": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 40
        }
      },
      "70": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "71": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 63
        }
      },
      "72": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "73": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 46
        }
      },
      "74": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "75": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 63
        }
      },
      "76": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "77": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 78
        }
      },
      "78": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 36
        }
      },
      "79": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 36
        }
      },
      "80": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 65
        }
      },
      "81": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "82": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 49
        }
      },
      "83": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "84": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 63
        }
      },
      "85": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 181,
          column: 93
        }
      },
      "86": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "87": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 41
        }
      },
      "88": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 189,
          column: 14
        }
      },
      "89": {
        start: {
          line: 190,
          column: 34
        },
        end: {
          line: 190,
          column: 36
        }
      },
      "90": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "91": {
        start: {
          line: 191,
          column: 37
        },
        end: {
          line: 191,
          column: 38
        }
      },
      "92": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 71
        }
      },
      "93": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 65
        }
      },
      "94": {
        start: {
          line: 194,
          column: 43
        },
        end: {
          line: 194,
          column: 123
        }
      },
      "95": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 222,
          column: 17
        }
      },
      "96": {
        start: {
          line: 195,
          column: 29
        },
        end: {
          line: 195,
          column: 30
        }
      },
      "97": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "98": {
        start: {
          line: 198,
          column: 39
        },
        end: {
          line: 198,
          column: 109
        }
      },
      "99": {
        start: {
          line: 200,
          column: 41
        },
        end: {
          line: 203,
          column: 26
        }
      },
      "100": {
        start: {
          line: 205,
          column: 24
        },
        end: {
          line: 209,
          column: 25
        }
      },
      "101": {
        start: {
          line: 206,
          column: 49
        },
        end: {
          line: 206,
          column: 104
        }
      },
      "102": {
        start: {
          line: 207,
          column: 28
        },
        end: {
          line: 208,
          column: 41
        }
      },
      "103": {
        start: {
          line: 208,
          column: 32
        },
        end: {
          line: 208,
          column: 41
        }
      },
      "104": {
        start: {
          line: 210,
          column: 24
        },
        end: {
          line: 216,
          column: 27
        }
      },
      "105": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 60
        }
      },
      "106": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 109
        }
      },
      "107": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 87
        }
      },
      "108": {
        start: {
          line: 227,
          column: 31
        },
        end: {
          line: 227,
          column: 92
        }
      },
      "109": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 90
        }
      },
      "110": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 40
        }
      },
      "111": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "112": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 30
        }
      },
      "113": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 37
        }
      },
      "114": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 71
        }
      },
      "115": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 24
        }
      },
      "116": {
        start: {
          line: 253,
          column: 29
        },
        end: {
          line: 253,
          column: 92
        }
      },
      "117": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "118": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 61
        }
      },
      "119": {
        start: {
          line: 256,
          column: 37
        },
        end: {
          line: 256,
          column: 39
        }
      },
      "120": {
        start: {
          line: 257,
          column: 36
        },
        end: {
          line: 257,
          column: 38
        }
      },
      "121": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "122": {
        start: {
          line: 260,
          column: 31
        },
        end: {
          line: 260,
          column: 84
        }
      },
      "123": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 51
        }
      },
      "124": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 267,
          column: 19
        }
      },
      "125": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 265,
          column: 52
        }
      },
      "126": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 52
        }
      },
      "127": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 53
        }
      },
      "128": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      },
      "129": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 68
        }
      },
      "130": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "131": {
        start: {
          line: 275,
          column: 30
        },
        end: {
          line: 275,
          column: 81
        }
      },
      "132": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 48
        }
      },
      "133": {
        start: {
          line: 279,
          column: 33
        },
        end: {
          line: 279,
          column: 76
        }
      },
      "134": {
        start: {
          line: 281,
          column: 36
        },
        end: {
          line: 281,
          column: 127
        }
      },
      "135": {
        start: {
          line: 282,
          column: 37
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "136": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "137": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 36
        }
      },
      "138": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 75
        }
      },
      "139": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 24
        }
      },
      "140": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 310,
          column: 94
        }
      },
      "141": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "142": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 86
        }
      },
      "143": {
        start: {
          line: 314,
          column: 33
        },
        end: {
          line: 314,
          column: 75
        }
      },
      "144": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "145": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 77
        }
      },
      "146": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "147": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 87
        }
      },
      "148": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 322,
          column: 26
        }
      },
      "149": {
        start: {
          line: 324,
          column: 20
        },
        end: {
          line: 324,
          column: 92
        }
      },
      "150": {
        start: {
          line: 325,
          column: 20
        },
        end: {
          line: 325,
          column: 26
        }
      },
      "151": {
        start: {
          line: 327,
          column: 20
        },
        end: {
          line: 327,
          column: 86
        }
      },
      "152": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 26
        }
      },
      "153": {
        start: {
          line: 330,
          column: 20
        },
        end: {
          line: 330,
          column: 86
        }
      },
      "154": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 26
        }
      },
      "155": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 80
        }
      },
      "156": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 107
        }
      },
      "157": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "158": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 54
        }
      },
      "159": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 56
        }
      },
      "160": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 353,
          column: 15
        }
      },
      "161": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 357,
          column: 14
        }
      },
      "162": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 78
        }
      },
      "163": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 371,
          column: 15
        }
      },
      "164": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 24
        }
      },
      "165": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 42
        }
      },
      "166": {
        start: {
          line: 385,
          column: 21
        },
        end: {
          line: 385,
          column: 57
        }
      },
      "167": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 396,
          column: 11
        }
      },
      "168": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 388,
          column: 29
        }
      },
      "169": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 29
        }
      },
      "170": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 390,
          column: 29
        }
      },
      "171": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 29
        }
      },
      "172": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 392,
          column: 29
        }
      },
      "173": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 29
        }
      },
      "174": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 394,
          column: 29
        }
      },
      "175": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 29
        }
      },
      "176": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 24
        }
      },
      "177": {
        start: {
          line: 402,
          column: 20
        },
        end: {
          line: 402,
          column: 46
        }
      },
      "178": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "179": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 63
        }
      },
      "180": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "181": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 98
        }
      },
      "182": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 33
        }
      },
      "183": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 75
        }
      },
      "184": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 417,
          column: 11
        }
      },
      "185": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 418,
          column: 65
        }
      },
      "186": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 43
        }
      },
      "187": {
        start: {
          line: 430,
          column: 21
        },
        end: {
          line: 430,
          column: 57
        }
      },
      "188": {
        start: {
          line: 431,
          column: 30
        },
        end: {
          line: 431,
          column: 76
        }
      },
      "189": {
        start: {
          line: 431,
          column: 49
        },
        end: {
          line: 431,
          column: 75
        }
      },
      "190": {
        start: {
          line: 432,
          column: 27
        },
        end: {
          line: 432,
          column: 70
        }
      },
      "191": {
        start: {
          line: 432,
          column: 46
        },
        end: {
          line: 432,
          column: 69
        }
      },
      "192": {
        start: {
          line: 433,
          column: 36
        },
        end: {
          line: 435,
          column: 15
        }
      },
      "193": {
        start: {
          line: 434,
          column: 49
        },
        end: {
          line: 434,
          column: 80
        }
      },
      "194": {
        start: {
          line: 436,
          column: 35
        },
        end: {
          line: 436,
          column: 115
        }
      },
      "195": {
        start: {
          line: 436,
          column: 61
        },
        end: {
          line: 436,
          column: 92
        }
      },
      "196": {
        start: {
          line: 437,
          column: 31
        },
        end: {
          line: 439,
          column: 79
        }
      },
      "197": {
        start: {
          line: 439,
          column: 31
        },
        end: {
          line: 439,
          column: 71
        }
      },
      "198": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 447,
          column: 10
        }
      },
      "199": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "200": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 40
        }
      },
      "201": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 60
        }
      },
      "202": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 91
        }
      },
      "203": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "204": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 52
        }
      },
      "205": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 69
        }
      },
      "206": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "207": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 72
        }
      },
      "208": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 73
        }
      },
      "209": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "210": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 54
        }
      },
      "211": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "212": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 61
        }
      },
      "213": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "214": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 69
        }
      },
      "215": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "216": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 72
        }
      },
      "217": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 527,
          column: 9
        }
      },
      "218": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 36
        }
      },
      "219": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 74
        }
      },
      "220": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 45
        }
      },
      "221": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 38
        }
      },
      "222": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 88
        }
      },
      "223": {
        start: {
          line: 503,
          column: 31
        },
        end: {
          line: 503,
          column: 67
        }
      },
      "224": {
        start: {
          line: 505,
          column: 33
        },
        end: {
          line: 505,
          column: 79
        }
      },
      "225": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 37
        }
      },
      "226": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 42
        }
      },
      "227": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 508,
          column: 115
        }
      },
      "228": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 518,
          column: 15
        }
      },
      "229": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 523,
          column: 15
        }
      },
      "230": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 526,
          column: 49
        }
      },
      "231": {
        start: {
          line: 531,
          column: 27
        },
        end: {
          line: 531,
          column: 66
        }
      },
      "232": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 532,
          column: 46
        }
      },
      "233": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 588,
          column: 9
        }
      },
      "234": {
        start: {
          line: 533,
          column: 25
        },
        end: {
          line: 533,
          column: 26
        }
      },
      "235": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 47
        }
      },
      "236": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 575,
          column: 13
        }
      },
      "237": {
        start: {
          line: 535,
          column: 28
        },
        end: {
          line: 535,
          column: 29
        }
      },
      "238": {
        start: {
          line: 536,
          column: 16
        },
        end: {
          line: 538,
          column: 17
        }
      },
      "239": {
        start: {
          line: 537,
          column: 20
        },
        end: {
          line: 537,
          column: 66
        }
      },
      "240": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 539,
          column: 69
        }
      },
      "241": {
        start: {
          line: 541,
          column: 34
        },
        end: {
          line: 541,
          column: 120
        }
      },
      "242": {
        start: {
          line: 542,
          column: 32
        },
        end: {
          line: 542,
          column: 71
        }
      },
      "243": {
        start: {
          line: 543,
          column: 27
        },
        end: {
          line: 543,
          column: 95
        }
      },
      "244": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 544,
          column: 52
        }
      },
      "245": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 545,
          column: 55
        }
      },
      "246": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 546,
          column: 58
        }
      },
      "247": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 547,
          column: 58
        }
      },
      "248": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 548,
          column: 51
        }
      },
      "249": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 555,
          column: 17
        }
      },
      "250": {
        start: {
          line: 551,
          column: 20
        },
        end: {
          line: 551,
          column: 55
        }
      },
      "251": {
        start: {
          line: 553,
          column: 21
        },
        end: {
          line: 555,
          column: 17
        }
      },
      "252": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 554,
          column: 55
        }
      },
      "253": {
        start: {
          line: 557,
          column: 32
        },
        end: {
          line: 557,
          column: 86
        }
      },
      "254": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 52
        }
      },
      "255": {
        start: {
          line: 559,
          column: 34
        },
        end: {
          line: 559,
          column: 114
        }
      },
      "256": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 560,
          column: 61
        }
      },
      "257": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 572,
          column: 17
        }
      },
      "258": {
        start: {
          line: 563,
          column: 20
        },
        end: {
          line: 571,
          column: 23
        }
      },
      "259": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 574,
          column: 71
        }
      },
      "260": {
        start: {
          line: 574,
          column: 45
        },
        end: {
          line: 574,
          column: 69
        }
      },
      "261": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 110
        }
      },
      "262": {
        start: {
          line: 578,
          column: 35
        },
        end: {
          line: 578,
          column: 81
        }
      },
      "263": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 579,
          column: 59
        }
      },
      "264": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 587,
          column: 13
        }
      },
      "265": {
        start: {
          line: 582,
          column: 35
        },
        end: {
          line: 582,
          column: 76
        }
      },
      "266": {
        start: {
          line: 583,
          column: 16
        },
        end: {
          line: 586,
          column: 17
        }
      },
      "267": {
        start: {
          line: 584,
          column: 20
        },
        end: {
          line: 584,
          column: 99
        }
      },
      "268": {
        start: {
          line: 585,
          column: 20
        },
        end: {
          line: 585,
          column: 26
        }
      },
      "269": {
        start: {
          line: 591,
          column: 35
        },
        end: {
          line: 591,
          column: 58
        }
      },
      "270": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 594,
          column: 9
        }
      },
      "271": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 25
        }
      },
      "272": {
        start: {
          line: 595,
          column: 29
        },
        end: {
          line: 595,
          column: 88
        }
      },
      "273": {
        start: {
          line: 596,
          column: 31
        },
        end: {
          line: 596,
          column: 56
        }
      },
      "274": {
        start: {
          line: 597,
          column: 28
        },
        end: {
          line: 597,
          column: 56
        }
      },
      "275": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 598,
          column: 73
        }
      },
      "276": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 609,
          column: 10
        }
      },
      "277": {
        start: {
          line: 612,
          column: 26
        },
        end: {
          line: 612,
          column: 62
        }
      },
      "278": {
        start: {
          line: 613,
          column: 29
        },
        end: {
          line: 623,
          column: 9
        }
      },
      "279": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 627,
          column: 9
        }
      },
      "280": {
        start: {
          line: 626,
          column: 12
        },
        end: {
          line: 626,
          column: 57
        }
      },
      "281": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 628,
          column: 68
        }
      },
      "282": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 629,
          column: 28
        }
      },
      "283": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 632,
          column: 30
        }
      },
      "284": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 637,
          column: 10
        }
      },
      "285": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 638,
          column: 83
        }
      },
      "286": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 642,
          column: 11
        }
      },
      "287": {
        start: {
          line: 645,
          column: 8
        },
        end: {
          line: 650,
          column: 11
        }
      },
      "288": {
        start: {
          line: 652,
          column: 8
        },
        end: {
          line: 654,
          column: 9
        }
      },
      "289": {
        start: {
          line: 653,
          column: 12
        },
        end: {
          line: 653,
          column: 45
        }
      },
      "290": {
        start: {
          line: 658,
          column: 32
        },
        end: {
          line: 662,
          column: 52
        }
      },
      "291": {
        start: {
          line: 663,
          column: 8
        },
        end: {
          line: 673,
          column: 9
        }
      },
      "292": {
        start: {
          line: 664,
          column: 29
        },
        end: {
          line: 667,
          column: 14
        }
      },
      "293": {
        start: {
          line: 668,
          column: 12
        },
        end: {
          line: 668,
          column: 44
        }
      },
      "294": {
        start: {
          line: 671,
          column: 12
        },
        end: {
          line: 671,
          column: 88
        }
      },
      "295": {
        start: {
          line: 672,
          column: 12
        },
        end: {
          line: 672,
          column: 28
        }
      },
      "296": {
        start: {
          line: 677,
          column: 20
        },
        end: {
          line: 677,
          column: 23
        }
      },
      "297": {
        start: {
          line: 679,
          column: 8
        },
        end: {
          line: 680,
          column: 25
        }
      },
      "298": {
        start: {
          line: 680,
          column: 12
        },
        end: {
          line: 680,
          column: 25
        }
      },
      "299": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 683,
          column: 25
        }
      },
      "300": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 683,
          column: 25
        }
      },
      "301": {
        start: {
          line: 685,
          column: 28
        },
        end: {
          line: 685,
          column: 59
        }
      },
      "302": {
        start: {
          line: 686,
          column: 30
        },
        end: {
          line: 686,
          column: 63
        }
      },
      "303": {
        start: {
          line: 687,
          column: 24
        },
        end: {
          line: 687,
          column: 87
        }
      },
      "304": {
        start: {
          line: 687,
          column: 51
        },
        end: {
          line: 687,
          column: 79
        }
      },
      "305": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 688,
          column: 61
        }
      },
      "306": {
        start: {
          line: 689,
          column: 8
        },
        end: {
          line: 689,
          column: 36
        }
      },
      "307": {
        start: {
          line: 692,
          column: 8
        },
        end: {
          line: 694,
          column: 9
        }
      },
      "308": {
        start: {
          line: 693,
          column: 12
        },
        end: {
          line: 693,
          column: 99
        }
      },
      "309": {
        start: {
          line: 695,
          column: 29
        },
        end: {
          line: 695,
          column: 30
        }
      },
      "310": {
        start: {
          line: 696,
          column: 29
        },
        end: {
          line: 696,
          column: 30
        }
      },
      "311": {
        start: {
          line: 697,
          column: 26
        },
        end: {
          line: 697,
          column: 27
        }
      },
      "312": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 702,
          column: 9
        }
      },
      "313": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 699,
          column: 87
        }
      },
      "314": {
        start: {
          line: 700,
          column: 12
        },
        end: {
          line: 700,
          column: 87
        }
      },
      "315": {
        start: {
          line: 701,
          column: 12
        },
        end: {
          line: 701,
          column: 31
        }
      },
      "316": {
        start: {
          line: 704,
          column: 30
        },
        end: {
          line: 704,
          column: 87
        }
      },
      "317": {
        start: {
          line: 704,
          column: 55
        },
        end: {
          line: 704,
          column: 80
        }
      },
      "318": {
        start: {
          line: 705,
          column: 31
        },
        end: {
          line: 705,
          column: 58
        }
      },
      "319": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 711,
          column: 10
        }
      },
      "320": {
        start: {
          line: 715,
          column: 8
        },
        end: {
          line: 715,
          column: 90
        }
      },
      "321": {
        start: {
          line: 719,
          column: 8
        },
        end: {
          line: 728,
          column: 10
        }
      },
      "322": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 732,
          column: 41
        }
      },
      "323": {
        start: {
          line: 735,
          column: 24
        },
        end: {
          line: 741,
          column: 9
        }
      },
      "324": {
        start: {
          line: 742,
          column: 20
        },
        end: {
          line: 742,
          column: 21
        }
      },
      "325": {
        start: {
          line: 743,
          column: 26
        },
        end: {
          line: 743,
          column: 27
        }
      },
      "326": {
        start: {
          line: 744,
          column: 8
        },
        end: {
          line: 748,
          column: 11
        }
      },
      "327": {
        start: {
          line: 745,
          column: 27
        },
        end: {
          line: 745,
          column: 49
        }
      },
      "328": {
        start: {
          line: 746,
          column: 12
        },
        end: {
          line: 746,
          column: 36
        }
      },
      "329": {
        start: {
          line: 747,
          column: 12
        },
        end: {
          line: 747,
          column: 44
        }
      },
      "330": {
        start: {
          line: 749,
          column: 8
        },
        end: {
          line: 749,
          column: 85
        }
      },
      "331": {
        start: {
          line: 752,
          column: 32
        },
        end: {
          line: 752,
          column: 34
        }
      },
      "332": {
        start: {
          line: 753,
          column: 8
        },
        end: {
          line: 755,
          column: 9
        }
      },
      "333": {
        start: {
          line: 754,
          column: 12
        },
        end: {
          line: 754,
          column: 119
        }
      },
      "334": {
        start: {
          line: 756,
          column: 8
        },
        end: {
          line: 758,
          column: 9
        }
      },
      "335": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 110
        }
      },
      "336": {
        start: {
          line: 759,
          column: 8
        },
        end: {
          line: 761,
          column: 9
        }
      },
      "337": {
        start: {
          line: 760,
          column: 12
        },
        end: {
          line: 760,
          column: 102
        }
      },
      "338": {
        start: {
          line: 762,
          column: 8
        },
        end: {
          line: 762,
          column: 31
        }
      },
      "339": {
        start: {
          line: 765,
          column: 8
        },
        end: {
          line: 769,
          column: 9
        }
      },
      "340": {
        start: {
          line: 766,
          column: 28
        },
        end: {
          line: 766,
          column: 66
        }
      },
      "341": {
        start: {
          line: 766,
          column: 47
        },
        end: {
          line: 766,
          column: 65
        }
      },
      "342": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 768,
          column: 31
        }
      },
      "343": {
        start: {
          line: 768,
          column: 16
        },
        end: {
          line: 768,
          column: 31
        }
      },
      "344": {
        start: {
          line: 770,
          column: 8
        },
        end: {
          line: 770,
          column: 20
        }
      },
      "345": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 774,
          column: 60
        }
      },
      "346": {
        start: {
          line: 778,
          column: 8
        },
        end: {
          line: 778,
          column: 86
        }
      },
      "347": {
        start: {
          line: 782,
          column: 8
        },
        end: {
          line: 782,
          column: 102
        }
      },
      "348": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 786,
          column: 85
        }
      },
      "349": {
        start: {
          line: 790,
          column: 8
        },
        end: {
          line: 790,
          column: 102
        }
      },
      "350": {
        start: {
          line: 793,
          column: 0
        },
        end: {
          line: 793,
          column: 50
        }
      },
      "351": {
        start: {
          line: 795,
          column: 0
        },
        end: {
          line: 795,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 45
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 72
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 36
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 95
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 34
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 153
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 165,
            column: 43
          },
          end: {
            line: 165,
            column: 44
          }
        },
        loc: {
          start: {
            line: 165,
            column: 52
          },
          end: {
            line: 167,
            column: 9
          }
        },
        line: 165
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 180
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 74
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 252
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 263,
            column: 55
          },
          end: {
            line: 263,
            column: 56
          }
        },
        loc: {
          start: {
            line: 263,
            column: 76
          },
          end: {
            line: 267,
            column: 17
          }
        },
        line: 263
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 270,
            column: 49
          },
          end: {
            line: 270,
            column: 50
          }
        },
        loc: {
          start: {
            line: 270,
            column: 59
          },
          end: {
            line: 272,
            column: 13
          }
        },
        line: 270
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 59
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 309
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 26
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 378
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 35
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 384
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 386,
            column: 27
          },
          end: {
            line: 386,
            column: 28
          }
        },
        loc: {
          start: {
            line: 386,
            column: 34
          },
          end: {
            line: 396,
            column: 9
          }
        },
        line: 386
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 35
          },
          end: {
            line: 419,
            column: 5
          }
        },
        line: 401
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 423,
            column: 5
          }
        },
        loc: {
          start: {
            line: 423,
            column: 23
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 423
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 429,
            column: 5
          }
        },
        loc: {
          start: {
            line: 429,
            column: 28
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 429
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 431,
            column: 42
          },
          end: {
            line: 431,
            column: 43
          }
        },
        loc: {
          start: {
            line: 431,
            column: 49
          },
          end: {
            line: 431,
            column: 75
          }
        },
        line: 431
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 432,
            column: 39
          },
          end: {
            line: 432,
            column: 40
          }
        },
        loc: {
          start: {
            line: 432,
            column: 46
          },
          end: {
            line: 432,
            column: 69
          }
        },
        line: 432
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 434,
            column: 35
          },
          end: {
            line: 434,
            column: 36
          }
        },
        loc: {
          start: {
            line: 434,
            column: 49
          },
          end: {
            line: 434,
            column: 80
          }
        },
        line: 434
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 436,
            column: 47
          },
          end: {
            line: 436,
            column: 48
          }
        },
        loc: {
          start: {
            line: 436,
            column: 61
          },
          end: {
            line: 436,
            column: 92
          }
        },
        line: 436
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 439,
            column: 21
          }
        },
        loc: {
          start: {
            line: 439,
            column: 31
          },
          end: {
            line: 439,
            column: 71
          }
        },
        line: 439
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 33
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 450
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 30
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 460
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        loc: {
          start: {
            line: 470,
            column: 34
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 470
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 41
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 479
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 34
          },
          end: {
            line: 528,
            column: 5
          }
        },
        line: 494
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 529,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        },
        loc: {
          start: {
            line: 529,
            column: 32
          },
          end: {
            line: 589,
            column: 5
          }
        },
        line: 529
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 574,
            column: 34
          },
          end: {
            line: 574,
            column: 35
          }
        },
        loc: {
          start: {
            line: 574,
            column: 45
          },
          end: {
            line: 574,
            column: 69
          }
        },
        line: 574
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 48
          },
          end: {
            line: 599,
            column: 5
          }
        },
        line: 590
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 600,
            column: 4
          },
          end: {
            line: 600,
            column: 5
          }
        },
        loc: {
          start: {
            line: 600,
            column: 36
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 600
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 611,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        },
        loc: {
          start: {
            line: 611,
            column: 46
          },
          end: {
            line: 630,
            column: 5
          }
        },
        line: 611
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 631,
            column: 4
          },
          end: {
            line: 631,
            column: 5
          }
        },
        loc: {
          start: {
            line: 631,
            column: 36
          },
          end: {
            line: 643,
            column: 5
          }
        },
        line: 631
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 644,
            column: 4
          },
          end: {
            line: 644,
            column: 5
          }
        },
        loc: {
          start: {
            line: 644,
            column: 50
          },
          end: {
            line: 655,
            column: 5
          }
        },
        line: 644
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 656,
            column: 4
          },
          end: {
            line: 656,
            column: 5
          }
        },
        loc: {
          start: {
            line: 656,
            column: 52
          },
          end: {
            line: 674,
            column: 5
          }
        },
        line: 656
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 675,
            column: 4
          },
          end: {
            line: 675,
            column: 5
          }
        },
        loc: {
          start: {
            line: 675,
            column: 46
          },
          end: {
            line: 690,
            column: 5
          }
        },
        line: 675
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 687,
            column: 43
          },
          end: {
            line: 687,
            column: 44
          }
        },
        loc: {
          start: {
            line: 687,
            column: 51
          },
          end: {
            line: 687,
            column: 79
          }
        },
        line: 687
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 691,
            column: 4
          },
          end: {
            line: 691,
            column: 5
          }
        },
        loc: {
          start: {
            line: 691,
            column: 40
          },
          end: {
            line: 712,
            column: 5
          }
        },
        line: 691
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 704,
            column: 47
          },
          end: {
            line: 704,
            column: 48
          }
        },
        loc: {
          start: {
            line: 704,
            column: 55
          },
          end: {
            line: 704,
            column: 80
          }
        },
        line: 704
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 713,
            column: 4
          },
          end: {
            line: 713,
            column: 5
          }
        },
        loc: {
          start: {
            line: 713,
            column: 54
          },
          end: {
            line: 716,
            column: 5
          }
        },
        line: 713
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 717,
            column: 4
          },
          end: {
            line: 717,
            column: 5
          }
        },
        loc: {
          start: {
            line: 717,
            column: 53
          },
          end: {
            line: 729,
            column: 5
          }
        },
        line: 717
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 730,
            column: 4
          },
          end: {
            line: 730,
            column: 5
          }
        },
        loc: {
          start: {
            line: 730,
            column: 51
          },
          end: {
            line: 733,
            column: 5
          }
        },
        line: 730
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 734,
            column: 4
          },
          end: {
            line: 734,
            column: 5
          }
        },
        loc: {
          start: {
            line: 734,
            column: 35
          },
          end: {
            line: 750,
            column: 5
          }
        },
        line: 734
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 744,
            column: 40
          },
          end: {
            line: 744,
            column: 41
          }
        },
        loc: {
          start: {
            line: 744,
            column: 61
          },
          end: {
            line: 748,
            column: 9
          }
        },
        line: 744
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 751,
            column: 4
          },
          end: {
            line: 751,
            column: 5
          }
        },
        loc: {
          start: {
            line: 751,
            column: 83
          },
          end: {
            line: 763,
            column: 5
          }
        },
        line: 751
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 764,
            column: 4
          },
          end: {
            line: 764,
            column: 5
          }
        },
        loc: {
          start: {
            line: 764,
            column: 37
          },
          end: {
            line: 771,
            column: 5
          }
        },
        line: 764
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 766,
            column: 42
          },
          end: {
            line: 766,
            column: 43
          }
        },
        loc: {
          start: {
            line: 766,
            column: 47
          },
          end: {
            line: 766,
            column: 65
          }
        },
        line: 766
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 772,
            column: 4
          },
          end: {
            line: 772,
            column: 5
          }
        },
        loc: {
          start: {
            line: 772,
            column: 38
          },
          end: {
            line: 775,
            column: 5
          }
        },
        line: 772
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 776,
            column: 4
          },
          end: {
            line: 776,
            column: 5
          }
        },
        loc: {
          start: {
            line: 776,
            column: 42
          },
          end: {
            line: 779,
            column: 5
          }
        },
        line: 776
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 780,
            column: 4
          },
          end: {
            line: 780,
            column: 5
          }
        },
        loc: {
          start: {
            line: 780,
            column: 47
          },
          end: {
            line: 783,
            column: 5
          }
        },
        line: 780
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 784,
            column: 4
          },
          end: {
            line: 784,
            column: 5
          }
        },
        loc: {
          start: {
            line: 784,
            column: 41
          },
          end: {
            line: 787,
            column: 5
          }
        },
        line: 784
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 788,
            column: 4
          },
          end: {
            line: 788,
            column: 5
          }
        },
        loc: {
          start: {
            line: 788,
            column: 41
          },
          end: {
            line: 791,
            column: 5
          }
        },
        line: 788
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "18": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "19": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "20": {
        loc: {
          start: {
            line: 195,
            column: 32
          },
          end: {
            line: 195,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 32
          },
          end: {
            line: 195,
            column: 54
          }
        }, {
          start: {
            line: 195,
            column: 58
          },
          end: {
            line: 195,
            column: 130
          }
        }],
        line: 195
      },
      "21": {
        loc: {
          start: {
            line: 205,
            column: 24
          },
          end: {
            line: 209,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 24
          },
          end: {
            line: 209,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "22": {
        loc: {
          start: {
            line: 207,
            column: 28
          },
          end: {
            line: 208,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 28
          },
          end: {
            line: 208,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "23": {
        loc: {
          start: {
            line: 252,
            column: 54
          },
          end: {
            line: 252,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 252,
            column: 70
          },
          end: {
            line: 252,
            column: 72
          }
        }],
        line: 252
      },
      "24": {
        loc: {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 265,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 265,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "25": {
        loc: {
          start: {
            line: 309,
            column: 46
          },
          end: {
            line: 309,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 309,
            column: 55
          },
          end: {
            line: 309,
            column: 57
          }
        }],
        line: 309
      },
      "26": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "27": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 322,
            column: 26
          }
        }, {
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 325,
            column: 26
          }
        }, {
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 328,
            column: 26
          }
        }, {
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 331,
            column: 26
          }
        }, {
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 333,
            column: 80
          }
        }],
        line: 319
      },
      "28": {
        loc: {
          start: {
            line: 336,
            column: 45
          },
          end: {
            line: 336,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 336,
            column: 85
          },
          end: {
            line: 336,
            column: 95
          }
        }, {
          start: {
            line: 336,
            column: 98
          },
          end: {
            line: 336,
            column: 106
          }
        }],
        line: 336
      },
      "29": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "30": {
        loc: {
          start: {
            line: 368,
            column: 27
          },
          end: {
            line: 368,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 368,
            column: 52
          },
          end: {
            line: 368,
            column: 65
          }
        }, {
          start: {
            line: 368,
            column: 68
          },
          end: {
            line: 368,
            column: 83
          }
        }],
        line: 368
      },
      "31": {
        loc: {
          start: {
            line: 384,
            column: 21
          },
          end: {
            line: 384,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 384,
            column: 31
          },
          end: {
            line: 384,
            column: 33
          }
        }],
        line: 384
      },
      "32": {
        loc: {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 388,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 388,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "33": {
        loc: {
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 387,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 387,
            column: 30
          }
        }, {
          start: {
            line: 387,
            column: 34
          },
          end: {
            line: 387,
            column: 63
          }
        }],
        line: 387
      },
      "34": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 390,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 390,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "35": {
        loc: {
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 389,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 389,
            column: 29
          }
        }, {
          start: {
            line: 389,
            column: 33
          },
          end: {
            line: 389,
            column: 67
          }
        }],
        line: 389
      },
      "36": {
        loc: {
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 392,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 392,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 391
      },
      "37": {
        loc: {
          start: {
            line: 391,
            column: 16
          },
          end: {
            line: 391,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 16
          },
          end: {
            line: 391,
            column: 37
          }
        }, {
          start: {
            line: 391,
            column: 41
          },
          end: {
            line: 391,
            column: 95
          }
        }],
        line: 391
      },
      "38": {
        loc: {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 394,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 394,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "39": {
        loc: {
          start: {
            line: 393,
            column: 16
          },
          end: {
            line: 393,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 16
          },
          end: {
            line: 393,
            column: 38
          }
        }, {
          start: {
            line: 393,
            column: 42
          },
          end: {
            line: 393,
            column: 97
          }
        }],
        line: 393
      },
      "40": {
        loc: {
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "41": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "42": {
        loc: {
          start: {
            line: 433,
            column: 36
          },
          end: {
            line: 435,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 14
          },
          end: {
            line: 434,
            column: 107
          }
        }, {
          start: {
            line: 435,
            column: 14
          },
          end: {
            line: 435,
            column: 15
          }
        }],
        line: 433
      },
      "43": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "44": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "45": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "46": {
        loc: {
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 487,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 487,
            column: 53
          }
        }, {
          start: {
            line: 487,
            column: 57
          },
          end: {
            line: 487,
            column: 97
          }
        }],
        line: 487
      },
      "47": {
        loc: {
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      },
      "48": {
        loc: {
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 490,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 490,
            column: 53
          }
        }, {
          start: {
            line: 490,
            column: 57
          },
          end: {
            line: 490,
            column: 98
          }
        }],
        line: 490
      },
      "49": {
        loc: {
          start: {
            line: 536,
            column: 16
          },
          end: {
            line: 538,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 536,
            column: 16
          },
          end: {
            line: 538,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 536
      },
      "50": {
        loc: {
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 555,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 555,
            column: 17
          }
        }, {
          start: {
            line: 553,
            column: 21
          },
          end: {
            line: 555,
            column: 17
          }
        }],
        line: 550
      },
      "51": {
        loc: {
          start: {
            line: 550,
            column: 20
          },
          end: {
            line: 550,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 550,
            column: 20
          },
          end: {
            line: 550,
            column: 30
          }
        }, {
          start: {
            line: 550,
            column: 34
          },
          end: {
            line: 550,
            column: 45
          }
        }],
        line: 550
      },
      "52": {
        loc: {
          start: {
            line: 553,
            column: 21
          },
          end: {
            line: 555,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 21
          },
          end: {
            line: 555,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "53": {
        loc: {
          start: {
            line: 557,
            column: 46
          },
          end: {
            line: 557,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 557,
            column: 46
          },
          end: {
            line: 557,
            column: 71
          }
        }, {
          start: {
            line: 557,
            column: 75
          },
          end: {
            line: 557,
            column: 85
          }
        }],
        line: 557
      },
      "54": {
        loc: {
          start: {
            line: 562,
            column: 16
          },
          end: {
            line: 572,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 16
          },
          end: {
            line: 572,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "55": {
        loc: {
          start: {
            line: 581,
            column: 12
          },
          end: {
            line: 587,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 581,
            column: 12
          },
          end: {
            line: 587,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 581
      },
      "56": {
        loc: {
          start: {
            line: 583,
            column: 16
          },
          end: {
            line: 586,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 583,
            column: 16
          },
          end: {
            line: 586,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 583
      },
      "57": {
        loc: {
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "58": {
        loc: {
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 592,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 592,
            column: 35
          }
        }, {
          start: {
            line: 592,
            column: 39
          },
          end: {
            line: 592,
            column: 77
          }
        }],
        line: 592
      },
      "59": {
        loc: {
          start: {
            line: 617,
            column: 24
          },
          end: {
            line: 617,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 617,
            column: 24
          },
          end: {
            line: 617,
            column: 54
          }
        }, {
          start: {
            line: 617,
            column: 58
          },
          end: {
            line: 617,
            column: 74
          }
        }],
        line: 617
      },
      "60": {
        loc: {
          start: {
            line: 625,
            column: 8
          },
          end: {
            line: 627,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 625,
            column: 8
          },
          end: {
            line: 627,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 625
      },
      "61": {
        loc: {
          start: {
            line: 634,
            column: 21
          },
          end: {
            line: 634,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 634,
            column: 46
          },
          end: {
            line: 634,
            column: 59
          }
        }, {
          start: {
            line: 634,
            column: 62
          },
          end: {
            line: 634,
            column: 77
          }
        }],
        line: 634
      },
      "62": {
        loc: {
          start: {
            line: 635,
            column: 19
          },
          end: {
            line: 635,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 635,
            column: 44
          },
          end: {
            line: 635,
            column: 55
          }
        }, {
          start: {
            line: 635,
            column: 58
          },
          end: {
            line: 635,
            column: 67
          }
        }],
        line: 635
      },
      "63": {
        loc: {
          start: {
            line: 652,
            column: 8
          },
          end: {
            line: 654,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 652,
            column: 8
          },
          end: {
            line: 654,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 652
      },
      "64": {
        loc: {
          start: {
            line: 679,
            column: 8
          },
          end: {
            line: 680,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 679,
            column: 8
          },
          end: {
            line: 680,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 679
      },
      "65": {
        loc: {
          start: {
            line: 679,
            column: 12
          },
          end: {
            line: 679,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 679,
            column: 12
          },
          end: {
            line: 679,
            column: 32
          }
        }, {
          start: {
            line: 679,
            column: 36
          },
          end: {
            line: 679,
            column: 58
          }
        }],
        line: 679
      },
      "66": {
        loc: {
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 683,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 683,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "67": {
        loc: {
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 682,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 682,
            column: 34
          }
        }, {
          start: {
            line: 682,
            column: 38
          },
          end: {
            line: 682,
            column: 68
          }
        }],
        line: 682
      },
      "68": {
        loc: {
          start: {
            line: 692,
            column: 8
          },
          end: {
            line: 694,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 8
          },
          end: {
            line: 694,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "69": {
        loc: {
          start: {
            line: 745,
            column: 27
          },
          end: {
            line: 745,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 745,
            column: 27
          },
          end: {
            line: 745,
            column: 42
          }
        }, {
          start: {
            line: 745,
            column: 46
          },
          end: {
            line: 745,
            column: 49
          }
        }],
        line: 745
      },
      "70": {
        loc: {
          start: {
            line: 749,
            column: 15
          },
          end: {
            line: 749,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 749,
            column: 33
          },
          end: {
            line: 749,
            column: 78
          }
        }, {
          start: {
            line: 749,
            column: 81
          },
          end: {
            line: 749,
            column: 84
          }
        }],
        line: 749
      },
      "71": {
        loc: {
          start: {
            line: 753,
            column: 8
          },
          end: {
            line: 755,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 753,
            column: 8
          },
          end: {
            line: 755,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 753
      },
      "72": {
        loc: {
          start: {
            line: 756,
            column: 8
          },
          end: {
            line: 758,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 756,
            column: 8
          },
          end: {
            line: 758,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 756
      },
      "73": {
        loc: {
          start: {
            line: 759,
            column: 8
          },
          end: {
            line: 761,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 759,
            column: 8
          },
          end: {
            line: 761,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 759
      },
      "74": {
        loc: {
          start: {
            line: 767,
            column: 12
          },
          end: {
            line: 768,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 767,
            column: 12
          },
          end: {
            line: 768,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 767
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0, 0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/training/ModelTrainingEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/training/ModelTrainingEngine.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { llmService } from '../llmService';\nimport { ModelHealthMonitor } from '../models/ModelHealthMonitor';\nimport { OptimizationEngine } from '../optimization/OptimizationEngine';\nimport { EventStore } from '../analytics/EventStore';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\nimport * as tf from '@tensorflow/tfjs-node';\nimport { createHash } from 'crypto';\nimport axios from 'axios';\n\nexport interface TrainingConfiguration {\n  id: string;\n  name: string;\n  model: string;\n  trainingData: {\n    source: 'file' | 'database' | 'api' | 'synthetic';\n    path?: string;\n    query?: string;\n    endpoint?: string;\n    format: 'jsonl' | 'csv' | 'txt' | 'parquet';\n    validation_split: number;\n  };\n  hyperparameters: {\n    learning_rate: number;\n    batch_size: number;\n    epochs: number;\n    warmup_steps: number;\n    weight_decay: number;\n    dropout_rate: number;\n    gradient_clip_norm: number;\n  };\n  optimization: {\n    optimizer: 'adam' | 'adamw' | 'sgd' | 'rmsprop';\n    scheduler: 'linear' | 'cosine' | 'exponential' | 'polynomial';\n    early_stopping: {\n      enabled: boolean;\n      patience: number;\n      metric: string;\n      min_delta: number;\n    };\n  };\n  evaluation: {\n    metrics: string[];\n    benchmark_datasets: string[];\n    validation_frequency: number;\n    save_best_model: boolean;\n  };\n  resources: {\n    gpu_memory_limit?: number;\n    cpu_cores?: number;\n    memory_limit?: number;\n    storage_limit?: number;\n  };\n  deployment: {\n    auto_deploy: boolean;\n    deployment_target: 'ollama' | 'huggingface' | 'local' | 'cloud';\n    rollback_on_failure: boolean;\n    health_check_enabled: boolean;\n  };\n  metadata: {\n    created_by: string;\n    created_at: Date;\n    tags: string[];\n    description: string;\n    base_model?: string;\n    training_objective: string;\n  };\n}\n\nexport interface TrainingJob {\n  id: string;\n  config: TrainingConfiguration;\n  status: 'pending' | 'initializing' | 'training' | 'evaluating' | 'completed' | 'failed' | 'cancelled';\n  progress: {\n    current_epoch: number;\n    total_epochs: number;\n    current_step: number;\n    total_steps: number;\n    elapsed_time: number;\n    estimated_remaining: number;\n    train_loss: number;\n    validation_loss: number;\n    best_metric: number;\n  };\n  metrics: {\n    training_loss: number[];\n    validation_loss: number[];\n    learning_rate: number[];\n    custom_metrics: Record<string, number[]>;\n  };\n  logs: TrainingLog[];\n  artifacts: {\n    model_path?: string;\n    checkpoints: string[];\n    evaluation_reports: string[];\n    tensorboard_logs?: string;\n  };\n  error?: {\n    message: string;\n    stack?: string;\n    timestamp: Date;\n  };\n  started_at?: Date;\n  completed_at?: Date;\n}\n\nexport interface TrainingLog {\n  timestamp: Date;\n  level: 'info' | 'warning' | 'error' | 'debug';\n  message: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TrainingModelVersion {\n  id: string;\n  model_name: string;\n  version: string;\n  base_model: string;\n  training_job_id: string;\n  performance_metrics: {\n    accuracy: number;\n    f1_score: number;\n    perplexity: number;\n    inference_time: number;\n    memory_usage: number;\n    throughput: number;\n  };\n  model_size: number;\n  deployment_status: 'pending' | 'deployed' | 'deprecated' | 'failed';\n  created_at: Date;\n  deployed_at?: Date;\n  deprecated_at?: Date;\n}\n\nexport interface SyntheticDataGeneration {\n  id: string;\n  template_prompts: string[];\n  generation_config: {\n    num_samples: number;\n    temperature: number;\n    max_tokens: number;\n    diversity_penalty: number;\n    quality_filter: boolean;\n  };\n  output_format: 'jsonl' | 'csv' | 'txt';\n  quality_metrics: {\n    coherence_score: number;\n    relevance_score: number;\n    diversity_score: number;\n    safety_score: number;\n  };\n  status: 'pending' | 'generating' | 'completed' | 'failed';\n  progress: {\n    generated_samples: number;\n    total_samples: number;\n    current_template: number;\n    total_templates: number;\n  };\n}\n\nexport class ModelTrainingEngine extends EventEmitter {\n  private eventStore: EventStore;\n  private modelHealthMonitor: ModelHealthMonitor;\n  private optimizationEngine: OptimizationEngine;\n  private activeJobs: Map<string, TrainingJob>;\n  private modelRegistry: Map<string, TrainingModelVersion[]>;\n  private trainingCache: LRUCache<string, any>;\n  private performanceMetrics: Map<string, number[]>;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.eventStore = EventStore.getInstance();\n    this.activeJobs = new Map();\n    this.modelRegistry = new Map();\n    \n    // Initialize services\n    this.modelHealthMonitor = new ModelHealthMonitor({\n      healthCheckInterval: 60000,\n      benchmarkInterval: 300000,\n      maxResponseTime: 30000,\n      maxErrorRate: 10,\n      minHealthScore: 70,\n      alertThresholds: {\n        responseTime: 15000,\n        errorRate: 10,\n        memoryUsage: 85\n      }\n    });\n    this.optimizationEngine = new OptimizationEngine();\n    \n    // Initialize caches\n    this.trainingCache = new LRUCache({\n      max: 100,\n      ttl: 1000 * 60 * 60 * 2 // 2 hours\n    });\n    \n    this.performanceMetrics = new Map();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('\uD83D\uDE80 Initializing Model Training Engine...');\n      \n      // Initialize TensorFlow backend\n      await this.initializeTensorFlow();\n      \n      // Load existing model registry\n      await this.loadModelRegistry();\n      \n      // Resume any interrupted training jobs\n      await this.resumeInterruptedJobs();\n      \n      this.isInitialized = true;\n      console.log('\u2705 Model Training Engine initialized successfully');\n      \n      this.emit('initialized', { timestamp: new Date() });\n    } catch (error) {\n      console.error('\u274C Failed to initialize Model Training Engine:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new training job\n   */\n  async createTrainingJob(config: Omit<TrainingConfiguration, 'id' | 'metadata'>): Promise<TrainingJob> {\n    const jobId = `train_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const fullConfig: TrainingConfiguration = {\n      ...config,\n      id: jobId,\n      metadata: {\n        created_by: 'system',\n        created_at: new Date(),\n        tags: [],\n        description: '',\n        base_model: config.model,\n        training_objective: 'general_improvement'\n      }\n    };\n\n    // Validate configuration\n    await this.validateTrainingConfig(fullConfig);\n\n    const job: TrainingJob = {\n      id: jobId,\n      config: fullConfig,\n      status: 'pending',\n      progress: {\n        current_epoch: 0,\n        total_epochs: config.hyperparameters.epochs,\n        current_step: 0,\n        total_steps: 0,\n        elapsed_time: 0,\n        estimated_remaining: 0,\n        train_loss: 0,\n        validation_loss: 0,\n        best_metric: 0\n      },\n      metrics: {\n        training_loss: [],\n        validation_loss: [],\n        learning_rate: [],\n        custom_metrics: {}\n      },\n      logs: [],\n      artifacts: {\n        checkpoints: [],\n        evaluation_reports: []\n      }\n    };\n\n    this.activeJobs.set(jobId, job);\n\n    // Record job creation\n    await this.eventStore.recordEvent({\n      event_type: 'training_job_created',\n      entity_id: jobId,\n      entity_type: 'training_job',\n      data: { config: fullConfig },\n      timestamp: new Date()\n    });\n\n    this.emit('jobCreated', { jobId, config: fullConfig });\n\n    return job;\n  }\n\n  /**\n   * Start a training job\n   */\n  async startTrainingJob(jobId: string): Promise<void> {\n    const job = this.activeJobs.get(jobId);\n    if (!job) {\n      throw new Error(`Training job ${jobId} not found`);\n    }\n\n    if (job.status !== 'pending') {\n      throw new Error(`Training job ${jobId} is not in pending status`);\n    }\n\n    job.status = 'initializing';\n    job.started_at = new Date();\n\n    this.addTrainingLog(job, 'info', 'Training job started');\n\n    // Start training in background\n    this.executeTrainingJob(job).catch(error => {\n      this.handleTrainingError(job, error);\n    });\n\n    await this.eventStore.recordEvent({\n      event_type: 'training_job_started',\n      entity_id: jobId,\n      entity_type: 'training_job',\n      data: { status: job.status },\n      timestamp: new Date()\n    });\n\n    this.emit('jobStarted', { jobId, status: job.status });\n  }\n\n  /**\n   * Generate synthetic training data\n   */\n  async generateSyntheticData(config: SyntheticDataGeneration): Promise<string> {\n    const generationId = `synth_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      config.status = 'generating';\n      config.progress = {\n        generated_samples: 0,\n        total_samples: config.generation_config.num_samples,\n        current_template: 0,\n        total_templates: config.template_prompts.length\n      };\n\n      const generatedData: any[] = [];\n      \n      for (let templateIndex = 0; templateIndex < config.template_prompts.length; templateIndex++) {\n        const template = config.template_prompts[templateIndex];\n        config.progress.current_template = templateIndex;\n        \n        const samplesPerTemplate = Math.ceil(config.generation_config.num_samples / config.template_prompts.length);\n        \n        for (let i = 0; i < samplesPerTemplate && config.progress.generated_samples < config.generation_config.num_samples; i++) {\n          try {\n            // Generate variation of the template\n            const prompt = await this.generatePromptVariation(template, config.generation_config);\n            \n            // Generate response using LLM\n            const response = await llmService.generate(prompt, undefined, {\n              temperature: config.generation_config.temperature,\n              num_predict: config.generation_config.max_tokens\n            });\n\n            // Apply quality filtering if enabled\n            if (config.generation_config.quality_filter) {\n              const qualityScore = await this.assessDataQuality(prompt, response.response);\n              if (qualityScore < 0.7) continue; // Skip low-quality samples\n            }\n\n            generatedData.push({\n              prompt: prompt,\n              response: response.response,\n              template_id: templateIndex,\n              generation_id: generationId,\n              timestamp: new Date()\n            });\n\n            config.progress.generated_samples++;\n          } catch (error) {\n            console.warn(`Failed to generate sample ${i} for template ${templateIndex}:`, error);\n          }\n        }\n      }\n\n      // Calculate quality metrics\n      config.quality_metrics = await this.calculateDatasetQuality(generatedData);\n      \n      // Save generated data\n      const outputPath = `/tmp/synthetic_data_${generationId}.${config.output_format}`;\n      await this.saveGeneratedData(generatedData, outputPath, config.output_format);\n      \n      config.status = 'completed';\n      \n      await this.eventStore.recordEvent({\n        event_type: 'synthetic_data_generated',\n        entity_id: generationId,\n        entity_type: 'synthetic_data',\n        data: {\n          config,\n          output_path: outputPath,\n          samples_generated: generatedData.length\n        },\n        timestamp: new Date()\n      });\n\n      return outputPath;\n    } catch (error) {\n      config.status = 'failed';\n      console.error('Failed to generate synthetic data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Evaluate model performance\n   */\n  async evaluateModel(\n    modelName: string,\n    benchmarkDatasets: string[],\n    customMetrics: string[] = []\n  ): Promise<{\n    overall_score: number;\n    detailed_metrics: Record<string, number>;\n    benchmark_results: Record<string, any>;\n    recommendations: string[];\n  }> {\n    const evaluationId = `eval_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      console.log(`\uD83D\uDD0D Evaluating model: ${modelName}`);\n      \n      const benchmarkResults: Record<string, any> = {};\n      const detailedMetrics: Record<string, number> = {};\n      \n      // Run benchmark evaluations\n      for (const dataset of benchmarkDatasets) {\n        const result = await this.runBenchmarkEvaluation(modelName, dataset);\n        benchmarkResults[dataset] = result;\n        \n        // Aggregate metrics\n        Object.entries(result.metrics).forEach(([metric, value]) => {\n          if (!detailedMetrics[metric]) detailedMetrics[metric] = 0;\n          detailedMetrics[metric] += value as number;\n        });\n      }\n      \n      // Average metrics across datasets\n      Object.keys(detailedMetrics).forEach(metric => {\n        detailedMetrics[metric] /= benchmarkDatasets.length;\n      });\n      \n      // Run custom metrics\n      for (const metric of customMetrics) {\n        const value = await this.calculateCustomMetric(modelName, metric);\n        detailedMetrics[metric] = value;\n      }\n      \n      // Calculate overall score\n      const overallScore = this.calculateOverallScore(detailedMetrics);\n      \n      // Generate recommendations\n      const recommendations = await this.generatePerformanceRecommendations(\n        modelName,\n        detailedMetrics,\n        benchmarkResults\n      );\n      \n      const evaluationResult = {\n        overall_score: overallScore,\n        detailed_metrics: detailedMetrics,\n        benchmark_results: benchmarkResults,\n        recommendations\n      };\n      \n      // Store evaluation results\n      await this.eventStore.recordEvent({\n        event_type: 'model_evaluation',\n        entity_id: evaluationId,\n        entity_type: 'evaluation',\n        data: {\n          model_name: modelName,\n          ...evaluationResult\n        },\n        timestamp: new Date()\n      });\n      \n      return evaluationResult;\n    } catch (error) {\n      console.error(`Failed to evaluate model ${modelName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Deploy trained model\n   */\n  async deployModel(\n    modelVersionId: string,\n    target: 'ollama' | 'huggingface' | 'local' | 'cloud',\n    config: {\n      auto_rollback?: boolean;\n      health_check_timeout?: number;\n      deployment_tags?: string[];\n    } = {}\n  ): Promise<{\n    deployment_id: string;\n    status: 'success' | 'failed';\n    endpoint?: string;\n    health_status?: any;\n  }> {\n    const deploymentId = `deploy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      console.log(`\uD83D\uDE80 Deploying model version: ${modelVersionId} to ${target}`);\n      \n      // Get model version details\n      const modelVersion = await this.getModelVersion(modelVersionId);\n      if (!modelVersion) {\n        throw new Error(`Model version ${modelVersionId} not found`);\n      }\n      \n      let deploymentResult;\n      \n      switch (target) {\n        case 'ollama':\n          deploymentResult = await this.deployToOllama(modelVersion, config);\n          break;\n        case 'huggingface':\n          deploymentResult = await this.deployToHuggingFace(modelVersion, config);\n          break;\n        case 'local':\n          deploymentResult = await this.deployToLocal(modelVersion, config);\n          break;\n        case 'cloud':\n          deploymentResult = await this.deployToCloud(modelVersion, config);\n          break;\n        default:\n          throw new Error(`Unsupported deployment target: ${target}`);\n      }\n      \n      // Update model version status\n      modelVersion.deployment_status = deploymentResult.status === 'success' ? 'deployed' : 'failed';\n      if (deploymentResult.status === 'success') {\n        modelVersion.deployed_at = new Date();\n      }\n      \n      await this.updateModelVersion(modelVersion);\n      \n      // Record deployment\n      await this.eventStore.recordEvent({\n        event_type: 'model_deployed',\n        entity_id: deploymentId,\n        entity_type: 'deployment',\n        data: {\n          model_version_id: modelVersionId,\n          target,\n          config,\n          result: deploymentResult\n        },\n        timestamp: new Date()\n      });\n      \n      return {\n        deployment_id: deploymentId,\n        ...deploymentResult\n      };\n    } catch (error) {\n      console.error(`Failed to deploy model ${modelVersionId}:`, error);\n      \n      await this.eventStore.recordEvent({\n        event_type: 'model_deployment_failed',\n        entity_id: deploymentId,\n        entity_type: 'deployment',\n        data: {\n          model_version_id: modelVersionId,\n          target,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        },\n        timestamp: new Date()\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Get training job status\n   */\n  getTrainingJob(jobId: string): TrainingJob | undefined {\n    return this.activeJobs.get(jobId);\n  }\n\n  /**\n   * List all training jobs\n   */\n  listTrainingJobs(filters: {\n    status?: string;\n    model?: string;\n    created_after?: Date;\n    created_before?: Date;\n  } = {}): TrainingJob[] {\n    const jobs = Array.from(this.activeJobs.values());\n    \n    return jobs.filter(job => {\n      if (filters.status && job.status !== filters.status) return false;\n      if (filters.model && job.config.model !== filters.model) return false;\n      if (filters.created_after && job.config.metadata.created_at < filters.created_after) return false;\n      if (filters.created_before && job.config.metadata.created_at > filters.created_before) return false;\n      return true;\n    });\n  }\n\n  /**\n   * Cancel training job\n   */\n  async cancelTrainingJob(jobId: string): Promise<void> {\n    const job = this.activeJobs.get(jobId);\n    if (!job) {\n      throw new Error(`Training job ${jobId} not found`);\n    }\n\n    if (!['pending', 'initializing', 'training'].includes(job.status)) {\n      throw new Error(`Training job ${jobId} cannot be cancelled in status: ${job.status}`);\n    }\n\n    job.status = 'cancelled';\n    this.addTrainingLog(job, 'info', 'Training job cancelled by user');\n\n    await this.eventStore.recordEvent({\n      event_type: 'training_job_cancelled',\n      entity_id: jobId,\n      entity_type: 'training_job',\n      data: { status: job.status },\n      timestamp: new Date()\n    });\n\n    this.emit('jobCancelled', { jobId, status: job.status });\n  }\n\n  /**\n   * Get model registry\n   */\n  getModelRegistry(): Map<string, TrainingModelVersion[]> {\n    return new Map(this.modelRegistry);\n  }\n\n  /**\n   * Get training performance statistics\n   */\n  getTrainingStatistics(): {\n    total_jobs: number;\n    successful_jobs: number;\n    failed_jobs: number;\n    average_training_time: number;\n    models_deployed: number;\n    total_training_hours: number;\n  } {\n    const jobs = Array.from(this.activeJobs.values());\n    const completedJobs = jobs.filter(job => job.status === 'completed');\n    const failedJobs = jobs.filter(job => job.status === 'failed');\n    \n    const averageTrainingTime = completedJobs.length > 0\n      ? completedJobs.reduce((sum, job) => sum + job.progress.elapsed_time, 0) / completedJobs.length\n      : 0;\n    \n    const totalTrainingHours = jobs.reduce((sum, job) => sum + job.progress.elapsed_time, 0) / (1000 * 60 * 60);\n    \n    const modelsDeployed = Array.from(this.modelRegistry.values())\n      .flat()\n      .filter(version => version.deployment_status === 'deployed').length;\n\n    return {\n      total_jobs: jobs.length,\n      successful_jobs: completedJobs.length,\n      failed_jobs: failedJobs.length,\n      average_training_time: averageTrainingTime,\n      models_deployed: modelsDeployed,\n      total_training_hours: totalTrainingHours\n    };\n  }\n\n  // Private methods\n  private async initializeTensorFlow(): Promise<void> {\n    try {\n      // Set TensorFlow backend\n      tf.setBackend('tensorflow');\n      console.log('\u2705 TensorFlow backend initialized');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to initialize TensorFlow backend, using CPU fallback');\n    }\n  }\n\n  private async loadModelRegistry(): Promise<void> {\n    try {\n      // Load existing model versions from database/storage\n      // This would connect to your actual storage system\n      console.log('\uD83D\uDCCB Model registry loaded');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to load model registry:', error);\n    }\n  }\n\n  private async resumeInterruptedJobs(): Promise<void> {\n    try {\n      // Resume any training jobs that were interrupted\n      console.log('\uD83D\uDD04 Checking for interrupted training jobs...');\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to resume interrupted jobs:', error);\n    }\n  }\n\n  private async validateTrainingConfig(config: TrainingConfiguration): Promise<void> {\n    // Validate training configuration\n    if (!config.model) {\n      throw new Error('Model name is required');\n    }\n    \n    if (config.hyperparameters.epochs <= 0) {\n      throw new Error('Epochs must be greater than 0');\n    }\n    \n    if (config.hyperparameters.learning_rate <= 0 || config.hyperparameters.learning_rate > 1) {\n      throw new Error('Learning rate must be between 0 and 1');\n    }\n    \n    if (config.trainingData.validation_split <= 0 || config.trainingData.validation_split >= 1) {\n      throw new Error('Validation split must be between 0 and 1');\n    }\n  }\n\n  private async executeTrainingJob(job: TrainingJob): Promise<void> {\n    try {\n      job.status = 'training';\n      this.addTrainingLog(job, 'info', 'Starting training process');\n      \n      // Simulate training process (replace with actual training logic)\n      await this.simulateTraining(job);\n      \n      job.status = 'evaluating';\n      this.addTrainingLog(job, 'info', 'Training completed, starting evaluation');\n      \n      // Evaluate trained model\n      const evaluation = await this.evaluateTrainedModel(job);\n      \n      // Create model version\n      const modelVersion = await this.createModelVersion(job, evaluation);\n      \n      job.status = 'completed';\n      job.completed_at = new Date();\n      \n      this.addTrainingLog(job, 'info', `Training completed successfully. Model version: ${modelVersion.id}`);\n      \n      await this.eventStore.recordEvent({\n        event_type: 'training_job_completed',\n        entity_id: job.id,\n        entity_type: 'training_job',\n        data: {\n          model_version_id: modelVersion.id,\n          performance_metrics: modelVersion.performance_metrics\n        },\n        timestamp: new Date()\n      });\n      \n      this.emit('jobCompleted', {\n        jobId: job.id,\n        modelVersionId: modelVersion.id,\n        metrics: modelVersion.performance_metrics\n      });\n      \n    } catch (error) {\n      this.handleTrainingError(job, error);\n    }\n  }\n\n  private async simulateTraining(job: TrainingJob): Promise<void> {\n    // This is a simulation - replace with actual training logic\n    const totalSteps = job.config.hyperparameters.epochs * 100; // Assume 100 steps per epoch\n    job.progress.total_steps = totalSteps;\n    \n    for (let epoch = 1; epoch <= job.config.hyperparameters.epochs; epoch++) {\n      job.progress.current_epoch = epoch;\n      \n      for (let step = 1; step <= 100; step++) {\n        if (job.status === 'cancelled') {\n          throw new Error('Training cancelled by user');\n        }\n        \n        job.progress.current_step = (epoch - 1) * 100 + step;\n        \n        // Simulate training metrics\n        const trainLoss = Math.max(0.1, 2.0 * Math.exp(-job.progress.current_step / 1000) + Math.random() * 0.1);\n        const valLoss = trainLoss * (1.1 + Math.random() * 0.2);\n        const lr = job.config.hyperparameters.learning_rate * Math.pow(0.95, epoch - 1);\n        \n        job.progress.train_loss = trainLoss;\n        job.progress.validation_loss = valLoss;\n        job.metrics.training_loss.push(trainLoss);\n        job.metrics.validation_loss.push(valLoss);\n        job.metrics.learning_rate.push(lr);\n        \n        // Update best metric\n        if (step === 1 && epoch === 1) {\n          job.progress.best_metric = valLoss;\n        } else if (valLoss < job.progress.best_metric) {\n          job.progress.best_metric = valLoss;\n        }\n        \n        // Estimate remaining time\n        const elapsed = Date.now() - (job.started_at?.getTime() || Date.now());\n        job.progress.elapsed_time = elapsed;\n        const remaining = (elapsed / job.progress.current_step) * (totalSteps - job.progress.current_step);\n        job.progress.estimated_remaining = remaining;\n        \n        // Emit progress update\n        if (step % 10 === 0) {\n          this.emit('trainingProgress', {\n            jobId: job.id,\n            progress: job.progress,\n            metrics: {\n              train_loss: trainLoss,\n              validation_loss: valLoss,\n              learning_rate: lr\n            }\n          });\n        }\n        \n        // Simulate training time\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      this.addTrainingLog(job, 'info', `Completed epoch ${epoch}/${job.config.hyperparameters.epochs}`);\n      \n      // Save checkpoint\n      const checkpointPath = `/tmp/checkpoint_${job.id}_epoch_${epoch}.pth`;\n      job.artifacts.checkpoints.push(checkpointPath);\n      \n      // Early stopping check\n      if (job.config.optimization.early_stopping.enabled) {\n        const shouldStop = await this.checkEarlyStopping(job, epoch);\n        if (shouldStop) {\n          this.addTrainingLog(job, 'info', `Early stopping triggered at epoch ${epoch}`);\n          break;\n        }\n      }\n    }\n  }\n\n  private async checkEarlyStopping(job: TrainingJob, currentEpoch: number): Promise<boolean> {\n    const { early_stopping } = job.config.optimization;\n    if (!early_stopping.enabled || currentEpoch < early_stopping.patience) {\n      return false;\n    }\n    \n    const recentLosses = job.metrics.validation_loss.slice(-early_stopping.patience);\n    const bestRecentLoss = Math.min(...recentLosses);\n    const currentLoss = job.progress.validation_loss;\n    \n    return (currentLoss - bestRecentLoss) < early_stopping.min_delta;\n  }\n\n  private async evaluateTrainedModel(job: TrainingJob): Promise<any> {\n    // Simulate model evaluation\n    return {\n      accuracy: 0.85 + Math.random() * 0.1,\n      f1_score: 0.80 + Math.random() * 0.15,\n      perplexity: 15 + Math.random() * 10,\n      inference_time: 100 + Math.random() * 50,\n      memory_usage: 512 + Math.random() * 256,\n      throughput: 50 + Math.random() * 20\n    };\n  }\n\n  private async createModelVersion(job: TrainingJob, evaluation: any): Promise<TrainingModelVersion> {\n    const versionId = `${job.config.model}_v${Date.now()}`;\n    \n    const modelVersion: TrainingModelVersion = {\n      id: versionId,\n      model_name: job.config.model,\n      version: `1.0.${Date.now()}`,\n      base_model: job.config.metadata.base_model || job.config.model,\n      training_job_id: job.id,\n      performance_metrics: evaluation,\n      model_size: Math.round(1000 + Math.random() * 5000), // MB\n      deployment_status: 'pending',\n      created_at: new Date()\n    };\n    \n    // Add to registry\n    if (!this.modelRegistry.has(job.config.model)) {\n      this.modelRegistry.set(job.config.model, []);\n    }\n    this.modelRegistry.get(job.config.model)!.push(modelVersion);\n    \n    return modelVersion;\n  }\n\n  private handleTrainingError(job: TrainingJob, error: any): void {\n    job.status = 'failed';\n    job.error = {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      timestamp: new Date()\n    };\n    \n    this.addTrainingLog(job, 'error', `Training failed: ${job.error.message}`);\n    \n    this.emit('jobFailed', {\n      jobId: job.id,\n      error: job.error\n    });\n  }\n\n  private addTrainingLog(job: TrainingJob, level: TrainingLog['level'], message: string, metadata?: any): void {\n    job.logs.push({\n      timestamp: new Date(),\n      level,\n      message,\n      metadata\n    });\n    \n    // Keep only last 1000 logs to prevent memory issues\n    if (job.logs.length > 1000) {\n      job.logs = job.logs.slice(-1000);\n    }\n  }\n\n  private async generatePromptVariation(template: string, config: any): Promise<string> {\n    // Generate variations of the template prompt\n    const variationPrompt = `Create a variation of this prompt template that maintains the same purpose but uses different wording:\n\nTemplate: \"${template}\"\n\nReturn only the varied prompt without explanations.`;\n\n    try {\n      const response = await llmService.generate(variationPrompt, undefined, {\n        temperature: config.temperature,\n        num_predict: Math.min(500, config.max_tokens)\n      });\n      return response.response.trim();\n    } catch (error) {\n      console.warn('Failed to generate prompt variation, using original:', error);\n      return template;\n    }\n  }\n\n  private async assessDataQuality(prompt: string, response: string): Promise<number> {\n    // Simple quality assessment - replace with more sophisticated logic\n    let score = 0.5;\n    \n    // Check response length\n    if (response.length > 50 && response.length < 2000) score += 0.2;\n    \n    // Check for coherence (simple heuristic)\n    if (response.includes('.') && response.split('.').length > 1) score += 0.1;\n    \n    // Check for relevance (keyword matching)\n    const promptWords = prompt.toLowerCase().split(' ');\n    const responseWords = response.toLowerCase().split(' ');\n    const overlap = promptWords.filter(word => responseWords.includes(word)).length;\n    score += Math.min(0.2, overlap / promptWords.length);\n    \n    return Math.min(1.0, score);\n  }\n\n  private async calculateDatasetQuality(data: any[]): Promise<any> {\n    if (data.length === 0) {\n      return { coherence_score: 0, relevance_score: 0, diversity_score: 0, safety_score: 0 };\n    }\n    \n    let totalCoherence = 0;\n    let totalRelevance = 0;\n    let totalSafety = 0;\n    \n    for (const item of data) {\n      totalCoherence += await this.assessDataQuality(item.prompt, item.response);\n      totalRelevance += await this.assessDataQuality(item.prompt, item.response);\n      totalSafety += 0.9; // Assume high safety for generated data\n    }\n    \n    // Calculate diversity (unique prompts / total prompts)\n    const uniquePrompts = new Set(data.map(item => item.prompt.toLowerCase())).size;\n    const diversityScore = uniquePrompts / data.length;\n    \n    return {\n      coherence_score: totalCoherence / data.length,\n      relevance_score: totalRelevance / data.length,\n      diversity_score: diversityScore,\n      safety_score: totalSafety / data.length\n    };\n  }\n\n  private async saveGeneratedData(data: any[], outputPath: string, format: string): Promise<void> {\n    // Save data in specified format (implement actual file saving logic)\n    console.log(`Saving ${data.length} samples to ${outputPath} in ${format} format`);\n  }\n\n  private async runBenchmarkEvaluation(modelName: string, dataset: string): Promise<any> {\n    // Implement benchmark evaluation logic\n    return {\n      dataset_name: dataset,\n      metrics: {\n        accuracy: 0.75 + Math.random() * 0.2,\n        f1_score: 0.70 + Math.random() * 0.25,\n        bleu_score: 0.65 + Math.random() * 0.3\n      },\n      sample_count: 1000,\n      evaluation_time: Date.now()\n    };\n  }\n\n  private async calculateCustomMetric(modelName: string, metric: string): Promise<number> {\n    // Implement custom metric calculation\n    return 0.8 + Math.random() * 0.2;\n  }\n\n  private calculateOverallScore(metrics: Record<string, number>): number {\n    const weights = {\n      accuracy: 0.3,\n      f1_score: 0.3,\n      bleu_score: 0.2,\n      inference_time: -0.1, // Negative weight for latency\n      memory_usage: -0.1    // Negative weight for memory usage\n    };\n    \n    let score = 0;\n    let totalWeight = 0;\n    \n    Object.entries(metrics).forEach(([metric, value]) => {\n      const weight = weights[metric] || 0.1;\n      score += value * weight;\n      totalWeight += Math.abs(weight);\n    });\n    \n    return totalWeight > 0 ? Math.max(0, Math.min(1, score / totalWeight)) : 0.5;\n  }\n\n  private async generatePerformanceRecommendations(\n    modelName: string,\n    metrics: Record<string, number>,\n    benchmarkResults: Record<string, any>\n  ): Promise<string[]> {\n    const recommendations: string[] = [];\n    \n    if (metrics.accuracy < 0.8) {\n      recommendations.push('Consider increasing training data or adjusting hyperparameters to improve accuracy');\n    }\n    \n    if (metrics.inference_time > 200) {\n      recommendations.push('Model inference time is high. Consider model optimization or quantization');\n    }\n    \n    if (metrics.memory_usage > 1000) {\n      recommendations.push('High memory usage detected. Consider model pruning or compression');\n    }\n    \n    return recommendations;\n  }\n\n  private async getModelVersion(versionId: string): Promise<TrainingModelVersion | null> {\n    for (const versions of this.modelRegistry.values()) {\n      const version = versions.find(v => v.id === versionId);\n      if (version) return version;\n    }\n    return null;\n  }\n\n  private async updateModelVersion(version: TrainingModelVersion): Promise<void> {\n    // Update model version in registry and storage\n    console.log(`Updated model version: ${version.id}`);\n  }\n\n  private async deployToOllama(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement Ollama deployment\n    return { status: 'success', endpoint: `http://localhost:11434/api/generate` };\n  }\n\n  private async deployToHuggingFace(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement HuggingFace deployment\n    return { status: 'success', endpoint: `https://huggingface.co/models/${version.model_name}` };\n  }\n\n  private async deployToLocal(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement local deployment\n    return { status: 'success', endpoint: `http://localhost:8080/api/generate` };\n  }\n\n  private async deployToCloud(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement cloud deployment\n    return { status: 'success', endpoint: `https://api.cloud-provider.com/models/${version.id}` };\n  }\n}\n\n// Export singleton instance\nexport const modelTrainingEngine = new ModelTrainingEngine();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e438455e7acf5166c53c63f2f2af266ed2c95280"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dgzyh8f2g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dgzyh8f2g();
var __createBinding =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[0]++,
/* istanbul ignore next */
(cov_dgzyh8f2g().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_dgzyh8f2g().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_dgzyh8f2g().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_dgzyh8f2g().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_dgzyh8f2g().f[0]++;
  cov_dgzyh8f2g().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().b[2][0]++;
    cov_dgzyh8f2g().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_dgzyh8f2g().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_dgzyh8f2g().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_dgzyh8f2g().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[5][1]++,
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().b[3][0]++;
    cov_dgzyh8f2g().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_dgzyh8f2g().f[1]++;
        cov_dgzyh8f2g().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_dgzyh8f2g().b[3][1]++;
  }
  cov_dgzyh8f2g().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_dgzyh8f2g().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_dgzyh8f2g().f[2]++;
  cov_dgzyh8f2g().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().b[7][0]++;
    cov_dgzyh8f2g().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_dgzyh8f2g().b[7][1]++;
  }
  cov_dgzyh8f2g().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[11]++,
/* istanbul ignore next */
(cov_dgzyh8f2g().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_dgzyh8f2g().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_dgzyh8f2g().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_dgzyh8f2g().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_dgzyh8f2g().f[3]++;
  cov_dgzyh8f2g().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_dgzyh8f2g().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_dgzyh8f2g().f[4]++;
  cov_dgzyh8f2g().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[14]++,
/* istanbul ignore next */
(cov_dgzyh8f2g().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_dgzyh8f2g().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_dgzyh8f2g().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_dgzyh8f2g().f[5]++;
  cov_dgzyh8f2g().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[6]++;
    cov_dgzyh8f2g().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[17]++, []);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[12][0]++;
          cov_dgzyh8f2g().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_dgzyh8f2g().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_dgzyh8f2g().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[8]++;
    cov_dgzyh8f2g().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[13][0]++;
      cov_dgzyh8f2g().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[26]++, {});
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[15][0]++;
      cov_dgzyh8f2g().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[16][0]++;
          cov_dgzyh8f2g().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_dgzyh8f2g().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[15][1]++;
    }
    cov_dgzyh8f2g().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_dgzyh8f2g().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_dgzyh8f2g().s[36]++;
exports.modelTrainingEngine = exports.ModelTrainingEngine = void 0;
const events_1 =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[37]++, require("events"));
const llmService_1 =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[38]++, require("../llmService"));
const ModelHealthMonitor_1 =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[39]++, require("../models/ModelHealthMonitor"));
const OptimizationEngine_1 =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[40]++, require("../optimization/OptimizationEngine"));
const EventStore_1 =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[41]++, require("../analytics/EventStore"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[42]++, require("lru-cache"));
const tf =
/* istanbul ignore next */
(cov_dgzyh8f2g().s[43]++, __importStar(require("@tensorflow/tfjs-node")));
class ModelTrainingEngine extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[9]++;
    cov_dgzyh8f2g().s[44]++;
    super();
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[45]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[46]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[47]++;
    this.activeJobs = new Map();
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[48]++;
    this.modelRegistry = new Map();
    // Initialize services
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[49]++;
    this.modelHealthMonitor = new ModelHealthMonitor_1.ModelHealthMonitor({
      healthCheckInterval: 60000,
      benchmarkInterval: 300000,
      maxResponseTime: 30000,
      maxErrorRate: 10,
      minHealthScore: 70,
      alertThresholds: {
        responseTime: 15000,
        errorRate: 10,
        memoryUsage: 85
      }
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[50]++;
    this.optimizationEngine = new OptimizationEngine_1.OptimizationEngine();
    // Initialize caches
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[51]++;
    this.trainingCache = new lru_cache_1.LRUCache({
      max: 100,
      ttl: 1000 * 60 * 60 * 2 // 2 hours
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[52]++;
    this.performanceMetrics = new Map();
  }
  async initialize() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[10]++;
    cov_dgzyh8f2g().s[53]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[17][0]++;
      cov_dgzyh8f2g().s[54]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[17][1]++;
    }
    cov_dgzyh8f2g().s[55]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[56]++;
      console.log('🚀 Initializing Model Training Engine...');
      // Initialize TensorFlow backend
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[57]++;
      await this.initializeTensorFlow();
      // Load existing model registry
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[58]++;
      await this.loadModelRegistry();
      // Resume any interrupted training jobs
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[59]++;
      await this.resumeInterruptedJobs();
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[60]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[61]++;
      console.log('✅ Model Training Engine initialized successfully');
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[62]++;
      this.emit('initialized', {
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[63]++;
      console.error('❌ Failed to initialize Model Training Engine:', error);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[64]++;
      throw error;
    }
  }
  /**
   * Create a new training job
   */
  async createTrainingJob(config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[11]++;
    const jobId =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[65]++, `train_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const fullConfig =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[66]++, {
      ...config,
      id: jobId,
      metadata: {
        created_by: 'system',
        created_at: new Date(),
        tags: [],
        description: '',
        base_model: config.model,
        training_objective: 'general_improvement'
      }
    });
    // Validate configuration
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[67]++;
    await this.validateTrainingConfig(fullConfig);
    const job =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[68]++, {
      id: jobId,
      config: fullConfig,
      status: 'pending',
      progress: {
        current_epoch: 0,
        total_epochs: config.hyperparameters.epochs,
        current_step: 0,
        total_steps: 0,
        elapsed_time: 0,
        estimated_remaining: 0,
        train_loss: 0,
        validation_loss: 0,
        best_metric: 0
      },
      metrics: {
        training_loss: [],
        validation_loss: [],
        learning_rate: [],
        custom_metrics: {}
      },
      logs: [],
      artifacts: {
        checkpoints: [],
        evaluation_reports: []
      }
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[69]++;
    this.activeJobs.set(jobId, job);
    // Record job creation
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[70]++;
    await this.eventStore.recordEvent({
      event_type: 'training_job_created',
      entity_id: jobId,
      entity_type: 'training_job',
      data: {
        config: fullConfig
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[71]++;
    this.emit('jobCreated', {
      jobId,
      config: fullConfig
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[72]++;
    return job;
  }
  /**
   * Start a training job
   */
  async startTrainingJob(jobId) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[12]++;
    const job =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[73]++, this.activeJobs.get(jobId));
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[74]++;
    if (!job) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[18][0]++;
      cov_dgzyh8f2g().s[75]++;
      throw new Error(`Training job ${jobId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[18][1]++;
    }
    cov_dgzyh8f2g().s[76]++;
    if (job.status !== 'pending') {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[19][0]++;
      cov_dgzyh8f2g().s[77]++;
      throw new Error(`Training job ${jobId} is not in pending status`);
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[19][1]++;
    }
    cov_dgzyh8f2g().s[78]++;
    job.status = 'initializing';
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[79]++;
    job.started_at = new Date();
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[80]++;
    this.addTrainingLog(job, 'info', 'Training job started');
    // Start training in background
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[81]++;
    this.executeTrainingJob(job).catch(error => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[13]++;
      cov_dgzyh8f2g().s[82]++;
      this.handleTrainingError(job, error);
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[83]++;
    await this.eventStore.recordEvent({
      event_type: 'training_job_started',
      entity_id: jobId,
      entity_type: 'training_job',
      data: {
        status: job.status
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[84]++;
    this.emit('jobStarted', {
      jobId,
      status: job.status
    });
  }
  /**
   * Generate synthetic training data
   */
  async generateSyntheticData(config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[14]++;
    const generationId =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[85]++, `synth_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[86]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[87]++;
      config.status = 'generating';
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[88]++;
      config.progress = {
        generated_samples: 0,
        total_samples: config.generation_config.num_samples,
        current_template: 0,
        total_templates: config.template_prompts.length
      };
      const generatedData =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[89]++, []);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[90]++;
      for (let templateIndex =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[91]++, 0); templateIndex < config.template_prompts.length; templateIndex++) {
        const template =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[92]++, config.template_prompts[templateIndex]);
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[93]++;
        config.progress.current_template = templateIndex;
        const samplesPerTemplate =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[94]++, Math.ceil(config.generation_config.num_samples / config.template_prompts.length));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[95]++;
        for (let i =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[96]++, 0);
        /* istanbul ignore next */
        (cov_dgzyh8f2g().b[20][0]++, i < samplesPerTemplate) &&
        /* istanbul ignore next */
        (cov_dgzyh8f2g().b[20][1]++, config.progress.generated_samples < config.generation_config.num_samples); i++) {
          /* istanbul ignore next */
          cov_dgzyh8f2g().s[97]++;
          try {
            // Generate variation of the template
            const prompt =
            /* istanbul ignore next */
            (cov_dgzyh8f2g().s[98]++, await this.generatePromptVariation(template, config.generation_config));
            // Generate response using LLM
            const response =
            /* istanbul ignore next */
            (cov_dgzyh8f2g().s[99]++, await llmService_1.llmService.generate(prompt, undefined, {
              temperature: config.generation_config.temperature,
              num_predict: config.generation_config.max_tokens
            }));
            // Apply quality filtering if enabled
            /* istanbul ignore next */
            cov_dgzyh8f2g().s[100]++;
            if (config.generation_config.quality_filter) {
              /* istanbul ignore next */
              cov_dgzyh8f2g().b[21][0]++;
              const qualityScore =
              /* istanbul ignore next */
              (cov_dgzyh8f2g().s[101]++, await this.assessDataQuality(prompt, response.response));
              /* istanbul ignore next */
              cov_dgzyh8f2g().s[102]++;
              if (qualityScore < 0.7) {
                /* istanbul ignore next */
                cov_dgzyh8f2g().b[22][0]++;
                cov_dgzyh8f2g().s[103]++;
                continue;
              } else
              /* istanbul ignore next */
              {
                cov_dgzyh8f2g().b[22][1]++;
              } // Skip low-quality samples
            } else
            /* istanbul ignore next */
            {
              cov_dgzyh8f2g().b[21][1]++;
            }
            cov_dgzyh8f2g().s[104]++;
            generatedData.push({
              prompt: prompt,
              response: response.response,
              template_id: templateIndex,
              generation_id: generationId,
              timestamp: new Date()
            });
            /* istanbul ignore next */
            cov_dgzyh8f2g().s[105]++;
            config.progress.generated_samples++;
          } catch (error) {
            /* istanbul ignore next */
            cov_dgzyh8f2g().s[106]++;
            console.warn(`Failed to generate sample ${i} for template ${templateIndex}:`, error);
          }
        }
      }
      // Calculate quality metrics
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[107]++;
      config.quality_metrics = await this.calculateDatasetQuality(generatedData);
      // Save generated data
      const outputPath =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[108]++, `/tmp/synthetic_data_${generationId}.${config.output_format}`);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[109]++;
      await this.saveGeneratedData(generatedData, outputPath, config.output_format);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[110]++;
      config.status = 'completed';
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[111]++;
      await this.eventStore.recordEvent({
        event_type: 'synthetic_data_generated',
        entity_id: generationId,
        entity_type: 'synthetic_data',
        data: {
          config,
          output_path: outputPath,
          samples_generated: generatedData.length
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[112]++;
      return outputPath;
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[113]++;
      config.status = 'failed';
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[114]++;
      console.error('Failed to generate synthetic data:', error);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[115]++;
      throw error;
    }
  }
  /**
   * Evaluate model performance
   */
  async evaluateModel(modelName, benchmarkDatasets, customMetrics =
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[23][0]++, [])) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[15]++;
    const evaluationId =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[116]++, `eval_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[117]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[118]++;
      console.log(`🔍 Evaluating model: ${modelName}`);
      const benchmarkResults =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[119]++, {});
      const detailedMetrics =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[120]++, {});
      // Run benchmark evaluations
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[121]++;
      for (const dataset of benchmarkDatasets) {
        const result =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[122]++, await this.runBenchmarkEvaluation(modelName, dataset));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[123]++;
        benchmarkResults[dataset] = result;
        // Aggregate metrics
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[124]++;
        Object.entries(result.metrics).forEach(([metric, value]) => {
          /* istanbul ignore next */
          cov_dgzyh8f2g().f[16]++;
          cov_dgzyh8f2g().s[125]++;
          if (!detailedMetrics[metric]) {
            /* istanbul ignore next */
            cov_dgzyh8f2g().b[24][0]++;
            cov_dgzyh8f2g().s[126]++;
            detailedMetrics[metric] = 0;
          } else
          /* istanbul ignore next */
          {
            cov_dgzyh8f2g().b[24][1]++;
          }
          cov_dgzyh8f2g().s[127]++;
          detailedMetrics[metric] += value;
        });
      }
      // Average metrics across datasets
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[128]++;
      Object.keys(detailedMetrics).forEach(metric => {
        /* istanbul ignore next */
        cov_dgzyh8f2g().f[17]++;
        cov_dgzyh8f2g().s[129]++;
        detailedMetrics[metric] /= benchmarkDatasets.length;
      });
      // Run custom metrics
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[130]++;
      for (const metric of customMetrics) {
        const value =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[131]++, await this.calculateCustomMetric(modelName, metric));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[132]++;
        detailedMetrics[metric] = value;
      }
      // Calculate overall score
      const overallScore =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[133]++, this.calculateOverallScore(detailedMetrics));
      // Generate recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[134]++, await this.generatePerformanceRecommendations(modelName, detailedMetrics, benchmarkResults));
      const evaluationResult =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[135]++, {
        overall_score: overallScore,
        detailed_metrics: detailedMetrics,
        benchmark_results: benchmarkResults,
        recommendations
      });
      // Store evaluation results
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[136]++;
      await this.eventStore.recordEvent({
        event_type: 'model_evaluation',
        entity_id: evaluationId,
        entity_type: 'evaluation',
        data: {
          model_name: modelName,
          ...evaluationResult
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[137]++;
      return evaluationResult;
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[138]++;
      console.error(`Failed to evaluate model ${modelName}:`, error);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[139]++;
      throw error;
    }
  }
  /**
   * Deploy trained model
   */
  async deployModel(modelVersionId, target, config =
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[25][0]++, {})) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[18]++;
    const deploymentId =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[140]++, `deploy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[141]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[142]++;
      console.log(`🚀 Deploying model version: ${modelVersionId} to ${target}`);
      // Get model version details
      const modelVersion =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[143]++, await this.getModelVersion(modelVersionId));
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[144]++;
      if (!modelVersion) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[26][0]++;
        cov_dgzyh8f2g().s[145]++;
        throw new Error(`Model version ${modelVersionId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[26][1]++;
      }
      let deploymentResult;
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[146]++;
      switch (target) {
        case 'ollama':
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[27][0]++;
          cov_dgzyh8f2g().s[147]++;
          deploymentResult = await this.deployToOllama(modelVersion, config);
          /* istanbul ignore next */
          cov_dgzyh8f2g().s[148]++;
          break;
        case 'huggingface':
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[27][1]++;
          cov_dgzyh8f2g().s[149]++;
          deploymentResult = await this.deployToHuggingFace(modelVersion, config);
          /* istanbul ignore next */
          cov_dgzyh8f2g().s[150]++;
          break;
        case 'local':
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[27][2]++;
          cov_dgzyh8f2g().s[151]++;
          deploymentResult = await this.deployToLocal(modelVersion, config);
          /* istanbul ignore next */
          cov_dgzyh8f2g().s[152]++;
          break;
        case 'cloud':
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[27][3]++;
          cov_dgzyh8f2g().s[153]++;
          deploymentResult = await this.deployToCloud(modelVersion, config);
          /* istanbul ignore next */
          cov_dgzyh8f2g().s[154]++;
          break;
        default:
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[27][4]++;
          cov_dgzyh8f2g().s[155]++;
          throw new Error(`Unsupported deployment target: ${target}`);
      }
      // Update model version status
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[156]++;
      modelVersion.deployment_status = deploymentResult.status === 'success' ?
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[28][0]++, 'deployed') :
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[28][1]++, 'failed');
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[157]++;
      if (deploymentResult.status === 'success') {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[29][0]++;
        cov_dgzyh8f2g().s[158]++;
        modelVersion.deployed_at = new Date();
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[29][1]++;
      }
      cov_dgzyh8f2g().s[159]++;
      await this.updateModelVersion(modelVersion);
      // Record deployment
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[160]++;
      await this.eventStore.recordEvent({
        event_type: 'model_deployed',
        entity_id: deploymentId,
        entity_type: 'deployment',
        data: {
          model_version_id: modelVersionId,
          target,
          config,
          result: deploymentResult
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[161]++;
      return {
        deployment_id: deploymentId,
        ...deploymentResult
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[162]++;
      console.error(`Failed to deploy model ${modelVersionId}:`, error);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[163]++;
      await this.eventStore.recordEvent({
        event_type: 'model_deployment_failed',
        entity_id: deploymentId,
        entity_type: 'deployment',
        data: {
          model_version_id: modelVersionId,
          target,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_dgzyh8f2g().b[30][0]++, error.message) :
          /* istanbul ignore next */
          (cov_dgzyh8f2g().b[30][1]++, 'Unknown error')
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[164]++;
      throw error;
    }
  }
  /**
   * Get training job status
   */
  getTrainingJob(jobId) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[19]++;
    cov_dgzyh8f2g().s[165]++;
    return this.activeJobs.get(jobId);
  }
  /**
   * List all training jobs
   */
  listTrainingJobs(filters =
  /* istanbul ignore next */
  (cov_dgzyh8f2g().b[31][0]++, {})) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[20]++;
    const jobs =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[166]++, Array.from(this.activeJobs.values()));
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[167]++;
    return jobs.filter(job => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[21]++;
      cov_dgzyh8f2g().s[168]++;
      if (
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[33][0]++, filters.status) &&
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[33][1]++, job.status !== filters.status)) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[32][0]++;
        cov_dgzyh8f2g().s[169]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[32][1]++;
      }
      cov_dgzyh8f2g().s[170]++;
      if (
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[35][0]++, filters.model) &&
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[35][1]++, job.config.model !== filters.model)) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[34][0]++;
        cov_dgzyh8f2g().s[171]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[34][1]++;
      }
      cov_dgzyh8f2g().s[172]++;
      if (
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[37][0]++, filters.created_after) &&
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[37][1]++, job.config.metadata.created_at < filters.created_after)) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[36][0]++;
        cov_dgzyh8f2g().s[173]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[36][1]++;
      }
      cov_dgzyh8f2g().s[174]++;
      if (
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[39][0]++, filters.created_before) &&
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[39][1]++, job.config.metadata.created_at > filters.created_before)) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[38][0]++;
        cov_dgzyh8f2g().s[175]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[38][1]++;
      }
      cov_dgzyh8f2g().s[176]++;
      return true;
    });
  }
  /**
   * Cancel training job
   */
  async cancelTrainingJob(jobId) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[22]++;
    const job =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[177]++, this.activeJobs.get(jobId));
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[178]++;
    if (!job) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[40][0]++;
      cov_dgzyh8f2g().s[179]++;
      throw new Error(`Training job ${jobId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[40][1]++;
    }
    cov_dgzyh8f2g().s[180]++;
    if (!['pending', 'initializing', 'training'].includes(job.status)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[41][0]++;
      cov_dgzyh8f2g().s[181]++;
      throw new Error(`Training job ${jobId} cannot be cancelled in status: ${job.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[41][1]++;
    }
    cov_dgzyh8f2g().s[182]++;
    job.status = 'cancelled';
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[183]++;
    this.addTrainingLog(job, 'info', 'Training job cancelled by user');
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[184]++;
    await this.eventStore.recordEvent({
      event_type: 'training_job_cancelled',
      entity_id: jobId,
      entity_type: 'training_job',
      data: {
        status: job.status
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[185]++;
    this.emit('jobCancelled', {
      jobId,
      status: job.status
    });
  }
  /**
   * Get model registry
   */
  getModelRegistry() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[23]++;
    cov_dgzyh8f2g().s[186]++;
    return new Map(this.modelRegistry);
  }
  /**
   * Get training performance statistics
   */
  getTrainingStatistics() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[24]++;
    const jobs =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[187]++, Array.from(this.activeJobs.values()));
    const completedJobs =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[188]++, jobs.filter(job => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[25]++;
      cov_dgzyh8f2g().s[189]++;
      return job.status === 'completed';
    }));
    const failedJobs =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[190]++, jobs.filter(job => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[26]++;
      cov_dgzyh8f2g().s[191]++;
      return job.status === 'failed';
    }));
    const averageTrainingTime =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[192]++, completedJobs.length > 0 ?
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[42][0]++, completedJobs.reduce((sum, job) => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[27]++;
      cov_dgzyh8f2g().s[193]++;
      return sum + job.progress.elapsed_time;
    }, 0) / completedJobs.length) :
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[42][1]++, 0));
    const totalTrainingHours =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[194]++, jobs.reduce((sum, job) => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[28]++;
      cov_dgzyh8f2g().s[195]++;
      return sum + job.progress.elapsed_time;
    }, 0) / (1000 * 60 * 60));
    const modelsDeployed =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[196]++, Array.from(this.modelRegistry.values()).flat().filter(version => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[29]++;
      cov_dgzyh8f2g().s[197]++;
      return version.deployment_status === 'deployed';
    }).length);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[198]++;
    return {
      total_jobs: jobs.length,
      successful_jobs: completedJobs.length,
      failed_jobs: failedJobs.length,
      average_training_time: averageTrainingTime,
      models_deployed: modelsDeployed,
      total_training_hours: totalTrainingHours
    };
  }
  // Private methods
  async initializeTensorFlow() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[30]++;
    cov_dgzyh8f2g().s[199]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[200]++;
      // Set TensorFlow backend
      tf.setBackend('tensorflow');
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[201]++;
      console.log('✅ TensorFlow backend initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[202]++;
      console.warn('⚠️ Failed to initialize TensorFlow backend, using CPU fallback');
    }
  }
  async loadModelRegistry() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[31]++;
    cov_dgzyh8f2g().s[203]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[204]++;
      // Load existing model versions from database/storage
      // This would connect to your actual storage system
      console.log('📋 Model registry loaded');
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[205]++;
      console.warn('⚠️ Failed to load model registry:', error);
    }
  }
  async resumeInterruptedJobs() {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[32]++;
    cov_dgzyh8f2g().s[206]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[207]++;
      // Resume any training jobs that were interrupted
      console.log('🔄 Checking for interrupted training jobs...');
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[208]++;
      console.warn('⚠️ Failed to resume interrupted jobs:', error);
    }
  }
  async validateTrainingConfig(config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[33]++;
    cov_dgzyh8f2g().s[209]++;
    // Validate training configuration
    if (!config.model) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[43][0]++;
      cov_dgzyh8f2g().s[210]++;
      throw new Error('Model name is required');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[43][1]++;
    }
    cov_dgzyh8f2g().s[211]++;
    if (config.hyperparameters.epochs <= 0) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[44][0]++;
      cov_dgzyh8f2g().s[212]++;
      throw new Error('Epochs must be greater than 0');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[44][1]++;
    }
    cov_dgzyh8f2g().s[213]++;
    if (
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[46][0]++, config.hyperparameters.learning_rate <= 0) ||
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[46][1]++, config.hyperparameters.learning_rate > 1)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[45][0]++;
      cov_dgzyh8f2g().s[214]++;
      throw new Error('Learning rate must be between 0 and 1');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[45][1]++;
    }
    cov_dgzyh8f2g().s[215]++;
    if (
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[48][0]++, config.trainingData.validation_split <= 0) ||
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[48][1]++, config.trainingData.validation_split >= 1)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[47][0]++;
      cov_dgzyh8f2g().s[216]++;
      throw new Error('Validation split must be between 0 and 1');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[47][1]++;
    }
  }
  async executeTrainingJob(job) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[34]++;
    cov_dgzyh8f2g().s[217]++;
    try {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[218]++;
      job.status = 'training';
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[219]++;
      this.addTrainingLog(job, 'info', 'Starting training process');
      // Simulate training process (replace with actual training logic)
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[220]++;
      await this.simulateTraining(job);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[221]++;
      job.status = 'evaluating';
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[222]++;
      this.addTrainingLog(job, 'info', 'Training completed, starting evaluation');
      // Evaluate trained model
      const evaluation =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[223]++, await this.evaluateTrainedModel(job));
      // Create model version
      const modelVersion =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[224]++, await this.createModelVersion(job, evaluation));
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[225]++;
      job.status = 'completed';
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[226]++;
      job.completed_at = new Date();
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[227]++;
      this.addTrainingLog(job, 'info', `Training completed successfully. Model version: ${modelVersion.id}`);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[228]++;
      await this.eventStore.recordEvent({
        event_type: 'training_job_completed',
        entity_id: job.id,
        entity_type: 'training_job',
        data: {
          model_version_id: modelVersion.id,
          performance_metrics: modelVersion.performance_metrics
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[229]++;
      this.emit('jobCompleted', {
        jobId: job.id,
        modelVersionId: modelVersion.id,
        metrics: modelVersion.performance_metrics
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[230]++;
      this.handleTrainingError(job, error);
    }
  }
  async simulateTraining(job) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[35]++;
    // This is a simulation - replace with actual training logic
    const totalSteps =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[231]++, job.config.hyperparameters.epochs * 100); // Assume 100 steps per epoch
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[232]++;
    job.progress.total_steps = totalSteps;
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[233]++;
    for (let epoch =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[234]++, 1); epoch <= job.config.hyperparameters.epochs; epoch++) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[235]++;
      job.progress.current_epoch = epoch;
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[236]++;
      for (let step =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[237]++, 1); step <= 100; step++) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[238]++;
        if (job.status === 'cancelled') {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[49][0]++;
          cov_dgzyh8f2g().s[239]++;
          throw new Error('Training cancelled by user');
        } else
        /* istanbul ignore next */
        {
          cov_dgzyh8f2g().b[49][1]++;
        }
        cov_dgzyh8f2g().s[240]++;
        job.progress.current_step = (epoch - 1) * 100 + step;
        // Simulate training metrics
        const trainLoss =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[241]++, Math.max(0.1, 2.0 * Math.exp(-job.progress.current_step / 1000) + Math.random() * 0.1));
        const valLoss =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[242]++, trainLoss * (1.1 + Math.random() * 0.2));
        const lr =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[243]++, job.config.hyperparameters.learning_rate * Math.pow(0.95, epoch - 1));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[244]++;
        job.progress.train_loss = trainLoss;
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[245]++;
        job.progress.validation_loss = valLoss;
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[246]++;
        job.metrics.training_loss.push(trainLoss);
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[247]++;
        job.metrics.validation_loss.push(valLoss);
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[248]++;
        job.metrics.learning_rate.push(lr);
        // Update best metric
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[249]++;
        if (
        /* istanbul ignore next */
        (cov_dgzyh8f2g().b[51][0]++, step === 1) &&
        /* istanbul ignore next */
        (cov_dgzyh8f2g().b[51][1]++, epoch === 1)) {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[50][0]++;
          cov_dgzyh8f2g().s[250]++;
          job.progress.best_metric = valLoss;
        } else {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[50][1]++;
          cov_dgzyh8f2g().s[251]++;
          if (valLoss < job.progress.best_metric) {
            /* istanbul ignore next */
            cov_dgzyh8f2g().b[52][0]++;
            cov_dgzyh8f2g().s[252]++;
            job.progress.best_metric = valLoss;
          } else
          /* istanbul ignore next */
          {
            cov_dgzyh8f2g().b[52][1]++;
          }
        }
        // Estimate remaining time
        const elapsed =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[253]++, Date.now() - (
        /* istanbul ignore next */
        (cov_dgzyh8f2g().b[53][0]++, job.started_at?.getTime()) ||
        /* istanbul ignore next */
        (cov_dgzyh8f2g().b[53][1]++, Date.now())));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[254]++;
        job.progress.elapsed_time = elapsed;
        const remaining =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[255]++, elapsed / job.progress.current_step * (totalSteps - job.progress.current_step));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[256]++;
        job.progress.estimated_remaining = remaining;
        // Emit progress update
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[257]++;
        if (step % 10 === 0) {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[54][0]++;
          cov_dgzyh8f2g().s[258]++;
          this.emit('trainingProgress', {
            jobId: job.id,
            progress: job.progress,
            metrics: {
              train_loss: trainLoss,
              validation_loss: valLoss,
              learning_rate: lr
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_dgzyh8f2g().b[54][1]++;
        }
        // Simulate training time
        cov_dgzyh8f2g().s[259]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_dgzyh8f2g().f[36]++;
          cov_dgzyh8f2g().s[260]++;
          return setTimeout(resolve, 100);
        });
      }
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[261]++;
      this.addTrainingLog(job, 'info', `Completed epoch ${epoch}/${job.config.hyperparameters.epochs}`);
      // Save checkpoint
      const checkpointPath =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[262]++, `/tmp/checkpoint_${job.id}_epoch_${epoch}.pth`);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[263]++;
      job.artifacts.checkpoints.push(checkpointPath);
      // Early stopping check
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[264]++;
      if (job.config.optimization.early_stopping.enabled) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[55][0]++;
        const shouldStop =
        /* istanbul ignore next */
        (cov_dgzyh8f2g().s[265]++, await this.checkEarlyStopping(job, epoch));
        /* istanbul ignore next */
        cov_dgzyh8f2g().s[266]++;
        if (shouldStop) {
          /* istanbul ignore next */
          cov_dgzyh8f2g().b[56][0]++;
          cov_dgzyh8f2g().s[267]++;
          this.addTrainingLog(job, 'info', `Early stopping triggered at epoch ${epoch}`);
          /* istanbul ignore next */
          cov_dgzyh8f2g().s[268]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_dgzyh8f2g().b[56][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[55][1]++;
      }
    }
  }
  async checkEarlyStopping(job, currentEpoch) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[37]++;
    const {
      early_stopping
    } =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[269]++, job.config.optimization);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[270]++;
    if (
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[58][0]++, !early_stopping.enabled) ||
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[58][1]++, currentEpoch < early_stopping.patience)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[57][0]++;
      cov_dgzyh8f2g().s[271]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[57][1]++;
    }
    const recentLosses =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[272]++, job.metrics.validation_loss.slice(-early_stopping.patience));
    const bestRecentLoss =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[273]++, Math.min(...recentLosses));
    const currentLoss =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[274]++, job.progress.validation_loss);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[275]++;
    return currentLoss - bestRecentLoss < early_stopping.min_delta;
  }
  async evaluateTrainedModel(job) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[38]++;
    cov_dgzyh8f2g().s[276]++;
    // Simulate model evaluation
    return {
      accuracy: 0.85 + Math.random() * 0.1,
      f1_score: 0.80 + Math.random() * 0.15,
      perplexity: 15 + Math.random() * 10,
      inference_time: 100 + Math.random() * 50,
      memory_usage: 512 + Math.random() * 256,
      throughput: 50 + Math.random() * 20
    };
  }
  async createModelVersion(job, evaluation) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[39]++;
    const versionId =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[277]++, `${job.config.model}_v${Date.now()}`);
    const modelVersion =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[278]++, {
      id: versionId,
      model_name: job.config.model,
      version: `1.0.${Date.now()}`,
      base_model:
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[59][0]++, job.config.metadata.base_model) ||
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[59][1]++, job.config.model),
      training_job_id: job.id,
      performance_metrics: evaluation,
      model_size: Math.round(1000 + Math.random() * 5000),
      // MB
      deployment_status: 'pending',
      created_at: new Date()
    });
    // Add to registry
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[279]++;
    if (!this.modelRegistry.has(job.config.model)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[60][0]++;
      cov_dgzyh8f2g().s[280]++;
      this.modelRegistry.set(job.config.model, []);
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[60][1]++;
    }
    cov_dgzyh8f2g().s[281]++;
    this.modelRegistry.get(job.config.model).push(modelVersion);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[282]++;
    return modelVersion;
  }
  handleTrainingError(job, error) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[40]++;
    cov_dgzyh8f2g().s[283]++;
    job.status = 'failed';
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[284]++;
    job.error = {
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[61][0]++, error.message) :
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[61][1]++, 'Unknown error'),
      stack: error instanceof Error ?
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[62][0]++, error.stack) :
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[62][1]++, undefined),
      timestamp: new Date()
    };
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[285]++;
    this.addTrainingLog(job, 'error', `Training failed: ${job.error.message}`);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[286]++;
    this.emit('jobFailed', {
      jobId: job.id,
      error: job.error
    });
  }
  addTrainingLog(job, level, message, metadata) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[41]++;
    cov_dgzyh8f2g().s[287]++;
    job.logs.push({
      timestamp: new Date(),
      level,
      message,
      metadata
    });
    // Keep only last 1000 logs to prevent memory issues
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[288]++;
    if (job.logs.length > 1000) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[63][0]++;
      cov_dgzyh8f2g().s[289]++;
      job.logs = job.logs.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[63][1]++;
    }
  }
  async generatePromptVariation(template, config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[42]++;
    // Generate variations of the template prompt
    const variationPrompt =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[290]++, `Create a variation of this prompt template that maintains the same purpose but uses different wording:

Template: "${template}"

Return only the varied prompt without explanations.`);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[291]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[292]++, await llmService_1.llmService.generate(variationPrompt, undefined, {
        temperature: config.temperature,
        num_predict: Math.min(500, config.max_tokens)
      }));
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[293]++;
      return response.response.trim();
    } catch (error) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[294]++;
      console.warn('Failed to generate prompt variation, using original:', error);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[295]++;
      return template;
    }
  }
  async assessDataQuality(prompt, response) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[43]++;
    // Simple quality assessment - replace with more sophisticated logic
    let score =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[296]++, 0.5);
    // Check response length
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[297]++;
    if (
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[65][0]++, response.length > 50) &&
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[65][1]++, response.length < 2000)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[64][0]++;
      cov_dgzyh8f2g().s[298]++;
      score += 0.2;
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[64][1]++;
    }
    // Check for coherence (simple heuristic)
    cov_dgzyh8f2g().s[299]++;
    if (
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[67][0]++, response.includes('.')) &&
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[67][1]++, response.split('.').length > 1)) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[66][0]++;
      cov_dgzyh8f2g().s[300]++;
      score += 0.1;
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[66][1]++;
    }
    // Check for relevance (keyword matching)
    const promptWords =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[301]++, prompt.toLowerCase().split(' '));
    const responseWords =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[302]++, response.toLowerCase().split(' '));
    const overlap =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[303]++, promptWords.filter(word => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[44]++;
      cov_dgzyh8f2g().s[304]++;
      return responseWords.includes(word);
    }).length);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[305]++;
    score += Math.min(0.2, overlap / promptWords.length);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[306]++;
    return Math.min(1.0, score);
  }
  async calculateDatasetQuality(data) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[45]++;
    cov_dgzyh8f2g().s[307]++;
    if (data.length === 0) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[68][0]++;
      cov_dgzyh8f2g().s[308]++;
      return {
        coherence_score: 0,
        relevance_score: 0,
        diversity_score: 0,
        safety_score: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[68][1]++;
    }
    let totalCoherence =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[309]++, 0);
    let totalRelevance =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[310]++, 0);
    let totalSafety =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[311]++, 0);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[312]++;
    for (const item of data) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[313]++;
      totalCoherence += await this.assessDataQuality(item.prompt, item.response);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[314]++;
      totalRelevance += await this.assessDataQuality(item.prompt, item.response);
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[315]++;
      totalSafety += 0.9; // Assume high safety for generated data
    }
    // Calculate diversity (unique prompts / total prompts)
    const uniquePrompts =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[316]++, new Set(data.map(item => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[46]++;
      cov_dgzyh8f2g().s[317]++;
      return item.prompt.toLowerCase();
    })).size);
    const diversityScore =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[318]++, uniquePrompts / data.length);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[319]++;
    return {
      coherence_score: totalCoherence / data.length,
      relevance_score: totalRelevance / data.length,
      diversity_score: diversityScore,
      safety_score: totalSafety / data.length
    };
  }
  async saveGeneratedData(data, outputPath, format) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[47]++;
    cov_dgzyh8f2g().s[320]++;
    // Save data in specified format (implement actual file saving logic)
    console.log(`Saving ${data.length} samples to ${outputPath} in ${format} format`);
  }
  async runBenchmarkEvaluation(modelName, dataset) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[48]++;
    cov_dgzyh8f2g().s[321]++;
    // Implement benchmark evaluation logic
    return {
      dataset_name: dataset,
      metrics: {
        accuracy: 0.75 + Math.random() * 0.2,
        f1_score: 0.70 + Math.random() * 0.25,
        bleu_score: 0.65 + Math.random() * 0.3
      },
      sample_count: 1000,
      evaluation_time: Date.now()
    };
  }
  async calculateCustomMetric(modelName, metric) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[49]++;
    cov_dgzyh8f2g().s[322]++;
    // Implement custom metric calculation
    return 0.8 + Math.random() * 0.2;
  }
  calculateOverallScore(metrics) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[50]++;
    const weights =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[323]++, {
      accuracy: 0.3,
      f1_score: 0.3,
      bleu_score: 0.2,
      inference_time: -0.1,
      // Negative weight for latency
      memory_usage: -0.1 // Negative weight for memory usage
    });
    let score =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[324]++, 0);
    let totalWeight =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[325]++, 0);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[326]++;
    Object.entries(metrics).forEach(([metric, value]) => {
      /* istanbul ignore next */
      cov_dgzyh8f2g().f[51]++;
      const weight =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[327]++,
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[69][0]++, weights[metric]) ||
      /* istanbul ignore next */
      (cov_dgzyh8f2g().b[69][1]++, 0.1));
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[328]++;
      score += value * weight;
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[329]++;
      totalWeight += Math.abs(weight);
    });
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[330]++;
    return totalWeight > 0 ?
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[70][0]++, Math.max(0, Math.min(1, score / totalWeight))) :
    /* istanbul ignore next */
    (cov_dgzyh8f2g().b[70][1]++, 0.5);
  }
  async generatePerformanceRecommendations(modelName, metrics, benchmarkResults) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[52]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_dgzyh8f2g().s[331]++, []);
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[332]++;
    if (metrics.accuracy < 0.8) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[71][0]++;
      cov_dgzyh8f2g().s[333]++;
      recommendations.push('Consider increasing training data or adjusting hyperparameters to improve accuracy');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[71][1]++;
    }
    cov_dgzyh8f2g().s[334]++;
    if (metrics.inference_time > 200) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[72][0]++;
      cov_dgzyh8f2g().s[335]++;
      recommendations.push('Model inference time is high. Consider model optimization or quantization');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[72][1]++;
    }
    cov_dgzyh8f2g().s[336]++;
    if (metrics.memory_usage > 1000) {
      /* istanbul ignore next */
      cov_dgzyh8f2g().b[73][0]++;
      cov_dgzyh8f2g().s[337]++;
      recommendations.push('High memory usage detected. Consider model pruning or compression');
    } else
    /* istanbul ignore next */
    {
      cov_dgzyh8f2g().b[73][1]++;
    }
    cov_dgzyh8f2g().s[338]++;
    return recommendations;
  }
  async getModelVersion(versionId) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[53]++;
    cov_dgzyh8f2g().s[339]++;
    for (const versions of this.modelRegistry.values()) {
      const version =
      /* istanbul ignore next */
      (cov_dgzyh8f2g().s[340]++, versions.find(v => {
        /* istanbul ignore next */
        cov_dgzyh8f2g().f[54]++;
        cov_dgzyh8f2g().s[341]++;
        return v.id === versionId;
      }));
      /* istanbul ignore next */
      cov_dgzyh8f2g().s[342]++;
      if (version) {
        /* istanbul ignore next */
        cov_dgzyh8f2g().b[74][0]++;
        cov_dgzyh8f2g().s[343]++;
        return version;
      } else
      /* istanbul ignore next */
      {
        cov_dgzyh8f2g().b[74][1]++;
      }
    }
    /* istanbul ignore next */
    cov_dgzyh8f2g().s[344]++;
    return null;
  }
  async updateModelVersion(version) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[55]++;
    cov_dgzyh8f2g().s[345]++;
    // Update model version in registry and storage
    console.log(`Updated model version: ${version.id}`);
  }
  async deployToOllama(version, config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[56]++;
    cov_dgzyh8f2g().s[346]++;
    // Implement Ollama deployment
    return {
      status: 'success',
      endpoint: `http://localhost:11434/api/generate`
    };
  }
  async deployToHuggingFace(version, config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[57]++;
    cov_dgzyh8f2g().s[347]++;
    // Implement HuggingFace deployment
    return {
      status: 'success',
      endpoint: `https://huggingface.co/models/${version.model_name}`
    };
  }
  async deployToLocal(version, config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[58]++;
    cov_dgzyh8f2g().s[348]++;
    // Implement local deployment
    return {
      status: 'success',
      endpoint: `http://localhost:8080/api/generate`
    };
  }
  async deployToCloud(version, config) {
    /* istanbul ignore next */
    cov_dgzyh8f2g().f[59]++;
    cov_dgzyh8f2g().s[349]++;
    // Implement cloud deployment
    return {
      status: 'success',
      endpoint: `https://api.cloud-provider.com/models/${version.id}`
    };
  }
}
/* istanbul ignore next */
cov_dgzyh8f2g().s[350]++;
exports.ModelTrainingEngine = ModelTrainingEngine;
// Export singleton instance
/* istanbul ignore next */
cov_dgzyh8f2g().s[351]++;
exports.modelTrainingEngine = new ModelTrainingEngine();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,