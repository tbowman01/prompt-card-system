{"version":3,"names":["events_1","cov_dgzyh8f2g","s","require","llmService_1","ModelHealthMonitor_1","OptimizationEngine_1","EventStore_1","lru_cache_1","tf","__importStar","ModelTrainingEngine","EventEmitter","constructor","f","isInitialized","eventStore","EventStore","getInstance","activeJobs","Map","modelRegistry","modelHealthMonitor","ModelHealthMonitor","healthCheckInterval","benchmarkInterval","maxResponseTime","maxErrorRate","minHealthScore","alertThresholds","responseTime","errorRate","memoryUsage","optimizationEngine","OptimizationEngine","trainingCache","LRUCache","max","ttl","performanceMetrics","initialize","b","console","log","initializeTensorFlow","loadModelRegistry","resumeInterruptedJobs","emit","timestamp","Date","error","createTrainingJob","config","jobId","now","Math","random","toString","substr","fullConfig","id","metadata","created_by","created_at","tags","description","base_model","model","training_objective","validateTrainingConfig","job","status","progress","current_epoch","total_epochs","hyperparameters","epochs","current_step","total_steps","elapsed_time","estimated_remaining","train_loss","validation_loss","best_metric","metrics","training_loss","learning_rate","custom_metrics","logs","artifacts","checkpoints","evaluation_reports","set","recordEvent","event_type","entity_id","entity_type","data","startTrainingJob","get","Error","started_at","addTrainingLog","executeTrainingJob","catch","handleTrainingError","generateSyntheticData","generationId","generated_samples","total_samples","generation_config","num_samples","current_template","total_templates","template_prompts","length","generatedData","templateIndex","template","samplesPerTemplate","ceil","i","prompt","generatePromptVariation","response","llmService","generate","undefined","temperature","num_predict","max_tokens","quality_filter","qualityScore","assessDataQuality","push","template_id","generation_id","warn","quality_metrics","calculateDatasetQuality","outputPath","output_format","saveGeneratedData","output_path","samples_generated","evaluateModel","modelName","benchmarkDatasets","customMetrics","evaluationId","benchmarkResults","detailedMetrics","dataset","result","runBenchmarkEvaluation","Object","entries","forEach","metric","value","keys","calculateCustomMetric","overallScore","calculateOverallScore","recommendations","generatePerformanceRecommendations","evaluationResult","overall_score","detailed_metrics","benchmark_results","model_name","deployModel","modelVersionId","target","deploymentId","modelVersion","getModelVersion","deploymentResult","deployToOllama","deployToHuggingFace","deployToLocal","deployToCloud","deployment_status","deployed_at","updateModelVersion","model_version_id","deployment_id","message","getTrainingJob","listTrainingJobs","filters","jobs","Array","from","values","filter","created_after","created_before","cancelTrainingJob","includes","getModelRegistry","getTrainingStatistics","completedJobs","failedJobs","averageTrainingTime","reduce","sum","totalTrainingHours","modelsDeployed","flat","version","total_jobs","successful_jobs","failed_jobs","average_training_time","models_deployed","total_training_hours","setBackend","trainingData","validation_split","simulateTraining","evaluation","evaluateTrainedModel","createModelVersion","completed_at","performance_metrics","totalSteps","epoch","step","trainLoss","exp","valLoss","lr","pow","elapsed","getTime","remaining","Promise","resolve","setTimeout","checkpointPath","optimization","early_stopping","enabled","shouldStop","checkEarlyStopping","currentEpoch","patience","recentLosses","slice","bestRecentLoss","min","currentLoss","min_delta","accuracy","f1_score","perplexity","inference_time","memory_usage","throughput","versionId","training_job_id","model_size","round","has","stack","level","variationPrompt","trim","score","split","promptWords","toLowerCase","responseWords","overlap","word","coherence_score","relevance_score","diversity_score","safety_score","totalCoherence","totalRelevance","totalSafety","item","uniquePrompts","Set","map","size","diversityScore","format","dataset_name","bleu_score","sample_count","evaluation_time","weights","totalWeight","weight","abs","versions","find","v","endpoint","exports","modelTrainingEngine"],"sources":["/workspaces/prompt-card-system/backend/src/services/training/ModelTrainingEngine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { llmService } from '../llmService';\nimport { ModelHealthMonitor } from '../models/ModelHealthMonitor';\nimport { OptimizationEngine } from '../optimization/OptimizationEngine';\nimport { EventStore } from '../analytics/EventStore';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\nimport * as tf from '@tensorflow/tfjs-node';\nimport { createHash } from 'crypto';\nimport axios from 'axios';\n\nexport interface TrainingConfiguration {\n  id: string;\n  name: string;\n  model: string;\n  trainingData: {\n    source: 'file' | 'database' | 'api' | 'synthetic';\n    path?: string;\n    query?: string;\n    endpoint?: string;\n    format: 'jsonl' | 'csv' | 'txt' | 'parquet';\n    validation_split: number;\n  };\n  hyperparameters: {\n    learning_rate: number;\n    batch_size: number;\n    epochs: number;\n    warmup_steps: number;\n    weight_decay: number;\n    dropout_rate: number;\n    gradient_clip_norm: number;\n  };\n  optimization: {\n    optimizer: 'adam' | 'adamw' | 'sgd' | 'rmsprop';\n    scheduler: 'linear' | 'cosine' | 'exponential' | 'polynomial';\n    early_stopping: {\n      enabled: boolean;\n      patience: number;\n      metric: string;\n      min_delta: number;\n    };\n  };\n  evaluation: {\n    metrics: string[];\n    benchmark_datasets: string[];\n    validation_frequency: number;\n    save_best_model: boolean;\n  };\n  resources: {\n    gpu_memory_limit?: number;\n    cpu_cores?: number;\n    memory_limit?: number;\n    storage_limit?: number;\n  };\n  deployment: {\n    auto_deploy: boolean;\n    deployment_target: 'ollama' | 'huggingface' | 'local' | 'cloud';\n    rollback_on_failure: boolean;\n    health_check_enabled: boolean;\n  };\n  metadata: {\n    created_by: string;\n    created_at: Date;\n    tags: string[];\n    description: string;\n    base_model?: string;\n    training_objective: string;\n  };\n}\n\nexport interface TrainingJob {\n  id: string;\n  config: TrainingConfiguration;\n  status: 'pending' | 'initializing' | 'training' | 'evaluating' | 'completed' | 'failed' | 'cancelled';\n  progress: {\n    current_epoch: number;\n    total_epochs: number;\n    current_step: number;\n    total_steps: number;\n    elapsed_time: number;\n    estimated_remaining: number;\n    train_loss: number;\n    validation_loss: number;\n    best_metric: number;\n  };\n  metrics: {\n    training_loss: number[];\n    validation_loss: number[];\n    learning_rate: number[];\n    custom_metrics: Record<string, number[]>;\n  };\n  logs: TrainingLog[];\n  artifacts: {\n    model_path?: string;\n    checkpoints: string[];\n    evaluation_reports: string[];\n    tensorboard_logs?: string;\n  };\n  error?: {\n    message: string;\n    stack?: string;\n    timestamp: Date;\n  };\n  started_at?: Date;\n  completed_at?: Date;\n}\n\nexport interface TrainingLog {\n  timestamp: Date;\n  level: 'info' | 'warning' | 'error' | 'debug';\n  message: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TrainingModelVersion {\n  id: string;\n  model_name: string;\n  version: string;\n  base_model: string;\n  training_job_id: string;\n  performance_metrics: {\n    accuracy: number;\n    f1_score: number;\n    perplexity: number;\n    inference_time: number;\n    memory_usage: number;\n    throughput: number;\n  };\n  model_size: number;\n  deployment_status: 'pending' | 'deployed' | 'deprecated' | 'failed';\n  created_at: Date;\n  deployed_at?: Date;\n  deprecated_at?: Date;\n}\n\nexport interface SyntheticDataGeneration {\n  id: string;\n  template_prompts: string[];\n  generation_config: {\n    num_samples: number;\n    temperature: number;\n    max_tokens: number;\n    diversity_penalty: number;\n    quality_filter: boolean;\n  };\n  output_format: 'jsonl' | 'csv' | 'txt';\n  quality_metrics: {\n    coherence_score: number;\n    relevance_score: number;\n    diversity_score: number;\n    safety_score: number;\n  };\n  status: 'pending' | 'generating' | 'completed' | 'failed';\n  progress: {\n    generated_samples: number;\n    total_samples: number;\n    current_template: number;\n    total_templates: number;\n  };\n}\n\nexport class ModelTrainingEngine extends EventEmitter {\n  private eventStore: EventStore;\n  private modelHealthMonitor: ModelHealthMonitor;\n  private optimizationEngine: OptimizationEngine;\n  private activeJobs: Map<string, TrainingJob>;\n  private modelRegistry: Map<string, TrainingModelVersion[]>;\n  private trainingCache: LRUCache<string, any>;\n  private performanceMetrics: Map<string, number[]>;\n  private isInitialized = false;\n\n  constructor() {\n    super();\n    this.eventStore = EventStore.getInstance();\n    this.activeJobs = new Map();\n    this.modelRegistry = new Map();\n    \n    // Initialize services\n    this.modelHealthMonitor = new ModelHealthMonitor({\n      healthCheckInterval: 60000,\n      benchmarkInterval: 300000,\n      maxResponseTime: 30000,\n      maxErrorRate: 10,\n      minHealthScore: 70,\n      alertThresholds: {\n        responseTime: 15000,\n        errorRate: 10,\n        memoryUsage: 85\n      }\n    });\n    this.optimizationEngine = new OptimizationEngine();\n    \n    // Initialize caches\n    this.trainingCache = new LRUCache({\n      max: 100,\n      ttl: 1000 * 60 * 60 * 2 // 2 hours\n    });\n    \n    this.performanceMetrics = new Map();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('🚀 Initializing Model Training Engine...');\n      \n      // Initialize TensorFlow backend\n      await this.initializeTensorFlow();\n      \n      // Load existing model registry\n      await this.loadModelRegistry();\n      \n      // Resume any interrupted training jobs\n      await this.resumeInterruptedJobs();\n      \n      this.isInitialized = true;\n      console.log('✅ Model Training Engine initialized successfully');\n      \n      this.emit('initialized', { timestamp: new Date() });\n    } catch (error) {\n      console.error('❌ Failed to initialize Model Training Engine:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new training job\n   */\n  async createTrainingJob(config: Omit<TrainingConfiguration, 'id' | 'metadata'>): Promise<TrainingJob> {\n    const jobId = `train_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const fullConfig: TrainingConfiguration = {\n      ...config,\n      id: jobId,\n      metadata: {\n        created_by: 'system',\n        created_at: new Date(),\n        tags: [],\n        description: '',\n        base_model: config.model,\n        training_objective: 'general_improvement'\n      }\n    };\n\n    // Validate configuration\n    await this.validateTrainingConfig(fullConfig);\n\n    const job: TrainingJob = {\n      id: jobId,\n      config: fullConfig,\n      status: 'pending',\n      progress: {\n        current_epoch: 0,\n        total_epochs: config.hyperparameters.epochs,\n        current_step: 0,\n        total_steps: 0,\n        elapsed_time: 0,\n        estimated_remaining: 0,\n        train_loss: 0,\n        validation_loss: 0,\n        best_metric: 0\n      },\n      metrics: {\n        training_loss: [],\n        validation_loss: [],\n        learning_rate: [],\n        custom_metrics: {}\n      },\n      logs: [],\n      artifacts: {\n        checkpoints: [],\n        evaluation_reports: []\n      }\n    };\n\n    this.activeJobs.set(jobId, job);\n\n    // Record job creation\n    await this.eventStore.recordEvent({\n      event_type: 'training_job_created',\n      entity_id: jobId,\n      entity_type: 'training_job',\n      data: { config: fullConfig },\n      timestamp: new Date()\n    });\n\n    this.emit('jobCreated', { jobId, config: fullConfig });\n\n    return job;\n  }\n\n  /**\n   * Start a training job\n   */\n  async startTrainingJob(jobId: string): Promise<void> {\n    const job = this.activeJobs.get(jobId);\n    if (!job) {\n      throw new Error(`Training job ${jobId} not found`);\n    }\n\n    if (job.status !== 'pending') {\n      throw new Error(`Training job ${jobId} is not in pending status`);\n    }\n\n    job.status = 'initializing';\n    job.started_at = new Date();\n\n    this.addTrainingLog(job, 'info', 'Training job started');\n\n    // Start training in background\n    this.executeTrainingJob(job).catch(error => {\n      this.handleTrainingError(job, error);\n    });\n\n    await this.eventStore.recordEvent({\n      event_type: 'training_job_started',\n      entity_id: jobId,\n      entity_type: 'training_job',\n      data: { status: job.status },\n      timestamp: new Date()\n    });\n\n    this.emit('jobStarted', { jobId, status: job.status });\n  }\n\n  /**\n   * Generate synthetic training data\n   */\n  async generateSyntheticData(config: SyntheticDataGeneration): Promise<string> {\n    const generationId = `synth_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      config.status = 'generating';\n      config.progress = {\n        generated_samples: 0,\n        total_samples: config.generation_config.num_samples,\n        current_template: 0,\n        total_templates: config.template_prompts.length\n      };\n\n      const generatedData: any[] = [];\n      \n      for (let templateIndex = 0; templateIndex < config.template_prompts.length; templateIndex++) {\n        const template = config.template_prompts[templateIndex];\n        config.progress.current_template = templateIndex;\n        \n        const samplesPerTemplate = Math.ceil(config.generation_config.num_samples / config.template_prompts.length);\n        \n        for (let i = 0; i < samplesPerTemplate && config.progress.generated_samples < config.generation_config.num_samples; i++) {\n          try {\n            // Generate variation of the template\n            const prompt = await this.generatePromptVariation(template, config.generation_config);\n            \n            // Generate response using LLM\n            const response = await llmService.generate(prompt, undefined, {\n              temperature: config.generation_config.temperature,\n              num_predict: config.generation_config.max_tokens\n            });\n\n            // Apply quality filtering if enabled\n            if (config.generation_config.quality_filter) {\n              const qualityScore = await this.assessDataQuality(prompt, response.response);\n              if (qualityScore < 0.7) continue; // Skip low-quality samples\n            }\n\n            generatedData.push({\n              prompt: prompt,\n              response: response.response,\n              template_id: templateIndex,\n              generation_id: generationId,\n              timestamp: new Date()\n            });\n\n            config.progress.generated_samples++;\n          } catch (error) {\n            console.warn(`Failed to generate sample ${i} for template ${templateIndex}:`, error);\n          }\n        }\n      }\n\n      // Calculate quality metrics\n      config.quality_metrics = await this.calculateDatasetQuality(generatedData);\n      \n      // Save generated data\n      const outputPath = `/tmp/synthetic_data_${generationId}.${config.output_format}`;\n      await this.saveGeneratedData(generatedData, outputPath, config.output_format);\n      \n      config.status = 'completed';\n      \n      await this.eventStore.recordEvent({\n        event_type: 'synthetic_data_generated',\n        entity_id: generationId,\n        entity_type: 'synthetic_data',\n        data: {\n          config,\n          output_path: outputPath,\n          samples_generated: generatedData.length\n        },\n        timestamp: new Date()\n      });\n\n      return outputPath;\n    } catch (error) {\n      config.status = 'failed';\n      console.error('Failed to generate synthetic data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Evaluate model performance\n   */\n  async evaluateModel(\n    modelName: string,\n    benchmarkDatasets: string[],\n    customMetrics: string[] = []\n  ): Promise<{\n    overall_score: number;\n    detailed_metrics: Record<string, number>;\n    benchmark_results: Record<string, any>;\n    recommendations: string[];\n  }> {\n    const evaluationId = `eval_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      console.log(`🔍 Evaluating model: ${modelName}`);\n      \n      const benchmarkResults: Record<string, any> = {};\n      const detailedMetrics: Record<string, number> = {};\n      \n      // Run benchmark evaluations\n      for (const dataset of benchmarkDatasets) {\n        const result = await this.runBenchmarkEvaluation(modelName, dataset);\n        benchmarkResults[dataset] = result;\n        \n        // Aggregate metrics\n        Object.entries(result.metrics).forEach(([metric, value]) => {\n          if (!detailedMetrics[metric]) detailedMetrics[metric] = 0;\n          detailedMetrics[metric] += value as number;\n        });\n      }\n      \n      // Average metrics across datasets\n      Object.keys(detailedMetrics).forEach(metric => {\n        detailedMetrics[metric] /= benchmarkDatasets.length;\n      });\n      \n      // Run custom metrics\n      for (const metric of customMetrics) {\n        const value = await this.calculateCustomMetric(modelName, metric);\n        detailedMetrics[metric] = value;\n      }\n      \n      // Calculate overall score\n      const overallScore = this.calculateOverallScore(detailedMetrics);\n      \n      // Generate recommendations\n      const recommendations = await this.generatePerformanceRecommendations(\n        modelName,\n        detailedMetrics,\n        benchmarkResults\n      );\n      \n      const evaluationResult = {\n        overall_score: overallScore,\n        detailed_metrics: detailedMetrics,\n        benchmark_results: benchmarkResults,\n        recommendations\n      };\n      \n      // Store evaluation results\n      await this.eventStore.recordEvent({\n        event_type: 'model_evaluation',\n        entity_id: evaluationId,\n        entity_type: 'evaluation',\n        data: {\n          model_name: modelName,\n          ...evaluationResult\n        },\n        timestamp: new Date()\n      });\n      \n      return evaluationResult;\n    } catch (error) {\n      console.error(`Failed to evaluate model ${modelName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Deploy trained model\n   */\n  async deployModel(\n    modelVersionId: string,\n    target: 'ollama' | 'huggingface' | 'local' | 'cloud',\n    config: {\n      auto_rollback?: boolean;\n      health_check_timeout?: number;\n      deployment_tags?: string[];\n    } = {}\n  ): Promise<{\n    deployment_id: string;\n    status: 'success' | 'failed';\n    endpoint?: string;\n    health_status?: any;\n  }> {\n    const deploymentId = `deploy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      console.log(`🚀 Deploying model version: ${modelVersionId} to ${target}`);\n      \n      // Get model version details\n      const modelVersion = await this.getModelVersion(modelVersionId);\n      if (!modelVersion) {\n        throw new Error(`Model version ${modelVersionId} not found`);\n      }\n      \n      let deploymentResult;\n      \n      switch (target) {\n        case 'ollama':\n          deploymentResult = await this.deployToOllama(modelVersion, config);\n          break;\n        case 'huggingface':\n          deploymentResult = await this.deployToHuggingFace(modelVersion, config);\n          break;\n        case 'local':\n          deploymentResult = await this.deployToLocal(modelVersion, config);\n          break;\n        case 'cloud':\n          deploymentResult = await this.deployToCloud(modelVersion, config);\n          break;\n        default:\n          throw new Error(`Unsupported deployment target: ${target}`);\n      }\n      \n      // Update model version status\n      modelVersion.deployment_status = deploymentResult.status === 'success' ? 'deployed' : 'failed';\n      if (deploymentResult.status === 'success') {\n        modelVersion.deployed_at = new Date();\n      }\n      \n      await this.updateModelVersion(modelVersion);\n      \n      // Record deployment\n      await this.eventStore.recordEvent({\n        event_type: 'model_deployed',\n        entity_id: deploymentId,\n        entity_type: 'deployment',\n        data: {\n          model_version_id: modelVersionId,\n          target,\n          config,\n          result: deploymentResult\n        },\n        timestamp: new Date()\n      });\n      \n      return {\n        deployment_id: deploymentId,\n        ...deploymentResult\n      };\n    } catch (error) {\n      console.error(`Failed to deploy model ${modelVersionId}:`, error);\n      \n      await this.eventStore.recordEvent({\n        event_type: 'model_deployment_failed',\n        entity_id: deploymentId,\n        entity_type: 'deployment',\n        data: {\n          model_version_id: modelVersionId,\n          target,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        },\n        timestamp: new Date()\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Get training job status\n   */\n  getTrainingJob(jobId: string): TrainingJob | undefined {\n    return this.activeJobs.get(jobId);\n  }\n\n  /**\n   * List all training jobs\n   */\n  listTrainingJobs(filters: {\n    status?: string;\n    model?: string;\n    created_after?: Date;\n    created_before?: Date;\n  } = {}): TrainingJob[] {\n    const jobs = Array.from(this.activeJobs.values());\n    \n    return jobs.filter(job => {\n      if (filters.status && job.status !== filters.status) return false;\n      if (filters.model && job.config.model !== filters.model) return false;\n      if (filters.created_after && job.config.metadata.created_at < filters.created_after) return false;\n      if (filters.created_before && job.config.metadata.created_at > filters.created_before) return false;\n      return true;\n    });\n  }\n\n  /**\n   * Cancel training job\n   */\n  async cancelTrainingJob(jobId: string): Promise<void> {\n    const job = this.activeJobs.get(jobId);\n    if (!job) {\n      throw new Error(`Training job ${jobId} not found`);\n    }\n\n    if (!['pending', 'initializing', 'training'].includes(job.status)) {\n      throw new Error(`Training job ${jobId} cannot be cancelled in status: ${job.status}`);\n    }\n\n    job.status = 'cancelled';\n    this.addTrainingLog(job, 'info', 'Training job cancelled by user');\n\n    await this.eventStore.recordEvent({\n      event_type: 'training_job_cancelled',\n      entity_id: jobId,\n      entity_type: 'training_job',\n      data: { status: job.status },\n      timestamp: new Date()\n    });\n\n    this.emit('jobCancelled', { jobId, status: job.status });\n  }\n\n  /**\n   * Get model registry\n   */\n  getModelRegistry(): Map<string, TrainingModelVersion[]> {\n    return new Map(this.modelRegistry);\n  }\n\n  /**\n   * Get training performance statistics\n   */\n  getTrainingStatistics(): {\n    total_jobs: number;\n    successful_jobs: number;\n    failed_jobs: number;\n    average_training_time: number;\n    models_deployed: number;\n    total_training_hours: number;\n  } {\n    const jobs = Array.from(this.activeJobs.values());\n    const completedJobs = jobs.filter(job => job.status === 'completed');\n    const failedJobs = jobs.filter(job => job.status === 'failed');\n    \n    const averageTrainingTime = completedJobs.length > 0\n      ? completedJobs.reduce((sum, job) => sum + job.progress.elapsed_time, 0) / completedJobs.length\n      : 0;\n    \n    const totalTrainingHours = jobs.reduce((sum, job) => sum + job.progress.elapsed_time, 0) / (1000 * 60 * 60);\n    \n    const modelsDeployed = Array.from(this.modelRegistry.values())\n      .flat()\n      .filter(version => version.deployment_status === 'deployed').length;\n\n    return {\n      total_jobs: jobs.length,\n      successful_jobs: completedJobs.length,\n      failed_jobs: failedJobs.length,\n      average_training_time: averageTrainingTime,\n      models_deployed: modelsDeployed,\n      total_training_hours: totalTrainingHours\n    };\n  }\n\n  // Private methods\n  private async initializeTensorFlow(): Promise<void> {\n    try {\n      // Set TensorFlow backend\n      tf.setBackend('tensorflow');\n      console.log('✅ TensorFlow backend initialized');\n    } catch (error) {\n      console.warn('⚠️ Failed to initialize TensorFlow backend, using CPU fallback');\n    }\n  }\n\n  private async loadModelRegistry(): Promise<void> {\n    try {\n      // Load existing model versions from database/storage\n      // This would connect to your actual storage system\n      console.log('📋 Model registry loaded');\n    } catch (error) {\n      console.warn('⚠️ Failed to load model registry:', error);\n    }\n  }\n\n  private async resumeInterruptedJobs(): Promise<void> {\n    try {\n      // Resume any training jobs that were interrupted\n      console.log('🔄 Checking for interrupted training jobs...');\n    } catch (error) {\n      console.warn('⚠️ Failed to resume interrupted jobs:', error);\n    }\n  }\n\n  private async validateTrainingConfig(config: TrainingConfiguration): Promise<void> {\n    // Validate training configuration\n    if (!config.model) {\n      throw new Error('Model name is required');\n    }\n    \n    if (config.hyperparameters.epochs <= 0) {\n      throw new Error('Epochs must be greater than 0');\n    }\n    \n    if (config.hyperparameters.learning_rate <= 0 || config.hyperparameters.learning_rate > 1) {\n      throw new Error('Learning rate must be between 0 and 1');\n    }\n    \n    if (config.trainingData.validation_split <= 0 || config.trainingData.validation_split >= 1) {\n      throw new Error('Validation split must be between 0 and 1');\n    }\n  }\n\n  private async executeTrainingJob(job: TrainingJob): Promise<void> {\n    try {\n      job.status = 'training';\n      this.addTrainingLog(job, 'info', 'Starting training process');\n      \n      // Simulate training process (replace with actual training logic)\n      await this.simulateTraining(job);\n      \n      job.status = 'evaluating';\n      this.addTrainingLog(job, 'info', 'Training completed, starting evaluation');\n      \n      // Evaluate trained model\n      const evaluation = await this.evaluateTrainedModel(job);\n      \n      // Create model version\n      const modelVersion = await this.createModelVersion(job, evaluation);\n      \n      job.status = 'completed';\n      job.completed_at = new Date();\n      \n      this.addTrainingLog(job, 'info', `Training completed successfully. Model version: ${modelVersion.id}`);\n      \n      await this.eventStore.recordEvent({\n        event_type: 'training_job_completed',\n        entity_id: job.id,\n        entity_type: 'training_job',\n        data: {\n          model_version_id: modelVersion.id,\n          performance_metrics: modelVersion.performance_metrics\n        },\n        timestamp: new Date()\n      });\n      \n      this.emit('jobCompleted', {\n        jobId: job.id,\n        modelVersionId: modelVersion.id,\n        metrics: modelVersion.performance_metrics\n      });\n      \n    } catch (error) {\n      this.handleTrainingError(job, error);\n    }\n  }\n\n  private async simulateTraining(job: TrainingJob): Promise<void> {\n    // This is a simulation - replace with actual training logic\n    const totalSteps = job.config.hyperparameters.epochs * 100; // Assume 100 steps per epoch\n    job.progress.total_steps = totalSteps;\n    \n    for (let epoch = 1; epoch <= job.config.hyperparameters.epochs; epoch++) {\n      job.progress.current_epoch = epoch;\n      \n      for (let step = 1; step <= 100; step++) {\n        if (job.status === 'cancelled') {\n          throw new Error('Training cancelled by user');\n        }\n        \n        job.progress.current_step = (epoch - 1) * 100 + step;\n        \n        // Simulate training metrics\n        const trainLoss = Math.max(0.1, 2.0 * Math.exp(-job.progress.current_step / 1000) + Math.random() * 0.1);\n        const valLoss = trainLoss * (1.1 + Math.random() * 0.2);\n        const lr = job.config.hyperparameters.learning_rate * Math.pow(0.95, epoch - 1);\n        \n        job.progress.train_loss = trainLoss;\n        job.progress.validation_loss = valLoss;\n        job.metrics.training_loss.push(trainLoss);\n        job.metrics.validation_loss.push(valLoss);\n        job.metrics.learning_rate.push(lr);\n        \n        // Update best metric\n        if (step === 1 && epoch === 1) {\n          job.progress.best_metric = valLoss;\n        } else if (valLoss < job.progress.best_metric) {\n          job.progress.best_metric = valLoss;\n        }\n        \n        // Estimate remaining time\n        const elapsed = Date.now() - (job.started_at?.getTime() || Date.now());\n        job.progress.elapsed_time = elapsed;\n        const remaining = (elapsed / job.progress.current_step) * (totalSteps - job.progress.current_step);\n        job.progress.estimated_remaining = remaining;\n        \n        // Emit progress update\n        if (step % 10 === 0) {\n          this.emit('trainingProgress', {\n            jobId: job.id,\n            progress: job.progress,\n            metrics: {\n              train_loss: trainLoss,\n              validation_loss: valLoss,\n              learning_rate: lr\n            }\n          });\n        }\n        \n        // Simulate training time\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      this.addTrainingLog(job, 'info', `Completed epoch ${epoch}/${job.config.hyperparameters.epochs}`);\n      \n      // Save checkpoint\n      const checkpointPath = `/tmp/checkpoint_${job.id}_epoch_${epoch}.pth`;\n      job.artifacts.checkpoints.push(checkpointPath);\n      \n      // Early stopping check\n      if (job.config.optimization.early_stopping.enabled) {\n        const shouldStop = await this.checkEarlyStopping(job, epoch);\n        if (shouldStop) {\n          this.addTrainingLog(job, 'info', `Early stopping triggered at epoch ${epoch}`);\n          break;\n        }\n      }\n    }\n  }\n\n  private async checkEarlyStopping(job: TrainingJob, currentEpoch: number): Promise<boolean> {\n    const { early_stopping } = job.config.optimization;\n    if (!early_stopping.enabled || currentEpoch < early_stopping.patience) {\n      return false;\n    }\n    \n    const recentLosses = job.metrics.validation_loss.slice(-early_stopping.patience);\n    const bestRecentLoss = Math.min(...recentLosses);\n    const currentLoss = job.progress.validation_loss;\n    \n    return (currentLoss - bestRecentLoss) < early_stopping.min_delta;\n  }\n\n  private async evaluateTrainedModel(job: TrainingJob): Promise<any> {\n    // Simulate model evaluation\n    return {\n      accuracy: 0.85 + Math.random() * 0.1,\n      f1_score: 0.80 + Math.random() * 0.15,\n      perplexity: 15 + Math.random() * 10,\n      inference_time: 100 + Math.random() * 50,\n      memory_usage: 512 + Math.random() * 256,\n      throughput: 50 + Math.random() * 20\n    };\n  }\n\n  private async createModelVersion(job: TrainingJob, evaluation: any): Promise<TrainingModelVersion> {\n    const versionId = `${job.config.model}_v${Date.now()}`;\n    \n    const modelVersion: TrainingModelVersion = {\n      id: versionId,\n      model_name: job.config.model,\n      version: `1.0.${Date.now()}`,\n      base_model: job.config.metadata.base_model || job.config.model,\n      training_job_id: job.id,\n      performance_metrics: evaluation,\n      model_size: Math.round(1000 + Math.random() * 5000), // MB\n      deployment_status: 'pending',\n      created_at: new Date()\n    };\n    \n    // Add to registry\n    if (!this.modelRegistry.has(job.config.model)) {\n      this.modelRegistry.set(job.config.model, []);\n    }\n    this.modelRegistry.get(job.config.model)!.push(modelVersion);\n    \n    return modelVersion;\n  }\n\n  private handleTrainingError(job: TrainingJob, error: any): void {\n    job.status = 'failed';\n    job.error = {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      timestamp: new Date()\n    };\n    \n    this.addTrainingLog(job, 'error', `Training failed: ${job.error.message}`);\n    \n    this.emit('jobFailed', {\n      jobId: job.id,\n      error: job.error\n    });\n  }\n\n  private addTrainingLog(job: TrainingJob, level: TrainingLog['level'], message: string, metadata?: any): void {\n    job.logs.push({\n      timestamp: new Date(),\n      level,\n      message,\n      metadata\n    });\n    \n    // Keep only last 1000 logs to prevent memory issues\n    if (job.logs.length > 1000) {\n      job.logs = job.logs.slice(-1000);\n    }\n  }\n\n  private async generatePromptVariation(template: string, config: any): Promise<string> {\n    // Generate variations of the template prompt\n    const variationPrompt = `Create a variation of this prompt template that maintains the same purpose but uses different wording:\n\nTemplate: \"${template}\"\n\nReturn only the varied prompt without explanations.`;\n\n    try {\n      const response = await llmService.generate(variationPrompt, undefined, {\n        temperature: config.temperature,\n        num_predict: Math.min(500, config.max_tokens)\n      });\n      return response.response.trim();\n    } catch (error) {\n      console.warn('Failed to generate prompt variation, using original:', error);\n      return template;\n    }\n  }\n\n  private async assessDataQuality(prompt: string, response: string): Promise<number> {\n    // Simple quality assessment - replace with more sophisticated logic\n    let score = 0.5;\n    \n    // Check response length\n    if (response.length > 50 && response.length < 2000) score += 0.2;\n    \n    // Check for coherence (simple heuristic)\n    if (response.includes('.') && response.split('.').length > 1) score += 0.1;\n    \n    // Check for relevance (keyword matching)\n    const promptWords = prompt.toLowerCase().split(' ');\n    const responseWords = response.toLowerCase().split(' ');\n    const overlap = promptWords.filter(word => responseWords.includes(word)).length;\n    score += Math.min(0.2, overlap / promptWords.length);\n    \n    return Math.min(1.0, score);\n  }\n\n  private async calculateDatasetQuality(data: any[]): Promise<any> {\n    if (data.length === 0) {\n      return { coherence_score: 0, relevance_score: 0, diversity_score: 0, safety_score: 0 };\n    }\n    \n    let totalCoherence = 0;\n    let totalRelevance = 0;\n    let totalSafety = 0;\n    \n    for (const item of data) {\n      totalCoherence += await this.assessDataQuality(item.prompt, item.response);\n      totalRelevance += await this.assessDataQuality(item.prompt, item.response);\n      totalSafety += 0.9; // Assume high safety for generated data\n    }\n    \n    // Calculate diversity (unique prompts / total prompts)\n    const uniquePrompts = new Set(data.map(item => item.prompt.toLowerCase())).size;\n    const diversityScore = uniquePrompts / data.length;\n    \n    return {\n      coherence_score: totalCoherence / data.length,\n      relevance_score: totalRelevance / data.length,\n      diversity_score: diversityScore,\n      safety_score: totalSafety / data.length\n    };\n  }\n\n  private async saveGeneratedData(data: any[], outputPath: string, format: string): Promise<void> {\n    // Save data in specified format (implement actual file saving logic)\n    console.log(`Saving ${data.length} samples to ${outputPath} in ${format} format`);\n  }\n\n  private async runBenchmarkEvaluation(modelName: string, dataset: string): Promise<any> {\n    // Implement benchmark evaluation logic\n    return {\n      dataset_name: dataset,\n      metrics: {\n        accuracy: 0.75 + Math.random() * 0.2,\n        f1_score: 0.70 + Math.random() * 0.25,\n        bleu_score: 0.65 + Math.random() * 0.3\n      },\n      sample_count: 1000,\n      evaluation_time: Date.now()\n    };\n  }\n\n  private async calculateCustomMetric(modelName: string, metric: string): Promise<number> {\n    // Implement custom metric calculation\n    return 0.8 + Math.random() * 0.2;\n  }\n\n  private calculateOverallScore(metrics: Record<string, number>): number {\n    const weights = {\n      accuracy: 0.3,\n      f1_score: 0.3,\n      bleu_score: 0.2,\n      inference_time: -0.1, // Negative weight for latency\n      memory_usage: -0.1    // Negative weight for memory usage\n    };\n    \n    let score = 0;\n    let totalWeight = 0;\n    \n    Object.entries(metrics).forEach(([metric, value]) => {\n      const weight = weights[metric] || 0.1;\n      score += value * weight;\n      totalWeight += Math.abs(weight);\n    });\n    \n    return totalWeight > 0 ? Math.max(0, Math.min(1, score / totalWeight)) : 0.5;\n  }\n\n  private async generatePerformanceRecommendations(\n    modelName: string,\n    metrics: Record<string, number>,\n    benchmarkResults: Record<string, any>\n  ): Promise<string[]> {\n    const recommendations: string[] = [];\n    \n    if (metrics.accuracy < 0.8) {\n      recommendations.push('Consider increasing training data or adjusting hyperparameters to improve accuracy');\n    }\n    \n    if (metrics.inference_time > 200) {\n      recommendations.push('Model inference time is high. Consider model optimization or quantization');\n    }\n    \n    if (metrics.memory_usage > 1000) {\n      recommendations.push('High memory usage detected. Consider model pruning or compression');\n    }\n    \n    return recommendations;\n  }\n\n  private async getModelVersion(versionId: string): Promise<TrainingModelVersion | null> {\n    for (const versions of this.modelRegistry.values()) {\n      const version = versions.find(v => v.id === versionId);\n      if (version) return version;\n    }\n    return null;\n  }\n\n  private async updateModelVersion(version: TrainingModelVersion): Promise<void> {\n    // Update model version in registry and storage\n    console.log(`Updated model version: ${version.id}`);\n  }\n\n  private async deployToOllama(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement Ollama deployment\n    return { status: 'success', endpoint: `http://localhost:11434/api/generate` };\n  }\n\n  private async deployToHuggingFace(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement HuggingFace deployment\n    return { status: 'success', endpoint: `https://huggingface.co/models/${version.model_name}` };\n  }\n\n  private async deployToLocal(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement local deployment\n    return { status: 'success', endpoint: `http://localhost:8080/api/generate` };\n  }\n\n  private async deployToCloud(version: TrainingModelVersion, config: any): Promise<any> {\n    // Implement cloud deployment\n    return { status: 'success', endpoint: `https://api.cloud-provider.com/models/${version.id}` };\n  }\n}\n\n// Export singleton instance\nexport const modelTrainingEngine = new ModelTrainingEngine();"],"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","ignoreList":[]}