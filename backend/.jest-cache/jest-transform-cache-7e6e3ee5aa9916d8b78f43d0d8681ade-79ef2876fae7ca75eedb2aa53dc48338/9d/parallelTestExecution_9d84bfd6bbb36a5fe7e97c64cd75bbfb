1717005259652b634e6213bcd787385e
"use strict";

/* istanbul ignore next */
function cov_2eh9t9sce6() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/parallelTestExecution.ts";
  var hash = "90dd2cea8d659e075825a8332c0e6ad41fdcd1d0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/parallelTestExecution.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 45
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 30
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 45
        }
      },
      "8": {
        start: {
          line: 11,
          column: 25
        },
        end: {
          line: 11,
          column: 66
        }
      },
      "9": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 16,
          column: 3
        }
      },
      "10": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "11": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "12": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 53
        }
      },
      "13": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "14": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 65
        }
      },
      "15": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 79,
          column: 3
        }
      },
      "16": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "17": {
        start: {
          line: 29,
          column: 86
        },
        end: {
          line: 29,
          column: 94
        }
      },
      "18": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "19": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "20": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 38,
          column: 121
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "23": {
        start: {
          line: 46,
          column: 34
        },
        end: {
          line: 50,
          column: 44
        }
      },
      "24": {
        start: {
          line: 48,
          column: 45
        },
        end: {
          line: 48,
          column: 48
        }
      },
      "25": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "26": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "27": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 58,
          column: 144
        }
      },
      "28": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "29": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 62
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "31": {
        start: {
          line: 84,
          column: 0
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "32": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "33": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 42
        }
      },
      "34": {
        start: {
          line: 87,
          column: 25
        },
        end: {
          line: 87,
          column: 75
        }
      },
      "35": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "36": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "37": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 66
        }
      },
      "39": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "40": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 126,
          column: 3
        }
      },
      "41": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "42": {
        start: {
          line: 113,
          column: 33
        },
        end: {
          line: 113,
          column: 71
        }
      },
      "43": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "44": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 65
        }
      },
      "45": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "46": {
        start: {
          line: 131,
          column: 0
        },
        end: {
          line: 153,
          column: 3
        }
      },
      "47": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "48": {
        start: {
          line: 133,
          column: 32
        },
        end: {
          line: 133,
          column: 42
        }
      },
      "49": {
        start: {
          line: 134,
          column: 26
        },
        end: {
          line: 134,
          column: 77
        }
      },
      "50": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "51": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "52": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "54": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "55": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 173,
          column: 3
        }
      },
      "56": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "57": {
        start: {
          line: 160,
          column: 22
        },
        end: {
          line: 160,
          column: 60
        }
      },
      "58": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "59": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 59
        }
      },
      "60": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "61": {
        start: {
          line: 178,
          column: 0
        },
        end: {
          line: 229,
          column: 3
        }
      },
      "62": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "63": {
        start: {
          line: 180,
          column: 32
        },
        end: {
          line: 180,
          column: 42
        }
      },
      "64": {
        start: {
          line: 182,
          column: 24
        },
        end: {
          line: 192,
          column: 29
        }
      },
      "65": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "66": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 15
        }
      },
      "67": {
        start: {
          line: 200,
          column: 33
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "68": {
        start: {
          line: 200,
          column: 56
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "69": {
        start: {
          line: 206,
          column: 24
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "70": {
        start: {
          line: 208,
          column: 55
        },
        end: {
          line: 208,
          column: 63
        }
      },
      "71": {
        start: {
          line: 209,
          column: 55
        },
        end: {
          line: 209,
          column: 64
        }
      },
      "72": {
        start: {
          line: 210,
          column: 70
        },
        end: {
          line: 210,
          column: 95
        }
      },
      "73": {
        start: {
          line: 211,
          column: 72
        },
        end: {
          line: 211,
          column: 97
        }
      },
      "74": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "75": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 65
        }
      },
      "76": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "77": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 260,
          column: 3
        }
      },
      "78": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 259,
          column: 5
        }
      },
      "79": {
        start: {
          line: 236,
          column: 32
        },
        end: {
          line: 236,
          column: 67
        }
      },
      "80": {
        start: {
          line: 237,
          column: 29
        },
        end: {
          line: 237,
          column: 62
        }
      },
      "81": {
        start: {
          line: 238,
          column: 23
        },
        end: {
          line: 238,
          column: 50
        }
      },
      "82": {
        start: {
          line: 239,
          column: 32
        },
        end: {
          line: 239,
          column: 77
        }
      },
      "83": {
        start: {
          line: 240,
          column: 30
        },
        end: {
          line: 240,
          column: 67
        }
      },
      "84": {
        start: {
          line: 241,
          column: 35
        },
        end: {
          line: 241,
          column: 74
        }
      },
      "85": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "86": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 64
        }
      },
      "87": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      },
      "88": {
        start: {
          line: 265,
          column: 0
        },
        end: {
          line: 313,
          column: 3
        }
      },
      "89": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 312,
          column: 5
        }
      },
      "90": {
        start: {
          line: 267,
          column: 31
        },
        end: {
          line: 267,
          column: 39
        }
      },
      "91": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "92": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      },
      "93": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 274,
          column: 26
        }
      },
      "94": {
        start: {
          line: 275,
          column: 24
        },
        end: {
          line: 275,
          column: 40
        }
      },
      "95": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "96": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 293,
          column: 13
        }
      },
      "97": {
        start: {
          line: 278,
          column: 36
        },
        end: {
          line: 278,
          column: 207
        }
      },
      "98": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 284,
          column: 19
        }
      },
      "99": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "100": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "101": {
        start: {
          line: 300,
          column: 55
        },
        end: {
          line: 300,
          column: 76
        }
      },
      "102": {
        start: {
          line: 301,
          column: 53
        },
        end: {
          line: 301,
          column: 74
        }
      },
      "103": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 61
        }
      },
      "104": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "105": {
        start: {
          line: 315,
          column: 0
        },
        end: {
          line: 319,
          column: 3
        }
      },
      "106": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 316,
          column: 66
        }
      },
      "107": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 317,
          column: 38
        }
      },
      "108": {
        start: {
          line: 318,
          column: 4
        },
        end: {
          line: 318,
          column: 20
        }
      },
      "109": {
        start: {
          line: 320,
          column: 0
        },
        end: {
          line: 324,
          column: 3
        }
      },
      "110": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 321,
          column: 66
        }
      },
      "111": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 322,
          column: 38
        }
      },
      "112": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 323,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 13,
            column: 40
          }
        },
        loc: {
          start: {
            line: 13,
            column: 53
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 36
          },
          end: {
            line: 17,
            column: 37
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 34
          }
        },
        loc: {
          start: {
            line: 20,
            column: 44
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 27,
            column: 23
          }
        },
        loc: {
          start: {
            line: 27,
            column: 42
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 39
          },
          end: {
            line: 48,
            column: 40
          }
        },
        loc: {
          start: {
            line: 48,
            column: 45
          },
          end: {
            line: 48,
            column: 48
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 84,
            column: 37
          },
          end: {
            line: 84,
            column: 38
          }
        },
        loc: {
          start: {
            line: 84,
            column: 51
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 84
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 22
          },
          end: {
            line: 111,
            column: 23
          }
        },
        loc: {
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 131,
            column: 31
          },
          end: {
            line: 131,
            column: 32
          }
        },
        loc: {
          start: {
            line: 131,
            column: 51
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 28
          }
        },
        loc: {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 158
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 178,
            column: 36
          },
          end: {
            line: 178,
            column: 37
          }
        },
        loc: {
          start: {
            line: 178,
            column: 50
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 178
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 200,
            column: 45
          },
          end: {
            line: 200,
            column: 46
          }
        },
        loc: {
          start: {
            line: 200,
            column: 56
          },
          end: {
            line: 204,
            column: 9
          }
        },
        line: 200
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 208,
            column: 51
          }
        },
        loc: {
          start: {
            line: 208,
            column: 55
          },
          end: {
            line: 208,
            column: 63
          }
        },
        line: 208
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 209,
            column: 50
          },
          end: {
            line: 209,
            column: 51
          }
        },
        loc: {
          start: {
            line: 209,
            column: 55
          },
          end: {
            line: 209,
            column: 64
          }
        },
        line: 209
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 210,
            column: 58
          },
          end: {
            line: 210,
            column: 59
          }
        },
        loc: {
          start: {
            line: 210,
            column: 70
          },
          end: {
            line: 210,
            column: 95
          }
        },
        line: 210
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 211,
            column: 60
          },
          end: {
            line: 211,
            column: 61
          }
        },
        loc: {
          start: {
            line: 211,
            column: 72
          },
          end: {
            line: 211,
            column: 97
          }
        },
        line: 211
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 234,
            column: 32
          },
          end: {
            line: 234,
            column: 33
          }
        },
        loc: {
          start: {
            line: 234,
            column: 46
          },
          end: {
            line: 260,
            column: 1
          }
        },
        line: 234
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 265,
            column: 22
          },
          end: {
            line: 265,
            column: 23
          }
        },
        loc: {
          start: {
            line: 265,
            column: 42
          },
          end: {
            line: 313,
            column: 1
          }
        },
        line: 265
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 300,
            column: 50
          },
          end: {
            line: 300,
            column: 51
          }
        },
        loc: {
          start: {
            line: 300,
            column: 55
          },
          end: {
            line: 300,
            column: 76
          }
        },
        line: 300
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 301,
            column: 48
          },
          end: {
            line: 301,
            column: 49
          }
        },
        loc: {
          start: {
            line: 301,
            column: 53
          },
          end: {
            line: 301,
            column: 74
          }
        },
        line: 301
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 315,
            column: 22
          },
          end: {
            line: 315,
            column: 23
          }
        },
        loc: {
          start: {
            line: 315,
            column: 34
          },
          end: {
            line: 319,
            column: 1
          }
        },
        line: 315
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 320,
            column: 21
          },
          end: {
            line: 320,
            column: 22
          }
        },
        loc: {
          start: {
            line: 320,
            column: 33
          },
          end: {
            line: 324,
            column: 1
          }
        },
        line: 320
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 69
          },
          end: {
            line: 29,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 80
          },
          end: {
            line: 29,
            column: 81
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 27
          }
        }, {
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 45
          }
        }, {
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 31,
            column: 78
          }
        }, {
          start: {
            line: 31,
            column: 82
          },
          end: {
            line: 31,
            column: 108
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 101
          },
          end: {
            line: 58,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 101
          },
          end: {
            line: 58,
            column: 106
          }
        }, {
          start: {
            line: 58,
            column: 110
          },
          end: {
            line: 58,
            column: 118
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 66,
            column: 23
          },
          end: {
            line: 66,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 23
          },
          end: {
            line: 66,
            column: 28
          }
        }, {
          start: {
            line: 66,
            column: 32
          },
          end: {
            line: 66,
            column: 40
          }
        }],
        line: 66
      },
      "7": {
        loc: {
          start: {
            line: 67,
            column: 31
          },
          end: {
            line: 67,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 31
          },
          end: {
            line: 67,
            column: 44
          }
        }, {
          start: {
            line: 67,
            column: 48
          },
          end: {
            line: 67,
            column: 88
          }
        }],
        line: 67
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 19
          },
          end: {
            line: 76,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 44
          },
          end: {
            line: 76,
            column: 57
          }
        }, {
          start: {
            line: 76,
            column: 60
          },
          end: {
            line: 76,
            column: 92
          }
        }],
        line: 76
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 103,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 44
          },
          end: {
            line: 103,
            column: 57
          }
        }, {
          start: {
            line: 103,
            column: 60
          },
          end: {
            line: 103,
            column: 94
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 123,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 57
          }
        }, {
          start: {
            line: 123,
            column: 60
          },
          end: {
            line: 123,
            column: 93
          }
        }],
        line: 123
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 19
          },
          end: {
            line: 150,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 44
          },
          end: {
            line: 150,
            column: 57
          }
        }, {
          start: {
            line: 150,
            column: 60
          },
          end: {
            line: 150,
            column: 93
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 170,
            column: 19
          },
          end: {
            line: 170,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 44
          },
          end: {
            line: 170,
            column: 57
          }
        }, {
          start: {
            line: 170,
            column: 60
          },
          end: {
            line: 170,
            column: 92
          }
        }],
        line: 170
      },
      "15": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "16": {
        loc: {
          start: {
            line: 202,
            column: 42
          },
          end: {
            line: 202,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 42
          },
          end: {
            line: 202,
            column: 66
          }
        }, {
          start: {
            line: 202,
            column: 70
          },
          end: {
            line: 202,
            column: 74
          }
        }],
        line: 202
      },
      "17": {
        loc: {
          start: {
            line: 226,
            column: 19
          },
          end: {
            line: 226,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 44
          },
          end: {
            line: 226,
            column: 57
          }
        }, {
          start: {
            line: 226,
            column: 60
          },
          end: {
            line: 226,
            column: 93
          }
        }],
        line: 226
      },
      "18": {
        loc: {
          start: {
            line: 257,
            column: 19
          },
          end: {
            line: 257,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 44
          },
          end: {
            line: 257,
            column: 57
          }
        }, {
          start: {
            line: 257,
            column: 60
          },
          end: {
            line: 257,
            column: 92
          }
        }],
        line: 257
      },
      "19": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "20": {
        loc: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 38
          }
        }, {
          start: {
            line: 268,
            column: 42
          },
          end: {
            line: 268,
            column: 65
          }
        }],
        line: 268
      },
      "21": {
        loc: {
          start: {
            line: 278,
            column: 129
          },
          end: {
            line: 278,
            column: 156
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 129
          },
          end: {
            line: 278,
            column: 144
          }
        }, {
          start: {
            line: 278,
            column: 148
          },
          end: {
            line: 278,
            column: 156
          }
        }],
        line: 278
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 183
          },
          end: {
            line: 278,
            column: 206
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 183
          },
          end: {
            line: 278,
            column: 201
          }
        }, {
          start: {
            line: 278,
            column: 205
          },
          end: {
            line: 278,
            column: 206
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 291,
            column: 27
          },
          end: {
            line: 291,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 52
          },
          end: {
            line: 291,
            column: 65
          }
        }, {
          start: {
            line: 291,
            column: 68
          },
          end: {
            line: 291,
            column: 83
          }
        }],
        line: 291
      },
      "24": {
        loc: {
          start: {
            line: 310,
            column: 19
          },
          end: {
            line: 310,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 44
          },
          end: {
            line: 310,
            column: 57
          }
        }, {
          start: {
            line: 310,
            column: 60
          },
          end: {
            line: 310,
            column: 91
          }
        }],
        line: 310
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/parallelTestExecution.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/parallelTestExecution.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { db } from '../database/connection';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst router = Router();\n\n// Initialize the test queue manager\nconst testQueueManager = new TestQueueManager();\n\n// Setup event handlers for real-time updates\ntestQueueManager.on('progressUpdated', (progress) => {\n  // In a real implementation, this would emit to WebSocket clients\n  console.log('Progress updated:', progress);\n});\n\ntestQueueManager.on('jobCompleted', (event) => {\n  console.log('Job completed:', event.executionId);\n});\n\ntestQueueManager.on('jobFailed', (event) => {\n  console.error('Job failed:', event.executionId, event.error);\n});\n\n/**\n * Queue parallel test execution for a prompt card\n * POST /api/parallel-test-execution/queue\n */\nrouter.post('/queue', async (req, res) => {\n  try {\n    const {\n      prompt_card_id,\n      test_case_ids,\n      model,\n      configuration,\n      priority = 0\n    } = req.body;\n\n    // Validate required fields\n    if (!prompt_card_id || !test_case_ids || !Array.isArray(test_case_ids) || test_case_ids.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'prompt_card_id and test_case_ids (array) are required'\n      });\n    }\n\n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id, title FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Verify test cases exist\n    const existingTestCases = db.prepare(`\n      SELECT id FROM test_cases \n      WHERE id IN (${test_case_ids.map(() => '?').join(',')}) \n      AND prompt_card_id = ?\n    `).all(...test_case_ids, prompt_card_id);\n\n    if (existingTestCases.length !== test_case_ids.length) {\n      return res.status(400).json({\n        success: false,\n        error: 'Some test cases not found or do not belong to the specified prompt card'\n      });\n    }\n\n    // Queue the test execution\n    const executionId = await testQueueManager.queueTestExecution(\n      prompt_card_id,\n      test_case_ids,\n      model || 'llama3',\n      configuration,\n      priority\n    );\n\n    return res.status(202).json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        status: 'queued',\n        prompt_card_id,\n        test_case_ids,\n        model: model || 'llama3',\n        configuration: configuration || testQueueManager['defaultConfiguration'],\n        priority\n      }\n    });\n\n  } catch (error) {\n    console.error('Error queuing test execution:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to queue test execution'\n    });\n  }\n});\n\n/**\n * Get execution progress\n * GET /api/parallel-test-execution/:executionId/progress\n */\nrouter.get('/:executionId/progress', (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    const progress = testQueueManager.getExecutionProgress(executionId);\n    \n    if (!progress) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution not found or not active'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: progress\n    });\n\n  } catch (error) {\n    console.error('Error getting execution progress:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get execution progress'\n    });\n  }\n});\n\n/**\n * Get all active executions\n * GET /api/parallel-test-execution/active\n */\nrouter.get('/active', (req, res) => {\n  try {\n    const activeExecutions = testQueueManager.getActiveExecutions();\n    \n    return res.json({\n      success: true,\n      data: activeExecutions\n    });\n\n  } catch (error) {\n    console.error('Error getting active executions:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get active executions'\n    });\n  }\n});\n\n/**\n * Cancel test execution\n * DELETE /api/parallel-test-execution/:executionId\n */\nrouter.delete('/:executionId', async (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    const cancelled = await testQueueManager.cancelExecution(executionId);\n    \n    if (!cancelled) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution not found or cannot be cancelled'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Test execution cancelled successfully'\n    });\n\n  } catch (error) {\n    console.error('Error cancelling test execution:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to cancel test execution'\n    });\n  }\n});\n\n/**\n * Get queue statistics\n * GET /api/parallel-test-execution/queue/stats\n */\nrouter.get('/queue/stats', async (req, res) => {\n  try {\n    const stats = await testQueueManager.getQueueStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n\n  } catch (error) {\n    console.error('Error getting queue stats:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get queue statistics'\n    });\n  }\n});\n\n/**\n * Get test execution results\n * GET /api/parallel-test-execution/:executionId/results\n */\nrouter.get('/:executionId/results', (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    // Get results from database\n    const results = db.prepare(`\n      SELECT \n        tr.*,\n        tc.name as test_case_name,\n        pc.title as prompt_card_title\n      FROM test_results tr\n      JOIN test_cases tc ON tr.test_case_id = tc.id\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tr.execution_id LIKE ?\n      ORDER BY tr.created_at ASC\n    `).all(`${executionId}%`);\n\n    if (results.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No results found for this execution'\n      });\n    }\n\n    // Parse JSON fields and format results\n    const formattedResults = results.map(result => ({\n      ...result,\n      assertion_results: JSON.parse(result.assertion_results || '[]'),\n      passed: Boolean(result.passed)\n    }));\n\n    // Calculate summary statistics\n    const summary = {\n      total_tests: formattedResults.length,\n      passed_tests: formattedResults.filter(r => r.passed).length,\n      failed_tests: formattedResults.filter(r => !r.passed).length,\n      total_execution_time: formattedResults.reduce((sum, r) => sum + r.execution_time_ms, 0),\n      average_execution_time: formattedResults.reduce((sum, r) => sum + r.execution_time_ms, 0) / formattedResults.length\n    };\n\n    return res.json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        summary,\n        results: formattedResults\n      }\n    });\n\n  } catch (error) {\n    console.error('Error getting execution results:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get execution results'\n    });\n  }\n});\n\n/**\n * Get system resource status\n * GET /api/parallel-test-execution/system/resources\n */\nrouter.get('/system/resources', (req, res) => {\n  try {\n    const resourceManager = testQueueManager['resourceManager'];\n    const currentUsage = resourceManager.getCurrentUsage();\n    const limits = resourceManager.getLimits();\n    const reservedSummary = resourceManager.getReservedResourcesSummary();\n    const isUnderStress = resourceManager.isSystemUnderStress();\n    const optimalConcurrency = resourceManager.getOptimalConcurrency();\n\n    return res.json({\n      success: true,\n      data: {\n        current_usage: currentUsage,\n        limits,\n        reserved_resources: reservedSummary,\n        system_under_stress: isUnderStress,\n        optimal_concurrency: optimalConcurrency\n      }\n    });\n\n  } catch (error) {\n    console.error('Error getting system resources:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get system resources'\n    });\n  }\n});\n\n/**\n * Batch execute multiple prompt cards\n * POST /api/parallel-test-execution/batch\n */\nrouter.post('/batch', async (req, res) => {\n  try {\n    const { executions } = req.body;\n\n    if (!Array.isArray(executions) || executions.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'executions array is required'\n      });\n    }\n\n    const results = [];\n    const batchId = uuidv4();\n\n    for (const execution of executions) {\n      try {\n        const executionId = await testQueueManager.queueTestExecution(\n          execution.prompt_card_id,\n          execution.test_case_ids,\n          execution.model || 'llama3',\n          execution.configuration,\n          execution.priority || 0\n        );\n\n        results.push({\n          execution_id: executionId,\n          prompt_card_id: execution.prompt_card_id,\n          status: 'queued',\n          error: null\n        });\n\n      } catch (error) {\n        results.push({\n          execution_id: null,\n          prompt_card_id: execution.prompt_card_id,\n          status: 'failed',\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return res.status(202).json({\n      success: true,\n      data: {\n        batch_id: batchId,\n        total_executions: executions.length,\n        successful_queued: results.filter(r => r.status === 'queued').length,\n        failed_to_queue: results.filter(r => r.status === 'failed').length,\n        results\n      }\n    });\n\n  } catch (error) {\n    console.error('Error batch executing tests:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to batch execute tests'\n    });\n  }\n});\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  console.log('Gracefully shutting down test queue manager...');\n  await testQueueManager.shutdown();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  console.log('Gracefully shutting down test queue manager...');\n  await testQueueManager.shutdown();\n  process.exit(0);\n});\n\nexport { router as parallelTestExecutionRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "90dd2cea8d659e075825a8332c0e6ad41fdcd1d0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2eh9t9sce6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2eh9t9sce6();
cov_2eh9t9sce6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2eh9t9sce6().s[1]++;
exports.parallelTestExecutionRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_2eh9t9sce6().s[2]++, require("express"));
const TestQueueManager_1 =
/* istanbul ignore next */
(cov_2eh9t9sce6().s[3]++, require("../services/testing/TestQueueManager"));
const connection_1 =
/* istanbul ignore next */
(cov_2eh9t9sce6().s[4]++, require("../database/connection"));
const uuid_1 =
/* istanbul ignore next */
(cov_2eh9t9sce6().s[5]++, require("uuid"));
const router =
/* istanbul ignore next */
(cov_2eh9t9sce6().s[6]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_2eh9t9sce6().s[7]++;
exports.parallelTestExecutionRoutes = router;
// Initialize the test queue manager
const testQueueManager =
/* istanbul ignore next */
(cov_2eh9t9sce6().s[8]++, new TestQueueManager_1.TestQueueManager());
// Setup event handlers for real-time updates
/* istanbul ignore next */
cov_2eh9t9sce6().s[9]++;
testQueueManager.on('progressUpdated', progress => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[0]++;
  cov_2eh9t9sce6().s[10]++;
  // In a real implementation, this would emit to WebSocket clients
  console.log('Progress updated:', progress);
});
/* istanbul ignore next */
cov_2eh9t9sce6().s[11]++;
testQueueManager.on('jobCompleted', event => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[1]++;
  cov_2eh9t9sce6().s[12]++;
  console.log('Job completed:', event.executionId);
});
/* istanbul ignore next */
cov_2eh9t9sce6().s[13]++;
testQueueManager.on('jobFailed', event => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[2]++;
  cov_2eh9t9sce6().s[14]++;
  console.error('Job failed:', event.executionId, event.error);
});
/**
 * Queue parallel test execution for a prompt card
 * POST /api/parallel-test-execution/queue
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[15]++;
router.post('/queue', async (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[3]++;
  cov_2eh9t9sce6().s[16]++;
  try {
    const {
      prompt_card_id,
      test_case_ids,
      model,
      configuration,
      priority =
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[0][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[17]++, req.body);
    // Validate required fields
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[2][0]++, !prompt_card_id) ||
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[2][1]++, !test_case_ids) ||
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[2][2]++, !Array.isArray(test_case_ids)) ||
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[2][3]++, test_case_ids.length === 0)) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[1][0]++;
      cov_2eh9t9sce6().s[19]++;
      return res.status(400).json({
        success: false,
        error: 'prompt_card_id and test_case_ids (array) are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[1][1]++;
    }
    // Verify prompt card exists
    const promptCard =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[20]++, connection_1.db.prepare('SELECT id, title FROM prompt_cards WHERE id = ?').get(prompt_card_id));
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[21]++;
    if (!promptCard) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[3][0]++;
      cov_2eh9t9sce6().s[22]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[3][1]++;
    }
    // Verify test cases exist
    const existingTestCases =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[23]++, connection_1.db.prepare(`
      SELECT id FROM test_cases 
      WHERE id IN (${test_case_ids.map(() => {
      /* istanbul ignore next */
      cov_2eh9t9sce6().f[4]++;
      cov_2eh9t9sce6().s[24]++;
      return '?';
    }).join(',')}) 
      AND prompt_card_id = ?
    `).all(...test_case_ids, prompt_card_id));
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[25]++;
    if (existingTestCases.length !== test_case_ids.length) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[4][0]++;
      cov_2eh9t9sce6().s[26]++;
      return res.status(400).json({
        success: false,
        error: 'Some test cases not found or do not belong to the specified prompt card'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[4][1]++;
    }
    // Queue the test execution
    const executionId =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[27]++, await testQueueManager.queueTestExecution(prompt_card_id, test_case_ids,
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[5][0]++, model) ||
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[5][1]++, 'llama3'), configuration, priority));
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[28]++;
    return res.status(202).json({
      success: true,
      data: {
        execution_id: executionId,
        status: 'queued',
        prompt_card_id,
        test_case_ids,
        model:
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[6][0]++, model) ||
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[6][1]++, 'llama3'),
        configuration:
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[7][0]++, configuration) ||
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[7][1]++, testQueueManager['defaultConfiguration']),
        priority
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[29]++;
    console.error('Error queuing test execution:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[30]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[8][1]++, 'Failed to queue test execution')
    });
  }
});
/**
 * Get execution progress
 * GET /api/parallel-test-execution/:executionId/progress
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[31]++;
router.get('/:executionId/progress', (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[5]++;
  cov_2eh9t9sce6().s[32]++;
  try {
    const {
      executionId
    } =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[33]++, req.params);
    const progress =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[34]++, testQueueManager.getExecutionProgress(executionId));
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[35]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[9][0]++;
      cov_2eh9t9sce6().s[36]++;
      return res.status(404).json({
        success: false,
        error: 'Execution not found or not active'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[9][1]++;
    }
    cov_2eh9t9sce6().s[37]++;
    return res.json({
      success: true,
      data: progress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[38]++;
    console.error('Error getting execution progress:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[39]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[10][1]++, 'Failed to get execution progress')
    });
  }
});
/**
 * Get all active executions
 * GET /api/parallel-test-execution/active
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[40]++;
router.get('/active', (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[6]++;
  cov_2eh9t9sce6().s[41]++;
  try {
    const activeExecutions =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[42]++, testQueueManager.getActiveExecutions());
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[43]++;
    return res.json({
      success: true,
      data: activeExecutions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[44]++;
    console.error('Error getting active executions:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[45]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[11][1]++, 'Failed to get active executions')
    });
  }
});
/**
 * Cancel test execution
 * DELETE /api/parallel-test-execution/:executionId
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[46]++;
router.delete('/:executionId', async (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[7]++;
  cov_2eh9t9sce6().s[47]++;
  try {
    const {
      executionId
    } =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[48]++, req.params);
    const cancelled =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[49]++, await testQueueManager.cancelExecution(executionId));
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[50]++;
    if (!cancelled) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[12][0]++;
      cov_2eh9t9sce6().s[51]++;
      return res.status(404).json({
        success: false,
        error: 'Execution not found or cannot be cancelled'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[12][1]++;
    }
    cov_2eh9t9sce6().s[52]++;
    return res.json({
      success: true,
      message: 'Test execution cancelled successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[53]++;
    console.error('Error cancelling test execution:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[54]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[13][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[13][1]++, 'Failed to cancel test execution')
    });
  }
});
/**
 * Get queue statistics
 * GET /api/parallel-test-execution/queue/stats
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[55]++;
router.get('/queue/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[8]++;
  cov_2eh9t9sce6().s[56]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[57]++, await testQueueManager.getQueueStats());
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[58]++;
    return res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[59]++;
    console.error('Error getting queue stats:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[60]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[14][1]++, 'Failed to get queue statistics')
    });
  }
});
/**
 * Get test execution results
 * GET /api/parallel-test-execution/:executionId/results
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[61]++;
router.get('/:executionId/results', (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[9]++;
  cov_2eh9t9sce6().s[62]++;
  try {
    const {
      executionId
    } =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[63]++, req.params);
    // Get results from database
    const results =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[64]++, connection_1.db.prepare(`
      SELECT 
        tr.*,
        tc.name as test_case_name,
        pc.title as prompt_card_title
      FROM test_results tr
      JOIN test_cases tc ON tr.test_case_id = tc.id
      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id
      WHERE tr.execution_id LIKE ?
      ORDER BY tr.created_at ASC
    `).all(`${executionId}%`));
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[65]++;
    if (results.length === 0) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[15][0]++;
      cov_2eh9t9sce6().s[66]++;
      return res.status(404).json({
        success: false,
        error: 'No results found for this execution'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[15][1]++;
    }
    // Parse JSON fields and format results
    const formattedResults =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[67]++, results.map(result => {
      /* istanbul ignore next */
      cov_2eh9t9sce6().f[10]++;
      cov_2eh9t9sce6().s[68]++;
      return {
        ...result,
        assertion_results: JSON.parse(
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[16][0]++, result.assertion_results) ||
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[16][1]++, '[]')),
        passed: Boolean(result.passed)
      };
    }));
    // Calculate summary statistics
    const summary =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[69]++, {
      total_tests: formattedResults.length,
      passed_tests: formattedResults.filter(r => {
        /* istanbul ignore next */
        cov_2eh9t9sce6().f[11]++;
        cov_2eh9t9sce6().s[70]++;
        return r.passed;
      }).length,
      failed_tests: formattedResults.filter(r => {
        /* istanbul ignore next */
        cov_2eh9t9sce6().f[12]++;
        cov_2eh9t9sce6().s[71]++;
        return !r.passed;
      }).length,
      total_execution_time: formattedResults.reduce((sum, r) => {
        /* istanbul ignore next */
        cov_2eh9t9sce6().f[13]++;
        cov_2eh9t9sce6().s[72]++;
        return sum + r.execution_time_ms;
      }, 0),
      average_execution_time: formattedResults.reduce((sum, r) => {
        /* istanbul ignore next */
        cov_2eh9t9sce6().f[14]++;
        cov_2eh9t9sce6().s[73]++;
        return sum + r.execution_time_ms;
      }, 0) / formattedResults.length
    });
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[74]++;
    return res.json({
      success: true,
      data: {
        execution_id: executionId,
        summary,
        results: formattedResults
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[75]++;
    console.error('Error getting execution results:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[76]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[17][1]++, 'Failed to get execution results')
    });
  }
});
/**
 * Get system resource status
 * GET /api/parallel-test-execution/system/resources
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[77]++;
router.get('/system/resources', (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[15]++;
  cov_2eh9t9sce6().s[78]++;
  try {
    const resourceManager =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[79]++, testQueueManager['resourceManager']);
    const currentUsage =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[80]++, resourceManager.getCurrentUsage());
    const limits =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[81]++, resourceManager.getLimits());
    const reservedSummary =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[82]++, resourceManager.getReservedResourcesSummary());
    const isUnderStress =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[83]++, resourceManager.isSystemUnderStress());
    const optimalConcurrency =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[84]++, resourceManager.getOptimalConcurrency());
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[85]++;
    return res.json({
      success: true,
      data: {
        current_usage: currentUsage,
        limits,
        reserved_resources: reservedSummary,
        system_under_stress: isUnderStress,
        optimal_concurrency: optimalConcurrency
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[86]++;
    console.error('Error getting system resources:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[87]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[18][1]++, 'Failed to get system resources')
    });
  }
});
/**
 * Batch execute multiple prompt cards
 * POST /api/parallel-test-execution/batch
 */
/* istanbul ignore next */
cov_2eh9t9sce6().s[88]++;
router.post('/batch', async (req, res) => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[16]++;
  cov_2eh9t9sce6().s[89]++;
  try {
    const {
      executions
    } =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[90]++, req.body);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[91]++;
    if (
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[20][0]++, !Array.isArray(executions)) ||
    /* istanbul ignore next */
    (cov_2eh9t9sce6().b[20][1]++, executions.length === 0)) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().b[19][0]++;
      cov_2eh9t9sce6().s[92]++;
      return res.status(400).json({
        success: false,
        error: 'executions array is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2eh9t9sce6().b[19][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[93]++, []);
    const batchId =
    /* istanbul ignore next */
    (cov_2eh9t9sce6().s[94]++, (0, uuid_1.v4)());
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[95]++;
    for (const execution of executions) {
      /* istanbul ignore next */
      cov_2eh9t9sce6().s[96]++;
      try {
        const executionId =
        /* istanbul ignore next */
        (cov_2eh9t9sce6().s[97]++, await testQueueManager.queueTestExecution(execution.prompt_card_id, execution.test_case_ids,
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[21][0]++, execution.model) ||
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[21][1]++, 'llama3'), execution.configuration,
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[22][0]++, execution.priority) ||
        /* istanbul ignore next */
        (cov_2eh9t9sce6().b[22][1]++, 0)));
        /* istanbul ignore next */
        cov_2eh9t9sce6().s[98]++;
        results.push({
          execution_id: executionId,
          prompt_card_id: execution.prompt_card_id,
          status: 'queued',
          error: null
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_2eh9t9sce6().s[99]++;
        results.push({
          execution_id: null,
          prompt_card_id: execution.prompt_card_id,
          status: 'failed',
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2eh9t9sce6().b[23][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2eh9t9sce6().b[23][1]++, 'Unknown error')
        });
      }
    }
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[100]++;
    return res.status(202).json({
      success: true,
      data: {
        batch_id: batchId,
        total_executions: executions.length,
        successful_queued: results.filter(r => {
          /* istanbul ignore next */
          cov_2eh9t9sce6().f[17]++;
          cov_2eh9t9sce6().s[101]++;
          return r.status === 'queued';
        }).length,
        failed_to_queue: results.filter(r => {
          /* istanbul ignore next */
          cov_2eh9t9sce6().f[18]++;
          cov_2eh9t9sce6().s[102]++;
          return r.status === 'failed';
        }).length,
        results
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[103]++;
    console.error('Error batch executing tests:', error);
    /* istanbul ignore next */
    cov_2eh9t9sce6().s[104]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[24][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2eh9t9sce6().b[24][1]++, 'Failed to batch execute tests')
    });
  }
});
// Graceful shutdown handler
/* istanbul ignore next */
cov_2eh9t9sce6().s[105]++;
process.on('SIGTERM', async () => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[19]++;
  cov_2eh9t9sce6().s[106]++;
  console.log('Gracefully shutting down test queue manager...');
  /* istanbul ignore next */
  cov_2eh9t9sce6().s[107]++;
  await testQueueManager.shutdown();
  /* istanbul ignore next */
  cov_2eh9t9sce6().s[108]++;
  process.exit(0);
});
/* istanbul ignore next */
cov_2eh9t9sce6().s[109]++;
process.on('SIGINT', async () => {
  /* istanbul ignore next */
  cov_2eh9t9sce6().f[20]++;
  cov_2eh9t9sce6().s[110]++;
  console.log('Gracefully shutting down test queue manager...');
  /* istanbul ignore next */
  cov_2eh9t9sce6().s[111]++;
  await testQueueManager.shutdown();
  /* istanbul ignore next */
  cov_2eh9t9sce6().s[112]++;
  process.exit(0);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,