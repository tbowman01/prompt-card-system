{"version":3,"names":["cov_2eh9t9sce6","actualCoverage","s","express_1","require","TestQueueManager_1","connection_1","uuid_1","router","Router","exports","parallelTestExecutionRoutes","testQueueManager","TestQueueManager","on","progress","f","console","log","event","executionId","error","post","req","res","prompt_card_id","test_case_ids","model","configuration","priority","b","body","Array","isArray","length","status","json","success","promptCard","db","prepare","get","existingTestCases","map","join","all","queueTestExecution","data","execution_id","Error","message","params","getExecutionProgress","activeExecutions","getActiveExecutions","delete","cancelled","cancelExecution","stats","getQueueStats","results","formattedResults","result","assertion_results","JSON","parse","passed","Boolean","summary","total_tests","passed_tests","filter","r","failed_tests","total_execution_time","reduce","sum","execution_time_ms","average_execution_time","resourceManager","currentUsage","getCurrentUsage","limits","getLimits","reservedSummary","getReservedResourcesSummary","isUnderStress","isSystemUnderStress","optimalConcurrency","getOptimalConcurrency","current_usage","reserved_resources","system_under_stress","optimal_concurrency","executions","batchId","v4","execution","push","batch_id","total_executions","successful_queued","failed_to_queue","process","shutdown","exit"],"sources":["/workspaces/prompt-card-system/backend/src/routes/parallelTestExecution.ts"],"sourcesContent":["import { Router } from 'express';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { db } from '../database/connection';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst router = Router();\n\n// Initialize the test queue manager\nconst testQueueManager = new TestQueueManager();\n\n// Setup event handlers for real-time updates\ntestQueueManager.on('progressUpdated', (progress) => {\n  // In a real implementation, this would emit to WebSocket clients\n  console.log('Progress updated:', progress);\n});\n\ntestQueueManager.on('jobCompleted', (event) => {\n  console.log('Job completed:', event.executionId);\n});\n\ntestQueueManager.on('jobFailed', (event) => {\n  console.error('Job failed:', event.executionId, event.error);\n});\n\n/**\n * Queue parallel test execution for a prompt card\n * POST /api/parallel-test-execution/queue\n */\nrouter.post('/queue', async (req, res) => {\n  try {\n    const {\n      prompt_card_id,\n      test_case_ids,\n      model,\n      configuration,\n      priority = 0\n    } = req.body;\n\n    // Validate required fields\n    if (!prompt_card_id || !test_case_ids || !Array.isArray(test_case_ids) || test_case_ids.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'prompt_card_id and test_case_ids (array) are required'\n      });\n    }\n\n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id, title FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Verify test cases exist\n    const existingTestCases = db.prepare(`\n      SELECT id FROM test_cases \n      WHERE id IN (${test_case_ids.map(() => '?').join(',')}) \n      AND prompt_card_id = ?\n    `).all(...test_case_ids, prompt_card_id);\n\n    if (existingTestCases.length !== test_case_ids.length) {\n      return res.status(400).json({\n        success: false,\n        error: 'Some test cases not found or do not belong to the specified prompt card'\n      });\n    }\n\n    // Queue the test execution\n    const executionId = await testQueueManager.queueTestExecution(\n      prompt_card_id,\n      test_case_ids,\n      model || 'llama3',\n      configuration,\n      priority\n    );\n\n    return res.status(202).json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        status: 'queued',\n        prompt_card_id,\n        test_case_ids,\n        model: model || 'llama3',\n        configuration: configuration || testQueueManager['defaultConfiguration'],\n        priority\n      }\n    });\n\n  } catch (error) {\n    console.error('Error queuing test execution:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to queue test execution'\n    });\n  }\n});\n\n/**\n * Get execution progress\n * GET /api/parallel-test-execution/:executionId/progress\n */\nrouter.get('/:executionId/progress', (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    const progress = testQueueManager.getExecutionProgress(executionId);\n    \n    if (!progress) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution not found or not active'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: progress\n    });\n\n  } catch (error) {\n    console.error('Error getting execution progress:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get execution progress'\n    });\n  }\n});\n\n/**\n * Get all active executions\n * GET /api/parallel-test-execution/active\n */\nrouter.get('/active', (req, res) => {\n  try {\n    const activeExecutions = testQueueManager.getActiveExecutions();\n    \n    return res.json({\n      success: true,\n      data: activeExecutions\n    });\n\n  } catch (error) {\n    console.error('Error getting active executions:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get active executions'\n    });\n  }\n});\n\n/**\n * Cancel test execution\n * DELETE /api/parallel-test-execution/:executionId\n */\nrouter.delete('/:executionId', async (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    const cancelled = await testQueueManager.cancelExecution(executionId);\n    \n    if (!cancelled) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution not found or cannot be cancelled'\n      });\n    }\n\n    return res.json({\n      success: true,\n      message: 'Test execution cancelled successfully'\n    });\n\n  } catch (error) {\n    console.error('Error cancelling test execution:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to cancel test execution'\n    });\n  }\n});\n\n/**\n * Get queue statistics\n * GET /api/parallel-test-execution/queue/stats\n */\nrouter.get('/queue/stats', async (req, res) => {\n  try {\n    const stats = await testQueueManager.getQueueStats();\n    \n    return res.json({\n      success: true,\n      data: stats\n    });\n\n  } catch (error) {\n    console.error('Error getting queue stats:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get queue statistics'\n    });\n  }\n});\n\n/**\n * Get test execution results\n * GET /api/parallel-test-execution/:executionId/results\n */\nrouter.get('/:executionId/results', (req, res) => {\n  try {\n    const { executionId } = req.params;\n    \n    // Get results from database\n    const results = db.prepare(`\n      SELECT \n        tr.*,\n        tc.name as test_case_name,\n        pc.title as prompt_card_title\n      FROM test_results tr\n      JOIN test_cases tc ON tr.test_case_id = tc.id\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tr.execution_id LIKE ?\n      ORDER BY tr.created_at ASC\n    `).all(`${executionId}%`);\n\n    if (results.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No results found for this execution'\n      });\n    }\n\n    // Parse JSON fields and format results\n    const formattedResults = results.map(result => ({\n      ...result,\n      assertion_results: JSON.parse(result.assertion_results || '[]'),\n      passed: Boolean(result.passed)\n    }));\n\n    // Calculate summary statistics\n    const summary = {\n      total_tests: formattedResults.length,\n      passed_tests: formattedResults.filter(r => r.passed).length,\n      failed_tests: formattedResults.filter(r => !r.passed).length,\n      total_execution_time: formattedResults.reduce((sum, r) => sum + r.execution_time_ms, 0),\n      average_execution_time: formattedResults.reduce((sum, r) => sum + r.execution_time_ms, 0) / formattedResults.length\n    };\n\n    return res.json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        summary,\n        results: formattedResults\n      }\n    });\n\n  } catch (error) {\n    console.error('Error getting execution results:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get execution results'\n    });\n  }\n});\n\n/**\n * Get system resource status\n * GET /api/parallel-test-execution/system/resources\n */\nrouter.get('/system/resources', (req, res) => {\n  try {\n    const resourceManager = testQueueManager['resourceManager'];\n    const currentUsage = resourceManager.getCurrentUsage();\n    const limits = resourceManager.getLimits();\n    const reservedSummary = resourceManager.getReservedResourcesSummary();\n    const isUnderStress = resourceManager.isSystemUnderStress();\n    const optimalConcurrency = resourceManager.getOptimalConcurrency();\n\n    return res.json({\n      success: true,\n      data: {\n        current_usage: currentUsage,\n        limits,\n        reserved_resources: reservedSummary,\n        system_under_stress: isUnderStress,\n        optimal_concurrency: optimalConcurrency\n      }\n    });\n\n  } catch (error) {\n    console.error('Error getting system resources:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get system resources'\n    });\n  }\n});\n\n/**\n * Batch execute multiple prompt cards\n * POST /api/parallel-test-execution/batch\n */\nrouter.post('/batch', async (req, res) => {\n  try {\n    const { executions } = req.body;\n\n    if (!Array.isArray(executions) || executions.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'executions array is required'\n      });\n    }\n\n    const results = [];\n    const batchId = uuidv4();\n\n    for (const execution of executions) {\n      try {\n        const executionId = await testQueueManager.queueTestExecution(\n          execution.prompt_card_id,\n          execution.test_case_ids,\n          execution.model || 'llama3',\n          execution.configuration,\n          execution.priority || 0\n        );\n\n        results.push({\n          execution_id: executionId,\n          prompt_card_id: execution.prompt_card_id,\n          status: 'queued',\n          error: null\n        });\n\n      } catch (error) {\n        results.push({\n          execution_id: null,\n          prompt_card_id: execution.prompt_card_id,\n          status: 'failed',\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return res.status(202).json({\n      success: true,\n      data: {\n        batch_id: batchId,\n        total_executions: executions.length,\n        successful_queued: results.filter(r => r.status === 'queued').length,\n        failed_to_queue: results.filter(r => r.status === 'failed').length,\n        results\n      }\n    });\n\n  } catch (error) {\n    console.error('Error batch executing tests:', error);\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to batch execute tests'\n    });\n  }\n});\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', async () => {\n  console.log('Gracefully shutting down test queue manager...');\n  await testQueueManager.shutdown();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  console.log('Gracefully shutting down test queue manager...');\n  await testQueueManager.shutdown();\n  process.exit(0);\n});\n\nexport { router as parallelTestExecutionRoutes };"],"mappingscG;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAdH,MAAAC,SAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,kBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAE,YAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAG,MAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA,MAAMI,MAAM;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAG,IAAAC,SAAA,CAAAM,MAAM,GAAE;AAAC;AAAAT,cAAA,GAAAE,CAAA;AAsXLQ,OAAA,CAAAC,2BAAA,GAAAH,MAAA;AApXnB;AACA,MAAMI,gBAAgB;AAAA;AAAA,CAAAZ,cAAA,GAAAE,CAAA,OAAG,IAAIG,kBAAA,CAAAQ,gBAAgB,EAAE;AAE/C;AAAA;AAAAb,cAAA,GAAAE,CAAA;AACAU,gBAAgB,CAACE,EAAE,CAAC,iBAAiB,EAAGC,QAAQ,IAAI;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAClD;EACAe,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,QAAQ,CAAC;AAC5C,CAAC,CAAC;AAAC;AAAAf,cAAA,GAAAE,CAAA;AAEHU,gBAAgB,CAACE,EAAE,CAAC,cAAc,EAAGK,KAAK,IAAI;EAAA;EAAAnB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAC5Ce,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,KAAK,CAACC,WAAW,CAAC;AAClD,CAAC,CAAC;AAAC;AAAApB,cAAA,GAAAE,CAAA;AAEHU,gBAAgB,CAACE,EAAE,CAAC,WAAW,EAAGK,KAAK,IAAI;EAAA;EAAAnB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EACzCe,OAAO,CAACI,KAAK,CAAC,aAAa,EAAEF,KAAK,CAACC,WAAW,EAAED,KAAK,CAACE,KAAK,CAAC;AAC9D,CAAC,CAAC;AAEF;;;;AAAA;AAAArB,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACc,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EACvC,IAAI;IACF,MAAM;MACJuB,cAAc;MACdC,aAAa;MACbC,KAAK;MACLC,aAAa;MACbC,QAAQ;MAAA;MAAA,CAAA7B,cAAA,GAAA8B,CAAA,UAAG,CAAC;IAAA,CACb;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAGqB,GAAG,CAACQ,IAAI;IAEZ;IAAA;IAAA/B,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAA8B,CAAA,WAACL,cAAc;IAAA;IAAA,CAAAzB,cAAA,GAAA8B,CAAA,UAAI,CAACJ,aAAa;IAAA;IAAA,CAAA1B,cAAA,GAAA8B,CAAA,UAAI,CAACE,KAAK,CAACC,OAAO,CAACP,aAAa,CAAC;IAAA;IAAA,CAAA1B,cAAA,GAAA8B,CAAA,UAAIJ,aAAa,CAACQ,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAlC,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACpG,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAED;IACA,MAAMQ,UAAU;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAGI,YAAA,CAAAiC,EAAE,CAACC,OAAO,CAAC,iDAAiD,CAAC,CAACC,GAAG,CAAChB,cAAc,CAAC;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IACrG,IAAI,CAACoC,UAAU,EAAE;MAAA;MAAAtC,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACf,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAED;IACA,MAAMY,iBAAiB;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAGI,YAAA,CAAAiC,EAAE,CAACC,OAAO,CAAC;;qBAEpBd,aAAa,CAACiB,GAAG,CAAC,MAAM;MAAA;MAAA3C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAAA,UAAG;IAAH,CAAG,CAAC,CAAC0C,IAAI,CAAC,GAAG,CAAC;;KAEtD,CAAC,CAACC,GAAG,CAAC,GAAGnB,aAAa,EAAED,cAAc,CAAC;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IAEzC,IAAIwC,iBAAiB,CAACR,MAAM,KAAKR,aAAa,CAACQ,MAAM,EAAE;MAAA;MAAAlC,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACrD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAED;IACA,MAAMV,WAAW;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAG,MAAMU,gBAAgB,CAACkC,kBAAkB,CAC3DrB,cAAc,EACdC,aAAa;IACb;IAAA,CAAA1B,cAAA,GAAA8B,CAAA,UAAAH,KAAK;IAAA;IAAA,CAAA3B,cAAA,GAAA8B,CAAA,UAAI,QAAQ,GACjBF,aAAa,EACbC,QAAQ,CACT;IAAC;IAAA7B,cAAA,GAAAE,CAAA;IAEF,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAE;QACJC,YAAY,EAAE5B,WAAW;QACzBe,MAAM,EAAE,QAAQ;QAChBV,cAAc;QACdC,aAAa;QACbC,KAAK;QAAE;QAAA,CAAA3B,cAAA,GAAA8B,CAAA,UAAAH,KAAK;QAAA;QAAA,CAAA3B,cAAA,GAAA8B,CAAA,UAAI,QAAQ;QACxBF,aAAa;QAAE;QAAA,CAAA5B,cAAA,GAAA8B,CAAA,UAAAF,aAAa;QAAA;QAAA,CAAA5B,cAAA,GAAA8B,CAAA,UAAIlB,gBAAgB,CAAC,sBAAsB,CAAC;QACxEiB;;KAEH,CAAC;EAEJ,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACtD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,UAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,UAAG,gCAAgC;KACjF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACiC,GAAG,CAAC,wBAAwB,EAAE,CAAClB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAChD,IAAI;IACF,MAAM;MAAEkB;IAAW,CAAE;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAGqB,GAAG,CAAC4B,MAAM;IAElC,MAAMpC,QAAQ;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAGU,gBAAgB,CAACwC,oBAAoB,CAAChC,WAAW,CAAC;IAAC;IAAApB,cAAA,GAAAE,CAAA;IAEpE,IAAI,CAACa,QAAQ,EAAE;MAAA;MAAAf,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACb,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IAED,OAAOsB,GAAG,CAACY,IAAI,CAAC;MACdC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAEhC;KACP,CAAC;EAEJ,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IAC1D,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,kCAAkC;KACnF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACiC,GAAG,CAAC,SAAS,EAAE,CAAClB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EACjC,IAAI;IACF,MAAMmD,gBAAgB;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAGU,gBAAgB,CAAC0C,mBAAmB,EAAE;IAAC;IAAAtD,cAAA,GAAAE,CAAA;IAEhE,OAAOsB,GAAG,CAACY,IAAI,CAAC;MACdC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAEM;KACP,CAAC;EAEJ,CAAC,CAAC,OAAOhC,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACzD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,iCAAiC;KAClF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAAC+C,MAAM,CAAC,eAAe,EAAE,OAAOhC,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAChD,IAAI;IACF,MAAM;MAAEkB;IAAW,CAAE;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAGqB,GAAG,CAAC4B,MAAM;IAElC,MAAMK,SAAS;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAG,MAAMU,gBAAgB,CAAC6C,eAAe,CAACrC,WAAW,CAAC;IAAC;IAAApB,cAAA,GAAAE,CAAA;IAEtE,IAAI,CAACsD,SAAS,EAAE;MAAA;MAAAxD,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACd,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IAED,OAAOsB,GAAG,CAACY,IAAI,CAAC;MACdC,OAAO,EAAE,IAAI;MACba,OAAO,EAAE;KACV,CAAC;EAEJ,CAAC,CAAC,OAAO7B,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACzD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,iCAAiC;KAClF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACiC,GAAG,CAAC,cAAc,EAAE,OAAOlB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAC5C,IAAI;IACF,MAAMwD,KAAK;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAG,MAAMU,gBAAgB,CAAC+C,aAAa,EAAE;IAAC;IAAA3D,cAAA,GAAAE,CAAA;IAErD,OAAOsB,GAAG,CAACY,IAAI,CAAC;MACdC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAEW;KACP,CAAC;EAEJ,CAAC,CAAC,OAAOrC,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACnD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,gCAAgC;KACjF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACiC,GAAG,CAAC,uBAAuB,EAAE,CAAClB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAC/C,IAAI;IACF,MAAM;MAAEkB;IAAW,CAAE;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAGqB,GAAG,CAAC4B,MAAM;IAElC;IACA,MAAMS,OAAO;IAAA;IAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAGI,YAAA,CAAAiC,EAAE,CAACC,OAAO,CAAC;;;;;;;;;;KAU1B,CAAC,CAACK,GAAG,CAAC,GAAGzB,WAAW,GAAG,CAAC;IAAC;IAAApB,cAAA,GAAAE,CAAA;IAE1B,IAAI0D,OAAO,CAAC1B,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAlC,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACxB,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAED;IACA,MAAM+B,gBAAgB;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAG0D,OAAO,CAACjB,GAAG,CAACmB,MAAM,IAAK;MAAA;MAAA9D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAAA;QAC9C,GAAG4D,MAAM;QACTC,iBAAiB,EAAEC,IAAI,CAACC,KAAK;QAAC;QAAA,CAAAjE,cAAA,GAAA8B,CAAA,WAAAgC,MAAM,CAACC,iBAAiB;QAAA;QAAA,CAAA/D,cAAA,GAAA8B,CAAA,WAAI,IAAI,EAAC;QAC/DoC,MAAM,EAAEC,OAAO,CAACL,MAAM,CAACI,MAAM;OAC9B;KAAC,CAAC;IAEH;IACA,MAAME,OAAO;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAG;MACdmE,WAAW,EAAER,gBAAgB,CAAC3B,MAAM;MACpCoC,YAAY,EAAET,gBAAgB,CAACU,MAAM,CAACC,CAAC,IAAI;QAAA;QAAAxE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAAA,OAAAsE,CAAC,CAACN,MAAM;MAAN,CAAM,CAAC,CAAChC,MAAM;MAC3DuC,YAAY,EAAEZ,gBAAgB,CAACU,MAAM,CAACC,CAAC,IAAI;QAAA;QAAAxE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAAA,QAACsE,CAAC,CAACN,MAAM;MAAN,CAAM,CAAC,CAAChC,MAAM;MAC5DwC,oBAAoB,EAAEb,gBAAgB,CAACc,MAAM,CAAC,CAACC,GAAG,EAAEJ,CAAC,KAAK;QAAA;QAAAxE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAAA,OAAA0E,GAAG,GAAGJ,CAAC,CAACK,iBAAiB;MAAjB,CAAiB,EAAE,CAAC,CAAC;MACvFC,sBAAsB,EAAEjB,gBAAgB,CAACc,MAAM,CAAC,CAACC,GAAG,EAAEJ,CAAC,KAAK;QAAA;QAAAxE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAAA,OAAA0E,GAAG,GAAGJ,CAAC,CAACK,iBAAiB;MAAjB,CAAiB,EAAE,CAAC,CAAC,GAAGhB,gBAAgB,CAAC3B;KAC9G;IAAC;IAAAlC,cAAA,GAAAE,CAAA;IAEF,OAAOsB,GAAG,CAACY,IAAI,CAAC;MACdC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAE;QACJC,YAAY,EAAE5B,WAAW;QACzBgD,OAAO;QACPR,OAAO,EAAEC;;KAEZ,CAAC;EAEJ,CAAC,CAAC,OAAOxC,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACzD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,iCAAiC;KAClF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACiC,GAAG,CAAC,mBAAmB,EAAE,CAAClB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAC3C,IAAI;IACF,MAAM6E,eAAe;IAAA;IAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAGU,gBAAgB,CAAC,iBAAiB,CAAC;IAC3D,MAAMoE,YAAY;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,QAAG6E,eAAe,CAACE,eAAe,EAAE;IACtD,MAAMC,MAAM;IAAA;IAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAG6E,eAAe,CAACI,SAAS,EAAE;IAC1C,MAAMC,eAAe;IAAA;IAAA,CAAApF,cAAA,GAAAE,CAAA,QAAG6E,eAAe,CAACM,2BAA2B,EAAE;IACrE,MAAMC,aAAa;IAAA;IAAA,CAAAtF,cAAA,GAAAE,CAAA,QAAG6E,eAAe,CAACQ,mBAAmB,EAAE;IAC3D,MAAMC,kBAAkB;IAAA;IAAA,CAAAxF,cAAA,GAAAE,CAAA,QAAG6E,eAAe,CAACU,qBAAqB,EAAE;IAAC;IAAAzF,cAAA,GAAAE,CAAA;IAEnE,OAAOsB,GAAG,CAACY,IAAI,CAAC;MACdC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAE;QACJ2C,aAAa,EAAEV,YAAY;QAC3BE,MAAM;QACNS,kBAAkB,EAAEP,eAAe;QACnCQ,mBAAmB,EAAEN,aAAa;QAClCO,mBAAmB,EAAEL;;KAExB,CAAC;EAEJ,CAAC,CAAC,OAAOnE,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACxD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,gCAAgC;KACjF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;;;;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AAIAM,MAAM,CAACc,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAxB,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EACvC,IAAI;IACF,MAAM;MAAE4F;IAAU,CAAE;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAGqB,GAAG,CAACQ,IAAI;IAAC;IAAA/B,cAAA,GAAAE,CAAA;IAEhC;IAAI;IAAA,CAAAF,cAAA,GAAA8B,CAAA,YAACE,KAAK,CAACC,OAAO,CAAC6D,UAAU,CAAC;IAAA;IAAA,CAAA9F,cAAA,GAAA8B,CAAA,WAAIgE,UAAU,CAAC5D,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAlC,cAAA,GAAA8B,CAAA;MAAA9B,cAAA,GAAAE,CAAA;MACzD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdhB,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA8B,CAAA;IAAA;IAED,MAAM8B,OAAO;IAAA;IAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAG,EAAE;IAClB,MAAM6F,OAAO;IAAA;IAAA,CAAA/F,cAAA,GAAAE,CAAA,QAAG,IAAAK,MAAA,CAAAyF,EAAM,GAAE;IAAC;IAAAhG,cAAA,GAAAE,CAAA;IAEzB,KAAK,MAAM+F,SAAS,IAAIH,UAAU,EAAE;MAAA;MAAA9F,cAAA,GAAAE,CAAA;MAClC,IAAI;QACF,MAAMkB,WAAW;QAAA;QAAA,CAAApB,cAAA,GAAAE,CAAA,QAAG,MAAMU,gBAAgB,CAACkC,kBAAkB,CAC3DmD,SAAS,CAACxE,cAAc,EACxBwE,SAAS,CAACvE,aAAa;QACvB;QAAA,CAAA1B,cAAA,GAAA8B,CAAA,WAAAmE,SAAS,CAACtE,KAAK;QAAA;QAAA,CAAA3B,cAAA,GAAA8B,CAAA,WAAI,QAAQ,GAC3BmE,SAAS,CAACrE,aAAa;QACvB;QAAA,CAAA5B,cAAA,GAAA8B,CAAA,WAAAmE,SAAS,CAACpE,QAAQ;QAAA;QAAA,CAAA7B,cAAA,GAAA8B,CAAA,WAAI,CAAC,EACxB;QAAC;QAAA9B,cAAA,GAAAE,CAAA;QAEF0D,OAAO,CAACsC,IAAI,CAAC;UACXlD,YAAY,EAAE5B,WAAW;UACzBK,cAAc,EAAEwE,SAAS,CAACxE,cAAc;UACxCU,MAAM,EAAE,QAAQ;UAChBd,KAAK,EAAE;SACR,CAAC;MAEJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QAAA;QAAArB,cAAA,GAAAE,CAAA;QACd0D,OAAO,CAACsC,IAAI,CAAC;UACXlD,YAAY,EAAE,IAAI;UAClBvB,cAAc,EAAEwE,SAAS,CAACxE,cAAc;UACxCU,MAAM,EAAE,QAAQ;UAChBd,KAAK,EAAEA,KAAK,YAAY4B,KAAK;UAAA;UAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;UAAA;UAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,eAAe;SAChE,CAAC;MACJ;IACF;IAAC;IAAA9B,cAAA,GAAAE,CAAA;IAED,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,IAAI;MACbU,IAAI,EAAE;QACJoD,QAAQ,EAAEJ,OAAO;QACjBK,gBAAgB,EAAEN,UAAU,CAAC5D,MAAM;QACnCmE,iBAAiB,EAAEzC,OAAO,CAACW,MAAM,CAACC,CAAC,IAAI;UAAA;UAAAxE,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAE,CAAA;UAAA,OAAAsE,CAAC,CAACrC,MAAM,KAAK,QAAQ;QAAR,CAAQ,CAAC,CAACD,MAAM;QACpEoE,eAAe,EAAE1C,OAAO,CAACW,MAAM,CAACC,CAAC,IAAI;UAAA;UAAAxE,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAE,CAAA;UAAA,OAAAsE,CAAC,CAACrC,MAAM,KAAK,QAAQ;QAAR,CAAQ,CAAC,CAACD,MAAM;QAClE0B;;KAEH,CAAC;EAEJ,CAAC,CAAC,OAAOvC,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACde,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACrD,OAAOsB,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdhB,KAAK,EAAEA,KAAK,YAAY4B,KAAK;MAAA;MAAA,CAAAjD,cAAA,GAAA8B,CAAA,WAAGT,KAAK,CAAC6B,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAA8B,CAAA,WAAG,+BAA+B;KAChF,CAAC;EACJ;AACF,CAAC,CAAC;AAEF;AAAA;AAAA9B,cAAA,GAAAE,CAAA;AACAqG,OAAO,CAACzF,EAAE,CAAC,SAAS,EAAE,YAAW;EAAA;EAAAd,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAC/Be,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;EAAC;EAAAlB,cAAA,GAAAE,CAAA;EAC9D,MAAMU,gBAAgB,CAAC4F,QAAQ,EAAE;EAAC;EAAAxG,cAAA,GAAAE,CAAA;EAClCqG,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AAAC;AAAAzG,cAAA,GAAAE,CAAA;AAEHqG,OAAO,CAACzF,EAAE,CAAC,QAAQ,EAAE,YAAW;EAAA;EAAAd,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAC9Be,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;EAAC;EAAAlB,cAAA,GAAAE,CAAA;EAC9D,MAAMU,gBAAgB,CAAC4F,QAAQ,EAAE;EAAC;EAAAxG,cAAA,GAAAE,CAAA;EAClCqG,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC","ignoreList":[]}