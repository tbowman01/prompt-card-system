706608f9a151d99b0f7cbb8288f97384
"use strict";

/* istanbul ignore next */
function cov_31gm2g8gq() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/BlockchainAuditTrail.ts";
  var hash = "48949740d0ca6954737cb48037ec30b2dffb1320";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/BlockchainAuditTrail.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 16
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 28
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 24
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 32
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 54
        }
      },
      "15": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "16": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "17": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "18": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "19": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "20": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 34,
          column: 55
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 45
        }
      },
      "22": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "23": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "24": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "26": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 52
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "28": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 57
        }
      },
      "29": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "30": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 36
        }
      },
      "31": {
        start: {
          line: 56,
          column: 29
        },
        end: {
          line: 56,
          column: 75
        }
      },
      "32": {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 57,
          column: 44
        }
      },
      "33": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "34": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "35": {
        start: {
          line: 61,
          column: 19
        },
        end: {
          line: 61,
          column: 21
        }
      },
      "36": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 94
        }
      },
      "37": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 20
        }
      },
      "38": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 100
        }
      },
      "39": {
        start: {
          line: 66,
          column: 22
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "40": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 31
        }
      },
      "41": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 90
        }
      },
      "42": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 32
        }
      },
      "43": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 50
        }
      },
      "44": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 52
        }
      },
      "45": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 63
        }
      },
      "46": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "47": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 94
        }
      },
      "48": {
        start: {
          line: 93,
          column: 25
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "49": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 54
        }
      },
      "50": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "51": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 26
        }
      },
      "52": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "53": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 119,
          column: 25
        }
      },
      "54": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 25
        }
      },
      "55": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "56": {
        start: {
          line: 122,
          column: 38
        },
        end: {
          line: 122,
          column: 86
        }
      },
      "57": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "58": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 71
        }
      },
      "59": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 132,
          column: 23
        }
      },
      "60": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 86
        }
      },
      "61": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 143,
          column: 19
        }
      },
      "62": {
        start: {
          line: 151,
          column: 27
        },
        end: {
          line: 151,
          column: 94
        }
      },
      "63": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "64": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 86
        }
      },
      "65": {
        start: {
          line: 154,
          column: 25
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "66": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 59
        }
      },
      "67": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "68": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 26
        }
      },
      "69": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 179,
          column: 65
        }
      },
      "70": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "71": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 50
        }
      },
      "72": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "73": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 54
        }
      },
      "74": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 30
        }
      },
      "75": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "76": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 55
        }
      },
      "77": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 63
        }
      },
      "78": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 192,
          column: 84
        }
      },
      "79": {
        start: {
          line: 192,
          column: 62
        },
        end: {
          line: 192,
          column: 80
        }
      },
      "80": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 73
        }
      },
      "81": {
        start: {
          line: 194,
          column: 52
        },
        end: {
          line: 194,
          column: 71
        }
      },
      "82": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      },
      "83": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "84": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 55
        }
      },
      "85": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "86": {
        start: {
          line: 216,
          column: 30
        },
        end: {
          line: 216,
          column: 31
        }
      },
      "87": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "88": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 37
        }
      },
      "89": {
        start: {
          line: 221,
          column: 20
        },
        end: {
          line: 221,
          column: 26
        }
      },
      "90": {
        start: {
          line: 223,
          column: 20
        },
        end: {
          line: 223,
          column: 36
        }
      },
      "91": {
        start: {
          line: 224,
          column: 20
        },
        end: {
          line: 224,
          column: 26
        }
      },
      "92": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 37
        }
      },
      "93": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 26
        }
      },
      "94": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 37
        }
      },
      "95": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 26
        }
      },
      "96": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 232,
          column: 36
        }
      },
      "97": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 26
        }
      },
      "98": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 36
        }
      },
      "99": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "100": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 101
        }
      },
      "101": {
        start: {
          line: 246,
          column: 22
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "102": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "103": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 47
        }
      },
      "104": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 51
        }
      },
      "105": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 264,
          column: 11
        }
      },
      "106": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 48
        }
      },
      "107": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "108": {
        start: {
          line: 271,
          column: 21
        },
        end: {
          line: 271,
          column: 22
        }
      },
      "109": {
        start: {
          line: 272,
          column: 33
        },
        end: {
          line: 272,
          column: 46
        }
      },
      "110": {
        start: {
          line: 273,
          column: 34
        },
        end: {
          line: 273,
          column: 51
        }
      },
      "111": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "112": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 60
        }
      },
      "113": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 29
        }
      },
      "114": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "115": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 69
        }
      },
      "116": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 29
        }
      },
      "117": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "118": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 67
        }
      },
      "119": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 29
        }
      },
      "120": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 20
        }
      },
      "121": {
        start: {
          line: 296,
          column: 23
        },
        end: {
          line: 296,
          column: 25
        }
      },
      "122": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "123": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "124": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 303,
          column: 17
        }
      },
      "125": {
        start: {
          line: 302,
          column: 20
        },
        end: {
          line: 302,
          column: 39
        }
      },
      "126": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 84
        }
      },
      "127": {
        start: {
          line: 306,
          column: 37
        },
        end: {
          line: 306,
          column: 82
        }
      },
      "128": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 312,
          column: 59
        }
      },
      "129": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 68
        }
      },
      "130": {
        start: {
          line: 313,
          column: 45
        },
        end: {
          line: 313,
          column: 63
        }
      },
      "131": {
        start: {
          line: 319,
          column: 28
        },
        end: {
          line: 319,
          column: 89
        }
      },
      "132": {
        start: {
          line: 319,
          column: 62
        },
        end: {
          line: 319,
          column: 85
        }
      },
      "133": {
        start: {
          line: 320,
          column: 34
        },
        end: {
          line: 320,
          column: 57
        }
      },
      "134": {
        start: {
          line: 321,
          column: 31
        },
        end: {
          line: 321,
          column: 32
        }
      },
      "135": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "136": {
        start: {
          line: 323,
          column: 30
        },
        end: {
          line: 323,
          column: 119
        }
      },
      "137": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 67
        }
      },
      "138": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 334,
          column: 10
        }
      },
      "139": {
        start: {
          line: 338,
          column: 29
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "140": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 78
        }
      },
      "141": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 131
        }
      },
      "142": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 38
        }
      },
      "143": {
        start: {
          line: 357,
          column: 28
        },
        end: {
          line: 357,
          column: 49
        }
      },
      "144": {
        start: {
          line: 358,
          column: 26
        },
        end: {
          line: 360,
          column: 26
        }
      },
      "145": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 368,
          column: 10
        }
      },
      "146": {
        start: {
          line: 371,
          column: 28
        },
        end: {
          line: 371,
          column: 49
        }
      },
      "147": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 87
        }
      },
      "148": {
        start: {
          line: 375,
          column: 28
        },
        end: {
          line: 375,
          column: 123
        }
      },
      "149": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 87
        }
      },
      "150": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 380,
          column: 22
        }
      },
      "151": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 22
        }
      },
      "152": {
        start: {
          line: 381,
          column: 21
        },
        end: {
          line: 381,
          column: 70
        }
      },
      "153": {
        start: {
          line: 381,
          column: 39
        },
        end: {
          line: 381,
          column: 69
        }
      },
      "154": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "155": {
        start: {
          line: 383,
          column: 30
        },
        end: {
          line: 383,
          column: 32
        }
      },
      "156": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "157": {
        start: {
          line: 384,
          column: 25
        },
        end: {
          line: 384,
          column: 26
        }
      },
      "158": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 391,
          column: 17
        }
      },
      "159": {
        start: {
          line: 386,
          column: 37
        },
        end: {
          line: 386,
          column: 62
        }
      },
      "160": {
        start: {
          line: 387,
          column: 20
        },
        end: {
          line: 387,
          column: 105
        }
      },
      "161": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 46
        }
      },
      "162": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 31
        }
      },
      "163": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 25
        }
      },
      "164": {
        start: {
          line: 399,
          column: 27
        },
        end: {
          line: 399,
          column: 46
        }
      },
      "165": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "166": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 414,
          column: 13
        }
      },
      "167": {
        start: {
          line: 403,
          column: 20
        },
        end: {
          line: 404,
          column: 37
        }
      },
      "168": {
        start: {
          line: 404,
          column: 24
        },
        end: {
          line: 404,
          column: 37
        }
      },
      "169": {
        start: {
          line: 405,
          column: 20
        },
        end: {
          line: 405,
          column: 26
        }
      },
      "170": {
        start: {
          line: 407,
          column: 20
        },
        end: {
          line: 408,
          column: 37
        }
      },
      "171": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 408,
          column: 37
        }
      },
      "172": {
        start: {
          line: 409,
          column: 20
        },
        end: {
          line: 409,
          column: 26
        }
      },
      "173": {
        start: {
          line: 411,
          column: 20
        },
        end: {
          line: 412,
          column: 37
        }
      },
      "174": {
        start: {
          line: 412,
          column: 24
        },
        end: {
          line: 412,
          column: 37
        }
      },
      "175": {
        start: {
          line: 413,
          column: 20
        },
        end: {
          line: 413,
          column: 26
        }
      },
      "176": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 20
        }
      },
      "177": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "178": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 430,
          column: 13
        }
      },
      "179": {
        start: {
          line: 422,
          column: 20
        },
        end: {
          line: 422,
          column: 92
        }
      },
      "180": {
        start: {
          line: 423,
          column: 20
        },
        end: {
          line: 423,
          column: 26
        }
      },
      "181": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 426,
          column: 26
        }
      },
      "182": {
        start: {
          line: 428,
          column: 20
        },
        end: {
          line: 428,
          column: 65
        }
      },
      "183": {
        start: {
          line: 429,
          column: 20
        },
        end: {
          line: 429,
          column: 26
        }
      },
      "184": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 162
        }
      },
      "185": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 155
        }
      },
      "186": {
        start: {
          line: 439,
          column: 25
        },
        end: {
          line: 439,
          column: 65
        }
      },
      "187": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 441,
          column: 19
        }
      },
      "188": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 19
        }
      },
      "189": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 30
        }
      },
      "190": {
        start: {
          line: 443,
          column: 28
        },
        end: {
          line: 445,
          column: 58
        }
      },
      "191": {
        start: {
          line: 445,
          column: 36
        },
        end: {
          line: 445,
          column: 54
        }
      },
      "192": {
        start: {
          line: 446,
          column: 28
        },
        end: {
          line: 446,
          column: 86
        }
      },
      "193": {
        start: {
          line: 446,
          column: 65
        },
        end: {
          line: 446,
          column: 82
        }
      },
      "194": {
        start: {
          line: 447,
          column: 26
        },
        end: {
          line: 449,
          column: 56
        }
      },
      "195": {
        start: {
          line: 448,
          column: 28
        },
        end: {
          line: 448,
          column: 47
        }
      },
      "196": {
        start: {
          line: 449,
          column: 35
        },
        end: {
          line: 449,
          column: 52
        }
      },
      "197": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 465,
          column: 9
        }
      },
      "198": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 457,
          column: 13
        }
      },
      "199": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 453,
          column: 43
        }
      },
      "200": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 45
        }
      },
      "201": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 464,
          column: 15
        }
      },
      "202": {
        start: {
          line: 468,
          column: 0
        },
        end: {
          line: 468,
          column: 52
        }
      },
      "203": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 33
        }
      },
      "204": {
        start: {
          line: 477,
          column: 27
        },
        end: {
          line: 477,
          column: 47
        }
      },
      "205": {
        start: {
          line: 478,
          column: 21
        },
        end: {
          line: 478,
          column: 91
        }
      },
      "206": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 37
        }
      },
      "207": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 20
        }
      },
      "208": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 38
        }
      },
      "209": {
        start: {
          line: 486,
          column: 27
        },
        end: {
          line: 486,
          column: 47
        }
      },
      "210": {
        start: {
          line: 487,
          column: 31
        },
        end: {
          line: 487,
          column: 101
        }
      },
      "211": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 488,
          column: 39
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 34
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 32
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 22
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 74
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 39
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 87
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 150
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 51
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 178
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 192,
            column: 46
          },
          end: {
            line: 192,
            column: 47
          }
        },
        loc: {
          start: {
            line: 192,
            column: 62
          },
          end: {
            line: 192,
            column: 80
          }
        },
        line: 192
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 194,
            column: 47
          },
          end: {
            line: 194,
            column: 48
          }
        },
        loc: {
          start: {
            line: 194,
            column: 52
          },
          end: {
            line: 194,
            column: 71
          }
        },
        line: 194
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 41
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 214
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 66
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 245
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 27
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 270
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 40
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 295
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 306,
            column: 27
          },
          end: {
            line: 306,
            column: 28
          }
        },
        loc: {
          start: {
            line: 306,
            column: 37
          },
          end: {
            line: 306,
            column: 82
          }
        },
        line: 306
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 35
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 311
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 313,
            column: 29
          },
          end: {
            line: 313,
            column: 30
          }
        },
        loc: {
          start: {
            line: 313,
            column: 45
          },
          end: {
            line: 313,
            column: 63
          }
        },
        line: 313
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 25
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 318
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 319,
            column: 46
          },
          end: {
            line: 319,
            column: 47
          }
        },
        loc: {
          start: {
            line: 319,
            column: 62
          },
          end: {
            line: 319,
            column: 85
          }
        },
        line: 319
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 29
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 337
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 27
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 356
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 370,
            column: 5
          }
        },
        loc: {
          start: {
            line: 370,
            column: 30
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 370
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 80
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 374
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 30
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 378
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 381,
            column: 30
          },
          end: {
            line: 381,
            column: 31
          }
        },
        loc: {
          start: {
            line: 381,
            column: 39
          },
          end: {
            line: 381,
            column: 69
          }
        },
        line: 381
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 48
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 397
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 50
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 418
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 433,
            column: 4
          },
          end: {
            line: 433,
            column: 5
          }
        },
        loc: {
          start: {
            line: 433,
            column: 31
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 433
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 46
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 438
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 445,
            column: 20
          },
          end: {
            line: 445,
            column: 21
          }
        },
        loc: {
          start: {
            line: 445,
            column: 36
          },
          end: {
            line: 445,
            column: 54
          }
        },
        line: 445
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 446,
            column: 50
          },
          end: {
            line: 446,
            column: 51
          }
        },
        loc: {
          start: {
            line: 446,
            column: 65
          },
          end: {
            line: 446,
            column: 82
          }
        },
        line: 446
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 448,
            column: 20
          },
          end: {
            line: 448,
            column: 21
          }
        },
        loc: {
          start: {
            line: 448,
            column: 28
          },
          end: {
            line: 448,
            column: 47
          }
        },
        line: 448
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 449,
            column: 20
          },
          end: {
            line: 449,
            column: 21
          }
        },
        loc: {
          start: {
            line: 449,
            column: 35
          },
          end: {
            line: 449,
            column: 52
          }
        },
        line: 449
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 473,
            column: 4
          },
          end: {
            line: 473,
            column: 5
          }
        },
        loc: {
          start: {
            line: 473,
            column: 18
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 473
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 27
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 476
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 25
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 482
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 23
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 485
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 56,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 43
          },
          end: {
            line: 56,
            column: 46
          }
        }, {
          start: {
            line: 56,
            column: 49
          },
          end: {
            line: 56,
            column: 75
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 119,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 119,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 65
          },
          end: {
            line: 150,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 150,
            column: 84
          },
          end: {
            line: 150,
            column: 85
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "11": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "12": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "13": {
        loc: {
          start: {
            line: 191,
            column: 27
          },
          end: {
            line: 191,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 27
          },
          end: {
            line: 191,
            column: 57
          }
        }, {
          start: {
            line: 191,
            column: 61
          },
          end: {
            line: 191,
            column: 63
          }
        }],
        line: 191
      },
      "14": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 26
          }
        }, {
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 224,
            column: 26
          }
        }, {
          start: {
            line: 225,
            column: 16
          },
          end: {
            line: 227,
            column: 26
          }
        }, {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 26
          }
        }, {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 233,
            column: 26
          }
        }, {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 235,
            column: 36
          }
        }],
        line: 218
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "16": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "17": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "18": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "19": {
        loc: {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "20": {
        loc: {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 303,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 303,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "21": {
        loc: {
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 301,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 299,
            column: 45
          }
        }, {
          start: {
            line: 300,
            column: 21
          },
          end: {
            line: 300,
            column: 40
          }
        }, {
          start: {
            line: 300,
            column: 44
          },
          end: {
            line: 300,
            column: 76
          }
        }, {
          start: {
            line: 301,
            column: 21
          },
          end: {
            line: 301,
            column: 31
          }
        }, {
          start: {
            line: 301,
            column: 35
          },
          end: {
            line: 301,
            column: 71
          }
        }],
        line: 299
      },
      "22": {
        loc: {
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 312,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 312,
            column: 53
          }
        }, {
          start: {
            line: 312,
            column: 57
          },
          end: {
            line: 312,
            column: 59
          }
        }],
        line: 312
      },
      "23": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "24": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 380,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 380,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "25": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 391,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 391,
            column: 17
          }
        }, {
          start: {
            line: 389,
            column: 21
          },
          end: {
            line: 391,
            column: 17
          }
        }],
        line: 385
      },
      "26": {
        loc: {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 414,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 402,
            column: 16
          },
          end: {
            line: 405,
            column: 26
          }
        }, {
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 409,
            column: 26
          }
        }, {
          start: {
            line: 410,
            column: 16
          },
          end: {
            line: 413,
            column: 26
          }
        }],
        line: 401
      },
      "27": {
        loc: {
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 404,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 404,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "28": {
        loc: {
          start: {
            line: 407,
            column: 20
          },
          end: {
            line: 408,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 20
          },
          end: {
            line: 408,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "29": {
        loc: {
          start: {
            line: 411,
            column: 20
          },
          end: {
            line: 412,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 20
          },
          end: {
            line: 412,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "30": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 430,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 421,
            column: 16
          },
          end: {
            line: 423,
            column: 26
          }
        }, {
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 426,
            column: 26
          }
        }, {
          start: {
            line: 427,
            column: 16
          },
          end: {
            line: 429,
            column: 26
          }
        }],
        line: 420
      },
      "31": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 441,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 441,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "32": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 440,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 440,
            column: 21
          }
        }, {
          start: {
            line: 440,
            column: 25
          },
          end: {
            line: 440,
            column: 53
          }
        }],
        line: 440
      },
      "33": {
        loc: {
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 465,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 465,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "34": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 451,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 451,
            column: 43
          }
        }, {
          start: {
            line: 451,
            column: 47
          },
          end: {
            line: 451,
            column: 99
          }
        }],
        line: 451
      },
      "35": {
        loc: {
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        }, {
          start: {
            line: 455,
            column: 17
          },
          end: {
            line: 457,
            column: 13
          }
        }],
        line: 452
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/BlockchainAuditTrail.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/BlockchainAuditTrail.ts"],
      sourcesContent: ["import crypto from 'crypto';\nimport { EventEmitter } from 'events';\n\nexport interface AuditEvent {\n  eventType: string;\n  userId: string;\n  data: any;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface Block {\n  index: number;\n  timestamp: Date;\n  data: AuditEvent[];\n  previousHash: string;\n  hash: string;\n  nonce: number;\n  merkleRoot: string;\n}\n\nexport interface SmartContract {\n  id: string;\n  name: string;\n  code: string;\n  conditions: Record<string, any>;\n  actions: string[];\n  createdAt: Date;\n  createdBy: string;\n  isActive: boolean;\n}\n\nexport interface GovernanceProposal {\n  id: string;\n  title: string;\n  description: string;\n  proposer: string;\n  votingPeriod: { start: Date; end: Date };\n  votes: { userId: string; vote: 'yes' | 'no' | 'abstain'; weight: number }[];\n  status: 'pending' | 'active' | 'passed' | 'rejected' | 'executed';\n  requiredQuorum: number;\n  executionTx?: string;\n}\n\nexport interface QualityToken {\n  id: string;\n  userId: string;\n  amount: number;\n  earnedFor: string;\n  timestamp: Date;\n  blockHash: string;\n}\n\nexport interface DecentralizedStorage {\n  store(key: string, data: any): Promise<string>;\n  retrieve(hash: string): Promise<any>;\n  verify(hash: string, data: any): boolean;\n}\n\nexport class BlockchainAuditTrail extends EventEmitter {\n  private chain: Block[];\n  private pendingEvents: AuditEvent[];\n  private smartContracts: Map<string, SmartContract>;\n  private governanceProposals: Map<string, GovernanceProposal>;\n  private qualityTokens: Map<string, QualityToken[]>;\n  private decentralizedStorage: DecentralizedStorage;\n  private static instance: BlockchainAuditTrail;\n  private readonly difficulty: number = 4;\n  private readonly blockSize: number = 100;\n\n  private constructor() {\n    super();\n    this.chain = [];\n    this.pendingEvents = [];\n    this.smartContracts = new Map();\n    this.governanceProposals = new Map();\n    this.qualityTokens = new Map();\n    this.decentralizedStorage = new IPFSStorage();\n    this.initializeGenesisBlock();\n    this.setupAutomaticGovernance();\n  }\n\n  public static getInstance(): BlockchainAuditTrail {\n    if (!BlockchainAuditTrail.instance) {\n      BlockchainAuditTrail.instance = new BlockchainAuditTrail();\n    }\n    return BlockchainAuditTrail.instance;\n  }\n\n  /**\n   * Record an audit event to the blockchain\n   */\n  public async recordAuditEvent(event: AuditEvent): Promise<string> {\n    // Add cryptographic signature\n    const signedEvent = await this.signEvent(event);\n    \n    // Add to pending events\n    this.pendingEvents.push(signedEvent);\n    \n    // Check if we should mine a new block\n    if (this.pendingEvents.length >= this.blockSize) {\n      await this.mineBlock();\n    }\n    \n    // Execute relevant smart contracts\n    await this.executeSmartContracts(signedEvent);\n    \n    // Emit event for real-time monitoring\n    this.emit('auditEventRecorded', signedEvent);\n    \n    return this.calculateEventHash(signedEvent);\n  }\n\n  /**\n   * Mine a new block with pending events\n   */\n  public async mineBlock(): Promise<Block> {\n    if (this.pendingEvents.length === 0) {\n      throw new Error('No pending events to mine');\n    }\n\n    const index = this.chain.length;\n    const timestamp = new Date();\n    const previousHash = index === 0 ? '0' : this.chain[index - 1].hash;\n    const data = [...this.pendingEvents];\n    const merkleRoot = this.calculateMerkleRoot(data);\n    \n    // Proof of Work mining\n    let nonce = 0;\n    let hash = '';\n    \n    do {\n      nonce++;\n      hash = this.calculateBlockHash(index, timestamp, data, previousHash, nonce, merkleRoot);\n    } while (hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0'));\n\n    const block: Block = {\n      index,\n      timestamp,\n      data,\n      previousHash,\n      hash,\n      nonce,\n      merkleRoot\n    };\n\n    // Add block to chain\n    this.chain.push(block);\n    \n    // Store block in decentralized storage\n    const storageHash = await this.decentralizedStorage.store(`block_${index}`, block);\n    \n    // Clear pending events\n    this.pendingEvents = [];\n    \n    // Distribute quality tokens for contributions\n    await this.distributeQualityTokens(block);\n    \n    // Emit block mined event\n    this.emit('blockMined', block, storageHash);\n    \n    console.log(`Block ${index} mined with hash: ${hash}`);\n    \n    return block;\n  }\n\n  /**\n   * Create and deploy a smart contract\n   */\n  public async createSmartContract(\n    name: string,\n    code: string,\n    conditions: Record<string, any>,\n    actions: string[],\n    createdBy: string\n  ): Promise<string> {\n    const contractId = `contract_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const contract: SmartContract = {\n      id: contractId,\n      name,\n      code,\n      conditions,\n      actions,\n      createdAt: new Date(),\n      createdBy,\n      isActive: true\n    };\n\n    this.smartContracts.set(contractId, contract);\n    \n    // Record contract creation in audit trail\n    await this.recordAuditEvent({\n      eventType: 'smart_contract_created',\n      userId: createdBy,\n      data: { contractId, name, conditions, actions },\n      timestamp: new Date()\n    });\n\n    return contractId;\n  }\n\n  /**\n   * Execute smart contracts based on events\n   */\n  private async executeSmartContracts(event: AuditEvent): Promise<void> {\n    for (const [contractId, contract] of this.smartContracts) {\n      if (!contract.isActive) continue;\n\n      try {\n        // Check if conditions are met\n        const shouldExecute = this.evaluateContractConditions(contract, event);\n        \n        if (shouldExecute) {\n          // Execute contract actions\n          await this.executeContractActions(contract, event);\n          \n          // Record execution\n          await this.recordAuditEvent({\n            eventType: 'smart_contract_executed',\n            userId: 'system',\n            data: { contractId, triggeredBy: event },\n            timestamp: new Date()\n          });\n        }\n      } catch (error) {\n        console.error(`Error executing smart contract ${contractId}:`, error);\n        \n        // Record error\n        await this.recordAuditEvent({\n          eventType: 'smart_contract_error',\n          userId: 'system',\n          data: { contractId, error: error.message },\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  /**\n   * Create a governance proposal\n   */\n  public async createGovernanceProposal(\n    title: string,\n    description: string,\n    proposer: string,\n    votingPeriodDays: number = 7\n  ): Promise<string> {\n    const proposalId = `proposal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const now = new Date();\n    const end = new Date(now.getTime() + (votingPeriodDays * 24 * 60 * 60 * 1000));\n    \n    const proposal: GovernanceProposal = {\n      id: proposalId,\n      title,\n      description,\n      proposer,\n      votingPeriod: { start: now, end },\n      votes: [],\n      status: 'active',\n      requiredQuorum: 0.5, // 50% of token holders\n      executionTx: undefined\n    };\n\n    this.governanceProposals.set(proposalId, proposal);\n    \n    // Record proposal creation\n    await this.recordAuditEvent({\n      eventType: 'governance_proposal_created',\n      userId: proposer,\n      data: proposal,\n      timestamp: new Date()\n    });\n\n    return proposalId;\n  }\n\n  /**\n   * Vote on a governance proposal\n   */\n  public async voteOnProposal(\n    proposalId: string,\n    userId: string,\n    vote: 'yes' | 'no' | 'abstain'\n  ): Promise<void> {\n    const proposal = this.governanceProposals.get(proposalId);\n    if (!proposal) {\n      throw new Error('Proposal not found');\n    }\n\n    if (proposal.status !== 'active') {\n      throw new Error('Proposal is not active');\n    }\n\n    const now = new Date();\n    if (now > proposal.votingPeriod.end) {\n      throw new Error('Voting period has ended');\n    }\n\n    // Get user's token weight\n    const userTokens = this.qualityTokens.get(userId) || [];\n    const tokenWeight = userTokens.reduce((sum, token) => sum + token.amount, 0);\n\n    // Remove previous vote if exists\n    proposal.votes = proposal.votes.filter(v => v.userId !== userId);\n    \n    // Add new vote\n    proposal.votes.push({\n      userId,\n      vote,\n      weight: tokenWeight\n    });\n\n    // Record vote\n    await this.recordAuditEvent({\n      eventType: 'governance_vote_cast',\n      userId,\n      data: { proposalId, vote, weight: tokenWeight },\n      timestamp: new Date()\n    });\n\n    // Check if proposal should be resolved\n    await this.checkProposalResolution(proposalId);\n  }\n\n  /**\n   * Distribute quality tokens for contributions\n   */\n  private async distributeQualityTokens(block: Block): Promise<void> {\n    for (const event of block.data) {\n      let tokenAmount = 0;\n      \n      // Calculate token rewards based on event type\n      switch (event.eventType) {\n        case 'prompt_created':\n          tokenAmount = 10;\n          break;\n        case 'test_execution_success':\n          tokenAmount = 5;\n          break;\n        case 'bug_report':\n          tokenAmount = 15;\n          break;\n        case 'quality_improvement':\n          tokenAmount = 20;\n          break;\n        case 'peer_review':\n          tokenAmount = 8;\n          break;\n        default:\n          tokenAmount = 1;\n      }\n\n      if (tokenAmount > 0) {\n        await this.mintQualityTokens(event.userId, tokenAmount, event.eventType, block.hash);\n      }\n    }\n  }\n\n  /**\n   * Mint quality tokens for a user\n   */\n  public async mintQualityTokens(\n    userId: string,\n    amount: number,\n    earnedFor: string,\n    blockHash: string\n  ): Promise<void> {\n    const token: QualityToken = {\n      id: `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      userId,\n      amount,\n      earnedFor,\n      timestamp: new Date(),\n      blockHash\n    };\n\n    if (!this.qualityTokens.has(userId)) {\n      this.qualityTokens.set(userId, []);\n    }\n    \n    this.qualityTokens.get(userId)!.push(token);\n\n    // Record token minting\n    await this.recordAuditEvent({\n      eventType: 'quality_tokens_minted',\n      userId,\n      data: token,\n      timestamp: new Date()\n    });\n\n    this.emit('qualityTokensMinted', token);\n  }\n\n  /**\n   * Verify blockchain integrity\n   */\n  public verifyChainIntegrity(): boolean {\n    for (let i = 1; i < this.chain.length; i++) {\n      const currentBlock = this.chain[i];\n      const previousBlock = this.chain[i - 1];\n\n      // Verify block hash\n      if (currentBlock.hash !== this.calculateBlockHash(\n        currentBlock.index,\n        currentBlock.timestamp,\n        currentBlock.data,\n        currentBlock.previousHash,\n        currentBlock.nonce,\n        currentBlock.merkleRoot\n      )) {\n        console.error(`Invalid hash at block ${i}`);\n        return false;\n      }\n\n      // Verify previous hash link\n      if (currentBlock.previousHash !== previousBlock.hash) {\n        console.error(`Invalid previous hash at block ${i}`);\n        return false;\n      }\n\n      // Verify merkle root\n      if (currentBlock.merkleRoot !== this.calculateMerkleRoot(currentBlock.data)) {\n        console.error(`Invalid merkle root at block ${i}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get audit trail for specific entity\n   */\n  public getAuditTrail(entityId: string, entityType?: string): AuditEvent[] {\n    const events: AuditEvent[] = [];\n    \n    for (const block of this.chain) {\n      for (const event of block.data) {\n        if (event.userId === entityId || \n            (event.data.entityId && event.data.entityId === entityId) ||\n            (entityType && event.data.entityType === entityType)) {\n          events.push(event);\n        }\n      }\n    }\n\n    return events.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  /**\n   * Get user's quality token balance\n   */\n  public getQualityTokenBalance(userId: string): number {\n    const tokens = this.qualityTokens.get(userId) || [];\n    return tokens.reduce((sum, token) => sum + token.amount, 0);\n  }\n\n  /**\n   * Get blockchain statistics\n   */\n  public getBlockchainStats(): {\n    totalBlocks: number;\n    totalEvents: number;\n    totalContracts: number;\n    totalProposals: number;\n    totalTokenHolders: number;\n    averageBlockTime: number;\n    chainIntegrity: boolean;\n  } {\n    const totalEvents = this.chain.reduce((sum, block) => sum + block.data.length, 0);\n    const totalTokenHolders = this.qualityTokens.size;\n    \n    let averageBlockTime = 0;\n    if (this.chain.length > 1) {\n      const totalTime = this.chain[this.chain.length - 1].timestamp.getTime() - this.chain[0].timestamp.getTime();\n      averageBlockTime = totalTime / (this.chain.length - 1);\n    }\n\n    return {\n      totalBlocks: this.chain.length,\n      totalEvents,\n      totalContracts: this.smartContracts.size,\n      totalProposals: this.governanceProposals.size,\n      totalTokenHolders,\n      averageBlockTime,\n      chainIntegrity: this.verifyChainIntegrity()\n    };\n  }\n\n  // Private helper methods\n\n  private initializeGenesisBlock(): void {\n    const genesisBlock: Block = {\n      index: 0,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      data: [{\n        eventType: 'genesis',\n        userId: 'system',\n        data: { message: 'Blockchain audit trail initialized' },\n        timestamp: new Date('2024-01-01T00:00:00Z')\n      }],\n      previousHash: '0',\n      hash: '',\n      nonce: 0,\n      merkleRoot: ''\n    };\n\n    genesisBlock.merkleRoot = this.calculateMerkleRoot(genesisBlock.data);\n    genesisBlock.hash = this.calculateBlockHash(\n      0,\n      genesisBlock.timestamp,\n      genesisBlock.data,\n      '0',\n      0,\n      genesisBlock.merkleRoot\n    );\n\n    this.chain.push(genesisBlock);\n  }\n\n  private async signEvent(event: AuditEvent): Promise<AuditEvent> {\n    const eventString = JSON.stringify(event);\n    const signature = crypto.createHmac('sha256', 'audit_secret')\n                           .update(eventString)\n                           .digest('hex');\n    \n    return {\n      ...event,\n      metadata: {\n        ...event.metadata,\n        signature,\n        hash: this.calculateEventHash(event)\n      }\n    };\n  }\n\n  private calculateEventHash(event: AuditEvent): string {\n    const eventString = JSON.stringify(event);\n    return crypto.createHash('sha256').update(eventString).digest('hex');\n  }\n\n  private calculateBlockHash(\n    index: number,\n    timestamp: Date,\n    data: AuditEvent[],\n    previousHash: string,\n    nonce: number,\n    merkleRoot: string\n  ): string {\n    const blockString = `${index}${timestamp.toISOString()}${JSON.stringify(data)}${previousHash}${nonce}${merkleRoot}`;\n    return crypto.createHash('sha256').update(blockString).digest('hex');\n  }\n\n  private calculateMerkleRoot(data: AuditEvent[]): string {\n    if (data.length === 0) return '';\n    \n    let hashes = data.map(event => this.calculateEventHash(event));\n    \n    while (hashes.length > 1) {\n      const newHashes: string[] = [];\n      \n      for (let i = 0; i < hashes.length; i += 2) {\n        if (i + 1 < hashes.length) {\n          const combined = hashes[i] + hashes[i + 1];\n          newHashes.push(crypto.createHash('sha256').update(combined).digest('hex'));\n        } else {\n          newHashes.push(hashes[i]);\n        }\n      }\n      \n      hashes = newHashes;\n    }\n    \n    return hashes[0];\n  }\n\n  private evaluateContractConditions(contract: SmartContract, event: AuditEvent): boolean {\n    // Simple condition evaluation - could be enhanced with a proper expression evaluator\n    const conditions = contract.conditions;\n    \n    for (const [key, value] of Object.entries(conditions)) {\n      switch (key) {\n        case 'eventType':\n          if (event.eventType !== value) return false;\n          break;\n        case 'userId':\n          if (event.userId !== value) return false;\n          break;\n        case 'dataContains':\n          if (!JSON.stringify(event.data).includes(value)) return false;\n          break;\n      }\n    }\n    \n    return true;\n  }\n\n  private async executeContractActions(contract: SmartContract, event: AuditEvent): Promise<void> {\n    for (const action of contract.actions) {\n      switch (action) {\n        case 'mint_tokens':\n          await this.mintQualityTokens(event.userId, 5, 'contract_execution', '');\n          break;\n        case 'create_proposal':\n          // Auto-create governance proposal based on contract logic\n          break;\n        case 'alert_admin':\n          this.emit('adminAlert', { contract, event });\n          break;\n      }\n    }\n  }\n\n  private setupAutomaticGovernance(): void {\n    // Set up default governance contracts\n    this.createSmartContract(\n      'Quality Assurance',\n      'if test_success_rate < 0.8 then alert_admin',\n      { eventType: 'batch_execution' },\n      ['alert_admin'],\n      'system'\n    );\n    \n    this.createSmartContract(\n      'Contribution Rewards',\n      'if prompt_created then mint_tokens',\n      { eventType: 'prompt_created' },\n      ['mint_tokens'],\n      'system'\n    );\n  }\n\n  private async checkProposalResolution(proposalId: string): Promise<void> {\n    const proposal = this.governanceProposals.get(proposalId);\n    if (!proposal || proposal.status !== 'active') return;\n\n    const now = new Date();\n    const totalWeight = Array.from(this.qualityTokens.values())\n      .flat()\n      .reduce((sum, token) => sum + token.amount, 0);\n\n    const votedWeight = proposal.votes.reduce((sum, vote) => sum + vote.weight, 0);\n    const yesWeight = proposal.votes\n      .filter(vote => vote.vote === 'yes')\n      .reduce((sum, vote) => sum + vote.weight, 0);\n\n    // Check if quorum is met and voting period ended\n    if (now > proposal.votingPeriod.end || votedWeight >= totalWeight * proposal.requiredQuorum) {\n      if (yesWeight > votedWeight * 0.5) {\n        proposal.status = 'passed';\n      } else {\n        proposal.status = 'rejected';\n      }\n\n      // Record resolution\n      await this.recordAuditEvent({\n        eventType: 'governance_proposal_resolved',\n        userId: 'system',\n        data: { proposalId, status: proposal.status, votes: proposal.votes },\n        timestamp: new Date()\n      });\n    }\n  }\n}\n\n/**\n * IPFS-like decentralized storage implementation\n */\nclass IPFSStorage implements DecentralizedStorage {\n  private storage: Map<string, any>;\n\n  constructor() {\n    this.storage = new Map();\n  }\n\n  async store(key: string, data: any): Promise<string> {\n    const serialized = JSON.stringify(data);\n    const hash = crypto.createHash('sha256').update(serialized).digest('hex');\n    this.storage.set(hash, data);\n    return hash;\n  }\n\n  async retrieve(hash: string): Promise<any> {\n    return this.storage.get(hash);\n  }\n\n  verify(hash: string, data: any): boolean {\n    const serialized = JSON.stringify(data);\n    const calculatedHash = crypto.createHash('sha256').update(serialized).digest('hex');\n    return calculatedHash === hash;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "48949740d0ca6954737cb48037ec30b2dffb1320"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_31gm2g8gq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_31gm2g8gq();
var __importDefault =
/* istanbul ignore next */
(cov_31gm2g8gq().s[0]++,
/* istanbul ignore next */
(cov_31gm2g8gq().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_31gm2g8gq().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_31gm2g8gq().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_31gm2g8gq().f[0]++;
  cov_31gm2g8gq().s[1]++;
  return /* istanbul ignore next */(cov_31gm2g8gq().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_31gm2g8gq().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_31gm2g8gq().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_31gm2g8gq().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_31gm2g8gq().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_31gm2g8gq().s[3]++;
exports.BlockchainAuditTrail = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_31gm2g8gq().s[4]++, __importDefault(require("crypto")));
const events_1 =
/* istanbul ignore next */
(cov_31gm2g8gq().s[5]++, require("events"));
class BlockchainAuditTrail extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[1]++;
    cov_31gm2g8gq().s[6]++;
    super();
    /* istanbul ignore next */
    cov_31gm2g8gq().s[7]++;
    this.difficulty = 4;
    /* istanbul ignore next */
    cov_31gm2g8gq().s[8]++;
    this.blockSize = 100;
    /* istanbul ignore next */
    cov_31gm2g8gq().s[9]++;
    this.chain = [];
    /* istanbul ignore next */
    cov_31gm2g8gq().s[10]++;
    this.pendingEvents = [];
    /* istanbul ignore next */
    cov_31gm2g8gq().s[11]++;
    this.smartContracts = new Map();
    /* istanbul ignore next */
    cov_31gm2g8gq().s[12]++;
    this.governanceProposals = new Map();
    /* istanbul ignore next */
    cov_31gm2g8gq().s[13]++;
    this.qualityTokens = new Map();
    /* istanbul ignore next */
    cov_31gm2g8gq().s[14]++;
    this.decentralizedStorage = new IPFSStorage();
    /* istanbul ignore next */
    cov_31gm2g8gq().s[15]++;
    this.initializeGenesisBlock();
    /* istanbul ignore next */
    cov_31gm2g8gq().s[16]++;
    this.setupAutomaticGovernance();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[2]++;
    cov_31gm2g8gq().s[17]++;
    if (!BlockchainAuditTrail.instance) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[3][0]++;
      cov_31gm2g8gq().s[18]++;
      BlockchainAuditTrail.instance = new BlockchainAuditTrail();
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[3][1]++;
    }
    cov_31gm2g8gq().s[19]++;
    return BlockchainAuditTrail.instance;
  }
  /**
   * Record an audit event to the blockchain
   */
  async recordAuditEvent(event) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[3]++;
    // Add cryptographic signature
    const signedEvent =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[20]++, await this.signEvent(event));
    // Add to pending events
    /* istanbul ignore next */
    cov_31gm2g8gq().s[21]++;
    this.pendingEvents.push(signedEvent);
    // Check if we should mine a new block
    /* istanbul ignore next */
    cov_31gm2g8gq().s[22]++;
    if (this.pendingEvents.length >= this.blockSize) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[4][0]++;
      cov_31gm2g8gq().s[23]++;
      await this.mineBlock();
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[4][1]++;
    }
    // Execute relevant smart contracts
    cov_31gm2g8gq().s[24]++;
    await this.executeSmartContracts(signedEvent);
    // Emit event for real-time monitoring
    /* istanbul ignore next */
    cov_31gm2g8gq().s[25]++;
    this.emit('auditEventRecorded', signedEvent);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[26]++;
    return this.calculateEventHash(signedEvent);
  }
  /**
   * Mine a new block with pending events
   */
  async mineBlock() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[4]++;
    cov_31gm2g8gq().s[27]++;
    if (this.pendingEvents.length === 0) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[5][0]++;
      cov_31gm2g8gq().s[28]++;
      throw new Error('No pending events to mine');
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[5][1]++;
    }
    const index =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[29]++, this.chain.length);
    const timestamp =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[30]++, new Date());
    const previousHash =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[31]++, index === 0 ?
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[6][0]++, '0') :
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[6][1]++, this.chain[index - 1].hash));
    const data =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[32]++, [...this.pendingEvents]);
    const merkleRoot =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[33]++, this.calculateMerkleRoot(data));
    // Proof of Work mining
    let nonce =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[34]++, 0);
    let hash =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[35]++, '');
    /* istanbul ignore next */
    cov_31gm2g8gq().s[36]++;
    do {
      /* istanbul ignore next */
      cov_31gm2g8gq().s[37]++;
      nonce++;
      /* istanbul ignore next */
      cov_31gm2g8gq().s[38]++;
      hash = this.calculateBlockHash(index, timestamp, data, previousHash, nonce, merkleRoot);
    } while (hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0'));
    const block =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[39]++, {
      index,
      timestamp,
      data,
      previousHash,
      hash,
      nonce,
      merkleRoot
    });
    // Add block to chain
    /* istanbul ignore next */
    cov_31gm2g8gq().s[40]++;
    this.chain.push(block);
    // Store block in decentralized storage
    const storageHash =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[41]++, await this.decentralizedStorage.store(`block_${index}`, block));
    // Clear pending events
    /* istanbul ignore next */
    cov_31gm2g8gq().s[42]++;
    this.pendingEvents = [];
    // Distribute quality tokens for contributions
    /* istanbul ignore next */
    cov_31gm2g8gq().s[43]++;
    await this.distributeQualityTokens(block);
    // Emit block mined event
    /* istanbul ignore next */
    cov_31gm2g8gq().s[44]++;
    this.emit('blockMined', block, storageHash);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[45]++;
    console.log(`Block ${index} mined with hash: ${hash}`);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[46]++;
    return block;
  }
  /**
   * Create and deploy a smart contract
   */
  async createSmartContract(name, code, conditions, actions, createdBy) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[5]++;
    const contractId =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[47]++, `contract_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const contract =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[48]++, {
      id: contractId,
      name,
      code,
      conditions,
      actions,
      createdAt: new Date(),
      createdBy,
      isActive: true
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[49]++;
    this.smartContracts.set(contractId, contract);
    // Record contract creation in audit trail
    /* istanbul ignore next */
    cov_31gm2g8gq().s[50]++;
    await this.recordAuditEvent({
      eventType: 'smart_contract_created',
      userId: createdBy,
      data: {
        contractId,
        name,
        conditions,
        actions
      },
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[51]++;
    return contractId;
  }
  /**
   * Execute smart contracts based on events
   */
  async executeSmartContracts(event) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[6]++;
    cov_31gm2g8gq().s[52]++;
    for (const [contractId, contract] of this.smartContracts) {
      /* istanbul ignore next */
      cov_31gm2g8gq().s[53]++;
      if (!contract.isActive) {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[7][0]++;
        cov_31gm2g8gq().s[54]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_31gm2g8gq().b[7][1]++;
      }
      cov_31gm2g8gq().s[55]++;
      try {
        // Check if conditions are met
        const shouldExecute =
        /* istanbul ignore next */
        (cov_31gm2g8gq().s[56]++, this.evaluateContractConditions(contract, event));
        /* istanbul ignore next */
        cov_31gm2g8gq().s[57]++;
        if (shouldExecute) {
          /* istanbul ignore next */
          cov_31gm2g8gq().b[8][0]++;
          cov_31gm2g8gq().s[58]++;
          // Execute contract actions
          await this.executeContractActions(contract, event);
          // Record execution
          /* istanbul ignore next */
          cov_31gm2g8gq().s[59]++;
          await this.recordAuditEvent({
            eventType: 'smart_contract_executed',
            userId: 'system',
            data: {
              contractId,
              triggeredBy: event
            },
            timestamp: new Date()
          });
        } else
        /* istanbul ignore next */
        {
          cov_31gm2g8gq().b[8][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_31gm2g8gq().s[60]++;
        console.error(`Error executing smart contract ${contractId}:`, error);
        // Record error
        /* istanbul ignore next */
        cov_31gm2g8gq().s[61]++;
        await this.recordAuditEvent({
          eventType: 'smart_contract_error',
          userId: 'system',
          data: {
            contractId,
            error: error.message
          },
          timestamp: new Date()
        });
      }
    }
  }
  /**
   * Create a governance proposal
   */
  async createGovernanceProposal(title, description, proposer, votingPeriodDays =
  /* istanbul ignore next */
  (cov_31gm2g8gq().b[9][0]++, 7)) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[7]++;
    const proposalId =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[62]++, `proposal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const now =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[63]++, new Date());
    const end =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[64]++, new Date(now.getTime() + votingPeriodDays * 24 * 60 * 60 * 1000));
    const proposal =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[65]++, {
      id: proposalId,
      title,
      description,
      proposer,
      votingPeriod: {
        start: now,
        end
      },
      votes: [],
      status: 'active',
      requiredQuorum: 0.5,
      // 50% of token holders
      executionTx: undefined
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[66]++;
    this.governanceProposals.set(proposalId, proposal);
    // Record proposal creation
    /* istanbul ignore next */
    cov_31gm2g8gq().s[67]++;
    await this.recordAuditEvent({
      eventType: 'governance_proposal_created',
      userId: proposer,
      data: proposal,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[68]++;
    return proposalId;
  }
  /**
   * Vote on a governance proposal
   */
  async voteOnProposal(proposalId, userId, vote) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[8]++;
    const proposal =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[69]++, this.governanceProposals.get(proposalId));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[70]++;
    if (!proposal) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[10][0]++;
      cov_31gm2g8gq().s[71]++;
      throw new Error('Proposal not found');
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[10][1]++;
    }
    cov_31gm2g8gq().s[72]++;
    if (proposal.status !== 'active') {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[11][0]++;
      cov_31gm2g8gq().s[73]++;
      throw new Error('Proposal is not active');
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[11][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[74]++, new Date());
    /* istanbul ignore next */
    cov_31gm2g8gq().s[75]++;
    if (now > proposal.votingPeriod.end) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[12][0]++;
      cov_31gm2g8gq().s[76]++;
      throw new Error('Voting period has ended');
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[12][1]++;
    }
    // Get user's token weight
    const userTokens =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[77]++,
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[13][0]++, this.qualityTokens.get(userId)) ||
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[13][1]++, []));
    const tokenWeight =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[78]++, userTokens.reduce((sum, token) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[9]++;
      cov_31gm2g8gq().s[79]++;
      return sum + token.amount;
    }, 0));
    // Remove previous vote if exists
    /* istanbul ignore next */
    cov_31gm2g8gq().s[80]++;
    proposal.votes = proposal.votes.filter(v => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[10]++;
      cov_31gm2g8gq().s[81]++;
      return v.userId !== userId;
    });
    // Add new vote
    /* istanbul ignore next */
    cov_31gm2g8gq().s[82]++;
    proposal.votes.push({
      userId,
      vote,
      weight: tokenWeight
    });
    // Record vote
    /* istanbul ignore next */
    cov_31gm2g8gq().s[83]++;
    await this.recordAuditEvent({
      eventType: 'governance_vote_cast',
      userId,
      data: {
        proposalId,
        vote,
        weight: tokenWeight
      },
      timestamp: new Date()
    });
    // Check if proposal should be resolved
    /* istanbul ignore next */
    cov_31gm2g8gq().s[84]++;
    await this.checkProposalResolution(proposalId);
  }
  /**
   * Distribute quality tokens for contributions
   */
  async distributeQualityTokens(block) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[11]++;
    cov_31gm2g8gq().s[85]++;
    for (const event of block.data) {
      let tokenAmount =
      /* istanbul ignore next */
      (cov_31gm2g8gq().s[86]++, 0);
      // Calculate token rewards based on event type
      /* istanbul ignore next */
      cov_31gm2g8gq().s[87]++;
      switch (event.eventType) {
        case 'prompt_created':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[14][0]++;
          cov_31gm2g8gq().s[88]++;
          tokenAmount = 10;
          /* istanbul ignore next */
          cov_31gm2g8gq().s[89]++;
          break;
        case 'test_execution_success':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[14][1]++;
          cov_31gm2g8gq().s[90]++;
          tokenAmount = 5;
          /* istanbul ignore next */
          cov_31gm2g8gq().s[91]++;
          break;
        case 'bug_report':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[14][2]++;
          cov_31gm2g8gq().s[92]++;
          tokenAmount = 15;
          /* istanbul ignore next */
          cov_31gm2g8gq().s[93]++;
          break;
        case 'quality_improvement':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[14][3]++;
          cov_31gm2g8gq().s[94]++;
          tokenAmount = 20;
          /* istanbul ignore next */
          cov_31gm2g8gq().s[95]++;
          break;
        case 'peer_review':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[14][4]++;
          cov_31gm2g8gq().s[96]++;
          tokenAmount = 8;
          /* istanbul ignore next */
          cov_31gm2g8gq().s[97]++;
          break;
        default:
          /* istanbul ignore next */
          cov_31gm2g8gq().b[14][5]++;
          cov_31gm2g8gq().s[98]++;
          tokenAmount = 1;
      }
      /* istanbul ignore next */
      cov_31gm2g8gq().s[99]++;
      if (tokenAmount > 0) {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[15][0]++;
        cov_31gm2g8gq().s[100]++;
        await this.mintQualityTokens(event.userId, tokenAmount, event.eventType, block.hash);
      } else
      /* istanbul ignore next */
      {
        cov_31gm2g8gq().b[15][1]++;
      }
    }
  }
  /**
   * Mint quality tokens for a user
   */
  async mintQualityTokens(userId, amount, earnedFor, blockHash) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[12]++;
    const token =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[101]++, {
      id: `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      userId,
      amount,
      earnedFor,
      timestamp: new Date(),
      blockHash
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[102]++;
    if (!this.qualityTokens.has(userId)) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[16][0]++;
      cov_31gm2g8gq().s[103]++;
      this.qualityTokens.set(userId, []);
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[16][1]++;
    }
    cov_31gm2g8gq().s[104]++;
    this.qualityTokens.get(userId).push(token);
    // Record token minting
    /* istanbul ignore next */
    cov_31gm2g8gq().s[105]++;
    await this.recordAuditEvent({
      eventType: 'quality_tokens_minted',
      userId,
      data: token,
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[106]++;
    this.emit('qualityTokensMinted', token);
  }
  /**
   * Verify blockchain integrity
   */
  verifyChainIntegrity() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[13]++;
    cov_31gm2g8gq().s[107]++;
    for (let i =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[108]++, 1); i < this.chain.length; i++) {
      const currentBlock =
      /* istanbul ignore next */
      (cov_31gm2g8gq().s[109]++, this.chain[i]);
      const previousBlock =
      /* istanbul ignore next */
      (cov_31gm2g8gq().s[110]++, this.chain[i - 1]);
      // Verify block hash
      /* istanbul ignore next */
      cov_31gm2g8gq().s[111]++;
      if (currentBlock.hash !== this.calculateBlockHash(currentBlock.index, currentBlock.timestamp, currentBlock.data, currentBlock.previousHash, currentBlock.nonce, currentBlock.merkleRoot)) {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[17][0]++;
        cov_31gm2g8gq().s[112]++;
        console.error(`Invalid hash at block ${i}`);
        /* istanbul ignore next */
        cov_31gm2g8gq().s[113]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_31gm2g8gq().b[17][1]++;
      }
      // Verify previous hash link
      cov_31gm2g8gq().s[114]++;
      if (currentBlock.previousHash !== previousBlock.hash) {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[18][0]++;
        cov_31gm2g8gq().s[115]++;
        console.error(`Invalid previous hash at block ${i}`);
        /* istanbul ignore next */
        cov_31gm2g8gq().s[116]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_31gm2g8gq().b[18][1]++;
      }
      // Verify merkle root
      cov_31gm2g8gq().s[117]++;
      if (currentBlock.merkleRoot !== this.calculateMerkleRoot(currentBlock.data)) {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[19][0]++;
        cov_31gm2g8gq().s[118]++;
        console.error(`Invalid merkle root at block ${i}`);
        /* istanbul ignore next */
        cov_31gm2g8gq().s[119]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_31gm2g8gq().b[19][1]++;
      }
    }
    /* istanbul ignore next */
    cov_31gm2g8gq().s[120]++;
    return true;
  }
  /**
   * Get audit trail for specific entity
   */
  getAuditTrail(entityId, entityType) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[14]++;
    const events =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[121]++, []);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[122]++;
    for (const block of this.chain) {
      /* istanbul ignore next */
      cov_31gm2g8gq().s[123]++;
      for (const event of block.data) {
        /* istanbul ignore next */
        cov_31gm2g8gq().s[124]++;
        if (
        /* istanbul ignore next */
        (cov_31gm2g8gq().b[21][0]++, event.userId === entityId) ||
        /* istanbul ignore next */
        (cov_31gm2g8gq().b[21][1]++, event.data.entityId) &&
        /* istanbul ignore next */
        (cov_31gm2g8gq().b[21][2]++, event.data.entityId === entityId) ||
        /* istanbul ignore next */
        (cov_31gm2g8gq().b[21][3]++, entityType) &&
        /* istanbul ignore next */
        (cov_31gm2g8gq().b[21][4]++, event.data.entityType === entityType)) {
          /* istanbul ignore next */
          cov_31gm2g8gq().b[20][0]++;
          cov_31gm2g8gq().s[125]++;
          events.push(event);
        } else
        /* istanbul ignore next */
        {
          cov_31gm2g8gq().b[20][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_31gm2g8gq().s[126]++;
    return events.sort((a, b) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[15]++;
      cov_31gm2g8gq().s[127]++;
      return a.timestamp.getTime() - b.timestamp.getTime();
    });
  }
  /**
   * Get user's quality token balance
   */
  getQualityTokenBalance(userId) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[16]++;
    const tokens =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[128]++,
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[22][0]++, this.qualityTokens.get(userId)) ||
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[22][1]++, []));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[129]++;
    return tokens.reduce((sum, token) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[17]++;
      cov_31gm2g8gq().s[130]++;
      return sum + token.amount;
    }, 0);
  }
  /**
   * Get blockchain statistics
   */
  getBlockchainStats() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[18]++;
    const totalEvents =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[131]++, this.chain.reduce((sum, block) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[19]++;
      cov_31gm2g8gq().s[132]++;
      return sum + block.data.length;
    }, 0));
    const totalTokenHolders =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[133]++, this.qualityTokens.size);
    let averageBlockTime =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[134]++, 0);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[135]++;
    if (this.chain.length > 1) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[23][0]++;
      const totalTime =
      /* istanbul ignore next */
      (cov_31gm2g8gq().s[136]++, this.chain[this.chain.length - 1].timestamp.getTime() - this.chain[0].timestamp.getTime());
      /* istanbul ignore next */
      cov_31gm2g8gq().s[137]++;
      averageBlockTime = totalTime / (this.chain.length - 1);
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[23][1]++;
    }
    cov_31gm2g8gq().s[138]++;
    return {
      totalBlocks: this.chain.length,
      totalEvents,
      totalContracts: this.smartContracts.size,
      totalProposals: this.governanceProposals.size,
      totalTokenHolders,
      averageBlockTime,
      chainIntegrity: this.verifyChainIntegrity()
    };
  }
  // Private helper methods
  initializeGenesisBlock() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[20]++;
    const genesisBlock =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[139]++, {
      index: 0,
      timestamp: new Date('2024-01-01T00:00:00Z'),
      data: [{
        eventType: 'genesis',
        userId: 'system',
        data: {
          message: 'Blockchain audit trail initialized'
        },
        timestamp: new Date('2024-01-01T00:00:00Z')
      }],
      previousHash: '0',
      hash: '',
      nonce: 0,
      merkleRoot: ''
    });
    /* istanbul ignore next */
    cov_31gm2g8gq().s[140]++;
    genesisBlock.merkleRoot = this.calculateMerkleRoot(genesisBlock.data);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[141]++;
    genesisBlock.hash = this.calculateBlockHash(0, genesisBlock.timestamp, genesisBlock.data, '0', 0, genesisBlock.merkleRoot);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[142]++;
    this.chain.push(genesisBlock);
  }
  async signEvent(event) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[21]++;
    const eventString =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[143]++, JSON.stringify(event));
    const signature =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[144]++, crypto_1.default.createHmac('sha256', 'audit_secret').update(eventString).digest('hex'));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[145]++;
    return {
      ...event,
      metadata: {
        ...event.metadata,
        signature,
        hash: this.calculateEventHash(event)
      }
    };
  }
  calculateEventHash(event) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[22]++;
    const eventString =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[146]++, JSON.stringify(event));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[147]++;
    return crypto_1.default.createHash('sha256').update(eventString).digest('hex');
  }
  calculateBlockHash(index, timestamp, data, previousHash, nonce, merkleRoot) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[23]++;
    const blockString =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[148]++, `${index}${timestamp.toISOString()}${JSON.stringify(data)}${previousHash}${nonce}${merkleRoot}`);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[149]++;
    return crypto_1.default.createHash('sha256').update(blockString).digest('hex');
  }
  calculateMerkleRoot(data) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[24]++;
    cov_31gm2g8gq().s[150]++;
    if (data.length === 0) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[24][0]++;
      cov_31gm2g8gq().s[151]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[24][1]++;
    }
    let hashes =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[152]++, data.map(event => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[25]++;
      cov_31gm2g8gq().s[153]++;
      return this.calculateEventHash(event);
    }));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[154]++;
    while (hashes.length > 1) {
      const newHashes =
      /* istanbul ignore next */
      (cov_31gm2g8gq().s[155]++, []);
      /* istanbul ignore next */
      cov_31gm2g8gq().s[156]++;
      for (let i =
      /* istanbul ignore next */
      (cov_31gm2g8gq().s[157]++, 0); i < hashes.length; i += 2) {
        /* istanbul ignore next */
        cov_31gm2g8gq().s[158]++;
        if (i + 1 < hashes.length) {
          /* istanbul ignore next */
          cov_31gm2g8gq().b[25][0]++;
          const combined =
          /* istanbul ignore next */
          (cov_31gm2g8gq().s[159]++, hashes[i] + hashes[i + 1]);
          /* istanbul ignore next */
          cov_31gm2g8gq().s[160]++;
          newHashes.push(crypto_1.default.createHash('sha256').update(combined).digest('hex'));
        } else {
          /* istanbul ignore next */
          cov_31gm2g8gq().b[25][1]++;
          cov_31gm2g8gq().s[161]++;
          newHashes.push(hashes[i]);
        }
      }
      /* istanbul ignore next */
      cov_31gm2g8gq().s[162]++;
      hashes = newHashes;
    }
    /* istanbul ignore next */
    cov_31gm2g8gq().s[163]++;
    return hashes[0];
  }
  evaluateContractConditions(contract, event) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[26]++;
    // Simple condition evaluation - could be enhanced with a proper expression evaluator
    const conditions =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[164]++, contract.conditions);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[165]++;
    for (const [key, value] of Object.entries(conditions)) {
      /* istanbul ignore next */
      cov_31gm2g8gq().s[166]++;
      switch (key) {
        case 'eventType':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[26][0]++;
          cov_31gm2g8gq().s[167]++;
          if (event.eventType !== value) {
            /* istanbul ignore next */
            cov_31gm2g8gq().b[27][0]++;
            cov_31gm2g8gq().s[168]++;
            return false;
          } else
          /* istanbul ignore next */
          {
            cov_31gm2g8gq().b[27][1]++;
          }
          cov_31gm2g8gq().s[169]++;
          break;
        case 'userId':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[26][1]++;
          cov_31gm2g8gq().s[170]++;
          if (event.userId !== value) {
            /* istanbul ignore next */
            cov_31gm2g8gq().b[28][0]++;
            cov_31gm2g8gq().s[171]++;
            return false;
          } else
          /* istanbul ignore next */
          {
            cov_31gm2g8gq().b[28][1]++;
          }
          cov_31gm2g8gq().s[172]++;
          break;
        case 'dataContains':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[26][2]++;
          cov_31gm2g8gq().s[173]++;
          if (!JSON.stringify(event.data).includes(value)) {
            /* istanbul ignore next */
            cov_31gm2g8gq().b[29][0]++;
            cov_31gm2g8gq().s[174]++;
            return false;
          } else
          /* istanbul ignore next */
          {
            cov_31gm2g8gq().b[29][1]++;
          }
          cov_31gm2g8gq().s[175]++;
          break;
      }
    }
    /* istanbul ignore next */
    cov_31gm2g8gq().s[176]++;
    return true;
  }
  async executeContractActions(contract, event) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[27]++;
    cov_31gm2g8gq().s[177]++;
    for (const action of contract.actions) {
      /* istanbul ignore next */
      cov_31gm2g8gq().s[178]++;
      switch (action) {
        case 'mint_tokens':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[30][0]++;
          cov_31gm2g8gq().s[179]++;
          await this.mintQualityTokens(event.userId, 5, 'contract_execution', '');
          /* istanbul ignore next */
          cov_31gm2g8gq().s[180]++;
          break;
        case 'create_proposal':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[30][1]++;
          cov_31gm2g8gq().s[181]++;
          // Auto-create governance proposal based on contract logic
          break;
        case 'alert_admin':
          /* istanbul ignore next */
          cov_31gm2g8gq().b[30][2]++;
          cov_31gm2g8gq().s[182]++;
          this.emit('adminAlert', {
            contract,
            event
          });
          /* istanbul ignore next */
          cov_31gm2g8gq().s[183]++;
          break;
      }
    }
  }
  setupAutomaticGovernance() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[28]++;
    cov_31gm2g8gq().s[184]++;
    // Set up default governance contracts
    this.createSmartContract('Quality Assurance', 'if test_success_rate < 0.8 then alert_admin', {
      eventType: 'batch_execution'
    }, ['alert_admin'], 'system');
    /* istanbul ignore next */
    cov_31gm2g8gq().s[185]++;
    this.createSmartContract('Contribution Rewards', 'if prompt_created then mint_tokens', {
      eventType: 'prompt_created'
    }, ['mint_tokens'], 'system');
  }
  async checkProposalResolution(proposalId) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[29]++;
    const proposal =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[186]++, this.governanceProposals.get(proposalId));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[187]++;
    if (
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[32][0]++, !proposal) ||
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[32][1]++, proposal.status !== 'active')) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[31][0]++;
      cov_31gm2g8gq().s[188]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[31][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[189]++, new Date());
    const totalWeight =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[190]++, Array.from(this.qualityTokens.values()).flat().reduce((sum, token) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[30]++;
      cov_31gm2g8gq().s[191]++;
      return sum + token.amount;
    }, 0));
    const votedWeight =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[192]++, proposal.votes.reduce((sum, vote) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[31]++;
      cov_31gm2g8gq().s[193]++;
      return sum + vote.weight;
    }, 0));
    const yesWeight =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[194]++, proposal.votes.filter(vote => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[32]++;
      cov_31gm2g8gq().s[195]++;
      return vote.vote === 'yes';
    }).reduce((sum, vote) => {
      /* istanbul ignore next */
      cov_31gm2g8gq().f[33]++;
      cov_31gm2g8gq().s[196]++;
      return sum + vote.weight;
    }, 0));
    // Check if quorum is met and voting period ended
    /* istanbul ignore next */
    cov_31gm2g8gq().s[197]++;
    if (
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[34][0]++, now > proposal.votingPeriod.end) ||
    /* istanbul ignore next */
    (cov_31gm2g8gq().b[34][1]++, votedWeight >= totalWeight * proposal.requiredQuorum)) {
      /* istanbul ignore next */
      cov_31gm2g8gq().b[33][0]++;
      cov_31gm2g8gq().s[198]++;
      if (yesWeight > votedWeight * 0.5) {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[35][0]++;
        cov_31gm2g8gq().s[199]++;
        proposal.status = 'passed';
      } else {
        /* istanbul ignore next */
        cov_31gm2g8gq().b[35][1]++;
        cov_31gm2g8gq().s[200]++;
        proposal.status = 'rejected';
      }
      // Record resolution
      /* istanbul ignore next */
      cov_31gm2g8gq().s[201]++;
      await this.recordAuditEvent({
        eventType: 'governance_proposal_resolved',
        userId: 'system',
        data: {
          proposalId,
          status: proposal.status,
          votes: proposal.votes
        },
        timestamp: new Date()
      });
    } else
    /* istanbul ignore next */
    {
      cov_31gm2g8gq().b[33][1]++;
    }
  }
}
/* istanbul ignore next */
cov_31gm2g8gq().s[202]++;
exports.BlockchainAuditTrail = BlockchainAuditTrail;
/**
 * IPFS-like decentralized storage implementation
 */
class IPFSStorage {
  constructor() {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[34]++;
    cov_31gm2g8gq().s[203]++;
    this.storage = new Map();
  }
  async store(key, data) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[35]++;
    const serialized =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[204]++, JSON.stringify(data));
    const hash =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[205]++, crypto_1.default.createHash('sha256').update(serialized).digest('hex'));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[206]++;
    this.storage.set(hash, data);
    /* istanbul ignore next */
    cov_31gm2g8gq().s[207]++;
    return hash;
  }
  async retrieve(hash) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[36]++;
    cov_31gm2g8gq().s[208]++;
    return this.storage.get(hash);
  }
  verify(hash, data) {
    /* istanbul ignore next */
    cov_31gm2g8gq().f[37]++;
    const serialized =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[209]++, JSON.stringify(data));
    const calculatedHash =
    /* istanbul ignore next */
    (cov_31gm2g8gq().s[210]++, crypto_1.default.createHash('sha256').update(serialized).digest('hex'));
    /* istanbul ignore next */
    cov_31gm2g8gq().s[211]++;
    return calculatedHash === hash;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,