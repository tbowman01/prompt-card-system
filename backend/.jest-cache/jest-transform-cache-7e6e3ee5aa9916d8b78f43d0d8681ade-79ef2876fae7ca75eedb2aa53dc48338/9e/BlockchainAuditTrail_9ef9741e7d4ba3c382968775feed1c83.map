{"version":3,"names":["cov_31gm2g8gq","actualCoverage","crypto_1","s","__importDefault","require","events_1","BlockchainAuditTrail","EventEmitter","constructor","f","difficulty","blockSize","chain","pendingEvents","smartContracts","Map","governanceProposals","qualityTokens","decentralizedStorage","IPFSStorage","initializeGenesisBlock","setupAutomaticGovernance","getInstance","instance","b","recordAuditEvent","event","signedEvent","signEvent","push","length","mineBlock","executeSmartContracts","emit","calculateEventHash","Error","index","timestamp","Date","previousHash","hash","data","merkleRoot","calculateMerkleRoot","nonce","calculateBlockHash","substring","Array","join","block","storageHash","store","distributeQualityTokens","console","log","createSmartContract","name","code","conditions","actions","createdBy","contractId","now","Math","random","toString","substr","contract","id","createdAt","isActive","set","eventType","userId","shouldExecute","evaluateContractConditions","executeContractActions","triggeredBy","error","message","createGovernanceProposal","title","description","proposer","votingPeriodDays","proposalId","end","getTime","proposal","votingPeriod","start","votes","status","requiredQuorum","executionTx","undefined","voteOnProposal","vote","get","userTokens","tokenWeight","reduce","sum","token","amount","filter","v","weight","checkProposalResolution","tokenAmount","mintQualityTokens","earnedFor","blockHash","has","verifyChainIntegrity","i","currentBlock","previousBlock","getAuditTrail","entityId","entityType","events","sort","a","getQualityTokenBalance","tokens","getBlockchainStats","totalEvents","totalTokenHolders","size","averageBlockTime","totalTime","totalBlocks","totalContracts","totalProposals","chainIntegrity","genesisBlock","eventString","JSON","stringify","signature","default","createHmac","update","digest","metadata","createHash","blockString","toISOString","hashes","map","newHashes","combined","key","value","Object","entries","includes","action","totalWeight","from","values","flat","votedWeight","yesWeight","exports","storage","serialized","retrieve","verify","calculatedHash"],"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/BlockchainAuditTrail.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { EventEmitter } from 'events';\n\nexport interface AuditEvent {\n  eventType: string;\n  userId: string;\n  data: any;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface Block {\n  index: number;\n  timestamp: Date;\n  data: AuditEvent[];\n  previousHash: string;\n  hash: string;\n  nonce: number;\n  merkleRoot: string;\n}\n\nexport interface SmartContract {\n  id: string;\n  name: string;\n  code: string;\n  conditions: Record<string, any>;\n  actions: string[];\n  createdAt: Date;\n  createdBy: string;\n  isActive: boolean;\n}\n\nexport interface GovernanceProposal {\n  id: string;\n  title: string;\n  description: string;\n  proposer: string;\n  votingPeriod: { start: Date; end: Date };\n  votes: { userId: string; vote: 'yes' | 'no' | 'abstain'; weight: number }[];\n  status: 'pending' | 'active' | 'passed' | 'rejected' | 'executed';\n  requiredQuorum: number;\n  executionTx?: string;\n}\n\nexport interface QualityToken {\n  id: string;\n  userId: string;\n  amount: number;\n  earnedFor: string;\n  timestamp: Date;\n  blockHash: string;\n}\n\nexport interface DecentralizedStorage {\n  store(key: string, data: any): Promise<string>;\n  retrieve(hash: string): Promise<any>;\n  verify(hash: string, data: any): boolean;\n}\n\nexport class BlockchainAuditTrail extends EventEmitter {\n  private chain: Block[];\n  private pendingEvents: AuditEvent[];\n  private smartContracts: Map<string, SmartContract>;\n  private governanceProposals: Map<string, GovernanceProposal>;\n  private qualityTokens: Map<string, QualityToken[]>;\n  private decentralizedStorage: DecentralizedStorage;\n  private static instance: BlockchainAuditTrail;\n  private readonly difficulty: number = 4;\n  private readonly blockSize: number = 100;\n\n  private constructor() {\n    super();\n    this.chain = [];\n    this.pendingEvents = [];\n    this.smartContracts = new Map();\n    this.governanceProposals = new Map();\n    this.qualityTokens = new Map();\n    this.decentralizedStorage = new IPFSStorage();\n    this.initializeGenesisBlock();\n    this.setupAutomaticGovernance();\n  }\n\n  public static getInstance(): BlockchainAuditTrail {\n    if (!BlockchainAuditTrail.instance) {\n      BlockchainAuditTrail.instance = new BlockchainAuditTrail();\n    }\n    return BlockchainAuditTrail.instance;\n  }\n\n  /**\n   * Record an audit event to the blockchain\n   */\n  public async recordAuditEvent(event: AuditEvent): Promise<string> {\n    // Add cryptographic signature\n    const signedEvent = await this.signEvent(event);\n    \n    // Add to pending events\n    this.pendingEvents.push(signedEvent);\n    \n    // Check if we should mine a new block\n    if (this.pendingEvents.length >= this.blockSize) {\n      await this.mineBlock();\n    }\n    \n    // Execute relevant smart contracts\n    await this.executeSmartContracts(signedEvent);\n    \n    // Emit event for real-time monitoring\n    this.emit('auditEventRecorded', signedEvent);\n    \n    return this.calculateEventHash(signedEvent);\n  }\n\n  /**\n   * Mine a new block with pending events\n   */\n  public async mineBlock(): Promise<Block> {\n    if (this.pendingEvents.length === 0) {\n      throw new Error('No pending events to mine');\n    }\n\n    const index = this.chain.length;\n    const timestamp = new Date();\n    const previousHash = index === 0 ? '0' : this.chain[index - 1].hash;\n    const data = [...this.pendingEvents];\n    const merkleRoot = this.calculateMerkleRoot(data);\n    \n    // Proof of Work mining\n    let nonce = 0;\n    let hash = '';\n    \n    do {\n      nonce++;\n      hash = this.calculateBlockHash(index, timestamp, data, previousHash, nonce, merkleRoot);\n    } while (hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0'));\n\n    const block: Block = {\n      index,\n      timestamp,\n      data,\n      previousHash,\n      hash,\n      nonce,\n      merkleRoot\n    };\n\n    // Add block to chain\n    this.chain.push(block);\n    \n    // Store block in decentralized storage\n    const storageHash = await this.decentralizedStorage.store(`block_${index}`, block);\n    \n    // Clear pending events\n    this.pendingEvents = [];\n    \n    // Distribute quality tokens for contributions\n    await this.distributeQualityTokens(block);\n    \n    // Emit block mined event\n    this.emit('blockMined', block, storageHash);\n    \n    console.log(`Block ${index} mined with hash: ${hash}`);\n    \n    return block;\n  }\n\n  /**\n   * Create and deploy a smart contract\n   */\n  public async createSmartContract(\n    name: string,\n    code: string,\n    conditions: Record<string, any>,\n    actions: string[],\n    createdBy: string\n  ): Promise<string> {\n    const contractId = `contract_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const contract: SmartContract = {\n      id: contractId,\n      name,\n      code,\n      conditions,\n      actions,\n      createdAt: new Date(),\n      createdBy,\n      isActive: true\n    };\n\n    this.smartContracts.set(contractId, contract);\n    \n    // Record contract creation in audit trail\n    await this.recordAuditEvent({\n      eventType: 'smart_contract_created',\n      userId: createdBy,\n      data: { contractId, name, conditions, actions },\n      timestamp: new Date()\n    });\n\n    return contractId;\n  }\n\n  /**\n   * Execute smart contracts based on events\n   */\n  private async executeSmartContracts(event: AuditEvent): Promise<void> {\n    for (const [contractId, contract] of this.smartContracts) {\n      if (!contract.isActive) continue;\n\n      try {\n        // Check if conditions are met\n        const shouldExecute = this.evaluateContractConditions(contract, event);\n        \n        if (shouldExecute) {\n          // Execute contract actions\n          await this.executeContractActions(contract, event);\n          \n          // Record execution\n          await this.recordAuditEvent({\n            eventType: 'smart_contract_executed',\n            userId: 'system',\n            data: { contractId, triggeredBy: event },\n            timestamp: new Date()\n          });\n        }\n      } catch (error) {\n        console.error(`Error executing smart contract ${contractId}:`, error);\n        \n        // Record error\n        await this.recordAuditEvent({\n          eventType: 'smart_contract_error',\n          userId: 'system',\n          data: { contractId, error: error.message },\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  /**\n   * Create a governance proposal\n   */\n  public async createGovernanceProposal(\n    title: string,\n    description: string,\n    proposer: string,\n    votingPeriodDays: number = 7\n  ): Promise<string> {\n    const proposalId = `proposal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const now = new Date();\n    const end = new Date(now.getTime() + (votingPeriodDays * 24 * 60 * 60 * 1000));\n    \n    const proposal: GovernanceProposal = {\n      id: proposalId,\n      title,\n      description,\n      proposer,\n      votingPeriod: { start: now, end },\n      votes: [],\n      status: 'active',\n      requiredQuorum: 0.5, // 50% of token holders\n      executionTx: undefined\n    };\n\n    this.governanceProposals.set(proposalId, proposal);\n    \n    // Record proposal creation\n    await this.recordAuditEvent({\n      eventType: 'governance_proposal_created',\n      userId: proposer,\n      data: proposal,\n      timestamp: new Date()\n    });\n\n    return proposalId;\n  }\n\n  /**\n   * Vote on a governance proposal\n   */\n  public async voteOnProposal(\n    proposalId: string,\n    userId: string,\n    vote: 'yes' | 'no' | 'abstain'\n  ): Promise<void> {\n    const proposal = this.governanceProposals.get(proposalId);\n    if (!proposal) {\n      throw new Error('Proposal not found');\n    }\n\n    if (proposal.status !== 'active') {\n      throw new Error('Proposal is not active');\n    }\n\n    const now = new Date();\n    if (now > proposal.votingPeriod.end) {\n      throw new Error('Voting period has ended');\n    }\n\n    // Get user's token weight\n    const userTokens = this.qualityTokens.get(userId) || [];\n    const tokenWeight = userTokens.reduce((sum, token) => sum + token.amount, 0);\n\n    // Remove previous vote if exists\n    proposal.votes = proposal.votes.filter(v => v.userId !== userId);\n    \n    // Add new vote\n    proposal.votes.push({\n      userId,\n      vote,\n      weight: tokenWeight\n    });\n\n    // Record vote\n    await this.recordAuditEvent({\n      eventType: 'governance_vote_cast',\n      userId,\n      data: { proposalId, vote, weight: tokenWeight },\n      timestamp: new Date()\n    });\n\n    // Check if proposal should be resolved\n    await this.checkProposalResolution(proposalId);\n  }\n\n  /**\n   * Distribute quality tokens for contributions\n   */\n  private async distributeQualityTokens(block: Block): Promise<void> {\n    for (const event of block.data) {\n      let tokenAmount = 0;\n      \n      // Calculate token rewards based on event type\n      switch (event.eventType) {\n        case 'prompt_created':\n          tokenAmount = 10;\n          break;\n        case 'test_execution_success':\n          tokenAmount = 5;\n          break;\n        case 'bug_report':\n          tokenAmount = 15;\n          break;\n        case 'quality_improvement':\n          tokenAmount = 20;\n          break;\n        case 'peer_review':\n          tokenAmount = 8;\n          break;\n        default:\n          tokenAmount = 1;\n      }\n\n      if (tokenAmount > 0) {\n        await this.mintQualityTokens(event.userId, tokenAmount, event.eventType, block.hash);\n      }\n    }\n  }\n\n  /**\n   * Mint quality tokens for a user\n   */\n  public async mintQualityTokens(\n    userId: string,\n    amount: number,\n    earnedFor: string,\n    blockHash: string\n  ): Promise<void> {\n    const token: QualityToken = {\n      id: `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      userId,\n      amount,\n      earnedFor,\n      timestamp: new Date(),\n      blockHash\n    };\n\n    if (!this.qualityTokens.has(userId)) {\n      this.qualityTokens.set(userId, []);\n    }\n    \n    this.qualityTokens.get(userId)!.push(token);\n\n    // Record token minting\n    await this.recordAuditEvent({\n      eventType: 'quality_tokens_minted',\n      userId,\n      data: token,\n      timestamp: new Date()\n    });\n\n    this.emit('qualityTokensMinted', token);\n  }\n\n  /**\n   * Verify blockchain integrity\n   */\n  public verifyChainIntegrity(): boolean {\n    for (let i = 1; i < this.chain.length; i++) {\n      const currentBlock = this.chain[i];\n      const previousBlock = this.chain[i - 1];\n\n      // Verify block hash\n      if (currentBlock.hash !== this.calculateBlockHash(\n        currentBlock.index,\n        currentBlock.timestamp,\n        currentBlock.data,\n        currentBlock.previousHash,\n        currentBlock.nonce,\n        currentBlock.merkleRoot\n      )) {\n        console.error(`Invalid hash at block ${i}`);\n        return false;\n      }\n\n      // Verify previous hash link\n      if (currentBlock.previousHash !== previousBlock.hash) {\n        console.error(`Invalid previous hash at block ${i}`);\n        return false;\n      }\n\n      // Verify merkle root\n      if (currentBlock.merkleRoot !== this.calculateMerkleRoot(currentBlock.data)) {\n        console.error(`Invalid merkle root at block ${i}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get audit trail for specific entity\n   */\n  public getAuditTrail(entityId: string, entityType?: string): AuditEvent[] {\n    const events: AuditEvent[] = [];\n    \n    for (const block of this.chain) {\n      for (const event of block.data) {\n        if (event.userId === entityId || \n            (event.data.entityId && event.data.entityId === entityId) ||\n            (entityType && event.data.entityType === entityType)) {\n          events.push(event);\n        }\n      }\n    }\n\n    return events.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  /**\n   * Get user's quality token balance\n   */\n  public getQualityTokenBalance(userId: string): number {\n    const tokens = this.qualityTokens.get(userId) || [];\n    return tokens.reduce((sum, token) => sum + token.amount, 0);\n  }\n\n  /**\n   * Get blockchain statistics\n   */\n  public getBlockchainStats(): {\n    totalBlocks: number;\n    totalEvents: number;\n    totalContracts: number;\n    totalProposals: number;\n    totalTokenHolders: number;\n    averageBlockTime: number;\n    chainIntegrity: boolean;\n  } {\n    const totalEvents = this.chain.reduce((sum, block) => sum + block.data.length, 0);\n    const totalTokenHolders = this.qualityTokens.size;\n    \n    let averageBlockTime = 0;\n    if (this.chain.length > 1) {\n      const totalTime = this.chain[this.chain.length - 1].timestamp.getTime() - this.chain[0].timestamp.getTime();\n      averageBlockTime = totalTime / (this.chain.length - 1);\n    }\n\n    return {\n      totalBlocks: this.chain.length,\n      totalEvents,\n      totalContracts: this.smartContracts.size,\n      totalProposals: this.governanceProposals.size,\n      totalTokenHolders,\n      averageBlockTime,\n      chainIntegrity: this.verifyChainIntegrity()\n    };\n  }\n\n  // Private helper methods\n\n  private initializeGenesisBlock(): void {\n    const genesisBlock: Block = {\n      index: 0,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      data: [{\n        eventType: 'genesis',\n        userId: 'system',\n        data: { message: 'Blockchain audit trail initialized' },\n        timestamp: new Date('2024-01-01T00:00:00Z')\n      }],\n      previousHash: '0',\n      hash: '',\n      nonce: 0,\n      merkleRoot: ''\n    };\n\n    genesisBlock.merkleRoot = this.calculateMerkleRoot(genesisBlock.data);\n    genesisBlock.hash = this.calculateBlockHash(\n      0,\n      genesisBlock.timestamp,\n      genesisBlock.data,\n      '0',\n      0,\n      genesisBlock.merkleRoot\n    );\n\n    this.chain.push(genesisBlock);\n  }\n\n  private async signEvent(event: AuditEvent): Promise<AuditEvent> {\n    const eventString = JSON.stringify(event);\n    const signature = crypto.createHmac('sha256', 'audit_secret')\n                           .update(eventString)\n                           .digest('hex');\n    \n    return {\n      ...event,\n      metadata: {\n        ...event.metadata,\n        signature,\n        hash: this.calculateEventHash(event)\n      }\n    };\n  }\n\n  private calculateEventHash(event: AuditEvent): string {\n    const eventString = JSON.stringify(event);\n    return crypto.createHash('sha256').update(eventString).digest('hex');\n  }\n\n  private calculateBlockHash(\n    index: number,\n    timestamp: Date,\n    data: AuditEvent[],\n    previousHash: string,\n    nonce: number,\n    merkleRoot: string\n  ): string {\n    const blockString = `${index}${timestamp.toISOString()}${JSON.stringify(data)}${previousHash}${nonce}${merkleRoot}`;\n    return crypto.createHash('sha256').update(blockString).digest('hex');\n  }\n\n  private calculateMerkleRoot(data: AuditEvent[]): string {\n    if (data.length === 0) return '';\n    \n    let hashes = data.map(event => this.calculateEventHash(event));\n    \n    while (hashes.length > 1) {\n      const newHashes: string[] = [];\n      \n      for (let i = 0; i < hashes.length; i += 2) {\n        if (i + 1 < hashes.length) {\n          const combined = hashes[i] + hashes[i + 1];\n          newHashes.push(crypto.createHash('sha256').update(combined).digest('hex'));\n        } else {\n          newHashes.push(hashes[i]);\n        }\n      }\n      \n      hashes = newHashes;\n    }\n    \n    return hashes[0];\n  }\n\n  private evaluateContractConditions(contract: SmartContract, event: AuditEvent): boolean {\n    // Simple condition evaluation - could be enhanced with a proper expression evaluator\n    const conditions = contract.conditions;\n    \n    for (const [key, value] of Object.entries(conditions)) {\n      switch (key) {\n        case 'eventType':\n          if (event.eventType !== value) return false;\n          break;\n        case 'userId':\n          if (event.userId !== value) return false;\n          break;\n        case 'dataContains':\n          if (!JSON.stringify(event.data).includes(value)) return false;\n          break;\n      }\n    }\n    \n    return true;\n  }\n\n  private async executeContractActions(contract: SmartContract, event: AuditEvent): Promise<void> {\n    for (const action of contract.actions) {\n      switch (action) {\n        case 'mint_tokens':\n          await this.mintQualityTokens(event.userId, 5, 'contract_execution', '');\n          break;\n        case 'create_proposal':\n          // Auto-create governance proposal based on contract logic\n          break;\n        case 'alert_admin':\n          this.emit('adminAlert', { contract, event });\n          break;\n      }\n    }\n  }\n\n  private setupAutomaticGovernance(): void {\n    // Set up default governance contracts\n    this.createSmartContract(\n      'Quality Assurance',\n      'if test_success_rate < 0.8 then alert_admin',\n      { eventType: 'batch_execution' },\n      ['alert_admin'],\n      'system'\n    );\n    \n    this.createSmartContract(\n      'Contribution Rewards',\n      'if prompt_created then mint_tokens',\n      { eventType: 'prompt_created' },\n      ['mint_tokens'],\n      'system'\n    );\n  }\n\n  private async checkProposalResolution(proposalId: string): Promise<void> {\n    const proposal = this.governanceProposals.get(proposalId);\n    if (!proposal || proposal.status !== 'active') return;\n\n    const now = new Date();\n    const totalWeight = Array.from(this.qualityTokens.values())\n      .flat()\n      .reduce((sum, token) => sum + token.amount, 0);\n\n    const votedWeight = proposal.votes.reduce((sum, vote) => sum + vote.weight, 0);\n    const yesWeight = proposal.votes\n      .filter(vote => vote.vote === 'yes')\n      .reduce((sum, vote) => sum + vote.weight, 0);\n\n    // Check if quorum is met and voting period ended\n    if (now > proposal.votingPeriod.end || votedWeight >= totalWeight * proposal.requiredQuorum) {\n      if (yesWeight > votedWeight * 0.5) {\n        proposal.status = 'passed';\n      } else {\n        proposal.status = 'rejected';\n      }\n\n      // Record resolution\n      await this.recordAuditEvent({\n        eventType: 'governance_proposal_resolved',\n        userId: 'system',\n        data: { proposalId, status: proposal.status, votes: proposal.votes },\n        timestamp: new Date()\n      });\n    }\n  }\n}\n\n/**\n * IPFS-like decentralized storage implementation\n */\nclass IPFSStorage implements DecentralizedStorage {\n  private storage: Map<string, any>;\n\n  constructor() {\n    this.storage = new Map();\n  }\n\n  async store(key: string, data: any): Promise<string> {\n    const serialized = JSON.stringify(data);\n    const hash = crypto.createHash('sha256').update(serialized).digest('hex');\n    this.storage.set(hash, data);\n    return hash;\n  }\n\n  async retrieve(hash: string): Promise<any> {\n    return this.storage.get(hash);\n  }\n\n  verify(hash: string, data: any): boolean {\n    const serialized = JSON.stringify(data);\n    const calculatedHash = crypto.createHash('sha256').update(serialized).digest('hex');\n    return calculatedHash === hash;\n  }\n}"],"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","ignoreList":[]}