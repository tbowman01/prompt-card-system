2f0e9a278de62dcd2d84a42eb3e9f7e2
"use strict";

/* istanbul ignore next */
function cov_why23c3xa() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/training.ts";
  var hash = "19c02058f56ff87aaa74d4d70ad3dcdf309c6d9f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/training.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 7,
          column: 81
        }
      },
      "5": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 69
        }
      },
      "6": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 56
        }
      },
      "7": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 67,
          column: 2
        }
      },
      "10": {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 78,
          column: 2
        }
      },
      "11": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 121,
          column: 2
        }
      },
      "12": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 141,
          column: 2
        }
      },
      "13": {
        start: {
          line: 146,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "14": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "15": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 95
        }
      },
      "16": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "17": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 61
        }
      },
      "18": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "19": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 187,
          column: 3
        }
      },
      "20": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "21": {
        start: {
          line: 173,
          column: 26
        },
        end: {
          line: 173,
          column: 36
        }
      },
      "22": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 80
        }
      },
      "23": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "24": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 61
        }
      },
      "25": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "26": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 214,
          column: 3
        }
      },
      "27": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "28": {
        start: {
          line: 194,
          column: 26
        },
        end: {
          line: 194,
          column: 36
        }
      },
      "29": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 195,
          column: 83
        }
      },
      "30": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "31": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 200,
          column: 15
        }
      },
      "32": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "33": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 60
        }
      },
      "34": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "35": {
        start: {
          line: 219,
          column: 0
        },
        end: {
          line: 246,
          column: 3
        }
      },
      "36": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "37": {
        start: {
          line: 221,
          column: 24
        },
        end: {
          line: 221,
          column: 26
        }
      },
      "38": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 223,
          column: 46
        }
      },
      "39": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 46
        }
      },
      "40": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 225,
          column: 44
        }
      },
      "41": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 44
        }
      },
      "42": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 227,
          column: 70
        }
      },
      "43": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 70
        }
      },
      "44": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 229,
          column: 72
        }
      },
      "45": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 72
        }
      },
      "46": {
        start: {
          line: 230,
          column: 21
        },
        end: {
          line: 230,
          column: 88
        }
      },
      "47": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      },
      "48": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 61
        }
      },
      "49": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "50": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 267,
          column: 3
        }
      },
      "51": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 266,
          column: 5
        }
      },
      "52": {
        start: {
          line: 253,
          column: 26
        },
        end: {
          line: 253,
          column: 36
        }
      },
      "53": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 81
        }
      },
      "54": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      },
      "55": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 63
        }
      },
      "56": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "57": {
        start: {
          line: 272,
          column: 0
        },
        end: {
          line: 291,
          column: 3
        }
      },
      "58": {
        start: {
          line: 273,
          column: 4
        },
        end: {
          line: 290,
          column: 5
        }
      },
      "59": {
        start: {
          line: 274,
          column: 27
        },
        end: {
          line: 274,
          column: 106
        }
      },
      "60": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "61": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 65
        }
      },
      "62": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "63": {
        start: {
          line: 296,
          column: 0
        },
        end: {
          line: 313,
          column: 3
        }
      },
      "64": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 312,
          column: 5
        }
      },
      "65": {
        start: {
          line: 298,
          column: 30
        },
        end: {
          line: 298,
          column: 40
        }
      },
      "66": {
        start: {
          line: 299,
          column: 65
        },
        end: {
          line: 299,
          column: 73
        }
      },
      "67": {
        start: {
          line: 300,
          column: 27
        },
        end: {
          line: 300,
          column: 135
        }
      },
      "68": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "69": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 56
        }
      },
      "70": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "71": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 339,
          column: 3
        }
      },
      "72": {
        start: {
          line: 319,
          column: 4
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "73": {
        start: {
          line: 320,
          column: 35
        },
        end: {
          line: 320,
          column: 45
        }
      },
      "74": {
        start: {
          line: 321,
          column: 111
        },
        end: {
          line: 321,
          column: 119
        }
      },
      "75": {
        start: {
          line: 322,
          column: 27
        },
        end: {
          line: 326,
          column: 10
        }
      },
      "76": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 330,
          column: 11
        }
      },
      "77": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 55
        }
      },
      "78": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "79": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 359,
          column: 3
        }
      },
      "80": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 358,
          column: 5
        }
      },
      "81": {
        start: {
          line: 346,
          column: 22
        },
        end: {
          line: 346,
          column: 87
        }
      },
      "82": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 350,
          column: 11
        }
      },
      "83": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 67
        }
      },
      "84": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "85": {
        start: {
          line: 365,
          column: 0
        },
        end: {
          line: 380,
          column: 3
        }
      },
      "86": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 379,
          column: 5
        }
      },
      "87": {
        start: {
          line: 367,
          column: 22
        },
        end: {
          line: 367,
          column: 81
        }
      },
      "88": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 371,
          column: 11
        }
      },
      "89": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 57
        }
      },
      "90": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 378,
          column: 11
        }
      },
      "91": {
        start: {
          line: 385,
          column: 0
        },
        end: {
          line: 407,
          column: 3
        }
      },
      "92": {
        start: {
          line: 386,
          column: 4
        },
        end: {
          line: 406,
          column: 5
        }
      },
      "93": {
        start: {
          line: 387,
          column: 28
        },
        end: {
          line: 387,
          column: 38
        }
      },
      "94": {
        start: {
          line: 388,
          column: 22
        },
        end: {
          line: 388,
          column: 69
        }
      },
      "95": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "96": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 393,
          column: 15
        }
      },
      "97": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 398,
          column: 11
        }
      },
      "98": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 53
        }
      },
      "99": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 405,
          column: 11
        }
      },
      "100": {
        start: {
          line: 412,
          column: 0
        },
        end: {
          line: 427,
          column: 3
        }
      },
      "101": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 426,
          column: 5
        }
      },
      "102": {
        start: {
          line: 414,
          column: 29
        },
        end: {
          line: 414,
          column: 81
        }
      },
      "103": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 418,
          column: 11
        }
      },
      "104": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 56
        }
      },
      "105": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 425,
          column: 11
        }
      },
      "106": {
        start: {
          line: 432,
          column: 0
        },
        end: {
          line: 454,
          column: 3
        }
      },
      "107": {
        start: {
          line: 433,
          column: 4
        },
        end: {
          line: 453,
          column: 5
        }
      },
      "108": {
        start: {
          line: 434,
          column: 43
        },
        end: {
          line: 434,
          column: 51
        }
      },
      "109": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 440,
          column: 9
        }
      },
      "110": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 439,
          column: 15
        }
      },
      "111": {
        start: {
          line: 441,
          column: 27
        },
        end: {
          line: 441,
          column: 100
        }
      },
      "112": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 445,
          column: 11
        }
      },
      "113": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 56
        }
      },
      "114": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 452,
          column: 11
        }
      },
      "115": {
        start: {
          line: 459,
          column: 0
        },
        end: {
          line: 479,
          column: 3
        }
      },
      "116": {
        start: {
          line: 460,
          column: 4
        },
        end: {
          line: 478,
          column: 5
        }
      },
      "117": {
        start: {
          line: 461,
          column: 28
        },
        end: {
          line: 461,
          column: 38
        }
      },
      "118": {
        start: {
          line: 462,
          column: 26
        },
        end: {
          line: 465,
          column: 21
        }
      },
      "119": {
        start: {
          line: 466,
          column: 22
        },
        end: {
          line: 466,
          column: 90
        }
      },
      "120": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 470,
          column: 11
        }
      },
      "121": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 59
        }
      },
      "122": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 477,
          column: 11
        }
      },
      "123": {
        start: {
          line: 484,
          column: 0
        },
        end: {
          line: 504,
          column: 3
        }
      },
      "124": {
        start: {
          line: 485,
          column: 4
        },
        end: {
          line: 503,
          column: 5
        }
      },
      "125": {
        start: {
          line: 486,
          column: 28
        },
        end: {
          line: 486,
          column: 38
        }
      },
      "126": {
        start: {
          line: 487,
          column: 25
        },
        end: {
          line: 487,
          column: 86
        }
      },
      "127": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 495,
          column: 11
        }
      },
      "128": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 62
        }
      },
      "129": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 502,
          column: 11
        }
      },
      "130": {
        start: {
          line: 509,
          column: 0
        },
        end: {
          line: 525,
          column: 3
        }
      },
      "131": {
        start: {
          line: 510,
          column: 4
        },
        end: {
          line: 524,
          column: 5
        }
      },
      "132": {
        start: {
          line: 511,
          column: 28
        },
        end: {
          line: 511,
          column: 38
        }
      },
      "133": {
        start: {
          line: 512,
          column: 29
        },
        end: {
          line: 512,
          column: 95
        }
      },
      "134": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 516,
          column: 11
        }
      },
      "135": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 519,
          column: 54
        }
      },
      "136": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 523,
          column: 11
        }
      },
      "137": {
        start: {
          line: 530,
          column: 0
        },
        end: {
          line: 547,
          column: 3
        }
      },
      "138": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 546,
          column: 5
        }
      },
      "139": {
        start: {
          line: 532,
          column: 28
        },
        end: {
          line: 532,
          column: 38
        }
      },
      "140": {
        start: {
          line: 533,
          column: 22
        },
        end: {
          line: 533,
          column: 48
        }
      },
      "141": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 534,
          column: 72
        }
      },
      "142": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 538,
          column: 11
        }
      },
      "143": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 541,
          column: 54
        }
      },
      "144": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 545,
          column: 11
        }
      },
      "145": {
        start: {
          line: 552,
          column: 0
        },
        end: {
          line: 567,
          column: 3
        }
      },
      "146": {
        start: {
          line: 553,
          column: 4
        },
        end: {
          line: 566,
          column: 5
        }
      },
      "147": {
        start: {
          line: 554,
          column: 22
        },
        end: {
          line: 554,
          column: 75
        }
      },
      "148": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 558,
          column: 11
        }
      },
      "149": {
        start: {
          line: 561,
          column: 8
        },
        end: {
          line: 561,
          column: 67
        }
      },
      "150": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 565,
          column: 11
        }
      },
      "151": {
        start: {
          line: 572,
          column: 0
        },
        end: {
          line: 601,
          column: 3
        }
      },
      "152": {
        start: {
          line: 573,
          column: 4
        },
        end: {
          line: 600,
          column: 5
        }
      },
      "153": {
        start: {
          line: 574,
          column: 23
        },
        end: {
          line: 588,
          column: 9
        }
      },
      "154": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 592,
          column: 11
        }
      },
      "155": {
        start: {
          line: 595,
          column: 8
        },
        end: {
          line: 595,
          column: 63
        }
      },
      "156": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 599,
          column: 11
        }
      },
      "157": {
        start: {
          line: 602,
          column: 0
        },
        end: {
          line: 602,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 146,
            column: 73
          },
          end: {
            line: 146,
            column: 74
          }
        },
        loc: {
          start: {
            line: 146,
            column: 93
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 146
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 171,
            column: 34
          },
          end: {
            line: 171,
            column: 35
          }
        },
        loc: {
          start: {
            line: 171,
            column: 54
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 171
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 192,
            column: 27
          },
          end: {
            line: 192,
            column: 28
          }
        },
        loc: {
          start: {
            line: 192,
            column: 47
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 192
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 219,
            column: 21
          }
        },
        loc: {
          start: {
            line: 219,
            column: 40
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 219
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 251,
            column: 36
          }
        },
        loc: {
          start: {
            line: 251,
            column: 55
          },
          end: {
            line: 267,
            column: 1
          }
        },
        line: 251
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 272,
            column: 82
          },
          end: {
            line: 272,
            column: 83
          }
        },
        loc: {
          start: {
            line: 272,
            column: 102
          },
          end: {
            line: 291,
            column: 1
          }
        },
        line: 272
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 296,
            column: 36
          },
          end: {
            line: 296,
            column: 37
          }
        },
        loc: {
          start: {
            line: 296,
            column: 56
          },
          end: {
            line: 313,
            column: 1
          }
        },
        line: 296
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 318,
            column: 39
          },
          end: {
            line: 318,
            column: 40
          }
        },
        loc: {
          start: {
            line: 318,
            column: 59
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 318
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 344,
            column: 26
          },
          end: {
            line: 344,
            column: 27
          }
        },
        loc: {
          start: {
            line: 344,
            column: 46
          },
          end: {
            line: 359,
            column: 1
          }
        },
        line: 344
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 365,
            column: 78
          },
          end: {
            line: 365,
            column: 79
          }
        },
        loc: {
          start: {
            line: 365,
            column: 98
          },
          end: {
            line: 380,
            column: 1
          }
        },
        line: 365
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 385,
            column: 31
          },
          end: {
            line: 385,
            column: 32
          }
        },
        loc: {
          start: {
            line: 385,
            column: 51
          },
          end: {
            line: 407,
            column: 1
          }
        },
        line: 385
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 412,
            column: 79
          },
          end: {
            line: 412,
            column: 80
          }
        },
        loc: {
          start: {
            line: 412,
            column: 99
          },
          end: {
            line: 427,
            column: 1
          }
        },
        line: 412
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 432,
            column: 31
          },
          end: {
            line: 432,
            column: 32
          }
        },
        loc: {
          start: {
            line: 432,
            column: 51
          },
          end: {
            line: 454,
            column: 1
          }
        },
        line: 432
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 459,
            column: 37
          },
          end: {
            line: 459,
            column: 38
          }
        },
        loc: {
          start: {
            line: 459,
            column: 57
          },
          end: {
            line: 479,
            column: 1
          }
        },
        line: 459
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 484,
            column: 40
          },
          end: {
            line: 484,
            column: 41
          }
        },
        loc: {
          start: {
            line: 484,
            column: 60
          },
          end: {
            line: 504,
            column: 1
          }
        },
        line: 484
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 509,
            column: 31
          },
          end: {
            line: 509,
            column: 32
          }
        },
        loc: {
          start: {
            line: 509,
            column: 51
          },
          end: {
            line: 525,
            column: 1
          }
        },
        line: 509
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 530,
            column: 34
          },
          end: {
            line: 530,
            column: 35
          }
        },
        loc: {
          start: {
            line: 530,
            column: 54
          },
          end: {
            line: 547,
            column: 1
          }
        },
        line: 530
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 552,
            column: 35
          },
          end: {
            line: 552,
            column: 36
          }
        },
        loc: {
          start: {
            line: 552,
            column: 55
          },
          end: {
            line: 567,
            column: 1
          }
        },
        line: 552
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 572,
            column: 22
          },
          end: {
            line: 572,
            column: 23
          }
        },
        loc: {
          start: {
            line: 572,
            column: 42
          },
          end: {
            line: 601,
            column: 1
          }
        },
        line: 572
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 163,
            column: 19
          },
          end: {
            line: 163,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 44
          },
          end: {
            line: 163,
            column: 57
          }
        }, {
          start: {
            line: 163,
            column: 60
          },
          end: {
            line: 163,
            column: 91
          }
        }],
        line: 163
      },
      "4": {
        loc: {
          start: {
            line: 184,
            column: 19
          },
          end: {
            line: 184,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 44
          },
          end: {
            line: 184,
            column: 57
          }
        }, {
          start: {
            line: 184,
            column: 60
          },
          end: {
            line: 184,
            column: 90
          }
        }],
        line: 184
      },
      "5": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "6": {
        loc: {
          start: {
            line: 211,
            column: 19
          },
          end: {
            line: 211,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 44
          },
          end: {
            line: 211,
            column: 57
          }
        }, {
          start: {
            line: 211,
            column: 60
          },
          end: {
            line: 211,
            column: 88
          }
        }],
        line: 211
      },
      "7": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "8": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 225,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 225,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "9": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 227,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 227,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "10": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 229,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 229,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "11": {
        loc: {
          start: {
            line: 243,
            column: 19
          },
          end: {
            line: 243,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 44
          },
          end: {
            line: 243,
            column: 57
          }
        }, {
          start: {
            line: 243,
            column: 60
          },
          end: {
            line: 243,
            column: 90
          }
        }],
        line: 243
      },
      "12": {
        loc: {
          start: {
            line: 264,
            column: 19
          },
          end: {
            line: 264,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 264,
            column: 44
          },
          end: {
            line: 264,
            column: 57
          }
        }, {
          start: {
            line: 264,
            column: 60
          },
          end: {
            line: 264,
            column: 91
          }
        }],
        line: 264
      },
      "13": {
        loc: {
          start: {
            line: 288,
            column: 19
          },
          end: {
            line: 288,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 44
          },
          end: {
            line: 288,
            column: 57
          }
        }, {
          start: {
            line: 288,
            column: 60
          },
          end: {
            line: 288,
            column: 95
          }
        }],
        line: 288
      },
      "14": {
        loc: {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 299,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 299,
            column: 37
          },
          end: {
            line: 299,
            column: 39
          }
        }],
        line: 299
      },
      "15": {
        loc: {
          start: {
            line: 299,
            column: 41
          },
          end: {
            line: 299,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 299,
            column: 58
          },
          end: {
            line: 299,
            column: 60
          }
        }],
        line: 299
      },
      "16": {
        loc: {
          start: {
            line: 310,
            column: 19
          },
          end: {
            line: 310,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 44
          },
          end: {
            line: 310,
            column: 57
          }
        }, {
          start: {
            line: 310,
            column: 60
          },
          end: {
            line: 310,
            column: 86
          }
        }],
        line: 310
      },
      "17": {
        loc: {
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 321,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 321,
            column: 25
          },
          end: {
            line: 321,
            column: 32
          }
        }],
        line: 321
      },
      "18": {
        loc: {
          start: {
            line: 321,
            column: 34
          },
          end: {
            line: 321,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 321,
            column: 50
          },
          end: {
            line: 321,
            column: 54
          }
        }],
        line: 321
      },
      "19": {
        loc: {
          start: {
            line: 321,
            column: 56
          },
          end: {
            line: 321,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 321,
            column: 79
          },
          end: {
            line: 321,
            column: 84
          }
        }],
        line: 321
      },
      "20": {
        loc: {
          start: {
            line: 321,
            column: 86
          },
          end: {
            line: 321,
            column: 106
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 321,
            column: 104
          },
          end: {
            line: 321,
            column: 106
          }
        }],
        line: 321
      },
      "21": {
        loc: {
          start: {
            line: 336,
            column: 19
          },
          end: {
            line: 336,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 336,
            column: 44
          },
          end: {
            line: 336,
            column: 57
          }
        }, {
          start: {
            line: 336,
            column: 60
          },
          end: {
            line: 336,
            column: 84
          }
        }],
        line: 336
      },
      "22": {
        loc: {
          start: {
            line: 356,
            column: 19
          },
          end: {
            line: 356,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 44
          },
          end: {
            line: 356,
            column: 57
          }
        }, {
          start: {
            line: 356,
            column: 60
          },
          end: {
            line: 356,
            column: 95
          }
        }],
        line: 356
      },
      "23": {
        loc: {
          start: {
            line: 377,
            column: 19
          },
          end: {
            line: 377,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 377,
            column: 44
          },
          end: {
            line: 377,
            column: 57
          }
        }, {
          start: {
            line: 377,
            column: 60
          },
          end: {
            line: 377,
            column: 86
          }
        }],
        line: 377
      },
      "24": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "25": {
        loc: {
          start: {
            line: 404,
            column: 19
          },
          end: {
            line: 404,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 404,
            column: 44
          },
          end: {
            line: 404,
            column: 57
          }
        }, {
          start: {
            line: 404,
            column: 60
          },
          end: {
            line: 404,
            column: 81
          }
        }],
        line: 404
      },
      "26": {
        loc: {
          start: {
            line: 424,
            column: 19
          },
          end: {
            line: 424,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 424,
            column: 44
          },
          end: {
            line: 424,
            column: 57
          }
        }, {
          start: {
            line: 424,
            column: 60
          },
          end: {
            line: 424,
            column: 85
          }
        }],
        line: 424
      },
      "27": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 440,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 440,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "28": {
        loc: {
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 23
          }
        }, {
          start: {
            line: 435,
            column: 27
          },
          end: {
            line: 435,
            column: 38
          }
        }],
        line: 435
      },
      "29": {
        loc: {
          start: {
            line: 451,
            column: 19
          },
          end: {
            line: 451,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 451,
            column: 44
          },
          end: {
            line: 451,
            column: 57
          }
        }, {
          start: {
            line: 451,
            column: 60
          },
          end: {
            line: 451,
            column: 86
          }
        }],
        line: 451
      },
      "30": {
        loc: {
          start: {
            line: 462,
            column: 26
          },
          end: {
            line: 465,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 462,
            column: 61
          },
          end: {
            line: 465,
            column: 9
          }
        }, {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 465,
            column: 21
          }
        }],
        line: 462
      },
      "31": {
        loc: {
          start: {
            line: 462,
            column: 26
          },
          end: {
            line: 462,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 26
          },
          end: {
            line: 462,
            column: 41
          }
        }, {
          start: {
            line: 462,
            column: 45
          },
          end: {
            line: 462,
            column: 58
          }
        }],
        line: 462
      },
      "32": {
        loc: {
          start: {
            line: 476,
            column: 19
          },
          end: {
            line: 476,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 476,
            column: 44
          },
          end: {
            line: 476,
            column: 57
          }
        }, {
          start: {
            line: 476,
            column: 60
          },
          end: {
            line: 476,
            column: 87
          }
        }],
        line: 476
      },
      "33": {
        loc: {
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 501,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 501,
            column: 44
          },
          end: {
            line: 501,
            column: 57
          }
        }, {
          start: {
            line: 501,
            column: 60
          },
          end: {
            line: 501,
            column: 90
          }
        }],
        line: 501
      },
      "34": {
        loc: {
          start: {
            line: 522,
            column: 19
          },
          end: {
            line: 522,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 522,
            column: 44
          },
          end: {
            line: 522,
            column: 57
          }
        }, {
          start: {
            line: 522,
            column: 60
          },
          end: {
            line: 522,
            column: 84
          }
        }],
        line: 522
      },
      "35": {
        loc: {
          start: {
            line: 544,
            column: 19
          },
          end: {
            line: 544,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 544,
            column: 44
          },
          end: {
            line: 544,
            column: 57
          }
        }, {
          start: {
            line: 544,
            column: 60
          },
          end: {
            line: 544,
            column: 84
          }
        }],
        line: 544
      },
      "36": {
        loc: {
          start: {
            line: 564,
            column: 19
          },
          end: {
            line: 564,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 564,
            column: 44
          },
          end: {
            line: 564,
            column: 57
          }
        }, {
          start: {
            line: 564,
            column: 60
          },
          end: {
            line: 564,
            column: 95
          }
        }],
        line: 564
      },
      "37": {
        loc: {
          start: {
            line: 598,
            column: 19
          },
          end: {
            line: 598,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 598,
            column: 44
          },
          end: {
            line: 598,
            column: 57
          }
        }, {
          start: {
            line: 598,
            column: 60
          },
          end: {
            line: 598,
            column: 97
          }
        }],
        line: 598
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/training.ts",
      mappings: ";;;;;AAAA,sDAA8B;AAC9B,kFAA+E;AAC/E,sEAAmE;AACnE,yDAAsD;AACtD,8CAAsB;AAEtB,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,qBAAqB;AACrB,MAAM,oBAAoB,GAAG,aAAG,CAAC,MAAM,CAAC;IACtC,IAAI,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;IAC7C,KAAK,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,YAAY,EAAE,aAAG,CAAC,MAAM,CAAC;QACvB,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,QAAQ,EAAE;QAC7E,IAAI,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,aAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;QACvE,KAAK,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,aAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;QAC5E,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,aAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;QAC1E,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAE;QACvE,gBAAgB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;KAC5D,CAAC,CAAC,QAAQ,EAAE;IACb,eAAe,EAAE,aAAG,CAAC,MAAM,CAAC;QAC1B,aAAa,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QAC1D,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;QAC9D,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;QAC1D,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACtD,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;QACtD,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;QACrD,kBAAkB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;KACrD,CAAC,CAAC,QAAQ,EAAE;IACb,YAAY,EAAE,aAAG,CAAC,MAAM,CAAC;QACvB,SAAS,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QACjF,SAAS,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;QAChG,cAAc,EAAE,aAAG,CAAC,MAAM,CAAC;YACzB,OAAO,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YACpC,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAClD,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAC/C,SAAS,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;SAC9C,CAAC,CAAC,OAAO,EAAE;KACb,CAAC,CAAC,OAAO,EAAE;IACZ,UAAU,EAAE,aAAG,CAAC,MAAM,CAAC;QACrB,OAAO,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAC1E,kBAAkB,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;QAC/D,oBAAoB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9D,eAAe,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;KAC7C,CAAC,CAAC,OAAO,EAAE;IACZ,SAAS,EAAE,aAAG,CAAC,MAAM,CAAC;QACpB,gBAAgB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,SAAS,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QACxC,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,aAAa,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7C,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IACd,UAAU,EAAE,aAAG,CAAC,MAAM,CAAC;QACrB,WAAW,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QACzC,iBAAiB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QACjG,mBAAmB,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;QAChD,oBAAoB,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;KAClD,CAAC,CAAC,OAAO,EAAE;IACZ,QAAQ,EAAE,aAAG,CAAC,MAAM,CAAC;QACnB,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;QACrC,IAAI,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;QACjD,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE;QACxB,kBAAkB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC;KAChE,CAAC,CAAC,OAAO,EAAE;CACb,CAAC,CAAC;AAEH,MAAM,mBAAmB,GAAG,aAAG,CAAC,MAAM,CAAC;IACrC,gBAAgB,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IACnE,iBAAiB,EAAE,aAAG,CAAC,MAAM,CAAC;QAC5B,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;QACjE,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;QACpD,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;QACjE,iBAAiB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;QAC1D,cAAc,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;KAC5C,CAAC,CAAC,QAAQ,EAAE;IACb,aAAa,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;CAC1E,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,aAAG,CAAC,MAAM,CAAC;IACzC,IAAI,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;IAC7C,OAAO,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACpC,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,OAAO,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,IAAI,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IACjD,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE;IAC9F,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE;IACxB,eAAe,EAAE,aAAG,CAAC,MAAM,EAAE;IAC7B,OAAO,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IACjD,eAAe,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IACzD,YAAY,EAAE,aAAG,CAAC,MAAM,CAAC;QACvB,YAAY,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QACrC,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QAChD,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QACrD,eAAe,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QACzD,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QACpD,mBAAmB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;KAC9D,CAAC,CAAC,QAAQ,EAAE;IACb,YAAY,EAAE,aAAG,CAAC,MAAM,CAAC;QACvB,eAAe,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QAC7C,mBAAmB,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QACjD,kBAAkB,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QAChD,aAAa,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QAC3C,eAAe,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QAC7C,oBAAoB,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;QAClD,UAAU,EAAE,aAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;KACzC,CAAC,CAAC,OAAO,EAAE;IACZ,mBAAmB,EAAE,aAAG,CAAC,MAAM,CAAC;QAC9B,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/B,oBAAoB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QACpD,yBAAyB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;QACzD,eAAe,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;KAChD,CAAC,CAAC,QAAQ,EAAE;IACb,SAAS,EAAE,aAAG,CAAC,MAAM,EAAE;IACvB,WAAW,EAAE,aAAG,CAAC,MAAM,EAAE;IACzB,cAAc,EAAE,aAAG,CAAC,MAAM,EAAE;CAC7B,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,aAAG,CAAC,MAAM,CAAC;IACnC,KAAK,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;IAC7B,OAAO,EAAE,aAAG,CAAC,MAAM,CAAC;QAClB,UAAU,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QACtG,YAAY,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC;QAC7C,UAAU,EAAE,aAAG,CAAC,MAAM,CAAC;YACrB,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YACrC,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;SACtC,CAAC;QACF,qBAAqB,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,aAAG,CAAC,MAAM,EAAE,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC;QACvE,iBAAiB,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACvG,IAAI,EAAE,aAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC;QACrC,aAAa,EAAE,aAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE;QAC/B,cAAc,EAAE,aAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE;KACjC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IACd,OAAO,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;IAC1G,UAAU,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7D,KAAK,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IACzD,MAAM,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;CACjD,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAA,uBAAU,EAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACxE,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,yCAAmB,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,MAAM,EAAE,GAAG,CAAC,EAAE;gBACd,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU;aAC3C;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,+BAA+B;SAChF,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACnD,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC7B,MAAM,yCAAmB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAElD,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,gBAAgB,KAAK,uBAAuB;SACtD,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,8BAA8B;SAC/E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC5C,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC7B,MAAM,GAAG,GAAG,yCAAmB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAEtD,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,wBAAwB;aAChC,CAAC,CAAC;QACL,CAAC;QAED,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,GAAG;SACV,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;SAC7E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACrC,IAAI,CAAC;QACH,MAAM,OAAO,GAAQ,EAAE,CAAC;QAExB,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM;YAAE,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,MAAgB,CAAC;QAClE,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK;YAAE,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAe,CAAC;QAC/D,IAAI,GAAG,CAAC,KAAK,CAAC,aAAa;YAAE,OAAO,CAAC,aAAa,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAuB,CAAC,CAAC;QACjG,IAAI,GAAG,CAAC,KAAK,CAAC,cAAc;YAAE,OAAO,CAAC,cAAc,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,cAAwB,CAAC,CAAC;QAEpG,MAAM,IAAI,GAAG,yCAAmB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE3D,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,IAAI;gBACJ,WAAW,EAAE,IAAI,CAAC,MAAM;aACzB;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,8BAA8B;SAC/E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC7B,MAAM,yCAAmB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAEnD,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,gBAAgB,KAAK,yBAAyB;SACxD,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,+BAA+B;SAChF,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAA,uBAAU,EAAC,mBAAmB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACjF,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,yCAAmB,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE7E,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,WAAW,EAAE,UAAU;gBACvB,iBAAiB,EAAE,GAAG,CAAC,IAAI,CAAC,iBAAiB;gBAC7C,cAAc,EAAE,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM;aACjD;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QACzD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mCAAmC;SACpF,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACrD,IAAI,CAAC;QACH,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,MAAM,EAAE,kBAAkB,GAAG,EAAE,EAAE,cAAc,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAElE,MAAM,UAAU,GAAG,MAAM,yCAAmB,CAAC,aAAa,CACxD,SAAS,EACT,kBAAkB,EAClB,cAAc,CACf,CAAC;QAEF,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,UAAU;SACjB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B;SAC3E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACxD,IAAI,CAAC;QACH,MAAM,EAAE,cAAc,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACtC,MAAM,EACJ,MAAM,GAAG,OAAO,EAChB,aAAa,GAAG,IAAI,EACpB,oBAAoB,GAAG,KAAK,EAC5B,eAAe,GAAG,EAAE,EACrB,GAAG,GAAG,CAAC,IAAI,CAAC;QAEb,MAAM,UAAU,GAAG,MAAM,yCAAmB,CAAC,WAAW,CACtD,cAAc,EACd,MAAM,EACN;YACE,aAAa;YACb,oBAAoB;YACpB,eAAe;SAChB,CACF,CAAC;QAEF,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,UAAU;SACjB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAwB;SACzE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3C,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,yCAAmB,CAAC,qBAAqB,EAAE,CAAC;QAE1D,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;QAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mCAAmC;SACpF,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,wBAAwB;AAExB;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAA,uBAAU,EAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC7E,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,MAAM,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;QACjD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B;SAC3E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAChD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,KAAK,GAAG,6BAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAE9C,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,iBAAiB;aACzB,CAAC,CAAC;QACL,CAAC;QAED,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QAC7C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB;SACtE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAA,uBAAU,EAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9E,IAAI,CAAC;QACH,MAAM,YAAY,GAAG,6BAAa,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE1D,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,YAAY;SACnB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,yBAAyB;SAC1E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAChD,IAAI,CAAC;QACH,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE5C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,6CAA6C;aACrD,CAAC,CAAC;QACL,CAAC;QAED,MAAM,UAAU,GAAG,MAAM,6BAAa,CAAC,aAAa,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAE7E,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,UAAU;SACjB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B;SAC3E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACtD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,KAAK,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAe,CAAC;YAC1C,GAAG,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAa,CAAC;SACvC,CAAC,CAAC,CAAC,SAAS,CAAC;QAEd,MAAM,KAAK,GAAG,6BAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAEnE,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B;SAC5E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACzD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,QAAQ,GAAG,6BAAa,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAE/D,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,QAAQ,EAAE,OAAO;gBACjB,QAAQ;gBACR,cAAc,EAAE,QAAQ,CAAC,MAAM;aAChC;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACtD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,8BAA8B;SAC/E,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAChD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,YAAY,GAAG,MAAM,6BAAa,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAExE,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,YAAY;SACnB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAwB;SACzE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACnD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,CAAC;QAEzC,MAAM,6BAAa,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAEhD,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,SAAS,OAAO,uBAAuB;SACjD,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAwB;SACzE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,sBAAsB,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,6BAAa,CAAC,qBAAqB,EAAE,CAAC;QAEpD,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;QAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mCAAmC;SACpF,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACvC,IAAI,CAAC;QACH,MAAM,MAAM,GAAG;YACb,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,UAAU,EAAE;gBACV,eAAe,EAAE,SAAS;gBAC1B,cAAc,EAAE,SAAS;gBACzB,UAAU,EAAE,SAAS;aACtB;YACD,UAAU,EAAE;gBACV,WAAW,EAAE,yCAAmB,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM;gBAChF,YAAY,EAAE,6BAAa,CAAC,qBAAqB,EAAE,CAAC,YAAY;gBAChE,WAAW,EAAE,OAAO,CAAC,QAAQ,EAAE;gBAC/B,YAAY,EAAE,OAAO,CAAC,WAAW,EAAE;aACpC;SACF,CAAC;QAEF,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,MAAM;SACb,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qCAAqC;SACtF,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/training.ts"],
      sourcesContent: ["import express from 'express';\nimport { modelTrainingEngine } from '../services/training/ModelTrainingEngine';\nimport { modelRegistry } from '../services/training/ModelRegistry';\nimport { validation } from '../middleware/validation';\nimport Joi from 'joi';\n\nconst router = express.Router();\n\n// Validation schemas\nconst trainingConfigSchema = Joi.object({\n  name: Joi.string().required().min(1).max(100),\n  model: Joi.string().required(),\n  trainingData: Joi.object({\n    source: Joi.string().valid('file', 'database', 'api', 'synthetic').required(),\n    path: Joi.string().when('source', { is: 'file', then: Joi.required() }),\n    query: Joi.string().when('source', { is: 'database', then: Joi.required() }),\n    endpoint: Joi.string().when('source', { is: 'api', then: Joi.required() }),\n    format: Joi.string().valid('jsonl', 'csv', 'txt', 'parquet').required(),\n    validation_split: Joi.number().min(0.1).max(0.9).required()\n  }).required(),\n  hyperparameters: Joi.object({\n    learning_rate: Joi.number().min(0.00001).max(1).required(),\n    batch_size: Joi.number().integer().min(1).max(1024).required(),\n    epochs: Joi.number().integer().min(1).max(1000).required(),\n    warmup_steps: Joi.number().integer().min(0).default(0),\n    weight_decay: Joi.number().min(0).max(1).default(0.01),\n    dropout_rate: Joi.number().min(0).max(1).default(0.1),\n    gradient_clip_norm: Joi.number().min(0).default(1.0)\n  }).required(),\n  optimization: Joi.object({\n    optimizer: Joi.string().valid('adam', 'adamw', 'sgd', 'rmsprop').default('adamw'),\n    scheduler: Joi.string().valid('linear', 'cosine', 'exponential', 'polynomial').default('linear'),\n    early_stopping: Joi.object({\n      enabled: Joi.boolean().default(true),\n      patience: Joi.number().integer().min(1).default(5),\n      metric: Joi.string().default('validation_loss'),\n      min_delta: Joi.number().min(0).default(0.001)\n    }).default()\n  }).default(),\n  evaluation: Joi.object({\n    metrics: Joi.array().items(Joi.string()).default(['accuracy', 'f1_score']),\n    benchmark_datasets: Joi.array().items(Joi.string()).default([]),\n    validation_frequency: Joi.number().integer().min(1).default(1),\n    save_best_model: Joi.boolean().default(true)\n  }).default(),\n  resources: Joi.object({\n    gpu_memory_limit: Joi.number().integer().min(1),\n    cpu_cores: Joi.number().integer().min(1),\n    memory_limit: Joi.number().integer().min(1),\n    storage_limit: Joi.number().integer().min(1)\n  }).default({}),\n  deployment: Joi.object({\n    auto_deploy: Joi.boolean().default(false),\n    deployment_target: Joi.string().valid('ollama', 'huggingface', 'local', 'cloud').default('local'),\n    rollback_on_failure: Joi.boolean().default(true),\n    health_check_enabled: Joi.boolean().default(true)\n  }).default(),\n  metadata: Joi.object({\n    description: Joi.string().default(''),\n    tags: Joi.array().items(Joi.string()).default([]),\n    base_model: Joi.string(),\n    training_objective: Joi.string().default('general_improvement')\n  }).default()\n});\n\nconst syntheticDataSchema = Joi.object({\n  template_prompts: Joi.array().items(Joi.string()).min(1).required(),\n  generation_config: Joi.object({\n    num_samples: Joi.number().integer().min(1).max(100000).required(),\n    temperature: Joi.number().min(0).max(2).default(0.7),\n    max_tokens: Joi.number().integer().min(10).max(4096).default(512),\n    diversity_penalty: Joi.number().min(0).max(2).default(0.5),\n    quality_filter: Joi.boolean().default(true)\n  }).required(),\n  output_format: Joi.string().valid('jsonl', 'csv', 'txt').default('jsonl')\n});\n\nconst modelRegistrationSchema = Joi.object({\n  name: Joi.string().required().min(1).max(100),\n  version: Joi.string().required(),\n  description: Joi.string().required(),\n  author: Joi.string().required(),\n  license: Joi.string().required(),\n  tags: Joi.array().items(Joi.string()).default([]),\n  model_type: Joi.string().valid('foundation', 'fine_tuned', 'specialized', 'custom').required(),\n  base_model: Joi.string(),\n  training_job_id: Joi.string(),\n  size_mb: Joi.number().integer().min(1).required(),\n  parameter_count: Joi.number().integer().min(1).required(),\n  architecture: Joi.object({\n    model_family: Joi.string().required(),\n    layers: Joi.number().integer().min(1).required(),\n    hidden_size: Joi.number().integer().min(1).required(),\n    attention_heads: Joi.number().integer().min(1).required(),\n    vocab_size: Joi.number().integer().min(1).required(),\n    max_sequence_length: Joi.number().integer().min(1).required()\n  }).required(),\n  capabilities: Joi.object({\n    text_generation: Joi.boolean().default(false),\n    text_classification: Joi.boolean().default(false),\n    question_answering: Joi.boolean().default(false),\n    summarization: Joi.boolean().default(false),\n    code_generation: Joi.boolean().default(false),\n    embedding_generation: Joi.boolean().default(false),\n    multimodal: Joi.boolean().default(false)\n  }).default(),\n  performance_metrics: Joi.object({\n    accuracy: Joi.number().min(0).max(1),\n    f1_score: Joi.number().min(0).max(1),\n    bleu_score: Joi.number().min(0).max(1),\n    rouge_score: Joi.number().min(0).max(1),\n    perplexity: Joi.number().min(1),\n    inference_latency_ms: Joi.number().min(0).required(),\n    throughput_tokens_per_sec: Joi.number().min(0).required(),\n    memory_usage_mb: Joi.number().min(0).required()\n  }).required(),\n  file_path: Joi.string(),\n  config_path: Joi.string(),\n  tokenizer_path: Joi.string()\n});\n\nconst modelSearchSchema = Joi.object({\n  query: Joi.string().allow(''),\n  filters: Joi.object({\n    model_type: Joi.array().items(Joi.string().valid('foundation', 'fine_tuned', 'specialized', 'custom')),\n    capabilities: Joi.array().items(Joi.string()),\n    size_range: Joi.object({\n      min_mb: Joi.number().integer().min(0),\n      max_mb: Joi.number().integer().min(0)\n    }),\n    performance_threshold: Joi.object().pattern(Joi.string(), Joi.number()),\n    deployment_status: Joi.array().items(Joi.string().valid('pending', 'deployed', 'deprecated', 'failed')),\n    tags: Joi.array().items(Joi.string()),\n    created_after: Joi.date().iso(),\n    created_before: Joi.date().iso()\n  }).default({}),\n  sort_by: Joi.string().valid('name', 'created_at', 'size_mb', 'performance', 'usage').default('created_at'),\n  sort_order: Joi.string().valid('asc', 'desc').default('desc'),\n  limit: Joi.number().integer().min(1).max(100).default(20),\n  offset: Joi.number().integer().min(0).default(0)\n});\n\n/**\n * @route POST /api/training/jobs\n * @desc Create a new training job\n */\nrouter.post('/jobs', validation(trainingConfigSchema), async (req, res) => {\n  try {\n    const job = await modelTrainingEngine.createTrainingJob(req.body);\n    \n    res.status(201).json({\n      success: true,\n      data: {\n        job_id: job.id,\n        status: job.status,\n        config: job.config,\n        created_at: job.config.metadata.created_at\n      }\n    });\n  } catch (error) {\n    console.error('Error creating training job:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to create training job'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/jobs/:jobId/start\n * @desc Start a training job\n */\nrouter.post('/jobs/:jobId/start', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    await modelTrainingEngine.startTrainingJob(jobId);\n    \n    res.json({\n      success: true,\n      message: `Training job ${jobId} started successfully`\n    });\n  } catch (error) {\n    console.error('Error starting training job:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to start training job'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/jobs/:jobId\n * @desc Get training job details\n */\nrouter.get('/jobs/:jobId', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    const job = modelTrainingEngine.getTrainingJob(jobId);\n    \n    if (!job) {\n      return res.status(404).json({\n        success: false,\n        error: 'Training job not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: job\n    });\n  } catch (error) {\n    console.error('Error getting training job:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get training job'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/jobs\n * @desc List training jobs with filters\n */\nrouter.get('/jobs', async (req, res) => {\n  try {\n    const filters: any = {};\n    \n    if (req.query.status) filters.status = req.query.status as string;\n    if (req.query.model) filters.model = req.query.model as string;\n    if (req.query.created_after) filters.created_after = new Date(req.query.created_after as string);\n    if (req.query.created_before) filters.created_before = new Date(req.query.created_before as string);\n    \n    const jobs = modelTrainingEngine.listTrainingJobs(filters);\n    \n    res.json({\n      success: true,\n      data: {\n        jobs,\n        total_count: jobs.length\n      }\n    });\n  } catch (error) {\n    console.error('Error listing training jobs:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to list training jobs'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/jobs/:jobId/cancel\n * @desc Cancel a training job\n */\nrouter.post('/jobs/:jobId/cancel', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    await modelTrainingEngine.cancelTrainingJob(jobId);\n    \n    res.json({\n      success: true,\n      message: `Training job ${jobId} cancelled successfully`\n    });\n  } catch (error) {\n    console.error('Error cancelling training job:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to cancel training job'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/synthetic-data\n * @desc Generate synthetic training data\n */\nrouter.post('/synthetic-data', validation(syntheticDataSchema), async (req, res) => {\n  try {\n    const outputPath = await modelTrainingEngine.generateSyntheticData(req.body);\n    \n    res.json({\n      success: true,\n      data: {\n        output_path: outputPath,\n        generation_config: req.body.generation_config,\n        template_count: req.body.template_prompts.length\n      }\n    });\n  } catch (error) {\n    console.error('Error generating synthetic data:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to generate synthetic data'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/evaluate/:modelName\n * @desc Evaluate model performance\n */\nrouter.post('/evaluate/:modelName', async (req, res) => {\n  try {\n    const { modelName } = req.params;\n    const { benchmark_datasets = [], custom_metrics = [] } = req.body;\n    \n    const evaluation = await modelTrainingEngine.evaluateModel(\n      modelName,\n      benchmark_datasets,\n      custom_metrics\n    );\n    \n    res.json({\n      success: true,\n      data: evaluation\n    });\n  } catch (error) {\n    console.error('Error evaluating model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to evaluate model'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/deploy/:modelVersionId\n * @desc Deploy a trained model\n */\nrouter.post('/deploy/:modelVersionId', async (req, res) => {\n  try {\n    const { modelVersionId } = req.params;\n    const {\n      target = 'local',\n      auto_rollback = true,\n      health_check_timeout = 30000,\n      deployment_tags = []\n    } = req.body;\n    \n    const deployment = await modelTrainingEngine.deployModel(\n      modelVersionId,\n      target,\n      {\n        auto_rollback,\n        health_check_timeout,\n        deployment_tags\n      }\n    );\n    \n    res.json({\n      success: true,\n      data: deployment\n    });\n  } catch (error) {\n    console.error('Error deploying model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to deploy model'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/statistics\n * @desc Get training system statistics\n */\nrouter.get('/statistics', async (req, res) => {\n  try {\n    const stats = modelTrainingEngine.getTrainingStatistics();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting training statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get training statistics'\n    });\n  }\n});\n\n// Model Registry Routes\n\n/**\n * @route POST /api/training/models\n * @desc Register a new model\n */\nrouter.post('/models', validation(modelRegistrationSchema), async (req, res) => {\n  try {\n    const model = await modelRegistry.registerModel(req.body);\n    \n    res.status(201).json({\n      success: true,\n      data: model\n    });\n  } catch (error) {\n    console.error('Error registering model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to register model'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/models/:modelId\n * @desc Get model details\n */\nrouter.get('/models/:modelId', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const model = modelRegistry.getModel(modelId);\n    \n    if (!model) {\n      return res.status(404).json({\n        success: false,\n        error: 'Model not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: model\n    });\n  } catch (error) {\n    console.error('Error getting model:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get model'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/models/search\n * @desc Search models with filters\n */\nrouter.post('/models/search', validation(modelSearchSchema), async (req, res) => {\n  try {\n    const searchResult = modelRegistry.searchModels(req.body);\n    \n    res.json({\n      success: true,\n      data: searchResult\n    });\n  } catch (error) {\n    console.error('Error searching models:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to search models'\n    });\n  }\n});\n\n/**\n * @route POST /api/training/models/compare\n * @desc Compare two models\n */\nrouter.post('/models/compare', async (req, res) => {\n  try {\n    const { model_a_id, model_b_id } = req.body;\n    \n    if (!model_a_id || !model_b_id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Both model_a_id and model_b_id are required'\n      });\n    }\n    \n    const comparison = await modelRegistry.compareModels(model_a_id, model_b_id);\n    \n    res.json({\n      success: true,\n      data: comparison\n    });\n  } catch (error) {\n    console.error('Error comparing models:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to compare models'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/models/:modelId/usage\n * @desc Get model usage statistics\n */\nrouter.get('/models/:modelId/usage', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const timeRange = req.query.start && req.query.end ? {\n      start: new Date(req.query.start as string),\n      end: new Date(req.query.end as string)\n    } : undefined;\n    \n    const usage = modelRegistry.getModelUsageStats(modelId, timeRange);\n    \n    res.json({\n      success: true,\n      data: usage\n    });\n  } catch (error) {\n    console.error('Error getting model usage:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get model usage'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/models/:modelId/versions\n * @desc Get model version history\n */\nrouter.get('/models/:modelId/versions', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const versions = modelRegistry.getModelVersionHistory(modelId);\n    \n    res.json({\n      success: true,\n      data: {\n        model_id: modelId,\n        versions,\n        total_versions: versions.length\n      }\n    });\n  } catch (error) {\n    console.error('Error getting model versions:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get model versions'\n    });\n  }\n});\n\n/**\n * @route PUT /api/training/models/:modelId\n * @desc Update model metadata\n */\nrouter.put('/models/:modelId', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const updatedModel = await modelRegistry.updateModel(modelId, req.body);\n    \n    res.json({\n      success: true,\n      data: updatedModel\n    });\n  } catch (error) {\n    console.error('Error updating model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to update model'\n    });\n  }\n});\n\n/**\n * @route DELETE /api/training/models/:modelId\n * @desc Delete a model\n */\nrouter.delete('/models/:modelId', async (req, res) => {\n  try {\n    const { modelId } = req.params;\n    const force = req.query.force === 'true';\n    \n    await modelRegistry.deleteModel(modelId, force);\n    \n    res.json({\n      success: true,\n      message: `Model ${modelId} deleted successfully`\n    });\n  } catch (error) {\n    console.error('Error deleting model:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to delete model'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/registry/statistics\n * @desc Get model registry statistics\n */\nrouter.get('/registry/statistics', async (req, res) => {\n  try {\n    const stats = modelRegistry.getRegistryStatistics();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting registry statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to get registry statistics'\n    });\n  }\n});\n\n/**\n * @route GET /api/training/health\n * @desc Health check for training system\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date(),\n      components: {\n        training_engine: 'healthy',\n        model_registry: 'healthy',\n        tensorflow: 'healthy'\n      },\n      statistics: {\n        active_jobs: modelTrainingEngine.listTrainingJobs({ status: 'training' }).length,\n        total_models: modelRegistry.getRegistryStatistics().total_models,\n        system_load: process.cpuUsage(),\n        memory_usage: process.memoryUsage()\n      }\n    };\n    \n    res.json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    console.error('Error getting training health:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Training system health check failed'\n    });\n  }\n});\n\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "19c02058f56ff87aaa74d4d70ad3dcdf309c6d9f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_why23c3xa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_why23c3xa();
var __importDefault =
/* istanbul ignore next */
(cov_why23c3xa().s[0]++,
/* istanbul ignore next */
(cov_why23c3xa().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_why23c3xa().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_why23c3xa().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_why23c3xa().f[0]++;
  cov_why23c3xa().s[1]++;
  return /* istanbul ignore next */(cov_why23c3xa().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_why23c3xa().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_why23c3xa().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_why23c3xa().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_why23c3xa().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_why23c3xa().s[3]++, __importDefault(require("express")));
const ModelTrainingEngine_1 =
/* istanbul ignore next */
(cov_why23c3xa().s[4]++, require("../services/training/ModelTrainingEngine"));
const ModelRegistry_1 =
/* istanbul ignore next */
(cov_why23c3xa().s[5]++, require("../services/training/ModelRegistry"));
const validation_1 =
/* istanbul ignore next */
(cov_why23c3xa().s[6]++, require("../middleware/validation"));
const joi_1 =
/* istanbul ignore next */
(cov_why23c3xa().s[7]++, __importDefault(require("joi")));
const router =
/* istanbul ignore next */
(cov_why23c3xa().s[8]++, express_1.default.Router());
// Validation schemas
const trainingConfigSchema =
/* istanbul ignore next */
(cov_why23c3xa().s[9]++, joi_1.default.object({
  name: joi_1.default.string().required().min(1).max(100),
  model: joi_1.default.string().required(),
  trainingData: joi_1.default.object({
    source: joi_1.default.string().valid('file', 'database', 'api', 'synthetic').required(),
    path: joi_1.default.string().when('source', {
      is: 'file',
      then: joi_1.default.required()
    }),
    query: joi_1.default.string().when('source', {
      is: 'database',
      then: joi_1.default.required()
    }),
    endpoint: joi_1.default.string().when('source', {
      is: 'api',
      then: joi_1.default.required()
    }),
    format: joi_1.default.string().valid('jsonl', 'csv', 'txt', 'parquet').required(),
    validation_split: joi_1.default.number().min(0.1).max(0.9).required()
  }).required(),
  hyperparameters: joi_1.default.object({
    learning_rate: joi_1.default.number().min(0.00001).max(1).required(),
    batch_size: joi_1.default.number().integer().min(1).max(1024).required(),
    epochs: joi_1.default.number().integer().min(1).max(1000).required(),
    warmup_steps: joi_1.default.number().integer().min(0).default(0),
    weight_decay: joi_1.default.number().min(0).max(1).default(0.01),
    dropout_rate: joi_1.default.number().min(0).max(1).default(0.1),
    gradient_clip_norm: joi_1.default.number().min(0).default(1.0)
  }).required(),
  optimization: joi_1.default.object({
    optimizer: joi_1.default.string().valid('adam', 'adamw', 'sgd', 'rmsprop').default('adamw'),
    scheduler: joi_1.default.string().valid('linear', 'cosine', 'exponential', 'polynomial').default('linear'),
    early_stopping: joi_1.default.object({
      enabled: joi_1.default.boolean().default(true),
      patience: joi_1.default.number().integer().min(1).default(5),
      metric: joi_1.default.string().default('validation_loss'),
      min_delta: joi_1.default.number().min(0).default(0.001)
    }).default()
  }).default(),
  evaluation: joi_1.default.object({
    metrics: joi_1.default.array().items(joi_1.default.string()).default(['accuracy', 'f1_score']),
    benchmark_datasets: joi_1.default.array().items(joi_1.default.string()).default([]),
    validation_frequency: joi_1.default.number().integer().min(1).default(1),
    save_best_model: joi_1.default.boolean().default(true)
  }).default(),
  resources: joi_1.default.object({
    gpu_memory_limit: joi_1.default.number().integer().min(1),
    cpu_cores: joi_1.default.number().integer().min(1),
    memory_limit: joi_1.default.number().integer().min(1),
    storage_limit: joi_1.default.number().integer().min(1)
  }).default({}),
  deployment: joi_1.default.object({
    auto_deploy: joi_1.default.boolean().default(false),
    deployment_target: joi_1.default.string().valid('ollama', 'huggingface', 'local', 'cloud').default('local'),
    rollback_on_failure: joi_1.default.boolean().default(true),
    health_check_enabled: joi_1.default.boolean().default(true)
  }).default(),
  metadata: joi_1.default.object({
    description: joi_1.default.string().default(''),
    tags: joi_1.default.array().items(joi_1.default.string()).default([]),
    base_model: joi_1.default.string(),
    training_objective: joi_1.default.string().default('general_improvement')
  }).default()
}));
const syntheticDataSchema =
/* istanbul ignore next */
(cov_why23c3xa().s[10]++, joi_1.default.object({
  template_prompts: joi_1.default.array().items(joi_1.default.string()).min(1).required(),
  generation_config: joi_1.default.object({
    num_samples: joi_1.default.number().integer().min(1).max(100000).required(),
    temperature: joi_1.default.number().min(0).max(2).default(0.7),
    max_tokens: joi_1.default.number().integer().min(10).max(4096).default(512),
    diversity_penalty: joi_1.default.number().min(0).max(2).default(0.5),
    quality_filter: joi_1.default.boolean().default(true)
  }).required(),
  output_format: joi_1.default.string().valid('jsonl', 'csv', 'txt').default('jsonl')
}));
const modelRegistrationSchema =
/* istanbul ignore next */
(cov_why23c3xa().s[11]++, joi_1.default.object({
  name: joi_1.default.string().required().min(1).max(100),
  version: joi_1.default.string().required(),
  description: joi_1.default.string().required(),
  author: joi_1.default.string().required(),
  license: joi_1.default.string().required(),
  tags: joi_1.default.array().items(joi_1.default.string()).default([]),
  model_type: joi_1.default.string().valid('foundation', 'fine_tuned', 'specialized', 'custom').required(),
  base_model: joi_1.default.string(),
  training_job_id: joi_1.default.string(),
  size_mb: joi_1.default.number().integer().min(1).required(),
  parameter_count: joi_1.default.number().integer().min(1).required(),
  architecture: joi_1.default.object({
    model_family: joi_1.default.string().required(),
    layers: joi_1.default.number().integer().min(1).required(),
    hidden_size: joi_1.default.number().integer().min(1).required(),
    attention_heads: joi_1.default.number().integer().min(1).required(),
    vocab_size: joi_1.default.number().integer().min(1).required(),
    max_sequence_length: joi_1.default.number().integer().min(1).required()
  }).required(),
  capabilities: joi_1.default.object({
    text_generation: joi_1.default.boolean().default(false),
    text_classification: joi_1.default.boolean().default(false),
    question_answering: joi_1.default.boolean().default(false),
    summarization: joi_1.default.boolean().default(false),
    code_generation: joi_1.default.boolean().default(false),
    embedding_generation: joi_1.default.boolean().default(false),
    multimodal: joi_1.default.boolean().default(false)
  }).default(),
  performance_metrics: joi_1.default.object({
    accuracy: joi_1.default.number().min(0).max(1),
    f1_score: joi_1.default.number().min(0).max(1),
    bleu_score: joi_1.default.number().min(0).max(1),
    rouge_score: joi_1.default.number().min(0).max(1),
    perplexity: joi_1.default.number().min(1),
    inference_latency_ms: joi_1.default.number().min(0).required(),
    throughput_tokens_per_sec: joi_1.default.number().min(0).required(),
    memory_usage_mb: joi_1.default.number().min(0).required()
  }).required(),
  file_path: joi_1.default.string(),
  config_path: joi_1.default.string(),
  tokenizer_path: joi_1.default.string()
}));
const modelSearchSchema =
/* istanbul ignore next */
(cov_why23c3xa().s[12]++, joi_1.default.object({
  query: joi_1.default.string().allow(''),
  filters: joi_1.default.object({
    model_type: joi_1.default.array().items(joi_1.default.string().valid('foundation', 'fine_tuned', 'specialized', 'custom')),
    capabilities: joi_1.default.array().items(joi_1.default.string()),
    size_range: joi_1.default.object({
      min_mb: joi_1.default.number().integer().min(0),
      max_mb: joi_1.default.number().integer().min(0)
    }),
    performance_threshold: joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.number()),
    deployment_status: joi_1.default.array().items(joi_1.default.string().valid('pending', 'deployed', 'deprecated', 'failed')),
    tags: joi_1.default.array().items(joi_1.default.string()),
    created_after: joi_1.default.date().iso(),
    created_before: joi_1.default.date().iso()
  }).default({}),
  sort_by: joi_1.default.string().valid('name', 'created_at', 'size_mb', 'performance', 'usage').default('created_at'),
  sort_order: joi_1.default.string().valid('asc', 'desc').default('desc'),
  limit: joi_1.default.number().integer().min(1).max(100).default(20),
  offset: joi_1.default.number().integer().min(0).default(0)
}));
/**
 * @route POST /api/training/jobs
 * @desc Create a new training job
 */
/* istanbul ignore next */
cov_why23c3xa().s[13]++;
router.post('/jobs', (0, validation_1.validation)(trainingConfigSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[1]++;
  cov_why23c3xa().s[14]++;
  try {
    const job =
    /* istanbul ignore next */
    (cov_why23c3xa().s[15]++, await ModelTrainingEngine_1.modelTrainingEngine.createTrainingJob(req.body));
    /* istanbul ignore next */
    cov_why23c3xa().s[16]++;
    res.status(201).json({
      success: true,
      data: {
        job_id: job.id,
        status: job.status,
        config: job.config,
        created_at: job.config.metadata.created_at
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[17]++;
    console.error('Error creating training job:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[18]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[3][1]++, 'Failed to create training job')
    });
  }
});
/**
 * @route POST /api/training/jobs/:jobId/start
 * @desc Start a training job
 */
/* istanbul ignore next */
cov_why23c3xa().s[19]++;
router.post('/jobs/:jobId/start', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[2]++;
  cov_why23c3xa().s[20]++;
  try {
    const {
      jobId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[21]++, req.params);
    /* istanbul ignore next */
    cov_why23c3xa().s[22]++;
    await ModelTrainingEngine_1.modelTrainingEngine.startTrainingJob(jobId);
    /* istanbul ignore next */
    cov_why23c3xa().s[23]++;
    res.json({
      success: true,
      message: `Training job ${jobId} started successfully`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[24]++;
    console.error('Error starting training job:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[25]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[4][1]++, 'Failed to start training job')
    });
  }
});
/**
 * @route GET /api/training/jobs/:jobId
 * @desc Get training job details
 */
/* istanbul ignore next */
cov_why23c3xa().s[26]++;
router.get('/jobs/:jobId', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[3]++;
  cov_why23c3xa().s[27]++;
  try {
    const {
      jobId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[28]++, req.params);
    const job =
    /* istanbul ignore next */
    (cov_why23c3xa().s[29]++, ModelTrainingEngine_1.modelTrainingEngine.getTrainingJob(jobId));
    /* istanbul ignore next */
    cov_why23c3xa().s[30]++;
    if (!job) {
      /* istanbul ignore next */
      cov_why23c3xa().b[5][0]++;
      cov_why23c3xa().s[31]++;
      return res.status(404).json({
        success: false,
        error: 'Training job not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[5][1]++;
    }
    cov_why23c3xa().s[32]++;
    res.json({
      success: true,
      data: job
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[33]++;
    console.error('Error getting training job:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[34]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[6][1]++, 'Failed to get training job')
    });
  }
});
/**
 * @route GET /api/training/jobs
 * @desc List training jobs with filters
 */
/* istanbul ignore next */
cov_why23c3xa().s[35]++;
router.get('/jobs', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[4]++;
  cov_why23c3xa().s[36]++;
  try {
    const filters =
    /* istanbul ignore next */
    (cov_why23c3xa().s[37]++, {});
    /* istanbul ignore next */
    cov_why23c3xa().s[38]++;
    if (req.query.status) {
      /* istanbul ignore next */
      cov_why23c3xa().b[7][0]++;
      cov_why23c3xa().s[39]++;
      filters.status = req.query.status;
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[7][1]++;
    }
    cov_why23c3xa().s[40]++;
    if (req.query.model) {
      /* istanbul ignore next */
      cov_why23c3xa().b[8][0]++;
      cov_why23c3xa().s[41]++;
      filters.model = req.query.model;
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[8][1]++;
    }
    cov_why23c3xa().s[42]++;
    if (req.query.created_after) {
      /* istanbul ignore next */
      cov_why23c3xa().b[9][0]++;
      cov_why23c3xa().s[43]++;
      filters.created_after = new Date(req.query.created_after);
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[9][1]++;
    }
    cov_why23c3xa().s[44]++;
    if (req.query.created_before) {
      /* istanbul ignore next */
      cov_why23c3xa().b[10][0]++;
      cov_why23c3xa().s[45]++;
      filters.created_before = new Date(req.query.created_before);
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[10][1]++;
    }
    const jobs =
    /* istanbul ignore next */
    (cov_why23c3xa().s[46]++, ModelTrainingEngine_1.modelTrainingEngine.listTrainingJobs(filters));
    /* istanbul ignore next */
    cov_why23c3xa().s[47]++;
    res.json({
      success: true,
      data: {
        jobs,
        total_count: jobs.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[48]++;
    console.error('Error listing training jobs:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[49]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[11][1]++, 'Failed to list training jobs')
    });
  }
});
/**
 * @route POST /api/training/jobs/:jobId/cancel
 * @desc Cancel a training job
 */
/* istanbul ignore next */
cov_why23c3xa().s[50]++;
router.post('/jobs/:jobId/cancel', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[5]++;
  cov_why23c3xa().s[51]++;
  try {
    const {
      jobId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[52]++, req.params);
    /* istanbul ignore next */
    cov_why23c3xa().s[53]++;
    await ModelTrainingEngine_1.modelTrainingEngine.cancelTrainingJob(jobId);
    /* istanbul ignore next */
    cov_why23c3xa().s[54]++;
    res.json({
      success: true,
      message: `Training job ${jobId} cancelled successfully`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[55]++;
    console.error('Error cancelling training job:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[56]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[12][1]++, 'Failed to cancel training job')
    });
  }
});
/**
 * @route POST /api/training/synthetic-data
 * @desc Generate synthetic training data
 */
/* istanbul ignore next */
cov_why23c3xa().s[57]++;
router.post('/synthetic-data', (0, validation_1.validation)(syntheticDataSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[6]++;
  cov_why23c3xa().s[58]++;
  try {
    const outputPath =
    /* istanbul ignore next */
    (cov_why23c3xa().s[59]++, await ModelTrainingEngine_1.modelTrainingEngine.generateSyntheticData(req.body));
    /* istanbul ignore next */
    cov_why23c3xa().s[60]++;
    res.json({
      success: true,
      data: {
        output_path: outputPath,
        generation_config: req.body.generation_config,
        template_count: req.body.template_prompts.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[61]++;
    console.error('Error generating synthetic data:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[62]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[13][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[13][1]++, 'Failed to generate synthetic data')
    });
  }
});
/**
 * @route POST /api/training/evaluate/:modelName
 * @desc Evaluate model performance
 */
/* istanbul ignore next */
cov_why23c3xa().s[63]++;
router.post('/evaluate/:modelName', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[7]++;
  cov_why23c3xa().s[64]++;
  try {
    const {
      modelName
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[65]++, req.params);
    const {
      benchmark_datasets =
      /* istanbul ignore next */
      (cov_why23c3xa().b[14][0]++, []),
      custom_metrics =
      /* istanbul ignore next */
      (cov_why23c3xa().b[15][0]++, [])
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[66]++, req.body);
    const evaluation =
    /* istanbul ignore next */
    (cov_why23c3xa().s[67]++, await ModelTrainingEngine_1.modelTrainingEngine.evaluateModel(modelName, benchmark_datasets, custom_metrics));
    /* istanbul ignore next */
    cov_why23c3xa().s[68]++;
    res.json({
      success: true,
      data: evaluation
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[69]++;
    console.error('Error evaluating model:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[70]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[16][1]++, 'Failed to evaluate model')
    });
  }
});
/**
 * @route POST /api/training/deploy/:modelVersionId
 * @desc Deploy a trained model
 */
/* istanbul ignore next */
cov_why23c3xa().s[71]++;
router.post('/deploy/:modelVersionId', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[8]++;
  cov_why23c3xa().s[72]++;
  try {
    const {
      modelVersionId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[73]++, req.params);
    const {
      target =
      /* istanbul ignore next */
      (cov_why23c3xa().b[17][0]++, 'local'),
      auto_rollback =
      /* istanbul ignore next */
      (cov_why23c3xa().b[18][0]++, true),
      health_check_timeout =
      /* istanbul ignore next */
      (cov_why23c3xa().b[19][0]++, 30000),
      deployment_tags =
      /* istanbul ignore next */
      (cov_why23c3xa().b[20][0]++, [])
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[74]++, req.body);
    const deployment =
    /* istanbul ignore next */
    (cov_why23c3xa().s[75]++, await ModelTrainingEngine_1.modelTrainingEngine.deployModel(modelVersionId, target, {
      auto_rollback,
      health_check_timeout,
      deployment_tags
    }));
    /* istanbul ignore next */
    cov_why23c3xa().s[76]++;
    res.json({
      success: true,
      data: deployment
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[77]++;
    console.error('Error deploying model:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[78]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[21][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[21][1]++, 'Failed to deploy model')
    });
  }
});
/**
 * @route GET /api/training/statistics
 * @desc Get training system statistics
 */
/* istanbul ignore next */
cov_why23c3xa().s[79]++;
router.get('/statistics', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[9]++;
  cov_why23c3xa().s[80]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_why23c3xa().s[81]++, ModelTrainingEngine_1.modelTrainingEngine.getTrainingStatistics());
    /* istanbul ignore next */
    cov_why23c3xa().s[82]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[83]++;
    console.error('Error getting training statistics:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[84]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[22][1]++, 'Failed to get training statistics')
    });
  }
});
// Model Registry Routes
/**
 * @route POST /api/training/models
 * @desc Register a new model
 */
/* istanbul ignore next */
cov_why23c3xa().s[85]++;
router.post('/models', (0, validation_1.validation)(modelRegistrationSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[10]++;
  cov_why23c3xa().s[86]++;
  try {
    const model =
    /* istanbul ignore next */
    (cov_why23c3xa().s[87]++, await ModelRegistry_1.modelRegistry.registerModel(req.body));
    /* istanbul ignore next */
    cov_why23c3xa().s[88]++;
    res.status(201).json({
      success: true,
      data: model
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[89]++;
    console.error('Error registering model:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[90]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[23][1]++, 'Failed to register model')
    });
  }
});
/**
 * @route GET /api/training/models/:modelId
 * @desc Get model details
 */
/* istanbul ignore next */
cov_why23c3xa().s[91]++;
router.get('/models/:modelId', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[11]++;
  cov_why23c3xa().s[92]++;
  try {
    const {
      modelId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[93]++, req.params);
    const model =
    /* istanbul ignore next */
    (cov_why23c3xa().s[94]++, ModelRegistry_1.modelRegistry.getModel(modelId));
    /* istanbul ignore next */
    cov_why23c3xa().s[95]++;
    if (!model) {
      /* istanbul ignore next */
      cov_why23c3xa().b[24][0]++;
      cov_why23c3xa().s[96]++;
      return res.status(404).json({
        success: false,
        error: 'Model not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[24][1]++;
    }
    cov_why23c3xa().s[97]++;
    res.json({
      success: true,
      data: model
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[98]++;
    console.error('Error getting model:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[99]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[25][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[25][1]++, 'Failed to get model')
    });
  }
});
/**
 * @route POST /api/training/models/search
 * @desc Search models with filters
 */
/* istanbul ignore next */
cov_why23c3xa().s[100]++;
router.post('/models/search', (0, validation_1.validation)(modelSearchSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[12]++;
  cov_why23c3xa().s[101]++;
  try {
    const searchResult =
    /* istanbul ignore next */
    (cov_why23c3xa().s[102]++, ModelRegistry_1.modelRegistry.searchModels(req.body));
    /* istanbul ignore next */
    cov_why23c3xa().s[103]++;
    res.json({
      success: true,
      data: searchResult
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[104]++;
    console.error('Error searching models:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[105]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[26][1]++, 'Failed to search models')
    });
  }
});
/**
 * @route POST /api/training/models/compare
 * @desc Compare two models
 */
/* istanbul ignore next */
cov_why23c3xa().s[106]++;
router.post('/models/compare', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[13]++;
  cov_why23c3xa().s[107]++;
  try {
    const {
      model_a_id,
      model_b_id
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[108]++, req.body);
    /* istanbul ignore next */
    cov_why23c3xa().s[109]++;
    if (
    /* istanbul ignore next */
    (cov_why23c3xa().b[28][0]++, !model_a_id) ||
    /* istanbul ignore next */
    (cov_why23c3xa().b[28][1]++, !model_b_id)) {
      /* istanbul ignore next */
      cov_why23c3xa().b[27][0]++;
      cov_why23c3xa().s[110]++;
      return res.status(400).json({
        success: false,
        error: 'Both model_a_id and model_b_id are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_why23c3xa().b[27][1]++;
    }
    const comparison =
    /* istanbul ignore next */
    (cov_why23c3xa().s[111]++, await ModelRegistry_1.modelRegistry.compareModels(model_a_id, model_b_id));
    /* istanbul ignore next */
    cov_why23c3xa().s[112]++;
    res.json({
      success: true,
      data: comparison
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[113]++;
    console.error('Error comparing models:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[114]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[29][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[29][1]++, 'Failed to compare models')
    });
  }
});
/**
 * @route GET /api/training/models/:modelId/usage
 * @desc Get model usage statistics
 */
/* istanbul ignore next */
cov_why23c3xa().s[115]++;
router.get('/models/:modelId/usage', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[14]++;
  cov_why23c3xa().s[116]++;
  try {
    const {
      modelId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[117]++, req.params);
    const timeRange =
    /* istanbul ignore next */
    (cov_why23c3xa().s[118]++,
    /* istanbul ignore next */
    (cov_why23c3xa().b[31][0]++, req.query.start) &&
    /* istanbul ignore next */
    (cov_why23c3xa().b[31][1]++, req.query.end) ?
    /* istanbul ignore next */
    (cov_why23c3xa().b[30][0]++, {
      start: new Date(req.query.start),
      end: new Date(req.query.end)
    }) :
    /* istanbul ignore next */
    (cov_why23c3xa().b[30][1]++, undefined));
    const usage =
    /* istanbul ignore next */
    (cov_why23c3xa().s[119]++, ModelRegistry_1.modelRegistry.getModelUsageStats(modelId, timeRange));
    /* istanbul ignore next */
    cov_why23c3xa().s[120]++;
    res.json({
      success: true,
      data: usage
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[121]++;
    console.error('Error getting model usage:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[122]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[32][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[32][1]++, 'Failed to get model usage')
    });
  }
});
/**
 * @route GET /api/training/models/:modelId/versions
 * @desc Get model version history
 */
/* istanbul ignore next */
cov_why23c3xa().s[123]++;
router.get('/models/:modelId/versions', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[15]++;
  cov_why23c3xa().s[124]++;
  try {
    const {
      modelId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[125]++, req.params);
    const versions =
    /* istanbul ignore next */
    (cov_why23c3xa().s[126]++, ModelRegistry_1.modelRegistry.getModelVersionHistory(modelId));
    /* istanbul ignore next */
    cov_why23c3xa().s[127]++;
    res.json({
      success: true,
      data: {
        model_id: modelId,
        versions,
        total_versions: versions.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[128]++;
    console.error('Error getting model versions:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[129]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[33][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[33][1]++, 'Failed to get model versions')
    });
  }
});
/**
 * @route PUT /api/training/models/:modelId
 * @desc Update model metadata
 */
/* istanbul ignore next */
cov_why23c3xa().s[130]++;
router.put('/models/:modelId', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[16]++;
  cov_why23c3xa().s[131]++;
  try {
    const {
      modelId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[132]++, req.params);
    const updatedModel =
    /* istanbul ignore next */
    (cov_why23c3xa().s[133]++, await ModelRegistry_1.modelRegistry.updateModel(modelId, req.body));
    /* istanbul ignore next */
    cov_why23c3xa().s[134]++;
    res.json({
      success: true,
      data: updatedModel
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[135]++;
    console.error('Error updating model:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[136]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[34][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[34][1]++, 'Failed to update model')
    });
  }
});
/**
 * @route DELETE /api/training/models/:modelId
 * @desc Delete a model
 */
/* istanbul ignore next */
cov_why23c3xa().s[137]++;
router.delete('/models/:modelId', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[17]++;
  cov_why23c3xa().s[138]++;
  try {
    const {
      modelId
    } =
    /* istanbul ignore next */
    (cov_why23c3xa().s[139]++, req.params);
    const force =
    /* istanbul ignore next */
    (cov_why23c3xa().s[140]++, req.query.force === 'true');
    /* istanbul ignore next */
    cov_why23c3xa().s[141]++;
    await ModelRegistry_1.modelRegistry.deleteModel(modelId, force);
    /* istanbul ignore next */
    cov_why23c3xa().s[142]++;
    res.json({
      success: true,
      message: `Model ${modelId} deleted successfully`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[143]++;
    console.error('Error deleting model:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[144]++;
    res.status(400).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[35][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[35][1]++, 'Failed to delete model')
    });
  }
});
/**
 * @route GET /api/training/registry/statistics
 * @desc Get model registry statistics
 */
/* istanbul ignore next */
cov_why23c3xa().s[145]++;
router.get('/registry/statistics', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[18]++;
  cov_why23c3xa().s[146]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_why23c3xa().s[147]++, ModelRegistry_1.modelRegistry.getRegistryStatistics());
    /* istanbul ignore next */
    cov_why23c3xa().s[148]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[149]++;
    console.error('Error getting registry statistics:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[150]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[36][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[36][1]++, 'Failed to get registry statistics')
    });
  }
});
/**
 * @route GET /api/training/health
 * @desc Health check for training system
 */
/* istanbul ignore next */
cov_why23c3xa().s[151]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_why23c3xa().f[19]++;
  cov_why23c3xa().s[152]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_why23c3xa().s[153]++, {
      status: 'healthy',
      timestamp: new Date(),
      components: {
        training_engine: 'healthy',
        model_registry: 'healthy',
        tensorflow: 'healthy'
      },
      statistics: {
        active_jobs: ModelTrainingEngine_1.modelTrainingEngine.listTrainingJobs({
          status: 'training'
        }).length,
        total_models: ModelRegistry_1.modelRegistry.getRegistryStatistics().total_models,
        system_load: process.cpuUsage(),
        memory_usage: process.memoryUsage()
      }
    });
    /* istanbul ignore next */
    cov_why23c3xa().s[154]++;
    res.json({
      success: true,
      data: health
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_why23c3xa().s[155]++;
    console.error('Error getting training health:', error);
    /* istanbul ignore next */
    cov_why23c3xa().s[156]++;
    res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_why23c3xa().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_why23c3xa().b[37][1]++, 'Training system health check failed')
    });
  }
});
/* istanbul ignore next */
cov_why23c3xa().s[157]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfd2h5MjNjM3hhIiwiYWN0dWFsQ292ZXJhZ2UiLCJleHByZXNzXzEiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsIk1vZGVsVHJhaW5pbmdFbmdpbmVfMSIsIk1vZGVsUmVnaXN0cnlfMSIsInZhbGlkYXRpb25fMSIsImpvaV8xIiwicm91dGVyIiwiZGVmYXVsdCIsIlJvdXRlciIsInRyYWluaW5nQ29uZmlnU2NoZW1hIiwib2JqZWN0IiwibmFtZSIsInN0cmluZyIsInJlcXVpcmVkIiwibWluIiwibWF4IiwibW9kZWwiLCJ0cmFpbmluZ0RhdGEiLCJzb3VyY2UiLCJ2YWxpZCIsInBhdGgiLCJ3aGVuIiwiaXMiLCJ0aGVuIiwicXVlcnkiLCJlbmRwb2ludCIsImZvcm1hdCIsInZhbGlkYXRpb25fc3BsaXQiLCJudW1iZXIiLCJoeXBlcnBhcmFtZXRlcnMiLCJsZWFybmluZ19yYXRlIiwiYmF0Y2hfc2l6ZSIsImludGVnZXIiLCJlcG9jaHMiLCJ3YXJtdXBfc3RlcHMiLCJ3ZWlnaHRfZGVjYXkiLCJkcm9wb3V0X3JhdGUiLCJncmFkaWVudF9jbGlwX25vcm0iLCJvcHRpbWl6YXRpb24iLCJvcHRpbWl6ZXIiLCJzY2hlZHVsZXIiLCJlYXJseV9zdG9wcGluZyIsImVuYWJsZWQiLCJib29sZWFuIiwicGF0aWVuY2UiLCJtZXRyaWMiLCJtaW5fZGVsdGEiLCJldmFsdWF0aW9uIiwibWV0cmljcyIsImFycmF5IiwiaXRlbXMiLCJiZW5jaG1hcmtfZGF0YXNldHMiLCJ2YWxpZGF0aW9uX2ZyZXF1ZW5jeSIsInNhdmVfYmVzdF9tb2RlbCIsInJlc291cmNlcyIsImdwdV9tZW1vcnlfbGltaXQiLCJjcHVfY29yZXMiLCJtZW1vcnlfbGltaXQiLCJzdG9yYWdlX2xpbWl0IiwiZGVwbG95bWVudCIsImF1dG9fZGVwbG95IiwiZGVwbG95bWVudF90YXJnZXQiLCJyb2xsYmFja19vbl9mYWlsdXJlIiwiaGVhbHRoX2NoZWNrX2VuYWJsZWQiLCJtZXRhZGF0YSIsImRlc2NyaXB0aW9uIiwidGFncyIsImJhc2VfbW9kZWwiLCJ0cmFpbmluZ19vYmplY3RpdmUiLCJzeW50aGV0aWNEYXRhU2NoZW1hIiwidGVtcGxhdGVfcHJvbXB0cyIsImdlbmVyYXRpb25fY29uZmlnIiwibnVtX3NhbXBsZXMiLCJ0ZW1wZXJhdHVyZSIsIm1heF90b2tlbnMiLCJkaXZlcnNpdHlfcGVuYWx0eSIsInF1YWxpdHlfZmlsdGVyIiwib3V0cHV0X2Zvcm1hdCIsIm1vZGVsUmVnaXN0cmF0aW9uU2NoZW1hIiwidmVyc2lvbiIsImF1dGhvciIsImxpY2Vuc2UiLCJtb2RlbF90eXBlIiwidHJhaW5pbmdfam9iX2lkIiwic2l6ZV9tYiIsInBhcmFtZXRlcl9jb3VudCIsImFyY2hpdGVjdHVyZSIsIm1vZGVsX2ZhbWlseSIsImxheWVycyIsImhpZGRlbl9zaXplIiwiYXR0ZW50aW9uX2hlYWRzIiwidm9jYWJfc2l6ZSIsIm1heF9zZXF1ZW5jZV9sZW5ndGgiLCJjYXBhYmlsaXRpZXMiLCJ0ZXh0X2dlbmVyYXRpb24iLCJ0ZXh0X2NsYXNzaWZpY2F0aW9uIiwicXVlc3Rpb25fYW5zd2VyaW5nIiwic3VtbWFyaXphdGlvbiIsImNvZGVfZ2VuZXJhdGlvbiIsImVtYmVkZGluZ19nZW5lcmF0aW9uIiwibXVsdGltb2RhbCIsInBlcmZvcm1hbmNlX21ldHJpY3MiLCJhY2N1cmFjeSIsImYxX3Njb3JlIiwiYmxldV9zY29yZSIsInJvdWdlX3Njb3JlIiwicGVycGxleGl0eSIsImluZmVyZW5jZV9sYXRlbmN5X21zIiwidGhyb3VnaHB1dF90b2tlbnNfcGVyX3NlYyIsIm1lbW9yeV91c2FnZV9tYiIsImZpbGVfcGF0aCIsImNvbmZpZ19wYXRoIiwidG9rZW5pemVyX3BhdGgiLCJtb2RlbFNlYXJjaFNjaGVtYSIsImFsbG93IiwiZmlsdGVycyIsInNpemVfcmFuZ2UiLCJtaW5fbWIiLCJtYXhfbWIiLCJwZXJmb3JtYW5jZV90aHJlc2hvbGQiLCJwYXR0ZXJuIiwiZGVwbG95bWVudF9zdGF0dXMiLCJjcmVhdGVkX2FmdGVyIiwiZGF0ZSIsImlzbyIsImNyZWF0ZWRfYmVmb3JlIiwic29ydF9ieSIsInNvcnRfb3JkZXIiLCJsaW1pdCIsIm9mZnNldCIsInBvc3QiLCJ2YWxpZGF0aW9uIiwicmVxIiwicmVzIiwiZiIsImpvYiIsIm1vZGVsVHJhaW5pbmdFbmdpbmUiLCJjcmVhdGVUcmFpbmluZ0pvYiIsImJvZHkiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJqb2JfaWQiLCJpZCIsImNvbmZpZyIsImNyZWF0ZWRfYXQiLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsImIiLCJtZXNzYWdlIiwiam9iSWQiLCJwYXJhbXMiLCJzdGFydFRyYWluaW5nSm9iIiwiZ2V0IiwiZ2V0VHJhaW5pbmdKb2IiLCJEYXRlIiwiam9icyIsImxpc3RUcmFpbmluZ0pvYnMiLCJ0b3RhbF9jb3VudCIsImxlbmd0aCIsImNhbmNlbFRyYWluaW5nSm9iIiwib3V0cHV0UGF0aCIsImdlbmVyYXRlU3ludGhldGljRGF0YSIsIm91dHB1dF9wYXRoIiwidGVtcGxhdGVfY291bnQiLCJtb2RlbE5hbWUiLCJjdXN0b21fbWV0cmljcyIsImV2YWx1YXRlTW9kZWwiLCJtb2RlbFZlcnNpb25JZCIsInRhcmdldCIsImF1dG9fcm9sbGJhY2siLCJoZWFsdGhfY2hlY2tfdGltZW91dCIsImRlcGxveW1lbnRfdGFncyIsImRlcGxveU1vZGVsIiwic3RhdHMiLCJnZXRUcmFpbmluZ1N0YXRpc3RpY3MiLCJtb2RlbFJlZ2lzdHJ5IiwicmVnaXN0ZXJNb2RlbCIsIm1vZGVsSWQiLCJnZXRNb2RlbCIsInNlYXJjaFJlc3VsdCIsInNlYXJjaE1vZGVscyIsIm1vZGVsX2FfaWQiLCJtb2RlbF9iX2lkIiwiY29tcGFyaXNvbiIsImNvbXBhcmVNb2RlbHMiLCJ0aW1lUmFuZ2UiLCJzdGFydCIsImVuZCIsInVuZGVmaW5lZCIsInVzYWdlIiwiZ2V0TW9kZWxVc2FnZVN0YXRzIiwidmVyc2lvbnMiLCJnZXRNb2RlbFZlcnNpb25IaXN0b3J5IiwibW9kZWxfaWQiLCJ0b3RhbF92ZXJzaW9ucyIsInB1dCIsInVwZGF0ZWRNb2RlbCIsInVwZGF0ZU1vZGVsIiwiZGVsZXRlIiwiZm9yY2UiLCJkZWxldGVNb2RlbCIsImdldFJlZ2lzdHJ5U3RhdGlzdGljcyIsImhlYWx0aCIsInRpbWVzdGFtcCIsImNvbXBvbmVudHMiLCJ0cmFpbmluZ19lbmdpbmUiLCJtb2RlbF9yZWdpc3RyeSIsInRlbnNvcmZsb3ciLCJzdGF0aXN0aWNzIiwiYWN0aXZlX2pvYnMiLCJ0b3RhbF9tb2RlbHMiLCJzeXN0ZW1fbG9hZCIsInByb2Nlc3MiLCJjcHVVc2FnZSIsIm1lbW9yeV91c2FnZSIsIm1lbW9yeVVzYWdlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy9yb3V0ZXMvdHJhaW5pbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBtb2RlbFRyYWluaW5nRW5naW5lIH0gZnJvbSAnLi4vc2VydmljZXMvdHJhaW5pbmcvTW9kZWxUcmFpbmluZ0VuZ2luZSc7XG5pbXBvcnQgeyBtb2RlbFJlZ2lzdHJ5IH0gZnJvbSAnLi4vc2VydmljZXMvdHJhaW5pbmcvTW9kZWxSZWdpc3RyeSc7XG5pbXBvcnQgeyB2YWxpZGF0aW9uIH0gZnJvbSAnLi4vbWlkZGxld2FyZS92YWxpZGF0aW9uJztcbmltcG9ydCBKb2kgZnJvbSAnam9pJztcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzXG5jb25zdCB0cmFpbmluZ0NvbmZpZ1NjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICBuYW1lOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKS5taW4oMSkubWF4KDEwMCksXG4gIG1vZGVsOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgdHJhaW5pbmdEYXRhOiBKb2kub2JqZWN0KHtcbiAgICBzb3VyY2U6IEpvaS5zdHJpbmcoKS52YWxpZCgnZmlsZScsICdkYXRhYmFzZScsICdhcGknLCAnc3ludGhldGljJykucmVxdWlyZWQoKSxcbiAgICBwYXRoOiBKb2kuc3RyaW5nKCkud2hlbignc291cmNlJywgeyBpczogJ2ZpbGUnLCB0aGVuOiBKb2kucmVxdWlyZWQoKSB9KSxcbiAgICBxdWVyeTogSm9pLnN0cmluZygpLndoZW4oJ3NvdXJjZScsIHsgaXM6ICdkYXRhYmFzZScsIHRoZW46IEpvaS5yZXF1aXJlZCgpIH0pLFxuICAgIGVuZHBvaW50OiBKb2kuc3RyaW5nKCkud2hlbignc291cmNlJywgeyBpczogJ2FwaScsIHRoZW46IEpvaS5yZXF1aXJlZCgpIH0pLFxuICAgIGZvcm1hdDogSm9pLnN0cmluZygpLnZhbGlkKCdqc29ubCcsICdjc3YnLCAndHh0JywgJ3BhcnF1ZXQnKS5yZXF1aXJlZCgpLFxuICAgIHZhbGlkYXRpb25fc3BsaXQ6IEpvaS5udW1iZXIoKS5taW4oMC4xKS5tYXgoMC45KS5yZXF1aXJlZCgpXG4gIH0pLnJlcXVpcmVkKCksXG4gIGh5cGVycGFyYW1ldGVyczogSm9pLm9iamVjdCh7XG4gICAgbGVhcm5pbmdfcmF0ZTogSm9pLm51bWJlcigpLm1pbigwLjAwMDAxKS5tYXgoMSkucmVxdWlyZWQoKSxcbiAgICBiYXRjaF9zaXplOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLm1pbigxKS5tYXgoMTAyNCkucmVxdWlyZWQoKSxcbiAgICBlcG9jaHM6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLm1heCgxMDAwKS5yZXF1aXJlZCgpLFxuICAgIHdhcm11cF9zdGVwczogSm9pLm51bWJlcigpLmludGVnZXIoKS5taW4oMCkuZGVmYXVsdCgwKSxcbiAgICB3ZWlnaHRfZGVjYXk6IEpvaS5udW1iZXIoKS5taW4oMCkubWF4KDEpLmRlZmF1bHQoMC4wMSksXG4gICAgZHJvcG91dF9yYXRlOiBKb2kubnVtYmVyKCkubWluKDApLm1heCgxKS5kZWZhdWx0KDAuMSksXG4gICAgZ3JhZGllbnRfY2xpcF9ub3JtOiBKb2kubnVtYmVyKCkubWluKDApLmRlZmF1bHQoMS4wKVxuICB9KS5yZXF1aXJlZCgpLFxuICBvcHRpbWl6YXRpb246IEpvaS5vYmplY3Qoe1xuICAgIG9wdGltaXplcjogSm9pLnN0cmluZygpLnZhbGlkKCdhZGFtJywgJ2FkYW13JywgJ3NnZCcsICdybXNwcm9wJykuZGVmYXVsdCgnYWRhbXcnKSxcbiAgICBzY2hlZHVsZXI6IEpvaS5zdHJpbmcoKS52YWxpZCgnbGluZWFyJywgJ2Nvc2luZScsICdleHBvbmVudGlhbCcsICdwb2x5bm9taWFsJykuZGVmYXVsdCgnbGluZWFyJyksXG4gICAgZWFybHlfc3RvcHBpbmc6IEpvaS5vYmplY3Qoe1xuICAgICAgZW5hYmxlZDogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICAgICAgcGF0aWVuY2U6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLmRlZmF1bHQoNSksXG4gICAgICBtZXRyaWM6IEpvaS5zdHJpbmcoKS5kZWZhdWx0KCd2YWxpZGF0aW9uX2xvc3MnKSxcbiAgICAgIG1pbl9kZWx0YTogSm9pLm51bWJlcigpLm1pbigwKS5kZWZhdWx0KDAuMDAxKVxuICAgIH0pLmRlZmF1bHQoKVxuICB9KS5kZWZhdWx0KCksXG4gIGV2YWx1YXRpb246IEpvaS5vYmplY3Qoe1xuICAgIG1ldHJpY3M6IEpvaS5hcnJheSgpLml0ZW1zKEpvaS5zdHJpbmcoKSkuZGVmYXVsdChbJ2FjY3VyYWN5JywgJ2YxX3Njb3JlJ10pLFxuICAgIGJlbmNobWFya19kYXRhc2V0czogSm9pLmFycmF5KCkuaXRlbXMoSm9pLnN0cmluZygpKS5kZWZhdWx0KFtdKSxcbiAgICB2YWxpZGF0aW9uX2ZyZXF1ZW5jeTogSm9pLm51bWJlcigpLmludGVnZXIoKS5taW4oMSkuZGVmYXVsdCgxKSxcbiAgICBzYXZlX2Jlc3RfbW9kZWw6IEpvaS5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKVxuICB9KS5kZWZhdWx0KCksXG4gIHJlc291cmNlczogSm9pLm9iamVjdCh7XG4gICAgZ3B1X21lbW9yeV9saW1pdDogSm9pLm51bWJlcigpLmludGVnZXIoKS5taW4oMSksXG4gICAgY3B1X2NvcmVzOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLm1pbigxKSxcbiAgICBtZW1vcnlfbGltaXQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLFxuICAgIHN0b3JhZ2VfbGltaXQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpXG4gIH0pLmRlZmF1bHQoe30pLFxuICBkZXBsb3ltZW50OiBKb2kub2JqZWN0KHtcbiAgICBhdXRvX2RlcGxveTogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBkZXBsb3ltZW50X3RhcmdldDogSm9pLnN0cmluZygpLnZhbGlkKCdvbGxhbWEnLCAnaHVnZ2luZ2ZhY2UnLCAnbG9jYWwnLCAnY2xvdWQnKS5kZWZhdWx0KCdsb2NhbCcpLFxuICAgIHJvbGxiYWNrX29uX2ZhaWx1cmU6IEpvaS5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgICBoZWFsdGhfY2hlY2tfZW5hYmxlZDogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpXG4gIH0pLmRlZmF1bHQoKSxcbiAgbWV0YWRhdGE6IEpvaS5vYmplY3Qoe1xuICAgIGRlc2NyaXB0aW9uOiBKb2kuc3RyaW5nKCkuZGVmYXVsdCgnJyksXG4gICAgdGFnczogSm9pLmFycmF5KCkuaXRlbXMoSm9pLnN0cmluZygpKS5kZWZhdWx0KFtdKSxcbiAgICBiYXNlX21vZGVsOiBKb2kuc3RyaW5nKCksXG4gICAgdHJhaW5pbmdfb2JqZWN0aXZlOiBKb2kuc3RyaW5nKCkuZGVmYXVsdCgnZ2VuZXJhbF9pbXByb3ZlbWVudCcpXG4gIH0pLmRlZmF1bHQoKVxufSk7XG5cbmNvbnN0IHN5bnRoZXRpY0RhdGFTY2hlbWEgPSBKb2kub2JqZWN0KHtcbiAgdGVtcGxhdGVfcHJvbXB0czogSm9pLmFycmF5KCkuaXRlbXMoSm9pLnN0cmluZygpKS5taW4oMSkucmVxdWlyZWQoKSxcbiAgZ2VuZXJhdGlvbl9jb25maWc6IEpvaS5vYmplY3Qoe1xuICAgIG51bV9zYW1wbGVzOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLm1pbigxKS5tYXgoMTAwMDAwKS5yZXF1aXJlZCgpLFxuICAgIHRlbXBlcmF0dXJlOiBKb2kubnVtYmVyKCkubWluKDApLm1heCgyKS5kZWZhdWx0KDAuNyksXG4gICAgbWF4X3Rva2VuczogSm9pLm51bWJlcigpLmludGVnZXIoKS5taW4oMTApLm1heCg0MDk2KS5kZWZhdWx0KDUxMiksXG4gICAgZGl2ZXJzaXR5X3BlbmFsdHk6IEpvaS5udW1iZXIoKS5taW4oMCkubWF4KDIpLmRlZmF1bHQoMC41KSxcbiAgICBxdWFsaXR5X2ZpbHRlcjogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpXG4gIH0pLnJlcXVpcmVkKCksXG4gIG91dHB1dF9mb3JtYXQ6IEpvaS5zdHJpbmcoKS52YWxpZCgnanNvbmwnLCAnY3N2JywgJ3R4dCcpLmRlZmF1bHQoJ2pzb25sJylcbn0pO1xuXG5jb25zdCBtb2RlbFJlZ2lzdHJhdGlvblNjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICBuYW1lOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKS5taW4oMSkubWF4KDEwMCksXG4gIHZlcnNpb246IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBkZXNjcmlwdGlvbjogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGF1dGhvcjogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGxpY2Vuc2U6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICB0YWdzOiBKb2kuYXJyYXkoKS5pdGVtcyhKb2kuc3RyaW5nKCkpLmRlZmF1bHQoW10pLFxuICBtb2RlbF90eXBlOiBKb2kuc3RyaW5nKCkudmFsaWQoJ2ZvdW5kYXRpb24nLCAnZmluZV90dW5lZCcsICdzcGVjaWFsaXplZCcsICdjdXN0b20nKS5yZXF1aXJlZCgpLFxuICBiYXNlX21vZGVsOiBKb2kuc3RyaW5nKCksXG4gIHRyYWluaW5nX2pvYl9pZDogSm9pLnN0cmluZygpLFxuICBzaXplX21iOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLm1pbigxKS5yZXF1aXJlZCgpLFxuICBwYXJhbWV0ZXJfY291bnQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLnJlcXVpcmVkKCksXG4gIGFyY2hpdGVjdHVyZTogSm9pLm9iamVjdCh7XG4gICAgbW9kZWxfZmFtaWx5OiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgICBsYXllcnM6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLnJlcXVpcmVkKCksXG4gICAgaGlkZGVuX3NpemU6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLnJlcXVpcmVkKCksXG4gICAgYXR0ZW50aW9uX2hlYWRzOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLm1pbigxKS5yZXF1aXJlZCgpLFxuICAgIHZvY2FiX3NpemU6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLnJlcXVpcmVkKCksXG4gICAgbWF4X3NlcXVlbmNlX2xlbmd0aDogSm9pLm51bWJlcigpLmludGVnZXIoKS5taW4oMSkucmVxdWlyZWQoKVxuICB9KS5yZXF1aXJlZCgpLFxuICBjYXBhYmlsaXRpZXM6IEpvaS5vYmplY3Qoe1xuICAgIHRleHRfZ2VuZXJhdGlvbjogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICB0ZXh0X2NsYXNzaWZpY2F0aW9uOiBKb2kuYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHF1ZXN0aW9uX2Fuc3dlcmluZzogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBzdW1tYXJpemF0aW9uOiBKb2kuYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIGNvZGVfZ2VuZXJhdGlvbjogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBlbWJlZGRpbmdfZ2VuZXJhdGlvbjogSm9pLmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBtdWx0aW1vZGFsOiBKb2kuYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpXG4gIH0pLmRlZmF1bHQoKSxcbiAgcGVyZm9ybWFuY2VfbWV0cmljczogSm9pLm9iamVjdCh7XG4gICAgYWNjdXJhY3k6IEpvaS5udW1iZXIoKS5taW4oMCkubWF4KDEpLFxuICAgIGYxX3Njb3JlOiBKb2kubnVtYmVyKCkubWluKDApLm1heCgxKSxcbiAgICBibGV1X3Njb3JlOiBKb2kubnVtYmVyKCkubWluKDApLm1heCgxKSxcbiAgICByb3VnZV9zY29yZTogSm9pLm51bWJlcigpLm1pbigwKS5tYXgoMSksXG4gICAgcGVycGxleGl0eTogSm9pLm51bWJlcigpLm1pbigxKSxcbiAgICBpbmZlcmVuY2VfbGF0ZW5jeV9tczogSm9pLm51bWJlcigpLm1pbigwKS5yZXF1aXJlZCgpLFxuICAgIHRocm91Z2hwdXRfdG9rZW5zX3Blcl9zZWM6IEpvaS5udW1iZXIoKS5taW4oMCkucmVxdWlyZWQoKSxcbiAgICBtZW1vcnlfdXNhZ2VfbWI6IEpvaS5udW1iZXIoKS5taW4oMCkucmVxdWlyZWQoKVxuICB9KS5yZXF1aXJlZCgpLFxuICBmaWxlX3BhdGg6IEpvaS5zdHJpbmcoKSxcbiAgY29uZmlnX3BhdGg6IEpvaS5zdHJpbmcoKSxcbiAgdG9rZW5pemVyX3BhdGg6IEpvaS5zdHJpbmcoKVxufSk7XG5cbmNvbnN0IG1vZGVsU2VhcmNoU2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIHF1ZXJ5OiBKb2kuc3RyaW5nKCkuYWxsb3coJycpLFxuICBmaWx0ZXJzOiBKb2kub2JqZWN0KHtcbiAgICBtb2RlbF90eXBlOiBKb2kuYXJyYXkoKS5pdGVtcyhKb2kuc3RyaW5nKCkudmFsaWQoJ2ZvdW5kYXRpb24nLCAnZmluZV90dW5lZCcsICdzcGVjaWFsaXplZCcsICdjdXN0b20nKSksXG4gICAgY2FwYWJpbGl0aWVzOiBKb2kuYXJyYXkoKS5pdGVtcyhKb2kuc3RyaW5nKCkpLFxuICAgIHNpemVfcmFuZ2U6IEpvaS5vYmplY3Qoe1xuICAgICAgbWluX21iOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLm1pbigwKSxcbiAgICAgIG1heF9tYjogSm9pLm51bWJlcigpLmludGVnZXIoKS5taW4oMClcbiAgICB9KSxcbiAgICBwZXJmb3JtYW5jZV90aHJlc2hvbGQ6IEpvaS5vYmplY3QoKS5wYXR0ZXJuKEpvaS5zdHJpbmcoKSwgSm9pLm51bWJlcigpKSxcbiAgICBkZXBsb3ltZW50X3N0YXR1czogSm9pLmFycmF5KCkuaXRlbXMoSm9pLnN0cmluZygpLnZhbGlkKCdwZW5kaW5nJywgJ2RlcGxveWVkJywgJ2RlcHJlY2F0ZWQnLCAnZmFpbGVkJykpLFxuICAgIHRhZ3M6IEpvaS5hcnJheSgpLml0ZW1zKEpvaS5zdHJpbmcoKSksXG4gICAgY3JlYXRlZF9hZnRlcjogSm9pLmRhdGUoKS5pc28oKSxcbiAgICBjcmVhdGVkX2JlZm9yZTogSm9pLmRhdGUoKS5pc28oKVxuICB9KS5kZWZhdWx0KHt9KSxcbiAgc29ydF9ieTogSm9pLnN0cmluZygpLnZhbGlkKCduYW1lJywgJ2NyZWF0ZWRfYXQnLCAnc2l6ZV9tYicsICdwZXJmb3JtYW5jZScsICd1c2FnZScpLmRlZmF1bHQoJ2NyZWF0ZWRfYXQnKSxcbiAgc29ydF9vcmRlcjogSm9pLnN0cmluZygpLnZhbGlkKCdhc2MnLCAnZGVzYycpLmRlZmF1bHQoJ2Rlc2MnKSxcbiAgbGltaXQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDEpLm1heCgxMDApLmRlZmF1bHQoMjApLFxuICBvZmZzZXQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCkubWluKDApLmRlZmF1bHQoMClcbn0pO1xuXG4vKipcbiAqIEByb3V0ZSBQT1NUIC9hcGkvdHJhaW5pbmcvam9ic1xuICogQGRlc2MgQ3JlYXRlIGEgbmV3IHRyYWluaW5nIGpvYlxuICovXG5yb3V0ZXIucG9zdCgnL2pvYnMnLCB2YWxpZGF0aW9uKHRyYWluaW5nQ29uZmlnU2NoZW1hKSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgam9iID0gYXdhaXQgbW9kZWxUcmFpbmluZ0VuZ2luZS5jcmVhdGVUcmFpbmluZ0pvYihyZXEuYm9keSk7XG4gICAgXG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgam9iX2lkOiBqb2IuaWQsXG4gICAgICAgIHN0YXR1czogam9iLnN0YXR1cyxcbiAgICAgICAgY29uZmlnOiBqb2IuY29uZmlnLFxuICAgICAgICBjcmVhdGVkX2F0OiBqb2IuY29uZmlnLm1ldGFkYXRhLmNyZWF0ZWRfYXRcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyB0cmFpbmluZyBqb2I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBjcmVhdGUgdHJhaW5pbmcgam9iJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgUE9TVCAvYXBpL3RyYWluaW5nL2pvYnMvOmpvYklkL3N0YXJ0XG4gKiBAZGVzYyBTdGFydCBhIHRyYWluaW5nIGpvYlxuICovXG5yb3V0ZXIucG9zdCgnL2pvYnMvOmpvYklkL3N0YXJ0JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBqb2JJZCB9ID0gcmVxLnBhcmFtcztcbiAgICBhd2FpdCBtb2RlbFRyYWluaW5nRW5naW5lLnN0YXJ0VHJhaW5pbmdKb2Ioam9iSWQpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiBgVHJhaW5pbmcgam9iICR7am9iSWR9IHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5YFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHN0YXJ0aW5nIHRyYWluaW5nIGpvYjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHN0YXJ0IHRyYWluaW5nIGpvYidcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHJvdXRlIEdFVCAvYXBpL3RyYWluaW5nL2pvYnMvOmpvYklkXG4gKiBAZGVzYyBHZXQgdHJhaW5pbmcgam9iIGRldGFpbHNcbiAqL1xucm91dGVyLmdldCgnL2pvYnMvOmpvYklkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBqb2JJZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCBqb2IgPSBtb2RlbFRyYWluaW5nRW5naW5lLmdldFRyYWluaW5nSm9iKGpvYklkKTtcbiAgICBcbiAgICBpZiAoIWpvYikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiAnVHJhaW5pbmcgam9iIG5vdCBmb3VuZCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogam9iXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyB0cmFpbmluZyBqb2I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBnZXQgdHJhaW5pbmcgam9iJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvdHJhaW5pbmcvam9ic1xuICogQGRlc2MgTGlzdCB0cmFpbmluZyBqb2JzIHdpdGggZmlsdGVyc1xuICovXG5yb3V0ZXIuZ2V0KCcvam9icycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGZpbHRlcnM6IGFueSA9IHt9O1xuICAgIFxuICAgIGlmIChyZXEucXVlcnkuc3RhdHVzKSBmaWx0ZXJzLnN0YXR1cyA9IHJlcS5xdWVyeS5zdGF0dXMgYXMgc3RyaW5nO1xuICAgIGlmIChyZXEucXVlcnkubW9kZWwpIGZpbHRlcnMubW9kZWwgPSByZXEucXVlcnkubW9kZWwgYXMgc3RyaW5nO1xuICAgIGlmIChyZXEucXVlcnkuY3JlYXRlZF9hZnRlcikgZmlsdGVycy5jcmVhdGVkX2FmdGVyID0gbmV3IERhdGUocmVxLnF1ZXJ5LmNyZWF0ZWRfYWZ0ZXIgYXMgc3RyaW5nKTtcbiAgICBpZiAocmVxLnF1ZXJ5LmNyZWF0ZWRfYmVmb3JlKSBmaWx0ZXJzLmNyZWF0ZWRfYmVmb3JlID0gbmV3IERhdGUocmVxLnF1ZXJ5LmNyZWF0ZWRfYmVmb3JlIGFzIHN0cmluZyk7XG4gICAgXG4gICAgY29uc3Qgam9icyA9IG1vZGVsVHJhaW5pbmdFbmdpbmUubGlzdFRyYWluaW5nSm9icyhmaWx0ZXJzKTtcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBqb2JzLFxuICAgICAgICB0b3RhbF9jb3VudDogam9icy5sZW5ndGhcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsaXN0aW5nIHRyYWluaW5nIGpvYnM6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBsaXN0IHRyYWluaW5nIGpvYnMnXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEByb3V0ZSBQT1NUIC9hcGkvdHJhaW5pbmcvam9icy86am9iSWQvY2FuY2VsXG4gKiBAZGVzYyBDYW5jZWwgYSB0cmFpbmluZyBqb2JcbiAqL1xucm91dGVyLnBvc3QoJy9qb2JzLzpqb2JJZC9jYW5jZWwnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGpvYklkIH0gPSByZXEucGFyYW1zO1xuICAgIGF3YWl0IG1vZGVsVHJhaW5pbmdFbmdpbmUuY2FuY2VsVHJhaW5pbmdKb2Ioam9iSWQpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiBgVHJhaW5pbmcgam9iICR7am9iSWR9IGNhbmNlbGxlZCBzdWNjZXNzZnVsbHlgXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FuY2VsbGluZyB0cmFpbmluZyBqb2I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBjYW5jZWwgdHJhaW5pbmcgam9iJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgUE9TVCAvYXBpL3RyYWluaW5nL3N5bnRoZXRpYy1kYXRhXG4gKiBAZGVzYyBHZW5lcmF0ZSBzeW50aGV0aWMgdHJhaW5pbmcgZGF0YVxuICovXG5yb3V0ZXIucG9zdCgnL3N5bnRoZXRpYy1kYXRhJywgdmFsaWRhdGlvbihzeW50aGV0aWNEYXRhU2NoZW1hKSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3V0cHV0UGF0aCA9IGF3YWl0IG1vZGVsVHJhaW5pbmdFbmdpbmUuZ2VuZXJhdGVTeW50aGV0aWNEYXRhKHJlcS5ib2R5KTtcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBvdXRwdXRfcGF0aDogb3V0cHV0UGF0aCxcbiAgICAgICAgZ2VuZXJhdGlvbl9jb25maWc6IHJlcS5ib2R5LmdlbmVyYXRpb25fY29uZmlnLFxuICAgICAgICB0ZW1wbGF0ZV9jb3VudDogcmVxLmJvZHkudGVtcGxhdGVfcHJvbXB0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIHN5bnRoZXRpYyBkYXRhOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gZ2VuZXJhdGUgc3ludGhldGljIGRhdGEnXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEByb3V0ZSBQT1NUIC9hcGkvdHJhaW5pbmcvZXZhbHVhdGUvOm1vZGVsTmFtZVxuICogQGRlc2MgRXZhbHVhdGUgbW9kZWwgcGVyZm9ybWFuY2VcbiAqL1xucm91dGVyLnBvc3QoJy9ldmFsdWF0ZS86bW9kZWxOYW1lJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtb2RlbE5hbWUgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgeyBiZW5jaG1hcmtfZGF0YXNldHMgPSBbXSwgY3VzdG9tX21ldHJpY3MgPSBbXSB9ID0gcmVxLmJvZHk7XG4gICAgXG4gICAgY29uc3QgZXZhbHVhdGlvbiA9IGF3YWl0IG1vZGVsVHJhaW5pbmdFbmdpbmUuZXZhbHVhdGVNb2RlbChcbiAgICAgIG1vZGVsTmFtZSxcbiAgICAgIGJlbmNobWFya19kYXRhc2V0cyxcbiAgICAgIGN1c3RvbV9tZXRyaWNzXG4gICAgKTtcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogZXZhbHVhdGlvblxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGV2YWx1YXRpbmcgbW9kZWw6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBldmFsdWF0ZSBtb2RlbCdcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHJvdXRlIFBPU1QgL2FwaS90cmFpbmluZy9kZXBsb3kvOm1vZGVsVmVyc2lvbklkXG4gKiBAZGVzYyBEZXBsb3kgYSB0cmFpbmVkIG1vZGVsXG4gKi9cbnJvdXRlci5wb3N0KCcvZGVwbG95Lzptb2RlbFZlcnNpb25JZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgbW9kZWxWZXJzaW9uSWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgdGFyZ2V0ID0gJ2xvY2FsJyxcbiAgICAgIGF1dG9fcm9sbGJhY2sgPSB0cnVlLFxuICAgICAgaGVhbHRoX2NoZWNrX3RpbWVvdXQgPSAzMDAwMCxcbiAgICAgIGRlcGxveW1lbnRfdGFncyA9IFtdXG4gICAgfSA9IHJlcS5ib2R5O1xuICAgIFxuICAgIGNvbnN0IGRlcGxveW1lbnQgPSBhd2FpdCBtb2RlbFRyYWluaW5nRW5naW5lLmRlcGxveU1vZGVsKFxuICAgICAgbW9kZWxWZXJzaW9uSWQsXG4gICAgICB0YXJnZXQsXG4gICAgICB7XG4gICAgICAgIGF1dG9fcm9sbGJhY2ssXG4gICAgICAgIGhlYWx0aF9jaGVja190aW1lb3V0LFxuICAgICAgICBkZXBsb3ltZW50X3RhZ3NcbiAgICAgIH1cbiAgICApO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBkZXBsb3ltZW50XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVwbG95aW5nIG1vZGVsOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gZGVwbG95IG1vZGVsJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvdHJhaW5pbmcvc3RhdGlzdGljc1xuICogQGRlc2MgR2V0IHRyYWluaW5nIHN5c3RlbSBzdGF0aXN0aWNzXG4gKi9cbnJvdXRlci5nZXQoJy9zdGF0aXN0aWNzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3RhdHMgPSBtb2RlbFRyYWluaW5nRW5naW5lLmdldFRyYWluaW5nU3RhdGlzdGljcygpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBzdGF0c1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgdHJhaW5pbmcgc3RhdGlzdGljczonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGdldCB0cmFpbmluZyBzdGF0aXN0aWNzJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLy8gTW9kZWwgUmVnaXN0cnkgUm91dGVzXG5cbi8qKlxuICogQHJvdXRlIFBPU1QgL2FwaS90cmFpbmluZy9tb2RlbHNcbiAqIEBkZXNjIFJlZ2lzdGVyIGEgbmV3IG1vZGVsXG4gKi9cbnJvdXRlci5wb3N0KCcvbW9kZWxzJywgdmFsaWRhdGlvbihtb2RlbFJlZ2lzdHJhdGlvblNjaGVtYSksIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG1vZGVsID0gYXdhaXQgbW9kZWxSZWdpc3RyeS5yZWdpc3Rlck1vZGVsKHJlcS5ib2R5KTtcbiAgICBcbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogbW9kZWxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWdpc3RlcmluZyBtb2RlbDonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHJlZ2lzdGVyIG1vZGVsJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvdHJhaW5pbmcvbW9kZWxzLzptb2RlbElkXG4gKiBAZGVzYyBHZXQgbW9kZWwgZGV0YWlsc1xuICovXG5yb3V0ZXIuZ2V0KCcvbW9kZWxzLzptb2RlbElkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtb2RlbElkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IG1vZGVsID0gbW9kZWxSZWdpc3RyeS5nZXRNb2RlbChtb2RlbElkKTtcbiAgICBcbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdNb2RlbCBub3QgZm91bmQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IG1vZGVsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBtb2RlbDonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGdldCBtb2RlbCdcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHJvdXRlIFBPU1QgL2FwaS90cmFpbmluZy9tb2RlbHMvc2VhcmNoXG4gKiBAZGVzYyBTZWFyY2ggbW9kZWxzIHdpdGggZmlsdGVyc1xuICovXG5yb3V0ZXIucG9zdCgnL21vZGVscy9zZWFyY2gnLCB2YWxpZGF0aW9uKG1vZGVsU2VhcmNoU2NoZW1hKSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gbW9kZWxSZWdpc3RyeS5zZWFyY2hNb2RlbHMocmVxLmJvZHkpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBzZWFyY2hSZXN1bHRcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmcgbW9kZWxzOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gc2VhcmNoIG1vZGVscydcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHJvdXRlIFBPU1QgL2FwaS90cmFpbmluZy9tb2RlbHMvY29tcGFyZVxuICogQGRlc2MgQ29tcGFyZSB0d28gbW9kZWxzXG4gKi9cbnJvdXRlci5wb3N0KCcvbW9kZWxzL2NvbXBhcmUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1vZGVsX2FfaWQsIG1vZGVsX2JfaWQgfSA9IHJlcS5ib2R5O1xuICAgIFxuICAgIGlmICghbW9kZWxfYV9pZCB8fCAhbW9kZWxfYl9pZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiAnQm90aCBtb2RlbF9hX2lkIGFuZCBtb2RlbF9iX2lkIGFyZSByZXF1aXJlZCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjb21wYXJpc29uID0gYXdhaXQgbW9kZWxSZWdpc3RyeS5jb21wYXJlTW9kZWxzKG1vZGVsX2FfaWQsIG1vZGVsX2JfaWQpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBjb21wYXJpc29uXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY29tcGFyaW5nIG1vZGVsczonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGNvbXBhcmUgbW9kZWxzJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvdHJhaW5pbmcvbW9kZWxzLzptb2RlbElkL3VzYWdlXG4gKiBAZGVzYyBHZXQgbW9kZWwgdXNhZ2Ugc3RhdGlzdGljc1xuICovXG5yb3V0ZXIuZ2V0KCcvbW9kZWxzLzptb2RlbElkL3VzYWdlJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtb2RlbElkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHRpbWVSYW5nZSA9IHJlcS5xdWVyeS5zdGFydCAmJiByZXEucXVlcnkuZW5kID8ge1xuICAgICAgc3RhcnQ6IG5ldyBEYXRlKHJlcS5xdWVyeS5zdGFydCBhcyBzdHJpbmcpLFxuICAgICAgZW5kOiBuZXcgRGF0ZShyZXEucXVlcnkuZW5kIGFzIHN0cmluZylcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIFxuICAgIGNvbnN0IHVzYWdlID0gbW9kZWxSZWdpc3RyeS5nZXRNb2RlbFVzYWdlU3RhdHMobW9kZWxJZCwgdGltZVJhbmdlKTtcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogdXNhZ2VcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIG1vZGVsIHVzYWdlOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gZ2V0IG1vZGVsIHVzYWdlJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvdHJhaW5pbmcvbW9kZWxzLzptb2RlbElkL3ZlcnNpb25zXG4gKiBAZGVzYyBHZXQgbW9kZWwgdmVyc2lvbiBoaXN0b3J5XG4gKi9cbnJvdXRlci5nZXQoJy9tb2RlbHMvOm1vZGVsSWQvdmVyc2lvbnMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1vZGVsSWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgdmVyc2lvbnMgPSBtb2RlbFJlZ2lzdHJ5LmdldE1vZGVsVmVyc2lvbkhpc3RvcnkobW9kZWxJZCk7XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbW9kZWxfaWQ6IG1vZGVsSWQsXG4gICAgICAgIHZlcnNpb25zLFxuICAgICAgICB0b3RhbF92ZXJzaW9uczogdmVyc2lvbnMubGVuZ3RoXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBtb2RlbCB2ZXJzaW9uczonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGdldCBtb2RlbCB2ZXJzaW9ucydcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHJvdXRlIFBVVCAvYXBpL3RyYWluaW5nL21vZGVscy86bW9kZWxJZFxuICogQGRlc2MgVXBkYXRlIG1vZGVsIG1ldGFkYXRhXG4gKi9cbnJvdXRlci5wdXQoJy9tb2RlbHMvOm1vZGVsSWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1vZGVsSWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgdXBkYXRlZE1vZGVsID0gYXdhaXQgbW9kZWxSZWdpc3RyeS51cGRhdGVNb2RlbChtb2RlbElkLCByZXEuYm9keSk7XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHVwZGF0ZWRNb2RlbFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIG1vZGVsOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gdXBkYXRlIG1vZGVsJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgREVMRVRFIC9hcGkvdHJhaW5pbmcvbW9kZWxzLzptb2RlbElkXG4gKiBAZGVzYyBEZWxldGUgYSBtb2RlbFxuICovXG5yb3V0ZXIuZGVsZXRlKCcvbW9kZWxzLzptb2RlbElkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtb2RlbElkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IGZvcmNlID0gcmVxLnF1ZXJ5LmZvcmNlID09PSAndHJ1ZSc7XG4gICAgXG4gICAgYXdhaXQgbW9kZWxSZWdpc3RyeS5kZWxldGVNb2RlbChtb2RlbElkLCBmb3JjZSk7XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IGBNb2RlbCAke21vZGVsSWR9IGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5YFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIG1vZGVsOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gZGVsZXRlIG1vZGVsJ1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAcm91dGUgR0VUIC9hcGkvdHJhaW5pbmcvcmVnaXN0cnkvc3RhdGlzdGljc1xuICogQGRlc2MgR2V0IG1vZGVsIHJlZ2lzdHJ5IHN0YXRpc3RpY3NcbiAqL1xucm91dGVyLmdldCgnL3JlZ2lzdHJ5L3N0YXRpc3RpY3MnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGF0cyA9IG1vZGVsUmVnaXN0cnkuZ2V0UmVnaXN0cnlTdGF0aXN0aWNzKCk7XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHN0YXRzXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyByZWdpc3RyeSBzdGF0aXN0aWNzOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gZ2V0IHJlZ2lzdHJ5IHN0YXRpc3RpY3MnXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEByb3V0ZSBHRVQgL2FwaS90cmFpbmluZy9oZWFsdGhcbiAqIEBkZXNjIEhlYWx0aCBjaGVjayBmb3IgdHJhaW5pbmcgc3lzdGVtXG4gKi9cbnJvdXRlci5nZXQoJy9oZWFsdGgnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBoZWFsdGggPSB7XG4gICAgICBzdGF0dXM6ICdoZWFsdGh5JyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgdHJhaW5pbmdfZW5naW5lOiAnaGVhbHRoeScsXG4gICAgICAgIG1vZGVsX3JlZ2lzdHJ5OiAnaGVhbHRoeScsXG4gICAgICAgIHRlbnNvcmZsb3c6ICdoZWFsdGh5J1xuICAgICAgfSxcbiAgICAgIHN0YXRpc3RpY3M6IHtcbiAgICAgICAgYWN0aXZlX2pvYnM6IG1vZGVsVHJhaW5pbmdFbmdpbmUubGlzdFRyYWluaW5nSm9icyh7IHN0YXR1czogJ3RyYWluaW5nJyB9KS5sZW5ndGgsXG4gICAgICAgIHRvdGFsX21vZGVsczogbW9kZWxSZWdpc3RyeS5nZXRSZWdpc3RyeVN0YXRpc3RpY3MoKS50b3RhbF9tb2RlbHMsXG4gICAgICAgIHN5c3RlbV9sb2FkOiBwcm9jZXNzLmNwdVVzYWdlKCksXG4gICAgICAgIG1lbW9yeV91c2FnZTogcHJvY2Vzcy5tZW1vcnlVc2FnZSgpXG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogaGVhbHRoXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyB0cmFpbmluZyBoZWFsdGg6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1RyYWluaW5nIHN5c3RlbSBoZWFsdGggY2hlY2sgZmFpbGVkJ1xuICAgIH0pO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFZRTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWkYsTUFBQUUsU0FBQTtBQUFBO0FBQUEsQ0FBQUYsYUFBQSxHQUFBRyxDQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFDLHFCQUFBO0FBQUE7QUFBQSxDQUFBTixhQUFBLEdBQUFHLENBQUEsT0FBQUUsT0FBQTtBQUNBLE1BQUFFLGVBQUE7QUFBQTtBQUFBLENBQUFQLGFBQUEsR0FBQUcsQ0FBQSxPQUFBRSxPQUFBO0FBQ0EsTUFBQUcsWUFBQTtBQUFBO0FBQUEsQ0FBQVIsYUFBQSxHQUFBRyxDQUFBLE9BQUFFLE9BQUE7QUFDQSxNQUFBSSxLQUFBO0FBQUE7QUFBQSxDQUFBVCxhQUFBLEdBQUFHLENBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsTUFBTUssTUFBTTtBQUFBO0FBQUEsQ0FBQVYsYUFBQSxHQUFBRyxDQUFBLE9BQUdELFNBQUEsQ0FBQVMsT0FBTyxDQUFDQyxNQUFNLEVBQUU7QUFFL0I7QUFDQSxNQUFNQyxvQkFBb0I7QUFBQTtBQUFBLENBQUFiLGFBQUEsR0FBQUcsQ0FBQSxPQUFHTSxLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0VBQ3RDQyxJQUFJLEVBQUVOLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ0MsUUFBUSxFQUFFLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLEdBQUcsQ0FBQztFQUM3Q0MsS0FBSyxFQUFFWCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNDLFFBQVEsRUFBRTtFQUM5QkksWUFBWSxFQUFFWixLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0lBQ3ZCUSxNQUFNLEVBQUViLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ08sS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDTixRQUFRLEVBQUU7SUFDN0VPLElBQUksRUFBRWYsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDUyxJQUFJLENBQUMsUUFBUSxFQUFFO01BQUVDLEVBQUUsRUFBRSxNQUFNO01BQUVDLElBQUksRUFBRWxCLEtBQUEsQ0FBQUUsT0FBRyxDQUFDTSxRQUFRO0lBQUUsQ0FBRSxDQUFDO0lBQ3ZFVyxLQUFLLEVBQUVuQixLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNTLElBQUksQ0FBQyxRQUFRLEVBQUU7TUFBRUMsRUFBRSxFQUFFLFVBQVU7TUFBRUMsSUFBSSxFQUFFbEIsS0FBQSxDQUFBRSxPQUFHLENBQUNNLFFBQVE7SUFBRSxDQUFFLENBQUM7SUFDNUVZLFFBQVEsRUFBRXBCLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ1MsSUFBSSxDQUFDLFFBQVEsRUFBRTtNQUFFQyxFQUFFLEVBQUUsS0FBSztNQUFFQyxJQUFJLEVBQUVsQixLQUFBLENBQUFFLE9BQUcsQ0FBQ00sUUFBUTtJQUFFLENBQUUsQ0FBQztJQUMxRWEsTUFBTSxFQUFFckIsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDTyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUNOLFFBQVEsRUFBRTtJQUN2RWMsZ0JBQWdCLEVBQUV0QixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDZCxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQ0YsUUFBUTtHQUMxRCxDQUFDLENBQUNBLFFBQVEsRUFBRTtFQUNiZ0IsZUFBZSxFQUFFeEIsS0FBQSxDQUFBRSxPQUFHLENBQUNHLE1BQU0sQ0FBQztJQUMxQm9CLGFBQWEsRUFBRXpCLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNkLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDRixRQUFRLEVBQUU7SUFDMURrQixVQUFVLEVBQUUxQixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDRixRQUFRLEVBQUU7SUFDOURvQixNQUFNLEVBQUU1QixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDRixRQUFRLEVBQUU7SUFDMURxQixZQUFZLEVBQUU3QixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ1AsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN0RDRCLFlBQVksRUFBRTlCLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDUixPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3RENkIsWUFBWSxFQUFFL0IsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDckQ4QixrQkFBa0IsRUFBRWhDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ1AsT0FBTyxDQUFDLEdBQUc7R0FDcEQsQ0FBQyxDQUFDTSxRQUFRLEVBQUU7RUFDYnlCLFlBQVksRUFBRWpDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDRyxNQUFNLENBQUM7SUFDdkI2QixTQUFTLEVBQUVsQyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNPLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQ1osT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUNqRmlDLFNBQVMsRUFBRW5DLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ08sS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDWixPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ2hHa0MsY0FBYyxFQUFFcEMsS0FBQSxDQUFBRSxPQUFHLENBQUNHLE1BQU0sQ0FBQztNQUN6QmdDLE9BQU8sRUFBRXJDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDb0MsT0FBTyxFQUFFLENBQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDO01BQ3BDcUMsUUFBUSxFQUFFdkMsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ0ksT0FBTyxFQUFFLENBQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNQLE9BQU8sQ0FBQyxDQUFDLENBQUM7TUFDbERzQyxNQUFNLEVBQUV4QyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNMLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztNQUMvQ3VDLFNBQVMsRUFBRXpDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ1AsT0FBTyxDQUFDLEtBQUs7S0FDN0MsQ0FBQyxDQUFDQSxPQUFPO0dBQ1gsQ0FBQyxDQUFDQSxPQUFPLEVBQUU7RUFDWndDLFVBQVUsRUFBRTFDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDRyxNQUFNLENBQUM7SUFDckJzQyxPQUFPLEVBQUUzQyxLQUFBLENBQUFFLE9BQUcsQ0FBQzBDLEtBQUssRUFBRSxDQUFDQyxLQUFLLENBQUM3QyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUMsQ0FBQ0wsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzFFNEMsa0JBQWtCLEVBQUU5QyxLQUFBLENBQUFFLE9BQUcsQ0FBQzBDLEtBQUssRUFBRSxDQUFDQyxLQUFLLENBQUM3QyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUMsQ0FBQ0wsT0FBTyxDQUFDLEVBQUUsQ0FBQztJQUMvRDZDLG9CQUFvQixFQUFFL0MsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ0ksT0FBTyxFQUFFLENBQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNQLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUQ4QyxlQUFlLEVBQUVoRCxLQUFBLENBQUFFLE9BQUcsQ0FBQ29DLE9BQU8sRUFBRSxDQUFDcEMsT0FBTyxDQUFDLElBQUk7R0FDNUMsQ0FBQyxDQUFDQSxPQUFPLEVBQUU7RUFDWitDLFNBQVMsRUFBRWpELEtBQUEsQ0FBQUUsT0FBRyxDQUFDRyxNQUFNLENBQUM7SUFDcEI2QyxnQkFBZ0IsRUFBRWxELEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNJLE9BQU8sRUFBRSxDQUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQzBDLFNBQVMsRUFBRW5ELEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNJLE9BQU8sRUFBRSxDQUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4QzJDLFlBQVksRUFBRXBELEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNJLE9BQU8sRUFBRSxDQUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQzRDLGFBQWEsRUFBRXJELEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNJLE9BQU8sRUFBRSxDQUFDbEIsR0FBRyxDQUFDLENBQUM7R0FDNUMsQ0FBQyxDQUFDUCxPQUFPLENBQUMsRUFBRSxDQUFDO0VBQ2RvRCxVQUFVLEVBQUV0RCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0lBQ3JCa0QsV0FBVyxFQUFFdkQsS0FBQSxDQUFBRSxPQUFHLENBQUNvQyxPQUFPLEVBQUUsQ0FBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDekNzRCxpQkFBaUIsRUFBRXhELEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ08sS0FBSyxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDWixPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ2pHdUQsbUJBQW1CLEVBQUV6RCxLQUFBLENBQUFFLE9BQUcsQ0FBQ29DLE9BQU8sRUFBRSxDQUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNoRHdELG9CQUFvQixFQUFFMUQsS0FBQSxDQUFBRSxPQUFHLENBQUNvQyxPQUFPLEVBQUUsQ0FBQ3BDLE9BQU8sQ0FBQyxJQUFJO0dBQ2pELENBQUMsQ0FBQ0EsT0FBTyxFQUFFO0VBQ1p5RCxRQUFRLEVBQUUzRCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0lBQ25CdUQsV0FBVyxFQUFFNUQsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDTCxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ3JDMkQsSUFBSSxFQUFFN0QsS0FBQSxDQUFBRSxPQUFHLENBQUMwQyxLQUFLLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDN0MsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDLENBQUNMLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDakQ0RCxVQUFVLEVBQUU5RCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFO0lBQ3hCd0Qsa0JBQWtCLEVBQUUvRCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNMLE9BQU8sQ0FBQyxxQkFBcUI7R0FDL0QsQ0FBQyxDQUFDQSxPQUFPO0NBQ1gsQ0FBQztBQUVGLE1BQU04RCxtQkFBbUI7QUFBQTtBQUFBLENBQUF6RSxhQUFBLEdBQUFHLENBQUEsUUFBR00sS0FBQSxDQUFBRSxPQUFHLENBQUNHLE1BQU0sQ0FBQztFQUNyQzRELGdCQUFnQixFQUFFakUsS0FBQSxDQUFBRSxPQUFHLENBQUMwQyxLQUFLLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDN0MsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0QsUUFBUSxFQUFFO0VBQ25FMEQsaUJBQWlCLEVBQUVsRSxLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0lBQzVCOEQsV0FBVyxFQUFFbkUsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ0ksT0FBTyxFQUFFLENBQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQ0YsUUFBUSxFQUFFO0lBQ2pFNEQsV0FBVyxFQUFFcEUsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDcERtRSxVQUFVLEVBQUVyRSxLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDUixPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ2pFb0UsaUJBQWlCLEVBQUV0RSxLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUMxRHFFLGNBQWMsRUFBRXZFLEtBQUEsQ0FBQUUsT0FBRyxDQUFDb0MsT0FBTyxFQUFFLENBQUNwQyxPQUFPLENBQUMsSUFBSTtHQUMzQyxDQUFDLENBQUNNLFFBQVEsRUFBRTtFQUNiZ0UsYUFBYSxFQUFFeEUsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDTyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQ1osT0FBTyxDQUFDLE9BQU87Q0FDekUsQ0FBQztBQUVGLE1BQU11RSx1QkFBdUI7QUFBQTtBQUFBLENBQUFsRixhQUFBLEdBQUFHLENBQUEsUUFBR00sS0FBQSxDQUFBRSxPQUFHLENBQUNHLE1BQU0sQ0FBQztFQUN6Q0MsSUFBSSxFQUFFTixLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxHQUFHLENBQUM7RUFDN0NnRSxPQUFPLEVBQUUxRSxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNDLFFBQVEsRUFBRTtFQUNoQ29ELFdBQVcsRUFBRTVELEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ0MsUUFBUSxFQUFFO0VBQ3BDbUUsTUFBTSxFQUFFM0UsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDQyxRQUFRLEVBQUU7RUFDL0JvRSxPQUFPLEVBQUU1RSxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNDLFFBQVEsRUFBRTtFQUNoQ3FELElBQUksRUFBRTdELEtBQUEsQ0FBQUUsT0FBRyxDQUFDMEMsS0FBSyxFQUFFLENBQUNDLEtBQUssQ0FBQzdDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQyxDQUFDTCxPQUFPLENBQUMsRUFBRSxDQUFDO0VBQ2pEMkUsVUFBVSxFQUFFN0UsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDTyxLQUFLLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUNOLFFBQVEsRUFBRTtFQUM5RnNELFVBQVUsRUFBRTlELEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUU7RUFDeEJ1RSxlQUFlLEVBQUU5RSxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFO0VBQzdCd0UsT0FBTyxFQUFFL0UsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ0ksT0FBTyxFQUFFLENBQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNELFFBQVEsRUFBRTtFQUNqRHdFLGVBQWUsRUFBRWhGLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNJLE9BQU8sRUFBRSxDQUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDRCxRQUFRLEVBQUU7RUFDekR5RSxZQUFZLEVBQUVqRixLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0lBQ3ZCNkUsWUFBWSxFQUFFbEYsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxDQUFDQyxRQUFRLEVBQUU7SUFDckMyRSxNQUFNLEVBQUVuRixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0QsUUFBUSxFQUFFO0lBQ2hENEUsV0FBVyxFQUFFcEYsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ0ksT0FBTyxFQUFFLENBQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNELFFBQVEsRUFBRTtJQUNyRDZFLGVBQWUsRUFBRXJGLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNJLE9BQU8sRUFBRSxDQUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDRCxRQUFRLEVBQUU7SUFDekQ4RSxVQUFVLEVBQUV0RixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0QsUUFBUSxFQUFFO0lBQ3BEK0UsbUJBQW1CLEVBQUV2RixLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0QsUUFBUTtHQUM1RCxDQUFDLENBQUNBLFFBQVEsRUFBRTtFQUNiZ0YsWUFBWSxFQUFFeEYsS0FBQSxDQUFBRSxPQUFHLENBQUNHLE1BQU0sQ0FBQztJQUN2Qm9GLGVBQWUsRUFBRXpGLEtBQUEsQ0FBQUUsT0FBRyxDQUFDb0MsT0FBTyxFQUFFLENBQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzdDd0YsbUJBQW1CLEVBQUUxRixLQUFBLENBQUFFLE9BQUcsQ0FBQ29DLE9BQU8sRUFBRSxDQUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNqRHlGLGtCQUFrQixFQUFFM0YsS0FBQSxDQUFBRSxPQUFHLENBQUNvQyxPQUFPLEVBQUUsQ0FBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDaEQwRixhQUFhLEVBQUU1RixLQUFBLENBQUFFLE9BQUcsQ0FBQ29DLE9BQU8sRUFBRSxDQUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUMzQzJGLGVBQWUsRUFBRTdGLEtBQUEsQ0FBQUUsT0FBRyxDQUFDb0MsT0FBTyxFQUFFLENBQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzdDNEYsb0JBQW9CLEVBQUU5RixLQUFBLENBQUFFLE9BQUcsQ0FBQ29DLE9BQU8sRUFBRSxDQUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNsRDZGLFVBQVUsRUFBRS9GLEtBQUEsQ0FBQUUsT0FBRyxDQUFDb0MsT0FBTyxFQUFFLENBQUNwQyxPQUFPLENBQUMsS0FBSztHQUN4QyxDQUFDLENBQUNBLE9BQU8sRUFBRTtFQUNaOEYsbUJBQW1CLEVBQUVoRyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0csTUFBTSxDQUFDO0lBQzlCNEYsUUFBUSxFQUFFakcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BDd0YsUUFBUSxFQUFFbEcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BDeUYsVUFBVSxFQUFFbkcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RDMEYsV0FBVyxFQUFFcEcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDMkYsVUFBVSxFQUFFckcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQjZGLG9CQUFvQixFQUFFdEcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDRCxRQUFRLEVBQUU7SUFDcEQrRix5QkFBeUIsRUFBRXZHLEtBQUEsQ0FBQUUsT0FBRyxDQUFDcUIsTUFBTSxFQUFFLENBQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0QsUUFBUSxFQUFFO0lBQ3pEZ0csZUFBZSxFQUFFeEcsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDRCxRQUFRO0dBQzlDLENBQUMsQ0FBQ0EsUUFBUSxFQUFFO0VBQ2JpRyxTQUFTLEVBQUV6RyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFO0VBQ3ZCbUcsV0FBVyxFQUFFMUcsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRTtFQUN6Qm9HLGNBQWMsRUFBRTNHLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNO0NBQzNCLENBQUM7QUFFRixNQUFNcUcsaUJBQWlCO0FBQUE7QUFBQSxDQUFBckgsYUFBQSxHQUFBRyxDQUFBLFFBQUdNLEtBQUEsQ0FBQUUsT0FBRyxDQUFDRyxNQUFNLENBQUM7RUFDbkNjLEtBQUssRUFBRW5CLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQ3NHLEtBQUssQ0FBQyxFQUFFLENBQUM7RUFDN0JDLE9BQU8sRUFBRTlHLEtBQUEsQ0FBQUUsT0FBRyxDQUFDRyxNQUFNLENBQUM7SUFDbEJ3RSxVQUFVLEVBQUU3RSxLQUFBLENBQUFFLE9BQUcsQ0FBQzBDLEtBQUssRUFBRSxDQUFDQyxLQUFLLENBQUM3QyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNPLEtBQUssQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0RzBFLFlBQVksRUFBRXhGLEtBQUEsQ0FBQUUsT0FBRyxDQUFDMEMsS0FBSyxFQUFFLENBQUNDLEtBQUssQ0FBQzdDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQztJQUM3Q3dHLFVBQVUsRUFBRS9HLEtBQUEsQ0FBQUUsT0FBRyxDQUFDRyxNQUFNLENBQUM7TUFDckIyRyxNQUFNLEVBQUVoSCxLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDckN3RyxNQUFNLEVBQUVqSCxLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDO0tBQ3JDLENBQUM7SUFDRnlHLHFCQUFxQixFQUFFbEgsS0FBQSxDQUFBRSxPQUFHLENBQUNHLE1BQU0sRUFBRSxDQUFDOEcsT0FBTyxDQUFDbkgsS0FBQSxDQUFBRSxPQUFHLENBQUNLLE1BQU0sRUFBRSxFQUFFUCxLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDO0lBQ3ZFNkYsaUJBQWlCLEVBQUVwSCxLQUFBLENBQUFFLE9BQUcsQ0FBQzBDLEtBQUssRUFBRSxDQUFDQyxLQUFLLENBQUM3QyxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNPLEtBQUssQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RytDLElBQUksRUFBRTdELEtBQUEsQ0FBQUUsT0FBRyxDQUFDMEMsS0FBSyxFQUFFLENBQUNDLEtBQUssQ0FBQzdDLEtBQUEsQ0FBQUUsT0FBRyxDQUFDSyxNQUFNLEVBQUUsQ0FBQztJQUNyQzhHLGFBQWEsRUFBRXJILEtBQUEsQ0FBQUUsT0FBRyxDQUFDb0gsSUFBSSxFQUFFLENBQUNDLEdBQUcsRUFBRTtJQUMvQkMsY0FBYyxFQUFFeEgsS0FBQSxDQUFBRSxPQUFHLENBQUNvSCxJQUFJLEVBQUUsQ0FBQ0MsR0FBRztHQUMvQixDQUFDLENBQUNySCxPQUFPLENBQUMsRUFBRSxDQUFDO0VBQ2R1SCxPQUFPLEVBQUV6SCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNPLEtBQUssQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUNaLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDMUd3SCxVQUFVLEVBQUUxSCxLQUFBLENBQUFFLE9BQUcsQ0FBQ0ssTUFBTSxFQUFFLENBQUNPLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUNaLE9BQU8sQ0FBQyxNQUFNLENBQUM7RUFDN0R5SCxLQUFLLEVBQUUzSCxLQUFBLENBQUFFLE9BQUcsQ0FBQ3FCLE1BQU0sRUFBRSxDQUFDSSxPQUFPLEVBQUUsQ0FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDUixPQUFPLENBQUMsRUFBRSxDQUFDO0VBQ3pEMEgsTUFBTSxFQUFFNUgsS0FBQSxDQUFBRSxPQUFHLENBQUNxQixNQUFNLEVBQUUsQ0FBQ0ksT0FBTyxFQUFFLENBQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUNQLE9BQU8sQ0FBQyxDQUFDO0NBQ2hELENBQUM7QUFFRjs7OztBQUFBO0FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUM0SCxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUE5SCxZQUFBLENBQUErSCxVQUFVLEVBQUMxSCxvQkFBb0IsQ0FBQyxFQUFFLE9BQU8ySCxHQUFHLEVBQUVDLEdBQUcsS0FBSTtFQUFBO0VBQUF6SSxhQUFBLEdBQUEwSSxDQUFBO0VBQUExSSxhQUFBLEdBQUFHLENBQUE7RUFDeEUsSUFBSTtJQUNGLE1BQU13SSxHQUFHO0lBQUE7SUFBQSxDQUFBM0ksYUFBQSxHQUFBRyxDQUFBLFFBQUcsTUFBTUcscUJBQUEsQ0FBQXNJLG1CQUFtQixDQUFDQyxpQkFBaUIsQ0FBQ0wsR0FBRyxDQUFDTSxJQUFJLENBQUM7SUFBQztJQUFBOUksYUFBQSxHQUFBRyxDQUFBO0lBRWxFc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFO1FBQ0pDLE1BQU0sRUFBRVIsR0FBRyxDQUFDUyxFQUFFO1FBQ2RMLE1BQU0sRUFBRUosR0FBRyxDQUFDSSxNQUFNO1FBQ2xCTSxNQUFNLEVBQUVWLEdBQUcsQ0FBQ1UsTUFBTTtRQUNsQkMsVUFBVSxFQUFFWCxHQUFHLENBQUNVLE1BQU0sQ0FBQ2pGLFFBQVEsQ0FBQ2tGOztLQUVuQyxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUFBO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDZHFKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDhCQUE4QixFQUFFQSxLQUFLLENBQUM7SUFBQztJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ3JEc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLEtBQUs7TUFDZE0sS0FBSyxFQUFFQSxLQUFLLFlBQVlFLEtBQUs7TUFBQTtNQUFBLENBQUF6SixhQUFBLEdBQUEwSixDQUFBLFVBQUdILEtBQUssQ0FBQ0ksT0FBTztNQUFBO01BQUEsQ0FBQTNKLGFBQUEsR0FBQTBKLENBQUEsVUFBRywrQkFBK0I7S0FDaEYsQ0FBQztFQUNKO0FBQ0YsQ0FBQyxDQUFDO0FBRUY7Ozs7QUFBQTtBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBSUFPLE1BQU0sQ0FBQzRILElBQUksQ0FBQyxvQkFBb0IsRUFBRSxPQUFPRSxHQUFHLEVBQUVDLEdBQUcsS0FBSTtFQUFBO0VBQUF6SSxhQUFBLEdBQUEwSSxDQUFBO0VBQUExSSxhQUFBLEdBQUFHLENBQUE7RUFDbkQsSUFBSTtJQUNGLE1BQU07TUFBRXlKO0lBQUssQ0FBRTtJQUFBO0lBQUEsQ0FBQTVKLGFBQUEsR0FBQUcsQ0FBQSxRQUFHcUksR0FBRyxDQUFDcUIsTUFBTTtJQUFDO0lBQUE3SixhQUFBLEdBQUFHLENBQUE7SUFDN0IsTUFBTUcscUJBQUEsQ0FBQXNJLG1CQUFtQixDQUFDa0IsZ0JBQWdCLENBQUNGLEtBQUssQ0FBQztJQUFDO0lBQUE1SixhQUFBLEdBQUFHLENBQUE7SUFFbERzSSxHQUFHLENBQUNPLElBQUksQ0FBQztNQUNQQyxPQUFPLEVBQUUsSUFBSTtNQUNiVSxPQUFPLEVBQUUsZ0JBQWdCQyxLQUFLO0tBQy9CLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT0wsS0FBSyxFQUFFO0lBQUE7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNkcUosT0FBTyxDQUFDRCxLQUFLLENBQUMsOEJBQThCLEVBQUVBLEtBQUssQ0FBQztJQUFDO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDckRzSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxPQUFPLEVBQUUsS0FBSztNQUNkTSxLQUFLLEVBQUVBLEtBQUssWUFBWUUsS0FBSztNQUFBO01BQUEsQ0FBQXpKLGFBQUEsR0FBQTBKLENBQUEsVUFBR0gsS0FBSyxDQUFDSSxPQUFPO01BQUE7TUFBQSxDQUFBM0osYUFBQSxHQUFBMEosQ0FBQSxVQUFHLDhCQUE4QjtLQUMvRSxDQUFDO0VBQ0o7QUFDRixDQUFDLENBQUM7QUFFRjs7OztBQUFBO0FBQUExSixhQUFBLEdBQUFHLENBQUE7QUFJQU8sTUFBTSxDQUFDcUosR0FBRyxDQUFDLGNBQWMsRUFBRSxPQUFPdkIsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQzVDLElBQUk7SUFDRixNQUFNO01BQUV5SjtJQUFLLENBQUU7SUFBQTtJQUFBLENBQUE1SixhQUFBLEdBQUFHLENBQUEsUUFBR3FJLEdBQUcsQ0FBQ3FCLE1BQU07SUFDNUIsTUFBTWxCLEdBQUc7SUFBQTtJQUFBLENBQUEzSSxhQUFBLEdBQUFHLENBQUEsUUFBR0cscUJBQUEsQ0FBQXNJLG1CQUFtQixDQUFDb0IsY0FBYyxDQUFDSixLQUFLLENBQUM7SUFBQztJQUFBNUosYUFBQSxHQUFBRyxDQUFBO0lBRXRELElBQUksQ0FBQ3dJLEdBQUcsRUFBRTtNQUFBO01BQUEzSSxhQUFBLEdBQUEwSixDQUFBO01BQUExSixhQUFBLEdBQUFHLENBQUE7TUFDUixPQUFPc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztRQUMxQkMsT0FBTyxFQUFFLEtBQUs7UUFDZE0sS0FBSyxFQUFFO09BQ1IsQ0FBQztJQUNKLENBQUM7SUFBQTtJQUFBO01BQUF2SixhQUFBLEdBQUEwSixDQUFBO0lBQUE7SUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtJQUVEc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFUDtLQUNQLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT1ksS0FBSyxFQUFFO0lBQUE7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNkcUosT0FBTyxDQUFDRCxLQUFLLENBQUMsNkJBQTZCLEVBQUVBLEtBQUssQ0FBQztJQUFDO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDcERzSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxPQUFPLEVBQUUsS0FBSztNQUNkTSxLQUFLLEVBQUVBLEtBQUssWUFBWUUsS0FBSztNQUFBO01BQUEsQ0FBQXpKLGFBQUEsR0FBQTBKLENBQUEsVUFBR0gsS0FBSyxDQUFDSSxPQUFPO01BQUE7TUFBQSxDQUFBM0osYUFBQSxHQUFBMEosQ0FBQSxVQUFHLDRCQUE0QjtLQUM3RSxDQUFDO0VBQ0o7QUFDRixDQUFDLENBQUM7QUFFRjs7OztBQUFBO0FBQUExSixhQUFBLEdBQUFHLENBQUE7QUFJQU8sTUFBTSxDQUFDcUosR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPdkIsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQ3JDLElBQUk7SUFDRixNQUFNb0gsT0FBTztJQUFBO0lBQUEsQ0FBQXZILGFBQUEsR0FBQUcsQ0FBQSxRQUFRLEVBQUU7SUFBQztJQUFBSCxhQUFBLEdBQUFHLENBQUE7SUFFeEIsSUFBSXFJLEdBQUcsQ0FBQzVHLEtBQUssQ0FBQ21ILE1BQU0sRUFBRTtNQUFBO01BQUEvSSxhQUFBLEdBQUEwSixDQUFBO01BQUExSixhQUFBLEdBQUFHLENBQUE7TUFBQW9ILE9BQU8sQ0FBQ3dCLE1BQU0sR0FBR1AsR0FBRyxDQUFDNUcsS0FBSyxDQUFDbUgsTUFBZ0I7SUFBQSxDQUFDO0lBQUE7SUFBQTtNQUFBL0ksYUFBQSxHQUFBMEosQ0FBQTtJQUFBO0lBQUExSixhQUFBLEdBQUFHLENBQUE7SUFDbEUsSUFBSXFJLEdBQUcsQ0FBQzVHLEtBQUssQ0FBQ1IsS0FBSyxFQUFFO01BQUE7TUFBQXBCLGFBQUEsR0FBQTBKLENBQUE7TUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtNQUFBb0gsT0FBTyxDQUFDbkcsS0FBSyxHQUFHb0gsR0FBRyxDQUFDNUcsS0FBSyxDQUFDUixLQUFlO0lBQUEsQ0FBQztJQUFBO0lBQUE7TUFBQXBCLGFBQUEsR0FBQTBKLENBQUE7SUFBQTtJQUFBMUosYUFBQSxHQUFBRyxDQUFBO0lBQy9ELElBQUlxSSxHQUFHLENBQUM1RyxLQUFLLENBQUNrRyxhQUFhLEVBQUU7TUFBQTtNQUFBOUgsYUFBQSxHQUFBMEosQ0FBQTtNQUFBMUosYUFBQSxHQUFBRyxDQUFBO01BQUFvSCxPQUFPLENBQUNPLGFBQWEsR0FBRyxJQUFJbUMsSUFBSSxDQUFDekIsR0FBRyxDQUFDNUcsS0FBSyxDQUFDa0csYUFBdUIsQ0FBQztJQUFBLENBQUM7SUFBQTtJQUFBO01BQUE5SCxhQUFBLEdBQUEwSixDQUFBO0lBQUE7SUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtJQUNqRyxJQUFJcUksR0FBRyxDQUFDNUcsS0FBSyxDQUFDcUcsY0FBYyxFQUFFO01BQUE7TUFBQWpJLGFBQUEsR0FBQTBKLENBQUE7TUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtNQUFBb0gsT0FBTyxDQUFDVSxjQUFjLEdBQUcsSUFBSWdDLElBQUksQ0FBQ3pCLEdBQUcsQ0FBQzVHLEtBQUssQ0FBQ3FHLGNBQXdCLENBQUM7SUFBQSxDQUFDO0lBQUE7SUFBQTtNQUFBakksYUFBQSxHQUFBMEosQ0FBQTtJQUFBO0lBRXBHLE1BQU1RLElBQUk7SUFBQTtJQUFBLENBQUFsSyxhQUFBLEdBQUFHLENBQUEsUUFBR0cscUJBQUEsQ0FBQXNJLG1CQUFtQixDQUFDdUIsZ0JBQWdCLENBQUM1QyxPQUFPLENBQUM7SUFBQztJQUFBdkgsYUFBQSxHQUFBRyxDQUFBO0lBRTNEc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFO1FBQ0pnQixJQUFJO1FBQ0pFLFdBQVcsRUFBRUYsSUFBSSxDQUFDRzs7S0FFckIsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPZCxLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyw4QkFBOEIsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNyRHNJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsOEJBQThCO0tBQy9FLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUM0SCxJQUFJLENBQUMscUJBQXFCLEVBQUUsT0FBT0UsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQ3BELElBQUk7SUFDRixNQUFNO01BQUV5SjtJQUFLLENBQUU7SUFBQTtJQUFBLENBQUE1SixhQUFBLEdBQUFHLENBQUEsUUFBR3FJLEdBQUcsQ0FBQ3FCLE1BQU07SUFBQztJQUFBN0osYUFBQSxHQUFBRyxDQUFBO0lBQzdCLE1BQU1HLHFCQUFBLENBQUFzSSxtQkFBbUIsQ0FBQzBCLGlCQUFpQixDQUFDVixLQUFLLENBQUM7SUFBQztJQUFBNUosYUFBQSxHQUFBRyxDQUFBO0lBRW5Ec0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYlUsT0FBTyxFQUFFLGdCQUFnQkMsS0FBSztLQUMvQixDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9MLEtBQUssRUFBRTtJQUFBO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDZHFKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLGdDQUFnQyxFQUFFQSxLQUFLLENBQUM7SUFBQztJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ3ZEc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLEtBQUs7TUFDZE0sS0FBSyxFQUFFQSxLQUFLLFlBQVlFLEtBQUs7TUFBQTtNQUFBLENBQUF6SixhQUFBLEdBQUEwSixDQUFBLFdBQUdILEtBQUssQ0FBQ0ksT0FBTztNQUFBO01BQUEsQ0FBQTNKLGFBQUEsR0FBQTBKLENBQUEsV0FBRywrQkFBK0I7S0FDaEYsQ0FBQztFQUNKO0FBQ0YsQ0FBQyxDQUFDO0FBRUY7Ozs7QUFBQTtBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBSUFPLE1BQU0sQ0FBQzRILElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFBOUgsWUFBQSxDQUFBK0gsVUFBVSxFQUFDOUQsbUJBQW1CLENBQUMsRUFBRSxPQUFPK0QsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQ2pGLElBQUk7SUFDRixNQUFNb0ssVUFBVTtJQUFBO0lBQUEsQ0FBQXZLLGFBQUEsR0FBQUcsQ0FBQSxRQUFHLE1BQU1HLHFCQUFBLENBQUFzSSxtQkFBbUIsQ0FBQzRCLHFCQUFxQixDQUFDaEMsR0FBRyxDQUFDTSxJQUFJLENBQUM7SUFBQztJQUFBOUksYUFBQSxHQUFBRyxDQUFBO0lBRTdFc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFO1FBQ0p1QixXQUFXLEVBQUVGLFVBQVU7UUFDdkI1RixpQkFBaUIsRUFBRTZELEdBQUcsQ0FBQ00sSUFBSSxDQUFDbkUsaUJBQWlCO1FBQzdDK0YsY0FBYyxFQUFFbEMsR0FBRyxDQUFDTSxJQUFJLENBQUNwRSxnQkFBZ0IsQ0FBQzJGOztLQUU3QyxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9kLEtBQUssRUFBRTtJQUFBO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDZHFKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLGtDQUFrQyxFQUFFQSxLQUFLLENBQUM7SUFBQztJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ3pEc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLEtBQUs7TUFDZE0sS0FBSyxFQUFFQSxLQUFLLFlBQVlFLEtBQUs7TUFBQTtNQUFBLENBQUF6SixhQUFBLEdBQUEwSixDQUFBLFdBQUdILEtBQUssQ0FBQ0ksT0FBTztNQUFBO01BQUEsQ0FBQTNKLGFBQUEsR0FBQTBKLENBQUEsV0FBRyxtQ0FBbUM7S0FDcEYsQ0FBQztFQUNKO0FBQ0YsQ0FBQyxDQUFDO0FBRUY7Ozs7QUFBQTtBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBSUFPLE1BQU0sQ0FBQzRILElBQUksQ0FBQyxzQkFBc0IsRUFBRSxPQUFPRSxHQUFHLEVBQUVDLEdBQUcsS0FBSTtFQUFBO0VBQUF6SSxhQUFBLEdBQUEwSSxDQUFBO0VBQUExSSxhQUFBLEdBQUFHLENBQUE7RUFDckQsSUFBSTtJQUNGLE1BQU07TUFBRXdLO0lBQVMsQ0FBRTtJQUFBO0lBQUEsQ0FBQTNLLGFBQUEsR0FBQUcsQ0FBQSxRQUFHcUksR0FBRyxDQUFDcUIsTUFBTTtJQUNoQyxNQUFNO01BQUV0RyxrQkFBa0I7TUFBQTtNQUFBLENBQUF2RCxhQUFBLEdBQUEwSixDQUFBLFdBQUcsRUFBRTtNQUFFa0IsY0FBYztNQUFBO01BQUEsQ0FBQTVLLGFBQUEsR0FBQTBKLENBQUEsV0FBRyxFQUFFO0lBQUEsQ0FBRTtJQUFBO0lBQUEsQ0FBQTFKLGFBQUEsR0FBQUcsQ0FBQSxRQUFHcUksR0FBRyxDQUFDTSxJQUFJO0lBRWpFLE1BQU0zRixVQUFVO0lBQUE7SUFBQSxDQUFBbkQsYUFBQSxHQUFBRyxDQUFBLFFBQUcsTUFBTUcscUJBQUEsQ0FBQXNJLG1CQUFtQixDQUFDaUMsYUFBYSxDQUN4REYsU0FBUyxFQUNUcEgsa0JBQWtCLEVBQ2xCcUgsY0FBYyxDQUNmO0lBQUM7SUFBQTVLLGFBQUEsR0FBQUcsQ0FBQTtJQUVGc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFL0Y7S0FDUCxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9vRyxLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyx5QkFBeUIsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNoRHNJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsMEJBQTBCO0tBQzNFLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUM0SCxJQUFJLENBQUMseUJBQXlCLEVBQUUsT0FBT0UsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQ3hELElBQUk7SUFDRixNQUFNO01BQUUySztJQUFjLENBQUU7SUFBQTtJQUFBLENBQUE5SyxhQUFBLEdBQUFHLENBQUEsUUFBR3FJLEdBQUcsQ0FBQ3FCLE1BQU07SUFDckMsTUFBTTtNQUNKa0IsTUFBTTtNQUFBO01BQUEsQ0FBQS9LLGFBQUEsR0FBQTBKLENBQUEsV0FBRyxPQUFPO01BQ2hCc0IsYUFBYTtNQUFBO01BQUEsQ0FBQWhMLGFBQUEsR0FBQTBKLENBQUEsV0FBRyxJQUFJO01BQ3BCdUIsb0JBQW9CO01BQUE7TUFBQSxDQUFBakwsYUFBQSxHQUFBMEosQ0FBQSxXQUFHLEtBQUs7TUFDNUJ3QixlQUFlO01BQUE7TUFBQSxDQUFBbEwsYUFBQSxHQUFBMEosQ0FBQSxXQUFHLEVBQUU7SUFBQSxDQUNyQjtJQUFBO0lBQUEsQ0FBQTFKLGFBQUEsR0FBQUcsQ0FBQSxRQUFHcUksR0FBRyxDQUFDTSxJQUFJO0lBRVosTUFBTS9FLFVBQVU7SUFBQTtJQUFBLENBQUEvRCxhQUFBLEdBQUFHLENBQUEsUUFBRyxNQUFNRyxxQkFBQSxDQUFBc0ksbUJBQW1CLENBQUN1QyxXQUFXLENBQ3RETCxjQUFjLEVBQ2RDLE1BQU0sRUFDTjtNQUNFQyxhQUFhO01BQ2JDLG9CQUFvQjtNQUNwQkM7S0FDRCxDQUNGO0lBQUM7SUFBQWxMLGFBQUEsR0FBQUcsQ0FBQTtJQUVGc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFbkY7S0FDUCxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU93RixLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyx3QkFBd0IsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUMvQ3NJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsd0JBQXdCO0tBQ3pFLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUNxSixHQUFHLENBQUMsYUFBYSxFQUFFLE9BQU92QixHQUFHLEVBQUVDLEdBQUcsS0FBSTtFQUFBO0VBQUF6SSxhQUFBLEdBQUEwSSxDQUFBO0VBQUExSSxhQUFBLEdBQUFHLENBQUE7RUFDM0MsSUFBSTtJQUNGLE1BQU1pTCxLQUFLO0lBQUE7SUFBQSxDQUFBcEwsYUFBQSxHQUFBRyxDQUFBLFFBQUdHLHFCQUFBLENBQUFzSSxtQkFBbUIsQ0FBQ3lDLHFCQUFxQixFQUFFO0lBQUM7SUFBQXJMLGFBQUEsR0FBQUcsQ0FBQTtJQUUxRHNJLEdBQUcsQ0FBQ08sSUFBSSxDQUFDO01BQ1BDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLElBQUksRUFBRWtDO0tBQ1AsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPN0IsS0FBSyxFQUFFO0lBQUE7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNkcUosT0FBTyxDQUFDRCxLQUFLLENBQUMsb0NBQW9DLEVBQUVBLEtBQUssQ0FBQztJQUFDO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDM0RzSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxPQUFPLEVBQUUsS0FBSztNQUNkTSxLQUFLLEVBQUVBLEtBQUssWUFBWUUsS0FBSztNQUFBO01BQUEsQ0FBQXpKLGFBQUEsR0FBQTBKLENBQUEsV0FBR0gsS0FBSyxDQUFDSSxPQUFPO01BQUE7TUFBQSxDQUFBM0osYUFBQSxHQUFBMEosQ0FBQSxXQUFHLG1DQUFtQztLQUNwRixDQUFDO0VBQ0o7QUFDRixDQUFDLENBQUM7QUFFRjtBQUVBOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUM0SCxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUE5SCxZQUFBLENBQUErSCxVQUFVLEVBQUNyRCx1QkFBdUIsQ0FBQyxFQUFFLE9BQU9zRCxHQUFHLEVBQUVDLEdBQUcsS0FBSTtFQUFBO0VBQUF6SSxhQUFBLEdBQUEwSSxDQUFBO0VBQUExSSxhQUFBLEdBQUFHLENBQUE7RUFDN0UsSUFBSTtJQUNGLE1BQU1pQixLQUFLO0lBQUE7SUFBQSxDQUFBcEIsYUFBQSxHQUFBRyxDQUFBLFFBQUcsTUFBTUksZUFBQSxDQUFBK0ssYUFBYSxDQUFDQyxhQUFhLENBQUMvQyxHQUFHLENBQUNNLElBQUksQ0FBQztJQUFDO0lBQUE5SSxhQUFBLEdBQUFHLENBQUE7SUFFMURzSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxJQUFJLEVBQUU5SDtLQUNQLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT21JLEtBQUssRUFBRTtJQUFBO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDZHFKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDBCQUEwQixFQUFFQSxLQUFLLENBQUM7SUFBQztJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2pEc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLEtBQUs7TUFDZE0sS0FBSyxFQUFFQSxLQUFLLFlBQVlFLEtBQUs7TUFBQTtNQUFBLENBQUF6SixhQUFBLEdBQUEwSixDQUFBLFdBQUdILEtBQUssQ0FBQ0ksT0FBTztNQUFBO01BQUEsQ0FBQTNKLGFBQUEsR0FBQTBKLENBQUEsV0FBRywwQkFBMEI7S0FDM0UsQ0FBQztFQUNKO0FBQ0YsQ0FBQyxDQUFDO0FBRUY7Ozs7QUFBQTtBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBSUFPLE1BQU0sQ0FBQ3FKLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPdkIsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQ2hELElBQUk7SUFDRixNQUFNO01BQUVxTDtJQUFPLENBQUU7SUFBQTtJQUFBLENBQUF4TCxhQUFBLEdBQUFHLENBQUEsUUFBR3FJLEdBQUcsQ0FBQ3FCLE1BQU07SUFDOUIsTUFBTXpJLEtBQUs7SUFBQTtJQUFBLENBQUFwQixhQUFBLEdBQUFHLENBQUEsUUFBR0ksZUFBQSxDQUFBK0ssYUFBYSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztJQUFDO0lBQUF4TCxhQUFBLEdBQUFHLENBQUE7SUFFOUMsSUFBSSxDQUFDaUIsS0FBSyxFQUFFO01BQUE7TUFBQXBCLGFBQUEsR0FBQTBKLENBQUE7TUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtNQUNWLE9BQU9zSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQzFCQyxPQUFPLEVBQUUsS0FBSztRQUNkTSxLQUFLLEVBQUU7T0FDUixDQUFDO0lBQ0osQ0FBQztJQUFBO0lBQUE7TUFBQXZKLGFBQUEsR0FBQTBKLENBQUE7SUFBQTtJQUFBMUosYUFBQSxHQUFBRyxDQUFBO0lBRURzSSxHQUFHLENBQUNPLElBQUksQ0FBQztNQUNQQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxJQUFJLEVBQUU5SDtLQUNQLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT21JLEtBQUssRUFBRTtJQUFBO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDZHFKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHNCQUFzQixFQUFFQSxLQUFLLENBQUM7SUFBQztJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQzdDc0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLEtBQUs7TUFDZE0sS0FBSyxFQUFFQSxLQUFLLFlBQVlFLEtBQUs7TUFBQTtNQUFBLENBQUF6SixhQUFBLEdBQUEwSixDQUFBLFdBQUdILEtBQUssQ0FBQ0ksT0FBTztNQUFBO01BQUEsQ0FBQTNKLGFBQUEsR0FBQTBKLENBQUEsV0FBRyxxQkFBcUI7S0FDdEUsQ0FBQztFQUNKO0FBQ0YsQ0FBQyxDQUFDO0FBRUY7Ozs7QUFBQTtBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBSUFPLE1BQU0sQ0FBQzRILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFBOUgsWUFBQSxDQUFBK0gsVUFBVSxFQUFDbEIsaUJBQWlCLENBQUMsRUFBRSxPQUFPbUIsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQzlFLElBQUk7SUFDRixNQUFNdUwsWUFBWTtJQUFBO0lBQUEsQ0FBQTFMLGFBQUEsR0FBQUcsQ0FBQSxTQUFHSSxlQUFBLENBQUErSyxhQUFhLENBQUNLLFlBQVksQ0FBQ25ELEdBQUcsQ0FBQ00sSUFBSSxDQUFDO0lBQUM7SUFBQTlJLGFBQUEsR0FBQUcsQ0FBQTtJQUUxRHNJLEdBQUcsQ0FBQ08sSUFBSSxDQUFDO01BQ1BDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLElBQUksRUFBRXdDO0tBQ1AsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPbkMsS0FBSyxFQUFFO0lBQUE7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNkcUosT0FBTyxDQUFDRCxLQUFLLENBQUMseUJBQXlCLEVBQUVBLEtBQUssQ0FBQztJQUFDO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDaERzSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxPQUFPLEVBQUUsS0FBSztNQUNkTSxLQUFLLEVBQUVBLEtBQUssWUFBWUUsS0FBSztNQUFBO01BQUEsQ0FBQXpKLGFBQUEsR0FBQTBKLENBQUEsV0FBR0gsS0FBSyxDQUFDSSxPQUFPO01BQUE7TUFBQSxDQUFBM0osYUFBQSxHQUFBMEosQ0FBQSxXQUFHLHlCQUF5QjtLQUMxRSxDQUFDO0VBQ0o7QUFDRixDQUFDLENBQUM7QUFFRjs7OztBQUFBO0FBQUExSixhQUFBLEdBQUFHLENBQUE7QUFJQU8sTUFBTSxDQUFDNEgsSUFBSSxDQUFDLGlCQUFpQixFQUFFLE9BQU9FLEdBQUcsRUFBRUMsR0FBRyxLQUFJO0VBQUE7RUFBQXpJLGFBQUEsR0FBQTBJLENBQUE7RUFBQTFJLGFBQUEsR0FBQUcsQ0FBQTtFQUNoRCxJQUFJO0lBQ0YsTUFBTTtNQUFFeUwsVUFBVTtNQUFFQztJQUFVLENBQUU7SUFBQTtJQUFBLENBQUE3TCxhQUFBLEdBQUFHLENBQUEsU0FBR3FJLEdBQUcsQ0FBQ00sSUFBSTtJQUFDO0lBQUE5SSxhQUFBLEdBQUFHLENBQUE7SUFFNUM7SUFBSTtJQUFBLENBQUFILGFBQUEsR0FBQTBKLENBQUEsWUFBQ2tDLFVBQVU7SUFBQTtJQUFBLENBQUE1TCxhQUFBLEdBQUEwSixDQUFBLFdBQUksQ0FBQ21DLFVBQVUsR0FBRTtNQUFBO01BQUE3TCxhQUFBLEdBQUEwSixDQUFBO01BQUExSixhQUFBLEdBQUFHLENBQUE7TUFDOUIsT0FBT3NJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7UUFDMUJDLE9BQU8sRUFBRSxLQUFLO1FBQ2RNLEtBQUssRUFBRTtPQUNSLENBQUM7SUFDSixDQUFDO0lBQUE7SUFBQTtNQUFBdkosYUFBQSxHQUFBMEosQ0FBQTtJQUFBO0lBRUQsTUFBTW9DLFVBQVU7SUFBQTtJQUFBLENBQUE5TCxhQUFBLEdBQUFHLENBQUEsU0FBRyxNQUFNSSxlQUFBLENBQUErSyxhQUFhLENBQUNTLGFBQWEsQ0FBQ0gsVUFBVSxFQUFFQyxVQUFVLENBQUM7SUFBQztJQUFBN0wsYUFBQSxHQUFBRyxDQUFBO0lBRTdFc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFNEM7S0FDUCxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU92QyxLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyx5QkFBeUIsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNoRHNJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsMEJBQTBCO0tBQzNFLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUNxSixHQUFHLENBQUMsd0JBQXdCLEVBQUUsT0FBT3ZCLEdBQUcsRUFBRUMsR0FBRyxLQUFJO0VBQUE7RUFBQXpJLGFBQUEsR0FBQTBJLENBQUE7RUFBQTFJLGFBQUEsR0FBQUcsQ0FBQTtFQUN0RCxJQUFJO0lBQ0YsTUFBTTtNQUFFcUw7SUFBTyxDQUFFO0lBQUE7SUFBQSxDQUFBeEwsYUFBQSxHQUFBRyxDQUFBLFNBQUdxSSxHQUFHLENBQUNxQixNQUFNO0lBQzlCLE1BQU1tQyxTQUFTO0lBQUE7SUFBQSxDQUFBaE0sYUFBQSxHQUFBRyxDQUFBO0lBQUc7SUFBQSxDQUFBSCxhQUFBLEdBQUEwSixDQUFBLFdBQUFsQixHQUFHLENBQUM1RyxLQUFLLENBQUNxSyxLQUFLO0lBQUE7SUFBQSxDQUFBak0sYUFBQSxHQUFBMEosQ0FBQSxXQUFJbEIsR0FBRyxDQUFDNUcsS0FBSyxDQUFDc0ssR0FBRztJQUFBO0lBQUEsQ0FBQWxNLGFBQUEsR0FBQTBKLENBQUEsV0FBRztNQUNuRHVDLEtBQUssRUFBRSxJQUFJaEMsSUFBSSxDQUFDekIsR0FBRyxDQUFDNUcsS0FBSyxDQUFDcUssS0FBZSxDQUFDO01BQzFDQyxHQUFHLEVBQUUsSUFBSWpDLElBQUksQ0FBQ3pCLEdBQUcsQ0FBQzVHLEtBQUssQ0FBQ3NLLEdBQWE7S0FDdEM7SUFBQTtJQUFBLENBQUFsTSxhQUFBLEdBQUEwSixDQUFBLFdBQUd5QyxTQUFTO0lBRWIsTUFBTUMsS0FBSztJQUFBO0lBQUEsQ0FBQXBNLGFBQUEsR0FBQUcsQ0FBQSxTQUFHSSxlQUFBLENBQUErSyxhQUFhLENBQUNlLGtCQUFrQixDQUFDYixPQUFPLEVBQUVRLFNBQVMsQ0FBQztJQUFDO0lBQUFoTSxhQUFBLEdBQUFHLENBQUE7SUFFbkVzSSxHQUFHLENBQUNPLElBQUksQ0FBQztNQUNQQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxJQUFJLEVBQUVrRDtLQUNQLENBQUM7RUFDSixDQUFDLENBQUMsT0FBTzdDLEtBQUssRUFBRTtJQUFBO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDZHFKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDRCQUE0QixFQUFFQSxLQUFLLENBQUM7SUFBQztJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ25Ec0ksR0FBRyxDQUFDTSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkMsT0FBTyxFQUFFLEtBQUs7TUFDZE0sS0FBSyxFQUFFQSxLQUFLLFlBQVlFLEtBQUs7TUFBQTtNQUFBLENBQUF6SixhQUFBLEdBQUEwSixDQUFBLFdBQUdILEtBQUssQ0FBQ0ksT0FBTztNQUFBO01BQUEsQ0FBQTNKLGFBQUEsR0FBQTBKLENBQUEsV0FBRywyQkFBMkI7S0FDNUUsQ0FBQztFQUNKO0FBQ0YsQ0FBQyxDQUFDO0FBRUY7Ozs7QUFBQTtBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBSUFPLE1BQU0sQ0FBQ3FKLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxPQUFPdkIsR0FBRyxFQUFFQyxHQUFHLEtBQUk7RUFBQTtFQUFBekksYUFBQSxHQUFBMEksQ0FBQTtFQUFBMUksYUFBQSxHQUFBRyxDQUFBO0VBQ3pELElBQUk7SUFDRixNQUFNO01BQUVxTDtJQUFPLENBQUU7SUFBQTtJQUFBLENBQUF4TCxhQUFBLEdBQUFHLENBQUEsU0FBR3FJLEdBQUcsQ0FBQ3FCLE1BQU07SUFDOUIsTUFBTXlDLFFBQVE7SUFBQTtJQUFBLENBQUF0TSxhQUFBLEdBQUFHLENBQUEsU0FBR0ksZUFBQSxDQUFBK0ssYUFBYSxDQUFDaUIsc0JBQXNCLENBQUNmLE9BQU8sQ0FBQztJQUFDO0lBQUF4TCxhQUFBLEdBQUFHLENBQUE7SUFFL0RzSSxHQUFHLENBQUNPLElBQUksQ0FBQztNQUNQQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxJQUFJLEVBQUU7UUFDSnNELFFBQVEsRUFBRWhCLE9BQU87UUFDakJjLFFBQVE7UUFDUkcsY0FBYyxFQUFFSCxRQUFRLENBQUNqQzs7S0FFNUIsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPZCxLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQywrQkFBK0IsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUN0RHNJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsOEJBQThCO0tBQy9FLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUNnTSxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBT2xFLEdBQUcsRUFBRUMsR0FBRyxLQUFJO0VBQUE7RUFBQXpJLGFBQUEsR0FBQTBJLENBQUE7RUFBQTFJLGFBQUEsR0FBQUcsQ0FBQTtFQUNoRCxJQUFJO0lBQ0YsTUFBTTtNQUFFcUw7SUFBTyxDQUFFO0lBQUE7SUFBQSxDQUFBeEwsYUFBQSxHQUFBRyxDQUFBLFNBQUdxSSxHQUFHLENBQUNxQixNQUFNO0lBQzlCLE1BQU04QyxZQUFZO0lBQUE7SUFBQSxDQUFBM00sYUFBQSxHQUFBRyxDQUFBLFNBQUcsTUFBTUksZUFBQSxDQUFBK0ssYUFBYSxDQUFDc0IsV0FBVyxDQUFDcEIsT0FBTyxFQUFFaEQsR0FBRyxDQUFDTSxJQUFJLENBQUM7SUFBQztJQUFBOUksYUFBQSxHQUFBRyxDQUFBO0lBRXhFc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFeUQ7S0FDUCxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9wRCxLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyx1QkFBdUIsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUM5Q3NJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsd0JBQXdCO0tBQ3pFLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUNtTSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsT0FBT3JFLEdBQUcsRUFBRUMsR0FBRyxLQUFJO0VBQUE7RUFBQXpJLGFBQUEsR0FBQTBJLENBQUE7RUFBQTFJLGFBQUEsR0FBQUcsQ0FBQTtFQUNuRCxJQUFJO0lBQ0YsTUFBTTtNQUFFcUw7SUFBTyxDQUFFO0lBQUE7SUFBQSxDQUFBeEwsYUFBQSxHQUFBRyxDQUFBLFNBQUdxSSxHQUFHLENBQUNxQixNQUFNO0lBQzlCLE1BQU1pRCxLQUFLO0lBQUE7SUFBQSxDQUFBOU0sYUFBQSxHQUFBRyxDQUFBLFNBQUdxSSxHQUFHLENBQUM1RyxLQUFLLENBQUNrTCxLQUFLLEtBQUssTUFBTTtJQUFDO0lBQUE5TSxhQUFBLEdBQUFHLENBQUE7SUFFekMsTUFBTUksZUFBQSxDQUFBK0ssYUFBYSxDQUFDeUIsV0FBVyxDQUFDdkIsT0FBTyxFQUFFc0IsS0FBSyxDQUFDO0lBQUM7SUFBQTlNLGFBQUEsR0FBQUcsQ0FBQTtJQUVoRHNJLEdBQUcsQ0FBQ08sSUFBSSxDQUFDO01BQ1BDLE9BQU8sRUFBRSxJQUFJO01BQ2JVLE9BQU8sRUFBRSxTQUFTNkIsT0FBTztLQUMxQixDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9qQyxLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyx1QkFBdUIsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUM5Q3NJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsd0JBQXdCO0tBQ3pFLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUNxSixHQUFHLENBQUMsc0JBQXNCLEVBQUUsT0FBT3ZCLEdBQUcsRUFBRUMsR0FBRyxLQUFJO0VBQUE7RUFBQXpJLGFBQUEsR0FBQTBJLENBQUE7RUFBQTFJLGFBQUEsR0FBQUcsQ0FBQTtFQUNwRCxJQUFJO0lBQ0YsTUFBTWlMLEtBQUs7SUFBQTtJQUFBLENBQUFwTCxhQUFBLEdBQUFHLENBQUEsU0FBR0ksZUFBQSxDQUFBK0ssYUFBYSxDQUFDMEIscUJBQXFCLEVBQUU7SUFBQztJQUFBaE4sYUFBQSxHQUFBRyxDQUFBO0lBRXBEc0ksR0FBRyxDQUFDTyxJQUFJLENBQUM7TUFDUEMsT0FBTyxFQUFFLElBQUk7TUFDYkMsSUFBSSxFQUFFa0M7S0FDUCxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU83QixLQUFLLEVBQUU7SUFBQTtJQUFBdkosYUFBQSxHQUFBRyxDQUFBO0lBQ2RxSixPQUFPLENBQUNELEtBQUssQ0FBQyxvQ0FBb0MsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUMzRHNJLEdBQUcsQ0FBQ00sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDbkJDLE9BQU8sRUFBRSxLQUFLO01BQ2RNLEtBQUssRUFBRUEsS0FBSyxZQUFZRSxLQUFLO01BQUE7TUFBQSxDQUFBekosYUFBQSxHQUFBMEosQ0FBQSxXQUFHSCxLQUFLLENBQUNJLE9BQU87TUFBQTtNQUFBLENBQUEzSixhQUFBLEdBQUEwSixDQUFBLFdBQUcsbUNBQW1DO0tBQ3BGLENBQUM7RUFDSjtBQUNGLENBQUMsQ0FBQztBQUVGOzs7O0FBQUE7QUFBQTFKLGFBQUEsR0FBQUcsQ0FBQTtBQUlBTyxNQUFNLENBQUNxSixHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU92QixHQUFHLEVBQUVDLEdBQUcsS0FBSTtFQUFBO0VBQUF6SSxhQUFBLEdBQUEwSSxDQUFBO0VBQUExSSxhQUFBLEdBQUFHLENBQUE7RUFDdkMsSUFBSTtJQUNGLE1BQU04TSxNQUFNO0lBQUE7SUFBQSxDQUFBak4sYUFBQSxHQUFBRyxDQUFBLFNBQUc7TUFDYjRJLE1BQU0sRUFBRSxTQUFTO01BQ2pCbUUsU0FBUyxFQUFFLElBQUlqRCxJQUFJLEVBQUU7TUFDckJrRCxVQUFVLEVBQUU7UUFDVkMsZUFBZSxFQUFFLFNBQVM7UUFDMUJDLGNBQWMsRUFBRSxTQUFTO1FBQ3pCQyxVQUFVLEVBQUU7T0FDYjtNQUNEQyxVQUFVLEVBQUU7UUFDVkMsV0FBVyxFQUFFbE4scUJBQUEsQ0FBQXNJLG1CQUFtQixDQUFDdUIsZ0JBQWdCLENBQUM7VUFBRXBCLE1BQU0sRUFBRTtRQUFVLENBQUUsQ0FBQyxDQUFDc0IsTUFBTTtRQUNoRm9ELFlBQVksRUFBRWxOLGVBQUEsQ0FBQStLLGFBQWEsQ0FBQzBCLHFCQUFxQixFQUFFLENBQUNTLFlBQVk7UUFDaEVDLFdBQVcsRUFBRUMsT0FBTyxDQUFDQyxRQUFRLEVBQUU7UUFDL0JDLFlBQVksRUFBRUYsT0FBTyxDQUFDRyxXQUFXOztLQUVwQztJQUFDO0lBQUE5TixhQUFBLEdBQUFHLENBQUE7SUFFRnNJLEdBQUcsQ0FBQ08sSUFBSSxDQUFDO01BQ1BDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLElBQUksRUFBRStEO0tBQ1AsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPMUQsS0FBSyxFQUFFO0lBQUE7SUFBQXZKLGFBQUEsR0FBQUcsQ0FBQTtJQUNkcUosT0FBTyxDQUFDRCxLQUFLLENBQUMsZ0NBQWdDLEVBQUVBLEtBQUssQ0FBQztJQUFDO0lBQUF2SixhQUFBLEdBQUFHLENBQUE7SUFDdkRzSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ25CQyxPQUFPLEVBQUUsS0FBSztNQUNkTSxLQUFLLEVBQUVBLEtBQUssWUFBWUUsS0FBSztNQUFBO01BQUEsQ0FBQXpKLGFBQUEsR0FBQTBKLENBQUEsV0FBR0gsS0FBSyxDQUFDSSxPQUFPO01BQUE7TUFBQSxDQUFBM0osYUFBQSxHQUFBMEosQ0FBQSxXQUFHLHFDQUFxQztLQUN0RixDQUFDO0VBQ0o7QUFDRixDQUFDLENBQUM7QUFBQztBQUFBMUosYUFBQSxHQUFBRyxDQUFBO0FBRUg0TixPQUFBLENBQUFwTixPQUFBLEdBQWVELE1BQU0iLCJpZ25vcmVMaXN0IjpbXX0=