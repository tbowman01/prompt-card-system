dbc8a0d4692124bb31ad344451f9d804
"use strict";

/* istanbul ignore next */
function cov_242bl6feg6() {
  var path = "/workspaces/prompt-card-system/backend/src/services/assertions/CustomAssertionValidator.ts";
  var hash = "69ee10cf12e4242ef165994fea5c67afed897ab2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/assertions/CustomAssertionValidator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 12,
          column: 11
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "5": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "6": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 68
        }
      },
      "7": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "8": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 66
        }
      },
      "9": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 85
        }
      },
      "10": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 24
        }
      },
      "11": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "12": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 72
        }
      },
      "13": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 36
        }
      },
      "14": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 23
        }
      },
      "15": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 46,
          column: 28
        }
      },
      "16": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "17": {
        start: {
          line: 49,
          column: 35
        },
        end: {
          line: 49,
          column: 66
        }
      },
      "18": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "19": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 80
        }
      },
      "20": {
        start: {
          line: 54,
          column: 35
        },
        end: {
          line: 54,
          column: 94
        }
      },
      "21": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 76
        }
      },
      "22": {
        start: {
          line: 57,
          column: 34
        },
        end: {
          line: 57,
          column: 56
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "24": {
        start: {
          line: 67,
          column: 34
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "25": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "26": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "27": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "28": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 87,
          column: 18
        }
      },
      "29": {
        start: {
          line: 91,
          column: 34
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "30": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "31": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "32": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 104,
          column: 18
        }
      },
      "33": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "34": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 112,
          column: 14
        }
      },
      "35": {
        start: {
          line: 115,
          column: 29
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "36": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "37": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "38": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 30
        }
      },
      "39": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "40": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 129,
          column: 28
        }
      },
      "41": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "42": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "43": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 31
        }
      },
      "44": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 60
        }
      },
      "45": {
        start: {
          line: 135,
          column: 17
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "46": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 31
        }
      },
      "47": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 24
        }
      },
      "48": {
        start: {
          line: 145,
          column: 31
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "49": {
        start: {
          line: 157,
          column: 55
        },
        end: {
          line: 157,
          column: 67
        }
      },
      "50": {
        start: {
          line: 160,
          column: 31
        },
        end: {
          line: 160,
          column: 51
        }
      },
      "51": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 51
        }
      },
      "52": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 37
        }
      },
      "53": {
        start: {
          line: 163,
          column: 31
        },
        end: {
          line: 163,
          column: 51
        }
      },
      "54": {
        start: {
          line: 164,
          column: 33
        },
        end: {
          line: 164,
          column: 55
        }
      },
      "55": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 165,
          column: 51
        }
      },
      "56": {
        start: {
          line: 166,
          column: 30
        },
        end: {
          line: 166,
          column: 49
        }
      },
      "57": {
        start: {
          line: 167,
          column: 32
        },
        end: {
          line: 167,
          column: 53
        }
      },
      "58": {
        start: {
          line: 168,
          column: 46
        },
        end: {
          line: 168,
          column: 81
        }
      },
      "59": {
        start: {
          line: 169,
          column: 34
        },
        end: {
          line: 169,
          column: 57
        }
      },
      "60": {
        start: {
          line: 170,
          column: 39
        },
        end: {
          line: 170,
          column: 67
        }
      },
      "61": {
        start: {
          line: 171,
          column: 35
        },
        end: {
          line: 171,
          column: 59
        }
      },
      "62": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 179,
          column: 17
        }
      },
      "63": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 53
        }
      },
      "64": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 178,
          column: 32
        }
      },
      "65": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 188,
          column: 17
        }
      },
      "66": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 54
        }
      },
      "67": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 32
        }
      },
      "68": {
        start: {
          line: 193,
          column: 32
        },
        end: {
          line: 193,
          column: 94
        }
      },
      "69": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "70": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 47
        }
      },
      "71": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "72": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 43
        }
      },
      "73": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 40
        }
      },
      "74": {
        start: {
          line: 212,
          column: 32
        },
        end: {
          line: 212,
          column: 46
        }
      },
      "75": {
        start: {
          line: 214,
          column: 38
        },
        end: {
          line: 214,
          column: 117
        }
      },
      "76": {
        start: {
          line: 215,
          column: 38
        },
        end: {
          line: 215,
          column: 117
        }
      },
      "77": {
        start: {
          line: 216,
          column: 30
        },
        end: {
          line: 216,
          column: 64
        }
      },
      "78": {
        start: {
          line: 217,
          column: 33
        },
        end: {
          line: 217,
          column: 84
        }
      },
      "79": {
        start: {
          line: 217,
          column: 51
        },
        end: {
          line: 217,
          column: 76
        }
      },
      "80": {
        start: {
          line: 218,
          column: 33
        },
        end: {
          line: 218,
          column: 84
        }
      },
      "81": {
        start: {
          line: 218,
          column: 51
        },
        end: {
          line: 218,
          column: 76
        }
      },
      "82": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 220,
          column: 38
        }
      },
      "83": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 38
        }
      },
      "84": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 222,
          column: 38
        }
      },
      "85": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 222,
          column: 38
        }
      },
      "86": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 33
        }
      },
      "87": {
        start: {
          line: 227,
          column: 32
        },
        end: {
          line: 227,
          column: 46
        }
      },
      "88": {
        start: {
          line: 228,
          column: 30
        },
        end: {
          line: 228,
          column: 90
        }
      },
      "89": {
        start: {
          line: 228,
          column: 77
        },
        end: {
          line: 228,
          column: 89
        }
      },
      "90": {
        start: {
          line: 229,
          column: 34
        },
        end: {
          line: 229,
          column: 36
        }
      },
      "91": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 232,
          column: 19
        }
      },
      "92": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 65
        }
      },
      "93": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 33
        }
      },
      "94": {
        start: {
          line: 237,
          column: 32
        },
        end: {
          line: 237,
          column: 46
        }
      },
      "95": {
        start: {
          line: 239,
          column: 37
        },
        end: {
          line: 239,
          column: 88
        }
      },
      "96": {
        start: {
          line: 240,
          column: 30
        },
        end: {
          line: 240,
          column: 64
        }
      },
      "97": {
        start: {
          line: 241,
          column: 37
        },
        end: {
          line: 241,
          column: 87
        }
      },
      "98": {
        start: {
          line: 241,
          column: 55
        },
        end: {
          line: 241,
          column: 79
        }
      },
      "99": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 76
        }
      },
      "100": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "101": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "102": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 65
        }
      },
      "103": {
        start: {
          line: 250,
          column: 17
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "104": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 64
        }
      },
      "105": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 30
        }
      },
      "106": {
        start: {
          line: 261,
          column: 28
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "107": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "108": {
        start: {
          line: 280,
          column: 25
        },
        end: {
          line: 280,
          column: 64
        }
      },
      "109": {
        start: {
          line: 282,
          column: 27
        },
        end: {
          line: 282,
          column: 79
        }
      },
      "110": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 26
        }
      },
      "111": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 114
        }
      },
      "112": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 306,
          column: 11
        }
      },
      "113": {
        start: {
          line: 294,
          column: 26
        },
        end: {
          line: 296,
          column: 23
        }
      },
      "114": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 55
        }
      },
      "115": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "116": {
        start: {
          line: 298,
          column: 31
        },
        end: {
          line: 298,
          column: 53
        }
      },
      "117": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 36
        }
      },
      "118": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 32
        }
      },
      "119": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 36
        }
      },
      "120": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 30
        }
      },
      "121": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 319,
          column: 10
        }
      },
      "122": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 33
        }
      },
      "123": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 328,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 41
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 40
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 31
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 80
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 28
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 127
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 59
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 144
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 50
          },
          end: {
            line: 157,
            column: 51
          }
        },
        loc: {
          start: {
            line: 157,
            column: 55
          },
          end: {
            line: 157,
            column: 67
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 160,
            column: 25
          },
          end: {
            line: 160,
            column: 26
          }
        },
        loc: {
          start: {
            line: 160,
            column: 31
          },
          end: {
            line: 160,
            column: 51
          }
        },
        line: 160
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 161,
            column: 25
          },
          end: {
            line: 161,
            column: 26
          }
        },
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 51
          }
        },
        line: 161
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 162,
            column: 18
          },
          end: {
            line: 162,
            column: 19
          }
        },
        loc: {
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 162,
            column: 37
          }
        },
        line: 162
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 163,
            column: 22
          },
          end: {
            line: 163,
            column: 23
          }
        },
        loc: {
          start: {
            line: 163,
            column: 31
          },
          end: {
            line: 163,
            column: 51
          }
        },
        line: 163
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 25
          }
        },
        loc: {
          start: {
            line: 164,
            column: 33
          },
          end: {
            line: 164,
            column: 55
          }
        },
        line: 164
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 165,
            column: 22
          },
          end: {
            line: 165,
            column: 23
          }
        },
        loc: {
          start: {
            line: 165,
            column: 31
          },
          end: {
            line: 165,
            column: 51
          }
        },
        line: 165
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 166,
            column: 21
          },
          end: {
            line: 166,
            column: 22
          }
        },
        loc: {
          start: {
            line: 166,
            column: 30
          },
          end: {
            line: 166,
            column: 49
          }
        },
        line: 166
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 167,
            column: 19
          },
          end: {
            line: 167,
            column: 20
          }
        },
        loc: {
          start: {
            line: 167,
            column: 32
          },
          end: {
            line: 167,
            column: 53
          }
        },
        line: 167
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 168,
            column: 21
          },
          end: {
            line: 168,
            column: 22
          }
        },
        loc: {
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 168,
            column: 81
          }
        },
        line: 168
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 169,
            column: 19
          },
          end: {
            line: 169,
            column: 20
          }
        },
        loc: {
          start: {
            line: 169,
            column: 34
          },
          end: {
            line: 169,
            column: 57
          }
        },
        line: 169
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 170,
            column: 23
          },
          end: {
            line: 170,
            column: 24
          }
        },
        loc: {
          start: {
            line: 170,
            column: 39
          },
          end: {
            line: 170,
            column: 67
          }
        },
        line: 170
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 20
          }
        },
        loc: {
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 171,
            column: 59
          }
        },
        line: 171
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 173,
            column: 23
          },
          end: {
            line: 173,
            column: 24
          }
        },
        loc: {
          start: {
            line: 173,
            column: 32
          },
          end: {
            line: 180,
            column: 13
          }
        },
        line: 173
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 182,
            column: 19
          },
          end: {
            line: 182,
            column: 20
          }
        },
        loc: {
          start: {
            line: 182,
            column: 39
          },
          end: {
            line: 189,
            column: 13
          }
        },
        line: 182
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 193,
            column: 24
          },
          end: {
            line: 193,
            column: 25
          }
        },
        loc: {
          start: {
            line: 193,
            column: 30
          },
          end: {
            line: 193,
            column: 96
          }
        },
        line: 193
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 196,
            column: 17
          },
          end: {
            line: 196,
            column: 18
          }
        },
        loc: {
          start: {
            line: 196,
            column: 30
          },
          end: {
            line: 200,
            column: 13
          }
        },
        line: 196
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 202,
            column: 17
          },
          end: {
            line: 202,
            column: 18
          }
        },
        loc: {
          start: {
            line: 202,
            column: 33
          },
          end: {
            line: 206,
            column: 13
          }
        },
        line: 202
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 207,
            column: 17
          },
          end: {
            line: 207,
            column: 18
          }
        },
        loc: {
          start: {
            line: 207,
            column: 26
          },
          end: {
            line: 209,
            column: 13
          }
        },
        line: 207
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 211,
            column: 30
          },
          end: {
            line: 211,
            column: 31
          }
        },
        loc: {
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 224,
            column: 13
          }
        },
        line: 211
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 217,
            column: 46
          },
          end: {
            line: 217,
            column: 47
          }
        },
        loc: {
          start: {
            line: 217,
            column: 51
          },
          end: {
            line: 217,
            column: 76
          }
        },
        line: 217
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 218,
            column: 46
          },
          end: {
            line: 218,
            column: 47
          }
        },
        loc: {
          start: {
            line: 218,
            column: 51
          },
          end: {
            line: 218,
            column: 76
          }
        },
        line: 218
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 226,
            column: 27
          },
          end: {
            line: 226,
            column: 28
          }
        },
        loc: {
          start: {
            line: 226,
            column: 37
          },
          end: {
            line: 234,
            column: 13
          }
        },
        line: 226
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 228,
            column: 72
          },
          end: {
            line: 228,
            column: 73
          }
        },
        loc: {
          start: {
            line: 228,
            column: 77
          },
          end: {
            line: 228,
            column: 89
          }
        },
        line: 228
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 230,
            column: 30
          },
          end: {
            line: 230,
            column: 31
          }
        },
        loc: {
          start: {
            line: 230,
            column: 38
          },
          end: {
            line: 232,
            column: 17
          }
        },
        line: 230
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 236,
            column: 28
          },
          end: {
            line: 236,
            column: 29
          }
        },
        loc: {
          start: {
            line: 236,
            column: 38
          },
          end: {
            line: 243,
            column: 13
          }
        },
        line: 236
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 241,
            column: 50
          },
          end: {
            line: 241,
            column: 51
          }
        },
        loc: {
          start: {
            line: 241,
            column: 55
          },
          end: {
            line: 241,
            column: 79
          }
        },
        line: 241
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 246,
            column: 36
          },
          end: {
            line: 246,
            column: 37
          }
        },
        loc: {
          start: {
            line: 246,
            column: 50
          },
          end: {
            line: 253,
            column: 9
          }
        },
        line: 246
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 42
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 259
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 50
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 292
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 293,
            column: 27
          },
          end: {
            line: 293,
            column: 28
          }
        },
        loc: {
          start: {
            line: 293,
            column: 48
          },
          end: {
            line: 306,
            column: 9
          }
        },
        line: 293
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 294,
            column: 37
          },
          end: {
            line: 294,
            column: 38
          }
        },
        loc: {
          start: {
            line: 294,
            column: 43
          },
          end: {
            line: 296,
            column: 13
          }
        },
        line: 294
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 20
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 311
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 20
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 324
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 52
          },
          end: {
            line: 60,
            column: 58
          }
        }, {
          start: {
            line: 60,
            column: 62
          },
          end: {
            line: 60,
            column: 85
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 62
          },
          end: {
            line: 60,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 80
          },
          end: {
            line: 60,
            column: 81
          }
        }, {
          start: {
            line: 60,
            column: 84
          },
          end: {
            line: 60,
            column: 85
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 61
          }
        }, {
          start: {
            line: 73,
            column: 64
          },
          end: {
            line: 73,
            column: 89
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 137,
            column: 13
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 131,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 131,
            column: 28
          }
        }, {
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 131,
            column: 44
          }
        }, {
          start: {
            line: 131,
            column: 48
          },
          end: {
            line: 131,
            column: 60
          }
        }],
        line: 131
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 21
          },
          end: {
            line: 135,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 21
          },
          end: {
            line: 135,
            column: 33
          }
        }, {
          start: {
            line: 135,
            column: 37
          },
          end: {
            line: 135,
            column: 49
          }
        }, {
          start: {
            line: 135,
            column: 53
          },
          end: {
            line: 135,
            column: 65
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 151,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 151,
            column: 35
          }
        }, {
          start: {
            line: 151,
            column: 39
          },
          end: {
            line: 151,
            column: 41
          }
        }],
        line: 151
      },
      "14": {
        loc: {
          start: {
            line: 152,
            column: 23
          },
          end: {
            line: 152,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 44
          },
          end: {
            line: 152,
            column: 68
          }
        }, {
          start: {
            line: 152,
            column: 71
          },
          end: {
            line: 152,
            column: 73
          }
        }],
        line: 152
      },
      "15": {
        loc: {
          start: {
            line: 153,
            column: 19
          },
          end: {
            line: 153,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 19
          },
          end: {
            line: 153,
            column: 33
          }
        }, {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 153,
            column: 39
          }
        }],
        line: 153
      },
      "16": {
        loc: {
          start: {
            line: 154,
            column: 27
          },
          end: {
            line: 154,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 27
          },
          end: {
            line: 154,
            column: 49
          }
        }, {
          start: {
            line: 154,
            column: 53
          },
          end: {
            line: 154,
            column: 54
          }
        }],
        line: 154
      },
      "17": {
        loc: {
          start: {
            line: 175,
            column: 38
          },
          end: {
            line: 175,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 38
          },
          end: {
            line: 175,
            column: 41
          }
        }, {
          start: {
            line: 175,
            column: 45
          },
          end: {
            line: 175,
            column: 51
          }
        }],
        line: 175
      },
      "18": {
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "19": {
        loc: {
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "20": {
        loc: {
          start: {
            line: 212,
            column: 32
          },
          end: {
            line: 212,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 32
          },
          end: {
            line: 212,
            column: 36
          }
        }, {
          start: {
            line: 212,
            column: 40
          },
          end: {
            line: 212,
            column: 46
          }
        }],
        line: 212
      },
      "21": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 220,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 220,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "22": {
        loc: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 222,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 222,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "23": {
        loc: {
          start: {
            line: 227,
            column: 32
          },
          end: {
            line: 227,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 32
          },
          end: {
            line: 227,
            column: 36
          }
        }, {
          start: {
            line: 227,
            column: 40
          },
          end: {
            line: 227,
            column: 46
          }
        }],
        line: 227
      },
      "24": {
        loc: {
          start: {
            line: 231,
            column: 39
          },
          end: {
            line: 231,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 39
          },
          end: {
            line: 231,
            column: 54
          }
        }, {
          start: {
            line: 231,
            column: 58
          },
          end: {
            line: 231,
            column: 59
          }
        }],
        line: 231
      },
      "25": {
        loc: {
          start: {
            line: 237,
            column: 32
          },
          end: {
            line: 237,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 32
          },
          end: {
            line: 237,
            column: 36
          }
        }, {
          start: {
            line: 237,
            column: 40
          },
          end: {
            line: 237,
            column: 46
          }
        }],
        line: 237
      },
      "26": {
        loc: {
          start: {
            line: 242,
            column: 23
          },
          end: {
            line: 242,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 59
          },
          end: {
            line: 242,
            column: 63
          }
        }, {
          start: {
            line: 242,
            column: 66
          },
          end: {
            line: 242,
            column: 75
          }
        }],
        line: 242
      },
      "27": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 252,
            column: 13
          }
        }],
        line: 247
      },
      "28": {
        loc: {
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "29": {
        loc: {
          start: {
            line: 250,
            column: 21
          },
          end: {
            line: 250,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 21
          },
          end: {
            line: 250,
            column: 50
          }
        }, {
          start: {
            line: 250,
            column: 54
          },
          end: {
            line: 250,
            column: 74
          }
        }],
        line: 250
      },
      "30": {
        loc: {
          start: {
            line: 286,
            column: 54
          },
          end: {
            line: 286,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 79
          },
          end: {
            line: 286,
            column: 92
          }
        }, {
          start: {
            line: 286,
            column: 95
          },
          end: {
            line: 286,
            column: 110
          }
        }],
        line: 286
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/assertions/CustomAssertionValidator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/assertions/CustomAssertionValidator.ts"],
      sourcesContent: ["import { AssertionContext } from './AssertionEngine';\n\nexport interface CustomAssertionResult {\n  passed: boolean;\n  score?: number;\n  executionTime: number;\n  variables?: Record<string, any>;\n  logs?: string[];\n  error?: string;\n}\n\nexport class CustomAssertionValidator {\n  private initialized: boolean = false;\n  private allowedGlobals: Set<string>;\n  private bannedKeywords: Set<string>;\n\n  constructor() {\n    // Define allowed global functions and objects for security\n    this.allowedGlobals = new Set([\n      'Math', 'String', 'Number', 'Array', 'Object', 'Date', 'RegExp',\n      'JSON', 'parseFloat', 'parseInt', 'isNaN', 'isFinite',\n      'encodeURI', 'decodeURI', 'encodeURIComponent', 'decodeURIComponent'\n    ]);\n\n    // Define banned keywords for security\n    this.bannedKeywords = new Set([\n      'eval', 'Function', 'require', 'import', 'process', 'global',\n      'window', 'document', 'localStorage', 'sessionStorage', 'fetch',\n      'XMLHttpRequest', 'WebSocket', 'Worker', 'SharedWorker',\n      'setTimeout', 'setInterval', 'setImmediate', 'clearTimeout',\n      'clearInterval', 'clearImmediate', '__dirname', '__filename',\n      'module', 'exports', 'Buffer', 'console.log', 'console.error'\n    ]);\n  }\n\n  /**\n   * Initialize the custom assertion validator\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing CustomAssertionValidator...');\n      \n      this.initialized = true;\n      \n      console.log('\u2705 CustomAssertionValidator initialized');\n    } catch (error) {\n      console.error('\u274C Failed to initialize CustomAssertionValidator:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute custom assertion code in a secure sandbox\n   */\n  async execute(\n    code: string,\n    output: string,\n    context?: AssertionContext\n  ): Promise<CustomAssertionResult> {\n    if (!this.initialized) {\n      throw new Error('CustomAssertionValidator not initialized');\n    }\n\n    const startTime = Date.now();\n    const logs: string[] = [];\n    const variables: Record<string, any> = {};\n\n    try {\n      // Security check - scan for banned keywords\n      const securityResult = this.performSecurityCheck(code);\n      if (!securityResult.safe) {\n        throw new Error(`Security violation: ${securityResult.reason}`);\n      }\n\n      // Prepare execution environment\n      const sandboxContext = this.createSandboxContext(output, context, logs, variables);\n      \n      // Execute the custom assertion\n      const result = await this.executeInSandbox(code, sandboxContext);\n      \n      const executionTime = Date.now() - startTime;\n      \n      return {\n        passed: Boolean(result),\n        score: typeof result === 'number' ? result : (Boolean(result) ? 1 : 0),\n        executionTime,\n        variables,\n        logs\n      };\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      \n      return {\n        passed: false,\n        executionTime,\n        variables,\n        logs,\n        error: error instanceof Error ? error.message : 'Unknown execution error'\n      };\n    }\n  }\n\n  /**\n   * Perform security checks on the custom code\n   */\n  private performSecurityCheck(code: string): { safe: boolean; reason?: string } {\n    // Check for banned keywords\n    for (const keyword of this.bannedKeywords) {\n      if (code.includes(keyword)) {\n        return {\n          safe: false,\n          reason: `Banned keyword detected: ${keyword}`\n        };\n      }\n    }\n\n    // Check for potential injection patterns\n    const dangerousPatterns = [\n      /constructor/i,\n      /prototype/i,\n      /(__proto__|__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__)/i,\n      /\\[\\s*[\"']constructor[\"']\\s*\\]/i,\n      /\\[\\s*[\"']__proto__[\"']\\s*\\]/i,\n      /\\[\\s*[\"']prototype[\"']\\s*\\]/i\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(code)) {\n        return {\n          safe: false,\n          reason: `Potentially dangerous pattern detected: ${pattern.toString()}`\n        };\n      }\n    }\n\n    // Check code length (prevent DoS)\n    if (code.length > 10000) {\n      return {\n        safe: false,\n        reason: 'Code too long (max 10000 characters)'\n      };\n    }\n\n    // Check for excessive nesting (prevent DoS)\n    const nestingLevel = this.checkNestingLevel(code);\n    if (nestingLevel > 20) {\n      return {\n        safe: false,\n        reason: 'Code nesting too deep (max 20 levels)'\n      };\n    }\n\n    return { safe: true };\n  }\n\n  /**\n   * Check nesting level of code\n   */\n  private checkNestingLevel(code: string): number {\n    let maxLevel = 0;\n    let currentLevel = 0;\n    \n    for (const char of code) {\n      if (char === '{' || char === '(' || char === '[') {\n        currentLevel++;\n        maxLevel = Math.max(maxLevel, currentLevel);\n      } else if (char === '}' || char === ')' || char === ']') {\n        currentLevel--;\n      }\n    }\n    \n    return maxLevel;\n  }\n\n  /**\n   * Create a sandbox context for code execution\n   */\n  private createSandboxContext(\n    output: string,\n    context?: AssertionContext,\n    logs?: string[],\n    variables?: Record<string, any>\n  ): Record<string, any> {\n    const sandboxContext: Record<string, any> = {\n      // Assertion input\n      output,\n      text: output,\n      content: output,\n      \n      // Context information\n      prompt: context?.prompt || '',\n      variables: context?.variables ? { ...context.variables } : {},\n      model: context?.model || '',\n      executionTime: context?.executionTime || 0,\n      \n      // Utility functions\n      length: output.length,\n      wordCount: output.split(/\\s+/).filter(w => w.length > 0).length,\n      lineCount: output.split('\\n').length,\n      \n      // Safe string operations\n      toLowerCase: () => output.toLowerCase(),\n      toUpperCase: () => output.toUpperCase(),\n      trim: () => output.trim(),\n      includes: (str: string) => output.includes(str),\n      startsWith: (str: string) => output.startsWith(str),\n      endsWith: (str: string) => output.endsWith(str),\n      indexOf: (str: string) => output.indexOf(str),\n      match: (pattern: string | RegExp) => output.match(pattern),\n      replace: (search: string | RegExp, replacement: string) => output.replace(search, replacement),\n      split: (separator: string | RegExp) => output.split(separator),\n      substring: (start: number, end?: number) => output.substring(start, end),\n      slice: (start: number, end?: number) => output.slice(start, end),\n      \n      // JSON operations\n      parseJSON: (str?: string) => {\n        try {\n          return JSON.parse(str || output);\n        } catch {\n          return null;\n        }\n      },\n      \n      // Regular expressions\n      regex: (pattern: string, flags?: string) => {\n        try {\n          return new RegExp(pattern, flags);\n        } catch {\n          return null;\n        }\n      },\n      \n      // Math operations\n      Math: {\n        ...Math,\n        random: () => { throw new Error('Math.random() is not allowed in assertions'); }\n      },\n      \n      // Safe logging\n      log: (message: any) => {\n        if (logs) {\n          logs.push(String(message));\n        }\n      },\n      \n      // Variable storage\n      set: (key: string, value: any) => {\n        if (variables) {\n          variables[key] = value;\n        }\n      },\n      \n      get: (key: string) => {\n        return variables?.[key];\n      },\n      \n      // Sentiment analysis helper\n      analyzeSentiment: (text?: string) => {\n        const content = text || output;\n        // Simple sentiment analysis\n        const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'like', 'happy'];\n        const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'dislike', 'sad', 'angry', 'disappointed'];\n        \n        const words = content.toLowerCase().split(/\\s+/);\n        const positive = words.filter(w => positiveWords.includes(w)).length;\n        const negative = words.filter(w => negativeWords.includes(w)).length;\n        \n        if (positive > negative) return 'positive';\n        if (negative > positive) return 'negative';\n        return 'neutral';\n      },\n      \n      // Word frequency analysis\n      wordFrequency: (text?: string) => {\n        const content = text || output;\n        const words = content.toLowerCase().split(/\\s+/).filter(w => w.length > 0);\n        const frequency: Record<string, number> = {};\n        \n        words.forEach(word => {\n          frequency[word] = (frequency[word] || 0) + 1;\n        });\n        \n        return frequency;\n      },\n      \n      // Language detection helper\n      detectLanguage: (text?: string) => {\n        const content = text || output;\n        // Very simple language detection\n        const englishWords = ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that'];\n        const words = content.toLowerCase().split(/\\s+/);\n        const englishCount = words.filter(w => englishWords.includes(w)).length;\n        \n        return englishCount > words.length * 0.1 ? 'en' : 'unknown';\n      }\n    };\n\n    // Add allowed globals\n    this.allowedGlobals.forEach(globalName => {\n      if (globalName === 'Math') {\n        sandboxContext[globalName] = sandboxContext.Math;\n      } else if (typeof global !== 'undefined' && globalName in global) {\n        sandboxContext[globalName] = (global as any)[globalName];\n      }\n    });\n\n    return sandboxContext;\n  }\n\n  /**\n   * Execute code in a simple sandbox environment\n   */\n  private async executeInSandbox(\n    code: string,\n    context: Record<string, any>\n  ): Promise<any> {\n    // Create a function that executes the code in the given context\n    const wrappedCode = `\n      (function() {\n        \"use strict\";\n        const {${Object.keys(context).join(', ')}} = arguments[0];\n        \n        // Prevent access to dangerous globals\n        const eval = undefined;\n        const Function = undefined;\n        const constructor = undefined;\n        const prototype = undefined;\n        const __proto__ = undefined;\n        \n        // Execute the custom assertion code\n        ${code}\n      })\n    `;\n\n    try {\n      // Use Function constructor as a safer alternative to eval\n      // This is still not completely secure, but better than direct eval\n      const func = new Function('return ' + wrappedCode)();\n      \n      // Execute with timeout to prevent infinite loops\n      const result = await this.executeWithTimeout(func, [context], 5000);\n      \n      return result;\n    } catch (error) {\n      throw new Error(`Code execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute a function with timeout\n   */\n  private async executeWithTimeout(\n    func: Function,\n    args: any[],\n    timeout: number\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Execution timeout'));\n      }, timeout);\n\n      try {\n        const result = func.apply(null, args);\n        clearTimeout(timer);\n        resolve(result);\n      } catch (error) {\n        clearTimeout(timer);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get execution statistics\n   */\n  getStatistics(): {\n    totalExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    securityViolations: number;\n    averageExecutionTime: number;\n  } {\n    // In a real implementation, this would track actual statistics\n    return {\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      securityViolations: 0,\n      averageExecutionTime: 0\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.initialized = false;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "69ee10cf12e4242ef165994fea5c67afed897ab2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_242bl6feg6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_242bl6feg6();
cov_242bl6feg6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_242bl6feg6().s[1]++;
exports.CustomAssertionValidator = void 0;
class CustomAssertionValidator {
  constructor() {
    /* istanbul ignore next */
    cov_242bl6feg6().f[0]++;
    cov_242bl6feg6().s[2]++;
    this.initialized = false;
    // Define allowed global functions and objects for security
    /* istanbul ignore next */
    cov_242bl6feg6().s[3]++;
    this.allowedGlobals = new Set(['Math', 'String', 'Number', 'Array', 'Object', 'Date', 'RegExp', 'JSON', 'parseFloat', 'parseInt', 'isNaN', 'isFinite', 'encodeURI', 'decodeURI', 'encodeURIComponent', 'decodeURIComponent']);
    // Define banned keywords for security
    /* istanbul ignore next */
    cov_242bl6feg6().s[4]++;
    this.bannedKeywords = new Set(['eval', 'Function', 'require', 'import', 'process', 'global', 'window', 'document', 'localStorage', 'sessionStorage', 'fetch', 'XMLHttpRequest', 'WebSocket', 'Worker', 'SharedWorker', 'setTimeout', 'setInterval', 'setImmediate', 'clearTimeout', 'clearInterval', 'clearImmediate', '__dirname', '__filename', 'module', 'exports', 'Buffer', 'console.log', 'console.error']);
  }
  /**
   * Initialize the custom assertion validator
   */
  async initialize() {
    /* istanbul ignore next */
    cov_242bl6feg6().f[1]++;
    cov_242bl6feg6().s[5]++;
    try {
      /* istanbul ignore next */
      cov_242bl6feg6().s[6]++;
      console.log('Initializing CustomAssertionValidator...');
      /* istanbul ignore next */
      cov_242bl6feg6().s[7]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_242bl6feg6().s[8]++;
      console.log('✅ CustomAssertionValidator initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_242bl6feg6().s[9]++;
      console.error('❌ Failed to initialize CustomAssertionValidator:', error);
      /* istanbul ignore next */
      cov_242bl6feg6().s[10]++;
      throw error;
    }
  }
  /**
   * Execute custom assertion code in a secure sandbox
   */
  async execute(code, output, context) {
    /* istanbul ignore next */
    cov_242bl6feg6().f[2]++;
    cov_242bl6feg6().s[11]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_242bl6feg6().b[0][0]++;
      cov_242bl6feg6().s[12]++;
      throw new Error('CustomAssertionValidator not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_242bl6feg6().b[0][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[13]++, Date.now());
    const logs =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[14]++, []);
    const variables =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[15]++, {});
    /* istanbul ignore next */
    cov_242bl6feg6().s[16]++;
    try {
      // Security check - scan for banned keywords
      const securityResult =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[17]++, this.performSecurityCheck(code));
      /* istanbul ignore next */
      cov_242bl6feg6().s[18]++;
      if (!securityResult.safe) {
        /* istanbul ignore next */
        cov_242bl6feg6().b[1][0]++;
        cov_242bl6feg6().s[19]++;
        throw new Error(`Security violation: ${securityResult.reason}`);
      } else
      /* istanbul ignore next */
      {
        cov_242bl6feg6().b[1][1]++;
      }
      // Prepare execution environment
      const sandboxContext =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[20]++, this.createSandboxContext(output, context, logs, variables));
      // Execute the custom assertion
      const result =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[21]++, await this.executeInSandbox(code, sandboxContext));
      const executionTime =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[22]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_242bl6feg6().s[23]++;
      return {
        passed: Boolean(result),
        score: typeof result === 'number' ?
        /* istanbul ignore next */
        (cov_242bl6feg6().b[2][0]++, result) :
        /* istanbul ignore next */
        (cov_242bl6feg6().b[2][1]++, Boolean(result) ?
        /* istanbul ignore next */
        (cov_242bl6feg6().b[3][0]++, 1) :
        /* istanbul ignore next */
        (cov_242bl6feg6().b[3][1]++, 0)),
        executionTime,
        variables,
        logs
      };
    } catch (error) {
      const executionTime =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[24]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_242bl6feg6().s[25]++;
      return {
        passed: false,
        executionTime,
        variables,
        logs,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_242bl6feg6().b[4][0]++, error.message) :
        /* istanbul ignore next */
        (cov_242bl6feg6().b[4][1]++, 'Unknown execution error')
      };
    }
  }
  /**
   * Perform security checks on the custom code
   */
  performSecurityCheck(code) {
    /* istanbul ignore next */
    cov_242bl6feg6().f[3]++;
    cov_242bl6feg6().s[26]++;
    // Check for banned keywords
    for (const keyword of this.bannedKeywords) {
      /* istanbul ignore next */
      cov_242bl6feg6().s[27]++;
      if (code.includes(keyword)) {
        /* istanbul ignore next */
        cov_242bl6feg6().b[5][0]++;
        cov_242bl6feg6().s[28]++;
        return {
          safe: false,
          reason: `Banned keyword detected: ${keyword}`
        };
      } else
      /* istanbul ignore next */
      {
        cov_242bl6feg6().b[5][1]++;
      }
    }
    // Check for potential injection patterns
    const dangerousPatterns =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[29]++, [/constructor/i, /prototype/i, /(__proto__|__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__)/i, /\[\s*["']constructor["']\s*\]/i, /\[\s*["']__proto__["']\s*\]/i, /\[\s*["']prototype["']\s*\]/i]);
    /* istanbul ignore next */
    cov_242bl6feg6().s[30]++;
    for (const pattern of dangerousPatterns) {
      /* istanbul ignore next */
      cov_242bl6feg6().s[31]++;
      if (pattern.test(code)) {
        /* istanbul ignore next */
        cov_242bl6feg6().b[6][0]++;
        cov_242bl6feg6().s[32]++;
        return {
          safe: false,
          reason: `Potentially dangerous pattern detected: ${pattern.toString()}`
        };
      } else
      /* istanbul ignore next */
      {
        cov_242bl6feg6().b[6][1]++;
      }
    }
    // Check code length (prevent DoS)
    /* istanbul ignore next */
    cov_242bl6feg6().s[33]++;
    if (code.length > 10000) {
      /* istanbul ignore next */
      cov_242bl6feg6().b[7][0]++;
      cov_242bl6feg6().s[34]++;
      return {
        safe: false,
        reason: 'Code too long (max 10000 characters)'
      };
    } else
    /* istanbul ignore next */
    {
      cov_242bl6feg6().b[7][1]++;
    }
    // Check for excessive nesting (prevent DoS)
    const nestingLevel =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[35]++, this.checkNestingLevel(code));
    /* istanbul ignore next */
    cov_242bl6feg6().s[36]++;
    if (nestingLevel > 20) {
      /* istanbul ignore next */
      cov_242bl6feg6().b[8][0]++;
      cov_242bl6feg6().s[37]++;
      return {
        safe: false,
        reason: 'Code nesting too deep (max 20 levels)'
      };
    } else
    /* istanbul ignore next */
    {
      cov_242bl6feg6().b[8][1]++;
    }
    cov_242bl6feg6().s[38]++;
    return {
      safe: true
    };
  }
  /**
   * Check nesting level of code
   */
  checkNestingLevel(code) {
    /* istanbul ignore next */
    cov_242bl6feg6().f[4]++;
    let maxLevel =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[39]++, 0);
    let currentLevel =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[40]++, 0);
    /* istanbul ignore next */
    cov_242bl6feg6().s[41]++;
    for (const char of code) {
      /* istanbul ignore next */
      cov_242bl6feg6().s[42]++;
      if (
      /* istanbul ignore next */
      (cov_242bl6feg6().b[10][0]++, char === '{') ||
      /* istanbul ignore next */
      (cov_242bl6feg6().b[10][1]++, char === '(') ||
      /* istanbul ignore next */
      (cov_242bl6feg6().b[10][2]++, char === '[')) {
        /* istanbul ignore next */
        cov_242bl6feg6().b[9][0]++;
        cov_242bl6feg6().s[43]++;
        currentLevel++;
        /* istanbul ignore next */
        cov_242bl6feg6().s[44]++;
        maxLevel = Math.max(maxLevel, currentLevel);
      } else {
        /* istanbul ignore next */
        cov_242bl6feg6().b[9][1]++;
        cov_242bl6feg6().s[45]++;
        if (
        /* istanbul ignore next */
        (cov_242bl6feg6().b[12][0]++, char === '}') ||
        /* istanbul ignore next */
        (cov_242bl6feg6().b[12][1]++, char === ')') ||
        /* istanbul ignore next */
        (cov_242bl6feg6().b[12][2]++, char === ']')) {
          /* istanbul ignore next */
          cov_242bl6feg6().b[11][0]++;
          cov_242bl6feg6().s[46]++;
          currentLevel--;
        } else
        /* istanbul ignore next */
        {
          cov_242bl6feg6().b[11][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_242bl6feg6().s[47]++;
    return maxLevel;
  }
  /**
   * Create a sandbox context for code execution
   */
  createSandboxContext(output, context, logs, variables) {
    /* istanbul ignore next */
    cov_242bl6feg6().f[5]++;
    const sandboxContext =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[48]++, {
      // Assertion input
      output,
      text: output,
      content: output,
      // Context information
      prompt:
      /* istanbul ignore next */
      (cov_242bl6feg6().b[13][0]++, context?.prompt) ||
      /* istanbul ignore next */
      (cov_242bl6feg6().b[13][1]++, ''),
      variables: context?.variables ?
      /* istanbul ignore next */
      (cov_242bl6feg6().b[14][0]++, {
        ...context.variables
      }) :
      /* istanbul ignore next */
      (cov_242bl6feg6().b[14][1]++, {}),
      model:
      /* istanbul ignore next */
      (cov_242bl6feg6().b[15][0]++, context?.model) ||
      /* istanbul ignore next */
      (cov_242bl6feg6().b[15][1]++, ''),
      executionTime:
      /* istanbul ignore next */
      (cov_242bl6feg6().b[16][0]++, context?.executionTime) ||
      /* istanbul ignore next */
      (cov_242bl6feg6().b[16][1]++, 0),
      // Utility functions
      length: output.length,
      wordCount: output.split(/\s+/).filter(w => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[6]++;
        cov_242bl6feg6().s[49]++;
        return w.length > 0;
      }).length,
      lineCount: output.split('\n').length,
      // Safe string operations
      toLowerCase: () => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[7]++;
        cov_242bl6feg6().s[50]++;
        return output.toLowerCase();
      },
      toUpperCase: () => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[8]++;
        cov_242bl6feg6().s[51]++;
        return output.toUpperCase();
      },
      trim: () => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[9]++;
        cov_242bl6feg6().s[52]++;
        return output.trim();
      },
      includes: str => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[10]++;
        cov_242bl6feg6().s[53]++;
        return output.includes(str);
      },
      startsWith: str => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[11]++;
        cov_242bl6feg6().s[54]++;
        return output.startsWith(str);
      },
      endsWith: str => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[12]++;
        cov_242bl6feg6().s[55]++;
        return output.endsWith(str);
      },
      indexOf: str => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[13]++;
        cov_242bl6feg6().s[56]++;
        return output.indexOf(str);
      },
      match: pattern => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[14]++;
        cov_242bl6feg6().s[57]++;
        return output.match(pattern);
      },
      replace: (search, replacement) => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[15]++;
        cov_242bl6feg6().s[58]++;
        return output.replace(search, replacement);
      },
      split: separator => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[16]++;
        cov_242bl6feg6().s[59]++;
        return output.split(separator);
      },
      substring: (start, end) => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[17]++;
        cov_242bl6feg6().s[60]++;
        return output.substring(start, end);
      },
      slice: (start, end) => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[18]++;
        cov_242bl6feg6().s[61]++;
        return output.slice(start, end);
      },
      // JSON operations
      parseJSON: str => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[19]++;
        cov_242bl6feg6().s[62]++;
        try {
          /* istanbul ignore next */
          cov_242bl6feg6().s[63]++;
          return JSON.parse(
          /* istanbul ignore next */
          (cov_242bl6feg6().b[17][0]++, str) ||
          /* istanbul ignore next */
          (cov_242bl6feg6().b[17][1]++, output));
        } catch {
          /* istanbul ignore next */
          cov_242bl6feg6().s[64]++;
          return null;
        }
      },
      // Regular expressions
      regex: (pattern, flags) => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[20]++;
        cov_242bl6feg6().s[65]++;
        try {
          /* istanbul ignore next */
          cov_242bl6feg6().s[66]++;
          return new RegExp(pattern, flags);
        } catch {
          /* istanbul ignore next */
          cov_242bl6feg6().s[67]++;
          return null;
        }
      },
      // Math operations
      Math: {
        ...Math,
        random: () => {
          /* istanbul ignore next */
          cov_242bl6feg6().f[21]++;
          cov_242bl6feg6().s[68]++;
          throw new Error('Math.random() is not allowed in assertions');
        }
      },
      // Safe logging
      log: message => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[22]++;
        cov_242bl6feg6().s[69]++;
        if (logs) {
          /* istanbul ignore next */
          cov_242bl6feg6().b[18][0]++;
          cov_242bl6feg6().s[70]++;
          logs.push(String(message));
        } else
        /* istanbul ignore next */
        {
          cov_242bl6feg6().b[18][1]++;
        }
      },
      // Variable storage
      set: (key, value) => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[23]++;
        cov_242bl6feg6().s[71]++;
        if (variables) {
          /* istanbul ignore next */
          cov_242bl6feg6().b[19][0]++;
          cov_242bl6feg6().s[72]++;
          variables[key] = value;
        } else
        /* istanbul ignore next */
        {
          cov_242bl6feg6().b[19][1]++;
        }
      },
      get: key => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[24]++;
        cov_242bl6feg6().s[73]++;
        return variables?.[key];
      },
      // Sentiment analysis helper
      analyzeSentiment: text => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[25]++;
        const content =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[74]++,
        /* istanbul ignore next */
        (cov_242bl6feg6().b[20][0]++, text) ||
        /* istanbul ignore next */
        (cov_242bl6feg6().b[20][1]++, output));
        // Simple sentiment analysis
        const positiveWords =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[75]++, ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'like', 'happy']);
        const negativeWords =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[76]++, ['bad', 'terrible', 'awful', 'hate', 'dislike', 'sad', 'angry', 'disappointed']);
        const words =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[77]++, content.toLowerCase().split(/\s+/));
        const positive =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[78]++, words.filter(w => {
          /* istanbul ignore next */
          cov_242bl6feg6().f[26]++;
          cov_242bl6feg6().s[79]++;
          return positiveWords.includes(w);
        }).length);
        const negative =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[80]++, words.filter(w => {
          /* istanbul ignore next */
          cov_242bl6feg6().f[27]++;
          cov_242bl6feg6().s[81]++;
          return negativeWords.includes(w);
        }).length);
        /* istanbul ignore next */
        cov_242bl6feg6().s[82]++;
        if (positive > negative) {
          /* istanbul ignore next */
          cov_242bl6feg6().b[21][0]++;
          cov_242bl6feg6().s[83]++;
          return 'positive';
        } else
        /* istanbul ignore next */
        {
          cov_242bl6feg6().b[21][1]++;
        }
        cov_242bl6feg6().s[84]++;
        if (negative > positive) {
          /* istanbul ignore next */
          cov_242bl6feg6().b[22][0]++;
          cov_242bl6feg6().s[85]++;
          return 'negative';
        } else
        /* istanbul ignore next */
        {
          cov_242bl6feg6().b[22][1]++;
        }
        cov_242bl6feg6().s[86]++;
        return 'neutral';
      },
      // Word frequency analysis
      wordFrequency: text => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[28]++;
        const content =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[87]++,
        /* istanbul ignore next */
        (cov_242bl6feg6().b[23][0]++, text) ||
        /* istanbul ignore next */
        (cov_242bl6feg6().b[23][1]++, output));
        const words =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[88]++, content.toLowerCase().split(/\s+/).filter(w => {
          /* istanbul ignore next */
          cov_242bl6feg6().f[29]++;
          cov_242bl6feg6().s[89]++;
          return w.length > 0;
        }));
        const frequency =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[90]++, {});
        /* istanbul ignore next */
        cov_242bl6feg6().s[91]++;
        words.forEach(word => {
          /* istanbul ignore next */
          cov_242bl6feg6().f[30]++;
          cov_242bl6feg6().s[92]++;
          frequency[word] = (
          /* istanbul ignore next */
          (cov_242bl6feg6().b[24][0]++, frequency[word]) ||
          /* istanbul ignore next */
          (cov_242bl6feg6().b[24][1]++, 0)) + 1;
        });
        /* istanbul ignore next */
        cov_242bl6feg6().s[93]++;
        return frequency;
      },
      // Language detection helper
      detectLanguage: text => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[31]++;
        const content =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[94]++,
        /* istanbul ignore next */
        (cov_242bl6feg6().b[25][0]++, text) ||
        /* istanbul ignore next */
        (cov_242bl6feg6().b[25][1]++, output));
        // Very simple language detection
        const englishWords =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[95]++, ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that']);
        const words =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[96]++, content.toLowerCase().split(/\s+/));
        const englishCount =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[97]++, words.filter(w => {
          /* istanbul ignore next */
          cov_242bl6feg6().f[32]++;
          cov_242bl6feg6().s[98]++;
          return englishWords.includes(w);
        }).length);
        /* istanbul ignore next */
        cov_242bl6feg6().s[99]++;
        return englishCount > words.length * 0.1 ?
        /* istanbul ignore next */
        (cov_242bl6feg6().b[26][0]++, 'en') :
        /* istanbul ignore next */
        (cov_242bl6feg6().b[26][1]++, 'unknown');
      }
    });
    // Add allowed globals
    /* istanbul ignore next */
    cov_242bl6feg6().s[100]++;
    this.allowedGlobals.forEach(globalName => {
      /* istanbul ignore next */
      cov_242bl6feg6().f[33]++;
      cov_242bl6feg6().s[101]++;
      if (globalName === 'Math') {
        /* istanbul ignore next */
        cov_242bl6feg6().b[27][0]++;
        cov_242bl6feg6().s[102]++;
        sandboxContext[globalName] = sandboxContext.Math;
      } else {
        /* istanbul ignore next */
        cov_242bl6feg6().b[27][1]++;
        cov_242bl6feg6().s[103]++;
        if (
        /* istanbul ignore next */
        (cov_242bl6feg6().b[29][0]++, typeof global !== 'undefined') &&
        /* istanbul ignore next */
        (cov_242bl6feg6().b[29][1]++, globalName in global)) {
          /* istanbul ignore next */
          cov_242bl6feg6().b[28][0]++;
          cov_242bl6feg6().s[104]++;
          sandboxContext[globalName] = global[globalName];
        } else
        /* istanbul ignore next */
        {
          cov_242bl6feg6().b[28][1]++;
        }
      }
    });
    /* istanbul ignore next */
    cov_242bl6feg6().s[105]++;
    return sandboxContext;
  }
  /**
   * Execute code in a simple sandbox environment
   */
  async executeInSandbox(code, context) {
    /* istanbul ignore next */
    cov_242bl6feg6().f[34]++;
    // Create a function that executes the code in the given context
    const wrappedCode =
    /* istanbul ignore next */
    (cov_242bl6feg6().s[106]++, `
      (function() {
        "use strict";
        const {${Object.keys(context).join(', ')}} = arguments[0];
        
        // Prevent access to dangerous globals
        const eval = undefined;
        const Function = undefined;
        const constructor = undefined;
        const prototype = undefined;
        const __proto__ = undefined;
        
        // Execute the custom assertion code
        ${code}
      })
    `);
    /* istanbul ignore next */
    cov_242bl6feg6().s[107]++;
    try {
      // Use Function constructor as a safer alternative to eval
      // This is still not completely secure, but better than direct eval
      const func =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[108]++, new Function('return ' + wrappedCode)());
      // Execute with timeout to prevent infinite loops
      const result =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[109]++, await this.executeWithTimeout(func, [context], 5000));
      /* istanbul ignore next */
      cov_242bl6feg6().s[110]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_242bl6feg6().s[111]++;
      throw new Error(`Code execution failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_242bl6feg6().b[30][0]++, error.message) :
      /* istanbul ignore next */
      (cov_242bl6feg6().b[30][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Execute a function with timeout
   */
  async executeWithTimeout(func, args, timeout) {
    /* istanbul ignore next */
    cov_242bl6feg6().f[35]++;
    cov_242bl6feg6().s[112]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_242bl6feg6().f[36]++;
      const timer =
      /* istanbul ignore next */
      (cov_242bl6feg6().s[113]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_242bl6feg6().f[37]++;
        cov_242bl6feg6().s[114]++;
        reject(new Error('Execution timeout'));
      }, timeout));
      /* istanbul ignore next */
      cov_242bl6feg6().s[115]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_242bl6feg6().s[116]++, func.apply(null, args));
        /* istanbul ignore next */
        cov_242bl6feg6().s[117]++;
        clearTimeout(timer);
        /* istanbul ignore next */
        cov_242bl6feg6().s[118]++;
        resolve(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_242bl6feg6().s[119]++;
        clearTimeout(timer);
        /* istanbul ignore next */
        cov_242bl6feg6().s[120]++;
        reject(error);
      }
    });
  }
  /**
   * Get execution statistics
   */
  getStatistics() {
    /* istanbul ignore next */
    cov_242bl6feg6().f[38]++;
    cov_242bl6feg6().s[121]++;
    // In a real implementation, this would track actual statistics
    return {
      totalExecutions: 0,
      successfulExecutions: 0,
      failedExecutions: 0,
      securityViolations: 0,
      averageExecutionTime: 0
    };
  }
  /**
   * Clean up resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_242bl6feg6().f[39]++;
    cov_242bl6feg6().s[122]++;
    this.initialized = false;
  }
}
/* istanbul ignore next */
cov_242bl6feg6().s[123]++;
exports.CustomAssertionValidator = CustomAssertionValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,