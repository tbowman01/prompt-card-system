{"version":3,"names":["cov_242bl6feg6","actualCoverage","s","CustomAssertionValidator","constructor","f","initialized","allowedGlobals","Set","bannedKeywords","initialize","console","log","error","execute","code","output","context","b","Error","startTime","Date","now","logs","variables","securityResult","performSecurityCheck","safe","reason","sandboxContext","createSandboxContext","result","executeInSandbox","executionTime","passed","Boolean","score","message","keyword","includes","dangerousPatterns","pattern","test","toString","length","nestingLevel","checkNestingLevel","maxLevel","currentLevel","char","Math","max","text","content","prompt","model","wordCount","split","filter","w","lineCount","toLowerCase","toUpperCase","trim","str","startsWith","endsWith","indexOf","match","replace","search","replacement","separator","substring","start","end","slice","parseJSON","JSON","parse","regex","flags","RegExp","random","push","String","set","key","value","get","analyzeSentiment","positiveWords","negativeWords","words","positive","negative","wordFrequency","frequency","forEach","word","detectLanguage","englishWords","englishCount","globalName","global","wrappedCode","Object","keys","join","func","Function","executeWithTimeout","args","timeout","Promise","resolve","reject","timer","setTimeout","apply","clearTimeout","getStatistics","totalExecutions","successfulExecutions","failedExecutions","securityViolations","averageExecutionTime","cleanup","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/assertions/CustomAssertionValidator.ts"],"sourcesContent":["import { AssertionContext } from './AssertionEngine';\n\nexport interface CustomAssertionResult {\n  passed: boolean;\n  score?: number;\n  executionTime: number;\n  variables?: Record<string, any>;\n  logs?: string[];\n  error?: string;\n}\n\nexport class CustomAssertionValidator {\n  private initialized: boolean = false;\n  private allowedGlobals: Set<string>;\n  private bannedKeywords: Set<string>;\n\n  constructor() {\n    // Define allowed global functions and objects for security\n    this.allowedGlobals = new Set([\n      'Math', 'String', 'Number', 'Array', 'Object', 'Date', 'RegExp',\n      'JSON', 'parseFloat', 'parseInt', 'isNaN', 'isFinite',\n      'encodeURI', 'decodeURI', 'encodeURIComponent', 'decodeURIComponent'\n    ]);\n\n    // Define banned keywords for security\n    this.bannedKeywords = new Set([\n      'eval', 'Function', 'require', 'import', 'process', 'global',\n      'window', 'document', 'localStorage', 'sessionStorage', 'fetch',\n      'XMLHttpRequest', 'WebSocket', 'Worker', 'SharedWorker',\n      'setTimeout', 'setInterval', 'setImmediate', 'clearTimeout',\n      'clearInterval', 'clearImmediate', '__dirname', '__filename',\n      'module', 'exports', 'Buffer', 'console.log', 'console.error'\n    ]);\n  }\n\n  /**\n   * Initialize the custom assertion validator\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('Initializing CustomAssertionValidator...');\n      \n      this.initialized = true;\n      \n      console.log('✅ CustomAssertionValidator initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize CustomAssertionValidator:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute custom assertion code in a secure sandbox\n   */\n  async execute(\n    code: string,\n    output: string,\n    context?: AssertionContext\n  ): Promise<CustomAssertionResult> {\n    if (!this.initialized) {\n      throw new Error('CustomAssertionValidator not initialized');\n    }\n\n    const startTime = Date.now();\n    const logs: string[] = [];\n    const variables: Record<string, any> = {};\n\n    try {\n      // Security check - scan for banned keywords\n      const securityResult = this.performSecurityCheck(code);\n      if (!securityResult.safe) {\n        throw new Error(`Security violation: ${securityResult.reason}`);\n      }\n\n      // Prepare execution environment\n      const sandboxContext = this.createSandboxContext(output, context, logs, variables);\n      \n      // Execute the custom assertion\n      const result = await this.executeInSandbox(code, sandboxContext);\n      \n      const executionTime = Date.now() - startTime;\n      \n      return {\n        passed: Boolean(result),\n        score: typeof result === 'number' ? result : (Boolean(result) ? 1 : 0),\n        executionTime,\n        variables,\n        logs\n      };\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      \n      return {\n        passed: false,\n        executionTime,\n        variables,\n        logs,\n        error: error instanceof Error ? error.message : 'Unknown execution error'\n      };\n    }\n  }\n\n  /**\n   * Perform security checks on the custom code\n   */\n  private performSecurityCheck(code: string): { safe: boolean; reason?: string } {\n    // Check for banned keywords\n    for (const keyword of this.bannedKeywords) {\n      if (code.includes(keyword)) {\n        return {\n          safe: false,\n          reason: `Banned keyword detected: ${keyword}`\n        };\n      }\n    }\n\n    // Check for potential injection patterns\n    const dangerousPatterns = [\n      /constructor/i,\n      /prototype/i,\n      /(__proto__|__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__)/i,\n      /\\[\\s*[\"']constructor[\"']\\s*\\]/i,\n      /\\[\\s*[\"']__proto__[\"']\\s*\\]/i,\n      /\\[\\s*[\"']prototype[\"']\\s*\\]/i\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(code)) {\n        return {\n          safe: false,\n          reason: `Potentially dangerous pattern detected: ${pattern.toString()}`\n        };\n      }\n    }\n\n    // Check code length (prevent DoS)\n    if (code.length > 10000) {\n      return {\n        safe: false,\n        reason: 'Code too long (max 10000 characters)'\n      };\n    }\n\n    // Check for excessive nesting (prevent DoS)\n    const nestingLevel = this.checkNestingLevel(code);\n    if (nestingLevel > 20) {\n      return {\n        safe: false,\n        reason: 'Code nesting too deep (max 20 levels)'\n      };\n    }\n\n    return { safe: true };\n  }\n\n  /**\n   * Check nesting level of code\n   */\n  private checkNestingLevel(code: string): number {\n    let maxLevel = 0;\n    let currentLevel = 0;\n    \n    for (const char of code) {\n      if (char === '{' || char === '(' || char === '[') {\n        currentLevel++;\n        maxLevel = Math.max(maxLevel, currentLevel);\n      } else if (char === '}' || char === ')' || char === ']') {\n        currentLevel--;\n      }\n    }\n    \n    return maxLevel;\n  }\n\n  /**\n   * Create a sandbox context for code execution\n   */\n  private createSandboxContext(\n    output: string,\n    context?: AssertionContext,\n    logs?: string[],\n    variables?: Record<string, any>\n  ): Record<string, any> {\n    const sandboxContext: Record<string, any> = {\n      // Assertion input\n      output,\n      text: output,\n      content: output,\n      \n      // Context information\n      prompt: context?.prompt || '',\n      variables: context?.variables ? { ...context.variables } : {},\n      model: context?.model || '',\n      executionTime: context?.executionTime || 0,\n      \n      // Utility functions\n      length: output.length,\n      wordCount: output.split(/\\s+/).filter(w => w.length > 0).length,\n      lineCount: output.split('\\n').length,\n      \n      // Safe string operations\n      toLowerCase: () => output.toLowerCase(),\n      toUpperCase: () => output.toUpperCase(),\n      trim: () => output.trim(),\n      includes: (str: string) => output.includes(str),\n      startsWith: (str: string) => output.startsWith(str),\n      endsWith: (str: string) => output.endsWith(str),\n      indexOf: (str: string) => output.indexOf(str),\n      match: (pattern: string | RegExp) => output.match(pattern),\n      replace: (search: string | RegExp, replacement: string) => output.replace(search, replacement),\n      split: (separator: string | RegExp) => output.split(separator),\n      substring: (start: number, end?: number) => output.substring(start, end),\n      slice: (start: number, end?: number) => output.slice(start, end),\n      \n      // JSON operations\n      parseJSON: (str?: string) => {\n        try {\n          return JSON.parse(str || output);\n        } catch {\n          return null;\n        }\n      },\n      \n      // Regular expressions\n      regex: (pattern: string, flags?: string) => {\n        try {\n          return new RegExp(pattern, flags);\n        } catch {\n          return null;\n        }\n      },\n      \n      // Math operations\n      Math: {\n        ...Math,\n        random: () => { throw new Error('Math.random() is not allowed in assertions'); }\n      },\n      \n      // Safe logging\n      log: (message: any) => {\n        if (logs) {\n          logs.push(String(message));\n        }\n      },\n      \n      // Variable storage\n      set: (key: string, value: any) => {\n        if (variables) {\n          variables[key] = value;\n        }\n      },\n      \n      get: (key: string) => {\n        return variables?.[key];\n      },\n      \n      // Sentiment analysis helper\n      analyzeSentiment: (text?: string) => {\n        const content = text || output;\n        // Simple sentiment analysis\n        const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'like', 'happy'];\n        const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'dislike', 'sad', 'angry', 'disappointed'];\n        \n        const words = content.toLowerCase().split(/\\s+/);\n        const positive = words.filter(w => positiveWords.includes(w)).length;\n        const negative = words.filter(w => negativeWords.includes(w)).length;\n        \n        if (positive > negative) return 'positive';\n        if (negative > positive) return 'negative';\n        return 'neutral';\n      },\n      \n      // Word frequency analysis\n      wordFrequency: (text?: string) => {\n        const content = text || output;\n        const words = content.toLowerCase().split(/\\s+/).filter(w => w.length > 0);\n        const frequency: Record<string, number> = {};\n        \n        words.forEach(word => {\n          frequency[word] = (frequency[word] || 0) + 1;\n        });\n        \n        return frequency;\n      },\n      \n      // Language detection helper\n      detectLanguage: (text?: string) => {\n        const content = text || output;\n        // Very simple language detection\n        const englishWords = ['the', 'and', 'is', 'in', 'to', 'of', 'a', 'that'];\n        const words = content.toLowerCase().split(/\\s+/);\n        const englishCount = words.filter(w => englishWords.includes(w)).length;\n        \n        return englishCount > words.length * 0.1 ? 'en' : 'unknown';\n      }\n    };\n\n    // Add allowed globals\n    this.allowedGlobals.forEach(globalName => {\n      if (globalName === 'Math') {\n        sandboxContext[globalName] = sandboxContext.Math;\n      } else if (typeof global !== 'undefined' && globalName in global) {\n        sandboxContext[globalName] = (global as any)[globalName];\n      }\n    });\n\n    return sandboxContext;\n  }\n\n  /**\n   * Execute code in a simple sandbox environment\n   */\n  private async executeInSandbox(\n    code: string,\n    context: Record<string, any>\n  ): Promise<any> {\n    // Create a function that executes the code in the given context\n    const wrappedCode = `\n      (function() {\n        \"use strict\";\n        const {${Object.keys(context).join(', ')}} = arguments[0];\n        \n        // Prevent access to dangerous globals\n        const eval = undefined;\n        const Function = undefined;\n        const constructor = undefined;\n        const prototype = undefined;\n        const __proto__ = undefined;\n        \n        // Execute the custom assertion code\n        ${code}\n      })\n    `;\n\n    try {\n      // Use Function constructor as a safer alternative to eval\n      // This is still not completely secure, but better than direct eval\n      const func = new Function('return ' + wrappedCode)();\n      \n      // Execute with timeout to prevent infinite loops\n      const result = await this.executeWithTimeout(func, [context], 5000);\n      \n      return result;\n    } catch (error) {\n      throw new Error(`Code execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute a function with timeout\n   */\n  private async executeWithTimeout(\n    func: Function,\n    args: any[],\n    timeout: number\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Execution timeout'));\n      }, timeout);\n\n      try {\n        const result = func.apply(null, args);\n        clearTimeout(timer);\n        resolve(result);\n      } catch (error) {\n        clearTimeout(timer);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get execution statistics\n   */\n  getStatistics(): {\n    totalExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    securityViolations: number;\n    averageExecutionTime: number;\n  } {\n    // In a real implementation, this would track actual statistics\n    return {\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      securityViolations: 0,\n      averageExecutionTime: 0\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.initialized = false;\n  }\n}"],"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","ignoreList":[]}