4eefd59b59d274088e0376c0c6866610
"use strict";

/* istanbul ignore next */
function cov_28uht60ksz() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/predictive-analytics.ts";
  var hash = "667f8ca0443a49c2db18c0fd4b1bb4559fc00fb3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/predictive-analytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 53
        }
      },
      "5": {
        start: {
          line: 8,
          column: 30
        },
        end: {
          line: 8,
          column: 82
        }
      },
      "6": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 74
        }
      },
      "7": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 74
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "10": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 75
        }
      },
      "11": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "12": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "13": {
        start: {
          line: 20,
          column: 47
        },
        end: {
          line: 20,
          column: 55
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "15": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 25,
          column: 15
        }
      },
      "16": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 89
        }
      },
      "17": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 63
        }
      },
      "19": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "20": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "21": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "22": {
        start: {
          line: 51,
          column: 101
        },
        end: {
          line: 51,
          column: 109
        }
      },
      "23": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 89
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 62
        }
      },
      "26": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "27": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 96,
          column: 3
        }
      },
      "28": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "29": {
        start: {
          line: 76,
          column: 46
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "30": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "31": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "32": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 87
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 67
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "36": {
        start: {
          line: 100,
          column: 0
        },
        end: {
          line: 117,
          column: 3
        }
      },
      "37": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "38": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 37
        }
      },
      "39": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 103,
          column: 69
        }
      },
      "40": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 81
        }
      },
      "41": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 59
        }
      },
      "43": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "44": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 136,
          column: 3
        }
      },
      "45": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "46": {
        start: {
          line: 123,
          column: 25
        },
        end: {
          line: 123,
          column: 71
        }
      },
      "47": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 62
        }
      },
      "49": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "50": {
        start: {
          line: 140,
          column: 0
        },
        end: {
          line: 162,
          column: 3
        }
      },
      "51": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "52": {
        start: {
          line: 142,
          column: 48
        },
        end: {
          line: 142,
          column: 57
        }
      },
      "53": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "54": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "55": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 112
        }
      },
      "56": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "57": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 66
        }
      },
      "58": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "59": {
        start: {
          line: 166,
          column: 0
        },
        end: {
          line: 181,
          column: 3
        }
      },
      "60": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "61": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 54
        }
      },
      "62": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "63": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 57
        }
      },
      "64": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "65": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 203,
          column: 3
        }
      },
      "66": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 202,
          column: 5
        }
      },
      "67": {
        start: {
          line: 188,
          column: 39
        },
        end: {
          line: 188,
          column: 47
        }
      },
      "68": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 69
        }
      },
      "69": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "70": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 66
        }
      },
      "71": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "72": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 222,
          column: 3
        }
      },
      "73": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "74": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 58
        }
      },
      "75": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "76": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 66
        }
      },
      "77": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "78": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 247,
          column: 3
        }
      },
      "79": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 246,
          column: 5
        }
      },
      "80": {
        start: {
          line: 228,
          column: 99
        },
        end: {
          line: 228,
          column: 107
        }
      },
      "81": {
        start: {
          line: 229,
          column: 22
        },
        end: {
          line: 229,
          column: 106
        }
      },
      "82": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "83": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 72
        }
      },
      "84": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "85": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 273,
          column: 3
        }
      },
      "86": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 272,
          column: 5
        }
      },
      "87": {
        start: {
          line: 253,
          column: 43
        },
        end: {
          line: 253,
          column: 51
        }
      },
      "88": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "89": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "90": {
        start: {
          line: 260,
          column: 27
        },
        end: {
          line: 260,
          column: 114
        }
      },
      "91": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 264,
          column: 11
        }
      },
      "92": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 71
        }
      },
      "93": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "94": {
        start: {
          line: 277,
          column: 0
        },
        end: {
          line: 292,
          column: 3
        }
      },
      "95": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 291,
          column: 5
        }
      },
      "96": {
        start: {
          line: 279,
          column: 23
        },
        end: {
          line: 279,
          column: 74
        }
      },
      "97": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 283,
          column: 11
        }
      },
      "98": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 61
        }
      },
      "99": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 290,
          column: 11
        }
      },
      "100": {
        start: {
          line: 296,
          column: 0
        },
        end: {
          line: 321,
          column: 3
        }
      },
      "101": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 320,
          column: 5
        }
      },
      "102": {
        start: {
          line: 298,
          column: 28
        },
        end: {
          line: 298,
          column: 38
        }
      },
      "103": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 35
        }
      },
      "104": {
        start: {
          line: 300,
          column: 29
        },
        end: {
          line: 300,
          column: 96
        }
      },
      "105": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "106": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 305,
          column: 15
        }
      },
      "107": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 311,
          column: 15
        }
      },
      "108": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 59
        }
      },
      "109": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "110": {
        start: {
          line: 325,
          column: 0
        },
        end: {
          line: 350,
          column: 3
        }
      },
      "111": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 349,
          column: 5
        }
      },
      "112": {
        start: {
          line: 327,
          column: 28
        },
        end: {
          line: 327,
          column: 38
        }
      },
      "113": {
        start: {
          line: 328,
          column: 27
        },
        end: {
          line: 328,
          column: 35
        }
      },
      "114": {
        start: {
          line: 329,
          column: 25
        },
        end: {
          line: 329,
          column: 88
        }
      },
      "115": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "116": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "117": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 340,
          column: 15
        }
      },
      "118": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 55
        }
      },
      "119": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "120": {
        start: {
          line: 354,
          column: 0
        },
        end: {
          line: 369,
          column: 3
        }
      },
      "121": {
        start: {
          line: 355,
          column: 4
        },
        end: {
          line: 368,
          column: 5
        }
      },
      "122": {
        start: {
          line: 356,
          column: 22
        },
        end: {
          line: 356,
          column: 75
        }
      },
      "123": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 360,
          column: 11
        }
      },
      "124": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 63
        }
      },
      "125": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "126": {
        start: {
          line: 373,
          column: 0
        },
        end: {
          line: 389,
          column: 3
        }
      },
      "127": {
        start: {
          line: 374,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "128": {
        start: {
          line: 375,
          column: 23
        },
        end: {
          line: 375,
          column: 31
        }
      },
      "129": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 63
        }
      },
      "130": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "131": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 65
        }
      },
      "132": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 387,
          column: 11
        }
      },
      "133": {
        start: {
          line: 393,
          column: 0
        },
        end: {
          line: 408,
          column: 3
        }
      },
      "134": {
        start: {
          line: 394,
          column: 4
        },
        end: {
          line: 407,
          column: 5
        }
      },
      "135": {
        start: {
          line: 395,
          column: 21
        },
        end: {
          line: 395,
          column: 67
        }
      },
      "136": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 399,
          column: 11
        }
      },
      "137": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 64
        }
      },
      "138": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 406,
          column: 11
        }
      },
      "139": {
        start: {
          line: 413,
          column: 0
        },
        end: {
          line: 430,
          column: 3
        }
      },
      "140": {
        start: {
          line: 414,
          column: 4
        },
        end: {
          line: 429,
          column: 5
        }
      },
      "141": {
        start: {
          line: 415,
          column: 40
        },
        end: {
          line: 415,
          column: 48
        }
      },
      "142": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 70
        }
      },
      "143": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 421,
          column: 11
        }
      },
      "144": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 68
        }
      },
      "145": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 428,
          column: 11
        }
      },
      "146": {
        start: {
          line: 434,
          column: 0
        },
        end: {
          line: 449,
          column: 3
        }
      },
      "147": {
        start: {
          line: 435,
          column: 4
        },
        end: {
          line: 448,
          column: 5
        }
      },
      "148": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 59
        }
      },
      "149": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 440,
          column: 11
        }
      },
      "150": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 68
        }
      },
      "151": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 447,
          column: 11
        }
      },
      "152": {
        start: {
          line: 453,
          column: 0
        },
        end: {
          line: 471,
          column: 3
        }
      },
      "153": {
        start: {
          line: 454,
          column: 4
        },
        end: {
          line: 470,
          column: 5
        }
      },
      "154": {
        start: {
          line: 455,
          column: 42
        },
        end: {
          line: 455,
          column: 51
        }
      },
      "155": {
        start: {
          line: 456,
          column: 31
        },
        end: {
          line: 456,
          column: 75
        }
      },
      "156": {
        start: {
          line: 457,
          column: 32
        },
        end: {
          line: 457,
          column: 78
        }
      },
      "157": {
        start: {
          line: 458,
          column: 26
        },
        end: {
          line: 458,
          column: 123
        }
      },
      "158": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 462,
          column: 11
        }
      },
      "159": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 68
        }
      },
      "160": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 469,
          column: 11
        }
      },
      "161": {
        start: {
          line: 475,
          column: 0
        },
        end: {
          line: 490,
          column: 3
        }
      },
      "162": {
        start: {
          line: 476,
          column: 4
        },
        end: {
          line: 489,
          column: 5
        }
      },
      "163": {
        start: {
          line: 477,
          column: 32
        },
        end: {
          line: 477,
          column: 104
        }
      },
      "164": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 481,
          column: 11
        }
      },
      "165": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 74
        }
      },
      "166": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 488,
          column: 11
        }
      },
      "167": {
        start: {
          line: 494,
          column: 0
        },
        end: {
          line: 511,
          column: 3
        }
      },
      "168": {
        start: {
          line: 495,
          column: 4
        },
        end: {
          line: 510,
          column: 5
        }
      },
      "169": {
        start: {
          line: 496,
          column: 29
        },
        end: {
          line: 496,
          column: 39
        }
      },
      "170": {
        start: {
          line: 497,
          column: 40
        },
        end: {
          line: 497,
          column: 49
        }
      },
      "171": {
        start: {
          line: 498,
          column: 28
        },
        end: {
          line: 498,
          column: 131
        }
      },
      "172": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 502,
          column: 11
        }
      },
      "173": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 67
        }
      },
      "174": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 509,
          column: 11
        }
      },
      "175": {
        start: {
          line: 515,
          column: 0
        },
        end: {
          line: 530,
          column: 3
        }
      },
      "176": {
        start: {
          line: 516,
          column: 4
        },
        end: {
          line: 529,
          column: 5
        }
      },
      "177": {
        start: {
          line: 517,
          column: 32
        },
        end: {
          line: 517,
          column: 109
        }
      },
      "178": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 521,
          column: 11
        }
      },
      "179": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 524,
          column: 79
        }
      },
      "180": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 528,
          column: 11
        }
      },
      "181": {
        start: {
          line: 534,
          column: 0
        },
        end: {
          line: 549,
          column: 3
        }
      },
      "182": {
        start: {
          line: 535,
          column: 4
        },
        end: {
          line: 548,
          column: 5
        }
      },
      "183": {
        start: {
          line: 536,
          column: 23
        },
        end: {
          line: 536,
          column: 76
        }
      },
      "184": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 540,
          column: 11
        }
      },
      "185": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 63
        }
      },
      "186": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 547,
          column: 11
        }
      },
      "187": {
        start: {
          line: 553,
          column: 0
        },
        end: {
          line: 568,
          column: 3
        }
      },
      "188": {
        start: {
          line: 554,
          column: 4
        },
        end: {
          line: 567,
          column: 5
        }
      },
      "189": {
        start: {
          line: 555,
          column: 26
        },
        end: {
          line: 555,
          column: 88
        }
      },
      "190": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 559,
          column: 11
        }
      },
      "191": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 562,
          column: 66
        }
      },
      "192": {
        start: {
          line: 563,
          column: 8
        },
        end: {
          line: 566,
          column: 11
        }
      },
      "193": {
        start: {
          line: 570,
          column: 0
        },
        end: {
          line: 598,
          column: 3
        }
      },
      "194": {
        start: {
          line: 571,
          column: 4
        },
        end: {
          line: 597,
          column: 5
        }
      },
      "195": {
        start: {
          line: 572,
          column: 23
        },
        end: {
          line: 585,
          column: 9
        }
      },
      "196": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 589,
          column: 11
        }
      },
      "197": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 592,
          column: 61
        }
      },
      "198": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 596,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 18,
            column: 39
          }
        },
        loc: {
          start: {
            line: 18,
            column: 58
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 49,
            column: 38
          }
        },
        loc: {
          start: {
            line: 49,
            column: 57
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 74,
            column: 36
          },
          end: {
            line: 74,
            column: 37
          }
        },
        loc: {
          start: {
            line: 74,
            column: 56
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 74
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 100,
            column: 32
          },
          end: {
            line: 100,
            column: 33
          }
        },
        loc: {
          start: {
            line: 100,
            column: 52
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 100
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 121,
            column: 25
          }
        },
        loc: {
          start: {
            line: 121,
            column: 44
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 121
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 140,
            column: 34
          },
          end: {
            line: 140,
            column: 35
          }
        },
        loc: {
          start: {
            line: 140,
            column: 54
          },
          end: {
            line: 162,
            column: 1
          }
        },
        line: 140
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 166,
            column: 31
          },
          end: {
            line: 166,
            column: 32
          }
        },
        loc: {
          start: {
            line: 166,
            column: 51
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 166
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 186,
            column: 40
          },
          end: {
            line: 186,
            column: 41
          }
        },
        loc: {
          start: {
            line: 186,
            column: 60
          },
          end: {
            line: 203,
            column: 1
          }
        },
        line: 186
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 40
          }
        },
        loc: {
          start: {
            line: 207,
            column: 59
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 207
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 226,
            column: 40
          },
          end: {
            line: 226,
            column: 41
          }
        },
        loc: {
          start: {
            line: 226,
            column: 60
          },
          end: {
            line: 247,
            column: 1
          }
        },
        line: 226
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 251,
            column: 45
          },
          end: {
            line: 251,
            column: 46
          }
        },
        loc: {
          start: {
            line: 251,
            column: 65
          },
          end: {
            line: 273,
            column: 1
          }
        },
        line: 251
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 277,
            column: 40
          },
          end: {
            line: 277,
            column: 41
          }
        },
        loc: {
          start: {
            line: 277,
            column: 60
          },
          end: {
            line: 292,
            column: 1
          }
        },
        line: 277
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 296,
            column: 62
          },
          end: {
            line: 296,
            column: 63
          }
        },
        loc: {
          start: {
            line: 296,
            column: 82
          },
          end: {
            line: 321,
            column: 1
          }
        },
        line: 296
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 325,
            column: 58
          },
          end: {
            line: 325,
            column: 59
          }
        },
        loc: {
          start: {
            line: 325,
            column: 78
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 325
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 354,
            column: 39
          },
          end: {
            line: 354,
            column: 40
          }
        },
        loc: {
          start: {
            line: 354,
            column: 59
          },
          end: {
            line: 369,
            column: 1
          }
        },
        line: 354
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 373,
            column: 40
          },
          end: {
            line: 373,
            column: 41
          }
        },
        loc: {
          start: {
            line: 373,
            column: 60
          },
          end: {
            line: 389,
            column: 1
          }
        },
        line: 373
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 393,
            column: 40
          },
          end: {
            line: 393,
            column: 41
          }
        },
        loc: {
          start: {
            line: 393,
            column: 60
          },
          end: {
            line: 408,
            column: 1
          }
        },
        line: 393
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 413,
            column: 42
          },
          end: {
            line: 413,
            column: 43
          }
        },
        loc: {
          start: {
            line: 413,
            column: 62
          },
          end: {
            line: 430,
            column: 1
          }
        },
        line: 413
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 434,
            column: 41
          },
          end: {
            line: 434,
            column: 42
          }
        },
        loc: {
          start: {
            line: 434,
            column: 61
          },
          end: {
            line: 449,
            column: 1
          }
        },
        line: 434
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 453,
            column: 33
          },
          end: {
            line: 453,
            column: 34
          }
        },
        loc: {
          start: {
            line: 453,
            column: 53
          },
          end: {
            line: 471,
            column: 1
          }
        },
        line: 453
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 475,
            column: 48
          },
          end: {
            line: 475,
            column: 49
          }
        },
        loc: {
          start: {
            line: 475,
            column: 68
          },
          end: {
            line: 490,
            column: 1
          }
        },
        line: 475
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 494,
            column: 46
          },
          end: {
            line: 494,
            column: 47
          }
        },
        loc: {
          start: {
            line: 494,
            column: 66
          },
          end: {
            line: 511,
            column: 1
          }
        },
        line: 494
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 515,
            column: 53
          },
          end: {
            line: 515,
            column: 54
          }
        },
        loc: {
          start: {
            line: 515,
            column: 73
          },
          end: {
            line: 530,
            column: 1
          }
        },
        line: 515
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 534,
            column: 31
          },
          end: {
            line: 534,
            column: 32
          }
        },
        loc: {
          start: {
            line: 534,
            column: 51
          },
          end: {
            line: 549,
            column: 1
          }
        },
        line: 534
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 553,
            column: 34
          },
          end: {
            line: 553,
            column: 35
          }
        },
        loc: {
          start: {
            line: 553,
            column: 54
          },
          end: {
            line: 568,
            column: 1
          }
        },
        line: 553
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 570,
            column: 22
          },
          end: {
            line: 570,
            column: 23
          }
        },
        loc: {
          start: {
            line: 570,
            column: 42
          },
          end: {
            line: 598,
            column: 1
          }
        },
        line: 570
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 40
          },
          end: {
            line: 20,
            column: 42
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 19
          },
          end: {
            line: 42,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 19
          },
          end: {
            line: 42,
            column: 32
          }
        }, {
          start: {
            line: 42,
            column: 36
          },
          end: {
            line: 42,
            column: 68
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 26
          },
          end: {
            line: 51,
            column: 76
          }
        }],
        line: 51
      },
      "7": {
        loc: {
          start: {
            line: 51,
            column: 78
          },
          end: {
            line: 51,
            column: 96
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 94
          },
          end: {
            line: 51,
            column: 96
          }
        }],
        line: 51
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 67,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 67,
            column: 32
          }
        }, {
          start: {
            line: 67,
            column: 36
          },
          end: {
            line: 67,
            column: 67
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 76,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 76,
            column: 41
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "11": {
        loc: {
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 32
          }
        }, {
          start: {
            line: 93,
            column: 36
          },
          end: {
            line: 93,
            column: 71
          }
        }],
        line: 93
      },
      "12": {
        loc: {
          start: {
            line: 103,
            column: 29
          },
          end: {
            line: 103,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 39
          },
          end: {
            line: 103,
            column: 57
          }
        }, {
          start: {
            line: 103,
            column: 60
          },
          end: {
            line: 103,
            column: 69
          }
        }],
        line: 103
      },
      "13": {
        loc: {
          start: {
            line: 114,
            column: 19
          },
          end: {
            line: 114,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 19
          },
          end: {
            line: 114,
            column: 32
          }
        }, {
          start: {
            line: 114,
            column: 36
          },
          end: {
            line: 114,
            column: 64
          }
        }],
        line: 114
      },
      "14": {
        loc: {
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 133,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 133,
            column: 32
          }
        }, {
          start: {
            line: 133,
            column: 36
          },
          end: {
            line: 133,
            column: 68
          }
        }],
        line: 133
      },
      "15": {
        loc: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 142,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 142,
            column: 41
          },
          end: {
            line: 142,
            column: 43
          }
        }],
        line: 142
      },
      "16": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "17": {
        loc: {
          start: {
            line: 159,
            column: 19
          },
          end: {
            line: 159,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 19
          },
          end: {
            line: 159,
            column: 32
          }
        }, {
          start: {
            line: 159,
            column: 36
          },
          end: {
            line: 159,
            column: 70
          }
        }],
        line: 159
      },
      "18": {
        loc: {
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 32
          }
        }, {
          start: {
            line: 178,
            column: 36
          },
          end: {
            line: 178,
            column: 62
          }
        }],
        line: 178
      },
      "19": {
        loc: {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 188,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 188,
            column: 29
          },
          end: {
            line: 188,
            column: 34
          }
        }],
        line: 188
      },
      "20": {
        loc: {
          start: {
            line: 200,
            column: 19
          },
          end: {
            line: 200,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 19
          },
          end: {
            line: 200,
            column: 32
          }
        }, {
          start: {
            line: 200,
            column: 36
          },
          end: {
            line: 200,
            column: 71
          }
        }],
        line: 200
      },
      "21": {
        loc: {
          start: {
            line: 219,
            column: 19
          },
          end: {
            line: 219,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 19
          },
          end: {
            line: 219,
            column: 32
          }
        }, {
          start: {
            line: 219,
            column: 36
          },
          end: {
            line: 219,
            column: 70
          }
        }],
        line: 219
      },
      "22": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 228,
            column: 26
          },
          end: {
            line: 228,
            column: 76
          }
        }],
        line: 228
      },
      "23": {
        loc: {
          start: {
            line: 228,
            column: 78
          },
          end: {
            line: 228,
            column: 94
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 228,
            column: 93
          },
          end: {
            line: 228,
            column: 94
          }
        }],
        line: 228
      },
      "24": {
        loc: {
          start: {
            line: 244,
            column: 19
          },
          end: {
            line: 244,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 19
          },
          end: {
            line: 244,
            column: 32
          }
        }, {
          start: {
            line: 244,
            column: 36
          },
          end: {
            line: 244,
            column: 77
          }
        }],
        line: 244
      },
      "25": {
        loc: {
          start: {
            line: 253,
            column: 24
          },
          end: {
            line: 253,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 37
          },
          end: {
            line: 253,
            column: 38
          }
        }],
        line: 253
      },
      "26": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "27": {
        loc: {
          start: {
            line: 270,
            column: 19
          },
          end: {
            line: 270,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 19
          },
          end: {
            line: 270,
            column: 32
          }
        }, {
          start: {
            line: 270,
            column: 36
          },
          end: {
            line: 270,
            column: 77
          }
        }],
        line: 270
      },
      "28": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: 307,
            column: 13
          },
          end: {
            line: 312,
            column: 9
          }
        }],
        line: 301
      },
      "29": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: 336,
            column: 13
          },
          end: {
            line: 341,
            column: 9
          }
        }],
        line: 330
      },
      "30": {
        loc: {
          start: {
            line: 415,
            column: 16
          },
          end: {
            line: 415,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 415,
            column: 29
          },
          end: {
            line: 415,
            column: 35
          }
        }],
        line: 415
      },
      "31": {
        loc: {
          start: {
            line: 427,
            column: 19
          },
          end: {
            line: 427,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 19
          },
          end: {
            line: 427,
            column: 32
          }
        }, {
          start: {
            line: 427,
            column: 36
          },
          end: {
            line: 427,
            column: 73
          }
        }],
        line: 427
      },
      "32": {
        loc: {
          start: {
            line: 456,
            column: 31
          },
          end: {
            line: 456,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 456,
            column: 43
          },
          end: {
            line: 456,
            column: 63
          }
        }, {
          start: {
            line: 456,
            column: 66
          },
          end: {
            line: 456,
            column: 75
          }
        }],
        line: 456
      },
      "33": {
        loc: {
          start: {
            line: 457,
            column: 32
          },
          end: {
            line: 457,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 457,
            column: 45
          },
          end: {
            line: 457,
            column: 66
          }
        }, {
          start: {
            line: 457,
            column: 69
          },
          end: {
            line: 457,
            column: 78
          }
        }],
        line: 457
      },
      "34": {
        loc: {
          start: {
            line: 468,
            column: 19
          },
          end: {
            line: 468,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 19
          },
          end: {
            line: 468,
            column: 32
          }
        }, {
          start: {
            line: 468,
            column: 36
          },
          end: {
            line: 468,
            column: 74
          }
        }],
        line: 468
      },
      "35": {
        loc: {
          start: {
            line: 487,
            column: 19
          },
          end: {
            line: 487,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 487,
            column: 19
          },
          end: {
            line: 487,
            column: 32
          }
        }, {
          start: {
            line: 487,
            column: 36
          },
          end: {
            line: 487,
            column: 80
          }
        }],
        line: 487
      },
      "36": {
        loc: {
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 497,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 497,
            column: 33
          },
          end: {
            line: 497,
            column: 35
          }
        }],
        line: 497
      },
      "37": {
        loc: {
          start: {
            line: 508,
            column: 19
          },
          end: {
            line: 508,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 508,
            column: 19
          },
          end: {
            line: 508,
            column: 32
          }
        }, {
          start: {
            line: 508,
            column: 36
          },
          end: {
            line: 508,
            column: 73
          }
        }],
        line: 508
      },
      "38": {
        loc: {
          start: {
            line: 527,
            column: 19
          },
          end: {
            line: 527,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 527,
            column: 19
          },
          end: {
            line: 527,
            column: 32
          }
        }, {
          start: {
            line: 527,
            column: 36
          },
          end: {
            line: 527,
            column: 85
          }
        }],
        line: 527
      },
      "39": {
        loc: {
          start: {
            line: 565,
            column: 19
          },
          end: {
            line: 565,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 565,
            column: 19
          },
          end: {
            line: 565,
            column: 32
          }
        }, {
          start: {
            line: 565,
            column: 36
          },
          end: {
            line: 565,
            column: 70
          }
        }],
        line: 565
      },
      "40": {
        loc: {
          start: {
            line: 576,
            column: 27
          },
          end: {
            line: 576,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 576,
            column: 27
          },
          end: {
            line: 576,
            column: 73
          }
        }, {
          start: {
            line: 576,
            column: 77
          },
          end: {
            line: 576,
            column: 82
          }
        }],
        line: 576
      },
      "41": {
        loc: {
          start: {
            line: 577,
            column: 24
          },
          end: {
            line: 577,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 577,
            column: 24
          },
          end: {
            line: 577,
            column: 73
          }
        }, {
          start: {
            line: 577,
            column: 77
          },
          end: {
            line: 577,
            column: 78
          }
        }],
        line: 577
      },
      "42": {
        loc: {
          start: {
            line: 581,
            column: 30
          },
          end: {
            line: 581,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 581,
            column: 30
          },
          end: {
            line: 581,
            column: 79
          }
        }, {
          start: {
            line: 581,
            column: 83
          },
          end: {
            line: 581,
            column: 88
          }
        }],
        line: 581
      },
      "43": {
        loc: {
          start: {
            line: 582,
            column: 24
          },
          end: {
            line: 582,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 582,
            column: 24
          },
          end: {
            line: 582,
            column: 81
          }
        }, {
          start: {
            line: 582,
            column: 85
          },
          end: {
            line: 582,
            column: 86
          }
        }],
        line: 582
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/predictive-analytics.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/predictive-analytics.ts"],
      sourcesContent: ["import express from 'express';\nimport { PredictiveAnalytics } from '../services/analytics/PredictiveAnalytics';\nimport { AnomalyDetector, anomalyDetector } from '../services/analytics/AnomalyDetector';\nimport { CapacityPlanner, capacityPlanner } from '../services/analytics/CapacityPlanner';\n\nconst router = express.Router();\nconst predictiveAnalytics = new PredictiveAnalytics();\n\n// Predictive Analytics Routes\n\n/**\n * Train capacity prediction model\n */\nrouter.post('/models/capacity/train', async (req, res) => {\n  try {\n    const { metric, timeframeDays = 30 } = req.body;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const model = await predictiveAnalytics.trainCapacityModel(metric, timeframeDays);\n    \n    res.json({\n      success: true,\n      data: {\n        modelId: model.id,\n        accuracy: model.metadata.accuracy,\n        features: model.metadata.features,\n        trainedAt: model.metadata.trainedAt\n      }\n    });\n  } catch (error) {\n    console.error('Error training capacity model:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to train capacity model'\n    });\n  }\n});\n\n/**\n * Train anomaly detection model\n */\nrouter.post('/models/anomaly/train', async (req, res) => {\n  try {\n    const { metrics = ['cpu_usage', 'memory_usage', 'app_response_time'], timeframeDays = 30 } = req.body;\n    \n    const model = await predictiveAnalytics.trainAnomalyModel(metrics, timeframeDays);\n    \n    res.json({\n      success: true,\n      data: {\n        modelId: model.id,\n        accuracy: model.metadata.accuracy,\n        features: model.metadata.features,\n        trainedAt: model.metadata.trainedAt\n      }\n    });\n  } catch (error) {\n    console.error('Error training anomaly model:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to train anomaly model'\n    });\n  }\n});\n\n/**\n * Get capacity predictions\n */\nrouter.get('/predictions/capacity', async (req, res) => {\n  try {\n    const { metric, timeframe = '24h' } = req.query;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const prediction = await predictiveAnalytics.predictCapacity(\n      metric as string,\n      timeframe as any\n    );\n    \n    res.json({\n      success: true,\n      data: prediction\n    });\n  } catch (error) {\n    console.error('Error getting capacity prediction:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get capacity prediction'\n    });\n  }\n});\n\n/**\n * Detect anomalies\n */\nrouter.get('/anomalies/detect', async (req, res) => {\n  try {\n    const { metrics } = req.query;\n    const metricsArray = metrics ? (metrics as string).split(',') : undefined;\n    \n    const anomalies = await predictiveAnalytics.detectAnomalies(metricsArray);\n    \n    res.json({\n      success: true,\n      data: anomalies\n    });\n  } catch (error) {\n    console.error('Error detecting anomalies:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to detect anomalies'\n    });\n  }\n});\n\n/**\n * Get ML insights\n */\nrouter.get('/insights', async (req, res) => {\n  try {\n    const insights = await predictiveAnalytics.generateMLInsights();\n    \n    res.json({\n      success: true,\n      data: insights\n    });\n  } catch (error) {\n    console.error('Error generating ML insights:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate ML insights'\n    });\n  }\n});\n\n/**\n * Get growth projections\n */\nrouter.get('/projections/growth', async (req, res) => {\n  try {\n    const { metric, projectionDays = 30 } = req.query;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const projections = await predictiveAnalytics.getGrowthProjections(\n      metric as string,\n      parseInt(projectionDays as string, 10)\n    );\n    \n    res.json({\n      success: true,\n      data: projections\n    });\n  } catch (error) {\n    console.error('Error getting growth projections:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get growth projections'\n    });\n  }\n});\n\n/**\n * Auto-retrain models\n */\nrouter.post('/models/retrain', async (req, res) => {\n  try {\n    await predictiveAnalytics.autoRetrainModels();\n    \n    res.json({\n      success: true,\n      message: 'Models retrained successfully'\n    });\n  } catch (error) {\n    console.error('Error retraining models:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to retrain models'\n    });\n  }\n});\n\n// Anomaly Detection Routes\n\n/**\n * Start anomaly detection\n */\nrouter.post('/anomaly-detection/start', async (req, res) => {\n  try {\n    const { intervalMs = 30000 } = req.body;\n    \n    anomalyDetector.startDetection(intervalMs);\n    \n    res.json({\n      success: true,\n      message: 'Anomaly detection started',\n      interval: intervalMs\n    });\n  } catch (error) {\n    console.error('Error starting anomaly detection:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to start anomaly detection'\n    });\n  }\n});\n\n/**\n * Stop anomaly detection\n */\nrouter.post('/anomaly-detection/stop', async (req, res) => {\n  try {\n    anomalyDetector.stopDetection();\n    \n    res.json({\n      success: true,\n      message: 'Anomaly detection stopped'\n    });\n  } catch (error) {\n    console.error('Error stopping anomaly detection:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to stop anomaly detection'\n    });\n  }\n});\n\n/**\n * Train autoencoder model for anomaly detection\n */\nrouter.post('/anomaly-detection/train', async (req, res) => {\n  try {\n    const { metrics = ['cpu_usage', 'memory_usage', 'app_response_time'], trainingDays = 7 } = req.body;\n    \n    const model = await anomalyDetector.trainAutoencoderModel(metrics, trainingDays);\n    \n    res.json({\n      success: true,\n      data: {\n        modelId: model.id,\n        algorithm: model.algorithm,\n        accuracy: model.accuracy,\n        features: model.features\n      }\n    });\n  } catch (error) {\n    console.error('Error training anomaly detection model:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to train anomaly detection model'\n    });\n  }\n});\n\n/**\n * Update statistical thresholds\n */\nrouter.post('/anomaly-detection/thresholds', async (req, res) => {\n  try {\n    const { metric, windowDays = 7 } = req.body;\n    \n    if (!metric) {\n      return res.status(400).json({\n        success: false,\n        error: 'Metric parameter is required'\n      });\n    }\n\n    const thresholds = await anomalyDetector.updateStatisticalThresholds(metric, windowDays);\n    \n    res.json({\n      success: true,\n      data: thresholds\n    });\n  } catch (error) {\n    console.error('Error updating statistical thresholds:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to update statistical thresholds'\n    });\n  }\n});\n\n/**\n * Get active alerts\n */\nrouter.get('/anomaly-detection/alerts', async (req, res) => {\n  try {\n    const alerts = anomalyDetector.getActiveAlerts();\n    \n    res.json({\n      success: true,\n      data: alerts\n    });\n  } catch (error) {\n    console.error('Error getting active alerts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get active alerts'\n    });\n  }\n});\n\n/**\n * Acknowledge alert\n */\nrouter.post('/anomaly-detection/alerts/:alertId/acknowledge', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { userId } = req.body;\n    \n    const acknowledged = anomalyDetector.acknowledgeAlert(alertId, userId);\n    \n    if (acknowledged) {\n      res.json({\n        success: true,\n        message: 'Alert acknowledged'\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        error: 'Alert not found'\n      });\n    }\n  } catch (error) {\n    console.error('Error acknowledging alert:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to acknowledge alert'\n    });\n  }\n});\n\n/**\n * Resolve alert\n */\nrouter.post('/anomaly-detection/alerts/:alertId/resolve', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const { userId } = req.body;\n    \n    const resolved = anomalyDetector.resolveAlert(alertId, userId);\n    \n    if (resolved) {\n      res.json({\n        success: true,\n        message: 'Alert resolved'\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        error: 'Alert not found'\n      });\n    }\n  } catch (error) {\n    console.error('Error resolving alert:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to resolve alert'\n    });\n  }\n});\n\n/**\n * Get detection statistics\n */\nrouter.get('/anomaly-detection/stats', async (req, res) => {\n  try {\n    const stats = anomalyDetector.getDetectionStats();\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error getting detection stats:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get detection stats'\n    });\n  }\n});\n\n/**\n * Update detection configuration\n */\nrouter.put('/anomaly-detection/config', async (req, res) => {\n  try {\n    const config = req.body;\n    \n    anomalyDetector.updateConfig(config);\n    \n    res.json({\n      success: true,\n      message: 'Detection configuration updated'\n    });\n  } catch (error) {\n    console.error('Error updating detection config:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update detection configuration'\n    });\n  }\n});\n\n/**\n * Export detection data\n */\nrouter.get('/anomaly-detection/export', async (req, res) => {\n  try {\n    const data = anomalyDetector.exportData();\n    \n    res.json({\n      success: true,\n      data\n    });\n  } catch (error) {\n    console.error('Error exporting detection data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to export detection data'\n    });\n  }\n});\n\n// Capacity Planning Routes\n\n/**\n * Start capacity monitoring\n */\nrouter.post('/capacity/monitoring/start', async (req, res) => {\n  try {\n    const { intervalMs = 300000 } = req.body; // 5 minutes default\n    \n    capacityPlanner.startMonitoring(intervalMs);\n    \n    res.json({\n      success: true,\n      message: 'Capacity monitoring started',\n      interval: intervalMs\n    });\n  } catch (error) {\n    console.error('Error starting capacity monitoring:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to start capacity monitoring'\n    });\n  }\n});\n\n/**\n * Stop capacity monitoring\n */\nrouter.post('/capacity/monitoring/stop', async (req, res) => {\n  try {\n    capacityPlanner.stopMonitoring();\n    \n    res.json({\n      success: true,\n      message: 'Capacity monitoring stopped'\n    });\n  } catch (error) {\n    console.error('Error stopping capacity monitoring:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to stop capacity monitoring'\n    });\n  }\n});\n\n/**\n * Generate capacity forecast\n */\nrouter.get('/capacity/forecast', async (req, res) => {\n  try {\n    const { resources, timeframes } = req.query;\n    \n    const resourcesArray = resources ? (resources as string).split(',') : undefined;\n    const timeframesArray = timeframes ? (timeframes as string).split(',') : undefined;\n    \n    const forecasts = await capacityPlanner.generateCapacityForecast(\n      resourcesArray,\n      timeframesArray\n    );\n    \n    res.json({\n      success: true,\n      data: Object.fromEntries(forecasts)\n    });\n  } catch (error) {\n    console.error('Error generating capacity forecast:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate capacity forecast'\n    });\n  }\n});\n\n/**\n * Generate scaling recommendations\n */\nrouter.get('/capacity/recommendations/scaling', async (req, res) => {\n  try {\n    const recommendations = await capacityPlanner.generateScalingRecommendations();\n    \n    res.json({\n      success: true,\n      data: recommendations\n    });\n  } catch (error) {\n    console.error('Error generating scaling recommendations:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate scaling recommendations'\n    });\n  }\n});\n\n/**\n * Create growth projections\n */\nrouter.get('/capacity/projections/:resource', async (req, res) => {\n  try {\n    const { resource } = req.params;\n    const { projectionDays = 30 } = req.query;\n    \n    const projections = await capacityPlanner.createGrowthProjections(\n      resource,\n      parseInt(projectionDays as string, 10)\n    );\n    \n    res.json({\n      success: true,\n      data: projections\n    });\n  } catch (error) {\n    console.error('Error creating growth projections:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to create growth projections'\n    });\n  }\n});\n\n/**\n * Generate optimization recommendations\n */\nrouter.get('/capacity/recommendations/optimization', async (req, res) => {\n  try {\n    const recommendations = await capacityPlanner.generateOptimizationRecommendations();\n    \n    res.json({\n      success: true,\n      data: recommendations\n    });\n  } catch (error) {\n    console.error('Error generating optimization recommendations:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to generate optimization recommendations'\n    });\n  }\n});\n\n/**\n * Get capacity alerts\n */\nrouter.get('/capacity/alerts', async (req, res) => {\n  try {\n    const alerts = capacityPlanner.getCapacityAlerts();\n    \n    res.json({\n      success: true,\n      data: alerts\n    });\n  } catch (error) {\n    console.error('Error getting capacity alerts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get capacity alerts'\n    });\n  }\n});\n\n/**\n * Get capacity dashboard\n */\nrouter.get('/capacity/dashboard', async (req, res) => {\n  try {\n    const dashboard = await capacityPlanner.getCapacityDashboard();\n    \n    res.json({\n      success: true,\n      data: dashboard\n    });\n  } catch (error) {\n    console.error('Error getting capacity dashboard:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get capacity dashboard'\n    });\n  }\n});\n\n// Health check for predictive analytics services\nrouter.get('/health', async (req, res) => {\n  try {\n    const health = {\n      predictiveAnalytics: 'healthy',\n      anomalyDetection: {\n        status: 'healthy',\n        isRunning: anomalyDetector['isRunning'] || false,\n        models: anomalyDetector['models']?.size || 0\n      },\n      capacityPlanning: {\n        status: 'healthy',\n        isMonitoring: capacityPlanner['isMonitoring'] || false,\n        models: capacityPlanner['capacityModels']?.size || 0\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    res.json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    console.error('Error getting health status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get health status'\n    });\n  }\n});\n\nexport { router as predictiveAnalyticsRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "667f8ca0443a49c2db18c0fd4b1bb4559fc00fb3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28uht60ksz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28uht60ksz();
var __importDefault =
/* istanbul ignore next */
(cov_28uht60ksz().s[0]++,
/* istanbul ignore next */
(cov_28uht60ksz().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_28uht60ksz().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_28uht60ksz().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_28uht60ksz().f[0]++;
  cov_28uht60ksz().s[1]++;
  return /* istanbul ignore next */(cov_28uht60ksz().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_28uht60ksz().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_28uht60ksz().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_28uht60ksz().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_28uht60ksz().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28uht60ksz().s[3]++;
exports.predictiveAnalyticsRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_28uht60ksz().s[4]++, __importDefault(require("express")));
const PredictiveAnalytics_1 =
/* istanbul ignore next */
(cov_28uht60ksz().s[5]++, require("../services/analytics/PredictiveAnalytics"));
const AnomalyDetector_1 =
/* istanbul ignore next */
(cov_28uht60ksz().s[6]++, require("../services/analytics/AnomalyDetector"));
const CapacityPlanner_1 =
/* istanbul ignore next */
(cov_28uht60ksz().s[7]++, require("../services/analytics/CapacityPlanner"));
const router =
/* istanbul ignore next */
(cov_28uht60ksz().s[8]++, express_1.default.Router());
/* istanbul ignore next */
cov_28uht60ksz().s[9]++;
exports.predictiveAnalyticsRoutes = router;
const predictiveAnalytics =
/* istanbul ignore next */
(cov_28uht60ksz().s[10]++, new PredictiveAnalytics_1.PredictiveAnalytics());
// Predictive Analytics Routes
/**
 * Train capacity prediction model
 */
/* istanbul ignore next */
cov_28uht60ksz().s[11]++;
router.post('/models/capacity/train', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[1]++;
  cov_28uht60ksz().s[12]++;
  try {
    const {
      metric,
      timeframeDays =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[3][0]++, 30)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[13]++, req.body);
    /* istanbul ignore next */
    cov_28uht60ksz().s[14]++;
    if (!metric) {
      /* istanbul ignore next */
      cov_28uht60ksz().b[4][0]++;
      cov_28uht60ksz().s[15]++;
      return res.status(400).json({
        success: false,
        error: 'Metric parameter is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_28uht60ksz().b[4][1]++;
    }
    const model =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[16]++, await predictiveAnalytics.trainCapacityModel(metric, timeframeDays));
    /* istanbul ignore next */
    cov_28uht60ksz().s[17]++;
    res.json({
      success: true,
      data: {
        modelId: model.id,
        accuracy: model.metadata.accuracy,
        features: model.metadata.features,
        trainedAt: model.metadata.trainedAt
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[18]++;
    console.error('Error training capacity model:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[19]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[5][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[5][1]++, 'Failed to train capacity model')
    });
  }
});
/**
 * Train anomaly detection model
 */
/* istanbul ignore next */
cov_28uht60ksz().s[20]++;
router.post('/models/anomaly/train', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[2]++;
  cov_28uht60ksz().s[21]++;
  try {
    const {
      metrics =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[6][0]++, ['cpu_usage', 'memory_usage', 'app_response_time']),
      timeframeDays =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[7][0]++, 30)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[22]++, req.body);
    const model =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[23]++, await predictiveAnalytics.trainAnomalyModel(metrics, timeframeDays));
    /* istanbul ignore next */
    cov_28uht60ksz().s[24]++;
    res.json({
      success: true,
      data: {
        modelId: model.id,
        accuracy: model.metadata.accuracy,
        features: model.metadata.features,
        trainedAt: model.metadata.trainedAt
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[25]++;
    console.error('Error training anomaly model:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[26]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[8][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[8][1]++, 'Failed to train anomaly model')
    });
  }
});
/**
 * Get capacity predictions
 */
/* istanbul ignore next */
cov_28uht60ksz().s[27]++;
router.get('/predictions/capacity', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[3]++;
  cov_28uht60ksz().s[28]++;
  try {
    const {
      metric,
      timeframe =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[9][0]++, '24h')
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[29]++, req.query);
    /* istanbul ignore next */
    cov_28uht60ksz().s[30]++;
    if (!metric) {
      /* istanbul ignore next */
      cov_28uht60ksz().b[10][0]++;
      cov_28uht60ksz().s[31]++;
      return res.status(400).json({
        success: false,
        error: 'Metric parameter is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_28uht60ksz().b[10][1]++;
    }
    const prediction =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[32]++, await predictiveAnalytics.predictCapacity(metric, timeframe));
    /* istanbul ignore next */
    cov_28uht60ksz().s[33]++;
    res.json({
      success: true,
      data: prediction
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[34]++;
    console.error('Error getting capacity prediction:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[35]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[11][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[11][1]++, 'Failed to get capacity prediction')
    });
  }
});
/**
 * Detect anomalies
 */
/* istanbul ignore next */
cov_28uht60ksz().s[36]++;
router.get('/anomalies/detect', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[4]++;
  cov_28uht60ksz().s[37]++;
  try {
    const {
      metrics
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[38]++, req.query);
    const metricsArray =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[39]++, metrics ?
    /* istanbul ignore next */
    (cov_28uht60ksz().b[12][0]++, metrics.split(',')) :
    /* istanbul ignore next */
    (cov_28uht60ksz().b[12][1]++, undefined));
    const anomalies =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[40]++, await predictiveAnalytics.detectAnomalies(metricsArray));
    /* istanbul ignore next */
    cov_28uht60ksz().s[41]++;
    res.json({
      success: true,
      data: anomalies
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[42]++;
    console.error('Error detecting anomalies:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[43]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[13][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[13][1]++, 'Failed to detect anomalies')
    });
  }
});
/**
 * Get ML insights
 */
/* istanbul ignore next */
cov_28uht60ksz().s[44]++;
router.get('/insights', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[5]++;
  cov_28uht60ksz().s[45]++;
  try {
    const insights =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[46]++, await predictiveAnalytics.generateMLInsights());
    /* istanbul ignore next */
    cov_28uht60ksz().s[47]++;
    res.json({
      success: true,
      data: insights
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[48]++;
    console.error('Error generating ML insights:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[49]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[14][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[14][1]++, 'Failed to generate ML insights')
    });
  }
});
/**
 * Get growth projections
 */
/* istanbul ignore next */
cov_28uht60ksz().s[50]++;
router.get('/projections/growth', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[6]++;
  cov_28uht60ksz().s[51]++;
  try {
    const {
      metric,
      projectionDays =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[15][0]++, 30)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[52]++, req.query);
    /* istanbul ignore next */
    cov_28uht60ksz().s[53]++;
    if (!metric) {
      /* istanbul ignore next */
      cov_28uht60ksz().b[16][0]++;
      cov_28uht60ksz().s[54]++;
      return res.status(400).json({
        success: false,
        error: 'Metric parameter is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_28uht60ksz().b[16][1]++;
    }
    const projections =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[55]++, await predictiveAnalytics.getGrowthProjections(metric, parseInt(projectionDays, 10)));
    /* istanbul ignore next */
    cov_28uht60ksz().s[56]++;
    res.json({
      success: true,
      data: projections
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[57]++;
    console.error('Error getting growth projections:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[58]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[17][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[17][1]++, 'Failed to get growth projections')
    });
  }
});
/**
 * Auto-retrain models
 */
/* istanbul ignore next */
cov_28uht60ksz().s[59]++;
router.post('/models/retrain', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[7]++;
  cov_28uht60ksz().s[60]++;
  try {
    /* istanbul ignore next */
    cov_28uht60ksz().s[61]++;
    await predictiveAnalytics.autoRetrainModels();
    /* istanbul ignore next */
    cov_28uht60ksz().s[62]++;
    res.json({
      success: true,
      message: 'Models retrained successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[63]++;
    console.error('Error retraining models:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[64]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[18][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[18][1]++, 'Failed to retrain models')
    });
  }
});
// Anomaly Detection Routes
/**
 * Start anomaly detection
 */
/* istanbul ignore next */
cov_28uht60ksz().s[65]++;
router.post('/anomaly-detection/start', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[8]++;
  cov_28uht60ksz().s[66]++;
  try {
    const {
      intervalMs =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[19][0]++, 30000)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[67]++, req.body);
    /* istanbul ignore next */
    cov_28uht60ksz().s[68]++;
    AnomalyDetector_1.anomalyDetector.startDetection(intervalMs);
    /* istanbul ignore next */
    cov_28uht60ksz().s[69]++;
    res.json({
      success: true,
      message: 'Anomaly detection started',
      interval: intervalMs
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[70]++;
    console.error('Error starting anomaly detection:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[71]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[20][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[20][1]++, 'Failed to start anomaly detection')
    });
  }
});
/**
 * Stop anomaly detection
 */
/* istanbul ignore next */
cov_28uht60ksz().s[72]++;
router.post('/anomaly-detection/stop', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[9]++;
  cov_28uht60ksz().s[73]++;
  try {
    /* istanbul ignore next */
    cov_28uht60ksz().s[74]++;
    AnomalyDetector_1.anomalyDetector.stopDetection();
    /* istanbul ignore next */
    cov_28uht60ksz().s[75]++;
    res.json({
      success: true,
      message: 'Anomaly detection stopped'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[76]++;
    console.error('Error stopping anomaly detection:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[77]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[21][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[21][1]++, 'Failed to stop anomaly detection')
    });
  }
});
/**
 * Train autoencoder model for anomaly detection
 */
/* istanbul ignore next */
cov_28uht60ksz().s[78]++;
router.post('/anomaly-detection/train', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[10]++;
  cov_28uht60ksz().s[79]++;
  try {
    const {
      metrics =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[22][0]++, ['cpu_usage', 'memory_usage', 'app_response_time']),
      trainingDays =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[23][0]++, 7)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[80]++, req.body);
    const model =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[81]++, await AnomalyDetector_1.anomalyDetector.trainAutoencoderModel(metrics, trainingDays));
    /* istanbul ignore next */
    cov_28uht60ksz().s[82]++;
    res.json({
      success: true,
      data: {
        modelId: model.id,
        algorithm: model.algorithm,
        accuracy: model.accuracy,
        features: model.features
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[83]++;
    console.error('Error training anomaly detection model:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[84]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[24][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[24][1]++, 'Failed to train anomaly detection model')
    });
  }
});
/**
 * Update statistical thresholds
 */
/* istanbul ignore next */
cov_28uht60ksz().s[85]++;
router.post('/anomaly-detection/thresholds', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[11]++;
  cov_28uht60ksz().s[86]++;
  try {
    const {
      metric,
      windowDays =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[25][0]++, 7)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[87]++, req.body);
    /* istanbul ignore next */
    cov_28uht60ksz().s[88]++;
    if (!metric) {
      /* istanbul ignore next */
      cov_28uht60ksz().b[26][0]++;
      cov_28uht60ksz().s[89]++;
      return res.status(400).json({
        success: false,
        error: 'Metric parameter is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_28uht60ksz().b[26][1]++;
    }
    const thresholds =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[90]++, await AnomalyDetector_1.anomalyDetector.updateStatisticalThresholds(metric, windowDays));
    /* istanbul ignore next */
    cov_28uht60ksz().s[91]++;
    res.json({
      success: true,
      data: thresholds
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[92]++;
    console.error('Error updating statistical thresholds:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[93]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[27][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[27][1]++, 'Failed to update statistical thresholds')
    });
  }
});
/**
 * Get active alerts
 */
/* istanbul ignore next */
cov_28uht60ksz().s[94]++;
router.get('/anomaly-detection/alerts', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[12]++;
  cov_28uht60ksz().s[95]++;
  try {
    const alerts =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[96]++, AnomalyDetector_1.anomalyDetector.getActiveAlerts());
    /* istanbul ignore next */
    cov_28uht60ksz().s[97]++;
    res.json({
      success: true,
      data: alerts
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[98]++;
    console.error('Error getting active alerts:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[99]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get active alerts'
    });
  }
});
/**
 * Acknowledge alert
 */
/* istanbul ignore next */
cov_28uht60ksz().s[100]++;
router.post('/anomaly-detection/alerts/:alertId/acknowledge', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[13]++;
  cov_28uht60ksz().s[101]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[102]++, req.params);
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[103]++, req.body);
    const acknowledged =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[104]++, AnomalyDetector_1.anomalyDetector.acknowledgeAlert(alertId, userId));
    /* istanbul ignore next */
    cov_28uht60ksz().s[105]++;
    if (acknowledged) {
      /* istanbul ignore next */
      cov_28uht60ksz().b[28][0]++;
      cov_28uht60ksz().s[106]++;
      res.json({
        success: true,
        message: 'Alert acknowledged'
      });
    } else {
      /* istanbul ignore next */
      cov_28uht60ksz().b[28][1]++;
      cov_28uht60ksz().s[107]++;
      res.status(404).json({
        success: false,
        error: 'Alert not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[108]++;
    console.error('Error acknowledging alert:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[109]++;
    res.status(500).json({
      success: false,
      error: 'Failed to acknowledge alert'
    });
  }
});
/**
 * Resolve alert
 */
/* istanbul ignore next */
cov_28uht60ksz().s[110]++;
router.post('/anomaly-detection/alerts/:alertId/resolve', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[14]++;
  cov_28uht60ksz().s[111]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[112]++, req.params);
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[113]++, req.body);
    const resolved =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[114]++, AnomalyDetector_1.anomalyDetector.resolveAlert(alertId, userId));
    /* istanbul ignore next */
    cov_28uht60ksz().s[115]++;
    if (resolved) {
      /* istanbul ignore next */
      cov_28uht60ksz().b[29][0]++;
      cov_28uht60ksz().s[116]++;
      res.json({
        success: true,
        message: 'Alert resolved'
      });
    } else {
      /* istanbul ignore next */
      cov_28uht60ksz().b[29][1]++;
      cov_28uht60ksz().s[117]++;
      res.status(404).json({
        success: false,
        error: 'Alert not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[118]++;
    console.error('Error resolving alert:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[119]++;
    res.status(500).json({
      success: false,
      error: 'Failed to resolve alert'
    });
  }
});
/**
 * Get detection statistics
 */
/* istanbul ignore next */
cov_28uht60ksz().s[120]++;
router.get('/anomaly-detection/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[15]++;
  cov_28uht60ksz().s[121]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[122]++, AnomalyDetector_1.anomalyDetector.getDetectionStats());
    /* istanbul ignore next */
    cov_28uht60ksz().s[123]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[124]++;
    console.error('Error getting detection stats:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[125]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get detection stats'
    });
  }
});
/**
 * Update detection configuration
 */
/* istanbul ignore next */
cov_28uht60ksz().s[126]++;
router.put('/anomaly-detection/config', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[16]++;
  cov_28uht60ksz().s[127]++;
  try {
    const config =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[128]++, req.body);
    /* istanbul ignore next */
    cov_28uht60ksz().s[129]++;
    AnomalyDetector_1.anomalyDetector.updateConfig(config);
    /* istanbul ignore next */
    cov_28uht60ksz().s[130]++;
    res.json({
      success: true,
      message: 'Detection configuration updated'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[131]++;
    console.error('Error updating detection config:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[132]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update detection configuration'
    });
  }
});
/**
 * Export detection data
 */
/* istanbul ignore next */
cov_28uht60ksz().s[133]++;
router.get('/anomaly-detection/export', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[17]++;
  cov_28uht60ksz().s[134]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[135]++, AnomalyDetector_1.anomalyDetector.exportData());
    /* istanbul ignore next */
    cov_28uht60ksz().s[136]++;
    res.json({
      success: true,
      data
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[137]++;
    console.error('Error exporting detection data:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[138]++;
    res.status(500).json({
      success: false,
      error: 'Failed to export detection data'
    });
  }
});
// Capacity Planning Routes
/**
 * Start capacity monitoring
 */
/* istanbul ignore next */
cov_28uht60ksz().s[139]++;
router.post('/capacity/monitoring/start', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[18]++;
  cov_28uht60ksz().s[140]++;
  try {
    const {
      intervalMs =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[30][0]++, 300000)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[141]++, req.body); // 5 minutes default
    /* istanbul ignore next */
    cov_28uht60ksz().s[142]++;
    CapacityPlanner_1.capacityPlanner.startMonitoring(intervalMs);
    /* istanbul ignore next */
    cov_28uht60ksz().s[143]++;
    res.json({
      success: true,
      message: 'Capacity monitoring started',
      interval: intervalMs
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[144]++;
    console.error('Error starting capacity monitoring:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[145]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[31][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[31][1]++, 'Failed to start capacity monitoring')
    });
  }
});
/**
 * Stop capacity monitoring
 */
/* istanbul ignore next */
cov_28uht60ksz().s[146]++;
router.post('/capacity/monitoring/stop', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[19]++;
  cov_28uht60ksz().s[147]++;
  try {
    /* istanbul ignore next */
    cov_28uht60ksz().s[148]++;
    CapacityPlanner_1.capacityPlanner.stopMonitoring();
    /* istanbul ignore next */
    cov_28uht60ksz().s[149]++;
    res.json({
      success: true,
      message: 'Capacity monitoring stopped'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[150]++;
    console.error('Error stopping capacity monitoring:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[151]++;
    res.status(500).json({
      success: false,
      error: 'Failed to stop capacity monitoring'
    });
  }
});
/**
 * Generate capacity forecast
 */
/* istanbul ignore next */
cov_28uht60ksz().s[152]++;
router.get('/capacity/forecast', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[20]++;
  cov_28uht60ksz().s[153]++;
  try {
    const {
      resources,
      timeframes
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[154]++, req.query);
    const resourcesArray =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[155]++, resources ?
    /* istanbul ignore next */
    (cov_28uht60ksz().b[32][0]++, resources.split(',')) :
    /* istanbul ignore next */
    (cov_28uht60ksz().b[32][1]++, undefined));
    const timeframesArray =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[156]++, timeframes ?
    /* istanbul ignore next */
    (cov_28uht60ksz().b[33][0]++, timeframes.split(',')) :
    /* istanbul ignore next */
    (cov_28uht60ksz().b[33][1]++, undefined));
    const forecasts =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[157]++, await CapacityPlanner_1.capacityPlanner.generateCapacityForecast(resourcesArray, timeframesArray));
    /* istanbul ignore next */
    cov_28uht60ksz().s[158]++;
    res.json({
      success: true,
      data: Object.fromEntries(forecasts)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[159]++;
    console.error('Error generating capacity forecast:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[160]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[34][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[34][1]++, 'Failed to generate capacity forecast')
    });
  }
});
/**
 * Generate scaling recommendations
 */
/* istanbul ignore next */
cov_28uht60ksz().s[161]++;
router.get('/capacity/recommendations/scaling', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[21]++;
  cov_28uht60ksz().s[162]++;
  try {
    const recommendations =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[163]++, await CapacityPlanner_1.capacityPlanner.generateScalingRecommendations());
    /* istanbul ignore next */
    cov_28uht60ksz().s[164]++;
    res.json({
      success: true,
      data: recommendations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[165]++;
    console.error('Error generating scaling recommendations:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[166]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[35][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[35][1]++, 'Failed to generate scaling recommendations')
    });
  }
});
/**
 * Create growth projections
 */
/* istanbul ignore next */
cov_28uht60ksz().s[167]++;
router.get('/capacity/projections/:resource', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[22]++;
  cov_28uht60ksz().s[168]++;
  try {
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[169]++, req.params);
    const {
      projectionDays =
      /* istanbul ignore next */
      (cov_28uht60ksz().b[36][0]++, 30)
    } =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[170]++, req.query);
    const projections =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[171]++, await CapacityPlanner_1.capacityPlanner.createGrowthProjections(resource, parseInt(projectionDays, 10)));
    /* istanbul ignore next */
    cov_28uht60ksz().s[172]++;
    res.json({
      success: true,
      data: projections
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[173]++;
    console.error('Error creating growth projections:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[174]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[37][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[37][1]++, 'Failed to create growth projections')
    });
  }
});
/**
 * Generate optimization recommendations
 */
/* istanbul ignore next */
cov_28uht60ksz().s[175]++;
router.get('/capacity/recommendations/optimization', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[23]++;
  cov_28uht60ksz().s[176]++;
  try {
    const recommendations =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[177]++, await CapacityPlanner_1.capacityPlanner.generateOptimizationRecommendations());
    /* istanbul ignore next */
    cov_28uht60ksz().s[178]++;
    res.json({
      success: true,
      data: recommendations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[179]++;
    console.error('Error generating optimization recommendations:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[180]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[38][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[38][1]++, 'Failed to generate optimization recommendations')
    });
  }
});
/**
 * Get capacity alerts
 */
/* istanbul ignore next */
cov_28uht60ksz().s[181]++;
router.get('/capacity/alerts', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[24]++;
  cov_28uht60ksz().s[182]++;
  try {
    const alerts =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[183]++, CapacityPlanner_1.capacityPlanner.getCapacityAlerts());
    /* istanbul ignore next */
    cov_28uht60ksz().s[184]++;
    res.json({
      success: true,
      data: alerts
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[185]++;
    console.error('Error getting capacity alerts:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[186]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get capacity alerts'
    });
  }
});
/**
 * Get capacity dashboard
 */
/* istanbul ignore next */
cov_28uht60ksz().s[187]++;
router.get('/capacity/dashboard', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[25]++;
  cov_28uht60ksz().s[188]++;
  try {
    const dashboard =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[189]++, await CapacityPlanner_1.capacityPlanner.getCapacityDashboard());
    /* istanbul ignore next */
    cov_28uht60ksz().s[190]++;
    res.json({
      success: true,
      data: dashboard
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[191]++;
    console.error('Error getting capacity dashboard:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[192]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_28uht60ksz().b[39][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28uht60ksz().b[39][1]++, 'Failed to get capacity dashboard')
    });
  }
});
// Health check for predictive analytics services
/* istanbul ignore next */
cov_28uht60ksz().s[193]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_28uht60ksz().f[26]++;
  cov_28uht60ksz().s[194]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_28uht60ksz().s[195]++, {
      predictiveAnalytics: 'healthy',
      anomalyDetection: {
        status: 'healthy',
        isRunning:
        /* istanbul ignore next */
        (cov_28uht60ksz().b[40][0]++, AnomalyDetector_1.anomalyDetector['isRunning']) ||
        /* istanbul ignore next */
        (cov_28uht60ksz().b[40][1]++, false),
        models:
        /* istanbul ignore next */
        (cov_28uht60ksz().b[41][0]++, AnomalyDetector_1.anomalyDetector['models']?.size) ||
        /* istanbul ignore next */
        (cov_28uht60ksz().b[41][1]++, 0)
      },
      capacityPlanning: {
        status: 'healthy',
        isMonitoring:
        /* istanbul ignore next */
        (cov_28uht60ksz().b[42][0]++, CapacityPlanner_1.capacityPlanner['isMonitoring']) ||
        /* istanbul ignore next */
        (cov_28uht60ksz().b[42][1]++, false),
        models:
        /* istanbul ignore next */
        (cov_28uht60ksz().b[43][0]++, CapacityPlanner_1.capacityPlanner['capacityModels']?.size) ||
        /* istanbul ignore next */
        (cov_28uht60ksz().b[43][1]++, 0)
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_28uht60ksz().s[196]++;
    res.json({
      success: true,
      data: health
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28uht60ksz().s[197]++;
    console.error('Error getting health status:', error);
    /* istanbul ignore next */
    cov_28uht60ksz().s[198]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get health status'
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,