fdaf99e10dc6754730eed894f60eeecc
"use strict";

/* istanbul ignore next */
function cov_1mndhk4r4s() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/alerts.ts";
  var hash = "a581b205eb7253f8a695d974db2b2a4abba1ee38";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/alerts.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 69
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 29
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 36,
          column: 3
        }
      },
      "7": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "8": {
        start: {
          line: 11,
          column: 69
        },
        end: {
          line: 11,
          column: 78
        }
      },
      "9": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 26
        }
      },
      "10": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "11": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "12": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "13": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "14": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 18,
          column: 59
        }
      },
      "15": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 59
        }
      },
      "16": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "17": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "18": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 22,
          column: 48
        }
      },
      "19": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 48
        }
      },
      "20": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 73
        }
      },
      "21": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "22": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "23": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 49,
          column: 3
        }
      },
      "24": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "25": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 40,
          column: 69
        }
      },
      "26": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 24
        }
      },
      "27": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "28": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "29": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "30": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 53,
          column: 38
        }
      },
      "31": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "32": {
        start: {
          line: 55,
          column: 22
        },
        end: {
          line: 55,
          column: 56
        }
      },
      "33": {
        start: {
          line: 55,
          column: 39
        },
        end: {
          line: 55,
          column: 55
        }
      },
      "34": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "35": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "36": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "37": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "38": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 94,
          column: 3
        }
      },
      "39": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "40": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 38
        }
      },
      "41": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 81
        }
      },
      "42": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "43": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "44": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 86,
          column: 11
        }
      },
      "45": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "46": {
        start: {
          line: 96,
          column: 0
        },
        end: {
          line: 118,
          column: 3
        }
      },
      "47": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "48": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 98,
          column: 38
        }
      },
      "49": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 99,
          column: 77
        }
      },
      "50": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "51": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "52": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "53": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "54": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 131,
          column: 3
        }
      },
      "55": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "56": {
        start: {
          line: 122,
          column: 22
        },
        end: {
          line: 122,
          column: 69
        }
      },
      "57": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 28
        }
      },
      "58": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "59": {
        start: {
          line: 133,
          column: 0
        },
        end: {
          line: 155,
          column: 3
        }
      },
      "60": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "61": {
        start: {
          line: 135,
          column: 21
        },
        end: {
          line: 135,
          column: 29
        }
      },
      "62": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "63": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "64": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 59
        }
      },
      "65": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "66": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "67": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 180,
          column: 3
        }
      },
      "68": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "69": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 37
        }
      },
      "70": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 160,
          column: 32
        }
      },
      "71": {
        start: {
          line: 161,
          column: 24
        },
        end: {
          line: 161,
          column: 88
        }
      },
      "72": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "73": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "74": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "75": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "76": {
        start: {
          line: 182,
          column: 0
        },
        end: {
          line: 203,
          column: 3
        }
      },
      "77": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 202,
          column: 5
        }
      },
      "78": {
        start: {
          line: 184,
          column: 27
        },
        end: {
          line: 184,
          column: 37
        }
      },
      "79": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 185,
          column: 79
        }
      },
      "80": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "81": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "82": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "83": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "84": {
        start: {
          line: 205,
          column: 0
        },
        end: {
          line: 241,
          column: 3
        }
      },
      "85": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "86": {
        start: {
          line: 213,
          column: 22
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "87": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 55
        }
      },
      "88": {
        start: {
          line: 217,
          column: 25
        },
        end: {
          line: 217,
          column: 72
        }
      },
      "89": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 221,
          column: 7
        }
      },
      "90": {
        start: {
          line: 223,
          column: 27
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "91": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 57
        }
      },
      "92": {
        start: {
          line: 226,
          column: 32
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "93": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 62
        }
      },
      "94": {
        start: {
          line: 229,
          column: 28
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "95": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 58
        }
      },
      "96": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 232,
          column: 71
        }
      },
      "97": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 233,
          column: 81
        }
      },
      "98": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 234,
          column: 73
        }
      },
      "99": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 240,
          column: 7
        }
      },
      "100": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 76
        }
      },
      "101": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 86
        }
      },
      "102": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 78
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 17
          }
        },
        loc: {
          start: {
            line: 9,
            column: 36
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 38,
            column: 21
          },
          end: {
            line: 38,
            column: 22
          }
        },
        loc: {
          start: {
            line: 38,
            column: 41
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 38
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 51,
            column: 25
          }
        },
        loc: {
          start: {
            line: 51,
            column: 44
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 51
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 35
          }
        },
        loc: {
          start: {
            line: 55,
            column: 39
          },
          end: {
            line: 55,
            column: 55
          }
        },
        line: 55
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 38
          }
        },
        loc: {
          start: {
            line: 72,
            column: 57
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 96,
            column: 33
          },
          end: {
            line: 96,
            column: 34
          }
        },
        loc: {
          start: {
            line: 96,
            column: 53
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 96
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 120,
            column: 26
          },
          end: {
            line: 120,
            column: 27
          }
        },
        loc: {
          start: {
            line: 120,
            column: 46
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 120
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 133,
            column: 22
          },
          end: {
            line: 133,
            column: 23
          }
        },
        loc: {
          start: {
            line: 133,
            column: 42
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 133
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 157,
            column: 29
          },
          end: {
            line: 157,
            column: 30
          }
        },
        loc: {
          start: {
            line: 157,
            column: 49
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 157
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 182,
            column: 33
          }
        },
        loc: {
          start: {
            line: 182,
            column: 52
          },
          end: {
            line: 203,
            column: 1
          }
        },
        line: 182
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 205,
            column: 28
          }
        },
        loc: {
          start: {
            line: 205,
            column: 41
          },
          end: {
            line: 241,
            column: 1
          }
        },
        line: 205
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 213,
            column: 23
          }
        },
        loc: {
          start: {
            line: 213,
            column: 32
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 213
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 223,
            column: 27
          },
          end: {
            line: 223,
            column: 28
          }
        },
        loc: {
          start: {
            line: 223,
            column: 38
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 223
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 226,
            column: 32
          },
          end: {
            line: 226,
            column: 33
          }
        },
        loc: {
          start: {
            line: 226,
            column: 43
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 226
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 229,
            column: 28
          },
          end: {
            line: 229,
            column: 29
          }
        },
        loc: {
          start: {
            line: 229,
            column: 39
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 229
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 236,
            column: 20
          },
          end: {
            line: 236,
            column: 21
          }
        },
        loc: {
          start: {
            line: 236,
            column: 26
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 236
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 14,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 16,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 16,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 18,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 18,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 22,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 22,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 21
          },
          end: {
            line: 33,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 46
          },
          end: {
            line: 33,
            column: 59
          }
        }, {
          start: {
            line: 33,
            column: 62
          },
          end: {
            line: 33,
            column: 77
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 21
          },
          end: {
            line: 46,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 46
          },
          end: {
            line: 46,
            column: 59
          }
        }, {
          start: {
            line: 46,
            column: 62
          },
          end: {
            line: 46,
            column: 77
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 46
          },
          end: {
            line: 67,
            column: 59
          }
        }, {
          start: {
            line: 67,
            column: 62
          },
          end: {
            line: 67,
            column: 77
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 46
          },
          end: {
            line: 91,
            column: 59
          }
        }, {
          start: {
            line: 91,
            column: 62
          },
          end: {
            line: 91,
            column: 77
          }
        }],
        line: 91
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 115,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 46
          },
          end: {
            line: 115,
            column: 59
          }
        }, {
          start: {
            line: 115,
            column: 62
          },
          end: {
            line: 115,
            column: 77
          }
        }],
        line: 115
      },
      "13": {
        loc: {
          start: {
            line: 128,
            column: 21
          },
          end: {
            line: 128,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 46
          },
          end: {
            line: 128,
            column: 59
          }
        }, {
          start: {
            line: 128,
            column: 62
          },
          end: {
            line: 128,
            column: 77
          }
        }],
        line: 128
      },
      "14": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "15": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 137,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 137,
            column: 20
          }
        }, {
          start: {
            line: 137,
            column: 24
          },
          end: {
            line: 137,
            column: 34
          }
        }, {
          start: {
            line: 137,
            column: 38
          },
          end: {
            line: 137,
            column: 48
          }
        }, {
          start: {
            line: 137,
            column: 52
          },
          end: {
            line: 137,
            column: 66
          }
        }],
        line: 137
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 21
          },
          end: {
            line: 152,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 46
          },
          end: {
            line: 152,
            column: 59
          }
        }, {
          start: {
            line: 152,
            column: 62
          },
          end: {
            line: 152,
            column: 77
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "18": {
        loc: {
          start: {
            line: 177,
            column: 21
          },
          end: {
            line: 177,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 46
          },
          end: {
            line: 177,
            column: 59
          }
        }, {
          start: {
            line: 177,
            column: 62
          },
          end: {
            line: 177,
            column: 77
          }
        }],
        line: 177
      },
      "19": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "20": {
        loc: {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 200,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 200,
            column: 46
          },
          end: {
            line: 200,
            column: 59
          }
        }, {
          start: {
            line: 200,
            column: 62
          },
          end: {
            line: 200,
            column: 77
          }
        }],
        line: 200
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/alerts.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/alerts.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { alertingSystem, AlertSeverity } from '../services/health/AlertingSystem';\n\nconst router = Router();\n\n// Get all alerts with optional filtering\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const {\n      service,\n      severity,\n      acknowledged,\n      resolved,\n      limit\n    } = req.query;\n\n    const filters: any = {};\n    \n    if (service) filters.service = service as string;\n    if (severity) filters.severity = severity as AlertSeverity;\n    if (acknowledged !== undefined) filters.acknowledged = acknowledged === 'true';\n    if (resolved !== undefined) filters.resolved = resolved === 'true';\n    if (limit) filters.limit = parseInt(limit as string, 10);\n\n    const alerts = alertingSystem.getAlerts(filters);\n    \n    res.json({\n      alerts,\n      total: alerts.length,\n      filters: filters\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alerts',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get alert statistics\nrouter.get('/stats', async (req, res) => {\n  try {\n    const stats = alertingSystem.getAlertStats();\n    res.json(stats);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert statistics',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get specific alert by ID\nrouter.get('/:alertId', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const alerts = alertingSystem.getAlerts();\n    const alert = alerts.find(a => a.id === alertId);\n    \n    if (!alert) {\n      return res.status(404).json({\n        error: 'Alert not found',\n        alertId\n      });\n    }\n    \n    res.json(alert);\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Acknowledge an alert\nrouter.post('/:alertId/acknowledge', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const success = alertingSystem.acknowledgeAlert(alertId);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert not found',\n        alertId\n      });\n    }\n    \n    res.json({\n      message: 'Alert acknowledged successfully',\n      alertId,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to acknowledge alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Resolve an alert\nrouter.post('/:alertId/resolve', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const success = alertingSystem.resolveAlert(alertId);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert not found',\n        alertId\n      });\n    }\n    \n    res.json({\n      message: 'Alert resolved successfully',\n      alertId,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to resolve alert',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get alert rules\nrouter.get('/rules/list', async (req, res) => {\n  try {\n    const rules = alertingSystem.getAlertRules();\n    res.json({ rules });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to get alert rules',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Add new alert rule\nrouter.post('/rules', async (req, res) => {\n  try {\n    const rule = req.body;\n    \n    // Basic validation\n    if (!rule.id || !rule.name || !rule.type || !rule.severity) {\n      return res.status(400).json({\n        error: 'Missing required fields',\n        required: ['id', 'name', 'type', 'severity']\n      });\n    }\n    \n    alertingSystem.addAlertRule(rule);\n    \n    res.status(201).json({\n      message: 'Alert rule created successfully',\n      rule\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to create alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Update alert rule\nrouter.put('/rules/:ruleId', async (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const updates = req.body;\n    \n    const success = alertingSystem.updateAlertRule(ruleId, updates);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert rule not found',\n        ruleId\n      });\n    }\n    \n    res.json({\n      message: 'Alert rule updated successfully',\n      ruleId,\n      updates\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to update alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Delete alert rule\nrouter.delete('/rules/:ruleId', async (req, res) => {\n  try {\n    const { ruleId } = req.params;\n    const success = alertingSystem.removeAlertRule(ruleId);\n    \n    if (!success) {\n      return res.status(404).json({\n        error: 'Alert rule not found',\n        ruleId\n      });\n    }\n    \n    res.json({\n      message: 'Alert rule deleted successfully',\n      ruleId\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to delete alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Real-time alert stream\nrouter.get('/stream/live', (req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    'Connection': 'keep-alive',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Cache-Control'\n  });\n\n  const sendEvent = (data: any) => {\n    res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n  };\n\n  // Send initial stats\n  const initialStats = alertingSystem.getAlertStats();\n  sendEvent({\n    type: 'stats',\n    data: initialStats\n  });\n\n  // Set up event listeners\n  const onAlertCreated = (alert: any) => {\n    sendEvent({ type: 'alertCreated', data: alert });\n  };\n\n  const onAlertAcknowledged = (alert: any) => {\n    sendEvent({ type: 'alertAcknowledged', data: alert });\n  };\n\n  const onAlertResolved = (alert: any) => {\n    sendEvent({ type: 'alertResolved', data: alert });\n  };\n\n  alertingSystem.on('alertCreated', onAlertCreated);\n  alertingSystem.on('alertAcknowledged', onAlertAcknowledged);\n  alertingSystem.on('alertResolved', onAlertResolved);\n\n  // Handle client disconnect\n  req.on('close', () => {\n    alertingSystem.off('alertCreated', onAlertCreated);\n    alertingSystem.off('alertAcknowledged', onAlertAcknowledged);\n    alertingSystem.off('alertResolved', onAlertResolved);\n  });\n});\n\nexport { router as alertRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a581b205eb7253f8a695d974db2b2a4abba1ee38"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mndhk4r4s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mndhk4r4s();
cov_1mndhk4r4s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mndhk4r4s().s[1]++;
exports.alertRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_1mndhk4r4s().s[2]++, require("express"));
const AlertingSystem_1 =
/* istanbul ignore next */
(cov_1mndhk4r4s().s[3]++, require("../services/health/AlertingSystem"));
const router =
/* istanbul ignore next */
(cov_1mndhk4r4s().s[4]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_1mndhk4r4s().s[5]++;
exports.alertRoutes = router;
// Get all alerts with optional filtering
/* istanbul ignore next */
cov_1mndhk4r4s().s[6]++;
router.get('/', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[0]++;
  cov_1mndhk4r4s().s[7]++;
  try {
    const {
      service,
      severity,
      acknowledged,
      resolved,
      limit
    } =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[8]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[9]++, {});
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[10]++;
    if (service) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[0][0]++;
      cov_1mndhk4r4s().s[11]++;
      filters.service = service;
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[0][1]++;
    }
    cov_1mndhk4r4s().s[12]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[1][0]++;
      cov_1mndhk4r4s().s[13]++;
      filters.severity = severity;
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[1][1]++;
    }
    cov_1mndhk4r4s().s[14]++;
    if (acknowledged !== undefined) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[2][0]++;
      cov_1mndhk4r4s().s[15]++;
      filters.acknowledged = acknowledged === 'true';
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[2][1]++;
    }
    cov_1mndhk4r4s().s[16]++;
    if (resolved !== undefined) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[3][0]++;
      cov_1mndhk4r4s().s[17]++;
      filters.resolved = resolved === 'true';
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[3][1]++;
    }
    cov_1mndhk4r4s().s[18]++;
    if (limit) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[4][0]++;
      cov_1mndhk4r4s().s[19]++;
      filters.limit = parseInt(limit, 10);
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[4][1]++;
    }
    const alerts =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[20]++, AlertingSystem_1.alertingSystem.getAlerts(filters));
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[21]++;
    res.json({
      alerts,
      total: alerts.length,
      filters: filters
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[22]++;
    res.status(500).json({
      error: 'Failed to get alerts',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[5][1]++, 'Unknown error')
    });
  }
});
// Get alert statistics
/* istanbul ignore next */
cov_1mndhk4r4s().s[23]++;
router.get('/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[1]++;
  cov_1mndhk4r4s().s[24]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[25]++, AlertingSystem_1.alertingSystem.getAlertStats());
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[26]++;
    res.json(stats);
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[27]++;
    res.status(500).json({
      error: 'Failed to get alert statistics',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[6][1]++, 'Unknown error')
    });
  }
});
// Get specific alert by ID
/* istanbul ignore next */
cov_1mndhk4r4s().s[28]++;
router.get('/:alertId', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[2]++;
  cov_1mndhk4r4s().s[29]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[30]++, req.params);
    const alerts =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[31]++, AlertingSystem_1.alertingSystem.getAlerts());
    const alert =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[32]++, alerts.find(a => {
      /* istanbul ignore next */
      cov_1mndhk4r4s().f[3]++;
      cov_1mndhk4r4s().s[33]++;
      return a.id === alertId;
    }));
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[34]++;
    if (!alert) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[7][0]++;
      cov_1mndhk4r4s().s[35]++;
      return res.status(404).json({
        error: 'Alert not found',
        alertId
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[7][1]++;
    }
    cov_1mndhk4r4s().s[36]++;
    res.json(alert);
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[37]++;
    res.status(500).json({
      error: 'Failed to get alert',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[8][1]++, 'Unknown error')
    });
  }
});
// Acknowledge an alert
/* istanbul ignore next */
cov_1mndhk4r4s().s[38]++;
router.post('/:alertId/acknowledge', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[4]++;
  cov_1mndhk4r4s().s[39]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[40]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[41]++, AlertingSystem_1.alertingSystem.acknowledgeAlert(alertId));
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[42]++;
    if (!success) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[9][0]++;
      cov_1mndhk4r4s().s[43]++;
      return res.status(404).json({
        error: 'Alert not found',
        alertId
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[9][1]++;
    }
    cov_1mndhk4r4s().s[44]++;
    res.json({
      message: 'Alert acknowledged successfully',
      alertId,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[45]++;
    res.status(500).json({
      error: 'Failed to acknowledge alert',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[10][1]++, 'Unknown error')
    });
  }
});
// Resolve an alert
/* istanbul ignore next */
cov_1mndhk4r4s().s[46]++;
router.post('/:alertId/resolve', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[5]++;
  cov_1mndhk4r4s().s[47]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[48]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[49]++, AlertingSystem_1.alertingSystem.resolveAlert(alertId));
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[50]++;
    if (!success) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[11][0]++;
      cov_1mndhk4r4s().s[51]++;
      return res.status(404).json({
        error: 'Alert not found',
        alertId
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[11][1]++;
    }
    cov_1mndhk4r4s().s[52]++;
    res.json({
      message: 'Alert resolved successfully',
      alertId,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[53]++;
    res.status(500).json({
      error: 'Failed to resolve alert',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[12][1]++, 'Unknown error')
    });
  }
});
// Get alert rules
/* istanbul ignore next */
cov_1mndhk4r4s().s[54]++;
router.get('/rules/list', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[6]++;
  cov_1mndhk4r4s().s[55]++;
  try {
    const rules =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[56]++, AlertingSystem_1.alertingSystem.getAlertRules());
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[57]++;
    res.json({
      rules
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[58]++;
    res.status(500).json({
      error: 'Failed to get alert rules',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[13][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[13][1]++, 'Unknown error')
    });
  }
});
// Add new alert rule
/* istanbul ignore next */
cov_1mndhk4r4s().s[59]++;
router.post('/rules', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[7]++;
  cov_1mndhk4r4s().s[60]++;
  try {
    const rule =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[61]++, req.body);
    // Basic validation
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_1mndhk4r4s().b[15][0]++, !rule.id) ||
    /* istanbul ignore next */
    (cov_1mndhk4r4s().b[15][1]++, !rule.name) ||
    /* istanbul ignore next */
    (cov_1mndhk4r4s().b[15][2]++, !rule.type) ||
    /* istanbul ignore next */
    (cov_1mndhk4r4s().b[15][3]++, !rule.severity)) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[14][0]++;
      cov_1mndhk4r4s().s[63]++;
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['id', 'name', 'type', 'severity']
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[14][1]++;
    }
    cov_1mndhk4r4s().s[64]++;
    AlertingSystem_1.alertingSystem.addAlertRule(rule);
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[65]++;
    res.status(201).json({
      message: 'Alert rule created successfully',
      rule
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[66]++;
    res.status(500).json({
      error: 'Failed to create alert rule',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[16][1]++, 'Unknown error')
    });
  }
});
// Update alert rule
/* istanbul ignore next */
cov_1mndhk4r4s().s[67]++;
router.put('/rules/:ruleId', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[8]++;
  cov_1mndhk4r4s().s[68]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[69]++, req.params);
    const updates =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[70]++, req.body);
    const success =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[71]++, AlertingSystem_1.alertingSystem.updateAlertRule(ruleId, updates));
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[72]++;
    if (!success) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[17][0]++;
      cov_1mndhk4r4s().s[73]++;
      return res.status(404).json({
        error: 'Alert rule not found',
        ruleId
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[17][1]++;
    }
    cov_1mndhk4r4s().s[74]++;
    res.json({
      message: 'Alert rule updated successfully',
      ruleId,
      updates
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[75]++;
    res.status(500).json({
      error: 'Failed to update alert rule',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[18][1]++, 'Unknown error')
    });
  }
});
// Delete alert rule
/* istanbul ignore next */
cov_1mndhk4r4s().s[76]++;
router.delete('/rules/:ruleId', async (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[9]++;
  cov_1mndhk4r4s().s[77]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[78]++, req.params);
    const success =
    /* istanbul ignore next */
    (cov_1mndhk4r4s().s[79]++, AlertingSystem_1.alertingSystem.removeAlertRule(ruleId));
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[80]++;
    if (!success) {
      /* istanbul ignore next */
      cov_1mndhk4r4s().b[19][0]++;
      cov_1mndhk4r4s().s[81]++;
      return res.status(404).json({
        error: 'Alert rule not found',
        ruleId
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mndhk4r4s().b[19][1]++;
    }
    cov_1mndhk4r4s().s[82]++;
    res.json({
      message: 'Alert rule deleted successfully',
      ruleId
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[83]++;
    res.status(500).json({
      error: 'Failed to delete alert rule',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mndhk4r4s().b[20][1]++, 'Unknown error')
    });
  }
});
// Real-time alert stream
/* istanbul ignore next */
cov_1mndhk4r4s().s[84]++;
router.get('/stream/live', (req, res) => {
  /* istanbul ignore next */
  cov_1mndhk4r4s().f[10]++;
  cov_1mndhk4r4s().s[85]++;
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[86]++;
  const sendEvent = data => {
    /* istanbul ignore next */
    cov_1mndhk4r4s().f[11]++;
    cov_1mndhk4r4s().s[87]++;
    res.write(`data: ${JSON.stringify(data)}\n\n`);
  };
  // Send initial stats
  const initialStats =
  /* istanbul ignore next */
  (cov_1mndhk4r4s().s[88]++, AlertingSystem_1.alertingSystem.getAlertStats());
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[89]++;
  sendEvent({
    type: 'stats',
    data: initialStats
  });
  // Set up event listeners
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[90]++;
  const onAlertCreated = alert => {
    /* istanbul ignore next */
    cov_1mndhk4r4s().f[12]++;
    cov_1mndhk4r4s().s[91]++;
    sendEvent({
      type: 'alertCreated',
      data: alert
    });
  };
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[92]++;
  const onAlertAcknowledged = alert => {
    /* istanbul ignore next */
    cov_1mndhk4r4s().f[13]++;
    cov_1mndhk4r4s().s[93]++;
    sendEvent({
      type: 'alertAcknowledged',
      data: alert
    });
  };
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[94]++;
  const onAlertResolved = alert => {
    /* istanbul ignore next */
    cov_1mndhk4r4s().f[14]++;
    cov_1mndhk4r4s().s[95]++;
    sendEvent({
      type: 'alertResolved',
      data: alert
    });
  };
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[96]++;
  AlertingSystem_1.alertingSystem.on('alertCreated', onAlertCreated);
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[97]++;
  AlertingSystem_1.alertingSystem.on('alertAcknowledged', onAlertAcknowledged);
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[98]++;
  AlertingSystem_1.alertingSystem.on('alertResolved', onAlertResolved);
  // Handle client disconnect
  /* istanbul ignore next */
  cov_1mndhk4r4s().s[99]++;
  req.on('close', () => {
    /* istanbul ignore next */
    cov_1mndhk4r4s().f[15]++;
    cov_1mndhk4r4s().s[100]++;
    AlertingSystem_1.alertingSystem.off('alertCreated', onAlertCreated);
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[101]++;
    AlertingSystem_1.alertingSystem.off('alertAcknowledged', onAlertAcknowledged);
    /* istanbul ignore next */
    cov_1mndhk4r4s().s[102]++;
    AlertingSystem_1.alertingSystem.off('alertResolved', onAlertResolved);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,