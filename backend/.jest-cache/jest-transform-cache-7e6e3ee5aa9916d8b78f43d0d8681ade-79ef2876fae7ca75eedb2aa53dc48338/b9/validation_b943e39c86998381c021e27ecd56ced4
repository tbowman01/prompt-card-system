a8fc011a2ec139f8dbca8afdc08e88cc
"use strict";

/* istanbul ignore next */
function cov_hpn4mrxmd() {
  var path = "/workspaces/prompt-card-system/backend/src/middleware/validation.ts";
  var hash = "6b0e1a0ebaba370d21ca4037dc56abc46ee52492";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/middleware/validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 67
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "5": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 50
        }
      },
      "10": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "11": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 44
        }
      },
      "12": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 48
        }
      },
      "13": {
        start: {
          line: 16,
          column: 14
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "14": {
        start: {
          line: 17,
          column: 28
        },
        end: {
          line: 17,
          column: 56
        }
      },
      "15": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 65
        }
      },
      "16": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 57
        }
      },
      "17": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 38,
          column: 6
        }
      },
      "18": {
        start: {
          line: 25,
          column: 33
        },
        end: {
          line: 25,
          column: 58
        }
      },
      "19": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "20": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "21": {
        start: {
          line: 29,
          column: 54
        },
        end: {
          line: 32,
          column: 17
        }
      },
      "22": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "23": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 25
        }
      },
      "24": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "25": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 30
        }
      },
      "26": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "27": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 61,
          column: 3
        }
      },
      "28": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "29": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "30": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 42
        }
      },
      "31": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "32": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 50
        }
      },
      "33": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "34": {
        start: {
          line: 83,
          column: 19
        },
        end: {
          line: 83,
          column: 65
        }
      },
      "35": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "36": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "37": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "38": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "39": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 105,
          column: 6
        }
      },
      "40": {
        start: {
          line: 95,
          column: 30
        },
        end: {
          line: 95,
          column: 72
        }
      },
      "41": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "42": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "43": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 19
        }
      },
      "44": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "45": {
        start: {
          line: 108,
          column: 29
        },
        end: {
          line: 108,
          column: 76
        }
      },
      "46": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "47": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "48": {
        start: {
          line: 112,
          column: 50
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "49": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "50": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 21
        }
      },
      "51": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "52": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "53": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 34
        }
      },
      "54": {
        start: {
          line: 127,
          column: 9
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "55": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 59
        }
      },
      "56": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 128,
          column: 57
        }
      },
      "57": {
        start: {
          line: 130,
          column: 9
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "58": {
        start: {
          line: 131,
          column: 26
        },
        end: {
          line: 131,
          column: 28
        }
      },
      "59": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "60": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 57
        }
      },
      "61": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 25
        }
      },
      "62": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "validation",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 12
          }
        },
        loc: {
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 29,
            column: 44
          }
        },
        loc: {
          start: {
            line: 29,
            column: 54
          },
          end: {
            line: 32,
            column: 17
          }
        },
        line: 29
      },
      "4": {
        name: "validateRequest",
        decl: {
          start: {
            line: 41,
            column: 9
          },
          end: {
            line: 41,
            column: 24
          }
        },
        loc: {
          start: {
            line: 41,
            column: 33
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 41
      },
      "5": {
        name: "sanitizeInput",
        decl: {
          start: {
            line: 63,
            column: 9
          },
          end: {
            line: 63,
            column: 22
          }
        },
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 63
      },
      "6": {
        name: "validateEmail",
        decl: {
          start: {
            line: 69,
            column: 9
          },
          end: {
            line: 69,
            column: 22
          }
        },
        loc: {
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 69
      },
      "7": {
        name: "validateUrl",
        decl: {
          start: {
            line: 72,
            column: 9
          },
          end: {
            line: 72,
            column: 20
          }
        },
        loc: {
          start: {
            line: 72,
            column: 26
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 72
      },
      "8": {
        name: "sanitizeRequestBody",
        decl: {
          start: {
            line: 76,
            column: 9
          },
          end: {
            line: 76,
            column: 28
          }
        },
        loc: {
          start: {
            line: 76,
            column: 45
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 76
      },
      "9": {
        name: "handleValidationErrors",
        decl: {
          start: {
            line: 82,
            column: 9
          },
          end: {
            line: 82,
            column: 31
          }
        },
        loc: {
          start: {
            line: 82,
            column: 48
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 82
      },
      "10": {
        name: "limitRequestSize",
        decl: {
          start: {
            line: 93,
            column: 9
          },
          end: {
            line: 93,
            column: 25
          }
        },
        loc: {
          start: {
            line: 93,
            column: 33
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 93
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 94,
            column: 11
          },
          end: {
            line: 94,
            column: 12
          }
        },
        loc: {
          start: {
            line: 94,
            column: 31
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 94
      },
      "12": {
        name: "validatePromptCard",
        decl: {
          start: {
            line: 107,
            column: 9
          },
          end: {
            line: 107,
            column: 27
          }
        },
        loc: {
          start: {
            line: 107,
            column: 44
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 107
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 112,
            column: 39
          },
          end: {
            line: 112,
            column: 40
          }
        },
        loc: {
          start: {
            line: 112,
            column: 50
          },
          end: {
            line: 115,
            column: 13
          }
        },
        line: 112
      },
      "14": {
        name: "sanitizeObjectInputs",
        decl: {
          start: {
            line: 123,
            column: 9
          },
          end: {
            line: 123,
            column: 29
          }
        },
        loc: {
          start: {
            line: 123,
            column: 35
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 123
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 128,
            column: 23
          },
          end: {
            line: 128,
            column: 24
          }
        },
        loc: {
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 128,
            column: 57
          }
        },
        line: 128
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 16
          }
        }, {
          start: {
            line: 77,
            column: 20
          },
          end: {
            line: 77,
            column: 48
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 95,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 95,
            column: 64
          }
        }, {
          start: {
            line: 95,
            column: 68
          },
          end: {
            line: 95,
            column: 71
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "9": {
        loc: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "10": {
        loc: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        }, {
          start: {
            line: 127,
            column: 9
          },
          end: {
            line: 136,
            column: 5
          }
        }],
        line: 124
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 9
          },
          end: {
            line: 136,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 9
          },
          end: {
            line: 136,
            column: 5
          }
        }, {
          start: {
            line: 130,
            column: 9
          },
          end: {
            line: 136,
            column: 5
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 9
          },
          end: {
            line: 136,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 9
          },
          end: {
            line: 136,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 130,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 130,
            column: 16
          }
        }, {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 43
          }
        }],
        line: 130
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/middleware/validation.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/middleware/validation.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { body, validationResult, param, query } from 'express-validator';\nimport sanitizeHtml from 'sanitize-html';\n// import { logSecurityEvent } from './structuredLogging';\nimport validator from 'validator';\n\n// Enhanced validation schema for prompt cards with security rules\n\n// Generic validation middleware function\nexport function validation(schema: Joi.ObjectSchema) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const { error, value } = schema.validate(req.body);\n    \n    if (error) {\n      res.status(400).json({\n        error: 'Validation failed',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message\n        }))\n      });\n      return;\n    }\n    \n    req.body = value;\n    next();\n  };\n}\n\n// Export validateRequest function for compatibility\nexport function validateRequest(schema: Joi.ObjectSchema) {\n  return validation(schema);\n}\n\n// Standard validation schemas\nexport const promptCardValidation = Joi.object({\n  title: Joi.string().min(1).max(200).required().trim(),\n  prompt_template: Joi.string().min(1).max(5000).required(),\n  variables: Joi.array().items(Joi.string()).default([]),\n  category_id: Joi.number().integer().positive().optional(),\n  tags: Joi.array().items(Joi.string().max(50)).default([]),\n  description: Joi.string().max(1000).optional().allow(''),\n  is_active: Joi.boolean().default(true)\n});\n\nexport const testCaseValidation = Joi.object({\n  prompt_card_id: Joi.number().integer().positive().required(),\n  input_variables: Joi.object().required(),\n  expected_output: Joi.string().required(),\n  assertion_type: Joi.string().valid('contains', 'equals', 'regex', 'length', 'custom').required(),\n  assertion_value: Joi.string().required(),\n  description: Joi.string().max(500).optional().allow('')\n});\n\n// Security validation helpers\nexport function sanitizeInput(input: string): string {\n  return sanitizeHtml(input, {\n    allowedTags: [],\n    allowedAttributes: {}\n  });\n}\n\nexport function validateEmail(email: string): boolean {\n  return validator.isEmail(email);\n}\n\nexport function validateUrl(url: string): boolean {\n  return validator.isURL(url);\n}\n\n// Missing exports that are imported elsewhere\nexport function sanitizeRequestBody(req: Request, res: Response, next: NextFunction): void {\n  if (req.body && typeof req.body === 'object') {\n    req.body = sanitizeObjectInputs(req.body);\n  }\n  next();\n}\n\nexport function handleValidationErrors(req: Request, res: Response, next: NextFunction): void {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array()\n    });\n    return;\n  }\n  next();\n}\n\nexport function limitRequestSize(limit: number) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const contentLength = parseInt(req.get('content-length') || '0');\n    if (contentLength > limit) {\n      res.status(413).json({\n        error: 'Request entity too large',\n        maxSize: limit,\n        actualSize: contentLength\n      });\n      return;\n    }\n    next();\n  };\n}\n\nexport function validatePromptCard(req: Request, res: Response, next: NextFunction): void {\n  const { error, value } = promptCardValidation.validate(req.body);\n  if (error) {\n    res.status(400).json({\n      error: 'Validation failed',\n      details: error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message\n      }))\n    });\n    return;\n  }\n  req.body = value;\n  next();\n}\n\n// Helper function to sanitize object inputs recursively\nfunction sanitizeObjectInputs(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeInput(obj);\n  } else if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObjectInputs(item));\n  } else if (obj && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObjectInputs(value);\n    }\n    return sanitized;\n  }\n  return obj;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6b0e1a0ebaba370d21ca4037dc56abc46ee52492"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hpn4mrxmd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hpn4mrxmd();
var __importDefault =
/* istanbul ignore next */
(cov_hpn4mrxmd().s[0]++,
/* istanbul ignore next */
(cov_hpn4mrxmd().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_hpn4mrxmd().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_hpn4mrxmd().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[0]++;
  cov_hpn4mrxmd().s[1]++;
  return /* istanbul ignore next */(cov_hpn4mrxmd().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_hpn4mrxmd().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_hpn4mrxmd().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_hpn4mrxmd().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_hpn4mrxmd().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_hpn4mrxmd().s[3]++;
exports.testCaseValidation = exports.promptCardValidation = void 0;
/* istanbul ignore next */
cov_hpn4mrxmd().s[4]++;
exports.validation = validation;
/* istanbul ignore next */
cov_hpn4mrxmd().s[5]++;
exports.validateRequest = validateRequest;
/* istanbul ignore next */
cov_hpn4mrxmd().s[6]++;
exports.sanitizeInput = sanitizeInput;
/* istanbul ignore next */
cov_hpn4mrxmd().s[7]++;
exports.validateEmail = validateEmail;
/* istanbul ignore next */
cov_hpn4mrxmd().s[8]++;
exports.validateUrl = validateUrl;
/* istanbul ignore next */
cov_hpn4mrxmd().s[9]++;
exports.sanitizeRequestBody = sanitizeRequestBody;
/* istanbul ignore next */
cov_hpn4mrxmd().s[10]++;
exports.handleValidationErrors = handleValidationErrors;
/* istanbul ignore next */
cov_hpn4mrxmd().s[11]++;
exports.limitRequestSize = limitRequestSize;
/* istanbul ignore next */
cov_hpn4mrxmd().s[12]++;
exports.validatePromptCard = validatePromptCard;
const joi_1 =
/* istanbul ignore next */
(cov_hpn4mrxmd().s[13]++, __importDefault(require("joi")));
const express_validator_1 =
/* istanbul ignore next */
(cov_hpn4mrxmd().s[14]++, require("express-validator"));
const sanitize_html_1 =
/* istanbul ignore next */
(cov_hpn4mrxmd().s[15]++, __importDefault(require("sanitize-html")));
// import { logSecurityEvent } from './structuredLogging';
const validator_1 =
/* istanbul ignore next */
(cov_hpn4mrxmd().s[16]++, __importDefault(require("validator")));
// Enhanced validation schema for prompt cards with security rules
// Generic validation middleware function
function validation(schema) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[1]++;
  cov_hpn4mrxmd().s[17]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_hpn4mrxmd().f[2]++;
    const {
      error,
      value
    } =
    /* istanbul ignore next */
    (cov_hpn4mrxmd().s[18]++, schema.validate(req.body));
    /* istanbul ignore next */
    cov_hpn4mrxmd().s[19]++;
    if (error) {
      /* istanbul ignore next */
      cov_hpn4mrxmd().b[3][0]++;
      cov_hpn4mrxmd().s[20]++;
      res.status(400).json({
        error: 'Validation failed',
        details: error.details.map(detail => {
          /* istanbul ignore next */
          cov_hpn4mrxmd().f[3]++;
          cov_hpn4mrxmd().s[21]++;
          return {
            field: detail.path.join('.'),
            message: detail.message
          };
        })
      });
      /* istanbul ignore next */
      cov_hpn4mrxmd().s[22]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hpn4mrxmd().b[3][1]++;
    }
    cov_hpn4mrxmd().s[23]++;
    req.body = value;
    /* istanbul ignore next */
    cov_hpn4mrxmd().s[24]++;
    next();
  };
}
// Export validateRequest function for compatibility
function validateRequest(schema) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[4]++;
  cov_hpn4mrxmd().s[25]++;
  return validation(schema);
}
// Standard validation schemas
/* istanbul ignore next */
cov_hpn4mrxmd().s[26]++;
exports.promptCardValidation = joi_1.default.object({
  title: joi_1.default.string().min(1).max(200).required().trim(),
  prompt_template: joi_1.default.string().min(1).max(5000).required(),
  variables: joi_1.default.array().items(joi_1.default.string()).default([]),
  category_id: joi_1.default.number().integer().positive().optional(),
  tags: joi_1.default.array().items(joi_1.default.string().max(50)).default([]),
  description: joi_1.default.string().max(1000).optional().allow(''),
  is_active: joi_1.default.boolean().default(true)
});
/* istanbul ignore next */
cov_hpn4mrxmd().s[27]++;
exports.testCaseValidation = joi_1.default.object({
  prompt_card_id: joi_1.default.number().integer().positive().required(),
  input_variables: joi_1.default.object().required(),
  expected_output: joi_1.default.string().required(),
  assertion_type: joi_1.default.string().valid('contains', 'equals', 'regex', 'length', 'custom').required(),
  assertion_value: joi_1.default.string().required(),
  description: joi_1.default.string().max(500).optional().allow('')
});
// Security validation helpers
function sanitizeInput(input) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[5]++;
  cov_hpn4mrxmd().s[28]++;
  return (0, sanitize_html_1.default)(input, {
    allowedTags: [],
    allowedAttributes: {}
  });
}
function validateEmail(email) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[6]++;
  cov_hpn4mrxmd().s[29]++;
  return validator_1.default.isEmail(email);
}
function validateUrl(url) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[7]++;
  cov_hpn4mrxmd().s[30]++;
  return validator_1.default.isURL(url);
}
// Missing exports that are imported elsewhere
function sanitizeRequestBody(req, res, next) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[8]++;
  cov_hpn4mrxmd().s[31]++;
  if (
  /* istanbul ignore next */
  (cov_hpn4mrxmd().b[5][0]++, req.body) &&
  /* istanbul ignore next */
  (cov_hpn4mrxmd().b[5][1]++, typeof req.body === 'object')) {
    /* istanbul ignore next */
    cov_hpn4mrxmd().b[4][0]++;
    cov_hpn4mrxmd().s[32]++;
    req.body = sanitizeObjectInputs(req.body);
  } else
  /* istanbul ignore next */
  {
    cov_hpn4mrxmd().b[4][1]++;
  }
  cov_hpn4mrxmd().s[33]++;
  next();
}
function handleValidationErrors(req, res, next) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[9]++;
  const errors =
  /* istanbul ignore next */
  (cov_hpn4mrxmd().s[34]++, (0, express_validator_1.validationResult)(req));
  /* istanbul ignore next */
  cov_hpn4mrxmd().s[35]++;
  if (!errors.isEmpty()) {
    /* istanbul ignore next */
    cov_hpn4mrxmd().b[6][0]++;
    cov_hpn4mrxmd().s[36]++;
    res.status(400).json({
      error: 'Validation failed',
      details: errors.array()
    });
    /* istanbul ignore next */
    cov_hpn4mrxmd().s[37]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_hpn4mrxmd().b[6][1]++;
  }
  cov_hpn4mrxmd().s[38]++;
  next();
}
function limitRequestSize(limit) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[10]++;
  cov_hpn4mrxmd().s[39]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_hpn4mrxmd().f[11]++;
    const contentLength =
    /* istanbul ignore next */
    (cov_hpn4mrxmd().s[40]++, parseInt(
    /* istanbul ignore next */
    (cov_hpn4mrxmd().b[7][0]++, req.get('content-length')) ||
    /* istanbul ignore next */
    (cov_hpn4mrxmd().b[7][1]++, '0')));
    /* istanbul ignore next */
    cov_hpn4mrxmd().s[41]++;
    if (contentLength > limit) {
      /* istanbul ignore next */
      cov_hpn4mrxmd().b[8][0]++;
      cov_hpn4mrxmd().s[42]++;
      res.status(413).json({
        error: 'Request entity too large',
        maxSize: limit,
        actualSize: contentLength
      });
      /* istanbul ignore next */
      cov_hpn4mrxmd().s[43]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hpn4mrxmd().b[8][1]++;
    }
    cov_hpn4mrxmd().s[44]++;
    next();
  };
}
function validatePromptCard(req, res, next) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[12]++;
  const {
    error,
    value
  } =
  /* istanbul ignore next */
  (cov_hpn4mrxmd().s[45]++, exports.promptCardValidation.validate(req.body));
  /* istanbul ignore next */
  cov_hpn4mrxmd().s[46]++;
  if (error) {
    /* istanbul ignore next */
    cov_hpn4mrxmd().b[9][0]++;
    cov_hpn4mrxmd().s[47]++;
    res.status(400).json({
      error: 'Validation failed',
      details: error.details.map(detail => {
        /* istanbul ignore next */
        cov_hpn4mrxmd().f[13]++;
        cov_hpn4mrxmd().s[48]++;
        return {
          field: detail.path.join('.'),
          message: detail.message
        };
      })
    });
    /* istanbul ignore next */
    cov_hpn4mrxmd().s[49]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_hpn4mrxmd().b[9][1]++;
  }
  cov_hpn4mrxmd().s[50]++;
  req.body = value;
  /* istanbul ignore next */
  cov_hpn4mrxmd().s[51]++;
  next();
}
// Helper function to sanitize object inputs recursively
function sanitizeObjectInputs(obj) {
  /* istanbul ignore next */
  cov_hpn4mrxmd().f[14]++;
  cov_hpn4mrxmd().s[52]++;
  if (typeof obj === 'string') {
    /* istanbul ignore next */
    cov_hpn4mrxmd().b[10][0]++;
    cov_hpn4mrxmd().s[53]++;
    return sanitizeInput(obj);
  } else {
    /* istanbul ignore next */
    cov_hpn4mrxmd().b[10][1]++;
    cov_hpn4mrxmd().s[54]++;
    if (Array.isArray(obj)) {
      /* istanbul ignore next */
      cov_hpn4mrxmd().b[11][0]++;
      cov_hpn4mrxmd().s[55]++;
      return obj.map(item => {
        /* istanbul ignore next */
        cov_hpn4mrxmd().f[15]++;
        cov_hpn4mrxmd().s[56]++;
        return sanitizeObjectInputs(item);
      });
    } else {
      /* istanbul ignore next */
      cov_hpn4mrxmd().b[11][1]++;
      cov_hpn4mrxmd().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_hpn4mrxmd().b[13][0]++, obj) &&
      /* istanbul ignore next */
      (cov_hpn4mrxmd().b[13][1]++, typeof obj === 'object')) {
        /* istanbul ignore next */
        cov_hpn4mrxmd().b[12][0]++;
        const sanitized =
        /* istanbul ignore next */
        (cov_hpn4mrxmd().s[58]++, {});
        /* istanbul ignore next */
        cov_hpn4mrxmd().s[59]++;
        for (const [key, value] of Object.entries(obj)) {
          /* istanbul ignore next */
          cov_hpn4mrxmd().s[60]++;
          sanitized[key] = sanitizeObjectInputs(value);
        }
        /* istanbul ignore next */
        cov_hpn4mrxmd().s[61]++;
        return sanitized;
      } else
      /* istanbul ignore next */
      {
        cov_hpn4mrxmd().b[12][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_hpn4mrxmd().s[62]++;
  return obj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfaHBuNG1yeG1kIiwiYWN0dWFsQ292ZXJhZ2UiLCJleHBvcnRzIiwidmFsaWRhdGlvbiIsInMiLCJ2YWxpZGF0ZVJlcXVlc3QiLCJzYW5pdGl6ZUlucHV0IiwidmFsaWRhdGVFbWFpbCIsInZhbGlkYXRlVXJsIiwic2FuaXRpemVSZXF1ZXN0Qm9keSIsImhhbmRsZVZhbGlkYXRpb25FcnJvcnMiLCJsaW1pdFJlcXVlc3RTaXplIiwidmFsaWRhdGVQcm9tcHRDYXJkIiwiam9pXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiZXhwcmVzc192YWxpZGF0b3JfMSIsInNhbml0aXplX2h0bWxfMSIsInZhbGlkYXRvcl8xIiwic2NoZW1hIiwiZiIsInJlcSIsInJlcyIsIm5leHQiLCJlcnJvciIsInZhbHVlIiwidmFsaWRhdGUiLCJib2R5IiwiYiIsInN0YXR1cyIsImpzb24iLCJkZXRhaWxzIiwibWFwIiwiZGV0YWlsIiwiZmllbGQiLCJwYXRoIiwiam9pbiIsIm1lc3NhZ2UiLCJwcm9tcHRDYXJkVmFsaWRhdGlvbiIsImRlZmF1bHQiLCJvYmplY3QiLCJ0aXRsZSIsInN0cmluZyIsIm1pbiIsIm1heCIsInJlcXVpcmVkIiwidHJpbSIsInByb21wdF90ZW1wbGF0ZSIsInZhcmlhYmxlcyIsImFycmF5IiwiaXRlbXMiLCJjYXRlZ29yeV9pZCIsIm51bWJlciIsImludGVnZXIiLCJwb3NpdGl2ZSIsIm9wdGlvbmFsIiwidGFncyIsImRlc2NyaXB0aW9uIiwiYWxsb3ciLCJpc19hY3RpdmUiLCJib29sZWFuIiwidGVzdENhc2VWYWxpZGF0aW9uIiwicHJvbXB0X2NhcmRfaWQiLCJpbnB1dF92YXJpYWJsZXMiLCJleHBlY3RlZF9vdXRwdXQiLCJhc3NlcnRpb25fdHlwZSIsInZhbGlkIiwiYXNzZXJ0aW9uX3ZhbHVlIiwiaW5wdXQiLCJhbGxvd2VkVGFncyIsImFsbG93ZWRBdHRyaWJ1dGVzIiwiZW1haWwiLCJpc0VtYWlsIiwidXJsIiwiaXNVUkwiLCJzYW5pdGl6ZU9iamVjdElucHV0cyIsImVycm9ycyIsInZhbGlkYXRpb25SZXN1bHQiLCJpc0VtcHR5IiwibGltaXQiLCJjb250ZW50TGVuZ3RoIiwicGFyc2VJbnQiLCJnZXQiLCJtYXhTaXplIiwiYWN0dWFsU2l6ZSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsIml0ZW0iLCJzYW5pdGl6ZWQiLCJrZXkiLCJPYmplY3QiLCJlbnRyaWVzIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL21pZGRsZXdhcmUvdmFsaWRhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgSm9pIGZyb20gJ2pvaSc7XG5pbXBvcnQgeyBib2R5LCB2YWxpZGF0aW9uUmVzdWx0LCBwYXJhbSwgcXVlcnkgfSBmcm9tICdleHByZXNzLXZhbGlkYXRvcic7XG5pbXBvcnQgc2FuaXRpemVIdG1sIGZyb20gJ3Nhbml0aXplLWh0bWwnO1xuLy8gaW1wb3J0IHsgbG9nU2VjdXJpdHlFdmVudCB9IGZyb20gJy4vc3RydWN0dXJlZExvZ2dpbmcnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICd2YWxpZGF0b3InO1xuXG4vLyBFbmhhbmNlZCB2YWxpZGF0aW9uIHNjaGVtYSBmb3IgcHJvbXB0IGNhcmRzIHdpdGggc2VjdXJpdHkgcnVsZXNcblxuLy8gR2VuZXJpYyB2YWxpZGF0aW9uIG1pZGRsZXdhcmUgZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0aW9uKHNjaGVtYTogSm9pLk9iamVjdFNjaGVtYSkge1xuICByZXR1cm4gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCA9PiB7XG4gICAgY29uc3QgeyBlcnJvciwgdmFsdWUgfSA9IHNjaGVtYS52YWxpZGF0ZShyZXEuYm9keSk7XG4gICAgXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnVmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgICBkZXRhaWxzOiBlcnJvci5kZXRhaWxzLm1hcChkZXRhaWwgPT4gKHtcbiAgICAgICAgICBmaWVsZDogZGV0YWlsLnBhdGguam9pbignLicpLFxuICAgICAgICAgIG1lc3NhZ2U6IGRldGFpbC5tZXNzYWdlXG4gICAgICAgIH0pKVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHJlcS5ib2R5ID0gdmFsdWU7XG4gICAgbmV4dCgpO1xuICB9O1xufVxuXG4vLyBFeHBvcnQgdmFsaWRhdGVSZXF1ZXN0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZXF1ZXN0KHNjaGVtYTogSm9pLk9iamVjdFNjaGVtYSkge1xuICByZXR1cm4gdmFsaWRhdGlvbihzY2hlbWEpO1xufVxuXG4vLyBTdGFuZGFyZCB2YWxpZGF0aW9uIHNjaGVtYXNcbmV4cG9ydCBjb25zdCBwcm9tcHRDYXJkVmFsaWRhdGlvbiA9IEpvaS5vYmplY3Qoe1xuICB0aXRsZTogSm9pLnN0cmluZygpLm1pbigxKS5tYXgoMjAwKS5yZXF1aXJlZCgpLnRyaW0oKSxcbiAgcHJvbXB0X3RlbXBsYXRlOiBKb2kuc3RyaW5nKCkubWluKDEpLm1heCg1MDAwKS5yZXF1aXJlZCgpLFxuICB2YXJpYWJsZXM6IEpvaS5hcnJheSgpLml0ZW1zKEpvaS5zdHJpbmcoKSkuZGVmYXVsdChbXSksXG4gIGNhdGVnb3J5X2lkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLnBvc2l0aXZlKCkub3B0aW9uYWwoKSxcbiAgdGFnczogSm9pLmFycmF5KCkuaXRlbXMoSm9pLnN0cmluZygpLm1heCg1MCkpLmRlZmF1bHQoW10pLFxuICBkZXNjcmlwdGlvbjogSm9pLnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLmFsbG93KCcnKSxcbiAgaXNfYWN0aXZlOiBKb2kuYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSlcbn0pO1xuXG5leHBvcnQgY29uc3QgdGVzdENhc2VWYWxpZGF0aW9uID0gSm9pLm9iamVjdCh7XG4gIHByb21wdF9jYXJkX2lkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLnBvc2l0aXZlKCkucmVxdWlyZWQoKSxcbiAgaW5wdXRfdmFyaWFibGVzOiBKb2kub2JqZWN0KCkucmVxdWlyZWQoKSxcbiAgZXhwZWN0ZWRfb3V0cHV0OiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgYXNzZXJ0aW9uX3R5cGU6IEpvaS5zdHJpbmcoKS52YWxpZCgnY29udGFpbnMnLCAnZXF1YWxzJywgJ3JlZ2V4JywgJ2xlbmd0aCcsICdjdXN0b20nKS5yZXF1aXJlZCgpLFxuICBhc3NlcnRpb25fdmFsdWU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBkZXNjcmlwdGlvbjogSm9pLnN0cmluZygpLm1heCg1MDApLm9wdGlvbmFsKCkuYWxsb3coJycpXG59KTtcblxuLy8gU2VjdXJpdHkgdmFsaWRhdGlvbiBoZWxwZXJzXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVJbnB1dChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHNhbml0aXplSHRtbChpbnB1dCwge1xuICAgIGFsbG93ZWRUYWdzOiBbXSxcbiAgICBhbGxvd2VkQXR0cmlidXRlczoge31cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUVtYWlsKGVtYWlsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbGlkYXRvci5pc0VtYWlsKGVtYWlsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWxpZGF0b3IuaXNVUkwodXJsKTtcbn1cblxuLy8gTWlzc2luZyBleHBvcnRzIHRoYXQgYXJlIGltcG9ydGVkIGVsc2V3aGVyZVxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplUmVxdWVzdEJvZHkocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkIHtcbiAgaWYgKHJlcS5ib2R5ICYmIHR5cGVvZiByZXEuYm9keSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXEuYm9keSA9IHNhbml0aXplT2JqZWN0SW5wdXRzKHJlcS5ib2R5KTtcbiAgfVxuICBuZXh0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVWYWxpZGF0aW9uRXJyb3JzKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRpb25SZXN1bHQocmVxKTtcbiAgaWYgKCFlcnJvcnMuaXNFbXB0eSgpKSB7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgZXJyb3I6ICdWYWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICBkZXRhaWxzOiBlcnJvcnMuYXJyYXkoKVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBuZXh0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW1pdFJlcXVlc3RTaXplKGxpbWl0OiBudW1iZXIpIHtcbiAgcmV0dXJuIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBwYXJzZUludChyZXEuZ2V0KCdjb250ZW50LWxlbmd0aCcpIHx8ICcwJyk7XG4gICAgaWYgKGNvbnRlbnRMZW5ndGggPiBsaW1pdCkge1xuICAgICAgcmVzLnN0YXR1cyg0MTMpLmpzb24oe1xuICAgICAgICBlcnJvcjogJ1JlcXVlc3QgZW50aXR5IHRvbyBsYXJnZScsXG4gICAgICAgIG1heFNpemU6IGxpbWl0LFxuICAgICAgICBhY3R1YWxTaXplOiBjb250ZW50TGVuZ3RoXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmV4dCgpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQcm9tcHRDYXJkKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSBwcm9tcHRDYXJkVmFsaWRhdGlvbi52YWxpZGF0ZShyZXEuYm9keSk7XG4gIGlmIChlcnJvcikge1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIGVycm9yOiAnVmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgZGV0YWlsczogZXJyb3IuZGV0YWlscy5tYXAoZGV0YWlsID0+ICh7XG4gICAgICAgIGZpZWxkOiBkZXRhaWwucGF0aC5qb2luKCcuJyksXG4gICAgICAgIG1lc3NhZ2U6IGRldGFpbC5tZXNzYWdlXG4gICAgICB9KSlcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVxLmJvZHkgPSB2YWx1ZTtcbiAgbmV4dCgpO1xufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gc2FuaXRpemUgb2JqZWN0IGlucHV0cyByZWN1cnNpdmVseVxuZnVuY3Rpb24gc2FuaXRpemVPYmplY3RJbnB1dHMob2JqOiBhbnkpOiBhbnkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc2FuaXRpemVJbnB1dChvYmopO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmoubWFwKGl0ZW0gPT4gc2FuaXRpemVPYmplY3RJbnB1dHMoaXRlbSkpO1xuICB9IGVsc2UgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHNhbml0aXplZDogYW55ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xuICAgICAgc2FuaXRpemVkW2tleV0gPSBzYW5pdGl6ZU9iamVjdElucHV0cyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBzYW5pdGl6ZWQ7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUNBO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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