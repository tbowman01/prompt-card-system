{"version":3,"names":["cov_hpn4mrxmd","actualCoverage","exports","validation","s","validateRequest","sanitizeInput","validateEmail","validateUrl","sanitizeRequestBody","handleValidationErrors","limitRequestSize","validatePromptCard","joi_1","__importDefault","require","express_validator_1","sanitize_html_1","validator_1","schema","f","req","res","next","error","value","validate","body","b","status","json","details","map","detail","field","path","join","message","promptCardValidation","default","object","title","string","min","max","required","trim","prompt_template","variables","array","items","category_id","number","integer","positive","optional","tags","description","allow","is_active","boolean","testCaseValidation","prompt_card_id","input_variables","expected_output","assertion_type","valid","assertion_value","input","allowedTags","allowedAttributes","email","isEmail","url","isURL","sanitizeObjectInputs","errors","validationResult","isEmpty","limit","contentLength","parseInt","get","maxSize","actualSize","obj","Array","isArray","item","sanitized","key","Object","entries"],"sources":["/workspaces/prompt-card-system/backend/src/middleware/validation.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { body, validationResult, param, query } from 'express-validator';\nimport sanitizeHtml from 'sanitize-html';\n// import { logSecurityEvent } from './structuredLogging';\nimport validator from 'validator';\n\n// Enhanced validation schema for prompt cards with security rules\n\n// Generic validation middleware function\nexport function validation(schema: Joi.ObjectSchema) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const { error, value } = schema.validate(req.body);\n    \n    if (error) {\n      res.status(400).json({\n        error: 'Validation failed',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message\n        }))\n      });\n      return;\n    }\n    \n    req.body = value;\n    next();\n  };\n}\n\n// Export validateRequest function for compatibility\nexport function validateRequest(schema: Joi.ObjectSchema) {\n  return validation(schema);\n}\n\n// Standard validation schemas\nexport const promptCardValidation = Joi.object({\n  title: Joi.string().min(1).max(200).required().trim(),\n  prompt_template: Joi.string().min(1).max(5000).required(),\n  variables: Joi.array().items(Joi.string()).default([]),\n  category_id: Joi.number().integer().positive().optional(),\n  tags: Joi.array().items(Joi.string().max(50)).default([]),\n  description: Joi.string().max(1000).optional().allow(''),\n  is_active: Joi.boolean().default(true)\n});\n\nexport const testCaseValidation = Joi.object({\n  prompt_card_id: Joi.number().integer().positive().required(),\n  input_variables: Joi.object().required(),\n  expected_output: Joi.string().required(),\n  assertion_type: Joi.string().valid('contains', 'equals', 'regex', 'length', 'custom').required(),\n  assertion_value: Joi.string().required(),\n  description: Joi.string().max(500).optional().allow('')\n});\n\n// Security validation helpers\nexport function sanitizeInput(input: string): string {\n  return sanitizeHtml(input, {\n    allowedTags: [],\n    allowedAttributes: {}\n  });\n}\n\nexport function validateEmail(email: string): boolean {\n  return validator.isEmail(email);\n}\n\nexport function validateUrl(url: string): boolean {\n  return validator.isURL(url);\n}\n\n// Missing exports that are imported elsewhere\nexport function sanitizeRequestBody(req: Request, res: Response, next: NextFunction): void {\n  if (req.body && typeof req.body === 'object') {\n    req.body = sanitizeObjectInputs(req.body);\n  }\n  next();\n}\n\nexport function handleValidationErrors(req: Request, res: Response, next: NextFunction): void {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array()\n    });\n    return;\n  }\n  next();\n}\n\nexport function limitRequestSize(limit: number) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const contentLength = parseInt(req.get('content-length') || '0');\n    if (contentLength > limit) {\n      res.status(413).json({\n        error: 'Request entity too large',\n        maxSize: limit,\n        actualSize: contentLength\n      });\n      return;\n    }\n    next();\n  };\n}\n\nexport function validatePromptCard(req: Request, res: Response, next: NextFunction): void {\n  const { error, value } = promptCardValidation.validate(req.body);\n  if (error) {\n    res.status(400).json({\n      error: 'Validation failed',\n      details: error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message\n      }))\n    });\n    return;\n  }\n  req.body = value;\n  next();\n}\n\n// Helper function to sanitize object inputs recursively\nfunction sanitizeObjectInputs(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeInput(obj);\n  } else if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObjectInputs(item));\n  } else if (obj && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObjectInputs(value);\n    }\n    return sanitized;\n  }\n  return obj;\n}"],"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","ignoreList":[]}