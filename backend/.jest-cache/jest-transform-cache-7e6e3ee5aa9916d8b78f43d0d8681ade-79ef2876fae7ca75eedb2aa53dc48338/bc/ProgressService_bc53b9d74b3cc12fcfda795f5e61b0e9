f3ff279422e2c52e7ff5d3a82247e1f3
"use strict";

/* istanbul ignore next */
function cov_hx4yt3de2() {
  var path = "/workspaces/prompt-card-system/backend/src/services/websocket/ProgressService.ts";
  var hash = "bc725352e54c7e1ba06434217aadbd6706de8e73";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/websocket/ProgressService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 42
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 34
        }
      },
      "4": {
        start: {
          line: 6,
          column: 20
        },
        end: {
          line: 6,
          column: 40
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 16
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 21
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 44
        }
      },
      "14": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 39
        }
      },
      "15": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 32
        }
      },
      "16": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "17": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 35
        }
      },
      "18": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 37
        }
      },
      "19": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "20": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 50
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 58
        }
      },
      "22": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 58
        }
      },
      "23": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 96
        }
      },
      "24": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 46,
          column: 56
        }
      },
      "25": {
        start: {
          line: 47,
          column: 25
        },
        end: {
          line: 47,
          column: 41
        }
      },
      "26": {
        start: {
          line: 49,
          column: 33
        },
        end: {
          line: 50,
          column: 52
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "28": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 92
        }
      },
      "29": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "30": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 71
        }
      },
      "31": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "32": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "33": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 55
        }
      },
      "34": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "35": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 30
        }
      },
      "36": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 66
        }
      },
      "37": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "38": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 19
        }
      },
      "39": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 50
        }
      },
      "40": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 63
        }
      },
      "41": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 44
        }
      },
      "42": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 83
        }
      },
      "43": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "44": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 68
        }
      },
      "45": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 60
        }
      },
      "46": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 109,
          column: 15
        }
      },
      "47": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "48": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 55
        }
      },
      "49": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 75
        }
      },
      "50": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 89
        }
      },
      "51": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 97
        }
      },
      "52": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "53": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "54": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 56
        }
      },
      "55": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 78
        }
      },
      "56": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 93
        }
      },
      "57": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 99
        }
      },
      "58": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "59": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 126,
          column: 17
        }
      },
      "60": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 78
        }
      },
      "61": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "62": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 48
        }
      },
      "63": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 82
        }
      },
      "64": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 106
        }
      },
      "65": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "66": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 49
        }
      },
      "67": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 86
        }
      },
      "68": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 108
        }
      },
      "69": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "70": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 43
        }
      },
      "71": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 82
        }
      },
      "72": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 101
        }
      },
      "73": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 151,
          column: 15
        }
      },
      "74": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 44
        }
      },
      "75": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 86
        }
      },
      "76": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 103
        }
      },
      "77": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "78": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 94
        }
      },
      "79": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 56
        }
      },
      "80": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "81": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 81
        }
      },
      "82": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "83": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 60
        }
      },
      "84": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 34
        }
      },
      "85": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 47
        }
      },
      "86": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 64
        }
      },
      "87": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 38
        }
      },
      "88": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 34
        }
      },
      "89": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 35
        }
      },
      "90": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 40
        }
      },
      "91": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 34
        }
      },
      "92": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 34
        }
      },
      "93": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "94": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 43
        }
      },
      "95": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 37
        }
      },
      "96": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 34
        }
      },
      "97": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "98": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 44
        }
      },
      "99": {
        start: {
          line: 208,
          column: 22
        },
        end: {
          line: 208,
          column: 49
        }
      },
      "100": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 59
        }
      },
      "101": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "102": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 26
        }
      },
      "103": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 221,
          column: 16
        }
      },
      "104": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 42
        }
      },
      "105": {
        start: {
          line: 227,
          column: 26
        },
        end: {
          line: 227,
          column: 56
        }
      },
      "106": {
        start: {
          line: 228,
          column: 29
        },
        end: {
          line: 228,
          column: 30
        }
      },
      "107": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "108": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 231,
          column: 25
        }
      },
      "109": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 25
        }
      },
      "110": {
        start: {
          line: 233,
          column: 32
        },
        end: {
          line: 233,
          column: 41
        }
      },
      "111": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "112": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 237,
          column: 17
        }
      },
      "113": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 51
        }
      },
      "114": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 58
        }
      },
      "115": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "116": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 248,
          column: 17
        }
      },
      "117": {
        start: {
          line: 243,
          column: 20
        },
        end: {
          line: 243,
          column: 63
        }
      },
      "118": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 247,
          column: 71
        }
      },
      "119": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 46
        }
      },
      "120": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 32
        }
      },
      "121": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "122": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 104
        }
      },
      "123": {
        start: {
          line: 262,
          column: 27
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "124": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 26
        }
      },
      "125": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 93
        }
      },
      "126": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 288,
          column: 26
        }
      },
      "127": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 42
        }
      },
      "128": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 39
        }
      },
      "129": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 30
        }
      },
      "130": {
        start: {
          line: 295,
          column: 34
        },
        end: {
          line: 295,
          column: 48
        }
      },
      "131": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "132": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "133": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 51
        }
      },
      "134": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 55
        }
      },
      "135": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 51
        }
      },
      "136": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "137": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 55
        }
      },
      "138": {
        start: {
          line: 311,
          column: 24
        },
        end: {
          line: 311,
          column: 62
        }
      },
      "139": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 31
        }
      },
      "140": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "141": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 28
        }
      },
      "142": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "143": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 97
        }
      },
      "144": {
        start: {
          line: 326,
          column: 22
        },
        end: {
          line: 326,
          column: 24
        }
      },
      "145": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "146": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "147": {
        start: {
          line: 329,
          column: 28
        },
        end: {
          line: 329,
          column: 89
        }
      },
      "148": {
        start: {
          line: 329,
          column: 58
        },
        end: {
          line: 329,
          column: 68
        }
      },
      "149": {
        start: {
          line: 330,
          column: 28
        },
        end: {
          line: 330,
          column: 48
        }
      },
      "150": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 335,
          column: 18
        }
      },
      "151": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "152": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 63
        }
      },
      "153": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 53
        }
      },
      "154": {
        start: {
          line: 352,
          column: 22
        },
        end: {
          line: 352,
          column: 24
        }
      },
      "155": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "156": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "157": {
        start: {
          line: 355,
          column: 28
        },
        end: {
          line: 355,
          column: 89
        }
      },
      "158": {
        start: {
          line: 355,
          column: 58
        },
        end: {
          line: 355,
          column: 68
        }
      },
      "159": {
        start: {
          line: 356,
          column: 28
        },
        end: {
          line: 356,
          column: 48
        }
      },
      "160": {
        start: {
          line: 357,
          column: 28
        },
        end: {
          line: 357,
          column: 48
        }
      },
      "161": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 363,
          column: 18
        }
      },
      "162": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 21
        }
      },
      "163": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 377,
          column: 10
        }
      },
      "164": {
        start: {
          line: 375,
          column: 92
        },
        end: {
          line: 375,
          column: 110
        }
      },
      "165": {
        start: {
          line: 380,
          column: 0
        },
        end: {
          line: 380,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 35
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 45
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 26
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 31
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 84
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 38
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 90
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 25
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 96
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 97,
            column: 34
          }
        },
        loc: {
          start: {
            line: 97,
            column: 45
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 97
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 101,
            column: 40
          },
          end: {
            line: 101,
            column: 41
          }
        },
        loc: {
          start: {
            line: 101,
            column: 57
          },
          end: {
            line: 109,
            column: 13
          }
        },
        line: 101
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 111,
            column: 42
          },
          end: {
            line: 111,
            column: 43
          }
        },
        loc: {
          start: {
            line: 111,
            column: 59
          },
          end: {
            line: 119,
            column: 13
          }
        },
        line: 111
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 121,
            column: 38
          },
          end: {
            line: 121,
            column: 39
          }
        },
        loc: {
          start: {
            line: 121,
            column: 55
          },
          end: {
            line: 127,
            column: 13
          }
        },
        line: 121
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 129,
            column: 52
          },
          end: {
            line: 129,
            column: 53
          }
        },
        loc: {
          start: {
            line: 129,
            column: 58
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 129
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 135,
            column: 54
          },
          end: {
            line: 135,
            column: 55
          }
        },
        loc: {
          start: {
            line: 135,
            column: 60
          },
          end: {
            line: 139,
            column: 13
          }
        },
        line: 135
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 141,
            column: 47
          },
          end: {
            line: 141,
            column: 48
          }
        },
        loc: {
          start: {
            line: 141,
            column: 53
          },
          end: {
            line: 145,
            column: 13
          }
        },
        line: 141
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 147,
            column: 49
          },
          end: {
            line: 147,
            column: 50
          }
        },
        loc: {
          start: {
            line: 147,
            column: 55
          },
          end: {
            line: 151,
            column: 13
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 153,
            column: 36
          },
          end: {
            line: 153,
            column: 37
          }
        },
        loc: {
          start: {
            line: 153,
            column: 48
          },
          end: {
            line: 156,
            column: 13
          }
        },
        line: 153
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 158,
            column: 31
          },
          end: {
            line: 158,
            column: 32
          }
        },
        loc: {
          start: {
            line: 158,
            column: 42
          },
          end: {
            line: 160,
            column: 13
          }
        },
        line: 158
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 29
          }
        },
        loc: {
          start: {
            line: 163,
            column: 39
          },
          end: {
            line: 165,
            column: 9
          }
        },
        line: 163
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 34
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 170
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 40
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 176
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 21
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 182
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 14
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 188
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 36
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 204
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 26
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 218
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 219,
            column: 38
          },
          end: {
            line: 219,
            column: 39
          }
        },
        loc: {
          start: {
            line: 219,
            column: 44
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 219
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 29
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 226
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 234,
            column: 30
          }
        },
        loc: {
          start: {
            line: 234,
            column: 36
          },
          end: {
            line: 239,
            column: 13
          }
        },
        line: 234
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 31
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 260
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 23
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 276
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 28
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 284
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 285,
            column: 21
          }
        },
        loc: {
          start: {
            line: 285,
            column: 26
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 285
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 293
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 42
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 307
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 26
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 325
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 329,
            column: 43
          },
          end: {
            line: 329,
            column: 44
          }
        },
        loc: {
          start: {
            line: 329,
            column: 58
          },
          end: {
            line: 329,
            column: 68
          }
        },
        line: 329
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 30
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 345
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 26
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 351
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 355,
            column: 43
          },
          end: {
            line: 355,
            column: 44
          }
        },
        loc: {
          start: {
            line: 355,
            column: 58
          },
          end: {
            line: 355,
            column: 68
          }
        },
        line: 355
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 25
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 371
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 375,
            column: 76
          },
          end: {
            line: 375,
            column: 77
          }
        },
        loc: {
          start: {
            line: 375,
            column: 92
          },
          end: {
            line: 375,
            column: 110
          }
        },
        line: 375
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 33
          },
          end: {
            line: 50,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 43
          }
        }, {
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 50,
            column: 52
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 66
          }
        }, {
          start: {
            line: 60,
            column: 70
          },
          end: {
            line: 60,
            column: 71
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 25
          },
          end: {
            line: 73,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 25
          },
          end: {
            line: 73,
            column: 61
          }
        }, {
          start: {
            line: 73,
            column: 65
          },
          end: {
            line: 73,
            column: 66
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 77
          }
        }, {
          start: {
            line: 91,
            column: 81
          },
          end: {
            line: 91,
            column: 82
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 102,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 102,
            column: 51
          }
        }, {
          start: {
            line: 102,
            column: 55
          },
          end: {
            line: 102,
            column: 77
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 112,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 112,
            column: 51
          }
        }, {
          start: {
            line: 112,
            column: 55
          },
          end: {
            line: 112,
            column: 77
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 126,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 126,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 122,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 122,
            column: 51
          }
        }, {
          start: {
            line: 122,
            column: 55
          },
          end: {
            line: 122,
            column: 77
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "13": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "14": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "15": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 231,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 231,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        }, {
          start: {
            line: 245,
            column: 21
          },
          end: {
            line: 248,
            column: 17
          }
        }],
        line: 242
      },
      "18": {
        loc: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "19": {
        loc: {
          start: {
            line: 264,
            column: 24
          },
          end: {
            line: 266,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 71
          }
        }, {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 266,
            column: 33
          }
        }],
        line: 264
      },
      "20": {
        loc: {
          start: {
            line: 267,
            column: 25
          },
          end: {
            line: 269,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 268,
            column: 71
          }
        }, {
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 269,
            column: 34
          }
        }],
        line: 267
      },
      "21": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "22": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "23": {
        loc: {
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "24": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "25": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "26": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "27": {
        loc: {
          start: {
            line: 346,
            column: 15
          },
          end: {
            line: 346,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 15
          },
          end: {
            line: 346,
            column: 44
          }
        }, {
          start: {
            line: 346,
            column: 48
          },
          end: {
            line: 346,
            column: 52
          }
        }],
        line: 346
      },
      "28": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/websocket/ProgressService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/websocket/ProgressService.ts"],
      sourcesContent: ["import { Server as SocketIOServer } from 'socket.io';\nimport { ExecutionProgress } from '../testing/TestQueueManager';\nimport { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { LRUCache } from 'lru-cache';\nimport { promisify } from 'util';\nimport { setTimeout } from 'timers/promises';\n\nexport interface TestExecutionResult {\n  execution_id: string;\n  test_case_id: number;\n  passed: boolean;\n  llm_output: string;\n  execution_time_ms: number;\n  model: string;\n  prompt_used: string;\n  created_at: Date;\n}\n\nexport class ProgressService extends EventEmitter {\n  private io: SocketIOServer;\n  private connectedClients: Map<string, Set<string>> = new Map(); // socketId -> subscribed executionIds\n  private messageQueue: Map<string, any[]> = new Map(); // Room -> queued messages\n  private progressCache: LRUCache<string, ExecutionProgress>;\n  private performanceMetrics: Map<string, number[]>;\n  private batchTimer: NodeJS.Timeout | null = null;\n  private compressionEnabled: boolean;\n  private rateLimitMap: Map<string, number> = new Map();\n  private lastActivity: Map<string, number> = new Map();\n\n  constructor(io: SocketIOServer) {\n    super();\n    this.io = io;\n    \n    // Initialize performance optimizations\n    this.progressCache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.compressionEnabled = true;\n    \n    // Configure Socket.IO for better performance\n    this.optimizeSocketIO();\n    \n    this.setupEventHandlers();\n    this.startBatchProcessor();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * Emit progress update to subscribed clients with batching\n   */\n  emitProgressUpdate(progress: ExecutionProgress): void {\n    const startTime = performance.now();\n    const roomName = `test-${progress.job_id}`;\n    \n    // Cache the progress\n    this.progressCache.set(progress.job_id, progress);\n    \n    // Add to batch queue for efficient processing\n    this.queueMessage(roomName, 'progress', progress);\n    \n    // Track performance\n    this.trackPerformance('emitProgressUpdate', performance.now() - startTime);\n  }\n\n  /**\n   * Emit test result to subscribed clients with compression\n   */\n  emitTestResult(testId: string, result: TestExecutionResult): void {\n    const startTime = performance.now();\n    const roomName = `test-${testId}`;\n    \n    // Compress large results if enabled\n    const compressedResult = this.compressionEnabled ? \n      this.compressTestResult(result) : result;\n    \n    this.queueMessage(roomName, 'test-complete', compressedResult);\n    \n    // Track performance\n    this.trackPerformance('emitTestResult', performance.now() - startTime);\n  }\n\n  /**\n   * Emit system resource updates with rate limiting\n   */\n  emitResourceUpdate(resources: any): void {\n    const now = Date.now();\n    const lastEmit = this.lastActivity.get('system-resources') || 0;\n    \n    // Rate limit to prevent overwhelming clients (max 1 per second)\n    if (now - lastEmit < 1000) {\n      return;\n    }\n    \n    this.lastActivity.set('system-resources', now);\n    this.queueMessage('system-resources', 'system-resources', resources);\n  }\n\n  /**\n   * Emit queue statistics updates with rate limiting\n   */\n  emitQueueStats(stats: any): void {\n    const now = Date.now();\n    const lastEmit = this.lastActivity.get('queue-stats') || 0;\n    \n    // Rate limit to prevent overwhelming clients (max 1 per 2 seconds)\n    if (now - lastEmit < 2000) {\n      return;\n    }\n    \n    this.lastActivity.set('queue-stats', now);\n    this.queueMessage('queue-stats', 'queue-stats', stats);\n  }\n\n  /**\n   * Get connected clients count\n   */\n  getConnectedClientsCount(): number {\n    return this.io.sockets.sockets.size;\n  }\n\n  /**\n   * Get subscriptions for a specific execution\n   */\n  getSubscriptionCount(executionId: string): number {\n    return this.io.sockets.adapter.rooms.get(`test-${executionId}`)?.size || 0;\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    this.io.on('connection', (socket) => {\n      console.log(`WebSocket client connected: ${socket.id}`);\n      this.connectedClients.set(socket.id, new Set());\n\n      // Handle test execution subscription\n      socket.on('subscribe-test', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          socket.join(`test-${executionId}`);\n          this.connectedClients.get(socket.id)?.add(executionId);\n          console.log(`Client ${socket.id} subscribed to test ${executionId}`);\n          \n          // Send acknowledgment\n          socket.emit('subscription-confirmed', { executionId, status: 'subscribed' });\n        }\n      });\n\n      // Handle test execution unsubscription\n      socket.on('unsubscribe-test', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          socket.leave(`test-${executionId}`);\n          this.connectedClients.get(socket.id)?.delete(executionId);\n          console.log(`Client ${socket.id} unsubscribed from test ${executionId}`);\n          \n          // Send acknowledgment\n          socket.emit('subscription-confirmed', { executionId, status: 'unsubscribed' });\n        }\n      });\n\n      // Handle request for current progress\n      socket.on('get-progress', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          // This would typically query the TestQueueManager for current progress\n          // For now, we'll emit a response indicating the request was received\n          socket.emit('progress-request-received', { executionId });\n        }\n      });\n\n      // Handle system resource subscription\n      socket.on('subscribe-system-resources', () => {\n        socket.join('system-resources');\n        console.log(`Client ${socket.id} subscribed to system resources`);\n        socket.emit('subscription-confirmed', { type: 'system-resources', status: 'subscribed' });\n      });\n\n      // Handle system resource unsubscription\n      socket.on('unsubscribe-system-resources', () => {\n        socket.leave('system-resources');\n        console.log(`Client ${socket.id} unsubscribed from system resources`);\n        socket.emit('subscription-confirmed', { type: 'system-resources', status: 'unsubscribed' });\n      });\n\n      // Handle queue statistics subscription\n      socket.on('subscribe-queue-stats', () => {\n        socket.join('queue-stats');\n        console.log(`Client ${socket.id} subscribed to queue statistics`);\n        socket.emit('subscription-confirmed', { type: 'queue-stats', status: 'subscribed' });\n      });\n\n      // Handle queue statistics unsubscription\n      socket.on('unsubscribe-queue-stats', () => {\n        socket.leave('queue-stats');\n        console.log(`Client ${socket.id} unsubscribed from queue statistics`);\n        socket.emit('subscription-confirmed', { type: 'queue-stats', status: 'unsubscribed' });\n      });\n\n      // Handle client disconnect\n      socket.on('disconnect', (reason) => {\n        console.log(`WebSocket client disconnected: ${socket.id}, reason: ${reason}`);\n        this.connectedClients.delete(socket.id);\n      });\n\n      // Handle errors\n      socket.on('error', (error) => {\n        console.error(`WebSocket error for client ${socket.id}:`, error);\n      });\n    });\n\n    // Handle adapter errors\n    this.io.on('error', (error) => {\n      console.error('Socket.IO server error:', error);\n    });\n  }\n\n  /**\n   * Broadcast message to all connected clients\n   */\n  broadcastMessage(event: string, data: any): void {\n    this.io.emit(event, data);\n  }\n\n  /**\n   * Send message to specific client\n   */\n  sendToClient(socketId: string, event: string, data: any): void {\n    this.io.to(socketId).emit(event, data);\n  }\n\n  /**\n   * Get all active rooms (subscriptions)\n   */\n  getActiveRooms(): string[] {\n    return Array.from(this.io.sockets.adapter.rooms.keys());\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.connectedClients.clear();\n    this.messageQueue.clear();\n    this.progressCache.clear();\n    this.performanceMetrics.clear();\n    this.rateLimitMap.clear();\n    this.lastActivity.clear();\n    \n    if (this.batchTimer) {\n      clearInterval(this.batchTimer);\n    }\n    \n    this.io.removeAllListeners();\n    this.removeAllListeners();\n  }\n  \n  /**\n   * Queue message for batch processing\n   */\n  private queueMessage(room: string, event: string, data: any): void {\n    if (!this.messageQueue.has(room)) {\n      this.messageQueue.set(room, []);\n    }\n    \n    const queue = this.messageQueue.get(room)!;\n    queue.push({ event, data, timestamp: Date.now() });\n    \n    // Limit queue size to prevent memory issues\n    if (queue.length > 100) {\n      queue.shift();\n    }\n  }\n  \n  /**\n   * Start batch processor for efficient message delivery\n   */\n  private startBatchProcessor(): void {\n    this.batchTimer = setInterval(() => {\n      this.processBatchedMessages();\n    }, 100); // Process every 100ms\n  }\n  \n  /**\n   * Process batched messages\n   */\n  private processBatchedMessages(): void {\n    const startTime = performance.now();\n    let processedCount = 0;\n    \n    for (const [room, messages] of this.messageQueue) {\n      if (messages.length === 0) continue;\n      \n      // Group messages by event type\n      const eventGroups = new Map<string, any[]>();\n      \n      messages.forEach(msg => {\n        if (!eventGroups.has(msg.event)) {\n          eventGroups.set(msg.event, []);\n        }\n        eventGroups.get(msg.event)!.push(msg.data);\n      });\n      \n      // Send grouped messages\n      for (const [event, dataArray] of eventGroups) {\n        if (dataArray.length === 1) {\n          this.io.to(room).emit(event, dataArray[0]);\n        } else {\n          // Send as batch if multiple messages\n          this.io.to(room).emit(`${event}-batch`, dataArray);\n        }\n      }\n      \n      processedCount += messages.length;\n      messages.length = 0; // Clear the queue\n    }\n    \n    if (processedCount > 0) {\n      this.trackPerformance('processBatchedMessages', performance.now() - startTime);\n    }\n  }\n  \n  /**\n   * Compress test result for efficient transmission\n   */\n  private compressTestResult(result: TestExecutionResult): any {\n    // Create a compressed version by removing or truncating large fields\n    const compressed = {\n      ...result,\n      llm_output: result.llm_output.length > 1000 ? \n        result.llm_output.substring(0, 1000) + '...[truncated]' : \n        result.llm_output,\n      prompt_used: result.prompt_used.length > 500 ? \n        result.prompt_used.substring(0, 500) + '...[truncated]' : \n        result.prompt_used\n    };\n    \n    return compressed;\n  }\n  \n  /**\n   * Optimize Socket.IO configuration\n   */\n  private optimizeSocketIO(): void {\n    // Note: In Socket.IO v4, these configurations are set during server initialization\n    // The engine properties are read-only and cannot be modified after creation\n    console.log('WebSocket optimizations applied (using default Socket.IO v4 settings)');\n  }\n  \n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    setInterval(() => {\n      this.cleanupInactiveClients();\n      this.logPerformanceStats();\n    }, 1000 * 60 * 5); // Every 5 minutes\n  }\n  \n  /**\n   * Clean up inactive clients\n   */\n  private cleanupInactiveClients(): void {\n    const now = Date.now();\n    const inactiveThreshold = 1000 * 60 * 10; // 10 minutes\n    \n    for (const [clientId, lastActivity] of this.lastActivity) {\n      if (now - lastActivity > inactiveThreshold) {\n        this.lastActivity.delete(clientId);\n        this.connectedClients.delete(clientId);\n        this.rateLimitMap.delete(clientId);\n      }\n    }\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 50) { // 50ms threshold\n      console.warn(`Slow WebSocket operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Log performance statistics\n   */\n  private logPerformanceStats(): void {\n    const stats: Record<string, any> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    if (Object.keys(stats).length > 0) {\n      console.log('WebSocket Performance Stats:', stats);\n    }\n  }\n  \n  /**\n   * Get current progress for a job\n   */\n  public getCurrentProgress(jobId: string): ExecutionProgress | null {\n    return this.progressCache.get(jobId) || null;\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Get connection statistics\n   */\n  public getConnectionStats(): {\n    totalConnections: number;\n    activeRooms: number;\n    messageQueueSize: number;\n    cacheSize: number;\n  } {\n    return {\n      totalConnections: this.connectedClients.size,\n      activeRooms: this.getActiveRooms().length,\n      messageQueueSize: Array.from(this.messageQueue.values()).reduce((sum, queue) => sum + queue.length, 0),\n      cacheSize: this.progressCache.size\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bc725352e54c7e1ba06434217aadbd6706de8e73"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hx4yt3de2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hx4yt3de2();
cov_hx4yt3de2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_hx4yt3de2().s[1]++;
exports.ProgressService = void 0;
const perf_hooks_1 =
/* istanbul ignore next */
(cov_hx4yt3de2().s[2]++, require("perf_hooks"));
const events_1 =
/* istanbul ignore next */
(cov_hx4yt3de2().s[3]++, require("events"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_hx4yt3de2().s[4]++, require("lru-cache"));
class ProgressService extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(io) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[0]++;
    cov_hx4yt3de2().s[5]++;
    super();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[6]++;
    this.connectedClients = new Map(); // socketId -> subscribed executionIds
    /* istanbul ignore next */
    cov_hx4yt3de2().s[7]++;
    this.messageQueue = new Map(); // Room -> queued messages
    /* istanbul ignore next */
    cov_hx4yt3de2().s[8]++;
    this.batchTimer = null;
    /* istanbul ignore next */
    cov_hx4yt3de2().s[9]++;
    this.rateLimitMap = new Map();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[10]++;
    this.lastActivity = new Map();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[11]++;
    this.io = io;
    // Initialize performance optimizations
    /* istanbul ignore next */
    cov_hx4yt3de2().s[12]++;
    this.progressCache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 5 // 5 minutes
    });
    /* istanbul ignore next */
    cov_hx4yt3de2().s[13]++;
    this.performanceMetrics = new Map();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[14]++;
    this.compressionEnabled = true;
    // Configure Socket.IO for better performance
    /* istanbul ignore next */
    cov_hx4yt3de2().s[15]++;
    this.optimizeSocketIO();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[16]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[17]++;
    this.startBatchProcessor();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[18]++;
    this.startHealthMonitoring();
  }
  /**
   * Emit progress update to subscribed clients with batching
   */
  emitProgressUpdate(progress) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[19]++, perf_hooks_1.performance.now());
    const roomName =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[20]++, `test-${progress.job_id}`);
    // Cache the progress
    /* istanbul ignore next */
    cov_hx4yt3de2().s[21]++;
    this.progressCache.set(progress.job_id, progress);
    // Add to batch queue for efficient processing
    /* istanbul ignore next */
    cov_hx4yt3de2().s[22]++;
    this.queueMessage(roomName, 'progress', progress);
    // Track performance
    /* istanbul ignore next */
    cov_hx4yt3de2().s[23]++;
    this.trackPerformance('emitProgressUpdate', perf_hooks_1.performance.now() - startTime);
  }
  /**
   * Emit test result to subscribed clients with compression
   */
  emitTestResult(testId, result) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[24]++, perf_hooks_1.performance.now());
    const roomName =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[25]++, `test-${testId}`);
    // Compress large results if enabled
    const compressedResult =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[26]++, this.compressionEnabled ?
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[0][0]++, this.compressTestResult(result)) :
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[0][1]++, result));
    /* istanbul ignore next */
    cov_hx4yt3de2().s[27]++;
    this.queueMessage(roomName, 'test-complete', compressedResult);
    // Track performance
    /* istanbul ignore next */
    cov_hx4yt3de2().s[28]++;
    this.trackPerformance('emitTestResult', perf_hooks_1.performance.now() - startTime);
  }
  /**
   * Emit system resource updates with rate limiting
   */
  emitResourceUpdate(resources) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[3]++;
    const now =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[29]++, Date.now());
    const lastEmit =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[30]++,
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[1][0]++, this.lastActivity.get('system-resources')) ||
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[1][1]++, 0));
    // Rate limit to prevent overwhelming clients (max 1 per second)
    /* istanbul ignore next */
    cov_hx4yt3de2().s[31]++;
    if (now - lastEmit < 1000) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[2][0]++;
      cov_hx4yt3de2().s[32]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[2][1]++;
    }
    cov_hx4yt3de2().s[33]++;
    this.lastActivity.set('system-resources', now);
    /* istanbul ignore next */
    cov_hx4yt3de2().s[34]++;
    this.queueMessage('system-resources', 'system-resources', resources);
  }
  /**
   * Emit queue statistics updates with rate limiting
   */
  emitQueueStats(stats) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[4]++;
    const now =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[35]++, Date.now());
    const lastEmit =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[36]++,
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[3][0]++, this.lastActivity.get('queue-stats')) ||
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[3][1]++, 0));
    // Rate limit to prevent overwhelming clients (max 1 per 2 seconds)
    /* istanbul ignore next */
    cov_hx4yt3de2().s[37]++;
    if (now - lastEmit < 2000) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[4][0]++;
      cov_hx4yt3de2().s[38]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[4][1]++;
    }
    cov_hx4yt3de2().s[39]++;
    this.lastActivity.set('queue-stats', now);
    /* istanbul ignore next */
    cov_hx4yt3de2().s[40]++;
    this.queueMessage('queue-stats', 'queue-stats', stats);
  }
  /**
   * Get connected clients count
   */
  getConnectedClientsCount() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[5]++;
    cov_hx4yt3de2().s[41]++;
    return this.io.sockets.sockets.size;
  }
  /**
   * Get subscriptions for a specific execution
   */
  getSubscriptionCount(executionId) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[6]++;
    cov_hx4yt3de2().s[42]++;
    return /* istanbul ignore next */(cov_hx4yt3de2().b[5][0]++, this.io.sockets.adapter.rooms.get(`test-${executionId}`)?.size) ||
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[5][1]++, 0);
  }
  /**
   * Setup WebSocket event handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[7]++;
    cov_hx4yt3de2().s[43]++;
    this.io.on('connection', socket => {
      /* istanbul ignore next */
      cov_hx4yt3de2().f[8]++;
      cov_hx4yt3de2().s[44]++;
      console.log(`WebSocket client connected: ${socket.id}`);
      /* istanbul ignore next */
      cov_hx4yt3de2().s[45]++;
      this.connectedClients.set(socket.id, new Set());
      // Handle test execution subscription
      /* istanbul ignore next */
      cov_hx4yt3de2().s[46]++;
      socket.on('subscribe-test', executionId => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[9]++;
        cov_hx4yt3de2().s[47]++;
        if (
        /* istanbul ignore next */
        (cov_hx4yt3de2().b[7][0]++, typeof executionId === 'string') &&
        /* istanbul ignore next */
        (cov_hx4yt3de2().b[7][1]++, executionId.length > 0)) {
          /* istanbul ignore next */
          cov_hx4yt3de2().b[6][0]++;
          cov_hx4yt3de2().s[48]++;
          socket.join(`test-${executionId}`);
          /* istanbul ignore next */
          cov_hx4yt3de2().s[49]++;
          this.connectedClients.get(socket.id)?.add(executionId);
          /* istanbul ignore next */
          cov_hx4yt3de2().s[50]++;
          console.log(`Client ${socket.id} subscribed to test ${executionId}`);
          // Send acknowledgment
          /* istanbul ignore next */
          cov_hx4yt3de2().s[51]++;
          socket.emit('subscription-confirmed', {
            executionId,
            status: 'subscribed'
          });
        } else
        /* istanbul ignore next */
        {
          cov_hx4yt3de2().b[6][1]++;
        }
      });
      // Handle test execution unsubscription
      /* istanbul ignore next */
      cov_hx4yt3de2().s[52]++;
      socket.on('unsubscribe-test', executionId => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[10]++;
        cov_hx4yt3de2().s[53]++;
        if (
        /* istanbul ignore next */
        (cov_hx4yt3de2().b[9][0]++, typeof executionId === 'string') &&
        /* istanbul ignore next */
        (cov_hx4yt3de2().b[9][1]++, executionId.length > 0)) {
          /* istanbul ignore next */
          cov_hx4yt3de2().b[8][0]++;
          cov_hx4yt3de2().s[54]++;
          socket.leave(`test-${executionId}`);
          /* istanbul ignore next */
          cov_hx4yt3de2().s[55]++;
          this.connectedClients.get(socket.id)?.delete(executionId);
          /* istanbul ignore next */
          cov_hx4yt3de2().s[56]++;
          console.log(`Client ${socket.id} unsubscribed from test ${executionId}`);
          // Send acknowledgment
          /* istanbul ignore next */
          cov_hx4yt3de2().s[57]++;
          socket.emit('subscription-confirmed', {
            executionId,
            status: 'unsubscribed'
          });
        } else
        /* istanbul ignore next */
        {
          cov_hx4yt3de2().b[8][1]++;
        }
      });
      // Handle request for current progress
      /* istanbul ignore next */
      cov_hx4yt3de2().s[58]++;
      socket.on('get-progress', executionId => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[11]++;
        cov_hx4yt3de2().s[59]++;
        if (
        /* istanbul ignore next */
        (cov_hx4yt3de2().b[11][0]++, typeof executionId === 'string') &&
        /* istanbul ignore next */
        (cov_hx4yt3de2().b[11][1]++, executionId.length > 0)) {
          /* istanbul ignore next */
          cov_hx4yt3de2().b[10][0]++;
          cov_hx4yt3de2().s[60]++;
          // This would typically query the TestQueueManager for current progress
          // For now, we'll emit a response indicating the request was received
          socket.emit('progress-request-received', {
            executionId
          });
        } else
        /* istanbul ignore next */
        {
          cov_hx4yt3de2().b[10][1]++;
        }
      });
      // Handle system resource subscription
      /* istanbul ignore next */
      cov_hx4yt3de2().s[61]++;
      socket.on('subscribe-system-resources', () => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[12]++;
        cov_hx4yt3de2().s[62]++;
        socket.join('system-resources');
        /* istanbul ignore next */
        cov_hx4yt3de2().s[63]++;
        console.log(`Client ${socket.id} subscribed to system resources`);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[64]++;
        socket.emit('subscription-confirmed', {
          type: 'system-resources',
          status: 'subscribed'
        });
      });
      // Handle system resource unsubscription
      /* istanbul ignore next */
      cov_hx4yt3de2().s[65]++;
      socket.on('unsubscribe-system-resources', () => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[13]++;
        cov_hx4yt3de2().s[66]++;
        socket.leave('system-resources');
        /* istanbul ignore next */
        cov_hx4yt3de2().s[67]++;
        console.log(`Client ${socket.id} unsubscribed from system resources`);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[68]++;
        socket.emit('subscription-confirmed', {
          type: 'system-resources',
          status: 'unsubscribed'
        });
      });
      // Handle queue statistics subscription
      /* istanbul ignore next */
      cov_hx4yt3de2().s[69]++;
      socket.on('subscribe-queue-stats', () => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[14]++;
        cov_hx4yt3de2().s[70]++;
        socket.join('queue-stats');
        /* istanbul ignore next */
        cov_hx4yt3de2().s[71]++;
        console.log(`Client ${socket.id} subscribed to queue statistics`);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[72]++;
        socket.emit('subscription-confirmed', {
          type: 'queue-stats',
          status: 'subscribed'
        });
      });
      // Handle queue statistics unsubscription
      /* istanbul ignore next */
      cov_hx4yt3de2().s[73]++;
      socket.on('unsubscribe-queue-stats', () => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[15]++;
        cov_hx4yt3de2().s[74]++;
        socket.leave('queue-stats');
        /* istanbul ignore next */
        cov_hx4yt3de2().s[75]++;
        console.log(`Client ${socket.id} unsubscribed from queue statistics`);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[76]++;
        socket.emit('subscription-confirmed', {
          type: 'queue-stats',
          status: 'unsubscribed'
        });
      });
      // Handle client disconnect
      /* istanbul ignore next */
      cov_hx4yt3de2().s[77]++;
      socket.on('disconnect', reason => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[16]++;
        cov_hx4yt3de2().s[78]++;
        console.log(`WebSocket client disconnected: ${socket.id}, reason: ${reason}`);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[79]++;
        this.connectedClients.delete(socket.id);
      });
      // Handle errors
      /* istanbul ignore next */
      cov_hx4yt3de2().s[80]++;
      socket.on('error', error => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[17]++;
        cov_hx4yt3de2().s[81]++;
        console.error(`WebSocket error for client ${socket.id}:`, error);
      });
    });
    // Handle adapter errors
    /* istanbul ignore next */
    cov_hx4yt3de2().s[82]++;
    this.io.on('error', error => {
      /* istanbul ignore next */
      cov_hx4yt3de2().f[18]++;
      cov_hx4yt3de2().s[83]++;
      console.error('Socket.IO server error:', error);
    });
  }
  /**
   * Broadcast message to all connected clients
   */
  broadcastMessage(event, data) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[19]++;
    cov_hx4yt3de2().s[84]++;
    this.io.emit(event, data);
  }
  /**
   * Send message to specific client
   */
  sendToClient(socketId, event, data) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[20]++;
    cov_hx4yt3de2().s[85]++;
    this.io.to(socketId).emit(event, data);
  }
  /**
   * Get all active rooms (subscriptions)
   */
  getActiveRooms() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[21]++;
    cov_hx4yt3de2().s[86]++;
    return Array.from(this.io.sockets.adapter.rooms.keys());
  }
  /**
   * Cleanup resources
   */
  destroy() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[22]++;
    cov_hx4yt3de2().s[87]++;
    this.connectedClients.clear();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[88]++;
    this.messageQueue.clear();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[89]++;
    this.progressCache.clear();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[90]++;
    this.performanceMetrics.clear();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[91]++;
    this.rateLimitMap.clear();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[92]++;
    this.lastActivity.clear();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[93]++;
    if (this.batchTimer) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[12][0]++;
      cov_hx4yt3de2().s[94]++;
      clearInterval(this.batchTimer);
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[12][1]++;
    }
    cov_hx4yt3de2().s[95]++;
    this.io.removeAllListeners();
    /* istanbul ignore next */
    cov_hx4yt3de2().s[96]++;
    this.removeAllListeners();
  }
  /**
   * Queue message for batch processing
   */
  queueMessage(room, event, data) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[23]++;
    cov_hx4yt3de2().s[97]++;
    if (!this.messageQueue.has(room)) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[13][0]++;
      cov_hx4yt3de2().s[98]++;
      this.messageQueue.set(room, []);
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[13][1]++;
    }
    const queue =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[99]++, this.messageQueue.get(room));
    /* istanbul ignore next */
    cov_hx4yt3de2().s[100]++;
    queue.push({
      event,
      data,
      timestamp: Date.now()
    });
    // Limit queue size to prevent memory issues
    /* istanbul ignore next */
    cov_hx4yt3de2().s[101]++;
    if (queue.length > 100) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[14][0]++;
      cov_hx4yt3de2().s[102]++;
      queue.shift();
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[14][1]++;
    }
  }
  /**
   * Start batch processor for efficient message delivery
   */
  startBatchProcessor() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[24]++;
    cov_hx4yt3de2().s[103]++;
    this.batchTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_hx4yt3de2().f[25]++;
      cov_hx4yt3de2().s[104]++;
      this.processBatchedMessages();
    }, 100); // Process every 100ms
  }
  /**
   * Process batched messages
   */
  processBatchedMessages() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[26]++;
    const startTime =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[105]++, perf_hooks_1.performance.now());
    let processedCount =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[106]++, 0);
    /* istanbul ignore next */
    cov_hx4yt3de2().s[107]++;
    for (const [room, messages] of this.messageQueue) {
      /* istanbul ignore next */
      cov_hx4yt3de2().s[108]++;
      if (messages.length === 0) {
        /* istanbul ignore next */
        cov_hx4yt3de2().b[15][0]++;
        cov_hx4yt3de2().s[109]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_hx4yt3de2().b[15][1]++;
      }
      // Group messages by event type
      const eventGroups =
      /* istanbul ignore next */
      (cov_hx4yt3de2().s[110]++, new Map());
      /* istanbul ignore next */
      cov_hx4yt3de2().s[111]++;
      messages.forEach(msg => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[27]++;
        cov_hx4yt3de2().s[112]++;
        if (!eventGroups.has(msg.event)) {
          /* istanbul ignore next */
          cov_hx4yt3de2().b[16][0]++;
          cov_hx4yt3de2().s[113]++;
          eventGroups.set(msg.event, []);
        } else
        /* istanbul ignore next */
        {
          cov_hx4yt3de2().b[16][1]++;
        }
        cov_hx4yt3de2().s[114]++;
        eventGroups.get(msg.event).push(msg.data);
      });
      // Send grouped messages
      /* istanbul ignore next */
      cov_hx4yt3de2().s[115]++;
      for (const [event, dataArray] of eventGroups) {
        /* istanbul ignore next */
        cov_hx4yt3de2().s[116]++;
        if (dataArray.length === 1) {
          /* istanbul ignore next */
          cov_hx4yt3de2().b[17][0]++;
          cov_hx4yt3de2().s[117]++;
          this.io.to(room).emit(event, dataArray[0]);
        } else {
          /* istanbul ignore next */
          cov_hx4yt3de2().b[17][1]++;
          cov_hx4yt3de2().s[118]++;
          // Send as batch if multiple messages
          this.io.to(room).emit(`${event}-batch`, dataArray);
        }
      }
      /* istanbul ignore next */
      cov_hx4yt3de2().s[119]++;
      processedCount += messages.length;
      /* istanbul ignore next */
      cov_hx4yt3de2().s[120]++;
      messages.length = 0; // Clear the queue
    }
    /* istanbul ignore next */
    cov_hx4yt3de2().s[121]++;
    if (processedCount > 0) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[18][0]++;
      cov_hx4yt3de2().s[122]++;
      this.trackPerformance('processBatchedMessages', perf_hooks_1.performance.now() - startTime);
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[18][1]++;
    }
  }
  /**
   * Compress test result for efficient transmission
   */
  compressTestResult(result) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[28]++;
    // Create a compressed version by removing or truncating large fields
    const compressed =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[123]++, {
      ...result,
      llm_output: result.llm_output.length > 1000 ?
      /* istanbul ignore next */
      (cov_hx4yt3de2().b[19][0]++, result.llm_output.substring(0, 1000) + '...[truncated]') :
      /* istanbul ignore next */
      (cov_hx4yt3de2().b[19][1]++, result.llm_output),
      prompt_used: result.prompt_used.length > 500 ?
      /* istanbul ignore next */
      (cov_hx4yt3de2().b[20][0]++, result.prompt_used.substring(0, 500) + '...[truncated]') :
      /* istanbul ignore next */
      (cov_hx4yt3de2().b[20][1]++, result.prompt_used)
    });
    /* istanbul ignore next */
    cov_hx4yt3de2().s[124]++;
    return compressed;
  }
  /**
   * Optimize Socket.IO configuration
   */
  optimizeSocketIO() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[29]++;
    cov_hx4yt3de2().s[125]++;
    // Note: In Socket.IO v4, these configurations are set during server initialization
    // The engine properties are read-only and cannot be modified after creation
    console.log('WebSocket optimizations applied (using default Socket.IO v4 settings)');
  }
  /**
   * Start health monitoring
   */
  startHealthMonitoring() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[30]++;
    cov_hx4yt3de2().s[126]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_hx4yt3de2().f[31]++;
      cov_hx4yt3de2().s[127]++;
      this.cleanupInactiveClients();
      /* istanbul ignore next */
      cov_hx4yt3de2().s[128]++;
      this.logPerformanceStats();
    }, 1000 * 60 * 5); // Every 5 minutes
  }
  /**
   * Clean up inactive clients
   */
  cleanupInactiveClients() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[32]++;
    const now =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[129]++, Date.now());
    const inactiveThreshold =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[130]++, 1000 * 60 * 10); // 10 minutes
    /* istanbul ignore next */
    cov_hx4yt3de2().s[131]++;
    for (const [clientId, lastActivity] of this.lastActivity) {
      /* istanbul ignore next */
      cov_hx4yt3de2().s[132]++;
      if (now - lastActivity > inactiveThreshold) {
        /* istanbul ignore next */
        cov_hx4yt3de2().b[21][0]++;
        cov_hx4yt3de2().s[133]++;
        this.lastActivity.delete(clientId);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[134]++;
        this.connectedClients.delete(clientId);
        /* istanbul ignore next */
        cov_hx4yt3de2().s[135]++;
        this.rateLimitMap.delete(clientId);
      } else
      /* istanbul ignore next */
      {
        cov_hx4yt3de2().b[21][1]++;
      }
    }
  }
  /**
   * Track performance metrics
   */
  trackPerformance(operation, duration) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[33]++;
    cov_hx4yt3de2().s[136]++;
    if (!this.performanceMetrics.has(operation)) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[22][0]++;
      cov_hx4yt3de2().s[137]++;
      this.performanceMetrics.set(operation, []);
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[22][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[138]++, this.performanceMetrics.get(operation));
    /* istanbul ignore next */
    cov_hx4yt3de2().s[139]++;
    metrics.push(duration);
    // Keep only last 100 measurements
    /* istanbul ignore next */
    cov_hx4yt3de2().s[140]++;
    if (metrics.length > 100) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[23][0]++;
      cov_hx4yt3de2().s[141]++;
      metrics.shift();
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[23][1]++;
    }
    // Log slow operations
    cov_hx4yt3de2().s[142]++;
    if (duration > 50) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[24][0]++;
      cov_hx4yt3de2().s[143]++;
      // 50ms threshold
      console.warn(`Slow WebSocket operation: ${operation} took ${duration.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[24][1]++;
    }
  }
  /**
   * Log performance statistics
   */
  logPerformanceStats() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[34]++;
    const stats =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[144]++, {});
    /* istanbul ignore next */
    cov_hx4yt3de2().s[145]++;
    for (const [operation, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_hx4yt3de2().s[146]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_hx4yt3de2().b[25][0]++;
        const avg =
        /* istanbul ignore next */
        (cov_hx4yt3de2().s[147]++, metrics.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_hx4yt3de2().f[35]++;
          cov_hx4yt3de2().s[148]++;
          return sum + time;
        }, 0) / metrics.length);
        const max =
        /* istanbul ignore next */
        (cov_hx4yt3de2().s[149]++, Math.max(...metrics));
        /* istanbul ignore next */
        cov_hx4yt3de2().s[150]++;
        stats[operation] = {
          avg: Math.round(avg * 100) / 100,
          max: Math.round(max * 100) / 100,
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_hx4yt3de2().b[25][1]++;
      }
    }
    /* istanbul ignore next */
    cov_hx4yt3de2().s[151]++;
    if (Object.keys(stats).length > 0) {
      /* istanbul ignore next */
      cov_hx4yt3de2().b[26][0]++;
      cov_hx4yt3de2().s[152]++;
      console.log('WebSocket Performance Stats:', stats);
    } else
    /* istanbul ignore next */
    {
      cov_hx4yt3de2().b[26][1]++;
    }
  }
  /**
   * Get current progress for a job
   */
  getCurrentProgress(jobId) {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[36]++;
    cov_hx4yt3de2().s[153]++;
    return /* istanbul ignore next */(cov_hx4yt3de2().b[27][0]++, this.progressCache.get(jobId)) ||
    /* istanbul ignore next */
    (cov_hx4yt3de2().b[27][1]++, null);
  }
  /**
   * Get performance statistics
   */
  getPerformanceStats() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[37]++;
    const stats =
    /* istanbul ignore next */
    (cov_hx4yt3de2().s[154]++, {});
    /* istanbul ignore next */
    cov_hx4yt3de2().s[155]++;
    for (const [operation, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_hx4yt3de2().s[156]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_hx4yt3de2().b[28][0]++;
        const avg =
        /* istanbul ignore next */
        (cov_hx4yt3de2().s[157]++, metrics.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_hx4yt3de2().f[38]++;
          cov_hx4yt3de2().s[158]++;
          return sum + time;
        }, 0) / metrics.length);
        const max =
        /* istanbul ignore next */
        (cov_hx4yt3de2().s[159]++, Math.max(...metrics));
        const min =
        /* istanbul ignore next */
        (cov_hx4yt3de2().s[160]++, Math.min(...metrics));
        /* istanbul ignore next */
        cov_hx4yt3de2().s[161]++;
        stats[operation] = {
          avg: Math.round(avg * 100) / 100,
          max: Math.round(max * 100) / 100,
          min: Math.round(min * 100) / 100,
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_hx4yt3de2().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_hx4yt3de2().s[162]++;
    return stats;
  }
  /**
   * Get connection statistics
   */
  getConnectionStats() {
    /* istanbul ignore next */
    cov_hx4yt3de2().f[39]++;
    cov_hx4yt3de2().s[163]++;
    return {
      totalConnections: this.connectedClients.size,
      activeRooms: this.getActiveRooms().length,
      messageQueueSize: Array.from(this.messageQueue.values()).reduce((sum, queue) => {
        /* istanbul ignore next */
        cov_hx4yt3de2().f[40]++;
        cov_hx4yt3de2().s[164]++;
        return sum + queue.length;
      }, 0),
      cacheSize: this.progressCache.size
    };
  }
}
/* istanbul ignore next */
cov_hx4yt3de2().s[165]++;
exports.ProgressService = ProgressService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,