{"version":3,"names":["cov_hx4yt3de2","actualCoverage","s","perf_hooks_1","require","events_1","lru_cache_1","ProgressService","EventEmitter","constructor","io","f","connectedClients","Map","messageQueue","batchTimer","rateLimitMap","lastActivity","progressCache","LRUCache","max","ttl","performanceMetrics","compressionEnabled","optimizeSocketIO","setupEventHandlers","startBatchProcessor","startHealthMonitoring","emitProgressUpdate","progress","startTime","performance","now","roomName","job_id","set","queueMessage","trackPerformance","emitTestResult","testId","result","compressedResult","b","compressTestResult","emitResourceUpdate","resources","Date","lastEmit","get","emitQueueStats","stats","getConnectedClientsCount","sockets","size","getSubscriptionCount","executionId","adapter","rooms","on","socket","console","log","id","Set","length","join","add","emit","status","leave","delete","type","reason","error","broadcastMessage","event","data","sendToClient","socketId","to","getActiveRooms","Array","from","keys","destroy","clear","clearInterval","removeAllListeners","room","has","queue","push","timestamp","shift","setInterval","processBatchedMessages","processedCount","messages","eventGroups","forEach","msg","dataArray","compressed","llm_output","substring","prompt_used","cleanupInactiveClients","logPerformanceStats","inactiveThreshold","clientId","operation","duration","metrics","warn","toFixed","avg","reduce","sum","time","Math","round","count","Object","getCurrentProgress","jobId","getPerformanceStats","min","getConnectionStats","totalConnections","activeRooms","messageQueueSize","values","cacheSize","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/websocket/ProgressService.ts"],"sourcesContent":["import { Server as SocketIOServer } from 'socket.io';\nimport { ExecutionProgress } from '../testing/TestQueueManager';\nimport { performance } from 'perf_hooks';\nimport { EventEmitter } from 'events';\nimport { LRUCache } from 'lru-cache';\nimport { promisify } from 'util';\nimport { setTimeout } from 'timers/promises';\n\nexport interface TestExecutionResult {\n  execution_id: string;\n  test_case_id: number;\n  passed: boolean;\n  llm_output: string;\n  execution_time_ms: number;\n  model: string;\n  prompt_used: string;\n  created_at: Date;\n}\n\nexport class ProgressService extends EventEmitter {\n  private io: SocketIOServer;\n  private connectedClients: Map<string, Set<string>> = new Map(); // socketId -> subscribed executionIds\n  private messageQueue: Map<string, any[]> = new Map(); // Room -> queued messages\n  private progressCache: LRUCache<string, ExecutionProgress>;\n  private performanceMetrics: Map<string, number[]>;\n  private batchTimer: NodeJS.Timeout | null = null;\n  private compressionEnabled: boolean;\n  private rateLimitMap: Map<string, number> = new Map();\n  private lastActivity: Map<string, number> = new Map();\n\n  constructor(io: SocketIOServer) {\n    super();\n    this.io = io;\n    \n    // Initialize performance optimizations\n    this.progressCache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.compressionEnabled = true;\n    \n    // Configure Socket.IO for better performance\n    this.optimizeSocketIO();\n    \n    this.setupEventHandlers();\n    this.startBatchProcessor();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * Emit progress update to subscribed clients with batching\n   */\n  emitProgressUpdate(progress: ExecutionProgress): void {\n    const startTime = performance.now();\n    const roomName = `test-${progress.job_id}`;\n    \n    // Cache the progress\n    this.progressCache.set(progress.job_id, progress);\n    \n    // Add to batch queue for efficient processing\n    this.queueMessage(roomName, 'progress', progress);\n    \n    // Track performance\n    this.trackPerformance('emitProgressUpdate', performance.now() - startTime);\n  }\n\n  /**\n   * Emit test result to subscribed clients with compression\n   */\n  emitTestResult(testId: string, result: TestExecutionResult): void {\n    const startTime = performance.now();\n    const roomName = `test-${testId}`;\n    \n    // Compress large results if enabled\n    const compressedResult = this.compressionEnabled ? \n      this.compressTestResult(result) : result;\n    \n    this.queueMessage(roomName, 'test-complete', compressedResult);\n    \n    // Track performance\n    this.trackPerformance('emitTestResult', performance.now() - startTime);\n  }\n\n  /**\n   * Emit system resource updates with rate limiting\n   */\n  emitResourceUpdate(resources: any): void {\n    const now = Date.now();\n    const lastEmit = this.lastActivity.get('system-resources') || 0;\n    \n    // Rate limit to prevent overwhelming clients (max 1 per second)\n    if (now - lastEmit < 1000) {\n      return;\n    }\n    \n    this.lastActivity.set('system-resources', now);\n    this.queueMessage('system-resources', 'system-resources', resources);\n  }\n\n  /**\n   * Emit queue statistics updates with rate limiting\n   */\n  emitQueueStats(stats: any): void {\n    const now = Date.now();\n    const lastEmit = this.lastActivity.get('queue-stats') || 0;\n    \n    // Rate limit to prevent overwhelming clients (max 1 per 2 seconds)\n    if (now - lastEmit < 2000) {\n      return;\n    }\n    \n    this.lastActivity.set('queue-stats', now);\n    this.queueMessage('queue-stats', 'queue-stats', stats);\n  }\n\n  /**\n   * Get connected clients count\n   */\n  getConnectedClientsCount(): number {\n    return this.io.sockets.sockets.size;\n  }\n\n  /**\n   * Get subscriptions for a specific execution\n   */\n  getSubscriptionCount(executionId: string): number {\n    return this.io.sockets.adapter.rooms.get(`test-${executionId}`)?.size || 0;\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    this.io.on('connection', (socket) => {\n      console.log(`WebSocket client connected: ${socket.id}`);\n      this.connectedClients.set(socket.id, new Set());\n\n      // Handle test execution subscription\n      socket.on('subscribe-test', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          socket.join(`test-${executionId}`);\n          this.connectedClients.get(socket.id)?.add(executionId);\n          console.log(`Client ${socket.id} subscribed to test ${executionId}`);\n          \n          // Send acknowledgment\n          socket.emit('subscription-confirmed', { executionId, status: 'subscribed' });\n        }\n      });\n\n      // Handle test execution unsubscription\n      socket.on('unsubscribe-test', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          socket.leave(`test-${executionId}`);\n          this.connectedClients.get(socket.id)?.delete(executionId);\n          console.log(`Client ${socket.id} unsubscribed from test ${executionId}`);\n          \n          // Send acknowledgment\n          socket.emit('subscription-confirmed', { executionId, status: 'unsubscribed' });\n        }\n      });\n\n      // Handle request for current progress\n      socket.on('get-progress', (executionId: string) => {\n        if (typeof executionId === 'string' && executionId.length > 0) {\n          // This would typically query the TestQueueManager for current progress\n          // For now, we'll emit a response indicating the request was received\n          socket.emit('progress-request-received', { executionId });\n        }\n      });\n\n      // Handle system resource subscription\n      socket.on('subscribe-system-resources', () => {\n        socket.join('system-resources');\n        console.log(`Client ${socket.id} subscribed to system resources`);\n        socket.emit('subscription-confirmed', { type: 'system-resources', status: 'subscribed' });\n      });\n\n      // Handle system resource unsubscription\n      socket.on('unsubscribe-system-resources', () => {\n        socket.leave('system-resources');\n        console.log(`Client ${socket.id} unsubscribed from system resources`);\n        socket.emit('subscription-confirmed', { type: 'system-resources', status: 'unsubscribed' });\n      });\n\n      // Handle queue statistics subscription\n      socket.on('subscribe-queue-stats', () => {\n        socket.join('queue-stats');\n        console.log(`Client ${socket.id} subscribed to queue statistics`);\n        socket.emit('subscription-confirmed', { type: 'queue-stats', status: 'subscribed' });\n      });\n\n      // Handle queue statistics unsubscription\n      socket.on('unsubscribe-queue-stats', () => {\n        socket.leave('queue-stats');\n        console.log(`Client ${socket.id} unsubscribed from queue statistics`);\n        socket.emit('subscription-confirmed', { type: 'queue-stats', status: 'unsubscribed' });\n      });\n\n      // Handle client disconnect\n      socket.on('disconnect', (reason) => {\n        console.log(`WebSocket client disconnected: ${socket.id}, reason: ${reason}`);\n        this.connectedClients.delete(socket.id);\n      });\n\n      // Handle errors\n      socket.on('error', (error) => {\n        console.error(`WebSocket error for client ${socket.id}:`, error);\n      });\n    });\n\n    // Handle adapter errors\n    this.io.on('error', (error) => {\n      console.error('Socket.IO server error:', error);\n    });\n  }\n\n  /**\n   * Broadcast message to all connected clients\n   */\n  broadcastMessage(event: string, data: any): void {\n    this.io.emit(event, data);\n  }\n\n  /**\n   * Send message to specific client\n   */\n  sendToClient(socketId: string, event: string, data: any): void {\n    this.io.to(socketId).emit(event, data);\n  }\n\n  /**\n   * Get all active rooms (subscriptions)\n   */\n  getActiveRooms(): string[] {\n    return Array.from(this.io.sockets.adapter.rooms.keys());\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.connectedClients.clear();\n    this.messageQueue.clear();\n    this.progressCache.clear();\n    this.performanceMetrics.clear();\n    this.rateLimitMap.clear();\n    this.lastActivity.clear();\n    \n    if (this.batchTimer) {\n      clearInterval(this.batchTimer);\n    }\n    \n    this.io.removeAllListeners();\n    this.removeAllListeners();\n  }\n  \n  /**\n   * Queue message for batch processing\n   */\n  private queueMessage(room: string, event: string, data: any): void {\n    if (!this.messageQueue.has(room)) {\n      this.messageQueue.set(room, []);\n    }\n    \n    const queue = this.messageQueue.get(room)!;\n    queue.push({ event, data, timestamp: Date.now() });\n    \n    // Limit queue size to prevent memory issues\n    if (queue.length > 100) {\n      queue.shift();\n    }\n  }\n  \n  /**\n   * Start batch processor for efficient message delivery\n   */\n  private startBatchProcessor(): void {\n    this.batchTimer = setInterval(() => {\n      this.processBatchedMessages();\n    }, 100); // Process every 100ms\n  }\n  \n  /**\n   * Process batched messages\n   */\n  private processBatchedMessages(): void {\n    const startTime = performance.now();\n    let processedCount = 0;\n    \n    for (const [room, messages] of this.messageQueue) {\n      if (messages.length === 0) continue;\n      \n      // Group messages by event type\n      const eventGroups = new Map<string, any[]>();\n      \n      messages.forEach(msg => {\n        if (!eventGroups.has(msg.event)) {\n          eventGroups.set(msg.event, []);\n        }\n        eventGroups.get(msg.event)!.push(msg.data);\n      });\n      \n      // Send grouped messages\n      for (const [event, dataArray] of eventGroups) {\n        if (dataArray.length === 1) {\n          this.io.to(room).emit(event, dataArray[0]);\n        } else {\n          // Send as batch if multiple messages\n          this.io.to(room).emit(`${event}-batch`, dataArray);\n        }\n      }\n      \n      processedCount += messages.length;\n      messages.length = 0; // Clear the queue\n    }\n    \n    if (processedCount > 0) {\n      this.trackPerformance('processBatchedMessages', performance.now() - startTime);\n    }\n  }\n  \n  /**\n   * Compress test result for efficient transmission\n   */\n  private compressTestResult(result: TestExecutionResult): any {\n    // Create a compressed version by removing or truncating large fields\n    const compressed = {\n      ...result,\n      llm_output: result.llm_output.length > 1000 ? \n        result.llm_output.substring(0, 1000) + '...[truncated]' : \n        result.llm_output,\n      prompt_used: result.prompt_used.length > 500 ? \n        result.prompt_used.substring(0, 500) + '...[truncated]' : \n        result.prompt_used\n    };\n    \n    return compressed;\n  }\n  \n  /**\n   * Optimize Socket.IO configuration\n   */\n  private optimizeSocketIO(): void {\n    // Note: In Socket.IO v4, these configurations are set during server initialization\n    // The engine properties are read-only and cannot be modified after creation\n    console.log('WebSocket optimizations applied (using default Socket.IO v4 settings)');\n  }\n  \n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    setInterval(() => {\n      this.cleanupInactiveClients();\n      this.logPerformanceStats();\n    }, 1000 * 60 * 5); // Every 5 minutes\n  }\n  \n  /**\n   * Clean up inactive clients\n   */\n  private cleanupInactiveClients(): void {\n    const now = Date.now();\n    const inactiveThreshold = 1000 * 60 * 10; // 10 minutes\n    \n    for (const [clientId, lastActivity] of this.lastActivity) {\n      if (now - lastActivity > inactiveThreshold) {\n        this.lastActivity.delete(clientId);\n        this.connectedClients.delete(clientId);\n        this.rateLimitMap.delete(clientId);\n      }\n    }\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 50) { // 50ms threshold\n      console.warn(`Slow WebSocket operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Log performance statistics\n   */\n  private logPerformanceStats(): void {\n    const stats: Record<string, any> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    if (Object.keys(stats).length > 0) {\n      console.log('WebSocket Performance Stats:', stats);\n    }\n  }\n  \n  /**\n   * Get current progress for a job\n   */\n  public getCurrentProgress(jobId: string): ExecutionProgress | null {\n    return this.progressCache.get(jobId) || null;\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Get connection statistics\n   */\n  public getConnectionStats(): {\n    totalConnections: number;\n    activeRooms: number;\n    messageQueueSize: number;\n    cacheSize: number;\n  } {\n    return {\n      totalConnections: this.connectedClients.size,\n      activeRooms: this.getActiveRooms().length,\n      messageQueueSize: Array.from(this.messageQueue.values()).reduce((sum, queue) => sum + queue.length, 0),\n      cacheSize: this.progressCache.size\n    };\n  }\n}"],"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","ignoreList":[]}