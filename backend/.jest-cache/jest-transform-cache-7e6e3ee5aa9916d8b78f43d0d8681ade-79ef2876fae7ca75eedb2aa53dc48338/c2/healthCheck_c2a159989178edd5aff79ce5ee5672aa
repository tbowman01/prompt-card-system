3be9d2865df721343db947ff5016846a
"use strict";

/* istanbul ignore next */
function cov_1oh34ysxq9() {
  var path = "/workspaces/prompt-card-system/backend/src/utils/healthCheck.ts";
  var hash = "6d98324a3fa25bc9b6308da82075b5baefee61af";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/utils/healthCheck.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "4": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 49
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 27
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "8": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 27,
          column: 17
        }
      },
      "9": {
        start: {
          line: 20,
          column: 37
        },
        end: {
          line: 22,
          column: 22
        }
      },
      "10": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 51
        }
      },
      "11": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "13": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "14": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "15": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 71
        }
      },
      "16": {
        start: {
          line: 44,
          column: 48
        },
        end: {
          line: 44,
          column: 70
        }
      },
      "17": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 64
        }
      },
      "19": {
        start: {
          line: 48,
          column: 51
        },
        end: {
          line: 48,
          column: 58
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "21": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 49,
          column: 28
        }
      },
      "22": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "23": {
        start: {
          line: 51,
          column: 34
        },
        end: {
          line: 51,
          column: 55
        }
      },
      "24": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 53,
          column: 32
        }
      },
      "25": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 32
        }
      },
      "26": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 112
        }
      },
      "27": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "28": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 78
        }
      },
      "29": {
        start: {
          line: 59,
          column: 45
        },
        end: {
          line: 59,
          column: 76
        }
      },
      "30": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 21
        }
      },
      "31": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 26
        }
      },
      "32": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 12
        }
      },
      "33": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 74
        }
      },
      "34": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "35": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "36": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "37": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 57
        }
      },
      "38": {
        start: {
          line: 75,
          column: 31
        },
        end: {
          line: 75,
          column: 77
        }
      },
      "39": {
        start: {
          line: 75,
          column: 70
        },
        end: {
          line: 75,
          column: 76
        }
      },
      "40": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "41": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 58
        }
      },
      "42": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "43": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 62
        }
      },
      "44": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 68
        }
      },
      "45": {
        start: {
          line: 81,
          column: 41
        },
        end: {
          line: 81,
          column: 66
        }
      },
      "46": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 79
        }
      },
      "47": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 86,
          column: 48
        }
      },
      "48": {
        start: {
          line: 87,
          column: 0
        },
        end: {
          line: 87,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 20
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 28,
            column: 13
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 24
          }
        },
        loc: {
          start: {
            line: 35,
            column: 35
          },
          end: {
            line: 39,
            column: 17
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 44,
            column: 43
          },
          end: {
            line: 44,
            column: 44
          }
        },
        loc: {
          start: {
            line: 44,
            column: 48
          },
          end: {
            line: 44,
            column: 70
          }
        },
        line: 44
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 59,
            column: 35
          }
        },
        loc: {
          start: {
            line: 59,
            column: 45
          },
          end: {
            line: 59,
            column: 76
          }
        },
        line: 59
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 64
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 66,
            column: 44
          },
          end: {
            line: 66,
            column: 45
          }
        },
        loc: {
          start: {
            line: 66,
            column: 63
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 66
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 43
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 71
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 75,
            column: 60
          },
          end: {
            line: 75,
            column: 61
          }
        },
        loc: {
          start: {
            line: 75,
            column: 70
          },
          end: {
            line: 75,
            column: 76
          }
        },
        line: 75
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 31
          }
        },
        loc: {
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 66
          }
        },
        line: 81
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 17
          },
          end: {
            line: 17,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 17
          },
          end: {
            line: 17,
            column: 44
          }
        }, {
          start: {
            line: 17,
            column: 48
          },
          end: {
            line: 17,
            column: 69
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 36
          },
          end: {
            line: 43,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 43,
            column: 46
          },
          end: {
            line: 43,
            column: 48
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 27
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 48,
            column: 29
          },
          end: {
            line: 48,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 42
          },
          end: {
            line: 48,
            column: 46
          }
        }],
        line: 48
      },
      "9": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 53,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 53,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "10": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "11": {
        loc: {
          start: {
            line: 71,
            column: 26
          },
          end: {
            line: 71,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 71,
            column: 41
          }
        }],
        line: 71
      },
      "12": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/utils/healthCheck.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/utils/healthCheck.ts"],
      sourcesContent: ["import axios from 'axios';\n\ninterface HealthCheckOptions {\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\ninterface ServiceHealthCheck {\n  name: string;\n  url: string;\n  check: () => Promise<boolean>;\n}\n\nexport class HealthCheckManager {\n  private services: ServiceHealthCheck[] = [];\n  \n  constructor() {\n    this.initializeServices();\n  }\n  \n  private initializeServices() {\n    // Ollama health check\n    this.services.push({\n      name: 'ollama',\n      url: process.env.OLLAMA_BASE_URL || 'http://ollama:11434',\n      check: async () => {\n        try {\n          const response = await axios.get(`${process.env.OLLAMA_BASE_URL}/api/version`, {\n            timeout: 3000\n          });\n          return response.status === 200;\n        } catch {\n          return false;\n        }\n      }\n    });\n    \n    // Redis health check\n    if (process.env.REDIS_URL) {\n      this.services.push({\n        name: 'redis',\n        url: process.env.REDIS_URL,\n        check: async () => {\n          // This would be implemented with redis client\n          // For now, we'll assume it's healthy if configured\n          return true;\n        }\n      });\n    }\n  }\n  \n  async checkService(serviceName: string, options: HealthCheckOptions = {}): Promise<boolean> {\n    const service = this.services.find(s => s.name === serviceName);\n    if (!service) {\n      throw new Error(`Service ${serviceName} not found`);\n    }\n    \n    const { retries = 3, retryDelay = 1000 } = options;\n    \n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        const isHealthy = await service.check();\n        if (isHealthy) return true;\n      } catch (error) {\n        console.error(`Health check failed for ${serviceName} (attempt ${attempt}/${retries}):`, error);\n      }\n      \n      if (attempt < retries) {\n        await new Promise(resolve => setTimeout(resolve, retryDelay));\n      }\n    }\n    \n    return false;\n  }\n  \n  async checkAllServices(): Promise<Record<string, boolean>> {\n    const results: Record<string, boolean> = {};\n    \n    await Promise.all(\n      this.services.map(async (service) => {\n        results[service.name] = await this.checkService(service.name);\n      })\n    );\n    \n    return results;\n  }\n  \n  async waitForServices(timeout = 60000): Promise<void> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      const results = await this.checkAllServices();\n      const allHealthy = Object.values(results).every(status => status);\n      \n      if (allHealthy) {\n        console.log('\u2705 All services are healthy');\n        return;\n      }\n      \n      console.log('\u23F3 Waiting for services...', results);\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n    \n    throw new Error(`Services did not become healthy within ${timeout}ms`);\n  }\n}\n\nexport const healthCheckManager = new HealthCheckManager();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6d98324a3fa25bc9b6308da82075b5baefee61af"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1oh34ysxq9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1oh34ysxq9();
var __importDefault =
/* istanbul ignore next */
(cov_1oh34ysxq9().s[0]++,
/* istanbul ignore next */
(cov_1oh34ysxq9().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1oh34ysxq9().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1oh34ysxq9().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1oh34ysxq9().f[0]++;
  cov_1oh34ysxq9().s[1]++;
  return /* istanbul ignore next */(cov_1oh34ysxq9().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1oh34ysxq9().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1oh34ysxq9().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1oh34ysxq9().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1oh34ysxq9().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1oh34ysxq9().s[3]++;
exports.healthCheckManager = exports.HealthCheckManager = void 0;
const axios_1 =
/* istanbul ignore next */
(cov_1oh34ysxq9().s[4]++, __importDefault(require("axios")));
class HealthCheckManager {
  constructor() {
    /* istanbul ignore next */
    cov_1oh34ysxq9().f[1]++;
    cov_1oh34ysxq9().s[5]++;
    this.services = [];
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[6]++;
    this.initializeServices();
  }
  initializeServices() {
    /* istanbul ignore next */
    cov_1oh34ysxq9().f[2]++;
    cov_1oh34ysxq9().s[7]++;
    // Ollama health check
    this.services.push({
      name: 'ollama',
      url:
      /* istanbul ignore next */
      (cov_1oh34ysxq9().b[3][0]++, process.env.OLLAMA_BASE_URL) ||
      /* istanbul ignore next */
      (cov_1oh34ysxq9().b[3][1]++, 'http://ollama:11434'),
      check: async () => {
        /* istanbul ignore next */
        cov_1oh34ysxq9().f[3]++;
        cov_1oh34ysxq9().s[8]++;
        try {
          const response =
          /* istanbul ignore next */
          (cov_1oh34ysxq9().s[9]++, await axios_1.default.get(`${process.env.OLLAMA_BASE_URL}/api/version`, {
            timeout: 3000
          }));
          /* istanbul ignore next */
          cov_1oh34ysxq9().s[10]++;
          return response.status === 200;
        } catch {
          /* istanbul ignore next */
          cov_1oh34ysxq9().s[11]++;
          return false;
        }
      }
    });
    // Redis health check
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[12]++;
    if (process.env.REDIS_URL) {
      /* istanbul ignore next */
      cov_1oh34ysxq9().b[4][0]++;
      cov_1oh34ysxq9().s[13]++;
      this.services.push({
        name: 'redis',
        url: process.env.REDIS_URL,
        check: async () => {
          /* istanbul ignore next */
          cov_1oh34ysxq9().f[4]++;
          cov_1oh34ysxq9().s[14]++;
          // This would be implemented with redis client
          // For now, we'll assume it's healthy if configured
          return true;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1oh34ysxq9().b[4][1]++;
    }
  }
  async checkService(serviceName, options =
  /* istanbul ignore next */
  (cov_1oh34ysxq9().b[5][0]++, {})) {
    /* istanbul ignore next */
    cov_1oh34ysxq9().f[5]++;
    const service =
    /* istanbul ignore next */
    (cov_1oh34ysxq9().s[15]++, this.services.find(s => {
      /* istanbul ignore next */
      cov_1oh34ysxq9().f[6]++;
      cov_1oh34ysxq9().s[16]++;
      return s.name === serviceName;
    }));
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[17]++;
    if (!service) {
      /* istanbul ignore next */
      cov_1oh34ysxq9().b[6][0]++;
      cov_1oh34ysxq9().s[18]++;
      throw new Error(`Service ${serviceName} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1oh34ysxq9().b[6][1]++;
    }
    const {
      retries =
      /* istanbul ignore next */
      (cov_1oh34ysxq9().b[7][0]++, 3),
      retryDelay =
      /* istanbul ignore next */
      (cov_1oh34ysxq9().b[8][0]++, 1000)
    } =
    /* istanbul ignore next */
    (cov_1oh34ysxq9().s[19]++, options);
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[20]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_1oh34ysxq9().s[21]++, 1); attempt <= retries; attempt++) {
      /* istanbul ignore next */
      cov_1oh34ysxq9().s[22]++;
      try {
        const isHealthy =
        /* istanbul ignore next */
        (cov_1oh34ysxq9().s[23]++, await service.check());
        /* istanbul ignore next */
        cov_1oh34ysxq9().s[24]++;
        if (isHealthy) {
          /* istanbul ignore next */
          cov_1oh34ysxq9().b[9][0]++;
          cov_1oh34ysxq9().s[25]++;
          return true;
        } else
        /* istanbul ignore next */
        {
          cov_1oh34ysxq9().b[9][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1oh34ysxq9().s[26]++;
        console.error(`Health check failed for ${serviceName} (attempt ${attempt}/${retries}):`, error);
      }
      /* istanbul ignore next */
      cov_1oh34ysxq9().s[27]++;
      if (attempt < retries) {
        /* istanbul ignore next */
        cov_1oh34ysxq9().b[10][0]++;
        cov_1oh34ysxq9().s[28]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1oh34ysxq9().f[7]++;
          cov_1oh34ysxq9().s[29]++;
          return setTimeout(resolve, retryDelay);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1oh34ysxq9().b[10][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[30]++;
    return false;
  }
  async checkAllServices() {
    /* istanbul ignore next */
    cov_1oh34ysxq9().f[8]++;
    const results =
    /* istanbul ignore next */
    (cov_1oh34ysxq9().s[31]++, {});
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[32]++;
    await Promise.all(this.services.map(async service => {
      /* istanbul ignore next */
      cov_1oh34ysxq9().f[9]++;
      cov_1oh34ysxq9().s[33]++;
      results[service.name] = await this.checkService(service.name);
    }));
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[34]++;
    return results;
  }
  async waitForServices(timeout =
  /* istanbul ignore next */
  (cov_1oh34ysxq9().b[11][0]++, 60000)) {
    /* istanbul ignore next */
    cov_1oh34ysxq9().f[10]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1oh34ysxq9().s[35]++, Date.now());
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[36]++;
    while (Date.now() - startTime < timeout) {
      const results =
      /* istanbul ignore next */
      (cov_1oh34ysxq9().s[37]++, await this.checkAllServices());
      const allHealthy =
      /* istanbul ignore next */
      (cov_1oh34ysxq9().s[38]++, Object.values(results).every(status => {
        /* istanbul ignore next */
        cov_1oh34ysxq9().f[11]++;
        cov_1oh34ysxq9().s[39]++;
        return status;
      }));
      /* istanbul ignore next */
      cov_1oh34ysxq9().s[40]++;
      if (allHealthy) {
        /* istanbul ignore next */
        cov_1oh34ysxq9().b[12][0]++;
        cov_1oh34ysxq9().s[41]++;
        console.log('✅ All services are healthy');
        /* istanbul ignore next */
        cov_1oh34ysxq9().s[42]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1oh34ysxq9().b[12][1]++;
      }
      cov_1oh34ysxq9().s[43]++;
      console.log('⏳ Waiting for services...', results);
      /* istanbul ignore next */
      cov_1oh34ysxq9().s[44]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1oh34ysxq9().f[12]++;
        cov_1oh34ysxq9().s[45]++;
        return setTimeout(resolve, 5000);
      });
    }
    /* istanbul ignore next */
    cov_1oh34ysxq9().s[46]++;
    throw new Error(`Services did not become healthy within ${timeout}ms`);
  }
}
/* istanbul ignore next */
cov_1oh34ysxq9().s[47]++;
exports.HealthCheckManager = HealthCheckManager;
/* istanbul ignore next */
cov_1oh34ysxq9().s[48]++;
exports.healthCheckManager = new HealthCheckManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,