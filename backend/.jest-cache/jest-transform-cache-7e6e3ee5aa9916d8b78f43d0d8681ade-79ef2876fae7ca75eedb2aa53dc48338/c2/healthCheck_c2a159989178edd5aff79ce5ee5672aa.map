{"version":3,"names":["cov_1oh34ysxq9","actualCoverage","axios_1","s","__importDefault","require","HealthCheckManager","constructor","f","services","initializeServices","push","name","url","b","process","env","OLLAMA_BASE_URL","check","response","default","get","timeout","status","REDIS_URL","checkService","serviceName","options","service","find","Error","retries","retryDelay","attempt","isHealthy","error","console","Promise","resolve","setTimeout","checkAllServices","results","all","map","waitForServices","startTime","Date","now","allHealthy","Object","values","every","log","exports","healthCheckManager"],"sources":["/workspaces/prompt-card-system/backend/src/utils/healthCheck.ts"],"sourcesContent":["import axios from 'axios';\n\ninterface HealthCheckOptions {\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\ninterface ServiceHealthCheck {\n  name: string;\n  url: string;\n  check: () => Promise<boolean>;\n}\n\nexport class HealthCheckManager {\n  private services: ServiceHealthCheck[] = [];\n  \n  constructor() {\n    this.initializeServices();\n  }\n  \n  private initializeServices() {\n    // Ollama health check\n    this.services.push({\n      name: 'ollama',\n      url: process.env.OLLAMA_BASE_URL || 'http://ollama:11434',\n      check: async () => {\n        try {\n          const response = await axios.get(`${process.env.OLLAMA_BASE_URL}/api/version`, {\n            timeout: 3000\n          });\n          return response.status === 200;\n        } catch {\n          return false;\n        }\n      }\n    });\n    \n    // Redis health check\n    if (process.env.REDIS_URL) {\n      this.services.push({\n        name: 'redis',\n        url: process.env.REDIS_URL,\n        check: async () => {\n          // This would be implemented with redis client\n          // For now, we'll assume it's healthy if configured\n          return true;\n        }\n      });\n    }\n  }\n  \n  async checkService(serviceName: string, options: HealthCheckOptions = {}): Promise<boolean> {\n    const service = this.services.find(s => s.name === serviceName);\n    if (!service) {\n      throw new Error(`Service ${serviceName} not found`);\n    }\n    \n    const { retries = 3, retryDelay = 1000 } = options;\n    \n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        const isHealthy = await service.check();\n        if (isHealthy) return true;\n      } catch (error) {\n        console.error(`Health check failed for ${serviceName} (attempt ${attempt}/${retries}):`, error);\n      }\n      \n      if (attempt < retries) {\n        await new Promise(resolve => setTimeout(resolve, retryDelay));\n      }\n    }\n    \n    return false;\n  }\n  \n  async checkAllServices(): Promise<Record<string, boolean>> {\n    const results: Record<string, boolean> = {};\n    \n    await Promise.all(\n      this.services.map(async (service) => {\n        results[service.name] = await this.checkService(service.name);\n      })\n    );\n    \n    return results;\n  }\n  \n  async waitForServices(timeout = 60000): Promise<void> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      const results = await this.checkAllServices();\n      const allHealthy = Object.values(results).every(status => status);\n      \n      if (allHealthy) {\n        console.log('✅ All services are healthy');\n        return;\n      }\n      \n      console.log('⏳ Waiting for services...', results);\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n    \n    throw new Error(`Services did not become healthy within ${timeout}ms`);\n  }\n}\n\nexport const healthCheckManager = new HealthCheckManager();"],"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","ignoreList":[]}