365286baf798bd12cf8fd75539120644
"use strict";

/* istanbul ignore next */
function cov_2buveocj45() {
  var path = "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceRegressionDetector.ts";
  var hash = "1a4d91797796befad89df935dec6a39865f66f99";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceRegressionDetector.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 87
        }
      },
      "37": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "38": {
        start: {
          line: 38,
          column: 21
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "39": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 60
        }
      },
      "40": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 40
        }
      },
      "41": {
        start: {
          line: 41,
          column: 11
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "42": {
        start: {
          line: 47,
          column: 19
        },
        end: {
          line: 47,
          column: 34
        }
      },
      "43": {
        start: {
          line: 48,
          column: 19
        },
        end: {
          line: 48,
          column: 33
        }
      },
      "44": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "45": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 89
        }
      },
      "46": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 70
        }
      },
      "47": {
        start: {
          line: 52,
          column: 52
        },
        end: {
          line: 52,
          column: 61
        }
      },
      "48": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 69
        }
      },
      "49": {
        start: {
          line: 53,
          column: 51
        },
        end: {
          line: 53,
          column: 60
        }
      },
      "50": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 96
        }
      },
      "51": {
        start: {
          line: 54,
          column: 51
        },
        end: {
          line: 54,
          column: 81
        }
      },
      "52": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 95
        }
      },
      "53": {
        start: {
          line: 55,
          column: 50
        },
        end: {
          line: 55,
          column: 80
        }
      },
      "54": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 56,
          column: 77
        }
      },
      "55": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 57,
          column: 70
        }
      },
      "56": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 58,
          column: 58
        }
      },
      "57": {
        start: {
          line: 59,
          column: 33
        },
        end: {
          line: 59,
          column: 44
        }
      },
      "58": {
        start: {
          line: 61,
          column: 23
        },
        end: {
          line: 61,
          column: 83
        }
      },
      "59": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "60": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 74,
          column: 22
        }
      },
      "61": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 22
        }
      },
      "62": {
        start: {
          line: 75,
          column: 21
        },
        end: {
          line: 75,
          column: 78
        }
      },
      "63": {
        start: {
          line: 75,
          column: 49
        },
        end: {
          line: 75,
          column: 58
        }
      },
      "64": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 108
        }
      },
      "65": {
        start: {
          line: 76,
          column: 58
        },
        end: {
          line: 76,
          column: 87
        }
      },
      "66": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 21
        }
      },
      "67": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "68": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "69": {
        start: {
          line: 79,
          column: 21
        },
        end: {
          line: 79,
          column: 22
        }
      },
      "70": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "71": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "72": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 82,
          column: 66
        }
      },
      "73": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 89,
          column: 19
        }
      },
      "74": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 26
        }
      },
      "75": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 28
        }
      },
      "76": {
        start: {
          line: 99,
          column: 18
        },
        end: {
          line: 99,
          column: 31
        }
      },
      "77": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "78": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 66
        }
      },
      "79": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "80": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "81": {
        start: {
          line: 104,
          column: 21
        },
        end: {
          line: 104,
          column: 22
        }
      },
      "82": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "83": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 30
        }
      },
      "84": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 54
        }
      },
      "85": {
        start: {
          line: 109,
          column: 25
        },
        end: {
          line: 109,
          column: 55
        }
      },
      "86": {
        start: {
          line: 110,
          column: 18
        },
        end: {
          line: 110,
          column: 41
        }
      },
      "87": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 25
        }
      },
      "88": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "89": {
        start: {
          line: 113,
          column: 21
        },
        end: {
          line: 113,
          column: 22
        }
      },
      "90": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "91": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 30
        }
      },
      "92": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 63
        }
      },
      "93": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 37
        }
      },
      "94": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 35
        }
      },
      "95": {
        start: {
          line: 119,
          column: 22
        },
        end: {
          line: 119,
          column: 59
        }
      },
      "96": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 120,
          column: 40
        }
      },
      "97": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 28
        }
      },
      "98": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "99": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 58
        }
      },
      "100": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 46
        }
      },
      "101": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "102": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 54
        }
      },
      "103": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 35
        }
      },
      "104": {
        start: {
          line: 137,
          column: 23
        },
        end: {
          line: 137,
          column: 54
        }
      },
      "105": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "106": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 24
        }
      },
      "107": {
        start: {
          line: 139,
          column: 30
        },
        end: {
          line: 139,
          column: 31
        }
      },
      "108": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "109": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 28
        }
      },
      "110": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 59
        }
      },
      "111": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 71
        }
      },
      "112": {
        start: {
          line: 146,
          column: 22
        },
        end: {
          line: 146,
          column: 24
        }
      },
      "113": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "114": {
        start: {
          line: 147,
          column: 21
        },
        end: {
          line: 147,
          column: 22
        }
      },
      "115": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "116": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 71
        }
      },
      "117": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "118": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 54
        }
      },
      "119": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 156,
          column: 94
        }
      },
      "120": {
        start: {
          line: 156,
          column: 58
        },
        end: {
          line: 156,
          column: 93
        }
      },
      "121": {
        start: {
          line: 157,
          column: 26
        },
        end: {
          line: 157,
          column: 61
        }
      },
      "122": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 158,
          column: 56
        }
      },
      "123": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "124": {
        start: {
          line: 169,
          column: 18
        },
        end: {
          line: 169,
          column: 33
        }
      },
      "125": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "126": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 47
        }
      },
      "127": {
        start: {
          line: 175,
          column: 18
        },
        end: {
          line: 175,
          column: 38
        }
      },
      "128": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 39
        }
      },
      "129": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 54
        }
      },
      "130": {
        start: {
          line: 184,
          column: 19
        },
        end: {
          line: 184,
          column: 30
        }
      },
      "131": {
        start: {
          line: 185,
          column: 19
        },
        end: {
          line: 185,
          column: 31
        }
      },
      "132": {
        start: {
          line: 186,
          column: 19
        },
        end: {
          line: 186,
          column: 30
        }
      },
      "133": {
        start: {
          line: 187,
          column: 19
        },
        end: {
          line: 187,
          column: 31
        }
      },
      "134": {
        start: {
          line: 188,
          column: 19
        },
        end: {
          line: 188,
          column: 30
        }
      },
      "135": {
        start: {
          line: 189,
          column: 18
        },
        end: {
          line: 189,
          column: 27
        }
      },
      "136": {
        start: {
          line: 190,
          column: 21
        },
        end: {
          line: 190,
          column: 36
        }
      },
      "137": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 24
        }
      },
      "138": {
        start: {
          line: 192,
          column: 18
        },
        end: {
          line: 192,
          column: 37
        }
      },
      "139": {
        start: {
          line: 193,
          column: 18
        },
        end: {
          line: 193,
          column: 95
        }
      },
      "140": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 24
        }
      },
      "141": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 66
        }
      },
      "142": {
        start: {
          line: 198,
          column: 22
        },
        end: {
          line: 198,
          column: 77
        }
      },
      "143": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 200,
          column: 27
        }
      },
      "144": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 27
        }
      },
      "145": {
        start: {
          line: 201,
          column: 27
        },
        end: {
          line: 201,
          column: 84
        }
      },
      "146": {
        start: {
          line: 201,
          column: 55
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "147": {
        start: {
          line: 202,
          column: 26
        },
        end: {
          line: 202,
          column: 81
        }
      },
      "148": {
        start: {
          line: 202,
          column: 53
        },
        end: {
          line: 202,
          column: 62
        }
      },
      "149": {
        start: {
          line: 203,
          column: 26
        },
        end: {
          line: 203,
          column: 109
        }
      },
      "150": {
        start: {
          line: 203,
          column: 54
        },
        end: {
          line: 203,
          column: 89
        }
      },
      "151": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 204,
          column: 105
        }
      },
      "152": {
        start: {
          line: 204,
          column: 52
        },
        end: {
          line: 204,
          column: 86
        }
      },
      "153": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 205,
          column: 60
        }
      },
      "154": {
        start: {
          line: 206,
          column: 31
        },
        end: {
          line: 206,
          column: 61
        }
      },
      "155": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 208,
          column: 30
        }
      },
      "156": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 30
        }
      },
      "157": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 23
        }
      },
      "158": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 16
        }
      },
      "159": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 35
        }
      },
      "160": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 36
        }
      },
      "161": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 34
        }
      },
      "162": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 39
        }
      },
      "163": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 32
        }
      },
      "164": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 31
        }
      },
      "165": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "166": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 38
        }
      },
      "167": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 37
        }
      },
      "168": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 41
        }
      },
      "169": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "170": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "171": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 33
        }
      },
      "172": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 241,
          column: 40
        }
      },
      "173": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "174": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 70
        }
      },
      "175": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 52
        }
      },
      "176": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 98
        }
      },
      "177": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 60
        }
      },
      "178": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 250,
          column: 19
        }
      },
      "179": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 19
        }
      },
      "180": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 34
        }
      },
      "181": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "182": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 51
        }
      },
      "183": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 43
        }
      },
      "184": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 65
        }
      },
      "185": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 39
        }
      },
      "186": {
        start: {
          line: 263,
          column: 25
        },
        end: {
          line: 263,
          column: 55
        }
      },
      "187": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "188": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 73
        }
      },
      "189": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 22
        }
      },
      "190": {
        start: {
          line: 268,
          column: 23
        },
        end: {
          line: 268,
          column: 25
        }
      },
      "191": {
        start: {
          line: 269,
          column: 31
        },
        end: {
          line: 269,
          column: 59
        }
      },
      "192": {
        start: {
          line: 271,
          column: 33
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "193": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "194": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 278,
          column: 61
        }
      },
      "195": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 280,
          column: 25
        }
      },
      "196": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 25
        }
      },
      "197": {
        start: {
          line: 281,
          column: 31
        },
        end: {
          line: 281,
          column: 114
        }
      },
      "198": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "199": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 40
        }
      },
      "200": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 287,
          column: 66
        }
      },
      "201": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "202": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 310,
          column: 15
        }
      },
      "203": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "204": {
        start: {
          line: 314,
          column: 33
        },
        end: {
          line: 314,
          column: 75
        }
      },
      "205": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "206": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 337,
          column: 19
        }
      },
      "207": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "208": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 40
        }
      },
      "209": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 98
        }
      },
      "210": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 22
        }
      },
      "211": {
        start: {
          line: 351,
          column: 24
        },
        end: {
          line: 351,
          column: 52
        }
      },
      "212": {
        start: {
          line: 352,
          column: 25
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "213": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 49
        }
      },
      "214": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 42
        }
      },
      "215": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 38
        }
      },
      "216": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 47
        }
      },
      "217": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 68
        }
      },
      "218": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 47
        }
      },
      "219": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 61
        }
      },
      "220": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 51
        }
      },
      "221": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "222": {
        start: {
          line: 387,
          column: 24
        },
        end: {
          line: 387,
          column: 81
        }
      },
      "223": {
        start: {
          line: 388,
          column: 27
        },
        end: {
          line: 388,
          column: 29
        }
      },
      "224": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "225": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 114
        }
      },
      "226": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 82
        }
      },
      "227": {
        start: {
          line: 393,
          column: 25
        },
        end: {
          line: 393,
          column: 55
        }
      },
      "228": {
        start: {
          line: 394,
          column: 25
        },
        end: {
          line: 394,
          column: 44
        }
      },
      "229": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 398,
          column: 16
        }
      },
      "230": {
        start: {
          line: 395,
          column: 36
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "231": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 71
        }
      },
      "232": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 22
        }
      },
      "233": {
        start: {
          line: 409,
          column: 23
        },
        end: {
          line: 409,
          column: 61
        }
      },
      "234": {
        start: {
          line: 410,
          column: 31
        },
        end: {
          line: 410,
          column: 78
        }
      },
      "235": {
        start: {
          line: 410,
          column: 50
        },
        end: {
          line: 410,
          column: 77
        }
      },
      "236": {
        start: {
          line: 411,
          column: 23
        },
        end: {
          line: 411,
          column: 67
        }
      },
      "237": {
        start: {
          line: 412,
          column: 24
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "238": {
        start: {
          line: 414,
          column: 55
        },
        end: {
          line: 414,
          column: 80
        }
      },
      "239": {
        start: {
          line: 418,
          column: 32
        },
        end: {
          line: 418,
          column: 84
        }
      },
      "240": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 424,
          column: 10
        }
      },
      "241": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "242": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 71
        }
      },
      "243": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 19
        }
      },
      "244": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 70
        }
      },
      "245": {
        start: {
          line: 435,
          column: 25
        },
        end: {
          line: 435,
          column: 63
        }
      },
      "246": {
        start: {
          line: 435,
          column: 52
        },
        end: {
          line: 435,
          column: 62
        }
      },
      "247": {
        start: {
          line: 436,
          column: 23
        },
        end: {
          line: 436,
          column: 58
        }
      },
      "248": {
        start: {
          line: 436,
          column: 50
        },
        end: {
          line: 436,
          column: 57
        }
      },
      "249": {
        start: {
          line: 437,
          column: 19
        },
        end: {
          line: 437,
          column: 40
        }
      },
      "250": {
        start: {
          line: 438,
          column: 19
        },
        end: {
          line: 438,
          column: 38
        }
      },
      "251": {
        start: {
          line: 440,
          column: 22
        },
        end: {
          line: 449,
          column: 10
        }
      },
      "252": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 453,
          column: 11
        }
      },
      "253": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 459,
          column: 11
        }
      },
      "254": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 460,
          column: 33
        }
      },
      "255": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 461,
          column: 55
        }
      },
      "256": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 462,
          column: 21
        }
      },
      "257": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 21
        }
      },
      "258": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 64
        }
      },
      "259": {
        start: {
          line: 471,
          column: 30
        },
        end: {
          line: 471,
          column: 59
        }
      },
      "260": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 491,
          column: 9
        }
      },
      "261": {
        start: {
          line: 473,
          column: 35
        },
        end: {
          line: 473,
          column: 64
        }
      },
      "262": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 475,
          column: 25
        }
      },
      "263": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 25
        }
      },
      "264": {
        start: {
          line: 477,
          column: 32
        },
        end: {
          line: 489,
          column: 13
        }
      },
      "265": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 63
        }
      },
      "266": {
        start: {
          line: 494,
          column: 26
        },
        end: {
          line: 494,
          column: 27
        }
      },
      "267": {
        start: {
          line: 495,
          column: 23
        },
        end: {
          line: 495,
          column: 28
        }
      },
      "268": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "269": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 66
        }
      },
      "270": {
        start: {
          line: 500,
          column: 13
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "271": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 66
        }
      },
      "272": {
        start: {
          line: 504,
          column: 29
        },
        end: {
          line: 504,
          column: 70
        }
      },
      "273": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 506,
          column: 24
        }
      },
      "274": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 24
        }
      },
      "275": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 516,
          column: 9
        }
      },
      "276": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 509,
          column: 34
        }
      },
      "277": {
        start: {
          line: 511,
          column: 13
        },
        end: {
          line: 516,
          column: 9
        }
      },
      "278": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 30
        }
      },
      "279": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 515,
          column: 32
        }
      },
      "280": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 534,
          column: 10
        }
      },
      "281": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 566,
          column: 9
        }
      },
      "282": {
        start: {
          line: 539,
          column: 35
        },
        end: {
          line: 539,
          column: 83
        }
      },
      "283": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 541,
          column: 28
        }
      },
      "284": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 28
        }
      },
      "285": {
        start: {
          line: 542,
          column: 27
        },
        end: {
          line: 542,
          column: 59
        }
      },
      "286": {
        start: {
          line: 542,
          column: 51
        },
        end: {
          line: 542,
          column: 58
        }
      },
      "287": {
        start: {
          line: 543,
          column: 26
        },
        end: {
          line: 543,
          column: 70
        }
      },
      "288": {
        start: {
          line: 544,
          column: 32
        },
        end: {
          line: 544,
          column: 77
        }
      },
      "289": {
        start: {
          line: 546,
          column: 30
        },
        end: {
          line: 546,
          column: 55
        }
      },
      "290": {
        start: {
          line: 547,
          column: 29
        },
        end: {
          line: 552,
          column: 13
        }
      },
      "291": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 561,
          column: 14
        }
      },
      "292": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 564,
          column: 62
        }
      },
      "293": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 565,
          column: 24
        }
      },
      "294": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 570,
          column: 21
        }
      },
      "295": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 570,
          column: 21
        }
      },
      "296": {
        start: {
          line: 571,
          column: 8
        },
        end: {
          line: 587,
          column: 9
        }
      },
      "297": {
        start: {
          line: 572,
          column: 29
        },
        end: {
          line: 572,
          column: 60
        }
      },
      "298": {
        start: {
          line: 573,
          column: 26
        },
        end: {
          line: 573,
          column: 49
        }
      },
      "299": {
        start: {
          line: 574,
          column: 35
        },
        end: {
          line: 574,
          column: 66
        }
      },
      "300": {
        start: {
          line: 576,
          column: 26
        },
        end: {
          line: 576,
          column: 75
        }
      },
      "301": {
        start: {
          line: 577,
          column: 31
        },
        end: {
          line: 577,
          column: 49
        }
      },
      "302": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 578,
          column: 28
        }
      },
      "303": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 579,
          column: 37
        }
      },
      "304": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 28
        }
      },
      "305": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 582,
          column: 51
        }
      },
      "306": {
        start: {
          line: 585,
          column: 12
        },
        end: {
          line: 585,
          column: 62
        }
      },
      "307": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 21
        }
      },
      "308": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 601,
          column: 9
        }
      },
      "309": {
        start: {
          line: 592,
          column: 25
        },
        end: {
          line: 596,
          column: 8
        }
      },
      "310": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 597,
          column: 142
        }
      },
      "311": {
        start: {
          line: 600,
          column: 12
        },
        end: {
          line: 600,
          column: 69
        }
      },
      "312": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 613,
          column: 11
        }
      },
      "313": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 44
        }
      },
      "314": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 636,
          column: 10
        }
      },
      "315": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 646,
          column: 11
        }
      },
      "316": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 654,
          column: 11
        }
      },
      "317": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 662,
          column: 11
        }
      },
      "318": {
        start: {
          line: 663,
          column: 8
        },
        end: {
          line: 670,
          column: 11
        }
      },
      "319": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 693,
          column: 9
        }
      },
      "320": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 685,
          column: 15
        }
      },
      "321": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 689,
          column: 15
        }
      },
      "322": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 692,
          column: 71
        }
      },
      "323": {
        start: {
          line: 696,
          column: 8
        },
        end: {
          line: 708,
          column: 9
        }
      },
      "324": {
        start: {
          line: 697,
          column: 25
        },
        end: {
          line: 697,
          column: 110
        }
      },
      "325": {
        start: {
          line: 698,
          column: 25
        },
        end: {
          line: 698,
          column: 35
        }
      },
      "326": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 703,
          column: 13
        }
      },
      "327": {
        start: {
          line: 700,
          column: 33
        },
        end: {
          line: 700,
          column: 62
        }
      },
      "328": {
        start: {
          line: 701,
          column: 16
        },
        end: {
          line: 701,
          column: 61
        }
      },
      "329": {
        start: {
          line: 702,
          column: 16
        },
        end: {
          line: 702,
          column: 66
        }
      },
      "330": {
        start: {
          line: 704,
          column: 12
        },
        end: {
          line: 704,
          column: 73
        }
      },
      "331": {
        start: {
          line: 707,
          column: 12
        },
        end: {
          line: 707,
          column: 62
        }
      },
      "332": {
        start: {
          line: 711,
          column: 8
        },
        end: {
          line: 721,
          column: 9
        }
      },
      "333": {
        start: {
          line: 712,
          column: 25
        },
        end: {
          line: 716,
          column: 8
        }
      },
      "334": {
        start: {
          line: 717,
          column: 12
        },
        end: {
          line: 717,
          column: 102
        }
      },
      "335": {
        start: {
          line: 720,
          column: 12
        },
        end: {
          line: 720,
          column: 61
        }
      },
      "336": {
        start: {
          line: 724,
          column: 25
        },
        end: {
          line: 724,
          column: 56
        }
      },
      "337": {
        start: {
          line: 725,
          column: 8
        },
        end: {
          line: 728,
          column: 11
        }
      },
      "338": {
        start: {
          line: 730,
          column: 8
        },
        end: {
          line: 732,
          column: 9
        }
      },
      "339": {
        start: {
          line: 731,
          column: 12
        },
        end: {
          line: 731,
          column: 63
        }
      },
      "340": {
        start: {
          line: 735,
          column: 8
        },
        end: {
          line: 744,
          column: 10
        }
      },
      "341": {
        start: {
          line: 748,
          column: 24
        },
        end: {
          line: 748,
          column: 33
        }
      },
      "342": {
        start: {
          line: 751,
          column: 8
        },
        end: {
          line: 751,
          column: 23
        }
      },
      "343": {
        start: {
          line: 755,
          column: 8
        },
        end: {
          line: 755,
          column: 18
        }
      },
      "344": {
        start: {
          line: 758,
          column: 29
        },
        end: {
          line: 758,
          column: 38
        }
      },
      "345": {
        start: {
          line: 759,
          column: 8
        },
        end: {
          line: 762,
          column: 11
        }
      },
      "346": {
        start: {
          line: 760,
          column: 26
        },
        end: {
          line: 760,
          column: 61
        }
      },
      "347": {
        start: {
          line: 761,
          column: 12
        },
        end: {
          line: 761,
          column: 54
        }
      },
      "348": {
        start: {
          line: 763,
          column: 8
        },
        end: {
          line: 766,
          column: 39
        }
      },
      "349": {
        start: {
          line: 764,
          column: 28
        },
        end: {
          line: 764,
          column: 39
        }
      },
      "350": {
        start: {
          line: 766,
          column: 31
        },
        end: {
          line: 766,
          column: 37
        }
      },
      "351": {
        start: {
          line: 769,
          column: 32
        },
        end: {
          line: 769,
          column: 41
        }
      },
      "352": {
        start: {
          line: 770,
          column: 8
        },
        end: {
          line: 773,
          column: 9
        }
      },
      "353": {
        start: {
          line: 770,
          column: 29
        },
        end: {
          line: 770,
          column: 62
        }
      },
      "354": {
        start: {
          line: 771,
          column: 12
        },
        end: {
          line: 771,
          column: 91
        }
      },
      "355": {
        start: {
          line: 772,
          column: 12
        },
        end: {
          line: 772,
          column: 95
        }
      },
      "356": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 777,
          column: 9
        }
      },
      "357": {
        start: {
          line: 774,
          column: 29
        },
        end: {
          line: 774,
          column: 60
        }
      },
      "358": {
        start: {
          line: 775,
          column: 12
        },
        end: {
          line: 775,
          column: 87
        }
      },
      "359": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 776,
          column: 94
        }
      },
      "360": {
        start: {
          line: 778,
          column: 8
        },
        end: {
          line: 781,
          column: 9
        }
      },
      "361": {
        start: {
          line: 778,
          column: 29
        },
        end: {
          line: 778,
          column: 59
        }
      },
      "362": {
        start: {
          line: 779,
          column: 12
        },
        end: {
          line: 779,
          column: 102
        }
      },
      "363": {
        start: {
          line: 780,
          column: 12
        },
        end: {
          line: 780,
          column: 95
        }
      },
      "364": {
        start: {
          line: 782,
          column: 8
        },
        end: {
          line: 785,
          column: 9
        }
      },
      "365": {
        start: {
          line: 783,
          column: 12
        },
        end: {
          line: 783,
          column: 100
        }
      },
      "366": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 92
        }
      },
      "367": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 788,
          column: 9
        }
      },
      "368": {
        start: {
          line: 786,
          column: 29
        },
        end: {
          line: 786,
          column: 54
        }
      },
      "369": {
        start: {
          line: 787,
          column: 12
        },
        end: {
          line: 787,
          column: 103
        }
      },
      "370": {
        start: {
          line: 789,
          column: 8
        },
        end: {
          line: 789,
          column: 43
        }
      },
      "371": {
        start: {
          line: 792,
          column: 32
        },
        end: {
          line: 792,
          column: 34
        }
      },
      "372": {
        start: {
          line: 793,
          column: 8
        },
        end: {
          line: 810,
          column: 9
        }
      },
      "373": {
        start: {
          line: 794,
          column: 12
        },
        end: {
          line: 794,
          column: 71
        }
      },
      "374": {
        start: {
          line: 795,
          column: 12
        },
        end: {
          line: 797,
          column: 13
        }
      },
      "375": {
        start: {
          line: 796,
          column: 16
        },
        end: {
          line: 796,
          column: 108
        }
      },
      "376": {
        start: {
          line: 798,
          column: 12
        },
        end: {
          line: 798,
          column: 86
        }
      },
      "377": {
        start: {
          line: 799,
          column: 12
        },
        end: {
          line: 799,
          column: 76
        }
      },
      "378": {
        start: {
          line: 801,
          column: 13
        },
        end: {
          line: 810,
          column: 9
        }
      },
      "379": {
        start: {
          line: 802,
          column: 12
        },
        end: {
          line: 802,
          column: 68
        }
      },
      "380": {
        start: {
          line: 803,
          column: 12
        },
        end: {
          line: 803,
          column: 80
        }
      },
      "381": {
        start: {
          line: 804,
          column: 12
        },
        end: {
          line: 804,
          column: 83
        }
      },
      "382": {
        start: {
          line: 806,
          column: 13
        },
        end: {
          line: 810,
          column: 9
        }
      },
      "383": {
        start: {
          line: 807,
          column: 12
        },
        end: {
          line: 807,
          column: 65
        }
      },
      "384": {
        start: {
          line: 808,
          column: 12
        },
        end: {
          line: 808,
          column: 79
        }
      },
      "385": {
        start: {
          line: 809,
          column: 12
        },
        end: {
          line: 809,
          column: 83
        }
      },
      "386": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 811,
          column: 31
        }
      },
      "387": {
        start: {
          line: 817,
          column: 8
        },
        end: {
          line: 817,
          column: 30
        }
      },
      "388": {
        start: {
          line: 818,
          column: 8
        },
        end: {
          line: 820,
          column: 9
        }
      },
      "389": {
        start: {
          line: 819,
          column: 12
        },
        end: {
          line: 819,
          column: 39
        }
      },
      "390": {
        start: {
          line: 821,
          column: 8
        },
        end: {
          line: 821,
          column: 27
        }
      },
      "391": {
        start: {
          line: 822,
          column: 8
        },
        end: {
          line: 822,
          column: 34
        }
      },
      "392": {
        start: {
          line: 825,
          column: 0
        },
        end: {
          line: 825,
          column: 70
        }
      },
      "393": {
        start: {
          line: 827,
          column: 0
        },
        end: {
          line: 827,
          column: 76
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 50
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 46
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 52,
            column: 38
          },
          end: {
            line: 52,
            column: 39
          }
        },
        loc: {
          start: {
            line: 52,
            column: 52
          },
          end: {
            line: 52,
            column: 61
          }
        },
        line: 52
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 53,
            column: 37
          },
          end: {
            line: 53,
            column: 38
          }
        },
        loc: {
          start: {
            line: 53,
            column: 51
          },
          end: {
            line: 53,
            column: 60
          }
        },
        line: 53
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 54,
            column: 38
          }
        },
        loc: {
          start: {
            line: 54,
            column: 51
          },
          end: {
            line: 54,
            column: 81
          }
        },
        line: 54
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 55,
            column: 36
          },
          end: {
            line: 55,
            column: 37
          }
        },
        loc: {
          start: {
            line: 55,
            column: 50
          },
          end: {
            line: 55,
            column: 80
          }
        },
        line: 55
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 53
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 72
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 75,
            column: 35
          },
          end: {
            line: 75,
            column: 36
          }
        },
        loc: {
          start: {
            line: 75,
            column: 49
          },
          end: {
            line: 75,
            column: 58
          }
        },
        line: 75
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 76,
            column: 44
          },
          end: {
            line: 76,
            column: 45
          }
        },
        loc: {
          start: {
            line: 76,
            column: 58
          },
          end: {
            line: 76,
            column: 87
          }
        },
        line: 76
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 36
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 98
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 118,
            column: 21
          }
        },
        loc: {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 118,
            column: 35
          }
        },
        line: 118
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 37
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 130
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 156,
            column: 43
          },
          end: {
            line: 156,
            column: 44
          }
        },
        loc: {
          start: {
            line: 156,
            column: 58
          },
          end: {
            line: 156,
            column: 93
          }
        },
        line: 156
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 38
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 166
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 24
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 178
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 18
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 182
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 41
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 196
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 201,
            column: 41
          },
          end: {
            line: 201,
            column: 42
          }
        },
        loc: {
          start: {
            line: 201,
            column: 55
          },
          end: {
            line: 201,
            column: 64
          }
        },
        line: 201
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 202,
            column: 39
          },
          end: {
            line: 202,
            column: 40
          }
        },
        loc: {
          start: {
            line: 202,
            column: 53
          },
          end: {
            line: 202,
            column: 62
          }
        },
        line: 202
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 203,
            column: 40
          },
          end: {
            line: 203,
            column: 41
          }
        },
        loc: {
          start: {
            line: 203,
            column: 54
          },
          end: {
            line: 203,
            column: 89
          }
        },
        line: 203
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 204,
            column: 38
          },
          end: {
            line: 204,
            column: 39
          }
        },
        loc: {
          start: {
            line: 204,
            column: 52
          },
          end: {
            line: 204,
            column: 86
          }
        },
        line: 204
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 18
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 213
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 42
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 232
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 236,
            column: 46
          },
          end: {
            line: 236,
            column: 47
          }
        },
        loc: {
          start: {
            line: 236,
            column: 52
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 236
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 237,
            column: 48
          },
          end: {
            line: 237,
            column: 49
          }
        },
        loc: {
          start: {
            line: 237,
            column: 57
          },
          end: {
            line: 240,
            column: 13
          }
        },
        line: 237
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 21
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 248
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 46
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 262
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 52
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 350
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 36
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 372
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 19
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 379
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 38
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 385
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 395,
            column: 28
          },
          end: {
            line: 395,
            column: 29
          }
        },
        loc: {
          start: {
            line: 395,
            column: 36
          },
          end: {
            line: 398,
            column: 13
          }
        },
        line: 395
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 55
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 408
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 410,
            column: 45
          },
          end: {
            line: 410,
            column: 46
          }
        },
        loc: {
          start: {
            line: 410,
            column: 50
          },
          end: {
            line: 410,
            column: 77
          }
        },
        line: 410
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 414,
            column: 50
          },
          end: {
            line: 414,
            column: 51
          }
        },
        loc: {
          start: {
            line: 414,
            column: 55
          },
          end: {
            line: 414,
            column: 80
          }
        },
        line: 414
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 429,
            column: 5
          }
        },
        loc: {
          start: {
            line: 429,
            column: 29
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 429
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 435,
            column: 47
          },
          end: {
            line: 435,
            column: 48
          }
        },
        loc: {
          start: {
            line: 435,
            column: 52
          },
          end: {
            line: 435,
            column: 62
          }
        },
        line: 435
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 436,
            column: 45
          },
          end: {
            line: 436,
            column: 46
          }
        },
        loc: {
          start: {
            line: 436,
            column: 50
          },
          end: {
            line: 436,
            column: 57
          }
        },
        line: 436
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 35
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 468
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 68
          },
          end: {
            line: 535,
            column: 5
          }
        },
        line: 493
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 5
          }
        },
        loc: {
          start: {
            line: 536,
            column: 44
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 536
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 542,
            column: 46
          },
          end: {
            line: 542,
            column: 47
          }
        },
        loc: {
          start: {
            line: 542,
            column: 51
          },
          end: {
            line: 542,
            column: 58
          }
        },
        line: 542
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 568,
            column: 4
          },
          end: {
            line: 568,
            column: 5
          }
        },
        loc: {
          start: {
            line: 568,
            column: 35
          },
          end: {
            line: 588,
            column: 5
          }
        },
        line: 568
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 589,
            column: 5
          }
        },
        loc: {
          start: {
            line: 589,
            column: 27
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 589
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 616,
            column: 4
          },
          end: {
            line: 616,
            column: 5
          }
        },
        loc: {
          start: {
            line: 616,
            column: 28
          },
          end: {
            line: 637,
            column: 5
          }
        },
        line: 616
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 638,
            column: 4
          },
          end: {
            line: 638,
            column: 5
          }
        },
        loc: {
          start: {
            line: 638,
            column: 29
          },
          end: {
            line: 671,
            column: 5
          }
        },
        line: 638
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 672,
            column: 4
          },
          end: {
            line: 672,
            column: 5
          }
        },
        loc: {
          start: {
            line: 672,
            column: 34
          },
          end: {
            line: 694,
            column: 5
          }
        },
        line: 672
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 695,
            column: 4
          },
          end: {
            line: 695,
            column: 5
          }
        },
        loc: {
          start: {
            line: 695,
            column: 38
          },
          end: {
            line: 709,
            column: 5
          }
        },
        line: 695
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 710,
            column: 4
          },
          end: {
            line: 710,
            column: 5
          }
        },
        loc: {
          start: {
            line: 710,
            column: 33
          },
          end: {
            line: 722,
            column: 5
          }
        },
        line: 710
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 723,
            column: 4
          },
          end: {
            line: 723,
            column: 5
          }
        },
        loc: {
          start: {
            line: 723,
            column: 29
          },
          end: {
            line: 733,
            column: 5
          }
        },
        line: 723
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 734,
            column: 4
          },
          end: {
            line: 734,
            column: 5
          }
        },
        loc: {
          start: {
            line: 734,
            column: 31
          },
          end: {
            line: 745,
            column: 5
          }
        },
        line: 734
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 746,
            column: 4
          },
          end: {
            line: 746,
            column: 5
          }
        },
        loc: {
          start: {
            line: 746,
            column: 29
          },
          end: {
            line: 752,
            column: 5
          }
        },
        line: 746
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 753,
            column: 4
          },
          end: {
            line: 753,
            column: 5
          }
        },
        loc: {
          start: {
            line: 753,
            column: 48
          },
          end: {
            line: 756,
            column: 5
          }
        },
        line: 753
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 757,
            column: 4
          },
          end: {
            line: 757,
            column: 5
          }
        },
        loc: {
          start: {
            line: 757,
            column: 35
          },
          end: {
            line: 767,
            column: 5
          }
        },
        line: 757
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 759,
            column: 23
          },
          end: {
            line: 759,
            column: 24
          }
        },
        loc: {
          start: {
            line: 759,
            column: 32
          },
          end: {
            line: 762,
            column: 9
          }
        },
        line: 759
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 764,
            column: 18
          },
          end: {
            line: 764,
            column: 19
          }
        },
        loc: {
          start: {
            line: 764,
            column: 28
          },
          end: {
            line: 764,
            column: 39
          }
        },
        line: 764
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 766,
            column: 17
          },
          end: {
            line: 766,
            column: 18
          }
        },
        loc: {
          start: {
            line: 766,
            column: 31
          },
          end: {
            line: 766,
            column: 37
          }
        },
        line: 766
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 768,
            column: 4
          },
          end: {
            line: 768,
            column: 5
          }
        },
        loc: {
          start: {
            line: 768,
            column: 44
          },
          end: {
            line: 790,
            column: 5
          }
        },
        line: 768
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 770,
            column: 24
          },
          end: {
            line: 770,
            column: 25
          }
        },
        loc: {
          start: {
            line: 770,
            column: 29
          },
          end: {
            line: 770,
            column: 62
          }
        },
        line: 770
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 774,
            column: 24
          },
          end: {
            line: 774,
            column: 25
          }
        },
        loc: {
          start: {
            line: 774,
            column: 29
          },
          end: {
            line: 774,
            column: 60
          }
        },
        line: 774
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 778,
            column: 24
          },
          end: {
            line: 778,
            column: 25
          }
        },
        loc: {
          start: {
            line: 778,
            column: 29
          },
          end: {
            line: 778,
            column: 59
          }
        },
        line: 778
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 786,
            column: 24
          },
          end: {
            line: 786,
            column: 25
          }
        },
        loc: {
          start: {
            line: 786,
            column: 29
          },
          end: {
            line: 786,
            column: 54
          }
        },
        line: 786
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 791,
            column: 4
          },
          end: {
            line: 791,
            column: 5
          }
        },
        loc: {
          start: {
            line: 791,
            column: 53
          },
          end: {
            line: 812,
            column: 5
          }
        },
        line: 791
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 816,
            column: 4
          },
          end: {
            line: 816,
            column: 5
          }
        },
        loc: {
          start: {
            line: 816,
            column: 20
          },
          end: {
            line: 823,
            column: 5
          }
        },
        line: 816
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 46,
            column: 36
          },
          end: {
            line: 46,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 44
          },
          end: {
            line: 46,
            column: 48
          }
        }],
        line: 46
      },
      "18": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "19": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 18
          }
        }, {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 28
          }
        }],
        line: 49
      },
      "20": {
        loc: {
          start: {
            line: 72,
            column: 38
          },
          end: {
            line: 72,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 72,
            column: 50
          },
          end: {
            line: 72,
            column: 51
          }
        }],
        line: 72
      },
      "21": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "22": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "23": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "24": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "25": {
        loc: {
          start: {
            line: 123,
            column: 20
          },
          end: {
            line: 123,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 32
          },
          end: {
            line: 123,
            column: 43
          }
        }, {
          start: {
            line: 123,
            column: 46
          },
          end: {
            line: 123,
            column: 57
          }
        }],
        line: 123
      },
      "26": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "27": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "28": {
        loc: {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 149,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 148,
            column: 61
          }
        }, {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 61
          }
        }],
        line: 148
      },
      "29": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "30": {
        loc: {
          start: {
            line: 156,
            column: 58
          },
          end: {
            line: 156,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 83
          },
          end: {
            line: 156,
            column: 87
          }
        }, {
          start: {
            line: 156,
            column: 90
          },
          end: {
            line: 156,
            column: 93
          }
        }],
        line: 156
      },
      "31": {
        loc: {
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 161,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 48
          }
        }, {
          start: {
            line: 161,
            column: 51
          },
          end: {
            line: 161,
            column: 60
          }
        }],
        line: 161
      },
      "32": {
        loc: {
          start: {
            line: 162,
            column: 23
          },
          end: {
            line: 162,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 34
          },
          end: {
            line: 162,
            column: 53
          }
        }, {
          start: {
            line: 162,
            column: 56
          },
          end: {
            line: 162,
            column: 65
          }
        }],
        line: 162
      },
      "33": {
        loc: {
          start: {
            line: 163,
            column: 24
          },
          end: {
            line: 163,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 35
          },
          end: {
            line: 163,
            column: 86
          }
        }, {
          start: {
            line: 163,
            column: 89
          },
          end: {
            line: 163,
            column: 90
          }
        }],
        line: 163
      },
      "34": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "35": {
        loc: {
          start: {
            line: 190,
            column: 21
          },
          end: {
            line: 190,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 30
          },
          end: {
            line: 190,
            column: 31
          }
        }, {
          start: {
            line: 190,
            column: 34
          },
          end: {
            line: 190,
            column: 36
          }
        }],
        line: 190
      },
      "36": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 200,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 200,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "37": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 199,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 199,
            column: 29
          }
        }, {
          start: {
            line: 199,
            column: 33
          },
          end: {
            line: 199,
            column: 49
          }
        }],
        line: 199
      },
      "38": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 208,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 208,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "39": {
        loc: {
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 232,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 232,
            column: 38
          },
          end: {
            line: 232,
            column: 40
          }
        }],
        line: 232
      },
      "40": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 234,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 234,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "41": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 250,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 250,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "42": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "43": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "44": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 280,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 280,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "45": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "46": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "47": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 25
          }
        }, {
          start: {
            line: 288,
            column: 29
          },
          end: {
            line: 288,
            column: 64
          }
        }],
        line: 288
      },
      "48": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "49": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "50": {
        loc: {
          start: {
            line: 358,
            column: 25
          },
          end: {
            line: 358,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 25
          },
          end: {
            line: 358,
            column: 45
          }
        }, {
          start: {
            line: 358,
            column: 49
          },
          end: {
            line: 358,
            column: 69
          }
        }, {
          start: {
            line: 358,
            column: 73
          },
          end: {
            line: 358,
            column: 82
          }
        }],
        line: 358
      },
      "51": {
        loc: {
          start: {
            line: 360,
            column: 24
          },
          end: {
            line: 360,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 24
          },
          end: {
            line: 360,
            column: 43
          }
        }, {
          start: {
            line: 360,
            column: 47
          },
          end: {
            line: 360,
            column: 51
          }
        }],
        line: 360
      },
      "52": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "53": {
        loc: {
          start: {
            line: 416,
            column: 26
          },
          end: {
            line: 416,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 416,
            column: 26
          },
          end: {
            line: 416,
            column: 39
          }
        }, {
          start: {
            line: 416,
            column: 43
          },
          end: {
            line: 416,
            column: 51
          }
        }],
        line: 416
      },
      "54": {
        loc: {
          start: {
            line: 422,
            column: 20
          },
          end: {
            line: 422,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 422,
            column: 29
          },
          end: {
            line: 422,
            column: 37
          }
        }, {
          start: {
            line: 422,
            column: 40
          },
          end: {
            line: 422,
            column: 42
          }
        }],
        line: 422
      },
      "55": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "56": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 475,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 475,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "57": {
        loc: {
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        }, {
          start: {
            line: 500,
            column: 13
          },
          end: {
            line: 502,
            column: 9
          }
        }],
        line: 497
      },
      "58": {
        loc: {
          start: {
            line: 497,
            column: 12
          },
          end: {
            line: 497,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 497,
            column: 12
          },
          end: {
            line: 497,
            column: 46
          }
        }, {
          start: {
            line: 497,
            column: 50
          },
          end: {
            line: 497,
            column: 81
          }
        }],
        line: 497
      },
      "59": {
        loc: {
          start: {
            line: 500,
            column: 13
          },
          end: {
            line: 502,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 13
          },
          end: {
            line: 502,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "60": {
        loc: {
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 506,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 506,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      },
      "61": {
        loc: {
          start: {
            line: 508,
            column: 8
          },
          end: {
            line: 516,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 508,
            column: 8
          },
          end: {
            line: 516,
            column: 9
          }
        }, {
          start: {
            line: 511,
            column: 13
          },
          end: {
            line: 516,
            column: 9
          }
        }],
        line: 508
      },
      "62": {
        loc: {
          start: {
            line: 511,
            column: 13
          },
          end: {
            line: 516,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 511,
            column: 13
          },
          end: {
            line: 516,
            column: 9
          }
        }, {
          start: {
            line: 514,
            column: 13
          },
          end: {
            line: 516,
            column: 9
          }
        }],
        line: 511
      },
      "63": {
        loc: {
          start: {
            line: 529,
            column: 23
          },
          end: {
            line: 529,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 529,
            column: 41
          },
          end: {
            line: 529,
            column: 52
          }
        }, {
          start: {
            line: 529,
            column: 55
          },
          end: {
            line: 529,
            column: 66
          }
        }],
        line: 529
      },
      "64": {
        loc: {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 541,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 541,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "65": {
        loc: {
          start: {
            line: 555,
            column: 24
          },
          end: {
            line: 555,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 555,
            column: 33
          },
          end: {
            line: 555,
            column: 92
          }
        }, {
          start: {
            line: 555,
            column: 95
          },
          end: {
            line: 555,
            column: 103
          }
        }],
        line: 555
      },
      "66": {
        loc: {
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 570,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 570,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 569
      },
      "67": {
        loc: {
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 732,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 732,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 730
      },
      "68": {
        loc: {
          start: {
            line: 760,
            column: 26
          },
          end: {
            line: 760,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 760,
            column: 26
          },
          end: {
            line: 760,
            column: 56
          }
        }, {
          start: {
            line: 760,
            column: 60
          },
          end: {
            line: 760,
            column: 61
          }
        }],
        line: 760
      },
      "69": {
        loc: {
          start: {
            line: 770,
            column: 8
          },
          end: {
            line: 773,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 770,
            column: 8
          },
          end: {
            line: 773,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 770
      },
      "70": {
        loc: {
          start: {
            line: 774,
            column: 8
          },
          end: {
            line: 777,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 774,
            column: 8
          },
          end: {
            line: 777,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 774
      },
      "71": {
        loc: {
          start: {
            line: 778,
            column: 8
          },
          end: {
            line: 781,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 778,
            column: 8
          },
          end: {
            line: 781,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 778
      },
      "72": {
        loc: {
          start: {
            line: 782,
            column: 8
          },
          end: {
            line: 785,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 782,
            column: 8
          },
          end: {
            line: 785,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 782
      },
      "73": {
        loc: {
          start: {
            line: 786,
            column: 8
          },
          end: {
            line: 788,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 786,
            column: 8
          },
          end: {
            line: 788,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 786
      },
      "74": {
        loc: {
          start: {
            line: 793,
            column: 8
          },
          end: {
            line: 810,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 793,
            column: 8
          },
          end: {
            line: 810,
            column: 9
          }
        }, {
          start: {
            line: 801,
            column: 13
          },
          end: {
            line: 810,
            column: 9
          }
        }],
        line: 793
      },
      "75": {
        loc: {
          start: {
            line: 795,
            column: 12
          },
          end: {
            line: 797,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 795,
            column: 12
          },
          end: {
            line: 797,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 795
      },
      "76": {
        loc: {
          start: {
            line: 801,
            column: 13
          },
          end: {
            line: 810,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 801,
            column: 13
          },
          end: {
            line: 810,
            column: 9
          }
        }, {
          start: {
            line: 806,
            column: 13
          },
          end: {
            line: 810,
            column: 9
          }
        }],
        line: 801
      },
      "77": {
        loc: {
          start: {
            line: 806,
            column: 13
          },
          end: {
            line: 810,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 806,
            column: 13
          },
          end: {
            line: 810,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 806
      },
      "78": {
        loc: {
          start: {
            line: 818,
            column: 8
          },
          end: {
            line: 820,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 818,
            column: 8
          },
          end: {
            line: 820,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 818
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/performance/PerformanceRegressionDetector.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceRegressionDetector.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { db } from '../../database/connection';\nimport { LoadTestResults } from './LoadTestingFramework';\nimport { performanceMonitor } from './PerformanceMonitor';\nimport { alertingSystem, AlertType } from '../health/AlertingSystem';\nimport { LRUCache } from 'lru-cache';\nimport * as tf from '@tensorflow/tfjs-node';\n\nexport interface RegressionBaseline {\n  id: string;\n  scenarioId: string;\n  metrics: PerformanceMetrics;\n  timestamp: Date;\n  version?: string;\n  environment?: string;\n  sampleSize: number;\n  confidence: number;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: {\n    mean: number;\n    p50: number;\n    p95: number;\n    p99: number;\n    std: number;\n  };\n  throughput: {\n    mean: number;\n    std: number;\n  };\n  errorRate: number;\n  availability: number;\n  resourceUsage: {\n    cpu: number;\n    memory: number;\n    io: number;\n  };\n}\n\nexport interface RegressionAlert {\n  id: string;\n  scenarioId: string;\n  metric: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  degradation: number; // Percentage\n  baseline: number;\n  current: number;\n  threshold: number;\n  confidence: number;\n  timestamp: Date;\n  additionalContext: {\n    trend: 'improving' | 'stable' | 'degrading';\n    changePoints: number[];\n    seasonality?: string;\n    correlatedMetrics: string[];\n  };\n  recommendations: string[];\n}\n\nexport interface RegressionThreshold {\n  metric: string;\n  warning: number; // Percentage change\n  critical: number; // Percentage change\n  method: 'absolute' | 'statistical' | 'adaptive';\n  confidence: number; // Statistical confidence level\n  minSampleSize: number;\n}\n\nexport interface ChangePointDetection {\n  timestamp: number;\n  confidence: number;\n  changeType: 'level' | 'trend' | 'variance';\n  magnitude: number;\n  metrics: string[];\n}\n\nexport interface TrendAnalysis {\n  metric: string;\n  period: string;\n  trend: 'improving' | 'stable' | 'degrading';\n  slope: number;\n  correlation: number;\n  seasonality: {\n    detected: boolean;\n    period?: number;\n    amplitude?: number;\n  };\n  forecast: {\n    nextValue: number;\n    confidence: number;\n    upperBound: number;\n    lowerBound: number;\n  };\n}\n\nclass StatisticalAnalyzer {\n  /**\n   * Calculate statistical significance using Student's t-test\n   */\n  static tTest(baseline: number[], current: number[], alpha: number = 0.05): {\n    significant: boolean;\n    pValue: number;\n    tStatistic: number;\n    degreesOfFreedom: number;\n  } {\n    const n1 = baseline.length;\n    const n2 = current.length;\n    \n    if (n1 < 2 || n2 < 2) {\n      return { significant: false, pValue: 1, tStatistic: 0, degreesOfFreedom: 0 };\n    }\n\n    const mean1 = baseline.reduce((sum, val) => sum + val, 0) / n1;\n    const mean2 = current.reduce((sum, val) => sum + val, 0) / n2;\n    \n    const var1 = baseline.reduce((sum, val) => sum + Math.pow(val - mean1, 2), 0) / (n1 - 1);\n    const var2 = current.reduce((sum, val) => sum + Math.pow(val - mean2, 2), 0) / (n2 - 1);\n    \n    const pooledVar = ((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2);\n    const standardError = Math.sqrt(pooledVar * (1/n1 + 1/n2));\n    \n    const tStatistic = (mean2 - mean1) / standardError;\n    const degreesOfFreedom = n1 + n2 - 2;\n    \n    // Simplified p-value calculation (in production, use proper statistical library)\n    const pValue = this.calculatePValue(Math.abs(tStatistic), degreesOfFreedom);\n    \n    return {\n      significant: pValue < alpha,\n      pValue,\n      tStatistic,\n      degreesOfFreedom\n    };\n  }\n\n  /**\n   * Detect change points in time series using CUSUM\n   */\n  static detectChangePoints(values: number[], threshold: number = 5): ChangePointDetection[] {\n    if (values.length < 10) return [];\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const std = Math.sqrt(values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length);\n    \n    let cusum = 0;\n    const changePoints: ChangePointDetection[] = [];\n    \n    for (let i = 1; i < values.length; i++) {\n      cusum = Math.max(0, cusum + (values[i] - mean) / std - 0.5);\n      \n      if (cusum > threshold) {\n        const magnitude = Math.abs(values[i] - mean) / std;\n        changePoints.push({\n          timestamp: i,\n          confidence: Math.min(cusum / threshold, 1),\n          changeType: this.classifyChange(values, i),\n          magnitude,\n          metrics: ['responseTime'] // Simplified\n        });\n        cusum = 0; // Reset after detection\n      }\n    }\n    \n    return changePoints;\n  }\n\n  /**\n   * Calculate Mann-Kendall trend test\n   */\n  static mannKendallTrend(values: number[]): {\n    trend: 'improving' | 'stable' | 'degrading';\n    slope: number;\n    significance: number;\n  } {\n    const n = values.length;\n    if (n < 4) {\n      return { trend: 'stable', slope: 0, significance: 0 };\n    }\n\n    let s = 0;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = i + 1; j < n; j++) {\n        s += Math.sign(values[j] - values[i]);\n      }\n    }\n\n    const variance = n * (n - 1) * (2 * n + 5) / 18;\n    const z = s / Math.sqrt(variance);\n    \n    // Calculate Theil-Sen slope estimator\n    const slopes: number[] = [];\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = i + 1; j < n; j++) {\n        slopes.push((values[j] - values[i]) / (j - i));\n      }\n    }\n    slopes.sort((a, b) => a - b);\n    const slope = slopes[Math.floor(slopes.length / 2)];\n\n    const significance = Math.abs(z);\n    let trend: 'improving' | 'stable' | 'degrading' = 'stable';\n    \n    if (significance > 1.96) { // 95% confidence\n      trend = slope > 0 ? 'degrading' : 'improving';\n    }\n\n    return { trend, slope, significance };\n  }\n\n  /**\n   * Detect seasonality using FFT\n   */\n  static detectSeasonality(values: number[]): {\n    detected: boolean;\n    period?: number;\n    amplitude?: number;\n    confidence: number;\n  } {\n    if (values.length < 24) {\n      return { detected: false, confidence: 0 };\n    }\n\n    // Simplified seasonality detection\n    // In production, use proper FFT implementation\n    const autocorrelations: number[] = [];\n    const maxLag = Math.min(values.length / 3, 48);\n    \n    for (let lag = 1; lag <= maxLag; lag++) {\n      let correlation = 0;\n      for (let i = lag; i < values.length; i++) {\n        correlation += values[i] * values[i - lag];\n      }\n      autocorrelations.push(correlation / (values.length - lag));\n    }\n\n    // Find peaks in autocorrelation\n    const peaks: { lag: number; value: number }[] = [];\n    for (let i = 1; i < autocorrelations.length - 1; i++) {\n      if (autocorrelations[i] > autocorrelations[i - 1] && \n          autocorrelations[i] > autocorrelations[i + 1]) {\n        peaks.push({ lag: i + 1, value: autocorrelations[i] });\n      }\n    }\n\n    if (peaks.length === 0) {\n      return { detected: false, confidence: 0 };\n    }\n\n    const strongestPeak = peaks.reduce((max, peak) => \n      peak.value > max.value ? peak : max);\n\n    const threshold = Math.max(...autocorrelations) * 0.3;\n    const detected = strongestPeak.value > threshold;\n\n    return {\n      detected,\n      period: detected ? strongestPeak.lag : undefined,\n      amplitude: detected ? strongestPeak.value : undefined,\n      confidence: detected ? strongestPeak.value / Math.max(...autocorrelations) : 0\n    };\n  }\n\n  private static calculatePValue(tStat: number, df: number): number {\n    // Simplified p-value calculation\n    // In production, use proper statistical library\n    const t = Math.abs(tStat);\n    if (df >= 30) {\n      // Approximate with normal distribution for large df\n      return 2 * (1 - this.normalCDF(t));\n    }\n    \n    // Simplified approximation for small df\n    const p = 1 / (1 + t * t / df);\n    return 2 * Math.pow(p, df / 2);\n  }\n\n  private static normalCDF(x: number): number {\n    // Approximation of normal CDF\n    return 0.5 * (1 + this.erf(x / Math.sqrt(2)));\n  }\n\n  private static erf(x: number): number {\n    // Approximation of error function\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n\n    const sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n\n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n    return sign * y;\n  }\n\n  private static classifyChange(values: number[], index: number): 'level' | 'trend' | 'variance' {\n    const before = values.slice(Math.max(0, index - 5), index);\n    const after = values.slice(index, Math.min(values.length, index + 5));\n    \n    if (before.length < 2 || after.length < 2) return 'level';\n    \n    const meanBefore = before.reduce((sum, val) => sum + val, 0) / before.length;\n    const meanAfter = after.reduce((sum, val) => sum + val, 0) / after.length;\n    const varBefore = before.reduce((sum, val) => sum + Math.pow(val - meanBefore, 2), 0) / before.length;\n    const varAfter = after.reduce((sum, val) => sum + Math.pow(val - meanAfter, 2), 0) / after.length;\n    \n    const levelChange = Math.abs(meanAfter - meanBefore);\n    const varianceChange = Math.abs(varAfter - varBefore);\n    \n    if (varianceChange > levelChange * 2) return 'variance';\n    return 'level';\n  }\n}\n\nexport class PerformanceRegressionDetector extends EventEmitter {\n  private baselines: Map<string, RegressionBaseline> = new Map();\n  private thresholds: Map<string, RegressionThreshold> = new Map();\n  private cache: LRUCache<string, any>;\n  private isMonitoring: boolean = false;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private neuralModel: tf.LayersModel | null = null;\n  private trainingData: Array<{ features: number[]; label: number }> = [];\n\n  constructor() {\n    super();\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 15 // 15 minutes\n    });\n    \n    this.setupDefaultThresholds();\n    this.initializeNeuralModel();\n    this.loadBaselinesFromDatabase();\n  }\n\n  /**\n   * Start automated regression monitoring\n   */\n  startMonitoring(intervalMinutes: number = 15): void {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    this.monitoringInterval = setInterval(() => {\n      this.performRegressionCheck().catch(error => {\n        console.error('Regression monitoring failed:', error);\n        this.emit('monitoringError', error);\n      });\n    }, intervalMinutes * 60 * 1000);\n\n    console.log(`Performance regression monitoring started (${intervalMinutes}min interval)`);\n    this.emit('monitoringStarted', { intervalMinutes });\n  }\n\n  /**\n   * Stop automated monitoring\n   */\n  stopMonitoring(): void {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    console.log('Performance regression monitoring stopped');\n    this.emit('monitoringStopped');\n  }\n\n  /**\n   * Analyze load test results for regressions\n   */\n  async analyzeResults(scenarioId: string, results: LoadTestResults): Promise<RegressionAlert[]> {\n    const baseline = this.baselines.get(scenarioId);\n    if (!baseline) {\n      console.log(`No baseline found for scenario: ${scenarioId}`);\n      return [];\n    }\n\n    const alerts: RegressionAlert[] = [];\n    const currentMetrics = this.extractMetrics(results);\n\n    // Analyze each metric\n    const metricsToAnalyze = [\n      { key: 'responseTime.p95', current: currentMetrics.responseTime.p95, baseline: baseline.metrics.responseTime.p95 },\n      { key: 'responseTime.mean', current: currentMetrics.responseTime.mean, baseline: baseline.metrics.responseTime.mean },\n      { key: 'throughput.mean', current: currentMetrics.throughput.mean, baseline: baseline.metrics.throughput.mean },\n      { key: 'errorRate', current: currentMetrics.errorRate, baseline: baseline.metrics.errorRate }\n    ];\n\n    for (const metric of metricsToAnalyze) {\n      const threshold = this.thresholds.get(metric.key);\n      if (!threshold) continue;\n\n      const regression = await this.detectRegression(metric.key, metric.current, metric.baseline, threshold);\n      if (regression) {\n        alerts.push(regression);\n      }\n    }\n\n    // Perform trend analysis\n    const trendAnalysis = await this.analyzeTrends(scenarioId);\n    if (trendAnalysis && trendAnalysis.trend === 'degrading') {\n      alerts.push({\n        id: `trend-${scenarioId}-${Date.now()}`,\n        scenarioId,\n        metric: 'trend',\n        severity: 'medium',\n        degradation: Math.abs(trendAnalysis.slope) * 100,\n        baseline: 0,\n        current: trendAnalysis.slope,\n        threshold: 0.1,\n        confidence: trendAnalysis.correlation,\n        timestamp: new Date(),\n        additionalContext: {\n          trend: trendAnalysis.trend,\n          changePoints: [],\n          correlatedMetrics: []\n        },\n        recommendations: [\n          'Performance trend is degrading over time',\n          'Consider investigating recent changes or increased load',\n          'Monitor system resources for potential bottlenecks'\n        ]\n      });\n    }\n\n    // Use neural model for anomaly detection\n    if (this.neuralModel) {\n      const anomalyScore = await this.detectAnomalies(currentMetrics);\n      if (anomalyScore > 0.8) {\n        alerts.push({\n          id: `anomaly-${scenarioId}-${Date.now()}`,\n          scenarioId,\n          metric: 'anomaly',\n          severity: 'high',\n          degradation: anomalyScore * 100,\n          baseline: 0.5,\n          current: anomalyScore,\n          threshold: 0.8,\n          confidence: anomalyScore,\n          timestamp: new Date(),\n          additionalContext: {\n            trend: 'stable',\n            changePoints: [],\n            correlatedMetrics: []\n          },\n          recommendations: [\n            'Neural network detected performance anomaly',\n            'Current metrics deviate significantly from learned patterns',\n            'Investigate system changes or unusual load patterns'\n          ]\n        });\n      }\n    }\n\n    // Send alerts\n    for (const alert of alerts) {\n      await this.sendAlert(alert);\n    }\n\n    this.emit('regressionAnalysisComplete', { scenarioId, alerts, currentMetrics, baseline });\n    return alerts;\n  }\n\n  /**\n   * Set or update baseline for a scenario\n   */\n  async setBaseline(scenarioId: string, results: LoadTestResults, options?: {\n    version?: string;\n    environment?: string;\n    confidence?: number;\n  }): Promise<void> {\n    const metrics = this.extractMetrics(results);\n    const baseline: RegressionBaseline = {\n      id: `${scenarioId}-${Date.now()}`,\n      scenarioId,\n      metrics,\n      timestamp: new Date(),\n      version: options?.version,\n      environment: options?.environment || process.env.NODE_ENV || 'unknown',\n      sampleSize: results.summary.totalRequests,\n      confidence: options?.confidence || 0.95\n    };\n\n    this.baselines.set(scenarioId, baseline);\n    await this.saveBaseline(baseline);\n    \n    // Add to training data for neural model\n    this.addTrainingData(metrics);\n    \n    this.emit('baselineUpdated', baseline);\n    console.log(`Baseline updated for scenario: ${scenarioId}`);\n  }\n\n  /**\n   * Configure regression thresholds\n   */\n  setThreshold(metric: string, threshold: RegressionThreshold): void {\n    this.thresholds.set(metric, threshold);\n    this.emit('thresholdUpdated', { metric, threshold });\n  }\n\n  /**\n   * Get all baselines\n   */\n  getBaselines(): RegressionBaseline[] {\n    return Array.from(this.baselines.values());\n  }\n\n  /**\n   * Get regression alerts for a time period\n   */\n  async getRegressionAlerts(period?: { start: Date; end: Date }): Promise<RegressionAlert[]> {\n    try {\n      let query = 'SELECT * FROM regression_alerts ORDER BY timestamp DESC';\n      const params: any[] = [];\n\n      if (period) {\n        query = 'SELECT * FROM regression_alerts WHERE timestamp BETWEEN ? AND ? ORDER BY timestamp DESC';\n        params.push(period.start.toISOString(), period.end.toISOString());\n      }\n\n      const stmt = db.prepare(query);\n      const rows = stmt.all(...params) as any[];\n      \n      return rows.map(row => ({\n        ...JSON.parse(row.alert_data),\n        timestamp: new Date(row.timestamp)\n      }));\n    } catch (error) {\n      console.error('Failed to fetch regression alerts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate regression report\n   */\n  async generateRegressionReport(scenarioId: string, period: { start: Date; end: Date }): Promise<{\n    summary: {\n      totalAlerts: number;\n      criticalAlerts: number;\n      mostAffectedMetrics: string[];\n      overallTrend: 'improving' | 'stable' | 'degrading';\n    };\n    alerts: RegressionAlert[];\n    trends: TrendAnalysis[];\n    recommendations: string[];\n  }> {\n    const alerts = await this.getRegressionAlerts(period);\n    const scenarioAlerts = alerts.filter(a => a.scenarioId === scenarioId);\n    \n    const trends = await this.analyzeTrends(scenarioId, period);\n    \n    const summary = {\n      totalAlerts: scenarioAlerts.length,\n      criticalAlerts: scenarioAlerts.filter(a => a.severity === 'critical').length,\n      mostAffectedMetrics: this.getMostAffectedMetrics(scenarioAlerts),\n      overallTrend: trends?.trend || 'stable' as 'improving' | 'stable' | 'degrading'\n    };\n\n    const recommendations = this.generateRecommendations(scenarioAlerts, trends);\n\n    return {\n      summary,\n      alerts: scenarioAlerts,\n      trends: trends ? [trends] : [],\n      recommendations\n    };\n  }\n\n  /**\n   * Train neural model for anomaly detection\n   */\n  async trainNeuralModel(): Promise<void> {\n    if (this.trainingData.length < 100) {\n      console.log('Insufficient training data for neural model');\n      return;\n    }\n\n    console.log('Training neural model for anomaly detection...');\n    \n    const features = this.trainingData.map(d => d.features);\n    const labels = this.trainingData.map(d => d.label);\n    \n    const xs = tf.tensor2d(features);\n    const ys = tf.tensor1d(labels);\n    \n    // Create autoencoder for anomaly detection\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({ inputShape: [features[0].length], units: 64, activation: 'relu' }),\n        tf.layers.dense({ units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 16, activation: 'relu' }),\n        tf.layers.dense({ units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 64, activation: 'relu' }),\n        tf.layers.dense({ units: features[0].length, activation: 'linear' })\n      ]\n    });\n    \n    model.compile({\n      optimizer: 'adam',\n      loss: 'meanSquaredError'\n    });\n    \n    await model.fit(xs, xs, {\n      epochs: 100,\n      batchSize: 32,\n      validationSplit: 0.2,\n      verbose: 0\n    });\n    \n    this.neuralModel = model;\n    console.log('Neural model training completed');\n    \n    xs.dispose();\n    ys.dispose();\n  }\n\n  /**\n   * Private methods\n   */\n  private async performRegressionCheck(): Promise<void> {\n    console.log('Performing automated regression check...');\n    \n    // Get recent performance data\n    const recentMetrics = await this.getRecentMetrics();\n    \n    for (const [scenarioId, baseline] of this.baselines) {\n      const currentMetrics = recentMetrics.get(scenarioId);\n      if (!currentMetrics) continue;\n      \n      // Mock LoadTestResults for compatibility\n      const mockResults: LoadTestResults = {\n        scenario: { id: scenarioId } as any,\n        summary: { totalRequests: 100 } as any,\n        metrics: {\n          responseTime: currentMetrics.responseTime,\n          throughput: currentMetrics.throughput,\n          errorRate: currentMetrics.errorRate\n        } as any,\n        timeline: [],\n        errors: [],\n        thresholdResults: [],\n        recommendations: []\n      };\n      \n      await this.analyzeResults(scenarioId, mockResults);\n    }\n  }\n\n  private async detectRegression(\n    metricKey: string,\n    current: number,\n    baseline: number,\n    threshold: RegressionThreshold\n  ): Promise<RegressionAlert | null> {\n    let degradation = 0;\n    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    \n    // Calculate degradation based on metric type\n    if (metricKey.includes('responseTime') || metricKey.includes('errorRate')) {\n      degradation = ((current - baseline) / baseline) * 100;\n    } else if (metricKey.includes('throughput')) {\n      degradation = ((baseline - current) / baseline) * 100;\n    }\n    \n    // Determine if regression occurred\n    const isRegression = Math.abs(degradation) > threshold.warning;\n    if (!isRegression) return null;\n    \n    // Determine severity\n    if (Math.abs(degradation) > threshold.critical) {\n      severity = 'critical';\n    } else if (Math.abs(degradation) > threshold.warning * 1.5) {\n      severity = 'high';\n    } else {\n      severity = 'medium';\n    }\n    \n    return {\n      id: `regression-${metricKey}-${Date.now()}`,\n      scenarioId: metricKey.split('.')[0],\n      metric: metricKey,\n      severity,\n      degradation: Math.abs(degradation),\n      baseline,\n      current,\n      threshold: threshold.warning,\n      confidence: 0.95,\n      timestamp: new Date(),\n      additionalContext: {\n        trend: degradation > 0 ? 'degrading' : 'improving',\n        changePoints: [],\n        correlatedMetrics: []\n      },\n      recommendations: this.getMetricRecommendations(metricKey, degradation)\n    };\n  }\n\n  private async analyzeTrends(scenarioId: string, period?: { start: Date; end: Date }): Promise<TrendAnalysis | null> {\n    try {\n      // Get historical data\n      const historicalData = await this.getHistoricalData(scenarioId, period);\n      if (historicalData.length < 10) return null;\n      \n      const values = historicalData.map(d => d.value);\n      const trend = StatisticalAnalyzer.mannKendallTrend(values);\n      const seasonality = StatisticalAnalyzer.detectSeasonality(values);\n      \n      // Simple forecast (last value + trend)\n      const lastValue = values[values.length - 1];\n      const forecast = {\n        nextValue: lastValue + trend.slope,\n        confidence: trend.significance / 10,\n        upperBound: lastValue + trend.slope * 1.2,\n        lowerBound: lastValue + trend.slope * 0.8\n      };\n      \n      return {\n        metric: scenarioId,\n        period: period ? `${period.start.toISOString()}-${period.end.toISOString()}` : 'recent',\n        trend: trend.trend,\n        slope: trend.slope,\n        correlation: trend.significance / 10,\n        seasonality,\n        forecast\n      };\n    } catch (error) {\n      console.error('Failed to analyze trends:', error);\n      return null;\n    }\n  }\n\n  private async detectAnomalies(metrics: PerformanceMetrics): Promise<number> {\n    if (!this.neuralModel) return 0;\n    \n    try {\n      const features = this.metricsToFeatures(metrics);\n      const input = tf.tensor2d([features]);\n      const reconstruction = this.neuralModel.predict(input) as tf.Tensor;\n      \n      // Calculate reconstruction error\n      const error = tf.losses.meanSquaredError(input, reconstruction);\n      const errorValue = await error.data();\n      \n      input.dispose();\n      reconstruction.dispose();\n      error.dispose();\n      \n      // Normalize error to 0-1 scale\n      return Math.min(errorValue[0] * 10, 1);\n    } catch (error) {\n      console.error('Anomaly detection failed:', error);\n      return 0;\n    }\n  }\n\n  private async sendAlert(alert: RegressionAlert): Promise<void> {\n    // Save to database\n    try {\n      const stmt = db.prepare(`\n        INSERT INTO regression_alerts \n        (scenario_id, metric, severity, degradation, timestamp, alert_data)\n        VALUES (?, ?, ?, ?, ?, ?)\n      `);\n      \n      stmt.run(\n        alert.scenarioId,\n        alert.metric,\n        alert.severity,\n        alert.degradation,\n        alert.timestamp.toISOString(),\n        JSON.stringify(alert)\n      );\n    } catch (error) {\n      console.error('Failed to save regression alert:', error);\n    }\n    \n    // Send to alerting system\n    alertingSystem.checkAndCreateAlert({\n      type: AlertType.PERFORMANCE,\n      service: 'performance-regression-detector',\n      message: `${alert.metric} degraded by ${alert.degradation.toFixed(1)}% (${alert.current} vs baseline ${alert.baseline})`,\n      details: {\n        scenarioId: alert.scenarioId,\n        metric: alert.metric,\n        degradation: alert.degradation,\n        recommendations: alert.recommendations\n      }\n    });\n    \n    this.emit('regressionAlert', alert);\n  }\n\n  private extractMetrics(results: LoadTestResults): PerformanceMetrics {\n    return {\n      responseTime: {\n        mean: results.metrics.responseTime.avg,\n        p50: results.metrics.responseTime.p50,\n        p95: results.metrics.responseTime.p95,\n        p99: results.metrics.responseTime.p99,\n        std: 0 // Would calculate from raw data\n      },\n      throughput: {\n        mean: results.metrics.throughput.avg,\n        std: 0 // Would calculate from timeline data\n      },\n      errorRate: results.metrics.errorRate,\n      availability: 100 - results.metrics.errorRate,\n      resourceUsage: {\n        cpu: 0, // Would get from system metrics\n        memory: 0,\n        io: 0\n      }\n    };\n  }\n\n  private setupDefaultThresholds(): void {\n    this.setThreshold('responseTime.p95', {\n      metric: 'responseTime.p95',\n      warning: 20, // 20% increase\n      critical: 50, // 50% increase\n      method: 'statistical',\n      confidence: 0.95,\n      minSampleSize: 30\n    });\n    \n    this.setThreshold('responseTime.mean', {\n      metric: 'responseTime.mean',\n      warning: 15,\n      critical: 40,\n      method: 'statistical',\n      confidence: 0.95,\n      minSampleSize: 30\n    });\n    \n    this.setThreshold('throughput.mean', {\n      metric: 'throughput.mean',\n      warning: 15, // 15% decrease\n      critical: 30, // 30% decrease\n      method: 'statistical',\n      confidence: 0.95,\n      minSampleSize: 30\n    });\n    \n    this.setThreshold('errorRate', {\n      metric: 'errorRate',\n      warning: 100, // 100% increase (double)\n      critical: 300, // 300% increase (4x)\n      method: 'absolute',\n      confidence: 0.95,\n      minSampleSize: 10\n    });\n  }\n\n  private async initializeNeuralModel(): Promise<void> {\n    // Initialize with a simple autoencoder\n    // In production, load pre-trained model or train with historical data\n    try {\n      this.neuralModel = tf.sequential({\n        layers: [\n          tf.layers.dense({ inputShape: [8], units: 16, activation: 'relu' }),\n          tf.layers.dense({ units: 8, activation: 'relu' }),\n          tf.layers.dense({ units: 4, activation: 'relu' }),\n          tf.layers.dense({ units: 8, activation: 'relu' }),\n          tf.layers.dense({ units: 16, activation: 'relu' }),\n          tf.layers.dense({ units: 8, activation: 'linear' })\n        ]\n      });\n      \n      this.neuralModel.compile({\n        optimizer: 'adam',\n        loss: 'meanSquaredError'\n      });\n    } catch (error) {\n      console.error('Failed to initialize neural model:', error);\n    }\n  }\n\n  private async loadBaselinesFromDatabase(): Promise<void> {\n    try {\n      const stmt = db.prepare('SELECT * FROM regression_baselines ORDER BY timestamp DESC');\n      const rows = stmt.all() as any[];\n      \n      for (const row of rows) {\n        const baseline = JSON.parse(row.baseline_data);\n        baseline.timestamp = new Date(row.timestamp);\n        this.baselines.set(baseline.scenarioId, baseline);\n      }\n      \n      console.log(`Loaded ${rows.length} baselines from database`);\n    } catch (error) {\n      console.error('Failed to load baselines:', error);\n    }\n  }\n\n  private async saveBaseline(baseline: RegressionBaseline): Promise<void> {\n    try {\n      const stmt = db.prepare(`\n        INSERT OR REPLACE INTO regression_baselines \n        (scenario_id, timestamp, baseline_data)\n        VALUES (?, ?, ?)\n      `);\n      \n      stmt.run(\n        baseline.scenarioId,\n        baseline.timestamp.toISOString(),\n        JSON.stringify(baseline)\n      );\n    } catch (error) {\n      console.error('Failed to save baseline:', error);\n    }\n  }\n\n  private addTrainingData(metrics: PerformanceMetrics): void {\n    const features = this.metricsToFeatures(metrics);\n    this.trainingData.push({\n      features,\n      label: 0 // Normal performance (for autoencoder)\n    });\n    \n    // Keep only recent training data\n    if (this.trainingData.length > 10000) {\n      this.trainingData = this.trainingData.slice(-5000);\n    }\n  }\n\n  private metricsToFeatures(metrics: PerformanceMetrics): number[] {\n    return [\n      metrics.responseTime.mean,\n      metrics.responseTime.p95,\n      metrics.responseTime.p99,\n      metrics.throughput.mean,\n      metrics.errorRate,\n      metrics.availability,\n      metrics.resourceUsage.cpu,\n      metrics.resourceUsage.memory\n    ];\n  }\n\n  private async getRecentMetrics(): Promise<Map<string, PerformanceMetrics>> {\n    // Mock implementation - would get from performance monitor\n    const metrics = new Map<string, PerformanceMetrics>();\n    \n    // This would typically fetch recent performance data\n    // For now, return empty map\n    return metrics;\n  }\n\n  private async getHistoricalData(scenarioId: string, period?: { start: Date; end: Date }): Promise<Array<{ timestamp: Date; value: number }>> {\n    // Mock implementation - would fetch from database\n    return [];\n  }\n\n  private getMostAffectedMetrics(alerts: RegressionAlert[]): string[] {\n    const metricCounts = new Map<string, number>();\n    \n    alerts.forEach(alert => {\n      const count = metricCounts.get(alert.metric) || 0;\n      metricCounts.set(alert.metric, count + 1);\n    });\n    \n    return Array.from(metricCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([metric]) => metric);\n  }\n\n  private generateRecommendations(alerts: RegressionAlert[], trends?: TrendAnalysis): string[] {\n    const recommendations = new Set<string>();\n    \n    if (alerts.some(a => a.metric.includes('responseTime'))) {\n      recommendations.add('Consider optimizing database queries and adding caching');\n      recommendations.add('Review recent code changes that might affect response times');\n    }\n    \n    if (alerts.some(a => a.metric.includes('throughput'))) {\n      recommendations.add('Investigate resource bottlenecks (CPU, memory, I/O)');\n      recommendations.add('Consider horizontal scaling or load balancing improvements');\n    }\n    \n    if (alerts.some(a => a.metric.includes('errorRate'))) {\n      recommendations.add('Review error logs for patterns and implement better error handling');\n      recommendations.add('Check system dependencies and external service availability');\n    }\n    \n    if (trends?.trend === 'degrading') {\n      recommendations.add('Performance is degrading over time - schedule maintenance review');\n      recommendations.add('Monitor for memory leaks or resource accumulation issues');\n    }\n    \n    if (alerts.some(a => a.severity === 'critical')) {\n      recommendations.add('CRITICAL: Immediate investigation required for production stability');\n    }\n    \n    return Array.from(recommendations);\n  }\n\n  private getMetricRecommendations(metricKey: string, degradation: number): string[] {\n    const recommendations = [];\n    \n    if (metricKey.includes('responseTime')) {\n      recommendations.push('Response time degradation detected');\n      if (degradation > 50) {\n        recommendations.push('SEVERE: Response time increased by >50% - immediate action required');\n      }\n      recommendations.push('Check database performance and query optimization');\n      recommendations.push('Review caching strategies and hit rates');\n    } else if (metricKey.includes('throughput')) {\n      recommendations.push('Throughput degradation detected');\n      recommendations.push('Monitor system resources (CPU, memory, I/O)');\n      recommendations.push('Consider scaling or load balancing adjustments');\n    } else if (metricKey.includes('errorRate')) {\n      recommendations.push('Error rate increase detected');\n      recommendations.push('Review application logs for error patterns');\n      recommendations.push('Check external dependencies and service health');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.stopMonitoring();\n    \n    if (this.neuralModel) {\n      this.neuralModel.dispose();\n    }\n    \n    this.cache.clear();\n    this.removeAllListeners();\n  }\n}\n\n// Export singleton instance\nexport const performanceRegressionDetector = new PerformanceRegressionDetector();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1a4d91797796befad89df935dec6a39865f66f99"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2buveocj45 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2buveocj45();
var __createBinding =
/* istanbul ignore next */
(cov_2buveocj45().s[0]++,
/* istanbul ignore next */
(cov_2buveocj45().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2buveocj45().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_2buveocj45().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_2buveocj45().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2buveocj45().f[0]++;
  cov_2buveocj45().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2buveocj45().b[2][0]++;
    cov_2buveocj45().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2buveocj45().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_2buveocj45().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_2buveocj45().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_2buveocj45().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_2buveocj45().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_2buveocj45().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_2buveocj45().b[5][1]++,
  /* istanbul ignore next */
  (cov_2buveocj45().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_2buveocj45().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_2buveocj45().b[3][0]++;
    cov_2buveocj45().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_2buveocj45().f[1]++;
        cov_2buveocj45().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_2buveocj45().b[3][1]++;
  }
  cov_2buveocj45().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_2buveocj45().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2buveocj45().f[2]++;
  cov_2buveocj45().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2buveocj45().b[7][0]++;
    cov_2buveocj45().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2buveocj45().b[7][1]++;
  }
  cov_2buveocj45().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_2buveocj45().s[11]++,
/* istanbul ignore next */
(cov_2buveocj45().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_2buveocj45().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_2buveocj45().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_2buveocj45().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_2buveocj45().f[3]++;
  cov_2buveocj45().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_2buveocj45().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_2buveocj45().f[4]++;
  cov_2buveocj45().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_2buveocj45().s[14]++,
/* istanbul ignore next */
(cov_2buveocj45().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_2buveocj45().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_2buveocj45().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_2buveocj45().f[5]++;
  cov_2buveocj45().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_2buveocj45().f[6]++;
    cov_2buveocj45().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_2buveocj45().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_2buveocj45().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_2buveocj45().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_2buveocj45().s[17]++, []);
      /* istanbul ignore next */
      cov_2buveocj45().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_2buveocj45().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_2buveocj45().b[12][0]++;
          cov_2buveocj45().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_2buveocj45().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2buveocj45().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_2buveocj45().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_2buveocj45().f[8]++;
    cov_2buveocj45().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2buveocj45().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_2buveocj45().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_2buveocj45().b[13][0]++;
      cov_2buveocj45().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_2buveocj45().s[26]++, {});
    /* istanbul ignore next */
    cov_2buveocj45().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_2buveocj45().b[15][0]++;
      cov_2buveocj45().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_2buveocj45().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_2buveocj45().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_2buveocj45().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_2buveocj45().b[16][0]++;
          cov_2buveocj45().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_2buveocj45().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[15][1]++;
    }
    cov_2buveocj45().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_2buveocj45().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_2buveocj45().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2buveocj45().s[36]++;
exports.performanceRegressionDetector = exports.PerformanceRegressionDetector = void 0;
const events_1 =
/* istanbul ignore next */
(cov_2buveocj45().s[37]++, require("events"));
const connection_1 =
/* istanbul ignore next */
(cov_2buveocj45().s[38]++, require("../../database/connection"));
const AlertingSystem_1 =
/* istanbul ignore next */
(cov_2buveocj45().s[39]++, require("../health/AlertingSystem"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_2buveocj45().s[40]++, require("lru-cache"));
const tf =
/* istanbul ignore next */
(cov_2buveocj45().s[41]++, __importStar(require("@tensorflow/tfjs-node")));
class StatisticalAnalyzer {
  /**
   * Calculate statistical significance using Student's t-test
   */
  static tTest(baseline, current, alpha =
  /* istanbul ignore next */
  (cov_2buveocj45().b[17][0]++, 0.05)) {
    /* istanbul ignore next */
    cov_2buveocj45().f[9]++;
    const n1 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[42]++, baseline.length);
    const n2 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[43]++, current.length);
    /* istanbul ignore next */
    cov_2buveocj45().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_2buveocj45().b[19][0]++, n1 < 2) ||
    /* istanbul ignore next */
    (cov_2buveocj45().b[19][1]++, n2 < 2)) {
      /* istanbul ignore next */
      cov_2buveocj45().b[18][0]++;
      cov_2buveocj45().s[45]++;
      return {
        significant: false,
        pValue: 1,
        tStatistic: 0,
        degreesOfFreedom: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[18][1]++;
    }
    const mean1 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[46]++, baseline.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[10]++;
      cov_2buveocj45().s[47]++;
      return sum + val;
    }, 0) / n1);
    const mean2 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[48]++, current.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[11]++;
      cov_2buveocj45().s[49]++;
      return sum + val;
    }, 0) / n2);
    const var1 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[50]++, baseline.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[12]++;
      cov_2buveocj45().s[51]++;
      return sum + Math.pow(val - mean1, 2);
    }, 0) / (n1 - 1));
    const var2 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[52]++, current.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[13]++;
      cov_2buveocj45().s[53]++;
      return sum + Math.pow(val - mean2, 2);
    }, 0) / (n2 - 1));
    const pooledVar =
    /* istanbul ignore next */
    (cov_2buveocj45().s[54]++, ((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2));
    const standardError =
    /* istanbul ignore next */
    (cov_2buveocj45().s[55]++, Math.sqrt(pooledVar * (1 / n1 + 1 / n2)));
    const tStatistic =
    /* istanbul ignore next */
    (cov_2buveocj45().s[56]++, (mean2 - mean1) / standardError);
    const degreesOfFreedom =
    /* istanbul ignore next */
    (cov_2buveocj45().s[57]++, n1 + n2 - 2);
    // Simplified p-value calculation (in production, use proper statistical library)
    const pValue =
    /* istanbul ignore next */
    (cov_2buveocj45().s[58]++, this.calculatePValue(Math.abs(tStatistic), degreesOfFreedom));
    /* istanbul ignore next */
    cov_2buveocj45().s[59]++;
    return {
      significant: pValue < alpha,
      pValue,
      tStatistic,
      degreesOfFreedom
    };
  }
  /**
   * Detect change points in time series using CUSUM
   */
  static detectChangePoints(values, threshold =
  /* istanbul ignore next */
  (cov_2buveocj45().b[20][0]++, 5)) {
    /* istanbul ignore next */
    cov_2buveocj45().f[14]++;
    cov_2buveocj45().s[60]++;
    if (values.length < 10) {
      /* istanbul ignore next */
      cov_2buveocj45().b[21][0]++;
      cov_2buveocj45().s[61]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[21][1]++;
    }
    const mean =
    /* istanbul ignore next */
    (cov_2buveocj45().s[62]++, values.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[15]++;
      cov_2buveocj45().s[63]++;
      return sum + val;
    }, 0) / values.length);
    const std =
    /* istanbul ignore next */
    (cov_2buveocj45().s[64]++, Math.sqrt(values.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[16]++;
      cov_2buveocj45().s[65]++;
      return sum + Math.pow(val - mean, 2);
    }, 0) / values.length));
    let cusum =
    /* istanbul ignore next */
    (cov_2buveocj45().s[66]++, 0);
    const changePoints =
    /* istanbul ignore next */
    (cov_2buveocj45().s[67]++, []);
    /* istanbul ignore next */
    cov_2buveocj45().s[68]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2buveocj45().s[69]++, 1); i < values.length; i++) {
      /* istanbul ignore next */
      cov_2buveocj45().s[70]++;
      cusum = Math.max(0, cusum + (values[i] - mean) / std - 0.5);
      /* istanbul ignore next */
      cov_2buveocj45().s[71]++;
      if (cusum > threshold) {
        /* istanbul ignore next */
        cov_2buveocj45().b[22][0]++;
        const magnitude =
        /* istanbul ignore next */
        (cov_2buveocj45().s[72]++, Math.abs(values[i] - mean) / std);
        /* istanbul ignore next */
        cov_2buveocj45().s[73]++;
        changePoints.push({
          timestamp: i,
          confidence: Math.min(cusum / threshold, 1),
          changeType: this.classifyChange(values, i),
          magnitude,
          metrics: ['responseTime'] // Simplified
        });
        /* istanbul ignore next */
        cov_2buveocj45().s[74]++;
        cusum = 0; // Reset after detection
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[22][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2buveocj45().s[75]++;
    return changePoints;
  }
  /**
   * Calculate Mann-Kendall trend test
   */
  static mannKendallTrend(values) {
    /* istanbul ignore next */
    cov_2buveocj45().f[17]++;
    const n =
    /* istanbul ignore next */
    (cov_2buveocj45().s[76]++, values.length);
    /* istanbul ignore next */
    cov_2buveocj45().s[77]++;
    if (n < 4) {
      /* istanbul ignore next */
      cov_2buveocj45().b[23][0]++;
      cov_2buveocj45().s[78]++;
      return {
        trend: 'stable',
        slope: 0,
        significance: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[23][1]++;
    }
    let s =
    /* istanbul ignore next */
    (cov_2buveocj45().s[79]++, 0);
    /* istanbul ignore next */
    cov_2buveocj45().s[80]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2buveocj45().s[81]++, 0); i < n - 1; i++) {
      /* istanbul ignore next */
      cov_2buveocj45().s[82]++;
      for (let j =
      /* istanbul ignore next */
      (cov_2buveocj45().s[83]++, i + 1); j < n; j++) {
        /* istanbul ignore next */
        cov_2buveocj45().s[84]++;
        s += Math.sign(values[j] - values[i]);
      }
    }
    const variance =
    /* istanbul ignore next */
    (cov_2buveocj45().s[85]++, n * (n - 1) * (2 * n + 5) / 18);
    const z =
    /* istanbul ignore next */
    (cov_2buveocj45().s[86]++, s / Math.sqrt(variance));
    // Calculate Theil-Sen slope estimator
    const slopes =
    /* istanbul ignore next */
    (cov_2buveocj45().s[87]++, []);
    /* istanbul ignore next */
    cov_2buveocj45().s[88]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2buveocj45().s[89]++, 0); i < n - 1; i++) {
      /* istanbul ignore next */
      cov_2buveocj45().s[90]++;
      for (let j =
      /* istanbul ignore next */
      (cov_2buveocj45().s[91]++, i + 1); j < n; j++) {
        /* istanbul ignore next */
        cov_2buveocj45().s[92]++;
        slopes.push((values[j] - values[i]) / (j - i));
      }
    }
    /* istanbul ignore next */
    cov_2buveocj45().s[93]++;
    slopes.sort((a, b) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[18]++;
      cov_2buveocj45().s[94]++;
      return a - b;
    });
    const slope =
    /* istanbul ignore next */
    (cov_2buveocj45().s[95]++, slopes[Math.floor(slopes.length / 2)]);
    const significance =
    /* istanbul ignore next */
    (cov_2buveocj45().s[96]++, Math.abs(z));
    let trend =
    /* istanbul ignore next */
    (cov_2buveocj45().s[97]++, 'stable');
    /* istanbul ignore next */
    cov_2buveocj45().s[98]++;
    if (significance > 1.96) {
      /* istanbul ignore next */
      cov_2buveocj45().b[24][0]++;
      cov_2buveocj45().s[99]++;
      // 95% confidence
      trend = slope > 0 ?
      /* istanbul ignore next */
      (cov_2buveocj45().b[25][0]++, 'degrading') :
      /* istanbul ignore next */
      (cov_2buveocj45().b[25][1]++, 'improving');
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[24][1]++;
    }
    cov_2buveocj45().s[100]++;
    return {
      trend,
      slope,
      significance
    };
  }
  /**
   * Detect seasonality using FFT
   */
  static detectSeasonality(values) {
    /* istanbul ignore next */
    cov_2buveocj45().f[19]++;
    cov_2buveocj45().s[101]++;
    if (values.length < 24) {
      /* istanbul ignore next */
      cov_2buveocj45().b[26][0]++;
      cov_2buveocj45().s[102]++;
      return {
        detected: false,
        confidence: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[26][1]++;
    }
    // Simplified seasonality detection
    // In production, use proper FFT implementation
    const autocorrelations =
    /* istanbul ignore next */
    (cov_2buveocj45().s[103]++, []);
    const maxLag =
    /* istanbul ignore next */
    (cov_2buveocj45().s[104]++, Math.min(values.length / 3, 48));
    /* istanbul ignore next */
    cov_2buveocj45().s[105]++;
    for (let lag =
    /* istanbul ignore next */
    (cov_2buveocj45().s[106]++, 1); lag <= maxLag; lag++) {
      let correlation =
      /* istanbul ignore next */
      (cov_2buveocj45().s[107]++, 0);
      /* istanbul ignore next */
      cov_2buveocj45().s[108]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2buveocj45().s[109]++, lag); i < values.length; i++) {
        /* istanbul ignore next */
        cov_2buveocj45().s[110]++;
        correlation += values[i] * values[i - lag];
      }
      /* istanbul ignore next */
      cov_2buveocj45().s[111]++;
      autocorrelations.push(correlation / (values.length - lag));
    }
    // Find peaks in autocorrelation
    const peaks =
    /* istanbul ignore next */
    (cov_2buveocj45().s[112]++, []);
    /* istanbul ignore next */
    cov_2buveocj45().s[113]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2buveocj45().s[114]++, 1); i < autocorrelations.length - 1; i++) {
      /* istanbul ignore next */
      cov_2buveocj45().s[115]++;
      if (
      /* istanbul ignore next */
      (cov_2buveocj45().b[28][0]++, autocorrelations[i] > autocorrelations[i - 1]) &&
      /* istanbul ignore next */
      (cov_2buveocj45().b[28][1]++, autocorrelations[i] > autocorrelations[i + 1])) {
        /* istanbul ignore next */
        cov_2buveocj45().b[27][0]++;
        cov_2buveocj45().s[116]++;
        peaks.push({
          lag: i + 1,
          value: autocorrelations[i]
        });
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[27][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2buveocj45().s[117]++;
    if (peaks.length === 0) {
      /* istanbul ignore next */
      cov_2buveocj45().b[29][0]++;
      cov_2buveocj45().s[118]++;
      return {
        detected: false,
        confidence: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[29][1]++;
    }
    const strongestPeak =
    /* istanbul ignore next */
    (cov_2buveocj45().s[119]++, peaks.reduce((max, peak) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[20]++;
      cov_2buveocj45().s[120]++;
      return peak.value > max.value ?
      /* istanbul ignore next */
      (cov_2buveocj45().b[30][0]++, peak) :
      /* istanbul ignore next */
      (cov_2buveocj45().b[30][1]++, max);
    }));
    const threshold =
    /* istanbul ignore next */
    (cov_2buveocj45().s[121]++, Math.max(...autocorrelations) * 0.3);
    const detected =
    /* istanbul ignore next */
    (cov_2buveocj45().s[122]++, strongestPeak.value > threshold);
    /* istanbul ignore next */
    cov_2buveocj45().s[123]++;
    return {
      detected,
      period: detected ?
      /* istanbul ignore next */
      (cov_2buveocj45().b[31][0]++, strongestPeak.lag) :
      /* istanbul ignore next */
      (cov_2buveocj45().b[31][1]++, undefined),
      amplitude: detected ?
      /* istanbul ignore next */
      (cov_2buveocj45().b[32][0]++, strongestPeak.value) :
      /* istanbul ignore next */
      (cov_2buveocj45().b[32][1]++, undefined),
      confidence: detected ?
      /* istanbul ignore next */
      (cov_2buveocj45().b[33][0]++, strongestPeak.value / Math.max(...autocorrelations)) :
      /* istanbul ignore next */
      (cov_2buveocj45().b[33][1]++, 0)
    };
  }
  static calculatePValue(tStat, df) {
    /* istanbul ignore next */
    cov_2buveocj45().f[21]++;
    // Simplified p-value calculation
    // In production, use proper statistical library
    const t =
    /* istanbul ignore next */
    (cov_2buveocj45().s[124]++, Math.abs(tStat));
    /* istanbul ignore next */
    cov_2buveocj45().s[125]++;
    if (df >= 30) {
      /* istanbul ignore next */
      cov_2buveocj45().b[34][0]++;
      cov_2buveocj45().s[126]++;
      // Approximate with normal distribution for large df
      return 2 * (1 - this.normalCDF(t));
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[34][1]++;
    }
    // Simplified approximation for small df
    const p =
    /* istanbul ignore next */
    (cov_2buveocj45().s[127]++, 1 / (1 + t * t / df));
    /* istanbul ignore next */
    cov_2buveocj45().s[128]++;
    return 2 * Math.pow(p, df / 2);
  }
  static normalCDF(x) {
    /* istanbul ignore next */
    cov_2buveocj45().f[22]++;
    cov_2buveocj45().s[129]++;
    // Approximation of normal CDF
    return 0.5 * (1 + this.erf(x / Math.sqrt(2)));
  }
  static erf(x) {
    /* istanbul ignore next */
    cov_2buveocj45().f[23]++;
    // Approximation of error function
    const a1 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[130]++, 0.254829592);
    const a2 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[131]++, -0.284496736);
    const a3 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[132]++, 1.421413741);
    const a4 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[133]++, -1.453152027);
    const a5 =
    /* istanbul ignore next */
    (cov_2buveocj45().s[134]++, 1.061405429);
    const p =
    /* istanbul ignore next */
    (cov_2buveocj45().s[135]++, 0.3275911);
    const sign =
    /* istanbul ignore next */
    (cov_2buveocj45().s[136]++, x >= 0 ?
    /* istanbul ignore next */
    (cov_2buveocj45().b[35][0]++, 1) :
    /* istanbul ignore next */
    (cov_2buveocj45().b[35][1]++, -1));
    /* istanbul ignore next */
    cov_2buveocj45().s[137]++;
    x = Math.abs(x);
    const t =
    /* istanbul ignore next */
    (cov_2buveocj45().s[138]++, 1.0 / (1.0 + p * x));
    const y =
    /* istanbul ignore next */
    (cov_2buveocj45().s[139]++, 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x));
    /* istanbul ignore next */
    cov_2buveocj45().s[140]++;
    return sign * y;
  }
  static classifyChange(values, index) {
    /* istanbul ignore next */
    cov_2buveocj45().f[24]++;
    const before =
    /* istanbul ignore next */
    (cov_2buveocj45().s[141]++, values.slice(Math.max(0, index - 5), index));
    const after =
    /* istanbul ignore next */
    (cov_2buveocj45().s[142]++, values.slice(index, Math.min(values.length, index + 5)));
    /* istanbul ignore next */
    cov_2buveocj45().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_2buveocj45().b[37][0]++, before.length < 2) ||
    /* istanbul ignore next */
    (cov_2buveocj45().b[37][1]++, after.length < 2)) {
      /* istanbul ignore next */
      cov_2buveocj45().b[36][0]++;
      cov_2buveocj45().s[144]++;
      return 'level';
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[36][1]++;
    }
    const meanBefore =
    /* istanbul ignore next */
    (cov_2buveocj45().s[145]++, before.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[25]++;
      cov_2buveocj45().s[146]++;
      return sum + val;
    }, 0) / before.length);
    const meanAfter =
    /* istanbul ignore next */
    (cov_2buveocj45().s[147]++, after.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[26]++;
      cov_2buveocj45().s[148]++;
      return sum + val;
    }, 0) / after.length);
    const varBefore =
    /* istanbul ignore next */
    (cov_2buveocj45().s[149]++, before.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[27]++;
      cov_2buveocj45().s[150]++;
      return sum + Math.pow(val - meanBefore, 2);
    }, 0) / before.length);
    const varAfter =
    /* istanbul ignore next */
    (cov_2buveocj45().s[151]++, after.reduce((sum, val) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[28]++;
      cov_2buveocj45().s[152]++;
      return sum + Math.pow(val - meanAfter, 2);
    }, 0) / after.length);
    const levelChange =
    /* istanbul ignore next */
    (cov_2buveocj45().s[153]++, Math.abs(meanAfter - meanBefore));
    const varianceChange =
    /* istanbul ignore next */
    (cov_2buveocj45().s[154]++, Math.abs(varAfter - varBefore));
    /* istanbul ignore next */
    cov_2buveocj45().s[155]++;
    if (varianceChange > levelChange * 2) {
      /* istanbul ignore next */
      cov_2buveocj45().b[38][0]++;
      cov_2buveocj45().s[156]++;
      return 'variance';
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[38][1]++;
    }
    cov_2buveocj45().s[157]++;
    return 'level';
  }
}
class PerformanceRegressionDetector extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_2buveocj45().f[29]++;
    cov_2buveocj45().s[158]++;
    super();
    /* istanbul ignore next */
    cov_2buveocj45().s[159]++;
    this.baselines = new Map();
    /* istanbul ignore next */
    cov_2buveocj45().s[160]++;
    this.thresholds = new Map();
    /* istanbul ignore next */
    cov_2buveocj45().s[161]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_2buveocj45().s[162]++;
    this.monitoringInterval = null;
    /* istanbul ignore next */
    cov_2buveocj45().s[163]++;
    this.neuralModel = null;
    /* istanbul ignore next */
    cov_2buveocj45().s[164]++;
    this.trainingData = [];
    /* istanbul ignore next */
    cov_2buveocj45().s[165]++;
    this.cache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 15 // 15 minutes
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[166]++;
    this.setupDefaultThresholds();
    /* istanbul ignore next */
    cov_2buveocj45().s[167]++;
    this.initializeNeuralModel();
    /* istanbul ignore next */
    cov_2buveocj45().s[168]++;
    this.loadBaselinesFromDatabase();
  }
  /**
   * Start automated regression monitoring
   */
  startMonitoring(intervalMinutes =
  /* istanbul ignore next */
  (cov_2buveocj45().b[39][0]++, 15)) {
    /* istanbul ignore next */
    cov_2buveocj45().f[30]++;
    cov_2buveocj45().s[169]++;
    if (this.isMonitoring) {
      /* istanbul ignore next */
      cov_2buveocj45().b[40][0]++;
      cov_2buveocj45().s[170]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[40][1]++;
    }
    cov_2buveocj45().s[171]++;
    this.isMonitoring = true;
    /* istanbul ignore next */
    cov_2buveocj45().s[172]++;
    this.monitoringInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_2buveocj45().f[31]++;
      cov_2buveocj45().s[173]++;
      this.performRegressionCheck().catch(error => {
        /* istanbul ignore next */
        cov_2buveocj45().f[32]++;
        cov_2buveocj45().s[174]++;
        console.error('Regression monitoring failed:', error);
        /* istanbul ignore next */
        cov_2buveocj45().s[175]++;
        this.emit('monitoringError', error);
      });
    }, intervalMinutes * 60 * 1000);
    /* istanbul ignore next */
    cov_2buveocj45().s[176]++;
    console.log(`Performance regression monitoring started (${intervalMinutes}min interval)`);
    /* istanbul ignore next */
    cov_2buveocj45().s[177]++;
    this.emit('monitoringStarted', {
      intervalMinutes
    });
  }
  /**
   * Stop automated monitoring
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_2buveocj45().f[33]++;
    cov_2buveocj45().s[178]++;
    if (!this.isMonitoring) {
      /* istanbul ignore next */
      cov_2buveocj45().b[41][0]++;
      cov_2buveocj45().s[179]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[41][1]++;
    }
    cov_2buveocj45().s[180]++;
    this.isMonitoring = false;
    /* istanbul ignore next */
    cov_2buveocj45().s[181]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_2buveocj45().b[42][0]++;
      cov_2buveocj45().s[182]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_2buveocj45().s[183]++;
      this.monitoringInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[42][1]++;
    }
    cov_2buveocj45().s[184]++;
    console.log('Performance regression monitoring stopped');
    /* istanbul ignore next */
    cov_2buveocj45().s[185]++;
    this.emit('monitoringStopped');
  }
  /**
   * Analyze load test results for regressions
   */
  async analyzeResults(scenarioId, results) {
    /* istanbul ignore next */
    cov_2buveocj45().f[34]++;
    const baseline =
    /* istanbul ignore next */
    (cov_2buveocj45().s[186]++, this.baselines.get(scenarioId));
    /* istanbul ignore next */
    cov_2buveocj45().s[187]++;
    if (!baseline) {
      /* istanbul ignore next */
      cov_2buveocj45().b[43][0]++;
      cov_2buveocj45().s[188]++;
      console.log(`No baseline found for scenario: ${scenarioId}`);
      /* istanbul ignore next */
      cov_2buveocj45().s[189]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[43][1]++;
    }
    const alerts =
    /* istanbul ignore next */
    (cov_2buveocj45().s[190]++, []);
    const currentMetrics =
    /* istanbul ignore next */
    (cov_2buveocj45().s[191]++, this.extractMetrics(results));
    // Analyze each metric
    const metricsToAnalyze =
    /* istanbul ignore next */
    (cov_2buveocj45().s[192]++, [{
      key: 'responseTime.p95',
      current: currentMetrics.responseTime.p95,
      baseline: baseline.metrics.responseTime.p95
    }, {
      key: 'responseTime.mean',
      current: currentMetrics.responseTime.mean,
      baseline: baseline.metrics.responseTime.mean
    }, {
      key: 'throughput.mean',
      current: currentMetrics.throughput.mean,
      baseline: baseline.metrics.throughput.mean
    }, {
      key: 'errorRate',
      current: currentMetrics.errorRate,
      baseline: baseline.metrics.errorRate
    }]);
    /* istanbul ignore next */
    cov_2buveocj45().s[193]++;
    for (const metric of metricsToAnalyze) {
      const threshold =
      /* istanbul ignore next */
      (cov_2buveocj45().s[194]++, this.thresholds.get(metric.key));
      /* istanbul ignore next */
      cov_2buveocj45().s[195]++;
      if (!threshold) {
        /* istanbul ignore next */
        cov_2buveocj45().b[44][0]++;
        cov_2buveocj45().s[196]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[44][1]++;
      }
      const regression =
      /* istanbul ignore next */
      (cov_2buveocj45().s[197]++, await this.detectRegression(metric.key, metric.current, metric.baseline, threshold));
      /* istanbul ignore next */
      cov_2buveocj45().s[198]++;
      if (regression) {
        /* istanbul ignore next */
        cov_2buveocj45().b[45][0]++;
        cov_2buveocj45().s[199]++;
        alerts.push(regression);
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[45][1]++;
      }
    }
    // Perform trend analysis
    const trendAnalysis =
    /* istanbul ignore next */
    (cov_2buveocj45().s[200]++, await this.analyzeTrends(scenarioId));
    /* istanbul ignore next */
    cov_2buveocj45().s[201]++;
    if (
    /* istanbul ignore next */
    (cov_2buveocj45().b[47][0]++, trendAnalysis) &&
    /* istanbul ignore next */
    (cov_2buveocj45().b[47][1]++, trendAnalysis.trend === 'degrading')) {
      /* istanbul ignore next */
      cov_2buveocj45().b[46][0]++;
      cov_2buveocj45().s[202]++;
      alerts.push({
        id: `trend-${scenarioId}-${Date.now()}`,
        scenarioId,
        metric: 'trend',
        severity: 'medium',
        degradation: Math.abs(trendAnalysis.slope) * 100,
        baseline: 0,
        current: trendAnalysis.slope,
        threshold: 0.1,
        confidence: trendAnalysis.correlation,
        timestamp: new Date(),
        additionalContext: {
          trend: trendAnalysis.trend,
          changePoints: [],
          correlatedMetrics: []
        },
        recommendations: ['Performance trend is degrading over time', 'Consider investigating recent changes or increased load', 'Monitor system resources for potential bottlenecks']
      });
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[46][1]++;
    }
    // Use neural model for anomaly detection
    cov_2buveocj45().s[203]++;
    if (this.neuralModel) {
      /* istanbul ignore next */
      cov_2buveocj45().b[48][0]++;
      const anomalyScore =
      /* istanbul ignore next */
      (cov_2buveocj45().s[204]++, await this.detectAnomalies(currentMetrics));
      /* istanbul ignore next */
      cov_2buveocj45().s[205]++;
      if (anomalyScore > 0.8) {
        /* istanbul ignore next */
        cov_2buveocj45().b[49][0]++;
        cov_2buveocj45().s[206]++;
        alerts.push({
          id: `anomaly-${scenarioId}-${Date.now()}`,
          scenarioId,
          metric: 'anomaly',
          severity: 'high',
          degradation: anomalyScore * 100,
          baseline: 0.5,
          current: anomalyScore,
          threshold: 0.8,
          confidence: anomalyScore,
          timestamp: new Date(),
          additionalContext: {
            trend: 'stable',
            changePoints: [],
            correlatedMetrics: []
          },
          recommendations: ['Neural network detected performance anomaly', 'Current metrics deviate significantly from learned patterns', 'Investigate system changes or unusual load patterns']
        });
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[49][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[48][1]++;
    }
    // Send alerts
    cov_2buveocj45().s[207]++;
    for (const alert of alerts) {
      /* istanbul ignore next */
      cov_2buveocj45().s[208]++;
      await this.sendAlert(alert);
    }
    /* istanbul ignore next */
    cov_2buveocj45().s[209]++;
    this.emit('regressionAnalysisComplete', {
      scenarioId,
      alerts,
      currentMetrics,
      baseline
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[210]++;
    return alerts;
  }
  /**
   * Set or update baseline for a scenario
   */
  async setBaseline(scenarioId, results, options) {
    /* istanbul ignore next */
    cov_2buveocj45().f[35]++;
    const metrics =
    /* istanbul ignore next */
    (cov_2buveocj45().s[211]++, this.extractMetrics(results));
    const baseline =
    /* istanbul ignore next */
    (cov_2buveocj45().s[212]++, {
      id: `${scenarioId}-${Date.now()}`,
      scenarioId,
      metrics,
      timestamp: new Date(),
      version: options?.version,
      environment:
      /* istanbul ignore next */
      (cov_2buveocj45().b[50][0]++, options?.environment) ||
      /* istanbul ignore next */
      (cov_2buveocj45().b[50][1]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_2buveocj45().b[50][2]++, 'unknown'),
      sampleSize: results.summary.totalRequests,
      confidence:
      /* istanbul ignore next */
      (cov_2buveocj45().b[51][0]++, options?.confidence) ||
      /* istanbul ignore next */
      (cov_2buveocj45().b[51][1]++, 0.95)
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[213]++;
    this.baselines.set(scenarioId, baseline);
    /* istanbul ignore next */
    cov_2buveocj45().s[214]++;
    await this.saveBaseline(baseline);
    // Add to training data for neural model
    /* istanbul ignore next */
    cov_2buveocj45().s[215]++;
    this.addTrainingData(metrics);
    /* istanbul ignore next */
    cov_2buveocj45().s[216]++;
    this.emit('baselineUpdated', baseline);
    /* istanbul ignore next */
    cov_2buveocj45().s[217]++;
    console.log(`Baseline updated for scenario: ${scenarioId}`);
  }
  /**
   * Configure regression thresholds
   */
  setThreshold(metric, threshold) {
    /* istanbul ignore next */
    cov_2buveocj45().f[36]++;
    cov_2buveocj45().s[218]++;
    this.thresholds.set(metric, threshold);
    /* istanbul ignore next */
    cov_2buveocj45().s[219]++;
    this.emit('thresholdUpdated', {
      metric,
      threshold
    });
  }
  /**
   * Get all baselines
   */
  getBaselines() {
    /* istanbul ignore next */
    cov_2buveocj45().f[37]++;
    cov_2buveocj45().s[220]++;
    return Array.from(this.baselines.values());
  }
  /**
   * Get regression alerts for a time period
   */
  async getRegressionAlerts(period) {
    /* istanbul ignore next */
    cov_2buveocj45().f[38]++;
    cov_2buveocj45().s[221]++;
    try {
      let query =
      /* istanbul ignore next */
      (cov_2buveocj45().s[222]++, 'SELECT * FROM regression_alerts ORDER BY timestamp DESC');
      const params =
      /* istanbul ignore next */
      (cov_2buveocj45().s[223]++, []);
      /* istanbul ignore next */
      cov_2buveocj45().s[224]++;
      if (period) {
        /* istanbul ignore next */
        cov_2buveocj45().b[52][0]++;
        cov_2buveocj45().s[225]++;
        query = 'SELECT * FROM regression_alerts WHERE timestamp BETWEEN ? AND ? ORDER BY timestamp DESC';
        /* istanbul ignore next */
        cov_2buveocj45().s[226]++;
        params.push(period.start.toISOString(), period.end.toISOString());
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[52][1]++;
      }
      const stmt =
      /* istanbul ignore next */
      (cov_2buveocj45().s[227]++, connection_1.db.prepare(query));
      const rows =
      /* istanbul ignore next */
      (cov_2buveocj45().s[228]++, stmt.all(...params));
      /* istanbul ignore next */
      cov_2buveocj45().s[229]++;
      return rows.map(row => {
        /* istanbul ignore next */
        cov_2buveocj45().f[39]++;
        cov_2buveocj45().s[230]++;
        return {
          ...JSON.parse(row.alert_data),
          timestamp: new Date(row.timestamp)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[231]++;
      console.error('Failed to fetch regression alerts:', error);
      /* istanbul ignore next */
      cov_2buveocj45().s[232]++;
      return [];
    }
  }
  /**
   * Generate regression report
   */
  async generateRegressionReport(scenarioId, period) {
    /* istanbul ignore next */
    cov_2buveocj45().f[40]++;
    const alerts =
    /* istanbul ignore next */
    (cov_2buveocj45().s[233]++, await this.getRegressionAlerts(period));
    const scenarioAlerts =
    /* istanbul ignore next */
    (cov_2buveocj45().s[234]++, alerts.filter(a => {
      /* istanbul ignore next */
      cov_2buveocj45().f[41]++;
      cov_2buveocj45().s[235]++;
      return a.scenarioId === scenarioId;
    }));
    const trends =
    /* istanbul ignore next */
    (cov_2buveocj45().s[236]++, await this.analyzeTrends(scenarioId, period));
    const summary =
    /* istanbul ignore next */
    (cov_2buveocj45().s[237]++, {
      totalAlerts: scenarioAlerts.length,
      criticalAlerts: scenarioAlerts.filter(a => {
        /* istanbul ignore next */
        cov_2buveocj45().f[42]++;
        cov_2buveocj45().s[238]++;
        return a.severity === 'critical';
      }).length,
      mostAffectedMetrics: this.getMostAffectedMetrics(scenarioAlerts),
      overallTrend:
      /* istanbul ignore next */
      (cov_2buveocj45().b[53][0]++, trends?.trend) ||
      /* istanbul ignore next */
      (cov_2buveocj45().b[53][1]++, 'stable')
    });
    const recommendations =
    /* istanbul ignore next */
    (cov_2buveocj45().s[239]++, this.generateRecommendations(scenarioAlerts, trends));
    /* istanbul ignore next */
    cov_2buveocj45().s[240]++;
    return {
      summary,
      alerts: scenarioAlerts,
      trends: trends ?
      /* istanbul ignore next */
      (cov_2buveocj45().b[54][0]++, [trends]) :
      /* istanbul ignore next */
      (cov_2buveocj45().b[54][1]++, []),
      recommendations
    };
  }
  /**
   * Train neural model for anomaly detection
   */
  async trainNeuralModel() {
    /* istanbul ignore next */
    cov_2buveocj45().f[43]++;
    cov_2buveocj45().s[241]++;
    if (this.trainingData.length < 100) {
      /* istanbul ignore next */
      cov_2buveocj45().b[55][0]++;
      cov_2buveocj45().s[242]++;
      console.log('Insufficient training data for neural model');
      /* istanbul ignore next */
      cov_2buveocj45().s[243]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[55][1]++;
    }
    cov_2buveocj45().s[244]++;
    console.log('Training neural model for anomaly detection...');
    const features =
    /* istanbul ignore next */
    (cov_2buveocj45().s[245]++, this.trainingData.map(d => {
      /* istanbul ignore next */
      cov_2buveocj45().f[44]++;
      cov_2buveocj45().s[246]++;
      return d.features;
    }));
    const labels =
    /* istanbul ignore next */
    (cov_2buveocj45().s[247]++, this.trainingData.map(d => {
      /* istanbul ignore next */
      cov_2buveocj45().f[45]++;
      cov_2buveocj45().s[248]++;
      return d.label;
    }));
    const xs =
    /* istanbul ignore next */
    (cov_2buveocj45().s[249]++, tf.tensor2d(features));
    const ys =
    /* istanbul ignore next */
    (cov_2buveocj45().s[250]++, tf.tensor1d(labels));
    // Create autoencoder for anomaly detection
    const model =
    /* istanbul ignore next */
    (cov_2buveocj45().s[251]++, tf.sequential({
      layers: [tf.layers.dense({
        inputShape: [features[0].length],
        units: 64,
        activation: 'relu'
      }), tf.layers.dense({
        units: 32,
        activation: 'relu'
      }), tf.layers.dense({
        units: 16,
        activation: 'relu'
      }), tf.layers.dense({
        units: 32,
        activation: 'relu'
      }), tf.layers.dense({
        units: 64,
        activation: 'relu'
      }), tf.layers.dense({
        units: features[0].length,
        activation: 'linear'
      })]
    }));
    /* istanbul ignore next */
    cov_2buveocj45().s[252]++;
    model.compile({
      optimizer: 'adam',
      loss: 'meanSquaredError'
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[253]++;
    await model.fit(xs, xs, {
      epochs: 100,
      batchSize: 32,
      validationSplit: 0.2,
      verbose: 0
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[254]++;
    this.neuralModel = model;
    /* istanbul ignore next */
    cov_2buveocj45().s[255]++;
    console.log('Neural model training completed');
    /* istanbul ignore next */
    cov_2buveocj45().s[256]++;
    xs.dispose();
    /* istanbul ignore next */
    cov_2buveocj45().s[257]++;
    ys.dispose();
  }
  /**
   * Private methods
   */
  async performRegressionCheck() {
    /* istanbul ignore next */
    cov_2buveocj45().f[46]++;
    cov_2buveocj45().s[258]++;
    console.log('Performing automated regression check...');
    // Get recent performance data
    const recentMetrics =
    /* istanbul ignore next */
    (cov_2buveocj45().s[259]++, await this.getRecentMetrics());
    /* istanbul ignore next */
    cov_2buveocj45().s[260]++;
    for (const [scenarioId, baseline] of this.baselines) {
      const currentMetrics =
      /* istanbul ignore next */
      (cov_2buveocj45().s[261]++, recentMetrics.get(scenarioId));
      /* istanbul ignore next */
      cov_2buveocj45().s[262]++;
      if (!currentMetrics) {
        /* istanbul ignore next */
        cov_2buveocj45().b[56][0]++;
        cov_2buveocj45().s[263]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[56][1]++;
      }
      // Mock LoadTestResults for compatibility
      const mockResults =
      /* istanbul ignore next */
      (cov_2buveocj45().s[264]++, {
        scenario: {
          id: scenarioId
        },
        summary: {
          totalRequests: 100
        },
        metrics: {
          responseTime: currentMetrics.responseTime,
          throughput: currentMetrics.throughput,
          errorRate: currentMetrics.errorRate
        },
        timeline: [],
        errors: [],
        thresholdResults: [],
        recommendations: []
      });
      /* istanbul ignore next */
      cov_2buveocj45().s[265]++;
      await this.analyzeResults(scenarioId, mockResults);
    }
  }
  async detectRegression(metricKey, current, baseline, threshold) {
    /* istanbul ignore next */
    cov_2buveocj45().f[47]++;
    let degradation =
    /* istanbul ignore next */
    (cov_2buveocj45().s[266]++, 0);
    let severity =
    /* istanbul ignore next */
    (cov_2buveocj45().s[267]++, 'low');
    // Calculate degradation based on metric type
    /* istanbul ignore next */
    cov_2buveocj45().s[268]++;
    if (
    /* istanbul ignore next */
    (cov_2buveocj45().b[58][0]++, metricKey.includes('responseTime')) ||
    /* istanbul ignore next */
    (cov_2buveocj45().b[58][1]++, metricKey.includes('errorRate'))) {
      /* istanbul ignore next */
      cov_2buveocj45().b[57][0]++;
      cov_2buveocj45().s[269]++;
      degradation = (current - baseline) / baseline * 100;
    } else {
      /* istanbul ignore next */
      cov_2buveocj45().b[57][1]++;
      cov_2buveocj45().s[270]++;
      if (metricKey.includes('throughput')) {
        /* istanbul ignore next */
        cov_2buveocj45().b[59][0]++;
        cov_2buveocj45().s[271]++;
        degradation = (baseline - current) / baseline * 100;
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[59][1]++;
      }
    }
    // Determine if regression occurred
    const isRegression =
    /* istanbul ignore next */
    (cov_2buveocj45().s[272]++, Math.abs(degradation) > threshold.warning);
    /* istanbul ignore next */
    cov_2buveocj45().s[273]++;
    if (!isRegression) {
      /* istanbul ignore next */
      cov_2buveocj45().b[60][0]++;
      cov_2buveocj45().s[274]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[60][1]++;
    }
    // Determine severity
    cov_2buveocj45().s[275]++;
    if (Math.abs(degradation) > threshold.critical) {
      /* istanbul ignore next */
      cov_2buveocj45().b[61][0]++;
      cov_2buveocj45().s[276]++;
      severity = 'critical';
    } else {
      /* istanbul ignore next */
      cov_2buveocj45().b[61][1]++;
      cov_2buveocj45().s[277]++;
      if (Math.abs(degradation) > threshold.warning * 1.5) {
        /* istanbul ignore next */
        cov_2buveocj45().b[62][0]++;
        cov_2buveocj45().s[278]++;
        severity = 'high';
      } else {
        /* istanbul ignore next */
        cov_2buveocj45().b[62][1]++;
        cov_2buveocj45().s[279]++;
        severity = 'medium';
      }
    }
    /* istanbul ignore next */
    cov_2buveocj45().s[280]++;
    return {
      id: `regression-${metricKey}-${Date.now()}`,
      scenarioId: metricKey.split('.')[0],
      metric: metricKey,
      severity,
      degradation: Math.abs(degradation),
      baseline,
      current,
      threshold: threshold.warning,
      confidence: 0.95,
      timestamp: new Date(),
      additionalContext: {
        trend: degradation > 0 ?
        /* istanbul ignore next */
        (cov_2buveocj45().b[63][0]++, 'degrading') :
        /* istanbul ignore next */
        (cov_2buveocj45().b[63][1]++, 'improving'),
        changePoints: [],
        correlatedMetrics: []
      },
      recommendations: this.getMetricRecommendations(metricKey, degradation)
    };
  }
  async analyzeTrends(scenarioId, period) {
    /* istanbul ignore next */
    cov_2buveocj45().f[48]++;
    cov_2buveocj45().s[281]++;
    try {
      // Get historical data
      const historicalData =
      /* istanbul ignore next */
      (cov_2buveocj45().s[282]++, await this.getHistoricalData(scenarioId, period));
      /* istanbul ignore next */
      cov_2buveocj45().s[283]++;
      if (historicalData.length < 10) {
        /* istanbul ignore next */
        cov_2buveocj45().b[64][0]++;
        cov_2buveocj45().s[284]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[64][1]++;
      }
      const values =
      /* istanbul ignore next */
      (cov_2buveocj45().s[285]++, historicalData.map(d => {
        /* istanbul ignore next */
        cov_2buveocj45().f[49]++;
        cov_2buveocj45().s[286]++;
        return d.value;
      }));
      const trend =
      /* istanbul ignore next */
      (cov_2buveocj45().s[287]++, StatisticalAnalyzer.mannKendallTrend(values));
      const seasonality =
      /* istanbul ignore next */
      (cov_2buveocj45().s[288]++, StatisticalAnalyzer.detectSeasonality(values));
      // Simple forecast (last value + trend)
      const lastValue =
      /* istanbul ignore next */
      (cov_2buveocj45().s[289]++, values[values.length - 1]);
      const forecast =
      /* istanbul ignore next */
      (cov_2buveocj45().s[290]++, {
        nextValue: lastValue + trend.slope,
        confidence: trend.significance / 10,
        upperBound: lastValue + trend.slope * 1.2,
        lowerBound: lastValue + trend.slope * 0.8
      });
      /* istanbul ignore next */
      cov_2buveocj45().s[291]++;
      return {
        metric: scenarioId,
        period: period ?
        /* istanbul ignore next */
        (cov_2buveocj45().b[65][0]++, `${period.start.toISOString()}-${period.end.toISOString()}`) :
        /* istanbul ignore next */
        (cov_2buveocj45().b[65][1]++, 'recent'),
        trend: trend.trend,
        slope: trend.slope,
        correlation: trend.significance / 10,
        seasonality,
        forecast
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[292]++;
      console.error('Failed to analyze trends:', error);
      /* istanbul ignore next */
      cov_2buveocj45().s[293]++;
      return null;
    }
  }
  async detectAnomalies(metrics) {
    /* istanbul ignore next */
    cov_2buveocj45().f[50]++;
    cov_2buveocj45().s[294]++;
    if (!this.neuralModel) {
      /* istanbul ignore next */
      cov_2buveocj45().b[66][0]++;
      cov_2buveocj45().s[295]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[66][1]++;
    }
    cov_2buveocj45().s[296]++;
    try {
      const features =
      /* istanbul ignore next */
      (cov_2buveocj45().s[297]++, this.metricsToFeatures(metrics));
      const input =
      /* istanbul ignore next */
      (cov_2buveocj45().s[298]++, tf.tensor2d([features]));
      const reconstruction =
      /* istanbul ignore next */
      (cov_2buveocj45().s[299]++, this.neuralModel.predict(input));
      // Calculate reconstruction error
      const error =
      /* istanbul ignore next */
      (cov_2buveocj45().s[300]++, tf.losses.meanSquaredError(input, reconstruction));
      const errorValue =
      /* istanbul ignore next */
      (cov_2buveocj45().s[301]++, await error.data());
      /* istanbul ignore next */
      cov_2buveocj45().s[302]++;
      input.dispose();
      /* istanbul ignore next */
      cov_2buveocj45().s[303]++;
      reconstruction.dispose();
      /* istanbul ignore next */
      cov_2buveocj45().s[304]++;
      error.dispose();
      // Normalize error to 0-1 scale
      /* istanbul ignore next */
      cov_2buveocj45().s[305]++;
      return Math.min(errorValue[0] * 10, 1);
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[306]++;
      console.error('Anomaly detection failed:', error);
      /* istanbul ignore next */
      cov_2buveocj45().s[307]++;
      return 0;
    }
  }
  async sendAlert(alert) {
    /* istanbul ignore next */
    cov_2buveocj45().f[51]++;
    cov_2buveocj45().s[308]++;
    // Save to database
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_2buveocj45().s[309]++, connection_1.db.prepare(`
        INSERT INTO regression_alerts 
        (scenario_id, metric, severity, degradation, timestamp, alert_data)
        VALUES (?, ?, ?, ?, ?, ?)
      `));
      /* istanbul ignore next */
      cov_2buveocj45().s[310]++;
      stmt.run(alert.scenarioId, alert.metric, alert.severity, alert.degradation, alert.timestamp.toISOString(), JSON.stringify(alert));
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[311]++;
      console.error('Failed to save regression alert:', error);
    }
    // Send to alerting system
    /* istanbul ignore next */
    cov_2buveocj45().s[312]++;
    AlertingSystem_1.alertingSystem.checkAndCreateAlert({
      type: AlertingSystem_1.AlertType.PERFORMANCE,
      service: 'performance-regression-detector',
      message: `${alert.metric} degraded by ${alert.degradation.toFixed(1)}% (${alert.current} vs baseline ${alert.baseline})`,
      details: {
        scenarioId: alert.scenarioId,
        metric: alert.metric,
        degradation: alert.degradation,
        recommendations: alert.recommendations
      }
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[313]++;
    this.emit('regressionAlert', alert);
  }
  extractMetrics(results) {
    /* istanbul ignore next */
    cov_2buveocj45().f[52]++;
    cov_2buveocj45().s[314]++;
    return {
      responseTime: {
        mean: results.metrics.responseTime.avg,
        p50: results.metrics.responseTime.p50,
        p95: results.metrics.responseTime.p95,
        p99: results.metrics.responseTime.p99,
        std: 0 // Would calculate from raw data
      },
      throughput: {
        mean: results.metrics.throughput.avg,
        std: 0 // Would calculate from timeline data
      },
      errorRate: results.metrics.errorRate,
      availability: 100 - results.metrics.errorRate,
      resourceUsage: {
        cpu: 0,
        // Would get from system metrics
        memory: 0,
        io: 0
      }
    };
  }
  setupDefaultThresholds() {
    /* istanbul ignore next */
    cov_2buveocj45().f[53]++;
    cov_2buveocj45().s[315]++;
    this.setThreshold('responseTime.p95', {
      metric: 'responseTime.p95',
      warning: 20,
      // 20% increase
      critical: 50,
      // 50% increase
      method: 'statistical',
      confidence: 0.95,
      minSampleSize: 30
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[316]++;
    this.setThreshold('responseTime.mean', {
      metric: 'responseTime.mean',
      warning: 15,
      critical: 40,
      method: 'statistical',
      confidence: 0.95,
      minSampleSize: 30
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[317]++;
    this.setThreshold('throughput.mean', {
      metric: 'throughput.mean',
      warning: 15,
      // 15% decrease
      critical: 30,
      // 30% decrease
      method: 'statistical',
      confidence: 0.95,
      minSampleSize: 30
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[318]++;
    this.setThreshold('errorRate', {
      metric: 'errorRate',
      warning: 100,
      // 100% increase (double)
      critical: 300,
      // 300% increase (4x)
      method: 'absolute',
      confidence: 0.95,
      minSampleSize: 10
    });
  }
  async initializeNeuralModel() {
    /* istanbul ignore next */
    cov_2buveocj45().f[54]++;
    cov_2buveocj45().s[319]++;
    // Initialize with a simple autoencoder
    // In production, load pre-trained model or train with historical data
    try {
      /* istanbul ignore next */
      cov_2buveocj45().s[320]++;
      this.neuralModel = tf.sequential({
        layers: [tf.layers.dense({
          inputShape: [8],
          units: 16,
          activation: 'relu'
        }), tf.layers.dense({
          units: 8,
          activation: 'relu'
        }), tf.layers.dense({
          units: 4,
          activation: 'relu'
        }), tf.layers.dense({
          units: 8,
          activation: 'relu'
        }), tf.layers.dense({
          units: 16,
          activation: 'relu'
        }), tf.layers.dense({
          units: 8,
          activation: 'linear'
        })]
      });
      /* istanbul ignore next */
      cov_2buveocj45().s[321]++;
      this.neuralModel.compile({
        optimizer: 'adam',
        loss: 'meanSquaredError'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[322]++;
      console.error('Failed to initialize neural model:', error);
    }
  }
  async loadBaselinesFromDatabase() {
    /* istanbul ignore next */
    cov_2buveocj45().f[55]++;
    cov_2buveocj45().s[323]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_2buveocj45().s[324]++, connection_1.db.prepare('SELECT * FROM regression_baselines ORDER BY timestamp DESC'));
      const rows =
      /* istanbul ignore next */
      (cov_2buveocj45().s[325]++, stmt.all());
      /* istanbul ignore next */
      cov_2buveocj45().s[326]++;
      for (const row of rows) {
        const baseline =
        /* istanbul ignore next */
        (cov_2buveocj45().s[327]++, JSON.parse(row.baseline_data));
        /* istanbul ignore next */
        cov_2buveocj45().s[328]++;
        baseline.timestamp = new Date(row.timestamp);
        /* istanbul ignore next */
        cov_2buveocj45().s[329]++;
        this.baselines.set(baseline.scenarioId, baseline);
      }
      /* istanbul ignore next */
      cov_2buveocj45().s[330]++;
      console.log(`Loaded ${rows.length} baselines from database`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[331]++;
      console.error('Failed to load baselines:', error);
    }
  }
  async saveBaseline(baseline) {
    /* istanbul ignore next */
    cov_2buveocj45().f[56]++;
    cov_2buveocj45().s[332]++;
    try {
      const stmt =
      /* istanbul ignore next */
      (cov_2buveocj45().s[333]++, connection_1.db.prepare(`
        INSERT OR REPLACE INTO regression_baselines 
        (scenario_id, timestamp, baseline_data)
        VALUES (?, ?, ?)
      `));
      /* istanbul ignore next */
      cov_2buveocj45().s[334]++;
      stmt.run(baseline.scenarioId, baseline.timestamp.toISOString(), JSON.stringify(baseline));
    } catch (error) {
      /* istanbul ignore next */
      cov_2buveocj45().s[335]++;
      console.error('Failed to save baseline:', error);
    }
  }
  addTrainingData(metrics) {
    /* istanbul ignore next */
    cov_2buveocj45().f[57]++;
    const features =
    /* istanbul ignore next */
    (cov_2buveocj45().s[336]++, this.metricsToFeatures(metrics));
    /* istanbul ignore next */
    cov_2buveocj45().s[337]++;
    this.trainingData.push({
      features,
      label: 0 // Normal performance (for autoencoder)
    });
    // Keep only recent training data
    /* istanbul ignore next */
    cov_2buveocj45().s[338]++;
    if (this.trainingData.length > 10000) {
      /* istanbul ignore next */
      cov_2buveocj45().b[67][0]++;
      cov_2buveocj45().s[339]++;
      this.trainingData = this.trainingData.slice(-5000);
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[67][1]++;
    }
  }
  metricsToFeatures(metrics) {
    /* istanbul ignore next */
    cov_2buveocj45().f[58]++;
    cov_2buveocj45().s[340]++;
    return [metrics.responseTime.mean, metrics.responseTime.p95, metrics.responseTime.p99, metrics.throughput.mean, metrics.errorRate, metrics.availability, metrics.resourceUsage.cpu, metrics.resourceUsage.memory];
  }
  async getRecentMetrics() {
    /* istanbul ignore next */
    cov_2buveocj45().f[59]++;
    // Mock implementation - would get from performance monitor
    const metrics =
    /* istanbul ignore next */
    (cov_2buveocj45().s[341]++, new Map());
    // This would typically fetch recent performance data
    // For now, return empty map
    /* istanbul ignore next */
    cov_2buveocj45().s[342]++;
    return metrics;
  }
  async getHistoricalData(scenarioId, period) {
    /* istanbul ignore next */
    cov_2buveocj45().f[60]++;
    cov_2buveocj45().s[343]++;
    // Mock implementation - would fetch from database
    return [];
  }
  getMostAffectedMetrics(alerts) {
    /* istanbul ignore next */
    cov_2buveocj45().f[61]++;
    const metricCounts =
    /* istanbul ignore next */
    (cov_2buveocj45().s[344]++, new Map());
    /* istanbul ignore next */
    cov_2buveocj45().s[345]++;
    alerts.forEach(alert => {
      /* istanbul ignore next */
      cov_2buveocj45().f[62]++;
      const count =
      /* istanbul ignore next */
      (cov_2buveocj45().s[346]++,
      /* istanbul ignore next */
      (cov_2buveocj45().b[68][0]++, metricCounts.get(alert.metric)) ||
      /* istanbul ignore next */
      (cov_2buveocj45().b[68][1]++, 0));
      /* istanbul ignore next */
      cov_2buveocj45().s[347]++;
      metricCounts.set(alert.metric, count + 1);
    });
    /* istanbul ignore next */
    cov_2buveocj45().s[348]++;
    return Array.from(metricCounts.entries()).sort((a, b) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[63]++;
      cov_2buveocj45().s[349]++;
      return b[1] - a[1];
    }).slice(0, 5).map(([metric]) => {
      /* istanbul ignore next */
      cov_2buveocj45().f[64]++;
      cov_2buveocj45().s[350]++;
      return metric;
    });
  }
  generateRecommendations(alerts, trends) {
    /* istanbul ignore next */
    cov_2buveocj45().f[65]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2buveocj45().s[351]++, new Set());
    /* istanbul ignore next */
    cov_2buveocj45().s[352]++;
    if (alerts.some(a => {
      /* istanbul ignore next */
      cov_2buveocj45().f[66]++;
      cov_2buveocj45().s[353]++;
      return a.metric.includes('responseTime');
    })) {
      /* istanbul ignore next */
      cov_2buveocj45().b[69][0]++;
      cov_2buveocj45().s[354]++;
      recommendations.add('Consider optimizing database queries and adding caching');
      /* istanbul ignore next */
      cov_2buveocj45().s[355]++;
      recommendations.add('Review recent code changes that might affect response times');
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[69][1]++;
    }
    cov_2buveocj45().s[356]++;
    if (alerts.some(a => {
      /* istanbul ignore next */
      cov_2buveocj45().f[67]++;
      cov_2buveocj45().s[357]++;
      return a.metric.includes('throughput');
    })) {
      /* istanbul ignore next */
      cov_2buveocj45().b[70][0]++;
      cov_2buveocj45().s[358]++;
      recommendations.add('Investigate resource bottlenecks (CPU, memory, I/O)');
      /* istanbul ignore next */
      cov_2buveocj45().s[359]++;
      recommendations.add('Consider horizontal scaling or load balancing improvements');
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[70][1]++;
    }
    cov_2buveocj45().s[360]++;
    if (alerts.some(a => {
      /* istanbul ignore next */
      cov_2buveocj45().f[68]++;
      cov_2buveocj45().s[361]++;
      return a.metric.includes('errorRate');
    })) {
      /* istanbul ignore next */
      cov_2buveocj45().b[71][0]++;
      cov_2buveocj45().s[362]++;
      recommendations.add('Review error logs for patterns and implement better error handling');
      /* istanbul ignore next */
      cov_2buveocj45().s[363]++;
      recommendations.add('Check system dependencies and external service availability');
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[71][1]++;
    }
    cov_2buveocj45().s[364]++;
    if (trends?.trend === 'degrading') {
      /* istanbul ignore next */
      cov_2buveocj45().b[72][0]++;
      cov_2buveocj45().s[365]++;
      recommendations.add('Performance is degrading over time - schedule maintenance review');
      /* istanbul ignore next */
      cov_2buveocj45().s[366]++;
      recommendations.add('Monitor for memory leaks or resource accumulation issues');
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[72][1]++;
    }
    cov_2buveocj45().s[367]++;
    if (alerts.some(a => {
      /* istanbul ignore next */
      cov_2buveocj45().f[69]++;
      cov_2buveocj45().s[368]++;
      return a.severity === 'critical';
    })) {
      /* istanbul ignore next */
      cov_2buveocj45().b[73][0]++;
      cov_2buveocj45().s[369]++;
      recommendations.add('CRITICAL: Immediate investigation required for production stability');
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[73][1]++;
    }
    cov_2buveocj45().s[370]++;
    return Array.from(recommendations);
  }
  getMetricRecommendations(metricKey, degradation) {
    /* istanbul ignore next */
    cov_2buveocj45().f[70]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2buveocj45().s[371]++, []);
    /* istanbul ignore next */
    cov_2buveocj45().s[372]++;
    if (metricKey.includes('responseTime')) {
      /* istanbul ignore next */
      cov_2buveocj45().b[74][0]++;
      cov_2buveocj45().s[373]++;
      recommendations.push('Response time degradation detected');
      /* istanbul ignore next */
      cov_2buveocj45().s[374]++;
      if (degradation > 50) {
        /* istanbul ignore next */
        cov_2buveocj45().b[75][0]++;
        cov_2buveocj45().s[375]++;
        recommendations.push('SEVERE: Response time increased by >50% - immediate action required');
      } else
      /* istanbul ignore next */
      {
        cov_2buveocj45().b[75][1]++;
      }
      cov_2buveocj45().s[376]++;
      recommendations.push('Check database performance and query optimization');
      /* istanbul ignore next */
      cov_2buveocj45().s[377]++;
      recommendations.push('Review caching strategies and hit rates');
    } else {
      /* istanbul ignore next */
      cov_2buveocj45().b[74][1]++;
      cov_2buveocj45().s[378]++;
      if (metricKey.includes('throughput')) {
        /* istanbul ignore next */
        cov_2buveocj45().b[76][0]++;
        cov_2buveocj45().s[379]++;
        recommendations.push('Throughput degradation detected');
        /* istanbul ignore next */
        cov_2buveocj45().s[380]++;
        recommendations.push('Monitor system resources (CPU, memory, I/O)');
        /* istanbul ignore next */
        cov_2buveocj45().s[381]++;
        recommendations.push('Consider scaling or load balancing adjustments');
      } else {
        /* istanbul ignore next */
        cov_2buveocj45().b[76][1]++;
        cov_2buveocj45().s[382]++;
        if (metricKey.includes('errorRate')) {
          /* istanbul ignore next */
          cov_2buveocj45().b[77][0]++;
          cov_2buveocj45().s[383]++;
          recommendations.push('Error rate increase detected');
          /* istanbul ignore next */
          cov_2buveocj45().s[384]++;
          recommendations.push('Review application logs for error patterns');
          /* istanbul ignore next */
          cov_2buveocj45().s[385]++;
          recommendations.push('Check external dependencies and service health');
        } else
        /* istanbul ignore next */
        {
          cov_2buveocj45().b[77][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_2buveocj45().s[386]++;
    return recommendations;
  }
  /**
   * Clean up resources
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_2buveocj45().f[71]++;
    cov_2buveocj45().s[387]++;
    this.stopMonitoring();
    /* istanbul ignore next */
    cov_2buveocj45().s[388]++;
    if (this.neuralModel) {
      /* istanbul ignore next */
      cov_2buveocj45().b[78][0]++;
      cov_2buveocj45().s[389]++;
      this.neuralModel.dispose();
    } else
    /* istanbul ignore next */
    {
      cov_2buveocj45().b[78][1]++;
    }
    cov_2buveocj45().s[390]++;
    this.cache.clear();
    /* istanbul ignore next */
    cov_2buveocj45().s[391]++;
    this.removeAllListeners();
  }
}
/* istanbul ignore next */
cov_2buveocj45().s[392]++;
exports.PerformanceRegressionDetector = PerformanceRegressionDetector;
// Export singleton instance
/* istanbul ignore next */
cov_2buveocj45().s[393]++;
exports.performanceRegressionDetector = new PerformanceRegressionDetector();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,