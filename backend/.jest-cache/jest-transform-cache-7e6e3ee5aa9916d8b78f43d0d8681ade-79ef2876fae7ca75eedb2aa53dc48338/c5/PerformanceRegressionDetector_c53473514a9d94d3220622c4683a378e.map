{"version":3,"names":["events_1","cov_2buveocj45","s","require","connection_1","AlertingSystem_1","lru_cache_1","tf","__importStar","StatisticalAnalyzer","tTest","baseline","current","alpha","b","f","n1","length","n2","significant","pValue","tStatistic","degreesOfFreedom","mean1","reduce","sum","val","mean2","var1","Math","pow","var2","pooledVar","standardError","sqrt","calculatePValue","abs","detectChangePoints","values","threshold","mean","std","cusum","changePoints","i","max","magnitude","push","timestamp","confidence","min","changeType","classifyChange","metrics","mannKendallTrend","n","trend","slope","significance","j","sign","variance","z","slopes","sort","a","floor","detectSeasonality","detected","autocorrelations","maxLag","lag","correlation","peaks","value","strongestPeak","peak","period","undefined","amplitude","tStat","df","t","normalCDF","p","x","erf","a1","a2","a3","a4","a5","y","exp","index","before","slice","after","meanBefore","meanAfter","varBefore","varAfter","levelChange","varianceChange","PerformanceRegressionDetector","EventEmitter","constructor","baselines","Map","thresholds","isMonitoring","monitoringInterval","neuralModel","trainingData","cache","LRUCache","ttl","setupDefaultThresholds","initializeNeuralModel","loadBaselinesFromDatabase","startMonitoring","intervalMinutes","setInterval","performRegressionCheck","catch","error","console","emit","log","stopMonitoring","clearInterval","analyzeResults","scenarioId","results","get","alerts","currentMetrics","extractMetrics","metricsToAnalyze","key","responseTime","p95","throughput","errorRate","metric","regression","detectRegression","trendAnalysis","analyzeTrends","id","Date","now","severity","degradation","additionalContext","correlatedMetrics","recommendations","anomalyScore","detectAnomalies","alert","sendAlert","setBaseline","options","version","environment","process","env","NODE_ENV","sampleSize","summary","totalRequests","set","saveBaseline","addTrainingData","setThreshold","getBaselines","Array","from","getRegressionAlerts","query","params","start","toISOString","end","stmt","db","prepare","rows","all","map","row","JSON","parse","alert_data","generateRegressionReport","scenarioAlerts","filter","trends","totalAlerts","criticalAlerts","mostAffectedMetrics","getMostAffectedMetrics","overallTrend","generateRecommendations","trainNeuralModel","features","d","labels","label","xs","tensor2d","ys","tensor1d","model","sequential","layers","dense","inputShape","units","activation","compile","optimizer","loss","fit","epochs","batchSize","validationSplit","verbose","dispose","recentMetrics","getRecentMetrics","mockResults","scenario","timeline","errors","thresholdResults","metricKey","includes","isRegression","warning","critical","split","getMetricRecommendations","historicalData","getHistoricalData","seasonality","lastValue","forecast","nextValue","upperBound","lowerBound","metricsToFeatures","input","reconstruction","predict","losses","meanSquaredError","errorValue","data","run","stringify","alertingSystem","checkAndCreateAlert","type","AlertType","PERFORMANCE","service","message","toFixed","details","avg","p50","p99","availability","resourceUsage","cpu","memory","io","method","minSampleSize","baseline_data","metricCounts","forEach","count","entries","Set","some","add","cleanup","clear","removeAllListeners","exports","performanceRegressionDetector"],"sources":["/workspaces/prompt-card-system/backend/src/services/performance/PerformanceRegressionDetector.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { db } from '../../database/connection';\nimport { LoadTestResults } from './LoadTestingFramework';\nimport { performanceMonitor } from './PerformanceMonitor';\nimport { alertingSystem, AlertType } from '../health/AlertingSystem';\nimport { LRUCache } from 'lru-cache';\nimport * as tf from '@tensorflow/tfjs-node';\n\nexport interface RegressionBaseline {\n  id: string;\n  scenarioId: string;\n  metrics: PerformanceMetrics;\n  timestamp: Date;\n  version?: string;\n  environment?: string;\n  sampleSize: number;\n  confidence: number;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: {\n    mean: number;\n    p50: number;\n    p95: number;\n    p99: number;\n    std: number;\n  };\n  throughput: {\n    mean: number;\n    std: number;\n  };\n  errorRate: number;\n  availability: number;\n  resourceUsage: {\n    cpu: number;\n    memory: number;\n    io: number;\n  };\n}\n\nexport interface RegressionAlert {\n  id: string;\n  scenarioId: string;\n  metric: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  degradation: number; // Percentage\n  baseline: number;\n  current: number;\n  threshold: number;\n  confidence: number;\n  timestamp: Date;\n  additionalContext: {\n    trend: 'improving' | 'stable' | 'degrading';\n    changePoints: number[];\n    seasonality?: string;\n    correlatedMetrics: string[];\n  };\n  recommendations: string[];\n}\n\nexport interface RegressionThreshold {\n  metric: string;\n  warning: number; // Percentage change\n  critical: number; // Percentage change\n  method: 'absolute' | 'statistical' | 'adaptive';\n  confidence: number; // Statistical confidence level\n  minSampleSize: number;\n}\n\nexport interface ChangePointDetection {\n  timestamp: number;\n  confidence: number;\n  changeType: 'level' | 'trend' | 'variance';\n  magnitude: number;\n  metrics: string[];\n}\n\nexport interface TrendAnalysis {\n  metric: string;\n  period: string;\n  trend: 'improving' | 'stable' | 'degrading';\n  slope: number;\n  correlation: number;\n  seasonality: {\n    detected: boolean;\n    period?: number;\n    amplitude?: number;\n  };\n  forecast: {\n    nextValue: number;\n    confidence: number;\n    upperBound: number;\n    lowerBound: number;\n  };\n}\n\nclass StatisticalAnalyzer {\n  /**\n   * Calculate statistical significance using Student's t-test\n   */\n  static tTest(baseline: number[], current: number[], alpha: number = 0.05): {\n    significant: boolean;\n    pValue: number;\n    tStatistic: number;\n    degreesOfFreedom: number;\n  } {\n    const n1 = baseline.length;\n    const n2 = current.length;\n    \n    if (n1 < 2 || n2 < 2) {\n      return { significant: false, pValue: 1, tStatistic: 0, degreesOfFreedom: 0 };\n    }\n\n    const mean1 = baseline.reduce((sum, val) => sum + val, 0) / n1;\n    const mean2 = current.reduce((sum, val) => sum + val, 0) / n2;\n    \n    const var1 = baseline.reduce((sum, val) => sum + Math.pow(val - mean1, 2), 0) / (n1 - 1);\n    const var2 = current.reduce((sum, val) => sum + Math.pow(val - mean2, 2), 0) / (n2 - 1);\n    \n    const pooledVar = ((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2);\n    const standardError = Math.sqrt(pooledVar * (1/n1 + 1/n2));\n    \n    const tStatistic = (mean2 - mean1) / standardError;\n    const degreesOfFreedom = n1 + n2 - 2;\n    \n    // Simplified p-value calculation (in production, use proper statistical library)\n    const pValue = this.calculatePValue(Math.abs(tStatistic), degreesOfFreedom);\n    \n    return {\n      significant: pValue < alpha,\n      pValue,\n      tStatistic,\n      degreesOfFreedom\n    };\n  }\n\n  /**\n   * Detect change points in time series using CUSUM\n   */\n  static detectChangePoints(values: number[], threshold: number = 5): ChangePointDetection[] {\n    if (values.length < 10) return [];\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const std = Math.sqrt(values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length);\n    \n    let cusum = 0;\n    const changePoints: ChangePointDetection[] = [];\n    \n    for (let i = 1; i < values.length; i++) {\n      cusum = Math.max(0, cusum + (values[i] - mean) / std - 0.5);\n      \n      if (cusum > threshold) {\n        const magnitude = Math.abs(values[i] - mean) / std;\n        changePoints.push({\n          timestamp: i,\n          confidence: Math.min(cusum / threshold, 1),\n          changeType: this.classifyChange(values, i),\n          magnitude,\n          metrics: ['responseTime'] // Simplified\n        });\n        cusum = 0; // Reset after detection\n      }\n    }\n    \n    return changePoints;\n  }\n\n  /**\n   * Calculate Mann-Kendall trend test\n   */\n  static mannKendallTrend(values: number[]): {\n    trend: 'improving' | 'stable' | 'degrading';\n    slope: number;\n    significance: number;\n  } {\n    const n = values.length;\n    if (n < 4) {\n      return { trend: 'stable', slope: 0, significance: 0 };\n    }\n\n    let s = 0;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = i + 1; j < n; j++) {\n        s += Math.sign(values[j] - values[i]);\n      }\n    }\n\n    const variance = n * (n - 1) * (2 * n + 5) / 18;\n    const z = s / Math.sqrt(variance);\n    \n    // Calculate Theil-Sen slope estimator\n    const slopes: number[] = [];\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = i + 1; j < n; j++) {\n        slopes.push((values[j] - values[i]) / (j - i));\n      }\n    }\n    slopes.sort((a, b) => a - b);\n    const slope = slopes[Math.floor(slopes.length / 2)];\n\n    const significance = Math.abs(z);\n    let trend: 'improving' | 'stable' | 'degrading' = 'stable';\n    \n    if (significance > 1.96) { // 95% confidence\n      trend = slope > 0 ? 'degrading' : 'improving';\n    }\n\n    return { trend, slope, significance };\n  }\n\n  /**\n   * Detect seasonality using FFT\n   */\n  static detectSeasonality(values: number[]): {\n    detected: boolean;\n    period?: number;\n    amplitude?: number;\n    confidence: number;\n  } {\n    if (values.length < 24) {\n      return { detected: false, confidence: 0 };\n    }\n\n    // Simplified seasonality detection\n    // In production, use proper FFT implementation\n    const autocorrelations: number[] = [];\n    const maxLag = Math.min(values.length / 3, 48);\n    \n    for (let lag = 1; lag <= maxLag; lag++) {\n      let correlation = 0;\n      for (let i = lag; i < values.length; i++) {\n        correlation += values[i] * values[i - lag];\n      }\n      autocorrelations.push(correlation / (values.length - lag));\n    }\n\n    // Find peaks in autocorrelation\n    const peaks: { lag: number; value: number }[] = [];\n    for (let i = 1; i < autocorrelations.length - 1; i++) {\n      if (autocorrelations[i] > autocorrelations[i - 1] && \n          autocorrelations[i] > autocorrelations[i + 1]) {\n        peaks.push({ lag: i + 1, value: autocorrelations[i] });\n      }\n    }\n\n    if (peaks.length === 0) {\n      return { detected: false, confidence: 0 };\n    }\n\n    const strongestPeak = peaks.reduce((max, peak) => \n      peak.value > max.value ? peak : max);\n\n    const threshold = Math.max(...autocorrelations) * 0.3;\n    const detected = strongestPeak.value > threshold;\n\n    return {\n      detected,\n      period: detected ? strongestPeak.lag : undefined,\n      amplitude: detected ? strongestPeak.value : undefined,\n      confidence: detected ? strongestPeak.value / Math.max(...autocorrelations) : 0\n    };\n  }\n\n  private static calculatePValue(tStat: number, df: number): number {\n    // Simplified p-value calculation\n    // In production, use proper statistical library\n    const t = Math.abs(tStat);\n    if (df >= 30) {\n      // Approximate with normal distribution for large df\n      return 2 * (1 - this.normalCDF(t));\n    }\n    \n    // Simplified approximation for small df\n    const p = 1 / (1 + t * t / df);\n    return 2 * Math.pow(p, df / 2);\n  }\n\n  private static normalCDF(x: number): number {\n    // Approximation of normal CDF\n    return 0.5 * (1 + this.erf(x / Math.sqrt(2)));\n  }\n\n  private static erf(x: number): number {\n    // Approximation of error function\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n\n    const sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n\n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n    return sign * y;\n  }\n\n  private static classifyChange(values: number[], index: number): 'level' | 'trend' | 'variance' {\n    const before = values.slice(Math.max(0, index - 5), index);\n    const after = values.slice(index, Math.min(values.length, index + 5));\n    \n    if (before.length < 2 || after.length < 2) return 'level';\n    \n    const meanBefore = before.reduce((sum, val) => sum + val, 0) / before.length;\n    const meanAfter = after.reduce((sum, val) => sum + val, 0) / after.length;\n    const varBefore = before.reduce((sum, val) => sum + Math.pow(val - meanBefore, 2), 0) / before.length;\n    const varAfter = after.reduce((sum, val) => sum + Math.pow(val - meanAfter, 2), 0) / after.length;\n    \n    const levelChange = Math.abs(meanAfter - meanBefore);\n    const varianceChange = Math.abs(varAfter - varBefore);\n    \n    if (varianceChange > levelChange * 2) return 'variance';\n    return 'level';\n  }\n}\n\nexport class PerformanceRegressionDetector extends EventEmitter {\n  private baselines: Map<string, RegressionBaseline> = new Map();\n  private thresholds: Map<string, RegressionThreshold> = new Map();\n  private cache: LRUCache<string, any>;\n  private isMonitoring: boolean = false;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private neuralModel: tf.LayersModel | null = null;\n  private trainingData: Array<{ features: number[]; label: number }> = [];\n\n  constructor() {\n    super();\n    this.cache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 15 // 15 minutes\n    });\n    \n    this.setupDefaultThresholds();\n    this.initializeNeuralModel();\n    this.loadBaselinesFromDatabase();\n  }\n\n  /**\n   * Start automated regression monitoring\n   */\n  startMonitoring(intervalMinutes: number = 15): void {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    this.monitoringInterval = setInterval(() => {\n      this.performRegressionCheck().catch(error => {\n        console.error('Regression monitoring failed:', error);\n        this.emit('monitoringError', error);\n      });\n    }, intervalMinutes * 60 * 1000);\n\n    console.log(`Performance regression monitoring started (${intervalMinutes}min interval)`);\n    this.emit('monitoringStarted', { intervalMinutes });\n  }\n\n  /**\n   * Stop automated monitoring\n   */\n  stopMonitoring(): void {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    console.log('Performance regression monitoring stopped');\n    this.emit('monitoringStopped');\n  }\n\n  /**\n   * Analyze load test results for regressions\n   */\n  async analyzeResults(scenarioId: string, results: LoadTestResults): Promise<RegressionAlert[]> {\n    const baseline = this.baselines.get(scenarioId);\n    if (!baseline) {\n      console.log(`No baseline found for scenario: ${scenarioId}`);\n      return [];\n    }\n\n    const alerts: RegressionAlert[] = [];\n    const currentMetrics = this.extractMetrics(results);\n\n    // Analyze each metric\n    const metricsToAnalyze = [\n      { key: 'responseTime.p95', current: currentMetrics.responseTime.p95, baseline: baseline.metrics.responseTime.p95 },\n      { key: 'responseTime.mean', current: currentMetrics.responseTime.mean, baseline: baseline.metrics.responseTime.mean },\n      { key: 'throughput.mean', current: currentMetrics.throughput.mean, baseline: baseline.metrics.throughput.mean },\n      { key: 'errorRate', current: currentMetrics.errorRate, baseline: baseline.metrics.errorRate }\n    ];\n\n    for (const metric of metricsToAnalyze) {\n      const threshold = this.thresholds.get(metric.key);\n      if (!threshold) continue;\n\n      const regression = await this.detectRegression(metric.key, metric.current, metric.baseline, threshold);\n      if (regression) {\n        alerts.push(regression);\n      }\n    }\n\n    // Perform trend analysis\n    const trendAnalysis = await this.analyzeTrends(scenarioId);\n    if (trendAnalysis && trendAnalysis.trend === 'degrading') {\n      alerts.push({\n        id: `trend-${scenarioId}-${Date.now()}`,\n        scenarioId,\n        metric: 'trend',\n        severity: 'medium',\n        degradation: Math.abs(trendAnalysis.slope) * 100,\n        baseline: 0,\n        current: trendAnalysis.slope,\n        threshold: 0.1,\n        confidence: trendAnalysis.correlation,\n        timestamp: new Date(),\n        additionalContext: {\n          trend: trendAnalysis.trend,\n          changePoints: [],\n          correlatedMetrics: []\n        },\n        recommendations: [\n          'Performance trend is degrading over time',\n          'Consider investigating recent changes or increased load',\n          'Monitor system resources for potential bottlenecks'\n        ]\n      });\n    }\n\n    // Use neural model for anomaly detection\n    if (this.neuralModel) {\n      const anomalyScore = await this.detectAnomalies(currentMetrics);\n      if (anomalyScore > 0.8) {\n        alerts.push({\n          id: `anomaly-${scenarioId}-${Date.now()}`,\n          scenarioId,\n          metric: 'anomaly',\n          severity: 'high',\n          degradation: anomalyScore * 100,\n          baseline: 0.5,\n          current: anomalyScore,\n          threshold: 0.8,\n          confidence: anomalyScore,\n          timestamp: new Date(),\n          additionalContext: {\n            trend: 'stable',\n            changePoints: [],\n            correlatedMetrics: []\n          },\n          recommendations: [\n            'Neural network detected performance anomaly',\n            'Current metrics deviate significantly from learned patterns',\n            'Investigate system changes or unusual load patterns'\n          ]\n        });\n      }\n    }\n\n    // Send alerts\n    for (const alert of alerts) {\n      await this.sendAlert(alert);\n    }\n\n    this.emit('regressionAnalysisComplete', { scenarioId, alerts, currentMetrics, baseline });\n    return alerts;\n  }\n\n  /**\n   * Set or update baseline for a scenario\n   */\n  async setBaseline(scenarioId: string, results: LoadTestResults, options?: {\n    version?: string;\n    environment?: string;\n    confidence?: number;\n  }): Promise<void> {\n    const metrics = this.extractMetrics(results);\n    const baseline: RegressionBaseline = {\n      id: `${scenarioId}-${Date.now()}`,\n      scenarioId,\n      metrics,\n      timestamp: new Date(),\n      version: options?.version,\n      environment: options?.environment || process.env.NODE_ENV || 'unknown',\n      sampleSize: results.summary.totalRequests,\n      confidence: options?.confidence || 0.95\n    };\n\n    this.baselines.set(scenarioId, baseline);\n    await this.saveBaseline(baseline);\n    \n    // Add to training data for neural model\n    this.addTrainingData(metrics);\n    \n    this.emit('baselineUpdated', baseline);\n    console.log(`Baseline updated for scenario: ${scenarioId}`);\n  }\n\n  /**\n   * Configure regression thresholds\n   */\n  setThreshold(metric: string, threshold: RegressionThreshold): void {\n    this.thresholds.set(metric, threshold);\n    this.emit('thresholdUpdated', { metric, threshold });\n  }\n\n  /**\n   * Get all baselines\n   */\n  getBaselines(): RegressionBaseline[] {\n    return Array.from(this.baselines.values());\n  }\n\n  /**\n   * Get regression alerts for a time period\n   */\n  async getRegressionAlerts(period?: { start: Date; end: Date }): Promise<RegressionAlert[]> {\n    try {\n      let query = 'SELECT * FROM regression_alerts ORDER BY timestamp DESC';\n      const params: any[] = [];\n\n      if (period) {\n        query = 'SELECT * FROM regression_alerts WHERE timestamp BETWEEN ? AND ? ORDER BY timestamp DESC';\n        params.push(period.start.toISOString(), period.end.toISOString());\n      }\n\n      const stmt = db.prepare(query);\n      const rows = stmt.all(...params) as any[];\n      \n      return rows.map(row => ({\n        ...JSON.parse(row.alert_data),\n        timestamp: new Date(row.timestamp)\n      }));\n    } catch (error) {\n      console.error('Failed to fetch regression alerts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate regression report\n   */\n  async generateRegressionReport(scenarioId: string, period: { start: Date; end: Date }): Promise<{\n    summary: {\n      totalAlerts: number;\n      criticalAlerts: number;\n      mostAffectedMetrics: string[];\n      overallTrend: 'improving' | 'stable' | 'degrading';\n    };\n    alerts: RegressionAlert[];\n    trends: TrendAnalysis[];\n    recommendations: string[];\n  }> {\n    const alerts = await this.getRegressionAlerts(period);\n    const scenarioAlerts = alerts.filter(a => a.scenarioId === scenarioId);\n    \n    const trends = await this.analyzeTrends(scenarioId, period);\n    \n    const summary = {\n      totalAlerts: scenarioAlerts.length,\n      criticalAlerts: scenarioAlerts.filter(a => a.severity === 'critical').length,\n      mostAffectedMetrics: this.getMostAffectedMetrics(scenarioAlerts),\n      overallTrend: trends?.trend || 'stable' as 'improving' | 'stable' | 'degrading'\n    };\n\n    const recommendations = this.generateRecommendations(scenarioAlerts, trends);\n\n    return {\n      summary,\n      alerts: scenarioAlerts,\n      trends: trends ? [trends] : [],\n      recommendations\n    };\n  }\n\n  /**\n   * Train neural model for anomaly detection\n   */\n  async trainNeuralModel(): Promise<void> {\n    if (this.trainingData.length < 100) {\n      console.log('Insufficient training data for neural model');\n      return;\n    }\n\n    console.log('Training neural model for anomaly detection...');\n    \n    const features = this.trainingData.map(d => d.features);\n    const labels = this.trainingData.map(d => d.label);\n    \n    const xs = tf.tensor2d(features);\n    const ys = tf.tensor1d(labels);\n    \n    // Create autoencoder for anomaly detection\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({ inputShape: [features[0].length], units: 64, activation: 'relu' }),\n        tf.layers.dense({ units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 16, activation: 'relu' }),\n        tf.layers.dense({ units: 32, activation: 'relu' }),\n        tf.layers.dense({ units: 64, activation: 'relu' }),\n        tf.layers.dense({ units: features[0].length, activation: 'linear' })\n      ]\n    });\n    \n    model.compile({\n      optimizer: 'adam',\n      loss: 'meanSquaredError'\n    });\n    \n    await model.fit(xs, xs, {\n      epochs: 100,\n      batchSize: 32,\n      validationSplit: 0.2,\n      verbose: 0\n    });\n    \n    this.neuralModel = model;\n    console.log('Neural model training completed');\n    \n    xs.dispose();\n    ys.dispose();\n  }\n\n  /**\n   * Private methods\n   */\n  private async performRegressionCheck(): Promise<void> {\n    console.log('Performing automated regression check...');\n    \n    // Get recent performance data\n    const recentMetrics = await this.getRecentMetrics();\n    \n    for (const [scenarioId, baseline] of this.baselines) {\n      const currentMetrics = recentMetrics.get(scenarioId);\n      if (!currentMetrics) continue;\n      \n      // Mock LoadTestResults for compatibility\n      const mockResults: LoadTestResults = {\n        scenario: { id: scenarioId } as any,\n        summary: { totalRequests: 100 } as any,\n        metrics: {\n          responseTime: currentMetrics.responseTime,\n          throughput: currentMetrics.throughput,\n          errorRate: currentMetrics.errorRate\n        } as any,\n        timeline: [],\n        errors: [],\n        thresholdResults: [],\n        recommendations: []\n      };\n      \n      await this.analyzeResults(scenarioId, mockResults);\n    }\n  }\n\n  private async detectRegression(\n    metricKey: string,\n    current: number,\n    baseline: number,\n    threshold: RegressionThreshold\n  ): Promise<RegressionAlert | null> {\n    let degradation = 0;\n    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    \n    // Calculate degradation based on metric type\n    if (metricKey.includes('responseTime') || metricKey.includes('errorRate')) {\n      degradation = ((current - baseline) / baseline) * 100;\n    } else if (metricKey.includes('throughput')) {\n      degradation = ((baseline - current) / baseline) * 100;\n    }\n    \n    // Determine if regression occurred\n    const isRegression = Math.abs(degradation) > threshold.warning;\n    if (!isRegression) return null;\n    \n    // Determine severity\n    if (Math.abs(degradation) > threshold.critical) {\n      severity = 'critical';\n    } else if (Math.abs(degradation) > threshold.warning * 1.5) {\n      severity = 'high';\n    } else {\n      severity = 'medium';\n    }\n    \n    return {\n      id: `regression-${metricKey}-${Date.now()}`,\n      scenarioId: metricKey.split('.')[0],\n      metric: metricKey,\n      severity,\n      degradation: Math.abs(degradation),\n      baseline,\n      current,\n      threshold: threshold.warning,\n      confidence: 0.95,\n      timestamp: new Date(),\n      additionalContext: {\n        trend: degradation > 0 ? 'degrading' : 'improving',\n        changePoints: [],\n        correlatedMetrics: []\n      },\n      recommendations: this.getMetricRecommendations(metricKey, degradation)\n    };\n  }\n\n  private async analyzeTrends(scenarioId: string, period?: { start: Date; end: Date }): Promise<TrendAnalysis | null> {\n    try {\n      // Get historical data\n      const historicalData = await this.getHistoricalData(scenarioId, period);\n      if (historicalData.length < 10) return null;\n      \n      const values = historicalData.map(d => d.value);\n      const trend = StatisticalAnalyzer.mannKendallTrend(values);\n      const seasonality = StatisticalAnalyzer.detectSeasonality(values);\n      \n      // Simple forecast (last value + trend)\n      const lastValue = values[values.length - 1];\n      const forecast = {\n        nextValue: lastValue + trend.slope,\n        confidence: trend.significance / 10,\n        upperBound: lastValue + trend.slope * 1.2,\n        lowerBound: lastValue + trend.slope * 0.8\n      };\n      \n      return {\n        metric: scenarioId,\n        period: period ? `${period.start.toISOString()}-${period.end.toISOString()}` : 'recent',\n        trend: trend.trend,\n        slope: trend.slope,\n        correlation: trend.significance / 10,\n        seasonality,\n        forecast\n      };\n    } catch (error) {\n      console.error('Failed to analyze trends:', error);\n      return null;\n    }\n  }\n\n  private async detectAnomalies(metrics: PerformanceMetrics): Promise<number> {\n    if (!this.neuralModel) return 0;\n    \n    try {\n      const features = this.metricsToFeatures(metrics);\n      const input = tf.tensor2d([features]);\n      const reconstruction = this.neuralModel.predict(input) as tf.Tensor;\n      \n      // Calculate reconstruction error\n      const error = tf.losses.meanSquaredError(input, reconstruction);\n      const errorValue = await error.data();\n      \n      input.dispose();\n      reconstruction.dispose();\n      error.dispose();\n      \n      // Normalize error to 0-1 scale\n      return Math.min(errorValue[0] * 10, 1);\n    } catch (error) {\n      console.error('Anomaly detection failed:', error);\n      return 0;\n    }\n  }\n\n  private async sendAlert(alert: RegressionAlert): Promise<void> {\n    // Save to database\n    try {\n      const stmt = db.prepare(`\n        INSERT INTO regression_alerts \n        (scenario_id, metric, severity, degradation, timestamp, alert_data)\n        VALUES (?, ?, ?, ?, ?, ?)\n      `);\n      \n      stmt.run(\n        alert.scenarioId,\n        alert.metric,\n        alert.severity,\n        alert.degradation,\n        alert.timestamp.toISOString(),\n        JSON.stringify(alert)\n      );\n    } catch (error) {\n      console.error('Failed to save regression alert:', error);\n    }\n    \n    // Send to alerting system\n    alertingSystem.checkAndCreateAlert({\n      type: AlertType.PERFORMANCE,\n      service: 'performance-regression-detector',\n      message: `${alert.metric} degraded by ${alert.degradation.toFixed(1)}% (${alert.current} vs baseline ${alert.baseline})`,\n      details: {\n        scenarioId: alert.scenarioId,\n        metric: alert.metric,\n        degradation: alert.degradation,\n        recommendations: alert.recommendations\n      }\n    });\n    \n    this.emit('regressionAlert', alert);\n  }\n\n  private extractMetrics(results: LoadTestResults): PerformanceMetrics {\n    return {\n      responseTime: {\n        mean: results.metrics.responseTime.avg,\n        p50: results.metrics.responseTime.p50,\n        p95: results.metrics.responseTime.p95,\n        p99: results.metrics.responseTime.p99,\n        std: 0 // Would calculate from raw data\n      },\n      throughput: {\n        mean: results.metrics.throughput.avg,\n        std: 0 // Would calculate from timeline data\n      },\n      errorRate: results.metrics.errorRate,\n      availability: 100 - results.metrics.errorRate,\n      resourceUsage: {\n        cpu: 0, // Would get from system metrics\n        memory: 0,\n        io: 0\n      }\n    };\n  }\n\n  private setupDefaultThresholds(): void {\n    this.setThreshold('responseTime.p95', {\n      metric: 'responseTime.p95',\n      warning: 20, // 20% increase\n      critical: 50, // 50% increase\n      method: 'statistical',\n      confidence: 0.95,\n      minSampleSize: 30\n    });\n    \n    this.setThreshold('responseTime.mean', {\n      metric: 'responseTime.mean',\n      warning: 15,\n      critical: 40,\n      method: 'statistical',\n      confidence: 0.95,\n      minSampleSize: 30\n    });\n    \n    this.setThreshold('throughput.mean', {\n      metric: 'throughput.mean',\n      warning: 15, // 15% decrease\n      critical: 30, // 30% decrease\n      method: 'statistical',\n      confidence: 0.95,\n      minSampleSize: 30\n    });\n    \n    this.setThreshold('errorRate', {\n      metric: 'errorRate',\n      warning: 100, // 100% increase (double)\n      critical: 300, // 300% increase (4x)\n      method: 'absolute',\n      confidence: 0.95,\n      minSampleSize: 10\n    });\n  }\n\n  private async initializeNeuralModel(): Promise<void> {\n    // Initialize with a simple autoencoder\n    // In production, load pre-trained model or train with historical data\n    try {\n      this.neuralModel = tf.sequential({\n        layers: [\n          tf.layers.dense({ inputShape: [8], units: 16, activation: 'relu' }),\n          tf.layers.dense({ units: 8, activation: 'relu' }),\n          tf.layers.dense({ units: 4, activation: 'relu' }),\n          tf.layers.dense({ units: 8, activation: 'relu' }),\n          tf.layers.dense({ units: 16, activation: 'relu' }),\n          tf.layers.dense({ units: 8, activation: 'linear' })\n        ]\n      });\n      \n      this.neuralModel.compile({\n        optimizer: 'adam',\n        loss: 'meanSquaredError'\n      });\n    } catch (error) {\n      console.error('Failed to initialize neural model:', error);\n    }\n  }\n\n  private async loadBaselinesFromDatabase(): Promise<void> {\n    try {\n      const stmt = db.prepare('SELECT * FROM regression_baselines ORDER BY timestamp DESC');\n      const rows = stmt.all() as any[];\n      \n      for (const row of rows) {\n        const baseline = JSON.parse(row.baseline_data);\n        baseline.timestamp = new Date(row.timestamp);\n        this.baselines.set(baseline.scenarioId, baseline);\n      }\n      \n      console.log(`Loaded ${rows.length} baselines from database`);\n    } catch (error) {\n      console.error('Failed to load baselines:', error);\n    }\n  }\n\n  private async saveBaseline(baseline: RegressionBaseline): Promise<void> {\n    try {\n      const stmt = db.prepare(`\n        INSERT OR REPLACE INTO regression_baselines \n        (scenario_id, timestamp, baseline_data)\n        VALUES (?, ?, ?)\n      `);\n      \n      stmt.run(\n        baseline.scenarioId,\n        baseline.timestamp.toISOString(),\n        JSON.stringify(baseline)\n      );\n    } catch (error) {\n      console.error('Failed to save baseline:', error);\n    }\n  }\n\n  private addTrainingData(metrics: PerformanceMetrics): void {\n    const features = this.metricsToFeatures(metrics);\n    this.trainingData.push({\n      features,\n      label: 0 // Normal performance (for autoencoder)\n    });\n    \n    // Keep only recent training data\n    if (this.trainingData.length > 10000) {\n      this.trainingData = this.trainingData.slice(-5000);\n    }\n  }\n\n  private metricsToFeatures(metrics: PerformanceMetrics): number[] {\n    return [\n      metrics.responseTime.mean,\n      metrics.responseTime.p95,\n      metrics.responseTime.p99,\n      metrics.throughput.mean,\n      metrics.errorRate,\n      metrics.availability,\n      metrics.resourceUsage.cpu,\n      metrics.resourceUsage.memory\n    ];\n  }\n\n  private async getRecentMetrics(): Promise<Map<string, PerformanceMetrics>> {\n    // Mock implementation - would get from performance monitor\n    const metrics = new Map<string, PerformanceMetrics>();\n    \n    // This would typically fetch recent performance data\n    // For now, return empty map\n    return metrics;\n  }\n\n  private async getHistoricalData(scenarioId: string, period?: { start: Date; end: Date }): Promise<Array<{ timestamp: Date; value: number }>> {\n    // Mock implementation - would fetch from database\n    return [];\n  }\n\n  private getMostAffectedMetrics(alerts: RegressionAlert[]): string[] {\n    const metricCounts = new Map<string, number>();\n    \n    alerts.forEach(alert => {\n      const count = metricCounts.get(alert.metric) || 0;\n      metricCounts.set(alert.metric, count + 1);\n    });\n    \n    return Array.from(metricCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([metric]) => metric);\n  }\n\n  private generateRecommendations(alerts: RegressionAlert[], trends?: TrendAnalysis): string[] {\n    const recommendations = new Set<string>();\n    \n    if (alerts.some(a => a.metric.includes('responseTime'))) {\n      recommendations.add('Consider optimizing database queries and adding caching');\n      recommendations.add('Review recent code changes that might affect response times');\n    }\n    \n    if (alerts.some(a => a.metric.includes('throughput'))) {\n      recommendations.add('Investigate resource bottlenecks (CPU, memory, I/O)');\n      recommendations.add('Consider horizontal scaling or load balancing improvements');\n    }\n    \n    if (alerts.some(a => a.metric.includes('errorRate'))) {\n      recommendations.add('Review error logs for patterns and implement better error handling');\n      recommendations.add('Check system dependencies and external service availability');\n    }\n    \n    if (trends?.trend === 'degrading') {\n      recommendations.add('Performance is degrading over time - schedule maintenance review');\n      recommendations.add('Monitor for memory leaks or resource accumulation issues');\n    }\n    \n    if (alerts.some(a => a.severity === 'critical')) {\n      recommendations.add('CRITICAL: Immediate investigation required for production stability');\n    }\n    \n    return Array.from(recommendations);\n  }\n\n  private getMetricRecommendations(metricKey: string, degradation: number): string[] {\n    const recommendations = [];\n    \n    if (metricKey.includes('responseTime')) {\n      recommendations.push('Response time degradation detected');\n      if (degradation > 50) {\n        recommendations.push('SEVERE: Response time increased by >50% - immediate action required');\n      }\n      recommendations.push('Check database performance and query optimization');\n      recommendations.push('Review caching strategies and hit rates');\n    } else if (metricKey.includes('throughput')) {\n      recommendations.push('Throughput degradation detected');\n      recommendations.push('Monitor system resources (CPU, memory, I/O)');\n      recommendations.push('Consider scaling or load balancing adjustments');\n    } else if (metricKey.includes('errorRate')) {\n      recommendations.push('Error rate increase detected');\n      recommendations.push('Review application logs for error patterns');\n      recommendations.push('Check external dependencies and service health');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.stopMonitoring();\n    \n    if (this.neuralModel) {\n      this.neuralModel.dispose();\n    }\n    \n    this.cache.clear();\n    this.removeAllListeners();\n  }\n}\n\n// Export singleton instance\nexport const performanceRegressionDetector = new PerformanceRegressionDetector();"],"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","ignoreList":[]}