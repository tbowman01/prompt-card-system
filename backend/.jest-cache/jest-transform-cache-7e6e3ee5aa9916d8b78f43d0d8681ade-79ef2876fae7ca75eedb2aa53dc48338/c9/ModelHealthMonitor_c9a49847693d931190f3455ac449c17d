6c25c7c3da788aa38d0aedd242f5a7f3
"use strict";

/* istanbul ignore next */
function cov_ljrcxsaa2() {
  var path = "/workspaces/prompt-card-system/backend/src/services/models/ModelHealthMonitor.ts";
  var hash = "6d3fa0ef0eb6da8771fbb13b197ae09d0a64f56b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/models/ModelHealthMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 16
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 35
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "11": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "13": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 67
        }
      },
      "14": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "15": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 71
        }
      },
      "16": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "17": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "18": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "19": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 75
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 69
        }
      },
      "21": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 81
        }
      },
      "22": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 24
        }
      },
      "23": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "24": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "25": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 57
        }
      },
      "26": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 45
        }
      },
      "27": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 42
        }
      },
      "28": {
        start: {
          line: 66,
          column: 25
        },
        end: {
          line: 68,
          column: 43
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 53
        }
      },
      "30": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 59
        }
      },
      "31": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "32": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 73,
          column: 63
        }
      },
      "33": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "34": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "35": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "36": {
        start: {
          line: 78,
          column: 31
        },
        end: {
          line: 78,
          column: 71
        }
      },
      "37": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "38": {
        start: {
          line: 83,
          column: 33
        },
        end: {
          line: 83,
          column: 55
        }
      },
      "39": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 29
        }
      },
      "40": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "41": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 69
        }
      },
      "42": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "43": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 55
        }
      },
      "44": {
        start: {
          line: 94,
          column: 30
        },
        end: {
          line: 94,
          column: 33
        }
      },
      "45": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "46": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 34
        }
      },
      "47": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "48": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 50
        }
      },
      "49": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "50": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "51": {
        start: {
          line: 105,
          column: 34
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "52": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 62
        }
      },
      "53": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "54": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "55": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 61
        }
      },
      "56": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 82
        }
      },
      "57": {
        start: {
          line: 129,
          column: 32
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "58": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 60
        }
      },
      "59": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 73
        }
      },
      "60": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 144,
          column: 15
        }
      },
      "61": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 149,
          column: 29
        }
      },
      "62": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 29
        }
      },
      "63": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 151,
          column: 30
        }
      },
      "64": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 30
        }
      },
      "65": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 153,
          column: 31
        }
      },
      "66": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 31
        }
      },
      "67": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "68": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 51
        }
      },
      "69": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "70": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "71": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 160,
          column: 55
        }
      },
      "72": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 92
        }
      },
      "73": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 84
        }
      },
      "74": {
        start: {
          line: 163,
          column: 26
        },
        end: {
          line: 163,
          column: 64
        }
      },
      "75": {
        start: {
          line: 165,
          column: 32
        },
        end: {
          line: 167,
          column: 72
        }
      },
      "76": {
        start: {
          line: 168,
          column: 31
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "77": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 52
        }
      },
      "78": {
        start: {
          line: 180,
          column: 23
        },
        end: {
          line: 180,
          column: 25
        }
      },
      "79": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "80": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 72
        }
      },
      "81": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 184,
          column: 51
        }
      },
      "82": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "83": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 77
        }
      },
      "84": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "85": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 67
        }
      },
      "86": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "87": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 197,
          column: 15
        }
      },
      "88": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 50
        }
      },
      "89": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 43
        }
      },
      "90": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 44
        }
      },
      "91": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 37
        }
      },
      "92": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 45
        }
      },
      "93": {
        start: {
          line: 214,
          column: 37
        },
        end: {
          line: 214,
          column: 64
        }
      },
      "94": {
        start: {
          line: 215,
          column: 34
        },
        end: {
          line: 215,
          column: 43
        }
      },
      "95": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 45
        }
      },
      "96": {
        start: {
          line: 219,
          column: 37
        },
        end: {
          line: 219,
          column: 97
        }
      },
      "97": {
        start: {
          line: 220,
          column: 34
        },
        end: {
          line: 220,
          column: 43
        }
      },
      "98": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "99": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 224,
          column: 68
        }
      },
      "100": {
        start: {
          line: 225,
          column: 34
        },
        end: {
          line: 225,
          column: 69
        }
      },
      "101": {
        start: {
          line: 226,
          column: 30
        },
        end: {
          line: 226,
          column: 79
        }
      },
      "102": {
        start: {
          line: 226,
          column: 53
        },
        end: {
          line: 226,
          column: 78
        }
      },
      "103": {
        start: {
          line: 227,
          column: 34
        },
        end: {
          line: 227,
          column: 100
        }
      },
      "104": {
        start: {
          line: 227,
          column: 76
        },
        end: {
          line: 227,
          column: 99
        }
      },
      "105": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "106": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 56
        }
      },
      "107": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 74
        }
      },
      "108": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "109": {
        start: {
          line: 235,
          column: 33
        },
        end: {
          line: 235,
          column: 69
        }
      },
      "110": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 239,
          column: 17
        }
      },
      "111": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 44
        }
      },
      "112": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 238,
          column: 60
        }
      },
      "113": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 50
        }
      },
      "114": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 43
        }
      },
      "115": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 80
        }
      },
      "116": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "117": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 249,
          column: 19
        }
      },
      "118": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 68
        }
      },
      "119": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 24
        }
      },
      "120": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 64
        }
      },
      "121": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "122": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 36
        }
      },
      "123": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 42
        }
      },
      "124": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 36
        }
      },
      "125": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 29
        }
      },
      "126": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 35
        }
      },
      "127": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 64
        }
      },
      "128": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 55
        }
      },
      "129": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 69
        }
      },
      "130": {
        start: {
          line: 274,
          column: 29
        },
        end: {
          line: 274,
          column: 59
        }
      },
      "131": {
        start: {
          line: 275,
          column: 31
        },
        end: {
          line: 275,
          column: 63
        }
      },
      "132": {
        start: {
          line: 276,
          column: 28
        },
        end: {
          line: 277,
          column: 69
        }
      },
      "133": {
        start: {
          line: 277,
          column: 38
        },
        end: {
          line: 277,
          column: 65
        }
      },
      "134": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 284,
          column: 10
        }
      },
      "135": {
        start: {
          line: 287,
          column: 0
        },
        end: {
          line: 287,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 65
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 37
          },
          end: {
            line: 66,
            column: 38
          }
        },
        loc: {
          start: {
            line: 66,
            column: 49
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 40
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 51
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 52
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 156
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 41
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 179
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 30
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 200
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 31
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 203
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 27
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 206
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 20
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 209
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 23
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 212
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 214,
            column: 21
          }
        },
        loc: {
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 64
          }
        },
        line: 214
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 215,
            column: 17
          },
          end: {
            line: 215,
            column: 18
          }
        },
        loc: {
          start: {
            line: 215,
            column: 34
          },
          end: {
            line: 215,
            column: 43
          }
        },
        line: 215
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 25
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 217
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 219,
            column: 21
          }
        },
        loc: {
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 219,
            column: 97
          }
        },
        line: 219
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 220,
            column: 18
          }
        },
        loc: {
          start: {
            line: 220,
            column: 34
          },
          end: {
            line: 220,
            column: 43
          }
        },
        line: 220
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 29
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 222
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 226,
            column: 44
          },
          end: {
            line: 226,
            column: 45
          }
        },
        loc: {
          start: {
            line: 226,
            column: 53
          },
          end: {
            line: 226,
            column: 78
          }
        },
        line: 226
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 227,
            column: 67
          },
          end: {
            line: 227,
            column: 68
          }
        },
        loc: {
          start: {
            line: 227,
            column: 76
          },
          end: {
            line: 227,
            column: 99
          }
        },
        line: 227
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 257
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 28
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 269
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 273
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 277,
            column: 20
          },
          end: {
            line: 277,
            column: 21
          }
        },
        loc: {
          start: {
            line: 277,
            column: 38
          },
          end: {
            line: 277,
            column: 65
          }
        },
        line: 277
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 17,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 17,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 75,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 75,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 90,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 90,
            column: 34
          }
        }, {
          start: {
            line: 90,
            column: 38
          },
          end: {
            line: 90,
            column: 75
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 136,
            column: 49
          },
          end: {
            line: 136,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 74
          },
          end: {
            line: 136,
            column: 87
          }
        }, {
          start: {
            line: 136,
            column: 90
          },
          end: {
            line: 136,
            column: 105
          }
        }],
        line: 136
      },
      "9": {
        loc: {
          start: {
            line: 142,
            column: 23
          },
          end: {
            line: 142,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 48
          },
          end: {
            line: 142,
            column: 61
          }
        }, {
          start: {
            line: 142,
            column: 64
          },
          end: {
            line: 142,
            column: 79
          }
        }],
        line: 142
      },
      "10": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 149,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 149,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "11": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 148,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 148,
            column: 29
          }
        }, {
          start: {
            line: 148,
            column: 33
          },
          end: {
            line: 148,
            column: 49
          }
        }],
        line: 148
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 151,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 151,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 29
          }
        }, {
          start: {
            line: 150,
            column: 33
          },
          end: {
            line: 150,
            column: 48
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 153,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 153,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "15": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "16": {
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 41
          },
          end: {
            line: 161,
            column: 63
          }
        }, {
          start: {
            line: 161,
            column: 66
          },
          end: {
            line: 161,
            column: 92
          }
        }],
        line: 161
      },
      "17": {
        loc: {
          start: {
            line: 165,
            column: 32
          },
          end: {
            line: 167,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 14
          },
          end: {
            line: 166,
            column: 26
          }
        }, {
          start: {
            line: 167,
            column: 14
          },
          end: {
            line: 167,
            column: 72
          }
        }],
        line: 165
      },
      "18": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "19": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "20": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 19
          }
        }, {
          start: {
            line: 185,
            column: 23
          },
          end: {
            line: 185,
            column: 80
          }
        }],
        line: 185
      },
      "21": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "22": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "23": {
        loc: {
          start: {
            line: 195,
            column: 26
          },
          end: {
            line: 195,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 58
          },
          end: {
            line: 195,
            column: 68
          }
        }, {
          start: {
            line: 195,
            column: 71
          },
          end: {
            line: 195,
            column: 80
          }
        }],
        line: 195
      },
      "24": {
        loc: {
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 219,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 219,
            column: 66
          }
        }, {
          start: {
            line: 219,
            column: 70
          },
          end: {
            line: 219,
            column: 97
          }
        }],
        line: 219
      },
      "25": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "26": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "27": {
        loc: {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 244,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 244,
            column: 36
          }
        }, {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 244,
            column: 64
          }
        }],
        line: 244
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/models/ModelHealthMonitor.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/models/ModelHealthMonitor.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { ModelHealthStatus, ModelMetrics, ModelPerformanceConfig } from './types';\nimport { llmService } from '../llmService';\n\nexport class ModelHealthMonitor extends EventEmitter {\n  private healthStatuses: Map<string, ModelHealthStatus> = new Map();\n  private metrics: Map<string, ModelMetrics> = new Map();\n  private healthCheckIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private config: ModelPerformanceConfig;\n  private isInitialized = false;\n\n  constructor(config: ModelPerformanceConfig) {\n    super();\n    this.config = config;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      console.log('\uD83D\uDD0D Initializing Model Health Monitor...');\n      \n      // Get available models\n      const models = await llmService.getModels();\n      console.log(`\uD83D\uDCCA Found ${models.length} models to monitor`);\n      \n      // Initialize health status for each model\n      for (const model of models) {\n        await this.initializeModelHealth(model);\n      }\n      \n      this.isInitialized = true;\n      console.log('\u2705 Model Health Monitor initialized successfully');\n      \n      this.emit('initialized', { modelsCount: models.length });\n    } catch (error) {\n      console.error('\u274C Failed to initialize Model Health Monitor:', error);\n      throw error;\n    }\n  }\n\n  private async initializeModelHealth(modelName: string): Promise<void> {\n    const healthStatus: ModelHealthStatus = {\n      modelName,\n      status: 'offline',\n      lastHealthCheck: new Date(),\n      responseTime: 0,\n      errorCount: 0,\n      healthScore: 0,\n      issues: [],\n      uptime: 0\n    };\n\n    const metrics: ModelMetrics = {\n      modelName,\n      averageResponseTime: 0,\n      successRate: 0,\n      errorRate: 0,\n      tokensPerSecond: 0,\n      lastUpdated: new Date(),\n      totalRequests: 0,\n      failedRequests: 0,\n      averageTokens: 0,\n      peakMemoryUsage: 0,\n      cpuUsage: 0\n    };\n\n    this.healthStatuses.set(modelName, healthStatus);\n    this.metrics.set(modelName, metrics);\n\n    // Start health checks\n    this.startHealthChecks(modelName);\n  }\n\n  private startHealthChecks(modelName: string): void {\n    const interval = setInterval(async () => {\n      await this.performHealthCheck(modelName);\n    }, this.config.healthCheckInterval);\n\n    this.healthCheckIntervals.set(modelName, interval);\n  }\n\n  private async performHealthCheck(modelName: string): Promise<void> {\n    const startTime = Date.now();\n    const healthStatus = this.healthStatuses.get(modelName);\n    \n    if (!healthStatus) return;\n\n    try {\n      // Simple health check prompt\n      const testPrompt = 'Say \"OK\" if you are working correctly.';\n      const response = await llmService.generate(testPrompt, modelName, {\n        temperature: 0.1,\n        num_predict: 10\n      });\n\n      const responseTime = Date.now() - startTime;\n      const issues: string[] = [];\n\n      // Check response time\n      if (responseTime > this.config.maxResponseTime) {\n        issues.push(`High response time: ${responseTime}ms`);\n      }\n\n      // Check response validity\n      if (!response.response || response.response.trim().length === 0) {\n        issues.push('Empty response received');\n      }\n\n      // Calculate health score\n      let healthScore = 100;\n      if (responseTime > this.config.maxResponseTime) {\n        healthScore -= 30;\n      }\n      if (issues.length > 0) {\n        healthScore -= issues.length * 20;\n      }\n      if (healthStatus.errorCount > 5) {\n        healthScore -= 20;\n      }\n\n      // Update health status\n      const updatedStatus: ModelHealthStatus = {\n        ...healthStatus,\n        status: this.determineHealthStatus(healthScore, issues.length),\n        lastHealthCheck: new Date(),\n        responseTime,\n        healthScore: Math.max(0, healthScore),\n        issues,\n        uptime: healthStatus.uptime + this.config.healthCheckInterval\n      };\n\n      this.healthStatuses.set(modelName, updatedStatus);\n      this.updateMetrics(modelName, responseTime, true);\n\n      // Emit health check event\n      this.emit('healthCheck', {\n        modelName,\n        status: updatedStatus.status,\n        healthScore: updatedStatus.healthScore,\n        responseTime,\n        issues\n      });\n\n      // Check for alerts\n      await this.checkAlerts(modelName, updatedStatus);\n\n    } catch (error) {\n      console.error(`\u274C Health check failed for model ${modelName}:`, error);\n      \n      const errorStatus: ModelHealthStatus = {\n        ...healthStatus,\n        status: 'unhealthy',\n        lastHealthCheck: new Date(),\n        responseTime: Date.now() - startTime,\n        errorCount: healthStatus.errorCount + 1,\n        healthScore: Math.max(0, healthStatus.healthScore - 25),\n        issues: [`Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`]\n      };\n\n      this.healthStatuses.set(modelName, errorStatus);\n      this.updateMetrics(modelName, Date.now() - startTime, false);\n\n      this.emit('healthCheckFailed', {\n        modelName,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        errorCount: errorStatus.errorCount\n      });\n    }\n  }\n\n  private determineHealthStatus(healthScore: number, issueCount: number): 'healthy' | 'degraded' | 'unhealthy' | 'offline' {\n    if (healthScore >= 80 && issueCount === 0) return 'healthy';\n    if (healthScore >= 60 && issueCount <= 2) return 'degraded';\n    if (healthScore >= 20) return 'unhealthy';\n    return 'offline';\n  }\n\n  private updateMetrics(modelName: string, responseTime: number, success: boolean): void {\n    const metrics = this.metrics.get(modelName);\n    if (!metrics) return;\n\n    const totalRequests = metrics.totalRequests + 1;\n    const failedRequests = success ? metrics.failedRequests : metrics.failedRequests + 1;\n    const successRate = ((totalRequests - failedRequests) / totalRequests) * 100;\n    const errorRate = (failedRequests / totalRequests) * 100;\n\n    // Update average response time using exponential moving average\n    const avgResponseTime = metrics.averageResponseTime === 0 \n      ? responseTime \n      : (metrics.averageResponseTime * 0.8) + (responseTime * 0.2);\n\n    const updatedMetrics: ModelMetrics = {\n      ...metrics,\n      averageResponseTime: avgResponseTime,\n      successRate,\n      errorRate,\n      lastUpdated: new Date(),\n      totalRequests,\n      failedRequests\n    };\n\n    this.metrics.set(modelName, updatedMetrics);\n  }\n\n  private async checkAlerts(modelName: string, status: ModelHealthStatus): Promise<void> {\n    const alerts: string[] = [];\n\n    if (status.responseTime > this.config.alertThresholds.responseTime) {\n      alerts.push(`High response time: ${status.responseTime}ms`);\n    }\n\n    const metrics = this.metrics.get(modelName);\n    if (metrics && metrics.errorRate > this.config.alertThresholds.errorRate) {\n      alerts.push(`High error rate: ${metrics.errorRate.toFixed(2)}%`);\n    }\n\n    if (status.healthScore < this.config.minHealthScore) {\n      alerts.push(`Low health score: ${status.healthScore}`);\n    }\n\n    if (alerts.length > 0) {\n      this.emit('alert', {\n        modelName,\n        alerts,\n        severity: status.status === 'unhealthy' ? 'critical' : 'warning',\n        timestamp: new Date()\n      });\n    }\n  }\n\n  public getModelHealth(modelName: string): ModelHealthStatus | undefined {\n    return this.healthStatuses.get(modelName);\n  }\n\n  public getModelMetrics(modelName: string): ModelMetrics | undefined {\n    return this.metrics.get(modelName);\n  }\n\n  public getAllHealthStatuses(): Map<string, ModelHealthStatus> {\n    return new Map(this.healthStatuses);\n  }\n\n  public getAllMetrics(): Map<string, ModelMetrics> {\n    return new Map(this.metrics);\n  }\n\n  public getHealthyModels(): string[] {\n    return Array.from(this.healthStatuses.entries())\n      .filter(([_, status]) => status.status === 'healthy')\n      .map(([modelName]) => modelName);\n  }\n\n  public getUnhealthyModels(): string[] {\n    return Array.from(this.healthStatuses.entries())\n      .filter(([_, status]) => status.status === 'unhealthy' || status.status === 'offline')\n      .map(([modelName]) => modelName);\n  }\n\n  public async refreshModelList(): Promise<void> {\n    try {\n      const models = await llmService.getModels();\n      const currentModels = new Set(this.healthStatuses.keys());\n      const newModels = models.filter(model => !currentModels.has(model));\n      const removedModels = Array.from(currentModels).filter(model => !models.includes(model));\n\n      // Add new models\n      for (const model of newModels) {\n        await this.initializeModelHealth(model);\n        console.log(`\u2795 Added monitoring for new model: ${model}`);\n      }\n\n      // Remove deleted models\n      for (const model of removedModels) {\n        const interval = this.healthCheckIntervals.get(model);\n        if (interval) {\n          clearInterval(interval);\n          this.healthCheckIntervals.delete(model);\n        }\n        this.healthStatuses.delete(model);\n        this.metrics.delete(model);\n        console.log(`\u2796 Removed monitoring for deleted model: ${model}`);\n      }\n\n      if (newModels.length > 0 || removedModels.length > 0) {\n        this.emit('modelListUpdated', {\n          added: newModels,\n          removed: removedModels,\n          total: models.length\n        });\n      }\n    } catch (error) {\n      console.error('\u274C Failed to refresh model list:', error);\n      throw error;\n    }\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('\uD83D\uDD04 Shutting down Model Health Monitor...');\n    \n    // Clear all intervals\n    for (const interval of this.healthCheckIntervals.values()) {\n      clearInterval(interval);\n    }\n    \n    this.healthCheckIntervals.clear();\n    this.healthStatuses.clear();\n    this.metrics.clear();\n    this.isInitialized = false;\n    \n    console.log('\u2705 Model Health Monitor shutdown complete');\n  }\n\n  public updateConfig(newConfig: Partial<ModelPerformanceConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('\u2699\uFE0F Model Health Monitor configuration updated');\n  }\n\n  public getStatus(): {\n    initialized: boolean;\n    modelsMonitored: number;\n    healthyModels: number;\n    unhealthyModels: number;\n    totalChecks: number;\n  } {\n    const healthyCount = this.getHealthyModels().length;\n    const unhealthyCount = this.getUnhealthyModels().length;\n    const totalChecks = Array.from(this.metrics.values())\n      .reduce((sum, metrics) => sum + metrics.totalRequests, 0);\n\n    return {\n      initialized: this.isInitialized,\n      modelsMonitored: this.healthStatuses.size,\n      healthyModels: healthyCount,\n      unhealthyModels: unhealthyCount,\n      totalChecks\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6d3fa0ef0eb6da8771fbb13b197ae09d0a64f56b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ljrcxsaa2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ljrcxsaa2();
cov_ljrcxsaa2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ljrcxsaa2().s[1]++;
exports.ModelHealthMonitor = void 0;
const events_1 =
/* istanbul ignore next */
(cov_ljrcxsaa2().s[2]++, require("events"));
const llmService_1 =
/* istanbul ignore next */
(cov_ljrcxsaa2().s[3]++, require("../llmService"));
class ModelHealthMonitor extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(config) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[0]++;
    cov_ljrcxsaa2().s[4]++;
    super();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[5]++;
    this.healthStatuses = new Map();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[6]++;
    this.metrics = new Map();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[7]++;
    this.healthCheckIntervals = new Map();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[8]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[9]++;
    this.config = config;
  }
  async initialize() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[1]++;
    cov_ljrcxsaa2().s[10]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[0][0]++;
      cov_ljrcxsaa2().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[0][1]++;
    }
    cov_ljrcxsaa2().s[12]++;
    try {
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[13]++;
      console.log('🔍 Initializing Model Health Monitor...');
      // Get available models
      const models =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[14]++, await llmService_1.llmService.getModels());
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[15]++;
      console.log(`📊 Found ${models.length} models to monitor`);
      // Initialize health status for each model
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[16]++;
      for (const model of models) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().s[17]++;
        await this.initializeModelHealth(model);
      }
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[18]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[19]++;
      console.log('✅ Model Health Monitor initialized successfully');
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[20]++;
      this.emit('initialized', {
        modelsCount: models.length
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[21]++;
      console.error('❌ Failed to initialize Model Health Monitor:', error);
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[22]++;
      throw error;
    }
  }
  async initializeModelHealth(modelName) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[2]++;
    const healthStatus =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[23]++, {
      modelName,
      status: 'offline',
      lastHealthCheck: new Date(),
      responseTime: 0,
      errorCount: 0,
      healthScore: 0,
      issues: [],
      uptime: 0
    });
    const metrics =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[24]++, {
      modelName,
      averageResponseTime: 0,
      successRate: 0,
      errorRate: 0,
      tokensPerSecond: 0,
      lastUpdated: new Date(),
      totalRequests: 0,
      failedRequests: 0,
      averageTokens: 0,
      peakMemoryUsage: 0,
      cpuUsage: 0
    });
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[25]++;
    this.healthStatuses.set(modelName, healthStatus);
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[26]++;
    this.metrics.set(modelName, metrics);
    // Start health checks
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[27]++;
    this.startHealthChecks(modelName);
  }
  startHealthChecks(modelName) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[3]++;
    const interval =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[28]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_ljrcxsaa2().f[4]++;
      cov_ljrcxsaa2().s[29]++;
      await this.performHealthCheck(modelName);
    }, this.config.healthCheckInterval));
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[30]++;
    this.healthCheckIntervals.set(modelName, interval);
  }
  async performHealthCheck(modelName) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[31]++, Date.now());
    const healthStatus =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[32]++, this.healthStatuses.get(modelName));
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[33]++;
    if (!healthStatus) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[1][0]++;
      cov_ljrcxsaa2().s[34]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[1][1]++;
    }
    cov_ljrcxsaa2().s[35]++;
    try {
      // Simple health check prompt
      const testPrompt =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[36]++, 'Say "OK" if you are working correctly.');
      const response =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[37]++, await llmService_1.llmService.generate(testPrompt, modelName, {
        temperature: 0.1,
        num_predict: 10
      }));
      const responseTime =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[38]++, Date.now() - startTime);
      const issues =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[39]++, []);
      // Check response time
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[40]++;
      if (responseTime > this.config.maxResponseTime) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().b[2][0]++;
        cov_ljrcxsaa2().s[41]++;
        issues.push(`High response time: ${responseTime}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_ljrcxsaa2().b[2][1]++;
      }
      // Check response validity
      cov_ljrcxsaa2().s[42]++;
      if (
      /* istanbul ignore next */
      (cov_ljrcxsaa2().b[4][0]++, !response.response) ||
      /* istanbul ignore next */
      (cov_ljrcxsaa2().b[4][1]++, response.response.trim().length === 0)) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().b[3][0]++;
        cov_ljrcxsaa2().s[43]++;
        issues.push('Empty response received');
      } else
      /* istanbul ignore next */
      {
        cov_ljrcxsaa2().b[3][1]++;
      }
      // Calculate health score
      let healthScore =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[44]++, 100);
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[45]++;
      if (responseTime > this.config.maxResponseTime) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().b[5][0]++;
        cov_ljrcxsaa2().s[46]++;
        healthScore -= 30;
      } else
      /* istanbul ignore next */
      {
        cov_ljrcxsaa2().b[5][1]++;
      }
      cov_ljrcxsaa2().s[47]++;
      if (issues.length > 0) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().b[6][0]++;
        cov_ljrcxsaa2().s[48]++;
        healthScore -= issues.length * 20;
      } else
      /* istanbul ignore next */
      {
        cov_ljrcxsaa2().b[6][1]++;
      }
      cov_ljrcxsaa2().s[49]++;
      if (healthStatus.errorCount > 5) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().b[7][0]++;
        cov_ljrcxsaa2().s[50]++;
        healthScore -= 20;
      } else
      /* istanbul ignore next */
      {
        cov_ljrcxsaa2().b[7][1]++;
      }
      // Update health status
      const updatedStatus =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[51]++, {
        ...healthStatus,
        status: this.determineHealthStatus(healthScore, issues.length),
        lastHealthCheck: new Date(),
        responseTime,
        healthScore: Math.max(0, healthScore),
        issues,
        uptime: healthStatus.uptime + this.config.healthCheckInterval
      });
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[52]++;
      this.healthStatuses.set(modelName, updatedStatus);
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[53]++;
      this.updateMetrics(modelName, responseTime, true);
      // Emit health check event
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[54]++;
      this.emit('healthCheck', {
        modelName,
        status: updatedStatus.status,
        healthScore: updatedStatus.healthScore,
        responseTime,
        issues
      });
      // Check for alerts
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[55]++;
      await this.checkAlerts(modelName, updatedStatus);
    } catch (error) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[56]++;
      console.error(`❌ Health check failed for model ${modelName}:`, error);
      const errorStatus =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[57]++, {
        ...healthStatus,
        status: 'unhealthy',
        lastHealthCheck: new Date(),
        responseTime: Date.now() - startTime,
        errorCount: healthStatus.errorCount + 1,
        healthScore: Math.max(0, healthStatus.healthScore - 25),
        issues: [`Health check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_ljrcxsaa2().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_ljrcxsaa2().b[8][1]++, 'Unknown error')}`]
      });
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[58]++;
      this.healthStatuses.set(modelName, errorStatus);
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[59]++;
      this.updateMetrics(modelName, Date.now() - startTime, false);
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[60]++;
      this.emit('healthCheckFailed', {
        modelName,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_ljrcxsaa2().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_ljrcxsaa2().b[9][1]++, 'Unknown error'),
        errorCount: errorStatus.errorCount
      });
    }
  }
  determineHealthStatus(healthScore, issueCount) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[6]++;
    cov_ljrcxsaa2().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[11][0]++, healthScore >= 80) &&
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[11][1]++, issueCount === 0)) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[10][0]++;
      cov_ljrcxsaa2().s[62]++;
      return 'healthy';
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[10][1]++;
    }
    cov_ljrcxsaa2().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[13][0]++, healthScore >= 60) &&
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[13][1]++, issueCount <= 2)) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[12][0]++;
      cov_ljrcxsaa2().s[64]++;
      return 'degraded';
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[12][1]++;
    }
    cov_ljrcxsaa2().s[65]++;
    if (healthScore >= 20) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[14][0]++;
      cov_ljrcxsaa2().s[66]++;
      return 'unhealthy';
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[14][1]++;
    }
    cov_ljrcxsaa2().s[67]++;
    return 'offline';
  }
  updateMetrics(modelName, responseTime, success) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[7]++;
    const metrics =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[68]++, this.metrics.get(modelName));
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[69]++;
    if (!metrics) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[15][0]++;
      cov_ljrcxsaa2().s[70]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[15][1]++;
    }
    const totalRequests =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[71]++, metrics.totalRequests + 1);
    const failedRequests =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[72]++, success ?
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[16][0]++, metrics.failedRequests) :
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[16][1]++, metrics.failedRequests + 1));
    const successRate =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[73]++, (totalRequests - failedRequests) / totalRequests * 100);
    const errorRate =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[74]++, failedRequests / totalRequests * 100);
    // Update average response time using exponential moving average
    const avgResponseTime =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[75]++, metrics.averageResponseTime === 0 ?
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[17][0]++, responseTime) :
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[17][1]++, metrics.averageResponseTime * 0.8 + responseTime * 0.2));
    const updatedMetrics =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[76]++, {
      ...metrics,
      averageResponseTime: avgResponseTime,
      successRate,
      errorRate,
      lastUpdated: new Date(),
      totalRequests,
      failedRequests
    });
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[77]++;
    this.metrics.set(modelName, updatedMetrics);
  }
  async checkAlerts(modelName, status) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[8]++;
    const alerts =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[78]++, []);
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[79]++;
    if (status.responseTime > this.config.alertThresholds.responseTime) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[18][0]++;
      cov_ljrcxsaa2().s[80]++;
      alerts.push(`High response time: ${status.responseTime}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[18][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[81]++, this.metrics.get(modelName));
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[20][0]++, metrics) &&
    /* istanbul ignore next */
    (cov_ljrcxsaa2().b[20][1]++, metrics.errorRate > this.config.alertThresholds.errorRate)) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[19][0]++;
      cov_ljrcxsaa2().s[83]++;
      alerts.push(`High error rate: ${metrics.errorRate.toFixed(2)}%`);
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[19][1]++;
    }
    cov_ljrcxsaa2().s[84]++;
    if (status.healthScore < this.config.minHealthScore) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[21][0]++;
      cov_ljrcxsaa2().s[85]++;
      alerts.push(`Low health score: ${status.healthScore}`);
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[21][1]++;
    }
    cov_ljrcxsaa2().s[86]++;
    if (alerts.length > 0) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().b[22][0]++;
      cov_ljrcxsaa2().s[87]++;
      this.emit('alert', {
        modelName,
        alerts,
        severity: status.status === 'unhealthy' ?
        /* istanbul ignore next */
        (cov_ljrcxsaa2().b[23][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_ljrcxsaa2().b[23][1]++, 'warning'),
        timestamp: new Date()
      });
    } else
    /* istanbul ignore next */
    {
      cov_ljrcxsaa2().b[22][1]++;
    }
  }
  getModelHealth(modelName) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[9]++;
    cov_ljrcxsaa2().s[88]++;
    return this.healthStatuses.get(modelName);
  }
  getModelMetrics(modelName) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[10]++;
    cov_ljrcxsaa2().s[89]++;
    return this.metrics.get(modelName);
  }
  getAllHealthStatuses() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[11]++;
    cov_ljrcxsaa2().s[90]++;
    return new Map(this.healthStatuses);
  }
  getAllMetrics() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[12]++;
    cov_ljrcxsaa2().s[91]++;
    return new Map(this.metrics);
  }
  getHealthyModels() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[13]++;
    cov_ljrcxsaa2().s[92]++;
    return Array.from(this.healthStatuses.entries()).filter(([_, status]) => {
      /* istanbul ignore next */
      cov_ljrcxsaa2().f[14]++;
      cov_ljrcxsaa2().s[93]++;
      return status.status === 'healthy';
    }).map(([modelName]) => {
      /* istanbul ignore next */
      cov_ljrcxsaa2().f[15]++;
      cov_ljrcxsaa2().s[94]++;
      return modelName;
    });
  }
  getUnhealthyModels() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[16]++;
    cov_ljrcxsaa2().s[95]++;
    return Array.from(this.healthStatuses.entries()).filter(([_, status]) => {
      /* istanbul ignore next */
      cov_ljrcxsaa2().f[17]++;
      cov_ljrcxsaa2().s[96]++;
      return /* istanbul ignore next */(cov_ljrcxsaa2().b[24][0]++, status.status === 'unhealthy') ||
      /* istanbul ignore next */
      (cov_ljrcxsaa2().b[24][1]++, status.status === 'offline');
    }).map(([modelName]) => {
      /* istanbul ignore next */
      cov_ljrcxsaa2().f[18]++;
      cov_ljrcxsaa2().s[97]++;
      return modelName;
    });
  }
  async refreshModelList() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[19]++;
    cov_ljrcxsaa2().s[98]++;
    try {
      const models =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[99]++, await llmService_1.llmService.getModels());
      const currentModels =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[100]++, new Set(this.healthStatuses.keys()));
      const newModels =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[101]++, models.filter(model => {
        /* istanbul ignore next */
        cov_ljrcxsaa2().f[20]++;
        cov_ljrcxsaa2().s[102]++;
        return !currentModels.has(model);
      }));
      const removedModels =
      /* istanbul ignore next */
      (cov_ljrcxsaa2().s[103]++, Array.from(currentModels).filter(model => {
        /* istanbul ignore next */
        cov_ljrcxsaa2().f[21]++;
        cov_ljrcxsaa2().s[104]++;
        return !models.includes(model);
      }));
      // Add new models
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[105]++;
      for (const model of newModels) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().s[106]++;
        await this.initializeModelHealth(model);
        /* istanbul ignore next */
        cov_ljrcxsaa2().s[107]++;
        console.log(`➕ Added monitoring for new model: ${model}`);
      }
      // Remove deleted models
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[108]++;
      for (const model of removedModels) {
        const interval =
        /* istanbul ignore next */
        (cov_ljrcxsaa2().s[109]++, this.healthCheckIntervals.get(model));
        /* istanbul ignore next */
        cov_ljrcxsaa2().s[110]++;
        if (interval) {
          /* istanbul ignore next */
          cov_ljrcxsaa2().b[25][0]++;
          cov_ljrcxsaa2().s[111]++;
          clearInterval(interval);
          /* istanbul ignore next */
          cov_ljrcxsaa2().s[112]++;
          this.healthCheckIntervals.delete(model);
        } else
        /* istanbul ignore next */
        {
          cov_ljrcxsaa2().b[25][1]++;
        }
        cov_ljrcxsaa2().s[113]++;
        this.healthStatuses.delete(model);
        /* istanbul ignore next */
        cov_ljrcxsaa2().s[114]++;
        this.metrics.delete(model);
        /* istanbul ignore next */
        cov_ljrcxsaa2().s[115]++;
        console.log(`➖ Removed monitoring for deleted model: ${model}`);
      }
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[116]++;
      if (
      /* istanbul ignore next */
      (cov_ljrcxsaa2().b[27][0]++, newModels.length > 0) ||
      /* istanbul ignore next */
      (cov_ljrcxsaa2().b[27][1]++, removedModels.length > 0)) {
        /* istanbul ignore next */
        cov_ljrcxsaa2().b[26][0]++;
        cov_ljrcxsaa2().s[117]++;
        this.emit('modelListUpdated', {
          added: newModels,
          removed: removedModels,
          total: models.length
        });
      } else
      /* istanbul ignore next */
      {
        cov_ljrcxsaa2().b[26][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[118]++;
      console.error('❌ Failed to refresh model list:', error);
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[119]++;
      throw error;
    }
  }
  async shutdown() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[22]++;
    cov_ljrcxsaa2().s[120]++;
    console.log('🔄 Shutting down Model Health Monitor...');
    // Clear all intervals
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[121]++;
    for (const interval of this.healthCheckIntervals.values()) {
      /* istanbul ignore next */
      cov_ljrcxsaa2().s[122]++;
      clearInterval(interval);
    }
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[123]++;
    this.healthCheckIntervals.clear();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[124]++;
    this.healthStatuses.clear();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[125]++;
    this.metrics.clear();
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[126]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[127]++;
    console.log('✅ Model Health Monitor shutdown complete');
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[23]++;
    cov_ljrcxsaa2().s[128]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[129]++;
    console.log('⚙️ Model Health Monitor configuration updated');
  }
  getStatus() {
    /* istanbul ignore next */
    cov_ljrcxsaa2().f[24]++;
    const healthyCount =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[130]++, this.getHealthyModels().length);
    const unhealthyCount =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[131]++, this.getUnhealthyModels().length);
    const totalChecks =
    /* istanbul ignore next */
    (cov_ljrcxsaa2().s[132]++, Array.from(this.metrics.values()).reduce((sum, metrics) => {
      /* istanbul ignore next */
      cov_ljrcxsaa2().f[25]++;
      cov_ljrcxsaa2().s[133]++;
      return sum + metrics.totalRequests;
    }, 0));
    /* istanbul ignore next */
    cov_ljrcxsaa2().s[134]++;
    return {
      initialized: this.isInitialized,
      modelsMonitored: this.healthStatuses.size,
      healthyModels: healthyCount,
      unhealthyModels: unhealthyCount,
      totalChecks
    };
  }
}
/* istanbul ignore next */
cov_ljrcxsaa2().s[135]++;
exports.ModelHealthMonitor = ModelHealthMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,