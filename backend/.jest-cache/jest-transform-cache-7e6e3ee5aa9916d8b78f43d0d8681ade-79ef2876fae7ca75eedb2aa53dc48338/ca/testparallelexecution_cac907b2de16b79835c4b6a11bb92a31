9e845415f0b7456f24319299a43d2481
#!/usr/bin/env tsx
"use strict";

/**
 * Comprehensive test suite for parallel test execution system
 * Run with: npx tsx src/services/testing/test-parallel-execution.ts
 */
/* istanbul ignore next */
function cov_25houkxn7j() {
  var path = "/workspaces/prompt-card-system/backend/src/services/testing/test-parallel-execution.ts";
  var hash = "802bbbc4d5bad8d401256a646e4a5ce40f805ba8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/testing/test-parallel-execution.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 62
        }
      },
      "1": {
        start: {
          line: 8,
          column: 27
        },
        end: {
          line: 8,
          column: 56
        }
      },
      "2": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "3": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "4": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 57
        }
      },
      "5": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 43,
          column: 1
        }
      },
      "6": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 29
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 11
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 86
        }
      },
      "11": {
        start: {
          line: 23,
          column: 37
        },
        end: {
          line: 23,
          column: 84
        }
      },
      "12": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "13": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 12
        }
      },
      "14": {
        start: {
          line: 38,
          column: 44
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "15": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "16": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "17": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 50
        }
      },
      "18": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "19": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "20": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 51,
          column: 49
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 53
        }
      },
      "22": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "23": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 67
        }
      },
      "24": {
        start: {
          line: 54,
          column: 41
        },
        end: {
          line: 54,
          column: 65
        }
      },
      "25": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "26": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 48
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 22
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 57
        }
      },
      "29": {
        start: {
          line: 64,
          column: 18
        },
        end: {
          line: 64,
          column: 71
        }
      },
      "30": {
        start: {
          line: 64,
          column: 55
        },
        end: {
          line: 64,
          column: 70
        }
      },
      "31": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 29
        }
      },
      "32": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 80
        }
      },
      "33": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 71
        }
      },
      "34": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 33
        }
      },
      "35": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 53
        }
      },
      "36": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 76,
          column: 6
        }
      },
      "37": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 83,
          column: 6
        }
      },
      "38": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 83
        }
      },
      "39": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "40": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "41": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "42": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 69
        }
      },
      "43": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 58
        }
      },
      "44": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 44
        }
      },
      "45": {
        start: {
          line: 102,
          column: 18
        },
        end: {
          line: 102,
          column: 51
        }
      },
      "46": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 89
        }
      },
      "47": {
        start: {
          line: 104,
          column: 23
        },
        end: {
          line: 104,
          column: 60
        }
      },
      "48": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 69
        }
      },
      "49": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 106,
          column: 70
        }
      },
      "50": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 62
        }
      },
      "51": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 30
        }
      },
      "52": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 16
        }
      },
      "53": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 54
        }
      },
      "54": {
        start: {
          line: 114,
          column: 15
        },
        end: {
          line: 114,
          column: 59
        }
      },
      "55": {
        start: {
          line: 116,
          column: 25
        },
        end: {
          line: 116,
          column: 35
        }
      },
      "56": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "57": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 122,
          column: 4
        }
      },
      "58": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 131
        }
      },
      "59": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 128,
          column: 4
        }
      },
      "60": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "61": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "62": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 142,
          column: 6
        }
      },
      "63": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "64": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "65": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 63
        }
      },
      "66": {
        start: {
          line: 152,
          column: 29
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "67": {
        start: {
          line: 153,
          column: 33
        },
        end: {
          line: 167,
          column: 16
        }
      },
      "68": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 75
        }
      },
      "69": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "70": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 84
        }
      },
      "71": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 160,
          column: 17
        }
      },
      "72": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 52
        }
      },
      "73": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 62
        }
      },
      "74": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 29
        }
      },
      "75": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "76": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 48
        }
      },
      "77": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 58
        }
      },
      "78": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 65
        }
      },
      "79": {
        start: {
          line: 169,
          column: 37
        },
        end: {
          line: 169,
          column: 63
        }
      },
      "80": {
        start: {
          line: 171,
          column: 22
        },
        end: {
          line: 171,
          column: 56
        }
      },
      "81": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 43
        }
      },
      "82": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 174,
          column: 67
        }
      },
      "83": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 69
        }
      },
      "84": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 38
        }
      },
      "85": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 70
        }
      },
      "86": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "87": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 90
        }
      },
      "88": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 24
        }
      },
      "89": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 21
        }
      },
      "90": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 187,
          column: 16
        }
      },
      "91": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 58
        }
      },
      "92": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "93": {
        start: {
          line: 192,
          column: 26
        },
        end: {
          line: 192,
          column: 64
        }
      },
      "94": {
        start: {
          line: 193,
          column: 26
        },
        end: {
          line: 193,
          column: 36
        }
      },
      "95": {
        start: {
          line: 194,
          column: 22
        },
        end: {
          line: 203,
          column: 10
        }
      },
      "96": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 53
        }
      },
      "97": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "98": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 71
        }
      },
      "99": {
        start: {
          line: 197,
          column: 45
        },
        end: {
          line: 197,
          column: 69
        }
      },
      "100": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 39
        }
      },
      "101": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 26
        }
      },
      "102": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 48
        }
      },
      "103": {
        start: {
          line: 205,
          column: 25
        },
        end: {
          line: 205,
          column: 47
        }
      },
      "104": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 92
        }
      },
      "105": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 24
        }
      },
      "106": {
        start: {
          line: 210,
          column: 23
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "107": {
        start: {
          line: 211,
          column: 22
        },
        end: {
          line: 211,
          column: 46
        }
      },
      "108": {
        start: {
          line: 212,
          column: 22
        },
        end: {
          line: 212,
          column: 46
        }
      },
      "109": {
        start: {
          line: 213,
          column: 25
        },
        end: {
          line: 213,
          column: 81
        }
      },
      "110": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 214,
          column: 81
        }
      },
      "111": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 47
        }
      },
      "112": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 216,
          column: 63
        }
      },
      "113": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 217,
          column: 63
        }
      },
      "114": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 218,
          column: 16
        }
      },
      "115": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 70
        }
      },
      "116": {
        start: {
          line: 222,
          column: 18
        },
        end: {
          line: 227,
          column: 5
        }
      },
      "117": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 22
        }
      },
      "118": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "119": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "120": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 231,
          column: 40
        }
      },
      "121": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 44
        }
      },
      "122": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 94
        }
      },
      "123": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 66
        }
      },
      "124": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 51
        }
      },
      "125": {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 241,
          column: 39
        }
      },
      "126": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 242,
          column: 43
        }
      },
      "127": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 243,
          column: 32
        }
      },
      "128": {
        start: {
          line: 244,
          column: 19
        },
        end: {
          line: 244,
          column: 56
        }
      },
      "129": {
        start: {
          line: 244,
          column: 39
        },
        end: {
          line: 244,
          column: 48
        }
      },
      "130": {
        start: {
          line: 245,
          column: 18
        },
        end: {
          line: 245,
          column: 32
        }
      },
      "131": {
        start: {
          line: 246,
          column: 4
        },
        end: {
          line: 248,
          column: 7
        }
      },
      "132": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 68
        }
      },
      "133": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 249,
          column: 105
        }
      },
      "134": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "135": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 92
        }
      },
      "136": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 80
        }
      },
      "137": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 256,
          column: 43
        }
      },
      "138": {
        start: {
          line: 259,
          column: 0
        },
        end: {
          line: 264,
          column: 1
        }
      },
      "139": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 263,
          column: 7
        }
      },
      "140": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 60
        }
      },
      "141": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 26
          }
        },
        loc: {
          start: {
            line: 14,
            column: 50
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 42
          },
          end: {
            line: 16,
            column: 43
          }
        },
        loc: {
          start: {
            line: 16,
            column: 60
          },
          end: {
            line: 18,
            column: 9
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 15
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 23,
            column: 27
          }
        },
        loc: {
          start: {
            line: 23,
            column: 37
          },
          end: {
            line: 23,
            column: 84
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 25
          }
        },
        loc: {
          start: {
            line: 37,
            column: 48
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 38,
            column: 31
          }
        },
        loc: {
          start: {
            line: 38,
            column: 44
          },
          end: {
            line: 41,
            column: 9
          }
        },
        line: 38
      },
      "6": {
        name: "testSemaphore",
        decl: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 28
          }
        },
        loc: {
          start: {
            line: 46,
            column: 31
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 46
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 50,
            column: 22
          }
        },
        loc: {
          start: {
            line: 50,
            column: 35
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 50
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 54,
            column: 30
          },
          end: {
            line: 54,
            column: 31
          }
        },
        loc: {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 54,
            column: 65
          }
        },
        line: 54
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 64,
            column: 45
          },
          end: {
            line: 64,
            column: 46
          }
        },
        loc: {
          start: {
            line: 64,
            column: 55
          },
          end: {
            line: 64,
            column: 70
          }
        },
        line: 64
      },
      "10": {
        name: "testResourceManager",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 34
          }
        },
        loc: {
          start: {
            line: 70,
            column: 37
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 70
      },
      "11": {
        name: "testTestQueueManager",
        decl: {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 111,
            column: 35
          }
        },
        loc: {
          start: {
            line: 111,
            column: 38
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 111
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 153,
            column: 45
          },
          end: {
            line: 153,
            column: 46
          }
        },
        loc: {
          start: {
            line: 153,
            column: 51
          },
          end: {
            line: 167,
            column: 9
          }
        },
        line: 153
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 169,
            column: 27
          }
        },
        loc: {
          start: {
            line: 169,
            column: 37
          },
          end: {
            line: 169,
            column: 63
          }
        },
        line: 169
      },
      "14": {
        name: "testParallelPerformance",
        decl: {
          start: {
            line: 189,
            column: 15
          },
          end: {
            line: 189,
            column: 38
          }
        },
        loc: {
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 189
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 191,
            column: 28
          },
          end: {
            line: 191,
            column: 29
          }
        },
        loc: {
          start: {
            line: 191,
            column: 51
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 191
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 194,
            column: 49
          },
          end: {
            line: 194,
            column: 50
          }
        },
        loc: {
          start: {
            line: 194,
            column: 65
          },
          end: {
            line: 203,
            column: 9
          }
        },
        line: 194
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 197,
            column: 34
          },
          end: {
            line: 197,
            column: 35
          }
        },
        loc: {
          start: {
            line: 197,
            column: 45
          },
          end: {
            line: 197,
            column: 69
          }
        },
        line: 197
      },
      "18": {
        name: "runAllTests",
        decl: {
          start: {
            line: 220,
            column: 15
          },
          end: {
            line: 220,
            column: 26
          }
        },
        loc: {
          start: {
            line: 220,
            column: 29
          },
          end: {
            line: 257,
            column: 1
          }
        },
        line: 220
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 244,
            column: 34
          },
          end: {
            line: 244,
            column: 35
          }
        },
        loc: {
          start: {
            line: 244,
            column: 39
          },
          end: {
            line: 244,
            column: 48
          }
        },
        line: 244
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 246,
            column: 20
          },
          end: {
            line: 246,
            column: 21
          }
        },
        loc: {
          start: {
            line: 246,
            column: 30
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 246
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 260,
            column: 24
          },
          end: {
            line: 260,
            column: 25
          }
        },
        loc: {
          start: {
            line: 260,
            column: 33
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 260
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 25,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 25,
            column: 24
          }
        }, {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 25,
            column: 40
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 84,
            column: 50
          },
          end: {
            line: 84,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 64
          },
          end: {
            line: 84,
            column: 70
          }
        }, {
          start: {
            line: 84,
            column: 73
          },
          end: {
            line: 84,
            column: 79
          }
        }],
        line: 84
      },
      "2": {
        loc: {
          start: {
            line: 105,
            column: 40
          },
          end: {
            line: 105,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 53
          },
          end: {
            line: 105,
            column: 58
          }
        }, {
          start: {
            line: 105,
            column: 61
          },
          end: {
            line: 105,
            column: 65
          }
        }],
        line: 105
      },
      "3": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "4": {
        loc: {
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "5": {
        loc: {
          start: {
            line: 157,
            column: 20
          },
          end: {
            line: 157,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 20
          },
          end: {
            line: 157,
            column: 43
          }
        }, {
          start: {
            line: 157,
            column: 47
          },
          end: {
            line: 157,
            column: 70
          }
        }],
        line: 157
      },
      "6": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "7": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "8": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 43
          }
        }, {
          start: {
            line: 181,
            column: 47
          },
          end: {
            line: 181,
            column: 85
          }
        }],
        line: 181
      },
      "9": {
        loc: {
          start: {
            line: 233,
            column: 29
          },
          end: {
            line: 233,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 39
          },
          end: {
            line: 233,
            column: 42
          }
        }, {
          start: {
            line: 233,
            column: 45
          },
          end: {
            line: 233,
            column: 48
          }
        }],
        line: 233
      },
      "10": {
        loc: {
          start: {
            line: 233,
            column: 61
          },
          end: {
            line: 233,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 71
          },
          end: {
            line: 233,
            column: 79
          }
        }, {
          start: {
            line: 233,
            column: 82
          },
          end: {
            line: 233,
            column: 90
          }
        }],
        line: 233
      },
      "11": {
        loc: {
          start: {
            line: 247,
            column: 23
          },
          end: {
            line: 247,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 40
          },
          end: {
            line: 247,
            column: 43
          }
        }, {
          start: {
            line: 247,
            column: 46
          },
          end: {
            line: 247,
            column: 49
          }
        }],
        line: 247
      },
      "12": {
        loc: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        }, {
          start: {
            line: 253,
            column: 9
          },
          end: {
            line: 255,
            column: 5
          }
        }],
        line: 250
      },
      "13": {
        loc: {
          start: {
            line: 256,
            column: 17
          },
          end: {
            line: 256,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 256,
            column: 36
          },
          end: {
            line: 256,
            column: 37
          }
        }, {
          start: {
            line: 256,
            column: 40
          },
          end: {
            line: 256,
            column: 41
          }
        }],
        line: 256
      },
      "14": {
        loc: {
          start: {
            line: 259,
            column: 0
          },
          end: {
            line: 264,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 0
          },
          end: {
            line: 264,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/testing/test-parallel-execution.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/testing/test-parallel-execution.ts"],
      sourcesContent: ["#!/usr/bin/env tsx\n/**\n * Comprehensive test suite for parallel test execution system\n * Run with: npx tsx src/services/testing/test-parallel-execution.ts\n */\n\nimport { TestQueueManager } from './TestQueueManager';\nimport { ResourceManager } from './ResourceManager';\nimport { Semaphore } from './Semaphore';\nimport { initializeDatabase } from '../../database/connection';\n\n// Mock LLM service for testing\nconst mockLLMService = {\n  substituteVariables: (template: string, variables: Record<string, any>) => {\n    let result = template;\n    Object.entries(variables).forEach(([key, value]) => {\n      result = result.replace(`{{${key}}}`, String(value));\n    });\n    return result;\n  },\n  \n  generate: async (prompt: string, model?: string) => {\n    // Simulate LLM response time\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));\n    \n    return {\n      model: model || 'test-model',\n      created_at: new Date().toISOString(),\n      response: `Mock response for: ${prompt.substring(0, 50)}...`,\n      done: true,\n      total_duration: Math.floor(Math.random() * 2000 + 1000),\n      load_duration: Math.floor(Math.random() * 500 + 100),\n      prompt_eval_count: Math.floor(Math.random() * 50 + 10),\n      prompt_eval_duration: Math.floor(Math.random() * 1000 + 200),\n      eval_count: Math.floor(Math.random() * 100 + 20),\n      eval_duration: Math.floor(Math.random() * 1500 + 300)\n    };\n  },\n  \n  validateAssertions: (output: string, assertions: any[]) => {\n    return assertions.map(assertion => ({\n      assertion,\n      passed: Math.random() > 0.2 // 80% success rate\n    }));\n  }\n};\n\n// Replace the actual LLM service import\n(global as any).mockLLMService = mockLLMService;\n\nasync function testSemaphore() {\n  console.log('\\n=== Testing Semaphore ===');\n  \n  const semaphore = new Semaphore(3);\n  const results: string[] = [];\n  \n  const testTask = async (id: number) => {\n    const release = await semaphore.acquire();\n    console.log(`Task ${id} acquired semaphore`);\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      results.push(`Task ${id} completed`);\n      console.log(`Task ${id} completed`);\n    } finally {\n      release();\n      console.log(`Task ${id} released semaphore`);\n    }\n  };\n  \n  // Start 10 tasks (more than semaphore limit)\n  const tasks = Array.from({ length: 10 }, (_, i) => testTask(i + 1));\n  await Promise.all(tasks);\n  \n  console.log(`\u2705 Semaphore test completed: ${results.length} tasks finished`);\n  console.log(`Available permits: ${semaphore.getAvailableCount()}`);\n  \n  return results.length === 10;\n}\n\nasync function testResourceManager() {\n  console.log('\\n=== Testing ResourceManager ===');\n  \n  const resourceManager = new ResourceManager({\n    max_cpu_percent: 50,\n    max_memory_mb: 1024,\n    max_concurrent_tests: 5\n  });\n  \n  // Test resource availability check\n  const canAllocate = await resourceManager.checkResourceAvailability({\n    cpu_percent: 20,\n    memory_mb: 256,\n    concurrent_tests: 2,\n    priority: 'medium'\n  });\n  \n  console.log(`\u2705 Resource availability check: ${canAllocate ? 'PASS' : 'FAIL'}`);\n  \n  // Test resource reservation\n  try {\n    await resourceManager.reserveResources('test-task-1', {\n      cpu_percent: 15,\n      memory_mb: 128,\n      concurrent_tests: 1,\n      priority: 'medium'\n    });\n    console.log('\u2705 Resource reservation: PASS');\n  } catch (error) {\n    console.log('\u274C Resource reservation: FAIL -', error.message);\n  }\n  \n  // Test resource release\n  await resourceManager.releaseResources('test-task-1');\n  console.log('\u2705 Resource release: PASS');\n  \n  // Test system status\n  const usage = resourceManager.getCurrentUsage();\n  console.log(`Current usage: CPU ${usage.cpu_percent}%, Memory ${usage.memory_mb}MB`);\n  \n  const isStressed = resourceManager.isSystemUnderStress();\n  console.log(`System under stress: ${isStressed ? 'YES' : 'NO'}`);\n  \n  const optimalConcurrency = resourceManager.getOptimalConcurrency();\n  console.log(`Optimal concurrency: ${optimalConcurrency}`);\n  \n  resourceManager.destroy();\n  \n  return true;\n}\n\nasync function testTestQueueManager() {\n  console.log('\\n=== Testing TestQueueManager ===');\n  \n  // Initialize test database\n  const db = await initializeDatabase();\n  \n  // Create test data\n  const promptCardId = Date.now();\n  const testCaseIds = [1, 2, 3, 4, 5];\n  \n  // Insert test prompt card\n  const insertPromptCard = (await db).prepare(`\n    INSERT INTO prompt_cards (id, title, description, prompt_template, created_at)\n    VALUES (?, ?, ?, ?, ?)\n  `);\n  insertPromptCard.run(\n    promptCardId,\n    'Test Prompt Card',\n    'Test description',\n    'Test prompt: {{input}}',\n    new Date().toISOString()\n  );\n  \n  // Insert test cases\n  const insertTestCase = (await db).prepare(`\n    INSERT INTO test_cases (id, prompt_card_id, name, input_variables, assertions, created_at)\n    VALUES (?, ?, ?, ?, ?, ?)\n  `);\n  for (const testCaseId of testCaseIds) {\n    insertTestCase.run(\n      testCaseId,\n      promptCardId,\n      `Test Case ${testCaseId}`,\n      JSON.stringify({ input: `test input ${testCaseId}` }),\n      JSON.stringify([\n        { type: 'contains', value: 'test', description: 'Should contain \"test\"' },\n        { type: 'length', value: '>10', description: 'Should be longer than 10 chars' }\n      ]),\n      new Date().toISOString()\n    );\n  }\n  \n  // Initialize queue manager with mock Redis config\n  const queueManager = new TestQueueManager({\n    host: 'localhost',\n    port: 6379,\n    // Use fake Redis for testing\n    lazyConnect: true,\n    maxRetriesPerRequest: 1\n  });\n  \n  // Test queuing execution\n  try {\n    const executionId = await queueManager.queueTestExecution(\n      promptCardId,\n      testCaseIds,\n      'test-model',\n      {\n        max_concurrent_tests: 3,\n        timeout_per_test: 5000,\n        stop_on_first_failure: false\n      }\n    );\n    \n    console.log(`\u2705 Test execution queued: ${executionId}`);\n    \n    // Monitor progress\n    let progressChecks = 0;\n    const progressInterval = setInterval(() => {\n      const progress = queueManager.getExecutionProgress(executionId);\n      if (progress) {\n        console.log(`Progress: ${progress.percent}% - ${progress.message}`);\n        \n        if (progress.percent >= 100 || progress.percent === -1) {\n          clearInterval(progressInterval);\n          console.log('\u2705 Test execution completed');\n        }\n      }\n      \n      progressChecks++;\n      if (progressChecks > 30) { // Timeout after 30 checks\n        clearInterval(progressInterval);\n        console.log('\u23F1\uFE0F  Test execution timeout');\n      }\n    }, 1000);\n    \n    // Wait for completion\n    await new Promise(resolve => setTimeout(resolve, 10000));\n    \n    // Get queue stats\n    const stats = await queueManager.getQueueStats();\n    console.log('Queue stats:', stats);\n    \n    // Get active executions\n    const activeExecutions = queueManager.getActiveExecutions();\n    console.log(`Active executions: ${activeExecutions.length}`);\n    \n    await queueManager.shutdown();\n    \n  } catch (error) {\n    console.log('\u274C TestQueueManager test failed:', error.message);\n    \n    // If Redis is not available, this is expected\n    if (error.message.includes('Redis') || error.message.includes('ECONNREFUSED')) {\n      console.log('\u2139\uFE0F  Redis not available - this is expected in test environment');\n      return true;\n    }\n    \n    return false;\n  }\n  \n  return true;\n}\n\nasync function testParallelPerformance() {\n  console.log('\\n=== Testing Parallel Performance ===');\n  \n  const testConcurrency = async (concurrency: number) => {\n    const semaphore = new Semaphore(concurrency);\n    const startTime = Date.now();\n    \n    const tasks = Array.from({ length: 20 }, async (_, i) => {\n      const release = await semaphore.acquire();\n      try {\n        await new Promise(resolve => setTimeout(resolve, 100));\n        return `Task ${i + 1}`;\n      } finally {\n        release();\n      }\n    });\n    \n    const results = await Promise.all(tasks);\n    const duration = Date.now() - startTime;\n    \n    console.log(`Concurrency ${concurrency}: ${results.length} tasks in ${duration}ms`);\n    return duration;\n  };\n  \n  // Test different concurrency levels\n  const sequential = await testConcurrency(1);\n  const parallel3 = await testConcurrency(3);\n  const parallel5 = await testConcurrency(5);\n  \n  const improvement3 = ((sequential - parallel3) / sequential * 100).toFixed(1);\n  const improvement5 = ((sequential - parallel5) / sequential * 100).toFixed(1);\n  \n  console.log(`\u2705 Performance improvements:`);\n  console.log(`  - 3x concurrency: ${improvement3}% faster`);\n  console.log(`  - 5x concurrency: ${improvement5}% faster`);\n  \n  return true;\n}\n\nasync function runAllTests() {\n  console.log('\uD83D\uDE80 Starting Parallel Test Execution System Tests\\n');\n  \n  const tests = [\n    { name: 'Semaphore', test: testSemaphore },\n    { name: 'ResourceManager', test: testResourceManager },\n    { name: 'TestQueueManager', test: testTestQueueManager },\n    { name: 'Parallel Performance', test: testParallelPerformance }\n  ];\n  \n  const results = [];\n  \n  for (const { name, test } of tests) {\n    try {\n      const success = await test();\n      results.push({ name, success });\n      console.log(`\\n${success ? '\u2705' : '\u274C'} ${name}: ${success ? 'PASSED' : 'FAILED'}`);\n    } catch (error) {\n      console.log(`\\n\u274C ${name}: FAILED - ${error.message}`);\n      results.push({ name, success: false });\n    }\n  }\n  \n  // Summary\n  console.log('\\n' + '='.repeat(50));\n  console.log('\uD83D\uDCCA TEST RESULTS SUMMARY');\n  console.log('='.repeat(50));\n  \n  const passed = results.filter(r => r.success).length;\n  const total = results.length;\n  \n  results.forEach(result => {\n    console.log(`${result.success ? '\u2705' : '\u274C'} ${result.name}`);\n  });\n  \n  console.log(`\\n\uD83C\uDFAF Overall: ${passed}/${total} tests passed (${(passed/total*100).toFixed(1)}%)`);\n  \n  if (passed === total) {\n    console.log('\uD83C\uDF89 All tests passed! Parallel execution system is working correctly.');\n  } else {\n    console.log('\u26A0\uFE0F  Some tests failed. Please review the implementation.');\n  }\n  \n  process.exit(passed === total ? 0 : 1);\n}\n\n// Run tests if this file is executed directly\nif (require.main === module) {\n  runAllTests().catch(error => {\n    console.error('Fatal error during testing:', error);\n    process.exit(1);\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "802bbbc4d5bad8d401256a646e4a5ce40f805ba8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25houkxn7j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25houkxn7j();
cov_25houkxn7j().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const TestQueueManager_1 =
/* istanbul ignore next */
(cov_25houkxn7j().s[1]++, require("./TestQueueManager"));
const ResourceManager_1 =
/* istanbul ignore next */
(cov_25houkxn7j().s[2]++, require("./ResourceManager"));
const Semaphore_1 =
/* istanbul ignore next */
(cov_25houkxn7j().s[3]++, require("./Semaphore"));
const connection_1 =
/* istanbul ignore next */
(cov_25houkxn7j().s[4]++, require("../../database/connection"));
// Mock LLM service for testing
const mockLLMService =
/* istanbul ignore next */
(cov_25houkxn7j().s[5]++, {
  substituteVariables: (template, variables) => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[0]++;
    let result =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[6]++, template);
    /* istanbul ignore next */
    cov_25houkxn7j().s[7]++;
    Object.entries(variables).forEach(([key, value]) => {
      /* istanbul ignore next */
      cov_25houkxn7j().f[1]++;
      cov_25houkxn7j().s[8]++;
      result = result.replace(`{{${key}}}`, String(value));
    });
    /* istanbul ignore next */
    cov_25houkxn7j().s[9]++;
    return result;
  },
  generate: async (prompt, model) => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[2]++;
    cov_25houkxn7j().s[10]++;
    // Simulate LLM response time
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_25houkxn7j().f[3]++;
      cov_25houkxn7j().s[11]++;
      return setTimeout(resolve, Math.random() * 1000 + 500);
    });
    /* istanbul ignore next */
    cov_25houkxn7j().s[12]++;
    return {
      model:
      /* istanbul ignore next */
      (cov_25houkxn7j().b[0][0]++, model) ||
      /* istanbul ignore next */
      (cov_25houkxn7j().b[0][1]++, 'test-model'),
      created_at: new Date().toISOString(),
      response: `Mock response for: ${prompt.substring(0, 50)}...`,
      done: true,
      total_duration: Math.floor(Math.random() * 2000 + 1000),
      load_duration: Math.floor(Math.random() * 500 + 100),
      prompt_eval_count: Math.floor(Math.random() * 50 + 10),
      prompt_eval_duration: Math.floor(Math.random() * 1000 + 200),
      eval_count: Math.floor(Math.random() * 100 + 20),
      eval_duration: Math.floor(Math.random() * 1500 + 300)
    };
  },
  validateAssertions: (output, assertions) => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[4]++;
    cov_25houkxn7j().s[13]++;
    return assertions.map(assertion => {
      /* istanbul ignore next */
      cov_25houkxn7j().f[5]++;
      cov_25houkxn7j().s[14]++;
      return {
        assertion,
        passed: Math.random() > 0.2 // 80% success rate
      };
    });
  }
});
// Replace the actual LLM service import
/* istanbul ignore next */
cov_25houkxn7j().s[15]++;
global.mockLLMService = mockLLMService;
async function testSemaphore() {
  /* istanbul ignore next */
  cov_25houkxn7j().f[6]++;
  cov_25houkxn7j().s[16]++;
  console.log('\n=== Testing Semaphore ===');
  const semaphore =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[17]++, new Semaphore_1.Semaphore(3));
  const results =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[18]++, []);
  /* istanbul ignore next */
  cov_25houkxn7j().s[19]++;
  const testTask = async id => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[7]++;
    const release =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[20]++, await semaphore.acquire());
    /* istanbul ignore next */
    cov_25houkxn7j().s[21]++;
    console.log(`Task ${id} acquired semaphore`);
    /* istanbul ignore next */
    cov_25houkxn7j().s[22]++;
    try {
      /* istanbul ignore next */
      cov_25houkxn7j().s[23]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_25houkxn7j().f[8]++;
        cov_25houkxn7j().s[24]++;
        return setTimeout(resolve, 100);
      });
      /* istanbul ignore next */
      cov_25houkxn7j().s[25]++;
      results.push(`Task ${id} completed`);
      /* istanbul ignore next */
      cov_25houkxn7j().s[26]++;
      console.log(`Task ${id} completed`);
    } finally {
      /* istanbul ignore next */
      cov_25houkxn7j().s[27]++;
      release();
      /* istanbul ignore next */
      cov_25houkxn7j().s[28]++;
      console.log(`Task ${id} released semaphore`);
    }
  };
  // Start 10 tasks (more than semaphore limit)
  const tasks =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[29]++, Array.from({
    length: 10
  }, (_, i) => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[9]++;
    cov_25houkxn7j().s[30]++;
    return testTask(i + 1);
  }));
  /* istanbul ignore next */
  cov_25houkxn7j().s[31]++;
  await Promise.all(tasks);
  /* istanbul ignore next */
  cov_25houkxn7j().s[32]++;
  console.log(`✅ Semaphore test completed: ${results.length} tasks finished`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[33]++;
  console.log(`Available permits: ${semaphore.getAvailableCount()}`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[34]++;
  return results.length === 10;
}
async function testResourceManager() {
  /* istanbul ignore next */
  cov_25houkxn7j().f[10]++;
  cov_25houkxn7j().s[35]++;
  console.log('\n=== Testing ResourceManager ===');
  const resourceManager =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[36]++, new ResourceManager_1.ResourceManager({
    max_cpu_percent: 50,
    max_memory_mb: 1024,
    max_concurrent_tests: 5
  }));
  // Test resource availability check
  const canAllocate =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[37]++, await resourceManager.checkResourceAvailability({
    cpu_percent: 20,
    memory_mb: 256,
    concurrent_tests: 2,
    priority: 'medium'
  }));
  /* istanbul ignore next */
  cov_25houkxn7j().s[38]++;
  console.log(`✅ Resource availability check: ${canAllocate ?
  /* istanbul ignore next */
  (cov_25houkxn7j().b[1][0]++, 'PASS') :
  /* istanbul ignore next */
  (cov_25houkxn7j().b[1][1]++, 'FAIL')}`);
  // Test resource reservation
  /* istanbul ignore next */
  cov_25houkxn7j().s[39]++;
  try {
    /* istanbul ignore next */
    cov_25houkxn7j().s[40]++;
    await resourceManager.reserveResources('test-task-1', {
      cpu_percent: 15,
      memory_mb: 128,
      concurrent_tests: 1,
      priority: 'medium'
    });
    /* istanbul ignore next */
    cov_25houkxn7j().s[41]++;
    console.log('✅ Resource reservation: PASS');
  } catch (error) {
    /* istanbul ignore next */
    cov_25houkxn7j().s[42]++;
    console.log('❌ Resource reservation: FAIL -', error.message);
  }
  // Test resource release
  /* istanbul ignore next */
  cov_25houkxn7j().s[43]++;
  await resourceManager.releaseResources('test-task-1');
  /* istanbul ignore next */
  cov_25houkxn7j().s[44]++;
  console.log('✅ Resource release: PASS');
  // Test system status
  const usage =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[45]++, resourceManager.getCurrentUsage());
  /* istanbul ignore next */
  cov_25houkxn7j().s[46]++;
  console.log(`Current usage: CPU ${usage.cpu_percent}%, Memory ${usage.memory_mb}MB`);
  const isStressed =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[47]++, resourceManager.isSystemUnderStress());
  /* istanbul ignore next */
  cov_25houkxn7j().s[48]++;
  console.log(`System under stress: ${isStressed ?
  /* istanbul ignore next */
  (cov_25houkxn7j().b[2][0]++, 'YES') :
  /* istanbul ignore next */
  (cov_25houkxn7j().b[2][1]++, 'NO')}`);
  const optimalConcurrency =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[49]++, resourceManager.getOptimalConcurrency());
  /* istanbul ignore next */
  cov_25houkxn7j().s[50]++;
  console.log(`Optimal concurrency: ${optimalConcurrency}`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[51]++;
  resourceManager.destroy();
  /* istanbul ignore next */
  cov_25houkxn7j().s[52]++;
  return true;
}
async function testTestQueueManager() {
  /* istanbul ignore next */
  cov_25houkxn7j().f[11]++;
  cov_25houkxn7j().s[53]++;
  console.log('\n=== Testing TestQueueManager ===');
  // Initialize test database
  const db =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[54]++, await (0, connection_1.initializeDatabase)());
  // Create test data
  const promptCardId =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[55]++, Date.now());
  const testCaseIds =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[56]++, [1, 2, 3, 4, 5]);
  // Insert test prompt card
  const insertPromptCard =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[57]++, (await db).prepare(`
    INSERT INTO prompt_cards (id, title, description, prompt_template, created_at)
    VALUES (?, ?, ?, ?, ?)
  `));
  /* istanbul ignore next */
  cov_25houkxn7j().s[58]++;
  insertPromptCard.run(promptCardId, 'Test Prompt Card', 'Test description', 'Test prompt: {{input}}', new Date().toISOString());
  // Insert test cases
  const insertTestCase =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[59]++, (await db).prepare(`
    INSERT INTO test_cases (id, prompt_card_id, name, input_variables, assertions, created_at)
    VALUES (?, ?, ?, ?, ?, ?)
  `));
  /* istanbul ignore next */
  cov_25houkxn7j().s[60]++;
  for (const testCaseId of testCaseIds) {
    /* istanbul ignore next */
    cov_25houkxn7j().s[61]++;
    insertTestCase.run(testCaseId, promptCardId, `Test Case ${testCaseId}`, JSON.stringify({
      input: `test input ${testCaseId}`
    }), JSON.stringify([{
      type: 'contains',
      value: 'test',
      description: 'Should contain "test"'
    }, {
      type: 'length',
      value: '>10',
      description: 'Should be longer than 10 chars'
    }]), new Date().toISOString());
  }
  // Initialize queue manager with mock Redis config
  const queueManager =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[62]++, new TestQueueManager_1.TestQueueManager({
    host: 'localhost',
    port: 6379,
    // Use fake Redis for testing
    lazyConnect: true,
    maxRetriesPerRequest: 1
  }));
  // Test queuing execution
  /* istanbul ignore next */
  cov_25houkxn7j().s[63]++;
  try {
    const executionId =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[64]++, await queueManager.queueTestExecution(promptCardId, testCaseIds, 'test-model', {
      max_concurrent_tests: 3,
      timeout_per_test: 5000,
      stop_on_first_failure: false
    }));
    /* istanbul ignore next */
    cov_25houkxn7j().s[65]++;
    console.log(`✅ Test execution queued: ${executionId}`);
    // Monitor progress
    let progressChecks =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[66]++, 0);
    const progressInterval =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[67]++, setInterval(() => {
      /* istanbul ignore next */
      cov_25houkxn7j().f[12]++;
      const progress =
      /* istanbul ignore next */
      (cov_25houkxn7j().s[68]++, queueManager.getExecutionProgress(executionId));
      /* istanbul ignore next */
      cov_25houkxn7j().s[69]++;
      if (progress) {
        /* istanbul ignore next */
        cov_25houkxn7j().b[3][0]++;
        cov_25houkxn7j().s[70]++;
        console.log(`Progress: ${progress.percent}% - ${progress.message}`);
        /* istanbul ignore next */
        cov_25houkxn7j().s[71]++;
        if (
        /* istanbul ignore next */
        (cov_25houkxn7j().b[5][0]++, progress.percent >= 100) ||
        /* istanbul ignore next */
        (cov_25houkxn7j().b[5][1]++, progress.percent === -1)) {
          /* istanbul ignore next */
          cov_25houkxn7j().b[4][0]++;
          cov_25houkxn7j().s[72]++;
          clearInterval(progressInterval);
          /* istanbul ignore next */
          cov_25houkxn7j().s[73]++;
          console.log('✅ Test execution completed');
        } else
        /* istanbul ignore next */
        {
          cov_25houkxn7j().b[4][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_25houkxn7j().b[3][1]++;
      }
      cov_25houkxn7j().s[74]++;
      progressChecks++;
      /* istanbul ignore next */
      cov_25houkxn7j().s[75]++;
      if (progressChecks > 30) {
        /* istanbul ignore next */
        cov_25houkxn7j().b[6][0]++;
        cov_25houkxn7j().s[76]++;
        // Timeout after 30 checks
        clearInterval(progressInterval);
        /* istanbul ignore next */
        cov_25houkxn7j().s[77]++;
        console.log('⏱️  Test execution timeout');
      } else
      /* istanbul ignore next */
      {
        cov_25houkxn7j().b[6][1]++;
      }
    }, 1000));
    // Wait for completion
    /* istanbul ignore next */
    cov_25houkxn7j().s[78]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_25houkxn7j().f[13]++;
      cov_25houkxn7j().s[79]++;
      return setTimeout(resolve, 10000);
    });
    // Get queue stats
    const stats =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[80]++, await queueManager.getQueueStats());
    /* istanbul ignore next */
    cov_25houkxn7j().s[81]++;
    console.log('Queue stats:', stats);
    // Get active executions
    const activeExecutions =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[82]++, queueManager.getActiveExecutions());
    /* istanbul ignore next */
    cov_25houkxn7j().s[83]++;
    console.log(`Active executions: ${activeExecutions.length}`);
    /* istanbul ignore next */
    cov_25houkxn7j().s[84]++;
    await queueManager.shutdown();
  } catch (error) {
    /* istanbul ignore next */
    cov_25houkxn7j().s[85]++;
    console.log('❌ TestQueueManager test failed:', error.message);
    // If Redis is not available, this is expected
    /* istanbul ignore next */
    cov_25houkxn7j().s[86]++;
    if (
    /* istanbul ignore next */
    (cov_25houkxn7j().b[8][0]++, error.message.includes('Redis')) ||
    /* istanbul ignore next */
    (cov_25houkxn7j().b[8][1]++, error.message.includes('ECONNREFUSED'))) {
      /* istanbul ignore next */
      cov_25houkxn7j().b[7][0]++;
      cov_25houkxn7j().s[87]++;
      console.log('ℹ️  Redis not available - this is expected in test environment');
      /* istanbul ignore next */
      cov_25houkxn7j().s[88]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_25houkxn7j().b[7][1]++;
    }
    cov_25houkxn7j().s[89]++;
    return false;
  }
  /* istanbul ignore next */
  cov_25houkxn7j().s[90]++;
  return true;
}
async function testParallelPerformance() {
  /* istanbul ignore next */
  cov_25houkxn7j().f[14]++;
  cov_25houkxn7j().s[91]++;
  console.log('\n=== Testing Parallel Performance ===');
  /* istanbul ignore next */
  cov_25houkxn7j().s[92]++;
  const testConcurrency = async concurrency => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[15]++;
    const semaphore =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[93]++, new Semaphore_1.Semaphore(concurrency));
    const startTime =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[94]++, Date.now());
    const tasks =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[95]++, Array.from({
      length: 20
    }, async (_, i) => {
      /* istanbul ignore next */
      cov_25houkxn7j().f[16]++;
      const release =
      /* istanbul ignore next */
      (cov_25houkxn7j().s[96]++, await semaphore.acquire());
      /* istanbul ignore next */
      cov_25houkxn7j().s[97]++;
      try {
        /* istanbul ignore next */
        cov_25houkxn7j().s[98]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_25houkxn7j().f[17]++;
          cov_25houkxn7j().s[99]++;
          return setTimeout(resolve, 100);
        });
        /* istanbul ignore next */
        cov_25houkxn7j().s[100]++;
        return `Task ${i + 1}`;
      } finally {
        /* istanbul ignore next */
        cov_25houkxn7j().s[101]++;
        release();
      }
    }));
    const results =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[102]++, await Promise.all(tasks));
    const duration =
    /* istanbul ignore next */
    (cov_25houkxn7j().s[103]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_25houkxn7j().s[104]++;
    console.log(`Concurrency ${concurrency}: ${results.length} tasks in ${duration}ms`);
    /* istanbul ignore next */
    cov_25houkxn7j().s[105]++;
    return duration;
  };
  // Test different concurrency levels
  const sequential =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[106]++, await testConcurrency(1));
  const parallel3 =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[107]++, await testConcurrency(3));
  const parallel5 =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[108]++, await testConcurrency(5));
  const improvement3 =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[109]++, ((sequential - parallel3) / sequential * 100).toFixed(1));
  const improvement5 =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[110]++, ((sequential - parallel5) / sequential * 100).toFixed(1));
  /* istanbul ignore next */
  cov_25houkxn7j().s[111]++;
  console.log(`✅ Performance improvements:`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[112]++;
  console.log(`  - 3x concurrency: ${improvement3}% faster`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[113]++;
  console.log(`  - 5x concurrency: ${improvement5}% faster`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[114]++;
  return true;
}
async function runAllTests() {
  /* istanbul ignore next */
  cov_25houkxn7j().f[18]++;
  cov_25houkxn7j().s[115]++;
  console.log('🚀 Starting Parallel Test Execution System Tests\n');
  const tests =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[116]++, [{
    name: 'Semaphore',
    test: testSemaphore
  }, {
    name: 'ResourceManager',
    test: testResourceManager
  }, {
    name: 'TestQueueManager',
    test: testTestQueueManager
  }, {
    name: 'Parallel Performance',
    test: testParallelPerformance
  }]);
  const results =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[117]++, []);
  /* istanbul ignore next */
  cov_25houkxn7j().s[118]++;
  for (const {
    name,
    test
  } of tests) {
    /* istanbul ignore next */
    cov_25houkxn7j().s[119]++;
    try {
      const success =
      /* istanbul ignore next */
      (cov_25houkxn7j().s[120]++, await test());
      /* istanbul ignore next */
      cov_25houkxn7j().s[121]++;
      results.push({
        name,
        success
      });
      /* istanbul ignore next */
      cov_25houkxn7j().s[122]++;
      console.log(`\n${success ?
      /* istanbul ignore next */
      (cov_25houkxn7j().b[9][0]++, '✅') :
      /* istanbul ignore next */
      (cov_25houkxn7j().b[9][1]++, '❌')} ${name}: ${success ?
      /* istanbul ignore next */
      (cov_25houkxn7j().b[10][0]++, 'PASSED') :
      /* istanbul ignore next */
      (cov_25houkxn7j().b[10][1]++, 'FAILED')}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_25houkxn7j().s[123]++;
      console.log(`\n❌ ${name}: FAILED - ${error.message}`);
      /* istanbul ignore next */
      cov_25houkxn7j().s[124]++;
      results.push({
        name,
        success: false
      });
    }
  }
  // Summary
  /* istanbul ignore next */
  cov_25houkxn7j().s[125]++;
  console.log('\n' + '='.repeat(50));
  /* istanbul ignore next */
  cov_25houkxn7j().s[126]++;
  console.log('📊 TEST RESULTS SUMMARY');
  /* istanbul ignore next */
  cov_25houkxn7j().s[127]++;
  console.log('='.repeat(50));
  const passed =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[128]++, results.filter(r => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[19]++;
    cov_25houkxn7j().s[129]++;
    return r.success;
  }).length);
  const total =
  /* istanbul ignore next */
  (cov_25houkxn7j().s[130]++, results.length);
  /* istanbul ignore next */
  cov_25houkxn7j().s[131]++;
  results.forEach(result => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[20]++;
    cov_25houkxn7j().s[132]++;
    console.log(`${result.success ?
    /* istanbul ignore next */
    (cov_25houkxn7j().b[11][0]++, '✅') :
    /* istanbul ignore next */
    (cov_25houkxn7j().b[11][1]++, '❌')} ${result.name}`);
  });
  /* istanbul ignore next */
  cov_25houkxn7j().s[133]++;
  console.log(`\n🎯 Overall: ${passed}/${total} tests passed (${(passed / total * 100).toFixed(1)}%)`);
  /* istanbul ignore next */
  cov_25houkxn7j().s[134]++;
  if (passed === total) {
    /* istanbul ignore next */
    cov_25houkxn7j().b[12][0]++;
    cov_25houkxn7j().s[135]++;
    console.log('🎉 All tests passed! Parallel execution system is working correctly.');
  } else {
    /* istanbul ignore next */
    cov_25houkxn7j().b[12][1]++;
    cov_25houkxn7j().s[136]++;
    console.log('⚠️  Some tests failed. Please review the implementation.');
  }
  /* istanbul ignore next */
  cov_25houkxn7j().s[137]++;
  process.exit(passed === total ?
  /* istanbul ignore next */
  (cov_25houkxn7j().b[13][0]++, 0) :
  /* istanbul ignore next */
  (cov_25houkxn7j().b[13][1]++, 1));
}
// Run tests if this file is executed directly
/* istanbul ignore next */
cov_25houkxn7j().s[138]++;
if (require.main === module) {
  /* istanbul ignore next */
  cov_25houkxn7j().b[14][0]++;
  cov_25houkxn7j().s[139]++;
  runAllTests().catch(error => {
    /* istanbul ignore next */
    cov_25houkxn7j().f[21]++;
    cov_25houkxn7j().s[140]++;
    console.error('Fatal error during testing:', error);
    /* istanbul ignore next */
    cov_25houkxn7j().s[141]++;
    process.exit(1);
  });
} else
/* istanbul ignore next */
{
  cov_25houkxn7j().b[14][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,