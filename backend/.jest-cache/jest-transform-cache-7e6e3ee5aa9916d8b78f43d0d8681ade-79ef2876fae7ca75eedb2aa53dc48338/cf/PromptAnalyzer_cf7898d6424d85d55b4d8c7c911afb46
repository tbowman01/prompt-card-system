78cf7a543e3be144405b62d9b576b77d
"use strict";

/* istanbul ignore next */
function cov_1sj0xwsvp6() {
  var path = "/workspaces/prompt-card-system/backend/src/services/optimization/PromptAnalyzer.ts";
  var hash = "ac4c9c521a26652b4c66ea1b1b33ac7dbf9e994f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/optimization/PromptAnalyzer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 57
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 55
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 65
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 45
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 79
        }
      },
      "7": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 94
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "9": {
        start: {
          line: 19,
          column: 36
        },
        end: {
          line: 23,
          column: 14
        }
      },
      "10": {
        start: {
          line: 24,
          column: 37
        },
        end: {
          line: 24,
          column: 135
        }
      },
      "11": {
        start: {
          line: 24,
          column: 69
        },
        end: {
          line: 24,
          column: 134
        }
      },
      "12": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 26,
          column: 73
        }
      },
      "13": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 94
        }
      },
      "14": {
        start: {
          line: 30,
          column: 34
        },
        end: {
          line: 30,
          column: 85
        }
      },
      "15": {
        start: {
          line: 32,
          column: 36
        },
        end: {
          line: 32,
          column: 116
        }
      },
      "16": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 34,
          column: 65
        }
      },
      "17": {
        start: {
          line: 36,
          column: 35
        },
        end: {
          line: 36,
          column: 79
        }
      },
      "18": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "19": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "20": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 26
        }
      },
      "21": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 60
        }
      },
      "22": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 115
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "24": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 68,
          column: 88
        }
      },
      "25": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 88
        }
      },
      "26": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 70,
          column: 64
        }
      },
      "27": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 64
        }
      },
      "28": {
        start: {
          line: 73,
          column: 27
        },
        end: {
          line: 73,
          column: 64
        }
      },
      "29": {
        start: {
          line: 74,
          column: 27
        },
        end: {
          line: 74,
          column: 64
        }
      },
      "30": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "31": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "32": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 59
        }
      },
      "33": {
        start: {
          line: 81,
          column: 17
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "34": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 29
        }
      },
      "35": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 74
        }
      },
      "36": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 29
        }
      },
      "37": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 74
        }
      },
      "38": {
        start: {
          line: 90,
          column: 35
        },
        end: {
          line: 100,
          column: 7
        }
      },
      "39": {
        start: {
          line: 101,
          column: 29
        },
        end: {
          line: 101,
          column: 90
        }
      },
      "40": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 113,
          column: 14
        }
      },
      "41": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 61
        }
      },
      "42": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 117
        }
      },
      "43": {
        start: {
          line: 124,
          column: 32
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "44": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 56
        }
      },
      "45": {
        start: {
          line: 128,
          column: 44
        },
        end: {
          line: 128,
          column: 54
        }
      },
      "46": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "47": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 140,
          column: 14
        }
      },
      "48": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 142,
          column: 54
        }
      },
      "49": {
        start: {
          line: 143,
          column: 37
        },
        end: {
          line: 143,
          column: 86
        }
      },
      "50": {
        start: {
          line: 143,
          column: 65
        },
        end: {
          line: 143,
          column: 78
        }
      },
      "51": {
        start: {
          line: 144,
          column: 36
        },
        end: {
          line: 144,
          column: 120
        }
      },
      "52": {
        start: {
          line: 144,
          column: 71
        },
        end: {
          line: 144,
          column: 98
        }
      },
      "53": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 146,
          column: 77
        }
      },
      "54": {
        start: {
          line: 146,
          column: 55
        },
        end: {
          line: 146,
          column: 76
        }
      },
      "55": {
        start: {
          line: 147,
          column: 25
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "56": {
        start: {
          line: 148,
          column: 33
        },
        end: {
          line: 148,
          column: 90
        }
      },
      "57": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 154,
          column: 10
        }
      },
      "58": {
        start: {
          line: 160,
          column: 33
        },
        end: {
          line: 160,
          column: 75
        }
      },
      "59": {
        start: {
          line: 160,
          column: 61
        },
        end: {
          line: 160,
          column: 74
        }
      },
      "60": {
        start: {
          line: 161,
          column: 29
        },
        end: {
          line: 161,
          column: 72
        }
      },
      "61": {
        start: {
          line: 161,
          column: 57
        },
        end: {
          line: 161,
          column: 71
        }
      },
      "62": {
        start: {
          line: 162,
          column: 31
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "63": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "64": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 178,
          column: 83
        }
      },
      "65": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 58
        }
      },
      "66": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 184,
          column: 14
        }
      },
      "67": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 62
        }
      },
      "68": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "69": {
        start: {
          line: 200,
          column: 29
        },
        end: {
          line: 200,
          column: 48
        }
      },
      "70": {
        start: {
          line: 201,
          column: 34
        },
        end: {
          line: 201,
          column: 94
        }
      },
      "71": {
        start: {
          line: 202,
          column: 33
        },
        end: {
          line: 202,
          column: 57
        }
      },
      "72": {
        start: {
          line: 203,
          column: 29
        },
        end: {
          line: 203,
          column: 84
        }
      },
      "73": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 207,
          column: 30
        }
      },
      "74": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "75": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 35
        }
      },
      "76": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 101
        }
      },
      "77": {
        start: {
          line: 214,
          column: 13
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "78": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 30
        }
      },
      "79": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 76
        }
      },
      "80": {
        start: {
          line: 218,
          column: 13
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "81": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 30
        }
      },
      "82": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 89
        }
      },
      "83": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 30
        }
      },
      "84": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 97
        }
      },
      "85": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 230,
          column: 10
        }
      },
      "86": {
        start: {
          line: 236,
          column: 37
        },
        end: {
          line: 252,
          column: 5
        }
      },
      "87": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "88": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 89
        }
      },
      "89": {
        start: {
          line: 255,
          column: 36
        },
        end: {
          line: 255,
          column: 65
        }
      },
      "90": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 16
        }
      },
      "91": {
        start: {
          line: 256,
          column: 49
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "92": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 70
        }
      },
      "93": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 272,
          column: 14
        }
      },
      "94": {
        start: {
          line: 279,
          column: 30
        },
        end: {
          line: 279,
          column: 69
        }
      },
      "95": {
        start: {
          line: 280,
          column: 36
        },
        end: {
          line: 284,
          column: 11
        }
      },
      "96": {
        start: {
          line: 280,
          column: 64
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "97": {
        start: {
          line: 283,
          column: 48
        },
        end: {
          line: 283,
          column: 79
        }
      },
      "98": {
        start: {
          line: 285,
          column: 36
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "99": {
        start: {
          line: 285,
          column: 64
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "100": {
        start: {
          line: 288,
          column: 41
        },
        end: {
          line: 288,
          column: 54
        }
      },
      "101": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 293,
          column: 10
        }
      },
      "102": {
        start: {
          line: 299,
          column: 31
        },
        end: {
          line: 299,
          column: 33
        }
      },
      "103": {
        start: {
          line: 301,
          column: 34
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "104": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "105": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 319,
          column: 13
        }
      },
      "106": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 318,
          column: 19
        }
      },
      "107": {
        start: {
          line: 322,
          column: 34
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "108": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "109": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "110": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 337,
          column: 19
        }
      },
      "111": {
        start: {
          line: 341,
          column: 37
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "112": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "113": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 356,
          column: 13
        }
      },
      "114": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 355,
          column: 19
        }
      },
      "115": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 30
        }
      },
      "116": {
        start: {
          line: 364,
          column: 24
        },
        end: {
          line: 364,
          column: 26
        }
      },
      "117": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "118": {
        start: {
          line: 366,
          column: 30
        },
        end: {
          line: 366,
          column: 40
        }
      },
      "119": {
        start: {
          line: 367,
          column: 31
        },
        end: {
          line: 367,
          column: 70
        }
      },
      "120": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "121": {
        start: {
          line: 369,
          column: 33
        },
        end: {
          line: 369,
          column: 90
        }
      },
      "122": {
        start: {
          line: 370,
          column: 37
        },
        end: {
          line: 370,
          column: 59
        }
      },
      "123": {
        start: {
          line: 372,
          column: 32
        },
        end: {
          line: 372,
          column: 105
        }
      },
      "124": {
        start: {
          line: 373,
          column: 32
        },
        end: {
          line: 373,
          column: 45
        }
      },
      "125": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 65
        }
      },
      "126": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 99
        }
      },
      "127": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 23
        }
      },
      "128": {
        start: {
          line: 386,
          column: 27
        },
        end: {
          line: 386,
          column: 41
        }
      },
      "129": {
        start: {
          line: 387,
          column: 32
        },
        end: {
          line: 387,
          column: 69
        }
      },
      "130": {
        start: {
          line: 387,
          column: 52
        },
        end: {
          line: 387,
          column: 61
        }
      },
      "131": {
        start: {
          line: 388,
          column: 36
        },
        end: {
          line: 388,
          column: 100
        }
      },
      "132": {
        start: {
          line: 388,
          column: 63
        },
        end: {
          line: 388,
          column: 83
        }
      },
      "133": {
        start: {
          line: 389,
          column: 31
        },
        end: {
          line: 389,
          column: 90
        }
      },
      "134": {
        start: {
          line: 389,
          column: 58
        },
        end: {
          line: 389,
          column: 73
        }
      },
      "135": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 394,
          column: 10
        }
      },
      "136": {
        start: {
          line: 401,
          column: 39
        },
        end: {
          line: 401,
          column: 92
        }
      },
      "137": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 405,
          column: 48
        }
      },
      "138": {
        start: {
          line: 411,
          column: 30
        },
        end: {
          line: 411,
          column: 65
        }
      },
      "139": {
        start: {
          line: 412,
          column: 30
        },
        end: {
          line: 412,
          column: 65
        }
      },
      "140": {
        start: {
          line: 413,
          column: 28
        },
        end: {
          line: 413,
          column: 86
        }
      },
      "141": {
        start: {
          line: 413,
          column: 57
        },
        end: {
          line: 413,
          column: 85
        }
      },
      "142": {
        start: {
          line: 414,
          column: 27
        },
        end: {
          line: 414,
          column: 100
        }
      },
      "143": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 43
        }
      },
      "144": {
        start: {
          line: 421,
          column: 23
        },
        end: {
          line: 421,
          column: 32
        }
      },
      "145": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 429,
          column: 11
        }
      },
      "146": {
        start: {
          line: 423,
          column: 30
        },
        end: {
          line: 423,
          column: 55
        }
      },
      "147": {
        start: {
          line: 424,
          column: 28
        },
        end: {
          line: 424,
          column: 127
        }
      },
      "148": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 427,
          column: 13
        }
      },
      "149": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 40
        }
      },
      "150": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 44
        }
      },
      "151": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 436,
          column: 75
        }
      },
      "152": {
        start: {
          line: 432,
          column: 26
        },
        end: {
          line: 432,
          column: 52
        }
      },
      "153": {
        start: {
          line: 433,
          column: 30
        },
        end: {
          line: 433,
          column: 78
        }
      },
      "154": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 41
        }
      },
      "155": {
        start: {
          line: 436,
          column: 28
        },
        end: {
          line: 436,
          column: 73
        }
      },
      "156": {
        start: {
          line: 442,
          column: 21
        },
        end: {
          line: 442,
          column: 80
        }
      },
      "157": {
        start: {
          line: 442,
          column: 50
        },
        end: {
          line: 442,
          column: 59
        }
      },
      "158": {
        start: {
          line: 443,
          column: 29
        },
        end: {
          line: 443,
          column: 72
        }
      },
      "159": {
        start: {
          line: 443,
          column: 48
        },
        end: {
          line: 443,
          column: 71
        }
      },
      "160": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 82
        }
      },
      "161": {
        start: {
          line: 444,
          column: 50
        },
        end: {
          line: 444,
          column: 60
        }
      },
      "162": {
        start: {
          line: 450,
          column: 20
        },
        end: {
          line: 450,
          column: 30
        }
      },
      "163": {
        start: {
          line: 451,
          column: 22
        },
        end: {
          line: 451,
          column: 32
        }
      },
      "164": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 41
        }
      },
      "165": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 30
        }
      },
      "166": {
        start: {
          line: 456,
          column: 0
        },
        end: {
          line: 456,
          column: 40
        }
      },
      "167": {
        start: {
          line: 458,
          column: 0
        },
        end: {
          line: 458,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 86
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 60
          },
          end: {
            line: 24,
            column: 61
          }
        },
        loc: {
          start: {
            line: 24,
            column: 69
          },
          end: {
            line: 24,
            column: 134
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 72
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 39
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 123
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 128,
            column: 35
          },
          end: {
            line: 128,
            column: 36
          }
        },
        loc: {
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 54
          }
        },
        line: 128
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 44
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 133
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 143,
            column: 60
          },
          end: {
            line: 143,
            column: 61
          }
        },
        loc: {
          start: {
            line: 143,
            column: 65
          },
          end: {
            line: 143,
            column: 78
          }
        },
        line: 143
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 144,
            column: 59
          },
          end: {
            line: 144,
            column: 60
          }
        },
        loc: {
          start: {
            line: 144,
            column: 71
          },
          end: {
            line: 144,
            column: 98
          }
        },
        line: 144
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 146,
            column: 50
          },
          end: {
            line: 146,
            column: 51
          }
        },
        loc: {
          start: {
            line: 146,
            column: 55
          },
          end: {
            line: 146,
            column: 76
          }
        },
        line: 146
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 64
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 159
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 160,
            column: 56
          },
          end: {
            line: 160,
            column: 57
          }
        },
        loc: {
          start: {
            line: 160,
            column: 61
          },
          end: {
            line: 160,
            column: 74
          }
        },
        line: 160
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 161,
            column: 52
          },
          end: {
            line: 161,
            column: 53
          }
        },
        loc: {
          start: {
            line: 161,
            column: 57
          },
          end: {
            line: 161,
            column: 71
          }
        },
        line: 161
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 51
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 198
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 80
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 235
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 256,
            column: 39
          },
          end: {
            line: 256,
            column: 40
          }
        },
        loc: {
          start: {
            line: 256,
            column: 49
          },
          end: {
            line: 261,
            column: 13
          }
        },
        line: 256
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 37
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 278
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 280,
            column: 54
          },
          end: {
            line: 280,
            column: 55
          }
        },
        loc: {
          start: {
            line: 280,
            column: 64
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 280
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 283,
            column: 36
          },
          end: {
            line: 283,
            column: 37
          }
        },
        loc: {
          start: {
            line: 283,
            column: 48
          },
          end: {
            line: 283,
            column: 79
          }
        },
        line: 283
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 285,
            column: 54
          },
          end: {
            line: 285,
            column: 55
          }
        },
        loc: {
          start: {
            line: 285,
            column: 64
          },
          end: {
            line: 289,
            column: 9
          }
        },
        line: 285
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 288,
            column: 36
          },
          end: {
            line: 288,
            column: 37
          }
        },
        loc: {
          start: {
            line: 288,
            column: 41
          },
          end: {
            line: 288,
            column: 54
          }
        },
        line: 288
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 44
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 298
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 58
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 363
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 34
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 385
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 387,
            column: 47
          },
          end: {
            line: 387,
            column: 48
          }
        },
        loc: {
          start: {
            line: 387,
            column: 52
          },
          end: {
            line: 387,
            column: 61
          }
        },
        line: 387
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 388,
            column: 51
          },
          end: {
            line: 388,
            column: 52
          }
        },
        loc: {
          start: {
            line: 388,
            column: 63
          },
          end: {
            line: 388,
            column: 83
          }
        },
        line: 388
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 389,
            column: 46
          },
          end: {
            line: 389,
            column: 47
          }
        },
        loc: {
          start: {
            line: 389,
            column: 58
          },
          end: {
            line: 389,
            column: 73
          }
        },
        line: 389
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 36
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 399
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 410,
            column: 5
          }
        },
        loc: {
          start: {
            line: 410,
            column: 49
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 410
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 413,
            column: 49
          },
          end: {
            line: 413,
            column: 50
          }
        },
        loc: {
          start: {
            line: 413,
            column: 57
          },
          end: {
            line: 413,
            column: 85
          }
        },
        line: 413
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 30
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 420
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 422,
            column: 23
          },
          end: {
            line: 422,
            column: 24
          }
        },
        loc: {
          start: {
            line: 422,
            column: 32
          },
          end: {
            line: 429,
            column: 9
          }
        },
        line: 422
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 431,
            column: 17
          },
          end: {
            line: 431,
            column: 18
          }
        },
        loc: {
          start: {
            line: 431,
            column: 36
          },
          end: {
            line: 435,
            column: 9
          }
        },
        line: 431
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 436,
            column: 18
          },
          end: {
            line: 436,
            column: 19
          }
        },
        loc: {
          start: {
            line: 436,
            column: 28
          },
          end: {
            line: 436,
            column: 73
          }
        },
        line: 436
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 441,
            column: 4
          },
          end: {
            line: 441,
            column: 5
          }
        },
        loc: {
          start: {
            line: 441,
            column: 31
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 441
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 442,
            column: 36
          },
          end: {
            line: 442,
            column: 37
          }
        },
        loc: {
          start: {
            line: 442,
            column: 50
          },
          end: {
            line: 442,
            column: 59
          }
        },
        line: 442
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 443,
            column: 41
          },
          end: {
            line: 443,
            column: 42
          }
        },
        loc: {
          start: {
            line: 443,
            column: 48
          },
          end: {
            line: 443,
            column: 71
          }
        },
        line: 443
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 444,
            column: 35
          },
          end: {
            line: 444,
            column: 36
          }
        },
        loc: {
          start: {
            line: 444,
            column: 50
          },
          end: {
            line: 444,
            column: 60
          }
        },
        line: 444
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 26
          },
          end: {
            line: 454,
            column: 5
          }
        },
        line: 449
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 46
          },
          end: {
            line: 15,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 58
          },
          end: {
            line: 15,
            column: 84
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 69
          },
          end: {
            line: 24,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 69
          },
          end: {
            line: 24,
            column: 97
          }
        }, {
          start: {
            line: 24,
            column: 101
          },
          end: {
            line: 24,
            column: 134
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 55
          },
          end: {
            line: 60,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 80
          },
          end: {
            line: 60,
            column: 93
          }
        }, {
          start: {
            line: 60,
            column: 96
          },
          end: {
            line: 60,
            column: 111
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 54
          },
          end: {
            line: 66,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 66,
            column: 62
          },
          end: {
            line: 66,
            column: 70
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 88,
            column: 13
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 88,
            column: 13
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 57
          },
          end: {
            line: 117,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 82
          },
          end: {
            line: 117,
            column: 95
          }
        }, {
          start: {
            line: 117,
            column: 98
          },
          end: {
            line: 117,
            column: 113
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "8": {
        loc: {
          start: {
            line: 181,
            column: 33
          },
          end: {
            line: 181,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 33
          },
          end: {
            line: 181,
            column: 57
          }
        }, {
          start: {
            line: 181,
            column: 61
          },
          end: {
            line: 181,
            column: 63
          }
        }],
        line: 181
      },
      "9": {
        loc: {
          start: {
            line: 182,
            column: 33
          },
          end: {
            line: 182,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 33
          },
          end: {
            line: 182,
            column: 57
          }
        }, {
          start: {
            line: 182,
            column: 61
          },
          end: {
            line: 182,
            column: 63
          }
        }],
        line: 182
      },
      "10": {
        loc: {
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 183,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 183,
            column: 51
          }
        }, {
          start: {
            line: 183,
            column: 55
          },
          end: {
            line: 183,
            column: 57
          }
        }],
        line: 183
      },
      "11": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        }],
        line: 210
      },
      "12": {
        loc: {
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: 218,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        }],
        line: 214
      },
      "13": {
        loc: {
          start: {
            line: 218,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 225,
            column: 9
          }
        }],
        line: 218
      },
      "14": {
        loc: {
          start: {
            line: 257,
            column: 26
          },
          end: {
            line: 257,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 26
          },
          end: {
            line: 257,
            column: 38
          }
        }, {
          start: {
            line: 257,
            column: 42
          },
          end: {
            line: 257,
            column: 50
          }
        }],
        line: 257
      },
      "15": {
        loc: {
          start: {
            line: 258,
            column: 22
          },
          end: {
            line: 258,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 22
          },
          end: {
            line: 258,
            column: 30
          }
        }, {
          start: {
            line: 258,
            column: 34
          },
          end: {
            line: 258,
            column: 45
          }
        }],
        line: 258
      },
      "16": {
        loc: {
          start: {
            line: 259,
            column: 28
          },
          end: {
            line: 259,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 28
          },
          end: {
            line: 259,
            column: 42
          }
        }, {
          start: {
            line: 259,
            column: 46
          },
          end: {
            line: 259,
            column: 79
          }
        }],
        line: 259
      },
      "17": {
        loc: {
          start: {
            line: 260,
            column: 37
          },
          end: {
            line: 260,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 37
          },
          end: {
            line: 260,
            column: 60
          }
        }, {
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 65
          }
        }],
        line: 260
      },
      "18": {
        loc: {
          start: {
            line: 282,
            column: 19
          },
          end: {
            line: 283,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 283,
            column: 105
          }
        }, {
          start: {
            line: 283,
            column: 108
          },
          end: {
            line: 283,
            column: 109
          }
        }],
        line: 282
      },
      "19": {
        loc: {
          start: {
            line: 283,
            column: 55
          },
          end: {
            line: 283,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 71
          },
          end: {
            line: 283,
            column: 74
          }
        }, {
          start: {
            line: 283,
            column: 77
          },
          end: {
            line: 283,
            column: 78
          }
        }],
        line: 283
      },
      "20": {
        loc: {
          start: {
            line: 287,
            column: 18
          },
          end: {
            line: 288,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 288,
            column: 84
          }
        }, {
          start: {
            line: 288,
            column: 87
          },
          end: {
            line: 288,
            column: 88
          }
        }],
        line: 287
      },
      "21": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 319,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 319,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "22": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "23": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "24": {
        loc: {
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 427,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 427,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/optimization/PromptAnalyzer.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/optimization/PromptAnalyzer.ts"],
      sourcesContent: ["import { EventStore } from '../analytics/EventStore';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { llmService } from '../llmService';\nimport { EnhancedAssertionResult } from '../assertions/AssertionEngine';\n\nexport interface PromptAnalysisResult {\n  promptId: string;\n  analysisId: string;\n  effectiveness: {\n    score: number; // 0-100\n    category: 'poor' | 'fair' | 'good' | 'excellent';\n    reasoning: string;\n  };\n  patterns: {\n    successPatterns: string[];\n    failurePatterns: string[];\n    commonErrors: string[];\n  };\n  metrics: {\n    averageResponseTime: number;\n    successRate: number;\n    totalExecutions: number;\n    consistencyScore: number;\n  };\n  recommendations: {\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    type: 'structure' | 'clarity' | 'specificity' | 'context' | 'security';\n    suggestion: string;\n    expectedImprovement: number; // percentage\n  }[];\n  trends: {\n    performanceOverTime: Array<{ timestamp: Date; score: number }>;\n    successRateOverTime: Array<{ timestamp: Date; rate: number }>;\n  };\n  securityIssues: {\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    type: 'injection' | 'leakage' | 'manipulation' | 'compliance';\n    description: string;\n    recommendation: string;\n  }[];\n  timestamp: Date;\n}\n\nexport interface PromptComparisonResult {\n  promptA: string;\n  promptB: string;\n  winner: 'A' | 'B' | 'tie';\n  confidence: number;\n  metrics: {\n    responseTime: { A: number; B: number };\n    successRate: { A: number; B: number };\n    qualityScore: { A: number; B: number };\n  };\n  analysis: string;\n}\n\nexport class PromptAnalyzer {\n  private eventStore: EventStore;\n  private analyticsEngine: AnalyticsEngine;\n  \n  constructor() {\n    this.eventStore = EventStore.getInstance();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n  }\n\n  /**\n   * Analyze prompt effectiveness using historical data and AI insights\n   */\n  async analyzePrompt(\n    promptId: string,\n    promptText: string,\n    timeRange: { start: Date; end: Date } = this.getDefaultTimeRange()\n  ): Promise<PromptAnalysisResult> {\n    const analysisId = `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Gather historical execution data\n      const executionEvents = await this.eventStore.getEvents({\n        event_type: 'test_execution',\n        start_time: timeRange.start,\n        end_time: timeRange.end\n      });\n\n      const promptExecutions = executionEvents.filter(event => \n        event.entity_id === promptId || event.data.prompt_id === promptId\n      );\n\n      // Calculate basic metrics\n      const metrics = this.calculatePromptMetrics(promptExecutions);\n      \n      // Analyze patterns using AI\n      const patterns = await this.analyzeExecutionPatterns(promptExecutions, promptText);\n      \n      // Generate effectiveness score\n      const effectiveness = this.calculateEffectivenessScore(metrics, patterns);\n      \n      // Generate AI-powered recommendations\n      const recommendations = await this.generateRecommendations(\n        promptText, \n        metrics, \n        patterns, \n        effectiveness\n      );\n      \n      // Calculate trends\n      const trends = this.calculateTrends(promptExecutions);\n      \n      // Perform security analysis\n      const securityIssues = await this.analyzeSecurityIssues(promptText);\n      \n      const result: PromptAnalysisResult = {\n        promptId,\n        analysisId,\n        effectiveness,\n        patterns,\n        metrics,\n        recommendations,\n        trends,\n        securityIssues,\n        timestamp: new Date()\n      };\n\n      // Store analysis result\n      await this.eventStore.recordEvent({\n        event_type: 'prompt_analysis',\n        entity_id: promptId,\n        entity_type: 'prompt',\n        data: result,\n        timestamp: new Date()\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error analyzing prompt:', error);\n      throw new Error(`Prompt analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Compare two prompts and determine which performs better\n   */\n  async comparePrompts(\n    promptA: string,\n    promptB: string,\n    testCases: Array<{ input: string; expectedOutput: string }>,\n    model: string = 'llama3'\n  ): Promise<PromptComparisonResult> {\n    try {\n      const resultsA = await this.testPromptPerformance(promptA, testCases, model);\n      const resultsB = await this.testPromptPerformance(promptB, testCases, model);\n      \n      const metricsA = this.calculateTestMetrics(resultsA);\n      const metricsB = this.calculateTestMetrics(resultsB);\n      \n      // Determine winner based on weighted scoring\n      const scoreA = this.calculateWeightedScore(metricsA);\n      const scoreB = this.calculateWeightedScore(metricsB);\n      \n      let winner: 'A' | 'B' | 'tie';\n      let confidence: number;\n      \n      if (Math.abs(scoreA - scoreB) < 0.1) {\n        winner = 'tie';\n        confidence = 1 - Math.abs(scoreA - scoreB);\n      } else if (scoreA > scoreB) {\n        winner = 'A';\n        confidence = (scoreA - scoreB) / Math.max(scoreA, scoreB);\n      } else {\n        winner = 'B';\n        confidence = (scoreB - scoreA) / Math.max(scoreA, scoreB);\n      }\n      \n      // Generate AI analysis\n      const analysisPrompt = `\n        Compare these two prompts and their performance:\n        \n        Prompt A: \"${promptA}\"\n        Metrics A: Response Time: ${metricsA.responseTime}ms, Success Rate: ${metricsA.successRate}%, Quality: ${metricsA.qualityScore}\n        \n        Prompt B: \"${promptB}\"  \n        Metrics B: Response Time: ${metricsB.responseTime}ms, Success Rate: ${metricsB.successRate}%, Quality: ${metricsB.qualityScore}\n        \n        Provide a detailed analysis of the differences and why one performs better.\n      `;\n      \n      const analysis = await llmService.generate(analysisPrompt, model);\n      \n      return {\n        promptA,\n        promptB,\n        winner,\n        confidence,\n        metrics: {\n          responseTime: { A: metricsA.responseTime, B: metricsB.responseTime },\n          successRate: { A: metricsA.successRate, B: metricsB.successRate },\n          qualityScore: { A: metricsA.qualityScore, B: metricsB.qualityScore }\n        },\n        analysis: analysis.response\n      };\n    } catch (error) {\n      console.error('Error comparing prompts:', error);\n      throw new Error(`Prompt comparison failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get evolution history of a prompt\n   */\n  async getPromptEvolution(promptId: string): Promise<Array<{\n    version: string;\n    timestamp: Date;\n    changes: string[];\n    performance: {\n      successRate: number;\n      responseTime: number;\n      qualityScore: number;\n    };\n    reasoning: string;\n  }>> {\n    const evolutionEvents = await this.eventStore.getEvents({\n      event_type: 'prompt_evolution',\n      entity_id: promptId\n    });\n    \n    return evolutionEvents.map(event => event.data);\n  }\n\n  /**\n   * Calculate basic metrics from execution events\n   */\n  private calculatePromptMetrics(executionEvents: any[]): PromptAnalysisResult['metrics'] {\n    if (executionEvents.length === 0) {\n      return {\n        averageResponseTime: 0,\n        successRate: 0,\n        totalExecutions: 0,\n        consistencyScore: 0\n      };\n    }\n\n    const totalExecutions = executionEvents.length;\n    const successfulExecutions = executionEvents.filter(e => e.data.passed).length;\n    const averageResponseTime = executionEvents.reduce((sum, e) => sum + e.data.execution_time, 0) / totalExecutions;\n    \n    // Calculate consistency score based on response time variance\n    const responseTimes = executionEvents.map(e => e.data.execution_time);\n    const variance = this.calculateVariance(responseTimes);\n    const consistencyScore = Math.max(0, 100 - (variance / averageResponseTime) * 100);\n    \n    return {\n      averageResponseTime,\n      successRate: (successfulExecutions / totalExecutions) * 100,\n      totalExecutions,\n      consistencyScore\n    };\n  }\n\n  /**\n   * Analyze execution patterns using AI\n   */\n  private async analyzeExecutionPatterns(\n    executionEvents: any[], \n    promptText: string\n  ): Promise<PromptAnalysisResult['patterns']> {\n    const successfulEvents = executionEvents.filter(e => e.data.passed);\n    const failedEvents = executionEvents.filter(e => !e.data.passed);\n    \n    const analysisPrompt = `\n      Analyze this prompt and its execution patterns:\n      \n      Prompt: \"${promptText}\"\n      \n      Successful executions: ${successfulEvents.length}\n      Failed executions: ${failedEvents.length}\n      \n      Based on this data, identify:\n      1. Patterns that lead to success\n      2. Patterns that lead to failure  \n      3. Common errors or issues\n      \n      Return a JSON object with arrays for successPatterns, failurePatterns, and commonErrors.\n    `;\n    \n    try {\n      const analysis = await llmService.generate(analysisPrompt);\n      const patterns = JSON.parse(analysis.response);\n      \n      return {\n        successPatterns: patterns.successPatterns || [],\n        failurePatterns: patterns.failurePatterns || [],\n        commonErrors: patterns.commonErrors || []\n      };\n    } catch (error) {\n      console.error('Error analyzing patterns:', error);\n      return {\n        successPatterns: [],\n        failurePatterns: [],\n        commonErrors: []\n      };\n    }\n  }\n\n  /**\n   * Calculate effectiveness score\n   */\n  private calculateEffectivenessScore(\n    metrics: PromptAnalysisResult['metrics'],\n    patterns: PromptAnalysisResult['patterns']\n  ): PromptAnalysisResult['effectiveness'] {\n    // Weighted scoring: Success Rate (40%), Response Time (30%), Consistency (20%), Pattern Quality (10%)\n    const successScore = metrics.successRate; // 0-100\n    const responseTimeScore = Math.max(0, 100 - (metrics.averageResponseTime / 1000) * 10); // Penalize slow responses\n    const consistencyScore = metrics.consistencyScore; // 0-100\n    const patternScore = Math.max(0, 100 - patterns.failurePatterns.length * 10); // Penalize failure patterns\n    \n    const weightedScore = (\n      successScore * 0.4 + \n      responseTimeScore * 0.3 + \n      consistencyScore * 0.2 + \n      patternScore * 0.1\n    );\n    \n    let category: 'poor' | 'fair' | 'good' | 'excellent';\n    let reasoning: string;\n    \n    if (weightedScore >= 85) {\n      category = 'excellent';\n      reasoning = 'High success rate with consistent performance and minimal failure patterns';\n    } else if (weightedScore >= 70) {\n      category = 'good';\n      reasoning = 'Good performance with room for minor improvements';\n    } else if (weightedScore >= 50) {\n      category = 'fair';\n      reasoning = 'Average performance with noticeable issues that need attention';\n    } else {\n      category = 'poor';\n      reasoning = 'Poor performance with significant issues requiring immediate attention';\n    }\n    \n    return {\n      score: Math.round(weightedScore),\n      category,\n      reasoning\n    };\n  }\n\n  /**\n   * Generate AI-powered recommendations\n   */\n  private async generateRecommendations(\n    promptText: string,\n    metrics: PromptAnalysisResult['metrics'],\n    patterns: PromptAnalysisResult['patterns'],\n    effectiveness: PromptAnalysisResult['effectiveness']\n  ): Promise<PromptAnalysisResult['recommendations']> {\n    const recommendationPrompt = `\n      Analyze this prompt and provide improvement recommendations:\n      \n      Prompt: \"${promptText}\"\n      \n      Current Performance:\n      - Success Rate: ${metrics.successRate}%\n      - Average Response Time: ${metrics.averageResponseTime}ms\n      - Consistency Score: ${metrics.consistencyScore}%\n      - Effectiveness: ${effectiveness.score}/100 (${effectiveness.category})\n      \n      Failure Patterns: ${patterns.failurePatterns.join(', ')}\n      Common Errors: ${patterns.commonErrors.join(', ')}\n      \n      Provide specific, actionable recommendations to improve this prompt.\n      Return a JSON array with objects containing: priority, type, suggestion, expectedImprovement.\n    `;\n    \n    try {\n      const response = await llmService.generate(recommendationPrompt);\n      const recommendations = JSON.parse(response.response);\n      \n      return recommendations.map((rec: any) => ({\n        priority: rec.priority || 'medium',\n        type: rec.type || 'structure',\n        suggestion: rec.suggestion || 'No specific suggestion provided',\n        expectedImprovement: rec.expectedImprovement || 5\n      }));\n    } catch (error) {\n      console.error('Error generating recommendations:', error);\n      return [\n        {\n          priority: 'medium' as const,\n          type: 'structure' as const,\n          suggestion: 'Consider adding more specific instructions and examples',\n          expectedImprovement: 10\n        }\n      ];\n    }\n  }\n\n  /**\n   * Calculate trends from execution data\n   */\n  private calculateTrends(executionEvents: any[]): PromptAnalysisResult['trends'] {\n    const groupedByHour = this.groupEventsByHour(executionEvents);\n    \n    const performanceOverTime = groupedByHour.map(group => ({\n      timestamp: group.timestamp,\n      score: group.events.length > 0 ? \n        group.events.reduce((sum, e) => sum + (e.data.passed ? 100 : 0), 0) / group.events.length : 0\n    }));\n    \n    const successRateOverTime = groupedByHour.map(group => ({\n      timestamp: group.timestamp,\n      rate: group.events.length > 0 ? \n        group.events.filter(e => e.data.passed).length / group.events.length : 0\n    }));\n    \n    return {\n      performanceOverTime,\n      successRateOverTime\n    };\n  }\n\n  /**\n   * Analyze security issues in prompt\n   */\n  private async analyzeSecurityIssues(promptText: string): Promise<PromptAnalysisResult['securityIssues']> {\n    const securityIssues: PromptAnalysisResult['securityIssues'] = [];\n    \n    // Check for prompt injection patterns\n    const injectionPatterns = [\n      /ignore.*previous.*instructions/i,\n      /system.*prompt/i,\n      /role.*play/i,\n      /jailbreak/i,\n      /pretend.*you.*are/i,\n      /forget.*everything/i,\n      /new.*instructions/i,\n      /override.*safety/i\n    ];\n    \n    for (const pattern of injectionPatterns) {\n      if (pattern.test(promptText)) {\n        securityIssues.push({\n          severity: 'high',\n          type: 'injection',\n          description: `Potential prompt injection pattern detected: ${pattern.source}`,\n          recommendation: 'Review and sanitize prompt to prevent injection attacks'\n        });\n      }\n    }\n    \n    // Check for sensitive information leakage\n    const sensitivePatterns = [\n      /password/i,\n      /api.*key/i,\n      /secret/i,\n      /token/i,\n      /credential/i,\n      /private.*key/i\n    ];\n    \n    for (const pattern of sensitivePatterns) {\n      if (pattern.test(promptText)) {\n        securityIssues.push({\n          severity: 'critical',\n          type: 'leakage',\n          description: `Potential sensitive information detected: ${pattern.source}`,\n          recommendation: 'Remove or mask sensitive information from prompt'\n        });\n      }\n    }\n    \n    // Check for manipulation attempts\n    const manipulationPatterns = [\n      /you.*must/i,\n      /you.*have.*to/i,\n      /required.*to/i,\n      /bypass.*restrictions/i,\n      /special.*permissions/i\n    ];\n    \n    for (const pattern of manipulationPatterns) {\n      if (pattern.test(promptText)) {\n        securityIssues.push({\n          severity: 'medium',\n          type: 'manipulation',\n          description: `Potential manipulation attempt detected: ${pattern.source}`,\n          recommendation: 'Review prompt for manipulative language'\n        });\n      }\n    }\n    \n    return securityIssues;\n  }\n\n  /**\n   * Test prompt performance with given test cases\n   */\n  private async testPromptPerformance(\n    prompt: string,\n    testCases: Array<{ input: string; expectedOutput: string }>,\n    model: string\n  ): Promise<Array<{ responseTime: number; success: boolean; quality: number }>> {\n    const results = [];\n    \n    for (const testCase of testCases) {\n      const startTime = Date.now();\n      const fullPrompt = `${prompt}\\n\\nInput: ${testCase.input}`;\n      \n      try {\n        const response = await llmService.generate(fullPrompt, model);\n        const responseTime = Date.now() - startTime;\n        \n        // Simple quality scoring based on similarity to expected output\n        const quality = this.calculateResponseQuality(response.response, testCase.expectedOutput);\n        const success = quality > 0.7; // Consider success if quality > 70%\n        \n        results.push({ responseTime, success, quality });\n      } catch (error) {\n        results.push({ responseTime: Date.now() - startTime, success: false, quality: 0 });\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Calculate metrics from test results\n   */\n  private calculateTestMetrics(results: Array<{ responseTime: number; success: boolean; quality: number }>) {\n    const totalTests = results.length;\n    const successfulTests = results.filter(r => r.success).length;\n    const averageResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / totalTests;\n    const averageQuality = results.reduce((sum, r) => sum + r.quality, 0) / totalTests;\n    \n    return {\n      responseTime: averageResponseTime,\n      successRate: (successfulTests / totalTests) * 100,\n      qualityScore: averageQuality * 100\n    };\n  }\n\n  /**\n   * Calculate weighted score for comparison\n   */\n  private calculateWeightedScore(metrics: { responseTime: number; successRate: number; qualityScore: number }) {\n    // Normalize response time (lower is better)\n    const normalizedResponseTime = Math.max(0, 100 - (metrics.responseTime / 1000) * 10);\n    \n    // Weighted scoring: Success Rate (40%), Quality (40%), Response Time (20%)\n    return (\n      metrics.successRate * 0.4 + \n      metrics.qualityScore * 0.4 + \n      normalizedResponseTime * 0.2\n    ) / 100;\n  }\n\n  /**\n   * Calculate response quality using simple similarity\n   */\n  private calculateResponseQuality(response: string, expected: string): number {\n    const responseWords = response.toLowerCase().split(/\\s+/);\n    const expectedWords = expected.toLowerCase().split(/\\s+/);\n    \n    const commonWords = responseWords.filter(word => expectedWords.includes(word));\n    const similarity = commonWords.length / Math.max(responseWords.length, expectedWords.length);\n    \n    return Math.min(1, similarity * 2); // Boost similarity score\n  }\n\n  /**\n   * Group events by hour\n   */\n  private groupEventsByHour(events: any[]): Array<{ timestamp: Date; events: any[] }> {\n    const groups = new Map<string, any[]>();\n    \n    events.forEach(event => {\n      const timestamp = new Date(event.timestamp);\n      const hourKey = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}`;\n      \n      if (!groups.has(hourKey)) {\n        groups.set(hourKey, []);\n      }\n      groups.get(hourKey)!.push(event);\n    });\n    \n    return Array.from(groups.entries())\n      .map(([key, events]) => {\n        const parts = key.split('-').map(Number);\n        const timestamp = new Date(parts[0], parts[1], parts[2], parts[3]);\n        return { timestamp, events };\n      })\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  /**\n   * Calculate variance of an array of numbers\n   */\n  private calculateVariance(numbers: number[]): number {\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    const squaredDiffs = numbers.map(num => Math.pow(num - mean, 2));\n    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / numbers.length;\n  }\n\n  /**\n   * Get default time range (last 7 days)\n   */\n  private getDefaultTimeRange(): { start: Date; end: Date } {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - 7);\n    return { start, end };\n  }\n}\n\n// Export singleton instance\nexport const promptAnalyzer = new PromptAnalyzer();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ac4c9c521a26652b4c66ea1b1b33ac7dbf9e994f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sj0xwsvp6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sj0xwsvp6();
cov_1sj0xwsvp6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1sj0xwsvp6().s[1]++;
exports.promptAnalyzer = exports.PromptAnalyzer = void 0;
const EventStore_1 =
/* istanbul ignore next */
(cov_1sj0xwsvp6().s[2]++, require("../analytics/EventStore"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1sj0xwsvp6().s[3]++, require("../analytics/AnalyticsEngine"));
const llmService_1 =
/* istanbul ignore next */
(cov_1sj0xwsvp6().s[4]++, require("../llmService"));
class PromptAnalyzer {
  constructor() {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[0]++;
    cov_1sj0xwsvp6().s[5]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[6]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
  }
  /**
   * Analyze prompt effectiveness using historical data and AI insights
   */
  async analyzePrompt(promptId, promptText, timeRange =
  /* istanbul ignore next */
  (cov_1sj0xwsvp6().b[0][0]++, this.getDefaultTimeRange())) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[1]++;
    const analysisId =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[7]++, `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[8]++;
    try {
      // Gather historical execution data
      const executionEvents =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[9]++, await this.eventStore.getEvents({
        event_type: 'test_execution',
        start_time: timeRange.start,
        end_time: timeRange.end
      }));
      const promptExecutions =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[10]++, executionEvents.filter(event => {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().f[2]++;
        cov_1sj0xwsvp6().s[11]++;
        return /* istanbul ignore next */(cov_1sj0xwsvp6().b[1][0]++, event.entity_id === promptId) ||
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[1][1]++, event.data.prompt_id === promptId);
      }));
      // Calculate basic metrics
      const metrics =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[12]++, this.calculatePromptMetrics(promptExecutions));
      // Analyze patterns using AI
      const patterns =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[13]++, await this.analyzeExecutionPatterns(promptExecutions, promptText));
      // Generate effectiveness score
      const effectiveness =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[14]++, this.calculateEffectivenessScore(metrics, patterns));
      // Generate AI-powered recommendations
      const recommendations =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[15]++, await this.generateRecommendations(promptText, metrics, patterns, effectiveness));
      // Calculate trends
      const trends =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[16]++, this.calculateTrends(promptExecutions));
      // Perform security analysis
      const securityIssues =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[17]++, await this.analyzeSecurityIssues(promptText));
      const result =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[18]++, {
        promptId,
        analysisId,
        effectiveness,
        patterns,
        metrics,
        recommendations,
        trends,
        securityIssues,
        timestamp: new Date()
      });
      // Store analysis result
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[19]++;
      await this.eventStore.recordEvent({
        event_type: 'prompt_analysis',
        entity_id: promptId,
        entity_type: 'prompt',
        data: result,
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[20]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[21]++;
      console.error('Error analyzing prompt:', error);
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[22]++;
      throw new Error(`Prompt analysis failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().b[2][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Compare two prompts and determine which performs better
   */
  async comparePrompts(promptA, promptB, testCases, model =
  /* istanbul ignore next */
  (cov_1sj0xwsvp6().b[3][0]++, 'llama3')) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[3]++;
    cov_1sj0xwsvp6().s[23]++;
    try {
      const resultsA =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[24]++, await this.testPromptPerformance(promptA, testCases, model));
      const resultsB =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[25]++, await this.testPromptPerformance(promptB, testCases, model));
      const metricsA =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[26]++, this.calculateTestMetrics(resultsA));
      const metricsB =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[27]++, this.calculateTestMetrics(resultsB));
      // Determine winner based on weighted scoring
      const scoreA =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[28]++, this.calculateWeightedScore(metricsA));
      const scoreB =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[29]++, this.calculateWeightedScore(metricsB));
      let winner;
      let confidence;
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[30]++;
      if (Math.abs(scoreA - scoreB) < 0.1) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[4][0]++;
        cov_1sj0xwsvp6().s[31]++;
        winner = 'tie';
        /* istanbul ignore next */
        cov_1sj0xwsvp6().s[32]++;
        confidence = 1 - Math.abs(scoreA - scoreB);
      } else {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[4][1]++;
        cov_1sj0xwsvp6().s[33]++;
        if (scoreA > scoreB) {
          /* istanbul ignore next */
          cov_1sj0xwsvp6().b[5][0]++;
          cov_1sj0xwsvp6().s[34]++;
          winner = 'A';
          /* istanbul ignore next */
          cov_1sj0xwsvp6().s[35]++;
          confidence = (scoreA - scoreB) / Math.max(scoreA, scoreB);
        } else {
          /* istanbul ignore next */
          cov_1sj0xwsvp6().b[5][1]++;
          cov_1sj0xwsvp6().s[36]++;
          winner = 'B';
          /* istanbul ignore next */
          cov_1sj0xwsvp6().s[37]++;
          confidence = (scoreB - scoreA) / Math.max(scoreA, scoreB);
        }
      }
      // Generate AI analysis
      const analysisPrompt =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[38]++, `
        Compare these two prompts and their performance:
        
        Prompt A: "${promptA}"
        Metrics A: Response Time: ${metricsA.responseTime}ms, Success Rate: ${metricsA.successRate}%, Quality: ${metricsA.qualityScore}
        
        Prompt B: "${promptB}"  
        Metrics B: Response Time: ${metricsB.responseTime}ms, Success Rate: ${metricsB.successRate}%, Quality: ${metricsB.qualityScore}
        
        Provide a detailed analysis of the differences and why one performs better.
      `);
      const analysis =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[39]++, await llmService_1.llmService.generate(analysisPrompt, model));
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[40]++;
      return {
        promptA,
        promptB,
        winner,
        confidence,
        metrics: {
          responseTime: {
            A: metricsA.responseTime,
            B: metricsB.responseTime
          },
          successRate: {
            A: metricsA.successRate,
            B: metricsB.successRate
          },
          qualityScore: {
            A: metricsA.qualityScore,
            B: metricsB.qualityScore
          }
        },
        analysis: analysis.response
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[41]++;
      console.error('Error comparing prompts:', error);
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[42]++;
      throw new Error(`Prompt comparison failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().b[6][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Get evolution history of a prompt
   */
  async getPromptEvolution(promptId) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[4]++;
    const evolutionEvents =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[43]++, await this.eventStore.getEvents({
      event_type: 'prompt_evolution',
      entity_id: promptId
    }));
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[44]++;
    return evolutionEvents.map(event => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[5]++;
      cov_1sj0xwsvp6().s[45]++;
      return event.data;
    });
  }
  /**
   * Calculate basic metrics from execution events
   */
  calculatePromptMetrics(executionEvents) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[6]++;
    cov_1sj0xwsvp6().s[46]++;
    if (executionEvents.length === 0) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().b[7][0]++;
      cov_1sj0xwsvp6().s[47]++;
      return {
        averageResponseTime: 0,
        successRate: 0,
        totalExecutions: 0,
        consistencyScore: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_1sj0xwsvp6().b[7][1]++;
    }
    const totalExecutions =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[48]++, executionEvents.length);
    const successfulExecutions =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[49]++, executionEvents.filter(e => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[7]++;
      cov_1sj0xwsvp6().s[50]++;
      return e.data.passed;
    }).length);
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[51]++, executionEvents.reduce((sum, e) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[8]++;
      cov_1sj0xwsvp6().s[52]++;
      return sum + e.data.execution_time;
    }, 0) / totalExecutions);
    // Calculate consistency score based on response time variance
    const responseTimes =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[53]++, executionEvents.map(e => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[9]++;
      cov_1sj0xwsvp6().s[54]++;
      return e.data.execution_time;
    }));
    const variance =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[55]++, this.calculateVariance(responseTimes));
    const consistencyScore =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[56]++, Math.max(0, 100 - variance / averageResponseTime * 100));
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[57]++;
    return {
      averageResponseTime,
      successRate: successfulExecutions / totalExecutions * 100,
      totalExecutions,
      consistencyScore
    };
  }
  /**
   * Analyze execution patterns using AI
   */
  async analyzeExecutionPatterns(executionEvents, promptText) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[10]++;
    const successfulEvents =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[58]++, executionEvents.filter(e => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[11]++;
      cov_1sj0xwsvp6().s[59]++;
      return e.data.passed;
    }));
    const failedEvents =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[60]++, executionEvents.filter(e => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[12]++;
      cov_1sj0xwsvp6().s[61]++;
      return !e.data.passed;
    }));
    const analysisPrompt =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[62]++, `
      Analyze this prompt and its execution patterns:
      
      Prompt: "${promptText}"
      
      Successful executions: ${successfulEvents.length}
      Failed executions: ${failedEvents.length}
      
      Based on this data, identify:
      1. Patterns that lead to success
      2. Patterns that lead to failure  
      3. Common errors or issues
      
      Return a JSON object with arrays for successPatterns, failurePatterns, and commonErrors.
    `);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[63]++;
    try {
      const analysis =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[64]++, await llmService_1.llmService.generate(analysisPrompt));
      const patterns =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[65]++, JSON.parse(analysis.response));
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[66]++;
      return {
        successPatterns:
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[8][0]++, patterns.successPatterns) ||
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[8][1]++, []),
        failurePatterns:
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[9][0]++, patterns.failurePatterns) ||
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[9][1]++, []),
        commonErrors:
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[10][0]++, patterns.commonErrors) ||
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[10][1]++, [])
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[67]++;
      console.error('Error analyzing patterns:', error);
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[68]++;
      return {
        successPatterns: [],
        failurePatterns: [],
        commonErrors: []
      };
    }
  }
  /**
   * Calculate effectiveness score
   */
  calculateEffectivenessScore(metrics, patterns) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[13]++;
    // Weighted scoring: Success Rate (40%), Response Time (30%), Consistency (20%), Pattern Quality (10%)
    const successScore =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[69]++, metrics.successRate); // 0-100
    const responseTimeScore =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[70]++, Math.max(0, 100 - metrics.averageResponseTime / 1000 * 10)); // Penalize slow responses
    const consistencyScore =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[71]++, metrics.consistencyScore); // 0-100
    const patternScore =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[72]++, Math.max(0, 100 - patterns.failurePatterns.length * 10)); // Penalize failure patterns
    const weightedScore =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[73]++, successScore * 0.4 + responseTimeScore * 0.3 + consistencyScore * 0.2 + patternScore * 0.1);
    let category;
    let reasoning;
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[74]++;
    if (weightedScore >= 85) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().b[11][0]++;
      cov_1sj0xwsvp6().s[75]++;
      category = 'excellent';
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[76]++;
      reasoning = 'High success rate with consistent performance and minimal failure patterns';
    } else {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().b[11][1]++;
      cov_1sj0xwsvp6().s[77]++;
      if (weightedScore >= 70) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[12][0]++;
        cov_1sj0xwsvp6().s[78]++;
        category = 'good';
        /* istanbul ignore next */
        cov_1sj0xwsvp6().s[79]++;
        reasoning = 'Good performance with room for minor improvements';
      } else {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[12][1]++;
        cov_1sj0xwsvp6().s[80]++;
        if (weightedScore >= 50) {
          /* istanbul ignore next */
          cov_1sj0xwsvp6().b[13][0]++;
          cov_1sj0xwsvp6().s[81]++;
          category = 'fair';
          /* istanbul ignore next */
          cov_1sj0xwsvp6().s[82]++;
          reasoning = 'Average performance with noticeable issues that need attention';
        } else {
          /* istanbul ignore next */
          cov_1sj0xwsvp6().b[13][1]++;
          cov_1sj0xwsvp6().s[83]++;
          category = 'poor';
          /* istanbul ignore next */
          cov_1sj0xwsvp6().s[84]++;
          reasoning = 'Poor performance with significant issues requiring immediate attention';
        }
      }
    }
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[85]++;
    return {
      score: Math.round(weightedScore),
      category,
      reasoning
    };
  }
  /**
   * Generate AI-powered recommendations
   */
  async generateRecommendations(promptText, metrics, patterns, effectiveness) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[14]++;
    const recommendationPrompt =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[86]++, `
      Analyze this prompt and provide improvement recommendations:
      
      Prompt: "${promptText}"
      
      Current Performance:
      - Success Rate: ${metrics.successRate}%
      - Average Response Time: ${metrics.averageResponseTime}ms
      - Consistency Score: ${metrics.consistencyScore}%
      - Effectiveness: ${effectiveness.score}/100 (${effectiveness.category})
      
      Failure Patterns: ${patterns.failurePatterns.join(', ')}
      Common Errors: ${patterns.commonErrors.join(', ')}
      
      Provide specific, actionable recommendations to improve this prompt.
      Return a JSON array with objects containing: priority, type, suggestion, expectedImprovement.
    `);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[87]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[88]++, await llmService_1.llmService.generate(recommendationPrompt));
      const recommendations =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[89]++, JSON.parse(response.response));
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[90]++;
      return recommendations.map(rec => {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().f[15]++;
        cov_1sj0xwsvp6().s[91]++;
        return {
          priority:
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[14][0]++, rec.priority) ||
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[14][1]++, 'medium'),
          type:
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[15][0]++, rec.type) ||
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[15][1]++, 'structure'),
          suggestion:
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[16][0]++, rec.suggestion) ||
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[16][1]++, 'No specific suggestion provided'),
          expectedImprovement:
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[17][0]++, rec.expectedImprovement) ||
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[17][1]++, 5)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[92]++;
      console.error('Error generating recommendations:', error);
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[93]++;
      return [{
        priority: 'medium',
        type: 'structure',
        suggestion: 'Consider adding more specific instructions and examples',
        expectedImprovement: 10
      }];
    }
  }
  /**
   * Calculate trends from execution data
   */
  calculateTrends(executionEvents) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[16]++;
    const groupedByHour =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[94]++, this.groupEventsByHour(executionEvents));
    const performanceOverTime =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[95]++, groupedByHour.map(group => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[17]++;
      cov_1sj0xwsvp6().s[96]++;
      return {
        timestamp: group.timestamp,
        score: group.events.length > 0 ?
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[18][0]++, group.events.reduce((sum, e) => {
          /* istanbul ignore next */
          cov_1sj0xwsvp6().f[18]++;
          cov_1sj0xwsvp6().s[97]++;
          return sum + (e.data.passed ?
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[19][0]++, 100) :
          /* istanbul ignore next */
          (cov_1sj0xwsvp6().b[19][1]++, 0));
        }, 0) / group.events.length) :
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[18][1]++, 0)
      };
    }));
    const successRateOverTime =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[98]++, groupedByHour.map(group => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[19]++;
      cov_1sj0xwsvp6().s[99]++;
      return {
        timestamp: group.timestamp,
        rate: group.events.length > 0 ?
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[20][0]++, group.events.filter(e => {
          /* istanbul ignore next */
          cov_1sj0xwsvp6().f[20]++;
          cov_1sj0xwsvp6().s[100]++;
          return e.data.passed;
        }).length / group.events.length) :
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().b[20][1]++, 0)
      };
    }));
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[101]++;
    return {
      performanceOverTime,
      successRateOverTime
    };
  }
  /**
   * Analyze security issues in prompt
   */
  async analyzeSecurityIssues(promptText) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[21]++;
    const securityIssues =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[102]++, []);
    // Check for prompt injection patterns
    const injectionPatterns =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[103]++, [/ignore.*previous.*instructions/i, /system.*prompt/i, /role.*play/i, /jailbreak/i, /pretend.*you.*are/i, /forget.*everything/i, /new.*instructions/i, /override.*safety/i]);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[104]++;
    for (const pattern of injectionPatterns) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[105]++;
      if (pattern.test(promptText)) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[21][0]++;
        cov_1sj0xwsvp6().s[106]++;
        securityIssues.push({
          severity: 'high',
          type: 'injection',
          description: `Potential prompt injection pattern detected: ${pattern.source}`,
          recommendation: 'Review and sanitize prompt to prevent injection attacks'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1sj0xwsvp6().b[21][1]++;
      }
    }
    // Check for sensitive information leakage
    const sensitivePatterns =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[107]++, [/password/i, /api.*key/i, /secret/i, /token/i, /credential/i, /private.*key/i]);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[108]++;
    for (const pattern of sensitivePatterns) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[109]++;
      if (pattern.test(promptText)) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[22][0]++;
        cov_1sj0xwsvp6().s[110]++;
        securityIssues.push({
          severity: 'critical',
          type: 'leakage',
          description: `Potential sensitive information detected: ${pattern.source}`,
          recommendation: 'Remove or mask sensitive information from prompt'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1sj0xwsvp6().b[22][1]++;
      }
    }
    // Check for manipulation attempts
    const manipulationPatterns =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[111]++, [/you.*must/i, /you.*have.*to/i, /required.*to/i, /bypass.*restrictions/i, /special.*permissions/i]);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[112]++;
    for (const pattern of manipulationPatterns) {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[113]++;
      if (pattern.test(promptText)) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[23][0]++;
        cov_1sj0xwsvp6().s[114]++;
        securityIssues.push({
          severity: 'medium',
          type: 'manipulation',
          description: `Potential manipulation attempt detected: ${pattern.source}`,
          recommendation: 'Review prompt for manipulative language'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1sj0xwsvp6().b[23][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[115]++;
    return securityIssues;
  }
  /**
   * Test prompt performance with given test cases
   */
  async testPromptPerformance(prompt, testCases, model) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[22]++;
    const results =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[116]++, []);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[117]++;
    for (const testCase of testCases) {
      const startTime =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[118]++, Date.now());
      const fullPrompt =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[119]++, `${prompt}\n\nInput: ${testCase.input}`);
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[120]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().s[121]++, await llmService_1.llmService.generate(fullPrompt, model));
        const responseTime =
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().s[122]++, Date.now() - startTime);
        // Simple quality scoring based on similarity to expected output
        const quality =
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().s[123]++, this.calculateResponseQuality(response.response, testCase.expectedOutput));
        const success =
        /* istanbul ignore next */
        (cov_1sj0xwsvp6().s[124]++, quality > 0.7); // Consider success if quality > 70%
        /* istanbul ignore next */
        cov_1sj0xwsvp6().s[125]++;
        results.push({
          responseTime,
          success,
          quality
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().s[126]++;
        results.push({
          responseTime: Date.now() - startTime,
          success: false,
          quality: 0
        });
      }
    }
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[127]++;
    return results;
  }
  /**
   * Calculate metrics from test results
   */
  calculateTestMetrics(results) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[23]++;
    const totalTests =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[128]++, results.length);
    const successfulTests =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[129]++, results.filter(r => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[24]++;
      cov_1sj0xwsvp6().s[130]++;
      return r.success;
    }).length);
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[131]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[25]++;
      cov_1sj0xwsvp6().s[132]++;
      return sum + r.responseTime;
    }, 0) / totalTests);
    const averageQuality =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[133]++, results.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[26]++;
      cov_1sj0xwsvp6().s[134]++;
      return sum + r.quality;
    }, 0) / totalTests);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[135]++;
    return {
      responseTime: averageResponseTime,
      successRate: successfulTests / totalTests * 100,
      qualityScore: averageQuality * 100
    };
  }
  /**
   * Calculate weighted score for comparison
   */
  calculateWeightedScore(metrics) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[27]++;
    // Normalize response time (lower is better)
    const normalizedResponseTime =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[136]++, Math.max(0, 100 - metrics.responseTime / 1000 * 10));
    // Weighted scoring: Success Rate (40%), Quality (40%), Response Time (20%)
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[137]++;
    return (metrics.successRate * 0.4 + metrics.qualityScore * 0.4 + normalizedResponseTime * 0.2) / 100;
  }
  /**
   * Calculate response quality using simple similarity
   */
  calculateResponseQuality(response, expected) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[28]++;
    const responseWords =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[138]++, response.toLowerCase().split(/\s+/));
    const expectedWords =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[139]++, expected.toLowerCase().split(/\s+/));
    const commonWords =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[140]++, responseWords.filter(word => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[29]++;
      cov_1sj0xwsvp6().s[141]++;
      return expectedWords.includes(word);
    }));
    const similarity =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[142]++, commonWords.length / Math.max(responseWords.length, expectedWords.length));
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[143]++;
    return Math.min(1, similarity * 2); // Boost similarity score
  }
  /**
   * Group events by hour
   */
  groupEventsByHour(events) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[30]++;
    const groups =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[144]++, new Map());
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[145]++;
    events.forEach(event => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[31]++;
      const timestamp =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[146]++, new Date(event.timestamp));
      const hourKey =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[147]++, `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}`);
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[148]++;
      if (!groups.has(hourKey)) {
        /* istanbul ignore next */
        cov_1sj0xwsvp6().b[24][0]++;
        cov_1sj0xwsvp6().s[149]++;
        groups.set(hourKey, []);
      } else
      /* istanbul ignore next */
      {
        cov_1sj0xwsvp6().b[24][1]++;
      }
      cov_1sj0xwsvp6().s[150]++;
      groups.get(hourKey).push(event);
    });
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[151]++;
    return Array.from(groups.entries()).map(([key, events]) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[32]++;
      const parts =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[152]++, key.split('-').map(Number));
      const timestamp =
      /* istanbul ignore next */
      (cov_1sj0xwsvp6().s[153]++, new Date(parts[0], parts[1], parts[2], parts[3]));
      /* istanbul ignore next */
      cov_1sj0xwsvp6().s[154]++;
      return {
        timestamp,
        events
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[33]++;
      cov_1sj0xwsvp6().s[155]++;
      return a.timestamp.getTime() - b.timestamp.getTime();
    });
  }
  /**
   * Calculate variance of an array of numbers
   */
  calculateVariance(numbers) {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[34]++;
    const mean =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[156]++, numbers.reduce((sum, num) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[35]++;
      cov_1sj0xwsvp6().s[157]++;
      return sum + num;
    }, 0) / numbers.length);
    const squaredDiffs =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[158]++, numbers.map(num => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[36]++;
      cov_1sj0xwsvp6().s[159]++;
      return Math.pow(num - mean, 2);
    }));
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[160]++;
    return squaredDiffs.reduce((sum, diff) => {
      /* istanbul ignore next */
      cov_1sj0xwsvp6().f[37]++;
      cov_1sj0xwsvp6().s[161]++;
      return sum + diff;
    }, 0) / numbers.length;
  }
  /**
   * Get default time range (last 7 days)
   */
  getDefaultTimeRange() {
    /* istanbul ignore next */
    cov_1sj0xwsvp6().f[38]++;
    const end =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[162]++, new Date());
    const start =
    /* istanbul ignore next */
    (cov_1sj0xwsvp6().s[163]++, new Date());
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[164]++;
    start.setDate(end.getDate() - 7);
    /* istanbul ignore next */
    cov_1sj0xwsvp6().s[165]++;
    return {
      start,
      end
    };
  }
}
/* istanbul ignore next */
cov_1sj0xwsvp6().s[166]++;
exports.PromptAnalyzer = PromptAnalyzer;
// Export singleton instance
/* istanbul ignore next */
cov_1sj0xwsvp6().s[167]++;
exports.promptAnalyzer = new PromptAnalyzer();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,