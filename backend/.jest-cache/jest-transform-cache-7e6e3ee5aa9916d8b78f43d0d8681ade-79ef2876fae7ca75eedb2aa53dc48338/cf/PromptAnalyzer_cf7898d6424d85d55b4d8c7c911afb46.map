{"version":3,"names":["cov_1sj0xwsvp6","actualCoverage","s","EventStore_1","require","AnalyticsEngine_1","llmService_1","PromptAnalyzer","constructor","f","eventStore","EventStore","getInstance","analyticsEngine","AnalyticsEngine","analyzePrompt","promptId","promptText","timeRange","b","getDefaultTimeRange","analysisId","Date","now","Math","random","toString","substr","executionEvents","getEvents","event_type","start_time","start","end_time","end","promptExecutions","filter","event","entity_id","data","prompt_id","metrics","calculatePromptMetrics","patterns","analyzeExecutionPatterns","effectiveness","calculateEffectivenessScore","recommendations","generateRecommendations","trends","calculateTrends","securityIssues","analyzeSecurityIssues","result","timestamp","recordEvent","entity_type","error","console","Error","message","comparePrompts","promptA","promptB","testCases","model","resultsA","testPromptPerformance","resultsB","metricsA","calculateTestMetrics","metricsB","scoreA","calculateWeightedScore","scoreB","winner","confidence","abs","max","analysisPrompt","responseTime","successRate","qualityScore","analysis","llmService","generate","A","B","response","getPromptEvolution","evolutionEvents","map","length","averageResponseTime","totalExecutions","consistencyScore","successfulExecutions","e","passed","reduce","sum","execution_time","responseTimes","variance","calculateVariance","successfulEvents","failedEvents","JSON","parse","successPatterns","failurePatterns","commonErrors","successScore","responseTimeScore","patternScore","weightedScore","category","reasoning","score","round","recommendationPrompt","join","rec","priority","type","suggestion","expectedImprovement","groupedByHour","groupEventsByHour","performanceOverTime","group","events","successRateOverTime","rate","injectionPatterns","pattern","test","push","severity","description","source","recommendation","sensitivePatterns","manipulationPatterns","prompt","results","testCase","startTime","fullPrompt","input","quality","calculateResponseQuality","expectedOutput","success","totalTests","successfulTests","r","averageQuality","normalizedResponseTime","expected","responseWords","toLowerCase","split","expectedWords","commonWords","word","includes","similarity","min","groups","Map","forEach","hourKey","getFullYear","getMonth","getDate","getHours","has","set","get","Array","from","entries","key","parts","Number","sort","a","getTime","numbers","mean","num","squaredDiffs","pow","diff","setDate","exports","promptAnalyzer"],"sources":["/workspaces/prompt-card-system/backend/src/services/optimization/PromptAnalyzer.ts"],"sourcesContent":["import { EventStore } from '../analytics/EventStore';\nimport { AnalyticsEngine } from '../analytics/AnalyticsEngine';\nimport { llmService } from '../llmService';\nimport { EnhancedAssertionResult } from '../assertions/AssertionEngine';\n\nexport interface PromptAnalysisResult {\n  promptId: string;\n  analysisId: string;\n  effectiveness: {\n    score: number; // 0-100\n    category: 'poor' | 'fair' | 'good' | 'excellent';\n    reasoning: string;\n  };\n  patterns: {\n    successPatterns: string[];\n    failurePatterns: string[];\n    commonErrors: string[];\n  };\n  metrics: {\n    averageResponseTime: number;\n    successRate: number;\n    totalExecutions: number;\n    consistencyScore: number;\n  };\n  recommendations: {\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    type: 'structure' | 'clarity' | 'specificity' | 'context' | 'security';\n    suggestion: string;\n    expectedImprovement: number; // percentage\n  }[];\n  trends: {\n    performanceOverTime: Array<{ timestamp: Date; score: number }>;\n    successRateOverTime: Array<{ timestamp: Date; rate: number }>;\n  };\n  securityIssues: {\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    type: 'injection' | 'leakage' | 'manipulation' | 'compliance';\n    description: string;\n    recommendation: string;\n  }[];\n  timestamp: Date;\n}\n\nexport interface PromptComparisonResult {\n  promptA: string;\n  promptB: string;\n  winner: 'A' | 'B' | 'tie';\n  confidence: number;\n  metrics: {\n    responseTime: { A: number; B: number };\n    successRate: { A: number; B: number };\n    qualityScore: { A: number; B: number };\n  };\n  analysis: string;\n}\n\nexport class PromptAnalyzer {\n  private eventStore: EventStore;\n  private analyticsEngine: AnalyticsEngine;\n  \n  constructor() {\n    this.eventStore = EventStore.getInstance();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n  }\n\n  /**\n   * Analyze prompt effectiveness using historical data and AI insights\n   */\n  async analyzePrompt(\n    promptId: string,\n    promptText: string,\n    timeRange: { start: Date; end: Date } = this.getDefaultTimeRange()\n  ): Promise<PromptAnalysisResult> {\n    const analysisId = `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Gather historical execution data\n      const executionEvents = await this.eventStore.getEvents({\n        event_type: 'test_execution',\n        start_time: timeRange.start,\n        end_time: timeRange.end\n      });\n\n      const promptExecutions = executionEvents.filter(event => \n        event.entity_id === promptId || event.data.prompt_id === promptId\n      );\n\n      // Calculate basic metrics\n      const metrics = this.calculatePromptMetrics(promptExecutions);\n      \n      // Analyze patterns using AI\n      const patterns = await this.analyzeExecutionPatterns(promptExecutions, promptText);\n      \n      // Generate effectiveness score\n      const effectiveness = this.calculateEffectivenessScore(metrics, patterns);\n      \n      // Generate AI-powered recommendations\n      const recommendations = await this.generateRecommendations(\n        promptText, \n        metrics, \n        patterns, \n        effectiveness\n      );\n      \n      // Calculate trends\n      const trends = this.calculateTrends(promptExecutions);\n      \n      // Perform security analysis\n      const securityIssues = await this.analyzeSecurityIssues(promptText);\n      \n      const result: PromptAnalysisResult = {\n        promptId,\n        analysisId,\n        effectiveness,\n        patterns,\n        metrics,\n        recommendations,\n        trends,\n        securityIssues,\n        timestamp: new Date()\n      };\n\n      // Store analysis result\n      await this.eventStore.recordEvent({\n        event_type: 'prompt_analysis',\n        entity_id: promptId,\n        entity_type: 'prompt',\n        data: result,\n        timestamp: new Date()\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error analyzing prompt:', error);\n      throw new Error(`Prompt analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Compare two prompts and determine which performs better\n   */\n  async comparePrompts(\n    promptA: string,\n    promptB: string,\n    testCases: Array<{ input: string; expectedOutput: string }>,\n    model: string = 'llama3'\n  ): Promise<PromptComparisonResult> {\n    try {\n      const resultsA = await this.testPromptPerformance(promptA, testCases, model);\n      const resultsB = await this.testPromptPerformance(promptB, testCases, model);\n      \n      const metricsA = this.calculateTestMetrics(resultsA);\n      const metricsB = this.calculateTestMetrics(resultsB);\n      \n      // Determine winner based on weighted scoring\n      const scoreA = this.calculateWeightedScore(metricsA);\n      const scoreB = this.calculateWeightedScore(metricsB);\n      \n      let winner: 'A' | 'B' | 'tie';\n      let confidence: number;\n      \n      if (Math.abs(scoreA - scoreB) < 0.1) {\n        winner = 'tie';\n        confidence = 1 - Math.abs(scoreA - scoreB);\n      } else if (scoreA > scoreB) {\n        winner = 'A';\n        confidence = (scoreA - scoreB) / Math.max(scoreA, scoreB);\n      } else {\n        winner = 'B';\n        confidence = (scoreB - scoreA) / Math.max(scoreA, scoreB);\n      }\n      \n      // Generate AI analysis\n      const analysisPrompt = `\n        Compare these two prompts and their performance:\n        \n        Prompt A: \"${promptA}\"\n        Metrics A: Response Time: ${metricsA.responseTime}ms, Success Rate: ${metricsA.successRate}%, Quality: ${metricsA.qualityScore}\n        \n        Prompt B: \"${promptB}\"  \n        Metrics B: Response Time: ${metricsB.responseTime}ms, Success Rate: ${metricsB.successRate}%, Quality: ${metricsB.qualityScore}\n        \n        Provide a detailed analysis of the differences and why one performs better.\n      `;\n      \n      const analysis = await llmService.generate(analysisPrompt, model);\n      \n      return {\n        promptA,\n        promptB,\n        winner,\n        confidence,\n        metrics: {\n          responseTime: { A: metricsA.responseTime, B: metricsB.responseTime },\n          successRate: { A: metricsA.successRate, B: metricsB.successRate },\n          qualityScore: { A: metricsA.qualityScore, B: metricsB.qualityScore }\n        },\n        analysis: analysis.response\n      };\n    } catch (error) {\n      console.error('Error comparing prompts:', error);\n      throw new Error(`Prompt comparison failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get evolution history of a prompt\n   */\n  async getPromptEvolution(promptId: string): Promise<Array<{\n    version: string;\n    timestamp: Date;\n    changes: string[];\n    performance: {\n      successRate: number;\n      responseTime: number;\n      qualityScore: number;\n    };\n    reasoning: string;\n  }>> {\n    const evolutionEvents = await this.eventStore.getEvents({\n      event_type: 'prompt_evolution',\n      entity_id: promptId\n    });\n    \n    return evolutionEvents.map(event => event.data);\n  }\n\n  /**\n   * Calculate basic metrics from execution events\n   */\n  private calculatePromptMetrics(executionEvents: any[]): PromptAnalysisResult['metrics'] {\n    if (executionEvents.length === 0) {\n      return {\n        averageResponseTime: 0,\n        successRate: 0,\n        totalExecutions: 0,\n        consistencyScore: 0\n      };\n    }\n\n    const totalExecutions = executionEvents.length;\n    const successfulExecutions = executionEvents.filter(e => e.data.passed).length;\n    const averageResponseTime = executionEvents.reduce((sum, e) => sum + e.data.execution_time, 0) / totalExecutions;\n    \n    // Calculate consistency score based on response time variance\n    const responseTimes = executionEvents.map(e => e.data.execution_time);\n    const variance = this.calculateVariance(responseTimes);\n    const consistencyScore = Math.max(0, 100 - (variance / averageResponseTime) * 100);\n    \n    return {\n      averageResponseTime,\n      successRate: (successfulExecutions / totalExecutions) * 100,\n      totalExecutions,\n      consistencyScore\n    };\n  }\n\n  /**\n   * Analyze execution patterns using AI\n   */\n  private async analyzeExecutionPatterns(\n    executionEvents: any[], \n    promptText: string\n  ): Promise<PromptAnalysisResult['patterns']> {\n    const successfulEvents = executionEvents.filter(e => e.data.passed);\n    const failedEvents = executionEvents.filter(e => !e.data.passed);\n    \n    const analysisPrompt = `\n      Analyze this prompt and its execution patterns:\n      \n      Prompt: \"${promptText}\"\n      \n      Successful executions: ${successfulEvents.length}\n      Failed executions: ${failedEvents.length}\n      \n      Based on this data, identify:\n      1. Patterns that lead to success\n      2. Patterns that lead to failure  \n      3. Common errors or issues\n      \n      Return a JSON object with arrays for successPatterns, failurePatterns, and commonErrors.\n    `;\n    \n    try {\n      const analysis = await llmService.generate(analysisPrompt);\n      const patterns = JSON.parse(analysis.response);\n      \n      return {\n        successPatterns: patterns.successPatterns || [],\n        failurePatterns: patterns.failurePatterns || [],\n        commonErrors: patterns.commonErrors || []\n      };\n    } catch (error) {\n      console.error('Error analyzing patterns:', error);\n      return {\n        successPatterns: [],\n        failurePatterns: [],\n        commonErrors: []\n      };\n    }\n  }\n\n  /**\n   * Calculate effectiveness score\n   */\n  private calculateEffectivenessScore(\n    metrics: PromptAnalysisResult['metrics'],\n    patterns: PromptAnalysisResult['patterns']\n  ): PromptAnalysisResult['effectiveness'] {\n    // Weighted scoring: Success Rate (40%), Response Time (30%), Consistency (20%), Pattern Quality (10%)\n    const successScore = metrics.successRate; // 0-100\n    const responseTimeScore = Math.max(0, 100 - (metrics.averageResponseTime / 1000) * 10); // Penalize slow responses\n    const consistencyScore = metrics.consistencyScore; // 0-100\n    const patternScore = Math.max(0, 100 - patterns.failurePatterns.length * 10); // Penalize failure patterns\n    \n    const weightedScore = (\n      successScore * 0.4 + \n      responseTimeScore * 0.3 + \n      consistencyScore * 0.2 + \n      patternScore * 0.1\n    );\n    \n    let category: 'poor' | 'fair' | 'good' | 'excellent';\n    let reasoning: string;\n    \n    if (weightedScore >= 85) {\n      category = 'excellent';\n      reasoning = 'High success rate with consistent performance and minimal failure patterns';\n    } else if (weightedScore >= 70) {\n      category = 'good';\n      reasoning = 'Good performance with room for minor improvements';\n    } else if (weightedScore >= 50) {\n      category = 'fair';\n      reasoning = 'Average performance with noticeable issues that need attention';\n    } else {\n      category = 'poor';\n      reasoning = 'Poor performance with significant issues requiring immediate attention';\n    }\n    \n    return {\n      score: Math.round(weightedScore),\n      category,\n      reasoning\n    };\n  }\n\n  /**\n   * Generate AI-powered recommendations\n   */\n  private async generateRecommendations(\n    promptText: string,\n    metrics: PromptAnalysisResult['metrics'],\n    patterns: PromptAnalysisResult['patterns'],\n    effectiveness: PromptAnalysisResult['effectiveness']\n  ): Promise<PromptAnalysisResult['recommendations']> {\n    const recommendationPrompt = `\n      Analyze this prompt and provide improvement recommendations:\n      \n      Prompt: \"${promptText}\"\n      \n      Current Performance:\n      - Success Rate: ${metrics.successRate}%\n      - Average Response Time: ${metrics.averageResponseTime}ms\n      - Consistency Score: ${metrics.consistencyScore}%\n      - Effectiveness: ${effectiveness.score}/100 (${effectiveness.category})\n      \n      Failure Patterns: ${patterns.failurePatterns.join(', ')}\n      Common Errors: ${patterns.commonErrors.join(', ')}\n      \n      Provide specific, actionable recommendations to improve this prompt.\n      Return a JSON array with objects containing: priority, type, suggestion, expectedImprovement.\n    `;\n    \n    try {\n      const response = await llmService.generate(recommendationPrompt);\n      const recommendations = JSON.parse(response.response);\n      \n      return recommendations.map((rec: any) => ({\n        priority: rec.priority || 'medium',\n        type: rec.type || 'structure',\n        suggestion: rec.suggestion || 'No specific suggestion provided',\n        expectedImprovement: rec.expectedImprovement || 5\n      }));\n    } catch (error) {\n      console.error('Error generating recommendations:', error);\n      return [\n        {\n          priority: 'medium' as const,\n          type: 'structure' as const,\n          suggestion: 'Consider adding more specific instructions and examples',\n          expectedImprovement: 10\n        }\n      ];\n    }\n  }\n\n  /**\n   * Calculate trends from execution data\n   */\n  private calculateTrends(executionEvents: any[]): PromptAnalysisResult['trends'] {\n    const groupedByHour = this.groupEventsByHour(executionEvents);\n    \n    const performanceOverTime = groupedByHour.map(group => ({\n      timestamp: group.timestamp,\n      score: group.events.length > 0 ? \n        group.events.reduce((sum, e) => sum + (e.data.passed ? 100 : 0), 0) / group.events.length : 0\n    }));\n    \n    const successRateOverTime = groupedByHour.map(group => ({\n      timestamp: group.timestamp,\n      rate: group.events.length > 0 ? \n        group.events.filter(e => e.data.passed).length / group.events.length : 0\n    }));\n    \n    return {\n      performanceOverTime,\n      successRateOverTime\n    };\n  }\n\n  /**\n   * Analyze security issues in prompt\n   */\n  private async analyzeSecurityIssues(promptText: string): Promise<PromptAnalysisResult['securityIssues']> {\n    const securityIssues: PromptAnalysisResult['securityIssues'] = [];\n    \n    // Check for prompt injection patterns\n    const injectionPatterns = [\n      /ignore.*previous.*instructions/i,\n      /system.*prompt/i,\n      /role.*play/i,\n      /jailbreak/i,\n      /pretend.*you.*are/i,\n      /forget.*everything/i,\n      /new.*instructions/i,\n      /override.*safety/i\n    ];\n    \n    for (const pattern of injectionPatterns) {\n      if (pattern.test(promptText)) {\n        securityIssues.push({\n          severity: 'high',\n          type: 'injection',\n          description: `Potential prompt injection pattern detected: ${pattern.source}`,\n          recommendation: 'Review and sanitize prompt to prevent injection attacks'\n        });\n      }\n    }\n    \n    // Check for sensitive information leakage\n    const sensitivePatterns = [\n      /password/i,\n      /api.*key/i,\n      /secret/i,\n      /token/i,\n      /credential/i,\n      /private.*key/i\n    ];\n    \n    for (const pattern of sensitivePatterns) {\n      if (pattern.test(promptText)) {\n        securityIssues.push({\n          severity: 'critical',\n          type: 'leakage',\n          description: `Potential sensitive information detected: ${pattern.source}`,\n          recommendation: 'Remove or mask sensitive information from prompt'\n        });\n      }\n    }\n    \n    // Check for manipulation attempts\n    const manipulationPatterns = [\n      /you.*must/i,\n      /you.*have.*to/i,\n      /required.*to/i,\n      /bypass.*restrictions/i,\n      /special.*permissions/i\n    ];\n    \n    for (const pattern of manipulationPatterns) {\n      if (pattern.test(promptText)) {\n        securityIssues.push({\n          severity: 'medium',\n          type: 'manipulation',\n          description: `Potential manipulation attempt detected: ${pattern.source}`,\n          recommendation: 'Review prompt for manipulative language'\n        });\n      }\n    }\n    \n    return securityIssues;\n  }\n\n  /**\n   * Test prompt performance with given test cases\n   */\n  private async testPromptPerformance(\n    prompt: string,\n    testCases: Array<{ input: string; expectedOutput: string }>,\n    model: string\n  ): Promise<Array<{ responseTime: number; success: boolean; quality: number }>> {\n    const results = [];\n    \n    for (const testCase of testCases) {\n      const startTime = Date.now();\n      const fullPrompt = `${prompt}\\n\\nInput: ${testCase.input}`;\n      \n      try {\n        const response = await llmService.generate(fullPrompt, model);\n        const responseTime = Date.now() - startTime;\n        \n        // Simple quality scoring based on similarity to expected output\n        const quality = this.calculateResponseQuality(response.response, testCase.expectedOutput);\n        const success = quality > 0.7; // Consider success if quality > 70%\n        \n        results.push({ responseTime, success, quality });\n      } catch (error) {\n        results.push({ responseTime: Date.now() - startTime, success: false, quality: 0 });\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Calculate metrics from test results\n   */\n  private calculateTestMetrics(results: Array<{ responseTime: number; success: boolean; quality: number }>) {\n    const totalTests = results.length;\n    const successfulTests = results.filter(r => r.success).length;\n    const averageResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / totalTests;\n    const averageQuality = results.reduce((sum, r) => sum + r.quality, 0) / totalTests;\n    \n    return {\n      responseTime: averageResponseTime,\n      successRate: (successfulTests / totalTests) * 100,\n      qualityScore: averageQuality * 100\n    };\n  }\n\n  /**\n   * Calculate weighted score for comparison\n   */\n  private calculateWeightedScore(metrics: { responseTime: number; successRate: number; qualityScore: number }) {\n    // Normalize response time (lower is better)\n    const normalizedResponseTime = Math.max(0, 100 - (metrics.responseTime / 1000) * 10);\n    \n    // Weighted scoring: Success Rate (40%), Quality (40%), Response Time (20%)\n    return (\n      metrics.successRate * 0.4 + \n      metrics.qualityScore * 0.4 + \n      normalizedResponseTime * 0.2\n    ) / 100;\n  }\n\n  /**\n   * Calculate response quality using simple similarity\n   */\n  private calculateResponseQuality(response: string, expected: string): number {\n    const responseWords = response.toLowerCase().split(/\\s+/);\n    const expectedWords = expected.toLowerCase().split(/\\s+/);\n    \n    const commonWords = responseWords.filter(word => expectedWords.includes(word));\n    const similarity = commonWords.length / Math.max(responseWords.length, expectedWords.length);\n    \n    return Math.min(1, similarity * 2); // Boost similarity score\n  }\n\n  /**\n   * Group events by hour\n   */\n  private groupEventsByHour(events: any[]): Array<{ timestamp: Date; events: any[] }> {\n    const groups = new Map<string, any[]>();\n    \n    events.forEach(event => {\n      const timestamp = new Date(event.timestamp);\n      const hourKey = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}`;\n      \n      if (!groups.has(hourKey)) {\n        groups.set(hourKey, []);\n      }\n      groups.get(hourKey)!.push(event);\n    });\n    \n    return Array.from(groups.entries())\n      .map(([key, events]) => {\n        const parts = key.split('-').map(Number);\n        const timestamp = new Date(parts[0], parts[1], parts[2], parts[3]);\n        return { timestamp, events };\n      })\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  /**\n   * Calculate variance of an array of numbers\n   */\n  private calculateVariance(numbers: number[]): number {\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    const squaredDiffs = numbers.map(num => Math.pow(num - mean, 2));\n    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / numbers.length;\n  }\n\n  /**\n   * Get default time range (last 7 days)\n   */\n  private getDefaultTimeRange(): { start: Date; end: Date } {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - 7);\n    return { start, end };\n  }\n}\n\n// Export singleton instance\nexport const promptAnalyzer = new PromptAnalyzer();"],"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","ignoreList":[]}