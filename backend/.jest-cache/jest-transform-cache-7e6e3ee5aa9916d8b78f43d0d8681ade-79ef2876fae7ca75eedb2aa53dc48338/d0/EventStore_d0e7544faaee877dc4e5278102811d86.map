{"version":3,"names":["cov_1uf5qqmc8s","actualCoverage","s","connection_1","require","EventStore","constructor","f","initializeDb","db","initializeDatabase","initializeEventStore","getInstance","instance","b","exec","recordEvent","event","stmt","prepare","result","run","event_type","entity_id","entity_type","JSON","stringify","data","timestamp","getTime","user_id","session_id","metadata","lastInsertRowid","toString","recordBatch","events","transaction","ids","push","getEvents","query","sql","params","start_time","end_time","limit","offset","rows","all","map","row","typedRow","id","parse","Date","getEventCount","get","count","storeMetric","metricType","metricName","value","dimensions","period","now","getMetrics","startTime","endTime","metric_name","clearOldEvents","olderThanDays","cutoffTime","setDate","getDate","changes","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/EventStore.ts"],"sourcesContent":["import { Database } from 'better-sqlite3';\nimport { initializeDatabase } from '../../database/connection';\n\nexport interface AnalyticsEvent {\n  id?: string;\n  event_type: string;\n  entity_id: string;\n  entity_type: string;\n  data: any;\n  timestamp: Date;\n  user_id?: string;\n  session_id?: string;\n  metadata?: any;\n}\n\nexport interface EventQuery {\n  event_type?: string;\n  entity_type?: string;\n  entity_id?: string;\n  start_time?: Date;\n  end_time?: Date;\n  limit?: number;\n  offset?: number;\n}\n\nexport class EventStore {\n  private db: any;\n  private static instance: EventStore;\n\n  private constructor() {\n    this.initializeDb();\n  }\n\n  private async initializeDb(): Promise<void> {\n    this.db = await initializeDatabase();\n    this.initializeEventStore();\n  }\n\n  public static getInstance(): EventStore {\n    if (!EventStore.instance) {\n      EventStore.instance = new EventStore();\n    }\n    return EventStore.instance;\n  }\n\n  private initializeEventStore(): void {\n    // Create analytics events table\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS analytics_events (\n        id TEXT PRIMARY KEY DEFAULT (hex(randomblob(16))),\n        event_type TEXT NOT NULL,\n        entity_id TEXT NOT NULL,\n        entity_type TEXT NOT NULL,\n        data TEXT NOT NULL,\n        timestamp INTEGER NOT NULL,\n        user_id TEXT,\n        session_id TEXT,\n        metadata TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for performance\n    this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_type ON analytics_events(event_type);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_entity ON analytics_events(entity_type, entity_id);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_timestamp ON analytics_events(timestamp);\n      CREATE INDEX IF NOT EXISTS idx_analytics_events_session ON analytics_events(session_id);\n    `);\n\n    // Create aggregated metrics table for performance\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS analytics_metrics (\n        id TEXT PRIMARY KEY DEFAULT (hex(randomblob(16))),\n        metric_type TEXT NOT NULL,\n        metric_name TEXT NOT NULL,\n        value REAL NOT NULL,\n        dimensions TEXT,\n        timestamp INTEGER NOT NULL,\n        period TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for metrics\n    this.db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_analytics_metrics_type ON analytics_metrics(metric_type, metric_name);\n      CREATE INDEX IF NOT EXISTS idx_analytics_metrics_timestamp ON analytics_metrics(timestamp, period);\n    `);\n  }\n\n  public async recordEvent(event: AnalyticsEvent): Promise<string> {\n    const stmt = this.db.prepare(`\n      INSERT INTO analytics_events (event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const result = stmt.run(\n      event.event_type,\n      event.entity_id,\n      event.entity_type,\n      JSON.stringify(event.data),\n      event.timestamp.getTime(),\n      event.user_id,\n      event.session_id,\n      event.metadata ? JSON.stringify(event.metadata) : null\n    );\n\n    return result.lastInsertRowid.toString();\n  }\n\n  public async recordBatch(events: AnalyticsEvent[]): Promise<string[]> {\n    const stmt = this.db.prepare(`\n      INSERT INTO analytics_events (event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const transaction = this.db.transaction(() => {\n      const ids: string[] = [];\n      for (const event of events) {\n        const result = stmt.run(\n          event.event_type,\n          event.entity_id,\n          event.entity_type,\n          JSON.stringify(event.data),\n          event.timestamp.getTime(),\n          event.user_id,\n          event.session_id,\n          event.metadata ? JSON.stringify(event.metadata) : null\n        );\n        ids.push(result.lastInsertRowid.toString());\n      }\n      return ids;\n    });\n\n    return transaction();\n  }\n\n  public async getEvents(query: EventQuery): Promise<AnalyticsEvent[]> {\n    let sql = `\n      SELECT id, event_type, entity_id, entity_type, data, timestamp, user_id, session_id, metadata\n      FROM analytics_events\n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    if (query.event_type) {\n      sql += ` AND event_type = ?`;\n      params.push(query.event_type);\n    }\n\n    if (query.entity_type) {\n      sql += ` AND entity_type = ?`;\n      params.push(query.entity_type);\n    }\n\n    if (query.entity_id) {\n      sql += ` AND entity_id = ?`;\n      params.push(query.entity_id);\n    }\n\n    if (query.start_time) {\n      sql += ` AND timestamp >= ?`;\n      params.push(query.start_time.getTime());\n    }\n\n    if (query.end_time) {\n      sql += ` AND timestamp <= ?`;\n      params.push(query.end_time.getTime());\n    }\n\n    sql += ` ORDER BY timestamp DESC`;\n\n    if (query.limit) {\n      sql += ` LIMIT ?`;\n      params.push(query.limit);\n    }\n\n    if (query.offset) {\n      sql += ` OFFSET ?`;\n      params.push(query.offset);\n    }\n\n    const stmt = this.db.prepare(sql);\n    const rows = stmt.all(...params);\n\n    return rows.map(row => {\n      const typedRow = row as any;\n      return {\n        id: typedRow.id,\n        event_type: typedRow.event_type,\n        entity_id: typedRow.entity_id,\n        entity_type: typedRow.entity_type,\n        data: JSON.parse(typedRow.data),\n        timestamp: new Date(typedRow.timestamp),\n        user_id: typedRow.user_id,\n        session_id: typedRow.session_id,\n        metadata: typedRow.metadata ? JSON.parse(typedRow.metadata) : null\n      };\n    });\n  }\n\n  public async getEventCount(query: EventQuery): Promise<number> {\n    let sql = `\n      SELECT COUNT(*) as count\n      FROM analytics_events\n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    if (query.event_type) {\n      sql += ` AND event_type = ?`;\n      params.push(query.event_type);\n    }\n\n    if (query.entity_type) {\n      sql += ` AND entity_type = ?`;\n      params.push(query.entity_type);\n    }\n\n    if (query.entity_id) {\n      sql += ` AND entity_id = ?`;\n      params.push(query.entity_id);\n    }\n\n    if (query.start_time) {\n      sql += ` AND timestamp >= ?`;\n      params.push(query.start_time.getTime());\n    }\n\n    if (query.end_time) {\n      sql += ` AND timestamp <= ?`;\n      params.push(query.end_time.getTime());\n    }\n\n    const stmt = this.db.prepare(sql);\n    const result = stmt.get(...params) as any;\n    return result.count;\n  }\n\n  public async storeMetric(\n    metricType: string,\n    metricName: string,\n    value: number,\n    dimensions?: Record<string, any>,\n    period: string = 'hour'\n  ): Promise<void> {\n    const stmt = this.db.prepare(`\n      INSERT INTO analytics_metrics (metric_type, metric_name, value, dimensions, timestamp, period)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      metricType,\n      metricName,\n      value,\n      dimensions ? JSON.stringify(dimensions) : null,\n      Date.now(),\n      period\n    );\n  }\n\n  public async getMetrics(\n    metricType: string,\n    metricName: string,\n    startTime?: Date,\n    endTime?: Date,\n    period?: string\n  ): Promise<any[]> {\n    let sql = `\n      SELECT metric_name, value, dimensions, timestamp, period\n      FROM analytics_metrics\n      WHERE metric_type = ? AND metric_name = ?\n    `;\n    const params: any[] = [metricType, metricName];\n\n    if (startTime) {\n      sql += ` AND timestamp >= ?`;\n      params.push(startTime.getTime());\n    }\n\n    if (endTime) {\n      sql += ` AND timestamp <= ?`;\n      params.push(endTime.getTime());\n    }\n\n    if (period) {\n      sql += ` AND period = ?`;\n      params.push(period);\n    }\n\n    sql += ` ORDER BY timestamp DESC`;\n\n    const stmt = this.db.prepare(sql);\n    const rows = stmt.all(...params);\n\n    return rows.map(row => {\n      const typedRow = row as any;\n      return {\n        metric_name: typedRow.metric_name,\n        value: typedRow.value,\n        dimensions: typedRow.dimensions ? JSON.parse(typedRow.dimensions) : null,\n        timestamp: new Date(typedRow.timestamp),\n        period: typedRow.period\n      };\n    });\n  }\n\n  public async clearOldEvents(olderThanDays: number = 90): Promise<number> {\n    const cutoffTime = new Date();\n    cutoffTime.setDate(cutoffTime.getDate() - olderThanDays);\n\n    const stmt = this.db.prepare(`\n      DELETE FROM analytics_events\n      WHERE timestamp < ?\n    `);\n\n    const result = stmt.run(cutoffTime.getTime());\n    return result.changes;\n  }\n}"],"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","ignoreList":[]}