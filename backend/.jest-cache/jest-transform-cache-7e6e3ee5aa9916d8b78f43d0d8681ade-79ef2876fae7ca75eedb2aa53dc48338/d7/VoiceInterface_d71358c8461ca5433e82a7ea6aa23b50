e31baf7d7cf501e396cd09a831e4dd5e
"use strict";

/* istanbul ignore next */
function cov_zeek9514e() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/VoiceInterface.ts";
  var hash = "9e60973075f4b58d93fd2a68fdd0cd520c1aadd1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/VoiceInterface.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 6,
          column: 64
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 16
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 79
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 89
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 89
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "12": {
        start: {
          line: 22,
          column: 34
        },
        end: {
          line: 22,
          column: 78
        }
      },
      "13": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 24,
          column: 83
        }
      },
      "14": {
        start: {
          line: 26,
          column: 33
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "16": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 44,
          column: 68
        }
      },
      "17": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 71
        }
      },
      "18": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 28
        }
      },
      "19": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 68
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "21": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 60,
          column: 14
        }
      },
      "22": {
        start: {
          line: 67,
          column: 37
        },
        end: {
          line: 67,
          column: 44
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "24": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 63
        }
      },
      "25": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 58
        }
      },
      "26": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 63
        }
      },
      "27": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 62
        }
      },
      "28": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 63
        }
      },
      "29": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 64
        }
      },
      "30": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 65
        }
      },
      "31": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 63
        }
      },
      "32": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 64
        }
      },
      "33": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 57
        }
      },
      "34": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 61
        }
      },
      "35": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 53
        }
      },
      "36": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "37": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 57
        }
      },
      "38": {
        start: {
          line: 113,
          column: 22
        },
        end: {
          line: 113,
          column: 49
        }
      },
      "39": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "40": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 118,
          column: 14
        }
      },
      "41": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 129,
          column: 10
        }
      },
      "42": {
        start: {
          line: 135,
          column: 26
        },
        end: {
          line: 135,
          column: 55
        }
      },
      "43": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 52
        }
      },
      "44": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "45": {
        start: {
          line: 138,
          column: 28
        },
        end: {
          line: 138,
          column: 76
        }
      },
      "46": {
        start: {
          line: 139,
          column: 31
        },
        end: {
          line: 139,
          column: 33
        }
      },
      "47": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 140,
          column: 25
        }
      },
      "48": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "49": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 115
        }
      },
      "50": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 124
        }
      },
      "51": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 73
        }
      },
      "52": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 26
        }
      },
      "53": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 128
        }
      },
      "54": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 101
        }
      },
      "55": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 82
        }
      },
      "56": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 26
        }
      },
      "57": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 70
        }
      },
      "58": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 85
        }
      },
      "59": {
        start: {
          line: 155,
          column: 20
        },
        end: {
          line: 155,
          column: 105
        }
      },
      "60": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 114
        }
      },
      "61": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 35
        }
      },
      "62": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "63": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 174,
          column: 14
        }
      },
      "64": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 49
        }
      },
      "65": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "66": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 47
        }
      },
      "67": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 198,
          column: 59
        }
      },
      "68": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "69": {
        start: {
          line: 214,
          column: 23
        },
        end: {
          line: 214,
          column: 38
        }
      },
      "70": {
        start: {
          line: 215,
          column: 23
        },
        end: {
          line: 215,
          column: 38
        }
      },
      "71": {
        start: {
          line: 216,
          column: 23
        },
        end: {
          line: 216,
          column: 55
        }
      },
      "72": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "73": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 225,
          column: 14
        }
      },
      "74": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 236,
          column: 10
        }
      },
      "75": {
        start: {
          line: 242,
          column: 25
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "76": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "77": {
        start: {
          line: 258,
          column: 25
        },
        end: {
          line: 258,
          column: 59
        }
      },
      "78": {
        start: {
          line: 259,
          column: 21
        },
        end: {
          line: 259,
          column: 53
        }
      },
      "79": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 269,
          column: 10
        }
      },
      "80": {
        start: {
          line: 275,
          column: 24
        },
        end: {
          line: 275,
          column: 40
        }
      },
      "81": {
        start: {
          line: 276,
          column: 22
        },
        end: {
          line: 276,
          column: 36
        }
      },
      "82": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 286,
          column: 10
        }
      },
      "83": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 300,
          column: 10
        }
      },
      "84": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 43
        }
      },
      "85": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 34
        }
      },
      "86": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 63
        }
      },
      "87": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 56
        }
      },
      "88": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 34
        }
      },
      "89": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "90": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 58
        }
      },
      "91": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 38
        }
      },
      "92": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 44
        }
      },
      "93": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 47
        }
      },
      "94": {
        start: {
          line: 349,
          column: 0
        },
        end: {
          line: 349,
          column: 40
        }
      },
      "95": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 40
        }
      },
      "96": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 42
        }
      },
      "97": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 34
        }
      },
      "98": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 365,
          column: 11
        }
      },
      "99": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 371,
          column: 11
        }
      },
      "100": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 377,
          column: 11
        }
      },
      "101": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 382,
          column: 11
        }
      },
      "102": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 388,
          column: 11
        }
      },
      "103": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 393,
          column: 11
        }
      },
      "104": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 398,
          column: 11
        }
      },
      "105": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      },
      "106": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 409,
          column: 11
        }
      },
      "107": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 86
        }
      },
      "108": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 83
        }
      },
      "109": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 413,
          column: 86
        }
      },
      "110": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 105
        }
      },
      "111": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 90
        }
      },
      "112": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 87
        }
      },
      "113": {
        start: {
          line: 419,
          column: 31
        },
        end: {
          line: 419,
          column: 56
        }
      },
      "114": {
        start: {
          line: 420,
          column: 25
        },
        end: {
          line: 420,
          column: 34
        }
      },
      "115": {
        start: {
          line: 421,
          column: 23
        },
        end: {
          line: 421,
          column: 24
        }
      },
      "116": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "117": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 432,
          column: 13
        }
      },
      "118": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 431,
          column: 17
        }
      },
      "119": {
        start: {
          line: 426,
          column: 34
        },
        end: {
          line: 426,
          column: 85
        }
      },
      "120": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 430,
          column: 21
        }
      },
      "121": {
        start: {
          line: 428,
          column: 24
        },
        end: {
          line: 428,
          column: 41
        }
      },
      "122": {
        start: {
          line: 429,
          column: 24
        },
        end: {
          line: 429,
          column: 44
        }
      },
      "123": {
        start: {
          line: 435,
          column: 25
        },
        end: {
          line: 435,
          column: 27
        }
      },
      "124": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "125": {
        start: {
          line: 437,
          column: 26
        },
        end: {
          line: 437,
          column: 47
        }
      },
      "126": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "127": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 439,
          column: 48
        }
      },
      "128": {
        start: {
          line: 442,
          column: 27
        },
        end: {
          line: 442,
          column: 74
        }
      },
      "129": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 447,
          column: 10
        }
      },
      "130": {
        start: {
          line: 450,
          column: 22
        },
        end: {
          line: 450,
          column: 41
        }
      },
      "131": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 452,
          column: 21
        }
      },
      "132": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 21
        }
      },
      "133": {
        start: {
          line: 454,
          column: 28
        },
        end: {
          line: 454,
          column: 43
        }
      },
      "134": {
        start: {
          line: 455,
          column: 27
        },
        end: {
          line: 455,
          column: 38
        }
      },
      "135": {
        start: {
          line: 456,
          column: 30
        },
        end: {
          line: 456,
          column: 60
        }
      },
      "136": {
        start: {
          line: 457,
          column: 28
        },
        end: {
          line: 457,
          column: 52
        }
      },
      "137": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 69
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 34
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 39
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 34
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 111
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 39
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 134
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 38
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 180
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 39
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 196
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 40
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 213
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 41
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 241
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 39
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 257
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 40
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 274
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 33
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 291
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 305,
            column: 4
          },
          end: {
            line: 305,
            column: 5
          }
        },
        loc: {
          start: {
            line: 305,
            column: 44
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 305
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 313,
            column: 5
          }
        },
        loc: {
          start: {
            line: 313,
            column: 49
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 313
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 30
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 321
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 22
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 329
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        loc: {
          start: {
            line: 338,
            column: 28
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 338
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        loc: {
          start: {
            line: 344,
            column: 37
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 344
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 18
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 354
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 25
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 359
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 31
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 418
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 41
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 449
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 49
          },
          end: {
            line: 19,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 60
          },
          end: {
            line: 19,
            column: 67
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 34,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 34,
            column: 45
          }
        }, {
          start: {
            line: 34,
            column: 49
          },
          end: {
            line: 34,
            column: 58
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 63
          }
        }, {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 72,
            column: 58
          }
        }, {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 74,
            column: 63
          }
        }, {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 62
          }
        }, {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 78,
            column: 63
          }
        }, {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 80,
            column: 64
          }
        }, {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 82,
            column: 65
          }
        }, {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 84,
            column: 63
          }
        }, {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 64
          }
        }, {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 88,
            column: 57
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 40
          }
        }, {
          start: {
            line: 95,
            column: 44
          },
          end: {
            line: 95,
            column: 61
          }
        }],
        line: 95
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 27
          },
          end: {
            line: 96,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 27
          },
          end: {
            line: 96,
            column: 40
          }
        }, {
          start: {
            line: 96,
            column: 44
          },
          end: {
            line: 96,
            column: 53
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 38
          }
        }, {
          start: {
            line: 112,
            column: 42
          },
          end: {
            line: 112,
            column: 57
          }
        }],
        line: 112
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 22
          },
          end: {
            line: 113,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 22
          },
          end: {
            line: 113,
            column: 36
          }
        }, {
          start: {
            line: 113,
            column: 40
          },
          end: {
            line: 113,
            column: 49
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 44
          }
        }, {
          start: {
            line: 135,
            column: 48
          },
          end: {
            line: 135,
            column: 55
          }
        }],
        line: 135
      },
      "9": {
        loc: {
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 136,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 136,
            column: 38
          }
        }, {
          start: {
            line: 136,
            column: 42
          },
          end: {
            line: 136,
            column: 52
          }
        }],
        line: 136
      },
      "10": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 146,
            column: 26
          }
        }, {
          start: {
            line: 147,
            column: 16
          },
          end: {
            line: 151,
            column: 26
          }
        }, {
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 157,
            column: 35
          }
        }],
        line: 141
      },
      "11": {
        loc: {
          start: {
            line: 181,
            column: 27
          },
          end: {
            line: 181,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 27
          },
          end: {
            line: 181,
            column: 40
          }
        }, {
          start: {
            line: 181,
            column: 44
          },
          end: {
            line: 181,
            column: 49
          }
        }],
        line: 181
      },
      "12": {
        loc: {
          start: {
            line: 197,
            column: 23
          },
          end: {
            line: 197,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 23
          },
          end: {
            line: 197,
            column: 38
          }
        }, {
          start: {
            line: 197,
            column: 42
          },
          end: {
            line: 197,
            column: 47
          }
        }],
        line: 197
      },
      "13": {
        loc: {
          start: {
            line: 198,
            column: 26
          },
          end: {
            line: 198,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 26
          },
          end: {
            line: 198,
            column: 44
          }
        }, {
          start: {
            line: 198,
            column: 48
          },
          end: {
            line: 198,
            column: 59
          }
        }],
        line: 198
      },
      "14": {
        loc: {
          start: {
            line: 216,
            column: 23
          },
          end: {
            line: 216,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 23
          },
          end: {
            line: 216,
            column: 38
          }
        }, {
          start: {
            line: 216,
            column: 42
          },
          end: {
            line: 216,
            column: 55
          }
        }],
        line: 216
      },
      "15": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "16": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 19
          }
        }, {
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 217,
            column: 30
          }
        }],
        line: 217
      },
      "17": {
        loc: {
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 242,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 242,
            column: 40
          }
        }, {
          start: {
            line: 242,
            column: 44
          },
          end: {
            line: 242,
            column: 55
          }
        }],
        line: 242
      },
      "18": {
        loc: {
          start: {
            line: 258,
            column: 25
          },
          end: {
            line: 258,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 25
          },
          end: {
            line: 258,
            column: 42
          }
        }, {
          start: {
            line: 258,
            column: 46
          },
          end: {
            line: 258,
            column: 59
          }
        }],
        line: 258
      },
      "19": {
        loc: {
          start: {
            line: 259,
            column: 21
          },
          end: {
            line: 259,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 21
          },
          end: {
            line: 259,
            column: 34
          }
        }, {
          start: {
            line: 259,
            column: 38
          },
          end: {
            line: 259,
            column: 53
          }
        }],
        line: 259
      },
      "20": {
        loc: {
          start: {
            line: 313,
            column: 29
          },
          end: {
            line: 313,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 313,
            column: 40
          },
          end: {
            line: 313,
            column: 47
          }
        }],
        line: 313
      },
      "21": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "22": {
        loc: {
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 431,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 431,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "23": {
        loc: {
          start: {
            line: 427,
            column: 20
          },
          end: {
            line: 430,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 20
          },
          end: {
            line: 430,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "24": {
        loc: {
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "25": {
        loc: {
          start: {
            line: 438,
            column: 16
          },
          end: {
            line: 438,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 16
          },
          end: {
            line: 438,
            column: 21
          }
        }, {
          start: {
            line: 438,
            column: 25
          },
          end: {
            line: 438,
            column: 33
          }
        }],
        line: 438
      },
      "26": {
        loc: {
          start: {
            line: 442,
            column: 27
          },
          end: {
            line: 442,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 442,
            column: 42
          },
          end: {
            line: 442,
            column: 68
          }
        }, {
          start: {
            line: 442,
            column: 71
          },
          end: {
            line: 442,
            column: 74
          }
        }],
        line: 442
      },
      "27": {
        loc: {
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 452,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 452,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/VoiceInterface.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/VoiceInterface.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { BlockchainAuditTrail } from './BlockchainAuditTrail';\n\nexport interface VoiceCommand {\n  id: string;\n  command: string;\n  intent: string;\n  entities: Record<string, string>;\n  confidence: number;\n  timestamp: Date;\n  userId: string;\n  sessionId: string;\n}\n\nexport interface VoiceResponse {\n  text: string;\n  data?: any;\n  actions?: string[];\n  suggestions?: string[];\n}\n\nexport interface NaturalLanguageProcessor {\n  processCommand(text: string): Promise<{\n    intent: string;\n    entities: Record<string, string>;\n    confidence: number;\n  }>;\n}\n\nexport class VoiceInterface extends EventEmitter {\n  private analyticsEngine: AnalyticsEngine;\n  private blockchainAudit: BlockchainAuditTrail;\n  private nlpProcessor: NaturalLanguageProcessor;\n  private supportedLanguages: string[];\n  private activeSession: string | null;\n\n  constructor() {\n    super();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.blockchainAudit = BlockchainAuditTrail.getInstance();\n    this.nlpProcessor = new AdvancedNLPProcessor();\n    this.supportedLanguages = ['en-US', 'es-ES', 'fr-FR', 'de-DE', 'ja-JP', 'zh-CN'];\n    this.activeSession = null;\n  }\n\n  /**\n   * Process voice command and return response\n   */\n  public async processVoiceCommand(\n    audioData: ArrayBuffer,\n    userId: string,\n    language: string = 'en-US'\n  ): Promise<VoiceResponse> {\n    try {\n      // Convert speech to text\n      const transcription = await this.speechToText(audioData, language);\n      \n      // Process with NLP\n      const nlpResult = await this.nlpProcessor.processCommand(transcription);\n      \n      // Create voice command record\n      const voiceCommand: VoiceCommand = {\n        id: `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        command: transcription,\n        intent: nlpResult.intent,\n        entities: nlpResult.entities,\n        confidence: nlpResult.confidence,\n        timestamp: new Date(),\n        userId,\n        sessionId: this.activeSession || 'default'\n      };\n\n      // Log to blockchain audit trail\n      await this.blockchainAudit.recordAuditEvent({\n        eventType: 'voice_command',\n        userId,\n        data: voiceCommand,\n        timestamp: new Date()\n      });\n\n      // Execute command based on intent\n      const response = await this.executeCommand(voiceCommand);\n      \n      this.emit('voiceCommandProcessed', voiceCommand, response);\n      \n      return response;\n    } catch (error) {\n      console.error('Error processing voice command:', error);\n      \n      // Log error to audit trail\n      await this.blockchainAudit.recordAuditEvent({\n        eventType: 'voice_command_error',\n        userId,\n        data: { error: error.message },\n        timestamp: new Date()\n      });\n\n      return {\n        text: 'I apologize, but I encountered an error processing your voice command. Please try again.',\n        suggestions: ['Try speaking more clearly', 'Check your microphone', 'Use simpler commands']\n      };\n    }\n  }\n\n  /**\n   * Execute command based on intent\n   */\n  private async executeCommand(command: VoiceCommand): Promise<VoiceResponse> {\n    const { intent, entities } = command;\n\n    switch (intent) {\n      case 'create_prompt':\n        return await this.handleCreatePrompt(entities);\n      \n      case 'run_test':\n        return await this.handleRunTest(entities);\n      \n      case 'get_analytics':\n        return await this.handleGetAnalytics(entities);\n      \n      case 'show_metrics':\n        return await this.handleShowMetrics(entities);\n      \n      case 'export_report':\n        return await this.handleExportReport(entities);\n      \n      case 'compare_models':\n        return await this.handleCompareModels(entities);\n      \n      case 'optimize_prompt':\n        return await this.handleOptimizePrompt(entities);\n      \n      case 'schedule_test':\n        return await this.handleScheduleTest(entities);\n      \n      case 'voice_settings':\n        return await this.handleVoiceSettings(entities);\n      \n      default:\n        return this.handleUnknownIntent(command);\n    }\n  }\n\n  /**\n   * Handle create prompt command\n   */\n  private async handleCreatePrompt(entities: Record<string, string>): Promise<VoiceResponse> {\n    const promptName = entities.name || 'Untitled Prompt';\n    const promptType = entities.type || 'general';\n    \n    return {\n      text: `I'll help you create a new prompt card called \"${promptName}\" of type \"${promptType}\". What content would you like to include?`,\n      actions: ['open_prompt_editor'],\n      data: { name: promptName, type: promptType },\n      suggestions: [\n        'Add test cases',\n        'Set model parameters',\n        'Configure assertions'\n      ]\n    };\n  }\n\n  /**\n   * Handle run test command\n   */\n  private async handleRunTest(entities: Record<string, string>): Promise<VoiceResponse> {\n    const testName = entities.test || entities.prompt;\n    const model = entities.model || 'default';\n    \n    if (!testName) {\n      return {\n        text: 'Which test would you like to run? Please specify the test name or prompt card.',\n        suggestions: ['List available tests', 'Show recent tests', 'Help with testing']\n      };\n    }\n\n    return {\n      text: `Running test \"${testName}\" with model \"${model}\". I'll notify you when it's complete.`,\n      actions: ['start_test_execution'],\n      data: { testName, model },\n      suggestions: [\n        'Monitor progress',\n        'View live results',\n        'Run additional tests'\n      ]\n    };\n  }\n\n  /**\n   * Handle analytics request\n   */\n  private async handleGetAnalytics(entities: Record<string, string>): Promise<VoiceResponse> {\n    const timeframe = entities.timeframe || 'today';\n    const metric = entities.metric || 'overview';\n    \n    try {\n      const metrics = await this.analyticsEngine.getDashboardMetrics();\n      \n      let responseText = '';\n      let data = {};\n\n      switch (metric) {\n        case 'success_rate':\n          responseText = `Current success rate is ${(metrics.realtime.successRate * 100).toFixed(1)}%. `;\n          responseText += `Overall success rate is ${(metrics.historical.overallSuccessRate * 100).toFixed(1)}%.`;\n          data = { successRate: metrics.realtime.successRate };\n          break;\n          \n        case 'performance':\n          responseText = `Average response time is ${metrics.realtime.averageResponseTime.toFixed(0)} milliseconds. `;\n          responseText += `You have ${metrics.realtime.activeTests} active tests running.`;\n          data = { responseTime: metrics.realtime.averageResponseTime };\n          break;\n          \n        default:\n          responseText = `Here's your analytics overview: `;\n          responseText += `${metrics.historical.totalTests} total tests, `;\n          responseText += `${(metrics.realtime.successRate * 100).toFixed(1)}% success rate, `;\n          responseText += `${metrics.realtime.averageResponseTime.toFixed(0)}ms average response time.`;\n          data = metrics;\n      }\n\n      return {\n        text: responseText,\n        data,\n        actions: ['show_analytics_dashboard'],\n        suggestions: [\n          'Show performance trends',\n          'View detailed metrics',\n          'Export analytics report'\n        ]\n      };\n    } catch (error) {\n      return {\n        text: 'I encountered an error retrieving analytics data. Please try again or check the dashboard manually.',\n        suggestions: ['Try again', 'Check dashboard', 'Contact support']\n      };\n    }\n  }\n\n  /**\n   * Handle metrics display\n   */\n  private async handleShowMetrics(entities: Record<string, string>): Promise<VoiceResponse> {\n    const metricType = entities.type || 'all';\n    \n    return {\n      text: `Displaying ${metricType} metrics on your dashboard. You can also ask me specific questions about the data.`,\n      actions: ['show_metrics_dashboard'],\n      data: { metricType },\n      suggestions: [\n        'What was yesterday\\'s performance?',\n        'Show model comparison',\n        'Export this data'\n      ]\n    };\n  }\n\n  /**\n   * Handle report export\n   */\n  private async handleExportReport(entities: Record<string, string>): Promise<VoiceResponse> {\n    const format = entities.format || 'pdf';\n    const timeframe = entities.timeframe || 'last_week';\n    \n    return {\n      text: `Generating ${format.toUpperCase()} report for ${timeframe}. I'll notify you when it's ready for download.`,\n      actions: ['generate_report'],\n      data: { format, timeframe },\n      suggestions: [\n        'Schedule regular reports',\n        'Customize report content',\n        'Share with team'\n      ]\n    };\n  }\n\n  /**\n   * Handle model comparison\n   */\n  private async handleCompareModels(entities: Record<string, string>): Promise<VoiceResponse> {\n    const model1 = entities.model1;\n    const model2 = entities.model2;\n    const metric = entities.metric || 'performance';\n    \n    if (!model1 || !model2) {\n      return {\n        text: 'Please specify which two models you\\'d like to compare.',\n        suggestions: [\n          'Compare GPT-4 and Claude',\n          'Show available models',\n          'View model statistics'\n        ]\n      };\n    }\n\n    return {\n      text: `Comparing ${model1} and ${model2} based on ${metric}. Displaying results on your screen.`,\n      actions: ['show_model_comparison'],\n      data: { model1, model2, metric },\n      suggestions: [\n        'Compare different metrics',\n        'Add more models',\n        'Export comparison'\n      ]\n    };\n  }\n\n  /**\n   * Handle prompt optimization\n   */\n  private async handleOptimizePrompt(entities: Record<string, string>): Promise<VoiceResponse> {\n    const promptId = entities.prompt || entities.id;\n    \n    return {\n      text: `Analyzing prompt for optimization opportunities. I'll suggest improvements based on performance data and best practices.`,\n      actions: ['optimize_prompt'],\n      data: { promptId },\n      suggestions: [\n        'Apply suggested changes',\n        'Run A/B test',\n        'View optimization history'\n      ]\n    };\n  }\n\n  /**\n   * Handle test scheduling\n   */\n  private async handleScheduleTest(entities: Record<string, string>): Promise<VoiceResponse> {\n    const schedule = entities.schedule || entities.time;\n    const test = entities.test || entities.prompt;\n    \n    return {\n      text: `Scheduling test \"${test}\" to run ${schedule}. You'll receive notifications about the results.`,\n      actions: ['schedule_test'],\n      data: { test, schedule },\n      suggestions: [\n        'Set up recurring tests',\n        'Configure notifications',\n        'View scheduled tests'\n      ]\n    };\n  }\n\n  /**\n   * Handle voice settings\n   */\n  private async handleVoiceSettings(entities: Record<string, string>): Promise<VoiceResponse> {\n    const setting = entities.setting;\n    const value = entities.value;\n    \n    return {\n      text: 'Opening voice settings. You can configure language, speech rate, and voice preferences here.',\n      actions: ['open_voice_settings'],\n      data: { setting, value },\n      suggestions: [\n        'Change language',\n        'Adjust speech rate',\n        'Test voice output'\n      ]\n    };\n  }\n\n  /**\n   * Handle unknown intents\n   */\n  private handleUnknownIntent(command: VoiceCommand): VoiceResponse {\n    return {\n      text: `I didn't understand that command. Could you please rephrase it? I can help with creating prompts, running tests, viewing analytics, and more.`,\n      suggestions: [\n        'Create a new prompt',\n        'Run a test',\n        'Show analytics',\n        'Help me with voice commands'\n      ]\n    };\n  }\n\n  /**\n   * Convert speech to text\n   */\n  private async speechToText(audioData: ArrayBuffer, language: string): Promise<string> {\n    // This would integrate with a speech-to-text service like Google Speech-to-Text\n    // For now, returning a placeholder\n    return \"placeholder transcription\";\n  }\n\n  /**\n   * Convert text to speech\n   */\n  public async textToSpeech(text: string, language: string = 'en-US'): Promise<ArrayBuffer> {\n    // This would integrate with a text-to-speech service\n    // For now, returning empty buffer\n    return new ArrayBuffer(0);\n  }\n\n  /**\n   * Start a voice session\n   */\n  public startVoiceSession(userId: string): string {\n    this.activeSession = `session_${Date.now()}_${userId}`;\n    this.emit('sessionStarted', this.activeSession);\n    return this.activeSession;\n  }\n\n  /**\n   * End voice session\n   */\n  public endVoiceSession(): void {\n    if (this.activeSession) {\n      this.emit('sessionEnded', this.activeSession);\n      this.activeSession = null;\n    }\n  }\n\n  /**\n   * Get supported languages\n   */\n  public getSupportedLanguages(): string[] {\n    return [...this.supportedLanguages];\n  }\n\n  /**\n   * Configure voice settings\n   */\n  public configureVoiceSettings(settings: {\n    language?: string;\n    speechRate?: number;\n    pitch?: number;\n    volume?: number;\n  }): void {\n    // Store voice settings configuration\n    this.emit('settingsChanged', settings);\n  }\n}\n\n/**\n * Advanced NLP Processor for voice commands\n */\nclass AdvancedNLPProcessor implements NaturalLanguageProcessor {\n  private intentPatterns: Map<string, RegExp[]>;\n  private entityExtractors: Map<string, RegExp>;\n\n  constructor() {\n    this.intentPatterns = new Map();\n    this.entityExtractors = new Map();\n    this.initializePatterns();\n  }\n\n  private initializePatterns(): void {\n    // Intent patterns\n    this.intentPatterns.set('create_prompt', [\n      /create\\s+(?:a\\s+)?(?:new\\s+)?prompt/i,\n      /new\\s+prompt/i,\n      /make\\s+(?:a\\s+)?prompt/i\n    ]);\n\n    this.intentPatterns.set('run_test', [\n      /run\\s+(?:the\\s+)?test/i,\n      /execute\\s+(?:the\\s+)?test/i,\n      /start\\s+(?:the\\s+)?test/i,\n      /test\\s+(?:the\\s+)?prompt/i\n    ]);\n\n    this.intentPatterns.set('get_analytics', [\n      /show\\s+(?:me\\s+)?analytics/i,\n      /get\\s+(?:the\\s+)?analytics/i,\n      /analytics\\s+(?:data|information)/i,\n      /performance\\s+(?:data|metrics)/i\n    ]);\n\n    this.intentPatterns.set('show_metrics', [\n      /show\\s+(?:me\\s+)?metrics/i,\n      /display\\s+metrics/i,\n      /view\\s+metrics/i\n    ]);\n\n    this.intentPatterns.set('export_report', [\n      /export\\s+(?:a\\s+)?report/i,\n      /generate\\s+(?:a\\s+)?report/i,\n      /create\\s+(?:a\\s+)?report/i,\n      /download\\s+report/i\n    ]);\n\n    this.intentPatterns.set('compare_models', [\n      /compare\\s+(?:the\\s+)?models/i,\n      /model\\s+comparison/i,\n      /compare\\s+\\w+\\s+(?:and|with|to)\\s+\\w+/i\n    ]);\n\n    this.intentPatterns.set('optimize_prompt', [\n      /optimize\\s+(?:the\\s+)?prompt/i,\n      /improve\\s+(?:the\\s+)?prompt/i,\n      /enhance\\s+(?:the\\s+)?prompt/i\n    ]);\n\n    this.intentPatterns.set('schedule_test', [\n      /schedule\\s+(?:a\\s+)?test/i,\n      /set\\s+up\\s+(?:a\\s+)?test/i,\n      /recurring\\s+test/i\n    ]);\n\n    this.intentPatterns.set('voice_settings', [\n      /voice\\s+settings/i,\n      /configure\\s+voice/i,\n      /change\\s+language/i,\n      /speech\\s+settings/i\n    ]);\n\n    // Entity extractors\n    this.entityExtractors.set('name', /(?:called|named)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('type', /(?:type|kind)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('model', /(?:model|using)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('timeframe', /(?:for|from|over)\\s+(?:the\\s+)?(?:last\\s+)?([^\"'\\s]+)/i);\n    this.entityExtractors.set('metric', /(?:metric|measure)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('format', /(?:as|in)\\s+([a-z]{3,4})\\s+(?:format)?/i);\n  }\n\n  public async processCommand(text: string): Promise<{\n    intent: string;\n    entities: Record<string, string>;\n    confidence: number;\n  }> {\n    const normalizedText = text.toLowerCase().trim();\n    let bestIntent = 'unknown';\n    let maxScore = 0;\n\n    // Find best matching intent\n    for (const [intent, patterns] of this.intentPatterns) {\n      for (const pattern of patterns) {\n        if (pattern.test(normalizedText)) {\n          const score = this.calculatePatternScore(normalizedText, pattern);\n          if (score > maxScore) {\n            maxScore = score;\n            bestIntent = intent;\n          }\n        }\n      }\n    }\n\n    // Extract entities\n    const entities: Record<string, string> = {};\n    for (const [entityType, extractor] of this.entityExtractors) {\n      const match = text.match(extractor);\n      if (match && match[1]) {\n        entities[entityType] = match[1];\n      }\n    }\n\n    const confidence = maxScore > 0 ? Math.min(maxScore / 10, 1) : 0.1;\n\n    return {\n      intent: bestIntent,\n      entities,\n      confidence\n    };\n  }\n\n  private calculatePatternScore(text: string, pattern: RegExp): number {\n    const match = text.match(pattern);\n    if (!match) return 0;\n    \n    // Score based on match length and position\n    const matchLength = match[0].length;\n    const textLength = text.length;\n    const positionScore = 1 - (match.index! / textLength);\n    const lengthScore = matchLength / textLength;\n    \n    return (positionScore + lengthScore) * 5;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9e60973075f4b58d93fd2a68fdd0cd520c1aadd1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zeek9514e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zeek9514e();
cov_zeek9514e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_zeek9514e().s[1]++;
exports.VoiceInterface = void 0;
const events_1 =
/* istanbul ignore next */
(cov_zeek9514e().s[2]++, require("events"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_zeek9514e().s[3]++, require("./AnalyticsEngine"));
const BlockchainAuditTrail_1 =
/* istanbul ignore next */
(cov_zeek9514e().s[4]++, require("./BlockchainAuditTrail"));
class VoiceInterface extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor() {
    /* istanbul ignore next */
    cov_zeek9514e().f[0]++;
    cov_zeek9514e().s[5]++;
    super();
    /* istanbul ignore next */
    cov_zeek9514e().s[6]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_zeek9514e().s[7]++;
    this.blockchainAudit = BlockchainAuditTrail_1.BlockchainAuditTrail.getInstance();
    /* istanbul ignore next */
    cov_zeek9514e().s[8]++;
    this.nlpProcessor = new AdvancedNLPProcessor();
    /* istanbul ignore next */
    cov_zeek9514e().s[9]++;
    this.supportedLanguages = ['en-US', 'es-ES', 'fr-FR', 'de-DE', 'ja-JP', 'zh-CN'];
    /* istanbul ignore next */
    cov_zeek9514e().s[10]++;
    this.activeSession = null;
  }
  /**
   * Process voice command and return response
   */
  async processVoiceCommand(audioData, userId, language =
  /* istanbul ignore next */
  (cov_zeek9514e().b[0][0]++, 'en-US')) {
    /* istanbul ignore next */
    cov_zeek9514e().f[1]++;
    cov_zeek9514e().s[11]++;
    try {
      // Convert speech to text
      const transcription =
      /* istanbul ignore next */
      (cov_zeek9514e().s[12]++, await this.speechToText(audioData, language));
      // Process with NLP
      const nlpResult =
      /* istanbul ignore next */
      (cov_zeek9514e().s[13]++, await this.nlpProcessor.processCommand(transcription));
      // Create voice command record
      const voiceCommand =
      /* istanbul ignore next */
      (cov_zeek9514e().s[14]++, {
        id: `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        command: transcription,
        intent: nlpResult.intent,
        entities: nlpResult.entities,
        confidence: nlpResult.confidence,
        timestamp: new Date(),
        userId,
        sessionId:
        /* istanbul ignore next */
        (cov_zeek9514e().b[1][0]++, this.activeSession) ||
        /* istanbul ignore next */
        (cov_zeek9514e().b[1][1]++, 'default')
      });
      // Log to blockchain audit trail
      /* istanbul ignore next */
      cov_zeek9514e().s[15]++;
      await this.blockchainAudit.recordAuditEvent({
        eventType: 'voice_command',
        userId,
        data: voiceCommand,
        timestamp: new Date()
      });
      // Execute command based on intent
      const response =
      /* istanbul ignore next */
      (cov_zeek9514e().s[16]++, await this.executeCommand(voiceCommand));
      /* istanbul ignore next */
      cov_zeek9514e().s[17]++;
      this.emit('voiceCommandProcessed', voiceCommand, response);
      /* istanbul ignore next */
      cov_zeek9514e().s[18]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_zeek9514e().s[19]++;
      console.error('Error processing voice command:', error);
      // Log error to audit trail
      /* istanbul ignore next */
      cov_zeek9514e().s[20]++;
      await this.blockchainAudit.recordAuditEvent({
        eventType: 'voice_command_error',
        userId,
        data: {
          error: error.message
        },
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_zeek9514e().s[21]++;
      return {
        text: 'I apologize, but I encountered an error processing your voice command. Please try again.',
        suggestions: ['Try speaking more clearly', 'Check your microphone', 'Use simpler commands']
      };
    }
  }
  /**
   * Execute command based on intent
   */
  async executeCommand(command) {
    /* istanbul ignore next */
    cov_zeek9514e().f[2]++;
    const {
      intent,
      entities
    } =
    /* istanbul ignore next */
    (cov_zeek9514e().s[22]++, command);
    /* istanbul ignore next */
    cov_zeek9514e().s[23]++;
    switch (intent) {
      case 'create_prompt':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][0]++;
        cov_zeek9514e().s[24]++;
        return await this.handleCreatePrompt(entities);
      case 'run_test':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][1]++;
        cov_zeek9514e().s[25]++;
        return await this.handleRunTest(entities);
      case 'get_analytics':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][2]++;
        cov_zeek9514e().s[26]++;
        return await this.handleGetAnalytics(entities);
      case 'show_metrics':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][3]++;
        cov_zeek9514e().s[27]++;
        return await this.handleShowMetrics(entities);
      case 'export_report':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][4]++;
        cov_zeek9514e().s[28]++;
        return await this.handleExportReport(entities);
      case 'compare_models':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][5]++;
        cov_zeek9514e().s[29]++;
        return await this.handleCompareModels(entities);
      case 'optimize_prompt':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][6]++;
        cov_zeek9514e().s[30]++;
        return await this.handleOptimizePrompt(entities);
      case 'schedule_test':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][7]++;
        cov_zeek9514e().s[31]++;
        return await this.handleScheduleTest(entities);
      case 'voice_settings':
        /* istanbul ignore next */
        cov_zeek9514e().b[2][8]++;
        cov_zeek9514e().s[32]++;
        return await this.handleVoiceSettings(entities);
      default:
        /* istanbul ignore next */
        cov_zeek9514e().b[2][9]++;
        cov_zeek9514e().s[33]++;
        return this.handleUnknownIntent(command);
    }
  }
  /**
   * Handle create prompt command
   */
  async handleCreatePrompt(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[3]++;
    const promptName =
    /* istanbul ignore next */
    (cov_zeek9514e().s[34]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[3][0]++, entities.name) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[3][1]++, 'Untitled Prompt'));
    const promptType =
    /* istanbul ignore next */
    (cov_zeek9514e().s[35]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[4][0]++, entities.type) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[4][1]++, 'general'));
    /* istanbul ignore next */
    cov_zeek9514e().s[36]++;
    return {
      text: `I'll help you create a new prompt card called "${promptName}" of type "${promptType}". What content would you like to include?`,
      actions: ['open_prompt_editor'],
      data: {
        name: promptName,
        type: promptType
      },
      suggestions: ['Add test cases', 'Set model parameters', 'Configure assertions']
    };
  }
  /**
   * Handle run test command
   */
  async handleRunTest(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[4]++;
    const testName =
    /* istanbul ignore next */
    (cov_zeek9514e().s[37]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[5][0]++, entities.test) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[5][1]++, entities.prompt));
    const model =
    /* istanbul ignore next */
    (cov_zeek9514e().s[38]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[6][0]++, entities.model) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[6][1]++, 'default'));
    /* istanbul ignore next */
    cov_zeek9514e().s[39]++;
    if (!testName) {
      /* istanbul ignore next */
      cov_zeek9514e().b[7][0]++;
      cov_zeek9514e().s[40]++;
      return {
        text: 'Which test would you like to run? Please specify the test name or prompt card.',
        suggestions: ['List available tests', 'Show recent tests', 'Help with testing']
      };
    } else
    /* istanbul ignore next */
    {
      cov_zeek9514e().b[7][1]++;
    }
    cov_zeek9514e().s[41]++;
    return {
      text: `Running test "${testName}" with model "${model}". I'll notify you when it's complete.`,
      actions: ['start_test_execution'],
      data: {
        testName,
        model
      },
      suggestions: ['Monitor progress', 'View live results', 'Run additional tests']
    };
  }
  /**
   * Handle analytics request
   */
  async handleGetAnalytics(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[5]++;
    const timeframe =
    /* istanbul ignore next */
    (cov_zeek9514e().s[42]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[8][0]++, entities.timeframe) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[8][1]++, 'today'));
    const metric =
    /* istanbul ignore next */
    (cov_zeek9514e().s[43]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[9][0]++, entities.metric) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[9][1]++, 'overview'));
    /* istanbul ignore next */
    cov_zeek9514e().s[44]++;
    try {
      const metrics =
      /* istanbul ignore next */
      (cov_zeek9514e().s[45]++, await this.analyticsEngine.getDashboardMetrics());
      let responseText =
      /* istanbul ignore next */
      (cov_zeek9514e().s[46]++, '');
      let data =
      /* istanbul ignore next */
      (cov_zeek9514e().s[47]++, {});
      /* istanbul ignore next */
      cov_zeek9514e().s[48]++;
      switch (metric) {
        case 'success_rate':
          /* istanbul ignore next */
          cov_zeek9514e().b[10][0]++;
          cov_zeek9514e().s[49]++;
          responseText = `Current success rate is ${(metrics.realtime.successRate * 100).toFixed(1)}%. `;
          /* istanbul ignore next */
          cov_zeek9514e().s[50]++;
          responseText += `Overall success rate is ${(metrics.historical.overallSuccessRate * 100).toFixed(1)}%.`;
          /* istanbul ignore next */
          cov_zeek9514e().s[51]++;
          data = {
            successRate: metrics.realtime.successRate
          };
          /* istanbul ignore next */
          cov_zeek9514e().s[52]++;
          break;
        case 'performance':
          /* istanbul ignore next */
          cov_zeek9514e().b[10][1]++;
          cov_zeek9514e().s[53]++;
          responseText = `Average response time is ${metrics.realtime.averageResponseTime.toFixed(0)} milliseconds. `;
          /* istanbul ignore next */
          cov_zeek9514e().s[54]++;
          responseText += `You have ${metrics.realtime.activeTests} active tests running.`;
          /* istanbul ignore next */
          cov_zeek9514e().s[55]++;
          data = {
            responseTime: metrics.realtime.averageResponseTime
          };
          /* istanbul ignore next */
          cov_zeek9514e().s[56]++;
          break;
        default:
          /* istanbul ignore next */
          cov_zeek9514e().b[10][2]++;
          cov_zeek9514e().s[57]++;
          responseText = `Here's your analytics overview: `;
          /* istanbul ignore next */
          cov_zeek9514e().s[58]++;
          responseText += `${metrics.historical.totalTests} total tests, `;
          /* istanbul ignore next */
          cov_zeek9514e().s[59]++;
          responseText += `${(metrics.realtime.successRate * 100).toFixed(1)}% success rate, `;
          /* istanbul ignore next */
          cov_zeek9514e().s[60]++;
          responseText += `${metrics.realtime.averageResponseTime.toFixed(0)}ms average response time.`;
          /* istanbul ignore next */
          cov_zeek9514e().s[61]++;
          data = metrics;
      }
      /* istanbul ignore next */
      cov_zeek9514e().s[62]++;
      return {
        text: responseText,
        data,
        actions: ['show_analytics_dashboard'],
        suggestions: ['Show performance trends', 'View detailed metrics', 'Export analytics report']
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zeek9514e().s[63]++;
      return {
        text: 'I encountered an error retrieving analytics data. Please try again or check the dashboard manually.',
        suggestions: ['Try again', 'Check dashboard', 'Contact support']
      };
    }
  }
  /**
   * Handle metrics display
   */
  async handleShowMetrics(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[6]++;
    const metricType =
    /* istanbul ignore next */
    (cov_zeek9514e().s[64]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[11][0]++, entities.type) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[11][1]++, 'all'));
    /* istanbul ignore next */
    cov_zeek9514e().s[65]++;
    return {
      text: `Displaying ${metricType} metrics on your dashboard. You can also ask me specific questions about the data.`,
      actions: ['show_metrics_dashboard'],
      data: {
        metricType
      },
      suggestions: ['What was yesterday\'s performance?', 'Show model comparison', 'Export this data']
    };
  }
  /**
   * Handle report export
   */
  async handleExportReport(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[7]++;
    const format =
    /* istanbul ignore next */
    (cov_zeek9514e().s[66]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[12][0]++, entities.format) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[12][1]++, 'pdf'));
    const timeframe =
    /* istanbul ignore next */
    (cov_zeek9514e().s[67]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[13][0]++, entities.timeframe) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[13][1]++, 'last_week'));
    /* istanbul ignore next */
    cov_zeek9514e().s[68]++;
    return {
      text: `Generating ${format.toUpperCase()} report for ${timeframe}. I'll notify you when it's ready for download.`,
      actions: ['generate_report'],
      data: {
        format,
        timeframe
      },
      suggestions: ['Schedule regular reports', 'Customize report content', 'Share with team']
    };
  }
  /**
   * Handle model comparison
   */
  async handleCompareModels(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[8]++;
    const model1 =
    /* istanbul ignore next */
    (cov_zeek9514e().s[69]++, entities.model1);
    const model2 =
    /* istanbul ignore next */
    (cov_zeek9514e().s[70]++, entities.model2);
    const metric =
    /* istanbul ignore next */
    (cov_zeek9514e().s[71]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[14][0]++, entities.metric) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[14][1]++, 'performance'));
    /* istanbul ignore next */
    cov_zeek9514e().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_zeek9514e().b[16][0]++, !model1) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[16][1]++, !model2)) {
      /* istanbul ignore next */
      cov_zeek9514e().b[15][0]++;
      cov_zeek9514e().s[73]++;
      return {
        text: 'Please specify which two models you\'d like to compare.',
        suggestions: ['Compare GPT-4 and Claude', 'Show available models', 'View model statistics']
      };
    } else
    /* istanbul ignore next */
    {
      cov_zeek9514e().b[15][1]++;
    }
    cov_zeek9514e().s[74]++;
    return {
      text: `Comparing ${model1} and ${model2} based on ${metric}. Displaying results on your screen.`,
      actions: ['show_model_comparison'],
      data: {
        model1,
        model2,
        metric
      },
      suggestions: ['Compare different metrics', 'Add more models', 'Export comparison']
    };
  }
  /**
   * Handle prompt optimization
   */
  async handleOptimizePrompt(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[9]++;
    const promptId =
    /* istanbul ignore next */
    (cov_zeek9514e().s[75]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[17][0]++, entities.prompt) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[17][1]++, entities.id));
    /* istanbul ignore next */
    cov_zeek9514e().s[76]++;
    return {
      text: `Analyzing prompt for optimization opportunities. I'll suggest improvements based on performance data and best practices.`,
      actions: ['optimize_prompt'],
      data: {
        promptId
      },
      suggestions: ['Apply suggested changes', 'Run A/B test', 'View optimization history']
    };
  }
  /**
   * Handle test scheduling
   */
  async handleScheduleTest(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[10]++;
    const schedule =
    /* istanbul ignore next */
    (cov_zeek9514e().s[77]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[18][0]++, entities.schedule) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[18][1]++, entities.time));
    const test =
    /* istanbul ignore next */
    (cov_zeek9514e().s[78]++,
    /* istanbul ignore next */
    (cov_zeek9514e().b[19][0]++, entities.test) ||
    /* istanbul ignore next */
    (cov_zeek9514e().b[19][1]++, entities.prompt));
    /* istanbul ignore next */
    cov_zeek9514e().s[79]++;
    return {
      text: `Scheduling test "${test}" to run ${schedule}. You'll receive notifications about the results.`,
      actions: ['schedule_test'],
      data: {
        test,
        schedule
      },
      suggestions: ['Set up recurring tests', 'Configure notifications', 'View scheduled tests']
    };
  }
  /**
   * Handle voice settings
   */
  async handleVoiceSettings(entities) {
    /* istanbul ignore next */
    cov_zeek9514e().f[11]++;
    const setting =
    /* istanbul ignore next */
    (cov_zeek9514e().s[80]++, entities.setting);
    const value =
    /* istanbul ignore next */
    (cov_zeek9514e().s[81]++, entities.value);
    /* istanbul ignore next */
    cov_zeek9514e().s[82]++;
    return {
      text: 'Opening voice settings. You can configure language, speech rate, and voice preferences here.',
      actions: ['open_voice_settings'],
      data: {
        setting,
        value
      },
      suggestions: ['Change language', 'Adjust speech rate', 'Test voice output']
    };
  }
  /**
   * Handle unknown intents
   */
  handleUnknownIntent(command) {
    /* istanbul ignore next */
    cov_zeek9514e().f[12]++;
    cov_zeek9514e().s[83]++;
    return {
      text: `I didn't understand that command. Could you please rephrase it? I can help with creating prompts, running tests, viewing analytics, and more.`,
      suggestions: ['Create a new prompt', 'Run a test', 'Show analytics', 'Help me with voice commands']
    };
  }
  /**
   * Convert speech to text
   */
  async speechToText(audioData, language) {
    /* istanbul ignore next */
    cov_zeek9514e().f[13]++;
    cov_zeek9514e().s[84]++;
    // This would integrate with a speech-to-text service like Google Speech-to-Text
    // For now, returning a placeholder
    return "placeholder transcription";
  }
  /**
   * Convert text to speech
   */
  async textToSpeech(text, language =
  /* istanbul ignore next */
  (cov_zeek9514e().b[20][0]++, 'en-US')) {
    /* istanbul ignore next */
    cov_zeek9514e().f[14]++;
    cov_zeek9514e().s[85]++;
    // This would integrate with a text-to-speech service
    // For now, returning empty buffer
    return new ArrayBuffer(0);
  }
  /**
   * Start a voice session
   */
  startVoiceSession(userId) {
    /* istanbul ignore next */
    cov_zeek9514e().f[15]++;
    cov_zeek9514e().s[86]++;
    this.activeSession = `session_${Date.now()}_${userId}`;
    /* istanbul ignore next */
    cov_zeek9514e().s[87]++;
    this.emit('sessionStarted', this.activeSession);
    /* istanbul ignore next */
    cov_zeek9514e().s[88]++;
    return this.activeSession;
  }
  /**
   * End voice session
   */
  endVoiceSession() {
    /* istanbul ignore next */
    cov_zeek9514e().f[16]++;
    cov_zeek9514e().s[89]++;
    if (this.activeSession) {
      /* istanbul ignore next */
      cov_zeek9514e().b[21][0]++;
      cov_zeek9514e().s[90]++;
      this.emit('sessionEnded', this.activeSession);
      /* istanbul ignore next */
      cov_zeek9514e().s[91]++;
      this.activeSession = null;
    } else
    /* istanbul ignore next */
    {
      cov_zeek9514e().b[21][1]++;
    }
  }
  /**
   * Get supported languages
   */
  getSupportedLanguages() {
    /* istanbul ignore next */
    cov_zeek9514e().f[17]++;
    cov_zeek9514e().s[92]++;
    return [...this.supportedLanguages];
  }
  /**
   * Configure voice settings
   */
  configureVoiceSettings(settings) {
    /* istanbul ignore next */
    cov_zeek9514e().f[18]++;
    cov_zeek9514e().s[93]++;
    // Store voice settings configuration
    this.emit('settingsChanged', settings);
  }
}
/* istanbul ignore next */
cov_zeek9514e().s[94]++;
exports.VoiceInterface = VoiceInterface;
/**
 * Advanced NLP Processor for voice commands
 */
class AdvancedNLPProcessor {
  constructor() {
    /* istanbul ignore next */
    cov_zeek9514e().f[19]++;
    cov_zeek9514e().s[95]++;
    this.intentPatterns = new Map();
    /* istanbul ignore next */
    cov_zeek9514e().s[96]++;
    this.entityExtractors = new Map();
    /* istanbul ignore next */
    cov_zeek9514e().s[97]++;
    this.initializePatterns();
  }
  initializePatterns() {
    /* istanbul ignore next */
    cov_zeek9514e().f[20]++;
    cov_zeek9514e().s[98]++;
    // Intent patterns
    this.intentPatterns.set('create_prompt', [/create\s+(?:a\s+)?(?:new\s+)?prompt/i, /new\s+prompt/i, /make\s+(?:a\s+)?prompt/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[99]++;
    this.intentPatterns.set('run_test', [/run\s+(?:the\s+)?test/i, /execute\s+(?:the\s+)?test/i, /start\s+(?:the\s+)?test/i, /test\s+(?:the\s+)?prompt/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[100]++;
    this.intentPatterns.set('get_analytics', [/show\s+(?:me\s+)?analytics/i, /get\s+(?:the\s+)?analytics/i, /analytics\s+(?:data|information)/i, /performance\s+(?:data|metrics)/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[101]++;
    this.intentPatterns.set('show_metrics', [/show\s+(?:me\s+)?metrics/i, /display\s+metrics/i, /view\s+metrics/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[102]++;
    this.intentPatterns.set('export_report', [/export\s+(?:a\s+)?report/i, /generate\s+(?:a\s+)?report/i, /create\s+(?:a\s+)?report/i, /download\s+report/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[103]++;
    this.intentPatterns.set('compare_models', [/compare\s+(?:the\s+)?models/i, /model\s+comparison/i, /compare\s+\w+\s+(?:and|with|to)\s+\w+/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[104]++;
    this.intentPatterns.set('optimize_prompt', [/optimize\s+(?:the\s+)?prompt/i, /improve\s+(?:the\s+)?prompt/i, /enhance\s+(?:the\s+)?prompt/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[105]++;
    this.intentPatterns.set('schedule_test', [/schedule\s+(?:a\s+)?test/i, /set\s+up\s+(?:a\s+)?test/i, /recurring\s+test/i]);
    /* istanbul ignore next */
    cov_zeek9514e().s[106]++;
    this.intentPatterns.set('voice_settings', [/voice\s+settings/i, /configure\s+voice/i, /change\s+language/i, /speech\s+settings/i]);
    // Entity extractors
    /* istanbul ignore next */
    cov_zeek9514e().s[107]++;
    this.entityExtractors.set('name', /(?:called|named)\s+["']?([^"'\s]+)["']?/i);
    /* istanbul ignore next */
    cov_zeek9514e().s[108]++;
    this.entityExtractors.set('type', /(?:type|kind)\s+["']?([^"'\s]+)["']?/i);
    /* istanbul ignore next */
    cov_zeek9514e().s[109]++;
    this.entityExtractors.set('model', /(?:model|using)\s+["']?([^"'\s]+)["']?/i);
    /* istanbul ignore next */
    cov_zeek9514e().s[110]++;
    this.entityExtractors.set('timeframe', /(?:for|from|over)\s+(?:the\s+)?(?:last\s+)?([^"'\s]+)/i);
    /* istanbul ignore next */
    cov_zeek9514e().s[111]++;
    this.entityExtractors.set('metric', /(?:metric|measure)\s+["']?([^"'\s]+)["']?/i);
    /* istanbul ignore next */
    cov_zeek9514e().s[112]++;
    this.entityExtractors.set('format', /(?:as|in)\s+([a-z]{3,4})\s+(?:format)?/i);
  }
  async processCommand(text) {
    /* istanbul ignore next */
    cov_zeek9514e().f[21]++;
    const normalizedText =
    /* istanbul ignore next */
    (cov_zeek9514e().s[113]++, text.toLowerCase().trim());
    let bestIntent =
    /* istanbul ignore next */
    (cov_zeek9514e().s[114]++, 'unknown');
    let maxScore =
    /* istanbul ignore next */
    (cov_zeek9514e().s[115]++, 0);
    // Find best matching intent
    /* istanbul ignore next */
    cov_zeek9514e().s[116]++;
    for (const [intent, patterns] of this.intentPatterns) {
      /* istanbul ignore next */
      cov_zeek9514e().s[117]++;
      for (const pattern of patterns) {
        /* istanbul ignore next */
        cov_zeek9514e().s[118]++;
        if (pattern.test(normalizedText)) {
          /* istanbul ignore next */
          cov_zeek9514e().b[22][0]++;
          const score =
          /* istanbul ignore next */
          (cov_zeek9514e().s[119]++, this.calculatePatternScore(normalizedText, pattern));
          /* istanbul ignore next */
          cov_zeek9514e().s[120]++;
          if (score > maxScore) {
            /* istanbul ignore next */
            cov_zeek9514e().b[23][0]++;
            cov_zeek9514e().s[121]++;
            maxScore = score;
            /* istanbul ignore next */
            cov_zeek9514e().s[122]++;
            bestIntent = intent;
          } else
          /* istanbul ignore next */
          {
            cov_zeek9514e().b[23][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_zeek9514e().b[22][1]++;
        }
      }
    }
    // Extract entities
    const entities =
    /* istanbul ignore next */
    (cov_zeek9514e().s[123]++, {});
    /* istanbul ignore next */
    cov_zeek9514e().s[124]++;
    for (const [entityType, extractor] of this.entityExtractors) {
      const match =
      /* istanbul ignore next */
      (cov_zeek9514e().s[125]++, text.match(extractor));
      /* istanbul ignore next */
      cov_zeek9514e().s[126]++;
      if (
      /* istanbul ignore next */
      (cov_zeek9514e().b[25][0]++, match) &&
      /* istanbul ignore next */
      (cov_zeek9514e().b[25][1]++, match[1])) {
        /* istanbul ignore next */
        cov_zeek9514e().b[24][0]++;
        cov_zeek9514e().s[127]++;
        entities[entityType] = match[1];
      } else
      /* istanbul ignore next */
      {
        cov_zeek9514e().b[24][1]++;
      }
    }
    const confidence =
    /* istanbul ignore next */
    (cov_zeek9514e().s[128]++, maxScore > 0 ?
    /* istanbul ignore next */
    (cov_zeek9514e().b[26][0]++, Math.min(maxScore / 10, 1)) :
    /* istanbul ignore next */
    (cov_zeek9514e().b[26][1]++, 0.1));
    /* istanbul ignore next */
    cov_zeek9514e().s[129]++;
    return {
      intent: bestIntent,
      entities,
      confidence
    };
  }
  calculatePatternScore(text, pattern) {
    /* istanbul ignore next */
    cov_zeek9514e().f[22]++;
    const match =
    /* istanbul ignore next */
    (cov_zeek9514e().s[130]++, text.match(pattern));
    /* istanbul ignore next */
    cov_zeek9514e().s[131]++;
    if (!match) {
      /* istanbul ignore next */
      cov_zeek9514e().b[27][0]++;
      cov_zeek9514e().s[132]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_zeek9514e().b[27][1]++;
    }
    // Score based on match length and position
    const matchLength =
    /* istanbul ignore next */
    (cov_zeek9514e().s[133]++, match[0].length);
    const textLength =
    /* istanbul ignore next */
    (cov_zeek9514e().s[134]++, text.length);
    const positionScore =
    /* istanbul ignore next */
    (cov_zeek9514e().s[135]++, 1 - match.index / textLength);
    const lengthScore =
    /* istanbul ignore next */
    (cov_zeek9514e().s[136]++, matchLength / textLength);
    /* istanbul ignore next */
    cov_zeek9514e().s[137]++;
    return (positionScore + lengthScore) * 5;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfemVlazk1MTRlIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwiQW5hbHl0aWNzRW5naW5lXzEiLCJCbG9ja2NoYWluQXVkaXRUcmFpbF8xIiwiVm9pY2VJbnRlcmZhY2UiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImYiLCJhbmFseXRpY3NFbmdpbmUiLCJBbmFseXRpY3NFbmdpbmUiLCJnZXRJbnN0YW5jZSIsImJsb2NrY2hhaW5BdWRpdCIsIkJsb2NrY2hhaW5BdWRpdFRyYWlsIiwibmxwUHJvY2Vzc29yIiwiQWR2YW5jZWROTFBQcm9jZXNzb3IiLCJzdXBwb3J0ZWRMYW5ndWFnZXMiLCJhY3RpdmVTZXNzaW9uIiwicHJvY2Vzc1ZvaWNlQ29tbWFuZCIsImF1ZGlvRGF0YSIsInVzZXJJZCIsImxhbmd1YWdlIiwiYiIsInRyYW5zY3JpcHRpb24iLCJzcGVlY2hUb1RleHQiLCJubHBSZXN1bHQiLCJwcm9jZXNzQ29tbWFuZCIsInZvaWNlQ29tbWFuZCIsImlkIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsImNvbW1hbmQiLCJpbnRlbnQiLCJlbnRpdGllcyIsImNvbmZpZGVuY2UiLCJ0aW1lc3RhbXAiLCJzZXNzaW9uSWQiLCJyZWNvcmRBdWRpdEV2ZW50IiwiZXZlbnRUeXBlIiwiZGF0YSIsInJlc3BvbnNlIiwiZXhlY3V0ZUNvbW1hbmQiLCJlbWl0IiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInRleHQiLCJzdWdnZXN0aW9ucyIsImhhbmRsZUNyZWF0ZVByb21wdCIsImhhbmRsZVJ1blRlc3QiLCJoYW5kbGVHZXRBbmFseXRpY3MiLCJoYW5kbGVTaG93TWV0cmljcyIsImhhbmRsZUV4cG9ydFJlcG9ydCIsImhhbmRsZUNvbXBhcmVNb2RlbHMiLCJoYW5kbGVPcHRpbWl6ZVByb21wdCIsImhhbmRsZVNjaGVkdWxlVGVzdCIsImhhbmRsZVZvaWNlU2V0dGluZ3MiLCJoYW5kbGVVbmtub3duSW50ZW50IiwicHJvbXB0TmFtZSIsIm5hbWUiLCJwcm9tcHRUeXBlIiwidHlwZSIsImFjdGlvbnMiLCJ0ZXN0TmFtZSIsInRlc3QiLCJwcm9tcHQiLCJtb2RlbCIsInRpbWVmcmFtZSIsIm1ldHJpYyIsIm1ldHJpY3MiLCJnZXREYXNoYm9hcmRNZXRyaWNzIiwicmVzcG9uc2VUZXh0IiwicmVhbHRpbWUiLCJzdWNjZXNzUmF0ZSIsInRvRml4ZWQiLCJoaXN0b3JpY2FsIiwib3ZlcmFsbFN1Y2Nlc3NSYXRlIiwiYXZlcmFnZVJlc3BvbnNlVGltZSIsImFjdGl2ZVRlc3RzIiwicmVzcG9uc2VUaW1lIiwidG90YWxUZXN0cyIsIm1ldHJpY1R5cGUiLCJmb3JtYXQiLCJ0b1VwcGVyQ2FzZSIsIm1vZGVsMSIsIm1vZGVsMiIsInByb21wdElkIiwic2NoZWR1bGUiLCJ0aW1lIiwic2V0dGluZyIsInZhbHVlIiwidGV4dFRvU3BlZWNoIiwiQXJyYXlCdWZmZXIiLCJzdGFydFZvaWNlU2Vzc2lvbiIsImVuZFZvaWNlU2Vzc2lvbiIsImdldFN1cHBvcnRlZExhbmd1YWdlcyIsImNvbmZpZ3VyZVZvaWNlU2V0dGluZ3MiLCJzZXR0aW5ncyIsImV4cG9ydHMiLCJpbnRlbnRQYXR0ZXJucyIsIk1hcCIsImVudGl0eUV4dHJhY3RvcnMiLCJpbml0aWFsaXplUGF0dGVybnMiLCJzZXQiLCJub3JtYWxpemVkVGV4dCIsInRvTG93ZXJDYXNlIiwidHJpbSIsImJlc3RJbnRlbnQiLCJtYXhTY29yZSIsInBhdHRlcm5zIiwicGF0dGVybiIsInNjb3JlIiwiY2FsY3VsYXRlUGF0dGVyblNjb3JlIiwiZW50aXR5VHlwZSIsImV4dHJhY3RvciIsIm1hdGNoIiwibWluIiwibWF0Y2hMZW5ndGgiLCJsZW5ndGgiLCJ0ZXh0TGVuZ3RoIiwicG9zaXRpb25TY29yZSIsImluZGV4IiwibGVuZ3RoU2NvcmUiXSwic291cmNlcyI6WyIvd29ya3NwYWNlcy9wcm9tcHQtY2FyZC1zeXN0ZW0vYmFja2VuZC9zcmMvc2VydmljZXMvYW5hbHl0aWNzL1ZvaWNlSW50ZXJmYWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBBbmFseXRpY3NFbmdpbmUgfSBmcm9tICcuL0FuYWx5dGljc0VuZ2luZSc7XG5pbXBvcnQgeyBCbG9ja2NoYWluQXVkaXRUcmFpbCB9IGZyb20gJy4vQmxvY2tjaGFpbkF1ZGl0VHJhaWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZvaWNlQ29tbWFuZCB7XG4gIGlkOiBzdHJpbmc7XG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgaW50ZW50OiBzdHJpbmc7XG4gIGVudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBjb25maWRlbmNlOiBudW1iZXI7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIHNlc3Npb25JZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZvaWNlUmVzcG9uc2Uge1xuICB0ZXh0OiBzdHJpbmc7XG4gIGRhdGE/OiBhbnk7XG4gIGFjdGlvbnM/OiBzdHJpbmdbXTtcbiAgc3VnZ2VzdGlvbnM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYXR1cmFsTGFuZ3VhZ2VQcm9jZXNzb3Ige1xuICBwcm9jZXNzQ29tbWFuZCh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgICBpbnRlbnQ6IHN0cmluZztcbiAgICBlbnRpdGllczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgICBjb25maWRlbmNlOiBudW1iZXI7XG4gIH0+O1xufVxuXG5leHBvcnQgY2xhc3MgVm9pY2VJbnRlcmZhY2UgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIGFuYWx5dGljc0VuZ2luZTogQW5hbHl0aWNzRW5naW5lO1xuICBwcml2YXRlIGJsb2NrY2hhaW5BdWRpdDogQmxvY2tjaGFpbkF1ZGl0VHJhaWw7XG4gIHByaXZhdGUgbmxwUHJvY2Vzc29yOiBOYXR1cmFsTGFuZ3VhZ2VQcm9jZXNzb3I7XG4gIHByaXZhdGUgc3VwcG9ydGVkTGFuZ3VhZ2VzOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSBhY3RpdmVTZXNzaW9uOiBzdHJpbmcgfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hbmFseXRpY3NFbmdpbmUgPSBBbmFseXRpY3NFbmdpbmUuZ2V0SW5zdGFuY2UoKTtcbiAgICB0aGlzLmJsb2NrY2hhaW5BdWRpdCA9IEJsb2NrY2hhaW5BdWRpdFRyYWlsLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5ubHBQcm9jZXNzb3IgPSBuZXcgQWR2YW5jZWROTFBQcm9jZXNzb3IoKTtcbiAgICB0aGlzLnN1cHBvcnRlZExhbmd1YWdlcyA9IFsnZW4tVVMnLCAnZXMtRVMnLCAnZnItRlInLCAnZGUtREUnLCAnamEtSlAnLCAnemgtQ04nXTtcbiAgICB0aGlzLmFjdGl2ZVNlc3Npb24gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3Mgdm9pY2UgY29tbWFuZCBhbmQgcmV0dXJuIHJlc3BvbnNlXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcHJvY2Vzc1ZvaWNlQ29tbWFuZChcbiAgICBhdWRpb0RhdGE6IEFycmF5QnVmZmVyLFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIGxhbmd1YWdlOiBzdHJpbmcgPSAnZW4tVVMnXG4gICk6IFByb21pc2U8Vm9pY2VSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDb252ZXJ0IHNwZWVjaCB0byB0ZXh0XG4gICAgICBjb25zdCB0cmFuc2NyaXB0aW9uID0gYXdhaXQgdGhpcy5zcGVlY2hUb1RleHQoYXVkaW9EYXRhLCBsYW5ndWFnZSk7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3Mgd2l0aCBOTFBcbiAgICAgIGNvbnN0IG5scFJlc3VsdCA9IGF3YWl0IHRoaXMubmxwUHJvY2Vzc29yLnByb2Nlc3NDb21tYW5kKHRyYW5zY3JpcHRpb24pO1xuICAgICAgXG4gICAgICAvLyBDcmVhdGUgdm9pY2UgY29tbWFuZCByZWNvcmRcbiAgICAgIGNvbnN0IHZvaWNlQ29tbWFuZDogVm9pY2VDb21tYW5kID0ge1xuICAgICAgICBpZDogYHZvaWNlXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgICAgY29tbWFuZDogdHJhbnNjcmlwdGlvbixcbiAgICAgICAgaW50ZW50OiBubHBSZXN1bHQuaW50ZW50LFxuICAgICAgICBlbnRpdGllczogbmxwUmVzdWx0LmVudGl0aWVzLFxuICAgICAgICBjb25maWRlbmNlOiBubHBSZXN1bHQuY29uZmlkZW5jZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHNlc3Npb25JZDogdGhpcy5hY3RpdmVTZXNzaW9uIHx8ICdkZWZhdWx0J1xuICAgICAgfTtcblxuICAgICAgLy8gTG9nIHRvIGJsb2NrY2hhaW4gYXVkaXQgdHJhaWxcbiAgICAgIGF3YWl0IHRoaXMuYmxvY2tjaGFpbkF1ZGl0LnJlY29yZEF1ZGl0RXZlbnQoe1xuICAgICAgICBldmVudFR5cGU6ICd2b2ljZV9jb21tYW5kJyxcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBkYXRhOiB2b2ljZUNvbW1hbmQsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEV4ZWN1dGUgY29tbWFuZCBiYXNlZCBvbiBpbnRlbnRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5leGVjdXRlQ29tbWFuZCh2b2ljZUNvbW1hbmQpO1xuICAgICAgXG4gICAgICB0aGlzLmVtaXQoJ3ZvaWNlQ29tbWFuZFByb2Nlc3NlZCcsIHZvaWNlQ29tbWFuZCwgcmVzcG9uc2UpO1xuICAgICAgXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3Npbmcgdm9pY2UgY29tbWFuZDonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIC8vIExvZyBlcnJvciB0byBhdWRpdCB0cmFpbFxuICAgICAgYXdhaXQgdGhpcy5ibG9ja2NoYWluQXVkaXQucmVjb3JkQXVkaXRFdmVudCh7XG4gICAgICAgIGV2ZW50VHlwZTogJ3ZvaWNlX2NvbW1hbmRfZXJyb3InLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIGRhdGE6IHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogJ0kgYXBvbG9naXplLCBidXQgSSBlbmNvdW50ZXJlZCBhbiBlcnJvciBwcm9jZXNzaW5nIHlvdXIgdm9pY2UgY29tbWFuZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nLFxuICAgICAgICBzdWdnZXN0aW9uczogWydUcnkgc3BlYWtpbmcgbW9yZSBjbGVhcmx5JywgJ0NoZWNrIHlvdXIgbWljcm9waG9uZScsICdVc2Ugc2ltcGxlciBjb21tYW5kcyddXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGNvbW1hbmQgYmFzZWQgb24gaW50ZW50XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IFZvaWNlQ29tbWFuZCk6IFByb21pc2U8Vm9pY2VSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgaW50ZW50LCBlbnRpdGllcyB9ID0gY29tbWFuZDtcblxuICAgIHN3aXRjaCAoaW50ZW50KSB7XG4gICAgICBjYXNlICdjcmVhdGVfcHJvbXB0JzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlQ3JlYXRlUHJvbXB0KGVudGl0aWVzKTtcbiAgICAgIFxuICAgICAgY2FzZSAncnVuX3Rlc3QnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVSdW5UZXN0KGVudGl0aWVzKTtcbiAgICAgIFxuICAgICAgY2FzZSAnZ2V0X2FuYWx5dGljcyc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZUdldEFuYWx5dGljcyhlbnRpdGllcyk7XG4gICAgICBcbiAgICAgIGNhc2UgJ3Nob3dfbWV0cmljcyc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZVNob3dNZXRyaWNzKGVudGl0aWVzKTtcbiAgICAgIFxuICAgICAgY2FzZSAnZXhwb3J0X3JlcG9ydCc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZUV4cG9ydFJlcG9ydChlbnRpdGllcyk7XG4gICAgICBcbiAgICAgIGNhc2UgJ2NvbXBhcmVfbW9kZWxzJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlQ29tcGFyZU1vZGVscyhlbnRpdGllcyk7XG4gICAgICBcbiAgICAgIGNhc2UgJ29wdGltaXplX3Byb21wdCc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZU9wdGltaXplUHJvbXB0KGVudGl0aWVzKTtcbiAgICAgIFxuICAgICAgY2FzZSAnc2NoZWR1bGVfdGVzdCc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZVNjaGVkdWxlVGVzdChlbnRpdGllcyk7XG4gICAgICBcbiAgICAgIGNhc2UgJ3ZvaWNlX3NldHRpbmdzJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlVm9pY2VTZXR0aW5ncyhlbnRpdGllcyk7XG4gICAgICBcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVVua25vd25JbnRlbnQoY29tbWFuZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjcmVhdGUgcHJvbXB0IGNvbW1hbmRcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlQ3JlYXRlUHJvbXB0KGVudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogUHJvbWlzZTxWb2ljZVJlc3BvbnNlPiB7XG4gICAgY29uc3QgcHJvbXB0TmFtZSA9IGVudGl0aWVzLm5hbWUgfHwgJ1VudGl0bGVkIFByb21wdCc7XG4gICAgY29uc3QgcHJvbXB0VHlwZSA9IGVudGl0aWVzLnR5cGUgfHwgJ2dlbmVyYWwnO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBgSSdsbCBoZWxwIHlvdSBjcmVhdGUgYSBuZXcgcHJvbXB0IGNhcmQgY2FsbGVkIFwiJHtwcm9tcHROYW1lfVwiIG9mIHR5cGUgXCIke3Byb21wdFR5cGV9XCIuIFdoYXQgY29udGVudCB3b3VsZCB5b3UgbGlrZSB0byBpbmNsdWRlP2AsXG4gICAgICBhY3Rpb25zOiBbJ29wZW5fcHJvbXB0X2VkaXRvciddLFxuICAgICAgZGF0YTogeyBuYW1lOiBwcm9tcHROYW1lLCB0eXBlOiBwcm9tcHRUeXBlIH0sXG4gICAgICBzdWdnZXN0aW9uczogW1xuICAgICAgICAnQWRkIHRlc3QgY2FzZXMnLFxuICAgICAgICAnU2V0IG1vZGVsIHBhcmFtZXRlcnMnLFxuICAgICAgICAnQ29uZmlndXJlIGFzc2VydGlvbnMnXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgcnVuIHRlc3QgY29tbWFuZFxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVSdW5UZXN0KGVudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogUHJvbWlzZTxWb2ljZVJlc3BvbnNlPiB7XG4gICAgY29uc3QgdGVzdE5hbWUgPSBlbnRpdGllcy50ZXN0IHx8IGVudGl0aWVzLnByb21wdDtcbiAgICBjb25zdCBtb2RlbCA9IGVudGl0aWVzLm1vZGVsIHx8ICdkZWZhdWx0JztcbiAgICBcbiAgICBpZiAoIXRlc3ROYW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0OiAnV2hpY2ggdGVzdCB3b3VsZCB5b3UgbGlrZSB0byBydW4/IFBsZWFzZSBzcGVjaWZ5IHRoZSB0ZXN0IG5hbWUgb3IgcHJvbXB0IGNhcmQuJyxcbiAgICAgICAgc3VnZ2VzdGlvbnM6IFsnTGlzdCBhdmFpbGFibGUgdGVzdHMnLCAnU2hvdyByZWNlbnQgdGVzdHMnLCAnSGVscCB3aXRoIHRlc3RpbmcnXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogYFJ1bm5pbmcgdGVzdCBcIiR7dGVzdE5hbWV9XCIgd2l0aCBtb2RlbCBcIiR7bW9kZWx9XCIuIEknbGwgbm90aWZ5IHlvdSB3aGVuIGl0J3MgY29tcGxldGUuYCxcbiAgICAgIGFjdGlvbnM6IFsnc3RhcnRfdGVzdF9leGVjdXRpb24nXSxcbiAgICAgIGRhdGE6IHsgdGVzdE5hbWUsIG1vZGVsIH0sXG4gICAgICBzdWdnZXN0aW9uczogW1xuICAgICAgICAnTW9uaXRvciBwcm9ncmVzcycsXG4gICAgICAgICdWaWV3IGxpdmUgcmVzdWx0cycsXG4gICAgICAgICdSdW4gYWRkaXRpb25hbCB0ZXN0cydcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhbmFseXRpY3MgcmVxdWVzdFxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVHZXRBbmFseXRpY3MoZW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPFZvaWNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCB0aW1lZnJhbWUgPSBlbnRpdGllcy50aW1lZnJhbWUgfHwgJ3RvZGF5JztcbiAgICBjb25zdCBtZXRyaWMgPSBlbnRpdGllcy5tZXRyaWMgfHwgJ292ZXJ2aWV3JztcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IHRoaXMuYW5hbHl0aWNzRW5naW5lLmdldERhc2hib2FyZE1ldHJpY3MoKTtcbiAgICAgIFxuICAgICAgbGV0IHJlc3BvbnNlVGV4dCA9ICcnO1xuICAgICAgbGV0IGRhdGEgPSB7fTtcblxuICAgICAgc3dpdGNoIChtZXRyaWMpIHtcbiAgICAgICAgY2FzZSAnc3VjY2Vzc19yYXRlJzpcbiAgICAgICAgICByZXNwb25zZVRleHQgPSBgQ3VycmVudCBzdWNjZXNzIHJhdGUgaXMgJHsobWV0cmljcy5yZWFsdGltZS5zdWNjZXNzUmF0ZSAqIDEwMCkudG9GaXhlZCgxKX0lLiBgO1xuICAgICAgICAgIHJlc3BvbnNlVGV4dCArPSBgT3ZlcmFsbCBzdWNjZXNzIHJhdGUgaXMgJHsobWV0cmljcy5oaXN0b3JpY2FsLm92ZXJhbGxTdWNjZXNzUmF0ZSAqIDEwMCkudG9GaXhlZCgxKX0lLmA7XG4gICAgICAgICAgZGF0YSA9IHsgc3VjY2Vzc1JhdGU6IG1ldHJpY3MucmVhbHRpbWUuc3VjY2Vzc1JhdGUgfTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAncGVyZm9ybWFuY2UnOlxuICAgICAgICAgIHJlc3BvbnNlVGV4dCA9IGBBdmVyYWdlIHJlc3BvbnNlIHRpbWUgaXMgJHttZXRyaWNzLnJlYWx0aW1lLmF2ZXJhZ2VSZXNwb25zZVRpbWUudG9GaXhlZCgwKX0gbWlsbGlzZWNvbmRzLiBgO1xuICAgICAgICAgIHJlc3BvbnNlVGV4dCArPSBgWW91IGhhdmUgJHttZXRyaWNzLnJlYWx0aW1lLmFjdGl2ZVRlc3RzfSBhY3RpdmUgdGVzdHMgcnVubmluZy5gO1xuICAgICAgICAgIGRhdGEgPSB7IHJlc3BvbnNlVGltZTogbWV0cmljcy5yZWFsdGltZS5hdmVyYWdlUmVzcG9uc2VUaW1lIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVzcG9uc2VUZXh0ID0gYEhlcmUncyB5b3VyIGFuYWx5dGljcyBvdmVydmlldzogYDtcbiAgICAgICAgICByZXNwb25zZVRleHQgKz0gYCR7bWV0cmljcy5oaXN0b3JpY2FsLnRvdGFsVGVzdHN9IHRvdGFsIHRlc3RzLCBgO1xuICAgICAgICAgIHJlc3BvbnNlVGV4dCArPSBgJHsobWV0cmljcy5yZWFsdGltZS5zdWNjZXNzUmF0ZSAqIDEwMCkudG9GaXhlZCgxKX0lIHN1Y2Nlc3MgcmF0ZSwgYDtcbiAgICAgICAgICByZXNwb25zZVRleHQgKz0gYCR7bWV0cmljcy5yZWFsdGltZS5hdmVyYWdlUmVzcG9uc2VUaW1lLnRvRml4ZWQoMCl9bXMgYXZlcmFnZSByZXNwb25zZSB0aW1lLmA7XG4gICAgICAgICAgZGF0YSA9IG1ldHJpY3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRleHQ6IHJlc3BvbnNlVGV4dCxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgYWN0aW9uczogWydzaG93X2FuYWx5dGljc19kYXNoYm9hcmQnXSxcbiAgICAgICAgc3VnZ2VzdGlvbnM6IFtcbiAgICAgICAgICAnU2hvdyBwZXJmb3JtYW5jZSB0cmVuZHMnLFxuICAgICAgICAgICdWaWV3IGRldGFpbGVkIG1ldHJpY3MnLFxuICAgICAgICAgICdFeHBvcnQgYW5hbHl0aWNzIHJlcG9ydCdcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogJ0kgZW5jb3VudGVyZWQgYW4gZXJyb3IgcmV0cmlldmluZyBhbmFseXRpY3MgZGF0YS4gUGxlYXNlIHRyeSBhZ2FpbiBvciBjaGVjayB0aGUgZGFzaGJvYXJkIG1hbnVhbGx5LicsXG4gICAgICAgIHN1Z2dlc3Rpb25zOiBbJ1RyeSBhZ2FpbicsICdDaGVjayBkYXNoYm9hcmQnLCAnQ29udGFjdCBzdXBwb3J0J11cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBtZXRyaWNzIGRpc3BsYXlcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlU2hvd01ldHJpY3MoZW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPFZvaWNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBtZXRyaWNUeXBlID0gZW50aXRpZXMudHlwZSB8fCAnYWxsJztcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogYERpc3BsYXlpbmcgJHttZXRyaWNUeXBlfSBtZXRyaWNzIG9uIHlvdXIgZGFzaGJvYXJkLiBZb3UgY2FuIGFsc28gYXNrIG1lIHNwZWNpZmljIHF1ZXN0aW9ucyBhYm91dCB0aGUgZGF0YS5gLFxuICAgICAgYWN0aW9uczogWydzaG93X21ldHJpY3NfZGFzaGJvYXJkJ10sXG4gICAgICBkYXRhOiB7IG1ldHJpY1R5cGUgfSxcbiAgICAgIHN1Z2dlc3Rpb25zOiBbXG4gICAgICAgICdXaGF0IHdhcyB5ZXN0ZXJkYXlcXCdzIHBlcmZvcm1hbmNlPycsXG4gICAgICAgICdTaG93IG1vZGVsIGNvbXBhcmlzb24nLFxuICAgICAgICAnRXhwb3J0IHRoaXMgZGF0YSdcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSByZXBvcnQgZXhwb3J0XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZUV4cG9ydFJlcG9ydChlbnRpdGllczogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IFByb21pc2U8Vm9pY2VSZXNwb25zZT4ge1xuICAgIGNvbnN0IGZvcm1hdCA9IGVudGl0aWVzLmZvcm1hdCB8fCAncGRmJztcbiAgICBjb25zdCB0aW1lZnJhbWUgPSBlbnRpdGllcy50aW1lZnJhbWUgfHwgJ2xhc3Rfd2Vlayc7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGBHZW5lcmF0aW5nICR7Zm9ybWF0LnRvVXBwZXJDYXNlKCl9IHJlcG9ydCBmb3IgJHt0aW1lZnJhbWV9LiBJJ2xsIG5vdGlmeSB5b3Ugd2hlbiBpdCdzIHJlYWR5IGZvciBkb3dubG9hZC5gLFxuICAgICAgYWN0aW9uczogWydnZW5lcmF0ZV9yZXBvcnQnXSxcbiAgICAgIGRhdGE6IHsgZm9ybWF0LCB0aW1lZnJhbWUgfSxcbiAgICAgIHN1Z2dlc3Rpb25zOiBbXG4gICAgICAgICdTY2hlZHVsZSByZWd1bGFyIHJlcG9ydHMnLFxuICAgICAgICAnQ3VzdG9taXplIHJlcG9ydCBjb250ZW50JyxcbiAgICAgICAgJ1NoYXJlIHdpdGggdGVhbSdcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBtb2RlbCBjb21wYXJpc29uXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZUNvbXBhcmVNb2RlbHMoZW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPFZvaWNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBtb2RlbDEgPSBlbnRpdGllcy5tb2RlbDE7XG4gICAgY29uc3QgbW9kZWwyID0gZW50aXRpZXMubW9kZWwyO1xuICAgIGNvbnN0IG1ldHJpYyA9IGVudGl0aWVzLm1ldHJpYyB8fCAncGVyZm9ybWFuY2UnO1xuICAgIFxuICAgIGlmICghbW9kZWwxIHx8ICFtb2RlbDIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRleHQ6ICdQbGVhc2Ugc3BlY2lmeSB3aGljaCB0d28gbW9kZWxzIHlvdVxcJ2QgbGlrZSB0byBjb21wYXJlLicsXG4gICAgICAgIHN1Z2dlc3Rpb25zOiBbXG4gICAgICAgICAgJ0NvbXBhcmUgR1BULTQgYW5kIENsYXVkZScsXG4gICAgICAgICAgJ1Nob3cgYXZhaWxhYmxlIG1vZGVscycsXG4gICAgICAgICAgJ1ZpZXcgbW9kZWwgc3RhdGlzdGljcydcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogYENvbXBhcmluZyAke21vZGVsMX0gYW5kICR7bW9kZWwyfSBiYXNlZCBvbiAke21ldHJpY30uIERpc3BsYXlpbmcgcmVzdWx0cyBvbiB5b3VyIHNjcmVlbi5gLFxuICAgICAgYWN0aW9uczogWydzaG93X21vZGVsX2NvbXBhcmlzb24nXSxcbiAgICAgIGRhdGE6IHsgbW9kZWwxLCBtb2RlbDIsIG1ldHJpYyB9LFxuICAgICAgc3VnZ2VzdGlvbnM6IFtcbiAgICAgICAgJ0NvbXBhcmUgZGlmZmVyZW50IG1ldHJpY3MnLFxuICAgICAgICAnQWRkIG1vcmUgbW9kZWxzJyxcbiAgICAgICAgJ0V4cG9ydCBjb21wYXJpc29uJ1xuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHByb21wdCBvcHRpbWl6YXRpb25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlT3B0aW1pemVQcm9tcHQoZW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPFZvaWNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwcm9tcHRJZCA9IGVudGl0aWVzLnByb21wdCB8fCBlbnRpdGllcy5pZDtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogYEFuYWx5emluZyBwcm9tcHQgZm9yIG9wdGltaXphdGlvbiBvcHBvcnR1bml0aWVzLiBJJ2xsIHN1Z2dlc3QgaW1wcm92ZW1lbnRzIGJhc2VkIG9uIHBlcmZvcm1hbmNlIGRhdGEgYW5kIGJlc3QgcHJhY3RpY2VzLmAsXG4gICAgICBhY3Rpb25zOiBbJ29wdGltaXplX3Byb21wdCddLFxuICAgICAgZGF0YTogeyBwcm9tcHRJZCB9LFxuICAgICAgc3VnZ2VzdGlvbnM6IFtcbiAgICAgICAgJ0FwcGx5IHN1Z2dlc3RlZCBjaGFuZ2VzJyxcbiAgICAgICAgJ1J1biBBL0IgdGVzdCcsXG4gICAgICAgICdWaWV3IG9wdGltaXphdGlvbiBoaXN0b3J5J1xuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHRlc3Qgc2NoZWR1bGluZ1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVTY2hlZHVsZVRlc3QoZW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPFZvaWNlUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzY2hlZHVsZSA9IGVudGl0aWVzLnNjaGVkdWxlIHx8IGVudGl0aWVzLnRpbWU7XG4gICAgY29uc3QgdGVzdCA9IGVudGl0aWVzLnRlc3QgfHwgZW50aXRpZXMucHJvbXB0O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBgU2NoZWR1bGluZyB0ZXN0IFwiJHt0ZXN0fVwiIHRvIHJ1biAke3NjaGVkdWxlfS4gWW91J2xsIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBhYm91dCB0aGUgcmVzdWx0cy5gLFxuICAgICAgYWN0aW9uczogWydzY2hlZHVsZV90ZXN0J10sXG4gICAgICBkYXRhOiB7IHRlc3QsIHNjaGVkdWxlIH0sXG4gICAgICBzdWdnZXN0aW9uczogW1xuICAgICAgICAnU2V0IHVwIHJlY3VycmluZyB0ZXN0cycsXG4gICAgICAgICdDb25maWd1cmUgbm90aWZpY2F0aW9ucycsXG4gICAgICAgICdWaWV3IHNjaGVkdWxlZCB0ZXN0cydcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB2b2ljZSBzZXR0aW5nc1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVWb2ljZVNldHRpbmdzKGVudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogUHJvbWlzZTxWb2ljZVJlc3BvbnNlPiB7XG4gICAgY29uc3Qgc2V0dGluZyA9IGVudGl0aWVzLnNldHRpbmc7XG4gICAgY29uc3QgdmFsdWUgPSBlbnRpdGllcy52YWx1ZTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogJ09wZW5pbmcgdm9pY2Ugc2V0dGluZ3MuIFlvdSBjYW4gY29uZmlndXJlIGxhbmd1YWdlLCBzcGVlY2ggcmF0ZSwgYW5kIHZvaWNlIHByZWZlcmVuY2VzIGhlcmUuJyxcbiAgICAgIGFjdGlvbnM6IFsnb3Blbl92b2ljZV9zZXR0aW5ncyddLFxuICAgICAgZGF0YTogeyBzZXR0aW5nLCB2YWx1ZSB9LFxuICAgICAgc3VnZ2VzdGlvbnM6IFtcbiAgICAgICAgJ0NoYW5nZSBsYW5ndWFnZScsXG4gICAgICAgICdBZGp1c3Qgc3BlZWNoIHJhdGUnLFxuICAgICAgICAnVGVzdCB2b2ljZSBvdXRwdXQnXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdW5rbm93biBpbnRlbnRzXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZVVua25vd25JbnRlbnQoY29tbWFuZDogVm9pY2VDb21tYW5kKTogVm9pY2VSZXNwb25zZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGBJIGRpZG4ndCB1bmRlcnN0YW5kIHRoYXQgY29tbWFuZC4gQ291bGQgeW91IHBsZWFzZSByZXBocmFzZSBpdD8gSSBjYW4gaGVscCB3aXRoIGNyZWF0aW5nIHByb21wdHMsIHJ1bm5pbmcgdGVzdHMsIHZpZXdpbmcgYW5hbHl0aWNzLCBhbmQgbW9yZS5gLFxuICAgICAgc3VnZ2VzdGlvbnM6IFtcbiAgICAgICAgJ0NyZWF0ZSBhIG5ldyBwcm9tcHQnLFxuICAgICAgICAnUnVuIGEgdGVzdCcsXG4gICAgICAgICdTaG93IGFuYWx5dGljcycsXG4gICAgICAgICdIZWxwIG1lIHdpdGggdm9pY2UgY29tbWFuZHMnXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHNwZWVjaCB0byB0ZXh0XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHNwZWVjaFRvVGV4dChhdWRpb0RhdGE6IEFycmF5QnVmZmVyLCBsYW5ndWFnZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBUaGlzIHdvdWxkIGludGVncmF0ZSB3aXRoIGEgc3BlZWNoLXRvLXRleHQgc2VydmljZSBsaWtlIEdvb2dsZSBTcGVlY2gtdG8tVGV4dFxuICAgIC8vIEZvciBub3csIHJldHVybmluZyBhIHBsYWNlaG9sZGVyXG4gICAgcmV0dXJuIFwicGxhY2Vob2xkZXIgdHJhbnNjcmlwdGlvblwiO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdGV4dCB0byBzcGVlY2hcbiAgICovXG4gIHB1YmxpYyBhc3luYyB0ZXh0VG9TcGVlY2godGV4dDogc3RyaW5nLCBsYW5ndWFnZTogc3RyaW5nID0gJ2VuLVVTJyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAvLyBUaGlzIHdvdWxkIGludGVncmF0ZSB3aXRoIGEgdGV4dC10by1zcGVlY2ggc2VydmljZVxuICAgIC8vIEZvciBub3csIHJldHVybmluZyBlbXB0eSBidWZmZXJcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgdm9pY2Ugc2Vzc2lvblxuICAgKi9cbiAgcHVibGljIHN0YXJ0Vm9pY2VTZXNzaW9uKHVzZXJJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICB0aGlzLmFjdGl2ZVNlc3Npb24gPSBgc2Vzc2lvbl8ke0RhdGUubm93KCl9XyR7dXNlcklkfWA7XG4gICAgdGhpcy5lbWl0KCdzZXNzaW9uU3RhcnRlZCcsIHRoaXMuYWN0aXZlU2Vzc2lvbik7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlU2Vzc2lvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmQgdm9pY2Ugc2Vzc2lvblxuICAgKi9cbiAgcHVibGljIGVuZFZvaWNlU2Vzc2lvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hY3RpdmVTZXNzaW9uKSB7XG4gICAgICB0aGlzLmVtaXQoJ3Nlc3Npb25FbmRlZCcsIHRoaXMuYWN0aXZlU2Vzc2lvbik7XG4gICAgICB0aGlzLmFjdGl2ZVNlc3Npb24gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3VwcG9ydGVkIGxhbmd1YWdlc1xuICAgKi9cbiAgcHVibGljIGdldFN1cHBvcnRlZExhbmd1YWdlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnN1cHBvcnRlZExhbmd1YWdlc107XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlIHZvaWNlIHNldHRpbmdzXG4gICAqL1xuICBwdWJsaWMgY29uZmlndXJlVm9pY2VTZXR0aW5ncyhzZXR0aW5nczoge1xuICAgIGxhbmd1YWdlPzogc3RyaW5nO1xuICAgIHNwZWVjaFJhdGU/OiBudW1iZXI7XG4gICAgcGl0Y2g/OiBudW1iZXI7XG4gICAgdm9sdW1lPzogbnVtYmVyO1xuICB9KTogdm9pZCB7XG4gICAgLy8gU3RvcmUgdm9pY2Ugc2V0dGluZ3MgY29uZmlndXJhdGlvblxuICAgIHRoaXMuZW1pdCgnc2V0dGluZ3NDaGFuZ2VkJywgc2V0dGluZ3MpO1xuICB9XG59XG5cbi8qKlxuICogQWR2YW5jZWQgTkxQIFByb2Nlc3NvciBmb3Igdm9pY2UgY29tbWFuZHNcbiAqL1xuY2xhc3MgQWR2YW5jZWROTFBQcm9jZXNzb3IgaW1wbGVtZW50cyBOYXR1cmFsTGFuZ3VhZ2VQcm9jZXNzb3Ige1xuICBwcml2YXRlIGludGVudFBhdHRlcm5zOiBNYXA8c3RyaW5nLCBSZWdFeHBbXT47XG4gIHByaXZhdGUgZW50aXR5RXh0cmFjdG9yczogTWFwPHN0cmluZywgUmVnRXhwPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmludGVudFBhdHRlcm5zID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuZW50aXR5RXh0cmFjdG9ycyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmluaXRpYWxpemVQYXR0ZXJucygpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplUGF0dGVybnMoKTogdm9pZCB7XG4gICAgLy8gSW50ZW50IHBhdHRlcm5zXG4gICAgdGhpcy5pbnRlbnRQYXR0ZXJucy5zZXQoJ2NyZWF0ZV9wcm9tcHQnLCBbXG4gICAgICAvY3JlYXRlXFxzKyg/OmFcXHMrKT8oPzpuZXdcXHMrKT9wcm9tcHQvaSxcbiAgICAgIC9uZXdcXHMrcHJvbXB0L2ksXG4gICAgICAvbWFrZVxccysoPzphXFxzKyk/cHJvbXB0L2lcbiAgICBdKTtcblxuICAgIHRoaXMuaW50ZW50UGF0dGVybnMuc2V0KCdydW5fdGVzdCcsIFtcbiAgICAgIC9ydW5cXHMrKD86dGhlXFxzKyk/dGVzdC9pLFxuICAgICAgL2V4ZWN1dGVcXHMrKD86dGhlXFxzKyk/dGVzdC9pLFxuICAgICAgL3N0YXJ0XFxzKyg/OnRoZVxccyspP3Rlc3QvaSxcbiAgICAgIC90ZXN0XFxzKyg/OnRoZVxccyspP3Byb21wdC9pXG4gICAgXSk7XG5cbiAgICB0aGlzLmludGVudFBhdHRlcm5zLnNldCgnZ2V0X2FuYWx5dGljcycsIFtcbiAgICAgIC9zaG93XFxzKyg/Om1lXFxzKyk/YW5hbHl0aWNzL2ksXG4gICAgICAvZ2V0XFxzKyg/OnRoZVxccyspP2FuYWx5dGljcy9pLFxuICAgICAgL2FuYWx5dGljc1xccysoPzpkYXRhfGluZm9ybWF0aW9uKS9pLFxuICAgICAgL3BlcmZvcm1hbmNlXFxzKyg/OmRhdGF8bWV0cmljcykvaVxuICAgIF0pO1xuXG4gICAgdGhpcy5pbnRlbnRQYXR0ZXJucy5zZXQoJ3Nob3dfbWV0cmljcycsIFtcbiAgICAgIC9zaG93XFxzKyg/Om1lXFxzKyk/bWV0cmljcy9pLFxuICAgICAgL2Rpc3BsYXlcXHMrbWV0cmljcy9pLFxuICAgICAgL3ZpZXdcXHMrbWV0cmljcy9pXG4gICAgXSk7XG5cbiAgICB0aGlzLmludGVudFBhdHRlcm5zLnNldCgnZXhwb3J0X3JlcG9ydCcsIFtcbiAgICAgIC9leHBvcnRcXHMrKD86YVxccyspP3JlcG9ydC9pLFxuICAgICAgL2dlbmVyYXRlXFxzKyg/OmFcXHMrKT9yZXBvcnQvaSxcbiAgICAgIC9jcmVhdGVcXHMrKD86YVxccyspP3JlcG9ydC9pLFxuICAgICAgL2Rvd25sb2FkXFxzK3JlcG9ydC9pXG4gICAgXSk7XG5cbiAgICB0aGlzLmludGVudFBhdHRlcm5zLnNldCgnY29tcGFyZV9tb2RlbHMnLCBbXG4gICAgICAvY29tcGFyZVxccysoPzp0aGVcXHMrKT9tb2RlbHMvaSxcbiAgICAgIC9tb2RlbFxccytjb21wYXJpc29uL2ksXG4gICAgICAvY29tcGFyZVxccytcXHcrXFxzKyg/OmFuZHx3aXRofHRvKVxccytcXHcrL2lcbiAgICBdKTtcblxuICAgIHRoaXMuaW50ZW50UGF0dGVybnMuc2V0KCdvcHRpbWl6ZV9wcm9tcHQnLCBbXG4gICAgICAvb3B0aW1pemVcXHMrKD86dGhlXFxzKyk/cHJvbXB0L2ksXG4gICAgICAvaW1wcm92ZVxccysoPzp0aGVcXHMrKT9wcm9tcHQvaSxcbiAgICAgIC9lbmhhbmNlXFxzKyg/OnRoZVxccyspP3Byb21wdC9pXG4gICAgXSk7XG5cbiAgICB0aGlzLmludGVudFBhdHRlcm5zLnNldCgnc2NoZWR1bGVfdGVzdCcsIFtcbiAgICAgIC9zY2hlZHVsZVxccysoPzphXFxzKyk/dGVzdC9pLFxuICAgICAgL3NldFxccyt1cFxccysoPzphXFxzKyk/dGVzdC9pLFxuICAgICAgL3JlY3VycmluZ1xccyt0ZXN0L2lcbiAgICBdKTtcblxuICAgIHRoaXMuaW50ZW50UGF0dGVybnMuc2V0KCd2b2ljZV9zZXR0aW5ncycsIFtcbiAgICAgIC92b2ljZVxccytzZXR0aW5ncy9pLFxuICAgICAgL2NvbmZpZ3VyZVxccyt2b2ljZS9pLFxuICAgICAgL2NoYW5nZVxccytsYW5ndWFnZS9pLFxuICAgICAgL3NwZWVjaFxccytzZXR0aW5ncy9pXG4gICAgXSk7XG5cbiAgICAvLyBFbnRpdHkgZXh0cmFjdG9yc1xuICAgIHRoaXMuZW50aXR5RXh0cmFjdG9ycy5zZXQoJ25hbWUnLCAvKD86Y2FsbGVkfG5hbWVkKVxccytbXCInXT8oW15cIidcXHNdKylbXCInXT8vaSk7XG4gICAgdGhpcy5lbnRpdHlFeHRyYWN0b3JzLnNldCgndHlwZScsIC8oPzp0eXBlfGtpbmQpXFxzK1tcIiddPyhbXlwiJ1xcc10rKVtcIiddPy9pKTtcbiAgICB0aGlzLmVudGl0eUV4dHJhY3RvcnMuc2V0KCdtb2RlbCcsIC8oPzptb2RlbHx1c2luZylcXHMrW1wiJ10/KFteXCInXFxzXSspW1wiJ10/L2kpO1xuICAgIHRoaXMuZW50aXR5RXh0cmFjdG9ycy5zZXQoJ3RpbWVmcmFtZScsIC8oPzpmb3J8ZnJvbXxvdmVyKVxccysoPzp0aGVcXHMrKT8oPzpsYXN0XFxzKyk/KFteXCInXFxzXSspL2kpO1xuICAgIHRoaXMuZW50aXR5RXh0cmFjdG9ycy5zZXQoJ21ldHJpYycsIC8oPzptZXRyaWN8bWVhc3VyZSlcXHMrW1wiJ10/KFteXCInXFxzXSspW1wiJ10/L2kpO1xuICAgIHRoaXMuZW50aXR5RXh0cmFjdG9ycy5zZXQoJ2Zvcm1hdCcsIC8oPzphc3xpbilcXHMrKFthLXpdezMsNH0pXFxzKyg/OmZvcm1hdCk/L2kpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHByb2Nlc3NDb21tYW5kKHRleHQ6IHN0cmluZyk6IFByb21pc2U8e1xuICAgIGludGVudDogc3RyaW5nO1xuICAgIGVudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgfT4ge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRUZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICBsZXQgYmVzdEludGVudCA9ICd1bmtub3duJztcbiAgICBsZXQgbWF4U2NvcmUgPSAwO1xuXG4gICAgLy8gRmluZCBiZXN0IG1hdGNoaW5nIGludGVudFxuICAgIGZvciAoY29uc3QgW2ludGVudCwgcGF0dGVybnNdIG9mIHRoaXMuaW50ZW50UGF0dGVybnMpIHtcbiAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgICAgICBpZiAocGF0dGVybi50ZXN0KG5vcm1hbGl6ZWRUZXh0KSkge1xuICAgICAgICAgIGNvbnN0IHNjb3JlID0gdGhpcy5jYWxjdWxhdGVQYXR0ZXJuU2NvcmUobm9ybWFsaXplZFRleHQsIHBhdHRlcm4pO1xuICAgICAgICAgIGlmIChzY29yZSA+IG1heFNjb3JlKSB7XG4gICAgICAgICAgICBtYXhTY29yZSA9IHNjb3JlO1xuICAgICAgICAgICAgYmVzdEludGVudCA9IGludGVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IGVudGl0aWVzXG4gICAgY29uc3QgZW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtlbnRpdHlUeXBlLCBleHRyYWN0b3JdIG9mIHRoaXMuZW50aXR5RXh0cmFjdG9ycykge1xuICAgICAgY29uc3QgbWF0Y2ggPSB0ZXh0Lm1hdGNoKGV4dHJhY3Rvcik7XG4gICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgZW50aXRpZXNbZW50aXR5VHlwZV0gPSBtYXRjaFsxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb25maWRlbmNlID0gbWF4U2NvcmUgPiAwID8gTWF0aC5taW4obWF4U2NvcmUgLyAxMCwgMSkgOiAwLjE7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW50ZW50OiBiZXN0SW50ZW50LFxuICAgICAgZW50aXRpZXMsXG4gICAgICBjb25maWRlbmNlXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUGF0dGVyblNjb3JlKHRleHQ6IHN0cmluZywgcGF0dGVybjogUmVnRXhwKTogbnVtYmVyIHtcbiAgICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2gocGF0dGVybik7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIDA7XG4gICAgXG4gICAgLy8gU2NvcmUgYmFzZWQgb24gbWF0Y2ggbGVuZ3RoIGFuZCBwb3NpdGlvblxuICAgIGNvbnN0IG1hdGNoTGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGNvbnN0IHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aDtcbiAgICBjb25zdCBwb3NpdGlvblNjb3JlID0gMSAtIChtYXRjaC5pbmRleCEgLyB0ZXh0TGVuZ3RoKTtcbiAgICBjb25zdCBsZW5ndGhTY29yZSA9IG1hdGNoTGVuZ3RoIC8gdGV4dExlbmd0aDtcbiAgICBcbiAgICByZXR1cm4gKHBvc2l0aW9uU2NvcmUgKyBsZW5ndGhTY29yZSkgKiA1O1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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