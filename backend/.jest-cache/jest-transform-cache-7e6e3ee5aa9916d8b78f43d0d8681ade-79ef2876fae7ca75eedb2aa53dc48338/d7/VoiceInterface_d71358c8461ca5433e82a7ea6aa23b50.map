{"version":3,"names":["cov_zeek9514e","actualCoverage","s","events_1","require","AnalyticsEngine_1","BlockchainAuditTrail_1","VoiceInterface","EventEmitter","constructor","f","analyticsEngine","AnalyticsEngine","getInstance","blockchainAudit","BlockchainAuditTrail","nlpProcessor","AdvancedNLPProcessor","supportedLanguages","activeSession","processVoiceCommand","audioData","userId","language","b","transcription","speechToText","nlpResult","processCommand","voiceCommand","id","Date","now","Math","random","toString","substr","command","intent","entities","confidence","timestamp","sessionId","recordAuditEvent","eventType","data","response","executeCommand","emit","error","console","message","text","suggestions","handleCreatePrompt","handleRunTest","handleGetAnalytics","handleShowMetrics","handleExportReport","handleCompareModels","handleOptimizePrompt","handleScheduleTest","handleVoiceSettings","handleUnknownIntent","promptName","name","promptType","type","actions","testName","test","prompt","model","timeframe","metric","metrics","getDashboardMetrics","responseText","realtime","successRate","toFixed","historical","overallSuccessRate","averageResponseTime","activeTests","responseTime","totalTests","metricType","format","toUpperCase","model1","model2","promptId","schedule","time","setting","value","textToSpeech","ArrayBuffer","startVoiceSession","endVoiceSession","getSupportedLanguages","configureVoiceSettings","settings","exports","intentPatterns","Map","entityExtractors","initializePatterns","set","normalizedText","toLowerCase","trim","bestIntent","maxScore","patterns","pattern","score","calculatePatternScore","entityType","extractor","match","min","matchLength","length","textLength","positionScore","index","lengthScore"],"sources":["/workspaces/prompt-card-system/backend/src/services/analytics/VoiceInterface.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { AnalyticsEngine } from './AnalyticsEngine';\nimport { BlockchainAuditTrail } from './BlockchainAuditTrail';\n\nexport interface VoiceCommand {\n  id: string;\n  command: string;\n  intent: string;\n  entities: Record<string, string>;\n  confidence: number;\n  timestamp: Date;\n  userId: string;\n  sessionId: string;\n}\n\nexport interface VoiceResponse {\n  text: string;\n  data?: any;\n  actions?: string[];\n  suggestions?: string[];\n}\n\nexport interface NaturalLanguageProcessor {\n  processCommand(text: string): Promise<{\n    intent: string;\n    entities: Record<string, string>;\n    confidence: number;\n  }>;\n}\n\nexport class VoiceInterface extends EventEmitter {\n  private analyticsEngine: AnalyticsEngine;\n  private blockchainAudit: BlockchainAuditTrail;\n  private nlpProcessor: NaturalLanguageProcessor;\n  private supportedLanguages: string[];\n  private activeSession: string | null;\n\n  constructor() {\n    super();\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.blockchainAudit = BlockchainAuditTrail.getInstance();\n    this.nlpProcessor = new AdvancedNLPProcessor();\n    this.supportedLanguages = ['en-US', 'es-ES', 'fr-FR', 'de-DE', 'ja-JP', 'zh-CN'];\n    this.activeSession = null;\n  }\n\n  /**\n   * Process voice command and return response\n   */\n  public async processVoiceCommand(\n    audioData: ArrayBuffer,\n    userId: string,\n    language: string = 'en-US'\n  ): Promise<VoiceResponse> {\n    try {\n      // Convert speech to text\n      const transcription = await this.speechToText(audioData, language);\n      \n      // Process with NLP\n      const nlpResult = await this.nlpProcessor.processCommand(transcription);\n      \n      // Create voice command record\n      const voiceCommand: VoiceCommand = {\n        id: `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        command: transcription,\n        intent: nlpResult.intent,\n        entities: nlpResult.entities,\n        confidence: nlpResult.confidence,\n        timestamp: new Date(),\n        userId,\n        sessionId: this.activeSession || 'default'\n      };\n\n      // Log to blockchain audit trail\n      await this.blockchainAudit.recordAuditEvent({\n        eventType: 'voice_command',\n        userId,\n        data: voiceCommand,\n        timestamp: new Date()\n      });\n\n      // Execute command based on intent\n      const response = await this.executeCommand(voiceCommand);\n      \n      this.emit('voiceCommandProcessed', voiceCommand, response);\n      \n      return response;\n    } catch (error) {\n      console.error('Error processing voice command:', error);\n      \n      // Log error to audit trail\n      await this.blockchainAudit.recordAuditEvent({\n        eventType: 'voice_command_error',\n        userId,\n        data: { error: error.message },\n        timestamp: new Date()\n      });\n\n      return {\n        text: 'I apologize, but I encountered an error processing your voice command. Please try again.',\n        suggestions: ['Try speaking more clearly', 'Check your microphone', 'Use simpler commands']\n      };\n    }\n  }\n\n  /**\n   * Execute command based on intent\n   */\n  private async executeCommand(command: VoiceCommand): Promise<VoiceResponse> {\n    const { intent, entities } = command;\n\n    switch (intent) {\n      case 'create_prompt':\n        return await this.handleCreatePrompt(entities);\n      \n      case 'run_test':\n        return await this.handleRunTest(entities);\n      \n      case 'get_analytics':\n        return await this.handleGetAnalytics(entities);\n      \n      case 'show_metrics':\n        return await this.handleShowMetrics(entities);\n      \n      case 'export_report':\n        return await this.handleExportReport(entities);\n      \n      case 'compare_models':\n        return await this.handleCompareModels(entities);\n      \n      case 'optimize_prompt':\n        return await this.handleOptimizePrompt(entities);\n      \n      case 'schedule_test':\n        return await this.handleScheduleTest(entities);\n      \n      case 'voice_settings':\n        return await this.handleVoiceSettings(entities);\n      \n      default:\n        return this.handleUnknownIntent(command);\n    }\n  }\n\n  /**\n   * Handle create prompt command\n   */\n  private async handleCreatePrompt(entities: Record<string, string>): Promise<VoiceResponse> {\n    const promptName = entities.name || 'Untitled Prompt';\n    const promptType = entities.type || 'general';\n    \n    return {\n      text: `I'll help you create a new prompt card called \"${promptName}\" of type \"${promptType}\". What content would you like to include?`,\n      actions: ['open_prompt_editor'],\n      data: { name: promptName, type: promptType },\n      suggestions: [\n        'Add test cases',\n        'Set model parameters',\n        'Configure assertions'\n      ]\n    };\n  }\n\n  /**\n   * Handle run test command\n   */\n  private async handleRunTest(entities: Record<string, string>): Promise<VoiceResponse> {\n    const testName = entities.test || entities.prompt;\n    const model = entities.model || 'default';\n    \n    if (!testName) {\n      return {\n        text: 'Which test would you like to run? Please specify the test name or prompt card.',\n        suggestions: ['List available tests', 'Show recent tests', 'Help with testing']\n      };\n    }\n\n    return {\n      text: `Running test \"${testName}\" with model \"${model}\". I'll notify you when it's complete.`,\n      actions: ['start_test_execution'],\n      data: { testName, model },\n      suggestions: [\n        'Monitor progress',\n        'View live results',\n        'Run additional tests'\n      ]\n    };\n  }\n\n  /**\n   * Handle analytics request\n   */\n  private async handleGetAnalytics(entities: Record<string, string>): Promise<VoiceResponse> {\n    const timeframe = entities.timeframe || 'today';\n    const metric = entities.metric || 'overview';\n    \n    try {\n      const metrics = await this.analyticsEngine.getDashboardMetrics();\n      \n      let responseText = '';\n      let data = {};\n\n      switch (metric) {\n        case 'success_rate':\n          responseText = `Current success rate is ${(metrics.realtime.successRate * 100).toFixed(1)}%. `;\n          responseText += `Overall success rate is ${(metrics.historical.overallSuccessRate * 100).toFixed(1)}%.`;\n          data = { successRate: metrics.realtime.successRate };\n          break;\n          \n        case 'performance':\n          responseText = `Average response time is ${metrics.realtime.averageResponseTime.toFixed(0)} milliseconds. `;\n          responseText += `You have ${metrics.realtime.activeTests} active tests running.`;\n          data = { responseTime: metrics.realtime.averageResponseTime };\n          break;\n          \n        default:\n          responseText = `Here's your analytics overview: `;\n          responseText += `${metrics.historical.totalTests} total tests, `;\n          responseText += `${(metrics.realtime.successRate * 100).toFixed(1)}% success rate, `;\n          responseText += `${metrics.realtime.averageResponseTime.toFixed(0)}ms average response time.`;\n          data = metrics;\n      }\n\n      return {\n        text: responseText,\n        data,\n        actions: ['show_analytics_dashboard'],\n        suggestions: [\n          'Show performance trends',\n          'View detailed metrics',\n          'Export analytics report'\n        ]\n      };\n    } catch (error) {\n      return {\n        text: 'I encountered an error retrieving analytics data. Please try again or check the dashboard manually.',\n        suggestions: ['Try again', 'Check dashboard', 'Contact support']\n      };\n    }\n  }\n\n  /**\n   * Handle metrics display\n   */\n  private async handleShowMetrics(entities: Record<string, string>): Promise<VoiceResponse> {\n    const metricType = entities.type || 'all';\n    \n    return {\n      text: `Displaying ${metricType} metrics on your dashboard. You can also ask me specific questions about the data.`,\n      actions: ['show_metrics_dashboard'],\n      data: { metricType },\n      suggestions: [\n        'What was yesterday\\'s performance?',\n        'Show model comparison',\n        'Export this data'\n      ]\n    };\n  }\n\n  /**\n   * Handle report export\n   */\n  private async handleExportReport(entities: Record<string, string>): Promise<VoiceResponse> {\n    const format = entities.format || 'pdf';\n    const timeframe = entities.timeframe || 'last_week';\n    \n    return {\n      text: `Generating ${format.toUpperCase()} report for ${timeframe}. I'll notify you when it's ready for download.`,\n      actions: ['generate_report'],\n      data: { format, timeframe },\n      suggestions: [\n        'Schedule regular reports',\n        'Customize report content',\n        'Share with team'\n      ]\n    };\n  }\n\n  /**\n   * Handle model comparison\n   */\n  private async handleCompareModels(entities: Record<string, string>): Promise<VoiceResponse> {\n    const model1 = entities.model1;\n    const model2 = entities.model2;\n    const metric = entities.metric || 'performance';\n    \n    if (!model1 || !model2) {\n      return {\n        text: 'Please specify which two models you\\'d like to compare.',\n        suggestions: [\n          'Compare GPT-4 and Claude',\n          'Show available models',\n          'View model statistics'\n        ]\n      };\n    }\n\n    return {\n      text: `Comparing ${model1} and ${model2} based on ${metric}. Displaying results on your screen.`,\n      actions: ['show_model_comparison'],\n      data: { model1, model2, metric },\n      suggestions: [\n        'Compare different metrics',\n        'Add more models',\n        'Export comparison'\n      ]\n    };\n  }\n\n  /**\n   * Handle prompt optimization\n   */\n  private async handleOptimizePrompt(entities: Record<string, string>): Promise<VoiceResponse> {\n    const promptId = entities.prompt || entities.id;\n    \n    return {\n      text: `Analyzing prompt for optimization opportunities. I'll suggest improvements based on performance data and best practices.`,\n      actions: ['optimize_prompt'],\n      data: { promptId },\n      suggestions: [\n        'Apply suggested changes',\n        'Run A/B test',\n        'View optimization history'\n      ]\n    };\n  }\n\n  /**\n   * Handle test scheduling\n   */\n  private async handleScheduleTest(entities: Record<string, string>): Promise<VoiceResponse> {\n    const schedule = entities.schedule || entities.time;\n    const test = entities.test || entities.prompt;\n    \n    return {\n      text: `Scheduling test \"${test}\" to run ${schedule}. You'll receive notifications about the results.`,\n      actions: ['schedule_test'],\n      data: { test, schedule },\n      suggestions: [\n        'Set up recurring tests',\n        'Configure notifications',\n        'View scheduled tests'\n      ]\n    };\n  }\n\n  /**\n   * Handle voice settings\n   */\n  private async handleVoiceSettings(entities: Record<string, string>): Promise<VoiceResponse> {\n    const setting = entities.setting;\n    const value = entities.value;\n    \n    return {\n      text: 'Opening voice settings. You can configure language, speech rate, and voice preferences here.',\n      actions: ['open_voice_settings'],\n      data: { setting, value },\n      suggestions: [\n        'Change language',\n        'Adjust speech rate',\n        'Test voice output'\n      ]\n    };\n  }\n\n  /**\n   * Handle unknown intents\n   */\n  private handleUnknownIntent(command: VoiceCommand): VoiceResponse {\n    return {\n      text: `I didn't understand that command. Could you please rephrase it? I can help with creating prompts, running tests, viewing analytics, and more.`,\n      suggestions: [\n        'Create a new prompt',\n        'Run a test',\n        'Show analytics',\n        'Help me with voice commands'\n      ]\n    };\n  }\n\n  /**\n   * Convert speech to text\n   */\n  private async speechToText(audioData: ArrayBuffer, language: string): Promise<string> {\n    // This would integrate with a speech-to-text service like Google Speech-to-Text\n    // For now, returning a placeholder\n    return \"placeholder transcription\";\n  }\n\n  /**\n   * Convert text to speech\n   */\n  public async textToSpeech(text: string, language: string = 'en-US'): Promise<ArrayBuffer> {\n    // This would integrate with a text-to-speech service\n    // For now, returning empty buffer\n    return new ArrayBuffer(0);\n  }\n\n  /**\n   * Start a voice session\n   */\n  public startVoiceSession(userId: string): string {\n    this.activeSession = `session_${Date.now()}_${userId}`;\n    this.emit('sessionStarted', this.activeSession);\n    return this.activeSession;\n  }\n\n  /**\n   * End voice session\n   */\n  public endVoiceSession(): void {\n    if (this.activeSession) {\n      this.emit('sessionEnded', this.activeSession);\n      this.activeSession = null;\n    }\n  }\n\n  /**\n   * Get supported languages\n   */\n  public getSupportedLanguages(): string[] {\n    return [...this.supportedLanguages];\n  }\n\n  /**\n   * Configure voice settings\n   */\n  public configureVoiceSettings(settings: {\n    language?: string;\n    speechRate?: number;\n    pitch?: number;\n    volume?: number;\n  }): void {\n    // Store voice settings configuration\n    this.emit('settingsChanged', settings);\n  }\n}\n\n/**\n * Advanced NLP Processor for voice commands\n */\nclass AdvancedNLPProcessor implements NaturalLanguageProcessor {\n  private intentPatterns: Map<string, RegExp[]>;\n  private entityExtractors: Map<string, RegExp>;\n\n  constructor() {\n    this.intentPatterns = new Map();\n    this.entityExtractors = new Map();\n    this.initializePatterns();\n  }\n\n  private initializePatterns(): void {\n    // Intent patterns\n    this.intentPatterns.set('create_prompt', [\n      /create\\s+(?:a\\s+)?(?:new\\s+)?prompt/i,\n      /new\\s+prompt/i,\n      /make\\s+(?:a\\s+)?prompt/i\n    ]);\n\n    this.intentPatterns.set('run_test', [\n      /run\\s+(?:the\\s+)?test/i,\n      /execute\\s+(?:the\\s+)?test/i,\n      /start\\s+(?:the\\s+)?test/i,\n      /test\\s+(?:the\\s+)?prompt/i\n    ]);\n\n    this.intentPatterns.set('get_analytics', [\n      /show\\s+(?:me\\s+)?analytics/i,\n      /get\\s+(?:the\\s+)?analytics/i,\n      /analytics\\s+(?:data|information)/i,\n      /performance\\s+(?:data|metrics)/i\n    ]);\n\n    this.intentPatterns.set('show_metrics', [\n      /show\\s+(?:me\\s+)?metrics/i,\n      /display\\s+metrics/i,\n      /view\\s+metrics/i\n    ]);\n\n    this.intentPatterns.set('export_report', [\n      /export\\s+(?:a\\s+)?report/i,\n      /generate\\s+(?:a\\s+)?report/i,\n      /create\\s+(?:a\\s+)?report/i,\n      /download\\s+report/i\n    ]);\n\n    this.intentPatterns.set('compare_models', [\n      /compare\\s+(?:the\\s+)?models/i,\n      /model\\s+comparison/i,\n      /compare\\s+\\w+\\s+(?:and|with|to)\\s+\\w+/i\n    ]);\n\n    this.intentPatterns.set('optimize_prompt', [\n      /optimize\\s+(?:the\\s+)?prompt/i,\n      /improve\\s+(?:the\\s+)?prompt/i,\n      /enhance\\s+(?:the\\s+)?prompt/i\n    ]);\n\n    this.intentPatterns.set('schedule_test', [\n      /schedule\\s+(?:a\\s+)?test/i,\n      /set\\s+up\\s+(?:a\\s+)?test/i,\n      /recurring\\s+test/i\n    ]);\n\n    this.intentPatterns.set('voice_settings', [\n      /voice\\s+settings/i,\n      /configure\\s+voice/i,\n      /change\\s+language/i,\n      /speech\\s+settings/i\n    ]);\n\n    // Entity extractors\n    this.entityExtractors.set('name', /(?:called|named)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('type', /(?:type|kind)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('model', /(?:model|using)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('timeframe', /(?:for|from|over)\\s+(?:the\\s+)?(?:last\\s+)?([^\"'\\s]+)/i);\n    this.entityExtractors.set('metric', /(?:metric|measure)\\s+[\"']?([^\"'\\s]+)[\"']?/i);\n    this.entityExtractors.set('format', /(?:as|in)\\s+([a-z]{3,4})\\s+(?:format)?/i);\n  }\n\n  public async processCommand(text: string): Promise<{\n    intent: string;\n    entities: Record<string, string>;\n    confidence: number;\n  }> {\n    const normalizedText = text.toLowerCase().trim();\n    let bestIntent = 'unknown';\n    let maxScore = 0;\n\n    // Find best matching intent\n    for (const [intent, patterns] of this.intentPatterns) {\n      for (const pattern of patterns) {\n        if (pattern.test(normalizedText)) {\n          const score = this.calculatePatternScore(normalizedText, pattern);\n          if (score > maxScore) {\n            maxScore = score;\n            bestIntent = intent;\n          }\n        }\n      }\n    }\n\n    // Extract entities\n    const entities: Record<string, string> = {};\n    for (const [entityType, extractor] of this.entityExtractors) {\n      const match = text.match(extractor);\n      if (match && match[1]) {\n        entities[entityType] = match[1];\n      }\n    }\n\n    const confidence = maxScore > 0 ? Math.min(maxScore / 10, 1) : 0.1;\n\n    return {\n      intent: bestIntent,\n      entities,\n      confidence\n    };\n  }\n\n  private calculatePatternScore(text: string, pattern: RegExp): number {\n    const match = text.match(pattern);\n    if (!match) return 0;\n    \n    // Score based on match length and position\n    const matchLength = match[0].length;\n    const textLength = text.length;\n    const positionScore = 1 - (match.index! / textLength);\n    const lengthScore = matchLength / textLength;\n    \n    return (positionScore + lengthScore) * 5;\n  }\n}"],"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","ignoreList":[]}