63dfdee5e7ccbb5bde73b35c1fcfb670
"use strict";

/* istanbul ignore next */
function cov_1wnidn7wxl() {
  var path = "/workspaces/prompt-card-system/backend/src/middleware/auth.ts";
  var hash = "8fa7a8b9d1c82bf0b44d455dd9f688e7d6e84486";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/middleware/auth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 432
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 63
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 55
        }
      },
      "6": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 58
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "8": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 93
        }
      },
      "9": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 113
        }
      },
      "10": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "11": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 65
        }
      },
      "12": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "13": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "14": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 53,
          column: 1
        }
      },
      "15": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 61
        }
      },
      "16": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 67
        }
      },
      "17": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 59
        }
      },
      "18": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 35
        }
      },
      "19": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "20": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 36,
          column: 6
        }
      },
      "21": {
        start: {
          line: 37,
          column: 25
        },
        end: {
          line: 40,
          column: 6
        }
      },
      "22": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "23": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 50,
          column: 11
        }
      },
      "24": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 52
        }
      },
      "25": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 54,
          column: 40
        }
      },
      "26": {
        start: {
          line: 57,
          column: 23
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "27": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 81
        }
      },
      "28": {
        start: {
          line: 66,
          column: 21
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "29": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 25
        }
      },
      "30": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 57
        }
      },
      "31": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 70,
          column: 36
        }
      },
      "32": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 73,
          column: 1
        }
      },
      "33": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 64
        }
      },
      "34": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 74,
          column: 40
        }
      },
      "35": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 165,
          column: 1
        }
      },
      "36": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "37": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 52
        }
      },
      "38": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "39": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 108
        }
      },
      "40": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "41": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 19
        }
      },
      "42": {
        start: {
          line: 88,
          column: 22
        },
        end: {
          line: 88,
          column: 45
        }
      },
      "43": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "44": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 104
        }
      },
      "45": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "46": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "47": {
        start: {
          line: 100,
          column: 24
        },
        end: {
          line: 100,
          column: 72
        }
      },
      "48": {
        start: {
          line: 102,
          column: 35
        },
        end: {
          line: 102,
          column: 59
        }
      },
      "49": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 103,
          column: 32
        }
      },
      "50": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "51": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "52": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 133
        }
      },
      "53": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "54": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "55": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 111
        }
      },
      "56": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "57": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 128,
          column: 65
        }
      },
      "58": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "59": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 50
        }
      },
      "60": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 67
        }
      },
      "61": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 27
        }
      },
      "62": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 115
        }
      },
      "63": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "64": {
        start: {
          line: 139,
          column: 29
        },
        end: {
          line: 139,
          column: 96
        }
      },
      "65": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "66": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 121
        }
      },
      "67": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 146,
          column: 15
        }
      },
      "68": {
        start: {
          line: 148,
          column: 13
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "69": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 121
        }
      },
      "70": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "71": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 132
        }
      },
      "72": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "73": {
        start: {
          line: 166,
          column: 0
        },
        end: {
          line: 166,
          column: 34
        }
      },
      "74": {
        start: {
          line: 168,
          column: 21
        },
        end: {
          line: 186,
          column: 1
        }
      },
      "75": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "76": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 52
        }
      },
      "77": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "78": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 19
        }
      },
      "79": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 19
        }
      },
      "80": {
        start: {
          line: 175,
          column: 22
        },
        end: {
          line: 175,
          column: 45
        }
      },
      "81": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "82": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 177,
          column: 76
        }
      },
      "83": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 31
        }
      },
      "84": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 15
        }
      },
      "85": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "86": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 187,
          column: 36
        }
      },
      "87": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 209,
          column: 1
        }
      },
      "88": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 208,
          column: 6
        }
      },
      "89": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "90": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "91": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 19
        }
      },
      "92": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "93": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 204,
          column: 15
        }
      },
      "94": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 19
        }
      },
      "95": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "96": {
        start: {
          line: 210,
          column: 0
        },
        end: {
          line: 210,
          column: 34
        }
      },
      "97": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 233,
          column: 1
        }
      },
      "98": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 232,
          column: 6
        }
      },
      "99": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "100": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "101": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "102": {
        start: {
          line: 222,
          column: 30
        },
        end: {
          line: 222,
          column: 111
        }
      },
      "103": {
        start: {
          line: 222,
          column: 69
        },
        end: {
          line: 222,
          column: 110
        }
      },
      "104": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "105": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "106": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 19
        }
      },
      "107": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "108": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 234,
          column: 46
        }
      },
      "109": {
        start: {
          line: 236,
          column: 21
        },
        end: {
          line: 294,
          column: 1
        }
      },
      "110": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "111": {
        start: {
          line: 238,
          column: 33
        },
        end: {
          line: 238,
          column: 41
        }
      },
      "112": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "113": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 244,
          column: 15
        }
      },
      "114": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "115": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "116": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "117": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 19
        }
      },
      "118": {
        start: {
          line: 256,
          column: 24
        },
        end: {
          line: 256,
          column: 87
        }
      },
      "119": {
        start: {
          line: 258,
          column: 23
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "120": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 44
        }
      },
      "121": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 269,
          column: 11
        }
      },
      "122": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "123": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 277,
          column: 15
        }
      },
      "124": {
        start: {
          line: 279,
          column: 13
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "125": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 284,
          column: 15
        }
      },
      "126": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 291,
          column: 15
        }
      },
      "127": {
        start: {
          line: 295,
          column: 0
        },
        end: {
          line: 295,
          column: 36
        }
      },
      "128": {
        start: {
          line: 297,
          column: 23
        },
        end: {
          line: 299,
          column: 1
        }
      },
      "129": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 298,
          column: 33
        }
      },
      "130": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 300,
          column: 40
        }
      },
      "131": {
        start: {
          line: 301,
          column: 15
        },
        end: {
          line: 324,
          column: 1
        }
      },
      "132": {
        start: {
          line: 302,
          column: 4
        },
        end: {
          line: 323,
          column: 5
        }
      },
      "133": {
        start: {
          line: 303,
          column: 27
        },
        end: {
          line: 303,
          column: 52
        }
      },
      "134": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "135": {
        start: {
          line: 305,
          column: 26
        },
        end: {
          line: 305,
          column: 49
        }
      },
      "136": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 47
        }
      },
      "137": {
        start: {
          line: 309,
          column: 33
        },
        end: {
          line: 309,
          column: 41
        }
      },
      "138": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "139": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 54
        }
      },
      "140": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 316,
          column: 11
        }
      },
      "141": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 322,
          column: 11
        }
      },
      "142": {
        start: {
          line: 325,
          column: 0
        },
        end: {
          line: 325,
          column: 24
        }
      },
      "143": {
        start: {
          line: 327,
          column: 26
        },
        end: {
          line: 330,
          column: 1
        }
      },
      "144": {
        start: {
          line: 328,
          column: 21
        },
        end: {
          line: 328,
          column: 56
        }
      },
      "145": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 329,
          column: 85
        }
      },
      "146": {
        start: {
          line: 329,
          column: 47
        },
        end: {
          line: 329,
          column: 72
        }
      },
      "147": {
        start: {
          line: 331,
          column: 0
        },
        end: {
          line: 331,
          column: 46
        }
      },
      "148": {
        start: {
          line: 332,
          column: 22
        },
        end: {
          line: 334,
          column: 1
        }
      },
      "149": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 333,
          column: 44
        }
      },
      "150": {
        start: {
          line: 335,
          column: 0
        },
        end: {
          line: 335,
          column: 38
        }
      },
      "151": {
        start: {
          line: 336,
          column: 30
        },
        end: {
          line: 345,
          column: 1
        }
      },
      "152": {
        start: {
          line: 337,
          column: 23
        },
        end: {
          line: 337,
          column: 24
        }
      },
      "153": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 343,
          column: 5
        }
      },
      "154": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "155": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 45
        }
      },
      "156": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 27
        }
      },
      "157": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 344,
          column: 24
        }
      },
      "158": {
        start: {
          line: 346,
          column: 0
        },
        end: {
          line: 346,
          column: 54
        }
      },
      "159": {
        start: {
          line: 348,
          column: 23
        },
        end: {
          line: 386,
          column: 1
        }
      },
      "160": {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 385,
          column: 5
        }
      },
      "161": {
        start: {
          line: 350,
          column: 27
        },
        end: {
          line: 350,
          column: 52
        }
      },
      "162": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "163": {
        start: {
          line: 352,
          column: 26
        },
        end: {
          line: 352,
          column: 49
        }
      },
      "164": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 47
        }
      },
      "165": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "166": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 356,
          column: 80
        }
      },
      "167": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 359,
          column: 17
        }
      },
      "168": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 358,
          column: 66
        }
      },
      "169": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 364,
          column: 19
        }
      },
      "170": {
        start: {
          line: 371,
          column: 33
        },
        end: {
          line: 371,
          column: 41
        }
      },
      "171": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "172": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 54
        }
      },
      "173": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 378,
          column: 11
        }
      },
      "174": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 384,
          column: 11
        }
      },
      "175": {
        start: {
          line: 387,
          column: 0
        },
        end: {
          line: 387,
          column: 40
        }
      },
      "176": {
        start: {
          line: 389,
          column: 31
        },
        end: {
          line: 397,
          column: 1
        }
      },
      "177": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 26
        }
      },
      "178": {
        start: {
          line: 391,
          column: 27
        },
        end: {
          line: 391,
          column: 46
        }
      },
      "179": {
        start: {
          line: 392,
          column: 4
        },
        end: {
          line: 396,
          column: 5
        }
      },
      "180": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "181": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 45
        }
      },
      "182": {
        start: {
          line: 398,
          column: 0
        },
        end: {
          line: 398,
          column: 56
        }
      },
      "183": {
        start: {
          line: 400,
          column: 25
        },
        end: {
          line: 406,
          column: 1
        }
      },
      "184": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 404,
          column: 50
        }
      },
      "185": {
        start: {
          line: 405,
          column: 4
        },
        end: {
          line: 405,
          column: 42
        }
      },
      "186": {
        start: {
          line: 407,
          column: 0
        },
        end: {
          line: 407,
          column: 44
        }
      },
      "187": {
        start: {
          line: 409,
          column: 21
        },
        end: {
          line: 419,
          column: 1
        }
      },
      "188": {
        start: {
          line: 410,
          column: 28
        },
        end: {
          line: 410,
          column: 30
        }
      },
      "189": {
        start: {
          line: 411,
          column: 4
        },
        end: {
          line: 413,
          column: 5
        }
      },
      "190": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 85
        }
      },
      "191": {
        start: {
          line: 414,
          column: 4
        },
        end: {
          line: 418,
          column: 6
        }
      },
      "192": {
        start: {
          line: 420,
          column: 0
        },
        end: {
          line: 420,
          column: 36
        }
      },
      "193": {
        start: {
          line: 422,
          column: 0
        },
        end: {
          line: 424,
          column: 19
        }
      },
      "194": {
        start: {
          line: 423,
          column: 4
        },
        end: {
          line: 423,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 21,
            column: 24
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "generateFingerprint",
        decl: {
          start: {
            line: 56,
            column: 9
          },
          end: {
            line: 56,
            column: 28
          }
        },
        loc: {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 21
          },
          end: {
            line: 66,
            column: 22
          }
        },
        loc: {
          start: {
            line: 66,
            column: 41
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 71,
            column: 24
          }
        },
        loc: {
          start: {
            line: 71,
            column: 59
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 76,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        },
        loc: {
          start: {
            line: 76,
            column: 40
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 76
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 168,
            column: 21
          },
          end: {
            line: 168,
            column: 22
          }
        },
        loc: {
          start: {
            line: 168,
            column: 41
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 168
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        },
        loc: {
          start: {
            line: 189,
            column: 38
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 189
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 190,
            column: 11
          },
          end: {
            line: 190,
            column: 12
          }
        },
        loc: {
          start: {
            line: 190,
            column: 31
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 190
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 212,
            column: 26
          },
          end: {
            line: 212,
            column: 27
          }
        },
        loc: {
          start: {
            line: 212,
            column: 51
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 212
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 213,
            column: 11
          },
          end: {
            line: 213,
            column: 12
          }
        },
        loc: {
          start: {
            line: 213,
            column: 31
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 213
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 222,
            column: 55
          },
          end: {
            line: 222,
            column: 56
          }
        },
        loc: {
          start: {
            line: 222,
            column: 69
          },
          end: {
            line: 222,
            column: 110
          }
        },
        line: 222
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 236,
            column: 21
          },
          end: {
            line: 236,
            column: 22
          }
        },
        loc: {
          start: {
            line: 236,
            column: 41
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 236
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 297,
            column: 23
          },
          end: {
            line: 297,
            column: 24
          }
        },
        loc: {
          start: {
            line: 297,
            column: 34
          },
          end: {
            line: 299,
            column: 1
          }
        },
        line: 297
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 301,
            column: 15
          },
          end: {
            line: 301,
            column: 16
          }
        },
        loc: {
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 324,
            column: 1
          }
        },
        line: 301
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 327,
            column: 26
          },
          end: {
            line: 327,
            column: 27
          }
        },
        loc: {
          start: {
            line: 327,
            column: 38
          },
          end: {
            line: 330,
            column: 1
          }
        },
        line: 327
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 329,
            column: 36
          },
          end: {
            line: 329,
            column: 37
          }
        },
        loc: {
          start: {
            line: 329,
            column: 47
          },
          end: {
            line: 329,
            column: 72
          }
        },
        line: 329
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 332,
            column: 22
          },
          end: {
            line: 332,
            column: 23
          }
        },
        loc: {
          start: {
            line: 332,
            column: 37
          },
          end: {
            line: 334,
            column: 1
          }
        },
        line: 332
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 336,
            column: 30
          },
          end: {
            line: 336,
            column: 31
          }
        },
        loc: {
          start: {
            line: 336,
            column: 42
          },
          end: {
            line: 345,
            column: 1
          }
        },
        line: 336
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 348,
            column: 23
          },
          end: {
            line: 348,
            column: 24
          }
        },
        loc: {
          start: {
            line: 348,
            column: 37
          },
          end: {
            line: 386,
            column: 1
          }
        },
        line: 348
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 389,
            column: 31
          },
          end: {
            line: 389,
            column: 32
          }
        },
        loc: {
          start: {
            line: 389,
            column: 37
          },
          end: {
            line: 397,
            column: 1
          }
        },
        line: 389
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 400,
            column: 25
          },
          end: {
            line: 400,
            column: 26
          }
        },
        loc: {
          start: {
            line: 400,
            column: 31
          },
          end: {
            line: 406,
            column: 1
          }
        },
        line: 400
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 409,
            column: 21
          },
          end: {
            line: 409,
            column: 22
          }
        },
        loc: {
          start: {
            line: 409,
            column: 27
          },
          end: {
            line: 419,
            column: 1
          }
        },
        line: 409
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        },
        loc: {
          start: {
            line: 422,
            column: 18
          },
          end: {
            line: 424,
            column: 1
          }
        },
        line: 422
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 41
          }
        }, {
          start: {
            line: 12,
            column: 45
          },
          end: {
            line: 12,
            column: 93
          }
        }],
        line: 12
      },
      "4": {
        loc: {
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 13,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 61
          },
          end: {
            line: 13,
            column: 113
          }
        }],
        line: 13
      },
      "5": {
        loc: {
          start: {
            line: 14,
            column: 19
          },
          end: {
            line: 14,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 19
          },
          end: {
            line: 14,
            column: 41
          }
        }, {
          start: {
            line: 14,
            column: 45
          },
          end: {
            line: 14,
            column: 50
          }
        }],
        line: 14
      },
      "6": {
        loc: {
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 15,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 15,
            column: 57
          }
        }, {
          start: {
            line: 15,
            column: 61
          },
          end: {
            line: 15,
            column: 65
          }
        }],
        line: 15
      },
      "7": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 54
          }
        }, {
          start: {
            line: 24,
            column: 57
          },
          end: {
            line: 24,
            column: 59
          }
        }],
        line: 24
      },
      "8": {
        loc: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 29
          }
        }, {
          start: {
            line: 25,
            column: 33
          },
          end: {
            line: 25,
            column: 35
          }
        }],
        line: 25
      },
      "9": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "10": {
        loc: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 49,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 49,
            column: 48
          }
        }, {
          start: {
            line: 49,
            column: 52
          },
          end: {
            line: 49,
            column: 61
          }
        }],
        line: 49
      },
      "11": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 33
          }
        }, {
          start: {
            line: 58,
            column: 37
          },
          end: {
            line: 58,
            column: 39
          }
        }],
        line: 58
      },
      "12": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 38
          }
        }, {
          start: {
            line: 59,
            column: 42
          },
          end: {
            line: 59,
            column: 44
          }
        }],
        line: 59
      },
      "13": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 38
          }
        }, {
          start: {
            line: 60,
            column: 42
          },
          end: {
            line: 60,
            column: 44
          }
        }],
        line: 60
      },
      "14": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 29
          }
        }, {
          start: {
            line: 61,
            column: 33
          },
          end: {
            line: 61,
            column: 35
          }
        }],
        line: 61
      },
      "15": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "16": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 23
          }
        }, {
          start: {
            line: 79,
            column: 27
          },
          end: {
            line: 79,
            column: 60
          }
        }],
        line: 79
      },
      "17": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "18": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "19": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 31
          }
        }, {
          start: {
            line: 105,
            column: 35
          },
          end: {
            line: 105,
            column: 77
          }
        }],
        line: 105
      },
      "20": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "21": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 116,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 116,
            column: 29
          }
        }, {
          start: {
            line: 116,
            column: 33
          },
          end: {
            line: 116,
            column: 64
          }
        }],
        line: 116
      },
      "22": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "23": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "24": {
        loc: {
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 131,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 131,
            column: 45
          }
        }, {
          start: {
            line: 131,
            column: 49
          },
          end: {
            line: 131,
            column: 66
          }
        }],
        line: 131
      },
      "25": {
        loc: {
          start: {
            line: 139,
            column: 38
          },
          end: {
            line: 139,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 63
          },
          end: {
            line: 139,
            column: 76
          }
        }, {
          start: {
            line: 139,
            column: 79
          },
          end: {
            line: 139,
            column: 94
          }
        }],
        line: 139
      },
      "26": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 163,
            column: 9
          }
        }],
        line: 140
      },
      "27": {
        loc: {
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: 156,
            column: 13
          },
          end: {
            line: 163,
            column: 9
          }
        }],
        line: 148
      },
      "28": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "29": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 23
          }
        }, {
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 171,
            column: 60
          }
        }],
        line: 171
      },
      "30": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "31": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "32": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "33": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "34": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "35": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "36": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "37": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: 279,
            column: 13
          },
          end: {
            line: 292,
            column: 9
          }
        }],
        line: 272
      },
      "38": {
        loc: {
          start: {
            line: 279,
            column: 13
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 13
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: 286,
            column: 13
          },
          end: {
            line: 292,
            column: 9
          }
        }],
        line: 279
      },
      "39": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "40": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 304,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 304,
            column: 22
          }
        }, {
          start: {
            line: 304,
            column: 26
          },
          end: {
            line: 304,
            column: 58
          }
        }],
        line: 304
      },
      "41": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "42": {
        loc: {
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 329,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 329,
            column: 20
          },
          end: {
            line: 329,
            column: 73
          }
        }, {
          start: {
            line: 329,
            column: 76
          },
          end: {
            line: 329,
            column: 84
          }
        }],
        line: 329
      },
      "43": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "44": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "45": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 351,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 351,
            column: 22
          }
        }, {
          start: {
            line: 351,
            column: 26
          },
          end: {
            line: 351,
            column: 58
          }
        }],
        line: 351
      },
      "46": {
        loc: {
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 359,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 359,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "47": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "48": {
        loc: {
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 395,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 395,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "49": {
        loc: {
          start: {
            line: 412,
            column: 43
          },
          end: {
            line: 412,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 43
          },
          end: {
            line: 412,
            column: 74
          }
        }, {
          start: {
            line: 412,
            column: 78
          },
          end: {
            line: 412,
            column: 79
          }
        }],
        line: 412
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/middleware/auth.ts",
      mappings: ";;;;;;AAAA,gEAA+B;AAC/B,wDAA8B;AAE9B,2DAAuD;AACvD,mCAAqC;AA6BrC,kBAAkB;AAClB,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,gDAAgD,CAAC;AAC9F,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,oDAAoD,CAAC;AAClH,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,KAAK,CAAC;AACnD,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,IAAI,CAAC;AAElE,mEAAmE;AACnE,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAU,CAAC;AAE5C,iDAAiD;AACjD,MAAM,cAAc,GAAG,IAAI,GAAG,EAO1B,CAAC;AAEL,oDAAoD;AAC7C,MAAM,cAAc,GAAG,CAAC,OAAgD,EAAE,GAAa,EAAE,EAAE;IAChG,MAAM,GAAG,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB;IAC/D,MAAM,SAAS,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACxD,MAAM,SAAS,GAAG,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC;IAEhC,MAAM,eAAe,GAAG;QACtB,GAAG,OAAO;QACV,SAAS;QACT,WAAW;QACX,SAAS;QACT,GAAG;KACJ,CAAC;IAEF,MAAM,WAAW,GAAG,sBAAG,CAAC,IAAI,CAAC,eAAsB,EAAE,UAAoB,EAAE;QACzE,SAAS,EAAE,UAAiB;QAC5B,KAAK,EAAE,GAAG;KACJ,CAAC,CAAC;IAEV,MAAM,YAAY,GAAG,sBAAG,CAAC,IAAI,CAAC,eAAsB,EAAE,kBAA4B,EAAE;QAClF,SAAS,EAAE,kBAAyB;QACpC,KAAK,EAAE,GAAG,GAAG,UAAU;KACjB,CAAC,CAAC;IAEV,uBAAuB;IACvB,IAAI,GAAG,EAAE,CAAC;QACR,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE;YAC5B,MAAM,EAAE,OAAO,CAAC,EAAE;YAClB,SAAS;YACT,WAAW;YACX,SAAS;YACT,YAAY,EAAE,IAAI,IAAI,EAAE;YACxB,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,SAAS;SAClD,CAAC,CAAC;IACL,CAAC;IAED,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC;AAClD,CAAC,CAAC;AArCW,QAAA,cAAc,kBAqCzB;AAEF,uDAAuD;AACvD,SAAS,mBAAmB,CAAC,GAAY;IACvC,MAAM,UAAU,GAAG;QACjB,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE;QAC/B,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE;QACpC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE;QACpC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;KAC5B,CAAC;IAEF,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC/E,CAAC;AAED,6BAA6B;AACtB,MAAM,YAAY,GAAG,KAAK,EAAE,QAAgB,EAAmB,EAAE;IACtE,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,OAAO,kBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC3C,CAAC,CAAC;AAHW,QAAA,YAAY,gBAGvB;AAEK,MAAM,cAAc,GAAG,KAAK,EAAE,QAAgB,EAAE,cAAsB,EAAoB,EAAE;IACjG,OAAO,kBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;AAClD,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEF,4DAA4D;AACrD,MAAM,WAAW,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;IACnF,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAE7C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,mBAAmB,EAAE,CAAC,CAAC;YACvE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,qDAAqD;gBAC5D,IAAI,EAAE,UAAU;aACjB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;QAEjE,gCAAgC;QAChC,IAAI,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACjC,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;YACnE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,yBAAyB;gBAChC,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,eAAe;QACf,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,CAAe,CAAC;QAE5D,2BAA2B;QAC3B,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,GAAG,CAAC,EAAE,CAAC;QAEzB,sDAAsD;QACtD,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,KAAK,kBAAkB,EAAE,CAAC;YACtE,IAAA,oCAAgB,EAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC3C,MAAM,EAAE,sBAAsB;gBAC9B,gBAAgB,EAAE,OAAO,CAAC,WAAW;gBACrC,kBAAkB;gBAClB,MAAM,EAAE,OAAO,CAAC,EAAE;aACnB,CAAC,CAAC;YAEH,oCAAoC;YACpC,OAAO,CAAC,IAAI,CAAC,iCAAiC,OAAO,CAAC,EAAE,WAAW,OAAO,CAAC,WAAW,aAAa,kBAAkB,EAAE,CAAC,CAAC;QAC3H,CAAC;QAED,6DAA6D;QAC7D,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;YACzD,IAAA,oCAAgB,EAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC3C,MAAM,EAAE,mBAAmB;gBAC3B,OAAO,EAAE,OAAO,CAAC,SAAS;gBAC1B,SAAS;gBACT,MAAM,EAAE,OAAO,CAAC,EAAE;aACnB,CAAC,CAAC;YAEH,4CAA4C;YAC5C,OAAO,CAAC,IAAI,CAAC,sBAAsB,OAAO,CAAC,EAAE,WAAW,OAAO,CAAC,SAAS,aAAa,SAAS,EAAE,CAAC,CAAC;QACrG,CAAC;QAED,4CAA4C;QAC5C,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACtB,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACtD,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;gBAClC,OAAO,CAAC,SAAS,GAAG,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC;YACrD,CAAC;QACH,CAAC;QAED,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC;QACnB,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAClF,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,YAAY,GAAG,EAAE,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC;QAEzF,IAAI,KAAK,YAAY,sBAAG,CAAC,iBAAiB,EAAE,CAAC;YAC3C,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,GAAG,YAAY,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;YACpF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,oBAAoB;gBAC3B,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;QACL,CAAC;aAAM,IAAI,KAAK,YAAY,sBAAG,CAAC,iBAAiB,EAAE,CAAC;YAClD,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,GAAG,YAAY,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;YACpF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,gBAAgB;gBACvB,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,GAAG,YAAY,EAAE,MAAM,EAAE,0BAA0B,EAAE,CAAC,CAAC;YAC/F,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,4BAA4B;gBACnC,IAAI,EAAE,0BAA0B;aACjC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AAlGW,QAAA,WAAW,eAkGtB;AAEF,gEAAgE;AACzD,MAAM,YAAY,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;IACpF,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAE7C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,IAAI,EAAE,CAAC;YACP,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEtC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAClC,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,CAAe,CAAC;YAC5D,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC;QACrB,CAAC;QAED,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,uCAAuC;QACvC,IAAI,EAAE,CAAC;IACT,CAAC;AACH,CAAC,CAAC;AArBW,QAAA,YAAY,gBAqBvB;AAEF,uCAAuC;AAChC,MAAM,WAAW,GAAG,CAAC,YAAsB,EAAE,EAAE;IACpD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;QAC/D,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,0BAA0B;gBACjC,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,kCAAkC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAClE,IAAI,EAAE,mBAAmB;aAC1B,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,WAAW,eAsBtB;AAEF,6CAA6C;AACtC,MAAM,iBAAiB,GAAG,CAAC,mBAA6B,EAAE,EAAE;IACjE,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;QAC/D,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,0BAA0B;gBACjC,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,MAAM,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAC1D,GAAG,CAAC,IAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAC3C,CAAC;QAEF,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,wCAAwC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC/E,IAAI,EAAE,0BAA0B;aACjC,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,iBAAiB,qBA0B5B;AAEF,2BAA2B;AACpB,MAAM,YAAY,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;IACpF,IAAI,CAAC;QACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAElC,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,yBAAyB;gBAChC,IAAI,EAAE,kBAAkB;aACzB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,wCAAwC;QACxC,IAAI,iBAAiB,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;YACxC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,iCAAiC;gBACxC,IAAI,EAAE,uBAAuB;aAC9B,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,YAAY,EAAE,kBAAkB,CAAe,CAAC;QAE3E,sBAAsB;QACtB,MAAM,MAAM,GAAG,IAAA,sBAAc,EAAC;YAC5B,EAAE,EAAE,OAAO,CAAC,EAAE;YACd,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,OAAO,CAAC,WAAW;SACjC,CAAC,CAAC;QAEH,8BAA8B;QAC9B,iBAAiB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAEpC,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,MAAM;SACb,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,sBAAG,CAAC,iBAAiB,EAAE,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,4BAA4B;gBACnC,IAAI,EAAE,uBAAuB;aAC9B,CAAC,CAAC;QACL,CAAC;aAAM,IAAI,KAAK,YAAY,sBAAG,CAAC,iBAAiB,EAAE,CAAC;YAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,wBAAwB;gBAC/B,IAAI,EAAE,uBAAuB;aAC9B,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,uBAAuB;gBAC9B,IAAI,EAAE,qBAAqB;aAC5B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AA7DW,QAAA,YAAY,gBA6DvB;AAEF,+BAA+B;AACxB,MAAM,cAAc,GAAG,CAAC,KAAa,EAAQ,EAAE;IACpD,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEK,MAAM,MAAM,GAAG,CAAC,GAAY,EAAE,GAAa,EAAQ,EAAE;IAC1D,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAE7C,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACnD,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACtC,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC;QACxB,CAAC;QAED,2CAA2C;QAC3C,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAClC,IAAI,YAAY,EAAE,CAAC;YACjB,IAAA,sBAAc,EAAC,YAAY,CAAC,CAAC;QAC/B,CAAC;QAED,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,yBAAyB;SACnC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,eAAe;SACvB,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAzBW,QAAA,MAAM,UAyBjB;AAEF,+BAA+B;AACxB,MAAM,iBAAiB,GAAG,CAAC,MAAe,EAO9C,EAAE;IACH,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;IACrD,OAAO,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;AACnF,CAAC,CAAC;AAVW,QAAA,iBAAiB,qBAU5B;AAEK,MAAM,aAAa,GAAG,CAAC,SAAiB,EAAW,EAAE;IAC1D,OAAO,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC1C,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB;AAEK,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAU,EAAE;IAC9D,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,KAAK,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC;QAC5D,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;YAC9B,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACjC,YAAY,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AATW,QAAA,qBAAqB,yBAShC;AAEF,uCAAuC;AAChC,MAAM,cAAc,GAAG,CAAC,GAAY,EAAE,GAAa,EAAQ,EAAE;IAClE,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAE7C,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACnD,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACtC,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC;YAEtB,qDAAqD;YACrD,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,CAAe,CAAC;gBAC5D,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;oBACtB,IAAA,qBAAa,EAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBACnC,CAAC;gBACD,IAAA,oCAAgB,EAAC,cAAc,EAAE,GAAG,EAAE;oBACpC,MAAM,EAAE,QAAQ;oBAChB,MAAM,EAAE,OAAO,CAAC,EAAE;oBAClB,SAAS,EAAE,OAAO,CAAC,SAAS;iBAC7B,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,6DAA6D;YAC/D,CAAC;QACH,CAAC;QAED,2CAA2C;QAC3C,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAClC,IAAI,YAAY,EAAE,CAAC;YACjB,IAAA,sBAAc,EAAC,YAAY,CAAC,CAAC;QAC/B,CAAC;QAED,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,yBAAyB;SACnC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,eAAe;SACvB,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAxCW,QAAA,cAAc,kBAwCzB;AAEF,uCAAuC;AAChC,MAAM,sBAAsB,GAAG,GAAS,EAAE;IAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,cAAc,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW;IAEvD,KAAK,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC;QAC5D,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,cAAc,EAAE,CAAC;YAC1D,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AATW,QAAA,sBAAsB,0BASjC;AAEF,sEAAsE;AAC/D,MAAM,gBAAgB,GAAG,GAAS,EAAE;IACzC,mEAAmE;IACnE,+CAA+C;IAC/C,+BAA+B;IAC/B,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAC9C,IAAA,8BAAsB,GAAE,CAAC;AAC3B,CAAC,CAAC;AANW,QAAA,gBAAgB,oBAM3B;AAEF,qCAAqC;AAC9B,MAAM,YAAY,GAAG,GAI1B,EAAE;IACF,MAAM,eAAe,GAA2B,EAAE,CAAC;IAEnD,KAAK,MAAM,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC;QAC9C,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/E,CAAC;IAED,OAAO;QACL,cAAc,EAAE,cAAc,CAAC,IAAI;QACnC,iBAAiB,EAAE,iBAAiB,CAAC,IAAI;QACzC,eAAe;KAChB,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,YAAY,gBAgBvB;AAEF,mBAAmB;AACnB,WAAW,CAAC,GAAG,EAAE;IACf,IAAA,wBAAgB,GAAE,CAAC;AACrB,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,sBAAsB",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/middleware/auth.ts"],
      sourcesContent: ["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { Request, Response, NextFunction } from 'express';\nimport { logSecurityEvent } from './structuredLogging';\nimport { randomBytes } from 'crypto';\n\n// Extend Request interface to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        role: string;\n        permissions: string[];\n      };\n    }\n  }\n}\n\nexport interface JWTPayload {\n  id: string;\n  email: string;\n  role: string;\n  permissions: string[];\n  sessionId?: string;\n  fingerprint?: string;\n  ipAddress?: string;\n  iat?: number;\n  exp?: number;\n  jti?: string; // JWT ID for tracking\n}\n\n// JWT Secret keys\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'your-super-secret-refresh-key-change-in-production';\nconst JWT_EXPIRY = process.env.JWT_EXPIRY || '15m';\nconst JWT_REFRESH_EXPIRY = process.env.JWT_REFRESH_EXPIRY || '7d';\n\n// In-memory blacklist for revoked tokens (use Redis in production)\nconst blacklistedTokens = new Set<string>();\n\n// Active sessions tracking for enhanced security\nconst activeSessions = new Map<string, {\n  userId: string;\n  sessionId: string;\n  fingerprint: string;\n  ipAddress: string;\n  lastActivity: Date;\n  userAgent: string;\n}>();\n\n// Token generation utilities with enhanced security\nexport const generateTokens = (payload: Omit<JWTPayload, 'iat' | 'exp' | 'jti'>, req?: Request) => {\n  const jti = randomBytes(16).toString('hex'); // Unique token ID\n  const sessionId = randomBytes(16).toString('hex');\n  const fingerprint = req ? generateFingerprint(req) : '';\n  const ipAddress = req?.ip || '';\n\n  const enhancedPayload = {\n    ...payload,\n    sessionId,\n    fingerprint,\n    ipAddress,\n    jti\n  };\n\n  const accessToken = jwt.sign(enhancedPayload as any, JWT_SECRET as string, { \n    expiresIn: JWT_EXPIRY as any,\n    jwtid: jti\n  } as any);\n  \n  const refreshToken = jwt.sign(enhancedPayload as any, JWT_REFRESH_SECRET as string, { \n    expiresIn: JWT_REFRESH_EXPIRY as any,\n    jwtid: `${jti}_refresh`\n  } as any);\n\n  // Track active session\n  if (req) {\n    activeSessions.set(sessionId, {\n      userId: payload.id,\n      sessionId,\n      fingerprint,\n      ipAddress,\n      lastActivity: new Date(),\n      userAgent: req.headers['user-agent'] || 'unknown'\n    });\n  }\n  \n  return { accessToken, refreshToken, sessionId };\n};\n\n// Generate browser fingerprint for additional security\nfunction generateFingerprint(req: Request): string {\n  const components = [\n    req.headers['user-agent'] || '',\n    req.headers['accept-language'] || '',\n    req.headers['accept-encoding'] || '',\n    req.headers['accept'] || ''\n  ];\n  \n  return Buffer.from(components.join('|')).toString('base64').substring(0, 16);\n}\n\n// Password hashing utilities\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n};\n\nexport const verifyPassword = async (password: string, hashedPassword: string): Promise<boolean> => {\n  return bcrypt.compare(password, hashedPassword);\n};\n\n// Enhanced JWT verification middleware with security checks\nexport const verifyToken = (req: Request, res: Response, next: NextFunction): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      logSecurityEvent('auth_failure', req, { reason: 'No token provided' });\n      res.status(401).json({\n        success: false,\n        error: 'Access denied. No token provided or invalid format.',\n        code: 'NO_TOKEN'\n      });\n      return;\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n    \n    // Check if token is blacklisted\n    if (blacklistedTokens.has(token)) {\n      logSecurityEvent('auth_failure', req, { reason: 'Token revoked' });\n      res.status(401).json({\n        success: false,\n        error: 'Token has been revoked.',\n        code: 'TOKEN_REVOKED'\n      });\n      return;\n    }\n\n    // Verify token\n    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n    \n    // Enhanced security checks\n    const currentFingerprint = generateFingerprint(req);\n    const currentIp = req.ip;\n\n    // Check fingerprint consistency (if present in token)\n    if (decoded.fingerprint && decoded.fingerprint !== currentFingerprint) {\n      logSecurityEvent('suspicious_activity', req, { \n        reason: 'Fingerprint mismatch',\n        tokenFingerprint: decoded.fingerprint,\n        currentFingerprint,\n        userId: decoded.id\n      });\n      \n      // Allow but log suspicious activity\n      console.warn(`Fingerprint mismatch for user ${decoded.id}: token=${decoded.fingerprint}, current=${currentFingerprint}`);\n    }\n\n    // Check IP consistency with tolerance for reasonable changes\n    if (decoded.ipAddress && decoded.ipAddress !== currentIp) {\n      logSecurityEvent('suspicious_activity', req, { \n        reason: 'IP address change',\n        tokenIp: decoded.ipAddress,\n        currentIp,\n        userId: decoded.id\n      });\n      \n      // Log but allow (users may change networks)\n      console.warn(`IP change for user ${decoded.id}: token=${decoded.ipAddress}, current=${currentIp}`);\n    }\n\n    // Update session activity if session exists\n    if (decoded.sessionId) {\n      const session = activeSessions.get(decoded.sessionId);\n      if (session) {\n        session.lastActivity = new Date();\n        session.ipAddress = currentIp || session.ipAddress;\n      }\n    }\n\n    req.user = decoded;\n    logSecurityEvent('auth_success', req, { userId: decoded.id, role: decoded.role });\n    next();\n  } catch (error) {\n    const errorDetails = { error: error instanceof Error ? error.message : 'Unknown error' };\n    \n    if (error instanceof jwt.TokenExpiredError) {\n      logSecurityEvent('auth_failure', req, { ...errorDetails, reason: 'Token expired' });\n      res.status(401).json({\n        success: false,\n        error: 'Token has expired.',\n        code: 'TOKEN_EXPIRED'\n      });\n    } else if (error instanceof jwt.JsonWebTokenError) {\n      logSecurityEvent('auth_failure', req, { ...errorDetails, reason: 'Invalid token' });\n      res.status(401).json({\n        success: false,\n        error: 'Invalid token.',\n        code: 'INVALID_TOKEN'\n      });\n    } else {\n      logSecurityEvent('auth_failure', req, { ...errorDetails, reason: 'Token verification error' });\n      res.status(500).json({\n        success: false,\n        error: 'Token verification failed.',\n        code: 'TOKEN_VERIFICATION_ERROR'\n      });\n    }\n  }\n};\n\n// Optional authentication middleware (doesn't fail if no token)\nexport const optionalAuth = (req: Request, res: Response, next: NextFunction): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      next();\n      return;\n    }\n\n    const token = authHeader.substring(7);\n    \n    if (!blacklistedTokens.has(token)) {\n      const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n      req.user = decoded;\n    }\n    \n    next();\n  } catch (error) {\n    // Ignore token errors in optional auth\n    next();\n  }\n};\n\n// Role-based access control middleware\nexport const requireRole = (allowedRoles: string[]) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: 'Authentication required.',\n        code: 'AUTH_REQUIRED'\n      });\n      return;\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      res.status(403).json({\n        success: false,\n        error: `Access denied. Required roles: ${allowedRoles.join(', ')}`,\n        code: 'INSUFFICIENT_ROLE'\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// Permission-based access control middleware\nexport const requirePermission = (requiredPermissions: string[]) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: 'Authentication required.',\n        code: 'AUTH_REQUIRED'\n      });\n      return;\n    }\n\n    const hasPermission = requiredPermissions.some(permission => \n      req.user!.permissions.includes(permission)\n    );\n\n    if (!hasPermission) {\n      res.status(403).json({\n        success: false,\n        error: `Access denied. Required permissions: ${requiredPermissions.join(', ')}`,\n        code: 'INSUFFICIENT_PERMISSIONS'\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// Refresh token middleware\nexport const refreshToken = (req: Request, res: Response, next: NextFunction): void => {\n  try {\n    const { refreshToken } = req.body;\n    \n    if (!refreshToken) {\n      res.status(401).json({\n        success: false,\n        error: 'Refresh token required.',\n        code: 'NO_REFRESH_TOKEN'\n      });\n      return;\n    }\n\n    // Check if refresh token is blacklisted\n    if (blacklistedTokens.has(refreshToken)) {\n      res.status(401).json({\n        success: false,\n        error: 'Refresh token has been revoked.',\n        code: 'REFRESH_TOKEN_REVOKED'\n      });\n      return;\n    }\n\n    const decoded = jwt.verify(refreshToken, JWT_REFRESH_SECRET) as JWTPayload;\n    \n    // Generate new tokens\n    const tokens = generateTokens({\n      id: decoded.id,\n      email: decoded.email,\n      role: decoded.role,\n      permissions: decoded.permissions\n    });\n\n    // Blacklist old refresh token\n    blacklistedTokens.add(refreshToken);\n\n    res.json({\n      success: true,\n      data: tokens\n    });\n  } catch (error) {\n    if (error instanceof jwt.TokenExpiredError) {\n      res.status(401).json({\n        success: false,\n        error: 'Refresh token has expired.',\n        code: 'REFRESH_TOKEN_EXPIRED'\n      });\n    } else if (error instanceof jwt.JsonWebTokenError) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid refresh token.',\n        code: 'INVALID_REFRESH_TOKEN'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Token refresh failed.',\n        code: 'TOKEN_REFRESH_ERROR'\n      });\n    }\n  }\n};\n\n// Token blacklisting utilities\nexport const blacklistToken = (token: string): void => {\n  blacklistedTokens.add(token);\n};\n\nexport const logout = (req: Request, res: Response): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      blacklistToken(token);\n    }\n\n    // Also blacklist refresh token if provided\n    const { refreshToken } = req.body;\n    if (refreshToken) {\n      blacklistToken(refreshToken);\n    }\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: 'Logout failed'\n    });\n  }\n};\n\n// Session management functions\nexport const getActiveSessions = (userId?: string): Array<{\n  sessionId: string;\n  userId: string;\n  fingerprint: string;\n  ipAddress: string;\n  lastActivity: Date;\n  userAgent: string;\n}> => {\n  const sessions = Array.from(activeSessions.values());\n  return userId ? sessions.filter(session => session.userId === userId) : sessions;\n};\n\nexport const revokeSession = (sessionId: string): boolean => {\n  return activeSessions.delete(sessionId);\n};\n\nexport const revokeAllUserSessions = (userId: string): number => {\n  let revokedCount = 0;\n  for (const [sessionId, session] of activeSessions.entries()) {\n    if (session.userId === userId) {\n      activeSessions.delete(sessionId);\n      revokedCount++;\n    }\n  }\n  return revokedCount;\n};\n\n// Enhanced logout with session cleanup\nexport const enhancedLogout = (req: Request, res: Response): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      blacklistToken(token);\n      \n      // Also revoke the session if we can decode the token\n      try {\n        const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n        if (decoded.sessionId) {\n          revokeSession(decoded.sessionId);\n        }\n        logSecurityEvent('auth_success', req, { \n          action: 'logout',\n          userId: decoded.id,\n          sessionId: decoded.sessionId\n        });\n      } catch (error) {\n        // Token might be invalid/expired, but that's okay for logout\n      }\n    }\n\n    // Also blacklist refresh token if provided\n    const { refreshToken } = req.body;\n    if (refreshToken) {\n      blacklistToken(refreshToken);\n    }\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: 'Logout failed'\n    });\n  }\n};\n\n// Clean up expired sessions and tokens\nexport const cleanupExpiredSessions = (): void => {\n  const now = Date.now();\n  const sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n  \n  for (const [sessionId, session] of activeSessions.entries()) {\n    if (now - session.lastActivity.getTime() > sessionTimeout) {\n      activeSessions.delete(sessionId);\n    }\n  }\n};\n\n// Clean up expired tokens from blacklist (should be run periodically)\nexport const cleanupBlacklist = (): void => {\n  // In a real implementation, you would check token expiration times\n  // and remove expired tokens from the blacklist\n  // This is a simplified version\n  console.log('Cleaning up token blacklist...');\n  cleanupExpiredSessions();\n};\n\n// Security monitoring and statistics\nexport const getAuthStats = (): {\n  activeSessions: number;\n  blacklistedTokens: number;\n  sessionsPerUser: Record<string, number>;\n} => {\n  const sessionsPerUser: Record<string, number> = {};\n  \n  for (const session of activeSessions.values()) {\n    sessionsPerUser[session.userId] = (sessionsPerUser[session.userId] || 0) + 1;\n  }\n\n  return {\n    activeSessions: activeSessions.size,\n    blacklistedTokens: blacklistedTokens.size,\n    sessionsPerUser\n  };\n};\n\n// Periodic cleanup\nsetInterval(() => {\n  cleanupBlacklist();\n}, 60 * 60 * 1000); // Clean up every hour"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8fa7a8b9d1c82bf0b44d455dd9f688e7d6e84486"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wnidn7wxl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wnidn7wxl();
var __importDefault =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[0]++,
/* istanbul ignore next */
(cov_1wnidn7wxl().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1wnidn7wxl().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1wnidn7wxl().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[0]++;
  cov_1wnidn7wxl().s[1]++;
  return /* istanbul ignore next */(cov_1wnidn7wxl().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1wnidn7wxl().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wnidn7wxl().s[3]++;
exports.getAuthStats = exports.cleanupBlacklist = exports.cleanupExpiredSessions = exports.enhancedLogout = exports.revokeAllUserSessions = exports.revokeSession = exports.getActiveSessions = exports.logout = exports.blacklistToken = exports.refreshToken = exports.requirePermission = exports.requireRole = exports.optionalAuth = exports.verifyToken = exports.verifyPassword = exports.hashPassword = exports.generateTokens = void 0;
const jsonwebtoken_1 =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[4]++, __importDefault(require("jsonwebtoken")));
const bcryptjs_1 =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[5]++, __importDefault(require("bcryptjs")));
const structuredLogging_1 =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[6]++, require("./structuredLogging"));
const crypto_1 =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[7]++, require("crypto"));
// JWT Secret keys
const JWT_SECRET =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[8]++,
/* istanbul ignore next */
(cov_1wnidn7wxl().b[3][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_1wnidn7wxl().b[3][1]++, 'your-super-secret-jwt-key-change-in-production'));
const JWT_REFRESH_SECRET =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[9]++,
/* istanbul ignore next */
(cov_1wnidn7wxl().b[4][0]++, process.env.JWT_REFRESH_SECRET) ||
/* istanbul ignore next */
(cov_1wnidn7wxl().b[4][1]++, 'your-super-secret-refresh-key-change-in-production'));
const JWT_EXPIRY =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[10]++,
/* istanbul ignore next */
(cov_1wnidn7wxl().b[5][0]++, process.env.JWT_EXPIRY) ||
/* istanbul ignore next */
(cov_1wnidn7wxl().b[5][1]++, '15m'));
const JWT_REFRESH_EXPIRY =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[11]++,
/* istanbul ignore next */
(cov_1wnidn7wxl().b[6][0]++, process.env.JWT_REFRESH_EXPIRY) ||
/* istanbul ignore next */
(cov_1wnidn7wxl().b[6][1]++, '7d'));
// In-memory blacklist for revoked tokens (use Redis in production)
const blacklistedTokens =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[12]++, new Set());
// Active sessions tracking for enhanced security
const activeSessions =
/* istanbul ignore next */
(cov_1wnidn7wxl().s[13]++, new Map());
// Token generation utilities with enhanced security
/* istanbul ignore next */
cov_1wnidn7wxl().s[14]++;
const generateTokens = (payload, req) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[1]++;
  const jti =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[15]++, (0, crypto_1.randomBytes)(16).toString('hex')); // Unique token ID
  const sessionId =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[16]++, (0, crypto_1.randomBytes)(16).toString('hex'));
  const fingerprint =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[17]++, req ?
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[7][0]++, generateFingerprint(req)) :
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[7][1]++, ''));
  const ipAddress =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[18]++,
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[8][0]++, req?.ip) ||
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[8][1]++, ''));
  const enhancedPayload =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[19]++, {
    ...payload,
    sessionId,
    fingerprint,
    ipAddress,
    jti
  });
  const accessToken =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[20]++, jsonwebtoken_1.default.sign(enhancedPayload, JWT_SECRET, {
    expiresIn: JWT_EXPIRY,
    jwtid: jti
  }));
  const refreshToken =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[21]++, jsonwebtoken_1.default.sign(enhancedPayload, JWT_REFRESH_SECRET, {
    expiresIn: JWT_REFRESH_EXPIRY,
    jwtid: `${jti}_refresh`
  }));
  // Track active session
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[22]++;
  if (req) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().b[9][0]++;
    cov_1wnidn7wxl().s[23]++;
    activeSessions.set(sessionId, {
      userId: payload.id,
      sessionId,
      fingerprint,
      ipAddress,
      lastActivity: new Date(),
      userAgent:
      /* istanbul ignore next */
      (cov_1wnidn7wxl().b[10][0]++, req.headers['user-agent']) ||
      /* istanbul ignore next */
      (cov_1wnidn7wxl().b[10][1]++, 'unknown')
    });
  } else
  /* istanbul ignore next */
  {
    cov_1wnidn7wxl().b[9][1]++;
  }
  cov_1wnidn7wxl().s[24]++;
  return {
    accessToken,
    refreshToken,
    sessionId
  };
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[25]++;
exports.generateTokens = generateTokens;
// Generate browser fingerprint for additional security
function generateFingerprint(req) {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[2]++;
  const components =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[26]++, [
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[11][0]++, req.headers['user-agent']) ||
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[11][1]++, ''),
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[12][0]++, req.headers['accept-language']) ||
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[12][1]++, ''),
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[13][0]++, req.headers['accept-encoding']) ||
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[13][1]++, ''),
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[14][0]++, req.headers['accept']) ||
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[14][1]++, '')]);
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[27]++;
  return Buffer.from(components.join('|')).toString('base64').substring(0, 16);
}
// Password hashing utilities
/* istanbul ignore next */
cov_1wnidn7wxl().s[28]++;
const hashPassword = async password => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[3]++;
  const saltRounds =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[29]++, 12);
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[30]++;
  return bcryptjs_1.default.hash(password, saltRounds);
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[31]++;
exports.hashPassword = hashPassword;
/* istanbul ignore next */
cov_1wnidn7wxl().s[32]++;
const verifyPassword = async (password, hashedPassword) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[4]++;
  cov_1wnidn7wxl().s[33]++;
  return bcryptjs_1.default.compare(password, hashedPassword);
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[34]++;
exports.verifyPassword = verifyPassword;
// Enhanced JWT verification middleware with security checks
/* istanbul ignore next */
cov_1wnidn7wxl().s[35]++;
const verifyToken = (req, res, next) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[5]++;
  cov_1wnidn7wxl().s[36]++;
  try {
    const authHeader =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[37]++, req.headers.authorization);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[38]++;
    if (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[16][0]++, !authHeader) ||
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[16][1]++, !authHeader.startsWith('Bearer '))) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[15][0]++;
      cov_1wnidn7wxl().s[39]++;
      (0, structuredLogging_1.logSecurityEvent)('auth_failure', req, {
        reason: 'No token provided'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[40]++;
      res.status(401).json({
        success: false,
        error: 'Access denied. No token provided or invalid format.',
        code: 'NO_TOKEN'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[41]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[15][1]++;
    }
    const token =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[42]++, authHeader.substring(7)); // Remove 'Bearer ' prefix
    // Check if token is blacklisted
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[43]++;
    if (blacklistedTokens.has(token)) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[17][0]++;
      cov_1wnidn7wxl().s[44]++;
      (0, structuredLogging_1.logSecurityEvent)('auth_failure', req, {
        reason: 'Token revoked'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[45]++;
      res.status(401).json({
        success: false,
        error: 'Token has been revoked.',
        code: 'TOKEN_REVOKED'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[46]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[17][1]++;
    }
    // Verify token
    const decoded =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[47]++, jsonwebtoken_1.default.verify(token, JWT_SECRET));
    // Enhanced security checks
    const currentFingerprint =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[48]++, generateFingerprint(req));
    const currentIp =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[49]++, req.ip);
    // Check fingerprint consistency (if present in token)
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[19][0]++, decoded.fingerprint) &&
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[19][1]++, decoded.fingerprint !== currentFingerprint)) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[18][0]++;
      cov_1wnidn7wxl().s[51]++;
      (0, structuredLogging_1.logSecurityEvent)('suspicious_activity', req, {
        reason: 'Fingerprint mismatch',
        tokenFingerprint: decoded.fingerprint,
        currentFingerprint,
        userId: decoded.id
      });
      // Allow but log suspicious activity
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[52]++;
      console.warn(`Fingerprint mismatch for user ${decoded.id}: token=${decoded.fingerprint}, current=${currentFingerprint}`);
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[18][1]++;
    }
    // Check IP consistency with tolerance for reasonable changes
    cov_1wnidn7wxl().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[21][0]++, decoded.ipAddress) &&
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[21][1]++, decoded.ipAddress !== currentIp)) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[20][0]++;
      cov_1wnidn7wxl().s[54]++;
      (0, structuredLogging_1.logSecurityEvent)('suspicious_activity', req, {
        reason: 'IP address change',
        tokenIp: decoded.ipAddress,
        currentIp,
        userId: decoded.id
      });
      // Log but allow (users may change networks)
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[55]++;
      console.warn(`IP change for user ${decoded.id}: token=${decoded.ipAddress}, current=${currentIp}`);
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[20][1]++;
    }
    // Update session activity if session exists
    cov_1wnidn7wxl().s[56]++;
    if (decoded.sessionId) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[22][0]++;
      const session =
      /* istanbul ignore next */
      (cov_1wnidn7wxl().s[57]++, activeSessions.get(decoded.sessionId));
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[58]++;
      if (session) {
        /* istanbul ignore next */
        cov_1wnidn7wxl().b[23][0]++;
        cov_1wnidn7wxl().s[59]++;
        session.lastActivity = new Date();
        /* istanbul ignore next */
        cov_1wnidn7wxl().s[60]++;
        session.ipAddress =
        /* istanbul ignore next */
        (cov_1wnidn7wxl().b[24][0]++, currentIp) ||
        /* istanbul ignore next */
        (cov_1wnidn7wxl().b[24][1]++, session.ipAddress);
      } else
      /* istanbul ignore next */
      {
        cov_1wnidn7wxl().b[23][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[22][1]++;
    }
    cov_1wnidn7wxl().s[61]++;
    req.user = decoded;
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[62]++;
    (0, structuredLogging_1.logSecurityEvent)('auth_success', req, {
      userId: decoded.id,
      role: decoded.role
    });
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[63]++;
    next();
  } catch (error) {
    const errorDetails =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[64]++, {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1wnidn7wxl().b[25][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1wnidn7wxl().b[25][1]++, 'Unknown error')
    });
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[65]++;
    if (error instanceof jsonwebtoken_1.default.TokenExpiredError) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[26][0]++;
      cov_1wnidn7wxl().s[66]++;
      (0, structuredLogging_1.logSecurityEvent)('auth_failure', req, {
        ...errorDetails,
        reason: 'Token expired'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[67]++;
      res.status(401).json({
        success: false,
        error: 'Token has expired.',
        code: 'TOKEN_EXPIRED'
      });
    } else {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[26][1]++;
      cov_1wnidn7wxl().s[68]++;
      if (error instanceof jsonwebtoken_1.default.JsonWebTokenError) {
        /* istanbul ignore next */
        cov_1wnidn7wxl().b[27][0]++;
        cov_1wnidn7wxl().s[69]++;
        (0, structuredLogging_1.logSecurityEvent)('auth_failure', req, {
          ...errorDetails,
          reason: 'Invalid token'
        });
        /* istanbul ignore next */
        cov_1wnidn7wxl().s[70]++;
        res.status(401).json({
          success: false,
          error: 'Invalid token.',
          code: 'INVALID_TOKEN'
        });
      } else {
        /* istanbul ignore next */
        cov_1wnidn7wxl().b[27][1]++;
        cov_1wnidn7wxl().s[71]++;
        (0, structuredLogging_1.logSecurityEvent)('auth_failure', req, {
          ...errorDetails,
          reason: 'Token verification error'
        });
        /* istanbul ignore next */
        cov_1wnidn7wxl().s[72]++;
        res.status(500).json({
          success: false,
          error: 'Token verification failed.',
          code: 'TOKEN_VERIFICATION_ERROR'
        });
      }
    }
  }
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[73]++;
exports.verifyToken = verifyToken;
// Optional authentication middleware (doesn't fail if no token)
/* istanbul ignore next */
cov_1wnidn7wxl().s[74]++;
const optionalAuth = (req, res, next) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[6]++;
  cov_1wnidn7wxl().s[75]++;
  try {
    const authHeader =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[76]++, req.headers.authorization);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[29][0]++, !authHeader) ||
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[29][1]++, !authHeader.startsWith('Bearer '))) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[28][0]++;
      cov_1wnidn7wxl().s[78]++;
      next();
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[79]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[28][1]++;
    }
    const token =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[80]++, authHeader.substring(7));
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[81]++;
    if (!blacklistedTokens.has(token)) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[30][0]++;
      const decoded =
      /* istanbul ignore next */
      (cov_1wnidn7wxl().s[82]++, jsonwebtoken_1.default.verify(token, JWT_SECRET));
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[83]++;
      req.user = decoded;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[30][1]++;
    }
    cov_1wnidn7wxl().s[84]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[85]++;
    // Ignore token errors in optional auth
    next();
  }
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[86]++;
exports.optionalAuth = optionalAuth;
// Role-based access control middleware
/* istanbul ignore next */
cov_1wnidn7wxl().s[87]++;
const requireRole = allowedRoles => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[7]++;
  cov_1wnidn7wxl().s[88]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_1wnidn7wxl().f[8]++;
    cov_1wnidn7wxl().s[89]++;
    if (!req.user) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[31][0]++;
      cov_1wnidn7wxl().s[90]++;
      res.status(401).json({
        success: false,
        error: 'Authentication required.',
        code: 'AUTH_REQUIRED'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[91]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[31][1]++;
    }
    cov_1wnidn7wxl().s[92]++;
    if (!allowedRoles.includes(req.user.role)) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[32][0]++;
      cov_1wnidn7wxl().s[93]++;
      res.status(403).json({
        success: false,
        error: `Access denied. Required roles: ${allowedRoles.join(', ')}`,
        code: 'INSUFFICIENT_ROLE'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[94]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[32][1]++;
    }
    cov_1wnidn7wxl().s[95]++;
    next();
  };
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[96]++;
exports.requireRole = requireRole;
// Permission-based access control middleware
/* istanbul ignore next */
cov_1wnidn7wxl().s[97]++;
const requirePermission = requiredPermissions => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[9]++;
  cov_1wnidn7wxl().s[98]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_1wnidn7wxl().f[10]++;
    cov_1wnidn7wxl().s[99]++;
    if (!req.user) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[33][0]++;
      cov_1wnidn7wxl().s[100]++;
      res.status(401).json({
        success: false,
        error: 'Authentication required.',
        code: 'AUTH_REQUIRED'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[101]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[33][1]++;
    }
    const hasPermission =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[102]++, requiredPermissions.some(permission => {
      /* istanbul ignore next */
      cov_1wnidn7wxl().f[11]++;
      cov_1wnidn7wxl().s[103]++;
      return req.user.permissions.includes(permission);
    }));
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[104]++;
    if (!hasPermission) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[34][0]++;
      cov_1wnidn7wxl().s[105]++;
      res.status(403).json({
        success: false,
        error: `Access denied. Required permissions: ${requiredPermissions.join(', ')}`,
        code: 'INSUFFICIENT_PERMISSIONS'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[106]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[34][1]++;
    }
    cov_1wnidn7wxl().s[107]++;
    next();
  };
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[108]++;
exports.requirePermission = requirePermission;
// Refresh token middleware
/* istanbul ignore next */
cov_1wnidn7wxl().s[109]++;
const refreshToken = (req, res, next) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[12]++;
  cov_1wnidn7wxl().s[110]++;
  try {
    const {
      refreshToken
    } =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[111]++, req.body);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[112]++;
    if (!refreshToken) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[35][0]++;
      cov_1wnidn7wxl().s[113]++;
      res.status(401).json({
        success: false,
        error: 'Refresh token required.',
        code: 'NO_REFRESH_TOKEN'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[114]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[35][1]++;
    }
    // Check if refresh token is blacklisted
    cov_1wnidn7wxl().s[115]++;
    if (blacklistedTokens.has(refreshToken)) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[36][0]++;
      cov_1wnidn7wxl().s[116]++;
      res.status(401).json({
        success: false,
        error: 'Refresh token has been revoked.',
        code: 'REFRESH_TOKEN_REVOKED'
      });
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[117]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[36][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[118]++, jsonwebtoken_1.default.verify(refreshToken, JWT_REFRESH_SECRET));
    // Generate new tokens
    const tokens =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[119]++, (0, exports.generateTokens)({
      id: decoded.id,
      email: decoded.email,
      role: decoded.role,
      permissions: decoded.permissions
    }));
    // Blacklist old refresh token
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[120]++;
    blacklistedTokens.add(refreshToken);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[121]++;
    res.json({
      success: true,
      data: tokens
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[122]++;
    if (error instanceof jsonwebtoken_1.default.TokenExpiredError) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[37][0]++;
      cov_1wnidn7wxl().s[123]++;
      res.status(401).json({
        success: false,
        error: 'Refresh token has expired.',
        code: 'REFRESH_TOKEN_EXPIRED'
      });
    } else {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[37][1]++;
      cov_1wnidn7wxl().s[124]++;
      if (error instanceof jsonwebtoken_1.default.JsonWebTokenError) {
        /* istanbul ignore next */
        cov_1wnidn7wxl().b[38][0]++;
        cov_1wnidn7wxl().s[125]++;
        res.status(401).json({
          success: false,
          error: 'Invalid refresh token.',
          code: 'INVALID_REFRESH_TOKEN'
        });
      } else {
        /* istanbul ignore next */
        cov_1wnidn7wxl().b[38][1]++;
        cov_1wnidn7wxl().s[126]++;
        res.status(500).json({
          success: false,
          error: 'Token refresh failed.',
          code: 'TOKEN_REFRESH_ERROR'
        });
      }
    }
  }
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[127]++;
exports.refreshToken = refreshToken;
// Token blacklisting utilities
/* istanbul ignore next */
cov_1wnidn7wxl().s[128]++;
const blacklistToken = token => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[13]++;
  cov_1wnidn7wxl().s[129]++;
  blacklistedTokens.add(token);
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[130]++;
exports.blacklistToken = blacklistToken;
/* istanbul ignore next */
cov_1wnidn7wxl().s[131]++;
const logout = (req, res) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[14]++;
  cov_1wnidn7wxl().s[132]++;
  try {
    const authHeader =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[133]++, req.headers.authorization);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[134]++;
    if (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[40][0]++, authHeader) &&
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[40][1]++, authHeader.startsWith('Bearer '))) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[39][0]++;
      const token =
      /* istanbul ignore next */
      (cov_1wnidn7wxl().s[135]++, authHeader.substring(7));
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[136]++;
      (0, exports.blacklistToken)(token);
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[39][1]++;
    }
    // Also blacklist refresh token if provided
    const {
      refreshToken
    } =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[137]++, req.body);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[138]++;
    if (refreshToken) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[41][0]++;
      cov_1wnidn7wxl().s[139]++;
      (0, exports.blacklistToken)(refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[41][1]++;
    }
    cov_1wnidn7wxl().s[140]++;
    res.json({
      success: true,
      message: 'Logged out successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[141]++;
    res.status(500).json({
      success: false,
      error: 'Logout failed'
    });
  }
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[142]++;
exports.logout = logout;
// Session management functions
/* istanbul ignore next */
cov_1wnidn7wxl().s[143]++;
const getActiveSessions = userId => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[15]++;
  const sessions =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[144]++, Array.from(activeSessions.values()));
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[145]++;
  return userId ?
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[42][0]++, sessions.filter(session => {
    /* istanbul ignore next */
    cov_1wnidn7wxl().f[16]++;
    cov_1wnidn7wxl().s[146]++;
    return session.userId === userId;
  })) :
  /* istanbul ignore next */
  (cov_1wnidn7wxl().b[42][1]++, sessions);
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[147]++;
exports.getActiveSessions = getActiveSessions;
/* istanbul ignore next */
cov_1wnidn7wxl().s[148]++;
const revokeSession = sessionId => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[17]++;
  cov_1wnidn7wxl().s[149]++;
  return activeSessions.delete(sessionId);
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[150]++;
exports.revokeSession = revokeSession;
/* istanbul ignore next */
cov_1wnidn7wxl().s[151]++;
const revokeAllUserSessions = userId => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[18]++;
  let revokedCount =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[152]++, 0);
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[153]++;
  for (const [sessionId, session] of activeSessions.entries()) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[154]++;
    if (session.userId === userId) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[43][0]++;
      cov_1wnidn7wxl().s[155]++;
      activeSessions.delete(sessionId);
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[156]++;
      revokedCount++;
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[43][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[157]++;
  return revokedCount;
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[158]++;
exports.revokeAllUserSessions = revokeAllUserSessions;
// Enhanced logout with session cleanup
/* istanbul ignore next */
cov_1wnidn7wxl().s[159]++;
const enhancedLogout = (req, res) => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[19]++;
  cov_1wnidn7wxl().s[160]++;
  try {
    const authHeader =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[161]++, req.headers.authorization);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[162]++;
    if (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[45][0]++, authHeader) &&
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[45][1]++, authHeader.startsWith('Bearer '))) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[44][0]++;
      const token =
      /* istanbul ignore next */
      (cov_1wnidn7wxl().s[163]++, authHeader.substring(7));
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[164]++;
      (0, exports.blacklistToken)(token);
      // Also revoke the session if we can decode the token
      /* istanbul ignore next */
      cov_1wnidn7wxl().s[165]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_1wnidn7wxl().s[166]++, jsonwebtoken_1.default.verify(token, JWT_SECRET));
        /* istanbul ignore next */
        cov_1wnidn7wxl().s[167]++;
        if (decoded.sessionId) {
          /* istanbul ignore next */
          cov_1wnidn7wxl().b[46][0]++;
          cov_1wnidn7wxl().s[168]++;
          (0, exports.revokeSession)(decoded.sessionId);
        } else
        /* istanbul ignore next */
        {
          cov_1wnidn7wxl().b[46][1]++;
        }
        cov_1wnidn7wxl().s[169]++;
        (0, structuredLogging_1.logSecurityEvent)('auth_success', req, {
          action: 'logout',
          userId: decoded.id,
          sessionId: decoded.sessionId
        });
      } catch (error) {
        // Token might be invalid/expired, but that's okay for logout
      }
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[44][1]++;
    }
    // Also blacklist refresh token if provided
    const {
      refreshToken
    } =
    /* istanbul ignore next */
    (cov_1wnidn7wxl().s[170]++, req.body);
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[171]++;
    if (refreshToken) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[47][0]++;
      cov_1wnidn7wxl().s[172]++;
      (0, exports.blacklistToken)(refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[47][1]++;
    }
    cov_1wnidn7wxl().s[173]++;
    res.json({
      success: true,
      message: 'Logged out successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[174]++;
    res.status(500).json({
      success: false,
      error: 'Logout failed'
    });
  }
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[175]++;
exports.enhancedLogout = enhancedLogout;
// Clean up expired sessions and tokens
/* istanbul ignore next */
cov_1wnidn7wxl().s[176]++;
const cleanupExpiredSessions = () => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[20]++;
  const now =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[177]++, Date.now());
  const sessionTimeout =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[178]++, 24 * 60 * 60 * 1000); // 24 hours
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[179]++;
  for (const [sessionId, session] of activeSessions.entries()) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[180]++;
    if (now - session.lastActivity.getTime() > sessionTimeout) {
      /* istanbul ignore next */
      cov_1wnidn7wxl().b[48][0]++;
      cov_1wnidn7wxl().s[181]++;
      activeSessions.delete(sessionId);
    } else
    /* istanbul ignore next */
    {
      cov_1wnidn7wxl().b[48][1]++;
    }
  }
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[182]++;
exports.cleanupExpiredSessions = cleanupExpiredSessions;
// Clean up expired tokens from blacklist (should be run periodically)
/* istanbul ignore next */
cov_1wnidn7wxl().s[183]++;
const cleanupBlacklist = () => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[21]++;
  cov_1wnidn7wxl().s[184]++;
  // In a real implementation, you would check token expiration times
  // and remove expired tokens from the blacklist
  // This is a simplified version
  console.log('Cleaning up token blacklist...');
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[185]++;
  (0, exports.cleanupExpiredSessions)();
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[186]++;
exports.cleanupBlacklist = cleanupBlacklist;
// Security monitoring and statistics
/* istanbul ignore next */
cov_1wnidn7wxl().s[187]++;
const getAuthStats = () => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[22]++;
  const sessionsPerUser =
  /* istanbul ignore next */
  (cov_1wnidn7wxl().s[188]++, {});
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[189]++;
  for (const session of activeSessions.values()) {
    /* istanbul ignore next */
    cov_1wnidn7wxl().s[190]++;
    sessionsPerUser[session.userId] = (
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[49][0]++, sessionsPerUser[session.userId]) ||
    /* istanbul ignore next */
    (cov_1wnidn7wxl().b[49][1]++, 0)) + 1;
  }
  /* istanbul ignore next */
  cov_1wnidn7wxl().s[191]++;
  return {
    activeSessions: activeSessions.size,
    blacklistedTokens: blacklistedTokens.size,
    sessionsPerUser
  };
};
/* istanbul ignore next */
cov_1wnidn7wxl().s[192]++;
exports.getAuthStats = getAuthStats;
// Periodic cleanup
/* istanbul ignore next */
cov_1wnidn7wxl().s[193]++;
setInterval(() => {
  /* istanbul ignore next */
  cov_1wnidn7wxl().f[23]++;
  cov_1wnidn7wxl().s[194]++;
  (0, exports.cleanupBlacklist)();
}, 60 * 60 * 1000); // Clean up every hour
//# sourceMappingURL=data:application/json;charset=utf-8;base64,