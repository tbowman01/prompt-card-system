{"version":3,"names":["cov_1wnidn7wxl","actualCoverage","jsonwebtoken_1","s","__importDefault","require","bcryptjs_1","structuredLogging_1","crypto_1","JWT_SECRET","b","process","env","JWT_REFRESH_SECRET","JWT_EXPIRY","JWT_REFRESH_EXPIRY","blacklistedTokens","Set","activeSessions","Map","generateTokens","payload","req","f","jti","randomBytes","toString","sessionId","fingerprint","generateFingerprint","ipAddress","ip","enhancedPayload","accessToken","default","sign","expiresIn","jwtid","refreshToken","set","userId","id","lastActivity","Date","userAgent","headers","exports","components","Buffer","from","join","substring","hashPassword","password","saltRounds","hash","verifyPassword","hashedPassword","compare","verifyToken","res","next","authHeader","authorization","startsWith","logSecurityEvent","reason","status","json","success","error","code","token","has","decoded","verify","currentFingerprint","currentIp","tokenFingerprint","console","warn","tokenIp","session","get","user","role","errorDetails","Error","message","TokenExpiredError","JsonWebTokenError","optionalAuth","requireRole","allowedRoles","includes","requirePermission","requiredPermissions","hasPermission","some","permission","permissions","body","tokens","email","add","data","blacklistToken","logout","getActiveSessions","sessions","Array","values","filter","revokeSession","delete","revokeAllUserSessions","revokedCount","entries","enhancedLogout","action","cleanupExpiredSessions","now","sessionTimeout","getTime","cleanupBlacklist","log","getAuthStats","sessionsPerUser","size","setInterval"],"sources":["/workspaces/prompt-card-system/backend/src/middleware/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { Request, Response, NextFunction } from 'express';\nimport { logSecurityEvent } from './structuredLogging';\nimport { randomBytes } from 'crypto';\n\n// Extend Request interface to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        role: string;\n        permissions: string[];\n      };\n    }\n  }\n}\n\nexport interface JWTPayload {\n  id: string;\n  email: string;\n  role: string;\n  permissions: string[];\n  sessionId?: string;\n  fingerprint?: string;\n  ipAddress?: string;\n  iat?: number;\n  exp?: number;\n  jti?: string; // JWT ID for tracking\n}\n\n// JWT Secret keys\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'your-super-secret-refresh-key-change-in-production';\nconst JWT_EXPIRY = process.env.JWT_EXPIRY || '15m';\nconst JWT_REFRESH_EXPIRY = process.env.JWT_REFRESH_EXPIRY || '7d';\n\n// In-memory blacklist for revoked tokens (use Redis in production)\nconst blacklistedTokens = new Set<string>();\n\n// Active sessions tracking for enhanced security\nconst activeSessions = new Map<string, {\n  userId: string;\n  sessionId: string;\n  fingerprint: string;\n  ipAddress: string;\n  lastActivity: Date;\n  userAgent: string;\n}>();\n\n// Token generation utilities with enhanced security\nexport const generateTokens = (payload: Omit<JWTPayload, 'iat' | 'exp' | 'jti'>, req?: Request) => {\n  const jti = randomBytes(16).toString('hex'); // Unique token ID\n  const sessionId = randomBytes(16).toString('hex');\n  const fingerprint = req ? generateFingerprint(req) : '';\n  const ipAddress = req?.ip || '';\n\n  const enhancedPayload = {\n    ...payload,\n    sessionId,\n    fingerprint,\n    ipAddress,\n    jti\n  };\n\n  const accessToken = jwt.sign(enhancedPayload as any, JWT_SECRET as string, { \n    expiresIn: JWT_EXPIRY as any,\n    jwtid: jti\n  } as any);\n  \n  const refreshToken = jwt.sign(enhancedPayload as any, JWT_REFRESH_SECRET as string, { \n    expiresIn: JWT_REFRESH_EXPIRY as any,\n    jwtid: `${jti}_refresh`\n  } as any);\n\n  // Track active session\n  if (req) {\n    activeSessions.set(sessionId, {\n      userId: payload.id,\n      sessionId,\n      fingerprint,\n      ipAddress,\n      lastActivity: new Date(),\n      userAgent: req.headers['user-agent'] || 'unknown'\n    });\n  }\n  \n  return { accessToken, refreshToken, sessionId };\n};\n\n// Generate browser fingerprint for additional security\nfunction generateFingerprint(req: Request): string {\n  const components = [\n    req.headers['user-agent'] || '',\n    req.headers['accept-language'] || '',\n    req.headers['accept-encoding'] || '',\n    req.headers['accept'] || ''\n  ];\n  \n  return Buffer.from(components.join('|')).toString('base64').substring(0, 16);\n}\n\n// Password hashing utilities\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n};\n\nexport const verifyPassword = async (password: string, hashedPassword: string): Promise<boolean> => {\n  return bcrypt.compare(password, hashedPassword);\n};\n\n// Enhanced JWT verification middleware with security checks\nexport const verifyToken = (req: Request, res: Response, next: NextFunction): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      logSecurityEvent('auth_failure', req, { reason: 'No token provided' });\n      res.status(401).json({\n        success: false,\n        error: 'Access denied. No token provided or invalid format.',\n        code: 'NO_TOKEN'\n      });\n      return;\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n    \n    // Check if token is blacklisted\n    if (blacklistedTokens.has(token)) {\n      logSecurityEvent('auth_failure', req, { reason: 'Token revoked' });\n      res.status(401).json({\n        success: false,\n        error: 'Token has been revoked.',\n        code: 'TOKEN_REVOKED'\n      });\n      return;\n    }\n\n    // Verify token\n    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n    \n    // Enhanced security checks\n    const currentFingerprint = generateFingerprint(req);\n    const currentIp = req.ip;\n\n    // Check fingerprint consistency (if present in token)\n    if (decoded.fingerprint && decoded.fingerprint !== currentFingerprint) {\n      logSecurityEvent('suspicious_activity', req, { \n        reason: 'Fingerprint mismatch',\n        tokenFingerprint: decoded.fingerprint,\n        currentFingerprint,\n        userId: decoded.id\n      });\n      \n      // Allow but log suspicious activity\n      console.warn(`Fingerprint mismatch for user ${decoded.id}: token=${decoded.fingerprint}, current=${currentFingerprint}`);\n    }\n\n    // Check IP consistency with tolerance for reasonable changes\n    if (decoded.ipAddress && decoded.ipAddress !== currentIp) {\n      logSecurityEvent('suspicious_activity', req, { \n        reason: 'IP address change',\n        tokenIp: decoded.ipAddress,\n        currentIp,\n        userId: decoded.id\n      });\n      \n      // Log but allow (users may change networks)\n      console.warn(`IP change for user ${decoded.id}: token=${decoded.ipAddress}, current=${currentIp}`);\n    }\n\n    // Update session activity if session exists\n    if (decoded.sessionId) {\n      const session = activeSessions.get(decoded.sessionId);\n      if (session) {\n        session.lastActivity = new Date();\n        session.ipAddress = currentIp || session.ipAddress;\n      }\n    }\n\n    req.user = decoded;\n    logSecurityEvent('auth_success', req, { userId: decoded.id, role: decoded.role });\n    next();\n  } catch (error) {\n    const errorDetails = { error: error instanceof Error ? error.message : 'Unknown error' };\n    \n    if (error instanceof jwt.TokenExpiredError) {\n      logSecurityEvent('auth_failure', req, { ...errorDetails, reason: 'Token expired' });\n      res.status(401).json({\n        success: false,\n        error: 'Token has expired.',\n        code: 'TOKEN_EXPIRED'\n      });\n    } else if (error instanceof jwt.JsonWebTokenError) {\n      logSecurityEvent('auth_failure', req, { ...errorDetails, reason: 'Invalid token' });\n      res.status(401).json({\n        success: false,\n        error: 'Invalid token.',\n        code: 'INVALID_TOKEN'\n      });\n    } else {\n      logSecurityEvent('auth_failure', req, { ...errorDetails, reason: 'Token verification error' });\n      res.status(500).json({\n        success: false,\n        error: 'Token verification failed.',\n        code: 'TOKEN_VERIFICATION_ERROR'\n      });\n    }\n  }\n};\n\n// Optional authentication middleware (doesn't fail if no token)\nexport const optionalAuth = (req: Request, res: Response, next: NextFunction): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      next();\n      return;\n    }\n\n    const token = authHeader.substring(7);\n    \n    if (!blacklistedTokens.has(token)) {\n      const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n      req.user = decoded;\n    }\n    \n    next();\n  } catch (error) {\n    // Ignore token errors in optional auth\n    next();\n  }\n};\n\n// Role-based access control middleware\nexport const requireRole = (allowedRoles: string[]) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: 'Authentication required.',\n        code: 'AUTH_REQUIRED'\n      });\n      return;\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      res.status(403).json({\n        success: false,\n        error: `Access denied. Required roles: ${allowedRoles.join(', ')}`,\n        code: 'INSUFFICIENT_ROLE'\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// Permission-based access control middleware\nexport const requirePermission = (requiredPermissions: string[]) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        error: 'Authentication required.',\n        code: 'AUTH_REQUIRED'\n      });\n      return;\n    }\n\n    const hasPermission = requiredPermissions.some(permission => \n      req.user!.permissions.includes(permission)\n    );\n\n    if (!hasPermission) {\n      res.status(403).json({\n        success: false,\n        error: `Access denied. Required permissions: ${requiredPermissions.join(', ')}`,\n        code: 'INSUFFICIENT_PERMISSIONS'\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// Refresh token middleware\nexport const refreshToken = (req: Request, res: Response, next: NextFunction): void => {\n  try {\n    const { refreshToken } = req.body;\n    \n    if (!refreshToken) {\n      res.status(401).json({\n        success: false,\n        error: 'Refresh token required.',\n        code: 'NO_REFRESH_TOKEN'\n      });\n      return;\n    }\n\n    // Check if refresh token is blacklisted\n    if (blacklistedTokens.has(refreshToken)) {\n      res.status(401).json({\n        success: false,\n        error: 'Refresh token has been revoked.',\n        code: 'REFRESH_TOKEN_REVOKED'\n      });\n      return;\n    }\n\n    const decoded = jwt.verify(refreshToken, JWT_REFRESH_SECRET) as JWTPayload;\n    \n    // Generate new tokens\n    const tokens = generateTokens({\n      id: decoded.id,\n      email: decoded.email,\n      role: decoded.role,\n      permissions: decoded.permissions\n    });\n\n    // Blacklist old refresh token\n    blacklistedTokens.add(refreshToken);\n\n    res.json({\n      success: true,\n      data: tokens\n    });\n  } catch (error) {\n    if (error instanceof jwt.TokenExpiredError) {\n      res.status(401).json({\n        success: false,\n        error: 'Refresh token has expired.',\n        code: 'REFRESH_TOKEN_EXPIRED'\n      });\n    } else if (error instanceof jwt.JsonWebTokenError) {\n      res.status(401).json({\n        success: false,\n        error: 'Invalid refresh token.',\n        code: 'INVALID_REFRESH_TOKEN'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Token refresh failed.',\n        code: 'TOKEN_REFRESH_ERROR'\n      });\n    }\n  }\n};\n\n// Token blacklisting utilities\nexport const blacklistToken = (token: string): void => {\n  blacklistedTokens.add(token);\n};\n\nexport const logout = (req: Request, res: Response): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      blacklistToken(token);\n    }\n\n    // Also blacklist refresh token if provided\n    const { refreshToken } = req.body;\n    if (refreshToken) {\n      blacklistToken(refreshToken);\n    }\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: 'Logout failed'\n    });\n  }\n};\n\n// Session management functions\nexport const getActiveSessions = (userId?: string): Array<{\n  sessionId: string;\n  userId: string;\n  fingerprint: string;\n  ipAddress: string;\n  lastActivity: Date;\n  userAgent: string;\n}> => {\n  const sessions = Array.from(activeSessions.values());\n  return userId ? sessions.filter(session => session.userId === userId) : sessions;\n};\n\nexport const revokeSession = (sessionId: string): boolean => {\n  return activeSessions.delete(sessionId);\n};\n\nexport const revokeAllUserSessions = (userId: string): number => {\n  let revokedCount = 0;\n  for (const [sessionId, session] of activeSessions.entries()) {\n    if (session.userId === userId) {\n      activeSessions.delete(sessionId);\n      revokedCount++;\n    }\n  }\n  return revokedCount;\n};\n\n// Enhanced logout with session cleanup\nexport const enhancedLogout = (req: Request, res: Response): void => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      blacklistToken(token);\n      \n      // Also revoke the session if we can decode the token\n      try {\n        const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n        if (decoded.sessionId) {\n          revokeSession(decoded.sessionId);\n        }\n        logSecurityEvent('auth_success', req, { \n          action: 'logout',\n          userId: decoded.id,\n          sessionId: decoded.sessionId\n        });\n      } catch (error) {\n        // Token might be invalid/expired, but that's okay for logout\n      }\n    }\n\n    // Also blacklist refresh token if provided\n    const { refreshToken } = req.body;\n    if (refreshToken) {\n      blacklistToken(refreshToken);\n    }\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: 'Logout failed'\n    });\n  }\n};\n\n// Clean up expired sessions and tokens\nexport const cleanupExpiredSessions = (): void => {\n  const now = Date.now();\n  const sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n  \n  for (const [sessionId, session] of activeSessions.entries()) {\n    if (now - session.lastActivity.getTime() > sessionTimeout) {\n      activeSessions.delete(sessionId);\n    }\n  }\n};\n\n// Clean up expired tokens from blacklist (should be run periodically)\nexport const cleanupBlacklist = (): void => {\n  // In a real implementation, you would check token expiration times\n  // and remove expired tokens from the blacklist\n  // This is a simplified version\n  console.log('Cleaning up token blacklist...');\n  cleanupExpiredSessions();\n};\n\n// Security monitoring and statistics\nexport const getAuthStats = (): {\n  activeSessions: number;\n  blacklistedTokens: number;\n  sessionsPerUser: Record<string, number>;\n} => {\n  const sessionsPerUser: Record<string, number> = {};\n  \n  for (const session of activeSessions.values()) {\n    sessionsPerUser[session.userId] = (sessionsPerUser[session.userId] || 0) + 1;\n  }\n\n  return {\n    activeSessions: activeSessions.size,\n    blacklistedTokens: blacklistedTokens.size,\n    sessionsPerUser\n  };\n};\n\n// Periodic cleanup\nsetInterval(() => {\n  cleanupBlacklist();\n}, 60 * 60 * 1000); // Clean up every hour"],"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","ignoreList":[]}