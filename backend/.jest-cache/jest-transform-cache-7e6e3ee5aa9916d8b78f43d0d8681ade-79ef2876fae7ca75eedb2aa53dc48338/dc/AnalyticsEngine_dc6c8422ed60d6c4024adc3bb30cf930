f5175ec2c9cd48f0cbef72106151cc00
"use strict";

/* istanbul ignore next */
function cov_155uai1osy() {
  var path = "/workspaces/prompt-card-system/backend/src/services/analytics/AnalyticsEngine.ts";
  var hash = "584aee53fb5d7b8137d4fe69ebf3e32f5a8c4ce5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/analytics/AnalyticsEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 57
        }
      },
      "4": {
        start: {
          line: 6,
          column: 20
        },
        end: {
          line: 6,
          column: 40
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 64
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 15,
          column: 11
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 44
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "12": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "13": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 83
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "16": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 61
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 40
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "19": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "20": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "21": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "22": {
        start: {
          line: 93,
          column: 25
        },
        end: {
          line: 93,
          column: 43
        }
      },
      "23": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 52
        }
      },
      "24": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "25": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 26
        }
      },
      "26": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 56
        }
      },
      "27": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 99,
          column: 30
        }
      },
      "28": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "29": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "30": {
        start: {
          line: 108,
          column: 33
        },
        end: {
          line: 119,
          column: 6
        }
      },
      "31": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 120,
          column: 62
        }
      },
      "32": {
        start: {
          line: 121,
          column: 31
        },
        end: {
          line: 121,
          column: 54
        }
      },
      "33": {
        start: {
          line: 122,
          column: 28
        },
        end: {
          line: 122,
          column: 73
        }
      },
      "34": {
        start: {
          line: 122,
          column: 52
        },
        end: {
          line: 122,
          column: 65
        }
      },
      "35": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 89
        }
      },
      "36": {
        start: {
          line: 124,
          column: 36
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "37": {
        start: {
          line: 125,
          column: 45
        },
        end: {
          line: 125,
          column: 72
        }
      },
      "38": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 41
        }
      },
      "39": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "40": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 66
        }
      },
      "41": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 138,
          column: 72
        }
      },
      "42": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 78
        }
      },
      "43": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 22
        }
      },
      "44": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 143,
          column: 45
        }
      },
      "45": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 52
        }
      },
      "46": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "47": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 26
        }
      },
      "48": {
        start: {
          line: 148,
          column: 26
        },
        end: {
          line: 148,
          column: 56
        }
      },
      "49": {
        start: {
          line: 150,
          column: 32
        },
        end: {
          line: 150,
          column: 93
        }
      },
      "50": {
        start: {
          line: 151,
          column: 27
        },
        end: {
          line: 151,
          column: 60
        }
      },
      "51": {
        start: {
          line: 153,
          column: 37
        },
        end: {
          line: 155,
          column: 6
        }
      },
      "52": {
        start: {
          line: 156,
          column: 32
        },
        end: {
          line: 156,
          column: 70
        }
      },
      "53": {
        start: {
          line: 158,
          column: 33
        },
        end: {
          line: 163,
          column: 6
        }
      },
      "54": {
        start: {
          line: 164,
          column: 28
        },
        end: {
          line: 164,
          column: 50
        }
      },
      "55": {
        start: {
          line: 165,
          column: 35
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "56": {
        start: {
          line: 169,
          column: 29
        },
        end: {
          line: 171,
          column: 6
        }
      },
      "57": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 172,
          column: 57
        }
      },
      "58": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 177,
          column: 10
        }
      },
      "59": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "60": {
        start: {
          line: 179,
          column: 26
        },
        end: {
          line: 179,
          column: 42
        }
      },
      "61": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 47
        }
      },
      "62": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 23
        }
      },
      "63": {
        start: {
          line: 183,
          column: 31
        },
        end: {
          line: 186,
          column: 56
        }
      },
      "64": {
        start: {
          line: 184,
          column: 36
        },
        end: {
          line: 184,
          column: 41
        }
      },
      "65": {
        start: {
          line: 186,
          column: 38
        },
        end: {
          line: 186,
          column: 54
        }
      },
      "66": {
        start: {
          line: 187,
          column: 23
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "67": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 71
        }
      },
      "68": {
        start: {
          line: 197,
          column: 30
        },
        end: {
          line: 197,
          column: 72
        }
      },
      "69": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 80
        }
      },
      "70": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 22
        }
      },
      "71": {
        start: {
          line: 202,
          column: 25
        },
        end: {
          line: 202,
          column: 52
        }
      },
      "72": {
        start: {
          line: 203,
          column: 23
        },
        end: {
          line: 203,
          column: 52
        }
      },
      "73": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "74": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 26
        }
      },
      "75": {
        start: {
          line: 207,
          column: 26
        },
        end: {
          line: 207,
          column: 56
        }
      },
      "76": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 208,
          column: 30
        }
      },
      "77": {
        start: {
          line: 209,
          column: 32
        },
        end: {
          line: 209,
          column: 42
        }
      },
      "78": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "79": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 65
        }
      },
      "80": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 22
        }
      },
      "81": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 63
        }
      },
      "82": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 22
        }
      },
      "83": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 69
        }
      },
      "84": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 22
        }
      },
      "85": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 65
        }
      },
      "86": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 22
        }
      },
      "87": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 229,
          column: 10
        }
      },
      "88": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 231,
          column: 65
        }
      },
      "89": {
        start: {
          line: 232,
          column: 30
        },
        end: {
          line: 235,
          column: 11
        }
      },
      "90": {
        start: {
          line: 232,
          column: 55
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "91": {
        start: {
          line: 236,
          column: 36
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "92": {
        start: {
          line: 236,
          column: 61
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "93": {
        start: {
          line: 239,
          column: 43
        },
        end: {
          line: 239,
          column: 56
        }
      },
      "94": {
        start: {
          line: 242,
          column: 36
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "95": {
        start: {
          line: 242,
          column: 61
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "96": {
        start: {
          line: 245,
          column: 50
        },
        end: {
          line: 245,
          column: 77
        }
      },
      "97": {
        start: {
          line: 248,
          column: 23
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "98": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 70
        }
      },
      "99": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 55
        }
      },
      "100": {
        start: {
          line: 257,
          column: 30
        },
        end: {
          line: 257,
          column: 72
        }
      },
      "101": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 69
        }
      },
      "102": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 22
        }
      },
      "103": {
        start: {
          line: 262,
          column: 25
        },
        end: {
          line: 262,
          column: 27
        }
      },
      "104": {
        start: {
          line: 264,
          column: 34
        },
        end: {
          line: 264,
          column: 72
        }
      },
      "105": {
        start: {
          line: 265,
          column: 31
        },
        end: {
          line: 266,
          column: 98
        }
      },
      "106": {
        start: {
          line: 266,
          column: 32
        },
        end: {
          line: 266,
          column: 47
        }
      },
      "107": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "108": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "109": {
        start: {
          line: 284,
          column: 30
        },
        end: {
          line: 284,
          column: 68
        }
      },
      "110": {
        start: {
          line: 285,
          column: 31
        },
        end: {
          line: 286,
          column: 91
        }
      },
      "111": {
        start: {
          line: 286,
          column: 32
        },
        end: {
          line: 286,
          column: 44
        }
      },
      "112": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "113": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 301,
          column: 15
        }
      },
      "114": {
        start: {
          line: 304,
          column: 27
        },
        end: {
          line: 304,
          column: 63
        }
      },
      "115": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 305,
          column: 99
        }
      },
      "116": {
        start: {
          line: 305,
          column: 82
        },
        end: {
          line: 305,
          column: 95
        }
      },
      "117": {
        start: {
          line: 306,
          column: 30
        },
        end: {
          line: 306,
          column: 105
        }
      },
      "118": {
        start: {
          line: 306,
          column: 88
        },
        end: {
          line: 306,
          column: 101
        }
      },
      "119": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "120": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 321,
          column: 15
        }
      },
      "121": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 24
        }
      },
      "122": {
        start: {
          line: 326,
          column: 57
        },
        end: {
          line: 331,
          column: 10
        }
      },
      "123": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "124": {
        start: {
          line: 340,
          column: 23
        },
        end: {
          line: 340,
          column: 32
        }
      },
      "125": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 364,
          column: 11
        }
      },
      "126": {
        start: {
          line: 342,
          column: 30
        },
        end: {
          line: 342,
          column: 55
        }
      },
      "127": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "128": {
        start: {
          line: 346,
          column: 20
        },
        end: {
          line: 346,
          column: 126
        }
      },
      "129": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 26
        }
      },
      "130": {
        start: {
          line: 349,
          column: 20
        },
        end: {
          line: 349,
          column: 102
        }
      },
      "131": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 26
        }
      },
      "132": {
        start: {
          line: 352,
          column: 38
        },
        end: {
          line: 352,
          column: 57
        }
      },
      "133": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 353,
          column: 80
        }
      },
      "134": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 102
        }
      },
      "135": {
        start: {
          line: 355,
          column: 20
        },
        end: {
          line: 355,
          column: 26
        }
      },
      "136": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 79
        }
      },
      "137": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 358,
          column: 26
        }
      },
      "138": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "139": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 36
        }
      },
      "140": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 40
        }
      },
      "141": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 387,
          column: 75
        }
      },
      "142": {
        start: {
          line: 367,
          column: 26
        },
        end: {
          line: 367,
          column: 52
        }
      },
      "143": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 384,
          column: 13
        }
      },
      "144": {
        start: {
          line: 371,
          column: 20
        },
        end: {
          line: 371,
          column: 81
        }
      },
      "145": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 26
        }
      },
      "146": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 71
        }
      },
      "147": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 26
        }
      },
      "148": {
        start: {
          line: 377,
          column: 20
        },
        end: {
          line: 377,
          column: 71
        }
      },
      "149": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 378,
          column: 26
        }
      },
      "150": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 61
        }
      },
      "151": {
        start: {
          line: 381,
          column: 20
        },
        end: {
          line: 381,
          column: 26
        }
      },
      "152": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 43
        }
      },
      "153": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 41
        }
      },
      "154": {
        start: {
          line: 387,
          column: 28
        },
        end: {
          line: 387,
          column: 73
        }
      },
      "155": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 405,
          column: 8
        }
      },
      "156": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 409,
          column: 8
        }
      },
      "157": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 413,
          column: 8
        }
      },
      "158": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 421,
          column: 8
        }
      },
      "159": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 427,
          column: 8
        }
      },
      "160": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 45
        }
      },
      "161": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 45
        }
      },
      "162": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 46
        }
      },
      "163": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 47
        }
      },
      "164": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 441,
          column: 35
        }
      },
      "165": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 40
        }
      },
      "166": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "167": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 454,
          column: 9
        }
      },
      "168": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "169": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 465,
          column: 9
        }
      },
      "170": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "171": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 68
        }
      },
      "172": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 83
        }
      },
      "173": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "174": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 55
        }
      },
      "175": {
        start: {
          line: 484,
          column: 24
        },
        end: {
          line: 484,
          column: 62
        }
      },
      "176": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 36
        }
      },
      "177": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "178": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 28
        }
      },
      "179": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 493,
          column: 9
        }
      },
      "180": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 97
        }
      },
      "181": {
        start: {
          line: 499,
          column: 22
        },
        end: {
          line: 499,
          column: 24
        }
      },
      "182": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 512,
          column: 9
        }
      },
      "183": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 511,
          column: 13
        }
      },
      "184": {
        start: {
          line: 502,
          column: 28
        },
        end: {
          line: 502,
          column: 89
        }
      },
      "185": {
        start: {
          line: 502,
          column: 58
        },
        end: {
          line: 502,
          column: 68
        }
      },
      "186": {
        start: {
          line: 503,
          column: 28
        },
        end: {
          line: 503,
          column: 48
        }
      },
      "187": {
        start: {
          line: 504,
          column: 28
        },
        end: {
          line: 504,
          column: 48
        }
      },
      "188": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 510,
          column: 18
        }
      },
      "189": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 513,
          column: 21
        }
      },
      "190": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 519,
          column: 32
        }
      },
      "191": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 520,
          column: 40
        }
      },
      "192": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 521,
          column: 71
        }
      },
      "193": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 532,
          column: 10
        }
      },
      "194": {
        start: {
          line: 535,
          column: 0
        },
        end: {
          line: 535,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 34
          }
        },
        loc: {
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 26
          },
          end: {
            line: 26,
            column: 9
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 25
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 31
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 100
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 120
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 54
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 41
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 73
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 39
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 82
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 37
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 92
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 122,
            column: 47
          },
          end: {
            line: 122,
            column: 48
          }
        },
        loc: {
          start: {
            line: 122,
            column: 52
          },
          end: {
            line: 122,
            column: 65
          }
        },
        line: 122
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 125,
            column: 34
          }
        },
        loc: {
          start: {
            line: 125,
            column: 45
          },
          end: {
            line: 125,
            column: 72
          }
        },
        line: 125
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 39
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 142
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 178,
            column: 52
          },
          end: {
            line: 178,
            column: 53
          }
        },
        loc: {
          start: {
            line: 178,
            column: 68
          },
          end: {
            line: 182,
            column: 9
          }
        },
        line: 178
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 184,
            column: 18
          },
          end: {
            line: 184,
            column: 19
          }
        },
        loc: {
          start: {
            line: 184,
            column: 36
          },
          end: {
            line: 184,
            column: 41
          }
        },
        line: 184
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 186,
            column: 17
          },
          end: {
            line: 186,
            column: 18
          }
        },
        loc: {
          start: {
            line: 186,
            column: 38
          },
          end: {
            line: 186,
            column: 54
          }
        },
        line: 186
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 54
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 201
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 232,
            column: 45
          },
          end: {
            line: 232,
            column: 46
          }
        },
        loc: {
          start: {
            line: 232,
            column: 55
          },
          end: {
            line: 235,
            column: 9
          }
        },
        line: 232
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 236,
            column: 51
          },
          end: {
            line: 236,
            column: 52
          }
        },
        loc: {
          start: {
            line: 236,
            column: 61
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 236
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 239,
            column: 38
          },
          end: {
            line: 239,
            column: 39
          }
        },
        loc: {
          start: {
            line: 239,
            column: 43
          },
          end: {
            line: 239,
            column: 56
          }
        },
        line: 239
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 242,
            column: 52
          }
        },
        loc: {
          start: {
            line: 242,
            column: 61
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 242
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 245,
            column: 38
          },
          end: {
            line: 245,
            column: 39
          }
        },
        loc: {
          start: {
            line: 245,
            column: 50
          },
          end: {
            line: 245,
            column: 77
          }
        },
        line: 245
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 29
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 261
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 266,
            column: 21
          }
        },
        loc: {
          start: {
            line: 266,
            column: 32
          },
          end: {
            line: 266,
            column: 47
          }
        },
        line: 266
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 286,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        },
        loc: {
          start: {
            line: 286,
            column: 32
          },
          end: {
            line: 286,
            column: 44
          }
        },
        line: 286
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 305,
            column: 70
          },
          end: {
            line: 305,
            column: 71
          }
        },
        loc: {
          start: {
            line: 305,
            column: 82
          },
          end: {
            line: 305,
            column: 95
          }
        },
        line: 305
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 306,
            column: 76
          },
          end: {
            line: 306,
            column: 77
          }
        },
        loc: {
          start: {
            line: 306,
            column: 88
          },
          end: {
            line: 306,
            column: 101
          }
        },
        line: 306
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 32
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 325
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 38
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 339
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 341,
            column: 23
          },
          end: {
            line: 341,
            column: 24
          }
        },
        loc: {
          start: {
            line: 341,
            column: 32
          },
          end: {
            line: 364,
            column: 9
          }
        },
        line: 341
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 366,
            column: 17
          },
          end: {
            line: 366,
            column: 18
          }
        },
        loc: {
          start: {
            line: 366,
            column: 36
          },
          end: {
            line: 386,
            column: 9
          }
        },
        line: 366
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 387,
            column: 18
          },
          end: {
            line: 387,
            column: 19
          }
        },
        loc: {
          start: {
            line: 387,
            column: 28
          },
          end: {
            line: 387,
            column: 73
          }
        },
        line: 387
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 30
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 392
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 23
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 432
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 31
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 448
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 52
          },
          end: {
            line: 494,
            column: 5
          }
        },
        line: 480
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 31
          },
          end: {
            line: 514,
            column: 5
          }
        },
        line: 498
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 502,
            column: 43
          },
          end: {
            line: 502,
            column: 44
          }
        },
        loc: {
          start: {
            line: 502,
            column: 58
          },
          end: {
            line: 502,
            column: 68
          }
        },
        line: 502
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 518,
            column: 4
          },
          end: {
            line: 518,
            column: 5
          }
        },
        loc: {
          start: {
            line: 518,
            column: 17
          },
          end: {
            line: 522,
            column: 5
          }
        },
        line: 518
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 526,
            column: 4
          },
          end: {
            line: 526,
            column: 5
          }
        },
        loc: {
          start: {
            line: 526,
            column: 20
          },
          end: {
            line: 533,
            column: 5
          }
        },
        line: 526
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 85
          },
          end: {
            line: 38,
            column: 98
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 96
          },
          end: {
            line: 38,
            column: 98
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 105
          },
          end: {
            line: 54,
            column: 118
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 116
          },
          end: {
            line: 54,
            column: 118
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "4": {
        loc: {
          start: {
            line: 120,
            column: 28
          },
          end: {
            line: 120,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 28
          },
          end: {
            line: 120,
            column: 57
          }
        }, {
          start: {
            line: 120,
            column: 61
          },
          end: {
            line: 120,
            column: 62
          }
        }],
        line: 120
      },
      "5": {
        loc: {
          start: {
            line: 123,
            column: 28
          },
          end: {
            line: 123,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 53
          },
          end: {
            line: 123,
            column: 85
          }
        }, {
          start: {
            line: 123,
            column: 88
          },
          end: {
            line: 123,
            column: 89
          }
        }],
        line: 123
      },
      "6": {
        loc: {
          start: {
            line: 124,
            column: 36
          },
          end: {
            line: 126,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 14
          },
          end: {
            line: 125,
            column: 97
          }
        }, {
          start: {
            line: 126,
            column: 14
          },
          end: {
            line: 126,
            column: 15
          }
        }],
        line: 124
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 55
          }
        }, {
          start: {
            line: 151,
            column: 59
          },
          end: {
            line: 151,
            column: 60
          }
        }],
        line: 151
      },
      "9": {
        loc: {
          start: {
            line: 156,
            column: 32
          },
          end: {
            line: 156,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 32
          },
          end: {
            line: 156,
            column: 65
          }
        }, {
          start: {
            line: 156,
            column: 69
          },
          end: {
            line: 156,
            column: 70
          }
        }],
        line: 156
      },
      "10": {
        loc: {
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 167,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 14
          },
          end: {
            line: 166,
            column: 52
          }
        }, {
          start: {
            line: 167,
            column: 14
          },
          end: {
            line: 167,
            column: 15
          }
        }],
        line: 165
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 165,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 165,
            column: 46
          }
        }, {
          start: {
            line: 165,
            column: 50
          },
          end: {
            line: 165,
            column: 71
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 24
          },
          end: {
            line: 172,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 24
          },
          end: {
            line: 172,
            column: 52
          }
        }, {
          start: {
            line: 172,
            column: 56
          },
          end: {
            line: 172,
            column: 57
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 180,
            column: 26
          },
          end: {
            line: 180,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 26
          },
          end: {
            line: 180,
            column: 36
          }
        }, {
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 180,
            column: 41
          }
        }],
        line: 180
      },
      "14": {
        loc: {
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 201,
            column: 35
          },
          end: {
            line: 201,
            column: 40
          }
        }],
        line: 201
      },
      "15": {
        loc: {
          start: {
            line: 201,
            column: 42
          },
          end: {
            line: 201,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 201,
            column: 50
          },
          end: {
            line: 201,
            column: 52
          }
        }],
        line: 201
      },
      "16": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "17": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 213,
            column: 22
          }
        }, {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 216,
            column: 22
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 22
          }
        }, {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 22
          }
        }],
        line: 210
      },
      "18": {
        loc: {
          start: {
            line: 238,
            column: 18
          },
          end: {
            line: 240,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 18
          },
          end: {
            line: 239,
            column: 86
          }
        }, {
          start: {
            line: 240,
            column: 18
          },
          end: {
            line: 240,
            column: 19
          }
        }],
        line: 238
      },
      "19": {
        loc: {
          start: {
            line: 244,
            column: 21
          },
          end: {
            line: 246,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 18
          },
          end: {
            line: 245,
            column: 103
          }
        }, {
          start: {
            line: 246,
            column: 18
          },
          end: {
            line: 246,
            column: 19
          }
        }],
        line: 244
      },
      "20": {
        loc: {
          start: {
            line: 254,
            column: 20
          },
          end: {
            line: 254,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 254,
            column: 40
          },
          end: {
            line: 254,
            column: 53
          }
        }, {
          start: {
            line: 254,
            column: 56
          },
          end: {
            line: 254,
            column: 70
          }
        }],
        line: 254
      },
      "21": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "22": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "23": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "24": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 347,
            column: 26
          }
        }, {
          start: {
            line: 348,
            column: 16
          },
          end: {
            line: 350,
            column: 26
          }
        }, {
          start: {
            line: 351,
            column: 16
          },
          end: {
            line: 355,
            column: 26
          }
        }, {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 26
          }
        }],
        line: 344
      },
      "25": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "26": {
        loc: {
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 384,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 370,
            column: 16
          },
          end: {
            line: 372,
            column: 26
          }
        }, {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 26
          }
        }, {
          start: {
            line: 376,
            column: 16
          },
          end: {
            line: 378,
            column: 26
          }
        }, {
          start: {
            line: 379,
            column: 16
          },
          end: {
            line: 381,
            column: 26
          }
        }, {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 383,
            column: 43
          }
        }],
        line: 369
      },
      "27": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "28": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "29": {
        loc: {
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 493,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 493,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "30": {
        loc: {
          start: {
            line: 501,
            column: 12
          },
          end: {
            line: 511,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 12
          },
          end: {
            line: 511,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "31": {
        loc: {
          start: {
            line: 530,
            column: 21
          },
          end: {
            line: 531,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 531,
            column: 16
          },
          end: {
            line: 531,
            column: 104
          }
        }, {
          start: {
            line: 531,
            column: 107
          },
          end: {
            line: 531,
            column: 108
          }
        }],
        line: 530
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/analytics/AnalyticsEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/analytics/AnalyticsEngine.ts"],
      sourcesContent: ["import { EventStore, AnalyticsEvent } from './EventStore';\nimport { initializeDatabase } from '../../database/connection';\nimport { Database } from 'better-sqlite3';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\n\nexport interface MetricDefinition {\n  name: string;\n  type: 'counter' | 'gauge' | 'histogram' | 'rate';\n  description: string;\n  unit?: string;\n  labels?: string[];\n}\n\nexport interface AnalyticsInsight {\n  id: string;\n  type: 'trend' | 'anomaly' | 'comparison' | 'prediction';\n  title: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  data: any;\n  timestamp: Date;\n  recommendations?: string[];\n}\n\nexport interface MetricValue {\n  name: string;\n  value: number;\n  timestamp: Date;\n  labels?: Record<string, string>;\n}\n\nexport interface DashboardMetrics {\n  realtime: {\n    activeTests: number;\n    testsPerSecond: number;\n    successRate: number;\n    averageResponseTime: number;\n    errorRate: number;\n  };\n  historical: {\n    totalTests: number;\n    totalExecutions: number;\n    overallSuccessRate: number;\n    averageExecutionTime: number;\n    mostUsedModels: Array<{ model: string; count: number }>;\n  };\n  trends: {\n    testsOverTime: Array<{ timestamp: Date; count: number }>;\n    successRateOverTime: Array<{ timestamp: Date; rate: number }>;\n    performanceOverTime: Array<{ timestamp: Date; avgTime: number }>;\n  };\n  insights: AnalyticsInsight[];\n}\n\nexport class AnalyticsEngine {\n  private eventStore: EventStore;\n  private db: any;\n  private static instance: AnalyticsEngine;\n  private queryCache: LRUCache<string, any>;\n  private preparedStatements: Map<string, any>;\n  private performanceMetrics: Map<string, number[]>;\n\n  private constructor() {\n    this.eventStore = EventStore.getInstance();\n    \n    // Initialize performance optimizations\n    this.queryCache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 5 // 5 minutes cache\n    });\n    \n    this.preparedStatements = new Map();\n    this.performanceMetrics = new Map();\n    \n    // Initialize database first, then prepare queries\n    this.initializeDb().then(() => {\n      // Pre-compile frequently used queries after db is initialized\n      this.prepareOptimizedQueries();\n      \n      // Set up database optimizations\n      this.optimizeDatabase();\n    }).catch(error => {\n      console.error('Failed to initialize AnalyticsEngine database:', error);\n    });\n  }\n\n  private async initializeDb(): Promise<void> {\n    this.db = await initializeDatabase();\n  }\n\n  public static getInstance(): AnalyticsEngine {\n    if (!AnalyticsEngine.instance) {\n      AnalyticsEngine.instance = new AnalyticsEngine();\n    }\n    return AnalyticsEngine.instance;\n  }\n\n  // Event recording methods\n  public async recordTestExecution(\n    testCaseId: string,\n    executionId: string,\n    model: string,\n    passed: boolean,\n    executionTime: number,\n    metadata: any = {}\n  ): Promise<void> {\n    await this.eventStore.recordEvent({\n      event_type: 'test_execution',\n      entity_id: testCaseId,\n      entity_type: 'test_case',\n      data: {\n        execution_id: executionId,\n        model,\n        passed,\n        execution_time: executionTime,\n        ...metadata\n      },\n      timestamp: new Date(),\n      session_id: executionId\n    });\n  }\n\n  public async recordBatchExecution(\n    promptCardId: string,\n    executionId: string,\n    model: string,\n    totalTests: number,\n    passedTests: number,\n    executionTime: number,\n    metadata: any = {}\n  ): Promise<void> {\n    await this.eventStore.recordEvent({\n      event_type: 'batch_execution',\n      entity_id: promptCardId,\n      entity_type: 'prompt_card',\n      data: {\n        execution_id: executionId,\n        model,\n        total_tests: totalTests,\n        passed_tests: passedTests,\n        failed_tests: totalTests - passedTests,\n        execution_time: executionTime,\n        success_rate: passedTests / totalTests,\n        ...metadata\n      },\n      timestamp: new Date(),\n      session_id: executionId\n    });\n  }\n\n  public async recordModelUsage(\n    model: string,\n    usage: {\n      promptTokens: number;\n      completionTokens: number;\n      totalTokens: number;\n      cost?: number;\n    }\n  ): Promise<void> {\n    await this.eventStore.recordEvent({\n      event_type: 'model_usage',\n      entity_id: model,\n      entity_type: 'model',\n      data: usage,\n      timestamp: new Date()\n    });\n  }\n\n  public async recordSystemMetrics(\n    metrics: {\n      cpuUsage: number;\n      memoryUsage: number;\n      diskUsage: number;\n      networkLatency: number;\n      queueSize: number;\n    }\n  ): Promise<void> {\n    await this.eventStore.recordEvent({\n      event_type: 'system_metrics',\n      entity_id: 'system',\n      entity_type: 'system',\n      data: metrics,\n      timestamp: new Date()\n    });\n  }\n\n  // Metrics calculation methods\n  public async calculateRealtimeMetrics(): Promise<DashboardMetrics['realtime']> {\n    const cacheKey = 'realtime_metrics';\n    const cached = this.queryCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const startTime = performance.now();\n    const now = new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 60 * 1000);\n\n    // Get recent test executions\n    const recentTests = await this.eventStore.getEvents({\n      event_type: 'test_execution',\n      start_time: oneMinuteAgo,\n      end_time: now\n    });\n\n    // Get currently running tests from database\n    const activeTestsQuery = this.db.prepare(`\n      SELECT COUNT(*) as count\n      FROM test_results\n      WHERE created_at >= datetime('now', '-5 minutes')\n      AND execution_id NOT IN (\n        SELECT DISTINCT execution_id \n        FROM test_results \n        WHERE created_at >= datetime('now', '-5 minutes')\n        GROUP BY execution_id\n        HAVING COUNT(*) > 1\n      )\n    `);\n    const activeTests = (activeTestsQuery.get() as any)?.count || 0;\n\n    const testsPerSecond = recentTests.length / 60;\n    const passedTests = recentTests.filter(t => t.data.passed).length;\n    const successRate = recentTests.length > 0 ? passedTests / recentTests.length : 0;\n    const averageResponseTime = recentTests.length > 0 \n      ? recentTests.reduce((sum, t) => sum + t.data.execution_time, 0) / recentTests.length \n      : 0;\n    const errorRate = 1 - successRate;\n\n    const result = {\n      activeTests,\n      testsPerSecond,\n      successRate,\n      averageResponseTime,\n      errorRate\n    };\n    \n    // Cache result with shorter TTL for real-time data\n    this.queryCache.set(cacheKey, result, { ttl: 1000 * 30 }); // 30 seconds\n    \n    // Track performance\n    const executionTime = performance.now() - startTime;\n    this.trackQueryPerformance('calculateRealtimeMetrics', executionTime);\n    \n    return result;\n  }\n\n  public async calculateHistoricalMetrics(): Promise<DashboardMetrics['historical']> {\n    const cacheKey = 'historical_metrics';\n    const cached = this.queryCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const startTime = performance.now();\n    // Get total tests from database\n    const totalTestsQuery = this.db.prepare(`SELECT COUNT(*) as count FROM test_results`);\n    const totalTests = (totalTestsQuery.get() as any)?.count || 0;\n\n    // Get total executions (unique execution_ids)\n    const totalExecutionsQuery = this.db.prepare(`\n      SELECT COUNT(DISTINCT execution_id) as count FROM test_results\n    `);\n    const totalExecutions = (totalExecutionsQuery.get() as any)?.count || 0;\n\n    // Get overall success rate\n    const successRateQuery = this.db.prepare(`\n      SELECT \n        COUNT(*) as total,\n        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as passed\n      FROM test_results\n    `);\n    const successData = successRateQuery.get() as any;\n    const overallSuccessRate = successData && successData.total > 0 \n      ? successData.passed / successData.total \n      : 0;\n\n    // Get average execution time\n    const avgTimeQuery = this.db.prepare(`\n      SELECT AVG(execution_time_ms) as avg_time FROM test_results\n    `);\n    const avgTime = (avgTimeQuery.get() as any)?.avg_time || 0;\n\n    // Get most used models from events\n    const modelUsageEvents = await this.eventStore.getEvents({\n      event_type: 'test_execution',\n      limit: 10000\n    });\n\n    const modelCounts = modelUsageEvents.reduce((acc, event) => {\n      const model = event.data.model;\n      acc[model] = (acc[model] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const mostUsedModels = Object.entries(modelCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 10)\n      .map(([model, count]) => ({ model, count }));\n\n    const result = {\n      totalTests,\n      totalExecutions,\n      overallSuccessRate,\n      averageExecutionTime: avgTime,\n      mostUsedModels\n    };\n    \n    // Cache result with longer TTL for historical data\n    this.queryCache.set(cacheKey, result, { ttl: 1000 * 60 * 10 }); // 10 minutes\n    \n    // Track performance\n    const executionTime = performance.now() - startTime;\n    this.trackQueryPerformance('calculateHistoricalMetrics', executionTime);\n    \n    return result;\n  }\n\n  public async calculateTrends(\n    period: 'hour' | 'day' | 'week' | 'month' = 'day',\n    limit: number = 30\n  ): Promise<DashboardMetrics['trends']> {\n    const cacheKey = `trends_${period}_${limit}`;\n    const cached = this.queryCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const startTime = performance.now();\n    const now = new Date();\n    const periodStartTime = new Date();\n    \n    switch (period) {\n      case 'hour':\n        periodStartTime.setHours(now.getHours() - limit);\n        break;\n      case 'day':\n        periodStartTime.setDate(now.getDate() - limit);\n        break;\n      case 'week':\n        periodStartTime.setDate(now.getDate() - (limit * 7));\n        break;\n      case 'month':\n        periodStartTime.setMonth(now.getMonth() - limit);\n        break;\n    }\n\n    // Get test execution events for the period\n    const events = await this.eventStore.getEvents({\n      event_type: 'test_execution',\n      start_time: periodStartTime,\n      end_time: now\n    });\n\n    // Group events by time period\n    const timeGroups = this.groupEventsByTime(events, period);\n\n    const testsOverTime = timeGroups.map(group => ({\n      timestamp: group.timestamp,\n      count: group.events.length\n    }));\n\n    const successRateOverTime = timeGroups.map(group => ({\n      timestamp: group.timestamp,\n      rate: group.events.length > 0 \n        ? group.events.filter(e => e.data.passed).length / group.events.length \n        : 0\n    }));\n\n    const performanceOverTime = timeGroups.map(group => ({\n      timestamp: group.timestamp,\n      avgTime: group.events.length > 0\n        ? group.events.reduce((sum, e) => sum + e.data.execution_time, 0) / group.events.length\n        : 0\n    }));\n\n    const result = {\n      testsOverTime,\n      successRateOverTime,\n      performanceOverTime\n    };\n    \n    // Cache result with appropriate TTL based on period\n    const ttl = period === 'hour' ? 1000 * 60 * 5 : 1000 * 60 * 30; // 5 or 30 minutes\n    this.queryCache.set(cacheKey, result, { ttl });\n    \n    // Track performance\n    const executionTime = performance.now() - startTime;\n    this.trackQueryPerformance('calculateTrends', executionTime);\n    \n    return result;\n  }\n\n  public async generateInsights(): Promise<AnalyticsInsight[]> {\n    const insights: AnalyticsInsight[] = [];\n\n    // Performance insight\n    const recentPerformance = await this.calculateTrends('hour', 24);\n    const avgPerformance = recentPerformance.performanceOverTime\n      .reduce((sum, p) => sum + p.avgTime, 0) / recentPerformance.performanceOverTime.length;\n    \n    if (avgPerformance > 5000) { // 5 seconds\n      insights.push({\n        id: 'performance_degradation',\n        type: 'anomaly',\n        title: 'Performance Degradation Detected',\n        description: `Average response time has increased to ${avgPerformance.toFixed(0)}ms`,\n        severity: 'high',\n        data: { avgPerformance },\n        timestamp: new Date(),\n        recommendations: [\n          'Check system resources',\n          'Optimize slow queries',\n          'Consider scaling infrastructure'\n        ]\n      });\n    }\n\n    // Success rate insight\n    const recentSuccess = await this.calculateTrends('hour', 24);\n    const avgSuccessRate = recentSuccess.successRateOverTime\n      .reduce((sum, s) => sum + s.rate, 0) / recentSuccess.successRateOverTime.length;\n    \n    if (avgSuccessRate < 0.8) { // Less than 80% success rate\n      insights.push({\n        id: 'low_success_rate',\n        type: 'anomaly',\n        title: 'Low Success Rate Detected',\n        description: `Test success rate has dropped to ${(avgSuccessRate * 100).toFixed(1)}%`,\n        severity: 'critical',\n        data: { avgSuccessRate },\n        timestamp: new Date(),\n        recommendations: [\n          'Review failing test cases',\n          'Check assertion logic',\n          'Validate model configurations'\n        ]\n      });\n    }\n\n    // Usage trend insight\n    const usageTrend = await this.calculateTrends('day', 7);\n    const recentUsage = usageTrend.testsOverTime.slice(-3).reduce((sum, t) => sum + t.count, 0);\n    const previousUsage = usageTrend.testsOverTime.slice(-6, -3).reduce((sum, t) => sum + t.count, 0);\n    \n    if (recentUsage > previousUsage * 1.5) {\n      insights.push({\n        id: 'usage_spike',\n        type: 'trend',\n        title: 'Usage Spike Detected',\n        description: `Test execution volume has increased by ${((recentUsage / previousUsage - 1) * 100).toFixed(1)}%`,\n        severity: 'medium',\n        data: { recentUsage, previousUsage },\n        timestamp: new Date(),\n        recommendations: [\n          'Monitor system capacity',\n          'Consider auto-scaling',\n          'Review resource allocation'\n        ]\n      });\n    }\n\n    return insights;\n  }\n\n  public async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const [realtime, historical, trends, insights] = await Promise.all([\n      this.calculateRealtimeMetrics(),\n      this.calculateHistoricalMetrics(),\n      this.calculateTrends(),\n      this.generateInsights()\n    ]);\n\n    return {\n      realtime,\n      historical,\n      trends,\n      insights\n    };\n  }\n\n  private groupEventsByTime(\n    events: AnalyticsEvent[],\n    period: 'hour' | 'day' | 'week' | 'month'\n  ): Array<{ timestamp: Date; events: AnalyticsEvent[] }> {\n    const groups = new Map<string, AnalyticsEvent[]>();\n\n    events.forEach(event => {\n      const timestamp = new Date(event.timestamp);\n      let key: string;\n\n      switch (period) {\n        case 'hour':\n          key = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}`;\n          break;\n        case 'day':\n          key = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}`;\n          break;\n        case 'week':\n          const weekStart = new Date(timestamp);\n          weekStart.setDate(timestamp.getDate() - timestamp.getDay());\n          key = `${weekStart.getFullYear()}-${weekStart.getMonth()}-${weekStart.getDate()}`;\n          break;\n        case 'month':\n          key = `${timestamp.getFullYear()}-${timestamp.getMonth()}`;\n          break;\n      }\n\n      if (!groups.has(key)) {\n        groups.set(key, []);\n      }\n      groups.get(key)!.push(event);\n    });\n\n    return Array.from(groups.entries())\n      .map(([key, events]) => {\n        const parts = key.split('-').map(Number);\n        let timestamp: Date;\n        \n        switch (period) {\n          case 'hour':\n            timestamp = new Date(parts[0], parts[1], parts[2], parts[3]);\n            break;\n          case 'day':\n            timestamp = new Date(parts[0], parts[1], parts[2]);\n            break;\n          case 'week':\n            timestamp = new Date(parts[0], parts[1], parts[2]);\n            break;\n          case 'month':\n            timestamp = new Date(parts[0], parts[1]);\n            break;\n          default:\n            timestamp = new Date();\n        }\n\n        return { timestamp, events };\n      })\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n  \n  /**\n   * Prepare optimized SQL queries for better performance\n   */\n  private prepareOptimizedQueries(): void {\n    // Optimized query for active tests with indexes\n    this.preparedStatements.set('activeTests', this.db.prepare(`\n      SELECT COUNT(*) as count\n      FROM test_results\n      WHERE created_at >= datetime('now', '-5 minutes')\n      AND execution_id NOT IN (\n        SELECT DISTINCT execution_id \n        FROM test_results \n        WHERE created_at >= datetime('now', '-5 minutes')\n        GROUP BY execution_id\n        HAVING COUNT(*) > 1\n      )\n    `));\n    \n    // Optimized query for total tests with covering index\n    this.preparedStatements.set('totalTests', this.db.prepare(`\n      SELECT COUNT(*) as count FROM test_results\n    `));\n    \n    // Optimized query for total executions using distinct\n    this.preparedStatements.set('totalExecutions', this.db.prepare(`\n      SELECT COUNT(DISTINCT execution_id) as count FROM test_results\n    `));\n    \n    // Optimized query for success rate with index hint\n    this.preparedStatements.set('successRate', this.db.prepare(`\n      SELECT \n        COUNT(*) as total,\n        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as passed\n      FROM test_results\n      WHERE created_at >= ?\n    `));\n    \n    // Optimized query for average execution time\n    this.preparedStatements.set('avgExecutionTime', this.db.prepare(`\n      SELECT AVG(execution_time_ms) as avg_time \n      FROM test_results\n      WHERE execution_time_ms > 0\n    `));\n  }\n  \n  /**\n   * Optimize database settings for performance\n   */\n  private optimizeDatabase(): void {\n    // Set WAL mode for better concurrent performance\n    this.db.pragma('journal_mode = WAL');\n    \n    // Optimize memory usage\n    this.db.pragma('cache_size = 10000');\n    this.db.pragma('temp_store = memory');\n    \n    // Optimize synchronous mode for better performance\n    this.db.pragma('synchronous = NORMAL');\n    \n    // Enable query planner optimization\n    this.db.pragma('optimize');\n    \n    // Create additional performance indexes\n    this.createPerformanceIndexes();\n  }\n  \n  /**\n   * Create additional indexes for better query performance\n   */\n  private createPerformanceIndexes(): void {\n    try {\n      // Composite index for time-based queries\n      this.db.exec(`\n        CREATE INDEX IF NOT EXISTS idx_test_results_created_at_passed \n        ON test_results(created_at, passed);\n      `);\n      \n      // Composite index for execution time analysis\n      this.db.exec(`\n        CREATE INDEX IF NOT EXISTS idx_test_results_execution_time \n        ON test_results(execution_time_ms, created_at) \n        WHERE execution_time_ms > 0;\n      `);\n      \n      // Index for model performance analysis\n      this.db.exec(`\n        CREATE INDEX IF NOT EXISTS idx_test_results_model_performance \n        ON test_results(model, passed, execution_time_ms);\n      `);\n      \n      // Covering index for execution ID queries\n      this.db.exec(`\n        CREATE INDEX IF NOT EXISTS idx_test_results_execution_id_covering \n        ON test_results(execution_id, created_at, passed);\n      `);\n      \n      console.log('Performance indexes created successfully');\n    } catch (error) {\n      console.warn('Some performance indexes already exist:', error.message);\n    }\n  }\n  \n  /**\n   * Track query performance for optimization\n   */\n  private trackQueryPerformance(queryName: string, executionTime: number): void {\n    if (!this.performanceMetrics.has(queryName)) {\n      this.performanceMetrics.set(queryName, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(queryName)!;\n    metrics.push(executionTime);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow queries\n    if (executionTime > 100) {\n      console.warn(`Slow query detected: ${queryName} took ${executionTime.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get query performance statistics\n   */\n  public getQueryPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [queryName, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[queryName] = {\n          avg: Math.round(avg * 100) / 100,\n          max: Math.round(max * 100) / 100,\n          min: Math.round(min * 100) / 100,\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear cache and performance metrics\n   */\n  public clearCache(): void {\n    this.queryCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Analytics cache and performance metrics cleared');\n  }\n  \n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; max: number; hitRate: number } {\n    return {\n      size: this.queryCache.size,\n      max: this.queryCache.max,\n      hitRate: this.queryCache.calculatedSize > 0 ? \n        (this.queryCache.calculatedSize - this.queryCache.size) / this.queryCache.calculatedSize : 0\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "584aee53fb5d7b8137d4fe69ebf3e32f5a8c4ce5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_155uai1osy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_155uai1osy();
cov_155uai1osy().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_155uai1osy().s[1]++;
exports.AnalyticsEngine = void 0;
const EventStore_1 =
/* istanbul ignore next */
(cov_155uai1osy().s[2]++, require("./EventStore"));
const connection_1 =
/* istanbul ignore next */
(cov_155uai1osy().s[3]++, require("../../database/connection"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_155uai1osy().s[4]++, require("lru-cache"));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_155uai1osy().s[5]++, require("perf_hooks"));
class AnalyticsEngine {
  constructor() {
    /* istanbul ignore next */
    cov_155uai1osy().f[0]++;
    cov_155uai1osy().s[6]++;
    this.eventStore = EventStore_1.EventStore.getInstance();
    // Initialize performance optimizations
    /* istanbul ignore next */
    cov_155uai1osy().s[7]++;
    this.queryCache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 5 // 5 minutes cache
    });
    /* istanbul ignore next */
    cov_155uai1osy().s[8]++;
    this.preparedStatements = new Map();
    /* istanbul ignore next */
    cov_155uai1osy().s[9]++;
    this.performanceMetrics = new Map();
    // Initialize database first, then prepare queries
    /* istanbul ignore next */
    cov_155uai1osy().s[10]++;
    this.initializeDb().then(() => {
      /* istanbul ignore next */
      cov_155uai1osy().f[1]++;
      cov_155uai1osy().s[11]++;
      // Pre-compile frequently used queries after db is initialized
      this.prepareOptimizedQueries();
      // Set up database optimizations
      /* istanbul ignore next */
      cov_155uai1osy().s[12]++;
      this.optimizeDatabase();
    }).catch(error => {
      /* istanbul ignore next */
      cov_155uai1osy().f[2]++;
      cov_155uai1osy().s[13]++;
      console.error('Failed to initialize AnalyticsEngine database:', error);
    });
  }
  async initializeDb() {
    /* istanbul ignore next */
    cov_155uai1osy().f[3]++;
    cov_155uai1osy().s[14]++;
    this.db = await (0, connection_1.initializeDatabase)();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_155uai1osy().f[4]++;
    cov_155uai1osy().s[15]++;
    if (!AnalyticsEngine.instance) {
      /* istanbul ignore next */
      cov_155uai1osy().b[0][0]++;
      cov_155uai1osy().s[16]++;
      AnalyticsEngine.instance = new AnalyticsEngine();
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[0][1]++;
    }
    cov_155uai1osy().s[17]++;
    return AnalyticsEngine.instance;
  }
  // Event recording methods
  async recordTestExecution(testCaseId, executionId, model, passed, executionTime, metadata =
  /* istanbul ignore next */
  (cov_155uai1osy().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_155uai1osy().f[5]++;
    cov_155uai1osy().s[18]++;
    await this.eventStore.recordEvent({
      event_type: 'test_execution',
      entity_id: testCaseId,
      entity_type: 'test_case',
      data: {
        execution_id: executionId,
        model,
        passed,
        execution_time: executionTime,
        ...metadata
      },
      timestamp: new Date(),
      session_id: executionId
    });
  }
  async recordBatchExecution(promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata =
  /* istanbul ignore next */
  (cov_155uai1osy().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_155uai1osy().f[6]++;
    cov_155uai1osy().s[19]++;
    await this.eventStore.recordEvent({
      event_type: 'batch_execution',
      entity_id: promptCardId,
      entity_type: 'prompt_card',
      data: {
        execution_id: executionId,
        model,
        total_tests: totalTests,
        passed_tests: passedTests,
        failed_tests: totalTests - passedTests,
        execution_time: executionTime,
        success_rate: passedTests / totalTests,
        ...metadata
      },
      timestamp: new Date(),
      session_id: executionId
    });
  }
  async recordModelUsage(model, usage) {
    /* istanbul ignore next */
    cov_155uai1osy().f[7]++;
    cov_155uai1osy().s[20]++;
    await this.eventStore.recordEvent({
      event_type: 'model_usage',
      entity_id: model,
      entity_type: 'model',
      data: usage,
      timestamp: new Date()
    });
  }
  async recordSystemMetrics(metrics) {
    /* istanbul ignore next */
    cov_155uai1osy().f[8]++;
    cov_155uai1osy().s[21]++;
    await this.eventStore.recordEvent({
      event_type: 'system_metrics',
      entity_id: 'system',
      entity_type: 'system',
      data: metrics,
      timestamp: new Date()
    });
  }
  // Metrics calculation methods
  async calculateRealtimeMetrics() {
    /* istanbul ignore next */
    cov_155uai1osy().f[9]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_155uai1osy().s[22]++, 'realtime_metrics');
    const cached =
    /* istanbul ignore next */
    (cov_155uai1osy().s[23]++, this.queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_155uai1osy().s[24]++;
    if (cached) {
      /* istanbul ignore next */
      cov_155uai1osy().b[3][0]++;
      cov_155uai1osy().s[25]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[3][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[26]++, perf_hooks_1.performance.now());
    const now =
    /* istanbul ignore next */
    (cov_155uai1osy().s[27]++, new Date());
    const oneMinuteAgo =
    /* istanbul ignore next */
    (cov_155uai1osy().s[28]++, new Date(now.getTime() - 60 * 1000));
    // Get recent test executions
    const recentTests =
    /* istanbul ignore next */
    (cov_155uai1osy().s[29]++, await this.eventStore.getEvents({
      event_type: 'test_execution',
      start_time: oneMinuteAgo,
      end_time: now
    }));
    // Get currently running tests from database
    const activeTestsQuery =
    /* istanbul ignore next */
    (cov_155uai1osy().s[30]++, this.db.prepare(`
      SELECT COUNT(*) as count
      FROM test_results
      WHERE created_at >= datetime('now', '-5 minutes')
      AND execution_id NOT IN (
        SELECT DISTINCT execution_id 
        FROM test_results 
        WHERE created_at >= datetime('now', '-5 minutes')
        GROUP BY execution_id
        HAVING COUNT(*) > 1
      )
    `));
    const activeTests =
    /* istanbul ignore next */
    (cov_155uai1osy().s[31]++,
    /* istanbul ignore next */
    (cov_155uai1osy().b[4][0]++, activeTestsQuery.get()?.count) ||
    /* istanbul ignore next */
    (cov_155uai1osy().b[4][1]++, 0));
    const testsPerSecond =
    /* istanbul ignore next */
    (cov_155uai1osy().s[32]++, recentTests.length / 60);
    const passedTests =
    /* istanbul ignore next */
    (cov_155uai1osy().s[33]++, recentTests.filter(t => {
      /* istanbul ignore next */
      cov_155uai1osy().f[10]++;
      cov_155uai1osy().s[34]++;
      return t.data.passed;
    }).length);
    const successRate =
    /* istanbul ignore next */
    (cov_155uai1osy().s[35]++, recentTests.length > 0 ?
    /* istanbul ignore next */
    (cov_155uai1osy().b[5][0]++, passedTests / recentTests.length) :
    /* istanbul ignore next */
    (cov_155uai1osy().b[5][1]++, 0));
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[36]++, recentTests.length > 0 ?
    /* istanbul ignore next */
    (cov_155uai1osy().b[6][0]++, recentTests.reduce((sum, t) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[11]++;
      cov_155uai1osy().s[37]++;
      return sum + t.data.execution_time;
    }, 0) / recentTests.length) :
    /* istanbul ignore next */
    (cov_155uai1osy().b[6][1]++, 0));
    const errorRate =
    /* istanbul ignore next */
    (cov_155uai1osy().s[38]++, 1 - successRate);
    const result =
    /* istanbul ignore next */
    (cov_155uai1osy().s[39]++, {
      activeTests,
      testsPerSecond,
      successRate,
      averageResponseTime,
      errorRate
    });
    // Cache result with shorter TTL for real-time data
    /* istanbul ignore next */
    cov_155uai1osy().s[40]++;
    this.queryCache.set(cacheKey, result, {
      ttl: 1000 * 30
    }); // 30 seconds
    // Track performance
    const executionTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[41]++, perf_hooks_1.performance.now() - startTime);
    /* istanbul ignore next */
    cov_155uai1osy().s[42]++;
    this.trackQueryPerformance('calculateRealtimeMetrics', executionTime);
    /* istanbul ignore next */
    cov_155uai1osy().s[43]++;
    return result;
  }
  async calculateHistoricalMetrics() {
    /* istanbul ignore next */
    cov_155uai1osy().f[12]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_155uai1osy().s[44]++, 'historical_metrics');
    const cached =
    /* istanbul ignore next */
    (cov_155uai1osy().s[45]++, this.queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_155uai1osy().s[46]++;
    if (cached) {
      /* istanbul ignore next */
      cov_155uai1osy().b[7][0]++;
      cov_155uai1osy().s[47]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[7][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[48]++, perf_hooks_1.performance.now());
    // Get total tests from database
    const totalTestsQuery =
    /* istanbul ignore next */
    (cov_155uai1osy().s[49]++, this.db.prepare(`SELECT COUNT(*) as count FROM test_results`));
    const totalTests =
    /* istanbul ignore next */
    (cov_155uai1osy().s[50]++,
    /* istanbul ignore next */
    (cov_155uai1osy().b[8][0]++, totalTestsQuery.get()?.count) ||
    /* istanbul ignore next */
    (cov_155uai1osy().b[8][1]++, 0));
    // Get total executions (unique execution_ids)
    const totalExecutionsQuery =
    /* istanbul ignore next */
    (cov_155uai1osy().s[51]++, this.db.prepare(`
      SELECT COUNT(DISTINCT execution_id) as count FROM test_results
    `));
    const totalExecutions =
    /* istanbul ignore next */
    (cov_155uai1osy().s[52]++,
    /* istanbul ignore next */
    (cov_155uai1osy().b[9][0]++, totalExecutionsQuery.get()?.count) ||
    /* istanbul ignore next */
    (cov_155uai1osy().b[9][1]++, 0));
    // Get overall success rate
    const successRateQuery =
    /* istanbul ignore next */
    (cov_155uai1osy().s[53]++, this.db.prepare(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as passed
      FROM test_results
    `));
    const successData =
    /* istanbul ignore next */
    (cov_155uai1osy().s[54]++, successRateQuery.get());
    const overallSuccessRate =
    /* istanbul ignore next */
    (cov_155uai1osy().s[55]++,
    /* istanbul ignore next */
    (cov_155uai1osy().b[11][0]++, successData) &&
    /* istanbul ignore next */
    (cov_155uai1osy().b[11][1]++, successData.total > 0) ?
    /* istanbul ignore next */
    (cov_155uai1osy().b[10][0]++, successData.passed / successData.total) :
    /* istanbul ignore next */
    (cov_155uai1osy().b[10][1]++, 0));
    // Get average execution time
    const avgTimeQuery =
    /* istanbul ignore next */
    (cov_155uai1osy().s[56]++, this.db.prepare(`
      SELECT AVG(execution_time_ms) as avg_time FROM test_results
    `));
    const avgTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[57]++,
    /* istanbul ignore next */
    (cov_155uai1osy().b[12][0]++, avgTimeQuery.get()?.avg_time) ||
    /* istanbul ignore next */
    (cov_155uai1osy().b[12][1]++, 0));
    // Get most used models from events
    const modelUsageEvents =
    /* istanbul ignore next */
    (cov_155uai1osy().s[58]++, await this.eventStore.getEvents({
      event_type: 'test_execution',
      limit: 10000
    }));
    const modelCounts =
    /* istanbul ignore next */
    (cov_155uai1osy().s[59]++, modelUsageEvents.reduce((acc, event) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[13]++;
      const model =
      /* istanbul ignore next */
      (cov_155uai1osy().s[60]++, event.data.model);
      /* istanbul ignore next */
      cov_155uai1osy().s[61]++;
      acc[model] = (
      /* istanbul ignore next */
      (cov_155uai1osy().b[13][0]++, acc[model]) ||
      /* istanbul ignore next */
      (cov_155uai1osy().b[13][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_155uai1osy().s[62]++;
      return acc;
    }, {}));
    const mostUsedModels =
    /* istanbul ignore next */
    (cov_155uai1osy().s[63]++, Object.entries(modelCounts).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[14]++;
      cov_155uai1osy().s[64]++;
      return b - a;
    }).slice(0, 10).map(([model, count]) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[15]++;
      cov_155uai1osy().s[65]++;
      return {
        model,
        count
      };
    }));
    const result =
    /* istanbul ignore next */
    (cov_155uai1osy().s[66]++, {
      totalTests,
      totalExecutions,
      overallSuccessRate,
      averageExecutionTime: avgTime,
      mostUsedModels
    });
    // Cache result with longer TTL for historical data
    /* istanbul ignore next */
    cov_155uai1osy().s[67]++;
    this.queryCache.set(cacheKey, result, {
      ttl: 1000 * 60 * 10
    }); // 10 minutes
    // Track performance
    const executionTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[68]++, perf_hooks_1.performance.now() - startTime);
    /* istanbul ignore next */
    cov_155uai1osy().s[69]++;
    this.trackQueryPerformance('calculateHistoricalMetrics', executionTime);
    /* istanbul ignore next */
    cov_155uai1osy().s[70]++;
    return result;
  }
  async calculateTrends(period =
  /* istanbul ignore next */
  (cov_155uai1osy().b[14][0]++, 'day'), limit =
  /* istanbul ignore next */
  (cov_155uai1osy().b[15][0]++, 30)) {
    /* istanbul ignore next */
    cov_155uai1osy().f[16]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_155uai1osy().s[71]++, `trends_${period}_${limit}`);
    const cached =
    /* istanbul ignore next */
    (cov_155uai1osy().s[72]++, this.queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_155uai1osy().s[73]++;
    if (cached) {
      /* istanbul ignore next */
      cov_155uai1osy().b[16][0]++;
      cov_155uai1osy().s[74]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[16][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[75]++, perf_hooks_1.performance.now());
    const now =
    /* istanbul ignore next */
    (cov_155uai1osy().s[76]++, new Date());
    const periodStartTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[77]++, new Date());
    /* istanbul ignore next */
    cov_155uai1osy().s[78]++;
    switch (period) {
      case 'hour':
        /* istanbul ignore next */
        cov_155uai1osy().b[17][0]++;
        cov_155uai1osy().s[79]++;
        periodStartTime.setHours(now.getHours() - limit);
        /* istanbul ignore next */
        cov_155uai1osy().s[80]++;
        break;
      case 'day':
        /* istanbul ignore next */
        cov_155uai1osy().b[17][1]++;
        cov_155uai1osy().s[81]++;
        periodStartTime.setDate(now.getDate() - limit);
        /* istanbul ignore next */
        cov_155uai1osy().s[82]++;
        break;
      case 'week':
        /* istanbul ignore next */
        cov_155uai1osy().b[17][2]++;
        cov_155uai1osy().s[83]++;
        periodStartTime.setDate(now.getDate() - limit * 7);
        /* istanbul ignore next */
        cov_155uai1osy().s[84]++;
        break;
      case 'month':
        /* istanbul ignore next */
        cov_155uai1osy().b[17][3]++;
        cov_155uai1osy().s[85]++;
        periodStartTime.setMonth(now.getMonth() - limit);
        /* istanbul ignore next */
        cov_155uai1osy().s[86]++;
        break;
    }
    // Get test execution events for the period
    const events =
    /* istanbul ignore next */
    (cov_155uai1osy().s[87]++, await this.eventStore.getEvents({
      event_type: 'test_execution',
      start_time: periodStartTime,
      end_time: now
    }));
    // Group events by time period
    const timeGroups =
    /* istanbul ignore next */
    (cov_155uai1osy().s[88]++, this.groupEventsByTime(events, period));
    const testsOverTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[89]++, timeGroups.map(group => {
      /* istanbul ignore next */
      cov_155uai1osy().f[17]++;
      cov_155uai1osy().s[90]++;
      return {
        timestamp: group.timestamp,
        count: group.events.length
      };
    }));
    const successRateOverTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[91]++, timeGroups.map(group => {
      /* istanbul ignore next */
      cov_155uai1osy().f[18]++;
      cov_155uai1osy().s[92]++;
      return {
        timestamp: group.timestamp,
        rate: group.events.length > 0 ?
        /* istanbul ignore next */
        (cov_155uai1osy().b[18][0]++, group.events.filter(e => {
          /* istanbul ignore next */
          cov_155uai1osy().f[19]++;
          cov_155uai1osy().s[93]++;
          return e.data.passed;
        }).length / group.events.length) :
        /* istanbul ignore next */
        (cov_155uai1osy().b[18][1]++, 0)
      };
    }));
    const performanceOverTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[94]++, timeGroups.map(group => {
      /* istanbul ignore next */
      cov_155uai1osy().f[20]++;
      cov_155uai1osy().s[95]++;
      return {
        timestamp: group.timestamp,
        avgTime: group.events.length > 0 ?
        /* istanbul ignore next */
        (cov_155uai1osy().b[19][0]++, group.events.reduce((sum, e) => {
          /* istanbul ignore next */
          cov_155uai1osy().f[21]++;
          cov_155uai1osy().s[96]++;
          return sum + e.data.execution_time;
        }, 0) / group.events.length) :
        /* istanbul ignore next */
        (cov_155uai1osy().b[19][1]++, 0)
      };
    }));
    const result =
    /* istanbul ignore next */
    (cov_155uai1osy().s[97]++, {
      testsOverTime,
      successRateOverTime,
      performanceOverTime
    });
    // Cache result with appropriate TTL based on period
    const ttl =
    /* istanbul ignore next */
    (cov_155uai1osy().s[98]++, period === 'hour' ?
    /* istanbul ignore next */
    (cov_155uai1osy().b[20][0]++, 1000 * 60 * 5) :
    /* istanbul ignore next */
    (cov_155uai1osy().b[20][1]++, 1000 * 60 * 30)); // 5 or 30 minutes
    /* istanbul ignore next */
    cov_155uai1osy().s[99]++;
    this.queryCache.set(cacheKey, result, {
      ttl
    });
    // Track performance
    const executionTime =
    /* istanbul ignore next */
    (cov_155uai1osy().s[100]++, perf_hooks_1.performance.now() - startTime);
    /* istanbul ignore next */
    cov_155uai1osy().s[101]++;
    this.trackQueryPerformance('calculateTrends', executionTime);
    /* istanbul ignore next */
    cov_155uai1osy().s[102]++;
    return result;
  }
  async generateInsights() {
    /* istanbul ignore next */
    cov_155uai1osy().f[22]++;
    const insights =
    /* istanbul ignore next */
    (cov_155uai1osy().s[103]++, []);
    // Performance insight
    const recentPerformance =
    /* istanbul ignore next */
    (cov_155uai1osy().s[104]++, await this.calculateTrends('hour', 24));
    const avgPerformance =
    /* istanbul ignore next */
    (cov_155uai1osy().s[105]++, recentPerformance.performanceOverTime.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[23]++;
      cov_155uai1osy().s[106]++;
      return sum + p.avgTime;
    }, 0) / recentPerformance.performanceOverTime.length);
    /* istanbul ignore next */
    cov_155uai1osy().s[107]++;
    if (avgPerformance > 5000) {
      /* istanbul ignore next */
      cov_155uai1osy().b[21][0]++;
      cov_155uai1osy().s[108]++;
      // 5 seconds
      insights.push({
        id: 'performance_degradation',
        type: 'anomaly',
        title: 'Performance Degradation Detected',
        description: `Average response time has increased to ${avgPerformance.toFixed(0)}ms`,
        severity: 'high',
        data: {
          avgPerformance
        },
        timestamp: new Date(),
        recommendations: ['Check system resources', 'Optimize slow queries', 'Consider scaling infrastructure']
      });
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[21][1]++;
    }
    // Success rate insight
    const recentSuccess =
    /* istanbul ignore next */
    (cov_155uai1osy().s[109]++, await this.calculateTrends('hour', 24));
    const avgSuccessRate =
    /* istanbul ignore next */
    (cov_155uai1osy().s[110]++, recentSuccess.successRateOverTime.reduce((sum, s) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[24]++;
      cov_155uai1osy().s[111]++;
      return sum + s.rate;
    }, 0) / recentSuccess.successRateOverTime.length);
    /* istanbul ignore next */
    cov_155uai1osy().s[112]++;
    if (avgSuccessRate < 0.8) {
      /* istanbul ignore next */
      cov_155uai1osy().b[22][0]++;
      cov_155uai1osy().s[113]++;
      // Less than 80% success rate
      insights.push({
        id: 'low_success_rate',
        type: 'anomaly',
        title: 'Low Success Rate Detected',
        description: `Test success rate has dropped to ${(avgSuccessRate * 100).toFixed(1)}%`,
        severity: 'critical',
        data: {
          avgSuccessRate
        },
        timestamp: new Date(),
        recommendations: ['Review failing test cases', 'Check assertion logic', 'Validate model configurations']
      });
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[22][1]++;
    }
    // Usage trend insight
    const usageTrend =
    /* istanbul ignore next */
    (cov_155uai1osy().s[114]++, await this.calculateTrends('day', 7));
    const recentUsage =
    /* istanbul ignore next */
    (cov_155uai1osy().s[115]++, usageTrend.testsOverTime.slice(-3).reduce((sum, t) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[25]++;
      cov_155uai1osy().s[116]++;
      return sum + t.count;
    }, 0));
    const previousUsage =
    /* istanbul ignore next */
    (cov_155uai1osy().s[117]++, usageTrend.testsOverTime.slice(-6, -3).reduce((sum, t) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[26]++;
      cov_155uai1osy().s[118]++;
      return sum + t.count;
    }, 0));
    /* istanbul ignore next */
    cov_155uai1osy().s[119]++;
    if (recentUsage > previousUsage * 1.5) {
      /* istanbul ignore next */
      cov_155uai1osy().b[23][0]++;
      cov_155uai1osy().s[120]++;
      insights.push({
        id: 'usage_spike',
        type: 'trend',
        title: 'Usage Spike Detected',
        description: `Test execution volume has increased by ${((recentUsage / previousUsage - 1) * 100).toFixed(1)}%`,
        severity: 'medium',
        data: {
          recentUsage,
          previousUsage
        },
        timestamp: new Date(),
        recommendations: ['Monitor system capacity', 'Consider auto-scaling', 'Review resource allocation']
      });
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[23][1]++;
    }
    cov_155uai1osy().s[121]++;
    return insights;
  }
  async getDashboardMetrics() {
    /* istanbul ignore next */
    cov_155uai1osy().f[27]++;
    const [realtime, historical, trends, insights] =
    /* istanbul ignore next */
    (cov_155uai1osy().s[122]++, await Promise.all([this.calculateRealtimeMetrics(), this.calculateHistoricalMetrics(), this.calculateTrends(), this.generateInsights()]));
    /* istanbul ignore next */
    cov_155uai1osy().s[123]++;
    return {
      realtime,
      historical,
      trends,
      insights
    };
  }
  groupEventsByTime(events, period) {
    /* istanbul ignore next */
    cov_155uai1osy().f[28]++;
    const groups =
    /* istanbul ignore next */
    (cov_155uai1osy().s[124]++, new Map());
    /* istanbul ignore next */
    cov_155uai1osy().s[125]++;
    events.forEach(event => {
      /* istanbul ignore next */
      cov_155uai1osy().f[29]++;
      const timestamp =
      /* istanbul ignore next */
      (cov_155uai1osy().s[126]++, new Date(event.timestamp));
      let key;
      /* istanbul ignore next */
      cov_155uai1osy().s[127]++;
      switch (period) {
        case 'hour':
          /* istanbul ignore next */
          cov_155uai1osy().b[24][0]++;
          cov_155uai1osy().s[128]++;
          key = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}-${timestamp.getHours()}`;
          /* istanbul ignore next */
          cov_155uai1osy().s[129]++;
          break;
        case 'day':
          /* istanbul ignore next */
          cov_155uai1osy().b[24][1]++;
          cov_155uai1osy().s[130]++;
          key = `${timestamp.getFullYear()}-${timestamp.getMonth()}-${timestamp.getDate()}`;
          /* istanbul ignore next */
          cov_155uai1osy().s[131]++;
          break;
        case 'week':
          /* istanbul ignore next */
          cov_155uai1osy().b[24][2]++;
          const weekStart =
          /* istanbul ignore next */
          (cov_155uai1osy().s[132]++, new Date(timestamp));
          /* istanbul ignore next */
          cov_155uai1osy().s[133]++;
          weekStart.setDate(timestamp.getDate() - timestamp.getDay());
          /* istanbul ignore next */
          cov_155uai1osy().s[134]++;
          key = `${weekStart.getFullYear()}-${weekStart.getMonth()}-${weekStart.getDate()}`;
          /* istanbul ignore next */
          cov_155uai1osy().s[135]++;
          break;
        case 'month':
          /* istanbul ignore next */
          cov_155uai1osy().b[24][3]++;
          cov_155uai1osy().s[136]++;
          key = `${timestamp.getFullYear()}-${timestamp.getMonth()}`;
          /* istanbul ignore next */
          cov_155uai1osy().s[137]++;
          break;
      }
      /* istanbul ignore next */
      cov_155uai1osy().s[138]++;
      if (!groups.has(key)) {
        /* istanbul ignore next */
        cov_155uai1osy().b[25][0]++;
        cov_155uai1osy().s[139]++;
        groups.set(key, []);
      } else
      /* istanbul ignore next */
      {
        cov_155uai1osy().b[25][1]++;
      }
      cov_155uai1osy().s[140]++;
      groups.get(key).push(event);
    });
    /* istanbul ignore next */
    cov_155uai1osy().s[141]++;
    return Array.from(groups.entries()).map(([key, events]) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[30]++;
      const parts =
      /* istanbul ignore next */
      (cov_155uai1osy().s[142]++, key.split('-').map(Number));
      let timestamp;
      /* istanbul ignore next */
      cov_155uai1osy().s[143]++;
      switch (period) {
        case 'hour':
          /* istanbul ignore next */
          cov_155uai1osy().b[26][0]++;
          cov_155uai1osy().s[144]++;
          timestamp = new Date(parts[0], parts[1], parts[2], parts[3]);
          /* istanbul ignore next */
          cov_155uai1osy().s[145]++;
          break;
        case 'day':
          /* istanbul ignore next */
          cov_155uai1osy().b[26][1]++;
          cov_155uai1osy().s[146]++;
          timestamp = new Date(parts[0], parts[1], parts[2]);
          /* istanbul ignore next */
          cov_155uai1osy().s[147]++;
          break;
        case 'week':
          /* istanbul ignore next */
          cov_155uai1osy().b[26][2]++;
          cov_155uai1osy().s[148]++;
          timestamp = new Date(parts[0], parts[1], parts[2]);
          /* istanbul ignore next */
          cov_155uai1osy().s[149]++;
          break;
        case 'month':
          /* istanbul ignore next */
          cov_155uai1osy().b[26][3]++;
          cov_155uai1osy().s[150]++;
          timestamp = new Date(parts[0], parts[1]);
          /* istanbul ignore next */
          cov_155uai1osy().s[151]++;
          break;
        default:
          /* istanbul ignore next */
          cov_155uai1osy().b[26][4]++;
          cov_155uai1osy().s[152]++;
          timestamp = new Date();
      }
      /* istanbul ignore next */
      cov_155uai1osy().s[153]++;
      return {
        timestamp,
        events
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_155uai1osy().f[31]++;
      cov_155uai1osy().s[154]++;
      return a.timestamp.getTime() - b.timestamp.getTime();
    });
  }
  /**
   * Prepare optimized SQL queries for better performance
   */
  prepareOptimizedQueries() {
    /* istanbul ignore next */
    cov_155uai1osy().f[32]++;
    cov_155uai1osy().s[155]++;
    // Optimized query for active tests with indexes
    this.preparedStatements.set('activeTests', this.db.prepare(`
      SELECT COUNT(*) as count
      FROM test_results
      WHERE created_at >= datetime('now', '-5 minutes')
      AND execution_id NOT IN (
        SELECT DISTINCT execution_id 
        FROM test_results 
        WHERE created_at >= datetime('now', '-5 minutes')
        GROUP BY execution_id
        HAVING COUNT(*) > 1
      )
    `));
    // Optimized query for total tests with covering index
    /* istanbul ignore next */
    cov_155uai1osy().s[156]++;
    this.preparedStatements.set('totalTests', this.db.prepare(`
      SELECT COUNT(*) as count FROM test_results
    `));
    // Optimized query for total executions using distinct
    /* istanbul ignore next */
    cov_155uai1osy().s[157]++;
    this.preparedStatements.set('totalExecutions', this.db.prepare(`
      SELECT COUNT(DISTINCT execution_id) as count FROM test_results
    `));
    // Optimized query for success rate with index hint
    /* istanbul ignore next */
    cov_155uai1osy().s[158]++;
    this.preparedStatements.set('successRate', this.db.prepare(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as passed
      FROM test_results
      WHERE created_at >= ?
    `));
    // Optimized query for average execution time
    /* istanbul ignore next */
    cov_155uai1osy().s[159]++;
    this.preparedStatements.set('avgExecutionTime', this.db.prepare(`
      SELECT AVG(execution_time_ms) as avg_time 
      FROM test_results
      WHERE execution_time_ms > 0
    `));
  }
  /**
   * Optimize database settings for performance
   */
  optimizeDatabase() {
    /* istanbul ignore next */
    cov_155uai1osy().f[33]++;
    cov_155uai1osy().s[160]++;
    // Set WAL mode for better concurrent performance
    this.db.pragma('journal_mode = WAL');
    // Optimize memory usage
    /* istanbul ignore next */
    cov_155uai1osy().s[161]++;
    this.db.pragma('cache_size = 10000');
    /* istanbul ignore next */
    cov_155uai1osy().s[162]++;
    this.db.pragma('temp_store = memory');
    // Optimize synchronous mode for better performance
    /* istanbul ignore next */
    cov_155uai1osy().s[163]++;
    this.db.pragma('synchronous = NORMAL');
    // Enable query planner optimization
    /* istanbul ignore next */
    cov_155uai1osy().s[164]++;
    this.db.pragma('optimize');
    // Create additional performance indexes
    /* istanbul ignore next */
    cov_155uai1osy().s[165]++;
    this.createPerformanceIndexes();
  }
  /**
   * Create additional indexes for better query performance
   */
  createPerformanceIndexes() {
    /* istanbul ignore next */
    cov_155uai1osy().f[34]++;
    cov_155uai1osy().s[166]++;
    try {
      /* istanbul ignore next */
      cov_155uai1osy().s[167]++;
      // Composite index for time-based queries
      this.db.exec(`
        CREATE INDEX IF NOT EXISTS idx_test_results_created_at_passed 
        ON test_results(created_at, passed);
      `);
      // Composite index for execution time analysis
      /* istanbul ignore next */
      cov_155uai1osy().s[168]++;
      this.db.exec(`
        CREATE INDEX IF NOT EXISTS idx_test_results_execution_time 
        ON test_results(execution_time_ms, created_at) 
        WHERE execution_time_ms > 0;
      `);
      // Index for model performance analysis
      /* istanbul ignore next */
      cov_155uai1osy().s[169]++;
      this.db.exec(`
        CREATE INDEX IF NOT EXISTS idx_test_results_model_performance 
        ON test_results(model, passed, execution_time_ms);
      `);
      // Covering index for execution ID queries
      /* istanbul ignore next */
      cov_155uai1osy().s[170]++;
      this.db.exec(`
        CREATE INDEX IF NOT EXISTS idx_test_results_execution_id_covering 
        ON test_results(execution_id, created_at, passed);
      `);
      /* istanbul ignore next */
      cov_155uai1osy().s[171]++;
      console.log('Performance indexes created successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_155uai1osy().s[172]++;
      console.warn('Some performance indexes already exist:', error.message);
    }
  }
  /**
   * Track query performance for optimization
   */
  trackQueryPerformance(queryName, executionTime) {
    /* istanbul ignore next */
    cov_155uai1osy().f[35]++;
    cov_155uai1osy().s[173]++;
    if (!this.performanceMetrics.has(queryName)) {
      /* istanbul ignore next */
      cov_155uai1osy().b[27][0]++;
      cov_155uai1osy().s[174]++;
      this.performanceMetrics.set(queryName, []);
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[27][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_155uai1osy().s[175]++, this.performanceMetrics.get(queryName));
    /* istanbul ignore next */
    cov_155uai1osy().s[176]++;
    metrics.push(executionTime);
    // Keep only last 100 measurements
    /* istanbul ignore next */
    cov_155uai1osy().s[177]++;
    if (metrics.length > 100) {
      /* istanbul ignore next */
      cov_155uai1osy().b[28][0]++;
      cov_155uai1osy().s[178]++;
      metrics.shift();
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[28][1]++;
    }
    // Log slow queries
    cov_155uai1osy().s[179]++;
    if (executionTime > 100) {
      /* istanbul ignore next */
      cov_155uai1osy().b[29][0]++;
      cov_155uai1osy().s[180]++;
      console.warn(`Slow query detected: ${queryName} took ${executionTime.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_155uai1osy().b[29][1]++;
    }
  }
  /**
   * Get query performance statistics
   */
  getQueryPerformanceStats() {
    /* istanbul ignore next */
    cov_155uai1osy().f[36]++;
    const stats =
    /* istanbul ignore next */
    (cov_155uai1osy().s[181]++, {});
    /* istanbul ignore next */
    cov_155uai1osy().s[182]++;
    for (const [queryName, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_155uai1osy().s[183]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_155uai1osy().b[30][0]++;
        const avg =
        /* istanbul ignore next */
        (cov_155uai1osy().s[184]++, metrics.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_155uai1osy().f[37]++;
          cov_155uai1osy().s[185]++;
          return sum + time;
        }, 0) / metrics.length);
        const max =
        /* istanbul ignore next */
        (cov_155uai1osy().s[186]++, Math.max(...metrics));
        const min =
        /* istanbul ignore next */
        (cov_155uai1osy().s[187]++, Math.min(...metrics));
        /* istanbul ignore next */
        cov_155uai1osy().s[188]++;
        stats[queryName] = {
          avg: Math.round(avg * 100) / 100,
          max: Math.round(max * 100) / 100,
          min: Math.round(min * 100) / 100,
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_155uai1osy().b[30][1]++;
      }
    }
    /* istanbul ignore next */
    cov_155uai1osy().s[189]++;
    return stats;
  }
  /**
   * Clear cache and performance metrics
   */
  clearCache() {
    /* istanbul ignore next */
    cov_155uai1osy().f[38]++;
    cov_155uai1osy().s[190]++;
    this.queryCache.clear();
    /* istanbul ignore next */
    cov_155uai1osy().s[191]++;
    this.performanceMetrics.clear();
    /* istanbul ignore next */
    cov_155uai1osy().s[192]++;
    console.log('Analytics cache and performance metrics cleared');
  }
  /**
   * Get cache statistics
   */
  getCacheStats() {
    /* istanbul ignore next */
    cov_155uai1osy().f[39]++;
    cov_155uai1osy().s[193]++;
    return {
      size: this.queryCache.size,
      max: this.queryCache.max,
      hitRate: this.queryCache.calculatedSize > 0 ?
      /* istanbul ignore next */
      (cov_155uai1osy().b[31][0]++, (this.queryCache.calculatedSize - this.queryCache.size) / this.queryCache.calculatedSize) :
      /* istanbul ignore next */
      (cov_155uai1osy().b[31][1]++, 0)
    };
  }
}
/* istanbul ignore next */
cov_155uai1osy().s[194]++;
exports.AnalyticsEngine = AnalyticsEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,