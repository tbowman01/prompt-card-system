19e8d3bddd55ad249829bbce79efcbb2
"use strict";

/**
 * Service Dependency Mapping Configuration
 *
 * This file defines the dependency relationships between services in the system.
 * Used by the Health Orchestrator for dependency checking and cascade failure prevention.
 */
/* istanbul ignore next */
function cov_288hro9jfk() {
  var path = "/workspaces/prompt-card-system/backend/src/services/service-dependencies.ts";
  var hash = "4940aabc53105b6c62c38cedf62857e897080922";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/service-dependencies.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 48
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 58
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 88,
          column: 2
        }
      },
      "5": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 29
        }
      },
      "6": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 94,
          column: 27
        }
      },
      "7": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "8": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "9": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 26
        }
      },
      "10": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 99,
          column: 58
        }
      },
      "11": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "12": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "13": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 41
        }
      },
      "14": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "15": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 43
        }
      },
      "16": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 37
        }
      },
      "17": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "18": {
        start: {
          line: 116,
          column: 17
        },
        end: {
          line: 116,
          column: 48
        }
      },
      "19": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 117,
          column: 80
        }
      },
      "20": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 117,
          column: 78
        }
      }
    },
    fnMap: {
      "0": {
        name: "getAllDependencies",
        decl: {
          start: {
            line: 92,
            column: 9
          },
          end: {
            line: 92,
            column: 27
          }
        },
        loc: {
          start: {
            line: 92,
            column: 41
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 92
      },
      "1": {
        name: "collectDependencies",
        decl: {
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 95,
            column: 32
          }
        },
        loc: {
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 95
      },
      "2": {
        name: "hasCriticalDependencies",
        decl: {
          start: {
            line: 115,
            column: 9
          },
          end: {
            line: 115,
            column: 32
          }
        },
        loc: {
          start: {
            line: 115,
            column: 46
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 115
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 117,
            column: 21
          },
          end: {
            line: 117,
            column: 22
          }
        },
        loc: {
          start: {
            line: 117,
            column: 28
          },
          end: {
            line: 117,
            column: 78
          }
        },
        line: 117
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 97,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 97,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "1": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "2": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/service-dependencies.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/service-dependencies.ts"],
      sourcesContent: ["/**\n * Service Dependency Mapping Configuration\n * \n * This file defines the dependency relationships between services in the system.\n * Used by the Health Orchestrator for dependency checking and cascade failure prevention.\n */\n\nexport interface ServiceDependency {\n  name: string;\n  dependencies: string[];\n  criticalService: boolean;\n  fallbackAvailable: boolean;\n  maxToleratedDowntime: number; // in milliseconds\n  retryPolicy: {\n    maxRetries: number;\n    retryDelay: number;\n    backoffMultiplier: number;\n  };\n}\n\nexport const SERVICE_DEPENDENCIES: Record<string, ServiceDependency> = {\n  // Core Infrastructure\n  database: {\n    name: 'database',\n    dependencies: [],\n    criticalService: true,\n    fallbackAvailable: false,\n    maxToleratedDowntime: 0, // No downtime tolerated\n    retryPolicy: {\n      maxRetries: 5,\n      retryDelay: 1000,\n      backoffMultiplier: 2\n    }\n  },\n\n  redis: {\n    name: 'redis',\n    dependencies: [],\n    criticalService: true,\n    fallbackAvailable: true, // In-memory cache fallback\n    maxToleratedDowntime: 30000, // 30 seconds\n    retryPolicy: {\n      maxRetries: 3,\n      retryDelay: 1000,\n      backoffMultiplier: 1.5\n    }\n  },\n\n  // AI/ML Services\n  ollama: {\n    name: 'ollama',\n    dependencies: [],\n    criticalService: true,\n    fallbackAvailable: true, // Mock responses fallback\n    maxToleratedDowntime: 60000, // 1 minute\n    retryPolicy: {\n      maxRetries: 3,\n      retryDelay: 2000,\n      backoffMultiplier: 2\n    }\n  },\n\n  'model-health': {\n    name: 'model-health',\n    dependencies: ['ollama'],\n    criticalService: false,\n    fallbackAvailable: true, // Disable AI features gracefully\n    maxToleratedDowntime: 300000, // 5 minutes\n    retryPolicy: {\n      maxRetries: 2,\n      retryDelay: 5000,\n      backoffMultiplier: 2\n    }\n  },\n\n  // Application Services\n  backend: {\n    name: 'backend',\n    dependencies: ['database', 'ollama', 'redis'],\n    criticalService: true,\n    fallbackAvailable: false,\n    maxToleratedDowntime: 5000, // 5 seconds\n    retryPolicy: {\n      maxRetries: 3,\n      retryDelay: 1000,\n      backoffMultiplier: 1.5\n    }\n  },\n\n  frontend: {\n    name: 'frontend',\n    dependencies: ['backend'],\n    criticalService: true,\n    fallbackAvailable: false,\n    maxToleratedDowntime: 10000, // 10 seconds\n    retryPolicy: {\n      maxRetries: 2,\n      retryDelay: 2000,\n      backoffMultiplier: 2\n    }\n  }\n};\n\n/**\n * Get all dependencies for a service (including transitive dependencies)\n */\nexport function getAllDependencies(serviceName: string): string[] {\n  const visited = new Set<string>();\n  const dependencies: string[] = [];\n\n  function collectDependencies(name: string) {\n    if (visited.has(name)) return;\n    visited.add(name);\n\n    const service = SERVICE_DEPENDENCIES[name];\n    if (service) {\n      for (const dep of service.dependencies) {\n        collectDependencies(dep);\n        if (!dependencies.includes(dep)) {\n          dependencies.push(dep);\n        }\n      }\n    }\n  }\n\n  collectDependencies(serviceName);\n  return dependencies;\n}\n\n/**\n * Check if a service has any critical dependencies\n */\nexport function hasCriticalDependencies(serviceName: string): boolean {\n  const deps = getAllDependencies(serviceName);\n  return deps.some(dep => SERVICE_DEPENDENCIES[dep]?.criticalService);\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4940aabc53105b6c62c38cedf62857e897080922"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_288hro9jfk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_288hro9jfk();
cov_288hro9jfk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_288hro9jfk().s[1]++;
exports.SERVICE_DEPENDENCIES = void 0;
/* istanbul ignore next */
cov_288hro9jfk().s[2]++;
exports.getAllDependencies = getAllDependencies;
/* istanbul ignore next */
cov_288hro9jfk().s[3]++;
exports.hasCriticalDependencies = hasCriticalDependencies;
/* istanbul ignore next */
cov_288hro9jfk().s[4]++;
exports.SERVICE_DEPENDENCIES = {
  // Core Infrastructure
  database: {
    name: 'database',
    dependencies: [],
    criticalService: true,
    fallbackAvailable: false,
    maxToleratedDowntime: 0,
    // No downtime tolerated
    retryPolicy: {
      maxRetries: 5,
      retryDelay: 1000,
      backoffMultiplier: 2
    }
  },
  redis: {
    name: 'redis',
    dependencies: [],
    criticalService: true,
    fallbackAvailable: true,
    // In-memory cache fallback
    maxToleratedDowntime: 30000,
    // 30 seconds
    retryPolicy: {
      maxRetries: 3,
      retryDelay: 1000,
      backoffMultiplier: 1.5
    }
  },
  // AI/ML Services
  ollama: {
    name: 'ollama',
    dependencies: [],
    criticalService: true,
    fallbackAvailable: true,
    // Mock responses fallback
    maxToleratedDowntime: 60000,
    // 1 minute
    retryPolicy: {
      maxRetries: 3,
      retryDelay: 2000,
      backoffMultiplier: 2
    }
  },
  'model-health': {
    name: 'model-health',
    dependencies: ['ollama'],
    criticalService: false,
    fallbackAvailable: true,
    // Disable AI features gracefully
    maxToleratedDowntime: 300000,
    // 5 minutes
    retryPolicy: {
      maxRetries: 2,
      retryDelay: 5000,
      backoffMultiplier: 2
    }
  },
  // Application Services
  backend: {
    name: 'backend',
    dependencies: ['database', 'ollama', 'redis'],
    criticalService: true,
    fallbackAvailable: false,
    maxToleratedDowntime: 5000,
    // 5 seconds
    retryPolicy: {
      maxRetries: 3,
      retryDelay: 1000,
      backoffMultiplier: 1.5
    }
  },
  frontend: {
    name: 'frontend',
    dependencies: ['backend'],
    criticalService: true,
    fallbackAvailable: false,
    maxToleratedDowntime: 10000,
    // 10 seconds
    retryPolicy: {
      maxRetries: 2,
      retryDelay: 2000,
      backoffMultiplier: 2
    }
  }
};
/**
 * Get all dependencies for a service (including transitive dependencies)
 */
function getAllDependencies(serviceName) {
  /* istanbul ignore next */
  cov_288hro9jfk().f[0]++;
  const visited =
  /* istanbul ignore next */
  (cov_288hro9jfk().s[5]++, new Set());
  const dependencies =
  /* istanbul ignore next */
  (cov_288hro9jfk().s[6]++, []);
  function collectDependencies(name) {
    /* istanbul ignore next */
    cov_288hro9jfk().f[1]++;
    cov_288hro9jfk().s[7]++;
    if (visited.has(name)) {
      /* istanbul ignore next */
      cov_288hro9jfk().b[0][0]++;
      cov_288hro9jfk().s[8]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_288hro9jfk().b[0][1]++;
    }
    cov_288hro9jfk().s[9]++;
    visited.add(name);
    const service =
    /* istanbul ignore next */
    (cov_288hro9jfk().s[10]++, exports.SERVICE_DEPENDENCIES[name]);
    /* istanbul ignore next */
    cov_288hro9jfk().s[11]++;
    if (service) {
      /* istanbul ignore next */
      cov_288hro9jfk().b[1][0]++;
      cov_288hro9jfk().s[12]++;
      for (const dep of service.dependencies) {
        /* istanbul ignore next */
        cov_288hro9jfk().s[13]++;
        collectDependencies(dep);
        /* istanbul ignore next */
        cov_288hro9jfk().s[14]++;
        if (!dependencies.includes(dep)) {
          /* istanbul ignore next */
          cov_288hro9jfk().b[2][0]++;
          cov_288hro9jfk().s[15]++;
          dependencies.push(dep);
        } else
        /* istanbul ignore next */
        {
          cov_288hro9jfk().b[2][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_288hro9jfk().b[1][1]++;
    }
  }
  /* istanbul ignore next */
  cov_288hro9jfk().s[16]++;
  collectDependencies(serviceName);
  /* istanbul ignore next */
  cov_288hro9jfk().s[17]++;
  return dependencies;
}
/**
 * Check if a service has any critical dependencies
 */
function hasCriticalDependencies(serviceName) {
  /* istanbul ignore next */
  cov_288hro9jfk().f[2]++;
  const deps =
  /* istanbul ignore next */
  (cov_288hro9jfk().s[18]++, getAllDependencies(serviceName));
  /* istanbul ignore next */
  cov_288hro9jfk().s[19]++;
  return deps.some(dep => {
    /* istanbul ignore next */
    cov_288hro9jfk().f[3]++;
    cov_288hro9jfk().s[20]++;
    return exports.SERVICE_DEPENDENCIES[dep]?.criticalService;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjg4aHJvOWpmayIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImV4cG9ydHMiLCJnZXRBbGxEZXBlbmRlbmNpZXMiLCJoYXNDcml0aWNhbERlcGVuZGVuY2llcyIsIlNFUlZJQ0VfREVQRU5ERU5DSUVTIiwiZGF0YWJhc2UiLCJkZXBlbmRlbmNpZXMiLCJjcml0aWNhbFNlcnZpY2UiLCJmYWxsYmFja0F2YWlsYWJsZSIsIm1heFRvbGVyYXRlZERvd250aW1lIiwicmV0cnlQb2xpY3kiLCJtYXhSZXRyaWVzIiwicmV0cnlEZWxheSIsImJhY2tvZmZNdWx0aXBsaWVyIiwicmVkaXMiLCJvbGxhbWEiLCJiYWNrZW5kIiwiZnJvbnRlbmQiLCJzZXJ2aWNlTmFtZSIsInZpc2l0ZWQiLCJTZXQiLCJjb2xsZWN0RGVwZW5kZW5jaWVzIiwiaGFzIiwiYWRkIiwic2VydmljZSIsImRlcCIsImluY2x1ZGVzIiwicHVzaCIsImRlcHMiLCJzb21lIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL3NlcnZpY2VzL3NlcnZpY2UtZGVwZW5kZW5jaWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2VydmljZSBEZXBlbmRlbmN5IE1hcHBpbmcgQ29uZmlndXJhdGlvblxuICogXG4gKiBUaGlzIGZpbGUgZGVmaW5lcyB0aGUgZGVwZW5kZW5jeSByZWxhdGlvbnNoaXBzIGJldHdlZW4gc2VydmljZXMgaW4gdGhlIHN5c3RlbS5cbiAqIFVzZWQgYnkgdGhlIEhlYWx0aCBPcmNoZXN0cmF0b3IgZm9yIGRlcGVuZGVuY3kgY2hlY2tpbmcgYW5kIGNhc2NhZGUgZmFpbHVyZSBwcmV2ZW50aW9uLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZURlcGVuZGVuY3kge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlcGVuZGVuY2llczogc3RyaW5nW107XG4gIGNyaXRpY2FsU2VydmljZTogYm9vbGVhbjtcbiAgZmFsbGJhY2tBdmFpbGFibGU6IGJvb2xlYW47XG4gIG1heFRvbGVyYXRlZERvd250aW1lOiBudW1iZXI7IC8vIGluIG1pbGxpc2Vjb25kc1xuICByZXRyeVBvbGljeToge1xuICAgIG1heFJldHJpZXM6IG51bWJlcjtcbiAgICByZXRyeURlbGF5OiBudW1iZXI7XG4gICAgYmFja29mZk11bHRpcGxpZXI6IG51bWJlcjtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFNFUlZJQ0VfREVQRU5ERU5DSUVTOiBSZWNvcmQ8c3RyaW5nLCBTZXJ2aWNlRGVwZW5kZW5jeT4gPSB7XG4gIC8vIENvcmUgSW5mcmFzdHJ1Y3R1cmVcbiAgZGF0YWJhc2U6IHtcbiAgICBuYW1lOiAnZGF0YWJhc2UnLFxuICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgY3JpdGljYWxTZXJ2aWNlOiB0cnVlLFxuICAgIGZhbGxiYWNrQXZhaWxhYmxlOiBmYWxzZSxcbiAgICBtYXhUb2xlcmF0ZWREb3dudGltZTogMCwgLy8gTm8gZG93bnRpbWUgdG9sZXJhdGVkXG4gICAgcmV0cnlQb2xpY3k6IHtcbiAgICAgIG1heFJldHJpZXM6IDUsXG4gICAgICByZXRyeURlbGF5OiAxMDAwLFxuICAgICAgYmFja29mZk11bHRpcGxpZXI6IDJcbiAgICB9XG4gIH0sXG5cbiAgcmVkaXM6IHtcbiAgICBuYW1lOiAncmVkaXMnLFxuICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgY3JpdGljYWxTZXJ2aWNlOiB0cnVlLFxuICAgIGZhbGxiYWNrQXZhaWxhYmxlOiB0cnVlLCAvLyBJbi1tZW1vcnkgY2FjaGUgZmFsbGJhY2tcbiAgICBtYXhUb2xlcmF0ZWREb3dudGltZTogMzAwMDAsIC8vIDMwIHNlY29uZHNcbiAgICByZXRyeVBvbGljeToge1xuICAgICAgbWF4UmV0cmllczogMyxcbiAgICAgIHJldHJ5RGVsYXk6IDEwMDAsXG4gICAgICBiYWNrb2ZmTXVsdGlwbGllcjogMS41XG4gICAgfVxuICB9LFxuXG4gIC8vIEFJL01MIFNlcnZpY2VzXG4gIG9sbGFtYToge1xuICAgIG5hbWU6ICdvbGxhbWEnLFxuICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgY3JpdGljYWxTZXJ2aWNlOiB0cnVlLFxuICAgIGZhbGxiYWNrQXZhaWxhYmxlOiB0cnVlLCAvLyBNb2NrIHJlc3BvbnNlcyBmYWxsYmFja1xuICAgIG1heFRvbGVyYXRlZERvd250aW1lOiA2MDAwMCwgLy8gMSBtaW51dGVcbiAgICByZXRyeVBvbGljeToge1xuICAgICAgbWF4UmV0cmllczogMyxcbiAgICAgIHJldHJ5RGVsYXk6IDIwMDAsXG4gICAgICBiYWNrb2ZmTXVsdGlwbGllcjogMlxuICAgIH1cbiAgfSxcblxuICAnbW9kZWwtaGVhbHRoJzoge1xuICAgIG5hbWU6ICdtb2RlbC1oZWFsdGgnLFxuICAgIGRlcGVuZGVuY2llczogWydvbGxhbWEnXSxcbiAgICBjcml0aWNhbFNlcnZpY2U6IGZhbHNlLFxuICAgIGZhbGxiYWNrQXZhaWxhYmxlOiB0cnVlLCAvLyBEaXNhYmxlIEFJIGZlYXR1cmVzIGdyYWNlZnVsbHlcbiAgICBtYXhUb2xlcmF0ZWREb3dudGltZTogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcbiAgICByZXRyeVBvbGljeToge1xuICAgICAgbWF4UmV0cmllczogMixcbiAgICAgIHJldHJ5RGVsYXk6IDUwMDAsXG4gICAgICBiYWNrb2ZmTXVsdGlwbGllcjogMlxuICAgIH1cbiAgfSxcblxuICAvLyBBcHBsaWNhdGlvbiBTZXJ2aWNlc1xuICBiYWNrZW5kOiB7XG4gICAgbmFtZTogJ2JhY2tlbmQnLFxuICAgIGRlcGVuZGVuY2llczogWydkYXRhYmFzZScsICdvbGxhbWEnLCAncmVkaXMnXSxcbiAgICBjcml0aWNhbFNlcnZpY2U6IHRydWUsXG4gICAgZmFsbGJhY2tBdmFpbGFibGU6IGZhbHNlLFxuICAgIG1heFRvbGVyYXRlZERvd250aW1lOiA1MDAwLCAvLyA1IHNlY29uZHNcbiAgICByZXRyeVBvbGljeToge1xuICAgICAgbWF4UmV0cmllczogMyxcbiAgICAgIHJldHJ5RGVsYXk6IDEwMDAsXG4gICAgICBiYWNrb2ZmTXVsdGlwbGllcjogMS41XG4gICAgfVxuICB9LFxuXG4gIGZyb250ZW5kOiB7XG4gICAgbmFtZTogJ2Zyb250ZW5kJyxcbiAgICBkZXBlbmRlbmNpZXM6IFsnYmFja2VuZCddLFxuICAgIGNyaXRpY2FsU2VydmljZTogdHJ1ZSxcbiAgICBmYWxsYmFja0F2YWlsYWJsZTogZmFsc2UsXG4gICAgbWF4VG9sZXJhdGVkRG93bnRpbWU6IDEwMDAwLCAvLyAxMCBzZWNvbmRzXG4gICAgcmV0cnlQb2xpY3k6IHtcbiAgICAgIG1heFJldHJpZXM6IDIsXG4gICAgICByZXRyeURlbGF5OiAyMDAwLFxuICAgICAgYmFja29mZk11bHRpcGxpZXI6IDJcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGFsbCBkZXBlbmRlbmNpZXMgZm9yIGEgc2VydmljZSAoaW5jbHVkaW5nIHRyYW5zaXRpdmUgZGVwZW5kZW5jaWVzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsRGVwZW5kZW5jaWVzKHNlcnZpY2VOYW1lOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgY29uc3QgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3REZXBlbmRlbmNpZXMobmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKHZpc2l0ZWQuaGFzKG5hbWUpKSByZXR1cm47XG4gICAgdmlzaXRlZC5hZGQobmFtZSk7XG5cbiAgICBjb25zdCBzZXJ2aWNlID0gU0VSVklDRV9ERVBFTkRFTkNJRVNbbmFtZV07XG4gICAgaWYgKHNlcnZpY2UpIHtcbiAgICAgIGZvciAoY29uc3QgZGVwIG9mIHNlcnZpY2UuZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIGNvbGxlY3REZXBlbmRlbmNpZXMoZGVwKTtcbiAgICAgICAgaWYgKCFkZXBlbmRlbmNpZXMuaW5jbHVkZXMoZGVwKSkge1xuICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKGRlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb2xsZWN0RGVwZW5kZW5jaWVzKHNlcnZpY2VOYW1lKTtcbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHNlcnZpY2UgaGFzIGFueSBjcml0aWNhbCBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0NyaXRpY2FsRGVwZW5kZW5jaWVzKHNlcnZpY2VOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgZGVwcyA9IGdldEFsbERlcGVuZGVuY2llcyhzZXJ2aWNlTmFtZSk7XG4gIHJldHVybiBkZXBzLnNvbWUoZGVwID0+IFNFUlZJQ0VfREVQRU5ERU5DSUVTW2RlcF0/LmNyaXRpY2FsU2VydmljZSk7XG59Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFB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O0lBQzlCK0IsT0FBTyxDQUFDSSxHQUFHLENBQUMxQyxJQUFJLENBQUM7SUFFakIsTUFBTTJDLE9BQU87SUFBQTtJQUFBLENBQUF4RCxjQUFBLEdBQUFvQixDQUFBLFFBQUdhLE9BQUEsQ0FBQUcsb0JBQW9CLENBQUN2QixJQUFJLENBQUM7SUFBQztJQUFBYixjQUFBLEdBQUFvQixDQUFBO0lBQzNDLElBQUlvQyxPQUFPLEVBQUU7TUFBQTtNQUFBeEQsY0FBQSxHQUFBc0IsQ0FBQTtNQUFBdEIsY0FBQSxHQUFBb0IsQ0FBQTtNQUNYLEtBQUssTUFBTXFDLEdBQUcsSUFBSUQsT0FBTyxDQUFDbEIsWUFBWSxFQUFFO1FBQUE7UUFBQXRDLGNBQUEsR0FBQW9CLENBQUE7UUFDdENpQyxtQkFBbUIsQ0FBQ0ksR0FBRyxDQUFDO1FBQUM7UUFBQXpELGNBQUEsR0FBQW9CLENBQUE7UUFDekIsSUFBSSxDQUFDa0IsWUFBWSxDQUFDb0IsUUFBUSxDQUFDRCxHQUFHLENBQUMsRUFBRTtVQUFBO1VBQUF6RCxjQUFBLEdBQUFzQixDQUFBO1VBQUF0QixjQUFBLEdBQUFvQixDQUFBO1VBQy9Ca0IsWUFBWSxDQUFDcUIsSUFBSSxDQUFDRixHQUFHLENBQUM7UUFDeEIsQ0FBQztRQUFBO1FBQUE7VUFBQXpELGNBQUEsR0FBQXNCLENBQUE7UUFBQTtNQUNIO0lBQ0YsQ0FBQztJQUFBO0lBQUE7TUFBQXRCLGNBQUEsR0FBQXNCLENBQUE7SUFBQTtFQUNIO0VBQUM7RUFBQXRCLGNBQUEsR0FBQW9CLENBQUE7RUFFRGlDLG1CQUFtQixDQUFDSCxXQUFXLENBQUM7RUFBQztFQUFBbEQsY0FBQSxHQUFBb0IsQ0FBQTtFQUNqQyxPQUFPa0IsWUFBWTtBQUNyQjtBQUVBOzs7QUFHQSxTQUFnQkgsdUJBQXVCQSxDQUFDZSxXQUFtQjtFQUFBO0VBQUFsRCxjQUFBLEdBQUFxQixDQUFBO0VBQ3pELE1BQU11QyxJQUFJO0VBQUE7RUFBQSxDQUFBNUQsY0FBQSxHQUFBb0IsQ0FBQSxRQUFHYyxrQkFBa0IsQ0FBQ2dCLFdBQVcsQ0FBQztFQUFDO0VBQUFsRCxjQUFBLEdBQUFvQixDQUFBO0VBQzdDLE9BQU93QyxJQUFJLENBQUNDLElBQUksQ0FBQ0osR0FBRyxJQUFJO0lBQUE7SUFBQXpELGNBQUEsR0FBQXFCLENBQUE7SUFBQXJCLGNBQUEsR0FBQW9CLENBQUE7SUFBQSxPQUFBYSxPQUFBLENBQUFHLG9CQUFvQixDQUFDcUIsR0FBRyxDQUFDLEVBQUVsQixlQUFlO0VBQWYsQ0FBZSxDQUFDO0FBQ3JFIiwiaWdub3JlTGlzdCI6W119