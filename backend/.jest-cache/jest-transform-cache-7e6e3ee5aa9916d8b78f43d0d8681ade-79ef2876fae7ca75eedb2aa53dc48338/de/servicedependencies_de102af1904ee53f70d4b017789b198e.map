{"version":3,"names":["cov_288hro9jfk","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","getAllDependencies","hasCriticalDependencies","SERVICE_DEPENDENCIES","database","dependencies","criticalService","fallbackAvailable","maxToleratedDowntime","retryPolicy","maxRetries","retryDelay","backoffMultiplier","redis","ollama","backend","frontend","serviceName","visited","Set","collectDependencies","has","add","service","dep","includes","push","deps","some"],"sources":["/workspaces/prompt-card-system/backend/src/services/service-dependencies.ts"],"sourcesContent":["/**\n * Service Dependency Mapping Configuration\n * \n * This file defines the dependency relationships between services in the system.\n * Used by the Health Orchestrator for dependency checking and cascade failure prevention.\n */\n\nexport interface ServiceDependency {\n  name: string;\n  dependencies: string[];\n  criticalService: boolean;\n  fallbackAvailable: boolean;\n  maxToleratedDowntime: number; // in milliseconds\n  retryPolicy: {\n    maxRetries: number;\n    retryDelay: number;\n    backoffMultiplier: number;\n  };\n}\n\nexport const SERVICE_DEPENDENCIES: Record<string, ServiceDependency> = {\n  // Core Infrastructure\n  database: {\n    name: 'database',\n    dependencies: [],\n    criticalService: true,\n    fallbackAvailable: false,\n    maxToleratedDowntime: 0, // No downtime tolerated\n    retryPolicy: {\n      maxRetries: 5,\n      retryDelay: 1000,\n      backoffMultiplier: 2\n    }\n  },\n\n  redis: {\n    name: 'redis',\n    dependencies: [],\n    criticalService: true,\n    fallbackAvailable: true, // In-memory cache fallback\n    maxToleratedDowntime: 30000, // 30 seconds\n    retryPolicy: {\n      maxRetries: 3,\n      retryDelay: 1000,\n      backoffMultiplier: 1.5\n    }\n  },\n\n  // AI/ML Services\n  ollama: {\n    name: 'ollama',\n    dependencies: [],\n    criticalService: true,\n    fallbackAvailable: true, // Mock responses fallback\n    maxToleratedDowntime: 60000, // 1 minute\n    retryPolicy: {\n      maxRetries: 3,\n      retryDelay: 2000,\n      backoffMultiplier: 2\n    }\n  },\n\n  'model-health': {\n    name: 'model-health',\n    dependencies: ['ollama'],\n    criticalService: false,\n    fallbackAvailable: true, // Disable AI features gracefully\n    maxToleratedDowntime: 300000, // 5 minutes\n    retryPolicy: {\n      maxRetries: 2,\n      retryDelay: 5000,\n      backoffMultiplier: 2\n    }\n  },\n\n  // Application Services\n  backend: {\n    name: 'backend',\n    dependencies: ['database', 'ollama', 'redis'],\n    criticalService: true,\n    fallbackAvailable: false,\n    maxToleratedDowntime: 5000, // 5 seconds\n    retryPolicy: {\n      maxRetries: 3,\n      retryDelay: 1000,\n      backoffMultiplier: 1.5\n    }\n  },\n\n  frontend: {\n    name: 'frontend',\n    dependencies: ['backend'],\n    criticalService: true,\n    fallbackAvailable: false,\n    maxToleratedDowntime: 10000, // 10 seconds\n    retryPolicy: {\n      maxRetries: 2,\n      retryDelay: 2000,\n      backoffMultiplier: 2\n    }\n  }\n};\n\n/**\n * Get all dependencies for a service (including transitive dependencies)\n */\nexport function getAllDependencies(serviceName: string): string[] {\n  const visited = new Set<string>();\n  const dependencies: string[] = [];\n\n  function collectDependencies(name: string) {\n    if (visited.has(name)) return;\n    visited.add(name);\n\n    const service = SERVICE_DEPENDENCIES[name];\n    if (service) {\n      for (const dep of service.dependencies) {\n        collectDependencies(dep);\n        if (!dependencies.includes(dep)) {\n          dependencies.push(dep);\n        }\n      }\n    }\n  }\n\n  collectDependencies(serviceName);\n  return dependencies;\n}\n\n/**\n * Check if a service has any critical dependencies\n */\nexport function hasCriticalDependencies(serviceName: string): boolean {\n  const deps = getAllDependencies(serviceName);\n  return deps.some(dep => SERVICE_DEPENDENCIES[dep]?.criticalService);\n}"],"mappings":"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","ignoreList":[]}