abb172e5276af8ab76e79a0c57d756fe
"use strict";

/* istanbul ignore next */
function cov_1u4emqrlxb() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/health-comprehensive.ts";
  var hash = "7ae4c5e36724e6560b0ab0d5132b065edf73bf95";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/health-comprehensive.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 30
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 53
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "7": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 53
        }
      },
      "8": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 49
        }
      },
      "9": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "10": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 58
        }
      },
      "11": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "12": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 21,
          column: 1
        }
      },
      "13": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 32
        }
      },
      "14": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 67
        }
      },
      "16": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 61
        }
      },
      "17": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "18": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 64
        }
      },
      "19": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 75
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 69
        }
      },
      "22": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "23": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 26
        }
      },
      "24": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "25": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "26": {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 45,
          column: 18
        }
      },
      "27": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 37
        }
      },
      "28": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 55,
          column: 19
        }
      },
      "29": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 23
        }
      },
      "30": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "31": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 91
        }
      },
      "32": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 62,
          column: 85
        }
      },
      "33": {
        start: {
          line: 66,
          column: 22
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "34": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "35": {
        start: {
          line: 68,
          column: 27
        },
        end: {
          line: 68,
          column: 80
        }
      },
      "36": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 69,
          column: 60
        }
      },
      "37": {
        start: {
          line: 71,
          column: 30
        },
        end: {
          line: 71,
          column: 66
        }
      },
      "38": {
        start: {
          line: 72,
          column: 30
        },
        end: {
          line: 72,
          column: 112
        }
      },
      "39": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 23
        }
      },
      "40": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 74,
          column: 71
        }
      },
      "41": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "42": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "43": {
        start: {
          line: 98,
          column: 22
        },
        end: {
          line: 98,
          column: 52
        }
      },
      "44": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "45": {
        start: {
          line: 100,
          column: 26
        },
        end: {
          line: 100,
          column: 98
        }
      },
      "46": {
        start: {
          line: 102,
          column: 31
        },
        end: {
          line: 102,
          column: 49
        }
      },
      "47": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 56
        }
      },
      "48": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 61
        }
      },
      "49": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 53
        }
      },
      "50": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 37
        }
      },
      "51": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 107,
          column: 51
        }
      },
      "52": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 53
        }
      },
      "53": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 37
        }
      },
      "54": {
        start: {
          line: 110,
          column: 33
        },
        end: {
          line: 110,
          column: 71
        }
      },
      "55": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "56": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "57": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 135,
          column: 52
        }
      },
      "58": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "59": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 85
        }
      },
      "60": {
        start: {
          line: 139,
          column: 36
        },
        end: {
          line: 139,
          column: 108
        }
      },
      "61": {
        start: {
          line: 141,
          column: 35
        },
        end: {
          line: 141,
          column: 104
        }
      },
      "62": {
        start: {
          line: 143,
          column: 33
        },
        end: {
          line: 143,
          column: 37
        }
      },
      "63": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "64": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 64
        }
      },
      "65": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 163,
          column: 17
        }
      },
      "66": {
        start: {
          line: 147,
          column: 41
        },
        end: {
          line: 151,
          column: 42
        }
      },
      "67": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 155,
          column: 22
        }
      },
      "68": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 162,
          column: 22
        }
      },
      "69": {
        start: {
          line: 165,
          column: 33
        },
        end: {
          line: 165,
          column: 71
        }
      },
      "70": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "71": {
        start: {
          line: 173,
          column: 67
        },
        end: {
          line: 173,
          column: 73
        }
      },
      "72": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "73": {
        start: {
          line: 190,
          column: 22
        },
        end: {
          line: 190,
          column: 52
        }
      },
      "74": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "75": {
        start: {
          line: 192,
          column: 26
        },
        end: {
          line: 192,
          column: 61
        }
      },
      "76": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 193,
          column: 36
        }
      },
      "77": {
        start: {
          line: 195,
          column: 29
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "78": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "79": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 57
        }
      },
      "80": {
        start: {
          line: 201,
          column: 37
        },
        end: {
          line: 201,
          column: 75
        }
      },
      "81": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 65
        }
      },
      "82": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 44
        }
      },
      "83": {
        start: {
          line: 207,
          column: 33
        },
        end: {
          line: 207,
          column: 71
        }
      },
      "84": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 214,
          column: 14
        }
      },
      "85": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "86": {
        start: {
          line: 227,
          column: 22
        },
        end: {
          line: 227,
          column: 52
        }
      },
      "87": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "88": {
        start: {
          line: 229,
          column: 29
        },
        end: {
          line: 229,
          column: 50
        }
      },
      "89": {
        start: {
          line: 230,
          column: 30
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "90": {
        start: {
          line: 235,
          column: 35
        },
        end: {
          line: 235,
          column: 75
        }
      },
      "91": {
        start: {
          line: 236,
          column: 38
        },
        end: {
          line: 236,
          column: 77
        }
      },
      "92": {
        start: {
          line: 237,
          column: 27
        },
        end: {
          line: 237,
          column: 87
        }
      },
      "93": {
        start: {
          line: 238,
          column: 33
        },
        end: {
          line: 238,
          column: 71
        }
      },
      "94": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "95": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 259,
          column: 14
        }
      },
      "96": {
        start: {
          line: 263,
          column: 22
        },
        end: {
          line: 263,
          column: 52
        }
      },
      "97": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "98": {
        start: {
          line: 266,
          column: 27
        },
        end: {
          line: 269,
          column: 14
        }
      },
      "99": {
        start: {
          line: 270,
          column: 27
        },
        end: {
          line: 270,
          column: 87
        }
      },
      "100": {
        start: {
          line: 270,
          column: 51
        },
        end: {
          line: 270,
          column: 79
        }
      },
      "101": {
        start: {
          line: 271,
          column: 26
        },
        end: {
          line: 271,
          column: 39
        }
      },
      "102": {
        start: {
          line: 272,
          column: 27
        },
        end: {
          line: 272,
          column: 95
        }
      },
      "103": {
        start: {
          line: 273,
          column: 33
        },
        end: {
          line: 273,
          column: 71
        }
      },
      "104": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 288,
          column: 14
        }
      },
      "105": {
        start: {
          line: 281,
          column: 60
        },
        end: {
          line: 285,
          column: 21
        }
      },
      "106": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 297,
          column: 14
        }
      },
      "107": {
        start: {
          line: 301,
          column: 22
        },
        end: {
          line: 301,
          column: 52
        }
      },
      "108": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "109": {
        start: {
          line: 305,
          column: 30
        },
        end: {
          line: 305,
          column: 61
        }
      },
      "110": {
        start: {
          line: 306,
          column: 33
        },
        end: {
          line: 306,
          column: 71
        }
      },
      "111": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 316,
          column: 14
        }
      },
      "112": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 325,
          column: 14
        }
      },
      "113": {
        start: {
          line: 329,
          column: 22
        },
        end: {
          line: 329,
          column: 52
        }
      },
      "114": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "115": {
        start: {
          line: 333,
          column: 32
        },
        end: {
          line: 333,
          column: 36
        }
      },
      "116": {
        start: {
          line: 334,
          column: 33
        },
        end: {
          line: 334,
          column: 71
        }
      },
      "117": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 344,
          column: 14
        }
      },
      "118": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 353,
          column: 14
        }
      },
      "119": {
        start: {
          line: 357,
          column: 22
        },
        end: {
          line: 357,
          column: 40
        }
      },
      "120": {
        start: {
          line: 358,
          column: 23
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "121": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "122": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "123": {
        start: {
          line: 361,
          column: 37
        },
        end: {
          line: 361,
          column: 52
        }
      },
      "124": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 36
        }
      },
      "125": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 22
        }
      },
      "126": {
        start: {
          line: 368,
          column: 22
        },
        end: {
          line: 368,
          column: 41
        }
      },
      "127": {
        start: {
          line: 370,
          column: 21
        },
        end: {
          line: 385,
          column: 1
        }
      },
      "128": {
        start: {
          line: 371,
          column: 18
        },
        end: {
          line: 371,
          column: 48
        }
      },
      "129": {
        start: {
          line: 372,
          column: 4
        },
        end: {
          line: 372,
          column: 27
        }
      },
      "130": {
        start: {
          line: 373,
          column: 4
        },
        end: {
          line: 383,
          column: 7
        }
      },
      "131": {
        start: {
          line: 374,
          column: 29
        },
        end: {
          line: 374,
          column: 67
        }
      },
      "132": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 49
        }
      },
      "133": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "134": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 71
        }
      },
      "135": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "136": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 33
        }
      },
      "137": {
        start: {
          line: 384,
          column: 4
        },
        end: {
          line: 384,
          column: 11
        }
      },
      "138": {
        start: {
          line: 386,
          column: 0
        },
        end: {
          line: 386,
          column: 36
        }
      },
      "139": {
        start: {
          line: 388,
          column: 0
        },
        end: {
          line: 460,
          column: 3
        }
      },
      "140": {
        start: {
          line: 389,
          column: 4
        },
        end: {
          line: 459,
          column: 5
        }
      },
      "141": {
        start: {
          line: 390,
          column: 22
        },
        end: {
          line: 390,
          column: 52
        }
      },
      "142": {
        start: {
          line: 392,
          column: 23
        },
        end: {
          line: 392,
          column: 57
        }
      },
      "143": {
        start: {
          line: 394,
          column: 31
        },
        end: {
          line: 394,
          column: 82
        }
      },
      "144": {
        start: {
          line: 394,
          column: 50
        },
        end: {
          line: 394,
          column: 74
        }
      },
      "145": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 80
        }
      },
      "146": {
        start: {
          line: 395,
          column: 49
        },
        end: {
          line: 395,
          column: 72
        }
      },
      "147": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "148": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 40
        }
      },
      "149": {
        start: {
          line: 400,
          column: 13
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "150": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 39
        }
      },
      "151": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 38
        }
      },
      "152": {
        start: {
          line: 407,
          column: 24
        },
        end: {
          line: 407,
          column: 45
        }
      },
      "153": {
        start: {
          line: 408,
          column: 26
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "154": {
        start: {
          line: 415,
          column: 32
        },
        end: {
          line: 417,
          column: 15
        }
      },
      "155": {
        start: {
          line: 416,
          column: 64
        },
        end: {
          line: 416,
          column: 69
        }
      },
      "156": {
        start: {
          line: 418,
          column: 26
        },
        end: {
          line: 420,
          column: 15
        }
      },
      "157": {
        start: {
          line: 421,
          column: 27
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "158": {
        start: {
          line: 448,
          column: 27
        },
        end: {
          line: 449,
          column: 52
        }
      },
      "159": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 48
        }
      },
      "160": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 458,
          column: 11
        }
      },
      "161": {
        start: {
          line: 462,
          column: 0
        },
        end: {
          line: 482,
          column: 3
        }
      },
      "162": {
        start: {
          line: 463,
          column: 4
        },
        end: {
          line: 481,
          column: 5
        }
      },
      "163": {
        start: {
          line: 465,
          column: 25
        },
        end: {
          line: 468,
          column: 10
        }
      },
      "164": {
        start: {
          line: 469,
          column: 27
        },
        end: {
          line: 469,
          column: 78
        }
      },
      "165": {
        start: {
          line: 469,
          column: 51
        },
        end: {
          line: 469,
          column: 77
        }
      },
      "166": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 473,
          column: 11
        }
      },
      "167": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 480,
          column: 11
        }
      },
      "168": {
        start: {
          line: 484,
          column: 0
        },
        end: {
          line: 490,
          column: 3
        }
      },
      "169": {
        start: {
          line: 485,
          column: 4
        },
        end: {
          line: 489,
          column: 7
        }
      },
      "170": {
        start: {
          line: 491,
          column: 0
        },
        end: {
          line: 491,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 31
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 60
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 61,
            column: 28
          }
        },
        loc: {
          start: {
            line: 61,
            column: 42
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 61
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 24
          }
        },
        loc: {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 62,
            column: 85
          }
        },
        line: 62
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 26
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 65
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 97
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 24
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 134
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 173,
            column: 60
          },
          end: {
            line: 173,
            column: 61
          }
        },
        loc: {
          start: {
            line: 173,
            column: 67
          },
          end: {
            line: 173,
            column: 73
          }
        },
        line: 173
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 27
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 189
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 24
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 226
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 30
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 262
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 270,
            column: 41
          },
          end: {
            line: 270,
            column: 42
          }
        },
        loc: {
          start: {
            line: 270,
            column: 51
          },
          end: {
            line: 270,
            column: 79
          }
        },
        line: 270
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 281,
            column: 40
          },
          end: {
            line: 281,
            column: 41
          }
        },
        loc: {
          start: {
            line: 281,
            column: 60
          },
          end: {
            line: 285,
            column: 21
          }
        },
        line: 281
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 27
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 300
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 32
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 328
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 25
          },
          end: {
            line: 366,
            column: 5
          }
        },
        line: 356
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 370,
            column: 21
          },
          end: {
            line: 370,
            column: 22
          }
        },
        loc: {
          start: {
            line: 370,
            column: 41
          },
          end: {
            line: 385,
            column: 1
          }
        },
        line: 370
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 373,
            column: 21
          },
          end: {
            line: 373,
            column: 22
          }
        },
        loc: {
          start: {
            line: 373,
            column: 27
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 373
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 388,
            column: 29
          },
          end: {
            line: 388,
            column: 30
          }
        },
        loc: {
          start: {
            line: 388,
            column: 49
          },
          end: {
            line: 460,
            column: 1
          }
        },
        line: 388
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 394,
            column: 45
          },
          end: {
            line: 394,
            column: 46
          }
        },
        loc: {
          start: {
            line: 394,
            column: 50
          },
          end: {
            line: 394,
            column: 74
          }
        },
        line: 394
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 395,
            column: 44
          },
          end: {
            line: 395,
            column: 45
          }
        },
        loc: {
          start: {
            line: 395,
            column: 49
          },
          end: {
            line: 395,
            column: 72
          }
        },
        line: 395
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 416,
            column: 54
          },
          end: {
            line: 416,
            column: 55
          }
        },
        loc: {
          start: {
            line: 416,
            column: 64
          },
          end: {
            line: 416,
            column: 69
          }
        },
        line: 416
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 462,
            column: 21
          },
          end: {
            line: 462,
            column: 22
          }
        },
        loc: {
          start: {
            line: 462,
            column: 41
          },
          end: {
            line: 482,
            column: 1
          }
        },
        line: 462
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 469,
            column: 42
          },
          end: {
            line: 469,
            column: 43
          }
        },
        loc: {
          start: {
            line: 469,
            column: 51
          },
          end: {
            line: 469,
            column: 77
          }
        },
        line: 469
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 484,
            column: 20
          },
          end: {
            line: 484,
            column: 21
          }
        },
        loc: {
          start: {
            line: 484,
            column: 34
          },
          end: {
            line: 490,
            column: 1
          }
        },
        line: 484
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 27
          },
          end: {
            line: 53,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 52
          },
          end: {
            line: 53,
            column: 65
          }
        }, {
          start: {
            line: 53,
            column: 68
          },
          end: {
            line: 53,
            column: 83
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 27
          },
          end: {
            line: 68,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 27
          },
          end: {
            line: 68,
            column: 52
          }
        }, {
          start: {
            line: 68,
            column: 56
          },
          end: {
            line: 68,
            column: 80
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 23
          },
          end: {
            line: 92,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 48
          },
          end: {
            line: 92,
            column: 61
          }
        }, {
          start: {
            line: 92,
            column: 64
          },
          end: {
            line: 92,
            column: 92
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 100,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 100,
            column: 69
          }
        }, {
          start: {
            line: 100,
            column: 73
          },
          end: {
            line: 100,
            column: 97
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 113,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 77
          },
          end: {
            line: 113,
            column: 86
          }
        }, {
          start: {
            line: 113,
            column: 89
          },
          end: {
            line: 113,
            column: 99
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 113,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 113,
            column: 45
          }
        }, {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 74
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 48
          },
          end: {
            line: 129,
            column: 61
          }
        }, {
          start: {
            line: 129,
            column: 64
          },
          end: {
            line: 129,
            column: 89
          }
        }],
        line: 129
      },
      "10": {
        loc: {
          start: {
            line: 137,
            column: 30
          },
          end: {
            line: 137,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 30
          },
          end: {
            line: 137,
            column: 57
          }
        }, {
          start: {
            line: 137,
            column: 61
          },
          end: {
            line: 137,
            column: 85
          }
        }],
        line: 137
      },
      "11": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 144,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 144,
            column: 42
          }
        }, {
          start: {
            line: 144,
            column: 46
          },
          end: {
            line: 144,
            column: 83
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 59
          },
          end: {
            line: 161,
            column: 75
          }
        }, {
          start: {
            line: 161,
            column: 78
          },
          end: {
            line: 161,
            column: 97
          }
        }],
        line: 161
      },
      "14": {
        loc: {
          start: {
            line: 172,
            column: 32
          },
          end: {
            line: 172,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 32
          },
          end: {
            line: 172,
            column: 66
          }
        }, {
          start: {
            line: 172,
            column: 70
          },
          end: {
            line: 172,
            column: 71
          }
        }],
        line: 172
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 28
          },
          end: {
            line: 173,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 28
          },
          end: {
            line: 173,
            column: 74
          }
        }, {
          start: {
            line: 173,
            column: 78
          },
          end: {
            line: 173,
            column: 80
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 184,
            column: 23
          },
          end: {
            line: 184,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 48
          },
          end: {
            line: 184,
            column: 61
          }
        }, {
          start: {
            line: 184,
            column: 64
          },
          end: {
            line: 184,
            column: 92
          }
        }],
        line: 184
      },
      "17": {
        loc: {
          start: {
            line: 210,
            column: 24
          },
          end: {
            line: 210,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 46
          },
          end: {
            line: 210,
            column: 55
          }
        }, {
          start: {
            line: 210,
            column: 58
          },
          end: {
            line: 210,
            column: 68
          }
        }],
        line: 210
      },
      "18": {
        loc: {
          start: {
            line: 221,
            column: 23
          },
          end: {
            line: 221,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 48
          },
          end: {
            line: 221,
            column: 61
          }
        }, {
          start: {
            line: 221,
            column: 64
          },
          end: {
            line: 221,
            column: 83
          }
        }],
        line: 221
      },
      "19": {
        loc: {
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 65
          },
          end: {
            line: 237,
            column: 75
          }
        }, {
          start: {
            line: 237,
            column: 78
          },
          end: {
            line: 237,
            column: 87
          }
        }],
        line: 237
      },
      "20": {
        loc: {
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 41
          }
        }, {
          start: {
            line: 237,
            column: 45
          },
          end: {
            line: 237,
            column: 62
          }
        }],
        line: 237
      },
      "21": {
        loc: {
          start: {
            line: 257,
            column: 23
          },
          end: {
            line: 257,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 48
          },
          end: {
            line: 257,
            column: 61
          }
        }, {
          start: {
            line: 257,
            column: 64
          },
          end: {
            line: 257,
            column: 85
          }
        }],
        line: 257
      },
      "22": {
        loc: {
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 272,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 42
          },
          end: {
            line: 272,
            column: 51
          }
        }, {
          start: {
            line: 272,
            column: 54
          },
          end: {
            line: 272,
            column: 95
          }
        }],
        line: 272
      },
      "23": {
        loc: {
          start: {
            line: 272,
            column: 54
          },
          end: {
            line: 272,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 71
          },
          end: {
            line: 272,
            column: 81
          }
        }, {
          start: {
            line: 272,
            column: 84
          },
          end: {
            line: 272,
            column: 95
          }
        }],
        line: 272
      },
      "24": {
        loc: {
          start: {
            line: 284,
            column: 31
          },
          end: {
            line: 284,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 62
          },
          end: {
            line: 284,
            column: 84
          }
        }, {
          start: {
            line: 284,
            column: 87
          },
          end: {
            line: 284,
            column: 91
          }
        }],
        line: 284
      },
      "25": {
        loc: {
          start: {
            line: 295,
            column: 23
          },
          end: {
            line: 295,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 295,
            column: 48
          },
          end: {
            line: 295,
            column: 61
          }
        }, {
          start: {
            line: 295,
            column: 64
          },
          end: {
            line: 295,
            column: 92
          }
        }],
        line: 295
      },
      "26": {
        loc: {
          start: {
            line: 309,
            column: 24
          },
          end: {
            line: 309,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 309,
            column: 36
          },
          end: {
            line: 309,
            column: 45
          }
        }, {
          start: {
            line: 309,
            column: 48
          },
          end: {
            line: 309,
            column: 58
          }
        }],
        line: 309
      },
      "27": {
        loc: {
          start: {
            line: 323,
            column: 23
          },
          end: {
            line: 323,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 323,
            column: 48
          },
          end: {
            line: 323,
            column: 61
          }
        }, {
          start: {
            line: 323,
            column: 64
          },
          end: {
            line: 323,
            column: 88
          }
        }],
        line: 323
      },
      "28": {
        loc: {
          start: {
            line: 337,
            column: 24
          },
          end: {
            line: 337,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 38
          },
          end: {
            line: 337,
            column: 47
          }
        }, {
          start: {
            line: 337,
            column: 50
          },
          end: {
            line: 337,
            column: 60
          }
        }],
        line: 337
      },
      "29": {
        loc: {
          start: {
            line: 351,
            column: 23
          },
          end: {
            line: 351,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 351,
            column: 48
          },
          end: {
            line: 351,
            column: 61
          }
        }, {
          start: {
            line: 351,
            column: 64
          },
          end: {
            line: 351,
            column: 94
          }
        }],
        line: 351
      },
      "30": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "31": {
        loc: {
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "32": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "33": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        }, {
          start: {
            line: 400,
            column: 13
          },
          end: {
            line: 405,
            column: 9
          }
        }],
        line: 397
      },
      "34": {
        loc: {
          start: {
            line: 400,
            column: 13
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 13
          },
          end: {
            line: 405,
            column: 9
          }
        }, {
          start: {
            line: 403,
            column: 13
          },
          end: {
            line: 405,
            column: 9
          }
        }],
        line: 400
      },
      "35": {
        loc: {
          start: {
            line: 415,
            column: 32
          },
          end: {
            line: 417,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 416,
            column: 14
          },
          end: {
            line: 416,
            column: 105
          }
        }, {
          start: {
            line: 417,
            column: 14
          },
          end: {
            line: 417,
            column: 15
          }
        }],
        line: 415
      },
      "36": {
        loc: {
          start: {
            line: 418,
            column: 26
          },
          end: {
            line: 420,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 419,
            column: 14
          },
          end: {
            line: 419,
            column: 75
          }
        }, {
          start: {
            line: 420,
            column: 14
          },
          end: {
            line: 420,
            column: 15
          }
        }],
        line: 418
      },
      "37": {
        loc: {
          start: {
            line: 425,
            column: 21
          },
          end: {
            line: 425,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 21
          },
          end: {
            line: 425,
            column: 44
          }
        }, {
          start: {
            line: 425,
            column: 48
          },
          end: {
            line: 425,
            column: 55
          }
        }],
        line: 425
      },
      "38": {
        loc: {
          start: {
            line: 426,
            column: 25
          },
          end: {
            line: 426,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 426,
            column: 25
          },
          end: {
            line: 426,
            column: 45
          }
        }, {
          start: {
            line: 426,
            column: 49
          },
          end: {
            line: 426,
            column: 62
          }
        }],
        line: 426
      },
      "39": {
        loc: {
          start: {
            line: 448,
            column: 27
          },
          end: {
            line: 449,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 448,
            column: 57
          },
          end: {
            line: 448,
            column: 60
          }
        }, {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 449,
            column: 52
          }
        }],
        line: 448
      },
      "40": {
        loc: {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 449,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 449,
            column: 43
          },
          end: {
            line: 449,
            column: 46
          }
        }, {
          start: {
            line: 449,
            column: 49
          },
          end: {
            line: 449,
            column: 52
          }
        }],
        line: 449
      },
      "41": {
        loc: {
          start: {
            line: 456,
            column: 19
          },
          end: {
            line: 456,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 456,
            column: 44
          },
          end: {
            line: 456,
            column: 57
          }
        }, {
          start: {
            line: 456,
            column: 60
          },
          end: {
            line: 456,
            column: 81
          }
        }],
        line: 456
      },
      "42": {
        loc: {
          start: {
            line: 470,
            column: 19
          },
          end: {
            line: 470,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 470,
            column: 32
          },
          end: {
            line: 470,
            column: 35
          }
        }, {
          start: {
            line: 470,
            column: 38
          },
          end: {
            line: 470,
            column: 41
          }
        }],
        line: 470
      },
      "43": {
        loc: {
          start: {
            line: 471,
            column: 20
          },
          end: {
            line: 471,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 33
          },
          end: {
            line: 471,
            column: 40
          }
        }, {
          start: {
            line: 471,
            column: 43
          },
          end: {
            line: 471,
            column: 54
          }
        }],
        line: 471
      },
      "44": {
        loc: {
          start: {
            line: 478,
            column: 19
          },
          end: {
            line: 478,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 478,
            column: 44
          },
          end: {
            line: 478,
            column: 57
          }
        }, {
          start: {
            line: 478,
            column: 60
          },
          end: {
            line: 478,
            column: 84
          }
        }],
        line: 478
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/health-comprehensive.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/health-comprehensive.ts"],
      sourcesContent: ["import express, { Request, Response } from 'express';\nimport { performance } from 'perf_hooks';\nimport sqlite3 from 'better-sqlite3';\nimport Redis from 'ioredis';\nimport axios from 'axios';\nimport os from 'os';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst router = express.Router();\n\ninterface HealthCheck {\n  service: string;\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  responseTime: number;\n  details?: any;\n  error?: string;\n  lastChecked: string;\n}\n\ninterface SystemHealth {\n  overall: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  uptime: number;\n  version: string;\n  environment: string;\n  checks: HealthCheck[];\n  system: {\n    memory: {\n      used: number;\n      free: number;\n      total: number;\n      percentage: number;\n    };\n    cpu: {\n      loadAverage: number[];\n      cores: number;\n      usage?: number;\n    };\n    disk: {\n      used: number;\n      free: number;\n      total: number;\n      percentage: number;\n    };\n  };\n  metrics: {\n    requestCount: number;\n    errorRate: number;\n    averageResponseTime: number;\n  };\n}\n\n// In-memory metrics storage (in production, use Redis or proper metrics store)\nconst metrics = {\n  requestCount: 0,\n  errorCount: 0,\n  responseTimes: [] as number[],\n  lastReset: Date.now()\n};\n\n// Health check implementations\nclass HealthChecker {\n  private checks: Map<string, () => Promise<HealthCheck>> = new Map();\n\n  constructor() {\n    this.registerChecks();\n  }\n\n  private registerChecks() {\n    this.checks.set('database', this.checkDatabase.bind(this));\n    this.checks.set('redis', this.checkRedis.bind(this));\n    this.checks.set('ollama', this.checkOllama.bind(this));\n    this.checks.set('disk', this.checkDiskSpace.bind(this));\n    this.checks.set('memory', this.checkMemory.bind(this));\n    this.checks.set('external-api', this.checkExternalAPIs.bind(this));\n    this.checks.set('websocket', this.checkWebSocket.bind(this));\n    this.checks.set('background-jobs', this.checkBackgroundJobs.bind(this));\n  }\n\n  async runAllChecks(): Promise<HealthCheck[]> {\n    const results: HealthCheck[] = [];\n    \n    for (const [name, checkFn] of this.checks) {\n      try {\n        const result = await Promise.race([\n          checkFn(),\n          this.timeout(name, 5000) // 5 second timeout\n        ]);\n        results.push(result);\n      } catch (error) {\n        results.push({\n          service: name,\n          status: 'unhealthy',\n          responseTime: 5000,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          lastChecked: new Date().toISOString()\n        });\n      }\n    }\n    \n    return results;\n  }\n\n  private async timeout(service: string, ms: number): Promise<HealthCheck> {\n    return new Promise((_, reject) => {\n      setTimeout(() => reject(new Error(`Health check timeout for ${service}`)), ms);\n    });\n  }\n\n  private async checkDatabase(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      const dbPath = process.env.DATABASE_PATH || './data/database.sqlite';\n      const db = sqlite3(dbPath);\n      \n      // Test read/write operations\n      const testQuery = db.prepare('SELECT 1 as test').get();\n      const writeTest = db.prepare('SELECT COUNT(*) as count FROM sqlite_master WHERE type=\"table\"').get();\n      \n      db.close();\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'database',\n        status: 'healthy',\n        responseTime: Math.round(responseTime),\n        details: {\n          queryResult: testQuery,\n          tableCount: writeTest,\n          path: dbPath\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'database',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'Database connection failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkRedis(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');\n      \n      // Test Redis operations\n      const pingResult = await redis.ping();\n      const testKey = `health-check-${Date.now()}`;\n      await redis.set(testKey, 'test-value', 'EX', 10);\n      const getValue = await redis.get(testKey);\n      await redis.del(testKey);\n      \n      const info = await redis.info('server');\n      const memory = await redis.info('memory');\n      \n      await redis.disconnect();\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'redis',\n        status: pingResult === 'PONG' && getValue === 'test-value' ? 'healthy' : 'degraded',\n        responseTime: Math.round(responseTime),\n        details: {\n          ping: pingResult,\n          readWrite: getValue === 'test-value',\n          serverInfo: this.parseRedisInfo(info),\n          memoryInfo: this.parseRedisInfo(memory)\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'redis',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'Redis connection failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkOllama(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';\n      \n      // Check if Ollama is running\n      const versionResponse = await axios.get(`${ollamaUrl}/api/version`, { timeout: 5000 });\n      \n      // Check available models\n      const modelsResponse = await axios.get(`${ollamaUrl}/api/tags`, { timeout: 5000 });\n      \n      // Test simple generation (if models available)\n      let generationTest = null;\n      if (modelsResponse.data.models && modelsResponse.data.models.length > 0) {\n        const model = modelsResponse.data.models[0].name;\n        try {\n          const testResponse = await axios.post(`${ollamaUrl}/api/generate`, {\n            model,\n            prompt: 'test',\n            stream: false\n          }, { timeout: 10000 });\n          \n          generationTest = {\n            model,\n            success: !!testResponse.data.response\n          };\n        } catch (genError) {\n          generationTest = {\n            model,\n            success: false,\n            error: genError instanceof Error ? genError.message : 'Generation failed'\n          };\n        }\n      }\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'ollama',\n        status: 'healthy',\n        responseTime: Math.round(responseTime),\n        details: {\n          version: versionResponse.data,\n          modelCount: modelsResponse.data.models?.length || 0,\n          models: modelsResponse.data.models?.map((m: any) => m.name) || [],\n          generationTest\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'ollama',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'Ollama service unavailable',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkDiskSpace(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      const stats = await fs.stat('./');\n      const dataDir = './data';\n      \n      // Get disk usage (simplified - in production use proper disk space library)\n      const diskInfo = {\n        dataDirectory: dataDir,\n        accessible: true\n      };\n      \n      try {\n        await fs.access(dataDir);\n        const dataDirStats = await fs.stat(dataDir);\n        diskInfo.accessible = dataDirStats.isDirectory();\n      } catch {\n        diskInfo.accessible = false;\n      }\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'disk',\n        status: diskInfo.accessible ? 'healthy' : 'degraded',\n        responseTime: Math.round(responseTime),\n        details: diskInfo,\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'disk',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'Disk check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkMemory(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      const memUsage = process.memoryUsage();\n      const systemMem = {\n        total: os.totalmem(),\n        free: os.freemem(),\n        used: os.totalmem() - os.freemem()\n      };\n      \n      const memoryPressure = (systemMem.used / systemMem.total) > 0.9;\n      const processMemoryHigh = memUsage.heapUsed > (100 * 1024 * 1024); // 100MB\n      \n      const status = memoryPressure || processMemoryHigh ? 'degraded' : 'healthy';\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'memory',\n        status,\n        responseTime: Math.round(responseTime),\n        details: {\n          system: systemMem,\n          process: memUsage,\n          pressure: memoryPressure,\n          processHigh: processMemoryHigh\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'memory',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'Memory check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkExternalAPIs(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      // Test external dependencies (customize based on your external APIs)\n      const checks = await Promise.allSettled([\n        axios.get('https://httpbin.org/status/200', { timeout: 3000 }),\n        // Add your external API checks here\n      ]);\n      \n      const failed = checks.filter(result => result.status === 'rejected').length;\n      const total = checks.length;\n      \n      const status = failed === 0 ? 'healthy' : failed < total ? 'degraded' : 'unhealthy';\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'external-api',\n        status,\n        responseTime: Math.round(responseTime),\n        details: {\n          total,\n          failed,\n          results: checks.map((result, index) => ({\n            index,\n            status: result.status,\n            error: result.status === 'rejected' ? result.reason?.message : null\n          }))\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'external-api',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'External API checks failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkWebSocket(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      // WebSocket health check would require actual connection testing\n      // For now, check if WebSocket server is configured\n      const wsEnabled = !!process.env.WEBSOCKET_ENABLED;\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'websocket',\n        status: wsEnabled ? 'healthy' : 'degraded',\n        responseTime: Math.round(responseTime),\n        details: {\n          enabled: wsEnabled,\n          note: 'WebSocket server configuration check'\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'websocket',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'WebSocket check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkBackgroundJobs(): Promise<HealthCheck> {\n    const start = performance.now();\n    \n    try {\n      // Check background job queue health (Bull/Redis queues)\n      // This is a simplified check - in production, check actual queue status\n      const jobsHealthy = true; // Implement actual job queue health check\n      \n      const responseTime = performance.now() - start;\n      \n      return {\n        service: 'background-jobs',\n        status: jobsHealthy ? 'healthy' : 'degraded',\n        responseTime: Math.round(responseTime),\n        details: {\n          queuesActive: jobsHealthy,\n          note: 'Background job queue status'\n        },\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        service: 'background-jobs',\n        status: 'unhealthy',\n        responseTime: performance.now() - start,\n        error: error instanceof Error ? error.message : 'Background jobs check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private parseRedisInfo(info: string): any {\n    const lines = info.split('\\r\\n');\n    const result: any = {};\n    \n    for (const line of lines) {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':');\n        result[key] = value;\n      }\n    }\n    \n    return result;\n  }\n}\n\nconst healthChecker = new HealthChecker();\n\n// Middleware to track metrics\nexport const trackMetrics = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n  const start = performance.now();\n  \n  metrics.requestCount++;\n  \n  res.on('finish', () => {\n    const responseTime = performance.now() - start;\n    metrics.responseTimes.push(responseTime);\n    \n    // Keep only last 1000 response times\n    if (metrics.responseTimes.length > 1000) {\n      metrics.responseTimes = metrics.responseTimes.slice(-1000);\n    }\n    \n    if (res.statusCode >= 400) {\n      metrics.errorCount++;\n    }\n  });\n  \n  next();\n};\n\n// Comprehensive health check endpoint\nrouter.get('/comprehensive', async (req: Request, res: Response) => {\n  try {\n    const start = performance.now();\n    \n    // Run all health checks\n    const checks = await healthChecker.runAllChecks();\n    \n    // Calculate overall status\n    const unhealthyCount = checks.filter(c => c.status === 'unhealthy').length;\n    const degradedCount = checks.filter(c => c.status === 'degraded').length;\n    \n    let overallStatus: 'healthy' | 'degraded' | 'unhealthy';\n    if (unhealthyCount > 0) {\n      overallStatus = 'unhealthy';\n    } else if (degradedCount > 0) {\n      overallStatus = 'degraded';\n    } else {\n      overallStatus = 'healthy';\n    }\n    \n    // Get system information\n    const memInfo = process.memoryUsage();\n    const systemMem = {\n      used: os.totalmem() - os.freemem(),\n      free: os.freemem(),\n      total: os.totalmem(),\n      percentage: Math.round(((os.totalmem() - os.freemem()) / os.totalmem()) * 100)\n    };\n    \n    // Calculate metrics\n    const avgResponseTime = metrics.responseTimes.length > 0 \n      ? Math.round(metrics.responseTimes.reduce((a, b) => a + b, 0) / metrics.responseTimes.length)\n      : 0;\n    \n    const errorRate = metrics.requestCount > 0 \n      ? Math.round((metrics.errorCount / metrics.requestCount) * 100)\n      : 0;\n    \n    const healthData: SystemHealth = {\n      overall: overallStatus,\n      timestamp: new Date().toISOString(),\n      uptime: Math.round(process.uptime()),\n      version: process.env.APP_VERSION || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      checks,\n      system: {\n        memory: systemMem,\n        cpu: {\n          loadAverage: os.loadavg(),\n          cores: os.cpus().length\n        },\n        disk: {\n          used: 0, // Implement actual disk usage\n          free: 0,\n          total: 0,\n          percentage: 0\n        }\n      },\n      metrics: {\n        requestCount: metrics.requestCount,\n        errorRate,\n        averageResponseTime: avgResponseTime\n      }\n    };\n    \n    // Set appropriate HTTP status based on health\n    const statusCode = overallStatus === 'healthy' ? 200 : \n                      overallStatus === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json(healthData);\n    \n  } catch (error) {\n    res.status(503).json({\n      overall: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Health check failed',\n      checks: []\n    });\n  }\n});\n\n// Simple health check for load balancers\nrouter.get('/ready', async (req: Request, res: Response) => {\n  try {\n    // Quick checks for readiness\n    const critical = await Promise.all([\n      healthChecker['checkDatabase'](),\n      // Add other critical service checks\n    ]);\n    \n    const allHealthy = critical.every(check => check.status === 'healthy');\n    \n    res.status(allHealthy ? 200 : 503).json({\n      status: allHealthy ? 'ready' : 'not ready',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(503).json({\n      status: 'not ready',\n      error: error instanceof Error ? error.message : 'Readiness check failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Liveness probe\nrouter.get('/live', (req: Request, res: Response) => {\n  res.status(200).json({\n    status: 'alive',\n    timestamp: new Date().toISOString(),\n    uptime: Math.round(process.uptime())\n  });\n});\n\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7ae4c5e36724e6560b0ab0d5132b065edf73bf95"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1u4emqrlxb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1u4emqrlxb();
var __importDefault =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[0]++,
/* istanbul ignore next */
(cov_1u4emqrlxb().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1u4emqrlxb().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1u4emqrlxb().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1u4emqrlxb().f[0]++;
  cov_1u4emqrlxb().s[1]++;
  return /* istanbul ignore next */(cov_1u4emqrlxb().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1u4emqrlxb().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1u4emqrlxb().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1u4emqrlxb().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1u4emqrlxb().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1u4emqrlxb().s[3]++;
exports.trackMetrics = void 0;
const express_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[4]++, __importDefault(require("express")));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[5]++, require("perf_hooks"));
const better_sqlite3_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[6]++, __importDefault(require("better-sqlite3")));
const ioredis_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[7]++, __importDefault(require("ioredis")));
const axios_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[8]++, __importDefault(require("axios")));
const os_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[9]++, __importDefault(require("os")));
const promises_1 =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[10]++, __importDefault(require("fs/promises")));
const router =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[11]++, express_1.default.Router());
// In-memory metrics storage (in production, use Redis or proper metrics store)
const metrics =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[12]++, {
  requestCount: 0,
  errorCount: 0,
  responseTimes: [],
  lastReset: Date.now()
});
// Health check implementations
class HealthChecker {
  constructor() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[1]++;
    cov_1u4emqrlxb().s[13]++;
    this.checks = new Map();
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[14]++;
    this.registerChecks();
  }
  registerChecks() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[2]++;
    cov_1u4emqrlxb().s[15]++;
    this.checks.set('database', this.checkDatabase.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[16]++;
    this.checks.set('redis', this.checkRedis.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[17]++;
    this.checks.set('ollama', this.checkOllama.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[18]++;
    this.checks.set('disk', this.checkDiskSpace.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[19]++;
    this.checks.set('memory', this.checkMemory.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[20]++;
    this.checks.set('external-api', this.checkExternalAPIs.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[21]++;
    this.checks.set('websocket', this.checkWebSocket.bind(this));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[22]++;
    this.checks.set('background-jobs', this.checkBackgroundJobs.bind(this));
  }
  async runAllChecks() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[3]++;
    const results =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[23]++, []);
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[24]++;
    for (const [name, checkFn] of this.checks) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[25]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1u4emqrlxb().s[26]++, await Promise.race([checkFn(), this.timeout(name, 5000) // 5 second timeout
        ]));
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[27]++;
        results.push(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[28]++;
        results.push({
          service: name,
          status: 'unhealthy',
          responseTime: 5000,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1u4emqrlxb().b[3][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1u4emqrlxb().b[3][1]++, 'Unknown error'),
          lastChecked: new Date().toISOString()
        });
      }
    }
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[29]++;
    return results;
  }
  async timeout(service, ms) {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[4]++;
    cov_1u4emqrlxb().s[30]++;
    return new Promise((_, reject) => {
      /* istanbul ignore next */
      cov_1u4emqrlxb().f[5]++;
      cov_1u4emqrlxb().s[31]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_1u4emqrlxb().f[6]++;
        cov_1u4emqrlxb().s[32]++;
        return reject(new Error(`Health check timeout for ${service}`));
      }, ms);
    });
  }
  async checkDatabase() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[7]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[33]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[34]++;
    try {
      const dbPath =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[35]++,
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[4][0]++, process.env.DATABASE_PATH) ||
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[4][1]++, './data/database.sqlite'));
      const db =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[36]++, (0, better_sqlite3_1.default)(dbPath));
      // Test read/write operations
      const testQuery =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[37]++, db.prepare('SELECT 1 as test').get());
      const writeTest =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[38]++, db.prepare('SELECT COUNT(*) as count FROM sqlite_master WHERE type="table"').get());
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[39]++;
      db.close();
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[40]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[41]++;
      return {
        service: 'database',
        status: 'healthy',
        responseTime: Math.round(responseTime),
        details: {
          queryResult: testQuery,
          tableCount: writeTest,
          path: dbPath
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[42]++;
      return {
        service: 'database',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[5][1]++, 'Database connection failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkRedis() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[8]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[43]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[44]++;
    try {
      const redis =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[45]++, new ioredis_1.default(
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[6][0]++, process.env.REDIS_URL) ||
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[6][1]++, 'redis://localhost:6379')));
      // Test Redis operations
      const pingResult =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[46]++, await redis.ping());
      const testKey =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[47]++, `health-check-${Date.now()}`);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[48]++;
      await redis.set(testKey, 'test-value', 'EX', 10);
      const getValue =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[49]++, await redis.get(testKey));
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[50]++;
      await redis.del(testKey);
      const info =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[51]++, await redis.info('server'));
      const memory =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[52]++, await redis.info('memory'));
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[53]++;
      await redis.disconnect();
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[54]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[55]++;
      return {
        service: 'redis',
        status:
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[8][0]++, pingResult === 'PONG') &&
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[8][1]++, getValue === 'test-value') ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[7][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[7][1]++, 'degraded'),
        responseTime: Math.round(responseTime),
        details: {
          ping: pingResult,
          readWrite: getValue === 'test-value',
          serverInfo: this.parseRedisInfo(info),
          memoryInfo: this.parseRedisInfo(memory)
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[56]++;
      return {
        service: 'redis',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[9][1]++, 'Redis connection failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkOllama() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[9]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[57]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[58]++;
    try {
      const ollamaUrl =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[59]++,
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[10][0]++, process.env.OLLAMA_BASE_URL) ||
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[10][1]++, 'http://localhost:11434'));
      // Check if Ollama is running
      const versionResponse =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[60]++, await axios_1.default.get(`${ollamaUrl}/api/version`, {
        timeout: 5000
      }));
      // Check available models
      const modelsResponse =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[61]++, await axios_1.default.get(`${ollamaUrl}/api/tags`, {
        timeout: 5000
      }));
      // Test simple generation (if models available)
      let generationTest =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[62]++, null);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[63]++;
      if (
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[12][0]++, modelsResponse.data.models) &&
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[12][1]++, modelsResponse.data.models.length > 0)) {
        /* istanbul ignore next */
        cov_1u4emqrlxb().b[11][0]++;
        const model =
        /* istanbul ignore next */
        (cov_1u4emqrlxb().s[64]++, modelsResponse.data.models[0].name);
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[65]++;
        try {
          const testResponse =
          /* istanbul ignore next */
          (cov_1u4emqrlxb().s[66]++, await axios_1.default.post(`${ollamaUrl}/api/generate`, {
            model,
            prompt: 'test',
            stream: false
          }, {
            timeout: 10000
          }));
          /* istanbul ignore next */
          cov_1u4emqrlxb().s[67]++;
          generationTest = {
            model,
            success: !!testResponse.data.response
          };
        } catch (genError) {
          /* istanbul ignore next */
          cov_1u4emqrlxb().s[68]++;
          generationTest = {
            model,
            success: false,
            error: genError instanceof Error ?
            /* istanbul ignore next */
            (cov_1u4emqrlxb().b[13][0]++, genError.message) :
            /* istanbul ignore next */
            (cov_1u4emqrlxb().b[13][1]++, 'Generation failed')
          };
        }
      } else
      /* istanbul ignore next */
      {
        cov_1u4emqrlxb().b[11][1]++;
      }
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[69]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[70]++;
      return {
        service: 'ollama',
        status: 'healthy',
        responseTime: Math.round(responseTime),
        details: {
          version: versionResponse.data,
          modelCount:
          /* istanbul ignore next */
          (cov_1u4emqrlxb().b[14][0]++, modelsResponse.data.models?.length) ||
          /* istanbul ignore next */
          (cov_1u4emqrlxb().b[14][1]++, 0),
          models:
          /* istanbul ignore next */
          (cov_1u4emqrlxb().b[15][0]++, modelsResponse.data.models?.map(m => {
            /* istanbul ignore next */
            cov_1u4emqrlxb().f[10]++;
            cov_1u4emqrlxb().s[71]++;
            return m.name;
          })) ||
          /* istanbul ignore next */
          (cov_1u4emqrlxb().b[15][1]++, []),
          generationTest
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[72]++;
      return {
        service: 'ollama',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[16][1]++, 'Ollama service unavailable'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkDiskSpace() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[11]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[73]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[74]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[75]++, await promises_1.default.stat('./'));
      const dataDir =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[76]++, './data');
      // Get disk usage (simplified - in production use proper disk space library)
      const diskInfo =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[77]++, {
        dataDirectory: dataDir,
        accessible: true
      });
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[78]++;
      try {
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[79]++;
        await promises_1.default.access(dataDir);
        const dataDirStats =
        /* istanbul ignore next */
        (cov_1u4emqrlxb().s[80]++, await promises_1.default.stat(dataDir));
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[81]++;
        diskInfo.accessible = dataDirStats.isDirectory();
      } catch {
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[82]++;
        diskInfo.accessible = false;
      }
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[83]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[84]++;
      return {
        service: 'disk',
        status: diskInfo.accessible ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[17][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[17][1]++, 'degraded'),
        responseTime: Math.round(responseTime),
        details: diskInfo,
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[85]++;
      return {
        service: 'disk',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[18][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[18][1]++, 'Disk check failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkMemory() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[12]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[86]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[87]++;
    try {
      const memUsage =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[88]++, process.memoryUsage());
      const systemMem =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[89]++, {
        total: os_1.default.totalmem(),
        free: os_1.default.freemem(),
        used: os_1.default.totalmem() - os_1.default.freemem()
      });
      const memoryPressure =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[90]++, systemMem.used / systemMem.total > 0.9);
      const processMemoryHigh =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[91]++, memUsage.heapUsed > 100 * 1024 * 1024); // 100MB
      const status =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[92]++,
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[20][0]++, memoryPressure) ||
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[20][1]++, processMemoryHigh) ?
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[19][0]++, 'degraded') :
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[19][1]++, 'healthy'));
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[93]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[94]++;
      return {
        service: 'memory',
        status,
        responseTime: Math.round(responseTime),
        details: {
          system: systemMem,
          process: memUsage,
          pressure: memoryPressure,
          processHigh: processMemoryHigh
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[95]++;
      return {
        service: 'memory',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[21][1]++, 'Memory check failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkExternalAPIs() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[13]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[96]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[97]++;
    try {
      // Test external dependencies (customize based on your external APIs)
      const checks =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[98]++, await Promise.allSettled([axios_1.default.get('https://httpbin.org/status/200', {
        timeout: 3000
      })
      // Add your external API checks here
      ]));
      const failed =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[99]++, checks.filter(result => {
        /* istanbul ignore next */
        cov_1u4emqrlxb().f[14]++;
        cov_1u4emqrlxb().s[100]++;
        return result.status === 'rejected';
      }).length);
      const total =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[101]++, checks.length);
      const status =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[102]++, failed === 0 ?
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[22][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[22][1]++, failed < total ?
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[23][0]++, 'degraded') :
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[23][1]++, 'unhealthy')));
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[103]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[104]++;
      return {
        service: 'external-api',
        status,
        responseTime: Math.round(responseTime),
        details: {
          total,
          failed,
          results: checks.map((result, index) => {
            /* istanbul ignore next */
            cov_1u4emqrlxb().f[15]++;
            cov_1u4emqrlxb().s[105]++;
            return {
              index,
              status: result.status,
              error: result.status === 'rejected' ?
              /* istanbul ignore next */
              (cov_1u4emqrlxb().b[24][0]++, result.reason?.message) :
              /* istanbul ignore next */
              (cov_1u4emqrlxb().b[24][1]++, null)
            };
          })
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[106]++;
      return {
        service: 'external-api',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[25][1]++, 'External API checks failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkWebSocket() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[16]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[107]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[108]++;
    try {
      // WebSocket health check would require actual connection testing
      // For now, check if WebSocket server is configured
      const wsEnabled =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[109]++, !!process.env.WEBSOCKET_ENABLED);
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[110]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[111]++;
      return {
        service: 'websocket',
        status: wsEnabled ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[26][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[26][1]++, 'degraded'),
        responseTime: Math.round(responseTime),
        details: {
          enabled: wsEnabled,
          note: 'WebSocket server configuration check'
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[112]++;
      return {
        service: 'websocket',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[27][1]++, 'WebSocket check failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  async checkBackgroundJobs() {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[17]++;
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[113]++, perf_hooks_1.performance.now());
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[114]++;
    try {
      // Check background job queue health (Bull/Redis queues)
      // This is a simplified check - in production, check actual queue status
      const jobsHealthy =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[115]++, true); // Implement actual job queue health check
      const responseTime =
      /* istanbul ignore next */
      (cov_1u4emqrlxb().s[116]++, perf_hooks_1.performance.now() - start);
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[117]++;
      return {
        service: 'background-jobs',
        status: jobsHealthy ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[28][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[28][1]++, 'degraded'),
        responseTime: Math.round(responseTime),
        details: {
          queuesActive: jobsHealthy,
          note: 'Background job queue status'
        },
        lastChecked: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[118]++;
      return {
        service: 'background-jobs',
        status: 'unhealthy',
        responseTime: perf_hooks_1.performance.now() - start,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[29][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u4emqrlxb().b[29][1]++, 'Background jobs check failed'),
        lastChecked: new Date().toISOString()
      };
    }
  }
  parseRedisInfo(info) {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[18]++;
    const lines =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[119]++, info.split('\r\n'));
    const result =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[120]++, {});
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[121]++;
    for (const line of lines) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().s[122]++;
      if (line.includes(':')) {
        /* istanbul ignore next */
        cov_1u4emqrlxb().b[30][0]++;
        const [key, value] =
        /* istanbul ignore next */
        (cov_1u4emqrlxb().s[123]++, line.split(':'));
        /* istanbul ignore next */
        cov_1u4emqrlxb().s[124]++;
        result[key] = value;
      } else
      /* istanbul ignore next */
      {
        cov_1u4emqrlxb().b[30][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[125]++;
    return result;
  }
}
const healthChecker =
/* istanbul ignore next */
(cov_1u4emqrlxb().s[126]++, new HealthChecker());
// Middleware to track metrics
/* istanbul ignore next */
cov_1u4emqrlxb().s[127]++;
const trackMetrics = (req, res, next) => {
  /* istanbul ignore next */
  cov_1u4emqrlxb().f[19]++;
  const start =
  /* istanbul ignore next */
  (cov_1u4emqrlxb().s[128]++, perf_hooks_1.performance.now());
  /* istanbul ignore next */
  cov_1u4emqrlxb().s[129]++;
  metrics.requestCount++;
  /* istanbul ignore next */
  cov_1u4emqrlxb().s[130]++;
  res.on('finish', () => {
    /* istanbul ignore next */
    cov_1u4emqrlxb().f[20]++;
    const responseTime =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[131]++, perf_hooks_1.performance.now() - start);
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[132]++;
    metrics.responseTimes.push(responseTime);
    // Keep only last 1000 response times
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[133]++;
    if (metrics.responseTimes.length > 1000) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().b[31][0]++;
      cov_1u4emqrlxb().s[134]++;
      metrics.responseTimes = metrics.responseTimes.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_1u4emqrlxb().b[31][1]++;
    }
    cov_1u4emqrlxb().s[135]++;
    if (res.statusCode >= 400) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().b[32][0]++;
      cov_1u4emqrlxb().s[136]++;
      metrics.errorCount++;
    } else
    /* istanbul ignore next */
    {
      cov_1u4emqrlxb().b[32][1]++;
    }
  });
  /* istanbul ignore next */
  cov_1u4emqrlxb().s[137]++;
  next();
};
/* istanbul ignore next */
cov_1u4emqrlxb().s[138]++;
exports.trackMetrics = trackMetrics;
// Comprehensive health check endpoint
/* istanbul ignore next */
cov_1u4emqrlxb().s[139]++;
router.get('/comprehensive', async (req, res) => {
  /* istanbul ignore next */
  cov_1u4emqrlxb().f[21]++;
  cov_1u4emqrlxb().s[140]++;
  try {
    const start =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[141]++, perf_hooks_1.performance.now());
    // Run all health checks
    const checks =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[142]++, await healthChecker.runAllChecks());
    // Calculate overall status
    const unhealthyCount =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[143]++, checks.filter(c => {
      /* istanbul ignore next */
      cov_1u4emqrlxb().f[22]++;
      cov_1u4emqrlxb().s[144]++;
      return c.status === 'unhealthy';
    }).length);
    const degradedCount =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[145]++, checks.filter(c => {
      /* istanbul ignore next */
      cov_1u4emqrlxb().f[23]++;
      cov_1u4emqrlxb().s[146]++;
      return c.status === 'degraded';
    }).length);
    let overallStatus;
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[147]++;
    if (unhealthyCount > 0) {
      /* istanbul ignore next */
      cov_1u4emqrlxb().b[33][0]++;
      cov_1u4emqrlxb().s[148]++;
      overallStatus = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_1u4emqrlxb().b[33][1]++;
      cov_1u4emqrlxb().s[149]++;
      if (degradedCount > 0) {
        /* istanbul ignore next */
        cov_1u4emqrlxb().b[34][0]++;
        cov_1u4emqrlxb().s[150]++;
        overallStatus = 'degraded';
      } else {
        /* istanbul ignore next */
        cov_1u4emqrlxb().b[34][1]++;
        cov_1u4emqrlxb().s[151]++;
        overallStatus = 'healthy';
      }
    }
    // Get system information
    const memInfo =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[152]++, process.memoryUsage());
    const systemMem =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[153]++, {
      used: os_1.default.totalmem() - os_1.default.freemem(),
      free: os_1.default.freemem(),
      total: os_1.default.totalmem(),
      percentage: Math.round((os_1.default.totalmem() - os_1.default.freemem()) / os_1.default.totalmem() * 100)
    });
    // Calculate metrics
    const avgResponseTime =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[154]++, metrics.responseTimes.length > 0 ?
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[35][0]++, Math.round(metrics.responseTimes.reduce((a, b) => {
      /* istanbul ignore next */
      cov_1u4emqrlxb().f[24]++;
      cov_1u4emqrlxb().s[155]++;
      return a + b;
    }, 0) / metrics.responseTimes.length)) :
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[35][1]++, 0));
    const errorRate =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[156]++, metrics.requestCount > 0 ?
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[36][0]++, Math.round(metrics.errorCount / metrics.requestCount * 100)) :
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[36][1]++, 0));
    const healthData =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[157]++, {
      overall: overallStatus,
      timestamp: new Date().toISOString(),
      uptime: Math.round(process.uptime()),
      version:
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[37][0]++, process.env.APP_VERSION) ||
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[37][1]++, '1.0.0'),
      environment:
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[38][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[38][1]++, 'development'),
      checks,
      system: {
        memory: systemMem,
        cpu: {
          loadAverage: os_1.default.loadavg(),
          cores: os_1.default.cpus().length
        },
        disk: {
          used: 0,
          // Implement actual disk usage
          free: 0,
          total: 0,
          percentage: 0
        }
      },
      metrics: {
        requestCount: metrics.requestCount,
        errorRate,
        averageResponseTime: avgResponseTime
      }
    });
    // Set appropriate HTTP status based on health
    const statusCode =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[158]++, overallStatus === 'healthy' ?
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[39][0]++, 200) :
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[39][1]++, overallStatus === 'degraded' ?
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[40][0]++, 200) :
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[40][1]++, 503)));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[159]++;
    res.status(statusCode).json(healthData);
  } catch (error) {
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[160]++;
    res.status(503).json({
      overall: 'unhealthy',
      timestamp: new Date().toISOString(),
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[41][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[41][1]++, 'Health check failed'),
      checks: []
    });
  }
});
// Simple health check for load balancers
/* istanbul ignore next */
cov_1u4emqrlxb().s[161]++;
router.get('/ready', async (req, res) => {
  /* istanbul ignore next */
  cov_1u4emqrlxb().f[25]++;
  cov_1u4emqrlxb().s[162]++;
  try {
    // Quick checks for readiness
    const critical =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[163]++, await Promise.all([healthChecker['checkDatabase']()
    // Add other critical service checks
    ]));
    const allHealthy =
    /* istanbul ignore next */
    (cov_1u4emqrlxb().s[164]++, critical.every(check => {
      /* istanbul ignore next */
      cov_1u4emqrlxb().f[26]++;
      cov_1u4emqrlxb().s[165]++;
      return check.status === 'healthy';
    }));
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[166]++;
    res.status(allHealthy ?
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[42][0]++, 200) :
    /* istanbul ignore next */
    (cov_1u4emqrlxb().b[42][1]++, 503)).json({
      status: allHealthy ?
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[43][0]++, 'ready') :
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[43][1]++, 'not ready'),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1u4emqrlxb().s[167]++;
    res.status(503).json({
      status: 'not ready',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[44][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1u4emqrlxb().b[44][1]++, 'Readiness check failed'),
      timestamp: new Date().toISOString()
    });
  }
});
// Liveness probe
/* istanbul ignore next */
cov_1u4emqrlxb().s[168]++;
router.get('/live', (req, res) => {
  /* istanbul ignore next */
  cov_1u4emqrlxb().f[27]++;
  cov_1u4emqrlxb().s[169]++;
  res.status(200).json({
    status: 'alive',
    timestamp: new Date().toISOString(),
    uptime: Math.round(process.uptime())
  });
});
/* istanbul ignore next */
cov_1u4emqrlxb().s[170]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,