a186f02bfe6ff03b4fc1da4de8b6df9c
"use strict";

/* istanbul ignore next */
function cov_2jl98bluca() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/analytics.ts";
  var hash = "d3171ab974c4d5ad82e87479c4c9fad5bc9245d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/analytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 53
        }
      },
      "5": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 74
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 41
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "8": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "9": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "11": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 67
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 51
        }
      },
      "13": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "15": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "16": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "17": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "19": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 66
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "21": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "22": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "23": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 74
        }
      },
      "24": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "25": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 67
        }
      },
      "26": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "27": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 68,
          column: 3
        }
      },
      "28": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "29": {
        start: {
          line: 57,
          column: 47
        },
        end: {
          line: 57,
          column: 56
        }
      },
      "30": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 89
        }
      },
      "31": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "32": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "33": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "34": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "35": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "36": {
        start: {
          line: 72,
          column: 25
        },
        end: {
          line: 72,
          column: 65
        }
      },
      "37": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 52
        }
      },
      "38": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 57
        }
      },
      "39": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "40": {
        start: {
          line: 84,
          column: 0
        },
        end: {
          line: 97,
          column: 3
        }
      },
      "41": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "42": {
        start: {
          line: 86,
          column: 84
        },
        end: {
          line: 86,
          column: 92
        }
      },
      "43": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 115
        }
      },
      "44": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 72
        }
      },
      "45": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 64
        }
      },
      "46": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "47": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 112,
          column: 3
        }
      },
      "48": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "49": {
        start: {
          line: 101,
          column: 103
        },
        end: {
          line: 101,
          column: 111
        }
      },
      "50": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 135
        }
      },
      "51": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 73
        }
      },
      "52": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 65
        }
      },
      "53": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "54": {
        start: {
          line: 114,
          column: 0
        },
        end: {
          line: 127,
          column: 3
        }
      },
      "55": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "56": {
        start: {
          line: 116,
          column: 33
        },
        end: {
          line: 116,
          column: 41
        }
      },
      "57": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 61
        }
      },
      "58": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 69
        }
      },
      "59": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 61
        }
      },
      "60": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "61": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 142,
          column: 3
        }
      },
      "62": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "63": {
        start: {
          line: 131,
          column: 28
        },
        end: {
          line: 131,
          column: 36
        }
      },
      "64": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 59
        }
      },
      "65": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 72
        }
      },
      "66": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 64
        }
      },
      "67": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 26
          }
        },
        loc: {
          start: {
            line: 13,
            column: 45
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 27,
            column: 25
          }
        },
        loc: {
          start: {
            line: 27,
            column: 44
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 27
          }
        },
        loc: {
          start: {
            line: 41,
            column: 46
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 22
          },
          end: {
            line: 55,
            column: 23
          }
        },
        loc: {
          start: {
            line: 55,
            column: 42
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 70,
            column: 25
          }
        },
        loc: {
          start: {
            line: 70,
            column: 44
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 38
          },
          end: {
            line: 84,
            column: 39
          }
        },
        loc: {
          start: {
            line: 84,
            column: 58
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 84
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 99,
            column: 39
          },
          end: {
            line: 99,
            column: 40
          }
        },
        loc: {
          start: {
            line: 99,
            column: 59
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 99
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 114,
            column: 35
          },
          end: {
            line: 114,
            column: 36
          }
        },
        loc: {
          start: {
            line: 114,
            column: 55
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 114
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 129,
            column: 38
          },
          end: {
            line: 129,
            column: 39
          }
        },
        loc: {
          start: {
            line: 129,
            column: 58
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 129
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 57,
            column: 30
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 32
          },
          end: {
            line: 57,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 40
          },
          end: {
            line: 57,
            column: 42
          }
        }],
        line: 57
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/analytics.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/analytics.ts"],
      sourcesContent: ["import express, { Request, Response } from 'express';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\n\nconst router = express.Router();\nconst analyticsEngine = AnalyticsEngine.getInstance();\n\n// Get dashboard metrics\nrouter.get('/dashboard', async (req: Request, res: Response) => {\n  try {\n    const metrics = await analyticsEngine.getDashboardMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching dashboard metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch dashboard metrics' \n    });\n  }\n});\n\n// Get real-time metrics\nrouter.get('/realtime', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.calculateRealtimeMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching real-time metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch real-time metrics' \n    });\n  }\n});\n\n// Get historical metrics\nrouter.get('/historical', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.calculateHistoricalMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching historical metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch historical metrics' \n    });\n  }\n});\n\n// Get trends with optional parameters\nrouter.get('/trends', async (req, res) => {\n  try {\n    const { period = 'day', limit = 30 } = req.query;\n    const trends = await analyticsEngine.calculateTrends(\n      period as 'hour' | 'day' | 'week' | 'month',\n      parseInt(limit as string, 10)\n    );\n    res.json({ success: true, data: trends });\n  } catch (error) {\n    console.error('Error fetching trends:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch trends' \n    });\n  }\n});\n\n// Get insights\nrouter.get('/insights', async (req, res) => {\n  try {\n    const insights = await analyticsEngine.generateInsights();\n    res.json({ success: true, data: insights });\n  } catch (error) {\n    console.error('Error fetching insights:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch insights' \n    });\n  }\n});\n\n// Record test execution event\nrouter.post('/events/test-execution', async (req, res) => {\n  try {\n    const { testCaseId, executionId, model, passed, executionTime, metadata } = req.body;\n    \n    await analyticsEngine.recordTestExecution(\n      testCaseId,\n      executionId,\n      model,\n      passed,\n      executionTime,\n      metadata\n    );\n    \n    res.json({ success: true, message: 'Test execution recorded' });\n  } catch (error) {\n    console.error('Error recording test execution:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record test execution' \n    });\n  }\n});\n\n// Record batch execution event\nrouter.post('/events/batch-execution', async (req, res) => {\n  try {\n    const { promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata } = req.body;\n    \n    await analyticsEngine.recordBatchExecution(\n      promptCardId,\n      executionId,\n      model,\n      totalTests,\n      passedTests,\n      executionTime,\n      metadata\n    );\n    \n    res.json({ success: true, message: 'Batch execution recorded' });\n  } catch (error) {\n    console.error('Error recording batch execution:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record batch execution' \n    });\n  }\n});\n\n// Record model usage event\nrouter.post('/events/model-usage', async (req, res) => {\n  try {\n    const { model, usage } = req.body;\n    \n    await analyticsEngine.recordModelUsage(model, usage);\n    \n    res.json({ success: true, message: 'Model usage recorded' });\n  } catch (error) {\n    console.error('Error recording model usage:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record model usage' \n    });\n  }\n});\n\n// Record system metrics\nrouter.post('/events/system-metrics', async (req, res) => {\n  try {\n    const { metrics } = req.body;\n    \n    await analyticsEngine.recordSystemMetrics(metrics);\n    \n    res.json({ success: true, message: 'System metrics recorded' });\n  } catch (error) {\n    console.error('Error recording system metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record system metrics' \n    });\n  }\n});\n\nexport { router as analyticsRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d3171ab974c4d5ad82e87479c4c9fad5bc9245d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jl98bluca = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jl98bluca();
var __importDefault =
/* istanbul ignore next */
(cov_2jl98bluca().s[0]++,
/* istanbul ignore next */
(cov_2jl98bluca().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2jl98bluca().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2jl98bluca().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2jl98bluca().f[0]++;
  cov_2jl98bluca().s[1]++;
  return /* istanbul ignore next */(cov_2jl98bluca().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2jl98bluca().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2jl98bluca().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2jl98bluca().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2jl98bluca().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2jl98bluca().s[3]++;
exports.analyticsRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_2jl98bluca().s[4]++, __importDefault(require("express")));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_2jl98bluca().s[5]++, require("../services/analytics/AnalyticsEngine"));
const router =
/* istanbul ignore next */
(cov_2jl98bluca().s[6]++, express_1.default.Router());
/* istanbul ignore next */
cov_2jl98bluca().s[7]++;
exports.analyticsRoutes = router;
const analyticsEngine =
/* istanbul ignore next */
(cov_2jl98bluca().s[8]++, AnalyticsEngine_1.AnalyticsEngine.getInstance());
// Get dashboard metrics
/* istanbul ignore next */
cov_2jl98bluca().s[9]++;
router.get('/dashboard', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[1]++;
  cov_2jl98bluca().s[10]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[11]++, await analyticsEngine.getDashboardMetrics());
    /* istanbul ignore next */
    cov_2jl98bluca().s[12]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[13]++;
    console.error('Error fetching dashboard metrics:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[14]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch dashboard metrics'
    });
  }
});
// Get real-time metrics
/* istanbul ignore next */
cov_2jl98bluca().s[15]++;
router.get('/realtime', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[2]++;
  cov_2jl98bluca().s[16]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[17]++, await analyticsEngine.calculateRealtimeMetrics());
    /* istanbul ignore next */
    cov_2jl98bluca().s[18]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[19]++;
    console.error('Error fetching real-time metrics:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[20]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch real-time metrics'
    });
  }
});
// Get historical metrics
/* istanbul ignore next */
cov_2jl98bluca().s[21]++;
router.get('/historical', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[3]++;
  cov_2jl98bluca().s[22]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[23]++, await analyticsEngine.calculateHistoricalMetrics());
    /* istanbul ignore next */
    cov_2jl98bluca().s[24]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[25]++;
    console.error('Error fetching historical metrics:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[26]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch historical metrics'
    });
  }
});
// Get trends with optional parameters
/* istanbul ignore next */
cov_2jl98bluca().s[27]++;
router.get('/trends', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[4]++;
  cov_2jl98bluca().s[28]++;
  try {
    const {
      period =
      /* istanbul ignore next */
      (cov_2jl98bluca().b[3][0]++, 'day'),
      limit =
      /* istanbul ignore next */
      (cov_2jl98bluca().b[4][0]++, 30)
    } =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[29]++, req.query);
    const trends =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[30]++, await analyticsEngine.calculateTrends(period, parseInt(limit, 10)));
    /* istanbul ignore next */
    cov_2jl98bluca().s[31]++;
    res.json({
      success: true,
      data: trends
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[32]++;
    console.error('Error fetching trends:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[33]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch trends'
    });
  }
});
// Get insights
/* istanbul ignore next */
cov_2jl98bluca().s[34]++;
router.get('/insights', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[5]++;
  cov_2jl98bluca().s[35]++;
  try {
    const insights =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[36]++, await analyticsEngine.generateInsights());
    /* istanbul ignore next */
    cov_2jl98bluca().s[37]++;
    res.json({
      success: true,
      data: insights
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[38]++;
    console.error('Error fetching insights:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[39]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch insights'
    });
  }
});
// Record test execution event
/* istanbul ignore next */
cov_2jl98bluca().s[40]++;
router.post('/events/test-execution', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[6]++;
  cov_2jl98bluca().s[41]++;
  try {
    const {
      testCaseId,
      executionId,
      model,
      passed,
      executionTime,
      metadata
    } =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[42]++, req.body);
    /* istanbul ignore next */
    cov_2jl98bluca().s[43]++;
    await analyticsEngine.recordTestExecution(testCaseId, executionId, model, passed, executionTime, metadata);
    /* istanbul ignore next */
    cov_2jl98bluca().s[44]++;
    res.json({
      success: true,
      message: 'Test execution recorded'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[45]++;
    console.error('Error recording test execution:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[46]++;
    res.status(500).json({
      success: false,
      error: 'Failed to record test execution'
    });
  }
});
// Record batch execution event
/* istanbul ignore next */
cov_2jl98bluca().s[47]++;
router.post('/events/batch-execution', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[7]++;
  cov_2jl98bluca().s[48]++;
  try {
    const {
      promptCardId,
      executionId,
      model,
      totalTests,
      passedTests,
      executionTime,
      metadata
    } =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[49]++, req.body);
    /* istanbul ignore next */
    cov_2jl98bluca().s[50]++;
    await analyticsEngine.recordBatchExecution(promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata);
    /* istanbul ignore next */
    cov_2jl98bluca().s[51]++;
    res.json({
      success: true,
      message: 'Batch execution recorded'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[52]++;
    console.error('Error recording batch execution:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[53]++;
    res.status(500).json({
      success: false,
      error: 'Failed to record batch execution'
    });
  }
});
// Record model usage event
/* istanbul ignore next */
cov_2jl98bluca().s[54]++;
router.post('/events/model-usage', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[8]++;
  cov_2jl98bluca().s[55]++;
  try {
    const {
      model,
      usage
    } =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[56]++, req.body);
    /* istanbul ignore next */
    cov_2jl98bluca().s[57]++;
    await analyticsEngine.recordModelUsage(model, usage);
    /* istanbul ignore next */
    cov_2jl98bluca().s[58]++;
    res.json({
      success: true,
      message: 'Model usage recorded'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[59]++;
    console.error('Error recording model usage:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[60]++;
    res.status(500).json({
      success: false,
      error: 'Failed to record model usage'
    });
  }
});
// Record system metrics
/* istanbul ignore next */
cov_2jl98bluca().s[61]++;
router.post('/events/system-metrics', async (req, res) => {
  /* istanbul ignore next */
  cov_2jl98bluca().f[9]++;
  cov_2jl98bluca().s[62]++;
  try {
    const {
      metrics
    } =
    /* istanbul ignore next */
    (cov_2jl98bluca().s[63]++, req.body);
    /* istanbul ignore next */
    cov_2jl98bluca().s[64]++;
    await analyticsEngine.recordSystemMetrics(metrics);
    /* istanbul ignore next */
    cov_2jl98bluca().s[65]++;
    res.json({
      success: true,
      message: 'System metrics recorded'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jl98bluca().s[66]++;
    console.error('Error recording system metrics:', error);
    /* istanbul ignore next */
    cov_2jl98bluca().s[67]++;
    res.status(500).json({
      success: false,
      error: 'Failed to record system metrics'
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,