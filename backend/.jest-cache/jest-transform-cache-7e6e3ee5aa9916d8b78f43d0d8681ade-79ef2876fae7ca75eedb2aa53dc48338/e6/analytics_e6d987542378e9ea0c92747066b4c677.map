{"version":3,"names":["cov_2jl98bluca","actualCoverage","express_1","s","__importDefault","require","AnalyticsEngine_1","router","default","Router","exports","analyticsRoutes","analyticsEngine","AnalyticsEngine","getInstance","get","req","res","f","metrics","getDashboardMetrics","json","success","data","error","console","status","calculateRealtimeMetrics","calculateHistoricalMetrics","period","b","limit","query","trends","calculateTrends","parseInt","insights","generateInsights","post","testCaseId","executionId","model","passed","executionTime","metadata","body","recordTestExecution","message","promptCardId","totalTests","passedTests","recordBatchExecution","usage","recordModelUsage","recordSystemMetrics"],"sources":["/workspaces/prompt-card-system/backend/src/routes/analytics.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\n\nconst router = express.Router();\nconst analyticsEngine = AnalyticsEngine.getInstance();\n\n// Get dashboard metrics\nrouter.get('/dashboard', async (req: Request, res: Response) => {\n  try {\n    const metrics = await analyticsEngine.getDashboardMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching dashboard metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch dashboard metrics' \n    });\n  }\n});\n\n// Get real-time metrics\nrouter.get('/realtime', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.calculateRealtimeMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching real-time metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch real-time metrics' \n    });\n  }\n});\n\n// Get historical metrics\nrouter.get('/historical', async (req, res) => {\n  try {\n    const metrics = await analyticsEngine.calculateHistoricalMetrics();\n    res.json({ success: true, data: metrics });\n  } catch (error) {\n    console.error('Error fetching historical metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch historical metrics' \n    });\n  }\n});\n\n// Get trends with optional parameters\nrouter.get('/trends', async (req, res) => {\n  try {\n    const { period = 'day', limit = 30 } = req.query;\n    const trends = await analyticsEngine.calculateTrends(\n      period as 'hour' | 'day' | 'week' | 'month',\n      parseInt(limit as string, 10)\n    );\n    res.json({ success: true, data: trends });\n  } catch (error) {\n    console.error('Error fetching trends:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch trends' \n    });\n  }\n});\n\n// Get insights\nrouter.get('/insights', async (req, res) => {\n  try {\n    const insights = await analyticsEngine.generateInsights();\n    res.json({ success: true, data: insights });\n  } catch (error) {\n    console.error('Error fetching insights:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to fetch insights' \n    });\n  }\n});\n\n// Record test execution event\nrouter.post('/events/test-execution', async (req, res) => {\n  try {\n    const { testCaseId, executionId, model, passed, executionTime, metadata } = req.body;\n    \n    await analyticsEngine.recordTestExecution(\n      testCaseId,\n      executionId,\n      model,\n      passed,\n      executionTime,\n      metadata\n    );\n    \n    res.json({ success: true, message: 'Test execution recorded' });\n  } catch (error) {\n    console.error('Error recording test execution:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record test execution' \n    });\n  }\n});\n\n// Record batch execution event\nrouter.post('/events/batch-execution', async (req, res) => {\n  try {\n    const { promptCardId, executionId, model, totalTests, passedTests, executionTime, metadata } = req.body;\n    \n    await analyticsEngine.recordBatchExecution(\n      promptCardId,\n      executionId,\n      model,\n      totalTests,\n      passedTests,\n      executionTime,\n      metadata\n    );\n    \n    res.json({ success: true, message: 'Batch execution recorded' });\n  } catch (error) {\n    console.error('Error recording batch execution:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record batch execution' \n    });\n  }\n});\n\n// Record model usage event\nrouter.post('/events/model-usage', async (req, res) => {\n  try {\n    const { model, usage } = req.body;\n    \n    await analyticsEngine.recordModelUsage(model, usage);\n    \n    res.json({ success: true, message: 'Model usage recorded' });\n  } catch (error) {\n    console.error('Error recording model usage:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record model usage' \n    });\n  }\n});\n\n// Record system metrics\nrouter.post('/events/system-metrics', async (req, res) => {\n  try {\n    const { metrics } = req.body;\n    \n    await analyticsEngine.recordSystemMetrics(metrics);\n    \n    res.json({ success: true, message: 'System metrics recorded' });\n  } catch (error) {\n    console.error('Error recording system metrics:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to record system metrics' \n    });\n  }\n});\n\nexport { router as analyticsRoutes };"],"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","ignoreList":[]}