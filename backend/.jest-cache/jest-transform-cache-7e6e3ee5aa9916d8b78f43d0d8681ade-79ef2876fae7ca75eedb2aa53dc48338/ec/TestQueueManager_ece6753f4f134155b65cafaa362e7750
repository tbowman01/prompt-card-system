d61fd23c2064b933aa9d78004f3ec54b
"use strict";

/* istanbul ignore next */
function cov_1ldo1avzpa() {
  var path = "/workspaces/prompt-card-system/backend/src/services/testing/TestQueueManager.ts";
  var hash = "defb15b655006aaa3e6edec228eb3f0ab3beedc1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/testing/TestQueueManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 47
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "8": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 57
        }
      },
      "9": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "10": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "11": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "12": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "13": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 16
        }
      },
      "15": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "16": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 44
        }
      },
      "19": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 76
        }
      },
      "20": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "21": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 29
        }
      },
      "22": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 34
        }
      },
      "25": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 34
        }
      },
      "26": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 39
        }
      },
      "27": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "28": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 73
        }
      },
      "29": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "30": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 94
        }
      },
      "31": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "32": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 80
        }
      },
      "33": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "34": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 108,
          column: 10
        }
      },
      "35": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "36": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "37": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 56
        }
      },
      "38": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 52
        }
      },
      "39": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "40": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "41": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 31
        }
      },
      "42": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 48
        }
      },
      "43": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 69
        }
      },
      "44": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 55
        }
      },
      "45": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "46": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 21
        }
      },
      "47": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 57
        }
      },
      "48": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "49": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 61
        }
      },
      "50": {
        start: {
          line: 146,
          column: 23
        },
        end: {
          line: 146,
          column: 55
        }
      },
      "51": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 57
        }
      },
      "52": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 154,
          column: 10
        }
      },
      "53": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 161,
          column: 68
        }
      },
      "54": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "55": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 163,
          column: 32
        }
      },
      "56": {
        start: {
          line: 164,
          column: 30
        },
        end: {
          line: 164,
          column: 60
        }
      },
      "57": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "58": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 172,
          column: 19
        }
      },
      "59": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 123
        }
      },
      "60": {
        start: {
          line: 176,
          column: 32
        },
        end: {
          line: 178,
          column: 18
        }
      },
      "61": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 194
        }
      },
      "62": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 147
        }
      },
      "63": {
        start: {
          line: 182,
          column: 38
        },
        end: {
          line: 182,
          column: 80
        }
      },
      "64": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 69
        }
      },
      "65": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 92
        }
      },
      "66": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 31
        }
      },
      "67": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 121
        }
      },
      "68": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 102
        }
      },
      "69": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 28
        }
      },
      "70": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 84
        }
      },
      "71": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 63
        }
      },
      "72": {
        start: {
          line: 203,
          column: 56
        },
        end: {
          line: 203,
          column: 59
        }
      },
      "73": {
        start: {
          line: 205,
          column: 26
        },
        end: {
          line: 205,
          column: 65
        }
      },
      "74": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 120
        }
      },
      "75": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 26
        }
      },
      "76": {
        start: {
          line: 208,
          column: 26
        },
        end: {
          line: 208,
          column: 87
        }
      },
      "77": {
        start: {
          line: 209,
          column: 29
        },
        end: {
          line: 209,
          column: 30
        }
      },
      "78": {
        start: {
          line: 210,
          column: 26
        },
        end: {
          line: 210,
          column: 27
        }
      },
      "79": {
        start: {
          line: 211,
          column: 28
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "80": {
        start: {
          line: 212,
          column: 28
        },
        end: {
          line: 212,
          column: 53
        }
      },
      "81": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "82": {
        start: {
          line: 214,
          column: 31
        },
        end: {
          line: 214,
          column: 114
        }
      },
      "83": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "84": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 33
        }
      },
      "85": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 223,
          column: 17
        }
      },
      "86": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 218,
          column: 34
        }
      },
      "87": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 222,
          column: 21
        }
      },
      "88": {
        start: {
          line: 221,
          column: 24
        },
        end: {
          line: 221,
          column: 73
        }
      },
      "89": {
        start: {
          line: 224,
          column: 33
        },
        end: {
          line: 224,
          column: 80
        }
      },
      "90": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 232,
          column: 19
        }
      },
      "91": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 30
        }
      },
      "92": {
        start: {
          line: 236,
          column: 36
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "93": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 45
        }
      },
      "94": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 251,
          column: 17
        }
      },
      "95": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 32
        }
      },
      "96": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 26
        }
      },
      "97": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 92
        }
      },
      "98": {
        start: {
          line: 258,
          column: 61
        },
        end: {
          line: 258,
          column: 89
        }
      },
      "99": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 136
        }
      },
      "100": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 64
        }
      },
      "101": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 23
        }
      },
      "102": {
        start: {
          line: 268,
          column: 26
        },
        end: {
          line: 268,
          column: 36
        }
      },
      "103": {
        start: {
          line: 269,
          column: 32
        },
        end: {
          line: 269,
          column: 63
        }
      },
      "104": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "105": {
        start: {
          line: 272,
          column: 35
        },
        end: {
          line: 272,
          column: 71
        }
      },
      "106": {
        start: {
          line: 273,
          column: 31
        },
        end: {
          line: 273,
          column: 70
        }
      },
      "107": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 112
        }
      },
      "108": {
        start: {
          line: 277,
          column: 35
        },
        end: {
          line: 279,
          column: 14
        }
      },
      "109": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 119
        }
      },
      "110": {
        start: {
          line: 278,
          column: 33
        },
        end: {
          line: 278,
          column: 76
        }
      },
      "111": {
        start: {
          line: 280,
          column: 37
        },
        end: {
          line: 280,
          column: 84
        }
      },
      "112": {
        start: {
          line: 281,
          column: 32
        },
        end: {
          line: 281,
          column: 86
        }
      },
      "113": {
        start: {
          line: 282,
          column: 30
        },
        end: {
          line: 282,
          column: 50
        }
      },
      "114": {
        start: {
          line: 284,
          column: 37
        },
        end: {
          line: 284,
          column: 108
        }
      },
      "115": {
        start: {
          line: 285,
          column: 40
        },
        end: {
          line: 285,
          column: 87
        }
      },
      "116": {
        start: {
          line: 285,
          column: 73
        },
        end: {
          line: 285,
          column: 86
        }
      },
      "117": {
        start: {
          line: 286,
          column: 34
        },
        end: {
          line: 286,
          column: 56
        }
      },
      "118": {
        start: {
          line: 287,
          column: 27
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "119": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 26
        }
      },
      "120": {
        start: {
          line: 306,
          column: 34
        },
        end: {
          line: 306,
          column: 56
        }
      },
      "121": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 318,
          column: 14
        }
      },
      "122": {
        start: {
          line: 325,
          column: 25
        },
        end: {
          line: 325,
          column: 53
        }
      },
      "123": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 326,
          column: 55
        }
      },
      "124": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "125": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 26
        }
      },
      "126": {
        start: {
          line: 330,
          column: 29
        },
        end: {
          line: 330,
          column: 65
        }
      },
      "127": {
        start: {
          line: 330,
          column: 51
        },
        end: {
          line: 330,
          column: 54
        }
      },
      "128": {
        start: {
          line: 331,
          column: 22
        },
        end: {
          line: 340,
          column: 5
        }
      },
      "129": {
        start: {
          line: 341,
          column: 26
        },
        end: {
          line: 341,
          column: 76
        }
      },
      "130": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "131": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 114
        }
      },
      "132": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 52
        }
      },
      "133": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 25
        }
      },
      "134": {
        start: {
          line: 353,
          column: 28
        },
        end: {
          line: 368,
          column: 10
        }
      },
      "135": {
        start: {
          line: 354,
          column: 31
        },
        end: {
          line: 364,
          column: 8
        }
      },
      "136": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "137": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 216
        }
      },
      "138": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 29
        }
      },
      "139": {
        start: {
          line: 375,
          column: 25
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "140": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 51
        }
      },
      "141": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 47
        }
      },
      "142": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 396,
          column: 11
        }
      },
      "143": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 58
        }
      },
      "144": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 102
        }
      },
      "145": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 401,
          column: 11
        }
      },
      "146": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 50
        }
      },
      "147": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 81
        }
      },
      "148": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 406,
          column: 11
        }
      },
      "149": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 56
        }
      },
      "150": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 45
        }
      },
      "151": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 410,
          column: 11
        }
      },
      "152": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 65
        }
      },
      "153": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 51
        }
      },
      "154": {
        start: {
          line: 416,
          column: 56
        },
        end: {
          line: 416,
          column: 59
        }
      },
      "155": {
        start: {
          line: 418,
          column: 26
        },
        end: {
          line: 418,
          column: 65
        }
      },
      "156": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 120
        }
      },
      "157": {
        start: {
          line: 420,
          column: 24
        },
        end: {
          line: 420,
          column: 51
        }
      },
      "158": {
        start: {
          line: 421,
          column: 26
        },
        end: {
          line: 421,
          column: 87
        }
      },
      "159": {
        start: {
          line: 422,
          column: 29
        },
        end: {
          line: 422,
          column: 30
        }
      },
      "160": {
        start: {
          line: 423,
          column: 26
        },
        end: {
          line: 423,
          column: 27
        }
      },
      "161": {
        start: {
          line: 425,
          column: 26
        },
        end: {
          line: 425,
          column: 78
        }
      },
      "162": {
        start: {
          line: 426,
          column: 24
        },
        end: {
          line: 426,
          column: 26
        }
      },
      "163": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "164": {
        start: {
          line: 427,
          column: 21
        },
        end: {
          line: 427,
          column: 22
        }
      },
      "165": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 60
        }
      },
      "166": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "167": {
        start: {
          line: 431,
          column: 34
        },
        end: {
          line: 477,
          column: 14
        }
      },
      "168": {
        start: {
          line: 432,
          column: 32
        },
        end: {
          line: 432,
          column: 57
        }
      },
      "169": {
        start: {
          line: 433,
          column: 36
        },
        end: {
          line: 433,
          column: 83
        }
      },
      "170": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 476,
          column: 17
        }
      },
      "171": {
        start: {
          line: 435,
          column: 35
        },
        end: {
          line: 435,
          column: 127
        }
      },
      "172": {
        start: {
          line: 436,
          column: 20
        },
        end: {
          line: 436,
          column: 50
        }
      },
      "173": {
        start: {
          line: 437,
          column: 20
        },
        end: {
          line: 437,
          column: 37
        }
      },
      "174": {
        start: {
          line: 438,
          column: 20
        },
        end: {
          line: 444,
          column: 21
        }
      },
      "175": {
        start: {
          line: 439,
          column: 24
        },
        end: {
          line: 439,
          column: 38
        }
      },
      "176": {
        start: {
          line: 441,
          column: 24
        },
        end: {
          line: 443,
          column: 25
        }
      },
      "177": {
        start: {
          line: 442,
          column: 28
        },
        end: {
          line: 442,
          column: 77
        }
      },
      "178": {
        start: {
          line: 445,
          column: 37
        },
        end: {
          line: 445,
          column: 84
        }
      },
      "179": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 453,
          column: 23
        }
      },
      "180": {
        start: {
          line: 456,
          column: 20
        },
        end: {
          line: 456,
          column: 34
        }
      },
      "181": {
        start: {
          line: 457,
          column: 40
        },
        end: {
          line: 468,
          column: 21
        }
      },
      "182": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 469,
          column: 55
        }
      },
      "183": {
        start: {
          line: 470,
          column: 20
        },
        end: {
          line: 472,
          column: 21
        }
      },
      "184": {
        start: {
          line: 471,
          column: 24
        },
        end: {
          line: 471,
          column: 36
        }
      },
      "185": {
        start: {
          line: 475,
          column: 20
        },
        end: {
          line: 475,
          column: 30
        }
      },
      "186": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 45
        }
      },
      "187": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 482,
          column: 13
        }
      },
      "188": {
        start: {
          line: 481,
          column: 16
        },
        end: {
          line: 481,
          column: 54
        }
      },
      "189": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 136
        }
      },
      "190": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 73
        }
      },
      "191": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 23
        }
      },
      "192": {
        start: {
          line: 493,
          column: 26
        },
        end: {
          line: 493,
          column: 56
        }
      },
      "193": {
        start: {
          line: 494,
          column: 32
        },
        end: {
          line: 494,
          column: 63
        }
      },
      "194": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 551,
          column: 9
        }
      },
      "195": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 504,
          column: 13
        }
      },
      "196": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 70
        }
      },
      "197": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 69
        }
      },
      "198": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 503,
          column: 99
        }
      },
      "199": {
        start: {
          line: 506,
          column: 27
        },
        end: {
          line: 506,
          column: 112
        }
      },
      "200": {
        start: {
          line: 508,
          column: 35
        },
        end: {
          line: 510,
          column: 14
        }
      },
      "201": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 509,
          column: 119
        }
      },
      "202": {
        start: {
          line: 509,
          column: 33
        },
        end: {
          line: 509,
          column: 76
        }
      },
      "203": {
        start: {
          line: 511,
          column: 37
        },
        end: {
          line: 511,
          column: 84
        }
      },
      "204": {
        start: {
          line: 512,
          column: 32
        },
        end: {
          line: 512,
          column: 86
        }
      },
      "205": {
        start: {
          line: 513,
          column: 30
        },
        end: {
          line: 513,
          column: 50
        }
      },
      "206": {
        start: {
          line: 515,
          column: 37
        },
        end: {
          line: 515,
          column: 108
        }
      },
      "207": {
        start: {
          line: 516,
          column: 40
        },
        end: {
          line: 516,
          column: 87
        }
      },
      "208": {
        start: {
          line: 516,
          column: 73
        },
        end: {
          line: 516,
          column: 86
        }
      },
      "209": {
        start: {
          line: 517,
          column: 34
        },
        end: {
          line: 517,
          column: 76
        }
      },
      "210": {
        start: {
          line: 518,
          column: 27
        },
        end: {
          line: 534,
          column: 13
        }
      },
      "211": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 26
        }
      },
      "212": {
        start: {
          line: 538,
          column: 34
        },
        end: {
          line: 538,
          column: 76
        }
      },
      "213": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 550,
          column: 14
        }
      },
      "214": {
        start: {
          line: 557,
          column: 28
        },
        end: {
          line: 573,
          column: 10
        }
      },
      "215": {
        start: {
          line: 558,
          column: 31
        },
        end: {
          line: 569,
          column: 8
        }
      },
      "216": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 572,
          column: 13
        }
      },
      "217": {
        start: {
          line: 571,
          column: 16
        },
        end: {
          line: 571,
          column: 230
        }
      },
      "218": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 574,
          column: 29
        }
      },
      "219": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 581,
          column: 34
        }
      },
      "220": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 585,
          column: 26
        }
      },
      "221": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 584,
          column: 33
        }
      },
      "222": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 586,
          column: 60
        }
      },
      "223": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 599,
          column: 9
        }
      },
      "224": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 54
        }
      },
      "225": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 59
        }
      },
      "226": {
        start: {
          line: 598,
          column: 12
        },
        end: {
          line: 598,
          column: 84
        }
      },
      "227": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 610,
          column: 9
        }
      },
      "228": {
        start: {
          line: 607,
          column: 12
        },
        end: {
          line: 609,
          column: 13
        }
      },
      "229": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 70
        }
      },
      "230": {
        start: {
          line: 612,
          column: 8
        },
        end: {
          line: 612,
          column: 102
        }
      },
      "231": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 620,
          column: 9
        }
      },
      "232": {
        start: {
          line: 619,
          column: 12
        },
        end: {
          line: 619,
          column: 55
        }
      },
      "233": {
        start: {
          line: 621,
          column: 24
        },
        end: {
          line: 621,
          column: 62
        }
      },
      "234": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 622,
          column: 31
        }
      },
      "235": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 626,
          column: 9
        }
      },
      "236": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 28
        }
      },
      "237": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 630,
          column: 9
        }
      },
      "238": {
        start: {
          line: 629,
          column: 12
        },
        end: {
          line: 629,
          column: 92
        }
      },
      "239": {
        start: {
          line: 636,
          column: 22
        },
        end: {
          line: 636,
          column: 24
        }
      },
      "240": {
        start: {
          line: 637,
          column: 8
        },
        end: {
          line: 649,
          column: 9
        }
      },
      "241": {
        start: {
          line: 638,
          column: 12
        },
        end: {
          line: 648,
          column: 13
        }
      },
      "242": {
        start: {
          line: 639,
          column: 28
        },
        end: {
          line: 639,
          column: 89
        }
      },
      "243": {
        start: {
          line: 639,
          column: 58
        },
        end: {
          line: 639,
          column: 68
        }
      },
      "244": {
        start: {
          line: 640,
          column: 28
        },
        end: {
          line: 640,
          column: 48
        }
      },
      "245": {
        start: {
          line: 641,
          column: 28
        },
        end: {
          line: 641,
          column: 48
        }
      },
      "246": {
        start: {
          line: 642,
          column: 16
        },
        end: {
          line: 647,
          column: 18
        }
      },
      "247": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 650,
          column: 21
        }
      },
      "248": {
        start: {
          line: 656,
          column: 8
        },
        end: {
          line: 656,
          column: 35
        }
      },
      "249": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 657,
          column: 40
        }
      },
      "250": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 658,
          column: 49
        }
      },
      "251": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 665,
          column: 40
        }
      },
      "252": {
        start: {
          line: 666,
          column: 8
        },
        end: {
          line: 666,
          column: 52
        }
      },
      "253": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 672,
          column: 30
        }
      },
      "254": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 673,
          column: 51
        }
      },
      "255": {
        start: {
          line: 679,
          column: 8
        },
        end: {
          line: 679,
          column: 63
        }
      },
      "256": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 680,
          column: 51
        }
      },
      "257": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 686,
          column: 37
        }
      },
      "258": {
        start: {
          line: 687,
          column: 8
        },
        end: {
          line: 687,
          column: 39
        }
      },
      "259": {
        start: {
          line: 688,
          column: 8
        },
        end: {
          line: 688,
          column: 34
        }
      },
      "260": {
        start: {
          line: 691,
          column: 0
        },
        end: {
          line: 691,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 92
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 80
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 38
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 115
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 121
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 39
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 127
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 26
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 142
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 159
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 162,
            column: 61
          },
          end: {
            line: 162,
            column: 62
          }
        },
        loc: {
          start: {
            line: 162,
            column: 76
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 162
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 176,
            column: 79
          },
          end: {
            line: 176,
            column: 80
          }
        },
        loc: {
          start: {
            line: 176,
            column: 93
          },
          end: {
            line: 178,
            column: 17
          }
        },
        line: 176
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 54
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 202
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 211,
            column: 28
          },
          end: {
            line: 211,
            column: 29
          }
        },
        loc: {
          start: {
            line: 211,
            column: 55
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 211
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 258,
            column: 40
          },
          end: {
            line: 258,
            column: 41
          }
        },
        loc: {
          start: {
            line: 258,
            column: 61
          },
          end: {
            line: 258,
            column: 89
          }
        },
        line: 258
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 73
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 267
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 277,
            column: 47
          },
          end: {
            line: 277,
            column: 48
          }
        },
        loc: {
          start: {
            line: 277,
            column: 62
          },
          end: {
            line: 279,
            column: 13
          }
        },
        line: 277
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 278,
            column: 27
          },
          end: {
            line: 278,
            column: 28
          }
        },
        loc: {
          start: {
            line: 278,
            column: 33
          },
          end: {
            line: 278,
            column: 76
          }
        },
        line: 278
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 285,
            column: 63
          },
          end: {
            line: 285,
            column: 64
          }
        },
        loc: {
          start: {
            line: 285,
            column: 73
          },
          end: {
            line: 285,
            column: 86
          }
        },
        line: 285
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 37
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 324
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 330,
            column: 45
          },
          end: {
            line: 330,
            column: 46
          }
        },
        loc: {
          start: {
            line: 330,
            column: 51
          },
          end: {
            line: 330,
            column: 54
          }
        },
        line: 330
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 45
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 352
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 353,
            column: 56
          },
          end: {
            line: 353,
            column: 57
          }
        },
        loc: {
          start: {
            line: 353,
            column: 69
          },
          end: {
            line: 368,
            column: 9
          }
        },
        line: 353
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 112
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 374
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 25
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 391
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 393,
            column: 36
          },
          end: {
            line: 393,
            column: 37
          }
        },
        loc: {
          start: {
            line: 393,
            column: 52
          },
          end: {
            line: 396,
            column: 9
          }
        },
        line: 393
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 398,
            column: 37
          },
          end: {
            line: 398,
            column: 38
          }
        },
        loc: {
          start: {
            line: 398,
            column: 46
          },
          end: {
            line: 401,
            column: 9
          }
        },
        line: 398
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 403,
            column: 48
          },
          end: {
            line: 403,
            column: 49
          }
        },
        loc: {
          start: {
            line: 403,
            column: 59
          },
          end: {
            line: 406,
            column: 9
          }
        },
        line: 403
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 407,
            column: 54
          },
          end: {
            line: 407,
            column: 55
          }
        },
        loc: {
          start: {
            line: 407,
            column: 65
          },
          end: {
            line: 410,
            column: 9
          }
        },
        line: 407
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 415,
            column: 4
          },
          end: {
            line: 415,
            column: 5
          }
        },
        loc: {
          start: {
            line: 415,
            column: 63
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 415
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 431,
            column: 44
          },
          end: {
            line: 431,
            column: 45
          }
        },
        loc: {
          start: {
            line: 431,
            column: 76
          },
          end: {
            line: 477,
            column: 13
          }
        },
        line: 431
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        loc: {
          start: {
            line: 492,
            column: 82
          },
          end: {
            line: 552,
            column: 5
          }
        },
        line: 492
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 508,
            column: 47
          },
          end: {
            line: 508,
            column: 48
          }
        },
        loc: {
          start: {
            line: 508,
            column: 62
          },
          end: {
            line: 510,
            column: 13
          }
        },
        line: 508
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 509,
            column: 27
          },
          end: {
            line: 509,
            column: 28
          }
        },
        loc: {
          start: {
            line: 509,
            column: 33
          },
          end: {
            line: 509,
            column: 76
          }
        },
        line: 509
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 516,
            column: 63
          },
          end: {
            line: 516,
            column: 64
          }
        },
        loc: {
          start: {
            line: 516,
            column: 73
          },
          end: {
            line: 516,
            column: 86
          }
        },
        line: 516
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 556,
            column: 4
          },
          end: {
            line: 556,
            column: 5
          }
        },
        loc: {
          start: {
            line: 556,
            column: 54
          },
          end: {
            line: 575,
            column: 5
          }
        },
        line: 556
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 557,
            column: 56
          },
          end: {
            line: 557,
            column: 57
          }
        },
        loc: {
          start: {
            line: 557,
            column: 69
          },
          end: {
            line: 573,
            column: 9
          }
        },
        line: 557
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 579,
            column: 4
          },
          end: {
            line: 579,
            column: 5
          }
        },
        loc: {
          start: {
            line: 579,
            column: 30
          },
          end: {
            line: 587,
            column: 5
          }
        },
        line: 579
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 583,
            column: 20
          },
          end: {
            line: 583,
            column: 21
          }
        },
        loc: {
          start: {
            line: 583,
            column: 26
          },
          end: {
            line: 585,
            column: 9
          }
        },
        line: 583
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 591,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        },
        loc: {
          start: {
            line: 591,
            column: 31
          },
          end: {
            line: 600,
            column: 5
          }
        },
        line: 591
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 604,
            column: 4
          },
          end: {
            line: 604,
            column: 5
          }
        },
        loc: {
          start: {
            line: 604,
            column: 20
          },
          end: {
            line: 613,
            column: 5
          }
        },
        line: 604
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 617,
            column: 4
          },
          end: {
            line: 617,
            column: 5
          }
        },
        loc: {
          start: {
            line: 617,
            column: 42
          },
          end: {
            line: 631,
            column: 5
          }
        },
        line: 617
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 635,
            column: 4
          },
          end: {
            line: 635,
            column: 5
          }
        },
        loc: {
          start: {
            line: 635,
            column: 26
          },
          end: {
            line: 651,
            column: 5
          }
        },
        line: 635
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 639,
            column: 43
          },
          end: {
            line: 639,
            column: 44
          }
        },
        loc: {
          start: {
            line: 639,
            column: 58
          },
          end: {
            line: 639,
            column: 68
          }
        },
        line: 639
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 655,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        },
        loc: {
          start: {
            line: 655,
            column: 18
          },
          end: {
            line: 659,
            column: 5
          }
        },
        line: 655
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 663,
            column: 4
          },
          end: {
            line: 663,
            column: 5
          }
        },
        loc: {
          start: {
            line: 663,
            column: 23
          },
          end: {
            line: 667,
            column: 5
          }
        },
        line: 663
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 671,
            column: 4
          },
          end: {
            line: 671,
            column: 5
          }
        },
        loc: {
          start: {
            line: 671,
            column: 20
          },
          end: {
            line: 674,
            column: 5
          }
        },
        line: 671
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 678,
            column: 4
          },
          end: {
            line: 678,
            column: 5
          }
        },
        loc: {
          start: {
            line: 678,
            column: 31
          },
          end: {
            line: 681,
            column: 5
          }
        },
        line: 678
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 685,
            column: 4
          },
          end: {
            line: 685,
            column: 5
          }
        },
        loc: {
          start: {
            line: 685,
            column: 21
          },
          end: {
            line: 689,
            column: 5
          }
        },
        line: 685
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 19
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 19
          },
          end: {
            line: 45,
            column: 30
          }
        }, {
          start: {
            line: 45,
            column: 34
          },
          end: {
            line: 52,
            column: 13
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 22
          },
          end: {
            line: 46,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 22
          },
          end: {
            line: 46,
            column: 44
          }
        }, {
          start: {
            line: 46,
            column: 48
          },
          end: {
            line: 46,
            column: 59
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 47,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 47,
            column: 53
          }
        }, {
          start: {
            line: 47,
            column: 57
          },
          end: {
            line: 47,
            column: 63
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 43
          },
          end: {
            line: 69,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 43
          },
          end: {
            line: 69,
            column: 75
          }
        }, {
          start: {
            line: 69,
            column: 79
          },
          end: {
            line: 69,
            column: 83
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 70,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 70,
            column: 65
          }
        }, {
          start: {
            line: 70,
            column: 69
          },
          end: {
            line: 70,
            column: 73
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 71,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 71,
            column: 61
          }
        }, {
          start: {
            line: 71,
            column: 65
          },
          end: {
            line: 71,
            column: 71
          }
        }],
        line: 71
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 78
          },
          end: {
            line: 80,
            column: 90
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 80,
            column: 89
          },
          end: {
            line: 80,
            column: 90
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 37
          },
          end: {
            line: 88,
            column: 43
          }
        }, {
          start: {
            line: 88,
            column: 46
          },
          end: {
            line: 88,
            column: 78
          }
        }],
        line: 88
      },
      "11": {
        loc: {
          start: {
            line: 88,
            column: 46
          },
          end: {
            line: 88,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 62
          },
          end: {
            line: 88,
            column: 67
          }
        }, {
          start: {
            line: 88,
            column: 70
          },
          end: {
            line: 88,
            column: 78
          }
        }],
        line: 88
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 116,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 116,
            column: 47
          }
        }, {
          start: {
            line: 116,
            column: 51
          },
          end: {
            line: 116,
            column: 55
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 171,
            column: 30
          },
          end: {
            line: 171,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 50
          },
          end: {
            line: 171,
            column: 56
          }
        }, {
          start: {
            line: 171,
            column: 59
          },
          end: {
            line: 171,
            column: 96
          }
        }],
        line: 171
      },
      "16": {
        loc: {
          start: {
            line: 171,
            column: 59
          },
          end: {
            line: 171,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 80
          },
          end: {
            line: 171,
            column: 85
          }
        }, {
          start: {
            line: 171,
            column: 88
          },
          end: {
            line: 171,
            column: 96
          }
        }],
        line: 171
      },
      "17": {
        loc: {
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "18": {
        loc: {
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 222,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 222,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "19": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "20": {
        loc: {
          start: {
            line: 273,
            column: 42
          },
          end: {
            line: 273,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 42
          },
          end: {
            line: 273,
            column: 61
          }
        }, {
          start: {
            line: 273,
            column: 65
          },
          end: {
            line: 273,
            column: 69
          }
        }],
        line: 273
      },
      "21": {
        loc: {
          start: {
            line: 278,
            column: 78
          },
          end: {
            line: 278,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 78
          },
          end: {
            line: 278,
            column: 108
          }
        }, {
          start: {
            line: 278,
            column: 112
          },
          end: {
            line: 278,
            column: 117
          }
        }],
        line: 278
      },
      "22": {
        loc: {
          start: {
            line: 298,
            column: 34
          },
          end: {
            line: 298,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 34
          },
          end: {
            line: 298,
            column: 56
          }
        }, {
          start: {
            line: 298,
            column: 60
          },
          end: {
            line: 298,
            column: 61
          }
        }],
        line: 298
      },
      "23": {
        loc: {
          start: {
            line: 299,
            column: 35
          },
          end: {
            line: 299,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 35
          },
          end: {
            line: 299,
            column: 64
          }
        }, {
          start: {
            line: 299,
            column: 68
          },
          end: {
            line: 299,
            column: 69
          }
        }],
        line: 299
      },
      "24": {
        loc: {
          start: {
            line: 300,
            column: 40
          },
          end: {
            line: 300,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 40
          },
          end: {
            line: 300,
            column: 62
          }
        }, {
          start: {
            line: 300,
            column: 66
          },
          end: {
            line: 300,
            column: 67
          }
        }],
        line: 300
      },
      "25": {
        loc: {
          start: {
            line: 300,
            column: 72
          },
          end: {
            line: 300,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 72
          },
          end: {
            line: 300,
            column: 101
          }
        }, {
          start: {
            line: 300,
            column: 105
          },
          end: {
            line: 300,
            column: 106
          }
        }],
        line: 300
      },
      "26": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "27": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "28": {
        loc: {
          start: {
            line: 366,
            column: 92
          },
          end: {
            line: 366,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 366,
            column: 108
          },
          end: {
            line: 366,
            column: 109
          }
        }, {
          start: {
            line: 366,
            column: 112
          },
          end: {
            line: 366,
            column: 113
          }
        }],
        line: 366
      },
      "29": {
        loc: {
          start: {
            line: 374,
            column: 75
          },
          end: {
            line: 374,
            column: 93
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 374,
            column: 92
          },
          end: {
            line: 374,
            column: 93
          }
        }],
        line: 374
      },
      "30": {
        loc: {
          start: {
            line: 374,
            column: 95
          },
          end: {
            line: 374,
            column: 110
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 374,
            column: 109
          },
          end: {
            line: 374,
            column: 110
          }
        }],
        line: 374
      },
      "31": {
        loc: {
          start: {
            line: 438,
            column: 20
          },
          end: {
            line: 444,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 20
          },
          end: {
            line: 444,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "32": {
        loc: {
          start: {
            line: 441,
            column: 24
          },
          end: {
            line: 443,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 24
          },
          end: {
            line: 443,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "33": {
        loc: {
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 472,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 472,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "34": {
        loc: {
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 482,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 482,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "35": {
        loc: {
          start: {
            line: 500,
            column: 40
          },
          end: {
            line: 500,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 500,
            column: 40
          },
          end: {
            line: 500,
            column: 59
          }
        }, {
          start: {
            line: 500,
            column: 63
          },
          end: {
            line: 500,
            column: 67
          }
        }],
        line: 500
      },
      "36": {
        loc: {
          start: {
            line: 509,
            column: 78
          },
          end: {
            line: 509,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 509,
            column: 78
          },
          end: {
            line: 509,
            column: 108
          }
        }, {
          start: {
            line: 509,
            column: 112
          },
          end: {
            line: 509,
            column: 117
          }
        }],
        line: 509
      },
      "37": {
        loc: {
          start: {
            line: 529,
            column: 34
          },
          end: {
            line: 529,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 34
          },
          end: {
            line: 529,
            column: 56
          }
        }, {
          start: {
            line: 529,
            column: 60
          },
          end: {
            line: 529,
            column: 61
          }
        }],
        line: 529
      },
      "38": {
        loc: {
          start: {
            line: 530,
            column: 35
          },
          end: {
            line: 530,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 530,
            column: 35
          },
          end: {
            line: 530,
            column: 64
          }
        }, {
          start: {
            line: 530,
            column: 68
          },
          end: {
            line: 530,
            column: 69
          }
        }],
        line: 530
      },
      "39": {
        loc: {
          start: {
            line: 531,
            column: 40
          },
          end: {
            line: 531,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 531,
            column: 40
          },
          end: {
            line: 531,
            column: 62
          }
        }, {
          start: {
            line: 531,
            column: 66
          },
          end: {
            line: 531,
            column: 67
          }
        }],
        line: 531
      },
      "40": {
        loc: {
          start: {
            line: 531,
            column: 72
          },
          end: {
            line: 531,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 531,
            column: 72
          },
          end: {
            line: 531,
            column: 101
          }
        }, {
          start: {
            line: 531,
            column: 105
          },
          end: {
            line: 531,
            column: 106
          }
        }],
        line: 531
      },
      "41": {
        loc: {
          start: {
            line: 571,
            column: 92
          },
          end: {
            line: 571,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 571,
            column: 108
          },
          end: {
            line: 571,
            column: 109
          }
        }, {
          start: {
            line: 571,
            column: 112
          },
          end: {
            line: 571,
            column: 113
          }
        }],
        line: 571
      },
      "42": {
        loc: {
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 609,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 609,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 607
      },
      "43": {
        loc: {
          start: {
            line: 618,
            column: 8
          },
          end: {
            line: 620,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 8
          },
          end: {
            line: 620,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 618
      },
      "44": {
        loc: {
          start: {
            line: 624,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 624,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 624
      },
      "45": {
        loc: {
          start: {
            line: 628,
            column: 8
          },
          end: {
            line: 630,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 628,
            column: 8
          },
          end: {
            line: 630,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 628
      },
      "46": {
        loc: {
          start: {
            line: 638,
            column: 12
          },
          end: {
            line: 648,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 12
          },
          end: {
            line: 648,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 638
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/testing/TestQueueManager.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/testing/TestQueueManager.ts"],
      sourcesContent: ["import Bull from 'bull';\nimport { v4 as uuidv4 } from 'uuid';\nimport { EventEmitter } from 'events';\nimport { llmService } from '../llmService';\nimport { db } from '../../database/connection';\nimport { Semaphore } from './Semaphore';\nimport { ResourceManager, ResourceRequirement } from './ResourceManager';\nimport { performance } from 'perf_hooks';\nimport { Worker } from 'worker_threads';\nimport { LRUCache } from 'lru-cache';\nimport { promisify } from 'util';\nimport { setTimeout as setTimeoutPromise } from 'timers/promises';\n\nexport interface TestJob {\n  test_execution_id: string;\n  prompt_card_id: number;\n  test_case_ids: number[];\n  model: string;\n  configuration: TestConfiguration;\n  priority: number;\n  user_id?: string;\n  created_at: Date;\n}\n\nexport interface TestConfiguration {\n  max_concurrent_tests: number;\n  timeout_per_test: number;\n  retry_failed_tests: boolean;\n  max_retries: number;\n  stop_on_first_failure: boolean;\n  resource_limits: {\n    memory_mb: number;\n    cpu_percent: number;\n  };\n  cache_enabled: boolean;\n  progress_updates: boolean;\n}\n\nexport interface TestCase {\n  id: number;\n  name: string;\n  prompt_card_id: number;\n  input_variables: string; // JSON\n  assertions: string; // JSON\n  expected_output?: string;\n  prompt_template: string;\n}\n\nexport interface TestExecutionResult {\n  execution_id: string;\n  test_case_id: number;\n  passed: boolean;\n  llm_output: string;\n  assertion_results: Array<{\n    assertion: any;\n    passed: boolean;\n    error?: string;\n  }>;\n  execution_time_ms: number;\n  model: string;\n  prompt_used: string;\n  created_at: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface ExecutionProgress {\n  job_id: string;\n  percent: number;\n  message: string;\n  current_test: number;\n  total_tests: number;\n  completed_tests: number;\n  failed_tests: number;\n  updated_at: Date;\n}\n\nexport class TestQueueManager extends EventEmitter {\n  private testQueue: Bull.Queue<TestJob>;\n  private resourceManager: ResourceManager;\n  private defaultConfiguration: TestConfiguration;\n  private activeJobs: Map<string, ExecutionProgress> = new Map();\n  private testCaseCache: LRUCache<string, TestCase[]>;\n  private performanceMetrics: Map<string, number[]>;\n  private connectionPool: any[];\n  private maxConnections: number;\n  private batchProcessor: any;\n  private workerPool: Worker[];\n\n  constructor(redisConfig?: Bull.QueueOptions['redis']) {\n    super();\n    \n    this.defaultConfiguration = {\n      max_concurrent_tests: Math.min(8, require('os').cpus().length * 2), // Dynamic based on CPU cores\n      timeout_per_test: 30000, // 30 seconds\n      retry_failed_tests: true,\n      max_retries: 2,\n      stop_on_first_failure: false,\n      resource_limits: {\n        memory_mb: 512,\n        cpu_percent: 20\n      },\n      cache_enabled: true,\n      progress_updates: true\n    };\n\n    // Initialize caching\n    this.testCaseCache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 10 // 10 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.maxConnections = Math.min(10, require('os').cpus().length * 2);\n    this.connectionPool = [];\n    this.workerPool = [];\n\n    // Initialize Redis queue with optimized settings\n    this.testQueue = new Bull('test-execution', {\n      redis: redisConfig as any || {\n        host: process.env.REDIS_HOST || 'localhost',\n        port: parseInt(process.env.REDIS_PORT || '6379'),\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: false,\n        maxLoadingTimeout: 1000\n      },\n      defaultJobOptions: {\n        removeOnComplete: 100,\n        removeOnFail: 50,\n        attempts: 3,\n        backoff: {\n          type: 'exponential',\n          delay: 2000\n        }\n      },\n      settings: {\n        stalledInterval: 30000,\n        maxStalledCount: 1\n      }\n    });\n\n    // Initialize resource manager with better defaults\n    this.resourceManager = new ResourceManager({\n      max_concurrent_tests: parseInt(process.env.MAX_CONCURRENT_TESTS || '20'),\n      max_cpu_percent: parseInt(process.env.MAX_CPU_PERCENT || '80'),\n      max_memory_mb: parseInt(process.env.MAX_MEMORY_MB || '4096')\n    });\n\n    this.setupJobProcessors();\n    this.setupEventHandlers();\n    this.initializeOptimizations();\n  }\n\n  /**\n   * Queue a test execution job\n   */\n  async queueTestExecution(\n    promptCardId: number,\n    testCaseIds: number[],\n    model: string,\n    configuration?: Partial<TestConfiguration>,\n    priority: number = 0\n  ): Promise<string> {\n    const executionId = uuidv4();\n    const config = { ...this.defaultConfiguration, ...configuration };\n\n    // Check resource availability\n    const resourceReq: ResourceRequirement = {\n      cpu_percent: config.resource_limits.cpu_percent,\n      memory_mb: config.resource_limits.memory_mb,\n      concurrent_tests: config.max_concurrent_tests,\n      priority: priority > 5 ? 'high' : priority < -5 ? 'low' : 'medium'\n    };\n\n    const hasResources = await this.resourceManager.checkResourceAvailability(resourceReq);\n    if (!hasResources) {\n      throw new Error('Insufficient system resources for test execution');\n    }\n\n    const job: TestJob = {\n      test_execution_id: executionId,\n      prompt_card_id: promptCardId,\n      test_case_ids: testCaseIds,\n      model,\n      configuration: config,\n      priority,\n      created_at: new Date()\n    };\n\n    // Add to queue\n    const queueJob = await this.testQueue.add('execute-tests', job, {\n      priority: priority,\n      delay: 0,\n      jobId: executionId\n    });\n\n    this.emit('jobQueued', { executionId, jobId: queueJob.id });\n    return executionId;\n  }\n\n  /**\n   * Get execution progress\n   */\n  getExecutionProgress(executionId: string): ExecutionProgress | null {\n    return this.activeJobs.get(executionId) || null;\n  }\n\n  /**\n   * Get all active executions\n   */\n  getActiveExecutions(): ExecutionProgress[] {\n    return Array.from(this.activeJobs.values());\n  }\n\n  /**\n   * Cancel a test execution\n   */\n  async cancelExecution(executionId: string): Promise<boolean> {\n    const job = await this.testQueue.getJob(executionId);\n    if (job) {\n      await job.remove();\n      this.activeJobs.delete(executionId);\n      \n      // Release resources\n      await this.resourceManager.releaseResources(executionId);\n      \n      this.emit('jobCancelled', { executionId });\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get queue statistics\n   */\n  async getQueueStats(): Promise<{\n    waiting: number;\n    active: number;\n    completed: number;\n    failed: number;\n    delayed: number;\n  }> {\n    const waiting = await this.testQueue.getWaiting();\n    const active = await this.testQueue.getActive();\n    const completed = await this.testQueue.getCompleted();\n    const failed = await this.testQueue.getFailed();\n    const delayed = await this.testQueue.getDelayed();\n\n    return {\n      waiting: waiting.length,\n      active: active.length,\n      completed: completed.length,\n      failed: failed.length,\n      delayed: delayed.length\n    };\n  }\n\n  /**\n   * Setup job processors with optimized concurrency\n   */\n  private setupJobProcessors(): void {\n    // Main test execution processor with dynamic concurrency\n    const concurrency = Math.min(5, require('os').cpus().length);\n    \n    this.testQueue.process('execute-tests', concurrency, async (job: Bull.Job<TestJob>) => {\n      const { data } = job;\n      const startTime = performance.now();\n      \n      try {\n        // Reserve resources with priority handling\n        await this.resourceManager.reserveResources(data.test_execution_id, {\n          cpu_percent: data.configuration.resource_limits.cpu_percent,\n          memory_mb: data.configuration.resource_limits.memory_mb,\n          concurrent_tests: data.configuration.max_concurrent_tests,\n          priority: data.priority > 5 ? 'high' : data.priority < -5 ? 'low' : 'medium'\n        });\n\n        // Initialize progress tracking\n        this.updateProgress(data.test_execution_id, 0, 'Starting test execution...', 0, data.test_case_ids.length);\n\n        // Execute tests with optimized parallel processing\n        const results = await this.executeTestsParallelOptimized(data, (progress) => {\n          this.updateProgress(\n            data.test_execution_id,\n            progress.percent,\n            progress.message,\n            progress.current_test,\n            progress.total_tests,\n            progress.completed_tests,\n            progress.failed_tests\n          );\n        });\n\n        // Update final progress\n        this.updateProgress(data.test_execution_id, 100, 'Test execution completed', data.test_case_ids.length, data.test_case_ids.length);\n\n        // Track performance\n        const executionTime = performance.now() - startTime;\n        this.trackPerformance('executeTests', executionTime);\n\n        this.emit('jobCompleted', { executionId: data.test_execution_id, results });\n        return results;\n\n      } catch (error) {\n        this.updateProgress(data.test_execution_id, -1, `Error: ${error.message}`, 0, data.test_case_ids.length);\n        this.emit('jobFailed', { executionId: data.test_execution_id, error: error.message });\n        throw error;\n      } finally {\n        // Release resources\n        await this.resourceManager.releaseResources(data.test_execution_id);\n        this.activeJobs.delete(data.test_execution_id);\n      }\n    });\n  }\n\n  /**\n   * Execute tests in parallel with resource management\n   */\n  private async executeTestsParallel(\n    job: TestJob,\n    progressCallback: (progress: {\n      percent: number;\n      message: string;\n      current_test: number;\n      total_tests: number;\n      completed_tests?: number;\n      failed_tests?: number;\n    }) => void\n  ): Promise<TestExecutionResult[]> {\n    const { test_case_ids, model, configuration } = job;\n    \n    // Load test cases with prompt template\n    const testCases = await this.loadTestCases(test_case_ids);\n    progressCallback({ percent: 10, message: 'Test cases loaded', current_test: 0, total_tests: testCases.length });\n\n    const results: TestExecutionResult[] = [];\n    const semaphore = new Semaphore(configuration.max_concurrent_tests);\n    let completedTests = 0;\n    let failedTests = 0;\n\n    const executeTest = async (testCase: TestCase, index: number): Promise<void> => {\n      const release = await semaphore.acquire();\n      \n      try {\n        const result = await this.executeSingleTest(testCase, model, configuration, job.test_execution_id);\n        results[index] = result;\n        completedTests++;\n        \n        if (!result.passed) {\n          failedTests++;\n          \n          // Stop on first failure if configured\n          if (configuration.stop_on_first_failure) {\n            throw new Error(`Test failed: ${testCase.name}`);\n          }\n        }\n\n        const progress = ((completedTests) / testCases.length) * 80 + 10;\n        progressCallback({\n          percent: progress,\n          message: `Completed test ${completedTests}/${testCases.length}`,\n          current_test: index + 1,\n          total_tests: testCases.length,\n          completed_tests: completedTests,\n          failed_tests: failedTests\n        });\n\n      } catch (error) {\n        failedTests++;\n        const errorResult: TestExecutionResult = {\n          execution_id: `${job.test_execution_id}-${testCase.id}`,\n          test_case_id: testCase.id,\n          passed: false,\n          llm_output: `ERROR: ${error.message}`,\n          assertion_results: [],\n          execution_time_ms: 0,\n          model,\n          prompt_used: 'Error occurred before prompt execution',\n          created_at: new Date(),\n          metadata: { error: error.message }\n        };\n        results[index] = errorResult;\n        \n        if (configuration.stop_on_first_failure) {\n          throw error;\n        }\n      } finally {\n        release();\n      }\n    };\n\n    // Execute all tests in parallel with concurrency control\n    await Promise.all(\n      testCases.map((testCase, index) => executeTest(testCase, index))\n    );\n\n    progressCallback({ percent: 95, message: 'Storing results...', current_test: testCases.length, total_tests: testCases.length });\n\n    // Store results in database\n    await this.storeResults(job.test_execution_id, results);\n\n    return results;\n  }\n\n  /**\n   * Execute a single test case\n   */\n  private async executeSingleTest(\n    testCase: TestCase,\n    model: string,\n    configuration: TestConfiguration,\n    executionId: string\n  ): Promise<TestExecutionResult> {\n    const startTime = Date.now();\n    const testExecutionId = `${executionId}-${testCase.id}`;\n\n    try {\n      // Parse JSON fields\n      const inputVariables = JSON.parse(testCase.input_variables);\n      const assertions = JSON.parse(testCase.assertions || '[]');\n\n      // Substitute variables in prompt template\n      const prompt = llmService.substituteVariables(testCase.prompt_template, inputVariables);\n\n      // Execute with timeout\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Test execution timeout')), configuration.timeout_per_test || 30000);\n      });\n\n      const executionPromise = llmService.generate(prompt, model);\n      const llmResponse = await Promise.race([executionPromise, timeoutPromise]);\n      const llmOutput = llmResponse.response;\n\n      // Validate assertions\n      const assertionResults = await llmService.validateAssertions(llmOutput, assertions);\n      const allAssertionsPassed = assertionResults.every(result => result.passed);\n\n      const executionTime = Date.now() - startTime;\n\n      const result: TestExecutionResult = {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: allAssertionsPassed,\n        llm_output: llmOutput,\n        assertion_results: assertionResults,\n        execution_time_ms: executionTime,\n        model: llmResponse.model,\n        prompt_used: prompt,\n        created_at: new Date(),\n        metadata: {\n          total_tokens: llmResponse.eval_count || 0,\n          prompt_tokens: llmResponse.prompt_eval_count || 0,\n          completion_tokens: (llmResponse.eval_count || 0) - (llmResponse.prompt_eval_count || 0)\n        }\n      };\n\n      return result;\n\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      return {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: false,\n        llm_output: `ERROR: ${error.message}`,\n        assertion_results: [],\n        execution_time_ms: executionTime,\n        model,\n        prompt_used: 'Error occurred before prompt execution',\n        created_at: new Date(),\n        metadata: { error: error.message }\n      };\n    }\n  }\n\n  /**\n   * Load test cases from database with caching\n   */\n  private async loadTestCases(testCaseIds: number[]): Promise<TestCase[]> {\n    const cacheKey = testCaseIds.sort().join(',');\n    const cached = this.testCaseCache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n    \n    const placeholders = testCaseIds.map(() => '?').join(',');\n    const query = `\n      SELECT \n        tc.*,\n        pc.prompt_template,\n        pc.title as prompt_card_title\n      FROM test_cases tc\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tc.id IN (${placeholders})\n      ORDER BY tc.id ASC\n    `;\n\n    const testCases = db.prepare(query).all(...testCaseIds) as TestCase[];\n    \n    if (testCases.length !== testCaseIds.length) {\n      throw new Error(`Some test cases not found. Expected ${testCaseIds.length}, got ${testCases.length}`);\n    }\n\n    // Cache the result\n    this.testCaseCache.set(cacheKey, testCases);\n    \n    return testCases;\n  }\n\n  /**\n   * Store test results in database\n   */\n  private async storeResults(executionId: string, results: TestExecutionResult[]): Promise<void> {\n    const transaction = db.transaction((results: TestExecutionResult[]) => {\n      const insertStmt = db.prepare(`\n        INSERT INTO test_results (\n          test_case_id, \n          execution_id, \n          llm_output, \n          passed, \n          assertion_results, \n          execution_time_ms,\n          created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      for (const result of results) {\n        insertStmt.run(\n          result.test_case_id,\n          result.execution_id,\n          result.llm_output,\n          result.passed ? 1 : 0,\n          JSON.stringify(result.assertion_results),\n          result.execution_time_ms,\n          result.created_at.toISOString()\n        );\n      }\n    });\n\n    transaction(results);\n  }\n\n  /**\n   * Update execution progress\n   */\n  private updateProgress(\n    executionId: string,\n    percent: number,\n    message: string,\n    currentTest: number,\n    totalTests: number,\n    completedTests: number = 0,\n    failedTests: number = 0\n  ): void {\n    const progress: ExecutionProgress = {\n      job_id: executionId,\n      percent,\n      message,\n      current_test: currentTest,\n      total_tests: totalTests,\n      completed_tests: completedTests,\n      failed_tests: failedTests,\n      updated_at: new Date()\n    };\n\n    this.activeJobs.set(executionId, progress);\n    this.emit('progressUpdated', progress);\n  }\n\n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    // Handle failed jobs\n    this.testQueue.on('failed', (job: Bull.Job<TestJob>, error: Error) => {\n      console.error(`Job ${job.id} failed:`, error);\n      this.emit('jobFailed', { executionId: job.data.test_execution_id, error: error.message });\n    });\n\n    // Handle stalled jobs\n    this.testQueue.on('stalled', (job: Bull.Job<TestJob>) => {\n      console.warn(`Job ${job.id} stalled`);\n      this.emit('jobStalled', { executionId: job.data.test_execution_id });\n    });\n\n    // Handle resource manager events\n    this.resourceManager.on('systemStress', (usage) => {\n      console.warn('System under stress:', usage);\n      this.emit('systemStress', usage);\n    });\n\n    this.resourceManager.on('emergencyThreshold', (event) => {\n      console.error('Emergency threshold reached:', event);\n      this.emit('emergencyThreshold', event);\n    });\n  }\n\n  /**\n   * Optimized parallel test execution\n   */\n  private async executeTestsParallelOptimized(\n    job: TestJob,\n    progressCallback: (progress: {\n      percent: number;\n      message: string;\n      current_test: number;\n      total_tests: number;\n      completed_tests?: number;\n      failed_tests?: number;\n    }) => void\n  ): Promise<TestExecutionResult[]> {\n    const { test_case_ids, model, configuration } = job;\n    \n    // Load test cases with caching\n    const testCases = await this.loadTestCases(test_case_ids);\n    progressCallback({ percent: 10, message: 'Test cases loaded', current_test: 0, total_tests: testCases.length });\n\n    const results: TestExecutionResult[] = new Array(testCases.length);\n    const semaphore = new Semaphore(configuration.max_concurrent_tests);\n    let completedTests = 0;\n    let failedTests = 0;\n\n    // Process tests in batches for better memory management\n    const batchSize = Math.min(configuration.max_concurrent_tests * 2, 20);\n    const batches = [];\n    \n    for (let i = 0; i < testCases.length; i += batchSize) {\n      batches.push(testCases.slice(i, i + batchSize));\n    }\n\n    for (const batch of batches) {\n      const batchPromises = batch.map(async (testCase, batchIndex) => {\n        const release = await semaphore.acquire();\n        const globalIndex = batches.indexOf(batch) * batchSize + batchIndex;\n        \n        try {\n          const result = await this.executeSingleTestOptimized(testCase, model, configuration, job.test_execution_id);\n          results[globalIndex] = result;\n          completedTests++;\n          \n          if (!result.passed) {\n            failedTests++;\n            \n            // Stop on first failure if configured\n            if (configuration.stop_on_first_failure) {\n              throw new Error(`Test failed: ${testCase.name}`);\n            }\n          }\n\n          const progress = ((completedTests) / testCases.length) * 80 + 10;\n          progressCallback({\n            percent: progress,\n            message: `Completed test ${completedTests}/${testCases.length}`,\n            current_test: globalIndex + 1,\n            total_tests: testCases.length,\n            completed_tests: completedTests,\n            failed_tests: failedTests\n          });\n\n        } catch (error) {\n          failedTests++;\n          const errorResult: TestExecutionResult = {\n            execution_id: `${job.test_execution_id}-${testCase.id}`,\n            test_case_id: testCase.id,\n            passed: false,\n            llm_output: `ERROR: ${error.message}`,\n            assertion_results: [],\n            execution_time_ms: 0,\n            model,\n            prompt_used: 'Error occurred before prompt execution',\n            created_at: new Date(),\n            metadata: { error: error.message }\n          };\n          results[globalIndex] = errorResult;\n          \n          if (configuration.stop_on_first_failure) {\n            throw error;\n          }\n        } finally {\n          release();\n        }\n      });\n\n      await Promise.all(batchPromises);\n      \n      // Small delay between batches to prevent overwhelming the system\n      if (batches.indexOf(batch) < batches.length - 1) {\n        await setTimeoutPromise(100);\n      }\n    }\n\n    progressCallback({ percent: 95, message: 'Storing results...', current_test: testCases.length, total_tests: testCases.length });\n\n    // Store results in database using batch insertion\n    await this.storeResultsOptimized(job.test_execution_id, results);\n\n    return results;\n  }\n  \n  /**\n   * Execute a single test case with optimizations\n   */\n  private async executeSingleTestOptimized(\n    testCase: TestCase,\n    model: string,\n    configuration: TestConfiguration,\n    executionId: string\n  ): Promise<TestExecutionResult> {\n    const startTime = performance.now();\n    const testExecutionId = `${executionId}-${testCase.id}`;\n\n    try {\n      // Parse JSON fields with error handling\n      let inputVariables, assertions;\n      try {\n        inputVariables = JSON.parse(testCase.input_variables);\n        assertions = JSON.parse(testCase.assertions || '[]');\n      } catch (parseError) {\n        throw new Error(`Invalid JSON in test case ${testCase.id}: ${parseError.message}`);\n      }\n\n      // Substitute variables in prompt template\n      const prompt = llmService.substituteVariables(testCase.prompt_template, inputVariables);\n\n      // Execute with timeout using Promise.race\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Test execution timeout')), configuration.timeout_per_test || 30000);\n      });\n\n      const executionPromise = llmService.generate(prompt, model);\n      const llmResponse = await Promise.race([executionPromise, timeoutPromise]);\n      const llmOutput = llmResponse.response;\n\n      // Validate assertions\n      const assertionResults = await llmService.validateAssertions(llmOutput, assertions);\n      const allAssertionsPassed = assertionResults.every(result => result.passed);\n\n      const executionTime = performance.now() - startTime;\n\n      const result: TestExecutionResult = {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: allAssertionsPassed,\n        llm_output: llmOutput,\n        assertion_results: assertionResults,\n        execution_time_ms: Math.round(executionTime),\n        model: llmResponse.model,\n        prompt_used: prompt,\n        created_at: new Date(),\n        metadata: {\n          total_tokens: llmResponse.eval_count || 0,\n          prompt_tokens: llmResponse.prompt_eval_count || 0,\n          completion_tokens: (llmResponse.eval_count || 0) - (llmResponse.prompt_eval_count || 0),\n          cache_hit: false // Could be enhanced with actual cache hit detection\n        }\n      };\n\n      return result;\n\n    } catch (error) {\n      const executionTime = performance.now() - startTime;\n      return {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: false,\n        llm_output: `ERROR: ${error.message}`,\n        assertion_results: [],\n        execution_time_ms: Math.round(executionTime),\n        model,\n        prompt_used: 'Error occurred before prompt execution',\n        created_at: new Date(),\n        metadata: { error: error.message }\n      };\n    }\n  }\n  \n  /**\n   * Store test results with optimized batch insertion\n   */\n  private async storeResultsOptimized(executionId: string, results: TestExecutionResult[]): Promise<void> {\n    const transaction = db.transaction((results: TestExecutionResult[]) => {\n      const insertStmt = db.prepare(`\n        INSERT INTO test_results (\n          test_case_id, \n          execution_id, \n          llm_output, \n          passed, \n          assertion_results, \n          execution_time_ms,\n          model,\n          created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      for (const result of results) {\n        insertStmt.run(\n          result.test_case_id,\n          result.execution_id,\n          result.llm_output,\n          result.passed ? 1 : 0,\n          JSON.stringify(result.assertion_results),\n          result.execution_time_ms,\n          result.model,\n          result.created_at.toISOString()\n        );\n      }\n    });\n\n    transaction(results);\n  }\n  \n  /**\n   * Initialize performance optimizations\n   */\n  private initializeOptimizations(): void {\n    // Pre-warm database connections\n    this.preWarmConnections();\n    \n    // Set up periodic cache cleanup\n    setInterval(() => {\n      this.cleanupCaches();\n    }, 1000 * 60 * 5); // Every 5 minutes\n    \n    console.log('Test queue optimizations initialized');\n  }\n  \n  /**\n   * Pre-warm database connections\n   */\n  private async preWarmConnections(): Promise<void> {\n    try {\n      // Execute a simple query to warm up the connection\n      db.prepare('SELECT 1').get();\n      console.log('Database connections pre-warmed');\n    } catch (error) {\n      console.warn('Failed to pre-warm database connections:', error.message);\n    }\n  }\n  \n  /**\n   * Clean up caches periodically\n   */\n  private cleanupCaches(): void {\n    // Clean up old performance metrics\n    for (const [key, metrics] of this.performanceMetrics) {\n      if (metrics.length > 1000) {\n        this.performanceMetrics.set(key, metrics.slice(-500));\n      }\n    }\n    \n    // Log cache statistics\n    console.log(`Cache stats - Test cases: ${this.testCaseCache.size}/${this.testCaseCache.max}`);\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 60000) { // 1 minute\n      console.warn(`Slow test execution: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg),\n          max: Math.round(max),\n          min: Math.round(min),\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear caches and metrics\n   */\n  public clearCaches(): void {\n    this.testCaseCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Test queue caches cleared');\n  }\n  \n  /**\n   * Initialize the test queue manager\n   */\n  async initialize(): Promise<void> {\n    // Ensure Redis connection and warm up the system\n    await this.preWarmConnections();\n    console.log('TestQueueManager initialized');\n  }\n\n  /**\n   * Cleanup the test queue manager\n   */\n  async cleanup(): Promise<void> {\n    await this.shutdown();\n    console.log('TestQueueManager cleaned up');\n  }\n\n  /**\n   * Set queue limit for concurrent executions\n   */\n  async setQueueLimit(limit: number): Promise<void> {\n    this.defaultConfiguration.max_concurrent_tests = limit;\n    console.log(`Queue limit set to ${limit}`);\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async shutdown(): Promise<void> {\n    await this.testQueue.close();\n    this.resourceManager.destroy();\n    this.removeAllListeners();\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "defb15b655006aaa3e6edec228eb3f0ab3beedc1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ldo1avzpa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ldo1avzpa();
var __importDefault =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[0]++,
/* istanbul ignore next */
(cov_1ldo1avzpa().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1ldo1avzpa().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1ldo1avzpa().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1ldo1avzpa().f[0]++;
  cov_1ldo1avzpa().s[1]++;
  return /* istanbul ignore next */(cov_1ldo1avzpa().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1ldo1avzpa().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1ldo1avzpa().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1ldo1avzpa().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1ldo1avzpa().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ldo1avzpa().s[3]++;
exports.TestQueueManager = void 0;
const bull_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[4]++, __importDefault(require("bull")));
const uuid_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[5]++, require("uuid"));
const events_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[6]++, require("events"));
const llmService_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[7]++, require("../llmService"));
const connection_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[8]++, require("../../database/connection"));
const Semaphore_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[9]++, require("./Semaphore"));
const ResourceManager_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[10]++, require("./ResourceManager"));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[11]++, require("perf_hooks"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[12]++, require("lru-cache"));
const promises_1 =
/* istanbul ignore next */
(cov_1ldo1avzpa().s[13]++, require("timers/promises"));
class TestQueueManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(redisConfig) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[1]++;
    cov_1ldo1avzpa().s[14]++;
    super();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[15]++;
    this.activeJobs = new Map();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[16]++;
    this.defaultConfiguration = {
      max_concurrent_tests: Math.min(8, require('os').cpus().length * 2),
      // Dynamic based on CPU cores
      timeout_per_test: 30000,
      // 30 seconds
      retry_failed_tests: true,
      max_retries: 2,
      stop_on_first_failure: false,
      resource_limits: {
        memory_mb: 512,
        cpu_percent: 20
      },
      cache_enabled: true,
      progress_updates: true
    };
    // Initialize caching
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[17]++;
    this.testCaseCache = new lru_cache_1.LRUCache({
      max: 1000,
      ttl: 1000 * 60 * 10 // 10 minutes
    });
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[18]++;
    this.performanceMetrics = new Map();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[19]++;
    this.maxConnections = Math.min(10, require('os').cpus().length * 2);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[20]++;
    this.connectionPool = [];
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[21]++;
    this.workerPool = [];
    // Initialize Redis queue with optimized settings
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[22]++;
    this.testQueue = new bull_1.default('test-execution', {
      redis:
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[3][0]++, redisConfig) ||
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[3][1]++, {
        host:
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[4][0]++, process.env.REDIS_HOST) ||
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[4][1]++, 'localhost'),
        port: parseInt(
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[5][0]++, process.env.REDIS_PORT) ||
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[5][1]++, '6379')),
        maxRetriesPerRequest: 3,
        retryDelayOnFailover: 100,
        enableReadyCheck: false,
        maxLoadingTimeout: 1000
      }),
      defaultJobOptions: {
        removeOnComplete: 100,
        removeOnFail: 50,
        attempts: 3,
        backoff: {
          type: 'exponential',
          delay: 2000
        }
      },
      settings: {
        stalledInterval: 30000,
        maxStalledCount: 1
      }
    });
    // Initialize resource manager with better defaults
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[23]++;
    this.resourceManager = new ResourceManager_1.ResourceManager({
      max_concurrent_tests: parseInt(
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[6][0]++, process.env.MAX_CONCURRENT_TESTS) ||
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[6][1]++, '20')),
      max_cpu_percent: parseInt(
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[7][0]++, process.env.MAX_CPU_PERCENT) ||
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[7][1]++, '80')),
      max_memory_mb: parseInt(
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[8][0]++, process.env.MAX_MEMORY_MB) ||
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[8][1]++, '4096'))
    });
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[24]++;
    this.setupJobProcessors();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[25]++;
    this.setupEventHandlers();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[26]++;
    this.initializeOptimizations();
  }
  /**
   * Queue a test execution job
   */
  async queueTestExecution(promptCardId, testCaseIds, model, configuration, priority =
  /* istanbul ignore next */
  (cov_1ldo1avzpa().b[9][0]++, 0)) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[2]++;
    const executionId =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[27]++, (0, uuid_1.v4)());
    const config =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[28]++, {
      ...this.defaultConfiguration,
      ...configuration
    });
    // Check resource availability
    const resourceReq =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[29]++, {
      cpu_percent: config.resource_limits.cpu_percent,
      memory_mb: config.resource_limits.memory_mb,
      concurrent_tests: config.max_concurrent_tests,
      priority: priority > 5 ?
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[10][0]++, 'high') :
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[10][1]++, priority < -5 ?
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[11][0]++, 'low') :
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[11][1]++, 'medium'))
    });
    const hasResources =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[30]++, await this.resourceManager.checkResourceAvailability(resourceReq));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[31]++;
    if (!hasResources) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[12][0]++;
      cov_1ldo1avzpa().s[32]++;
      throw new Error('Insufficient system resources for test execution');
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[12][1]++;
    }
    const job =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[33]++, {
      test_execution_id: executionId,
      prompt_card_id: promptCardId,
      test_case_ids: testCaseIds,
      model,
      configuration: config,
      priority,
      created_at: new Date()
    });
    // Add to queue
    const queueJob =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[34]++, await this.testQueue.add('execute-tests', job, {
      priority: priority,
      delay: 0,
      jobId: executionId
    }));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[35]++;
    this.emit('jobQueued', {
      executionId,
      jobId: queueJob.id
    });
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[36]++;
    return executionId;
  }
  /**
   * Get execution progress
   */
  getExecutionProgress(executionId) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[3]++;
    cov_1ldo1avzpa().s[37]++;
    return /* istanbul ignore next */(cov_1ldo1avzpa().b[13][0]++, this.activeJobs.get(executionId)) ||
    /* istanbul ignore next */
    (cov_1ldo1avzpa().b[13][1]++, null);
  }
  /**
   * Get all active executions
   */
  getActiveExecutions() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[4]++;
    cov_1ldo1avzpa().s[38]++;
    return Array.from(this.activeJobs.values());
  }
  /**
   * Cancel a test execution
   */
  async cancelExecution(executionId) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[5]++;
    const job =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[39]++, await this.testQueue.getJob(executionId));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[40]++;
    if (job) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[14][0]++;
      cov_1ldo1avzpa().s[41]++;
      await job.remove();
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[42]++;
      this.activeJobs.delete(executionId);
      // Release resources
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[43]++;
      await this.resourceManager.releaseResources(executionId);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[44]++;
      this.emit('jobCancelled', {
        executionId
      });
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[45]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[14][1]++;
    }
    cov_1ldo1avzpa().s[46]++;
    return false;
  }
  /**
   * Get queue statistics
   */
  async getQueueStats() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[6]++;
    const waiting =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[47]++, await this.testQueue.getWaiting());
    const active =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[48]++, await this.testQueue.getActive());
    const completed =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[49]++, await this.testQueue.getCompleted());
    const failed =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[50]++, await this.testQueue.getFailed());
    const delayed =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[51]++, await this.testQueue.getDelayed());
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[52]++;
    return {
      waiting: waiting.length,
      active: active.length,
      completed: completed.length,
      failed: failed.length,
      delayed: delayed.length
    };
  }
  /**
   * Setup job processors with optimized concurrency
   */
  setupJobProcessors() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[7]++;
    // Main test execution processor with dynamic concurrency
    const concurrency =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[53]++, Math.min(5, require('os').cpus().length));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[54]++;
    this.testQueue.process('execute-tests', concurrency, async job => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[8]++;
      const {
        data
      } =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[55]++, job);
      const startTime =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[56]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[57]++;
      try {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[58]++;
        // Reserve resources with priority handling
        await this.resourceManager.reserveResources(data.test_execution_id, {
          cpu_percent: data.configuration.resource_limits.cpu_percent,
          memory_mb: data.configuration.resource_limits.memory_mb,
          concurrent_tests: data.configuration.max_concurrent_tests,
          priority: data.priority > 5 ?
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[15][0]++, 'high') :
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[15][1]++, data.priority < -5 ?
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[16][0]++, 'low') :
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[16][1]++, 'medium'))
        });
        // Initialize progress tracking
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[59]++;
        this.updateProgress(data.test_execution_id, 0, 'Starting test execution...', 0, data.test_case_ids.length);
        // Execute tests with optimized parallel processing
        const results =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[60]++, await this.executeTestsParallelOptimized(data, progress => {
          /* istanbul ignore next */
          cov_1ldo1avzpa().f[9]++;
          cov_1ldo1avzpa().s[61]++;
          this.updateProgress(data.test_execution_id, progress.percent, progress.message, progress.current_test, progress.total_tests, progress.completed_tests, progress.failed_tests);
        }));
        // Update final progress
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[62]++;
        this.updateProgress(data.test_execution_id, 100, 'Test execution completed', data.test_case_ids.length, data.test_case_ids.length);
        // Track performance
        const executionTime =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[63]++, perf_hooks_1.performance.now() - startTime);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[64]++;
        this.trackPerformance('executeTests', executionTime);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[65]++;
        this.emit('jobCompleted', {
          executionId: data.test_execution_id,
          results
        });
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[66]++;
        return results;
      } catch (error) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[67]++;
        this.updateProgress(data.test_execution_id, -1, `Error: ${error.message}`, 0, data.test_case_ids.length);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[68]++;
        this.emit('jobFailed', {
          executionId: data.test_execution_id,
          error: error.message
        });
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[69]++;
        throw error;
      } finally {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[70]++;
        // Release resources
        await this.resourceManager.releaseResources(data.test_execution_id);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[71]++;
        this.activeJobs.delete(data.test_execution_id);
      }
    });
  }
  /**
   * Execute tests in parallel with resource management
   */
  async executeTestsParallel(job, progressCallback) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[10]++;
    const {
      test_case_ids,
      model,
      configuration
    } =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[72]++, job);
    // Load test cases with prompt template
    const testCases =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[73]++, await this.loadTestCases(test_case_ids));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[74]++;
    progressCallback({
      percent: 10,
      message: 'Test cases loaded',
      current_test: 0,
      total_tests: testCases.length
    });
    const results =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[75]++, []);
    const semaphore =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[76]++, new Semaphore_1.Semaphore(configuration.max_concurrent_tests));
    let completedTests =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[77]++, 0);
    let failedTests =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[78]++, 0);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[79]++;
    const executeTest = async (testCase, index) => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[11]++;
      const release =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[80]++, await semaphore.acquire());
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[81]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[82]++, await this.executeSingleTest(testCase, model, configuration, job.test_execution_id));
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[83]++;
        results[index] = result;
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[84]++;
        completedTests++;
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[85]++;
        if (!result.passed) {
          /* istanbul ignore next */
          cov_1ldo1avzpa().b[17][0]++;
          cov_1ldo1avzpa().s[86]++;
          failedTests++;
          // Stop on first failure if configured
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[87]++;
          if (configuration.stop_on_first_failure) {
            /* istanbul ignore next */
            cov_1ldo1avzpa().b[18][0]++;
            cov_1ldo1avzpa().s[88]++;
            throw new Error(`Test failed: ${testCase.name}`);
          } else
          /* istanbul ignore next */
          {
            cov_1ldo1avzpa().b[18][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1ldo1avzpa().b[17][1]++;
        }
        const progress =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[89]++, completedTests / testCases.length * 80 + 10);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[90]++;
        progressCallback({
          percent: progress,
          message: `Completed test ${completedTests}/${testCases.length}`,
          current_test: index + 1,
          total_tests: testCases.length,
          completed_tests: completedTests,
          failed_tests: failedTests
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[91]++;
        failedTests++;
        const errorResult =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[92]++, {
          execution_id: `${job.test_execution_id}-${testCase.id}`,
          test_case_id: testCase.id,
          passed: false,
          llm_output: `ERROR: ${error.message}`,
          assertion_results: [],
          execution_time_ms: 0,
          model,
          prompt_used: 'Error occurred before prompt execution',
          created_at: new Date(),
          metadata: {
            error: error.message
          }
        });
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[93]++;
        results[index] = errorResult;
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[94]++;
        if (configuration.stop_on_first_failure) {
          /* istanbul ignore next */
          cov_1ldo1avzpa().b[19][0]++;
          cov_1ldo1avzpa().s[95]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1ldo1avzpa().b[19][1]++;
        }
      } finally {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[96]++;
        release();
      }
    };
    // Execute all tests in parallel with concurrency control
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[97]++;
    await Promise.all(testCases.map((testCase, index) => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[12]++;
      cov_1ldo1avzpa().s[98]++;
      return executeTest(testCase, index);
    }));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[99]++;
    progressCallback({
      percent: 95,
      message: 'Storing results...',
      current_test: testCases.length,
      total_tests: testCases.length
    });
    // Store results in database
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[100]++;
    await this.storeResults(job.test_execution_id, results);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[101]++;
    return results;
  }
  /**
   * Execute a single test case
   */
  async executeSingleTest(testCase, model, configuration, executionId) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[13]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[102]++, Date.now());
    const testExecutionId =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[103]++, `${executionId}-${testCase.id}`);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[104]++;
    try {
      // Parse JSON fields
      const inputVariables =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[105]++, JSON.parse(testCase.input_variables));
      const assertions =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[106]++, JSON.parse(
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[20][0]++, testCase.assertions) ||
      /* istanbul ignore next */
      (cov_1ldo1avzpa().b[20][1]++, '[]')));
      // Substitute variables in prompt template
      const prompt =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[107]++, llmService_1.llmService.substituteVariables(testCase.prompt_template, inputVariables));
      // Execute with timeout
      const timeoutPromise =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[108]++, new Promise((_, reject) => {
        /* istanbul ignore next */
        cov_1ldo1avzpa().f[14]++;
        cov_1ldo1avzpa().s[109]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_1ldo1avzpa().f[15]++;
          cov_1ldo1avzpa().s[110]++;
          return reject(new Error('Test execution timeout'));
        },
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[21][0]++, configuration.timeout_per_test) ||
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[21][1]++, 30000));
      }));
      const executionPromise =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[111]++, llmService_1.llmService.generate(prompt, model));
      const llmResponse =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[112]++, await Promise.race([executionPromise, timeoutPromise]));
      const llmOutput =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[113]++, llmResponse.response);
      // Validate assertions
      const assertionResults =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[114]++, await llmService_1.llmService.validateAssertions(llmOutput, assertions));
      const allAssertionsPassed =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[115]++, assertionResults.every(result => {
        /* istanbul ignore next */
        cov_1ldo1avzpa().f[16]++;
        cov_1ldo1avzpa().s[116]++;
        return result.passed;
      }));
      const executionTime =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[117]++, Date.now() - startTime);
      const result =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[118]++, {
        execution_id: testExecutionId,
        test_case_id: testCase.id,
        passed: allAssertionsPassed,
        llm_output: llmOutput,
        assertion_results: assertionResults,
        execution_time_ms: executionTime,
        model: llmResponse.model,
        prompt_used: prompt,
        created_at: new Date(),
        metadata: {
          total_tokens:
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[22][0]++, llmResponse.eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[22][1]++, 0),
          prompt_tokens:
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[23][0]++, llmResponse.prompt_eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[23][1]++, 0),
          completion_tokens: (
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[24][0]++, llmResponse.eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[24][1]++, 0)) - (
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[25][0]++, llmResponse.prompt_eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[25][1]++, 0))
        }
      });
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[119]++;
      return result;
    } catch (error) {
      const executionTime =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[120]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[121]++;
      return {
        execution_id: testExecutionId,
        test_case_id: testCase.id,
        passed: false,
        llm_output: `ERROR: ${error.message}`,
        assertion_results: [],
        execution_time_ms: executionTime,
        model,
        prompt_used: 'Error occurred before prompt execution',
        created_at: new Date(),
        metadata: {
          error: error.message
        }
      };
    }
  }
  /**
   * Load test cases from database with caching
   */
  async loadTestCases(testCaseIds) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[17]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[122]++, testCaseIds.sort().join(','));
    const cached =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[123]++, this.testCaseCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[124]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[26][0]++;
      cov_1ldo1avzpa().s[125]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[26][1]++;
    }
    const placeholders =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[126]++, testCaseIds.map(() => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[18]++;
      cov_1ldo1avzpa().s[127]++;
      return '?';
    }).join(','));
    const query =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[128]++, `
      SELECT 
        tc.*,
        pc.prompt_template,
        pc.title as prompt_card_title
      FROM test_cases tc
      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id
      WHERE tc.id IN (${placeholders})
      ORDER BY tc.id ASC
    `);
    const testCases =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[129]++, connection_1.db.prepare(query).all(...testCaseIds));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[130]++;
    if (testCases.length !== testCaseIds.length) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[27][0]++;
      cov_1ldo1avzpa().s[131]++;
      throw new Error(`Some test cases not found. Expected ${testCaseIds.length}, got ${testCases.length}`);
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[27][1]++;
    }
    // Cache the result
    cov_1ldo1avzpa().s[132]++;
    this.testCaseCache.set(cacheKey, testCases);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[133]++;
    return testCases;
  }
  /**
   * Store test results in database
   */
  async storeResults(executionId, results) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[19]++;
    const transaction =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[134]++, connection_1.db.transaction(results => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[20]++;
      const insertStmt =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[135]++, connection_1.db.prepare(`
        INSERT INTO test_results (
          test_case_id, 
          execution_id, 
          llm_output, 
          passed, 
          assertion_results, 
          execution_time_ms,
          created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?)
      `));
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[136]++;
      for (const result of results) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[137]++;
        insertStmt.run(result.test_case_id, result.execution_id, result.llm_output, result.passed ?
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[28][0]++, 1) :
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[28][1]++, 0), JSON.stringify(result.assertion_results), result.execution_time_ms, result.created_at.toISOString());
      }
    }));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[138]++;
    transaction(results);
  }
  /**
   * Update execution progress
   */
  updateProgress(executionId, percent, message, currentTest, totalTests, completedTests =
  /* istanbul ignore next */
  (cov_1ldo1avzpa().b[29][0]++, 0), failedTests =
  /* istanbul ignore next */
  (cov_1ldo1avzpa().b[30][0]++, 0)) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[21]++;
    const progress =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[139]++, {
      job_id: executionId,
      percent,
      message,
      current_test: currentTest,
      total_tests: totalTests,
      completed_tests: completedTests,
      failed_tests: failedTests,
      updated_at: new Date()
    });
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[140]++;
    this.activeJobs.set(executionId, progress);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[141]++;
    this.emit('progressUpdated', progress);
  }
  /**
   * Setup event handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[22]++;
    cov_1ldo1avzpa().s[142]++;
    // Handle failed jobs
    this.testQueue.on('failed', (job, error) => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[23]++;
      cov_1ldo1avzpa().s[143]++;
      console.error(`Job ${job.id} failed:`, error);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[144]++;
      this.emit('jobFailed', {
        executionId: job.data.test_execution_id,
        error: error.message
      });
    });
    // Handle stalled jobs
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[145]++;
    this.testQueue.on('stalled', job => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[24]++;
      cov_1ldo1avzpa().s[146]++;
      console.warn(`Job ${job.id} stalled`);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[147]++;
      this.emit('jobStalled', {
        executionId: job.data.test_execution_id
      });
    });
    // Handle resource manager events
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[148]++;
    this.resourceManager.on('systemStress', usage => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[25]++;
      cov_1ldo1avzpa().s[149]++;
      console.warn('System under stress:', usage);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[150]++;
      this.emit('systemStress', usage);
    });
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[151]++;
    this.resourceManager.on('emergencyThreshold', event => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[26]++;
      cov_1ldo1avzpa().s[152]++;
      console.error('Emergency threshold reached:', event);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[153]++;
      this.emit('emergencyThreshold', event);
    });
  }
  /**
   * Optimized parallel test execution
   */
  async executeTestsParallelOptimized(job, progressCallback) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[27]++;
    const {
      test_case_ids,
      model,
      configuration
    } =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[154]++, job);
    // Load test cases with caching
    const testCases =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[155]++, await this.loadTestCases(test_case_ids));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[156]++;
    progressCallback({
      percent: 10,
      message: 'Test cases loaded',
      current_test: 0,
      total_tests: testCases.length
    });
    const results =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[157]++, new Array(testCases.length));
    const semaphore =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[158]++, new Semaphore_1.Semaphore(configuration.max_concurrent_tests));
    let completedTests =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[159]++, 0);
    let failedTests =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[160]++, 0);
    // Process tests in batches for better memory management
    const batchSize =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[161]++, Math.min(configuration.max_concurrent_tests * 2, 20));
    const batches =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[162]++, []);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[163]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[164]++, 0); i < testCases.length; i += batchSize) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[165]++;
      batches.push(testCases.slice(i, i + batchSize));
    }
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[166]++;
    for (const batch of batches) {
      const batchPromises =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[167]++, batch.map(async (testCase, batchIndex) => {
        /* istanbul ignore next */
        cov_1ldo1avzpa().f[28]++;
        const release =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[168]++, await semaphore.acquire());
        const globalIndex =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[169]++, batches.indexOf(batch) * batchSize + batchIndex);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[170]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1ldo1avzpa().s[171]++, await this.executeSingleTestOptimized(testCase, model, configuration, job.test_execution_id));
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[172]++;
          results[globalIndex] = result;
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[173]++;
          completedTests++;
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[174]++;
          if (!result.passed) {
            /* istanbul ignore next */
            cov_1ldo1avzpa().b[31][0]++;
            cov_1ldo1avzpa().s[175]++;
            failedTests++;
            // Stop on first failure if configured
            /* istanbul ignore next */
            cov_1ldo1avzpa().s[176]++;
            if (configuration.stop_on_first_failure) {
              /* istanbul ignore next */
              cov_1ldo1avzpa().b[32][0]++;
              cov_1ldo1avzpa().s[177]++;
              throw new Error(`Test failed: ${testCase.name}`);
            } else
            /* istanbul ignore next */
            {
              cov_1ldo1avzpa().b[32][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1ldo1avzpa().b[31][1]++;
          }
          const progress =
          /* istanbul ignore next */
          (cov_1ldo1avzpa().s[178]++, completedTests / testCases.length * 80 + 10);
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[179]++;
          progressCallback({
            percent: progress,
            message: `Completed test ${completedTests}/${testCases.length}`,
            current_test: globalIndex + 1,
            total_tests: testCases.length,
            completed_tests: completedTests,
            failed_tests: failedTests
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[180]++;
          failedTests++;
          const errorResult =
          /* istanbul ignore next */
          (cov_1ldo1avzpa().s[181]++, {
            execution_id: `${job.test_execution_id}-${testCase.id}`,
            test_case_id: testCase.id,
            passed: false,
            llm_output: `ERROR: ${error.message}`,
            assertion_results: [],
            execution_time_ms: 0,
            model,
            prompt_used: 'Error occurred before prompt execution',
            created_at: new Date(),
            metadata: {
              error: error.message
            }
          });
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[182]++;
          results[globalIndex] = errorResult;
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[183]++;
          if (configuration.stop_on_first_failure) {
            /* istanbul ignore next */
            cov_1ldo1avzpa().b[33][0]++;
            cov_1ldo1avzpa().s[184]++;
            throw error;
          } else
          /* istanbul ignore next */
          {
            cov_1ldo1avzpa().b[33][1]++;
          }
        } finally {
          /* istanbul ignore next */
          cov_1ldo1avzpa().s[185]++;
          release();
        }
      }));
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[186]++;
      await Promise.all(batchPromises);
      // Small delay between batches to prevent overwhelming the system
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[187]++;
      if (batches.indexOf(batch) < batches.length - 1) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().b[34][0]++;
        cov_1ldo1avzpa().s[188]++;
        await (0, promises_1.setTimeout)(100);
      } else
      /* istanbul ignore next */
      {
        cov_1ldo1avzpa().b[34][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[189]++;
    progressCallback({
      percent: 95,
      message: 'Storing results...',
      current_test: testCases.length,
      total_tests: testCases.length
    });
    // Store results in database using batch insertion
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[190]++;
    await this.storeResultsOptimized(job.test_execution_id, results);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[191]++;
    return results;
  }
  /**
   * Execute a single test case with optimizations
   */
  async executeSingleTestOptimized(testCase, model, configuration, executionId) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[29]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[192]++, perf_hooks_1.performance.now());
    const testExecutionId =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[193]++, `${executionId}-${testCase.id}`);
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[194]++;
    try {
      // Parse JSON fields with error handling
      let inputVariables, assertions;
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[195]++;
      try {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[196]++;
        inputVariables = JSON.parse(testCase.input_variables);
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[197]++;
        assertions = JSON.parse(
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[35][0]++, testCase.assertions) ||
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[35][1]++, '[]'));
      } catch (parseError) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[198]++;
        throw new Error(`Invalid JSON in test case ${testCase.id}: ${parseError.message}`);
      }
      // Substitute variables in prompt template
      const prompt =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[199]++, llmService_1.llmService.substituteVariables(testCase.prompt_template, inputVariables));
      // Execute with timeout using Promise.race
      const timeoutPromise =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[200]++, new Promise((_, reject) => {
        /* istanbul ignore next */
        cov_1ldo1avzpa().f[30]++;
        cov_1ldo1avzpa().s[201]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_1ldo1avzpa().f[31]++;
          cov_1ldo1avzpa().s[202]++;
          return reject(new Error('Test execution timeout'));
        },
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[36][0]++, configuration.timeout_per_test) ||
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[36][1]++, 30000));
      }));
      const executionPromise =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[203]++, llmService_1.llmService.generate(prompt, model));
      const llmResponse =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[204]++, await Promise.race([executionPromise, timeoutPromise]));
      const llmOutput =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[205]++, llmResponse.response);
      // Validate assertions
      const assertionResults =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[206]++, await llmService_1.llmService.validateAssertions(llmOutput, assertions));
      const allAssertionsPassed =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[207]++, assertionResults.every(result => {
        /* istanbul ignore next */
        cov_1ldo1avzpa().f[32]++;
        cov_1ldo1avzpa().s[208]++;
        return result.passed;
      }));
      const executionTime =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[209]++, perf_hooks_1.performance.now() - startTime);
      const result =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[210]++, {
        execution_id: testExecutionId,
        test_case_id: testCase.id,
        passed: allAssertionsPassed,
        llm_output: llmOutput,
        assertion_results: assertionResults,
        execution_time_ms: Math.round(executionTime),
        model: llmResponse.model,
        prompt_used: prompt,
        created_at: new Date(),
        metadata: {
          total_tokens:
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[37][0]++, llmResponse.eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[37][1]++, 0),
          prompt_tokens:
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[38][0]++, llmResponse.prompt_eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[38][1]++, 0),
          completion_tokens: (
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[39][0]++, llmResponse.eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[39][1]++, 0)) - (
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[40][0]++, llmResponse.prompt_eval_count) ||
          /* istanbul ignore next */
          (cov_1ldo1avzpa().b[40][1]++, 0)),
          cache_hit: false // Could be enhanced with actual cache hit detection
        }
      });
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[211]++;
      return result;
    } catch (error) {
      const executionTime =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[212]++, perf_hooks_1.performance.now() - startTime);
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[213]++;
      return {
        execution_id: testExecutionId,
        test_case_id: testCase.id,
        passed: false,
        llm_output: `ERROR: ${error.message}`,
        assertion_results: [],
        execution_time_ms: Math.round(executionTime),
        model,
        prompt_used: 'Error occurred before prompt execution',
        created_at: new Date(),
        metadata: {
          error: error.message
        }
      };
    }
  }
  /**
   * Store test results with optimized batch insertion
   */
  async storeResultsOptimized(executionId, results) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[33]++;
    const transaction =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[214]++, connection_1.db.transaction(results => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[34]++;
      const insertStmt =
      /* istanbul ignore next */
      (cov_1ldo1avzpa().s[215]++, connection_1.db.prepare(`
        INSERT INTO test_results (
          test_case_id, 
          execution_id, 
          llm_output, 
          passed, 
          assertion_results, 
          execution_time_ms,
          model,
          created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `));
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[216]++;
      for (const result of results) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[217]++;
        insertStmt.run(result.test_case_id, result.execution_id, result.llm_output, result.passed ?
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[41][0]++, 1) :
        /* istanbul ignore next */
        (cov_1ldo1avzpa().b[41][1]++, 0), JSON.stringify(result.assertion_results), result.execution_time_ms, result.model, result.created_at.toISOString());
      }
    }));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[218]++;
    transaction(results);
  }
  /**
   * Initialize performance optimizations
   */
  initializeOptimizations() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[35]++;
    cov_1ldo1avzpa().s[219]++;
    // Pre-warm database connections
    this.preWarmConnections();
    // Set up periodic cache cleanup
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[220]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_1ldo1avzpa().f[36]++;
      cov_1ldo1avzpa().s[221]++;
      this.cleanupCaches();
    }, 1000 * 60 * 5); // Every 5 minutes
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[222]++;
    console.log('Test queue optimizations initialized');
  }
  /**
   * Pre-warm database connections
   */
  async preWarmConnections() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[37]++;
    cov_1ldo1avzpa().s[223]++;
    try {
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[224]++;
      // Execute a simple query to warm up the connection
      connection_1.db.prepare('SELECT 1').get();
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[225]++;
      console.log('Database connections pre-warmed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[226]++;
      console.warn('Failed to pre-warm database connections:', error.message);
    }
  }
  /**
   * Clean up caches periodically
   */
  cleanupCaches() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[38]++;
    cov_1ldo1avzpa().s[227]++;
    // Clean up old performance metrics
    for (const [key, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[228]++;
      if (metrics.length > 1000) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().b[42][0]++;
        cov_1ldo1avzpa().s[229]++;
        this.performanceMetrics.set(key, metrics.slice(-500));
      } else
      /* istanbul ignore next */
      {
        cov_1ldo1avzpa().b[42][1]++;
      }
    }
    // Log cache statistics
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[230]++;
    console.log(`Cache stats - Test cases: ${this.testCaseCache.size}/${this.testCaseCache.max}`);
  }
  /**
   * Track performance metrics
   */
  trackPerformance(operation, duration) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[39]++;
    cov_1ldo1avzpa().s[231]++;
    if (!this.performanceMetrics.has(operation)) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[43][0]++;
      cov_1ldo1avzpa().s[232]++;
      this.performanceMetrics.set(operation, []);
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[43][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[233]++, this.performanceMetrics.get(operation));
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[234]++;
    metrics.push(duration);
    // Keep only last 100 measurements
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[235]++;
    if (metrics.length > 100) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[44][0]++;
      cov_1ldo1avzpa().s[236]++;
      metrics.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[44][1]++;
    }
    // Log slow operations
    cov_1ldo1avzpa().s[237]++;
    if (duration > 60000) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().b[45][0]++;
      cov_1ldo1avzpa().s[238]++;
      // 1 minute
      console.warn(`Slow test execution: ${operation} took ${duration.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_1ldo1avzpa().b[45][1]++;
    }
  }
  /**
   * Get performance statistics
   */
  getPerformanceStats() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[40]++;
    const stats =
    /* istanbul ignore next */
    (cov_1ldo1avzpa().s[239]++, {});
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[240]++;
    for (const [operation, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_1ldo1avzpa().s[241]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_1ldo1avzpa().b[46][0]++;
        const avg =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[242]++, metrics.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_1ldo1avzpa().f[41]++;
          cov_1ldo1avzpa().s[243]++;
          return sum + time;
        }, 0) / metrics.length);
        const max =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[244]++, Math.max(...metrics));
        const min =
        /* istanbul ignore next */
        (cov_1ldo1avzpa().s[245]++, Math.min(...metrics));
        /* istanbul ignore next */
        cov_1ldo1avzpa().s[246]++;
        stats[operation] = {
          avg: Math.round(avg),
          max: Math.round(max),
          min: Math.round(min),
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ldo1avzpa().b[46][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[247]++;
    return stats;
  }
  /**
   * Clear caches and metrics
   */
  clearCaches() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[42]++;
    cov_1ldo1avzpa().s[248]++;
    this.testCaseCache.clear();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[249]++;
    this.performanceMetrics.clear();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[250]++;
    console.log('Test queue caches cleared');
  }
  /**
   * Initialize the test queue manager
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[43]++;
    cov_1ldo1avzpa().s[251]++;
    // Ensure Redis connection and warm up the system
    await this.preWarmConnections();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[252]++;
    console.log('TestQueueManager initialized');
  }
  /**
   * Cleanup the test queue manager
   */
  async cleanup() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[44]++;
    cov_1ldo1avzpa().s[253]++;
    await this.shutdown();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[254]++;
    console.log('TestQueueManager cleaned up');
  }
  /**
   * Set queue limit for concurrent executions
   */
  async setQueueLimit(limit) {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[45]++;
    cov_1ldo1avzpa().s[255]++;
    this.defaultConfiguration.max_concurrent_tests = limit;
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[256]++;
    console.log(`Queue limit set to ${limit}`);
  }
  /**
   * Graceful shutdown
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_1ldo1avzpa().f[46]++;
    cov_1ldo1avzpa().s[257]++;
    await this.testQueue.close();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[258]++;
    this.resourceManager.destroy();
    /* istanbul ignore next */
    cov_1ldo1avzpa().s[259]++;
    this.removeAllListeners();
  }
}
/* istanbul ignore next */
cov_1ldo1avzpa().s[260]++;
exports.TestQueueManager = TestQueueManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,