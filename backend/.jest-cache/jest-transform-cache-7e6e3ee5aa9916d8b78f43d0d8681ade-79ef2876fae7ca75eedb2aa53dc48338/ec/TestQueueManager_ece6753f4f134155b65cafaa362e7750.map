{"version":3,"names":["cov_1ldo1avzpa","actualCoverage","bull_1","s","__importDefault","require","uuid_1","events_1","llmService_1","connection_1","Semaphore_1","ResourceManager_1","perf_hooks_1","lru_cache_1","promises_1","TestQueueManager","EventEmitter","constructor","redisConfig","f","activeJobs","Map","defaultConfiguration","max_concurrent_tests","Math","min","cpus","length","timeout_per_test","retry_failed_tests","max_retries","stop_on_first_failure","resource_limits","memory_mb","cpu_percent","cache_enabled","progress_updates","testCaseCache","LRUCache","max","ttl","performanceMetrics","maxConnections","connectionPool","workerPool","testQueue","default","redis","b","host","process","env","REDIS_HOST","port","parseInt","REDIS_PORT","maxRetriesPerRequest","retryDelayOnFailover","enableReadyCheck","maxLoadingTimeout","defaultJobOptions","removeOnComplete","removeOnFail","attempts","backoff","type","delay","settings","stalledInterval","maxStalledCount","resourceManager","ResourceManager","MAX_CONCURRENT_TESTS","max_cpu_percent","MAX_CPU_PERCENT","max_memory_mb","MAX_MEMORY_MB","setupJobProcessors","setupEventHandlers","initializeOptimizations","queueTestExecution","promptCardId","testCaseIds","model","configuration","priority","executionId","v4","config","resourceReq","concurrent_tests","hasResources","checkResourceAvailability","Error","job","test_execution_id","prompt_card_id","test_case_ids","created_at","Date","queueJob","add","jobId","emit","id","getExecutionProgress","get","getActiveExecutions","Array","from","values","cancelExecution","getJob","remove","delete","releaseResources","getQueueStats","waiting","getWaiting","active","getActive","completed","getCompleted","failed","getFailed","delayed","getDelayed","concurrency","data","startTime","performance","now","reserveResources","updateProgress","results","executeTestsParallelOptimized","progress","percent","message","current_test","total_tests","completed_tests","failed_tests","executionTime","trackPerformance","error","executeTestsParallel","progressCallback","testCases","loadTestCases","semaphore","Semaphore","completedTests","failedTests","executeTest","testCase","index","release","acquire","result","executeSingleTest","passed","name","errorResult","execution_id","test_case_id","llm_output","assertion_results","execution_time_ms","prompt_used","metadata","Promise","all","map","storeResults","testExecutionId","inputVariables","JSON","parse","input_variables","assertions","prompt","llmService","substituteVariables","prompt_template","timeoutPromise","_","reject","setTimeout","executionPromise","generate","llmResponse","race","llmOutput","response","assertionResults","validateAssertions","allAssertionsPassed","every","total_tokens","eval_count","prompt_tokens","prompt_eval_count","completion_tokens","cacheKey","sort","join","cached","placeholders","query","db","prepare","set","transaction","insertStmt","run","stringify","toISOString","currentTest","totalTests","job_id","updated_at","on","console","warn","usage","event","batchSize","batches","i","push","slice","batch","batchPromises","batchIndex","globalIndex","indexOf","executeSingleTestOptimized","storeResultsOptimized","parseError","round","cache_hit","preWarmConnections","setInterval","cleanupCaches","log","key","metrics","size","operation","duration","has","shift","toFixed","getPerformanceStats","stats","avg","reduce","sum","time","count","clearCaches","clear","initialize","cleanup","shutdown","setQueueLimit","limit","close","destroy","removeAllListeners","exports"],"sources":["/workspaces/prompt-card-system/backend/src/services/testing/TestQueueManager.ts"],"sourcesContent":["import Bull from 'bull';\nimport { v4 as uuidv4 } from 'uuid';\nimport { EventEmitter } from 'events';\nimport { llmService } from '../llmService';\nimport { db } from '../../database/connection';\nimport { Semaphore } from './Semaphore';\nimport { ResourceManager, ResourceRequirement } from './ResourceManager';\nimport { performance } from 'perf_hooks';\nimport { Worker } from 'worker_threads';\nimport { LRUCache } from 'lru-cache';\nimport { promisify } from 'util';\nimport { setTimeout as setTimeoutPromise } from 'timers/promises';\n\nexport interface TestJob {\n  test_execution_id: string;\n  prompt_card_id: number;\n  test_case_ids: number[];\n  model: string;\n  configuration: TestConfiguration;\n  priority: number;\n  user_id?: string;\n  created_at: Date;\n}\n\nexport interface TestConfiguration {\n  max_concurrent_tests: number;\n  timeout_per_test: number;\n  retry_failed_tests: boolean;\n  max_retries: number;\n  stop_on_first_failure: boolean;\n  resource_limits: {\n    memory_mb: number;\n    cpu_percent: number;\n  };\n  cache_enabled: boolean;\n  progress_updates: boolean;\n}\n\nexport interface TestCase {\n  id: number;\n  name: string;\n  prompt_card_id: number;\n  input_variables: string; // JSON\n  assertions: string; // JSON\n  expected_output?: string;\n  prompt_template: string;\n}\n\nexport interface TestExecutionResult {\n  execution_id: string;\n  test_case_id: number;\n  passed: boolean;\n  llm_output: string;\n  assertion_results: Array<{\n    assertion: any;\n    passed: boolean;\n    error?: string;\n  }>;\n  execution_time_ms: number;\n  model: string;\n  prompt_used: string;\n  created_at: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface ExecutionProgress {\n  job_id: string;\n  percent: number;\n  message: string;\n  current_test: number;\n  total_tests: number;\n  completed_tests: number;\n  failed_tests: number;\n  updated_at: Date;\n}\n\nexport class TestQueueManager extends EventEmitter {\n  private testQueue: Bull.Queue<TestJob>;\n  private resourceManager: ResourceManager;\n  private defaultConfiguration: TestConfiguration;\n  private activeJobs: Map<string, ExecutionProgress> = new Map();\n  private testCaseCache: LRUCache<string, TestCase[]>;\n  private performanceMetrics: Map<string, number[]>;\n  private connectionPool: any[];\n  private maxConnections: number;\n  private batchProcessor: any;\n  private workerPool: Worker[];\n\n  constructor(redisConfig?: Bull.QueueOptions['redis']) {\n    super();\n    \n    this.defaultConfiguration = {\n      max_concurrent_tests: Math.min(8, require('os').cpus().length * 2), // Dynamic based on CPU cores\n      timeout_per_test: 30000, // 30 seconds\n      retry_failed_tests: true,\n      max_retries: 2,\n      stop_on_first_failure: false,\n      resource_limits: {\n        memory_mb: 512,\n        cpu_percent: 20\n      },\n      cache_enabled: true,\n      progress_updates: true\n    };\n\n    // Initialize caching\n    this.testCaseCache = new LRUCache({\n      max: 1000,\n      ttl: 1000 * 60 * 10 // 10 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n    this.maxConnections = Math.min(10, require('os').cpus().length * 2);\n    this.connectionPool = [];\n    this.workerPool = [];\n\n    // Initialize Redis queue with optimized settings\n    this.testQueue = new Bull('test-execution', {\n      redis: redisConfig as any || {\n        host: process.env.REDIS_HOST || 'localhost',\n        port: parseInt(process.env.REDIS_PORT || '6379'),\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: false,\n        maxLoadingTimeout: 1000\n      },\n      defaultJobOptions: {\n        removeOnComplete: 100,\n        removeOnFail: 50,\n        attempts: 3,\n        backoff: {\n          type: 'exponential',\n          delay: 2000\n        }\n      },\n      settings: {\n        stalledInterval: 30000,\n        maxStalledCount: 1\n      }\n    });\n\n    // Initialize resource manager with better defaults\n    this.resourceManager = new ResourceManager({\n      max_concurrent_tests: parseInt(process.env.MAX_CONCURRENT_TESTS || '20'),\n      max_cpu_percent: parseInt(process.env.MAX_CPU_PERCENT || '80'),\n      max_memory_mb: parseInt(process.env.MAX_MEMORY_MB || '4096')\n    });\n\n    this.setupJobProcessors();\n    this.setupEventHandlers();\n    this.initializeOptimizations();\n  }\n\n  /**\n   * Queue a test execution job\n   */\n  async queueTestExecution(\n    promptCardId: number,\n    testCaseIds: number[],\n    model: string,\n    configuration?: Partial<TestConfiguration>,\n    priority: number = 0\n  ): Promise<string> {\n    const executionId = uuidv4();\n    const config = { ...this.defaultConfiguration, ...configuration };\n\n    // Check resource availability\n    const resourceReq: ResourceRequirement = {\n      cpu_percent: config.resource_limits.cpu_percent,\n      memory_mb: config.resource_limits.memory_mb,\n      concurrent_tests: config.max_concurrent_tests,\n      priority: priority > 5 ? 'high' : priority < -5 ? 'low' : 'medium'\n    };\n\n    const hasResources = await this.resourceManager.checkResourceAvailability(resourceReq);\n    if (!hasResources) {\n      throw new Error('Insufficient system resources for test execution');\n    }\n\n    const job: TestJob = {\n      test_execution_id: executionId,\n      prompt_card_id: promptCardId,\n      test_case_ids: testCaseIds,\n      model,\n      configuration: config,\n      priority,\n      created_at: new Date()\n    };\n\n    // Add to queue\n    const queueJob = await this.testQueue.add('execute-tests', job, {\n      priority: priority,\n      delay: 0,\n      jobId: executionId\n    });\n\n    this.emit('jobQueued', { executionId, jobId: queueJob.id });\n    return executionId;\n  }\n\n  /**\n   * Get execution progress\n   */\n  getExecutionProgress(executionId: string): ExecutionProgress | null {\n    return this.activeJobs.get(executionId) || null;\n  }\n\n  /**\n   * Get all active executions\n   */\n  getActiveExecutions(): ExecutionProgress[] {\n    return Array.from(this.activeJobs.values());\n  }\n\n  /**\n   * Cancel a test execution\n   */\n  async cancelExecution(executionId: string): Promise<boolean> {\n    const job = await this.testQueue.getJob(executionId);\n    if (job) {\n      await job.remove();\n      this.activeJobs.delete(executionId);\n      \n      // Release resources\n      await this.resourceManager.releaseResources(executionId);\n      \n      this.emit('jobCancelled', { executionId });\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get queue statistics\n   */\n  async getQueueStats(): Promise<{\n    waiting: number;\n    active: number;\n    completed: number;\n    failed: number;\n    delayed: number;\n  }> {\n    const waiting = await this.testQueue.getWaiting();\n    const active = await this.testQueue.getActive();\n    const completed = await this.testQueue.getCompleted();\n    const failed = await this.testQueue.getFailed();\n    const delayed = await this.testQueue.getDelayed();\n\n    return {\n      waiting: waiting.length,\n      active: active.length,\n      completed: completed.length,\n      failed: failed.length,\n      delayed: delayed.length\n    };\n  }\n\n  /**\n   * Setup job processors with optimized concurrency\n   */\n  private setupJobProcessors(): void {\n    // Main test execution processor with dynamic concurrency\n    const concurrency = Math.min(5, require('os').cpus().length);\n    \n    this.testQueue.process('execute-tests', concurrency, async (job: Bull.Job<TestJob>) => {\n      const { data } = job;\n      const startTime = performance.now();\n      \n      try {\n        // Reserve resources with priority handling\n        await this.resourceManager.reserveResources(data.test_execution_id, {\n          cpu_percent: data.configuration.resource_limits.cpu_percent,\n          memory_mb: data.configuration.resource_limits.memory_mb,\n          concurrent_tests: data.configuration.max_concurrent_tests,\n          priority: data.priority > 5 ? 'high' : data.priority < -5 ? 'low' : 'medium'\n        });\n\n        // Initialize progress tracking\n        this.updateProgress(data.test_execution_id, 0, 'Starting test execution...', 0, data.test_case_ids.length);\n\n        // Execute tests with optimized parallel processing\n        const results = await this.executeTestsParallelOptimized(data, (progress) => {\n          this.updateProgress(\n            data.test_execution_id,\n            progress.percent,\n            progress.message,\n            progress.current_test,\n            progress.total_tests,\n            progress.completed_tests,\n            progress.failed_tests\n          );\n        });\n\n        // Update final progress\n        this.updateProgress(data.test_execution_id, 100, 'Test execution completed', data.test_case_ids.length, data.test_case_ids.length);\n\n        // Track performance\n        const executionTime = performance.now() - startTime;\n        this.trackPerformance('executeTests', executionTime);\n\n        this.emit('jobCompleted', { executionId: data.test_execution_id, results });\n        return results;\n\n      } catch (error) {\n        this.updateProgress(data.test_execution_id, -1, `Error: ${error.message}`, 0, data.test_case_ids.length);\n        this.emit('jobFailed', { executionId: data.test_execution_id, error: error.message });\n        throw error;\n      } finally {\n        // Release resources\n        await this.resourceManager.releaseResources(data.test_execution_id);\n        this.activeJobs.delete(data.test_execution_id);\n      }\n    });\n  }\n\n  /**\n   * Execute tests in parallel with resource management\n   */\n  private async executeTestsParallel(\n    job: TestJob,\n    progressCallback: (progress: {\n      percent: number;\n      message: string;\n      current_test: number;\n      total_tests: number;\n      completed_tests?: number;\n      failed_tests?: number;\n    }) => void\n  ): Promise<TestExecutionResult[]> {\n    const { test_case_ids, model, configuration } = job;\n    \n    // Load test cases with prompt template\n    const testCases = await this.loadTestCases(test_case_ids);\n    progressCallback({ percent: 10, message: 'Test cases loaded', current_test: 0, total_tests: testCases.length });\n\n    const results: TestExecutionResult[] = [];\n    const semaphore = new Semaphore(configuration.max_concurrent_tests);\n    let completedTests = 0;\n    let failedTests = 0;\n\n    const executeTest = async (testCase: TestCase, index: number): Promise<void> => {\n      const release = await semaphore.acquire();\n      \n      try {\n        const result = await this.executeSingleTest(testCase, model, configuration, job.test_execution_id);\n        results[index] = result;\n        completedTests++;\n        \n        if (!result.passed) {\n          failedTests++;\n          \n          // Stop on first failure if configured\n          if (configuration.stop_on_first_failure) {\n            throw new Error(`Test failed: ${testCase.name}`);\n          }\n        }\n\n        const progress = ((completedTests) / testCases.length) * 80 + 10;\n        progressCallback({\n          percent: progress,\n          message: `Completed test ${completedTests}/${testCases.length}`,\n          current_test: index + 1,\n          total_tests: testCases.length,\n          completed_tests: completedTests,\n          failed_tests: failedTests\n        });\n\n      } catch (error) {\n        failedTests++;\n        const errorResult: TestExecutionResult = {\n          execution_id: `${job.test_execution_id}-${testCase.id}`,\n          test_case_id: testCase.id,\n          passed: false,\n          llm_output: `ERROR: ${error.message}`,\n          assertion_results: [],\n          execution_time_ms: 0,\n          model,\n          prompt_used: 'Error occurred before prompt execution',\n          created_at: new Date(),\n          metadata: { error: error.message }\n        };\n        results[index] = errorResult;\n        \n        if (configuration.stop_on_first_failure) {\n          throw error;\n        }\n      } finally {\n        release();\n      }\n    };\n\n    // Execute all tests in parallel with concurrency control\n    await Promise.all(\n      testCases.map((testCase, index) => executeTest(testCase, index))\n    );\n\n    progressCallback({ percent: 95, message: 'Storing results...', current_test: testCases.length, total_tests: testCases.length });\n\n    // Store results in database\n    await this.storeResults(job.test_execution_id, results);\n\n    return results;\n  }\n\n  /**\n   * Execute a single test case\n   */\n  private async executeSingleTest(\n    testCase: TestCase,\n    model: string,\n    configuration: TestConfiguration,\n    executionId: string\n  ): Promise<TestExecutionResult> {\n    const startTime = Date.now();\n    const testExecutionId = `${executionId}-${testCase.id}`;\n\n    try {\n      // Parse JSON fields\n      const inputVariables = JSON.parse(testCase.input_variables);\n      const assertions = JSON.parse(testCase.assertions || '[]');\n\n      // Substitute variables in prompt template\n      const prompt = llmService.substituteVariables(testCase.prompt_template, inputVariables);\n\n      // Execute with timeout\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Test execution timeout')), configuration.timeout_per_test || 30000);\n      });\n\n      const executionPromise = llmService.generate(prompt, model);\n      const llmResponse = await Promise.race([executionPromise, timeoutPromise]);\n      const llmOutput = llmResponse.response;\n\n      // Validate assertions\n      const assertionResults = await llmService.validateAssertions(llmOutput, assertions);\n      const allAssertionsPassed = assertionResults.every(result => result.passed);\n\n      const executionTime = Date.now() - startTime;\n\n      const result: TestExecutionResult = {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: allAssertionsPassed,\n        llm_output: llmOutput,\n        assertion_results: assertionResults,\n        execution_time_ms: executionTime,\n        model: llmResponse.model,\n        prompt_used: prompt,\n        created_at: new Date(),\n        metadata: {\n          total_tokens: llmResponse.eval_count || 0,\n          prompt_tokens: llmResponse.prompt_eval_count || 0,\n          completion_tokens: (llmResponse.eval_count || 0) - (llmResponse.prompt_eval_count || 0)\n        }\n      };\n\n      return result;\n\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      return {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: false,\n        llm_output: `ERROR: ${error.message}`,\n        assertion_results: [],\n        execution_time_ms: executionTime,\n        model,\n        prompt_used: 'Error occurred before prompt execution',\n        created_at: new Date(),\n        metadata: { error: error.message }\n      };\n    }\n  }\n\n  /**\n   * Load test cases from database with caching\n   */\n  private async loadTestCases(testCaseIds: number[]): Promise<TestCase[]> {\n    const cacheKey = testCaseIds.sort().join(',');\n    const cached = this.testCaseCache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n    \n    const placeholders = testCaseIds.map(() => '?').join(',');\n    const query = `\n      SELECT \n        tc.*,\n        pc.prompt_template,\n        pc.title as prompt_card_title\n      FROM test_cases tc\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tc.id IN (${placeholders})\n      ORDER BY tc.id ASC\n    `;\n\n    const testCases = db.prepare(query).all(...testCaseIds) as TestCase[];\n    \n    if (testCases.length !== testCaseIds.length) {\n      throw new Error(`Some test cases not found. Expected ${testCaseIds.length}, got ${testCases.length}`);\n    }\n\n    // Cache the result\n    this.testCaseCache.set(cacheKey, testCases);\n    \n    return testCases;\n  }\n\n  /**\n   * Store test results in database\n   */\n  private async storeResults(executionId: string, results: TestExecutionResult[]): Promise<void> {\n    const transaction = db.transaction((results: TestExecutionResult[]) => {\n      const insertStmt = db.prepare(`\n        INSERT INTO test_results (\n          test_case_id, \n          execution_id, \n          llm_output, \n          passed, \n          assertion_results, \n          execution_time_ms,\n          created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      for (const result of results) {\n        insertStmt.run(\n          result.test_case_id,\n          result.execution_id,\n          result.llm_output,\n          result.passed ? 1 : 0,\n          JSON.stringify(result.assertion_results),\n          result.execution_time_ms,\n          result.created_at.toISOString()\n        );\n      }\n    });\n\n    transaction(results);\n  }\n\n  /**\n   * Update execution progress\n   */\n  private updateProgress(\n    executionId: string,\n    percent: number,\n    message: string,\n    currentTest: number,\n    totalTests: number,\n    completedTests: number = 0,\n    failedTests: number = 0\n  ): void {\n    const progress: ExecutionProgress = {\n      job_id: executionId,\n      percent,\n      message,\n      current_test: currentTest,\n      total_tests: totalTests,\n      completed_tests: completedTests,\n      failed_tests: failedTests,\n      updated_at: new Date()\n    };\n\n    this.activeJobs.set(executionId, progress);\n    this.emit('progressUpdated', progress);\n  }\n\n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    // Handle failed jobs\n    this.testQueue.on('failed', (job: Bull.Job<TestJob>, error: Error) => {\n      console.error(`Job ${job.id} failed:`, error);\n      this.emit('jobFailed', { executionId: job.data.test_execution_id, error: error.message });\n    });\n\n    // Handle stalled jobs\n    this.testQueue.on('stalled', (job: Bull.Job<TestJob>) => {\n      console.warn(`Job ${job.id} stalled`);\n      this.emit('jobStalled', { executionId: job.data.test_execution_id });\n    });\n\n    // Handle resource manager events\n    this.resourceManager.on('systemStress', (usage) => {\n      console.warn('System under stress:', usage);\n      this.emit('systemStress', usage);\n    });\n\n    this.resourceManager.on('emergencyThreshold', (event) => {\n      console.error('Emergency threshold reached:', event);\n      this.emit('emergencyThreshold', event);\n    });\n  }\n\n  /**\n   * Optimized parallel test execution\n   */\n  private async executeTestsParallelOptimized(\n    job: TestJob,\n    progressCallback: (progress: {\n      percent: number;\n      message: string;\n      current_test: number;\n      total_tests: number;\n      completed_tests?: number;\n      failed_tests?: number;\n    }) => void\n  ): Promise<TestExecutionResult[]> {\n    const { test_case_ids, model, configuration } = job;\n    \n    // Load test cases with caching\n    const testCases = await this.loadTestCases(test_case_ids);\n    progressCallback({ percent: 10, message: 'Test cases loaded', current_test: 0, total_tests: testCases.length });\n\n    const results: TestExecutionResult[] = new Array(testCases.length);\n    const semaphore = new Semaphore(configuration.max_concurrent_tests);\n    let completedTests = 0;\n    let failedTests = 0;\n\n    // Process tests in batches for better memory management\n    const batchSize = Math.min(configuration.max_concurrent_tests * 2, 20);\n    const batches = [];\n    \n    for (let i = 0; i < testCases.length; i += batchSize) {\n      batches.push(testCases.slice(i, i + batchSize));\n    }\n\n    for (const batch of batches) {\n      const batchPromises = batch.map(async (testCase, batchIndex) => {\n        const release = await semaphore.acquire();\n        const globalIndex = batches.indexOf(batch) * batchSize + batchIndex;\n        \n        try {\n          const result = await this.executeSingleTestOptimized(testCase, model, configuration, job.test_execution_id);\n          results[globalIndex] = result;\n          completedTests++;\n          \n          if (!result.passed) {\n            failedTests++;\n            \n            // Stop on first failure if configured\n            if (configuration.stop_on_first_failure) {\n              throw new Error(`Test failed: ${testCase.name}`);\n            }\n          }\n\n          const progress = ((completedTests) / testCases.length) * 80 + 10;\n          progressCallback({\n            percent: progress,\n            message: `Completed test ${completedTests}/${testCases.length}`,\n            current_test: globalIndex + 1,\n            total_tests: testCases.length,\n            completed_tests: completedTests,\n            failed_tests: failedTests\n          });\n\n        } catch (error) {\n          failedTests++;\n          const errorResult: TestExecutionResult = {\n            execution_id: `${job.test_execution_id}-${testCase.id}`,\n            test_case_id: testCase.id,\n            passed: false,\n            llm_output: `ERROR: ${error.message}`,\n            assertion_results: [],\n            execution_time_ms: 0,\n            model,\n            prompt_used: 'Error occurred before prompt execution',\n            created_at: new Date(),\n            metadata: { error: error.message }\n          };\n          results[globalIndex] = errorResult;\n          \n          if (configuration.stop_on_first_failure) {\n            throw error;\n          }\n        } finally {\n          release();\n        }\n      });\n\n      await Promise.all(batchPromises);\n      \n      // Small delay between batches to prevent overwhelming the system\n      if (batches.indexOf(batch) < batches.length - 1) {\n        await setTimeoutPromise(100);\n      }\n    }\n\n    progressCallback({ percent: 95, message: 'Storing results...', current_test: testCases.length, total_tests: testCases.length });\n\n    // Store results in database using batch insertion\n    await this.storeResultsOptimized(job.test_execution_id, results);\n\n    return results;\n  }\n  \n  /**\n   * Execute a single test case with optimizations\n   */\n  private async executeSingleTestOptimized(\n    testCase: TestCase,\n    model: string,\n    configuration: TestConfiguration,\n    executionId: string\n  ): Promise<TestExecutionResult> {\n    const startTime = performance.now();\n    const testExecutionId = `${executionId}-${testCase.id}`;\n\n    try {\n      // Parse JSON fields with error handling\n      let inputVariables, assertions;\n      try {\n        inputVariables = JSON.parse(testCase.input_variables);\n        assertions = JSON.parse(testCase.assertions || '[]');\n      } catch (parseError) {\n        throw new Error(`Invalid JSON in test case ${testCase.id}: ${parseError.message}`);\n      }\n\n      // Substitute variables in prompt template\n      const prompt = llmService.substituteVariables(testCase.prompt_template, inputVariables);\n\n      // Execute with timeout using Promise.race\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Test execution timeout')), configuration.timeout_per_test || 30000);\n      });\n\n      const executionPromise = llmService.generate(prompt, model);\n      const llmResponse = await Promise.race([executionPromise, timeoutPromise]);\n      const llmOutput = llmResponse.response;\n\n      // Validate assertions\n      const assertionResults = await llmService.validateAssertions(llmOutput, assertions);\n      const allAssertionsPassed = assertionResults.every(result => result.passed);\n\n      const executionTime = performance.now() - startTime;\n\n      const result: TestExecutionResult = {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: allAssertionsPassed,\n        llm_output: llmOutput,\n        assertion_results: assertionResults,\n        execution_time_ms: Math.round(executionTime),\n        model: llmResponse.model,\n        prompt_used: prompt,\n        created_at: new Date(),\n        metadata: {\n          total_tokens: llmResponse.eval_count || 0,\n          prompt_tokens: llmResponse.prompt_eval_count || 0,\n          completion_tokens: (llmResponse.eval_count || 0) - (llmResponse.prompt_eval_count || 0),\n          cache_hit: false // Could be enhanced with actual cache hit detection\n        }\n      };\n\n      return result;\n\n    } catch (error) {\n      const executionTime = performance.now() - startTime;\n      return {\n        execution_id: testExecutionId,\n        test_case_id: testCase.id,\n        passed: false,\n        llm_output: `ERROR: ${error.message}`,\n        assertion_results: [],\n        execution_time_ms: Math.round(executionTime),\n        model,\n        prompt_used: 'Error occurred before prompt execution',\n        created_at: new Date(),\n        metadata: { error: error.message }\n      };\n    }\n  }\n  \n  /**\n   * Store test results with optimized batch insertion\n   */\n  private async storeResultsOptimized(executionId: string, results: TestExecutionResult[]): Promise<void> {\n    const transaction = db.transaction((results: TestExecutionResult[]) => {\n      const insertStmt = db.prepare(`\n        INSERT INTO test_results (\n          test_case_id, \n          execution_id, \n          llm_output, \n          passed, \n          assertion_results, \n          execution_time_ms,\n          model,\n          created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n\n      for (const result of results) {\n        insertStmt.run(\n          result.test_case_id,\n          result.execution_id,\n          result.llm_output,\n          result.passed ? 1 : 0,\n          JSON.stringify(result.assertion_results),\n          result.execution_time_ms,\n          result.model,\n          result.created_at.toISOString()\n        );\n      }\n    });\n\n    transaction(results);\n  }\n  \n  /**\n   * Initialize performance optimizations\n   */\n  private initializeOptimizations(): void {\n    // Pre-warm database connections\n    this.preWarmConnections();\n    \n    // Set up periodic cache cleanup\n    setInterval(() => {\n      this.cleanupCaches();\n    }, 1000 * 60 * 5); // Every 5 minutes\n    \n    console.log('Test queue optimizations initialized');\n  }\n  \n  /**\n   * Pre-warm database connections\n   */\n  private async preWarmConnections(): Promise<void> {\n    try {\n      // Execute a simple query to warm up the connection\n      db.prepare('SELECT 1').get();\n      console.log('Database connections pre-warmed');\n    } catch (error) {\n      console.warn('Failed to pre-warm database connections:', error.message);\n    }\n  }\n  \n  /**\n   * Clean up caches periodically\n   */\n  private cleanupCaches(): void {\n    // Clean up old performance metrics\n    for (const [key, metrics] of this.performanceMetrics) {\n      if (metrics.length > 1000) {\n        this.performanceMetrics.set(key, metrics.slice(-500));\n      }\n    }\n    \n    // Log cache statistics\n    console.log(`Cache stats - Test cases: ${this.testCaseCache.size}/${this.testCaseCache.max}`);\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 60000) { // 1 minute\n      console.warn(`Slow test execution: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg),\n          max: Math.round(max),\n          min: Math.round(min),\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear caches and metrics\n   */\n  public clearCaches(): void {\n    this.testCaseCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Test queue caches cleared');\n  }\n  \n  /**\n   * Initialize the test queue manager\n   */\n  async initialize(): Promise<void> {\n    // Ensure Redis connection and warm up the system\n    await this.preWarmConnections();\n    console.log('TestQueueManager initialized');\n  }\n\n  /**\n   * Cleanup the test queue manager\n   */\n  async cleanup(): Promise<void> {\n    await this.shutdown();\n    console.log('TestQueueManager cleaned up');\n  }\n\n  /**\n   * Set queue limit for concurrent executions\n   */\n  async setQueueLimit(limit: number): Promise<void> {\n    this.defaultConfiguration.max_concurrent_tests = limit;\n    console.log(`Queue limit set to ${limit}`);\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async shutdown(): Promise<void> {\n    await this.testQueue.close();\n    this.resourceManager.destroy();\n    this.removeAllListeners();\n  }\n}"],"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","ignoreList":[]}