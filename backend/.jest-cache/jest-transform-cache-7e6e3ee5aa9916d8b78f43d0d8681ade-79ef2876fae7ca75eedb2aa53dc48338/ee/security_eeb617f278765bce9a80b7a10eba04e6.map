{"version":3,"names":["cov_9dxcld1y5","actualCoverage","helmet_1","s","__importDefault","require","crypto_1","csrfTokens","CSRF_TOKEN_EXPIRY","generateCSRFToken","sessionId","f","token","randomBytes","toString","expires","Date","now","cleanupExpiredCSRFTokens","exports","validateCSRFToken","stored","b","Object","keys","forEach","csrfProtection","req","res","next","includes","method","headers","authorization","startsWith","csrfToken","status","json","success","error","code","getCSRFToken","data","enhancedHelmetConfig","default","contentSecurityPolicy","directives","defaultSrc","scriptSrc","styleSrc","fontSrc","imgSrc","connectSrc","mediaSrc","objectSrc","frameSrc","baseUri","formAction","frameAncestors","crossOriginEmbedderPolicy","policy","crossOriginOpenerPolicy","crossOriginResourcePolicy","dnsPrefetchControl","allow","frameguard","action","hidePoweredBy","hsts","maxAge","includeSubDomains","preload","ieNoOpen","noSniff","originAgentCluster","permittedCrossDomainPolicies","referrerPolicy","xssFilter","requestId","setHeader","securityLogger","startTime","logData","timestamp","toISOString","url","ip","userAgent","console","log","JSON","stringify","securityHeaders","removeHeader","setInterval"],"sources":["/workspaces/prompt-card-system/backend/src/middleware/security.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport helmet from 'helmet';\nimport { randomBytes, createHash } from 'crypto';\n\n// CSRF Protection\ninterface CSRFStore {\n  [sessionId: string]: {\n    token: string;\n    expires: number;\n  };\n}\n\nconst csrfTokens: CSRFStore = {};\nconst CSRF_TOKEN_EXPIRY = 60 * 60 * 1000; // 1 hour\n\n// Generate CSRF token\nexport const generateCSRFToken = (sessionId: string): string => {\n  const token = randomBytes(32).toString('hex');\n  const expires = Date.now() + CSRF_TOKEN_EXPIRY;\n  \n  csrfTokens[sessionId] = { token, expires };\n  \n  // Clean up expired tokens\n  cleanupExpiredCSRFTokens();\n  \n  return token;\n};\n\n// Validate CSRF token\nexport const validateCSRFToken = (sessionId: string, token: string): boolean => {\n  const stored = csrfTokens[sessionId];\n  \n  if (!stored || stored.expires < Date.now()) {\n    delete csrfTokens[sessionId];\n    return false;\n  }\n  \n  return stored.token === token;\n};\n\n// Clean up expired CSRF tokens\nconst cleanupExpiredCSRFTokens = (): void => {\n  const now = Date.now();\n  Object.keys(csrfTokens).forEach(sessionId => {\n    if (csrfTokens[sessionId].expires < now) {\n      delete csrfTokens[sessionId];\n    }\n  });\n};\n\n// CSRF middleware\nexport const csrfProtection = (req: Request, res: Response, next: NextFunction): void => {\n  // Skip CSRF for GET, HEAD, OPTIONS requests\n  if (['GET', 'HEAD', 'OPTIONS'].includes(req.method)) {\n    next();\n    return;\n  }\n  \n  // Skip CSRF for API endpoints that use Bearer token authentication\n  if (req.headers.authorization?.startsWith('Bearer ')) {\n    next();\n    return;\n  }\n  \n  const sessionId = req.headers['x-session-id'] as string;\n  const csrfToken = req.headers['x-csrf-token'] as string;\n  \n  if (!sessionId || !csrfToken || !validateCSRFToken(sessionId, csrfToken)) {\n    res.status(403).json({\n      success: false,\n      error: 'Invalid or missing CSRF token',\n      code: 'CSRF_TOKEN_INVALID'\n    });\n    return;\n  }\n  \n  next();\n};\n\n// Generate CSRF token endpoint\nexport const getCSRFToken = (req: Request, res: Response): void => {\n  const sessionId = req.headers['x-session-id'] as string || randomBytes(16).toString('hex');\n  const token = generateCSRFToken(sessionId);\n  \n  res.json({\n    success: true,\n    data: {\n      csrfToken: token,\n      sessionId: sessionId\n    }\n  });\n};\n\n// Enhanced Helmet configuration\nexport const enhancedHelmetConfig = helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdnjs.cloudflare.com\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\", \"data:\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n      connectSrc: [\"'self'\", \"ws:\", \"wss:\", \"http://localhost:*\"],\n      mediaSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      frameSrc: [\"'none'\"],\n      baseUri: [\"'self'\"],\n      formAction: [\"'self'\"],\n      frameAncestors: [\"'none'\"]\n    }\n  },\n  crossOriginEmbedderPolicy: { policy: 'credentialless' },\n  crossOriginOpenerPolicy: { policy: 'same-origin' },\n  crossOriginResourcePolicy: { policy: 'cross-origin' },\n  dnsPrefetchControl: { allow: false },\n  frameguard: { action: 'deny' },\n  hidePoweredBy: true,\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  },\n  ieNoOpen: true,\n  noSniff: true,\n  originAgentCluster: true,\n  permittedCrossDomainPolicies: false,\n  referrerPolicy: { policy: 'no-referrer' },\n  xssFilter: true\n});\n\n// Request ID middleware for tracing\nexport const requestId = (req: Request, res: Response, next: NextFunction): void => {\n  const requestId = req.headers['x-request-id'] as string || randomBytes(16).toString('hex');\n  req.headers['x-request-id'] = requestId;\n  res.setHeader('x-request-id', requestId);\n  next();\n};\n\n// Request logging middleware with security context\nexport const securityLogger = (req: Request, res: Response, next: NextFunction): void => {\n  const startTime = Date.now();\n  \n  const logData = {\n    timestamp: new Date().toISOString(),\n    method: req.method,\n    url: req.url,\n    ip: req.ip,\n    userAgent: req.headers['user-agent'],\n    requestId: req.headers['x-request-id']\n  };\n  \n  console.log('Security Log - Request:', JSON.stringify(logData));\n  \n  next();\n};\n\n// Security headers middleware\nexport const securityHeaders = (req: Request, res: Response, next: NextFunction): void => {\n  res.setHeader('X-Frame-Options', 'DENY');\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n  res.setHeader('Pragma', 'no-cache');\n  res.setHeader('Expires', '0');\n  res.removeHeader('X-Powered-By');\n  \n  next();\n};\n\n// Clean up security resources periodically\nsetInterval(() => {\n  cleanupExpiredCSRFTokens();\n}, 60 * 60 * 1000); // Clean up every hour"],"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","ignoreList":[]}