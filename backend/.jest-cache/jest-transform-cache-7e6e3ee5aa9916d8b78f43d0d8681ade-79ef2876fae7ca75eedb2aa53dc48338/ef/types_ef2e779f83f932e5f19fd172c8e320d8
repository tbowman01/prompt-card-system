8674b096a41173b95c8f9109c403a86b
"use strict";

/* istanbul ignore next */
function cov_p3rolxk90() {
  var path = "/workspaces/prompt-card-system/backend/src/services/models/types.ts";
  var hash = "bf72ac162c6a3cae41e157d1b24df568cff0b2cd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/models/types.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/models/types.ts",
      mappings: "",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/models/types.ts"],
      sourcesContent: ["export interface ModelInfo {\n  name: string;\n  size: number;\n  format: string;\n  modified_at: string;\n  details: {\n    parent_model: string;\n    format: string;\n    family: string;\n    families: string[];\n    parameter_size: string;\n    quantization_level: string;\n  };\n}\n\nexport interface ModelMetrics {\n  modelName: string;\n  averageResponseTime: number;\n  successRate: number;\n  errorRate: number;\n  tokensPerSecond: number;\n  lastUpdated: Date;\n  totalRequests: number;\n  failedRequests: number;\n  averageTokens: number;\n  peakMemoryUsage: number;\n  cpuUsage: number;\n}\n\nexport interface ModelHealthStatus {\n  modelName: string;\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  lastHealthCheck: Date;\n  responseTime: number;\n  errorCount: number;\n  healthScore: number; // 0-100\n  issues: string[];\n  uptime: number;\n}\n\nexport interface ModelBenchmarkResult {\n  modelName: string;\n  testName: string;\n  averageResponseTime: number;\n  throughput: number;\n  accuracy: number;\n  errorRate: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  testDate: Date;\n  sampleSize: number;\n  configuration: Record<string, any>;\n}\n\nexport interface ModelPerformanceConfig {\n  healthCheckInterval: number;\n  benchmarkInterval: number;\n  maxResponseTime: number;\n  maxErrorRate: number;\n  minHealthScore: number;\n  alertThresholds: {\n    responseTime: number;\n    errorRate: number;\n    memoryUsage: number;\n  };\n}\n\nexport interface ModelSelectionCriteria {\n  maxResponseTime?: number;\n  minAccuracy?: number;\n  maxMemoryUsage?: number;\n  preferredModels?: string[];\n  taskType?: 'general' | 'coding' | 'creative' | 'analytical';\n  complexityLevel?: 'simple' | 'moderate' | 'complex';\n}\n\nexport interface ModelRecommendation {\n  modelName: string;\n  confidence: number;\n  reasons: string[];\n  estimatedPerformance: {\n    responseTime: number;\n    accuracy: number;\n    resourceUsage: number;\n  };\n}\n\nexport interface ModelSwitchContext {\n  currentModel: string;\n  targetModel: string;\n  preserveContext?: boolean;\n  warmupPrompts?: string[];\n  rollbackConditions?: {\n    maxErrors: number;\n    maxResponseTime: number;\n    timeoutMinutes: number;\n  };\n}\n\nexport interface ModelLoadStatus {\n  modelName: string;\n  status: 'loading' | 'loaded' | 'failed' | 'unloaded';\n  loadTime: number;\n  memoryUsage: number;\n  readyForRequests: boolean;\n  lastActivity: Date;\n}\n\nexport interface ModelCapabilities {\n  modelName: string;\n  maxTokens: number;\n  supportedFormats: string[];\n  languages: string[];\n  specializations: string[];\n  contextWindow: number;\n  supportsStreaming: boolean;\n  supportsEmbeddings: boolean;\n  supportsCodeGeneration: boolean;\n  supportsImageProcessing: boolean;\n}\n\nexport interface ModelComparison {\n  models: string[];\n  metrics: {\n    responseTime: Record<string, number>;\n    accuracy: Record<string, number>;\n    resourceUsage: Record<string, number>;\n    reliability: Record<string, number>;\n  };\n  recommendations: string[];\n  bestForTasks: Record<string, string[]>;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bf72ac162c6a3cae41e157d1b24df568cff0b2cd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_p3rolxk90 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_p3rolxk90();
cov_p3rolxk90().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvcHJvbXB0LWNhcmQtc3lzdGVtL2JhY2tlbmQvc3JjL3NlcnZpY2VzL21vZGVscy90eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIE1vZGVsSW5mbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2l6ZTogbnVtYmVyO1xuICBmb3JtYXQ6IHN0cmluZztcbiAgbW9kaWZpZWRfYXQ6IHN0cmluZztcbiAgZGV0YWlsczoge1xuICAgIHBhcmVudF9tb2RlbDogc3RyaW5nO1xuICAgIGZvcm1hdDogc3RyaW5nO1xuICAgIGZhbWlseTogc3RyaW5nO1xuICAgIGZhbWlsaWVzOiBzdHJpbmdbXTtcbiAgICBwYXJhbWV0ZXJfc2l6ZTogc3RyaW5nO1xuICAgIHF1YW50aXphdGlvbl9sZXZlbDogc3RyaW5nO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsTWV0cmljcyB7XG4gIG1vZGVsTmFtZTogc3RyaW5nO1xuICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gIHN1Y2Nlc3NSYXRlOiBudW1iZXI7XG4gIGVycm9yUmF0ZTogbnVtYmVyO1xuICB0b2tlbnNQZXJTZWNvbmQ6IG51bWJlcjtcbiAgbGFzdFVwZGF0ZWQ6IERhdGU7XG4gIHRvdGFsUmVxdWVzdHM6IG51bWJlcjtcbiAgZmFpbGVkUmVxdWVzdHM6IG51bWJlcjtcbiAgYXZlcmFnZVRva2VuczogbnVtYmVyO1xuICBwZWFrTWVtb3J5VXNhZ2U6IG51bWJlcjtcbiAgY3B1VXNhZ2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbEhlYWx0aFN0YXR1cyB7XG4gIG1vZGVsTmFtZTogc3RyaW5nO1xuICBzdGF0dXM6ICdoZWFsdGh5JyB8ICdkZWdyYWRlZCcgfCAndW5oZWFsdGh5JyB8ICdvZmZsaW5lJztcbiAgbGFzdEhlYWx0aENoZWNrOiBEYXRlO1xuICByZXNwb25zZVRpbWU6IG51bWJlcjtcbiAgZXJyb3JDb3VudDogbnVtYmVyO1xuICBoZWFsdGhTY29yZTogbnVtYmVyOyAvLyAwLTEwMFxuICBpc3N1ZXM6IHN0cmluZ1tdO1xuICB1cHRpbWU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbEJlbmNobWFya1Jlc3VsdCB7XG4gIG1vZGVsTmFtZTogc3RyaW5nO1xuICB0ZXN0TmFtZTogc3RyaW5nO1xuICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gIHRocm91Z2hwdXQ6IG51bWJlcjtcbiAgYWNjdXJhY3k6IG51bWJlcjtcbiAgZXJyb3JSYXRlOiBudW1iZXI7XG4gIG1lbW9yeVVzYWdlOiBudW1iZXI7XG4gIGNwdVVzYWdlOiBudW1iZXI7XG4gIHRlc3REYXRlOiBEYXRlO1xuICBzYW1wbGVTaXplOiBudW1iZXI7XG4gIGNvbmZpZ3VyYXRpb246IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxQZXJmb3JtYW5jZUNvbmZpZyB7XG4gIGhlYWx0aENoZWNrSW50ZXJ2YWw6IG51bWJlcjtcbiAgYmVuY2htYXJrSW50ZXJ2YWw6IG51bWJlcjtcbiAgbWF4UmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gIG1heEVycm9yUmF0ZTogbnVtYmVyO1xuICBtaW5IZWFsdGhTY29yZTogbnVtYmVyO1xuICBhbGVydFRocmVzaG9sZHM6IHtcbiAgICByZXNwb25zZVRpbWU6IG51bWJlcjtcbiAgICBlcnJvclJhdGU6IG51bWJlcjtcbiAgICBtZW1vcnlVc2FnZTogbnVtYmVyO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsU2VsZWN0aW9uQ3JpdGVyaWEge1xuICBtYXhSZXNwb25zZVRpbWU/OiBudW1iZXI7XG4gIG1pbkFjY3VyYWN5PzogbnVtYmVyO1xuICBtYXhNZW1vcnlVc2FnZT86IG51bWJlcjtcbiAgcHJlZmVycmVkTW9kZWxzPzogc3RyaW5nW107XG4gIHRhc2tUeXBlPzogJ2dlbmVyYWwnIHwgJ2NvZGluZycgfCAnY3JlYXRpdmUnIHwgJ2FuYWx5dGljYWwnO1xuICBjb21wbGV4aXR5TGV2ZWw/OiAnc2ltcGxlJyB8ICdtb2RlcmF0ZScgfCAnY29tcGxleCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxSZWNvbW1lbmRhdGlvbiB7XG4gIG1vZGVsTmFtZTogc3RyaW5nO1xuICBjb25maWRlbmNlOiBudW1iZXI7XG4gIHJlYXNvbnM6IHN0cmluZ1tdO1xuICBlc3RpbWF0ZWRQZXJmb3JtYW5jZToge1xuICAgIHJlc3BvbnNlVGltZTogbnVtYmVyO1xuICAgIGFjY3VyYWN5OiBudW1iZXI7XG4gICAgcmVzb3VyY2VVc2FnZTogbnVtYmVyO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsU3dpdGNoQ29udGV4dCB7XG4gIGN1cnJlbnRNb2RlbDogc3RyaW5nO1xuICB0YXJnZXRNb2RlbDogc3RyaW5nO1xuICBwcmVzZXJ2ZUNvbnRleHQ/OiBib29sZWFuO1xuICB3YXJtdXBQcm9tcHRzPzogc3RyaW5nW107XG4gIHJvbGxiYWNrQ29uZGl0aW9ucz86IHtcbiAgICBtYXhFcnJvcnM6IG51bWJlcjtcbiAgICBtYXhSZXNwb25zZVRpbWU6IG51bWJlcjtcbiAgICB0aW1lb3V0TWludXRlczogbnVtYmVyO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsTG9hZFN0YXR1cyB7XG4gIG1vZGVsTmFtZTogc3RyaW5nO1xuICBzdGF0dXM6ICdsb2FkaW5nJyB8ICdsb2FkZWQnIHwgJ2ZhaWxlZCcgfCAndW5sb2FkZWQnO1xuICBsb2FkVGltZTogbnVtYmVyO1xuICBtZW1vcnlVc2FnZTogbnVtYmVyO1xuICByZWFkeUZvclJlcXVlc3RzOiBib29sZWFuO1xuICBsYXN0QWN0aXZpdHk6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxDYXBhYmlsaXRpZXMge1xuICBtb2RlbE5hbWU6IHN0cmluZztcbiAgbWF4VG9rZW5zOiBudW1iZXI7XG4gIHN1cHBvcnRlZEZvcm1hdHM6IHN0cmluZ1tdO1xuICBsYW5ndWFnZXM6IHN0cmluZ1tdO1xuICBzcGVjaWFsaXphdGlvbnM6IHN0cmluZ1tdO1xuICBjb250ZXh0V2luZG93OiBudW1iZXI7XG4gIHN1cHBvcnRzU3RyZWFtaW5nOiBib29sZWFuO1xuICBzdXBwb3J0c0VtYmVkZGluZ3M6IGJvb2xlYW47XG4gIHN1cHBvcnRzQ29kZUdlbmVyYXRpb246IGJvb2xlYW47XG4gIHN1cHBvcnRzSW1hZ2VQcm9jZXNzaW5nOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsQ29tcGFyaXNvbiB7XG4gIG1vZGVsczogc3RyaW5nW107XG4gIG1ldHJpY3M6IHtcbiAgICByZXNwb25zZVRpbWU6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gICAgYWNjdXJhY3k6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gICAgcmVzb3VyY2VVc2FnZTogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgICByZWxpYWJpbGl0eTogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgfTtcbiAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcbiAgYmVzdEZvclRhc2tzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT47XG59Il0sIm1hcHBpbmdzIjoiIiwiaWdub3JlTGlzdCI6W119