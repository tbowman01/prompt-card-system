{"version":3,"names":[],"sources":["/workspaces/prompt-card-system/backend/src/services/models/types.ts"],"sourcesContent":["export interface ModelInfo {\n  name: string;\n  size: number;\n  format: string;\n  modified_at: string;\n  details: {\n    parent_model: string;\n    format: string;\n    family: string;\n    families: string[];\n    parameter_size: string;\n    quantization_level: string;\n  };\n}\n\nexport interface ModelMetrics {\n  modelName: string;\n  averageResponseTime: number;\n  successRate: number;\n  errorRate: number;\n  tokensPerSecond: number;\n  lastUpdated: Date;\n  totalRequests: number;\n  failedRequests: number;\n  averageTokens: number;\n  peakMemoryUsage: number;\n  cpuUsage: number;\n}\n\nexport interface ModelHealthStatus {\n  modelName: string;\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'offline';\n  lastHealthCheck: Date;\n  responseTime: number;\n  errorCount: number;\n  healthScore: number; // 0-100\n  issues: string[];\n  uptime: number;\n}\n\nexport interface ModelBenchmarkResult {\n  modelName: string;\n  testName: string;\n  averageResponseTime: number;\n  throughput: number;\n  accuracy: number;\n  errorRate: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  testDate: Date;\n  sampleSize: number;\n  configuration: Record<string, any>;\n}\n\nexport interface ModelPerformanceConfig {\n  healthCheckInterval: number;\n  benchmarkInterval: number;\n  maxResponseTime: number;\n  maxErrorRate: number;\n  minHealthScore: number;\n  alertThresholds: {\n    responseTime: number;\n    errorRate: number;\n    memoryUsage: number;\n  };\n}\n\nexport interface ModelSelectionCriteria {\n  maxResponseTime?: number;\n  minAccuracy?: number;\n  maxMemoryUsage?: number;\n  preferredModels?: string[];\n  taskType?: 'general' | 'coding' | 'creative' | 'analytical';\n  complexityLevel?: 'simple' | 'moderate' | 'complex';\n}\n\nexport interface ModelRecommendation {\n  modelName: string;\n  confidence: number;\n  reasons: string[];\n  estimatedPerformance: {\n    responseTime: number;\n    accuracy: number;\n    resourceUsage: number;\n  };\n}\n\nexport interface ModelSwitchContext {\n  currentModel: string;\n  targetModel: string;\n  preserveContext?: boolean;\n  warmupPrompts?: string[];\n  rollbackConditions?: {\n    maxErrors: number;\n    maxResponseTime: number;\n    timeoutMinutes: number;\n  };\n}\n\nexport interface ModelLoadStatus {\n  modelName: string;\n  status: 'loading' | 'loaded' | 'failed' | 'unloaded';\n  loadTime: number;\n  memoryUsage: number;\n  readyForRequests: boolean;\n  lastActivity: Date;\n}\n\nexport interface ModelCapabilities {\n  modelName: string;\n  maxTokens: number;\n  supportedFormats: string[];\n  languages: string[];\n  specializations: string[];\n  contextWindow: number;\n  supportsStreaming: boolean;\n  supportsEmbeddings: boolean;\n  supportsCodeGeneration: boolean;\n  supportsImageProcessing: boolean;\n}\n\nexport interface ModelComparison {\n  models: string[];\n  metrics: {\n    responseTime: Record<string, number>;\n    accuracy: Record<string, number>;\n    resourceUsage: Record<string, number>;\n    reliability: Record<string, number>;\n  };\n  recommendations: string[];\n  bestForTasks: Record<string, string[]>;\n}"],"mappings":"","ignoreList":[]}